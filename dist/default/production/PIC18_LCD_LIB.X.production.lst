

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 02 17:52:50 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    90  0000                     
    91                           ; Version 1.40
    92                           ; Generated 01/12/2016 GMT
    93                           ; 
    94                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F4620 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     
   126                           	psect	idataCOMRAM
   127  003CE8                     __pidataCOMRAM:
   128                           	opt stack 0
   129                           
   130                           ;initializer for _V_LIM_9V
   131  003CE8  77                 	db	119
   132  003CE9  EE                 	db	238
   133  003CEA  3F                 	db	63
   134                           
   135                           ;initializer for _V_LIM_AA
   136  003CEB  C1                 	db	193
   137  003CEC  4A                 	db	74
   138  003CED  3E                 	db	62
   139                           
   140                           ;initializer for _V_LIM_C
   141  003CEE  A7                 	db	167
   142  003CEF  A9                 	db	169
   143  003CF0  3F                 	db	63
   144                           
   145                           ;initializer for _angle
   146  003CF1  005A               	dw	90
   147                           
   148                           ;initializer for _padAngle_OPEN
   149  003CF3  00B4               	dw	180
   150                           
   151                           ;initializer for _redirectAngle_9V
   152  003CF5  0076               	dw	118
   153                           
   154                           ;initializer for _AA_float
   155  003CF7  0002               	dw	2
   156  003CF9  0005               	dw	5
   157                           
   158                           ;initializer for _padPin1
   159  003CFB  0002               	dw	2
   160  003CFD  0006               	dw	6
   161                           
   162                           	psect	idataBANK0
   163  003D5A                     __pidataBANK0:
   164                           	opt stack 0
   165                           
   166                           ;initializer for _padAngle_CLOSE
   167  003D5A  001E               	dw	30
   168                           
   169                           ;initializer for _redirectAngle_C
   170  003D5C  00A6               	dw	166
   171                           
   172                           ;initializer for _redirectAngle_OTHER
   173  003D5E  0099               	dw	153
   174                           
   175                           	psect	idataBANK1
   176  003C92                     __pidataBANK1:
   177                           	opt stack 0
   178                           
   179                           ;initializer for _padAngle_NEUTRAL
   180  003C92  004C               	dw	76
   181                           
   182                           ;initializer for _redirectAngle_AA
   183  003C94  008A               	dw	138
   184                           
   185                           ;initializer for _stoppingTime
   186  003C96  2710               	dw	10000
   187                           
   188                           ;initializer for _conveyorServo
   189  003C98  0002               	dw	2
   190  003C9A  0002               	dw	2
   191                           
   192                           ;initializer for _cylinderDir
   193  003C9C  0003               	dw	3
   194  003C9E  0001               	dw	1
   195                           
   196                           ;initializer for _cylinderMotor
   197  003CA0  0002               	dw	2
   198  003CA2  0000               	dw	0
   199                           
   200                           ;initializer for _padPin2
   201  003CA4  0002               	dw	2
   202  003CA6  0007               	dw	7
   203                           
   204                           ;initializer for _padServo
   205  003CA8  0002               	dw	2
   206  003CAA  0001               	dw	1
   207                           
   208                           ;initializer for _redirectingServo
   209  003CAC  0003               	dw	3
   210  003CAE  0000               	dw	0
   211                           
   212                           	psect	mediumconst
   213  00FE2A                     __pmediumconst:
   214                           	opt stack 0
   215  00FE2A  00                 	db	0
   216  00FE2B                     _dpowers:
   217                           	opt stack 0
   218  00FE2B  0001               	dw	1
   219  00FE2D  0000               	dw	0
   220  00FE2F  000A               	dw	10
   221  00FE31  0000               	dw	0
   222  00FE33  0064               	dw	100
   223  00FE35  0000               	dw	0
   224  00FE37  03E8               	dw	1000
   225  00FE39  0000               	dw	0
   226  00FE3B  2710               	dw	10000
   227  00FE3D  0000               	dw	0
   228  00FE3F  86A0               	dw	34464
   229  00FE41  0001               	dw	1
   230  00FE43  4240               	dw	16960
   231  00FE45  000F               	dw	15
   232  00FE47  9680               	dw	38528
   233  00FE49  0098               	dw	152
   234  00FE4B  E100               	dw	57600
   235  00FE4D  05F5               	dw	1525
   236  00FE4F  CA00               	dw	51712
   237  00FE51  3B9A               	dw	15258
   238  00FE53                     __end_of_dpowers:
   239                           	opt stack 0
   240  00FE53                     __npowers_:
   241                           	opt stack 0
   242  00FE53  00                 	db	0
   243  00FE54  80                 	db	128
   244  00FE55  3F                 	db	63
   245  00FE56  CD                 	db	205
   246  00FE57  CC                 	db	204
   247  00FE58  3D                 	db	61
   248  00FE59  D7                 	db	215
   249  00FE5A  23                 	db	35
   250  00FE5B  3C                 	db	60
   251  00FE5C  12                 	db	18
   252  00FE5D  83                 	db	131
   253  00FE5E  3A                 	db	58
   254  00FE5F  B7                 	db	183
   255  00FE60  D1                 	db	209
   256  00FE61  38                 	db	56
   257  00FE62  C6                 	db	198
   258  00FE63  27                 	db	39
   259  00FE64  37                 	db	55
   260  00FE65  38                 	db	56
   261  00FE66  86                 	db	134
   262  00FE67  35                 	db	53
   263  00FE68  C0                 	db	192
   264  00FE69  D6                 	db	214
   265  00FE6A  33                 	db	51
   266  00FE6B  CC                 	db	204
   267  00FE6C  2B                 	db	43
   268  00FE6D  32                 	db	50
   269  00FE6E  70                 	db	112
   270  00FE6F  89                 	db	137
   271  00FE70  30                 	db	48
   272  00FE71  E7                 	db	231
   273  00FE72  DB                 	db	219
   274  00FE73  2E                 	db	46
   275  00FE74  E5                 	db	229
   276  00FE75  3C                 	db	60
   277  00FE76  1E                 	db	30
   278  00FE77  42                 	db	66
   279  00FE78  A2                 	db	162
   280  00FE79  0D                 	db	13
   281  00FE7A                     __end_of__npowers_:
   282                           	opt stack 0
   283  00FE7A                     __powers_:
   284                           	opt stack 0
   285  00FE7A  00                 	db	0
   286  00FE7B  80                 	db	128
   287  00FE7C  3F                 	db	63
   288  00FE7D  00                 	db	0
   289  00FE7E  20                 	db	32
   290  00FE7F  41                 	db	65
   291  00FE80  00                 	db	0
   292  00FE81  C8                 	db	200
   293  00FE82  42                 	db	66
   294  00FE83  00                 	db	0
   295  00FE84  7A                 	db	122
   296  00FE85  44                 	db	68
   297  00FE86  40                 	db	64
   298  00FE87  1C                 	db	28
   299  00FE88  46                 	db	70
   300  00FE89  50                 	db	80
   301  00FE8A  C3                 	db	195
   302  00FE8B  47                 	db	71
   303  00FE8C  24                 	db	36
   304  00FE8D  74                 	db	116
   305  00FE8E  49                 	db	73
   306  00FE8F  97                 	db	151
   307  00FE90  18                 	db	24
   308  00FE91  4B                 	db	75
   309  00FE92  BC                 	db	188
   310  00FE93  BE                 	db	190
   311  00FE94  4C                 	db	76
   312  00FE95  6B                 	db	107
   313  00FE96  6E                 	db	110
   314  00FE97  4E                 	db	78
   315  00FE98  03                 	db	3
   316  00FE99  15                 	db	21
   317  00FE9A  50                 	db	80
   318  00FE9B  79                 	db	121
   319  00FE9C  AD                 	db	173
   320  00FE9D  60                 	db	96
   321  00FE9E  F3                 	db	243
   322  00FE9F  49                 	db	73
   323  00FEA0  71                 	db	113
   324  00FEA1                     __end_of__powers_:
   325                           	opt stack 0
   326  00FEA1                     _hexpowers:
   327                           	opt stack 0
   328  00FEA1  0001               	dw	1
   329  00FEA3  0000               	dw	0
   330  00FEA5  0010               	dw	16
   331  00FEA7  0000               	dw	0
   332  00FEA9  0100               	dw	256
   333  00FEAB  0000               	dw	0
   334  00FEAD  1000               	dw	4096
   335  00FEAF  0000               	dw	0
   336  00FEB1  0000               	dw	0
   337  00FEB3  0001               	dw	1
   338  00FEB5  0000               	dw	0
   339  00FEB7  0010               	dw	16
   340  00FEB9  0000               	dw	0
   341  00FEBB  0100               	dw	256
   342  00FEBD  0000               	dw	0
   343  00FEBF  1000               	dw	4096
   344  00FEC1                     __end_of_hexpowers:
   345                           	opt stack 0
   346  00FEC1                     _keys:
   347                           	opt stack 0
   348  00FEC1  31                 	db	49
   349  00FEC2  32                 	db	50
   350  00FEC3  33                 	db	51
   351  00FEC4  41                 	db	65
   352  00FEC5  34                 	db	52
   353  00FEC6  35                 	db	53
   354  00FEC7  36                 	db	54
   355  00FEC8  42                 	db	66
   356  00FEC9  37                 	db	55
   357  00FECA  38                 	db	56
   358  00FECB  39                 	db	57
   359  00FECC  43                 	db	67
   360  00FECD  2A                 	db	42
   361  00FECE  30                 	db	48
   362  00FECF  23                 	db	35
   363  00FED0  44                 	db	68
   364  00FED1  00                 	db	0
   365  00FED2                     __end_of_keys:
   366                           	opt stack 0
   367  00FED2                     _happynewyear:
   368                           	opt stack 0
   369  00FED2  50                 	db	80
   370  00FED3  59                 	db	89
   371  00FED4  23                 	db	35
   372  00FED5  01                 	db	1
   373  00FED6  02                 	db	2
   374  00FED7  04                 	db	4
   375  00FED8  17                 	db	23
   376  00FED9                     __end_of_happynewyear:
   377                           	opt stack 0
   378  0000                     _ADCON0	set	4034
   379  0000                     _ADCON1	set	4033
   380  0000                     _ADCON2	set	4032
   381  0000                     _ADRESH	set	4036
   382  0000                     _ADRESL	set	4035
   383  0000                     _EEADR	set	4009
   384  0000                     _EEADRH	set	4010
   385  0000                     _EECON1	set	4006
   386  0000                     _EECON2	set	4007
   387  0000                     _EEDATA	set	4008
   388  0000                     _INTCONbits	set	4082
   389  0000                     _LATA	set	3977
   390  0000                     _LATB	set	3978
   391  0000                     _LATC	set	3979
   392  0000                     _LATD	set	3980
   393  0000                     _LATDbits	set	3980
   394  0000                     _LATE	set	3981
   395  0000                     _PORTA	set	3968
   396  0000                     _PORTB	set	3969
   397  0000                     _PORTBbits	set	3969
   398  0000                     _PORTC	set	3970
   399  0000                     _PORTD	set	3971
   400  0000                     _SSPADD	set	4040
   401  0000                     _SSPBUF	set	4041
   402  0000                     _SSPCON1	set	4038
   403  0000                     _SSPCON2	set	4037
   404  0000                     _SSPSTAT	set	4039
   405  0000                     _T0CON	set	4053
   406  0000                     _T1CON	set	4045
   407  0000                     _T3CON	set	4017
   408  0000                     _TMR0H	set	4055
   409  0000                     _TMR0L	set	4054
   410  0000                     _TMR1H	set	4047
   411  0000                     _TMR1L	set	4046
   412  0000                     _TMR3H	set	4019
   413  0000                     _TMR3L	set	4018
   414  0000                     _TRISA	set	3986
   415  0000                     _TRISB	set	3987
   416  0000                     _TRISC	set	3988
   417  0000                     _TRISD	set	3989
   418  0000                     _TRISE	set	3990
   419  0000                     _ACKDT	set	32301
   420  0000                     _ACKEN	set	32300
   421  0000                     _EEIF	set	32012
   422  0000                     _INT0IE	set	32660
   423  0000                     _INT0IF	set	32657
   424  0000                     _INT1IE	set	32643
   425  0000                     _INT1IF	set	32640
   426  0000                     _PEIE	set	32662
   427  0000                     _PEN	set	32298
   428  0000                     _RCEN	set	32299
   429  0000                     _RSEN	set	32297
   430  0000                     _SEN	set	32296
   431  0000                     _TMR0IE	set	32661
   432  0000                     _TMR0IF	set	32658
   433  0000                     _TMR1IE	set	31976
   434  0000                     _TMR1IF	set	31984
   435  0000                     _TMR3IE	set	32001
   436  0000                     _TRISC3	set	31907
   437  0000                     _TRISC4	set	31908
   438  00FED9                     STR_15:
   439  00FED9  25                 	db	37
   440  00FEDA  63                 	db	99	;'c'
   441  00FEDB  29                 	db	41
   442  00FEDC  20                 	db	32
   443  00FEDD  74                 	db	116	;'t'
   444  00FEDE  69                 	db	105	;'i'
   445  00FEDF  6D                 	db	109	;'m'
   446  00FEE0  65                 	db	101	;'e'
   447  00FEE1  20                 	db	32
   448  00FEE2  20                 	db	32
   449  00FEE3  3C                 	db	60	;'<'
   450  00FEE4  41                 	db	65	;'A'
   451  00FEE5  20                 	db	32
   452  00FEE6  20                 	db	32
   453  00FEE7  20                 	db	32
   454  00FEE8  20                 	db	32
   455  00FEE9  20                 	db	32
   456  00FEEA  0A                 	db	10
   457  00FEEB  00                 	db	0
   458  00FEEC                     STR_17:
   459  00FEEC  74                 	db	116	;'t'
   460  00FEED  69                 	db	105	;'i'
   461  00FEEE  6D                 	db	109	;'m'
   462  00FEEF  65                 	db	101	;'e'
   463  00FEF0  3A                 	db	58	;':'
   464  00FEF1  20                 	db	32
   465  00FEF2  25                 	db	37
   466  00FEF3  2E                 	db	46
   467  00FEF4  31                 	db	49	;'1'
   468  00FEF5  66                 	db	102	;'f'
   469  00FEF6  20                 	db	32
   470  00FEF7  73                 	db	115	;'s'
   471  00FEF8  65                 	db	101	;'e'
   472  00FEF9  63                 	db	99	;'c'
   473  00FEFA  20                 	db	32
   474  00FEFB  20                 	db	32
   475  00FEFC  20                 	db	32
   476  00FEFD  0A                 	db	10
   477  00FEFE  00                 	db	0
   478  00FEFF                     STR_20:
   479  00FEFF  5B                 	db	91	;'['
   480  00FF00  25                 	db	37
   481  00FF01  64                 	db	100	;'d'
   482  00FF02  2C                 	db	44
   483  00FF03  25                 	db	37
   484  00FF04  64                 	db	100	;'d'
   485  00FF05  2C                 	db	44
   486  00FF06  25                 	db	37
   487  00FF07  64                 	db	100	;'d'
   488  00FF08  2C                 	db	44
   489  00FF09  25                 	db	37
   490  00FF0A  64                 	db	100	;'d'
   491  00FF0B  5D                 	db	93	;']'
   492  00FF0C  20                 	db	32
   493  00FF0D  20                 	db	32
   494  00FF0E  20                 	db	32
   495  00FF0F  2A                 	db	42
   496  00FF10  3E                 	db	62	;'>'
   497  00FF11  00                 	db	0
   498  00FF12                     STR_11:
   499  00FF12  73                 	db	115	;'s'
   500  00FF13  74                 	db	116	;'t'
   501  00FF14  61                 	db	97	;'a'
   502  00FF15  72                 	db	114	;'r'
   503  00FF16  74                 	db	116	;'t'
   504  00FF17  20                 	db	32
   505  00FF18  20                 	db	32
   506  00FF19  20                 	db	32
   507  00FF1A  3C                 	db	60	;'<'
   508  00FF1B  42                 	db	66	;'B'
   509  00FF1C  20                 	db	32
   510  00FF1D  20                 	db	32
   511  00FF1E  20                 	db	32
   512  00FF1F  20                 	db	32
   513  00FF20  20                 	db	32
   514  00FF21  20                 	db	32
   515  00FF22  0A                 	db	10
   516  00FF23  00                 	db	0
   517  00FF24                     STR_13:
   518  00FF24  73                 	db	115	;'s'
   519  00FF25  65                 	db	101	;'e'
   520  00FF26  6C                 	db	108	;'l'
   521  00FF27  65                 	db	101	;'e'
   522  00FF28  63                 	db	99	;'c'
   523  00FF29  74                 	db	116	;'t'
   524  00FF2A  20                 	db	32
   525  00FF2B  72                 	db	114	;'r'
   526  00FF2C  75                 	db	117	;'u'
   527  00FF2D  6E                 	db	110	;'n'
   528  00FF2E  3A                 	db	58	;':'
   529  00FF2F  20                 	db	32
   530  00FF30  20                 	db	32
   531  00FF31  20                 	db	32
   532  00FF32  20                 	db	32
   533  00FF33  20                 	db	32
   534  00FF34  0A                 	db	10
   535  00FF35  00                 	db	0
   536  00FF36                     STR_19:
   537  00FF36  5B                 	db	91	;'['
   538  00FF37  41                 	db	65	;'A'
   539  00FF38  41                 	db	65	;'A'
   540  00FF39  2C                 	db	44
   541  00FF3A  39                 	db	57	;'9'
   542  00FF3B  56                 	db	86	;'V'
   543  00FF3C  2C                 	db	44
   544  00FF3D  43                 	db	67	;'C'
   545  00FF3E  2C                 	db	44
   546  00FF3F  6F                 	db	111	;'o'
   547  00FF40  74                 	db	116	;'t'
   548  00FF41  68                 	db	104	;'h'
   549  00FF42  65                 	db	101	;'e'
   550  00FF43  72                 	db	114	;'r'
   551  00FF44  5D                 	db	93	;']'
   552  00FF45  20                 	db	32
   553  00FF46  0A                 	db	10
   554  00FF47  00                 	db	0
   555  00FF48                     STR_21:
   556  00FF48  30                 	db	48	;'0'
   557  00FF49  31                 	db	49	;'1'
   558  00FF4A  32                 	db	50	;'2'
   559  00FF4B  33                 	db	51	;'3'
   560  00FF4C  34                 	db	52	;'4'
   561  00FF4D  35                 	db	53	;'5'
   562  00FF4E  36                 	db	54	;'6'
   563  00FF4F  37                 	db	55	;'7'
   564  00FF50  38                 	db	56	;'8'
   565  00FF51  39                 	db	57	;'9'
   566  00FF52  61                 	db	97	;'a'
   567  00FF53  62                 	db	98	;'b'
   568  00FF54  63                 	db	99	;'c'
   569  00FF55  64                 	db	100	;'d'
   570  00FF56  65                 	db	101	;'e'
   571  00FF57  66                 	db	102	;'f'
   572  00FF58  00                 	db	0
   573  00FF59                     STR_18:
   574  00FF59  20                 	db	32
   575  00FF5A  20                 	db	32
   576  00FF5B  20                 	db	32
   577  00FF5C  20                 	db	32
   578  00FF5D  20                 	db	32
   579  00FF5E  20                 	db	32
   580  00FF5F  20                 	db	32
   581  00FF60  20                 	db	32
   582  00FF61  20                 	db	32
   583  00FF62  20                 	db	32
   584  00FF63  20                 	db	32
   585  00FF64  20                 	db	32
   586  00FF65  20                 	db	32
   587  00FF66  20                 	db	32
   588  00FF67  2A                 	db	42
   589  00FF68  3E                 	db	62	;'>'
   590  00FF69  00                 	db	0
   591  00FF6A                     STR_14:
   592  00FF6A  5B                 	db	91	;'['
   593  00FF6B  31                 	db	49	;'1'
   594  00FF6C  2C                 	db	44
   595  00FF6D  32                 	db	50	;'2'
   596  00FF6E  2C                 	db	44
   597  00FF6F  33                 	db	51	;'3'
   598  00FF70  2C                 	db	44
   599  00FF71  34                 	db	52	;'4'
   600  00FF72  5D                 	db	93	;']'
   601  00FF73  20                 	db	32
   602  00FF74  20                 	db	32
   603  00FF75  20                 	db	32
   604  00FF76  20                 	db	32
   605  00FF77  20                 	db	32
   606  00FF78  2A                 	db	42
   607  00FF79  3E                 	db	62	;'>'
   608  00FF7A  00                 	db	0
   609  00FF7B                     STR_12:
   610  00FF7B  68                 	db	104	;'h'
   611  00FF7C  69                 	db	105	;'i'
   612  00FF7D  73                 	db	115	;'s'
   613  00FF7E  74                 	db	116	;'t'
   614  00FF7F  6F                 	db	111	;'o'
   615  00FF80  72                 	db	114	;'r'
   616  00FF81  79                 	db	121	;'y'
   617  00FF82  20                 	db	32
   618  00FF83  3C                 	db	60	;'<'
   619  00FF84  43                 	db	67	;'C'
   620  00FF85  20                 	db	32
   621  00FF86  20                 	db	32
   622  00FF87  20                 	db	32
   623  00FF88  20                 	db	32
   624  00FF89  2A                 	db	42
   625  00FF8A  3E                 	db	62	;'>'
   626  00FF8B  00                 	db	0
   627  00FF8C                     STR_16:
   628  00FF8C  20                 	db	32
   629  00FF8D  20                 	db	32
   630  00FF8E  20                 	db	32
   631  00FF8F  73                 	db	115	;'s'
   632  00FF90  74                 	db	116	;'t'
   633  00FF91  61                 	db	97	;'a'
   634  00FF92  74                 	db	116	;'t'
   635  00FF93  73                 	db	115	;'s'
   636  00FF94  20                 	db	32
   637  00FF95  3C                 	db	60	;'<'
   638  00FF96  42                 	db	66	;'B'
   639  00FF97  20                 	db	32
   640  00FF98  20                 	db	32
   641  00FF99  20                 	db	32
   642  00FF9A  2A                 	db	42
   643  00FF9B  3E                 	db	62	;'>'
   644  00FF9C  00                 	db	0
   645  00FF9D                     STR_5:
   646  00FF9D  5B                 	db	91	;'['
   647  00FF9E  41                 	db	65	;'A'
   648  00FF9F  41                 	db	65	;'A'
   649  00FFA0  2C                 	db	44
   650  00FFA1  43                 	db	67	;'C'
   651  00FFA2  2C                 	db	44
   652  00FFA3  39                 	db	57	;'9'
   653  00FFA4  56                 	db	86	;'V'
   654  00FFA5  2C                 	db	44
   655  00FFA6  4F                 	db	79	;'O'
   656  00FFA7  54                 	db	84	;'T'
   657  00FFA8  48                 	db	72	;'H'
   658  00FFA9  45                 	db	69	;'E'
   659  00FFAA  52                 	db	82	;'R'
   660  00FFAB  5D                 	db	93	;']'
   661  00FFAC  0A                 	db	10
   662  00FFAD  00                 	db	0
   663  00FFAE                     STR_4:
   664  00FFAE  74                 	db	116	;'t'
   665  00FFAF  69                 	db	105	;'i'
   666  00FFB0  6D                 	db	109	;'m'
   667  00FFB1  65                 	db	101	;'e'
   668  00FFB2  20                 	db	32
   669  00FFB3  25                 	db	37
   670  00FFB4  30                 	db	48	;'0'
   671  00FFB5  32                 	db	50	;'2'
   672  00FFB6  6C                 	db	108	;'l'
   673  00FFB7  64                 	db	100	;'d'
   674  00FFB8  3A                 	db	58	;':'
   675  00FFB9  25                 	db	37
   676  00FFBA  30                 	db	48	;'0'
   677  00FFBB  32                 	db	50	;'2'
   678  00FFBC  6C                 	db	108	;'l'
   679  00FFBD  64                 	db	100	;'d'
   680  00FFBE  00                 	db	0
   681  00FFBF                     STR_7:
   682  00FFBF  4E                 	db	78	;'N'
   683  00FFC0  3A                 	db	58	;':'
   684  00FFC1  20                 	db	32
   685  00FFC2  25                 	db	37
   686  00FFC3  64                 	db	100	;'d'
   687  00FFC4  2C                 	db	44
   688  00FFC5  0A                 	db	10
   689  00FFC6  56                 	db	86	;'V'
   690  00FFC7  3A                 	db	58	;':'
   691  00FFC8  20                 	db	32
   692  00FFC9  25                 	db	37
   693  00FFCA  2E                 	db	46
   694  00FFCB  33                 	db	51	;'3'
   695  00FFCC  66                 	db	102	;'f'
   696  00FFCD  00                 	db	0
   697  00FFCE                     STR_6:
   698  00FFCE  5B                 	db	91	;'['
   699  00FFCF  25                 	db	37
   700  00FFD0  64                 	db	100	;'d'
   701  00FFD1  2C                 	db	44
   702  00FFD2  25                 	db	37
   703  00FFD3  64                 	db	100	;'d'
   704  00FFD4  2C                 	db	44
   705  00FFD5  25                 	db	37
   706  00FFD6  64                 	db	100	;'d'
   707  00FFD7  2C                 	db	44
   708  00FFD8  25                 	db	37
   709  00FFD9  64                 	db	100	;'d'
   710  00FFDA  5D                 	db	93	;']'
   711  00FFDB  00                 	db	0
   712  00FFDC                     STR_1:
   713  00FFDC  25                 	db	37
   714  00FFDD  78                 	db	120	;'x'
   715  00FFDE  3A                 	db	58	;':'
   716  00FFDF  25                 	db	37
   717  00FFE0  78                 	db	120	;'x'
   718  00FFE1  3A                 	db	58	;':'
   719  00FFE2  25                 	db	37
   720  00FFE3  78                 	db	120	;'x'
   721  00FFE4  0A                 	db	10
   722  00FFE5  00                 	db	0
   723  00FFE6                     STR_2:
   724  00FFE6  25                 	db	37
   725  00FFE7  78                 	db	120	;'x'
   726  00FFE8  2F                 	db	47
   727  00FFE9  25                 	db	37
   728  00FFEA  78                 	db	120	;'x'
   729  00FFEB  2F                 	db	47
   730  00FFEC  25                 	db	37
   731  00FFED  78                 	db	120	;'x'
   732  00FFEE  00                 	db	0
   733  00FFEF  74                 	db	116	;'t'
   734  00FFF0  31                 	db	49	;'1'
   735  00FFF1  3A                 	db	58	;':'
   736  00FFF2  20                 	db	32
   737  00FFF3  25                 	db	37
   738  00FFF4  78                 	db	120	;'x'
   739  00FFF5  20                 	db	32
   740  00FFF6  00                 	db	0
   741  00FFF7                     STR_3:
   742  00FFF7  72                 	db	114	;'r'
   743  00FFF8  75                 	db	117	;'u'
   744  00FFF9  6E                 	db	110	;'n'
   745  00FFFA  6E                 	db	110	;'n'
   746  00FFFB  69                 	db	105	;'i'
   747  00FFFC  6E                 	db	110	;'n'
   748  00FFFD  67                 	db	103	;'g'
   749  00FFFE  00                 	db	0
   750  0000                     
   751                           ; #config settings
   752  00FFFF  00                 	db	0	; dummy byte at the end
   753  0000                     
   754                           	psect	cinit
   755  00329C                     __pcinit:
   756                           	opt stack 0
   757  00329C                     start_initialization:
   758                           	opt stack 0
   759  00329C                     __initialization:
   760                           	opt stack 0
   761                           
   762                           ; Initialize objects allocated to BANK1 (30 bytes)
   763                           ; load TBLPTR registers with __pidataBANK1
   764  00329C  0E92               	movlw	low __pidataBANK1
   765  00329E  6EF6               	movwf	tblptrl,c
   766  0032A0  0E3C               	movlw	high __pidataBANK1
   767  0032A2  6EF7               	movwf	tblptrh,c
   768  0032A4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   769  0032A6  6EF8               	movwf	tblptru,c
   770  0032A8  EE01  F058         	lfsr	0,__pdataBANK1
   771  0032AC  EE10 F01E          	lfsr	1,30
   772  0032B0                     copy_data0:
   773  0032B0  0009               	tblrd		*+
   774  0032B2  CFF5 FFEE          	movff	tablat,postinc0
   775  0032B6  50E5               	movf	postdec1,w,c
   776  0032B8  50E1               	movf	fsr1l,w,c
   777  0032BA  E1FA               	bnz	copy_data0
   778                           
   779                           ; Initialize objects allocated to BANK0 (6 bytes)
   780                           ; load TBLPTR registers with __pidataBANK0
   781  0032BC  0E5A               	movlw	low __pidataBANK0
   782  0032BE  6EF6               	movwf	tblptrl,c
   783  0032C0  0E3D               	movlw	high __pidataBANK0
   784  0032C2  6EF7               	movwf	tblptrh,c
   785  0032C4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   786  0032C6  6EF8               	movwf	tblptru,c
   787  0032C8  EE00  F0F4         	lfsr	0,__pdataBANK0
   788  0032CC  EE10 F006          	lfsr	1,6
   789  0032D0                     copy_data1:
   790  0032D0  0009               	tblrd		*+
   791  0032D2  CFF5 FFEE          	movff	tablat,postinc0
   792  0032D6  50E5               	movf	postdec1,w,c
   793  0032D8  50E1               	movf	fsr1l,w,c
   794  0032DA  E1FA               	bnz	copy_data1
   795                           
   796                           ; Initialize objects allocated to COMRAM (23 bytes)
   797                           ; load TBLPTR registers with __pidataCOMRAM
   798  0032DC  0EE8               	movlw	low __pidataCOMRAM
   799  0032DE  6EF6               	movwf	tblptrl,c
   800  0032E0  0E3C               	movlw	high __pidataCOMRAM
   801  0032E2  6EF7               	movwf	tblptrh,c
   802  0032E4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   803  0032E6  6EF8               	movwf	tblptru,c
   804  0032E8  EE00  F03B         	lfsr	0,__pdataCOMRAM
   805  0032EC  EE10 F017          	lfsr	1,23
   806  0032F0                     copy_data2:
   807  0032F0  0009               	tblrd		*+
   808  0032F2  CFF5 FFEE          	movff	tablat,postinc0
   809  0032F6  50E5               	movf	postdec1,w,c
   810  0032F8  50E1               	movf	fsr1l,w,c
   811  0032FA  E1FA               	bnz	copy_data2
   812                           
   813                           ; Clear objects allocated to BANK1 (32 bytes)
   814  0032FC  EE01  F038         	lfsr	0,__pbssBANK1
   815  003300  0E20               	movlw	32
   816  003302                     clear_0:
   817  003302  6AEE               	clrf	postinc0,c
   818  003304  06E8               	decf	wreg,f,c
   819  003306  E1FD               	bnz	clear_0
   820                           
   821                           ; Clear objects allocated to BANK0 (2 bytes)
   822  003308  0100               	movlb	0
   823  00330A  6BFB               	clrf	(__pbssBANK0+1)& (0+255),b
   824  00330C  6BFA               	clrf	__pbssBANK0& (0+255),b
   825                           
   826                           ; Clear objects allocated to COMRAM (11 bytes)
   827  00330E  EE00  F052         	lfsr	0,__pbssCOMRAM
   828  003312  0E0B               	movlw	11
   829  003314                     clear_1:
   830  003314  6AEE               	clrf	postinc0,c
   831  003316  06E8               	decf	wreg,f,c
   832  003318  E1FD               	bnz	clear_1
   833  00331A                     end_of_initialization:
   834                           	opt stack 0
   835  00331A                     __end_of__initialization:
   836                           	opt stack 0
   837  00331A  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   838  00331C  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   839  00331E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   840  003320  6EF8               	movwf	tblptru,c
   841  003322  0100               	movlb	0
   842  003324  EF84  F00B         	goto	_main	;jump to C main() function
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1l	equ	0xFE1
   851                           
   852                           	psect	bssCOMRAM
   853  000052                     __pbssCOMRAM:
   854                           	opt stack 0
   855  000052                     _padPin3:
   856                           	opt stack 0
   857  000052                     	ds	4
   858  000056                     _count:
   859                           	opt stack 0
   860  000056                     	ds	2
   861  000058                     _curr:
   862                           	opt stack 0
   863  000058                     	ds	2
   864  00005A                     _prevTime:
   865                           	opt stack 0
   866  00005A                     	ds	2
   867  00005C                     _lastKey:
   868                           	opt stack 0
   869  00005C                     	ds	1
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1l	equ	0xFE1
   878                           
   879                           	psect	dataCOMRAM
   880  00003B                     __pdataCOMRAM:
   881                           	opt stack 0
   882  00003B                     _V_LIM_9V:
   883                           	opt stack 0
   884  00003B                     	ds	3
   885  00003E                     _V_LIM_AA:
   886                           	opt stack 0
   887  00003E                     	ds	3
   888  000041                     _V_LIM_C:
   889                           	opt stack 0
   890  000041                     	ds	3
   891  000044                     _angle:
   892                           	opt stack 0
   893  000044                     	ds	2
   894  000046                     _padAngle_OPEN:
   895                           	opt stack 0
   896  000046                     	ds	2
   897  000048                     _redirectAngle_9V:
   898                           	opt stack 0
   899  000048                     	ds	2
   900  00004A                     _AA_float:
   901                           	opt stack 0
   902  00004A                     	ds	4
   903  00004E                     _padPin1:
   904                           	opt stack 0
   905  00004E                     	ds	4
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           postdec1	equ	0xFE5
   913                           fsr1l	equ	0xFE1
   914                           
   915                           	psect	bssBANK0
   916  0000FA                     __pbssBANK0:
   917                           	opt stack 0
   918  0000FA                     _n:
   919                           	opt stack 0
   920  0000FA                     	ds	2
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           postdec1	equ	0xFE5
   928                           fsr1l	equ	0xFE1
   929                           
   930                           	psect	dataBANK0
   931  0000F4                     __pdataBANK0:
   932                           	opt stack 0
   933  0000F4                     _padAngle_CLOSE:
   934                           	opt stack 0
   935  0000F4                     	ds	2
   936  0000F6                     _redirectAngle_C:
   937                           	opt stack 0
   938  0000F6                     	ds	2
   939  0000F8                     _redirectAngle_OTHER:
   940                           	opt stack 0
   941  0000F8                     	ds	2
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           postdec1	equ	0xFE5
   949                           fsr1l	equ	0xFE1
   950                           
   951                           	psect	bssBANK1
   952  000138                     __pbssBANK1:
   953                           	opt stack 0
   954  000138                     _pulse:
   955                           	opt stack 0
   956  000138                     	ds	8
   957  000140                     _servos:
   958                           	opt stack 0
   959  000140                     	ds	8
   960  000148                     _time:
   961                           	opt stack 0
   962  000148                     	ds	4
   963  00014C                     _batteryDetected:
   964                           	opt stack 0
   965  00014C                     	ds	2
   966  00014E                     _n_9V:
   967                           	opt stack 0
   968  00014E                     	ds	2
   969  000150                     _n_AA:
   970                           	opt stack 0
   971  000150                     	ds	2
   972  000152                     _n_C:
   973                           	opt stack 0
   974  000152                     	ds	2
   975  000154                     _n_OTHER:
   976                           	opt stack 0
   977  000154                     	ds	2
   978  000156                     _terminate:
   979                           	opt stack 0
   980  000156                     	ds	2
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           postdec1	equ	0xFE5
   988                           fsr1l	equ	0xFE1
   989                           
   990                           	psect	dataBANK1
   991  000158                     __pdataBANK1:
   992                           	opt stack 0
   993  000158                     _padAngle_NEUTRAL:
   994                           	opt stack 0
   995  000158                     	ds	2
   996  00015A                     _redirectAngle_AA:
   997                           	opt stack 0
   998  00015A                     	ds	2
   999  00015C                     _stoppingTime:
  1000                           	opt stack 0
  1001  00015C                     	ds	2
  1002  00015E                     _conveyorServo:
  1003                           	opt stack 0
  1004  00015E                     	ds	4
  1005  000162                     _cylinderDir:
  1006                           	opt stack 0
  1007  000162                     	ds	4
  1008  000166                     _cylinderMotor:
  1009                           	opt stack 0
  1010  000166                     	ds	4
  1011  00016A                     _padPin2:
  1012                           	opt stack 0
  1013  00016A                     	ds	4
  1014  00016E                     _padServo:
  1015                           	opt stack 0
  1016  00016E                     	ds	4
  1017  000172                     _redirectingServo:
  1018                           	opt stack 0
  1019  000172                     	ds	4
  1020                           tblptru	equ	0xFF8
  1021                           tblptrh	equ	0xFF7
  1022                           tblptrl	equ	0xFF6
  1023                           tablat	equ	0xFF5
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           postdec1	equ	0xFE5
  1027                           fsr1l	equ	0xFE1
  1028                           
  1029                           	psect	cstackBANK1
  1030  000100                     __pcstackBANK1:
  1031                           	opt stack 0
  1032  000100                     showInterface@n:
  1033                           	opt stack 0
  1034  000100                     _sortBattery$1394:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x0
  1038  000100                     	ds	2
  1039  000102                     showInterface@run:
  1040                           	opt stack 0
  1041  000102                     sortBattery@V_float:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x2
  1045  000102                     	ds	2
  1046  000104                     showInterface@key:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x4
  1050  000104                     	ds	1
  1051  000105                     sortBattery@pos_v_counter:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x5
  1055  000105                     	ds	2
  1056  000107                     sortBattery@signal:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x7
  1060  000107                     	ds	2
  1061  000109                     sortBattery@Vcc:
  1062                           	opt stack 0
  1063                           
  1064                           ; 3 bytes @ 0x9
  1065  000109                     	ds	3
  1066  00010C                     sortBattery@resolution:
  1067                           	opt stack 0
  1068                           
  1069                           ; 3 bytes @ 0xC
  1070  00010C                     	ds	3
  1071  00010F                     sortBattery@V_max:
  1072                           	opt stack 0
  1073                           
  1074                           ; 3 bytes @ 0xF
  1075  00010F                     	ds	3
  1076  000112                     sortBattery@i_238:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x12
  1080  000112                     	ds	2
  1081  000114                     sortBattery@targetAngle:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x14
  1085  000114                     	ds	2
  1086  000116                     sortBattery@V:
  1087                           	opt stack 0
  1088                           
  1089                           ; 3 bytes @ 0x16
  1090  000116                     	ds	3
  1091  000119                     sortBattery@i:
  1092                           	opt stack 0
  1093                           
  1094                           ; 3 bytes @ 0x19
  1095  000119                     	ds	3
  1096  00011C                     sortBattery@V_236:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x1C
  1100  00011C                     	ds	3
  1101  00011F                     ??_main:
  1102                           
  1103                           ; 1 bytes @ 0x1F
  1104  00011F                     	ds	13
  1105  00012C                     main@cylinderForward:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x2C
  1109  00012C                     	ds	2
  1110  00012E                     main@cylinderBackward:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x2E
  1114  00012E                     	ds	2
  1115  000130                     main@lastBatteryTime:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x30
  1119  000130                     	ds	2
  1120  000132                     main@cylinderStart:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x32
  1124  000132                     	ds	2
  1125  000134                     main@cylinderDur:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x34
  1129  000134                     	ds	2
  1130  000136                     main@prev:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x36
  1134  000136                     	ds	2
  1135                           tblptru	equ	0xFF8
  1136                           tblptrh	equ	0xFF7
  1137                           tblptrl	equ	0xFF6
  1138                           tablat	equ	0xFF5
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           postdec1	equ	0xFE5
  1142                           fsr1l	equ	0xFE1
  1143                           
  1144                           	psect	cstackBANK0
  1145  000080                     __pcstackBANK0:
  1146                           	opt stack 0
  1147  000080                     ??___ftdiv:
  1148  000080                     ?_readPastRun:
  1149                           	opt stack 0
  1150  000080                     readPastRun@run:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x0
  1154  000080                     	ds	2
  1155  000082                     readPastRun@data:
  1156                           	opt stack 0
  1157                           
  1158                           ; 14 bytes @ 0x2
  1159  000082                     	ds	1
  1160  000083                     ___ftdiv@cntr:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x3
  1164  000083                     	ds	1
  1165  000084                     ___ftdiv@f3:
  1166                           	opt stack 0
  1167                           
  1168                           ; 3 bytes @ 0x4
  1169  000084                     	ds	3
  1170  000087                     ___ftdiv@exp:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x7
  1174  000087                     	ds	1
  1175  000088                     ___ftdiv@sign:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x8
  1179  000088                     	ds	1
  1180  000089                     ?___ftmul:
  1181                           	opt stack 0
  1182  000089                     ___ftmul@f1:
  1183                           	opt stack 0
  1184                           
  1185                           ; 3 bytes @ 0x9
  1186  000089                     	ds	3
  1187  00008C                     ___ftmul@f2:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0xC
  1191  00008C                     	ds	3
  1192  00008F                     ??___ftmul:
  1193                           
  1194                           ; 1 bytes @ 0xF
  1195  00008F                     	ds	1
  1196  000090                     readPastRun@i:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x10
  1200  000090                     	ds	2
  1201  000092                     ___ftmul@exp:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x12
  1205  000092                     	ds	1
  1206  000093                     ___ftmul@f3_as_product:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0x13
  1210  000093                     	ds	3
  1211  000096                     ___ftmul@cntr:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x16
  1215  000096                     	ds	1
  1216  000097                     ___ftmul@sign:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x17
  1220  000097                     	ds	1
  1221  000098                     ?_fround:
  1222                           	opt stack 0
  1223  000098                     ?_scale:
  1224                           	opt stack 0
  1225                           
  1226                           ; 3 bytes @ 0x18
  1227  000098                     	ds	3
  1228  00009B                     _fround$1397:
  1229                           	opt stack 0
  1230  00009B                     _scale$1398:
  1231                           	opt stack 0
  1232                           
  1233                           ; 3 bytes @ 0x1B
  1234  00009B                     	ds	3
  1235  00009E                     scale@scl:
  1236                           	opt stack 0
  1237  00009E                     _fround$1396:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x1E
  1241  00009E                     	ds	3
  1242  0000A1                     fround@prec:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x21
  1246  0000A1                     	ds	1
  1247  0000A2                     ?___ftadd:
  1248                           	opt stack 0
  1249  0000A2                     ___ftadd@f1:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x22
  1253  0000A2                     	ds	3
  1254  0000A5                     ___ftadd@f2:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x25
  1258  0000A5                     	ds	3
  1259  0000A8                     ??___ftadd:
  1260                           
  1261                           ; 1 bytes @ 0x28
  1262  0000A8                     	ds	3
  1263  0000AB                     ___ftadd@sign:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x2B
  1267  0000AB                     	ds	1
  1268  0000AC                     ___ftadd@exp2:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x2C
  1272  0000AC                     	ds	1
  1273  0000AD                     ___ftadd@exp1:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x2D
  1277  0000AD                     	ds	1
  1278  0000AE                     ?___ftsub:
  1279                           	opt stack 0
  1280  0000AE                     ?___fttol:
  1281                           	opt stack 0
  1282  0000AE                     ___ftsub@f1:
  1283                           	opt stack 0
  1284  0000AE                     ___fttol@f1:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0x2E
  1288  0000AE                     	ds	3
  1289  0000B1                     ___ftsub@f2:
  1290                           	opt stack 0
  1291                           
  1292                           ; 3 bytes @ 0x31
  1293  0000B1                     	ds	1
  1294  0000B2                     ??___fttol:
  1295                           
  1296                           ; 1 bytes @ 0x32
  1297  0000B2                     	ds	5
  1298  0000B7                     ___fttol@sign1:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x37
  1302  0000B7                     	ds	1
  1303  0000B8                     ___fttol@lval:
  1304                           	opt stack 0
  1305                           
  1306                           ; 4 bytes @ 0x38
  1307  0000B8                     	ds	4
  1308  0000BC                     ___fttol@exp1:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x3C
  1312  0000BC                     	ds	1
  1313  0000BD                     ?_printf:
  1314                           	opt stack 0
  1315  0000BD                     ?_angleToPulse:
  1316                           	opt stack 0
  1317  0000BD                     angleToPulse@angle:
  1318                           	opt stack 0
  1319  0000BD                     printf@f:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x3D
  1323  0000BD                     	ds	4
  1324  0000C1                     ??_angleToPulse:
  1325                           
  1326                           ; 1 bytes @ 0x41
  1327  0000C1                     	ds	4
  1328  0000C5                     angleToPulse@offset:
  1329                           	opt stack 0
  1330                           
  1331                           ; 4 bytes @ 0x45
  1332  0000C5                     	ds	2
  1333  0000C7                     ??_printf:
  1334                           
  1335                           ; 1 bytes @ 0x47
  1336  0000C7                     	ds	2
  1337  0000C9                     angleToPulse@a180:
  1338                           	opt stack 0
  1339                           
  1340                           ; 4 bytes @ 0x49
  1341  0000C9                     	ds	4
  1342  0000CD                     _angleToPulse$1395:
  1343                           	opt stack 0
  1344  0000CD                     _printf$1399:
  1345                           	opt stack 0
  1346                           
  1347                           ; 3 bytes @ 0x4D
  1348  0000CD                     	ds	3
  1349  0000D0                     printf@idx:
  1350                           	opt stack 0
  1351  0000D0                     angleToPulse@a000:
  1352                           	opt stack 0
  1353                           
  1354                           ; 4 bytes @ 0x50
  1355  0000D0                     	ds	1
  1356  0000D1                     printf@cp:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x51
  1360  0000D1                     	ds	2
  1361  0000D3                     printf@len:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x53
  1365  0000D3                     	ds	1
  1366  0000D4                     setAngle@motor:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x54
  1370  0000D4                     	ds	1
  1371  0000D5                     printf@ap:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x55
  1375  0000D5                     	ds	1
  1376  0000D6                     setAngle@angle:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x56
  1380  0000D6                     	ds	1
  1381  0000D7                     printf@tmpval:
  1382                           	opt stack 0
  1383                           
  1384                           ; 4 bytes @ 0x57
  1385  0000D7                     	ds	1
  1386  0000D8                     ??_setAngle:
  1387                           
  1388                           ; 1 bytes @ 0x58
  1389  0000D8                     	ds	2
  1390  0000DA                     setAngle@period:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x5A
  1394  0000DA                     	ds	1
  1395  0000DB                     printf@exp:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x5B
  1399  0000DB                     	ds	1
  1400  0000DC                     setAngle@i:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x5C
  1404  0000DC                     	ds	1
  1405  0000DD                     printf@fval:
  1406                           	opt stack 0
  1407                           
  1408                           ; 3 bytes @ 0x5D
  1409  0000DD                     	ds	1
  1410  0000DE                     initServo@motor:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x5E
  1414  0000DE                     	ds	2
  1415  0000E0                     initServo@angle:
  1416                           	opt stack 0
  1417  0000E0                     printf@val:
  1418                           	opt stack 0
  1419                           
  1420                           ; 4 bytes @ 0x60
  1421  0000E0                     	ds	2
  1422  0000E2                     ??_initServo:
  1423                           
  1424                           ; 1 bytes @ 0x62
  1425  0000E2                     	ds	2
  1426  0000E4                     printf@width:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x64
  1430  0000E4                     	ds	2
  1431  0000E6                     initServo@i:
  1432                           	opt stack 0
  1433  0000E6                     printf@flag:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x66
  1437  0000E6                     	ds	2
  1438  0000E8                     printf@prec:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x68
  1442  0000E8                     	ds	2
  1443  0000EA                     printf@c:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x6A
  1447  0000EA                     	ds	1
  1448  0000EB                     ??_sortBattery:
  1449  0000EB                     ??_showDateTime:
  1450  0000EB                     showMainMenu@k:
  1451                           	opt stack 0
  1452  0000EB                     showRunSelect@k:
  1453                           	opt stack 0
  1454  0000EB                     showRunMenu@key:
  1455                           	opt stack 0
  1456  0000EB                     showRunTime@run:
  1457                           	opt stack 0
  1458  0000EB                     showRunStats@run:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x6B
  1462  0000EB                     	ds	1
  1463  0000EC                     showRunMenu@k:
  1464                           	opt stack 0
  1465  0000EC                     showDateTime@t:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x6C
  1469  0000EC                     	ds	1
  1470  0000ED                     ??_showRunTime:
  1471                           
  1472                           ; 1 bytes @ 0x6D
  1473  0000ED                     	ds	3
  1474  0000F0                     showRunTime@time:
  1475                           	opt stack 0
  1476                           
  1477                           ; 3 bytes @ 0x70
  1478  0000F0                     	ds	3
  1479  0000F3                     ??_showInterface:
  1480                           
  1481                           ; 1 bytes @ 0x73
  1482  0000F3                     	ds	1
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           
  1492                           	psect	cstackCOMRAM
  1493  000001                     __pcstackCOMRAM:
  1494                           	opt stack 0
  1495  000001                     ?i2___awmod:
  1496                           	opt stack 0
  1497  000001                     keyPressedInterruptService@key:
  1498                           	opt stack 0
  1499  000001                     i2___awmod@dividend:
  1500                           	opt stack 0
  1501                           
  1502                           ; 2 bytes @ 0x0
  1503  000001                     	ds	2
  1504  000003                     i2___awmod@divisor:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x2
  1508  000003                     	ds	2
  1509  000005                     i2___awmod@counter:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x4
  1513  000005                     	ds	1
  1514  000006                     i2___awmod@sign:
  1515                           	opt stack 0
  1516                           
  1517                           ; 1 bytes @ 0x5
  1518  000006                     	ds	1
  1519  000007                     i2digitalWrite@pin:
  1520                           	opt stack 0
  1521  000007                     i2startTimer@timer:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x6
  1525  000007                     	ds	2
  1526  000009                     i2digitalWrite@val:
  1527                           	opt stack 0
  1528  000009                     i2startTimer@val:
  1529                           	opt stack 0
  1530                           
  1531                           ; 4 bytes @ 0x8
  1532  000009                     	ds	2
  1533  00000B                     ??i2_digitalWrite:
  1534                           
  1535                           ; 1 bytes @ 0xA
  1536  00000B                     	ds	2
  1537  00000D                     ??i2_startTimer:
  1538                           
  1539                           ; 1 bytes @ 0xC
  1540  00000D                     	ds	1
  1541  00000E                     i2digitalWrite@p:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0xD
  1545  00000E                     	ds	2
  1546  000010                     ??_servoInterruptService:
  1547                           
  1548                           ; 1 bytes @ 0xF
  1549  000010                     	ds	4
  1550  000014                     ??_service:
  1551                           
  1552                           ; 1 bytes @ 0x13
  1553  000014                     	ds	14
  1554  000022                     service@key:
  1555                           	opt stack 0
  1556                           
  1557                           ; 1 bytes @ 0x21
  1558  000022                     	ds	1
  1559  000023                     ??_isdigit:
  1560  000023                     ??_I2C_Master_Wait:
  1561  000023                     ?_digitalRead:
  1562                           	opt stack 0
  1563  000023                     ?___awmod:
  1564                           	opt stack 0
  1565  000023                     ?___ftpack:
  1566                           	opt stack 0
  1567  000023                     ?___ftneg:
  1568                           	opt stack 0
  1569  000023                     ?_analogRead:
  1570                           	opt stack 0
  1571  000023                     ?__tdiv_to_l_:
  1572                           	opt stack 0
  1573  000023                     ?__div_to_l_:
  1574                           	opt stack 0
  1575  000023                     ?___aldiv:
  1576                           	opt stack 0
  1577  000023                     ?___lldiv:
  1578                           	opt stack 0
  1579  000023                     lcdNibble@temp:
  1580                           	opt stack 0
  1581  000023                     readKeypad@key:
  1582                           	opt stack 0
  1583  000023                     digitalRead@pin:
  1584                           	opt stack 0
  1585  000023                     digitalWrite@pin:
  1586                           	opt stack 0
  1587  000023                     analogRead@channel:
  1588                           	opt stack 0
  1589  000023                     initTimer@timer:
  1590                           	opt stack 0
  1591  000023                     startTimer@timer:
  1592                           	opt stack 0
  1593  000023                     ___awmod@dividend:
  1594                           	opt stack 0
  1595  000023                     __div_to_l_@f1:
  1596                           	opt stack 0
  1597  000023                     ___ftpack@arg:
  1598                           	opt stack 0
  1599  000023                     __tdiv_to_l_@f1:
  1600                           	opt stack 0
  1601  000023                     ___ftneg@f1:
  1602                           	opt stack 0
  1603  000023                     ___aldiv@dividend:
  1604                           	opt stack 0
  1605  000023                     ___lldiv@dividend:
  1606                           	opt stack 0
  1607                           
  1608                           ; 4 bytes @ 0x22
  1609  000023                     	ds	1
  1610  000024                     lcdNibble@data:
  1611                           	opt stack 0
  1612  000024                     I2C_Master_Read@a:
  1613                           	opt stack 0
  1614  000024                     _isdigit$1031:
  1615                           	opt stack 0
  1616  000024                     I2C_Master_Write@d:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x23
  1620  000024                     	ds	1
  1621  000025                     ??_initTimer:
  1622  000025                     ??_digitalRead:
  1623  000025                     ??_lcdInst:
  1624  000025                     I2C_Master_Read@temp:
  1625                           	opt stack 0
  1626  000025                     isdigit@c:
  1627                           	opt stack 0
  1628  000025                     digitalWrite@val:
  1629                           	opt stack 0
  1630  000025                     ___awmod@divisor:
  1631                           	opt stack 0
  1632  000025                     startTimer@val:
  1633                           	opt stack 0
  1634                           
  1635                           ; 4 bytes @ 0x24
  1636  000025                     	ds	1
  1637  000026                     ?_getTime:
  1638                           	opt stack 0
  1639  000026                     lcdInst@data:
  1640                           	opt stack 0
  1641  000026                     setTime@i:
  1642                           	opt stack 0
  1643  000026                     ___ftpack@exp:
  1644                           	opt stack 0
  1645  000026                     __div_to_l_@f2:
  1646                           	opt stack 0
  1647  000026                     __tdiv_to_l_@f2:
  1648                           	opt stack 0
  1649                           
  1650                           ; 3 bytes @ 0x25
  1651  000026                     	ds	1
  1652  000027                     ??_initLCD:
  1653  000027                     ??_digitalWrite:
  1654  000027                     ??_analogRead:
  1655  000027                     putch@data:
  1656                           	opt stack 0
  1657  000027                     ___awmod@counter:
  1658                           	opt stack 0
  1659  000027                     ___ftpack@sign:
  1660                           	opt stack 0
  1661  000027                     ___aldiv@divisor:
  1662                           	opt stack 0
  1663  000027                     ___lldiv@divisor:
  1664                           	opt stack 0
  1665                           
  1666                           ; 4 bytes @ 0x26
  1667  000027                     	ds	1
  1668  000028                     ??_getTime:
  1669  000028                     ??___ftpack:
  1670  000028                     ___awmod@sign:
  1671                           	opt stack 0
  1672                           
  1673                           ; 1 bytes @ 0x27
  1674  000028                     	ds	1
  1675  000029                     ??_startTimer:
  1676  000029                     ??__tdiv_to_l_:
  1677  000029                     ?___awdiv:
  1678                           	opt stack 0
  1679  000029                     ___awdiv@dividend:
  1680                           	opt stack 0
  1681  000029                     __div_to_l_@quot:
  1682                           	opt stack 0
  1683                           
  1684                           ; 4 bytes @ 0x28
  1685  000029                     	ds	1
  1686  00002A                     digitalWrite@p:
  1687                           	opt stack 0
  1688  00002A                     getTime@time:
  1689                           	opt stack 0
  1690                           
  1691                           ; 14 bytes @ 0x29
  1692  00002A                     	ds	1
  1693  00002B                     ?___altoft:
  1694                           	opt stack 0
  1695  00002B                     ?___awtoft:
  1696                           	opt stack 0
  1697  00002B                     ?___lltoft:
  1698                           	opt stack 0
  1699  00002B                     ___aldiv@counter:
  1700                           	opt stack 0
  1701  00002B                     ___awdiv@divisor:
  1702                           	opt stack 0
  1703  00002B                     ___awtoft@c:
  1704                           	opt stack 0
  1705  00002B                     ___altoft@c:
  1706                           	opt stack 0
  1707  00002B                     ___lldiv@quotient:
  1708                           	opt stack 0
  1709  00002B                     ___lltoft@c:
  1710                           	opt stack 0
  1711                           
  1712                           ; 4 bytes @ 0x2A
  1713  00002B                     	ds	1
  1714  00002C                     ___aldiv@sign:
  1715                           	opt stack 0
  1716  00002C                     __tdiv_to_l_@quot:
  1717                           	opt stack 0
  1718                           
  1719                           ; 4 bytes @ 0x2B
  1720  00002C                     	ds	1
  1721  00002D                     ___awdiv@counter:
  1722                           	opt stack 0
  1723  00002D                     __div_to_l_@cntr:
  1724                           	opt stack 0
  1725  00002D                     ___aldiv@quotient:
  1726                           	opt stack 0
  1727                           
  1728                           ; 4 bytes @ 0x2C
  1729  00002D                     	ds	1
  1730  00002E                     ___awdiv@sign:
  1731                           	opt stack 0
  1732  00002E                     ___awtoft@sign:
  1733                           	opt stack 0
  1734  00002E                     __div_to_l_@exp1:
  1735                           	opt stack 0
  1736                           
  1737                           ; 1 bytes @ 0x2D
  1738  00002E                     	ds	1
  1739  00002F                     ??___altoft:
  1740  00002F                     ??___lltoft:
  1741  00002F                     ___lldiv@counter:
  1742                           	opt stack 0
  1743  00002F                     ___awdiv@quotient:
  1744                           	opt stack 0
  1745  00002F                     ___ftge@ff1:
  1746                           	opt stack 0
  1747                           
  1748                           ; 3 bytes @ 0x2E
  1749  00002F                     	ds	1
  1750  000030                     ?___llmod:
  1751                           	opt stack 0
  1752  000030                     __tdiv_to_l_@cntr:
  1753                           	opt stack 0
  1754  000030                     I2C_Master_Init@c:
  1755                           	opt stack 0
  1756  000030                     ___llmod@dividend:
  1757                           	opt stack 0
  1758                           
  1759                           ; 4 bytes @ 0x2F
  1760  000030                     	ds	1
  1761  000031                     ?___wmul:
  1762                           	opt stack 0
  1763  000031                     ?___almod:
  1764                           	opt stack 0
  1765  000031                     __tdiv_to_l_@exp1:
  1766                           	opt stack 0
  1767  000031                     ___wmul@multiplier:
  1768                           	opt stack 0
  1769  000031                     ___almod@dividend:
  1770                           	opt stack 0
  1771                           
  1772                           ; 4 bytes @ 0x30
  1773  000031                     	ds	1
  1774  000032                     ___ftge@ff2:
  1775                           	opt stack 0
  1776                           
  1777                           ; 3 bytes @ 0x31
  1778  000032                     	ds	1
  1779  000033                     ___altoft@exp:
  1780                           	opt stack 0
  1781  000033                     ___lltoft@exp:
  1782                           	opt stack 0
  1783  000033                     ___wmul@multiplicand:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x32
  1787  000033                     	ds	1
  1788  000034                     ??_I2C_Master_Init:
  1789  000034                     ___altoft@sign:
  1790                           	opt stack 0
  1791  000034                     ___llmod@divisor:
  1792                           	opt stack 0
  1793                           
  1794                           ; 4 bytes @ 0x33
  1795  000034                     	ds	1
  1796  000035                     ??___ftge:
  1797  000035                     ?___ftdiv:
  1798                           	opt stack 0
  1799  000035                     ___wmul@product:
  1800                           	opt stack 0
  1801  000035                     ___ftdiv@f1:
  1802                           	opt stack 0
  1803  000035                     ___almod@divisor:
  1804                           	opt stack 0
  1805                           
  1806                           ; 4 bytes @ 0x34
  1807  000035                     	ds	2
  1808  000037                     ?_eepromRead:
  1809                           	opt stack 0
  1810  000037                     eepromRead@address:
  1811                           	opt stack 0
  1812                           
  1813                           ; 4 bytes @ 0x36
  1814  000037                     	ds	1
  1815  000038                     getTime@i:
  1816                           	opt stack 0
  1817  000038                     ___llmod@counter:
  1818                           	opt stack 0
  1819  000038                     ___ftdiv@f2:
  1820                           	opt stack 0
  1821                           
  1822                           ; 3 bytes @ 0x37
  1823  000038                     	ds	1
  1824  000039                     ___almod@counter:
  1825                           	opt stack 0
  1826                           
  1827                           ; 1 bytes @ 0x38
  1828  000039                     	ds	1
  1829  00003A                     ___almod@sign:
  1830                           	opt stack 0
  1831                           
  1832                           ; 1 bytes @ 0x39
  1833  00003A                     	ds	1
  1834  00003B                     tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1l	equ	0xFE1
  1842                           
  1843                           ; 1 bytes @ 0x3A
  1844 ;;
  1845 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1846 ;;
  1847 ;; *************** function _main *****************
  1848 ;; Defined at:
  1849 ;;		line 121 in file "main.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  prev            2   54[BANK1 ] int 
  1854 ;;  cylinderDur     2   52[BANK1 ] int 
  1855 ;;  cylinderStar    2   50[BANK1 ] int 
  1856 ;;  lastBatteryT    2   48[BANK1 ] int 
  1857 ;;  cylinderBack    2   46[BANK1 ] int 
  1858 ;;  cylinderForw    2   44[BANK1 ] int 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;Total ram usage:       25 bytes
  1873 ;; Hardware stack levels required when called:   10
  1874 ;; This function calls:
  1875 ;;		___aldiv
  1876 ;;		___almod
  1877 ;;		_digitalRead
  1878 ;;		_digitalWrite
  1879 ;;		_initLCD
  1880 ;;		_initServo
  1881 ;;		_initTimer
  1882 ;;		_lcdClear
  1883 ;;		_lcdHome
  1884 ;;		_pinSetup
  1885 ;;		_printf
  1886 ;;		_readKeypad
  1887 ;;		_showInterface
  1888 ;;		_sortBattery
  1889 ;;		_startTimer
  1890 ;; This function is called by:
  1891 ;;		Startup code after reset
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text0
  1896  001708                     __ptext0:
  1897                           	opt stack 0
  1898  001708                     _main:
  1899                           	opt stack 21
  1900                           
  1901                           ;main.c: 125: pinSetup();
  1902                           
  1903                           ;incstack = 0
  1904  001708  EC74  F01D         	call	_pinSetup	;wreg free
  1905                           
  1906                           ;main.c: 126: initLCD();
  1907  00170C  EC51  F01D         	call	_initLCD	;wreg free
  1908  001710                     l7390:
  1909                           
  1910                           ;main.c: 129: showInterface();
  1911  001710  EC5F  F017         	call	_showInterface	;wreg free
  1912                           
  1913                           ;main.c: 133: terminate = 0;
  1914  001714  0E00               	movlw	0
  1915  001716  0101               	movlb	1	; () banked
  1916  001718  6F57               	movwf	(_terminate+1)& (0+255),b
  1917  00171A  0E00               	movlw	0
  1918  00171C  6F56               	movwf	_terminate& (0+255),b
  1919                           
  1920                           ; BSR set to: 1
  1921                           ;main.c: 134: time = 0;
  1922  00171E  0E00               	movlw	0
  1923  001720  0101               	movlb	1	; () banked
  1924  001722  6F48               	movwf	_time& (0+255),b
  1925  001724  0E00               	movlw	0
  1926  001726  6F49               	movwf	(_time+1)& (0+255),b
  1927  001728  0E00               	movlw	0
  1928  00172A  6F4A               	movwf	(_time+2)& (0+255),b
  1929  00172C  0E00               	movlw	0
  1930  00172E  6F4B               	movwf	(_time+3)& (0+255),b
  1931                           
  1932                           ; BSR set to: 1
  1933                           ;main.c: 135: initTimer(1);
  1934  001730  0E00               	movlw	0
  1935  001732  6E24               	movwf	initTimer@timer+1,c
  1936  001734  0E01               	movlw	1
  1937  001736  6E23               	movwf	initTimer@timer,c
  1938  001738  EC2C  F01D         	call	_initTimer	;wreg free
  1939                           
  1940                           ;main.c: 136: startTimer(1,0);
  1941  00173C  0E00               	movlw	0
  1942  00173E  6E24               	movwf	startTimer@timer+1,c
  1943  001740  0E01               	movlw	1
  1944  001742  6E23               	movwf	startTimer@timer,c
  1945  001744  0E00               	movlw	0
  1946  001746  6E25               	movwf	startTimer@val,c
  1947  001748  0E00               	movlw	0
  1948  00174A  6E26               	movwf	startTimer@val+1,c
  1949  00174C  0E00               	movlw	0
  1950  00174E  6E27               	movwf	startTimer@val+2,c
  1951  001750  0E00               	movlw	0
  1952  001752  6E28               	movwf	startTimer@val+3,c
  1953  001754  ECE0  F01C         	call	_startTimer	;wreg free
  1954                           
  1955                           ;main.c: 139: digitalWrite(cylinderMotor, 1);
  1956  001758  0E66               	movlw	low _cylinderMotor
  1957  00175A  6E23               	movwf	digitalWrite@pin,c
  1958  00175C  0E01               	movlw	high _cylinderMotor
  1959  00175E  6E24               	movwf	digitalWrite@pin+1,c
  1960  001760  0E00               	movlw	0
  1961  001762  6E26               	movwf	digitalWrite@val+1,c
  1962  001764  0E01               	movlw	1
  1963  001766  6E25               	movwf	digitalWrite@val,c
  1964  001768  EC33  F016         	call	_digitalWrite	;wreg free
  1965                           
  1966                           ;main.c: 140: initServo(conveyorServo, 130);
  1967  00176C  0E5E               	movlw	low _conveyorServo
  1968  00176E  0100               	movlb	0	; () banked
  1969  001770  6FDE               	movwf	initServo@motor& (0+255),b
  1970  001772  0E01               	movlw	high _conveyorServo
  1971  001774  0100               	movlb	0	; () banked
  1972  001776  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1973  001778  0E00               	movlw	0
  1974  00177A  0100               	movlb	0	; () banked
  1975  00177C  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  1976  00177E  0E82               	movlw	130
  1977  001780  6FE0               	movwf	initServo@angle& (0+255),b
  1978  001782  ECF2  F014         	call	_initServo	;wreg free
  1979                           
  1980                           ;main.c: 141: initServo(padServo, padAngle_NEUTRAL);
  1981  001786  0E6E               	movlw	low _padServo
  1982  001788  0100               	movlb	0	; () banked
  1983  00178A  6FDE               	movwf	initServo@motor& (0+255),b
  1984  00178C  0E01               	movlw	high _padServo
  1985  00178E  0100               	movlb	0	; () banked
  1986  001790  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1987  001792  C158  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  1988  001796  C159  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1989  00179A  ECF2  F014         	call	_initServo	;wreg free
  1990                           
  1991                           ;main.c: 142: initServo(redirectingServo, redirectAngle_AA);
  1992  00179E  0E72               	movlw	low _redirectingServo
  1993  0017A0  0100               	movlb	0	; () banked
  1994  0017A2  6FDE               	movwf	initServo@motor& (0+255),b
  1995  0017A4  0E01               	movlw	high _redirectingServo
  1996  0017A6  0100               	movlb	0	; () banked
  1997  0017A8  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1998  0017AA  C15A  F0E0         	movff	_redirectAngle_AA,initServo@angle
  1999  0017AE  C15B  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  2000  0017B2  ECF2  F014         	call	_initServo	;wreg free
  2001  0017B6                     l7408:
  2002                           
  2003                           ;main.c: 146: lcdClear();
  2004  0017B6  EC9D  F01E         	call	_lcdClear	;wreg free
  2005                           
  2006                           ;main.c: 147: printf("running");
  2007  0017BA  0EF7               	movlw	low STR_3
  2008  0017BC  0100               	movlb	0	; () banked
  2009  0017BE  6FBD               	movwf	printf@f& (0+255),b
  2010  0017C0  0EFF               	movlw	high STR_3
  2011  0017C2  0100               	movlb	0	; () banked
  2012  0017C4  6FBE               	movwf	(printf@f+1)& (0+255),b
  2013  0017C6  EC09  F000         	call	_printf	;wreg free
  2014                           
  2015                           ;main.c: 149: int lastBatteryTime = time;
  2016  0017CA  C148  F130         	movff	_time,main@lastBatteryTime
  2017  0017CE  C149  F131         	movff	_time+1,main@lastBatteryTime+1
  2018                           
  2019                           ;main.c: 151: int cylinderStart = time;
  2020  0017D2  C148  F132         	movff	_time,main@cylinderStart
  2021  0017D6  C149  F133         	movff	_time+1,main@cylinderStart+1
  2022                           
  2023                           ;main.c: 152: int cylinderDur = 0;
  2024  0017DA  0E00               	movlw	0
  2025  0017DC  0101               	movlb	1	; () banked
  2026  0017DE  6F35               	movwf	(main@cylinderDur+1)& (0+255),b
  2027  0017E0  0E00               	movlw	0
  2028  0017E2  6F34               	movwf	main@cylinderDur& (0+255),b
  2029                           
  2030                           ; BSR set to: 1
  2031                           ;main.c: 153: int cylinderForward = 70;
  2032  0017E4  0E00               	movlw	0
  2033  0017E6  0101               	movlb	1	; () banked
  2034  0017E8  6F2D               	movwf	(main@cylinderForward+1)& (0+255),b
  2035  0017EA  0E46               	movlw	70
  2036  0017EC  6F2C               	movwf	main@cylinderForward& (0+255),b
  2037                           
  2038                           ; BSR set to: 1
  2039                           ;main.c: 154: int cylinderBackward = 30;
  2040  0017EE  0E00               	movlw	0
  2041  0017F0  0101               	movlb	1	; () banked
  2042  0017F2  6F2F               	movwf	(main@cylinderBackward+1)& (0+255),b
  2043  0017F4  0E1E               	movlw	30
  2044  0017F6  6F2E               	movwf	main@cylinderBackward& (0+255),b
  2045                           
  2046                           ;main.c: 156: while(!batteryDetected && !terminate){
  2047  0017F8  D121               	goto	l7438
  2048  0017FA                     l7420:
  2049                           
  2050                           ; BSR set to: 1
  2051                           ;main.c: 158: lcdHome();
  2052  0017FA  ECA9  F01E         	call	_lcdHome	;wreg free
  2053                           
  2054                           ;main.c: 159: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2055  0017FE  0EAE               	movlw	low STR_4
  2056  001800  0100               	movlb	0	; () banked
  2057  001802  6FBD               	movwf	printf@f& (0+255),b
  2058  001804  0EFF               	movlw	high STR_4
  2059  001806  0100               	movlb	0	; () banked
  2060  001808  6FBE               	movwf	(printf@f+1)& (0+255),b
  2061  00180A  C148  F023         	movff	_time,___aldiv@dividend
  2062  00180E  C149  F024         	movff	_time+1,___aldiv@dividend+1
  2063  001812  C14A  F025         	movff	_time+2,___aldiv@dividend+2
  2064  001816  C14B  F026         	movff	_time+3,___aldiv@dividend+3
  2065  00181A  0E58               	movlw	88
  2066  00181C  6E27               	movwf	___aldiv@divisor,c
  2067  00181E  0E02               	movlw	2
  2068  001820  6E28               	movwf	___aldiv@divisor+1,c
  2069  001822  0E00               	movlw	0
  2070  001824  6E29               	movwf	___aldiv@divisor+2,c
  2071  001826  0E00               	movlw	0
  2072  001828  6E2A               	movwf	___aldiv@divisor+3,c
  2073  00182A  ECCD  F015         	call	___aldiv	;wreg free
  2074  00182E  C023  F0BF         	movff	?___aldiv,?_printf+2
  2075  001832  C024  F0C0         	movff	?___aldiv+1,?_printf+3
  2076  001836  C025  F0C1         	movff	?___aldiv+2,?_printf+4
  2077  00183A  C026  F0C2         	movff	?___aldiv+3,?_printf+5
  2078  00183E  0E0A               	movlw	10
  2079  001840  6E27               	movwf	___aldiv@divisor,c
  2080  001842  0E00               	movlw	0
  2081  001844  6E28               	movwf	___aldiv@divisor+1,c
  2082  001846  0E00               	movlw	0
  2083  001848  6E29               	movwf	___aldiv@divisor+2,c
  2084  00184A  0E00               	movlw	0
  2085  00184C  6E2A               	movwf	___aldiv@divisor+3,c
  2086  00184E  C148  F023         	movff	_time,___aldiv@dividend
  2087  001852  C149  F024         	movff	_time+1,___aldiv@dividend+1
  2088  001856  C14A  F025         	movff	_time+2,___aldiv@dividend+2
  2089  00185A  C14B  F026         	movff	_time+3,___aldiv@dividend+3
  2090  00185E  ECCD  F015         	call	___aldiv	;wreg free
  2091  001862  C023  F031         	movff	?___aldiv,___almod@dividend
  2092  001866  C024  F032         	movff	?___aldiv+1,___almod@dividend+1
  2093  00186A  C025  F033         	movff	?___aldiv+2,___almod@dividend+2
  2094  00186E  C026  F034         	movff	?___aldiv+3,___almod@dividend+3
  2095  001872  0E3C               	movlw	60
  2096  001874  6E35               	movwf	___almod@divisor,c
  2097  001876  0E00               	movlw	0
  2098  001878  6E36               	movwf	___almod@divisor+1,c
  2099  00187A  0E00               	movlw	0
  2100  00187C  6E37               	movwf	___almod@divisor+2,c
  2101  00187E  0E00               	movlw	0
  2102  001880  6E38               	movwf	___almod@divisor+3,c
  2103  001882  EC67  F018         	call	___almod	;wreg free
  2104  001886  C031  F0C3         	movff	?___almod,?_printf+6
  2105  00188A  C032  F0C4         	movff	?___almod+1,?_printf+7
  2106  00188E  C033  F0C5         	movff	?___almod+2,?_printf+8
  2107  001892  C034  F0C6         	movff	?___almod+3,?_printf+9
  2108  001896  EC09  F000         	call	_printf	;wreg free
  2109                           
  2110                           ;main.c: 160: _delay((unsigned long)((77)*(10000000/4000.0)));
  2111  00189A  0EFA               	movlw	250
  2112  00189C  0101               	movlb	1	; () banked
  2113  00189E  6F1F               	movwf	??_main& (0+255),b
  2114  0018A0  0EFF               	movlw	255
  2115  0018A2                     u7937:
  2116  0018A2  2EE8               	decfsz	wreg,f,c
  2117  0018A4  D7FE               	bra	u7937
  2118  0018A6  2F1F               	decfsz	??_main& (0+255),f,b
  2119  0018A8  D7FC               	bra	u7937
  2120                           
  2121                           ;main.c: 163: if(time - cylinderStart >= cylinderDur)
  2122  0018AA  C134  F11F         	movff	main@cylinderDur,??_main
  2123  0018AE  C135  F120         	movff	main@cylinderDur+1,??_main+1
  2124  0018B2  0E00               	movlw	0
  2125  0018B4  0101               	movlb	1	; () banked
  2126  0018B6  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2127  0018B8  0EFF               	movlw	255
  2128  0018BA  6F21               	movwf	(??_main+2)& (0+255),b
  2129  0018BC  6F22               	movwf	(??_main+3)& (0+255),b
  2130  0018BE  C132  F123         	movff	main@cylinderStart,??_main+4
  2131  0018C2  C133  F124         	movff	main@cylinderStart+1,??_main+5
  2132  0018C6  0E00               	movlw	0
  2133  0018C8  0101               	movlb	1	; () banked
  2134  0018CA  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2135  0018CC  0EFF               	movlw	255
  2136  0018CE  6F25               	movwf	(??_main+6)& (0+255),b
  2137  0018D0  6F26               	movwf	(??_main+7)& (0+255),b
  2138  0018D2  0101               	movlb	1	; () banked
  2139  0018D4  1F23               	comf	(??_main+4)& (0+255),f,b
  2140  0018D6  1F24               	comf	(??_main+5)& (0+255),f,b
  2141  0018D8  1F25               	comf	(??_main+6)& (0+255),f,b
  2142  0018DA  1F26               	comf	(??_main+7)& (0+255),f,b
  2143  0018DC  2B23               	incf	(??_main+4)& (0+255),f,b
  2144  0018DE  0E00               	movlw	0
  2145  0018E0  2324               	addwfc	(??_main+5)& (0+255),f,b
  2146  0018E2  2325               	addwfc	(??_main+6)& (0+255),f,b
  2147  0018E4  2326               	addwfc	(??_main+7)& (0+255),f,b
  2148  0018E6  0101               	movlb	1	; () banked
  2149  0018E8  5148               	movf	_time& (0+255),w,b
  2150  0018EA  0101               	movlb	1	; () banked
  2151  0018EC  2523               	addwf	(??_main+4)& (0+255),w,b
  2152  0018EE  0101               	movlb	1	; () banked
  2153  0018F0  6F27               	movwf	(??_main+8)& (0+255),b
  2154  0018F2  0101               	movlb	1	; () banked
  2155  0018F4  5149               	movf	(_time+1)& (0+255),w,b
  2156  0018F6  0101               	movlb	1	; () banked
  2157  0018F8  2124               	addwfc	(??_main+5)& (0+255),w,b
  2158  0018FA  0101               	movlb	1	; () banked
  2159  0018FC  6F28               	movwf	(??_main+9)& (0+255),b
  2160  0018FE  0101               	movlb	1	; () banked
  2161  001900  514A               	movf	(_time+2)& (0+255),w,b
  2162  001902  0101               	movlb	1	; () banked
  2163  001904  2125               	addwfc	(??_main+6)& (0+255),w,b
  2164  001906  0101               	movlb	1	; () banked
  2165  001908  6F29               	movwf	(??_main+10)& (0+255),b
  2166  00190A  0101               	movlb	1	; () banked
  2167  00190C  514B               	movf	(_time+3)& (0+255),w,b
  2168  00190E  0101               	movlb	1	; () banked
  2169  001910  2126               	addwfc	(??_main+7)& (0+255),w,b
  2170  001912  0101               	movlb	1	; () banked
  2171  001914  6F2A               	movwf	(??_main+11)& (0+255),b
  2172  001916  0101               	movlb	1	; () banked
  2173  001918  511F               	movf	??_main& (0+255),w,b
  2174  00191A  0101               	movlb	1	; () banked
  2175  00191C  5D27               	subwf	(??_main+8)& (0+255),w,b
  2176  00191E  0101               	movlb	1	; () banked
  2177  001920  5120               	movf	(??_main+1)& (0+255),w,b
  2178  001922  0101               	movlb	1	; () banked
  2179  001924  5928               	subwfb	(??_main+9)& (0+255),w,b
  2180  001926  0101               	movlb	1	; () banked
  2181  001928  5121               	movf	(??_main+2)& (0+255),w,b
  2182  00192A  0101               	movlb	1	; () banked
  2183  00192C  5929               	subwfb	(??_main+10)& (0+255),w,b
  2184  00192E  0101               	movlb	1	; () banked
  2185  001930  512A               	movf	(??_main+11)& (0+255),w,b
  2186  001932  0A80               	xorlw	128
  2187  001934  0101               	movlb	1	; () banked
  2188  001936  6F2B               	movwf	(??_main+12)& (0+255),b
  2189  001938  0101               	movlb	1	; () banked
  2190  00193A  5122               	movf	(??_main+3)& (0+255),w,b
  2191  00193C  0A80               	xorlw	128
  2192  00193E  0101               	movlb	1	; () banked
  2193  001940  592B               	subwfb	(??_main+12)& (0+255),w,b
  2194  001942  A0D8               	btfss	status,0,c
  2195  001944  D02E               	goto	l7434
  2196                           
  2197                           ; BSR set to: 1
  2198                           ;main.c: 164: {
  2199                           ;main.c: 165: int prev = digitalRead(cylinderDir);
  2200  001946  0E62               	movlw	low _cylinderDir
  2201  001948  6E23               	movwf	digitalRead@pin,c
  2202  00194A  0E01               	movlw	high _cylinderDir
  2203  00194C  6E24               	movwf	digitalRead@pin+1,c
  2204  00194E  EC08  F014         	call	_digitalRead	;wreg free
  2205  001952  C023  F136         	movff	?_digitalRead,main@prev
  2206  001956  C024  F137         	movff	?_digitalRead+1,main@prev+1
  2207                           
  2208                           ;main.c: 166: digitalWrite(cylinderDir, !prev);
  2209  00195A  0E62               	movlw	low _cylinderDir
  2210  00195C  6E23               	movwf	digitalWrite@pin,c
  2211  00195E  0E01               	movlw	high _cylinderDir
  2212  001960  6E24               	movwf	digitalWrite@pin+1,c
  2213  001962  0101               	movlb	1	; () banked
  2214  001964  5136               	movf	main@prev& (0+255),w,b
  2215  001966  0101               	movlb	1	; () banked
  2216  001968  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2217  00196A  A4D8               	btfss	status,2,c
  2218  00196C  D002               	goto	u7820
  2219  00196E  0E01               	movlw	1
  2220  001970  D001               	goto	u7830
  2221  001972                     u7820:
  2222  001972  0E00               	movlw	0
  2223  001974                     u7830:
  2224  001974  6E25               	movwf	digitalWrite@val,c
  2225  001976  6A26               	clrf	digitalWrite@val+1,c
  2226  001978  EC33  F016         	call	_digitalWrite	;wreg free
  2227                           
  2228                           ;main.c: 167: if(prev)cylinderDur = cylinderBackward;
  2229  00197C  0101               	movlb	1	; () banked
  2230  00197E  5136               	movf	main@prev& (0+255),w,b
  2231  001980  0101               	movlb	1	; () banked
  2232  001982  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2233  001984  B4D8               	btfsc	status,2,c
  2234  001986  D005               	goto	l151
  2235                           
  2236                           ; BSR set to: 1
  2237  001988  C12E  F134         	movff	main@cylinderBackward,main@cylinderDur
  2238  00198C  C12F  F135         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2239  001990  D004               	goto	l152
  2240  001992                     l151:
  2241                           
  2242                           ; BSR set to: 1
  2243                           ;main.c: 168: else cylinderDur = cylinderForward;
  2244  001992  C12C  F134         	movff	main@cylinderForward,main@cylinderDur
  2245  001996  C12D  F135         	movff	main@cylinderForward+1,main@cylinderDur+1
  2246  00199A                     l152:
  2247                           
  2248                           ; BSR set to: 1
  2249                           ;main.c: 169: cylinderStart = time;
  2250  00199A  C148  F132         	movff	_time,main@cylinderStart
  2251  00199E  C149  F133         	movff	_time+1,main@cylinderStart+1
  2252  0019A2                     l7434:
  2253                           
  2254                           ; BSR set to: 1
  2255                           ;main.c: 170: }
  2256                           ;main.c: 172: if(time - lastBatteryTime > stoppingTime)
  2257  0019A2  C130  F11F         	movff	main@lastBatteryTime,??_main
  2258  0019A6  C131  F120         	movff	main@lastBatteryTime+1,??_main+1
  2259  0019AA  0E00               	movlw	0
  2260  0019AC  0101               	movlb	1	; () banked
  2261  0019AE  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2262  0019B0  0EFF               	movlw	255
  2263  0019B2  6F21               	movwf	(??_main+2)& (0+255),b
  2264  0019B4  6F22               	movwf	(??_main+3)& (0+255),b
  2265  0019B6  0101               	movlb	1	; () banked
  2266  0019B8  1F1F               	comf	??_main& (0+255),f,b
  2267  0019BA  1F20               	comf	(??_main+1)& (0+255),f,b
  2268  0019BC  1F21               	comf	(??_main+2)& (0+255),f,b
  2269  0019BE  1F22               	comf	(??_main+3)& (0+255),f,b
  2270  0019C0  2B1F               	incf	??_main& (0+255),f,b
  2271  0019C2  0E00               	movlw	0
  2272  0019C4  2320               	addwfc	(??_main+1)& (0+255),f,b
  2273  0019C6  2321               	addwfc	(??_main+2)& (0+255),f,b
  2274  0019C8  2322               	addwfc	(??_main+3)& (0+255),f,b
  2275  0019CA  0101               	movlb	1	; () banked
  2276  0019CC  5148               	movf	_time& (0+255),w,b
  2277  0019CE  0101               	movlb	1	; () banked
  2278  0019D0  251F               	addwf	??_main& (0+255),w,b
  2279  0019D2  0101               	movlb	1	; () banked
  2280  0019D4  6F23               	movwf	(??_main+4)& (0+255),b
  2281  0019D6  0101               	movlb	1	; () banked
  2282  0019D8  5149               	movf	(_time+1)& (0+255),w,b
  2283  0019DA  0101               	movlb	1	; () banked
  2284  0019DC  2120               	addwfc	(??_main+1)& (0+255),w,b
  2285  0019DE  0101               	movlb	1	; () banked
  2286  0019E0  6F24               	movwf	(??_main+5)& (0+255),b
  2287  0019E2  0101               	movlb	1	; () banked
  2288  0019E4  514A               	movf	(_time+2)& (0+255),w,b
  2289  0019E6  0101               	movlb	1	; () banked
  2290  0019E8  2121               	addwfc	(??_main+2)& (0+255),w,b
  2291  0019EA  0101               	movlb	1	; () banked
  2292  0019EC  6F25               	movwf	(??_main+6)& (0+255),b
  2293  0019EE  0101               	movlb	1	; () banked
  2294  0019F0  514B               	movf	(_time+3)& (0+255),w,b
  2295  0019F2  0101               	movlb	1	; () banked
  2296  0019F4  2122               	addwfc	(??_main+3)& (0+255),w,b
  2297  0019F6  0101               	movlb	1	; () banked
  2298  0019F8  6F26               	movwf	(??_main+7)& (0+255),b
  2299  0019FA  0E00               	movlw	0
  2300  0019FC  0101               	movlb	1	; () banked
  2301  0019FE  BF5D               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2302  001A00  0EFF               	movlw	255
  2303  001A02  0101               	movlb	1	; () banked
  2304  001A04  6F28               	movwf	(??_main+9)& (0+255),b
  2305  001A06  0A80               	xorlw	128
  2306  001A08  6F27               	movwf	(??_main+8)& (0+255),b
  2307  001A0A  0101               	movlb	1	; () banked
  2308  001A0C  5123               	movf	(??_main+4)& (0+255),w,b
  2309  001A0E  0101               	movlb	1	; () banked
  2310  001A10  5D5C               	subwf	_stoppingTime& (0+255),w,b
  2311  001A12  0101               	movlb	1	; () banked
  2312  001A14  5124               	movf	(??_main+5)& (0+255),w,b
  2313  001A16  0101               	movlb	1	; () banked
  2314  001A18  595D               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2315  001A1A  0101               	movlb	1	; () banked
  2316  001A1C  5125               	movf	(??_main+6)& (0+255),w,b
  2317  001A1E  0101               	movlb	1	; () banked
  2318  001A20  5928               	subwfb	(??_main+9)& (0+255),w,b
  2319  001A22  0101               	movlb	1	; () banked
  2320  001A24  5126               	movf	(??_main+7)& (0+255),w,b
  2321  001A26  0A80               	xorlw	128
  2322  001A28  0101               	movlb	1	; () banked
  2323  001A2A  5927               	subwfb	(??_main+8)& (0+255),w,b
  2324  001A2C  B0D8               	btfsc	status,0,c
  2325  001A2E  D006               	goto	l7438
  2326                           
  2327                           ; BSR set to: 1
  2328                           ;main.c: 173: {
  2329                           ;main.c: 174: terminate = 1;
  2330  001A30  0E00               	movlw	0
  2331  001A32  0101               	movlb	1	; () banked
  2332  001A34  6F57               	movwf	(_terminate+1)& (0+255),b
  2333  001A36  0E01               	movlw	1
  2334  001A38  6F56               	movwf	_terminate& (0+255),b
  2335                           
  2336                           ;main.c: 175: break;
  2337  001A3A  D00C               	goto	l7442
  2338  001A3C                     l7438:
  2339                           
  2340                           ; BSR set to: 1
  2341  001A3C  0101               	movlb	1	; () banked
  2342  001A3E  514C               	movf	_batteryDetected& (0+255),w,b
  2343  001A40  0101               	movlb	1	; () banked
  2344  001A42  114D               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2345  001A44  A4D8               	btfss	status,2,c
  2346  001A46  D006               	goto	l7442
  2347                           
  2348                           ; BSR set to: 1
  2349  001A48  0101               	movlb	1	; () banked
  2350  001A4A  5156               	movf	_terminate& (0+255),w,b
  2351  001A4C  0101               	movlb	1	; () banked
  2352  001A4E  1157               	iorwf	(_terminate+1)& (0+255),w,b
  2353  001A50  B4D8               	btfsc	status,2,c
  2354  001A52  D6D3               	goto	l7420
  2355  001A54                     l7442:
  2356                           
  2357                           ; BSR set to: 1
  2358                           ;main.c: 176: }
  2359                           ;main.c: 177: }
  2360                           ;main.c: 179: if(terminate)break;
  2361  001A54  0101               	movlb	1	; () banked
  2362  001A56  5156               	movf	_terminate& (0+255),w,b
  2363  001A58  0101               	movlb	1	; () banked
  2364  001A5A  1157               	iorwf	(_terminate+1)& (0+255),w,b
  2365  001A5C  A4D8               	btfss	status,2,c
  2366  001A5E  D00C               	goto	l7452
  2367                           
  2368                           ; BSR set to: 1
  2369                           ;main.c: 181: sortBattery();
  2370                           
  2371                           ; BSR set to: 1
  2372                           
  2373                           ; BSR set to: 1
  2374  001A60  EC05  F007         	call	_sortBattery	;wreg free
  2375                           
  2376                           ;main.c: 184: lastBatteryTime = time;
  2377  001A64  C148  F130         	movff	_time,main@lastBatteryTime
  2378  001A68  C149  F131         	movff	_time+1,main@lastBatteryTime+1
  2379                           
  2380                           ;main.c: 185: batteryDetected = 0;
  2381  001A6C  0E00               	movlw	0
  2382  001A6E  0101               	movlb	1	; () banked
  2383  001A70  6F4D               	movwf	(_batteryDetected+1)& (0+255),b
  2384  001A72  0E00               	movlw	0
  2385  001A74  6F4C               	movwf	_batteryDetected& (0+255),b
  2386                           
  2387                           ; BSR set to: 1
  2388  001A76  D69F               	goto	l7408
  2389  001A78                     l7452:
  2390                           
  2391                           ; BSR set to: 1
  2392                           ;main.c: 186: }
  2393                           ;main.c: 189: digitalWrite(cylinderMotor, 0);
  2394  001A78  0E66               	movlw	low _cylinderMotor
  2395  001A7A  6E23               	movwf	digitalWrite@pin,c
  2396  001A7C  0E01               	movlw	high _cylinderMotor
  2397  001A7E  6E24               	movwf	digitalWrite@pin+1,c
  2398  001A80  0E00               	movlw	0
  2399  001A82  6E26               	movwf	digitalWrite@val+1,c
  2400  001A84  0E00               	movlw	0
  2401  001A86  6E25               	movwf	digitalWrite@val,c
  2402  001A88  EC33  F016         	call	_digitalWrite	;wreg free
  2403                           
  2404                           ;main.c: 192: lcdClear();
  2405  001A8C  EC9D  F01E         	call	_lcdClear	;wreg free
  2406                           
  2407                           ;main.c: 193: printf("[AA,C,9V,OTHER]\n");
  2408  001A90  0E9D               	movlw	low STR_5
  2409  001A92  0100               	movlb	0	; () banked
  2410  001A94  6FBD               	movwf	printf@f& (0+255),b
  2411  001A96  0EFF               	movlw	high STR_5
  2412  001A98  0100               	movlb	0	; () banked
  2413  001A9A  6FBE               	movwf	(printf@f+1)& (0+255),b
  2414  001A9C  EC09  F000         	call	_printf	;wreg free
  2415                           
  2416                           ;main.c: 194: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2417  001AA0  0ECE               	movlw	low STR_6
  2418  001AA2  0100               	movlb	0	; () banked
  2419  001AA4  6FBD               	movwf	printf@f& (0+255),b
  2420  001AA6  0EFF               	movlw	high STR_6
  2421  001AA8  0100               	movlb	0	; () banked
  2422  001AAA  6FBE               	movwf	(printf@f+1)& (0+255),b
  2423  001AAC  C150  F0BF         	movff	_n_AA,?_printf+2
  2424  001AB0  C151  F0C0         	movff	_n_AA+1,?_printf+3
  2425  001AB4  C152  F0C1         	movff	_n_C,?_printf+4
  2426  001AB8  C153  F0C2         	movff	_n_C+1,?_printf+5
  2427  001ABC  C14E  F0C3         	movff	_n_9V,?_printf+6
  2428  001AC0  C14F  F0C4         	movff	_n_9V+1,?_printf+7
  2429  001AC4  C154  F0C5         	movff	_n_OTHER,?_printf+8
  2430  001AC8  C155  F0C6         	movff	_n_OTHER+1,?_printf+9
  2431  001ACC  EC09  F000         	call	_printf	;wreg free
  2432                           
  2433                           ;main.c: 195: readKeypad();
  2434  001AD0  ECCC  F01D         	call	_readKeypad	;wreg free
  2435  001AD4  D61D               	goto	l7390
  2436  001AD6                     l162:
  2437  001AD6  D7FF               	goto	l162
  2438  001AD8                     __end_of_main:
  2439                           	opt stack 0
  2440                           tblptru	equ	0xFF8
  2441                           tblptrh	equ	0xFF7
  2442                           tblptrl	equ	0xFF6
  2443                           tablat	equ	0xFF5
  2444                           postinc0	equ	0xFEE
  2445                           wreg	equ	0xFE8
  2446                           postdec1	equ	0xFE5
  2447                           fsr1l	equ	0xFE1
  2448                           status	equ	0xFD8
  2449                           
  2450 ;; *************** function _sortBattery *****************
  2451 ;; Defined at:
  2452 ;;		line 203 in file "main.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;  V               3   22[BANK1 ] float 
  2457 ;;  i               2   18[BANK1 ] int 
  2458 ;;  i               3   25[BANK1 ] float 
  2459 ;;  V               3   28[BANK1 ] float 
  2460 ;;  V_max           3   15[BANK1 ] float 
  2461 ;;  resolution      3   12[BANK1 ] float 
  2462 ;;  Vcc             3    9[BANK1 ] float 
  2463 ;;  V_float         3    2[BANK1 ] float 
  2464 ;;  targetAngle     2   20[BANK1 ] int 
  2465 ;;  signal          2    7[BANK1 ] int 
  2466 ;;  pos_v_counte    2    5[BANK1 ] int 
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  1    wreg      void 
  2469 ;; Registers used:
  2470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;Total ram usage:       33 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    8
  2483 ;; This function calls:
  2484 ;;		___altoft
  2485 ;;		___awtoft
  2486 ;;		___ftdiv
  2487 ;;		___ftge
  2488 ;;		___ftmul
  2489 ;;		___ftsub
  2490 ;;		___fttol
  2491 ;;		_analogRead
  2492 ;;		_digitalRead
  2493 ;;		_digitalWrite
  2494 ;;		_lcdClear
  2495 ;;		_printf
  2496 ;;		_readKeypad
  2497 ;;		_setAngle
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text1
  2504  000E0A                     __ptext1:
  2505                           	opt stack 0
  2506  000E0A                     _sortBattery:
  2507                           	opt stack 22
  2508                           
  2509                           ;main.c: 206: setAngle(conveyorServo, 90);
  2510                           
  2511                           ;incstack = 0
  2512  000E0A  0E5E               	movlw	low _conveyorServo
  2513  000E0C  0100               	movlb	0	; () banked
  2514  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2515  000E10  0E01               	movlw	high _conveyorServo
  2516  000E12  0100               	movlb	0	; () banked
  2517  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2518  000E16  0E00               	movlw	0
  2519  000E18  0100               	movlb	0	; () banked
  2520  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2521  000E1C  0E5A               	movlw	90
  2522  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2523  000E20  EC63  F015         	call	_setAngle	;wreg free
  2524                           
  2525                           ;main.c: 207: digitalWrite(cylinderMotor, 0);
  2526  000E24  0E66               	movlw	low _cylinderMotor
  2527  000E26  6E23               	movwf	digitalWrite@pin,c
  2528  000E28  0E01               	movlw	high _cylinderMotor
  2529  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2530  000E2C  0E00               	movlw	0
  2531  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2532  000E30  0E00               	movlw	0
  2533  000E32  6E25               	movwf	digitalWrite@val,c
  2534  000E34  EC33  F016         	call	_digitalWrite	;wreg free
  2535                           
  2536                           ;main.c: 210: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2537  000E38  0E0D               	movlw	13
  2538  000E3A  0100               	movlb	0	; () banked
  2539  000E3C  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2540  000E3E  0EAF               	movlw	175
  2541  000E40  0100               	movlb	0	; () banked
  2542  000E42  6FEB               	movwf	??_sortBattery& (0+255),b
  2543  000E44  0EB6               	movlw	182
  2544  000E46                     u7947:
  2545  000E46  2EE8               	decfsz	wreg,f,c
  2546  000E48  D7FE               	bra	u7947
  2547  000E4A  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2548  000E4C  D7FC               	bra	u7947
  2549  000E4E  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2550  000E50  D7FA               	bra	u7947
  2551  000E52  F000               	nop	
  2552                           
  2553                           ;main.c: 212: float Vcc = 5.00;
  2554  000E54  0E00               	movlw	0
  2555  000E56  0101               	movlb	1	; () banked
  2556  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2557  000E5A  0EA0               	movlw	160
  2558  000E5C  0101               	movlb	1	; () banked
  2559  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2560  000E60  0E40               	movlw	64
  2561  000E62  0101               	movlb	1	; () banked
  2562  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2563                           
  2564                           ; BSR set to: 1
  2565                           ;main.c: 213: float resolution = (1<<10) - 1;
  2566  000E66  0EC0               	movlw	192
  2567  000E68  0101               	movlb	1	; () banked
  2568  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2569  000E6C  0E7F               	movlw	127
  2570  000E6E  0101               	movlb	1	; () banked
  2571  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2572  000E72  0E44               	movlw	68
  2573  000E74  0101               	movlb	1	; () banked
  2574  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2575                           
  2576                           ; BSR set to: 1
  2577                           ;main.c: 214: float V_max = 0;
  2578  000E78  0E00               	movlw	0
  2579  000E7A  0101               	movlb	1	; () banked
  2580  000E7C  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2581  000E7E  0E00               	movlw	0
  2582  000E80  0101               	movlb	1	; () banked
  2583  000E82  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2584  000E84  0E00               	movlw	0
  2585  000E86  0101               	movlb	1	; () banked
  2586  000E88  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2587                           
  2588                           ; BSR set to: 1
  2589                           ;main.c: 215: float V_float = 0;
  2590  000E8A  0E00               	movlw	0
  2591  000E8C  0101               	movlb	1	; () banked
  2592  000E8E  6F02               	movwf	sortBattery@V_float& (0+255),b
  2593  000E90  0E00               	movlw	0
  2594  000E92  0101               	movlb	1	; () banked
  2595  000E94  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2596  000E96  0E00               	movlw	0
  2597  000E98  0101               	movlb	1	; () banked
  2598  000E9A  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2599                           
  2600                           ; BSR set to: 1
  2601                           ;main.c: 216: int pos_v_counter = 1;
  2602  000E9C  0E00               	movlw	0
  2603  000E9E  0101               	movlb	1	; () banked
  2604  000EA0  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2605  000EA2  0E01               	movlw	1
  2606  000EA4  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2607                           
  2608                           ; BSR set to: 1
  2609                           ;main.c: 217: int signal = 0;
  2610  000EA6  0E00               	movlw	0
  2611  000EA8  0101               	movlb	1	; () banked
  2612  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2613  000EAC  0E00               	movlw	0
  2614  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2615                           
  2616                           ; BSR set to: 1
  2617                           ;main.c: 221: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2618  000EB0  C158  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2619  000EB4  C159  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2620  000EB8  ECB0  F01D         	call	___awtoft	;wreg free
  2621  000EBC  C02B  F119         	movff	?___awtoft,sortBattery@i
  2622  000EC0  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2623  000EC4  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2624  000EC8  D0F6               	goto	l7312
  2625  000ECA                     l7286:
  2626                           
  2627                           ;main.c: 222: setAngle(padServo, i);
  2628  000ECA  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2629  000ECE  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2630  000ED2  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2631  000ED6  EC2B  F011         	call	___fttol	;wreg free
  2632  000EDA  C0AE  F100         	movff	?___fttol,_sortBattery$1394
  2633  000EDE  C0AF  F101         	movff	?___fttol+1,_sortBattery$1394+1
  2634                           
  2635                           ;main.c: 222: setAngle(padServo, i);
  2636  000EE2  0E6E               	movlw	low _padServo
  2637  000EE4  0100               	movlb	0	; () banked
  2638  000EE6  6FD4               	movwf	setAngle@motor& (0+255),b
  2639  000EE8  0E01               	movlw	high _padServo
  2640  000EEA  0100               	movlb	0	; () banked
  2641  000EEC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2642  000EEE  C100  F0D6         	movff	_sortBattery$1394,setAngle@angle
  2643  000EF2  C101  F0D7         	movff	_sortBattery$1394+1,setAngle@angle+1
  2644  000EF6  EC63  F015         	call	_setAngle	;wreg free
  2645                           
  2646                           ;main.c: 223: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2647  000EFA  0E53               	movlw	83
  2648  000EFC                     u7957:
  2649  000EFC  2EE8               	decfsz	wreg,f,c
  2650  000EFE  D7FE               	bra	u7957
  2651  000F00  F000               	nop	
  2652                           
  2653                           ;main.c: 224: digitalWrite(AA_float, 1);
  2654  000F02  0E4A               	movlw	low _AA_float
  2655  000F04  6E23               	movwf	digitalWrite@pin,c
  2656  000F06  0E00               	movlw	high _AA_float
  2657  000F08  6E24               	movwf	digitalWrite@pin+1,c
  2658  000F0A  0E00               	movlw	0
  2659  000F0C  6E26               	movwf	digitalWrite@val+1,c
  2660  000F0E  0E01               	movlw	1
  2661  000F10  6E25               	movwf	digitalWrite@val,c
  2662  000F12  EC33  F016         	call	_digitalWrite	;wreg free
  2663                           
  2664                           ;main.c: 225: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2665  000F16  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2666  000F1A  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2667  000F1E  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2668  000F22  C054  F023         	movff	_padPin3+2,analogRead@channel
  2669  000F26  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2670  000F2A  EC94  F01D         	call	_analogRead	;wreg free
  2671  000F2E  C023  F02B         	movff	?_analogRead,___altoft@c
  2672  000F32  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2673  000F36  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2674  000F3A  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2675  000F3E  EC9C  F01A         	call	___altoft	;wreg free
  2676  000F42  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2677  000F46  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2678  000F4A  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2679  000F4E  ECFA  F012         	call	___ftdiv	;wreg free
  2680  000F52  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2681  000F56  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2682  000F5A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2683  000F5E  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2684  000F62  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2685  000F66  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2686  000F6A  ECD0  F00F         	call	___ftmul	;wreg free
  2687  000F6E  C089  F116         	movff	?___ftmul,sortBattery@V
  2688  000F72  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2689  000F76  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2690                           
  2691                           ;main.c: 227: if(V > 0.1)pos_v_counter++;
  2692  000F7A  0ECD               	movlw	205
  2693  000F7C  6E2F               	movwf	___ftge@ff1,c
  2694  000F7E  0ECC               	movlw	204
  2695  000F80  6E30               	movwf	___ftge@ff1+1,c
  2696  000F82  0E3D               	movlw	61
  2697  000F84  6E31               	movwf	___ftge@ff1+2,c
  2698  000F86  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2699  000F8A  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2700  000F8E  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2701  000F92  EC06  F019         	call	___ftge	;wreg free
  2702  000F96  B0D8               	btfsc	status,0,c
  2703  000F98  D003               	goto	l7300
  2704  000F9A  0101               	movlb	1	; () banked
  2705  000F9C  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2706  000F9E  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2707  000FA0                     l7300:
  2708                           
  2709                           ;main.c: 229: if(V > V_max) {
  2710  000FA0  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2711  000FA4  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2712  000FA8  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2713  000FAC  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2714  000FB0  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2715  000FB4  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2716  000FB8  EC06  F019         	call	___ftge	;wreg free
  2717  000FBC  B0D8               	btfsc	status,0,c
  2718  000FBE  D064               	goto	l7310
  2719                           
  2720                           ;main.c: 230: signal = digitalRead(padPin1)<<1;
  2721  000FC0  0E4E               	movlw	low _padPin1
  2722  000FC2  6E23               	movwf	digitalRead@pin,c
  2723  000FC4  0E00               	movlw	high _padPin1
  2724  000FC6  6E24               	movwf	digitalRead@pin+1,c
  2725  000FC8  EC08  F014         	call	_digitalRead	;wreg free
  2726  000FCC  90D8               	bcf	status,0,c
  2727  000FCE  3423               	rlcf	?_digitalRead,w,c
  2728  000FD0  0101               	movlb	1	; () banked
  2729  000FD2  6F07               	movwf	sortBattery@signal& (0+255),b
  2730  000FD4  3424               	rlcf	?_digitalRead+1,w,c
  2731  000FD6  0101               	movlb	1	; () banked
  2732  000FD8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2733                           
  2734                           ;main.c: 231: signal |= digitalRead(padPin2)<<0;
  2735  000FDA  0E6A               	movlw	low _padPin2
  2736  000FDC  6E23               	movwf	digitalRead@pin,c
  2737  000FDE  0E01               	movlw	high _padPin2
  2738  000FE0  6E24               	movwf	digitalRead@pin+1,c
  2739  000FE2  EC08  F014         	call	_digitalRead	;wreg free
  2740  000FE6  5023               	movf	?_digitalRead,w,c
  2741  000FE8  0101               	movlb	1	; () banked
  2742  000FEA  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2743  000FEC  5024               	movf	?_digitalRead+1,w,c
  2744  000FEE  0101               	movlb	1	; () banked
  2745  000FF0  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2746                           
  2747                           ; BSR set to: 1
  2748                           ;main.c: 233: V_max = V;
  2749  000FF2  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2750  000FF6  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2751  000FFA  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2752                           
  2753                           ;main.c: 236: digitalWrite(AA_float, 0);
  2754  000FFE  0E4A               	movlw	low _AA_float
  2755  001000  6E23               	movwf	digitalWrite@pin,c
  2756  001002  0E00               	movlw	high _AA_float
  2757  001004  6E24               	movwf	digitalWrite@pin+1,c
  2758  001006  0E00               	movlw	0
  2759  001008  6E26               	movwf	digitalWrite@val+1,c
  2760  00100A  0E00               	movlw	0
  2761  00100C  6E25               	movwf	digitalWrite@val,c
  2762  00100E  EC33  F016         	call	_digitalWrite	;wreg free
  2763                           
  2764                           ;main.c: 237: _delay((unsigned long)((1)*(10000000/4000.0)));
  2765  001012  0E04               	movlw	4
  2766  001014  0100               	movlb	0	; () banked
  2767  001016  6FEB               	movwf	??_sortBattery& (0+255),b
  2768  001018  0E3D               	movlw	61
  2769  00101A                     u7967:
  2770  00101A  2EE8               	decfsz	wreg,f,c
  2771  00101C  D7FE               	bra	u7967
  2772  00101E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2773  001020  D7FC               	bra	u7967
  2774  001022  D000               	nop2	
  2775                           
  2776                           ;main.c: 238: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2777  001024  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2778  001028  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2779  00102C  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2780  001030  C054  F023         	movff	_padPin3+2,analogRead@channel
  2781  001034  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2782  001038  EC94  F01D         	call	_analogRead	;wreg free
  2783  00103C  C023  F02B         	movff	?_analogRead,___altoft@c
  2784  001040  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2785  001044  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2786  001048  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2787  00104C  EC9C  F01A         	call	___altoft	;wreg free
  2788  001050  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2789  001054  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2790  001058  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2791  00105C  ECFA  F012         	call	___ftdiv	;wreg free
  2792  001060  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2793  001064  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2794  001068  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2795  00106C  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2796  001070  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2797  001074  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2798  001078  ECD0  F00F         	call	___ftmul	;wreg free
  2799  00107C  C089  F102         	movff	?___ftmul,sortBattery@V_float
  2800  001080  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2801  001084  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2802  001088                     l7310:
  2803  001088  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  2804  00108C  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  2805  001090  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  2806  001094  0ECD               	movlw	205
  2807  001096  0100               	movlb	0	; () banked
  2808  001098  6FB1               	movwf	___ftsub@f2& (0+255),b
  2809  00109A  0ECC               	movlw	204
  2810  00109C  0100               	movlb	0	; () banked
  2811  00109E  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  2812  0010A0  0E3D               	movlw	61
  2813  0010A2  0100               	movlb	0	; () banked
  2814  0010A4  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  2815  0010A6  ECBA  F01C         	call	___ftsub	;wreg free
  2816  0010AA  C0AE  F119         	movff	?___ftsub,sortBattery@i
  2817  0010AE  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2818  0010B2  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2819  0010B6                     l7312:
  2820  0010B6  C0F4  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  2821  0010BA  C0F5  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2822  0010BE  ECB0  F01D         	call	___awtoft	;wreg free
  2823  0010C2  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  2824  0010C6  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  2825  0010CA  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  2826  0010CE  C119  F032         	movff	sortBattery@i,___ftge@ff2
  2827  0010D2  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  2828  0010D6  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  2829  0010DA  EC06  F019         	call	___ftge	;wreg free
  2830  0010DE  A0D8               	btfss	status,0,c
  2831  0010E0  D6F4               	goto	l7286
  2832                           
  2833                           ;main.c: 240: }
  2834                           ;main.c: 241: }
  2835                           ;main.c: 243: int targetAngle;
  2836                           ;main.c: 244: float V = V_max;
  2837  0010E2  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_236
  2838  0010E6  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_236+1
  2839  0010EA  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_236+2
  2840                           
  2841                           ;main.c: 246: lcdClear();
  2842  0010EE  EC9D  F01E         	call	_lcdClear	;wreg free
  2843                           
  2844                           ;main.c: 247: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  2845  0010F2  0EBF               	movlw	low STR_7
  2846  0010F4  0100               	movlb	0	; () banked
  2847  0010F6  6FBD               	movwf	printf@f& (0+255),b
  2848  0010F8  0EFF               	movlw	high STR_7
  2849  0010FA  0100               	movlb	0	; () banked
  2850  0010FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2851  0010FE  C105  F0BF         	movff	sortBattery@pos_v_counter,?_printf+2
  2852  001102  C106  F0C0         	movff	sortBattery@pos_v_counter+1,?_printf+3
  2853  001106  C11C  F0C1         	movff	sortBattery@V_236,?_printf+4
  2854  00110A  C11D  F0C2         	movff	sortBattery@V_236+1,?_printf+5
  2855  00110E  C11E  F0C3         	movff	sortBattery@V_236+2,?_printf+6
  2856  001112  EC09  F000         	call	_printf	;wreg free
  2857                           
  2858                           ;main.c: 249: readKeypad();
  2859  001116  ECCC  F01D         	call	_readKeypad	;wreg free
  2860                           
  2861                           ;main.c: 253: switch(signal){
  2862  00111A  D060               	goto	l7348
  2863  00111C                     l7320:
  2864                           
  2865                           ;main.c: 255: if(V_float < 0.1){
  2866  00111C  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  2867  001120  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2868  001124  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2869  001128  0ECD               	movlw	205
  2870  00112A  6E32               	movwf	___ftge@ff2,c
  2871  00112C  0ECC               	movlw	204
  2872  00112E  6E33               	movwf	___ftge@ff2+1,c
  2873  001130  0E3D               	movlw	61
  2874  001132  6E34               	movwf	___ftge@ff2+2,c
  2875  001134  EC06  F019         	call	___ftge	;wreg free
  2876  001138  B0D8               	btfsc	status,0,c
  2877  00113A  D018               	goto	l7330
  2878                           
  2879                           ;main.c: 256: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2880  00113C  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  2881  001140  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2882  001144  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2883  001148  C11C  F032         	movff	sortBattery@V_236,___ftge@ff2
  2884  00114C  C11D  F033         	movff	sortBattery@V_236+1,___ftge@ff2+1
  2885  001150  C11E  F034         	movff	sortBattery@V_236+2,___ftge@ff2+2
  2886  001154  EC06  F019         	call	___ftge	;wreg free
  2887  001158  B0D8               	btfsc	status,0,c
  2888  00115A  D038               	goto	l183
  2889  00115C  C15A  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2890  001160  C15B  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2891  001164  0101               	movlb	1	; () banked
  2892  001166  4B50               	infsnz	_n_AA& (0+255),f,b
  2893  001168  2B51               	incf	(_n_AA+1)& (0+255),f,b
  2894  00116A  D04C               	goto	l7350
  2895  00116C                     l7330:
  2896                           
  2897                           ;main.c: 262: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2898  00116C  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  2899  001170  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2900  001174  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2901  001178  C11C  F032         	movff	sortBattery@V_236,___ftge@ff2
  2902  00117C  C11D  F033         	movff	sortBattery@V_236+1,___ftge@ff2+1
  2903  001180  C11E  F034         	movff	sortBattery@V_236+2,___ftge@ff2+2
  2904  001184  EC06  F019         	call	___ftge	;wreg free
  2905  001188  B0D8               	btfsc	status,0,c
  2906  00118A  D020               	goto	l183
  2907  00118C  C048  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2908  001190  C049  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2909  001194  0101               	movlb	1	; () banked
  2910  001196  4B4E               	infsnz	_n_9V& (0+255),f,b
  2911  001198  2B4F               	incf	(_n_9V+1)& (0+255),f,b
  2912  00119A  D034               	goto	l7350
  2913  00119C                     l7338:
  2914                           
  2915                           ;main.c: 266: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2916  00119C  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  2917  0011A0  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  2918  0011A4  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  2919  0011A8  C11C  F032         	movff	sortBattery@V_236,___ftge@ff2
  2920  0011AC  C11D  F033         	movff	sortBattery@V_236+1,___ftge@ff2+1
  2921  0011B0  C11E  F034         	movff	sortBattery@V_236+2,___ftge@ff2+2
  2922  0011B4  EC06  F019         	call	___ftge	;wreg free
  2923  0011B8  B0D8               	btfsc	status,0,c
  2924  0011BA  D008               	goto	l183
  2925  0011BC  C0F6  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2926  0011C0  C0F7  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2927  0011C4  0101               	movlb	1	; () banked
  2928  0011C6  4B52               	infsnz	_n_C& (0+255),f,b
  2929  0011C8  2B53               	incf	(_n_C+1)& (0+255),f,b
  2930  0011CA  D01C               	goto	l7350
  2931  0011CC                     l183:
  2932                           
  2933                           ;main.c: 267: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2934  0011CC  C0F8  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2935  0011D0  C0F9  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2936  0011D4  0101               	movlb	1	; () banked
  2937  0011D6  4B54               	infsnz	_n_OTHER& (0+255),f,b
  2938  0011D8  2B55               	incf	(_n_OTHER+1)& (0+255),f,b
  2939                           
  2940                           ; BSR set to: 1
  2941                           ;main.c: 269: }
  2942                           
  2943                           ; BSR set to: 1
  2944                           ;main.c: 268: break;
  2945  0011DA  D014               	goto	l7350
  2946  0011DC                     l7348:
  2947  0011DC  C107  F0EB         	movff	sortBattery@signal,??_sortBattery
  2948  0011E0  C108  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  2949                           
  2950                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2951                           ; Switch size 1, requested type "space"
  2952                           ; Number of cases is 1, Range of values is 0 to 0
  2953                           ; switch strategies available:
  2954                           ; Name         Instructions Cycles
  2955                           ; simple_byte            4     3 (average)
  2956                           ;	Chosen strategy is simple_byte
  2957  0011E4  0100               	movlb	0	; () banked
  2958  0011E6  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  2959  0011E8  0A00               	xorlw	0	; case 0
  2960  0011EA  A4D8               	btfss	status,2,c
  2961  0011EC  D00B               	goto	l7350
  2962                           
  2963                           ; BSR set to: 0
  2964                           ; Switch size 1, requested type "space"
  2965                           ; Number of cases is 3, Range of values is 0 to 2
  2966                           ; switch strategies available:
  2967                           ; Name         Instructions Cycles
  2968                           ; simple_byte           10     6 (average)
  2969                           ;	Chosen strategy is simple_byte
  2970  0011EE  0100               	movlb	0	; () banked
  2971  0011F0  51EB               	movf	??_sortBattery& (0+255),w,b
  2972  0011F2  0A00               	xorlw	0	; case 0
  2973  0011F4  B4D8               	btfsc	status,2,c
  2974  0011F6  D792               	goto	l7320
  2975  0011F8  0A01               	xorlw	1	; case 1
  2976  0011FA  B4D8               	btfsc	status,2,c
  2977  0011FC  D7CF               	goto	l7338
  2978  0011FE  0A03               	xorlw	3	; case 2
  2979  001200  B4D8               	btfsc	status,2,c
  2980  001202  D7B4               	goto	l7330
  2981  001204                     l7350:
  2982                           
  2983                           ;main.c: 271: setAngle(redirectingServo, targetAngle);
  2984  001204  0E72               	movlw	low _redirectingServo
  2985  001206  0100               	movlb	0	; () banked
  2986  001208  6FD4               	movwf	setAngle@motor& (0+255),b
  2987  00120A  0E01               	movlw	high _redirectingServo
  2988  00120C  0100               	movlb	0	; () banked
  2989  00120E  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2990  001210  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  2991  001214  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2992  001218  EC63  F015         	call	_setAngle	;wreg free
  2993                           
  2994                           ;main.c: 272: _delay((unsigned long)((500)*(10000000/4000.0)));
  2995  00121C  0E07               	movlw	7
  2996  00121E  0100               	movlb	0	; () banked
  2997  001220  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2998  001222  0E58               	movlw	88
  2999  001224  0100               	movlb	0	; () banked
  3000  001226  6FEB               	movwf	??_sortBattery& (0+255),b
  3001  001228  0E59               	movlw	89
  3002  00122A                     u7977:
  3003  00122A  2EE8               	decfsz	wreg,f,c
  3004  00122C  D7FE               	bra	u7977
  3005  00122E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3006  001230  D7FC               	bra	u7977
  3007  001232  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3008  001234  D7FA               	bra	u7977
  3009  001236  D000               	nop2	
  3010                           
  3011                           ;main.c: 276: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3012  001238  C0F4  F112         	movff	_padAngle_CLOSE,sortBattery@i_238
  3013  00123C  C0F5  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_238+1
  3014  001240  D018               	goto	l7362
  3015  001242                     l7356:
  3016                           
  3017                           ;main.c: 277: setAngle(padServo, i);
  3018  001242  0E6E               	movlw	low _padServo
  3019  001244  0100               	movlb	0	; () banked
  3020  001246  6FD4               	movwf	setAngle@motor& (0+255),b
  3021  001248  0E01               	movlw	high _padServo
  3022  00124A  0100               	movlb	0	; () banked
  3023  00124C  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3024  00124E  C112  F0D6         	movff	sortBattery@i_238,setAngle@angle
  3025  001252  C113  F0D7         	movff	sortBattery@i_238+1,setAngle@angle+1
  3026  001256  EC63  F015         	call	_setAngle	;wreg free
  3027                           
  3028                           ;main.c: 278: _delay((unsigned long)((3)*(10000000/4000.0)));
  3029  00125A  0E0A               	movlw	10
  3030  00125C  0100               	movlb	0	; () banked
  3031  00125E  6FEB               	movwf	??_sortBattery& (0+255),b
  3032  001260  0EBC               	movlw	188
  3033  001262                     u7987:
  3034  001262  2EE8               	decfsz	wreg,f,c
  3035  001264  D7FE               	bra	u7987
  3036  001266  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3037  001268  D7FC               	bra	u7987
  3038  00126A  F000               	nop	
  3039  00126C  0101               	movlb	1	; () banked
  3040  00126E  4B12               	infsnz	sortBattery@i_238& (0+255),f,b
  3041  001270  2B13               	incf	(sortBattery@i_238+1)& (0+255),f,b
  3042  001272                     l7362:
  3043  001272  5046               	movf	_padAngle_OPEN,w,c
  3044  001274  0101               	movlb	1	; () banked
  3045  001276  5D12               	subwf	sortBattery@i_238& (0+255),w,b
  3046  001278  0101               	movlb	1	; () banked
  3047  00127A  5113               	movf	(sortBattery@i_238+1)& (0+255),w,b
  3048  00127C  0A80               	xorlw	128
  3049  00127E  0100               	movlb	0	; () banked
  3050  001280  6FEB               	movwf	??_sortBattery& (0+255),b
  3051  001282  5047               	movf	_padAngle_OPEN+1,w,c
  3052  001284  0A80               	xorlw	128
  3053  001286  0100               	movlb	0	; () banked
  3054  001288  59EB               	subwfb	??_sortBattery& (0+255),w,b
  3055  00128A  A0D8               	btfss	status,0,c
  3056  00128C  D7DA               	goto	l7356
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;main.c: 279: }
  3060                           ;main.c: 281: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3061                           
  3062                           ; BSR set to: 0
  3063  00128E  0E0D               	movlw	13
  3064  001290  0100               	movlb	0	; () banked
  3065  001292  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3066  001294  0EAF               	movlw	175
  3067  001296  0100               	movlb	0	; () banked
  3068  001298  6FEB               	movwf	??_sortBattery& (0+255),b
  3069  00129A  0EB6               	movlw	182
  3070  00129C                     u7997:
  3071  00129C  2EE8               	decfsz	wreg,f,c
  3072  00129E  D7FE               	bra	u7997
  3073  0012A0  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3074  0012A2  D7FC               	bra	u7997
  3075  0012A4  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3076  0012A6  D7FA               	bra	u7997
  3077  0012A8  F000               	nop	
  3078                           
  3079                           ;main.c: 285: setAngle(padServo, padAngle_NEUTRAL);
  3080  0012AA  0E6E               	movlw	low _padServo
  3081  0012AC  0100               	movlb	0	; () banked
  3082  0012AE  6FD4               	movwf	setAngle@motor& (0+255),b
  3083  0012B0  0E01               	movlw	high _padServo
  3084  0012B2  0100               	movlb	0	; () banked
  3085  0012B4  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3086  0012B6  C158  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3087  0012BA  C159  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3088  0012BE  EC63  F015         	call	_setAngle	;wreg free
  3089                           
  3090                           ;main.c: 289: setAngle(conveyorServo, 130);
  3091  0012C2  0E5E               	movlw	low _conveyorServo
  3092  0012C4  0100               	movlb	0	; () banked
  3093  0012C6  6FD4               	movwf	setAngle@motor& (0+255),b
  3094  0012C8  0E01               	movlw	high _conveyorServo
  3095  0012CA  0100               	movlb	0	; () banked
  3096  0012CC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3097  0012CE  0E00               	movlw	0
  3098  0012D0  0100               	movlb	0	; () banked
  3099  0012D2  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3100  0012D4  0E82               	movlw	130
  3101  0012D6  6FD6               	movwf	setAngle@angle& (0+255),b
  3102  0012D8  EC63  F015         	call	_setAngle	;wreg free
  3103                           
  3104                           ;main.c: 290: digitalWrite(cylinderMotor, 1);
  3105  0012DC  0E66               	movlw	low _cylinderMotor
  3106  0012DE  6E23               	movwf	digitalWrite@pin,c
  3107  0012E0  0E01               	movlw	high _cylinderMotor
  3108  0012E2  6E24               	movwf	digitalWrite@pin+1,c
  3109  0012E4  0E00               	movlw	0
  3110  0012E6  6E26               	movwf	digitalWrite@val+1,c
  3111  0012E8  0E01               	movlw	1
  3112  0012EA  6E25               	movwf	digitalWrite@val,c
  3113  0012EC  EC33  F016         	call	_digitalWrite	;wreg free
  3114  0012F0  0012               	return		;funcret
  3115  0012F2                     __end_of_sortBattery:
  3116                           	opt stack 0
  3117                           tblptru	equ	0xFF8
  3118                           tblptrh	equ	0xFF7
  3119                           tblptrl	equ	0xFF6
  3120                           tablat	equ	0xFF5
  3121                           postinc0	equ	0xFEE
  3122                           wreg	equ	0xFE8
  3123                           postdec1	equ	0xFE5
  3124                           fsr1l	equ	0xFE1
  3125                           status	equ	0xFD8
  3126                           
  3127 ;; *************** function _digitalWrite *****************
  3128 ;; Defined at:
  3129 ;;		line 53 in file "iopin.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  pin             2   34[COMRAM] PTR int 
  3132 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  3133 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  3134 ;;  val             2   36[COMRAM] int 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  p               2   41[COMRAM] int 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3146 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;Total ram usage:        9 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    3
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;;		_sortBattery
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text2
  3162  002C66                     __ptext2:
  3163                           	opt stack 0
  3164  002C66                     _digitalWrite:
  3165                           	opt stack 26
  3166                           
  3167                           ;iopin.c: 54: if(pin){
  3168                           
  3169                           ;incstack = 0
  3170  002C66  5023               	movf	digitalWrite@pin,w,c
  3171  002C68  1024               	iorwf	digitalWrite@pin+1,w,c
  3172  002C6A  B4D8               	btfsc	status,2,c
  3173  002C6C  0012               	return	
  3174                           
  3175                           ;iopin.c: 55: int p = 1 << pin[1];
  3176  002C6E  EE20 F002          	lfsr	2,2
  3177  002C72  5023               	movf	digitalWrite@pin,w,c
  3178  002C74  26D9               	addwf	fsr2l,f,c
  3179  002C76  5024               	movf	digitalWrite@pin+1,w,c
  3180  002C78  22DA               	addwfc	fsr2h,f,c
  3181  002C7A  50DF               	movf	indf2,w,c
  3182  002C7C  6E27               	movwf	??_digitalWrite& (0+255),c
  3183  002C7E  0E01               	movlw	1
  3184  002C80  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3185  002C82  0E00               	movlw	0
  3186  002C84  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3187  002C86  2A27               	incf	??_digitalWrite,f,c
  3188  002C88  D003               	goto	u7354
  3189  002C8A                     u7355:
  3190  002C8A  90D8               	bcf	status,0,c
  3191  002C8C  3628               	rlcf	??_digitalWrite+1,f,c
  3192  002C8E  3629               	rlcf	??_digitalWrite+2,f,c
  3193  002C90                     u7354:
  3194  002C90  2E27               	decfsz	??_digitalWrite,f,c
  3195  002C92  D7FB               	goto	u7355
  3196  002C94  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3197  002C98  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3198                           
  3199                           ;iopin.c: 56: if(val == 0){
  3200  002C9C  5025               	movf	digitalWrite@val,w,c
  3201  002C9E  1026               	iorwf	digitalWrite@val+1,w,c
  3202  002CA0  A4D8               	btfss	status,2,c
  3203  002CA2  D02B               	goto	l7030
  3204                           
  3205                           ;iopin.c: 57: p ^= 0xff;
  3206  002CA4  0EFF               	movlw	255
  3207  002CA6  1A2A               	xorwf	digitalWrite@p,f,c
  3208                           
  3209                           ;iopin.c: 58: }
  3210                           ;iopin.c: 60: switch(pin[0]){
  3211  002CA8  D028               	goto	l7030
  3212  002CAA                     l7006:
  3213  002CAA  0425               	decf	digitalWrite@val,w,c
  3214  002CAC  1026               	iorwf	digitalWrite@val+1,w,c
  3215  002CAE  A4D8               	btfss	status,2,c
  3216  002CB0  D003               	goto	l7010
  3217  002CB2  502A               	movf	digitalWrite@p,w,c
  3218  002CB4  1289               	iorwf	3977,f,c	;volatile
  3219  002CB6  0012               	return	
  3220  002CB8                     l7010:
  3221                           
  3222                           ;iopin.c: 62: else LATA &= p;
  3223  002CB8  502A               	movf	digitalWrite@p,w,c
  3224  002CBA  1689               	andwf	3977,f,c	;volatile
  3225                           
  3226                           ;iopin.c: 63: break;
  3227  002CBC  0012               	return	
  3228  002CBE                     l7012:
  3229  002CBE  0425               	decf	digitalWrite@val,w,c
  3230  002CC0  1026               	iorwf	digitalWrite@val+1,w,c
  3231  002CC2  A4D8               	btfss	status,2,c
  3232  002CC4  D003               	goto	l7016
  3233  002CC6  502A               	movf	digitalWrite@p,w,c
  3234  002CC8  128A               	iorwf	3978,f,c	;volatile
  3235  002CCA  0012               	return	
  3236  002CCC                     l7016:
  3237                           
  3238                           ;iopin.c: 65: else LATB &= p;
  3239  002CCC  502A               	movf	digitalWrite@p,w,c
  3240  002CCE  168A               	andwf	3978,f,c	;volatile
  3241                           
  3242                           ;iopin.c: 66: break;
  3243  002CD0  0012               	return	
  3244  002CD2                     l7018:
  3245  002CD2  0425               	decf	digitalWrite@val,w,c
  3246  002CD4  1026               	iorwf	digitalWrite@val+1,w,c
  3247  002CD6  A4D8               	btfss	status,2,c
  3248  002CD8  D003               	goto	l7022
  3249  002CDA  502A               	movf	digitalWrite@p,w,c
  3250  002CDC  128B               	iorwf	3979,f,c	;volatile
  3251  002CDE  0012               	return	
  3252  002CE0                     l7022:
  3253                           
  3254                           ;iopin.c: 68: else LATC &= p;
  3255  002CE0  502A               	movf	digitalWrite@p,w,c
  3256  002CE2  168B               	andwf	3979,f,c	;volatile
  3257                           
  3258                           ;iopin.c: 69: break;
  3259  002CE4  0012               	return	
  3260  002CE6                     l7024:
  3261  002CE6  0425               	decf	digitalWrite@val,w,c
  3262  002CE8  1026               	iorwf	digitalWrite@val+1,w,c
  3263  002CEA  A4D8               	btfss	status,2,c
  3264  002CEC  D003               	goto	l7028
  3265  002CEE  502A               	movf	digitalWrite@p,w,c
  3266  002CF0  128C               	iorwf	3980,f,c	;volatile
  3267  002CF2  0012               	return	
  3268  002CF4                     l7028:
  3269                           
  3270                           ;iopin.c: 71: else LATD &= p;
  3271  002CF4  502A               	movf	digitalWrite@p,w,c
  3272  002CF6  168C               	andwf	3980,f,c	;volatile
  3273                           
  3274                           ;iopin.c: 72: }
  3275  002CF8  0012               	return	
  3276  002CFA                     l7030:
  3277  002CFA  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3278  002CFE  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3279  002D02  CFDE F027          	movff	postinc2,??_digitalWrite
  3280  002D06  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3281                           
  3282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3283                           ; Switch size 1, requested type "space"
  3284                           ; Number of cases is 1, Range of values is 0 to 0
  3285                           ; switch strategies available:
  3286                           ; Name         Instructions Cycles
  3287                           ; simple_byte            4     3 (average)
  3288                           ;	Chosen strategy is simple_byte
  3289  002D0A  5028               	movf	??_digitalWrite+1,w,c
  3290  002D0C  0A00               	xorlw	0	; case 0
  3291  002D0E  A4D8               	btfss	status,2,c
  3292  002D10  0012               	return	
  3293                           
  3294                           ; Switch size 1, requested type "space"
  3295                           ; Number of cases is 4, Range of values is 0 to 3
  3296                           ; switch strategies available:
  3297                           ; Name         Instructions Cycles
  3298                           ; simple_byte           13     7 (average)
  3299                           ;	Chosen strategy is simple_byte
  3300  002D12  5027               	movf	??_digitalWrite,w,c
  3301  002D14  0A00               	xorlw	0	; case 0
  3302  002D16  B4D8               	btfsc	status,2,c
  3303  002D18  D7C8               	goto	l7006
  3304  002D1A  0A01               	xorlw	1	; case 1
  3305  002D1C  B4D8               	btfsc	status,2,c
  3306  002D1E  D7CF               	goto	l7012
  3307  002D20  0A03               	xorlw	3	; case 2
  3308  002D22  B4D8               	btfsc	status,2,c
  3309  002D24  D7D6               	goto	l7018
  3310  002D26  0A01               	xorlw	1	; case 3
  3311  002D28  A4D8               	btfss	status,2,c
  3312  002D2A  0012               	return	
  3313  002D2C  D7DC               	goto	l7024
  3314  002D2E                     __end_of_digitalWrite:
  3315                           	opt stack 0
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           postinc0	equ	0xFEE
  3321                           wreg	equ	0xFE8
  3322                           postdec1	equ	0xFE5
  3323                           fsr1l	equ	0xFE1
  3324                           indf2	equ	0xFDF
  3325                           postinc2	equ	0xFDE
  3326                           postdec2	equ	0xFDD
  3327                           fsr2h	equ	0xFDA
  3328                           fsr2l	equ	0xFD9
  3329                           status	equ	0xFD8
  3330                           
  3331 ;; *************** function _digitalRead *****************
  3332 ;; Defined at:
  3333 ;;		line 43 in file "iopin.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  pin             2   34[COMRAM] PTR int 
  3336 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;		None
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  2   34[COMRAM] int 
  3341 ;; Registers used:
  3342 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;Total ram usage:        4 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    3
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_main
  3359 ;;		_sortBattery
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           	psect	text3
  3364  002810                     __ptext3:
  3365                           	opt stack 0
  3366  002810                     _digitalRead:
  3367                           	opt stack 26
  3368                           
  3369                           ;iopin.c: 44: switch(pin[0]){
  3370                           
  3371                           ;incstack = 0
  3372  002810  D058               	goto	l7056
  3373  002812                     l7038:
  3374  002812  EE20 F002          	lfsr	2,2
  3375  002816  5023               	movf	digitalRead@pin,w,c
  3376  002818  26D9               	addwf	fsr2l,f,c
  3377  00281A  5024               	movf	digitalRead@pin+1,w,c
  3378  00281C  22DA               	addwfc	fsr2h,f,c
  3379  00281E  50DF               	movf	indf2,w,c
  3380  002820  6E25               	movwf	??_digitalRead& (0+255),c
  3381  002822  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3382  002826  2A25               	incf	??_digitalRead,f,c
  3383  002828  D002               	goto	u7414
  3384  00282A                     u7415:
  3385  00282A  90D8               	bcf	status,0,c
  3386  00282C  3226               	rrcf	??_digitalRead+1,f,c
  3387  00282E                     u7414:
  3388  00282E  2E25               	decfsz	??_digitalRead,f,c
  3389  002830  D7FC               	goto	u7415
  3390  002832  0E01               	movlw	1
  3391  002834  1626               	andwf	??_digitalRead+1,f,c
  3392  002836  5026               	movf	??_digitalRead+1,w,c
  3393  002838  6E23               	movwf	?_digitalRead,c
  3394  00283A  6A24               	clrf	?_digitalRead+1,c
  3395  00283C  0012               	return	
  3396  00283E                     l7042:
  3397  00283E  EE20 F002          	lfsr	2,2
  3398  002842  5023               	movf	digitalRead@pin,w,c
  3399  002844  26D9               	addwf	fsr2l,f,c
  3400  002846  5024               	movf	digitalRead@pin+1,w,c
  3401  002848  22DA               	addwfc	fsr2h,f,c
  3402  00284A  50DF               	movf	indf2,w,c
  3403  00284C  6E25               	movwf	??_digitalRead& (0+255),c
  3404  00284E  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3405  002852  2A25               	incf	??_digitalRead,f,c
  3406  002854  D002               	goto	u7424
  3407  002856                     u7425:
  3408  002856  90D8               	bcf	status,0,c
  3409  002858  3226               	rrcf	??_digitalRead+1,f,c
  3410  00285A                     u7424:
  3411  00285A  2E25               	decfsz	??_digitalRead,f,c
  3412  00285C  D7FC               	goto	u7425
  3413  00285E  0E01               	movlw	1
  3414  002860  1626               	andwf	??_digitalRead+1,f,c
  3415  002862  5026               	movf	??_digitalRead+1,w,c
  3416  002864  6E23               	movwf	?_digitalRead,c
  3417  002866  6A24               	clrf	?_digitalRead+1,c
  3418  002868  0012               	return	
  3419  00286A                     l7046:
  3420  00286A  EE20 F002          	lfsr	2,2
  3421  00286E  5023               	movf	digitalRead@pin,w,c
  3422  002870  26D9               	addwf	fsr2l,f,c
  3423  002872  5024               	movf	digitalRead@pin+1,w,c
  3424  002874  22DA               	addwfc	fsr2h,f,c
  3425  002876  50DF               	movf	indf2,w,c
  3426  002878  6E25               	movwf	??_digitalRead& (0+255),c
  3427  00287A  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3428  00287E  2A25               	incf	??_digitalRead,f,c
  3429  002880  D002               	goto	u7434
  3430  002882                     u7435:
  3431  002882  90D8               	bcf	status,0,c
  3432  002884  3226               	rrcf	??_digitalRead+1,f,c
  3433  002886                     u7434:
  3434  002886  2E25               	decfsz	??_digitalRead,f,c
  3435  002888  D7FC               	goto	u7435
  3436  00288A  0E01               	movlw	1
  3437  00288C  1626               	andwf	??_digitalRead+1,f,c
  3438  00288E  5026               	movf	??_digitalRead+1,w,c
  3439  002890  6E23               	movwf	?_digitalRead,c
  3440  002892  6A24               	clrf	?_digitalRead+1,c
  3441  002894  0012               	return	
  3442  002896                     l7050:
  3443  002896  EE20 F002          	lfsr	2,2
  3444  00289A  5023               	movf	digitalRead@pin,w,c
  3445  00289C  26D9               	addwf	fsr2l,f,c
  3446  00289E  5024               	movf	digitalRead@pin+1,w,c
  3447  0028A0  22DA               	addwfc	fsr2h,f,c
  3448  0028A2  50DF               	movf	indf2,w,c
  3449  0028A4  6E25               	movwf	??_digitalRead& (0+255),c
  3450  0028A6  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3451  0028AA  2A25               	incf	??_digitalRead,f,c
  3452  0028AC  D002               	goto	u7444
  3453  0028AE                     u7445:
  3454  0028AE  90D8               	bcf	status,0,c
  3455  0028B0  3226               	rrcf	??_digitalRead+1,f,c
  3456  0028B2                     u7444:
  3457  0028B2  2E25               	decfsz	??_digitalRead,f,c
  3458  0028B4  D7FC               	goto	u7445
  3459  0028B6  0E01               	movlw	1
  3460  0028B8  1626               	andwf	??_digitalRead+1,f,c
  3461  0028BA  5026               	movf	??_digitalRead+1,w,c
  3462  0028BC  6E23               	movwf	?_digitalRead,c
  3463  0028BE  6A24               	clrf	?_digitalRead+1,c
  3464  0028C0  0012               	return	
  3465  0028C2                     l7056:
  3466  0028C2  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3467  0028C6  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3468  0028CA  CFDE F025          	movff	postinc2,??_digitalRead
  3469  0028CE  CFDD F026          	movff	postdec2,??_digitalRead+1
  3470                           
  3471                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3472                           ; Switch size 1, requested type "space"
  3473                           ; Number of cases is 1, Range of values is 0 to 0
  3474                           ; switch strategies available:
  3475                           ; Name         Instructions Cycles
  3476                           ; simple_byte            4     3 (average)
  3477                           ;	Chosen strategy is simple_byte
  3478  0028D2  5026               	movf	??_digitalRead+1,w,c
  3479  0028D4  0A00               	xorlw	0	; case 0
  3480  0028D6  A4D8               	btfss	status,2,c
  3481  0028D8  D00D               	goto	l334
  3482                           
  3483                           ; Switch size 1, requested type "space"
  3484                           ; Number of cases is 4, Range of values is 0 to 3
  3485                           ; switch strategies available:
  3486                           ; Name         Instructions Cycles
  3487                           ; simple_byte           13     7 (average)
  3488                           ;	Chosen strategy is simple_byte
  3489  0028DA  5025               	movf	??_digitalRead,w,c
  3490  0028DC  0A00               	xorlw	0	; case 0
  3491  0028DE  B4D8               	btfsc	status,2,c
  3492  0028E0  D798               	goto	l7038
  3493  0028E2  0A01               	xorlw	1	; case 1
  3494  0028E4  B4D8               	btfsc	status,2,c
  3495  0028E6  D7AB               	goto	l7042
  3496  0028E8  0A03               	xorlw	3	; case 2
  3497  0028EA  B4D8               	btfsc	status,2,c
  3498  0028EC  D7BE               	goto	l7046
  3499  0028EE  0A01               	xorlw	1	; case 3
  3500  0028F0  B4D8               	btfsc	status,2,c
  3501  0028F2  D7D1               	goto	l7050
  3502  0028F4                     l334:
  3503                           
  3504                           ;iopin.c: 50: return -1;
  3505  0028F4  6823               	setf	?_digitalRead,c
  3506  0028F6  6824               	setf	?_digitalRead+1,c
  3507  0028F8  0012               	return		;funcret
  3508  0028FA                     __end_of_digitalRead:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           postinc0	equ	0xFEE
  3515                           wreg	equ	0xFE8
  3516                           postdec1	equ	0xFE5
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _analogRead *****************
  3526 ;; Defined at:
  3527 ;;		line 90 in file "iopin.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  channel         2   34[COMRAM] int 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  4   34[COMRAM] long 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3541 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;Total ram usage:        6 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    3
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_sortBattery
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text4
  3556  003B28                     __ptext4:
  3557                           	opt stack 0
  3558  003B28                     _analogRead:
  3559                           	opt stack 26
  3560                           
  3561                           ;iopin.c: 91: ADCON0 = channel<<2;
  3562                           
  3563                           ;incstack = 0
  3564  003B28  4423               	rlncf	analogRead@channel,w,c
  3565  003B2A  46E8               	rlncf	wreg,f,c
  3566  003B2C  0BFC               	andlw	252
  3567  003B2E  6EC2               	movwf	4034,c	;volatile
  3568                           
  3569                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3570  003B30  80C2               	bsf	4034,0,c	;volatile
  3571                           
  3572                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3573  003B32  82C2               	bsf	4034,1,c	;volatile
  3574  003B34                     l359:
  3575  003B34  B2C2               	btfsc	4034,1,c	;volatile
  3576  003B36  D7FE               	goto	l359
  3577                           
  3578                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3579  003B38  50C3               	movf	4035,w,c	;volatile
  3580  003B3A  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3581  003B3E  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3582  003B40  C027  F028         	movff	??_analogRead,??_analogRead+1
  3583  003B44  6A27               	clrf	??_analogRead,c
  3584  003B46  2627               	addwf	??_analogRead,f,c
  3585  003B48  0E00               	movlw	0
  3586  003B4A  2228               	addwfc	??_analogRead+1,f,c
  3587  003B4C  C027  F023         	movff	??_analogRead,?_analogRead
  3588  003B50  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3589  003B54  0E00               	movlw	0
  3590  003B56  BE24               	btfsc	?_analogRead+1,7,c
  3591  003B58  0EFF               	movlw	-1
  3592  003B5A  6E25               	movwf	?_analogRead+2,c
  3593  003B5C  6E26               	movwf	?_analogRead+3,c
  3594  003B5E  0012               	return	
  3595  003B60                     __end_of_analogRead:
  3596                           	opt stack 0
  3597                           tblptru	equ	0xFF8
  3598                           tblptrh	equ	0xFF7
  3599                           tblptrl	equ	0xFF6
  3600                           tablat	equ	0xFF5
  3601                           postinc0	equ	0xFEE
  3602                           wreg	equ	0xFE8
  3603                           postdec1	equ	0xFE5
  3604                           fsr1l	equ	0xFE1
  3605                           indf2	equ	0xFDF
  3606                           postinc2	equ	0xFDE
  3607                           postdec2	equ	0xFDD
  3608                           fsr2h	equ	0xFDA
  3609                           fsr2l	equ	0xFD9
  3610                           status	equ	0xFD8
  3611                           
  3612 ;; *************** function _showInterface *****************
  3613 ;; Defined at:
  3614 ;;		line 18 in file "interface.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  run             2    2[BANK1 ] PTR int 
  3619 ;;		 -> readPastRun@data(14), 
  3620 ;;  n               2    0[BANK1 ] int 
  3621 ;;  key             1    4[BANK1 ] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      void 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;Total ram usage:        6 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    9
  3638 ;; This function calls:
  3639 ;;		_initRTC
  3640 ;;		_readPastRun
  3641 ;;		_showDateTime
  3642 ;;		_showMainMenu
  3643 ;;		_showRunMenu
  3644 ;;		_showRunSelect
  3645 ;;		_showRunStats
  3646 ;;		_showRunTime
  3647 ;; This function is called by:
  3648 ;;		_main
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text5
  3653  002EBE                     __ptext5:
  3654                           	opt stack 0
  3655  002EBE                     _showInterface:
  3656                           	opt stack 21
  3657                           
  3658                           ;interface.c: 20: initRTC();
  3659                           
  3660                           ;incstack = 0
  3661  002EBE  EC80  F01E         	call	_initRTC	;wreg free
  3662  002EC2                     l7208:
  3663                           
  3664                           ;interface.c: 23: showDateTime();
  3665  002EC2  EC97  F016         	call	_showDateTime	;wreg free
  3666  002EC6                     l7210:
  3667                           
  3668                           ;interface.c: 26: key = showMainMenu();
  3669  002EC6  EC92  F01C         	call	_showMainMenu	;wreg free
  3670  002ECA  0101               	movlb	1	; () banked
  3671  002ECC  6F04               	movwf	showInterface@key& (0+255),b
  3672                           
  3673                           ; BSR set to: 1
  3674                           ;interface.c: 28: if(key == 'C'){
  3675  002ECE  0E43               	movlw	67
  3676  002ED0  0101               	movlb	1	; () banked
  3677  002ED2  1904               	xorwf	showInterface@key& (0+255),w,b
  3678  002ED4  A4D8               	btfss	status,2,c
  3679  002ED6  D042               	goto	l7236
  3680                           
  3681                           ; BSR set to: 1
  3682                           ;interface.c: 30: int n = showRunSelect();
  3683  002ED8  ECAE  F01B         	call	_showRunSelect	;wreg free
  3684  002EDC  0100               	movlb	0	; () banked
  3685  002EDE  6FF3               	movwf	??_showInterface& (0+255),b
  3686  002EE0  0100               	movlb	0	; () banked
  3687  002EE2  51F3               	movf	??_showInterface& (0+255),w,b
  3688  002EE4  0101               	movlb	1	; () banked
  3689  002EE6  6F00               	movwf	showInterface@n& (0+255),b
  3690  002EE8  6B01               	clrf	(showInterface@n+1)& (0+255),b
  3691                           
  3692                           ; BSR set to: 1
  3693                           ;interface.c: 32: if(key == '*')continue;
  3694  002EEA  0E2A               	movlw	42
  3695  002EEC  0101               	movlb	1	; () banked
  3696  002EEE  1904               	xorwf	showInterface@key& (0+255),w,b
  3697  002EF0  B4D8               	btfsc	status,2,c
  3698  002EF2  D7E9               	goto	l7210
  3699                           
  3700                           ; BSR set to: 1
  3701                           ;interface.c: 34: int* run = readPastRun( n - '1');
  3702                           
  3703                           ; BSR set to: 1
  3704                           
  3705                           ; BSR set to: 1
  3706  002EF4  0ECF               	movlw	207
  3707  002EF6  0101               	movlb	1	; () banked
  3708  002EF8  2500               	addwf	showInterface@n& (0+255),w,b
  3709  002EFA  0100               	movlb	0	; () banked
  3710  002EFC  6F80               	movwf	readPastRun@run& (0+255),b
  3711  002EFE  0EFF               	movlw	255
  3712  002F00  0101               	movlb	1	; () banked
  3713  002F02  2101               	addwfc	(showInterface@n+1)& (0+255),w,b
  3714  002F04  0100               	movlb	0	; () banked
  3715  002F06  6F81               	movwf	(readPastRun@run+1)& (0+255),b
  3716  002F08  ECBD  F018         	call	_readPastRun	;wreg free
  3717  002F0C  C080  F102         	movff	?_readPastRun,showInterface@run
  3718  002F10  C081  F103         	movff	?_readPastRun+1,showInterface@run+1
  3719  002F14                     l7222:
  3720                           
  3721                           ;interface.c: 38: key = showRunMenu(n);
  3722  002F14  0101               	movlb	1	; () banked
  3723  002F16  5100               	movf	showInterface@n& (0+255),w,b
  3724  002F18  ECE0  F01B         	call	_showRunMenu
  3725  002F1C  0101               	movlb	1	; () banked
  3726  002F1E  6F04               	movwf	showInterface@key& (0+255),b
  3727                           
  3728                           ; BSR set to: 1
  3729                           ;interface.c: 40: if(key == 'A') showRunTime(run);
  3730  002F20  0E41               	movlw	65
  3731  002F22  0101               	movlb	1	; () banked
  3732  002F24  1904               	xorwf	showInterface@key& (0+255),w,b
  3733  002F26  A4D8               	btfss	status,2,c
  3734  002F28  D007               	goto	l7228
  3735                           
  3736                           ; BSR set to: 1
  3737  002F2A  C102  F0EB         	movff	showInterface@run,showRunTime@run
  3738  002F2E  C103  F0EC         	movff	showInterface@run+1,showRunTime@run+1
  3739  002F32  ECB9  F017         	call	_showRunTime	;wreg free
  3740  002F36  D7EE               	goto	l7222
  3741  002F38                     l7228:
  3742                           
  3743                           ;interface.c: 41: else if(key == 'B') showRunStats(run);
  3744  002F38  0E42               	movlw	66
  3745  002F3A  0101               	movlb	1	; () banked
  3746  002F3C  1904               	xorwf	showInterface@key& (0+255),w,b
  3747  002F3E  A4D8               	btfss	status,2,c
  3748  002F40  D007               	goto	l7232
  3749                           
  3750                           ; BSR set to: 1
  3751  002F42  C102  F0EB         	movff	showInterface@run,showRunStats@run
  3752  002F46  C103  F0EC         	movff	showInterface@run+1,showRunStats@run+1
  3753  002F4A  EC94  F019         	call	_showRunStats	;wreg free
  3754  002F4E  D7E2               	goto	l7222
  3755  002F50                     l7232:
  3756                           
  3757                           ;interface.c: 42: else if(key == '*') break;
  3758  002F50  0E2A               	movlw	42
  3759  002F52  0101               	movlb	1	; () banked
  3760  002F54  1904               	xorwf	showInterface@key& (0+255),w,b
  3761  002F56  B4D8               	btfsc	status,2,c
  3762  002F58  D7B6               	goto	l7210
  3763  002F5A  D7DC               	goto	l7222
  3764  002F5C                     l7236:
  3765                           
  3766                           ; BSR set to: 1
  3767                           ;interface.c: 46: else if(key == 'B') return;
  3768  002F5C  0E42               	movlw	66
  3769  002F5E  0101               	movlb	1	; () banked
  3770  002F60  1904               	xorwf	showInterface@key& (0+255),w,b
  3771  002F62  B4D8               	btfsc	status,2,c
  3772  002F64  0012               	return	
  3773                           
  3774                           ; BSR set to: 1
  3775                           ;interface.c: 47: else if(key == '*') break;
  3776                           
  3777                           ; BSR set to: 1
  3778                           
  3779                           ; BSR set to: 1
  3780                           
  3781                           ; BSR set to: 1
  3782  002F66  0E2A               	movlw	42
  3783  002F68  0101               	movlb	1	; () banked
  3784  002F6A  1904               	xorwf	showInterface@key& (0+255),w,b
  3785  002F6C  B4D8               	btfsc	status,2,c
  3786  002F6E  D7A9               	goto	l7208
  3787  002F70  D7AA               	goto	l7210
  3788  002F72                     __end_of_showInterface:
  3789                           	opt stack 0
  3790                           tblptru	equ	0xFF8
  3791                           tblptrh	equ	0xFF7
  3792                           tblptrl	equ	0xFF6
  3793                           tablat	equ	0xFF5
  3794                           postinc0	equ	0xFEE
  3795                           wreg	equ	0xFE8
  3796                           postdec1	equ	0xFE5
  3797                           fsr1l	equ	0xFE1
  3798                           indf2	equ	0xFDF
  3799                           postinc2	equ	0xFDE
  3800                           postdec2	equ	0xFDD
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function _showRunTime *****************
  3806 ;; Defined at:
  3807 ;;		line 102 in file "interface.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  run             2  107[BANK0 ] PTR int 
  3810 ;;		 -> readPastRun@data(14), 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  time            3  112[BANK0 ] float 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      unsigned char 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3822 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;Total ram usage:        8 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    8
  3829 ;; This function calls:
  3830 ;;		___awtoft
  3831 ;;		___ftdiv
  3832 ;;		_lcdClear
  3833 ;;		_printf
  3834 ;;		_readKeypad
  3835 ;; This function is called by:
  3836 ;;		_showInterface
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text6
  3841  002F72                     __ptext6:
  3842                           	opt stack 0
  3843  002F72                     _showRunTime:
  3844                           	opt stack 21
  3845                           
  3846                           ;interface.c: 103: float time = (float)(run[0]<<8 + run[1])/10.0;
  3847                           
  3848                           ; BSR set to: 1
  3849                           ;incstack = 0
  3850  002F72  0100               	movlb	0	; () banked
  3851  002F74  EE20 F002          	lfsr	2,2
  3852  002F78  51EB               	movf	showRunTime@run& (0+255),w,b
  3853  002F7A  26D9               	addwf	fsr2l,f,c
  3854  002F7C  51EC               	movf	(showRunTime@run+1)& (0+255),w,b
  3855  002F7E  22DA               	addwfc	fsr2h,f,c
  3856  002F80  50DF               	movf	indf2,w,c
  3857  002F82  0100               	movlb	0	; () banked
  3858  002F84  6FED               	movwf	??_showRunTime& (0+255),b
  3859  002F86  0E08               	movlw	8
  3860  002F88  0100               	movlb	0	; () banked
  3861  002F8A  27ED               	addwf	??_showRunTime& (0+255),f,b
  3862  002F8C  C0EB  FFD9         	movff	showRunTime@run,fsr2l
  3863  002F90  C0EC  FFDA         	movff	showRunTime@run+1,fsr2h
  3864  002F94  CFDE F0EE          	movff	postinc2,??_showRunTime+1
  3865  002F98  CFDD F0EF          	movff	postdec2,??_showRunTime+2
  3866  002F9C  0100               	movlb	0	; () banked
  3867  002F9E  2BED               	incf	??_showRunTime& (0+255),f,b
  3868  002FA0  D004               	goto	u7614
  3869  002FA2                     u7615:
  3870  002FA2  90D8               	bcf	status,0,c
  3871  002FA4  0100               	movlb	0	; () banked
  3872  002FA6  37EE               	rlcf	(??_showRunTime+1)& (0+255),f,b
  3873  002FA8  37EF               	rlcf	(??_showRunTime+2)& (0+255),f,b
  3874  002FAA                     u7614:
  3875  002FAA  0100               	movlb	0	; () banked
  3876  002FAC  2FED               	decfsz	??_showRunTime& (0+255),f,b
  3877  002FAE  D7F9               	goto	u7615
  3878  002FB0  C0EE  F02B         	movff	??_showRunTime+1,___awtoft@c
  3879  002FB4  C0EF  F02C         	movff	??_showRunTime+2,___awtoft@c+1
  3880  002FB8  ECB0  F01D         	call	___awtoft	;wreg free
  3881  002FBC  C02B  F035         	movff	?___awtoft,___ftdiv@f1
  3882  002FC0  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
  3883  002FC4  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
  3884  002FC8  0E00               	movlw	0
  3885  002FCA  6E38               	movwf	___ftdiv@f2,c
  3886  002FCC  0E20               	movlw	32
  3887  002FCE  6E39               	movwf	___ftdiv@f2+1,c
  3888  002FD0  0E41               	movlw	65
  3889  002FD2  6E3A               	movwf	___ftdiv@f2+2,c
  3890  002FD4  ECFA  F012         	call	___ftdiv	;wreg free
  3891  002FD8  C035  F0F0         	movff	?___ftdiv,showRunTime@time
  3892  002FDC  C036  F0F1         	movff	?___ftdiv+1,showRunTime@time+1
  3893  002FE0  C037  F0F2         	movff	?___ftdiv+2,showRunTime@time+2
  3894                           
  3895                           ;interface.c: 105: lcdClear();
  3896  002FE4  EC9D  F01E         	call	_lcdClear	;wreg free
  3897                           
  3898                           ;interface.c: 106: printf("time: %.1f sec   \n",time);
  3899  002FE8  0EEC               	movlw	low STR_17
  3900  002FEA  0100               	movlb	0	; () banked
  3901  002FEC  6FBD               	movwf	printf@f& (0+255),b
  3902  002FEE  0EFE               	movlw	high STR_17
  3903  002FF0  0100               	movlb	0	; () banked
  3904  002FF2  6FBE               	movwf	(printf@f+1)& (0+255),b
  3905  002FF4  C0F0  F0BF         	movff	showRunTime@time,?_printf+2
  3906  002FF8  C0F1  F0C0         	movff	showRunTime@time+1,?_printf+3
  3907  002FFC  C0F2  F0C1         	movff	showRunTime@time+2,?_printf+4
  3908  003000  EC09  F000         	call	_printf	;wreg free
  3909                           
  3910                           ;interface.c: 107: printf("              *>");
  3911  003004  0E59               	movlw	low STR_18
  3912  003006  0100               	movlb	0	; () banked
  3913  003008  6FBD               	movwf	printf@f& (0+255),b
  3914  00300A  0EFF               	movlw	high STR_18
  3915  00300C  0100               	movlb	0	; () banked
  3916  00300E  6FBE               	movwf	(printf@f+1)& (0+255),b
  3917  003010  EC09  F000         	call	_printf	;wreg free
  3918  003014                     l7182:
  3919  003014  ECCC  F01D         	call	_readKeypad	;wreg free
  3920  003018  0A2A               	xorlw	42
  3921  00301A  B4D8               	btfsc	status,2,c
  3922  00301C  0012               	return	
  3923  00301E  D7FA               	goto	l7182
  3924  003020                     __end_of_showRunTime:
  3925                           	opt stack 0
  3926                           tblptru	equ	0xFF8
  3927                           tblptrh	equ	0xFF7
  3928                           tblptrl	equ	0xFF6
  3929                           tablat	equ	0xFF5
  3930                           postinc0	equ	0xFEE
  3931                           wreg	equ	0xFE8
  3932                           postdec1	equ	0xFE5
  3933                           fsr1l	equ	0xFE1
  3934                           indf2	equ	0xFDF
  3935                           postinc2	equ	0xFDE
  3936                           postdec2	equ	0xFDD
  3937                           fsr2h	equ	0xFDA
  3938                           fsr2l	equ	0xFD9
  3939                           status	equ	0xFD8
  3940                           
  3941 ;; *************** function _showRunStats *****************
  3942 ;; Defined at:
  3943 ;;		line 112 in file "interface.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  run             2  107[BANK0 ] PTR int 
  3946 ;;		 -> readPastRun@data(14), 
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;		None
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      unsigned char 
  3951 ;; Registers used:
  3952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3958 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;Total ram usage:        2 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; Hardware stack levels required when called:    8
  3965 ;; This function calls:
  3966 ;;		_lcdClear
  3967 ;;		_printf
  3968 ;;		_readKeypad
  3969 ;; This function is called by:
  3970 ;;		_showInterface
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text7
  3975  003328                     __ptext7:
  3976                           	opt stack 0
  3977  003328                     _showRunStats:
  3978                           	opt stack 21
  3979                           
  3980                           ;interface.c: 113: lcdClear();
  3981                           
  3982                           ;incstack = 0
  3983  003328  EC9D  F01E         	call	_lcdClear	;wreg free
  3984                           
  3985                           ;interface.c: 114: printf("[AA,9V,C,other] \n");
  3986  00332C  0E36               	movlw	low STR_19
  3987  00332E  0100               	movlb	0	; () banked
  3988  003330  6FBD               	movwf	printf@f& (0+255),b
  3989  003332  0EFF               	movlw	high STR_19
  3990  003334  0100               	movlb	0	; () banked
  3991  003336  6FBE               	movwf	(printf@f+1)& (0+255),b
  3992  003338  EC09  F000         	call	_printf	;wreg free
  3993                           
  3994                           ;interface.c: 115: printf("[%d,%d,%d,%d]   *>",run[2],run[3],run[4],run[5]);
  3995  00333C  0EFF               	movlw	low STR_20
  3996  00333E  0100               	movlb	0	; () banked
  3997  003340  6FBD               	movwf	printf@f& (0+255),b
  3998  003342  0EFE               	movlw	high STR_20
  3999  003344  0100               	movlb	0	; () banked
  4000  003346  6FBE               	movwf	(printf@f+1)& (0+255),b
  4001  003348  0100               	movlb	0	; () banked
  4002  00334A  EE20 F004          	lfsr	2,4
  4003  00334E  51EB               	movf	showRunStats@run& (0+255),w,b
  4004  003350  26D9               	addwf	fsr2l,f,c
  4005  003352  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  4006  003354  22DA               	addwfc	fsr2h,f,c
  4007  003356  CFDE F0BF          	movff	postinc2,?_printf+2
  4008  00335A  CFDD F0C0          	movff	postdec2,?_printf+3
  4009  00335E  0100               	movlb	0	; () banked
  4010  003360  EE20 F006          	lfsr	2,6
  4011  003364  51EB               	movf	showRunStats@run& (0+255),w,b
  4012  003366  26D9               	addwf	fsr2l,f,c
  4013  003368  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  4014  00336A  22DA               	addwfc	fsr2h,f,c
  4015  00336C  CFDE F0C1          	movff	postinc2,?_printf+4
  4016  003370  CFDD F0C2          	movff	postdec2,?_printf+5
  4017  003374  0100               	movlb	0	; () banked
  4018  003376  EE20 F008          	lfsr	2,8
  4019  00337A  51EB               	movf	showRunStats@run& (0+255),w,b
  4020  00337C  26D9               	addwf	fsr2l,f,c
  4021  00337E  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  4022  003380  22DA               	addwfc	fsr2h,f,c
  4023  003382  CFDE F0C3          	movff	postinc2,?_printf+6
  4024  003386  CFDD F0C4          	movff	postdec2,?_printf+7
  4025  00338A  0100               	movlb	0	; () banked
  4026  00338C  EE20 F00A          	lfsr	2,10
  4027  003390  51EB               	movf	showRunStats@run& (0+255),w,b
  4028  003392  26D9               	addwf	fsr2l,f,c
  4029  003394  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  4030  003396  22DA               	addwfc	fsr2h,f,c
  4031  003398  CFDE F0C5          	movff	postinc2,?_printf+8
  4032  00339C  CFDD F0C6          	movff	postdec2,?_printf+9
  4033  0033A0  EC09  F000         	call	_printf	;wreg free
  4034  0033A4                     l7190:
  4035  0033A4  ECCC  F01D         	call	_readKeypad	;wreg free
  4036  0033A8  0A2A               	xorlw	42
  4037  0033AA  B4D8               	btfsc	status,2,c
  4038  0033AC  0012               	return	
  4039  0033AE  D7FA               	goto	l7190
  4040  0033B0                     __end_of_showRunStats:
  4041                           	opt stack 0
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           postdec1	equ	0xFE5
  4049                           fsr1l	equ	0xFE1
  4050                           indf2	equ	0xFDF
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function _showRunSelect *****************
  4058 ;; Defined at:
  4059 ;;		line 80 in file "interface.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  k               1  107[BANK0 ] unsigned char 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      unsigned char 
  4066 ;; Registers used:
  4067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;Total ram usage:        1 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    8
  4080 ;; This function calls:
  4081 ;;		_lcdClear
  4082 ;;		_printf
  4083 ;;		_readKeypad
  4084 ;; This function is called by:
  4085 ;;		_showInterface
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text8
  4090  00375C                     __ptext8:
  4091                           	opt stack 0
  4092  00375C                     _showRunSelect:
  4093                           	opt stack 21
  4094                           
  4095                           ;interface.c: 81: lcdClear();
  4096                           
  4097                           ;incstack = 0
  4098  00375C  EC9D  F01E         	call	_lcdClear	;wreg free
  4099                           
  4100                           ;interface.c: 82: printf("select run:     \n");
  4101  003760  0E24               	movlw	low STR_13
  4102  003762  0100               	movlb	0	; () banked
  4103  003764  6FBD               	movwf	printf@f& (0+255),b
  4104  003766  0EFF               	movlw	high STR_13
  4105  003768  0100               	movlb	0	; () banked
  4106  00376A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4107  00376C  EC09  F000         	call	_printf	;wreg free
  4108                           
  4109                           ;interface.c: 83: printf("[1,2,3,4]     *>");
  4110  003770  0E6A               	movlw	low STR_14
  4111  003772  0100               	movlb	0	; () banked
  4112  003774  6FBD               	movwf	printf@f& (0+255),b
  4113  003776  0EFF               	movlw	high STR_14
  4114  003778  0100               	movlb	0	; () banked
  4115  00377A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4116  00377C  EC09  F000         	call	_printf	;wreg free
  4117  003780                     l7140:
  4118  003780  ECCC  F01D         	call	_readKeypad	;wreg free
  4119  003784  0100               	movlb	0	; () banked
  4120  003786  6FEB               	movwf	showRunSelect@k& (0+255),b
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;interface.c: 87: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  4124  003788  0E31               	movlw	49
  4125  00378A  0100               	movlb	0	; () banked
  4126  00378C  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4127  00378E  B4D8               	btfsc	status,2,c
  4128  003790  D014               	goto	l7152
  4129                           
  4130                           ; BSR set to: 0
  4131  003792  0E32               	movlw	50
  4132  003794  0100               	movlb	0	; () banked
  4133  003796  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4134  003798  B4D8               	btfsc	status,2,c
  4135  00379A  D00F               	goto	l7152
  4136                           
  4137                           ; BSR set to: 0
  4138  00379C  0E33               	movlw	51
  4139  00379E  0100               	movlb	0	; () banked
  4140  0037A0  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4141  0037A2  B4D8               	btfsc	status,2,c
  4142  0037A4  D00A               	goto	l7152
  4143                           
  4144                           ; BSR set to: 0
  4145  0037A6  0E34               	movlw	52
  4146  0037A8  0100               	movlb	0	; () banked
  4147  0037AA  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4148  0037AC  B4D8               	btfsc	status,2,c
  4149  0037AE  D005               	goto	l7152
  4150                           
  4151                           ; BSR set to: 0
  4152  0037B0  0E2A               	movlw	42
  4153  0037B2  0100               	movlb	0	; () banked
  4154  0037B4  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4155  0037B6  A4D8               	btfss	status,2,c
  4156  0037B8  D7E3               	goto	l7140
  4157  0037BA                     l7152:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;interface.c: 88: return k;
  4161  0037BA  0100               	movlb	0	; () banked
  4162  0037BC  51EB               	movf	showRunSelect@k& (0+255),w,b
  4163  0037BE  0012               	return	
  4164  0037C0                     __end_of_showRunSelect:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           postinc0	equ	0xFEE
  4171                           wreg	equ	0xFE8
  4172                           postdec1	equ	0xFE5
  4173                           fsr1l	equ	0xFE1
  4174                           indf2	equ	0xFDF
  4175                           postinc2	equ	0xFDE
  4176                           postdec2	equ	0xFDD
  4177                           fsr2h	equ	0xFDA
  4178                           fsr2l	equ	0xFD9
  4179                           status	equ	0xFD8
  4180                           
  4181 ;; *************** function _showRunMenu *****************
  4182 ;; Defined at:
  4183 ;;		line 91 in file "interface.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  key             1    wreg     unsigned char 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  key             1  107[BANK0 ] unsigned char 
  4188 ;;  k               1  108[BANK0 ] unsigned char 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      unsigned char 
  4191 ;; Registers used:
  4192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4199 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;Total ram usage:        2 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    8
  4205 ;; This function calls:
  4206 ;;		_lcdClear
  4207 ;;		_printf
  4208 ;;		_readKeypad
  4209 ;; This function is called by:
  4210 ;;		_showInterface
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text9
  4215  0037C0                     __ptext9:
  4216                           	opt stack 0
  4217  0037C0                     _showRunMenu:
  4218                           	opt stack 21
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;incstack = 0
  4222                           ;showRunMenu@key stored from wreg
  4223  0037C0  0100               	movlb	0	; () banked
  4224  0037C2  6FEB               	movwf	showRunMenu@key& (0+255),b
  4225                           
  4226                           ;interface.c: 92: lcdClear();
  4227  0037C4  EC9D  F01E         	call	_lcdClear	;wreg free
  4228                           
  4229                           ;interface.c: 93: printf("%c) time  <A     \n",key);
  4230  0037C8  0ED9               	movlw	low STR_15
  4231  0037CA  0100               	movlb	0	; () banked
  4232  0037CC  6FBD               	movwf	printf@f& (0+255),b
  4233  0037CE  0EFE               	movlw	high STR_15
  4234  0037D0  0100               	movlb	0	; () banked
  4235  0037D2  6FBE               	movwf	(printf@f+1)& (0+255),b
  4236  0037D4  C0EB  F0BF         	movff	showRunMenu@key,?_printf+2
  4237  0037D8  0100               	movlb	0	; () banked
  4238  0037DA  6BC0               	clrf	(?_printf+3)& (0+255),b
  4239  0037DC  EC09  F000         	call	_printf	;wreg free
  4240                           
  4241                           ;interface.c: 94: printf( "   stats <B   *>");
  4242  0037E0  0E8C               	movlw	low STR_16
  4243  0037E2  0100               	movlb	0	; () banked
  4244  0037E4  6FBD               	movwf	printf@f& (0+255),b
  4245  0037E6  0EFF               	movlw	high STR_16
  4246  0037E8  0100               	movlb	0	; () banked
  4247  0037EA  6FBE               	movwf	(printf@f+1)& (0+255),b
  4248  0037EC  EC09  F000         	call	_printf	;wreg free
  4249  0037F0                     l7162:
  4250  0037F0  ECCC  F01D         	call	_readKeypad	;wreg free
  4251  0037F4  0100               	movlb	0	; () banked
  4252  0037F6  6FEC               	movwf	showRunMenu@k& (0+255),b
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;interface.c: 98: while(k != 'A' && k != 'B' && k != '*');
  4256  0037F8  0E41               	movlw	65
  4257  0037FA  0100               	movlb	0	; () banked
  4258  0037FC  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4259  0037FE  B4D8               	btfsc	status,2,c
  4260  003800  D00A               	goto	l7170
  4261                           
  4262                           ; BSR set to: 0
  4263  003802  0E42               	movlw	66
  4264  003804  0100               	movlb	0	; () banked
  4265  003806  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4266  003808  B4D8               	btfsc	status,2,c
  4267  00380A  D005               	goto	l7170
  4268                           
  4269                           ; BSR set to: 0
  4270  00380C  0E2A               	movlw	42
  4271  00380E  0100               	movlb	0	; () banked
  4272  003810  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4273  003812  A4D8               	btfss	status,2,c
  4274  003814  D7ED               	goto	l7162
  4275  003816                     l7170:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;interface.c: 99: return k;
  4279  003816  0100               	movlb	0	; () banked
  4280  003818  51EC               	movf	showRunMenu@k& (0+255),w,b
  4281  00381A  0012               	return	
  4282  00381C                     __end_of_showRunMenu:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           postinc0	equ	0xFEE
  4289                           wreg	equ	0xFE8
  4290                           postdec1	equ	0xFE5
  4291                           fsr1l	equ	0xFE1
  4292                           indf2	equ	0xFDF
  4293                           postinc2	equ	0xFDE
  4294                           postdec2	equ	0xFDD
  4295                           fsr2h	equ	0xFDA
  4296                           fsr2l	equ	0xFD9
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function _showMainMenu *****************
  4300 ;; Defined at:
  4301 ;;		line 69 in file "interface.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  k               1  107[BANK0 ] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      unsigned char 
  4308 ;; Registers used:
  4309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;Total ram usage:        1 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    8
  4322 ;; This function calls:
  4323 ;;		_lcdClear
  4324 ;;		_printf
  4325 ;;		_readKeypad
  4326 ;; This function is called by:
  4327 ;;		_showInterface
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text10
  4332  003924                     __ptext10:
  4333                           	opt stack 0
  4334  003924                     _showMainMenu:
  4335                           	opt stack 21
  4336                           
  4337                           ;interface.c: 70: lcdClear();
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;incstack = 0
  4341  003924  EC9D  F01E         	call	_lcdClear	;wreg free
  4342                           
  4343                           ;interface.c: 71: printf("start   <B      \n");
  4344  003928  0E12               	movlw	low STR_11
  4345  00392A  0100               	movlb	0	; () banked
  4346  00392C  6FBD               	movwf	printf@f& (0+255),b
  4347  00392E  0EFF               	movlw	high STR_11
  4348  003930  0100               	movlb	0	; () banked
  4349  003932  6FBE               	movwf	(printf@f+1)& (0+255),b
  4350  003934  EC09  F000         	call	_printf	;wreg free
  4351                           
  4352                           ;interface.c: 72: printf("history <C    *>");
  4353  003938  0E7B               	movlw	low STR_12
  4354  00393A  0100               	movlb	0	; () banked
  4355  00393C  6FBD               	movwf	printf@f& (0+255),b
  4356  00393E  0EFF               	movlw	high STR_12
  4357  003940  0100               	movlb	0	; () banked
  4358  003942  6FBE               	movwf	(printf@f+1)& (0+255),b
  4359  003944  EC09  F000         	call	_printf	;wreg free
  4360  003948                     l7122:
  4361  003948  ECCC  F01D         	call	_readKeypad	;wreg free
  4362  00394C  0100               	movlb	0	; () banked
  4363  00394E  6FEB               	movwf	showMainMenu@k& (0+255),b
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;interface.c: 76: while(k != 'B' && k != 'C' && k != '*');
  4367  003950  0E42               	movlw	66
  4368  003952  0100               	movlb	0	; () banked
  4369  003954  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4370  003956  B4D8               	btfsc	status,2,c
  4371  003958  D00A               	goto	l7130
  4372                           
  4373                           ; BSR set to: 0
  4374  00395A  0E43               	movlw	67
  4375  00395C  0100               	movlb	0	; () banked
  4376  00395E  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4377  003960  B4D8               	btfsc	status,2,c
  4378  003962  D005               	goto	l7130
  4379                           
  4380                           ; BSR set to: 0
  4381  003964  0E2A               	movlw	42
  4382  003966  0100               	movlb	0	; () banked
  4383  003968  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4384  00396A  A4D8               	btfss	status,2,c
  4385  00396C  D7ED               	goto	l7122
  4386  00396E                     l7130:
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;interface.c: 77: return k;
  4390  00396E  0100               	movlb	0	; () banked
  4391  003970  51EB               	movf	showMainMenu@k& (0+255),w,b
  4392  003972  0012               	return	
  4393  003974                     __end_of_showMainMenu:
  4394                           	opt stack 0
  4395                           tblptru	equ	0xFF8
  4396                           tblptrh	equ	0xFF7
  4397                           tblptrl	equ	0xFF6
  4398                           tablat	equ	0xFF5
  4399                           postinc0	equ	0xFEE
  4400                           wreg	equ	0xFE8
  4401                           postdec1	equ	0xFE5
  4402                           fsr1l	equ	0xFE1
  4403                           indf2	equ	0xFDF
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _readKeypad *****************
  4411 ;; Defined at:
  4412 ;;		line 36 in file "keypad.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  key             1   34[COMRAM] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      unsigned char 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;Total ram usage:        1 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    3
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;;		_sortBattery
  4438 ;;		_showMainMenu
  4439 ;;		_showRunSelect
  4440 ;;		_showRunMenu
  4441 ;;		_showRunTime
  4442 ;;		_showRunStats
  4443 ;;		_pause
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text11
  4448  003B98                     __ptext11:
  4449                           	opt stack 0
  4450  003B98                     _readKeypad:
  4451                           	opt stack 26
  4452  003B98                     l261:
  4453  003B98  A281               	btfss	3969,1,c	;volatile
  4454  003B9A  D7FE               	goto	l261
  4455                           
  4456                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4457  003B9C  3881               	swapf	3969,w,c	;volatile
  4458  003B9E  0B0F               	andlw	15
  4459  003BA0  0B0F               	andlw	15
  4460  003BA2  6E23               	movwf	readKeypad@key,c
  4461  003BA4                     l264:
  4462  003BA4  B281               	btfsc	3969,1,c	;volatile
  4463  003BA6  D7FE               	goto	l264
  4464                           
  4465                           ;keypad.c: 40: return keys[key];
  4466  003BA8  5023               	movf	readKeypad@key,w,c
  4467  003BAA  0D01               	mullw	1
  4468  003BAC  0EC1               	movlw	low _keys
  4469  003BAE  24F3               	addwf	prodl,w,c
  4470  003BB0  6EF6               	movwf	tblptrl,c
  4471  003BB2  0EFE               	movlw	high _keys
  4472  003BB4  20F4               	addwfc	prodh,w,c
  4473  003BB6  6EF7               	movwf	tblptrh,c
  4474  003BB8                     	if	0	;There are less than 3 active tblptr bytes
  4475  003BB8                     	endif
  4476  003BB8  0008               	tblrd		*
  4477  003BBA  50F5               	movf	tablat,w,c
  4478  003BBC  0012               	return	
  4479  003BBE                     __end_of_readKeypad:
  4480                           	opt stack 0
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           postinc0	equ	0xFEE
  4488                           wreg	equ	0xFE8
  4489                           postdec1	equ	0xFE5
  4490                           fsr1l	equ	0xFE1
  4491                           indf2	equ	0xFDF
  4492                           postinc2	equ	0xFDE
  4493                           postdec2	equ	0xFDD
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function _showDateTime *****************
  4499 ;; Defined at:
  4500 ;;		line 56 in file "interface.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;		None
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  t               2  108[BANK0 ] PTR int 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;Total ram usage:        3 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    8
  4521 ;; This function calls:
  4522 ;;		_getTime
  4523 ;;		_initRTC
  4524 ;;		_lcdClear
  4525 ;;		_printf
  4526 ;;		_setTime
  4527 ;; This function is called by:
  4528 ;;		_showInterface
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text12
  4533  002D2E                     __ptext12:
  4534                           	opt stack 0
  4535  002D2E                     _showDateTime:
  4536                           	opt stack 21
  4537                           
  4538                           ;interface.c: 58: initRTC();
  4539                           
  4540                           ;incstack = 0
  4541  002D2E  EC80  F01E         	call	_initRTC	;wreg free
  4542                           
  4543                           ;interface.c: 59: setTime();
  4544  002D32  EC69  F01C         	call	_setTime	;wreg free
  4545  002D36                     l7106:
  4546                           
  4547                           ;interface.c: 61: int* t = getTime();
  4548  002D36  EC5B  F01A         	call	_getTime	;wreg free
  4549  002D3A  C026  F0EC         	movff	?_getTime,showDateTime@t
  4550  002D3E  C027  F0ED         	movff	?_getTime+1,showDateTime@t+1
  4551                           
  4552                           ;interface.c: 62: lcdClear();
  4553  002D42  EC9D  F01E         	call	_lcdClear	;wreg free
  4554                           
  4555                           ;interface.c: 63: printf("%x:%x:%x\n",t[2],t[1],t[0]);
  4556  002D46  0EDC               	movlw	low STR_1
  4557  002D48  0100               	movlb	0	; () banked
  4558  002D4A  6FBD               	movwf	printf@f& (0+255),b
  4559  002D4C  0EFF               	movlw	high STR_1
  4560  002D4E  0100               	movlb	0	; () banked
  4561  002D50  6FBE               	movwf	(printf@f+1)& (0+255),b
  4562  002D52  0100               	movlb	0	; () banked
  4563  002D54  EE20 F004          	lfsr	2,4
  4564  002D58  51EC               	movf	showDateTime@t& (0+255),w,b
  4565  002D5A  26D9               	addwf	fsr2l,f,c
  4566  002D5C  51ED               	movf	(showDateTime@t+1)& (0+255),w,b
  4567  002D5E  22DA               	addwfc	fsr2h,f,c
  4568  002D60  CFDE F0BF          	movff	postinc2,?_printf+2
  4569  002D64  CFDD F0C0          	movff	postdec2,?_printf+3
  4570  002D68  0100               	movlb	0	; () banked
  4571  002D6A  EE20 F002          	lfsr	2,2
  4572  002D6E  51EC               	movf	showDateTime@t& (0+255),w,b
  4573  002D70  26D9               	addwf	fsr2l,f,c
  4574  002D72  51ED               	movf	(showDateTime@t+1)& (0+255),w,b
  4575  002D74  22DA               	addwfc	fsr2h,f,c
  4576  002D76  CFDE F0C1          	movff	postinc2,?_printf+4
  4577  002D7A  CFDD F0C2          	movff	postdec2,?_printf+5
  4578  002D7E  C0EC  FFD9         	movff	showDateTime@t,fsr2l
  4579  002D82  C0ED  FFDA         	movff	showDateTime@t+1,fsr2h
  4580  002D86  CFDE F0C3          	movff	postinc2,?_printf+6
  4581  002D8A  CFDD F0C4          	movff	postdec2,?_printf+7
  4582  002D8E  EC09  F000         	call	_printf	;wreg free
  4583                           
  4584                           ;interface.c: 64: printf("%x/%x/%x",t[6],t[5],t[4]);
  4585  002D92  0EE6               	movlw	low STR_2
  4586  002D94  0100               	movlb	0	; () banked
  4587  002D96  6FBD               	movwf	printf@f& (0+255),b
  4588  002D98  0EFF               	movlw	high STR_2
  4589  002D9A  0100               	movlb	0	; () banked
  4590  002D9C  6FBE               	movwf	(printf@f+1)& (0+255),b
  4591  002D9E  0100               	movlb	0	; () banked
  4592  002DA0  EE20 F00C          	lfsr	2,12
  4593  002DA4  51EC               	movf	showDateTime@t& (0+255),w,b
  4594  002DA6  26D9               	addwf	fsr2l,f,c
  4595  002DA8  51ED               	movf	(showDateTime@t+1)& (0+255),w,b
  4596  002DAA  22DA               	addwfc	fsr2h,f,c
  4597  002DAC  CFDE F0BF          	movff	postinc2,?_printf+2
  4598  002DB0  CFDD F0C0          	movff	postdec2,?_printf+3
  4599  002DB4  0100               	movlb	0	; () banked
  4600  002DB6  EE20 F00A          	lfsr	2,10
  4601  002DBA  51EC               	movf	showDateTime@t& (0+255),w,b
  4602  002DBC  26D9               	addwf	fsr2l,f,c
  4603  002DBE  51ED               	movf	(showDateTime@t+1)& (0+255),w,b
  4604  002DC0  22DA               	addwfc	fsr2h,f,c
  4605  002DC2  CFDE F0C1          	movff	postinc2,?_printf+4
  4606  002DC6  CFDD F0C2          	movff	postdec2,?_printf+5
  4607  002DCA  0100               	movlb	0	; () banked
  4608  002DCC  EE20 F008          	lfsr	2,8
  4609  002DD0  51EC               	movf	showDateTime@t& (0+255),w,b
  4610  002DD2  26D9               	addwf	fsr2l,f,c
  4611  002DD4  51ED               	movf	(showDateTime@t+1)& (0+255),w,b
  4612  002DD6  22DA               	addwfc	fsr2h,f,c
  4613  002DD8  CFDE F0C3          	movff	postinc2,?_printf+6
  4614  002DDC  CFDD F0C4          	movff	postdec2,?_printf+7
  4615  002DE0  EC09  F000         	call	_printf	;wreg free
  4616                           
  4617                           ;interface.c: 65: _delay((unsigned long)((77)*(10000000/4000.0)));
  4618  002DE4  0EFA               	movlw	250
  4619  002DE6  0100               	movlb	0	; () banked
  4620  002DE8  6FEB               	movwf	??_showDateTime& (0+255),b
  4621  002DEA  0EFF               	movlw	255
  4622  002DEC                     u8007:
  4623  002DEC  2EE8               	decfsz	wreg,f,c
  4624  002DEE  D7FE               	bra	u8007
  4625  002DF0  2FEB               	decfsz	??_showDateTime& (0+255),f,b
  4626  002DF2  D7FC               	bra	u8007
  4627  002DF4  D7A0               	goto	l7106
  4628  002DF6                     __end_of_showDateTime:
  4629                           	opt stack 0
  4630                           tblptru	equ	0xFF8
  4631                           tblptrh	equ	0xFF7
  4632                           tblptrl	equ	0xFF6
  4633                           tablat	equ	0xFF5
  4634                           prodh	equ	0xFF4
  4635                           prodl	equ	0xFF3
  4636                           postinc0	equ	0xFEE
  4637                           wreg	equ	0xFE8
  4638                           postdec1	equ	0xFE5
  4639                           fsr1l	equ	0xFE1
  4640                           indf2	equ	0xFDF
  4641                           postinc2	equ	0xFDE
  4642                           postdec2	equ	0xFDD
  4643                           fsr2h	equ	0xFDA
  4644                           fsr2l	equ	0xFD9
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function _setTime *****************
  4648 ;; Defined at:
  4649 ;;		line 48 in file "RTC.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;		None
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  i               1   37[COMRAM] unsigned char 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;Total ram usage:        1 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    5
  4670 ;; This function calls:
  4671 ;;		_I2C_Master_Start
  4672 ;;		_I2C_Master_Stop
  4673 ;;		_I2C_Master_Write
  4674 ;; This function is called by:
  4675 ;;		_showDateTime
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text13
  4680  0038D2                     __ptext13:
  4681                           	opt stack 0
  4682  0038D2                     _setTime:
  4683                           	opt stack 23
  4684                           
  4685                           ;RTC.c: 49: (INTCONbits.GIE = 0);
  4686                           
  4687                           ;incstack = 0
  4688  0038D2  9EF2               	bcf	intcon,7,c	;volatile
  4689                           
  4690                           ;RTC.c: 50: I2C_Master_Start();
  4691  0038D4  ECA5  F01E         	call	_I2C_Master_Start	;wreg free
  4692                           
  4693                           ;RTC.c: 51: I2C_Master_Write(0b11010000);
  4694  0038D8  0E00               	movlw	0
  4695  0038DA  6E25               	movwf	I2C_Master_Write@d+1,c
  4696  0038DC  0ED0               	movlw	208
  4697  0038DE  6E24               	movwf	I2C_Master_Write@d,c
  4698  0038E0  EC94  F01E         	call	_I2C_Master_Write	;wreg free
  4699                           
  4700                           ;RTC.c: 52: I2C_Master_Write(0x00);
  4701  0038E4  0E00               	movlw	0
  4702  0038E6  6E25               	movwf	I2C_Master_Write@d+1,c
  4703  0038E8  0E00               	movlw	0
  4704  0038EA  6E24               	movwf	I2C_Master_Write@d,c
  4705  0038EC  EC94  F01E         	call	_I2C_Master_Write	;wreg free
  4706                           
  4707                           ;RTC.c: 53: for(char i=0; i<7; i++){
  4708  0038F0  0E00               	movlw	0
  4709  0038F2  6E26               	movwf	setTime@i,c
  4710  0038F4                     l6984:
  4711  0038F4  0E06               	movlw	6
  4712  0038F6  6426               	cpfsgt	setTime@i,c
  4713  0038F8  D001               	goto	l6988
  4714  0038FA  D010               	goto	l6994
  4715  0038FC                     l6988:
  4716                           
  4717                           ;RTC.c: 54: I2C_Master_Write(happynewyear[i]);
  4718  0038FC  5026               	movf	setTime@i,w,c
  4719  0038FE  0D01               	mullw	1
  4720  003900  0ED2               	movlw	low _happynewyear
  4721  003902  24F3               	addwf	prodl,w,c
  4722  003904  6EF6               	movwf	tblptrl,c
  4723  003906  0EFE               	movlw	high _happynewyear
  4724  003908  20F4               	addwfc	prodh,w,c
  4725  00390A  6EF7               	movwf	tblptrh,c
  4726  00390C                     	if	0	;There are less than 3 active tblptr bytes
  4727  00390C                     	endif
  4728  00390C  0008               	tblrd		*
  4729  00390E  50F5               	movf	tablat,w,c
  4730  003910  6E24               	movwf	I2C_Master_Write@d,c
  4731  003912  6A25               	clrf	I2C_Master_Write@d+1,c
  4732  003914  EC94  F01E         	call	_I2C_Master_Write	;wreg free
  4733  003918  2A26               	incf	setTime@i,f,c
  4734  00391A  D7EC               	goto	l6984
  4735  00391C                     l6994:
  4736                           
  4737                           ;RTC.c: 55: }
  4738                           ;RTC.c: 56: I2C_Master_Stop();
  4739  00391C  ECA1  F01E         	call	_I2C_Master_Stop	;wreg free
  4740                           
  4741                           ;RTC.c: 57: (INTCONbits.GIE = 1);
  4742  003920  8EF2               	bsf	intcon,7,c	;volatile
  4743  003922  0012               	return		;funcret
  4744  003924                     __end_of_setTime:
  4745                           	opt stack 0
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           intcon	equ	0xFF2
  4753                           postinc0	equ	0xFEE
  4754                           wreg	equ	0xFE8
  4755                           postdec1	equ	0xFE5
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _printf *****************
  4765 ;; Defined at:
  4766 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  4769 ;;		 -> STR_20(19), STR_19(18), STR_18(17), STR_17(19), 
  4770 ;;		 -> STR_16(17), STR_15(19), STR_14(17), STR_13(18), 
  4771 ;;		 -> STR_12(17), STR_11(18), STR_10(9), STR_9(10), 
  4772 ;;		 -> STR_8(8), STR_7(15), STR_6(14), STR_5(17), 
  4773 ;;		 -> STR_4(17), STR_3(8), STR_2(9), STR_1(10), 
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  idx             1   80[BANK0 ] unsigned char 
  4776 ;;  val             4   96[BANK0 ] unsigned long 
  4777 ;;  tmpval          4   87[BANK0 ] struct .
  4778 ;;  fval            3   93[BANK0 ] struct .
  4779 ;;  prec            2  104[BANK0 ] int 
  4780 ;;  flag            2  102[BANK0 ] unsigned short 
  4781 ;;  width           2  100[BANK0 ] int 
  4782 ;;  exp             2   91[BANK0 ] int 
  4783 ;;  ap              2   85[BANK0 ] PTR void [1]
  4784 ;;		 -> ?_printf(2), 
  4785 ;;  len             2   83[BANK0 ] unsigned int 
  4786 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  4787 ;;		 -> printf@c(1), 
  4788 ;;  c               1  106[BANK0 ] char 
  4789 ;;  d               1    0        unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  2   61[BANK0 ] int 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4799 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;Total ram usage:       46 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    7
  4806 ;; This function calls:
  4807 ;;		___awdiv
  4808 ;;		___ftadd
  4809 ;;		___ftge
  4810 ;;		___ftmul
  4811 ;;		___ftneg
  4812 ;;		___ftsub
  4813 ;;		___fttol
  4814 ;;		___lldiv
  4815 ;;		___llmod
  4816 ;;		___lltoft
  4817 ;;		___wmul
  4818 ;;		__div_to_l_
  4819 ;;		__tdiv_to_l_
  4820 ;;		_fround
  4821 ;;		_isdigit
  4822 ;;		_putch
  4823 ;;		_scale
  4824 ;; This function is called by:
  4825 ;;		_main
  4826 ;;		_sortBattery
  4827 ;;		_showDateTime
  4828 ;;		_showMainMenu
  4829 ;;		_showRunSelect
  4830 ;;		_showRunMenu
  4831 ;;		_showRunTime
  4832 ;;		_showRunStats
  4833 ;;		_debug
  4834 ;;		_pause
  4835 ;;		_testFrequency
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text14
  4840  000012                     __ptext14:
  4841                           	opt stack 0
  4842  000012                     _printf:
  4843                           	opt stack 22
  4844                           
  4845                           ;doprnt.c: 466: va_list ap;
  4846                           ;doprnt.c: 499: signed char c;
  4847                           ;doprnt.c: 501: int width;
  4848                           ;doprnt.c: 504: int prec;
  4849                           ;doprnt.c: 508: unsigned short flag;
  4850                           ;doprnt.c: 515: char d;
  4851                           ;doprnt.c: 516: double fval;
  4852                           ;doprnt.c: 517: int exp;
  4853                           ;doprnt.c: 523: union {
  4854                           ;doprnt.c: 524: unsigned long vd;
  4855                           ;doprnt.c: 525: double integ;
  4856                           ;doprnt.c: 526: } tmpval;
  4857                           ;doprnt.c: 528: unsigned long val;
  4858                           ;doprnt.c: 529: unsigned len;
  4859                           ;doprnt.c: 530: const char * cp;
  4860                           ;doprnt.c: 533: *ap = __va_start();
  4861                           
  4862                           ;incstack = 0
  4863  000012  0EBF               	movlw	low (?_printf+2)
  4864  000014  0100               	movlb	0	; () banked
  4865  000016  6FD5               	movwf	printf@ap& (0+255),b
  4866  000018  0E00               	movlw	high (?_printf+2)
  4867  00001A  0100               	movlb	0	; () banked
  4868  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  4869                           
  4870                           ;doprnt.c: 536: while(c = *f++) {
  4871  00001E  EFF5  F006         	goto	l6948
  4872  000022                     l6582:
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;doprnt.c: 538: if(c != '%')
  4876  000022  0E25               	movlw	37
  4877  000024  0100               	movlb	0	; () banked
  4878  000026  19EA               	xorwf	printf@c& (0+255),w,b
  4879  000028  B4D8               	btfsc	status,2,c
  4880  00002A  D006               	goto	l6586
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;doprnt.c: 540: {
  4884                           ;doprnt.c: 541: (putch(c) );
  4885  00002C  0100               	movlb	0	; () banked
  4886  00002E  51EA               	movf	printf@c& (0+255),w,b
  4887  000030  EC17  F01E         	call	_putch
  4888                           
  4889                           ;doprnt.c: 542: continue;
  4890  000034  EFF5  F006         	goto	l6948
  4891  000038                     l6586:
  4892                           
  4893                           ;doprnt.c: 543: }
  4894                           ;doprnt.c: 546: width = 0;
  4895  000038  0E00               	movlw	0
  4896  00003A  0100               	movlb	0	; () banked
  4897  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  4898  00003E  0E00               	movlw	0
  4899  000040  6FE4               	movwf	printf@width& (0+255),b
  4900                           
  4901                           ;doprnt.c: 548: flag = 0;
  4902  000042  0E00               	movlw	0
  4903  000044  0100               	movlb	0	; () banked
  4904  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  4905  000048  0E00               	movlw	0
  4906  00004A  6FE6               	movwf	printf@flag& (0+255),b
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;doprnt.c: 551: switch(*f) {
  4910                           
  4911                           ;doprnt.c: 550: for(;;) {
  4912  00004C  D005               	goto	l6592
  4913  00004E                     l6588:
  4914                           
  4915                           ;doprnt.c: 580: flag |= 0x04;
  4916  00004E  0100               	movlb	0	; () banked
  4917  000050  85E6               	bsf	printf@flag& (0+255),2,b
  4918                           
  4919                           ;doprnt.c: 581: f++;
  4920  000052  0100               	movlb	0	; () banked
  4921  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  4922  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4923  000058                     l6592:
  4924  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  4925  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4926  000060                     	if	0	;tblptru may be non-zero
  4927  000060                     	endif
  4928  000060                     	if	0	;tblptru may be non-zero
  4929  000060                     	endif
  4930  000060  0008               	tblrd		*
  4931  000062  50F5               	movf	tablat,w,c
  4932                           
  4933                           ; Switch size 1, requested type "space"
  4934                           ; Number of cases is 1, Range of values is 48 to 48
  4935                           ; switch strategies available:
  4936                           ; Name         Instructions Cycles
  4937                           ; simple_byte            4     3 (average)
  4938                           ;	Chosen strategy is simple_byte
  4939  000064  0A30               	xorlw	48	; case 48
  4940  000066  B4D8               	btfsc	status,2,c
  4941  000068  D7F2               	goto	l6588
  4942                           
  4943                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4944                           
  4945                           ;doprnt.c: 586: }
  4946                           
  4947                           ;doprnt.c: 585: break;
  4948  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  4949  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4950  000072                     	if	0	;tblptru may be non-zero
  4951  000072                     	endif
  4952  000072                     	if	0	;tblptru may be non-zero
  4953  000072                     	endif
  4954  000072  0008               	tblrd		*
  4955  000074  50F5               	movf	tablat,w,c
  4956  000076  EC58  F01E         	call	_isdigit
  4957  00007A  A0D8               	btfss	status,0,c
  4958  00007C  D03F               	goto	l6606
  4959                           
  4960                           ;doprnt.c: 598: width = 0;
  4961  00007E  0E00               	movlw	0
  4962  000080  0100               	movlb	0	; () banked
  4963  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  4964  000084  0E00               	movlw	0
  4965  000086  6FE4               	movwf	printf@width& (0+255),b
  4966  000088                     l6598:
  4967                           
  4968                           ;doprnt.c: 600: width *= 10;
  4969  000088  C0E4  F031         	movff	printf@width,___wmul@multiplier
  4970  00008C  C0E5  F032         	movff	printf@width+1,___wmul@multiplier+1
  4971  000090  0E00               	movlw	0
  4972  000092  6E34               	movwf	___wmul@multiplicand+1,c
  4973  000094  0E0A               	movlw	10
  4974  000096  6E33               	movwf	___wmul@multiplicand,c
  4975  000098  ECF2  F01D         	call	___wmul	;wreg free
  4976  00009C  C031  F0E4         	movff	?___wmul,printf@width
  4977  0000A0  C032  F0E5         	movff	?___wmul+1,printf@width+1
  4978                           
  4979                           ;doprnt.c: 601: width += *f++ - '0';
  4980  0000A4  0ED0               	movlw	208
  4981  0000A6  0100               	movlb	0	; () banked
  4982  0000A8  6FC7               	movwf	??_printf& (0+255),b
  4983  0000AA  0EFF               	movlw	255
  4984  0000AC  0100               	movlb	0	; () banked
  4985  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  4986  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  4987  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4988  0000B8                     	if	0	;tblptru may be non-zero
  4989  0000B8                     	endif
  4990  0000B8                     	if	0	;tblptru may be non-zero
  4991  0000B8                     	endif
  4992  0000B8  0008               	tblrd		*
  4993  0000BA  50F5               	movf	tablat,w,c
  4994  0000BC  0100               	movlb	0	; () banked
  4995  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  4996  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  4997  0000C2  0100               	movlb	0	; () banked
  4998  0000C4  51C7               	movf	??_printf& (0+255),w,b
  4999  0000C6  0100               	movlb	0	; () banked
  5000  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  5001  0000CA  0100               	movlb	0	; () banked
  5002  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  5003  0000CE  0100               	movlb	0	; () banked
  5004  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  5005  0000D2  0100               	movlb	0	; () banked
  5006  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  5007  0000D6  0100               	movlb	0	; () banked
  5008  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  5009  0000DA  0100               	movlb	0	; () banked
  5010  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  5011  0000DE  0100               	movlb	0	; () banked
  5012  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  5013                           
  5014                           ; BSR set to: 0
  5015  0000E2  0100               	movlb	0	; () banked
  5016  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  5017  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5021  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  5022  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5023  0000F0                     	if	0	;tblptru may be non-zero
  5024  0000F0                     	endif
  5025  0000F0                     	if	0	;tblptru may be non-zero
  5026  0000F0                     	endif
  5027  0000F0  0008               	tblrd		*
  5028  0000F2  50F5               	movf	tablat,w,c
  5029  0000F4  EC58  F01E         	call	_isdigit
  5030  0000F8  B0D8               	btfsc	status,0,c
  5031  0000FA  D7C6               	goto	l6598
  5032  0000FC                     l6606:
  5033                           
  5034                           ;doprnt.c: 608: }
  5035                           ;doprnt.c: 611: if(*f == '.') {
  5036  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  5037  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5038  000104                     	if	0	;tblptru may be non-zero
  5039  000104                     	endif
  5040  000104                     	if	0	;tblptru may be non-zero
  5041  000104                     	endif
  5042  000104  0008               	tblrd		*
  5043  000106  50F5               	movf	tablat,w,c
  5044  000108  0A2E               	xorlw	46
  5045  00010A  A4D8               	btfss	status,2,c
  5046  00010C  D034               	goto	l6618
  5047                           
  5048                           ;doprnt.c: 612: flag |= 0x4000;
  5049  00010E  0100               	movlb	0	; () banked
  5050  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  5051                           
  5052                           ;doprnt.c: 613: f++;
  5053  000112  0100               	movlb	0	; () banked
  5054  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  5055  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;doprnt.c: 620: {
  5059                           ;doprnt.c: 621: prec = 0;
  5060  000118  0E00               	movlw	0
  5061  00011A  0100               	movlb	0	; () banked
  5062  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5063  00011E  0E00               	movlw	0
  5064  000120  6FE8               	movwf	printf@prec& (0+255),b
  5065                           
  5066                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5067  000122  D01E               	goto	l6616
  5068  000124                     l6612:
  5069                           
  5070                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5071  000124  C0E8  F031         	movff	printf@prec,___wmul@multiplier
  5072  000128  C0E9  F032         	movff	printf@prec+1,___wmul@multiplier+1
  5073  00012C  0E00               	movlw	0
  5074  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  5075  000130  0E0A               	movlw	10
  5076  000132  6E33               	movwf	___wmul@multiplicand,c
  5077  000134  ECF2  F01D         	call	___wmul	;wreg free
  5078  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  5079  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5080  000140                     	if	0	;tblptru may be non-zero
  5081  000140                     	endif
  5082  000140                     	if	0	;tblptru may be non-zero
  5083  000140                     	endif
  5084  000140  0008               	tblrd		*
  5085  000142  50F5               	movf	tablat,w,c
  5086  000144  2631               	addwf	?___wmul,f,c
  5087  000146  0E00               	movlw	0
  5088  000148  2232               	addwfc	?___wmul+1,f,c
  5089  00014A  0ED0               	movlw	208
  5090  00014C  2431               	addwf	?___wmul,w,c
  5091  00014E  0100               	movlb	0	; () banked
  5092  000150  6FE8               	movwf	printf@prec& (0+255),b
  5093  000152  0EFF               	movlw	255
  5094  000154  2032               	addwfc	?___wmul+1,w,c
  5095  000156  0100               	movlb	0	; () banked
  5096  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5097                           
  5098                           ; BSR set to: 0
  5099  00015A  0100               	movlb	0	; () banked
  5100  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  5101  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5102  000160                     l6616:
  5103                           
  5104                           ; BSR set to: 0
  5105  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  5106  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5107  000168                     	if	0	;tblptru may be non-zero
  5108  000168                     	endif
  5109  000168                     	if	0	;tblptru may be non-zero
  5110  000168                     	endif
  5111  000168  0008               	tblrd		*
  5112  00016A  50F5               	movf	tablat,w,c
  5113  00016C  EC58  F01E         	call	_isdigit
  5114  000170  A0D8               	btfss	status,0,c
  5115  000172  D07D               	goto	l6660
  5116  000174  D7D7               	goto	l6612
  5117  000176                     l6618:
  5118                           
  5119                           ;doprnt.c: 626: prec = 0;
  5120  000176  0E00               	movlw	0
  5121  000178  0100               	movlb	0	; () banked
  5122  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5123  00017C  0E00               	movlw	0
  5124  00017E  6FE8               	movwf	printf@prec& (0+255),b
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 628: flag |= 0x1000;
  5128  000180  0100               	movlb	0	; () banked
  5129  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;doprnt.c: 635: switch(c = *f++) {
  5133                           
  5134                           ;doprnt.c: 630: }
  5135                           ;doprnt.c: 633: loop:
  5136                           
  5137                           ; BSR set to: 0
  5138  000184  D074               	goto	l6660
  5139  000186                     l6622:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;doprnt.c: 643: flag |= 0x10;
  5143  000186  0100               	movlb	0	; () banked
  5144  000188  89E6               	bsf	printf@flag& (0+255),4,b
  5145                           
  5146                           ;doprnt.c: 644: goto loop;
  5147  00018A  D071               	goto	l6660
  5148  00018C                     l6624:
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;doprnt.c: 663: flag |= 0x400;
  5152  00018C  0100               	movlb	0	; () banked
  5153  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;doprnt.c: 698: case 'i':
  5157                           ;doprnt.c: 699: break;
  5158                           
  5159                           ; BSR set to: 0
  5160                           
  5161                           ;doprnt.c: 697: case 'd':
  5162                           
  5163                           ;doprnt.c: 664: break;
  5164  000190  D090               	goto	l6662
  5165  000192                     l6626:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;doprnt.c: 721: flag |= 0x80;
  5169  000192  0100               	movlb	0	; () banked
  5170  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  5171                           
  5172                           ;doprnt.c: 723: break;
  5173  000196  D08D               	goto	l6662
  5174  000198                     l6628:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;doprnt.c: 753: if(prec && prec < len)
  5178  000198  0100               	movlb	0	; () banked
  5179  00019A  51E8               	movf	printf@prec& (0+255),w,b
  5180  00019C  0100               	movlb	0	; () banked
  5181  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5182  0001A0  B4D8               	btfsc	status,2,c
  5183  0001A2  D00E               	goto	l6634
  5184                           
  5185                           ; BSR set to: 0
  5186  0001A4  0100               	movlb	0	; () banked
  5187  0001A6  51D3               	movf	printf@len& (0+255),w,b
  5188  0001A8  0100               	movlb	0	; () banked
  5189  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  5190  0001AC  0100               	movlb	0	; () banked
  5191  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  5192  0001B0  0100               	movlb	0	; () banked
  5193  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  5194  0001B4  B0D8               	btfsc	status,0,c
  5195  0001B6  D004               	goto	l6634
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;doprnt.c: 754: len = prec;
  5199  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  5200  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  5201  0001C0                     l6634:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;doprnt.c: 757: if(width > len)
  5205  0001C0  0100               	movlb	0	; () banked
  5206  0001C2  51E4               	movf	printf@width& (0+255),w,b
  5207  0001C4  0100               	movlb	0	; () banked
  5208  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  5209  0001C8  0100               	movlb	0	; () banked
  5210  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  5211  0001CC  0100               	movlb	0	; () banked
  5212  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  5213  0001D0  B0D8               	btfsc	status,0,c
  5214  0001D2  D009               	goto	l6638
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;doprnt.c: 758: width -= len;
  5218  0001D4  0100               	movlb	0	; () banked
  5219  0001D6  51D3               	movf	printf@len& (0+255),w,b
  5220  0001D8  0100               	movlb	0	; () banked
  5221  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  5222  0001DC  0100               	movlb	0	; () banked
  5223  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  5224  0001E0  0100               	movlb	0	; () banked
  5225  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  5226  0001E4  D009               	goto	l6642
  5227  0001E6                     l6638:
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;doprnt.c: 759: else
  5231                           ;doprnt.c: 760: width = 0;
  5232  0001E6  0E00               	movlw	0
  5233  0001E8  0100               	movlb	0	; () banked
  5234  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  5235  0001EC  0E00               	movlw	0
  5236  0001EE  6FE4               	movwf	printf@width& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;doprnt.c: 764: while(width--)
  5240  0001F0  D003               	goto	l6642
  5241  0001F2                     l6640:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;doprnt.c: 765: (putch(' ') );
  5245  0001F2  0E20               	movlw	32
  5246  0001F4  EC17  F01E         	call	_putch
  5247  0001F8                     l6642:
  5248  0001F8  0100               	movlb	0	; () banked
  5249  0001FA  07E4               	decf	printf@width& (0+255),f,b
  5250  0001FC  A0D8               	btfss	status,0,c
  5251  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  5252  000200  0100               	movlb	0	; () banked
  5253  000202  29E4               	incf	printf@width& (0+255),w,b
  5254  000204  E1F6               	bnz	l6640
  5255  000206  0100               	movlb	0	; () banked
  5256  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  5257  00020A  B4D8               	btfsc	status,2,c
  5258  00020C  D00B               	goto	l6648
  5259  00020E  D7F1               	goto	l6640
  5260  000210                     l6644:
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;doprnt.c: 768: (putch(*cp++) );
  5264  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  5265  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  5266  000218  50DF               	movf	indf2,w,c
  5267  00021A  EC17  F01E         	call	_putch
  5268  00021E  0100               	movlb	0	; () banked
  5269  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  5270  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  5271  000224                     l6648:
  5272                           
  5273                           ; BSR set to: 0
  5274  000224  0100               	movlb	0	; () banked
  5275  000226  07D3               	decf	printf@len& (0+255),f,b
  5276  000228  A0D8               	btfss	status,0,c
  5277  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  5278  00022C  0100               	movlb	0	; () banked
  5279  00022E  29D3               	incf	printf@len& (0+255),w,b
  5280  000230  E1EF               	bnz	l6644
  5281  000232  0100               	movlb	0	; () banked
  5282  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  5283  000236  B4D8               	btfsc	status,2,c
  5284  000238  EFF5  F006         	goto	l6948
  5285  00023C  D7E9               	goto	l6644
  5286  00023E                     l6650:
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5290  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  5291  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5292  000246  50DF               	movf	indf2,w,c
  5293  000248  0100               	movlb	0	; () banked
  5294  00024A  6FEA               	movwf	printf@c& (0+255),b
  5295                           
  5296                           ; BSR set to: 0
  5297  00024C  0E02               	movlw	2
  5298  00024E  0100               	movlb	0	; () banked
  5299  000250  27D5               	addwf	printf@ap& (0+255),f,b
  5300  000252  0E00               	movlw	0
  5301  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  5302  000256                     l6654:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;doprnt.c: 805: cp = (char *)&c;
  5306  000256  0EEA               	movlw	low printf@c
  5307  000258  0100               	movlb	0	; () banked
  5308  00025A  6FD1               	movwf	printf@cp& (0+255),b
  5309  00025C  0E00               	movlw	high printf@c
  5310  00025E  0100               	movlb	0	; () banked
  5311  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;doprnt.c: 806: len = 1;
  5315  000262  0E00               	movlw	0
  5316  000264  0100               	movlb	0	; () banked
  5317  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  5318  000268  0E01               	movlw	1
  5319  00026A  6FD3               	movwf	printf@len& (0+255),b
  5320                           
  5321                           ;doprnt.c: 807: goto dostring;
  5322  00026C  D795               	goto	l6628
  5323  00026E                     l6660:
  5324  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  5325  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5326  000276  0100               	movlb	0	; () banked
  5327  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  5328  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5329  00027C                     	if	0	;tblptru may be non-zero
  5330  00027C                     	endif
  5331  00027C                     	if	0	;tblptru may be non-zero
  5332  00027C                     	endif
  5333  00027C  0008               	tblrd		*
  5334  00027E  CFF5 F0EA          	movff	tablat,printf@c
  5335  000282  0100               	movlb	0	; () banked
  5336  000284  51EA               	movf	printf@c& (0+255),w,b
  5337                           
  5338                           ; Switch size 1, requested type "space"
  5339                           ; Number of cases is 7, Range of values is 0 to 120
  5340                           ; switch strategies available:
  5341                           ; Name         Instructions Cycles
  5342                           ; simple_byte           22    12 (average)
  5343                           ;	Chosen strategy is simple_byte
  5344  000286  0A00               	xorlw	0	; case 0
  5345  000288  B4D8               	btfsc	status,2,c
  5346  00028A  0012               	return	
  5347  00028C  0A63               	xorlw	99	; case 99
  5348  00028E  B4D8               	btfsc	status,2,c
  5349  000290  D7D6               	goto	l6650
  5350  000292  0A07               	xorlw	7	; case 100
  5351  000294  B4D8               	btfsc	status,2,c
  5352  000296  D00D               	goto	l6662
  5353  000298  0A02               	xorlw	2	; case 102
  5354  00029A  B4D8               	btfsc	status,2,c
  5355  00029C  D777               	goto	l6624
  5356  00029E  0A0F               	xorlw	15	; case 105
  5357  0002A0  B4D8               	btfsc	status,2,c
  5358  0002A2  D007               	goto	l6662
  5359  0002A4  0A05               	xorlw	5	; case 108
  5360  0002A6  B4D8               	btfsc	status,2,c
  5361  0002A8  D76E               	goto	l6622
  5362  0002AA  0A14               	xorlw	20	; case 120
  5363  0002AC  B4D8               	btfsc	status,2,c
  5364  0002AE  D771               	goto	l6626
  5365  0002B0  D7D2               	goto	l6654
  5366  0002B2                     l6662:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;doprnt.c: 825: if(flag & (0x700)) {
  5370  0002B2  0E07               	movlw	7
  5371  0002B4  0100               	movlb	0	; () banked
  5372  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5373  0002B8  B4D8               	btfsc	status,2,c
  5374  0002BA  D36D               	goto	l771
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;doprnt.c: 827: if(flag & 0x1000)
  5378  0002BC  0100               	movlb	0	; () banked
  5379  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  5380  0002C0  D005               	goto	l6668
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;doprnt.c: 829: prec = 6;
  5384  0002C2  0E00               	movlw	0
  5385  0002C4  0100               	movlb	0	; () banked
  5386  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5387  0002C8  0E06               	movlw	6
  5388  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  5389  0002CC                     l6668:
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5393  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  5394  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5395  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  5396  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  5397  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  5398                           
  5399                           ; BSR set to: 0
  5400  0002E0  0E03               	movlw	3
  5401  0002E2  0100               	movlb	0	; () banked
  5402  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  5403  0002E6  0E00               	movlw	0
  5404  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;doprnt.c: 831: if(fval < 0.0) {
  5408  0002EA  0100               	movlb	0	; () banked
  5409  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  5410  0002EE  D011               	goto	l6678
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;doprnt.c: 832: fval = -fval;
  5414  0002F0  C0DD  F023         	movff	printf@fval,___ftneg@f1
  5415  0002F4  C0DE  F024         	movff	printf@fval+1,___ftneg@f1+1
  5416  0002F8  C0DF  F025         	movff	printf@fval+2,___ftneg@f1+2
  5417  0002FC  EC05  F01E         	call	___ftneg	;wreg free
  5418  000300  C023  F0DD         	movff	?___ftneg,printf@fval
  5419  000304  C024  F0DE         	movff	?___ftneg+1,printf@fval+1
  5420  000308  C025  F0DF         	movff	?___ftneg+2,printf@fval+2
  5421                           
  5422                           ;doprnt.c: 833: flag |= 0x03;
  5423  00030C  0E03               	movlw	3
  5424  00030E  0100               	movlb	0	; () banked
  5425  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  5426  000312                     l6678:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 834: }
  5430                           ;doprnt.c: 835: exp = 0;
  5431  000312  0E00               	movlw	0
  5432  000314  0100               	movlb	0	; () banked
  5433  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5434  000318  0E00               	movlw	0
  5435  00031A  6FDB               	movwf	printf@exp& (0+255),b
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;doprnt.c: 836: if( fval!=0) {
  5439  00031C  0100               	movlb	0	; () banked
  5440  00031E  51DD               	movf	printf@fval& (0+255),w,b
  5441  000320  0100               	movlb	0	; () banked
  5442  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5443  000324  0100               	movlb	0	; () banked
  5444  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5445  000328  B4D8               	btfsc	status,2,c
  5446  00032A  D091               	goto	l6706
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5450  00032C  0E82               	movlw	130
  5451  00032E  0100               	movlb	0	; () banked
  5452  000330  6FC7               	movwf	??_printf& (0+255),b
  5453  000332  0EFF               	movlw	255
  5454  000334  0100               	movlb	0	; () banked
  5455  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  5456  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  5457  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  5458  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  5459  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  5460  000348  0E10               	movlw	16
  5461  00034A  D006               	goto	u6760
  5462  00034C                     u6765:
  5463  00034C  0100               	movlb	0	; () banked
  5464  00034E  90D8               	bcf	status,0,c
  5465  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  5466  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  5467  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  5468  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  5469  000358                     u6760:
  5470  000358  2EE8               	decfsz	wreg,f,c
  5471  00035A  D7F8               	goto	u6765
  5472  00035C  0100               	movlb	0	; () banked
  5473  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  5474  000360  0100               	movlb	0	; () banked
  5475  000362  25C7               	addwf	??_printf& (0+255),w,b
  5476  000364  0100               	movlb	0	; () banked
  5477  000366  6FDB               	movwf	printf@exp& (0+255),b
  5478  000368  0E00               	movlw	0
  5479  00036A  0100               	movlb	0	; () banked
  5480  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  5481  00036E  0100               	movlb	0	; () banked
  5482  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;doprnt.c: 838: exp--;
  5486  000372  0100               	movlb	0	; () banked
  5487  000374  07DB               	decf	printf@exp& (0+255),f,b
  5488  000376  A0D8               	btfss	status,0,c
  5489  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;doprnt.c: 839: exp *= 3;
  5493  00037A  C0DB  F031         	movff	printf@exp,___wmul@multiplier
  5494  00037E  C0DC  F032         	movff	printf@exp+1,___wmul@multiplier+1
  5495  000382  0E00               	movlw	0
  5496  000384  6E34               	movwf	___wmul@multiplicand+1,c
  5497  000386  0E03               	movlw	3
  5498  000388  6E33               	movwf	___wmul@multiplicand,c
  5499  00038A  ECF2  F01D         	call	___wmul	;wreg free
  5500  00038E  C031  F0DB         	movff	?___wmul,printf@exp
  5501  000392  C032  F0DC         	movff	?___wmul+1,printf@exp+1
  5502                           
  5503                           ;doprnt.c: 840: exp /= 10;
  5504  000396  C0DB  F029         	movff	printf@exp,___awdiv@dividend
  5505  00039A  C0DC  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  5506  00039E  0E00               	movlw	0
  5507  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  5508  0003A2  0E0A               	movlw	10
  5509  0003A4  6E2B               	movwf	___awdiv@divisor,c
  5510  0003A6  ECD8  F019         	call	___awdiv	;wreg free
  5511  0003AA  C029  F0DB         	movff	?___awdiv,printf@exp
  5512  0003AE  C02A  F0DC         	movff	?___awdiv+1,printf@exp+1
  5513                           
  5514                           ;doprnt.c: 841: if(exp < 0)
  5515  0003B2  0100               	movlb	0	; () banked
  5516  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  5517  0003B6  D004               	goto	l6694
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;doprnt.c: 842: exp--;
  5521  0003B8  0100               	movlb	0	; () banked
  5522  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  5523  0003BC  A0D8               	btfss	status,0,c
  5524  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5525  0003C0                     l6694:
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5529  0003C0  0100               	movlb	0	; () banked
  5530  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  5531  0003C4  0800               	sublw	0
  5532  0003C6  EC79  F009         	call	_scale
  5533  0003CA  C098  F0D7         	movff	?_scale,printf@tmpval
  5534  0003CE  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5535  0003D2  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5536                           
  5537                           ;doprnt.c: 847: tmpval.integ *= fval;
  5538  0003D6  C0D7  F089         	movff	printf@tmpval,___ftmul@f1
  5539  0003DA  C0D8  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  5540  0003DE  C0D9  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  5541  0003E2  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  5542  0003E6  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5543  0003EA  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5544  0003EE  ECD0  F00F         	call	___ftmul	;wreg free
  5545  0003F2  C089  F0D7         	movff	?___ftmul,printf@tmpval
  5546  0003F6  C08A  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  5547  0003FA  C08B  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  5548                           
  5549                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5550  0003FE  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5551  000402  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5552  000406  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5553  00040A  0E00               	movlw	0
  5554  00040C  6E32               	movwf	___ftge@ff2,c
  5555  00040E  0E80               	movlw	128
  5556  000410  6E33               	movwf	___ftge@ff2+1,c
  5557  000412  0E3F               	movlw	63
  5558  000414  6E34               	movwf	___ftge@ff2+2,c
  5559  000416  EC06  F019         	call	___ftge	;wreg free
  5560  00041A  B0D8               	btfsc	status,0,c
  5561  00041C  D005               	goto	l6702
  5562                           
  5563                           ;doprnt.c: 849: exp--;
  5564  00041E  0100               	movlb	0	; () banked
  5565  000420  07DB               	decf	printf@exp& (0+255),f,b
  5566  000422  A0D8               	btfss	status,0,c
  5567  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5568  000426  D013               	goto	l6706
  5569  000428                     l6702:
  5570                           
  5571                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5572  000428  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5573  00042C  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5574  000430  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5575  000434  0E00               	movlw	0
  5576  000436  6E32               	movwf	___ftge@ff2,c
  5577  000438  0E20               	movlw	32
  5578  00043A  6E33               	movwf	___ftge@ff2+1,c
  5579  00043C  0E41               	movlw	65
  5580  00043E  6E34               	movwf	___ftge@ff2+2,c
  5581  000440  EC06  F019         	call	___ftge	;wreg free
  5582  000444  A0D8               	btfss	status,0,c
  5583  000446  D003               	goto	l6706
  5584                           
  5585                           ;doprnt.c: 851: exp++;
  5586  000448  0100               	movlb	0	; () banked
  5587  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  5588  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  5589  00044E                     l6706:
  5590                           
  5591                           ;doprnt.c: 852: }
  5592                           ;doprnt.c: 1112: if(prec <= 12)
  5593  00044E  0100               	movlb	0	; () banked
  5594  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  5595  000452  D008               	goto	l6708
  5596  000454  0100               	movlb	0	; () banked
  5597  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5598  000458  E11D               	bnz	l6710
  5599  00045A  0E0D               	movlw	13
  5600  00045C  0100               	movlb	0	; () banked
  5601  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  5602  000460  B0D8               	btfsc	status,0,c
  5603  000462  D018               	goto	l6710
  5604  000464                     l6708:
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;doprnt.c: 1113: fval += fround(prec);
  5608  000464  C0DD  F0A2         	movff	printf@fval,___ftadd@f1
  5609  000468  C0DE  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  5610  00046C  C0DF  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  5611  000470  0100               	movlb	0	; () banked
  5612  000472  51E8               	movf	printf@prec& (0+255),w,b
  5613  000474  ECA0  F00E         	call	_fround
  5614  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  5615  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  5616  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  5617  000484  EC6C  F00D         	call	___ftadd	;wreg free
  5618  000488  C0A2  F0DD         	movff	?___ftadd,printf@fval
  5619  00048C  C0A3  F0DE         	movff	?___ftadd+1,printf@fval+1
  5620  000490  C0A4  F0DF         	movff	?___ftadd+2,printf@fval+2
  5621  000494                     l6710:
  5622                           
  5623                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5624  000494  0100               	movlb	0	; () banked
  5625  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5626  000498  D008               	goto	l6712
  5627  00049A  0100               	movlb	0	; () banked
  5628  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5629  00049E  E12A               	bnz	l6718
  5630  0004A0  0E0A               	movlw	10
  5631  0004A2  0100               	movlb	0	; () banked
  5632  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  5633  0004A6  B0D8               	btfsc	status,0,c
  5634  0004A8  D025               	goto	l6718
  5635  0004AA                     l6712:
  5636                           
  5637                           ; BSR set to: 0
  5638  0004AA  0100               	movlb	0	; () banked
  5639  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  5640  0004AE  0100               	movlb	0	; () banked
  5641  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5642  0004B2  0100               	movlb	0	; () banked
  5643  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5644  0004B6  B4D8               	btfsc	status,2,c
  5645  0004B8  D05F               	goto	l6732
  5646                           
  5647                           ; BSR set to: 0
  5648  0004BA  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5649  0004BE  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5650  0004C2  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5651  0004C6  EC2B  F011         	call	___fttol	;wreg free
  5652  0004CA  0100               	movlb	0	; () banked
  5653  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  5654  0004CE  0100               	movlb	0	; () banked
  5655  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  5656  0004D2  0100               	movlb	0	; () banked
  5657  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  5658  0004D6  0100               	movlb	0	; () banked
  5659  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  5660  0004DA  A4D8               	btfss	status,2,c
  5661  0004DC  D04D               	goto	l6732
  5662                           
  5663                           ; BSR set to: 0
  5664  0004DE  0100               	movlb	0	; () banked
  5665  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5666  0004E2  D04A               	goto	l6732
  5667  0004E4  0100               	movlb	0	; () banked
  5668  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5669  0004E8  E105               	bnz	l6718
  5670  0004EA  0E02               	movlw	2
  5671  0004EC  0100               	movlb	0	; () banked
  5672  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  5673  0004F0  A0D8               	btfss	status,0,c
  5674  0004F2  D042               	goto	l6732
  5675  0004F4                     l6718:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5679  0004F4  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5680  0004F8  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5681  0004FC  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5682  000500  0E70               	movlw	112
  5683  000502  6E32               	movwf	___ftge@ff2,c
  5684  000504  0E89               	movlw	137
  5685  000506  6E33               	movwf	___ftge@ff2+1,c
  5686  000508  0E40               	movlw	64
  5687  00050A  6E34               	movwf	___ftge@ff2+2,c
  5688  00050C  EC06  F019         	call	___ftge	;wreg free
  5689  000510  B0D8               	btfsc	status,0,c
  5690  000512  D003               	goto	l6722
  5691                           
  5692                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5693  000514  0100               	movlb	0	; () banked
  5694  000516  0EF7               	movlw	247
  5695  000518  D002               	goto	L1
  5696  00051A                     l6722:
  5697                           
  5698                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5699  00051A  0100               	movlb	0	; () banked
  5700  00051C  0EF8               	movlw	248
  5701  00051E                     L1:
  5702  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  5703  000520  0EFF               	movlw	255
  5704  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;doprnt.c: 1124: }
  5708                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5709                           
  5710                           ; BSR set to: 0
  5711  000524  0100               	movlb	0	; () banked
  5712  000526  51DB               	movf	printf@exp& (0+255),w,b
  5713  000528  EC79  F009         	call	_scale
  5714  00052C  C098  F0D7         	movff	?_scale,printf@tmpval
  5715  000530  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5716  000534  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5717                           
  5718                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5719  000538  C0DD  F023         	movff	printf@fval,__tdiv_to_l_@f1
  5720  00053C  C0DE  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5721  000540  C0DF  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5722  000544  C0D7  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  5723  000548  C0D8  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5724  00054C  C0D9  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5725  000550  ECCD  F011         	call	__tdiv_to_l_	;wreg free
  5726  000554  C023  F0E0         	movff	?__tdiv_to_l_,printf@val
  5727  000558  C024  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  5728  00055C  C025  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  5729  000560  C026  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  5730                           
  5731                           ;doprnt.c: 1129: fval = 0.0;
  5732  000564  0E00               	movlw	0
  5733  000566  0100               	movlb	0	; () banked
  5734  000568  6FDD               	movwf	printf@fval& (0+255),b
  5735  00056A  0E00               	movlw	0
  5736  00056C  0100               	movlb	0	; () banked
  5737  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  5738  000570  0E00               	movlw	0
  5739  000572  0100               	movlb	0	; () banked
  5740  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  5741                           
  5742                           ;doprnt.c: 1130: } else {
  5743  000576  D033               	goto	l6736
  5744  000578                     l6732:
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5748  000578  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5749  00057C  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5750  000580  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5751  000584  EC2B  F011         	call	___fttol	;wreg free
  5752  000588  C0AE  F0E0         	movff	?___fttol,printf@val
  5753  00058C  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  5754  000590  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  5755  000594  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  5756                           
  5757                           ;doprnt.c: 1132: fval -= (double)val;
  5758  000598  C0DD  F0AE         	movff	printf@fval,___ftsub@f1
  5759  00059C  C0DE  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  5760  0005A0  C0DF  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  5761  0005A4  C0E0  F02B         	movff	printf@val,___lltoft@c
  5762  0005A8  C0E1  F02C         	movff	printf@val+1,___lltoft@c+1
  5763  0005AC  C0E2  F02D         	movff	printf@val+2,___lltoft@c+2
  5764  0005B0  C0E3  F02E         	movff	printf@val+3,___lltoft@c+3
  5765  0005B4  EC0E  F01C         	call	___lltoft	;wreg free
  5766  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  5767  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  5768  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  5769  0005C4  ECBA  F01C         	call	___ftsub	;wreg free
  5770  0005C8  C0AE  F0DD         	movff	?___ftsub,printf@fval
  5771  0005CC  C0AF  F0DE         	movff	?___ftsub+1,printf@fval+1
  5772  0005D0  C0B0  F0DF         	movff	?___ftsub+2,printf@fval+2
  5773                           
  5774                           ;doprnt.c: 1133: exp = 0;
  5775  0005D4  0E00               	movlw	0
  5776  0005D6  0100               	movlb	0	; () banked
  5777  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5778  0005DA  0E00               	movlw	0
  5779  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  5780  0005DE                     l6736:
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;doprnt.c: 1134: }
  5784                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5785  0005DE  0E01               	movlw	1
  5786  0005E0  0100               	movlb	0	; () banked
  5787  0005E2  6FEA               	movwf	printf@c& (0+255),b
  5788  0005E4                     l6738:
  5789                           
  5790                           ; BSR set to: 0
  5791  0005E4  0E0A               	movlw	10
  5792  0005E6  0100               	movlb	0	; () banked
  5793  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  5794  0005EA  B4D8               	btfsc	status,2,c
  5795  0005EC  D01E               	goto	l6750
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;doprnt.c: 1137: if(val < dpowers[c])
  5799                           
  5800                           ; BSR set to: 0
  5801                           
  5802                           ; BSR set to: 0
  5803  0005EE  0100               	movlb	0	; () banked
  5804  0005F0  51EA               	movf	printf@c& (0+255),w,b
  5805  0005F2  0D04               	mullw	4
  5806  0005F4  0E2B               	movlw	low _dpowers
  5807  0005F6  24F3               	addwf	prodl,w,c
  5808  0005F8  6EF6               	movwf	tblptrl,c
  5809  0005FA  0EFE               	movlw	high _dpowers
  5810  0005FC  20F4               	addwfc	prodh,w,c
  5811  0005FE  6EF7               	movwf	tblptrh,c
  5812  000600                     	if	0	;There are less than 3 active tblptr bytes
  5813  000600                     	endif
  5814  000600  0009               	tblrd		*+
  5815  000602  50F5               	movf	tablat,w,c
  5816  000604  0100               	movlb	0	; () banked
  5817  000606  5DE0               	subwf	printf@val& (0+255),w,b
  5818  000608  0009               	tblrd		*+
  5819  00060A  50F5               	movf	tablat,w,c
  5820  00060C  0100               	movlb	0	; () banked
  5821  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  5822  000610  0009               	tblrd		*+
  5823  000612  50F5               	movf	tablat,w,c
  5824  000614  0100               	movlb	0	; () banked
  5825  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  5826  000618  0009               	tblrd		*+
  5827  00061A  50F5               	movf	tablat,w,c
  5828  00061C  0100               	movlb	0	; () banked
  5829  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  5830  000620  A0D8               	btfss	status,0,c
  5831  000622  D003               	goto	l6750
  5832                           
  5833                           ; BSR set to: 0
  5834                           
  5835                           ; BSR set to: 0
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;doprnt.c: 1138: break;
  5839  000624  0100               	movlb	0	; () banked
  5840  000626  2BEA               	incf	printf@c& (0+255),f,b
  5841  000628  D7DD               	goto	l6738
  5842  00062A                     l6750:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;doprnt.c: 1142: width -= prec + c + exp;
  5846  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  5847  00062E  0100               	movlb	0	; () banked
  5848  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  5849  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  5850  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  5851  000636  0100               	movlb	0	; () banked
  5852  000638  51E8               	movf	printf@prec& (0+255),w,b
  5853  00063A  0100               	movlb	0	; () banked
  5854  00063C  27C7               	addwf	??_printf& (0+255),f,b
  5855  00063E  0100               	movlb	0	; () banked
  5856  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5857  000642  0100               	movlb	0	; () banked
  5858  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5859  000646  0100               	movlb	0	; () banked
  5860  000648  51DB               	movf	printf@exp& (0+255),w,b
  5861  00064A  0100               	movlb	0	; () banked
  5862  00064C  27C7               	addwf	??_printf& (0+255),f,b
  5863  00064E  0100               	movlb	0	; () banked
  5864  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5865  000652  0100               	movlb	0	; () banked
  5866  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5867  000656  0100               	movlb	0	; () banked
  5868  000658  51C7               	movf	??_printf& (0+255),w,b
  5869  00065A  0100               	movlb	0	; () banked
  5870  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  5871  00065E  0100               	movlb	0	; () banked
  5872  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  5873  000662  0100               	movlb	0	; () banked
  5874  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  5875                           
  5876                           ;doprnt.c: 1143: if(
  5877                           ;doprnt.c: 1147: prec)
  5878  000666  0100               	movlb	0	; () banked
  5879  000668  51E8               	movf	printf@prec& (0+255),w,b
  5880  00066A  0100               	movlb	0	; () banked
  5881  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5882  00066E  B4D8               	btfsc	status,2,c
  5883  000670  D004               	goto	l6754
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;doprnt.c: 1148: width--;
  5887  000672  0100               	movlb	0	; () banked
  5888  000674  07E4               	decf	printf@width& (0+255),f,b
  5889  000676  A0D8               	btfss	status,0,c
  5890  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  5891  00067A                     l6754:
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;doprnt.c: 1149: if(flag & 0x03)
  5895  00067A  0E03               	movlw	3
  5896  00067C  0100               	movlb	0	; () banked
  5897  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  5898  000680  0100               	movlb	0	; () banked
  5899  000682  6FC7               	movwf	??_printf& (0+255),b
  5900  000684  0E00               	movlw	0
  5901  000686  0100               	movlb	0	; () banked
  5902  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5903  00068A  0100               	movlb	0	; () banked
  5904  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  5905  00068E  0100               	movlb	0	; () banked
  5906  000690  51C7               	movf	??_printf& (0+255),w,b
  5907  000692  0100               	movlb	0	; () banked
  5908  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5909  000696  B4D8               	btfsc	status,2,c
  5910  000698  D004               	goto	l6758
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;doprnt.c: 1150: width--;
  5914  00069A  0100               	movlb	0	; () banked
  5915  00069C  07E4               	decf	printf@width& (0+255),f,b
  5916  00069E  A0D8               	btfss	status,0,c
  5917  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  5918  0006A2                     l6758:
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;doprnt.c: 1153: if(flag & 0x04) {
  5922  0006A2  0100               	movlb	0	; () banked
  5923  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  5924  0006A6  D02D               	goto	l6774
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;doprnt.c: 1157: if(flag & 0x03)
  5928  0006A8  0E03               	movlw	3
  5929  0006AA  0100               	movlb	0	; () banked
  5930  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  5931  0006AE  0100               	movlb	0	; () banked
  5932  0006B0  6FC7               	movwf	??_printf& (0+255),b
  5933  0006B2  0E00               	movlw	0
  5934  0006B4  0100               	movlb	0	; () banked
  5935  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5936  0006B8  0100               	movlb	0	; () banked
  5937  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  5938  0006BC  0100               	movlb	0	; () banked
  5939  0006BE  51C7               	movf	??_printf& (0+255),w,b
  5940  0006C0  0100               	movlb	0	; () banked
  5941  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5942  0006C4  B4D8               	btfsc	status,2,c
  5943  0006C6  D00B               	goto	l6768
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;doprnt.c: 1159: (putch('-') );
  5947  0006C8  0E2D               	movlw	45
  5948  0006CA  EC17  F01E         	call	_putch
  5949                           
  5950                           ;doprnt.c: 1168: while(width > 0) {
  5951  0006CE  D007               	goto	l6768
  5952  0006D0                     l6764:
  5953                           
  5954                           ;doprnt.c: 1169: (putch('0') );
  5955  0006D0  0E30               	movlw	48
  5956  0006D2  EC17  F01E         	call	_putch
  5957                           
  5958                           ;doprnt.c: 1170: width--;
  5959  0006D6  0100               	movlb	0	; () banked
  5960  0006D8  07E4               	decf	printf@width& (0+255),f,b
  5961  0006DA  A0D8               	btfss	status,0,c
  5962  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  5963  0006DE                     l6768:
  5964  0006DE  0100               	movlb	0	; () banked
  5965  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  5966  0006E2  D073               	goto	l6786
  5967  0006E4  0100               	movlb	0	; () banked
  5968  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  5969  0006E8  E1F3               	bnz	l6764
  5970  0006EA  0100               	movlb	0	; () banked
  5971  0006EC  05E4               	decf	printf@width& (0+255),w,b
  5972  0006EE  A0D8               	btfss	status,0,c
  5973  0006F0  D06C               	goto	l6786
  5974  0006F2  D7EE               	goto	l6764
  5975  0006F4                     l6770:
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;doprnt.c: 1181: (putch(' ') );
  5979  0006F4  0E20               	movlw	32
  5980  0006F6  EC17  F01E         	call	_putch
  5981                           
  5982                           ;doprnt.c: 1182: width--;
  5983  0006FA  0100               	movlb	0	; () banked
  5984  0006FC  07E4               	decf	printf@width& (0+255),f,b
  5985  0006FE  A0D8               	btfss	status,0,c
  5986  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  5987  000702                     l6774:
  5988                           
  5989                           ; BSR set to: 0
  5990  000702  0100               	movlb	0	; () banked
  5991  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  5992  000706  D007               	goto	l6776
  5993  000708  0100               	movlb	0	; () banked
  5994  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  5995  00070C  E1F3               	bnz	l6770
  5996  00070E  0100               	movlb	0	; () banked
  5997  000710  05E4               	decf	printf@width& (0+255),w,b
  5998  000712  B0D8               	btfsc	status,0,c
  5999  000714  D7EF               	goto	l6770
  6000  000716                     l6776:
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;doprnt.c: 1183: }
  6004                           ;doprnt.c: 1188: if(flag & 0x03)
  6005  000716  0E03               	movlw	3
  6006  000718  0100               	movlb	0	; () banked
  6007  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  6008  00071C  0100               	movlb	0	; () banked
  6009  00071E  6FC7               	movwf	??_printf& (0+255),b
  6010  000720  0E00               	movlw	0
  6011  000722  0100               	movlb	0	; () banked
  6012  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6013  000726  0100               	movlb	0	; () banked
  6014  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  6015  00072A  0100               	movlb	0	; () banked
  6016  00072C  51C7               	movf	??_printf& (0+255),w,b
  6017  00072E  0100               	movlb	0	; () banked
  6018  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6019  000732  B4D8               	btfsc	status,2,c
  6020  000734  D04A               	goto	l6786
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;doprnt.c: 1190: (putch('-') );
  6024  000736  0E2D               	movlw	45
  6025  000738  EC17  F01E         	call	_putch
  6026                           
  6027                           ;doprnt.c: 1195: }
  6028                           ;doprnt.c: 1196: while(c--) {
  6029  00073C  D046               	goto	l6786
  6030  00073E                     l6780:
  6031                           
  6032                           ;doprnt.c: 1200: {
  6033                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6034  00073E  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6035  000742  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6036  000746  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6037  00074A  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6038  00074E  0100               	movlb	0	; () banked
  6039  000750  51EA               	movf	printf@c& (0+255),w,b
  6040  000752  0D04               	mullw	4
  6041  000754  0E2B               	movlw	low _dpowers
  6042  000756  24F3               	addwf	prodl,w,c
  6043  000758  6EF6               	movwf	tblptrl,c
  6044  00075A  0EFE               	movlw	high _dpowers
  6045  00075C  20F4               	addwfc	prodh,w,c
  6046  00075E  6EF7               	movwf	tblptrh,c
  6047  000760                     	if	0	;There are less than 3 active tblptr bytes
  6048  000760                     	endif
  6049  000760  0009               	tblrd		*+
  6050  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  6051  000766  0009               	tblrd		*+
  6052  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6053  00076C  0009               	tblrd		*+
  6054  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6055  000772  000A               	tblrd		*-
  6056  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6057  000778  EC1A  F01A         	call	___lldiv	;wreg free
  6058  00077C  C023  F0D7         	movff	?___lldiv,printf@tmpval
  6059  000780  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  6060  000784  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  6061  000788  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  6062                           
  6063                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6064  00078C  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  6065  000790  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6066  000794  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6067  000798  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6068  00079C  0E0A               	movlw	10
  6069  00079E  6E34               	movwf	___llmod@divisor,c
  6070  0007A0  0E00               	movlw	0
  6071  0007A2  6E35               	movwf	___llmod@divisor+1,c
  6072  0007A4  0E00               	movlw	0
  6073  0007A6  6E36               	movwf	___llmod@divisor+2,c
  6074  0007A8  0E00               	movlw	0
  6075  0007AA  6E37               	movwf	___llmod@divisor+3,c
  6076  0007AC  EC48  F01B         	call	___llmod	;wreg free
  6077  0007B0  C030  F0D7         	movff	?___llmod,printf@tmpval
  6078  0007B4  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  6079  0007B8  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  6080  0007BC  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  6081                           
  6082                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6083  0007C0  0100               	movlb	0	; () banked
  6084  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  6085  0007C4  0F30               	addlw	48
  6086  0007C6  EC17  F01E         	call	_putch
  6087  0007CA                     l6786:
  6088  0007CA  0100               	movlb	0	; () banked
  6089  0007CC  07EA               	decf	printf@c& (0+255),f,b
  6090  0007CE  0100               	movlb	0	; () banked
  6091  0007D0  29EA               	incf	printf@c& (0+255),w,b
  6092  0007D2  B4D8               	btfsc	status,2,c
  6093  0007D4  D008               	goto	l6792
  6094  0007D6  D7B3               	goto	l6780
  6095  0007D8                     l6788:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;doprnt.c: 1208: (putch('0') );
  6099  0007D8  0E30               	movlw	48
  6100  0007DA  EC17  F01E         	call	_putch
  6101                           
  6102                           ;doprnt.c: 1209: exp--;
  6103  0007DE  0100               	movlb	0	; () banked
  6104  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  6105  0007E2  A0D8               	btfss	status,0,c
  6106  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6107  0007E6                     l6792:
  6108                           
  6109                           ; BSR set to: 0
  6110  0007E6  0100               	movlb	0	; () banked
  6111  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  6112  0007EA  D007               	goto	l6794
  6113  0007EC  0100               	movlb	0	; () banked
  6114  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  6115  0007F0  E1F3               	bnz	l6788
  6116  0007F2  0100               	movlb	0	; () banked
  6117  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  6118  0007F6  B0D8               	btfsc	status,0,c
  6119  0007F8  D7EF               	goto	l6788
  6120  0007FA                     l6794:
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;doprnt.c: 1210: }
  6124                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6125  0007FA  0100               	movlb	0	; () banked
  6126  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  6127  0007FE  D00C               	goto	l811
  6128  000800  0100               	movlb	0	; () banked
  6129  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6130  000804  E105               	bnz	u6980
  6131  000806  0E09               	movlw	9
  6132  000808  0100               	movlb	0	; () banked
  6133  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  6134  00080C  A0D8               	btfss	status,0,c
  6135  00080E  D004               	goto	l811
  6136  000810                     u6980:
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6140  000810  0E08               	movlw	8
  6141  000812  0100               	movlb	0	; () banked
  6142  000814  6FEA               	movwf	printf@c& (0+255),b
  6143  000816  D002               	goto	l6798
  6144  000818                     l811:
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;doprnt.c: 1213: else
  6148                           ;doprnt.c: 1214: c = prec;
  6149  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  6150  00081C                     l6798:
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;doprnt.c: 1215: prec -= c;
  6154  00081C  0100               	movlb	0	; () banked
  6155  00081E  51EA               	movf	printf@c& (0+255),w,b
  6156  000820  0100               	movlb	0	; () banked
  6157  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  6158  000824  0E00               	movlw	0
  6159  000826  0100               	movlb	0	; () banked
  6160  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  6161  00082A  0EFF               	movlw	255
  6162  00082C  0100               	movlb	0	; () banked
  6163  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;doprnt.c: 1219: if(c)
  6167  000830  0100               	movlb	0	; () banked
  6168  000832  51EA               	movf	printf@c& (0+255),w,b
  6169  000834  0100               	movlb	0	; () banked
  6170  000836  B4D8               	btfsc	status,2,c
  6171  000838  D003               	goto	l6804
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;doprnt.c: 1221: (putch('.') );
  6175  00083A  0E2E               	movlw	46
  6176  00083C  EC17  F01E         	call	_putch
  6177  000840                     l6804:
  6178                           
  6179                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6180  000840  0100               	movlb	0	; () banked
  6181  000842  51EA               	movf	printf@c& (0+255),w,b
  6182  000844  EC79  F009         	call	_scale
  6183  000848  C098  F0CD         	movff	?_scale,_printf$1399
  6184  00084C  C099  F0CE         	movff	?_scale+1,_printf$1399+1
  6185  000850  C09A  F0CF         	movff	?_scale+2,_printf$1399+2
  6186                           
  6187                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6188  000854  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  6189  000858  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  6190  00085C  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  6191  000860  C0CD  F089         	movff	_printf$1399,___ftmul@f1
  6192  000864  C0CE  F08A         	movff	_printf$1399+1,___ftmul@f1+1
  6193  000868  C0CF  F08B         	movff	_printf$1399+2,___ftmul@f1+2
  6194  00086C  ECD0  F00F         	call	___ftmul	;wreg free
  6195  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  6196  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  6197  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  6198  00087C  EC2B  F011         	call	___fttol	;wreg free
  6199  000880  C0AE  F0E0         	movff	?___fttol,printf@val
  6200  000884  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  6201  000888  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  6202  00088C  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  6203                           
  6204                           ;doprnt.c: 1228: while(c--) {
  6205  000890  D06D               	goto	l6814
  6206  000892                     l6808:
  6207                           
  6208                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6209  000892  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6210  000896  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6211  00089A  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6212  00089E  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6213  0008A2  0100               	movlb	0	; () banked
  6214  0008A4  51EA               	movf	printf@c& (0+255),w,b
  6215  0008A6  0D04               	mullw	4
  6216  0008A8  0E2B               	movlw	low _dpowers
  6217  0008AA  24F3               	addwf	prodl,w,c
  6218  0008AC  6EF6               	movwf	tblptrl,c
  6219  0008AE  0EFE               	movlw	high _dpowers
  6220  0008B0  20F4               	addwfc	prodh,w,c
  6221  0008B2  6EF7               	movwf	tblptrh,c
  6222  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  6223  0008B4                     	endif
  6224  0008B4  0009               	tblrd		*+
  6225  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  6226  0008BA  0009               	tblrd		*+
  6227  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6228  0008C0  0009               	tblrd		*+
  6229  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6230  0008C6  000A               	tblrd		*-
  6231  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6232  0008CC  EC1A  F01A         	call	___lldiv	;wreg free
  6233  0008D0  C023  F0D7         	movff	?___lldiv,printf@tmpval
  6234  0008D4  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  6235  0008D8  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  6236  0008DC  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  6237                           
  6238                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6239  0008E0  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  6240  0008E4  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6241  0008E8  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6242  0008EC  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6243  0008F0  0E0A               	movlw	10
  6244  0008F2  6E34               	movwf	___llmod@divisor,c
  6245  0008F4  0E00               	movlw	0
  6246  0008F6  6E35               	movwf	___llmod@divisor+1,c
  6247  0008F8  0E00               	movlw	0
  6248  0008FA  6E36               	movwf	___llmod@divisor+2,c
  6249  0008FC  0E00               	movlw	0
  6250  0008FE  6E37               	movwf	___llmod@divisor+3,c
  6251  000900  EC48  F01B         	call	___llmod	;wreg free
  6252  000904  C030  F0D7         	movff	?___llmod,printf@tmpval
  6253  000908  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  6254  00090C  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  6255  000910  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  6256                           
  6257                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6258  000914  0100               	movlb	0	; () banked
  6259  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  6260  000918  0F30               	addlw	48
  6261  00091A  EC17  F01E         	call	_putch
  6262                           
  6263                           ;doprnt.c: 1232: val %= dpowers[c];
  6264  00091E  C0E0  F030         	movff	printf@val,___llmod@dividend
  6265  000922  C0E1  F031         	movff	printf@val+1,___llmod@dividend+1
  6266  000926  C0E2  F032         	movff	printf@val+2,___llmod@dividend+2
  6267  00092A  C0E3  F033         	movff	printf@val+3,___llmod@dividend+3
  6268  00092E  0100               	movlb	0	; () banked
  6269  000930  51EA               	movf	printf@c& (0+255),w,b
  6270  000932  0D04               	mullw	4
  6271  000934  0E2B               	movlw	low _dpowers
  6272  000936  24F3               	addwf	prodl,w,c
  6273  000938  6EF6               	movwf	tblptrl,c
  6274  00093A  0EFE               	movlw	high _dpowers
  6275  00093C  20F4               	addwfc	prodh,w,c
  6276  00093E  6EF7               	movwf	tblptrh,c
  6277  000940                     	if	0	;There are less than 3 active tblptr bytes
  6278  000940                     	endif
  6279  000940  0009               	tblrd		*+
  6280  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  6281  000946  0009               	tblrd		*+
  6282  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  6283  00094C  0009               	tblrd		*+
  6284  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  6285  000952  000A               	tblrd		*-
  6286  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  6287  000958  EC48  F01B         	call	___llmod	;wreg free
  6288  00095C  C030  F0E0         	movff	?___llmod,printf@val
  6289  000960  C031  F0E1         	movff	?___llmod+1,printf@val+1
  6290  000964  C032  F0E2         	movff	?___llmod+2,printf@val+2
  6291  000968  C033  F0E3         	movff	?___llmod+3,printf@val+3
  6292  00096C                     l6814:
  6293  00096C  0100               	movlb	0	; () banked
  6294  00096E  07EA               	decf	printf@c& (0+255),f,b
  6295  000970  0100               	movlb	0	; () banked
  6296  000972  29EA               	incf	printf@c& (0+255),w,b
  6297  000974  B4D8               	btfsc	status,2,c
  6298  000976  D008               	goto	l6820
  6299  000978  D78C               	goto	l6808
  6300  00097A                     l6816:
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;doprnt.c: 1236: (putch('0') );
  6304  00097A  0E30               	movlw	48
  6305  00097C  EC17  F01E         	call	_putch
  6306                           
  6307                           ;doprnt.c: 1237: prec--;
  6308  000980  0100               	movlb	0	; () banked
  6309  000982  07E8               	decf	printf@prec& (0+255),f,b
  6310  000984  A0D8               	btfss	status,0,c
  6311  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6312  000988                     l6820:
  6313                           
  6314                           ; BSR set to: 0
  6315  000988  0100               	movlb	0	; () banked
  6316  00098A  51E8               	movf	printf@prec& (0+255),w,b
  6317  00098C  0100               	movlb	0	; () banked
  6318  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6319  000990  B4D8               	btfsc	status,2,c
  6320  000992  D22B               	goto	l6948
  6321  000994  D7F2               	goto	l6816
  6322  000996                     l771:
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;doprnt.c: 1246: }
  6326                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6327  000996  0100               	movlb	0	; () banked
  6328  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  6329  00099A  D034               	goto	l820
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;doprnt.c: 1253: {
  6333                           ;doprnt.c: 1255: if(flag & 0x10)
  6334  00099C  0100               	movlb	0	; () banked
  6335  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  6336  0009A0  D00E               	goto	l6828
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  6340  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  6341  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6342  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  6343  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  6344  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  6345  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  6346                           
  6347                           ; BSR set to: 0
  6348  0009BA  0E04               	movlw	4
  6349  0009BC  D00F               	goto	L2
  6350  0009BE                     l6828:
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;doprnt.c: 1257: else
  6354                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6355  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  6356  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6357  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  6358  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  6359  0009CE  0100               	movlb	0	; () banked
  6360  0009D0  0E00               	movlw	0
  6361  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  6362  0009D4  0EFF               	movlw	-1
  6363  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  6364  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  6365                           
  6366                           ; BSR set to: 0
  6367  0009DA  0E02               	movlw	2
  6368  0009DC                     L2:
  6369  0009DC  0100               	movlb	0	; () banked
  6370  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  6371  0009E0  0E00               	movlw	0
  6372  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;doprnt.c: 1261: if((long)val < 0) {
  6376                           
  6377                           ; BSR set to: 0
  6378  0009E4  0100               	movlb	0	; () banked
  6379  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  6380  0009E8  D032               	goto	l6846
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;doprnt.c: 1262: flag |= 0x03;
  6384  0009EA  0E03               	movlw	3
  6385  0009EC  0100               	movlb	0	; () banked
  6386  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;doprnt.c: 1263: val = -val;
  6390  0009F0  0100               	movlb	0	; () banked
  6391  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  6392  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  6393  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  6394  0009F8  6DE0               	negf	printf@val& (0+255),b
  6395  0009FA  0E00               	movlw	0
  6396  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  6397  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  6398  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;doprnt.c: 1264: }
  6402                           ;doprnt.c: 1266: }
  6403  000A02  D025               	goto	l6846
  6404  000A04                     l820:
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;doprnt.c: 1268: else
  6408                           ;doprnt.c: 1273: {
  6409                           ;doprnt.c: 1281: if(flag & 0x10)
  6410  000A04  0100               	movlb	0	; () banked
  6411  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  6412  000A08  D00E               	goto	l6842
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6416  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  6417  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6418  000A12  CFDE F0E0          	movff	postinc2,printf@val
  6419  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  6420  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  6421  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  6422                           
  6423                           ; BSR set to: 0
  6424  000A22  0E04               	movlw	4
  6425  000A24  D010               	goto	L3
  6426  000A26                     l6842:
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;doprnt.c: 1283: else
  6430                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6431  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  6432  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6433  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  6434  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  6435  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  6436  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  6437  000A3E  0100               	movlb	0	; () banked
  6438  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  6439  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  6440                           
  6441                           ; BSR set to: 0
  6442  000A44  0E02               	movlw	2
  6443  000A46                     L3:
  6444  000A46  0100               	movlb	0	; () banked
  6445  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  6446  000A4A  0E00               	movlw	0
  6447  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6448  000A4E                     l6846:
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;doprnt.c: 1287: }
  6452                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6453  000A4E  0100               	movlb	0	; () banked
  6454  000A50  51E8               	movf	printf@prec& (0+255),w,b
  6455  000A52  0100               	movlb	0	; () banked
  6456  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6457  000A56  A4D8               	btfss	status,2,c
  6458  000A58  D05A               	goto	l6882
  6459                           
  6460                           ; BSR set to: 0
  6461  000A5A  0100               	movlb	0	; () banked
  6462  000A5C  51E0               	movf	printf@val& (0+255),w,b
  6463  000A5E  0100               	movlb	0	; () banked
  6464  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  6465  000A62  0100               	movlb	0	; () banked
  6466  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  6467  000A66  0100               	movlb	0	; () banked
  6468  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  6469  000A6A  A4D8               	btfss	status,2,c
  6470  000A6C  D050               	goto	l6882
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;doprnt.c: 1291: prec++;
  6474  000A6E  0100               	movlb	0	; () banked
  6475  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  6476  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6480  000A74  D04C               	goto	l6882
  6481  000A76                     l6852:
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6485  000A76  0E01               	movlw	1
  6486  000A78  0100               	movlb	0	; () banked
  6487  000A7A  6FEA               	movwf	printf@c& (0+255),b
  6488  000A7C                     l6854:
  6489                           
  6490                           ; BSR set to: 0
  6491  000A7C  0E0A               	movlw	10
  6492  000A7E  0100               	movlb	0	; () banked
  6493  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  6494  000A82  B4D8               	btfsc	status,2,c
  6495  000A84  D04D               	goto	l6884
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;doprnt.c: 1306: if(val < dpowers[c])
  6499                           
  6500                           ; BSR set to: 0
  6501                           
  6502                           ; BSR set to: 0
  6503  000A86  0100               	movlb	0	; () banked
  6504  000A88  51EA               	movf	printf@c& (0+255),w,b
  6505  000A8A  0D04               	mullw	4
  6506  000A8C  0E2B               	movlw	low _dpowers
  6507  000A8E  24F3               	addwf	prodl,w,c
  6508  000A90  6EF6               	movwf	tblptrl,c
  6509  000A92  0EFE               	movlw	high _dpowers
  6510  000A94  20F4               	addwfc	prodh,w,c
  6511  000A96  6EF7               	movwf	tblptrh,c
  6512  000A98                     	if	0	;There are less than 3 active tblptr bytes
  6513  000A98                     	endif
  6514  000A98  0009               	tblrd		*+
  6515  000A9A  50F5               	movf	tablat,w,c
  6516  000A9C  0100               	movlb	0	; () banked
  6517  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  6518  000AA0  0009               	tblrd		*+
  6519  000AA2  50F5               	movf	tablat,w,c
  6520  000AA4  0100               	movlb	0	; () banked
  6521  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6522  000AA8  0009               	tblrd		*+
  6523  000AAA  50F5               	movf	tablat,w,c
  6524  000AAC  0100               	movlb	0	; () banked
  6525  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6526  000AB0  0009               	tblrd		*+
  6527  000AB2  50F5               	movf	tablat,w,c
  6528  000AB4  0100               	movlb	0	; () banked
  6529  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6530  000AB8  A0D8               	btfss	status,0,c
  6531  000ABA  D032               	goto	l6884
  6532                           
  6533                           ; BSR set to: 0
  6534                           
  6535                           ; BSR set to: 0
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;doprnt.c: 1307: break;
  6539  000ABC  0100               	movlb	0	; () banked
  6540  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  6541  000AC0  D7DD               	goto	l6854
  6542  000AC2                     l6866:
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6546  000AC2  0E01               	movlw	1
  6547  000AC4  0100               	movlb	0	; () banked
  6548  000AC6  6FEA               	movwf	printf@c& (0+255),b
  6549  000AC8                     l6868:
  6550                           
  6551                           ; BSR set to: 0
  6552  000AC8  0E08               	movlw	8
  6553  000ACA  0100               	movlb	0	; () banked
  6554  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  6555  000ACE  B4D8               	btfsc	status,2,c
  6556  000AD0  D027               	goto	l6884
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6560                           
  6561                           ; BSR set to: 0
  6562                           
  6563                           ; BSR set to: 0
  6564  000AD2  0100               	movlb	0	; () banked
  6565  000AD4  51EA               	movf	printf@c& (0+255),w,b
  6566  000AD6  0D04               	mullw	4
  6567  000AD8  0EA1               	movlw	low _hexpowers
  6568  000ADA  24F3               	addwf	prodl,w,c
  6569  000ADC  6EF6               	movwf	tblptrl,c
  6570  000ADE  0EFE               	movlw	high _hexpowers
  6571  000AE0  20F4               	addwfc	prodh,w,c
  6572  000AE2  6EF7               	movwf	tblptrh,c
  6573  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  6574  000AE4                     	endif
  6575  000AE4  0009               	tblrd		*+
  6576  000AE6  50F5               	movf	tablat,w,c
  6577  000AE8  0100               	movlb	0	; () banked
  6578  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  6579  000AEC  0009               	tblrd		*+
  6580  000AEE  50F5               	movf	tablat,w,c
  6581  000AF0  0100               	movlb	0	; () banked
  6582  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6583  000AF4  0009               	tblrd		*+
  6584  000AF6  50F5               	movf	tablat,w,c
  6585  000AF8  0100               	movlb	0	; () banked
  6586  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6587  000AFC  0009               	tblrd		*+
  6588  000AFE  50F5               	movf	tablat,w,c
  6589  000B00  0100               	movlb	0	; () banked
  6590  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6591  000B04  A0D8               	btfss	status,0,c
  6592  000B06  D00C               	goto	l6884
  6593                           
  6594                           ; BSR set to: 0
  6595                           
  6596                           ; BSR set to: 0
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;doprnt.c: 1318: break;
  6600  000B08  0100               	movlb	0	; () banked
  6601  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  6602  000B0C  D7DD               	goto	l6868
  6603  000B0E                     l6882:
  6604                           
  6605                           ; BSR set to: 0
  6606  000B0E  0100               	movlb	0	; () banked
  6607  000B10  51E6               	movf	printf@flag& (0+255),w,b
  6608  000B12  0B80               	andlw	128
  6609                           
  6610                           ; Switch size 1, requested type "space"
  6611                           ; Number of cases is 2, Range of values is 0 to 128
  6612                           ; switch strategies available:
  6613                           ; Name         Instructions Cycles
  6614                           ; simple_byte            7     4 (average)
  6615                           ;	Chosen strategy is simple_byte
  6616  000B14  0A00               	xorlw	0	; case 0
  6617  000B16  B4D8               	btfsc	status,2,c
  6618  000B18  D7AE               	goto	l6852
  6619  000B1A  0A80               	xorlw	128	; case 128
  6620  000B1C  B4D8               	btfsc	status,2,c
  6621  000B1E  D7D1               	goto	l6866
  6622  000B20                     l6884:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;doprnt.c: 1339: if(c < prec)
  6626  000B20  0E80               	movlw	128
  6627  000B22  0100               	movlb	0	; () banked
  6628  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  6629  000B26  0E7F               	movlw	127
  6630  000B28  0100               	movlb	0	; () banked
  6631  000B2A  6FC7               	movwf	??_printf& (0+255),b
  6632  000B2C  0100               	movlb	0	; () banked
  6633  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  6634  000B30  0100               	movlb	0	; () banked
  6635  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  6636  000B34  0100               	movlb	0	; () banked
  6637  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6638  000B38  0A80               	xorlw	128
  6639  000B3A  0100               	movlb	0	; () banked
  6640  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  6641  000B3E  B0D8               	btfsc	status,0,c
  6642  000B40  D003               	goto	l6888
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;doprnt.c: 1340: c = prec;
  6646  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  6647  000B46  D018               	goto	l6892
  6648  000B48                     l6888:
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;doprnt.c: 1341: else if(prec < c)
  6652  000B48  0100               	movlb	0	; () banked
  6653  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6654  000B4C  0A80               	xorlw	128
  6655  000B4E  0100               	movlb	0	; () banked
  6656  000B50  6FC7               	movwf	??_printf& (0+255),b
  6657  000B52  0100               	movlb	0	; () banked
  6658  000B54  51EA               	movf	printf@c& (0+255),w,b
  6659  000B56  0100               	movlb	0	; () banked
  6660  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  6661  000B5A  0E80               	movlw	128
  6662  000B5C  0100               	movlb	0	; () banked
  6663  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  6664  000B60  0E7F               	movlw	127
  6665  000B62  0100               	movlb	0	; () banked
  6666  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  6667  000B66  B0D8               	btfsc	status,0,c
  6668  000B68  D007               	goto	l6892
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;doprnt.c: 1342: prec = c;
  6672  000B6A  0100               	movlb	0	; () banked
  6673  000B6C  51EA               	movf	printf@c& (0+255),w,b
  6674  000B6E  0100               	movlb	0	; () banked
  6675  000B70  6FE8               	movwf	printf@prec& (0+255),b
  6676  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  6677  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  6678  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6679  000B78                     l6892:
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6683  000B78  0100               	movlb	0	; () banked
  6684  000B7A  51E4               	movf	printf@width& (0+255),w,b
  6685  000B7C  0100               	movlb	0	; () banked
  6686  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6687  000B80  B4D8               	btfsc	status,2,c
  6688  000B82  D014               	goto	l6898
  6689                           
  6690                           ; BSR set to: 0
  6691  000B84  0E03               	movlw	3
  6692  000B86  0100               	movlb	0	; () banked
  6693  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  6694  000B8A  0100               	movlb	0	; () banked
  6695  000B8C  6FC7               	movwf	??_printf& (0+255),b
  6696  000B8E  0E00               	movlw	0
  6697  000B90  0100               	movlb	0	; () banked
  6698  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6699  000B94  0100               	movlb	0	; () banked
  6700  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  6701  000B98  0100               	movlb	0	; () banked
  6702  000B9A  51C7               	movf	??_printf& (0+255),w,b
  6703  000B9C  0100               	movlb	0	; () banked
  6704  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6705  000BA0  B4D8               	btfsc	status,2,c
  6706  000BA2  D004               	goto	l6898
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;doprnt.c: 1346: width--;
  6710  000BA4  0100               	movlb	0	; () banked
  6711  000BA6  07E4               	decf	printf@width& (0+255),f,b
  6712  000BA8  A0D8               	btfss	status,0,c
  6713  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  6714  000BAC                     l6898:
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6718  000BAC  0100               	movlb	0	; () banked
  6719  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  6720  000BB0  D01E               	goto	l6906
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;doprnt.c: 1349: if(width > prec)
  6724  000BB2  0100               	movlb	0	; () banked
  6725  000BB4  51E4               	movf	printf@width& (0+255),w,b
  6726  000BB6  0100               	movlb	0	; () banked
  6727  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  6728  000BBA  0100               	movlb	0	; () banked
  6729  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6730  000BBE  0A80               	xorlw	128
  6731  000BC0  0100               	movlb	0	; () banked
  6732  000BC2  6FC7               	movwf	??_printf& (0+255),b
  6733  000BC4  0100               	movlb	0	; () banked
  6734  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  6735  000BC8  0A80               	xorlw	128
  6736  000BCA  0100               	movlb	0	; () banked
  6737  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  6738  000BCE  B0D8               	btfsc	status,0,c
  6739  000BD0  D009               	goto	l6904
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;doprnt.c: 1350: width -= prec;
  6743  000BD2  0100               	movlb	0	; () banked
  6744  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  6745  000BD6  0100               	movlb	0	; () banked
  6746  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  6747  000BDA  0100               	movlb	0	; () banked
  6748  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6749  000BDE  0100               	movlb	0	; () banked
  6750  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6751  000BE2  D005               	goto	l6906
  6752  000BE4                     l6904:
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;doprnt.c: 1351: else
  6756                           ;doprnt.c: 1352: width = 0;
  6757  000BE4  0E00               	movlw	0
  6758  000BE6  0100               	movlb	0	; () banked
  6759  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  6760  000BEA  0E00               	movlw	0
  6761  000BEC  6FE4               	movwf	printf@width& (0+255),b
  6762  000BEE                     l6906:
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;doprnt.c: 1353: }
  6766                           ;doprnt.c: 1381: if(width > c)
  6767  000BEE  0E80               	movlw	128
  6768  000BF0  0100               	movlb	0	; () banked
  6769  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  6770  000BF4  0E7F               	movlw	127
  6771  000BF6  0100               	movlb	0	; () banked
  6772  000BF8  6FC7               	movwf	??_printf& (0+255),b
  6773  000BFA  0100               	movlb	0	; () banked
  6774  000BFC  51E4               	movf	printf@width& (0+255),w,b
  6775  000BFE  0100               	movlb	0	; () banked
  6776  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  6777  000C02  0100               	movlb	0	; () banked
  6778  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  6779  000C06  0A80               	xorlw	128
  6780  000C08  0100               	movlb	0	; () banked
  6781  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  6782  000C0C  B0D8               	btfsc	status,0,c
  6783  000C0E  D00B               	goto	l6910
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;doprnt.c: 1382: width -= c;
  6787  000C10  0100               	movlb	0	; () banked
  6788  000C12  51EA               	movf	printf@c& (0+255),w,b
  6789  000C14  0100               	movlb	0	; () banked
  6790  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  6791  000C18  0E00               	movlw	0
  6792  000C1A  0100               	movlb	0	; () banked
  6793  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  6794  000C1E  0EFF               	movlw	255
  6795  000C20  0100               	movlb	0	; () banked
  6796  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6797  000C24  D005               	goto	l6912
  6798  000C26                     l6910:
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;doprnt.c: 1383: else
  6802                           ;doprnt.c: 1384: width = 0;
  6803  000C26  0E00               	movlw	0
  6804  000C28  0100               	movlb	0	; () banked
  6805  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  6806  000C2C  0E00               	movlw	0
  6807  000C2E  6FE4               	movwf	printf@width& (0+255),b
  6808  000C30                     l6912:
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;doprnt.c: 1387: if(flag & 0x04) {
  6812  000C30  0100               	movlb	0	; () banked
  6813  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  6814  000C34  D021               	goto	l6924
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;doprnt.c: 1392: if(flag & 0x03)
  6818  000C36  0E03               	movlw	3
  6819  000C38  0100               	movlb	0	; () banked
  6820  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  6821  000C3C  0100               	movlb	0	; () banked
  6822  000C3E  6FC7               	movwf	??_printf& (0+255),b
  6823  000C40  0E00               	movlw	0
  6824  000C42  0100               	movlb	0	; () banked
  6825  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6826  000C46  0100               	movlb	0	; () banked
  6827  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  6828  000C4A  0100               	movlb	0	; () banked
  6829  000C4C  51C7               	movf	??_printf& (0+255),w,b
  6830  000C4E  0100               	movlb	0	; () banked
  6831  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6832  000C52  B4D8               	btfsc	status,2,c
  6833  000C54  D003               	goto	l6918
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;doprnt.c: 1393: (putch('-') );
  6837  000C56  0E2D               	movlw	45
  6838  000C58  EC17  F01E         	call	_putch
  6839  000C5C                     l6918:
  6840                           
  6841                           ;doprnt.c: 1415: if(width)
  6842  000C5C  0100               	movlb	0	; () banked
  6843  000C5E  51E4               	movf	printf@width& (0+255),w,b
  6844  000C60  0100               	movlb	0	; () banked
  6845  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6846  000C64  B4D8               	btfsc	status,2,c
  6847  000C66  D0B6               	goto	l6946
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;doprnt.c: 1417: (putch('0') );
  6851                           
  6852                           ; BSR set to: 0
  6853                           
  6854                           ;doprnt.c: 1416: do
  6855  000C68  0E30               	movlw	48
  6856  000C6A  EC17  F01E         	call	_putch
  6857                           
  6858                           ;doprnt.c: 1418: while(--width);
  6859  000C6E  0100               	movlb	0	; () banked
  6860  000C70  07E4               	decf	printf@width& (0+255),f,b
  6861  000C72  A0D8               	btfss	status,0,c
  6862  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  6863  000C76  D7F2               	goto	l6918
  6864  000C78                     l6924:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;doprnt.c: 1422: {
  6868                           ;doprnt.c: 1424: if(width
  6869                           ;doprnt.c: 1428: )
  6870  000C78  0100               	movlb	0	; () banked
  6871  000C7A  51E4               	movf	printf@width& (0+255),w,b
  6872  000C7C  0100               	movlb	0	; () banked
  6873  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6874  000C80  B4D8               	btfsc	status,2,c
  6875  000C82  D00D               	goto	l6930
  6876  000C84                     l6926:
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;doprnt.c: 1430: (putch(' ') );
  6880  000C84  0E20               	movlw	32
  6881  000C86  EC17  F01E         	call	_putch
  6882                           
  6883                           ;doprnt.c: 1431: while(--width);
  6884  000C8A  0100               	movlb	0	; () banked
  6885  000C8C  07E4               	decf	printf@width& (0+255),f,b
  6886  000C8E  A0D8               	btfss	status,0,c
  6887  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  6888  000C92  0100               	movlb	0	; () banked
  6889  000C94  51E4               	movf	printf@width& (0+255),w,b
  6890  000C96  0100               	movlb	0	; () banked
  6891  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6892  000C9A  A4D8               	btfss	status,2,c
  6893  000C9C  D7F3               	goto	l6926
  6894  000C9E                     l6930:
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;doprnt.c: 1438: if(flag & 0x03)
  6898  000C9E  0E03               	movlw	3
  6899  000CA0  0100               	movlb	0	; () banked
  6900  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  6901  000CA4  0100               	movlb	0	; () banked
  6902  000CA6  6FC7               	movwf	??_printf& (0+255),b
  6903  000CA8  0E00               	movlw	0
  6904  000CAA  0100               	movlb	0	; () banked
  6905  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6906  000CAE  0100               	movlb	0	; () banked
  6907  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  6908  000CB2  0100               	movlb	0	; () banked
  6909  000CB4  51C7               	movf	??_printf& (0+255),w,b
  6910  000CB6  0100               	movlb	0	; () banked
  6911  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6912  000CBA  B4D8               	btfsc	status,2,c
  6913  000CBC  D08B               	goto	l6946
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;doprnt.c: 1439: (putch('-') );
  6917  000CBE  0E2D               	movlw	45
  6918  000CC0  EC17  F01E         	call	_putch
  6919                           
  6920                           ;doprnt.c: 1469: }
  6921                           ;doprnt.c: 1474: while(prec--) {
  6922  000CC4  D087               	goto	l6946
  6923  000CC6                     l6934:
  6924                           
  6925                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6926  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  6927  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  6928  000CCE  0100               	movlb	0	; () banked
  6929  000CD0  90D8               	bcf	status,0,c
  6930  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  6931  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6932  000CD6  0100               	movlb	0	; () banked
  6933  000CD8  90D8               	bcf	status,0,c
  6934  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  6935  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6936  000CDE  0E2B               	movlw	low _dpowers
  6937  000CE0  0100               	movlb	0	; () banked
  6938  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  6939  000CE4  6EF6               	movwf	tblptrl,c
  6940  000CE6  0EFE               	movlw	high _dpowers
  6941  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6942  000CEA  6EF7               	movwf	tblptrh,c
  6943  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  6944  000CEC                     	endif
  6945  000CEC  0009               	tblrd		*+
  6946  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  6947  000CF2  0009               	tblrd		*+
  6948  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6949  000CF8  0009               	tblrd		*+
  6950  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6951  000CFE  000A               	tblrd		*-
  6952  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6953  000D04  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6954  000D08  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6955  000D0C  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6956  000D10  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6957  000D14  EC1A  F01A         	call	___lldiv	;wreg free
  6958  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  6959  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  6960  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  6961  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  6962  000D28  0E0A               	movlw	10
  6963  000D2A  6E34               	movwf	___llmod@divisor,c
  6964  000D2C  0E00               	movlw	0
  6965  000D2E  6E35               	movwf	___llmod@divisor+1,c
  6966  000D30  0E00               	movlw	0
  6967  000D32  6E36               	movwf	___llmod@divisor+2,c
  6968  000D34  0E00               	movlw	0
  6969  000D36  6E37               	movwf	___llmod@divisor+3,c
  6970  000D38  EC48  F01B         	call	___llmod	;wreg free
  6971  000D3C  5030               	movf	?___llmod,w,c
  6972  000D3E  0F30               	addlw	48
  6973  000D40  0100               	movlb	0	; () banked
  6974  000D42  6FEA               	movwf	printf@c& (0+255),b
  6975                           
  6976                           ;doprnt.c: 1491: break;
  6977  000D44  D043               	goto	l6944
  6978  000D46                     l6936:
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;doprnt.c: 1499: {
  6982                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6983  000D46  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6984  000D4A  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6985  000D4E  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6986  000D52  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6987  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  6988  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  6989  000D5E  0100               	movlb	0	; () banked
  6990  000D60  90D8               	bcf	status,0,c
  6991  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  6992  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6993  000D66  0100               	movlb	0	; () banked
  6994  000D68  90D8               	bcf	status,0,c
  6995  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  6996  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6997  000D6E  0EA1               	movlw	low _hexpowers
  6998  000D70  0100               	movlb	0	; () banked
  6999  000D72  25C7               	addwf	??_printf& (0+255),w,b
  7000  000D74  6EF6               	movwf	tblptrl,c
  7001  000D76  0EFE               	movlw	high _hexpowers
  7002  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  7003  000D7A  6EF7               	movwf	tblptrh,c
  7004  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  7005  000D7C                     	endif
  7006  000D7C  0009               	tblrd		*+
  7007  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  7008  000D82  0009               	tblrd		*+
  7009  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7010  000D88  0009               	tblrd		*+
  7011  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7012  000D8E  000A               	tblrd		*-
  7013  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7014  000D94  EC1A  F01A         	call	___lldiv	;wreg free
  7015  000D98  5023               	movf	?___lldiv,w,c
  7016  000D9A  0B0F               	andlw	15
  7017  000D9C  0100               	movlb	0	; () banked
  7018  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7022  000DA0  0100               	movlb	0	; () banked
  7023  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  7024  000DA4  0D01               	mullw	1
  7025  000DA6  0E48               	movlw	low STR_21
  7026  000DA8  24F3               	addwf	prodl,w,c
  7027  000DAA  6EF6               	movwf	tblptrl,c
  7028  000DAC  0EFF               	movlw	high STR_21
  7029  000DAE  20F4               	addwfc	prodh,w,c
  7030  000DB0  6EF7               	movwf	tblptrh,c
  7031  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  7032  000DB2                     	endif
  7033  000DB2  0008               	tblrd		*
  7034  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;doprnt.c: 1523: }
  7038                           
  7039                           ;doprnt.c: 1508: }
  7040                           ;doprnt.c: 1510: break;
  7041  000DB8  D009               	goto	l6944
  7042  000DBA                     l6942:
  7043  000DBA  0100               	movlb	0	; () banked
  7044  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  7045  000DBE  0B80               	andlw	128
  7046                           
  7047                           ; Switch size 1, requested type "space"
  7048                           ; Number of cases is 2, Range of values is 0 to 128
  7049                           ; switch strategies available:
  7050                           ; Name         Instructions Cycles
  7051                           ; simple_byte            7     4 (average)
  7052                           ;	Chosen strategy is simple_byte
  7053  000DC0  0A00               	xorlw	0	; case 0
  7054  000DC2  B4D8               	btfsc	status,2,c
  7055  000DC4  D780               	goto	l6934
  7056  000DC6  0A80               	xorlw	128	; case 128
  7057  000DC8  B4D8               	btfsc	status,2,c
  7058  000DCA  D7BD               	goto	l6936
  7059  000DCC                     l6944:
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;doprnt.c: 1524: (putch(c) );
  7063  000DCC  0100               	movlb	0	; () banked
  7064  000DCE  51EA               	movf	printf@c& (0+255),w,b
  7065  000DD0  EC17  F01E         	call	_putch
  7066  000DD4                     l6946:
  7067  000DD4  0100               	movlb	0	; () banked
  7068  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  7069  000DD8  A0D8               	btfss	status,0,c
  7070  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  7071  000DDC  0100               	movlb	0	; () banked
  7072  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  7073  000DE0  E1EC               	bnz	l6942
  7074  000DE2  0100               	movlb	0	; () banked
  7075  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  7076  000DE6  A4D8               	btfss	status,2,c
  7077  000DE8  D7E8               	goto	l6942
  7078  000DEA                     l6948:
  7079  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  7080  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  7081  000DF2  0100               	movlb	0	; () banked
  7082  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  7083  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  7084  000DF8                     	if	0	;tblptru may be non-zero
  7085  000DF8                     	endif
  7086  000DF8                     	if	0	;tblptru may be non-zero
  7087  000DF8                     	endif
  7088  000DF8  0008               	tblrd		*
  7089  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  7090  000DFE  0100               	movlb	0	; () banked
  7091  000E00  51EA               	movf	printf@c& (0+255),w,b
  7092  000E02  B4D8               	btfsc	status,2,c
  7093  000E04  0012               	return	
  7094  000E06  EF11  F000         	goto	l6582
  7095  000E0A                     __end_of_printf:
  7096                           	opt stack 0
  7097                           tblptru	equ	0xFF8
  7098                           tblptrh	equ	0xFF7
  7099                           tblptrl	equ	0xFF6
  7100                           tablat	equ	0xFF5
  7101                           prodh	equ	0xFF4
  7102                           prodl	equ	0xFF3
  7103                           intcon	equ	0xFF2
  7104                           postinc0	equ	0xFEE
  7105                           wreg	equ	0xFE8
  7106                           postdec1	equ	0xFE5
  7107                           fsr1l	equ	0xFE1
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function _scale *****************
  7116 ;; Defined at:
  7117 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  scl             1    wreg     char 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  scl             1   30[BANK0 ] char 
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  3   24[BANK0 ] char 
  7124 ;; Registers used:
  7125 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7131 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;Total ram usage:        7 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    5
  7138 ;; This function calls:
  7139 ;;		___awdiv
  7140 ;;		___awmod
  7141 ;;		___ftmul
  7142 ;;		___wmul
  7143 ;; This function is called by:
  7144 ;;		_printf
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text15
  7149  0012F2                     __ptext15:
  7150                           	opt stack 0
  7151  0012F2                     _scale:
  7152                           	opt stack 23
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;incstack = 0
  7156                           ;scale@scl stored from wreg
  7157  0012F2  0100               	movlb	0	; () banked
  7158  0012F4  6F9E               	movwf	scale@scl& (0+255),b
  7159                           
  7160                           ;doprnt.c: 428: if(scl < 0) {
  7161  0012F6  0100               	movlb	0	; () banked
  7162  0012F8  AF9E               	btfss	scale@scl& (0+255),7,b
  7163  0012FA  D104               	goto	l6230
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;doprnt.c: 429: scl = -scl;
  7167  0012FC  0100               	movlb	0	; () banked
  7168  0012FE  6D9E               	negf	scale@scl& (0+255),b
  7169                           
  7170                           ;doprnt.c: 430: if(scl>=110)
  7171  001300  0100               	movlb	0	; () banked
  7172  001302  519E               	movf	scale@scl& (0+255),w,b
  7173  001304  0A80               	xorlw	128
  7174  001306  0F12               	addlw	-238
  7175  001308  A0D8               	btfss	status,0,c
  7176  00130A  D094               	goto	l6220
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7180  00130C  0E00               	movlw	0
  7181  00130E  6E34               	movwf	___wmul@multiplicand+1,c
  7182  001310  0E03               	movlw	3
  7183  001312  6E33               	movwf	___wmul@multiplicand,c
  7184  001314  0E00               	movlw	0
  7185  001316  6E2C               	movwf	___awdiv@divisor+1,c
  7186  001318  0E0A               	movlw	10
  7187  00131A  6E2B               	movwf	___awdiv@divisor,c
  7188  00131C  0E00               	movlw	0
  7189  00131E  6E26               	movwf	___awmod@divisor+1,c
  7190  001320  0E64               	movlw	100
  7191  001322  6E25               	movwf	___awmod@divisor,c
  7192  001324  0100               	movlb	0	; () banked
  7193  001326  519E               	movf	scale@scl& (0+255),w,b
  7194  001328  6E23               	movwf	___awmod@dividend,c
  7195  00132A  6A24               	clrf	___awmod@dividend+1,c
  7196  00132C  BE23               	btfsc	___awmod@dividend,7,c
  7197  00132E  0624               	decf	___awmod@dividend+1,f,c
  7198  001330  ECD8  F01A         	call	___awmod	;wreg free
  7199  001334  C023  F029         	movff	?___awmod,___awdiv@dividend
  7200  001338  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7201  00133C  ECD8  F019         	call	___awdiv	;wreg free
  7202  001340  0E09               	movlw	9
  7203  001342  2429               	addwf	?___awdiv,w,c
  7204  001344  6E31               	movwf	___wmul@multiplier,c
  7205  001346  0E00               	movlw	0
  7206  001348  202A               	addwfc	?___awdiv+1,w,c
  7207  00134A  6E32               	movwf	___wmul@multiplier+1,c
  7208  00134C  ECF2  F01D         	call	___wmul	;wreg free
  7209  001350  0E53               	movlw	low __npowers_
  7210  001352  2431               	addwf	?___wmul,w,c
  7211  001354  6EF6               	movwf	tblptrl,c
  7212  001356  0EFE               	movlw	high __npowers_
  7213  001358  2032               	addwfc	?___wmul+1,w,c
  7214  00135A  6EF7               	movwf	tblptrh,c
  7215  00135C                     	if	0	;There are less than 3 active tblptr bytes
  7216  00135C                     	endif
  7217  00135C  0009               	tblrd		*+
  7218  00135E  CFF5 F08C          	movff	tablat,___ftmul@f2
  7219  001362  0009               	tblrd		*+
  7220  001364  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7221  001368  000A               	tblrd		*-
  7222  00136A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7223  00136E  0E00               	movlw	0
  7224  001370  6E2C               	movwf	___awdiv@divisor+1,c
  7225  001372  0E64               	movlw	100
  7226  001374  6E2B               	movwf	___awdiv@divisor,c
  7227  001376  0100               	movlb	0	; () banked
  7228  001378  519E               	movf	scale@scl& (0+255),w,b
  7229  00137A  6E29               	movwf	___awdiv@dividend,c
  7230  00137C  6A2A               	clrf	___awdiv@dividend+1,c
  7231  00137E  BE29               	btfsc	___awdiv@dividend,7,c
  7232  001380  062A               	decf	___awdiv@dividend+1,f,c
  7233  001382  ECD8  F019         	call	___awdiv	;wreg free
  7234  001386  0E12               	movlw	18
  7235  001388  2429               	addwf	?___awdiv,w,c
  7236  00138A  6E31               	movwf	___wmul@multiplier,c
  7237  00138C  0E00               	movlw	0
  7238  00138E  202A               	addwfc	?___awdiv+1,w,c
  7239  001390  6E32               	movwf	___wmul@multiplier+1,c
  7240  001392  0E00               	movlw	0
  7241  001394  6E34               	movwf	___wmul@multiplicand+1,c
  7242  001396  0E03               	movlw	3
  7243  001398  6E33               	movwf	___wmul@multiplicand,c
  7244  00139A  ECF2  F01D         	call	___wmul	;wreg free
  7245  00139E  0E53               	movlw	low __npowers_
  7246  0013A0  2431               	addwf	?___wmul,w,c
  7247  0013A2  6EF6               	movwf	tblptrl,c
  7248  0013A4  0EFE               	movlw	high __npowers_
  7249  0013A6  2032               	addwfc	?___wmul+1,w,c
  7250  0013A8  6EF7               	movwf	tblptrh,c
  7251  0013AA                     	if	0	;There are less than 3 active tblptr bytes
  7252  0013AA                     	endif
  7253  0013AA  0009               	tblrd		*+
  7254  0013AC  CFF5 F089          	movff	tablat,___ftmul@f1
  7255  0013B0  0009               	tblrd		*+
  7256  0013B2  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7257  0013B6  000A               	tblrd		*-
  7258  0013B8  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7259  0013BC  ECD0  F00F         	call	___ftmul	;wreg free
  7260  0013C0  C089  F09B         	movff	?___ftmul,_scale$1398
  7261  0013C4  C08A  F09C         	movff	?___ftmul+1,_scale$1398+1
  7262  0013C8  C08B  F09D         	movff	?___ftmul+2,_scale$1398+2
  7263                           
  7264                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7265  0013CC  C09B  F089         	movff	_scale$1398,___ftmul@f1
  7266  0013D0  C09C  F08A         	movff	_scale$1398+1,___ftmul@f1+1
  7267  0013D4  C09D  F08B         	movff	_scale$1398+2,___ftmul@f1+2
  7268  0013D8  0E00               	movlw	0
  7269  0013DA  6E34               	movwf	___wmul@multiplicand+1,c
  7270  0013DC  0E03               	movlw	3
  7271  0013DE  6E33               	movwf	___wmul@multiplicand,c
  7272  0013E0  0E00               	movlw	0
  7273  0013E2  6E26               	movwf	___awmod@divisor+1,c
  7274  0013E4  0E0A               	movlw	10
  7275  0013E6  6E25               	movwf	___awmod@divisor,c
  7276  0013E8  0100               	movlb	0	; () banked
  7277  0013EA  519E               	movf	scale@scl& (0+255),w,b
  7278  0013EC  6E23               	movwf	___awmod@dividend,c
  7279  0013EE  6A24               	clrf	___awmod@dividend+1,c
  7280  0013F0  BE23               	btfsc	___awmod@dividend,7,c
  7281  0013F2  0624               	decf	___awmod@dividend+1,f,c
  7282  0013F4  ECD8  F01A         	call	___awmod	;wreg free
  7283  0013F8  C023  F031         	movff	?___awmod,___wmul@multiplier
  7284  0013FC  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7285  001400  ECF2  F01D         	call	___wmul	;wreg free
  7286  001404  0E53               	movlw	low __npowers_
  7287  001406  2431               	addwf	?___wmul,w,c
  7288  001408  6EF6               	movwf	tblptrl,c
  7289  00140A  0EFE               	movlw	high __npowers_
  7290  00140C  2032               	addwfc	?___wmul+1,w,c
  7291  00140E  6EF7               	movwf	tblptrh,c
  7292  001410                     	if	0	;There are less than 3 active tblptr bytes
  7293  001410                     	endif
  7294  001410  0009               	tblrd		*+
  7295  001412  CFF5 F08C          	movff	tablat,___ftmul@f2
  7296  001416  0009               	tblrd		*+
  7297  001418  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7298  00141C  000A               	tblrd		*-
  7299  00141E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7300  001422  ECD0  F00F         	call	___ftmul	;wreg free
  7301  001426  C089  F098         	movff	?___ftmul,?_scale
  7302  00142A  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7303  00142E  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7304  001432  0012               	return	
  7305  001434                     l6220:
  7306                           
  7307                           ;doprnt.c: 432: else if(scl > 10)
  7308  001434  0100               	movlb	0	; () banked
  7309  001436  519E               	movf	scale@scl& (0+255),w,b
  7310  001438  0A80               	xorlw	128
  7311  00143A  0F75               	addlw	-139
  7312  00143C  A0D8               	btfss	status,0,c
  7313  00143E  D04F               	goto	l6226
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7317  001440  0E00               	movlw	0
  7318  001442  6E2C               	movwf	___awdiv@divisor+1,c
  7319  001444  0E0A               	movlw	10
  7320  001446  6E2B               	movwf	___awdiv@divisor,c
  7321  001448  0100               	movlb	0	; () banked
  7322  00144A  519E               	movf	scale@scl& (0+255),w,b
  7323  00144C  6E29               	movwf	___awdiv@dividend,c
  7324  00144E  6A2A               	clrf	___awdiv@dividend+1,c
  7325  001450  BE29               	btfsc	___awdiv@dividend,7,c
  7326  001452  062A               	decf	___awdiv@dividend+1,f,c
  7327  001454  ECD8  F019         	call	___awdiv	;wreg free
  7328  001458  0E09               	movlw	9
  7329  00145A  2429               	addwf	?___awdiv,w,c
  7330  00145C  6E31               	movwf	___wmul@multiplier,c
  7331  00145E  0E00               	movlw	0
  7332  001460  202A               	addwfc	?___awdiv+1,w,c
  7333  001462  6E32               	movwf	___wmul@multiplier+1,c
  7334  001464  0E00               	movlw	0
  7335  001466  6E34               	movwf	___wmul@multiplicand+1,c
  7336  001468  0E03               	movlw	3
  7337  00146A  6E33               	movwf	___wmul@multiplicand,c
  7338  00146C  ECF2  F01D         	call	___wmul	;wreg free
  7339  001470  0E53               	movlw	low __npowers_
  7340  001472  2431               	addwf	?___wmul,w,c
  7341  001474  6EF6               	movwf	tblptrl,c
  7342  001476  0EFE               	movlw	high __npowers_
  7343  001478  2032               	addwfc	?___wmul+1,w,c
  7344  00147A  6EF7               	movwf	tblptrh,c
  7345  00147C                     	if	0	;There are less than 3 active tblptr bytes
  7346  00147C                     	endif
  7347  00147C  0009               	tblrd		*+
  7348  00147E  CFF5 F089          	movff	tablat,___ftmul@f1
  7349  001482  0009               	tblrd		*+
  7350  001484  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7351  001488  000A               	tblrd		*-
  7352  00148A  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7353  00148E  0E00               	movlw	0
  7354  001490  6E34               	movwf	___wmul@multiplicand+1,c
  7355  001492  0E03               	movlw	3
  7356  001494  6E33               	movwf	___wmul@multiplicand,c
  7357  001496  0E00               	movlw	0
  7358  001498  6E26               	movwf	___awmod@divisor+1,c
  7359  00149A  0E0A               	movlw	10
  7360  00149C  6E25               	movwf	___awmod@divisor,c
  7361  00149E  0100               	movlb	0	; () banked
  7362  0014A0  519E               	movf	scale@scl& (0+255),w,b
  7363  0014A2  6E23               	movwf	___awmod@dividend,c
  7364  0014A4  6A24               	clrf	___awmod@dividend+1,c
  7365  0014A6  BE23               	btfsc	___awmod@dividend,7,c
  7366  0014A8  0624               	decf	___awmod@dividend+1,f,c
  7367  0014AA  ECD8  F01A         	call	___awmod	;wreg free
  7368  0014AE  C023  F031         	movff	?___awmod,___wmul@multiplier
  7369  0014B2  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7370  0014B6  ECF2  F01D         	call	___wmul	;wreg free
  7371  0014BA  0E53               	movlw	low __npowers_
  7372  0014BC  2431               	addwf	?___wmul,w,c
  7373  0014BE  6EF6               	movwf	tblptrl,c
  7374  0014C0  0EFE               	movlw	high __npowers_
  7375  0014C2  2032               	addwfc	?___wmul+1,w,c
  7376  0014C4  6EF7               	movwf	tblptrh,c
  7377  0014C6                     	if	0	;There are less than 3 active tblptr bytes
  7378  0014C6                     	endif
  7379  0014C6  0009               	tblrd		*+
  7380  0014C8  CFF5 F08C          	movff	tablat,___ftmul@f2
  7381  0014CC  0009               	tblrd		*+
  7382  0014CE  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7383  0014D2  000A               	tblrd		*-
  7384  0014D4  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7385  0014D8  ECD0  F00F         	call	___ftmul	;wreg free
  7386  0014DC  D7A4               	goto	L4
  7387  0014DE                     l6226:
  7388                           
  7389                           ;doprnt.c: 434: return _npowers_[scl];
  7390  0014DE  0100               	movlb	0	; () banked
  7391  0014E0  519E               	movf	scale@scl& (0+255),w,b
  7392  0014E2  0D03               	mullw	3
  7393  0014E4  0E53               	movlw	low __npowers_
  7394  0014E6  24F3               	addwf	prodl,w,c
  7395  0014E8  6EF6               	movwf	tblptrl,c
  7396  0014EA  0EFE               	movlw	high __npowers_
  7397  0014EC  20F4               	addwfc	prodh,w,c
  7398  0014EE  6EF7               	movwf	tblptrh,c
  7399  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  7400  0014F0                     	endif
  7401  0014F0  0009               	tblrd		*+
  7402  0014F2  CFF5 F098          	movff	tablat,?_scale
  7403  0014F6  0009               	tblrd		*+
  7404  0014F8  CFF5 F099          	movff	tablat,?_scale+1
  7405  0014FC  000A               	tblrd		*-
  7406  0014FE  CFF5 F09A          	movff	tablat,?_scale+2
  7407                           
  7408                           ; BSR set to: 0
  7409  001502  0012               	return	
  7410  001504                     l6230:
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;doprnt.c: 435: }
  7414                           ;doprnt.c: 436: if(scl>=110)
  7415  001504  0100               	movlb	0	; () banked
  7416  001506  519E               	movf	scale@scl& (0+255),w,b
  7417  001508  0A80               	xorlw	128
  7418  00150A  0F12               	addlw	-238
  7419  00150C  A0D8               	btfss	status,0,c
  7420  00150E  D094               	goto	l6238
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7424  001510  0E00               	movlw	0
  7425  001512  6E34               	movwf	___wmul@multiplicand+1,c
  7426  001514  0E03               	movlw	3
  7427  001516  6E33               	movwf	___wmul@multiplicand,c
  7428  001518  0E00               	movlw	0
  7429  00151A  6E2C               	movwf	___awdiv@divisor+1,c
  7430  00151C  0E0A               	movlw	10
  7431  00151E  6E2B               	movwf	___awdiv@divisor,c
  7432  001520  0E00               	movlw	0
  7433  001522  6E26               	movwf	___awmod@divisor+1,c
  7434  001524  0E64               	movlw	100
  7435  001526  6E25               	movwf	___awmod@divisor,c
  7436  001528  0100               	movlb	0	; () banked
  7437  00152A  519E               	movf	scale@scl& (0+255),w,b
  7438  00152C  6E23               	movwf	___awmod@dividend,c
  7439  00152E  6A24               	clrf	___awmod@dividend+1,c
  7440  001530  BE23               	btfsc	___awmod@dividend,7,c
  7441  001532  0624               	decf	___awmod@dividend+1,f,c
  7442  001534  ECD8  F01A         	call	___awmod	;wreg free
  7443  001538  C023  F029         	movff	?___awmod,___awdiv@dividend
  7444  00153C  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7445  001540  ECD8  F019         	call	___awdiv	;wreg free
  7446  001544  0E09               	movlw	9
  7447  001546  2429               	addwf	?___awdiv,w,c
  7448  001548  6E31               	movwf	___wmul@multiplier,c
  7449  00154A  0E00               	movlw	0
  7450  00154C  202A               	addwfc	?___awdiv+1,w,c
  7451  00154E  6E32               	movwf	___wmul@multiplier+1,c
  7452  001550  ECF2  F01D         	call	___wmul	;wreg free
  7453  001554  0E7A               	movlw	low __powers_
  7454  001556  2431               	addwf	?___wmul,w,c
  7455  001558  6EF6               	movwf	tblptrl,c
  7456  00155A  0EFE               	movlw	high __powers_
  7457  00155C  2032               	addwfc	?___wmul+1,w,c
  7458  00155E  6EF7               	movwf	tblptrh,c
  7459  001560                     	if	0	;There are less than 3 active tblptr bytes
  7460  001560                     	endif
  7461  001560  0009               	tblrd		*+
  7462  001562  CFF5 F08C          	movff	tablat,___ftmul@f2
  7463  001566  0009               	tblrd		*+
  7464  001568  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7465  00156C  000A               	tblrd		*-
  7466  00156E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7467  001572  0E00               	movlw	0
  7468  001574  6E2C               	movwf	___awdiv@divisor+1,c
  7469  001576  0E64               	movlw	100
  7470  001578  6E2B               	movwf	___awdiv@divisor,c
  7471  00157A  0100               	movlb	0	; () banked
  7472  00157C  519E               	movf	scale@scl& (0+255),w,b
  7473  00157E  6E29               	movwf	___awdiv@dividend,c
  7474  001580  6A2A               	clrf	___awdiv@dividend+1,c
  7475  001582  BE29               	btfsc	___awdiv@dividend,7,c
  7476  001584  062A               	decf	___awdiv@dividend+1,f,c
  7477  001586  ECD8  F019         	call	___awdiv	;wreg free
  7478  00158A  0E12               	movlw	18
  7479  00158C  2429               	addwf	?___awdiv,w,c
  7480  00158E  6E31               	movwf	___wmul@multiplier,c
  7481  001590  0E00               	movlw	0
  7482  001592  202A               	addwfc	?___awdiv+1,w,c
  7483  001594  6E32               	movwf	___wmul@multiplier+1,c
  7484  001596  0E00               	movlw	0
  7485  001598  6E34               	movwf	___wmul@multiplicand+1,c
  7486  00159A  0E03               	movlw	3
  7487  00159C  6E33               	movwf	___wmul@multiplicand,c
  7488  00159E  ECF2  F01D         	call	___wmul	;wreg free
  7489  0015A2  0E7A               	movlw	low __powers_
  7490  0015A4  2431               	addwf	?___wmul,w,c
  7491  0015A6  6EF6               	movwf	tblptrl,c
  7492  0015A8  0EFE               	movlw	high __powers_
  7493  0015AA  2032               	addwfc	?___wmul+1,w,c
  7494  0015AC  6EF7               	movwf	tblptrh,c
  7495  0015AE                     	if	0	;There are less than 3 active tblptr bytes
  7496  0015AE                     	endif
  7497  0015AE  0009               	tblrd		*+
  7498  0015B0  CFF5 F089          	movff	tablat,___ftmul@f1
  7499  0015B4  0009               	tblrd		*+
  7500  0015B6  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7501  0015BA  000A               	tblrd		*-
  7502  0015BC  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7503  0015C0  ECD0  F00F         	call	___ftmul	;wreg free
  7504  0015C4  C089  F09B         	movff	?___ftmul,_scale$1398
  7505  0015C8  C08A  F09C         	movff	?___ftmul+1,_scale$1398+1
  7506  0015CC  C08B  F09D         	movff	?___ftmul+2,_scale$1398+2
  7507                           
  7508                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7509  0015D0  C09B  F089         	movff	_scale$1398,___ftmul@f1
  7510  0015D4  C09C  F08A         	movff	_scale$1398+1,___ftmul@f1+1
  7511  0015D8  C09D  F08B         	movff	_scale$1398+2,___ftmul@f1+2
  7512  0015DC  0E00               	movlw	0
  7513  0015DE  6E34               	movwf	___wmul@multiplicand+1,c
  7514  0015E0  0E03               	movlw	3
  7515  0015E2  6E33               	movwf	___wmul@multiplicand,c
  7516  0015E4  0E00               	movlw	0
  7517  0015E6  6E26               	movwf	___awmod@divisor+1,c
  7518  0015E8  0E0A               	movlw	10
  7519  0015EA  6E25               	movwf	___awmod@divisor,c
  7520  0015EC  0100               	movlb	0	; () banked
  7521  0015EE  519E               	movf	scale@scl& (0+255),w,b
  7522  0015F0  6E23               	movwf	___awmod@dividend,c
  7523  0015F2  6A24               	clrf	___awmod@dividend+1,c
  7524  0015F4  BE23               	btfsc	___awmod@dividend,7,c
  7525  0015F6  0624               	decf	___awmod@dividend+1,f,c
  7526  0015F8  ECD8  F01A         	call	___awmod	;wreg free
  7527  0015FC  C023  F031         	movff	?___awmod,___wmul@multiplier
  7528  001600  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7529  001604  ECF2  F01D         	call	___wmul	;wreg free
  7530  001608  0E7A               	movlw	low __powers_
  7531  00160A  2431               	addwf	?___wmul,w,c
  7532  00160C  6EF6               	movwf	tblptrl,c
  7533  00160E  0EFE               	movlw	high __powers_
  7534  001610  2032               	addwfc	?___wmul+1,w,c
  7535  001612  6EF7               	movwf	tblptrh,c
  7536  001614                     	if	0	;There are less than 3 active tblptr bytes
  7537  001614                     	endif
  7538  001614  0009               	tblrd		*+
  7539  001616  CFF5 F08C          	movff	tablat,___ftmul@f2
  7540  00161A  0009               	tblrd		*+
  7541  00161C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7542  001620  000A               	tblrd		*-
  7543  001622  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7544  001626  ECD0  F00F         	call	___ftmul	;wreg free
  7545  00162A  C089  F098         	movff	?___ftmul,?_scale
  7546  00162E  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7547  001632  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7548  001636  0012               	return	
  7549  001638                     l6238:
  7550                           
  7551                           ;doprnt.c: 438: else if(scl > 10)
  7552  001638  0100               	movlb	0	; () banked
  7553  00163A  519E               	movf	scale@scl& (0+255),w,b
  7554  00163C  0A80               	xorlw	128
  7555  00163E  0F75               	addlw	-139
  7556  001640  A0D8               	btfss	status,0,c
  7557  001642  D04F               	goto	l6244
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7561  001644  0E00               	movlw	0
  7562  001646  6E2C               	movwf	___awdiv@divisor+1,c
  7563  001648  0E0A               	movlw	10
  7564  00164A  6E2B               	movwf	___awdiv@divisor,c
  7565  00164C  0100               	movlb	0	; () banked
  7566  00164E  519E               	movf	scale@scl& (0+255),w,b
  7567  001650  6E29               	movwf	___awdiv@dividend,c
  7568  001652  6A2A               	clrf	___awdiv@dividend+1,c
  7569  001654  BE29               	btfsc	___awdiv@dividend,7,c
  7570  001656  062A               	decf	___awdiv@dividend+1,f,c
  7571  001658  ECD8  F019         	call	___awdiv	;wreg free
  7572  00165C  0E09               	movlw	9
  7573  00165E  2429               	addwf	?___awdiv,w,c
  7574  001660  6E31               	movwf	___wmul@multiplier,c
  7575  001662  0E00               	movlw	0
  7576  001664  202A               	addwfc	?___awdiv+1,w,c
  7577  001666  6E32               	movwf	___wmul@multiplier+1,c
  7578  001668  0E00               	movlw	0
  7579  00166A  6E34               	movwf	___wmul@multiplicand+1,c
  7580  00166C  0E03               	movlw	3
  7581  00166E  6E33               	movwf	___wmul@multiplicand,c
  7582  001670  ECF2  F01D         	call	___wmul	;wreg free
  7583  001674  0E7A               	movlw	low __powers_
  7584  001676  2431               	addwf	?___wmul,w,c
  7585  001678  6EF6               	movwf	tblptrl,c
  7586  00167A  0EFE               	movlw	high __powers_
  7587  00167C  2032               	addwfc	?___wmul+1,w,c
  7588  00167E  6EF7               	movwf	tblptrh,c
  7589  001680                     	if	0	;There are less than 3 active tblptr bytes
  7590  001680                     	endif
  7591  001680  0009               	tblrd		*+
  7592  001682  CFF5 F089          	movff	tablat,___ftmul@f1
  7593  001686  0009               	tblrd		*+
  7594  001688  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7595  00168C  000A               	tblrd		*-
  7596  00168E  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7597  001692  0E00               	movlw	0
  7598  001694  6E34               	movwf	___wmul@multiplicand+1,c
  7599  001696  0E03               	movlw	3
  7600  001698  6E33               	movwf	___wmul@multiplicand,c
  7601  00169A  0E00               	movlw	0
  7602  00169C  6E26               	movwf	___awmod@divisor+1,c
  7603  00169E  0E0A               	movlw	10
  7604  0016A0  6E25               	movwf	___awmod@divisor,c
  7605  0016A2  0100               	movlb	0	; () banked
  7606  0016A4  519E               	movf	scale@scl& (0+255),w,b
  7607  0016A6  6E23               	movwf	___awmod@dividend,c
  7608  0016A8  6A24               	clrf	___awmod@dividend+1,c
  7609  0016AA  BE23               	btfsc	___awmod@dividend,7,c
  7610  0016AC  0624               	decf	___awmod@dividend+1,f,c
  7611  0016AE  ECD8  F01A         	call	___awmod	;wreg free
  7612  0016B2  C023  F031         	movff	?___awmod,___wmul@multiplier
  7613  0016B6  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7614  0016BA  ECF2  F01D         	call	___wmul	;wreg free
  7615  0016BE  0E7A               	movlw	low __powers_
  7616  0016C0  2431               	addwf	?___wmul,w,c
  7617  0016C2  6EF6               	movwf	tblptrl,c
  7618  0016C4  0EFE               	movlw	high __powers_
  7619  0016C6  2032               	addwfc	?___wmul+1,w,c
  7620  0016C8  6EF7               	movwf	tblptrh,c
  7621  0016CA                     	if	0	;There are less than 3 active tblptr bytes
  7622  0016CA                     	endif
  7623  0016CA  0009               	tblrd		*+
  7624  0016CC  CFF5 F08C          	movff	tablat,___ftmul@f2
  7625  0016D0  0009               	tblrd		*+
  7626  0016D2  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7627  0016D6  000A               	tblrd		*-
  7628  0016D8  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7629  0016DC  ECD0  F00F         	call	___ftmul	;wreg free
  7630  0016E0  D7A4               	goto	L5
  7631  0016E2                     l6244:
  7632                           
  7633                           ;doprnt.c: 440: return _powers_[scl];
  7634  0016E2  0100               	movlb	0	; () banked
  7635  0016E4  519E               	movf	scale@scl& (0+255),w,b
  7636  0016E6  0D03               	mullw	3
  7637  0016E8  0E7A               	movlw	low __powers_
  7638  0016EA  24F3               	addwf	prodl,w,c
  7639  0016EC  6EF6               	movwf	tblptrl,c
  7640  0016EE  0EFE               	movlw	high __powers_
  7641  0016F0  20F4               	addwfc	prodh,w,c
  7642  0016F2  6EF7               	movwf	tblptrh,c
  7643  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  7644  0016F4                     	endif
  7645  0016F4  0009               	tblrd		*+
  7646  0016F6  CFF5 F098          	movff	tablat,?_scale
  7647  0016FA  0009               	tblrd		*+
  7648  0016FC  CFF5 F099          	movff	tablat,?_scale+1
  7649  001700  000A               	tblrd		*-
  7650  001702  CFF5 F09A          	movff	tablat,?_scale+2
  7651  001706  0012               	return	
  7652  001708                     __end_of_scale:
  7653                           	opt stack 0
  7654                           tblptru	equ	0xFF8
  7655                           tblptrh	equ	0xFF7
  7656                           tblptrl	equ	0xFF6
  7657                           tablat	equ	0xFF5
  7658                           prodh	equ	0xFF4
  7659                           prodl	equ	0xFF3
  7660                           intcon	equ	0xFF2
  7661                           postinc0	equ	0xFEE
  7662                           wreg	equ	0xFE8
  7663                           postdec1	equ	0xFE5
  7664                           fsr1l	equ	0xFE1
  7665                           indf2	equ	0xFDF
  7666                           postinc2	equ	0xFDE
  7667                           postdec2	equ	0xFDD
  7668                           fsr2h	equ	0xFDA
  7669                           fsr2l	equ	0xFD9
  7670                           status	equ	0xFD8
  7671                           
  7672 ;; *************** function _putch *****************
  7673 ;; Defined at:
  7674 ;;		line 35 in file "lcd.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;  data            1    wreg     unsigned char 
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;  data            1   38[COMRAM] unsigned char 
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  1    wreg      void 
  7681 ;; Registers used:
  7682 ;;		wreg, status,2, status,0, cstack
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;Total ram usage:        1 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; Hardware stack levels required when called:    6
  7695 ;; This function calls:
  7696 ;;		_lcdNewline
  7697 ;;		_lcdNibble
  7698 ;; This function is called by:
  7699 ;;		_printf
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           	psect	text16
  7704  003C2E                     __ptext16:
  7705                           	opt stack 0
  7706  003C2E                     _putch:
  7707                           	opt stack 22
  7708                           
  7709                           ;incstack = 0
  7710                           ;putch@data stored from wreg
  7711  003C2E  6E27               	movwf	putch@data,c
  7712                           
  7713                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7714  003C30  0E0A               	movlw	10
  7715  003C32  1827               	xorwf	putch@data,w,c
  7716  003C34  A4D8               	btfss	status,2,c
  7717  003C36  D003               	goto	l225
  7718  003C38  EC99  F01E         	call	_lcdNewline	;wreg free
  7719  003C3C  0012               	return	
  7720  003C3E                     l225:
  7721                           
  7722                           ;lcd.c: 37: else
  7723                           ;lcd.c: 38: {
  7724                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7725  003C3E  848C               	bsf	3980,2,c	;volatile
  7726                           
  7727                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7728  003C40  0E74               	movlw	116
  7729  003C42                     u8017:
  7730  003C42  2EE8               	decfsz	wreg,f,c
  7731  003C44  D7FE               	bra	u8017
  7732  003C46  D000               	nop2	
  7733                           
  7734                           ;lcd.c: 41: lcdNibble(data);
  7735  003C48  5027               	movf	putch@data,w,c
  7736  003C4A  EC7B  F01B         	call	_lcdNibble
  7737  003C4E  0012               	return	
  7738  003C50                     __end_of_putch:
  7739                           	opt stack 0
  7740                           tblptru	equ	0xFF8
  7741                           tblptrh	equ	0xFF7
  7742                           tblptrl	equ	0xFF6
  7743                           tablat	equ	0xFF5
  7744                           prodh	equ	0xFF4
  7745                           prodl	equ	0xFF3
  7746                           intcon	equ	0xFF2
  7747                           postinc0	equ	0xFEE
  7748                           wreg	equ	0xFE8
  7749                           postdec1	equ	0xFE5
  7750                           fsr1l	equ	0xFE1
  7751                           indf2	equ	0xFDF
  7752                           postinc2	equ	0xFDE
  7753                           postdec2	equ	0xFDD
  7754                           fsr2h	equ	0xFDA
  7755                           fsr2l	equ	0xFD9
  7756                           status	equ	0xFD8
  7757                           
  7758 ;; *************** function _lcdNewline *****************
  7759 ;; Defined at:
  7760 ;;		line 78 in file "lcd.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;		None
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      void 
  7767 ;; Registers used:
  7768 ;;		wreg, status,2, status,0, cstack
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7778 ;;Total ram usage:        0 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    5
  7781 ;; This function calls:
  7782 ;;		_lcdInst
  7783 ;; This function is called by:
  7784 ;;		_putch
  7785 ;; This function uses a non-reentrant model
  7786 ;;
  7787                           
  7788                           	psect	text17
  7789  003D32                     __ptext17:
  7790                           	opt stack 0
  7791  003D32                     _lcdNewline:
  7792                           	opt stack 22
  7793                           
  7794                           ;lcd.c: 79: lcdInst(0b11000000);
  7795                           
  7796                           ;incstack = 0
  7797  003D32  0EC0               	movlw	192
  7798  003D34  EC28  F01E         	call	_lcdInst
  7799  003D38  0012               	return		;funcret
  7800  003D3A                     __end_of_lcdNewline:
  7801                           	opt stack 0
  7802                           tblptru	equ	0xFF8
  7803                           tblptrh	equ	0xFF7
  7804                           tblptrl	equ	0xFF6
  7805                           tablat	equ	0xFF5
  7806                           prodh	equ	0xFF4
  7807                           prodl	equ	0xFF3
  7808                           intcon	equ	0xFF2
  7809                           postinc0	equ	0xFEE
  7810                           wreg	equ	0xFE8
  7811                           postdec1	equ	0xFE5
  7812                           fsr1l	equ	0xFE1
  7813                           indf2	equ	0xFDF
  7814                           postinc2	equ	0xFDE
  7815                           postdec2	equ	0xFDD
  7816                           fsr2h	equ	0xFDA
  7817                           fsr2l	equ	0xFD9
  7818                           status	equ	0xFD8
  7819                           
  7820 ;; *************** function _isdigit *****************
  7821 ;; Defined at:
  7822 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7823 ;; Parameters:    Size  Location     Type
  7824 ;;  c               1    wreg     unsigned char 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  c               1   36[COMRAM] unsigned char 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;		None               void
  7829 ;; Registers used:
  7830 ;;		wreg, status,2, status,0
  7831 ;; Tracked objects:
  7832 ;;		On entry : 0/0
  7833 ;;		On exit  : 0/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;Total ram usage:        3 bytes
  7841 ;; Hardware stack levels used:    1
  7842 ;; Hardware stack levels required when called:    3
  7843 ;; This function calls:
  7844 ;;		Nothing
  7845 ;; This function is called by:
  7846 ;;		_printf
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           	psect	text18
  7851  003CB0                     __ptext18:
  7852                           	opt stack 0
  7853  003CB0                     _isdigit:
  7854                           	opt stack 25
  7855                           
  7856                           ;incstack = 0
  7857                           ;isdigit@c stored from wreg
  7858  003CB0  6E25               	movwf	isdigit@c,c
  7859  003CB2  0E00               	movlw	0
  7860  003CB4  6E24               	movwf	_isdigit$1031,c
  7861  003CB6  0E3A               	movlw	58
  7862  003CB8  6025               	cpfslt	isdigit@c,c
  7863  003CBA  D005               	goto	l6256
  7864  003CBC  0E2F               	movlw	47
  7865  003CBE  6425               	cpfsgt	isdigit@c,c
  7866  003CC0  D002               	goto	l6256
  7867  003CC2  0E01               	movlw	1
  7868  003CC4  6E24               	movwf	_isdigit$1031,c
  7869  003CC6                     l6256:
  7870  003CC6  C024  F023         	movff	_isdigit$1031,??_isdigit
  7871  003CCA  3023               	rrcf	??_isdigit,w,c
  7872  003CCC  0012               	return	
  7873  003CCE                     __end_of_isdigit:
  7874                           	opt stack 0
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           prodh	equ	0xFF4
  7880                           prodl	equ	0xFF3
  7881                           intcon	equ	0xFF2
  7882                           postinc0	equ	0xFEE
  7883                           wreg	equ	0xFE8
  7884                           postdec1	equ	0xFE5
  7885                           fsr1l	equ	0xFE1
  7886                           indf2	equ	0xFDF
  7887                           postinc2	equ	0xFDE
  7888                           postdec2	equ	0xFDD
  7889                           fsr2h	equ	0xFDA
  7890                           fsr2l	equ	0xFD9
  7891                           status	equ	0xFD8
  7892                           
  7893 ;; *************** function _fround *****************
  7894 ;; Defined at:
  7895 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  prec            1    wreg     unsigned char 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  prec            1   33[BANK0 ] unsigned char 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;                  3   24[BANK0 ] unsigned char 
  7902 ;; Registers used:
  7903 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 0/0
  7906 ;;		On exit  : 0/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7909 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;Total ram usage:       10 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    5
  7916 ;; This function calls:
  7917 ;;		___awdiv
  7918 ;;		___awmod
  7919 ;;		___ftmul
  7920 ;;		___wmul
  7921 ;; This function is called by:
  7922 ;;		_printf
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text19
  7927  001D40                     __ptext19:
  7928                           	opt stack 0
  7929  001D40                     _fround:
  7930                           	opt stack 23
  7931                           
  7932                           ;incstack = 0
  7933                           ;fround@prec stored from wreg
  7934  001D40  0100               	movlb	0	; () banked
  7935  001D42  6FA1               	movwf	fround@prec& (0+255),b
  7936                           
  7937                           ;doprnt.c: 413: if(prec>=110)
  7938  001D44  0E6D               	movlw	109
  7939  001D46  0100               	movlb	0	; () banked
  7940  001D48  65A1               	cpfsgt	fround@prec& (0+255),b
  7941  001D4A  D0A2               	goto	l6198
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7945  001D4C  0E00               	movlw	0
  7946  001D4E  6E34               	movwf	___wmul@multiplicand+1,c
  7947  001D50  0E03               	movlw	3
  7948  001D52  6E33               	movwf	___wmul@multiplicand,c
  7949  001D54  0E00               	movlw	0
  7950  001D56  6E2C               	movwf	___awdiv@divisor+1,c
  7951  001D58  0E0A               	movlw	10
  7952  001D5A  6E2B               	movwf	___awdiv@divisor,c
  7953  001D5C  0E00               	movlw	0
  7954  001D5E  6E26               	movwf	___awmod@divisor+1,c
  7955  001D60  0E64               	movlw	100
  7956  001D62  6E25               	movwf	___awmod@divisor,c
  7957  001D64  C0A1  F023         	movff	fround@prec,___awmod@dividend
  7958  001D68  6A24               	clrf	___awmod@dividend+1,c
  7959  001D6A  ECD8  F01A         	call	___awmod	;wreg free
  7960  001D6E  C023  F029         	movff	?___awmod,___awdiv@dividend
  7961  001D72  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7962  001D76  ECD8  F019         	call	___awdiv	;wreg free
  7963  001D7A  0E09               	movlw	9
  7964  001D7C  2429               	addwf	?___awdiv,w,c
  7965  001D7E  6E31               	movwf	___wmul@multiplier,c
  7966  001D80  0E00               	movlw	0
  7967  001D82  202A               	addwfc	?___awdiv+1,w,c
  7968  001D84  6E32               	movwf	___wmul@multiplier+1,c
  7969  001D86  ECF2  F01D         	call	___wmul	;wreg free
  7970  001D8A  0E53               	movlw	low __npowers_
  7971  001D8C  2431               	addwf	?___wmul,w,c
  7972  001D8E  6EF6               	movwf	tblptrl,c
  7973  001D90  0EFE               	movlw	high __npowers_
  7974  001D92  2032               	addwfc	?___wmul+1,w,c
  7975  001D94  6EF7               	movwf	tblptrh,c
  7976  001D96                     	if	0	;There are less than 3 active tblptr bytes
  7977  001D96                     	endif
  7978  001D96  0009               	tblrd		*+
  7979  001D98  CFF5 F08C          	movff	tablat,___ftmul@f2
  7980  001D9C  0009               	tblrd		*+
  7981  001D9E  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7982  001DA2  000A               	tblrd		*-
  7983  001DA4  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7984  001DA8  0E00               	movlw	0
  7985  001DAA  6E2C               	movwf	___awdiv@divisor+1,c
  7986  001DAC  0E64               	movlw	100
  7987  001DAE  6E2B               	movwf	___awdiv@divisor,c
  7988  001DB0  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  7989  001DB4  6A2A               	clrf	___awdiv@dividend+1,c
  7990  001DB6  ECD8  F019         	call	___awdiv	;wreg free
  7991  001DBA  0E12               	movlw	18
  7992  001DBC  2429               	addwf	?___awdiv,w,c
  7993  001DBE  6E31               	movwf	___wmul@multiplier,c
  7994  001DC0  0E00               	movlw	0
  7995  001DC2  202A               	addwfc	?___awdiv+1,w,c
  7996  001DC4  6E32               	movwf	___wmul@multiplier+1,c
  7997  001DC6  0E00               	movlw	0
  7998  001DC8  6E34               	movwf	___wmul@multiplicand+1,c
  7999  001DCA  0E03               	movlw	3
  8000  001DCC  6E33               	movwf	___wmul@multiplicand,c
  8001  001DCE  ECF2  F01D         	call	___wmul	;wreg free
  8002  001DD2  0E53               	movlw	low __npowers_
  8003  001DD4  2431               	addwf	?___wmul,w,c
  8004  001DD6  6EF6               	movwf	tblptrl,c
  8005  001DD8  0EFE               	movlw	high __npowers_
  8006  001DDA  2032               	addwfc	?___wmul+1,w,c
  8007  001DDC  6EF7               	movwf	tblptrh,c
  8008  001DDE                     	if	0	;There are less than 3 active tblptr bytes
  8009  001DDE                     	endif
  8010  001DDE  0009               	tblrd		*+
  8011  001DE0  CFF5 F089          	movff	tablat,___ftmul@f1
  8012  001DE4  0009               	tblrd		*+
  8013  001DE6  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8014  001DEA  000A               	tblrd		*-
  8015  001DEC  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8016  001DF0  ECD0  F00F         	call	___ftmul	;wreg free
  8017  001DF4  C089  F09E         	movff	?___ftmul,_fround$1396
  8018  001DF8  C08A  F09F         	movff	?___ftmul+1,_fround$1396+1
  8019  001DFC  C08B  F0A0         	movff	?___ftmul+2,_fround$1396+2
  8020                           
  8021                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8022  001E00  0E00               	movlw	0
  8023  001E02  6E34               	movwf	___wmul@multiplicand+1,c
  8024  001E04  0E03               	movlw	3
  8025  001E06  6E33               	movwf	___wmul@multiplicand,c
  8026  001E08  0E00               	movlw	0
  8027  001E0A  6E26               	movwf	___awmod@divisor+1,c
  8028  001E0C  0E0A               	movlw	10
  8029  001E0E  6E25               	movwf	___awmod@divisor,c
  8030  001E10  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8031  001E14  6A24               	clrf	___awmod@dividend+1,c
  8032  001E16  ECD8  F01A         	call	___awmod	;wreg free
  8033  001E1A  C023  F031         	movff	?___awmod,___wmul@multiplier
  8034  001E1E  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8035  001E22  ECF2  F01D         	call	___wmul	;wreg free
  8036  001E26  0E53               	movlw	low __npowers_
  8037  001E28  2431               	addwf	?___wmul,w,c
  8038  001E2A  6EF6               	movwf	tblptrl,c
  8039  001E2C  0EFE               	movlw	high __npowers_
  8040  001E2E  2032               	addwfc	?___wmul+1,w,c
  8041  001E30  6EF7               	movwf	tblptrh,c
  8042  001E32                     	if	0	;There are less than 3 active tblptr bytes
  8043  001E32                     	endif
  8044  001E32  0009               	tblrd		*+
  8045  001E34  CFF5 F08C          	movff	tablat,___ftmul@f2
  8046  001E38  0009               	tblrd		*+
  8047  001E3A  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8048  001E3E  000A               	tblrd		*-
  8049  001E40  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8050  001E44  C09E  F089         	movff	_fround$1396,___ftmul@f1
  8051  001E48  C09F  F08A         	movff	_fround$1396+1,___ftmul@f1+1
  8052  001E4C  C0A0  F08B         	movff	_fround$1396+2,___ftmul@f1+2
  8053  001E50  ECD0  F00F         	call	___ftmul	;wreg free
  8054  001E54  C089  F09B         	movff	?___ftmul,_fround$1397
  8055  001E58  C08A  F09C         	movff	?___ftmul+1,_fround$1397+1
  8056  001E5C  C08B  F09D         	movff	?___ftmul+2,_fround$1397+2
  8057                           
  8058                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8059  001E60  C09B  F089         	movff	_fround$1397,___ftmul@f1
  8060  001E64  C09C  F08A         	movff	_fround$1397+1,___ftmul@f1+1
  8061  001E68  C09D  F08B         	movff	_fround$1397+2,___ftmul@f1+2
  8062  001E6C  0E00               	movlw	0
  8063  001E6E  0100               	movlb	0	; () banked
  8064  001E70  6F8C               	movwf	___ftmul@f2& (0+255),b
  8065  001E72  0E00               	movlw	0
  8066  001E74  0100               	movlb	0	; () banked
  8067  001E76  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8068  001E78  0E3F               	movlw	63
  8069  001E7A  0100               	movlb	0	; () banked
  8070  001E7C  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8071  001E7E  ECD0  F00F         	call	___ftmul	;wreg free
  8072  001E82  C089  F098         	movff	?___ftmul,?_fround
  8073  001E86  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8074  001E8A  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8075  001E8E  0012               	return	
  8076  001E90                     l6198:
  8077                           
  8078                           ;doprnt.c: 415: else if(prec > 10)
  8079  001E90  0E0A               	movlw	10
  8080  001E92  0100               	movlb	0	; () banked
  8081  001E94  65A1               	cpfsgt	fround@prec& (0+255),b
  8082  001E96  D060               	goto	l6206
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8086  001E98  0E00               	movlw	0
  8087  001E9A  6E34               	movwf	___wmul@multiplicand+1,c
  8088  001E9C  0E03               	movlw	3
  8089  001E9E  6E33               	movwf	___wmul@multiplicand,c
  8090  001EA0  0E00               	movlw	0
  8091  001EA2  6E26               	movwf	___awmod@divisor+1,c
  8092  001EA4  0E0A               	movlw	10
  8093  001EA6  6E25               	movwf	___awmod@divisor,c
  8094  001EA8  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8095  001EAC  6A24               	clrf	___awmod@dividend+1,c
  8096  001EAE  ECD8  F01A         	call	___awmod	;wreg free
  8097  001EB2  C023  F031         	movff	?___awmod,___wmul@multiplier
  8098  001EB6  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8099  001EBA  ECF2  F01D         	call	___wmul	;wreg free
  8100  001EBE  0E53               	movlw	low __npowers_
  8101  001EC0  2431               	addwf	?___wmul,w,c
  8102  001EC2  6EF6               	movwf	tblptrl,c
  8103  001EC4  0EFE               	movlw	high __npowers_
  8104  001EC6  2032               	addwfc	?___wmul+1,w,c
  8105  001EC8  6EF7               	movwf	tblptrh,c
  8106  001ECA                     	if	0	;There are less than 3 active tblptr bytes
  8107  001ECA                     	endif
  8108  001ECA  0009               	tblrd		*+
  8109  001ECC  CFF5 F08C          	movff	tablat,___ftmul@f2
  8110  001ED0  0009               	tblrd		*+
  8111  001ED2  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8112  001ED6  000A               	tblrd		*-
  8113  001ED8  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8114  001EDC  0E00               	movlw	0
  8115  001EDE  6E2C               	movwf	___awdiv@divisor+1,c
  8116  001EE0  0E0A               	movlw	10
  8117  001EE2  6E2B               	movwf	___awdiv@divisor,c
  8118  001EE4  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8119  001EE8  6A2A               	clrf	___awdiv@dividend+1,c
  8120  001EEA  ECD8  F019         	call	___awdiv	;wreg free
  8121  001EEE  0E09               	movlw	9
  8122  001EF0  2429               	addwf	?___awdiv,w,c
  8123  001EF2  6E31               	movwf	___wmul@multiplier,c
  8124  001EF4  0E00               	movlw	0
  8125  001EF6  202A               	addwfc	?___awdiv+1,w,c
  8126  001EF8  6E32               	movwf	___wmul@multiplier+1,c
  8127  001EFA  0E00               	movlw	0
  8128  001EFC  6E34               	movwf	___wmul@multiplicand+1,c
  8129  001EFE  0E03               	movlw	3
  8130  001F00  6E33               	movwf	___wmul@multiplicand,c
  8131  001F02  ECF2  F01D         	call	___wmul	;wreg free
  8132  001F06  0E53               	movlw	low __npowers_
  8133  001F08  2431               	addwf	?___wmul,w,c
  8134  001F0A  6EF6               	movwf	tblptrl,c
  8135  001F0C  0EFE               	movlw	high __npowers_
  8136  001F0E  2032               	addwfc	?___wmul+1,w,c
  8137  001F10  6EF7               	movwf	tblptrh,c
  8138  001F12                     	if	0	;There are less than 3 active tblptr bytes
  8139  001F12                     	endif
  8140  001F12  0009               	tblrd		*+
  8141  001F14  CFF5 F089          	movff	tablat,___ftmul@f1
  8142  001F18  0009               	tblrd		*+
  8143  001F1A  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8144  001F1E  000A               	tblrd		*-
  8145  001F20  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8146  001F24  ECD0  F00F         	call	___ftmul	;wreg free
  8147  001F28  C089  F09E         	movff	?___ftmul,_fround$1396
  8148  001F2C  C08A  F09F         	movff	?___ftmul+1,_fround$1396+1
  8149  001F30  C08B  F0A0         	movff	?___ftmul+2,_fround$1396+2
  8150                           
  8151                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8152  001F34  C09E  F089         	movff	_fround$1396,___ftmul@f1
  8153  001F38  C09F  F08A         	movff	_fround$1396+1,___ftmul@f1+1
  8154  001F3C  C0A0  F08B         	movff	_fround$1396+2,___ftmul@f1+2
  8155  001F40  0E00               	movlw	0
  8156  001F42  0100               	movlb	0	; () banked
  8157  001F44  6F8C               	movwf	___ftmul@f2& (0+255),b
  8158  001F46  0E00               	movlw	0
  8159  001F48  0100               	movlb	0	; () banked
  8160  001F4A  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8161  001F4C  0E3F               	movlw	63
  8162  001F4E  0100               	movlb	0	; () banked
  8163  001F50  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8164  001F52  ECD0  F00F         	call	___ftmul	;wreg free
  8165  001F56  D795               	goto	L6
  8166  001F58                     l6206:
  8167                           
  8168                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8169  001F58  0100               	movlb	0	; () banked
  8170  001F5A  51A1               	movf	fround@prec& (0+255),w,b
  8171  001F5C  0D03               	mullw	3
  8172  001F5E  0E53               	movlw	low __npowers_
  8173  001F60  24F3               	addwf	prodl,w,c
  8174  001F62  6EF6               	movwf	tblptrl,c
  8175  001F64  0EFE               	movlw	high __npowers_
  8176  001F66  20F4               	addwfc	prodh,w,c
  8177  001F68  6EF7               	movwf	tblptrh,c
  8178  001F6A                     	if	0	;There are less than 3 active tblptr bytes
  8179  001F6A                     	endif
  8180  001F6A  0009               	tblrd		*+
  8181  001F6C  CFF5 F089          	movff	tablat,___ftmul@f1
  8182  001F70  0009               	tblrd		*+
  8183  001F72  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8184  001F76  000A               	tblrd		*-
  8185  001F78  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8186  001F7C  0E00               	movlw	0
  8187  001F7E  0100               	movlb	0	; () banked
  8188  001F80  6F8C               	movwf	___ftmul@f2& (0+255),b
  8189  001F82  0E00               	movlw	0
  8190  001F84  0100               	movlb	0	; () banked
  8191  001F86  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8192  001F88  0E3F               	movlw	63
  8193  001F8A  0100               	movlb	0	; () banked
  8194  001F8C  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8195  001F8E  ECD0  F00F         	call	___ftmul	;wreg free
  8196  001F92  C089  F098         	movff	?___ftmul,?_fround
  8197  001F96  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8198  001F9A  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8199  001F9E  0012               	return	
  8200  001FA0                     __end_of_fround:
  8201                           	opt stack 0
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           prodh	equ	0xFF4
  8207                           prodl	equ	0xFF3
  8208                           intcon	equ	0xFF2
  8209                           postinc0	equ	0xFEE
  8210                           wreg	equ	0xFE8
  8211                           postdec1	equ	0xFE5
  8212                           fsr1l	equ	0xFE1
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           postdec2	equ	0xFDD
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           
  8220 ;; *************** function ___awmod *****************
  8221 ;; Defined at:
  8222 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;  dividend        2   34[COMRAM] int 
  8225 ;;  divisor         2   36[COMRAM] int 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  sign            1   39[COMRAM] unsigned char 
  8228 ;;  counter         1   38[COMRAM] unsigned char 
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  2   34[COMRAM] int 
  8231 ;; Registers used:
  8232 ;;		wreg, status,2, status,0
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;Total ram usage:        6 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    3
  8245 ;; This function calls:
  8246 ;;		Nothing
  8247 ;; This function is called by:
  8248 ;;		_fround
  8249 ;;		_scale
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           	psect	text20
  8254  0035B0                     __ptext20:
  8255                           	opt stack 0
  8256  0035B0                     ___awmod:
  8257                           	opt stack 24
  8258                           
  8259                           ;incstack = 0
  8260  0035B0  0E00               	movlw	0
  8261  0035B2  6E28               	movwf	___awmod@sign,c
  8262  0035B4  AE24               	btfss	___awmod@dividend+1,7,c
  8263  0035B6  D006               	goto	l6096
  8264  0035B8  6C23               	negf	___awmod@dividend,c
  8265  0035BA  1E24               	comf	___awmod@dividend+1,f,c
  8266  0035BC  B0D8               	btfsc	status,0,c
  8267  0035BE  2A24               	incf	___awmod@dividend+1,f,c
  8268  0035C0  0E01               	movlw	1
  8269  0035C2  6E28               	movwf	___awmod@sign,c
  8270  0035C4                     l6096:
  8271  0035C4  AE26               	btfss	___awmod@divisor+1,7,c
  8272  0035C6  D004               	goto	l6100
  8273  0035C8  6C25               	negf	___awmod@divisor,c
  8274  0035CA  1E26               	comf	___awmod@divisor+1,f,c
  8275  0035CC  B0D8               	btfsc	status,0,c
  8276  0035CE  2A26               	incf	___awmod@divisor+1,f,c
  8277  0035D0                     l6100:
  8278  0035D0  5025               	movf	___awmod@divisor,w,c
  8279  0035D2  1026               	iorwf	___awmod@divisor+1,w,c
  8280  0035D4  B4D8               	btfsc	status,2,c
  8281  0035D6  D018               	goto	l6116
  8282  0035D8  0E01               	movlw	1
  8283  0035DA  6E27               	movwf	___awmod@counter,c
  8284  0035DC  D004               	goto	l6106
  8285  0035DE                     l6104:
  8286  0035DE  90D8               	bcf	status,0,c
  8287  0035E0  3625               	rlcf	___awmod@divisor,f,c
  8288  0035E2  3626               	rlcf	___awmod@divisor+1,f,c
  8289  0035E4  2A27               	incf	___awmod@counter,f,c
  8290  0035E6                     l6106:
  8291  0035E6  AE26               	btfss	___awmod@divisor+1,7,c
  8292  0035E8  D7FA               	goto	l6104
  8293  0035EA                     l6108:
  8294  0035EA  5025               	movf	___awmod@divisor,w,c
  8295  0035EC  5C23               	subwf	___awmod@dividend,w,c
  8296  0035EE  5026               	movf	___awmod@divisor+1,w,c
  8297  0035F0  5824               	subwfb	___awmod@dividend+1,w,c
  8298  0035F2  A0D8               	btfss	status,0,c
  8299  0035F4  D004               	goto	l6112
  8300  0035F6  5025               	movf	___awmod@divisor,w,c
  8301  0035F8  5E23               	subwf	___awmod@dividend,f,c
  8302  0035FA  5026               	movf	___awmod@divisor+1,w,c
  8303  0035FC  5A24               	subwfb	___awmod@dividend+1,f,c
  8304  0035FE                     l6112:
  8305  0035FE  90D8               	bcf	status,0,c
  8306  003600  3226               	rrcf	___awmod@divisor+1,f,c
  8307  003602  3225               	rrcf	___awmod@divisor,f,c
  8308  003604  2E27               	decfsz	___awmod@counter,f,c
  8309  003606  D7F1               	goto	l6108
  8310  003608                     l6116:
  8311  003608  5028               	movf	___awmod@sign,w,c
  8312  00360A  B4D8               	btfsc	status,2,c
  8313  00360C  D004               	goto	l6120
  8314  00360E  6C23               	negf	___awmod@dividend,c
  8315  003610  1E24               	comf	___awmod@dividend+1,f,c
  8316  003612  B0D8               	btfsc	status,0,c
  8317  003614  2A24               	incf	___awmod@dividend+1,f,c
  8318  003616                     l6120:
  8319  003616  C023  F023         	movff	___awmod@dividend,?___awmod
  8320  00361A  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
  8321  00361E  0012               	return	
  8322  003620                     __end_of___awmod:
  8323                           	opt stack 0
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           intcon	equ	0xFF2
  8331                           postinc0	equ	0xFEE
  8332                           wreg	equ	0xFE8
  8333                           postdec1	equ	0xFE5
  8334                           fsr1l	equ	0xFE1
  8335                           indf2	equ	0xFDF
  8336                           postinc2	equ	0xFDE
  8337                           postdec2	equ	0xFDD
  8338                           fsr2h	equ	0xFDA
  8339                           fsr2l	equ	0xFD9
  8340                           status	equ	0xFD8
  8341                           
  8342 ;; *************** function ___awdiv *****************
  8343 ;; Defined at:
  8344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;  dividend        2   40[COMRAM] int 
  8347 ;;  divisor         2   42[COMRAM] int 
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;  quotient        2   46[COMRAM] int 
  8350 ;;  sign            1   45[COMRAM] unsigned char 
  8351 ;;  counter         1   44[COMRAM] unsigned char 
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  2   40[COMRAM] int 
  8354 ;; Registers used:
  8355 ;;		wreg, status,2, status,0
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;Total ram usage:        8 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    3
  8368 ;; This function calls:
  8369 ;;		Nothing
  8370 ;; This function is called by:
  8371 ;;		_fround
  8372 ;;		_scale
  8373 ;;		_printf
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           	psect	text21
  8378  0033B0                     __ptext21:
  8379                           	opt stack 0
  8380  0033B0                     ___awdiv:
  8381                           	opt stack 24
  8382                           
  8383                           ;incstack = 0
  8384  0033B0  0E00               	movlw	0
  8385  0033B2  6E2E               	movwf	___awdiv@sign,c
  8386  0033B4  AE2C               	btfss	___awdiv@divisor+1,7,c
  8387  0033B6  D006               	goto	l6052
  8388  0033B8  6C2B               	negf	___awdiv@divisor,c
  8389  0033BA  1E2C               	comf	___awdiv@divisor+1,f,c
  8390  0033BC  B0D8               	btfsc	status,0,c
  8391  0033BE  2A2C               	incf	___awdiv@divisor+1,f,c
  8392  0033C0  0E01               	movlw	1
  8393  0033C2  6E2E               	movwf	___awdiv@sign,c
  8394  0033C4                     l6052:
  8395  0033C4  AE2A               	btfss	___awdiv@dividend+1,7,c
  8396  0033C6  D006               	goto	l6058
  8397  0033C8  6C29               	negf	___awdiv@dividend,c
  8398  0033CA  1E2A               	comf	___awdiv@dividend+1,f,c
  8399  0033CC  B0D8               	btfsc	status,0,c
  8400  0033CE  2A2A               	incf	___awdiv@dividend+1,f,c
  8401  0033D0  0E01               	movlw	1
  8402  0033D2  1A2E               	xorwf	___awdiv@sign,f,c
  8403  0033D4                     l6058:
  8404  0033D4  0E00               	movlw	0
  8405  0033D6  6E30               	movwf	___awdiv@quotient+1,c
  8406  0033D8  0E00               	movlw	0
  8407  0033DA  6E2F               	movwf	___awdiv@quotient,c
  8408  0033DC  502B               	movf	___awdiv@divisor,w,c
  8409  0033DE  102C               	iorwf	___awdiv@divisor+1,w,c
  8410  0033E0  B4D8               	btfsc	status,2,c
  8411  0033E2  D01C               	goto	l6080
  8412  0033E4  0E01               	movlw	1
  8413  0033E6  6E2D               	movwf	___awdiv@counter,c
  8414  0033E8  D004               	goto	l6066
  8415  0033EA                     l6064:
  8416  0033EA  90D8               	bcf	status,0,c
  8417  0033EC  362B               	rlcf	___awdiv@divisor,f,c
  8418  0033EE  362C               	rlcf	___awdiv@divisor+1,f,c
  8419  0033F0  2A2D               	incf	___awdiv@counter,f,c
  8420  0033F2                     l6066:
  8421  0033F2  AE2C               	btfss	___awdiv@divisor+1,7,c
  8422  0033F4  D7FA               	goto	l6064
  8423  0033F6                     l6068:
  8424  0033F6  90D8               	bcf	status,0,c
  8425  0033F8  362F               	rlcf	___awdiv@quotient,f,c
  8426  0033FA  3630               	rlcf	___awdiv@quotient+1,f,c
  8427  0033FC  502B               	movf	___awdiv@divisor,w,c
  8428  0033FE  5C29               	subwf	___awdiv@dividend,w,c
  8429  003400  502C               	movf	___awdiv@divisor+1,w,c
  8430  003402  582A               	subwfb	___awdiv@dividend+1,w,c
  8431  003404  A0D8               	btfss	status,0,c
  8432  003406  D005               	goto	l6076
  8433  003408  502B               	movf	___awdiv@divisor,w,c
  8434  00340A  5E29               	subwf	___awdiv@dividend,f,c
  8435  00340C  502C               	movf	___awdiv@divisor+1,w,c
  8436  00340E  5A2A               	subwfb	___awdiv@dividend+1,f,c
  8437  003410  802F               	bsf	___awdiv@quotient,0,c
  8438  003412                     l6076:
  8439  003412  90D8               	bcf	status,0,c
  8440  003414  322C               	rrcf	___awdiv@divisor+1,f,c
  8441  003416  322B               	rrcf	___awdiv@divisor,f,c
  8442  003418  2E2D               	decfsz	___awdiv@counter,f,c
  8443  00341A  D7ED               	goto	l6068
  8444  00341C                     l6080:
  8445  00341C  502E               	movf	___awdiv@sign,w,c
  8446  00341E  B4D8               	btfsc	status,2,c
  8447  003420  D004               	goto	l6084
  8448  003422  6C2F               	negf	___awdiv@quotient,c
  8449  003424  1E30               	comf	___awdiv@quotient+1,f,c
  8450  003426  B0D8               	btfsc	status,0,c
  8451  003428  2A30               	incf	___awdiv@quotient+1,f,c
  8452  00342A                     l6084:
  8453  00342A  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  8454  00342E  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  8455  003432  0012               	return	
  8456  003434                     __end_of___awdiv:
  8457                           	opt stack 0
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           prodh	equ	0xFF4
  8463                           prodl	equ	0xFF3
  8464                           intcon	equ	0xFF2
  8465                           postinc0	equ	0xFEE
  8466                           wreg	equ	0xFE8
  8467                           postdec1	equ	0xFE5
  8468                           fsr1l	equ	0xFE1
  8469                           indf2	equ	0xFDF
  8470                           postinc2	equ	0xFDE
  8471                           postdec2	equ	0xFDD
  8472                           fsr2h	equ	0xFDA
  8473                           fsr2l	equ	0xFD9
  8474                           status	equ	0xFD8
  8475                           
  8476 ;; *************** function __tdiv_to_l_ *****************
  8477 ;; Defined at:
  8478 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;  f1              3   34[COMRAM] float 
  8481 ;;  f2              3   37[COMRAM] float 
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;  quot            4   43[COMRAM] unsigned long 
  8484 ;;  exp1            1   48[COMRAM] unsigned char 
  8485 ;;  cntr            1   47[COMRAM] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  4   34[COMRAM] unsigned long 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8495 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;Total ram usage:       15 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    3
  8502 ;; This function calls:
  8503 ;;		Nothing
  8504 ;; This function is called by:
  8505 ;;		_printf
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text22
  8510  00239A                     __ptext22:
  8511                           	opt stack 0
  8512  00239A                     __tdiv_to_l_:
  8513                           	opt stack 25
  8514                           
  8515                           ;incstack = 0
  8516  00239A  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8517  00239E  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8518  0023A0  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8519  0023A2  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
  8520  0023A4  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8521  0023A6  E301               	bnc	u6191
  8522  0023A8  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8523  0023AA                     u6191:
  8524  0023AA  5029               	movf	??__tdiv_to_l_,w,c
  8525  0023AC  6E31               	movwf	__tdiv_to_l_@exp1,c
  8526  0023AE  5031               	movf	__tdiv_to_l_@exp1,w,c
  8527  0023B0  A4D8               	btfss	status,2,c
  8528  0023B2  D009               	goto	l6266
  8529  0023B4  0E00               	movlw	0
  8530  0023B6  6E23               	movwf	?__tdiv_to_l_,c
  8531  0023B8  0E00               	movlw	0
  8532  0023BA  6E24               	movwf	?__tdiv_to_l_+1,c
  8533  0023BC  0E00               	movlw	0
  8534  0023BE  6E25               	movwf	?__tdiv_to_l_+2,c
  8535  0023C0  0E00               	movlw	0
  8536  0023C2  6E26               	movwf	?__tdiv_to_l_+3,c
  8537  0023C4  0012               	return	
  8538  0023C6                     l6266:
  8539  0023C6  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8540  0023CA  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8541  0023CC  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8542  0023CE  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
  8543  0023D0  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8544  0023D2  E301               	bnc	u6211
  8545  0023D4  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8546  0023D6                     u6211:
  8547  0023D6  5029               	movf	??__tdiv_to_l_,w,c
  8548  0023D8  6E30               	movwf	__tdiv_to_l_@cntr,c
  8549  0023DA  5030               	movf	__tdiv_to_l_@cntr,w,c
  8550  0023DC  A4D8               	btfss	status,2,c
  8551  0023DE  D009               	goto	l6272
  8552  0023E0  0E00               	movlw	0
  8553  0023E2  6E23               	movwf	?__tdiv_to_l_,c
  8554  0023E4  0E00               	movlw	0
  8555  0023E6  6E24               	movwf	?__tdiv_to_l_+1,c
  8556  0023E8  0E00               	movlw	0
  8557  0023EA  6E25               	movwf	?__tdiv_to_l_+2,c
  8558  0023EC  0E00               	movlw	0
  8559  0023EE  6E26               	movwf	?__tdiv_to_l_+3,c
  8560  0023F0  0012               	return	
  8561  0023F2                     l6272:
  8562  0023F2  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
  8563  0023F4  0EFF               	movlw	255
  8564  0023F6  1623               	andwf	__tdiv_to_l_@f1,f,c
  8565  0023F8  0EFF               	movlw	255
  8566  0023FA  1624               	andwf	__tdiv_to_l_@f1+1,f,c
  8567  0023FC  0E00               	movlw	0
  8568  0023FE  1625               	andwf	__tdiv_to_l_@f1+2,f,c
  8569  002400  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
  8570  002402  0EFF               	movlw	255
  8571  002404  1626               	andwf	__tdiv_to_l_@f2,f,c
  8572  002406  0EFF               	movlw	255
  8573  002408  1627               	andwf	__tdiv_to_l_@f2+1,f,c
  8574  00240A  0E00               	movlw	0
  8575  00240C  1628               	andwf	__tdiv_to_l_@f2+2,f,c
  8576  00240E  0E00               	movlw	0
  8577  002410  6E2C               	movwf	__tdiv_to_l_@quot,c
  8578  002412  0E00               	movlw	0
  8579  002414  6E2D               	movwf	__tdiv_to_l_@quot+1,c
  8580  002416  0E00               	movlw	0
  8581  002418  6E2E               	movwf	__tdiv_to_l_@quot+2,c
  8582  00241A  0E00               	movlw	0
  8583  00241C  6E2F               	movwf	__tdiv_to_l_@quot+3,c
  8584  00241E  0E7F               	movlw	127
  8585  002420  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8586  002422  5030               	movf	__tdiv_to_l_@cntr,w,c
  8587  002424  0F98               	addlw	152
  8588  002426  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8589  002428  0E18               	movlw	24
  8590  00242A  6E30               	movwf	__tdiv_to_l_@cntr,c
  8591  00242C                     l1172:
  8592  00242C  90D8               	bcf	status,0,c
  8593  00242E  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8594  002430  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8595  002432  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8596  002434  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8597  002436  5026               	movf	__tdiv_to_l_@f2,w,c
  8598  002438  5C23               	subwf	__tdiv_to_l_@f1,w,c
  8599  00243A  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8600  00243C  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
  8601  00243E  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8602  002440  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
  8603  002442  A0D8               	btfss	status,0,c
  8604  002444  D007               	goto	l1173
  8605  002446  5026               	movf	__tdiv_to_l_@f2,w,c
  8606  002448  5E23               	subwf	__tdiv_to_l_@f1,f,c
  8607  00244A  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8608  00244C  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
  8609  00244E  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8610  002450  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
  8611  002452  802C               	bsf	__tdiv_to_l_@quot,0,c
  8612  002454                     l1173:
  8613  002454  90D8               	bcf	status,0,c
  8614  002456  3623               	rlcf	__tdiv_to_l_@f1,f,c
  8615  002458  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
  8616  00245A  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
  8617  00245C  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
  8618  00245E  D7E6               	goto	l1172
  8619  002460  AE31               	btfss	__tdiv_to_l_@exp1,7,c
  8620  002462  D016               	goto	l6306
  8621  002464  5031               	movf	__tdiv_to_l_@exp1,w,c
  8622  002466  0A80               	xorlw	128
  8623  002468  0F97               	addlw	151
  8624  00246A  B0D8               	btfsc	status,0,c
  8625  00246C  D009               	goto	l6302
  8626  00246E  0E00               	movlw	0
  8627  002470  6E23               	movwf	?__tdiv_to_l_,c
  8628  002472  0E00               	movlw	0
  8629  002474  6E24               	movwf	?__tdiv_to_l_+1,c
  8630  002476  0E00               	movlw	0
  8631  002478  6E25               	movwf	?__tdiv_to_l_+2,c
  8632  00247A  0E00               	movlw	0
  8633  00247C  6E26               	movwf	?__tdiv_to_l_+3,c
  8634  00247E  0012               	return	
  8635  002480                     l6302:
  8636  002480  90D8               	bcf	status,0,c
  8637  002482  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
  8638  002484  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
  8639  002486  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
  8640  002488  322C               	rrcf	__tdiv_to_l_@quot,f,c
  8641  00248A  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
  8642  00248C  D7F9               	goto	l6302
  8643  00248E  D015               	goto	l1179
  8644  002490                     l6306:
  8645  002490  0E17               	movlw	23
  8646  002492  6431               	cpfsgt	__tdiv_to_l_@exp1,c
  8647  002494  D00F               	goto	l6314
  8648  002496  0E00               	movlw	0
  8649  002498  6E23               	movwf	?__tdiv_to_l_,c
  8650  00249A  0E00               	movlw	0
  8651  00249C  6E24               	movwf	?__tdiv_to_l_+1,c
  8652  00249E  0E00               	movlw	0
  8653  0024A0  6E25               	movwf	?__tdiv_to_l_+2,c
  8654  0024A2  0E00               	movlw	0
  8655  0024A4  6E26               	movwf	?__tdiv_to_l_+3,c
  8656  0024A6  0012               	return	
  8657  0024A8                     l6312:
  8658  0024A8  90D8               	bcf	status,0,c
  8659  0024AA  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8660  0024AC  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8661  0024AE  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8662  0024B0  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8663  0024B2  0631               	decf	__tdiv_to_l_@exp1,f,c
  8664  0024B4                     l6314:
  8665  0024B4  5031               	movf	__tdiv_to_l_@exp1,w,c
  8666  0024B6  A4D8               	btfss	status,2,c
  8667  0024B8  D7F7               	goto	l6312
  8668  0024BA                     l1179:
  8669  0024BA  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8670  0024BE  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8671  0024C2  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8672  0024C6  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8673  0024CA  0012               	return		;funcret
  8674  0024CC                     __end_of__tdiv_to_l_:
  8675                           	opt stack 0
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           postinc0	equ	0xFEE
  8684                           wreg	equ	0xFE8
  8685                           postdec1	equ	0xFE5
  8686                           fsr1l	equ	0xFE1
  8687                           indf2	equ	0xFDF
  8688                           postinc2	equ	0xFDE
  8689                           postdec2	equ	0xFDD
  8690                           fsr2h	equ	0xFDA
  8691                           fsr2l	equ	0xFD9
  8692                           status	equ	0xFD8
  8693                           
  8694 ;; *************** function __div_to_l_ *****************
  8695 ;; Defined at:
  8696 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;  f1              3   34[COMRAM] unsigned long 
  8699 ;;  f2              3   37[COMRAM] unsigned long 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  quot            4   40[COMRAM] unsigned long 
  8702 ;;  exp1            1   45[COMRAM] unsigned char 
  8703 ;;  cntr            1   44[COMRAM] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  4   34[COMRAM] unsigned long 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:       12 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    3
  8720 ;; This function calls:
  8721 ;;		Nothing
  8722 ;; This function is called by:
  8723 ;;		_printf
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text23
  8728  0024CC                     __ptext23:
  8729                           	opt stack 0
  8730  0024CC                     __div_to_l_:
  8731                           	opt stack 25
  8732                           
  8733                           ;incstack = 0
  8734  0024CC  3425               	rlcf	__div_to_l_@f1+2,w,c
  8735  0024CE  3426               	rlcf	__div_to_l_@f1+3,w,c
  8736  0024D0  6E2E               	movwf	__div_to_l_@exp1,c
  8737  0024D2  502E               	movf	__div_to_l_@exp1,w,c
  8738  0024D4  A4D8               	btfss	status,2,c
  8739  0024D6  D009               	goto	l6322
  8740  0024D8  0E00               	movlw	0
  8741  0024DA  6E23               	movwf	?__div_to_l_,c
  8742  0024DC  0E00               	movlw	0
  8743  0024DE  6E24               	movwf	?__div_to_l_+1,c
  8744  0024E0  0E00               	movlw	0
  8745  0024E2  6E25               	movwf	?__div_to_l_+2,c
  8746  0024E4  0E00               	movlw	0
  8747  0024E6  6E26               	movwf	?__div_to_l_+3,c
  8748  0024E8  0012               	return	
  8749  0024EA                     l6322:
  8750  0024EA  3428               	rlcf	__div_to_l_@f2+2,w,c
  8751  0024EC  3429               	rlcf	__div_to_l_@f2+3,w,c
  8752  0024EE  6E2D               	movwf	__div_to_l_@cntr,c
  8753  0024F0  502D               	movf	__div_to_l_@cntr,w,c
  8754  0024F2  A4D8               	btfss	status,2,c
  8755  0024F4  D009               	goto	l6328
  8756  0024F6  0E00               	movlw	0
  8757  0024F8  6E23               	movwf	?__div_to_l_,c
  8758  0024FA  0E00               	movlw	0
  8759  0024FC  6E24               	movwf	?__div_to_l_+1,c
  8760  0024FE  0E00               	movlw	0
  8761  002500  6E25               	movwf	?__div_to_l_+2,c
  8762  002502  0E00               	movlw	0
  8763  002504  6E26               	movwf	?__div_to_l_+3,c
  8764  002506  0012               	return	
  8765  002508                     l6328:
  8766  002508  8E25               	bsf	__div_to_l_@f1+2,7,c
  8767  00250A  0EFF               	movlw	255
  8768  00250C  1623               	andwf	__div_to_l_@f1,f,c
  8769  00250E  0EFF               	movlw	255
  8770  002510  1624               	andwf	__div_to_l_@f1+1,f,c
  8771  002512  0EFF               	movlw	255
  8772  002514  1625               	andwf	__div_to_l_@f1+2,f,c
  8773  002516  0E00               	movlw	0
  8774  002518  1626               	andwf	__div_to_l_@f1+3,f,c
  8775  00251A  8E28               	bsf	__div_to_l_@f2+2,7,c
  8776  00251C  0EFF               	movlw	255
  8777  00251E  1626               	andwf	__div_to_l_@f2,f,c
  8778  002520  0EFF               	movlw	255
  8779  002522  1627               	andwf	__div_to_l_@f2+1,f,c
  8780  002524  0EFF               	movlw	255
  8781  002526  1628               	andwf	__div_to_l_@f2+2,f,c
  8782  002528  0E00               	movlw	0
  8783  00252A  1629               	andwf	__div_to_l_@f2+3,f,c
  8784  00252C  0E00               	movlw	0
  8785  00252E  6E29               	movwf	__div_to_l_@quot,c
  8786  002530  0E00               	movlw	0
  8787  002532  6E2A               	movwf	__div_to_l_@quot+1,c
  8788  002534  0E00               	movlw	0
  8789  002536  6E2B               	movwf	__div_to_l_@quot+2,c
  8790  002538  0E00               	movlw	0
  8791  00253A  6E2C               	movwf	__div_to_l_@quot+3,c
  8792  00253C  0E7F               	movlw	127
  8793  00253E  5E2E               	subwf	__div_to_l_@exp1,f,c
  8794  002540  502D               	movf	__div_to_l_@cntr,w,c
  8795  002542  0FA0               	addlw	160
  8796  002544  5E2E               	subwf	__div_to_l_@exp1,f,c
  8797  002546  0E20               	movlw	32
  8798  002548  6E2D               	movwf	__div_to_l_@cntr,c
  8799  00254A                     l6342:
  8800  00254A  90D8               	bcf	status,0,c
  8801  00254C  3629               	rlcf	__div_to_l_@quot,f,c
  8802  00254E  362A               	rlcf	__div_to_l_@quot+1,f,c
  8803  002550  362B               	rlcf	__div_to_l_@quot+2,f,c
  8804  002552  362C               	rlcf	__div_to_l_@quot+3,f,c
  8805  002554  5026               	movf	__div_to_l_@f2,w,c
  8806  002556  5C23               	subwf	__div_to_l_@f1,w,c
  8807  002558  5027               	movf	__div_to_l_@f2+1,w,c
  8808  00255A  5824               	subwfb	__div_to_l_@f1+1,w,c
  8809  00255C  5028               	movf	__div_to_l_@f2+2,w,c
  8810  00255E  5825               	subwfb	__div_to_l_@f1+2,w,c
  8811  002560  5029               	movf	__div_to_l_@f2+3,w,c
  8812  002562  5826               	subwfb	__div_to_l_@f1+3,w,c
  8813  002564  A0D8               	btfss	status,0,c
  8814  002566  D009               	goto	l6350
  8815  002568  5026               	movf	__div_to_l_@f2,w,c
  8816  00256A  5E23               	subwf	__div_to_l_@f1,f,c
  8817  00256C  5027               	movf	__div_to_l_@f2+1,w,c
  8818  00256E  5A24               	subwfb	__div_to_l_@f1+1,f,c
  8819  002570  5028               	movf	__div_to_l_@f2+2,w,c
  8820  002572  5A25               	subwfb	__div_to_l_@f1+2,f,c
  8821  002574  5029               	movf	__div_to_l_@f2+3,w,c
  8822  002576  5A26               	subwfb	__div_to_l_@f1+3,f,c
  8823  002578  8029               	bsf	__div_to_l_@quot,0,c
  8824  00257A                     l6350:
  8825  00257A  90D8               	bcf	status,0,c
  8826  00257C  3623               	rlcf	__div_to_l_@f1,f,c
  8827  00257E  3624               	rlcf	__div_to_l_@f1+1,f,c
  8828  002580  3625               	rlcf	__div_to_l_@f1+2,f,c
  8829  002582  3626               	rlcf	__div_to_l_@f1+3,f,c
  8830  002584  2E2D               	decfsz	__div_to_l_@cntr,f,c
  8831  002586  D7E1               	goto	l6342
  8832  002588  AE2E               	btfss	__div_to_l_@exp1,7,c
  8833  00258A  D016               	goto	l6366
  8834  00258C  502E               	movf	__div_to_l_@exp1,w,c
  8835  00258E  0A80               	xorlw	128
  8836  002590  0F9F               	addlw	159
  8837  002592  B0D8               	btfsc	status,0,c
  8838  002594  D009               	goto	l6362
  8839  002596  0E00               	movlw	0
  8840  002598  6E23               	movwf	?__div_to_l_,c
  8841  00259A  0E00               	movlw	0
  8842  00259C  6E24               	movwf	?__div_to_l_+1,c
  8843  00259E  0E00               	movlw	0
  8844  0025A0  6E25               	movwf	?__div_to_l_+2,c
  8845  0025A2  0E00               	movlw	0
  8846  0025A4  6E26               	movwf	?__div_to_l_+3,c
  8847  0025A6  0012               	return	
  8848  0025A8                     l6362:
  8849  0025A8  90D8               	bcf	status,0,c
  8850  0025AA  322C               	rrcf	__div_to_l_@quot+3,f,c
  8851  0025AC  322B               	rrcf	__div_to_l_@quot+2,f,c
  8852  0025AE  322A               	rrcf	__div_to_l_@quot+1,f,c
  8853  0025B0  3229               	rrcf	__div_to_l_@quot,f,c
  8854  0025B2  3E2E               	incfsz	__div_to_l_@exp1,f,c
  8855  0025B4  D7F9               	goto	l6362
  8856  0025B6  D015               	goto	l1075
  8857  0025B8                     l6366:
  8858  0025B8  0E1F               	movlw	31
  8859  0025BA  642E               	cpfsgt	__div_to_l_@exp1,c
  8860  0025BC  D00F               	goto	l6374
  8861  0025BE  0E00               	movlw	0
  8862  0025C0  6E23               	movwf	?__div_to_l_,c
  8863  0025C2  0E00               	movlw	0
  8864  0025C4  6E24               	movwf	?__div_to_l_+1,c
  8865  0025C6  0E00               	movlw	0
  8866  0025C8  6E25               	movwf	?__div_to_l_+2,c
  8867  0025CA  0E00               	movlw	0
  8868  0025CC  6E26               	movwf	?__div_to_l_+3,c
  8869  0025CE  0012               	return	
  8870  0025D0                     l6372:
  8871  0025D0  90D8               	bcf	status,0,c
  8872  0025D2  3629               	rlcf	__div_to_l_@quot,f,c
  8873  0025D4  362A               	rlcf	__div_to_l_@quot+1,f,c
  8874  0025D6  362B               	rlcf	__div_to_l_@quot+2,f,c
  8875  0025D8  362C               	rlcf	__div_to_l_@quot+3,f,c
  8876  0025DA  062E               	decf	__div_to_l_@exp1,f,c
  8877  0025DC                     l6374:
  8878  0025DC  502E               	movf	__div_to_l_@exp1,w,c
  8879  0025DE  A4D8               	btfss	status,2,c
  8880  0025E0  D7F7               	goto	l6372
  8881  0025E2                     l1075:
  8882  0025E2  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
  8883  0025E6  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8884  0025EA  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8885  0025EE  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8886  0025F2  0012               	return		;funcret
  8887  0025F4                     __end_of__div_to_l_:
  8888                           	opt stack 0
  8889                           tblptru	equ	0xFF8
  8890                           tblptrh	equ	0xFF7
  8891                           tblptrl	equ	0xFF6
  8892                           tablat	equ	0xFF5
  8893                           prodh	equ	0xFF4
  8894                           prodl	equ	0xFF3
  8895                           intcon	equ	0xFF2
  8896                           postinc0	equ	0xFEE
  8897                           wreg	equ	0xFE8
  8898                           postdec1	equ	0xFE5
  8899                           fsr1l	equ	0xFE1
  8900                           indf2	equ	0xFDF
  8901                           postinc2	equ	0xFDE
  8902                           postdec2	equ	0xFDD
  8903                           fsr2h	equ	0xFDA
  8904                           fsr2l	equ	0xFD9
  8905                           status	equ	0xFD8
  8906                           
  8907 ;; *************** function ___lltoft *****************
  8908 ;; Defined at:
  8909 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;  c               4   42[COMRAM] unsigned long 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  exp             1   50[COMRAM] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  3   42[COMRAM] float 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8923 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;Total ram usage:        9 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    4
  8930 ;; This function calls:
  8931 ;;		___ftpack
  8932 ;; This function is called by:
  8933 ;;		_printf
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text24
  8938  00381C                     __ptext24:
  8939                           	opt stack 0
  8940  00381C                     ___lltoft:
  8941                           	opt stack 24
  8942                           
  8943                           ;incstack = 0
  8944  00381C  0E8E               	movlw	142
  8945  00381E  6E33               	movwf	___lltoft@exp,c
  8946  003820  D006               	goto	l6546
  8947  003822                     l6544:
  8948  003822  90D8               	bcf	status,0,c
  8949  003824  322E               	rrcf	___lltoft@c+3,f,c
  8950  003826  322D               	rrcf	___lltoft@c+2,f,c
  8951  003828  322C               	rrcf	___lltoft@c+1,f,c
  8952  00382A  322B               	rrcf	___lltoft@c,f,c
  8953  00382C  2A33               	incf	___lltoft@exp,f,c
  8954  00382E                     l6546:
  8955  00382E  0E00               	movlw	0
  8956  003830  142B               	andwf	___lltoft@c,w,c
  8957  003832  6E2F               	movwf	??___lltoft& (0+255),c
  8958  003834  0E00               	movlw	0
  8959  003836  142C               	andwf	___lltoft@c+1,w,c
  8960  003838  6E30               	movwf	(??___lltoft+1)& (0+255),c
  8961  00383A  0E00               	movlw	0
  8962  00383C  142D               	andwf	___lltoft@c+2,w,c
  8963  00383E  6E31               	movwf	(??___lltoft+2)& (0+255),c
  8964  003840  0EFF               	movlw	255
  8965  003842  142E               	andwf	___lltoft@c+3,w,c
  8966  003844  6E32               	movwf	(??___lltoft+3)& (0+255),c
  8967  003846  502F               	movf	??___lltoft,w,c
  8968  003848  1030               	iorwf	??___lltoft+1,w,c
  8969  00384A  1031               	iorwf	??___lltoft+2,w,c
  8970  00384C  1032               	iorwf	??___lltoft+3,w,c
  8971  00384E  A4D8               	btfss	status,2,c
  8972  003850  D7E8               	goto	l6544
  8973  003852  C02B  F023         	movff	___lltoft@c,___ftpack@arg
  8974  003856  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
  8975  00385A  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
  8976  00385E  C033  F026         	movff	___lltoft@exp,___ftpack@exp
  8977  003862  0E00               	movlw	0
  8978  003864  6E27               	movwf	___ftpack@sign,c
  8979  003866  EC10  F018         	call	___ftpack	;wreg free
  8980  00386A  C023  F02B         	movff	?___ftpack,?___lltoft
  8981  00386E  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
  8982  003872  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
  8983  003876  0012               	return	
  8984  003878                     __end_of___lltoft:
  8985                           	opt stack 0
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           intcon	equ	0xFF2
  8993                           postinc0	equ	0xFEE
  8994                           wreg	equ	0xFE8
  8995                           postdec1	equ	0xFE5
  8996                           fsr1l	equ	0xFE1
  8997                           indf2	equ	0xFDF
  8998                           postinc2	equ	0xFDE
  8999                           postdec2	equ	0xFDD
  9000                           fsr2h	equ	0xFDA
  9001                           fsr2l	equ	0xFD9
  9002                           status	equ	0xFD8
  9003                           
  9004 ;; *************** function ___llmod *****************
  9005 ;; Defined at:
  9006 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  dividend        4   47[COMRAM] unsigned long 
  9009 ;;  divisor         4   51[COMRAM] unsigned long 
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;  counter         1   55[COMRAM] unsigned char 
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  4   47[COMRAM] unsigned long 
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9021 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;Total ram usage:        9 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    3
  9028 ;; This function calls:
  9029 ;;		Nothing
  9030 ;; This function is called by:
  9031 ;;		_printf
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           	psect	text25
  9036  003690                     __ptext25:
  9037                           	opt stack 0
  9038  003690                     ___llmod:
  9039                           	opt stack 25
  9040                           
  9041                           ;incstack = 0
  9042  003690  5034               	movf	___llmod@divisor,w,c
  9043  003692  1035               	iorwf	___llmod@divisor+1,w,c
  9044  003694  1036               	iorwf	___llmod@divisor+2,w,c
  9045  003696  1037               	iorwf	___llmod@divisor+3,w,c
  9046  003698  B4D8               	btfsc	status,2,c
  9047  00369A  D024               	goto	l1264
  9048  00369C  0E01               	movlw	1
  9049  00369E  6E38               	movwf	___llmod@counter,c
  9050  0036A0  D006               	goto	l6532
  9051  0036A2                     l6530:
  9052  0036A2  90D8               	bcf	status,0,c
  9053  0036A4  3634               	rlcf	___llmod@divisor,f,c
  9054  0036A6  3635               	rlcf	___llmod@divisor+1,f,c
  9055  0036A8  3636               	rlcf	___llmod@divisor+2,f,c
  9056  0036AA  3637               	rlcf	___llmod@divisor+3,f,c
  9057  0036AC  2A38               	incf	___llmod@counter,f,c
  9058  0036AE                     l6532:
  9059  0036AE  AE37               	btfss	___llmod@divisor+3,7,c
  9060  0036B0  D7F8               	goto	l6530
  9061  0036B2                     l6534:
  9062  0036B2  5034               	movf	___llmod@divisor,w,c
  9063  0036B4  5C30               	subwf	___llmod@dividend,w,c
  9064  0036B6  5035               	movf	___llmod@divisor+1,w,c
  9065  0036B8  5831               	subwfb	___llmod@dividend+1,w,c
  9066  0036BA  5036               	movf	___llmod@divisor+2,w,c
  9067  0036BC  5832               	subwfb	___llmod@dividend+2,w,c
  9068  0036BE  5037               	movf	___llmod@divisor+3,w,c
  9069  0036C0  5833               	subwfb	___llmod@dividend+3,w,c
  9070  0036C2  A0D8               	btfss	status,0,c
  9071  0036C4  D008               	goto	l6538
  9072  0036C6  5034               	movf	___llmod@divisor,w,c
  9073  0036C8  5E30               	subwf	___llmod@dividend,f,c
  9074  0036CA  5035               	movf	___llmod@divisor+1,w,c
  9075  0036CC  5A31               	subwfb	___llmod@dividend+1,f,c
  9076  0036CE  5036               	movf	___llmod@divisor+2,w,c
  9077  0036D0  5A32               	subwfb	___llmod@dividend+2,f,c
  9078  0036D2  5037               	movf	___llmod@divisor+3,w,c
  9079  0036D4  5A33               	subwfb	___llmod@dividend+3,f,c
  9080  0036D6                     l6538:
  9081  0036D6  90D8               	bcf	status,0,c
  9082  0036D8  3237               	rrcf	___llmod@divisor+3,f,c
  9083  0036DA  3236               	rrcf	___llmod@divisor+2,f,c
  9084  0036DC  3235               	rrcf	___llmod@divisor+1,f,c
  9085  0036DE  3234               	rrcf	___llmod@divisor,f,c
  9086  0036E0  2E38               	decfsz	___llmod@counter,f,c
  9087  0036E2  D7E7               	goto	l6534
  9088  0036E4                     l1264:
  9089  0036E4  C030  F030         	movff	___llmod@dividend,?___llmod
  9090  0036E8  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
  9091  0036EC  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
  9092  0036F0  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
  9093  0036F4  0012               	return		;funcret
  9094  0036F6                     __end_of___llmod:
  9095                           	opt stack 0
  9096                           tblptru	equ	0xFF8
  9097                           tblptrh	equ	0xFF7
  9098                           tblptrl	equ	0xFF6
  9099                           tablat	equ	0xFF5
  9100                           prodh	equ	0xFF4
  9101                           prodl	equ	0xFF3
  9102                           intcon	equ	0xFF2
  9103                           postinc0	equ	0xFEE
  9104                           wreg	equ	0xFE8
  9105                           postdec1	equ	0xFE5
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           postdec2	equ	0xFDD
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function ___ftsub *****************
  9115 ;; Defined at:
  9116 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;  f1              3   46[BANK0 ] float 
  9119 ;;  f2              3   49[BANK0 ] float 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;		None
  9122 ;; Return value:  Size  Location     Type
  9123 ;;                  3   46[BANK0 ] float 
  9124 ;; Registers used:
  9125 ;;		wreg, status,2, status,0, cstack
  9126 ;; Tracked objects:
  9127 ;;		On entry : 0/0
  9128 ;;		On exit  : 0/0
  9129 ;;		Unchanged: 0/0
  9130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9131 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;Total ram usage:        6 bytes
  9136 ;; Hardware stack levels used:    1
  9137 ;; Hardware stack levels required when called:    5
  9138 ;; This function calls:
  9139 ;;		___ftadd
  9140 ;; This function is called by:
  9141 ;;		_sortBattery
  9142 ;;		_printf
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text26
  9147  003974                     __ptext26:
  9148                           	opt stack 0
  9149  003974                     ___ftsub:
  9150                           	opt stack 23
  9151                           
  9152                           ;incstack = 0
  9153  003974  0100               	movlb	0	; () banked
  9154  003976  51B1               	movf	___ftsub@f2& (0+255),w,b
  9155  003978  0100               	movlb	0	; () banked
  9156  00397A  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9157  00397C  0100               	movlb	0	; () banked
  9158  00397E  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9159  003980  B4D8               	btfsc	status,2,c
  9160  003982  D009               	goto	l6442
  9161                           
  9162                           ; BSR set to: 0
  9163  003984  0E00               	movlw	0
  9164  003986  0100               	movlb	0	; () banked
  9165  003988  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
  9166  00398A  0E00               	movlw	0
  9167  00398C  0100               	movlb	0	; () banked
  9168  00398E  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9169  003990  0E80               	movlw	128
  9170  003992  0100               	movlb	0	; () banked
  9171  003994  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9172  003996                     l6442:
  9173                           
  9174                           ; BSR set to: 0
  9175  003996  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
  9176  00399A  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
  9177  00399E  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
  9178  0039A2  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
  9179  0039A6  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
  9180  0039AA  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
  9181  0039AE  EC6C  F00D         	call	___ftadd	;wreg free
  9182  0039B2  C0A2  F0AE         	movff	?___ftadd,?___ftsub
  9183  0039B6  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
  9184  0039BA  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
  9185  0039BE  0012               	return	
  9186  0039C0                     __end_of___ftsub:
  9187                           	opt stack 0
  9188                           tblptru	equ	0xFF8
  9189                           tblptrh	equ	0xFF7
  9190                           tblptrl	equ	0xFF6
  9191                           tablat	equ	0xFF5
  9192                           prodh	equ	0xFF4
  9193                           prodl	equ	0xFF3
  9194                           intcon	equ	0xFF2
  9195                           postinc0	equ	0xFEE
  9196                           wreg	equ	0xFE8
  9197                           postdec1	equ	0xFE5
  9198                           fsr1l	equ	0xFE1
  9199                           indf2	equ	0xFDF
  9200                           postinc2	equ	0xFDE
  9201                           postdec2	equ	0xFDD
  9202                           fsr2h	equ	0xFDA
  9203                           fsr2l	equ	0xFD9
  9204                           status	equ	0xFD8
  9205                           
  9206 ;; *************** function ___ftneg *****************
  9207 ;; Defined at:
  9208 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;  f1              3   34[COMRAM] float 
  9211 ;; Auto vars:     Size  Location     Type
  9212 ;;		None
  9213 ;; Return value:  Size  Location     Type
  9214 ;;                  3   34[COMRAM] float 
  9215 ;; Registers used:
  9216 ;;		wreg, status,2, status,0
  9217 ;; Tracked objects:
  9218 ;;		On entry : 0/0
  9219 ;;		On exit  : 0/0
  9220 ;;		Unchanged: 0/0
  9221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9222 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;Total ram usage:        3 bytes
  9227 ;; Hardware stack levels used:    1
  9228 ;; Hardware stack levels required when called:    3
  9229 ;; This function calls:
  9230 ;;		Nothing
  9231 ;; This function is called by:
  9232 ;;		_printf
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           	psect	text27
  9237  003C0A                     __ptext27:
  9238                           	opt stack 0
  9239  003C0A                     ___ftneg:
  9240                           	opt stack 25
  9241                           
  9242                           ;incstack = 0
  9243  003C0A  5023               	movf	___ftneg@f1,w,c
  9244  003C0C  1024               	iorwf	___ftneg@f1+1,w,c
  9245  003C0E  1025               	iorwf	___ftneg@f1+2,w,c
  9246  003C10  B4D8               	btfsc	status,2,c
  9247  003C12  D006               	goto	l1204
  9248  003C14  0E00               	movlw	0
  9249  003C16  1A23               	xorwf	___ftneg@f1,f,c
  9250  003C18  0E00               	movlw	0
  9251  003C1A  1A24               	xorwf	___ftneg@f1+1,f,c
  9252  003C1C  0E80               	movlw	128
  9253  003C1E  1A25               	xorwf	___ftneg@f1+2,f,c
  9254  003C20                     l1204:
  9255  003C20  C023  F023         	movff	___ftneg@f1,?___ftneg
  9256  003C24  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
  9257  003C28  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
  9258  003C2C  0012               	return		;funcret
  9259  003C2E                     __end_of___ftneg:
  9260                           	opt stack 0
  9261                           tblptru	equ	0xFF8
  9262                           tblptrh	equ	0xFF7
  9263                           tblptrl	equ	0xFF6
  9264                           tablat	equ	0xFF5
  9265                           prodh	equ	0xFF4
  9266                           prodl	equ	0xFF3
  9267                           intcon	equ	0xFF2
  9268                           postinc0	equ	0xFEE
  9269                           wreg	equ	0xFE8
  9270                           postdec1	equ	0xFE5
  9271                           fsr1l	equ	0xFE1
  9272                           indf2	equ	0xFDF
  9273                           postinc2	equ	0xFDE
  9274                           postdec2	equ	0xFDD
  9275                           fsr2h	equ	0xFDA
  9276                           fsr2l	equ	0xFD9
  9277                           status	equ	0xFD8
  9278                           
  9279 ;; *************** function ___ftge *****************
  9280 ;; Defined at:
  9281 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9282 ;; Parameters:    Size  Location     Type
  9283 ;;  ff1             3   46[COMRAM] float 
  9284 ;;  ff2             3   49[COMRAM] float 
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;		None
  9287 ;; Return value:  Size  Location     Type
  9288 ;;		None               void
  9289 ;; Registers used:
  9290 ;;		wreg, status,2, status,0
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9296 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;Total ram usage:        9 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    3
  9303 ;; This function calls:
  9304 ;;		Nothing
  9305 ;; This function is called by:
  9306 ;;		_sortBattery
  9307 ;;		_printf
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           	psect	text28
  9312  00320C                     __ptext28:
  9313                           	opt stack 0
  9314  00320C                     ___ftge:
  9315                           	opt stack 25
  9316                           
  9317                           ;incstack = 0
  9318  00320C  AE31               	btfss	___ftge@ff1+2,7,c
  9319  00320E  D016               	goto	l6462
  9320  003210  C02F  F035         	movff	___ftge@ff1,??___ftge
  9321  003214  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
  9322  003218  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
  9323  00321C  1E35               	comf	??___ftge,f,c
  9324  00321E  1E36               	comf	??___ftge+1,f,c
  9325  003220  1E37               	comf	??___ftge+2,f,c
  9326  003222  2A35               	incf	??___ftge,f,c
  9327  003224  0E00               	movlw	0
  9328  003226  2236               	addwfc	??___ftge+1,f,c
  9329  003228  2237               	addwfc	??___ftge+2,f,c
  9330  00322A  0E00               	movlw	0
  9331  00322C  2435               	addwf	??___ftge,w,c
  9332  00322E  6E2F               	movwf	___ftge@ff1,c
  9333  003230  0E00               	movlw	0
  9334  003232  2036               	addwfc	??___ftge+1,w,c
  9335  003234  6E30               	movwf	___ftge@ff1+1,c
  9336  003236  0E80               	movlw	128
  9337  003238  2037               	addwfc	??___ftge+2,w,c
  9338  00323A  6E31               	movwf	___ftge@ff1+2,c
  9339  00323C                     l6462:
  9340  00323C  AE34               	btfss	___ftge@ff2+2,7,c
  9341  00323E  D016               	goto	l6466
  9342  003240  C032  F035         	movff	___ftge@ff2,??___ftge
  9343  003244  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
  9344  003248  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
  9345  00324C  1E35               	comf	??___ftge,f,c
  9346  00324E  1E36               	comf	??___ftge+1,f,c
  9347  003250  1E37               	comf	??___ftge+2,f,c
  9348  003252  2A35               	incf	??___ftge,f,c
  9349  003254  0E00               	movlw	0
  9350  003256  2236               	addwfc	??___ftge+1,f,c
  9351  003258  2237               	addwfc	??___ftge+2,f,c
  9352  00325A  0E00               	movlw	0
  9353  00325C  2435               	addwf	??___ftge,w,c
  9354  00325E  6E32               	movwf	___ftge@ff2,c
  9355  003260  0E00               	movlw	0
  9356  003262  2036               	addwfc	??___ftge+1,w,c
  9357  003264  6E33               	movwf	___ftge@ff2+1,c
  9358  003266  0E80               	movlw	128
  9359  003268  2037               	addwfc	??___ftge+2,w,c
  9360  00326A  6E34               	movwf	___ftge@ff2+2,c
  9361  00326C                     l6466:
  9362  00326C  0E00               	movlw	0
  9363  00326E  1A2F               	xorwf	___ftge@ff1,f,c
  9364  003270  0E00               	movlw	0
  9365  003272  1A30               	xorwf	___ftge@ff1+1,f,c
  9366  003274  0E80               	movlw	128
  9367  003276  1A31               	xorwf	___ftge@ff1+2,f,c
  9368  003278  0E00               	movlw	0
  9369  00327A  1A32               	xorwf	___ftge@ff2,f,c
  9370  00327C  0E00               	movlw	0
  9371  00327E  1A33               	xorwf	___ftge@ff2+1,f,c
  9372  003280  0E80               	movlw	128
  9373  003282  1A34               	xorwf	___ftge@ff2+2,f,c
  9374  003284  5032               	movf	___ftge@ff2,w,c
  9375  003286  5C2F               	subwf	___ftge@ff1,w,c
  9376  003288  5033               	movf	___ftge@ff2+1,w,c
  9377  00328A  5830               	subwfb	___ftge@ff1+1,w,c
  9378  00328C  5034               	movf	___ftge@ff2+2,w,c
  9379  00328E  5831               	subwfb	___ftge@ff1+2,w,c
  9380  003290  B0D8               	btfsc	status,0,c
  9381  003292  D002               	goto	l6472
  9382  003294  90D8               	bcf	status,0,c
  9383  003296  0012               	return	
  9384  003298                     l6472:
  9385  003298  80D8               	bsf	status,0,c
  9386  00329A  0012               	return	
  9387  00329C                     __end_of___ftge:
  9388                           	opt stack 0
  9389                           tblptru	equ	0xFF8
  9390                           tblptrh	equ	0xFF7
  9391                           tblptrl	equ	0xFF6
  9392                           tablat	equ	0xFF5
  9393                           prodh	equ	0xFF4
  9394                           prodl	equ	0xFF3
  9395                           intcon	equ	0xFF2
  9396                           postinc0	equ	0xFEE
  9397                           wreg	equ	0xFE8
  9398                           postdec1	equ	0xFE5
  9399                           fsr1l	equ	0xFE1
  9400                           indf2	equ	0xFDF
  9401                           postinc2	equ	0xFDE
  9402                           postdec2	equ	0xFDD
  9403                           fsr2h	equ	0xFDA
  9404                           fsr2l	equ	0xFD9
  9405                           status	equ	0xFD8
  9406                           
  9407 ;; *************** function _lcdClear *****************
  9408 ;; Defined at:
  9409 ;;		line 74 in file "lcd.c"
  9410 ;; Parameters:    Size  Location     Type
  9411 ;;		None
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;		None
  9414 ;; Return value:  Size  Location     Type
  9415 ;;                  1    wreg      void 
  9416 ;; Registers used:
  9417 ;;		wreg, status,2, status,0, cstack
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;Total ram usage:        0 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    5
  9430 ;; This function calls:
  9431 ;;		_lcdInst
  9432 ;; This function is called by:
  9433 ;;		_main
  9434 ;;		_sortBattery
  9435 ;;		_showDateTime
  9436 ;;		_showMainMenu
  9437 ;;		_showRunSelect
  9438 ;;		_showRunMenu
  9439 ;;		_showRunTime
  9440 ;;		_showRunStats
  9441 ;;		_debug
  9442 ;;		_pause
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           	psect	text29
  9447  003D3A                     __ptext29:
  9448                           	opt stack 0
  9449  003D3A                     _lcdClear:
  9450                           	opt stack 24
  9451                           
  9452                           ;lcd.c: 75: lcdInst(0b00000001);
  9453                           
  9454                           ;incstack = 0
  9455  003D3A  0E01               	movlw	1
  9456  003D3C  EC28  F01E         	call	_lcdInst
  9457  003D40  0012               	return		;funcret
  9458  003D42                     __end_of_lcdClear:
  9459                           	opt stack 0
  9460                           tblptru	equ	0xFF8
  9461                           tblptrh	equ	0xFF7
  9462                           tblptrl	equ	0xFF6
  9463                           tablat	equ	0xFF5
  9464                           prodh	equ	0xFF4
  9465                           prodl	equ	0xFF3
  9466                           intcon	equ	0xFF2
  9467                           postinc0	equ	0xFEE
  9468                           wreg	equ	0xFE8
  9469                           postdec1	equ	0xFE5
  9470                           fsr1l	equ	0xFE1
  9471                           indf2	equ	0xFDF
  9472                           postinc2	equ	0xFDE
  9473                           postdec2	equ	0xFDD
  9474                           fsr2h	equ	0xFDA
  9475                           fsr2l	equ	0xFD9
  9476                           status	equ	0xFD8
  9477                           
  9478 ;; *************** function _initRTC *****************
  9479 ;; Defined at:
  9480 ;;		line 19 in file "RTC.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  2    6[None  ] int 
  9487 ;; Registers used:
  9488 ;;		wreg, status,2, status,0, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;Total ram usage:        0 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    5
  9501 ;; This function calls:
  9502 ;;		_I2C_Master_Init
  9503 ;; This function is called by:
  9504 ;;		_showInterface
  9505 ;;		_showDateTime
  9506 ;;		_debug
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           	psect	text30
  9511  003D00                     __ptext30:
  9512                           	opt stack 0
  9513  003D00                     _initRTC:
  9514                           	opt stack 23
  9515                           
  9516                           ;RTC.c: 20: I2C_Master_Init(10000);
  9517                           
  9518                           ;incstack = 0
  9519  003D00  0E10               	movlw	16
  9520  003D02  6E30               	movwf	I2C_Master_Init@c,c
  9521  003D04  0E27               	movlw	39
  9522  003D06  6E31               	movwf	I2C_Master_Init@c+1,c
  9523  003D08  0E00               	movlw	0
  9524  003D0A  6E32               	movwf	I2C_Master_Init@c+2,c
  9525  003D0C  0E00               	movlw	0
  9526  003D0E  6E33               	movwf	I2C_Master_Init@c+3,c
  9527  003D10  EC3C  F01C         	call	_I2C_Master_Init	;wreg free
  9528  003D14  0012               	return		;funcret
  9529  003D16                     __end_of_initRTC:
  9530                           	opt stack 0
  9531                           tblptru	equ	0xFF8
  9532                           tblptrh	equ	0xFF7
  9533                           tblptrl	equ	0xFF6
  9534                           tablat	equ	0xFF5
  9535                           prodh	equ	0xFF4
  9536                           prodl	equ	0xFF3
  9537                           intcon	equ	0xFF2
  9538                           postinc0	equ	0xFEE
  9539                           wreg	equ	0xFE8
  9540                           postdec1	equ	0xFE5
  9541                           fsr1l	equ	0xFE1
  9542                           indf2	equ	0xFDF
  9543                           postinc2	equ	0xFDE
  9544                           postdec2	equ	0xFDD
  9545                           fsr2h	equ	0xFDA
  9546                           fsr2l	equ	0xFD9
  9547                           status	equ	0xFD8
  9548                           
  9549 ;; *************** function _I2C_Master_Init *****************
  9550 ;; Defined at:
  9551 ;;		line 13 in file "I2C.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;  c               4   47[COMRAM] const unsigned long 
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;		None
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      void 
  9558 ;; Registers used:
  9559 ;;		wreg, status,2, status,0, cstack
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9565 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;Total ram usage:        8 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    4
  9572 ;; This function calls:
  9573 ;;		___lldiv
  9574 ;; This function is called by:
  9575 ;;		_initRTC
  9576 ;;		_testFrequency
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           	psect	text31
  9581  003878                     __ptext31:
  9582                           	opt stack 0
  9583  003878                     _I2C_Master_Init:
  9584                           	opt stack 23
  9585                           
  9586                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  9587                           
  9588                           ;incstack = 0
  9589  003878  0E00               	movlw	0
  9590  00387A  6EC7               	movwf	4039,c	;volatile
  9591                           
  9592                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  9593  00387C  0E28               	movlw	40
  9594  00387E  6EC6               	movwf	4038,c	;volatile
  9595                           
  9596                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  9597  003880  0E00               	movlw	0
  9598  003882  6EC5               	movwf	4037,c	;volatile
  9599                           
  9600                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  9601  003884  0E80               	movlw	128
  9602  003886  6E23               	movwf	___lldiv@dividend,c
  9603  003888  0E96               	movlw	150
  9604  00388A  6E24               	movwf	___lldiv@dividend+1,c
  9605  00388C  0E98               	movlw	152
  9606  00388E  6E25               	movwf	___lldiv@dividend+2,c
  9607  003890  0E00               	movlw	0
  9608  003892  6E26               	movwf	___lldiv@dividend+3,c
  9609  003894  C030  F034         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  9610  003898  C031  F035         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  9611  00389C  C032  F036         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  9612  0038A0  C033  F037         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  9613  0038A4  0E02               	movlw	2
  9614  0038A6                     u6075:
  9615  0038A6  90D8               	bcf	status,0,c
  9616  0038A8  3634               	rlcf	??_I2C_Master_Init,f,c
  9617  0038AA  3635               	rlcf	??_I2C_Master_Init+1,f,c
  9618  0038AC  3636               	rlcf	??_I2C_Master_Init+2,f,c
  9619  0038AE  3637               	rlcf	??_I2C_Master_Init+3,f,c
  9620  0038B0  2EE8               	decfsz	wreg,f,c
  9621  0038B2  D7F9               	goto	u6075
  9622  0038B4  C034  F027         	movff	??_I2C_Master_Init,___lldiv@divisor
  9623  0038B8  C035  F028         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9624  0038BC  C036  F029         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9625  0038C0  C037  F02A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9626  0038C4  EC1A  F01A         	call	___lldiv	;wreg free
  9627  0038C8  0423               	decf	?___lldiv,w,c
  9628  0038CA  6EC8               	movwf	4040,c	;volatile
  9629                           
  9630                           ;I2C.c: 20: TRISC3 = 1;
  9631  0038CC  8694               	bsf	3988,3,c	;volatile
  9632                           
  9633                           ;I2C.c: 21: TRISC4 = 1;
  9634  0038CE  8894               	bsf	3988,4,c	;volatile
  9635  0038D0  0012               	return		;funcret
  9636  0038D2                     __end_of_I2C_Master_Init:
  9637                           	opt stack 0
  9638                           tblptru	equ	0xFF8
  9639                           tblptrh	equ	0xFF7
  9640                           tblptrl	equ	0xFF6
  9641                           tablat	equ	0xFF5
  9642                           prodh	equ	0xFF4
  9643                           prodl	equ	0xFF3
  9644                           intcon	equ	0xFF2
  9645                           postinc0	equ	0xFEE
  9646                           wreg	equ	0xFE8
  9647                           postdec1	equ	0xFE5
  9648                           fsr1l	equ	0xFE1
  9649                           indf2	equ	0xFDF
  9650                           postinc2	equ	0xFDE
  9651                           postdec2	equ	0xFDD
  9652                           fsr2h	equ	0xFDA
  9653                           fsr2l	equ	0xFD9
  9654                           status	equ	0xFD8
  9655                           
  9656 ;; *************** function ___lldiv *****************
  9657 ;; Defined at:
  9658 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;  dividend        4   34[COMRAM] unsigned long 
  9661 ;;  divisor         4   38[COMRAM] unsigned long 
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;  quotient        4   42[COMRAM] unsigned long 
  9664 ;;  counter         1   46[COMRAM] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  4   34[COMRAM] unsigned long 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9674 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;Total ram usage:       13 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    3
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_I2C_Master_Init
  9685 ;;		_printf
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           	psect	text32
  9690  003434                     __ptext32:
  9691                           	opt stack 0
  9692  003434                     ___lldiv:
  9693                           	opt stack 25
  9694                           
  9695                           ;incstack = 0
  9696  003434  0E00               	movlw	0
  9697  003436  6E2B               	movwf	___lldiv@quotient,c
  9698  003438  0E00               	movlw	0
  9699  00343A  6E2C               	movwf	___lldiv@quotient+1,c
  9700  00343C  0E00               	movlw	0
  9701  00343E  6E2D               	movwf	___lldiv@quotient+2,c
  9702  003440  0E00               	movlw	0
  9703  003442  6E2E               	movwf	___lldiv@quotient+3,c
  9704  003444  5027               	movf	___lldiv@divisor,w,c
  9705  003446  1028               	iorwf	___lldiv@divisor+1,w,c
  9706  003448  1029               	iorwf	___lldiv@divisor+2,w,c
  9707  00344A  102A               	iorwf	___lldiv@divisor+3,w,c
  9708  00344C  B4D8               	btfsc	status,2,c
  9709  00344E  D02A               	goto	l1254
  9710  003450  0E01               	movlw	1
  9711  003452  6E2F               	movwf	___lldiv@counter,c
  9712  003454  D006               	goto	l6132
  9713  003456                     l6130:
  9714  003456  90D8               	bcf	status,0,c
  9715  003458  3627               	rlcf	___lldiv@divisor,f,c
  9716  00345A  3628               	rlcf	___lldiv@divisor+1,f,c
  9717  00345C  3629               	rlcf	___lldiv@divisor+2,f,c
  9718  00345E  362A               	rlcf	___lldiv@divisor+3,f,c
  9719  003460  2A2F               	incf	___lldiv@counter,f,c
  9720  003462                     l6132:
  9721  003462  AE2A               	btfss	___lldiv@divisor+3,7,c
  9722  003464  D7F8               	goto	l6130
  9723  003466                     l6134:
  9724  003466  90D8               	bcf	status,0,c
  9725  003468  362B               	rlcf	___lldiv@quotient,f,c
  9726  00346A  362C               	rlcf	___lldiv@quotient+1,f,c
  9727  00346C  362D               	rlcf	___lldiv@quotient+2,f,c
  9728  00346E  362E               	rlcf	___lldiv@quotient+3,f,c
  9729  003470  5027               	movf	___lldiv@divisor,w,c
  9730  003472  5C23               	subwf	___lldiv@dividend,w,c
  9731  003474  5028               	movf	___lldiv@divisor+1,w,c
  9732  003476  5824               	subwfb	___lldiv@dividend+1,w,c
  9733  003478  5029               	movf	___lldiv@divisor+2,w,c
  9734  00347A  5825               	subwfb	___lldiv@dividend+2,w,c
  9735  00347C  502A               	movf	___lldiv@divisor+3,w,c
  9736  00347E  5826               	subwfb	___lldiv@dividend+3,w,c
  9737  003480  A0D8               	btfss	status,0,c
  9738  003482  D009               	goto	l6142
  9739  003484  5027               	movf	___lldiv@divisor,w,c
  9740  003486  5E23               	subwf	___lldiv@dividend,f,c
  9741  003488  5028               	movf	___lldiv@divisor+1,w,c
  9742  00348A  5A24               	subwfb	___lldiv@dividend+1,f,c
  9743  00348C  5029               	movf	___lldiv@divisor+2,w,c
  9744  00348E  5A25               	subwfb	___lldiv@dividend+2,f,c
  9745  003490  502A               	movf	___lldiv@divisor+3,w,c
  9746  003492  5A26               	subwfb	___lldiv@dividend+3,f,c
  9747  003494  802B               	bsf	___lldiv@quotient,0,c
  9748  003496                     l6142:
  9749  003496  90D8               	bcf	status,0,c
  9750  003498  322A               	rrcf	___lldiv@divisor+3,f,c
  9751  00349A  3229               	rrcf	___lldiv@divisor+2,f,c
  9752  00349C  3228               	rrcf	___lldiv@divisor+1,f,c
  9753  00349E  3227               	rrcf	___lldiv@divisor,f,c
  9754  0034A0  2E2F               	decfsz	___lldiv@counter,f,c
  9755  0034A2  D7E1               	goto	l6134
  9756  0034A4                     l1254:
  9757  0034A4  C02B  F023         	movff	___lldiv@quotient,?___lldiv
  9758  0034A8  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
  9759  0034AC  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
  9760  0034B0  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
  9761  0034B4  0012               	return		;funcret
  9762  0034B6                     __end_of___lldiv:
  9763                           	opt stack 0
  9764                           tblptru	equ	0xFF8
  9765                           tblptrh	equ	0xFF7
  9766                           tblptrl	equ	0xFF6
  9767                           tablat	equ	0xFF5
  9768                           prodh	equ	0xFF4
  9769                           prodl	equ	0xFF3
  9770                           intcon	equ	0xFF2
  9771                           postinc0	equ	0xFEE
  9772                           wreg	equ	0xFE8
  9773                           postdec1	equ	0xFE5
  9774                           fsr1l	equ	0xFE1
  9775                           indf2	equ	0xFDF
  9776                           postinc2	equ	0xFDE
  9777                           postdec2	equ	0xFDD
  9778                           fsr2h	equ	0xFDA
  9779                           fsr2l	equ	0xFD9
  9780                           status	equ	0xFD8
  9781                           
  9782 ;; *************** function _getTime *****************
  9783 ;; Defined at:
  9784 ;;		line 23 in file "RTC.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;  i               1   55[COMRAM] unsigned char 
  9789 ;;  time           14   41[COMRAM] int [7]
  9790 ;; Return value:  Size  Location     Type
  9791 ;;                  2   37[COMRAM] int 
  9792 ;; Registers used:
  9793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9802 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9803 ;;Total ram usage:       19 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; Hardware stack levels required when called:    5
  9806 ;; This function calls:
  9807 ;;		_I2C_Master_Read
  9808 ;;		_I2C_Master_Start
  9809 ;;		_I2C_Master_Stop
  9810 ;;		_I2C_Master_Write
  9811 ;; This function is called by:
  9812 ;;		_showDateTime
  9813 ;;		_debug
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           	psect	text33
  9818  0034B6                     __ptext33:
  9819                           	opt stack 0
  9820  0034B6                     _getTime:
  9821                           	opt stack 23
  9822                           
  9823                           ;RTC.c: 24: int time[7];
  9824                           ;RTC.c: 26: (INTCONbits.GIE = 0);
  9825                           
  9826                           ;incstack = 0
  9827  0034B6  9EF2               	bcf	intcon,7,c	;volatile
  9828                           
  9829                           ;RTC.c: 29: I2C_Master_Start();
  9830  0034B8  ECA5  F01E         	call	_I2C_Master_Start	;wreg free
  9831                           
  9832                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
  9833  0034BC  0E00               	movlw	0
  9834  0034BE  6E25               	movwf	I2C_Master_Write@d+1,c
  9835  0034C0  0ED0               	movlw	208
  9836  0034C2  6E24               	movwf	I2C_Master_Write@d,c
  9837  0034C4  EC94  F01E         	call	_I2C_Master_Write	;wreg free
  9838                           
  9839                           ;RTC.c: 31: I2C_Master_Write(0x00);
  9840  0034C8  0E00               	movlw	0
  9841  0034CA  6E25               	movwf	I2C_Master_Write@d+1,c
  9842  0034CC  0E00               	movlw	0
  9843  0034CE  6E24               	movwf	I2C_Master_Write@d,c
  9844  0034D0  EC94  F01E         	call	_I2C_Master_Write	;wreg free
  9845                           
  9846                           ;RTC.c: 32: I2C_Master_Stop();
  9847  0034D4  ECA1  F01E         	call	_I2C_Master_Stop	;wreg free
  9848                           
  9849                           ;RTC.c: 35: I2C_Master_Start();
  9850  0034D8  ECA5  F01E         	call	_I2C_Master_Start	;wreg free
  9851                           
  9852                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
  9853  0034DC  0E00               	movlw	0
  9854  0034DE  6E25               	movwf	I2C_Master_Write@d+1,c
  9855  0034E0  0ED1               	movlw	209
  9856  0034E2  6E24               	movwf	I2C_Master_Write@d,c
  9857  0034E4  EC94  F01E         	call	_I2C_Master_Write	;wreg free
  9858                           
  9859                           ;RTC.c: 37: for(unsigned char i=0;i<7;i++){
  9860  0034E8  0E00               	movlw	0
  9861  0034EA  6E38               	movwf	getTime@i,c
  9862  0034EC                     l6560:
  9863  0034EC  0E06               	movlw	6
  9864  0034EE  6438               	cpfsgt	getTime@i,c
  9865  0034F0  D001               	goto	l6564
  9866  0034F2  D013               	goto	l6570
  9867  0034F4                     l6564:
  9868                           
  9869                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
  9870  0034F4  0E01               	movlw	1
  9871  0034F6  ECDF  F01D         	call	_I2C_Master_Read
  9872  0034FA  6E28               	movwf	??_getTime& (0+255),c
  9873  0034FC  6A29               	clrf	(??_getTime+1)& (0+255),c
  9874  0034FE  5038               	movf	getTime@i,w,c
  9875  003500  0D02               	mullw	2
  9876  003502  0E2A               	movlw	low getTime@time
  9877  003504  24F3               	addwf	prodl,w,c
  9878  003506  6ED9               	movwf	fsr2l,c
  9879  003508  0E00               	movlw	high getTime@time
  9880  00350A  20F4               	addwfc	prodh,w,c
  9881  00350C  6EDA               	movwf	fsr2h,c
  9882  00350E  C028  FFDE         	movff	??_getTime,postinc2
  9883  003512  C029  FFDD         	movff	??_getTime+1,postdec2
  9884  003516  2A38               	incf	getTime@i,f,c
  9885  003518  D7E9               	goto	l6560
  9886  00351A                     l6570:
  9887                           
  9888                           ;RTC.c: 39: }
  9889                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
  9890  00351A  0E00               	movlw	0
  9891  00351C  ECDF  F01D         	call	_I2C_Master_Read
  9892  003520  6E28               	movwf	??_getTime& (0+255),c
  9893  003522  5028               	movf	??_getTime,w,c
  9894  003524  6E36               	movwf	getTime@time+12,c
  9895  003526  6A37               	clrf	getTime@time+13,c
  9896                           
  9897                           ;RTC.c: 41: I2C_Master_Stop();
  9898  003528  ECA1  F01E         	call	_I2C_Master_Stop	;wreg free
  9899                           
  9900                           ;RTC.c: 43: (INTCONbits.GIE = 1);
  9901  00352C  8EF2               	bsf	intcon,7,c	;volatile
  9902                           
  9903                           ;RTC.c: 45: return time;
  9904  00352E  0E00               	movlw	high getTime@time
  9905  003530  6E27               	movwf	?_getTime+1,c
  9906  003532  0E2A               	movlw	low getTime@time
  9907  003534  6E26               	movwf	?_getTime,c
  9908  003536  0012               	return	
  9909  003538                     __end_of_getTime:
  9910                           	opt stack 0
  9911                           tblptru	equ	0xFF8
  9912                           tblptrh	equ	0xFF7
  9913                           tblptrl	equ	0xFF6
  9914                           tablat	equ	0xFF5
  9915                           prodh	equ	0xFF4
  9916                           prodl	equ	0xFF3
  9917                           intcon	equ	0xFF2
  9918                           postinc0	equ	0xFEE
  9919                           wreg	equ	0xFE8
  9920                           postdec1	equ	0xFE5
  9921                           fsr1l	equ	0xFE1
  9922                           indf2	equ	0xFDF
  9923                           postinc2	equ	0xFDE
  9924                           postdec2	equ	0xFDD
  9925                           fsr2h	equ	0xFDA
  9926                           fsr2l	equ	0xFD9
  9927                           status	equ	0xFD8
  9928                           
  9929 ;; *************** function _I2C_Master_Write *****************
  9930 ;; Defined at:
  9931 ;;		line 47 in file "I2C.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;  d               2   35[COMRAM] unsigned int 
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;                  1    wreg      void 
  9938 ;; Registers used:
  9939 ;;		wreg, status,2, status,0, cstack
  9940 ;; Tracked objects:
  9941 ;;		On entry : 0/0
  9942 ;;		On exit  : 0/0
  9943 ;;		Unchanged: 0/0
  9944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9945 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9949 ;;Total ram usage:        2 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; Hardware stack levels required when called:    4
  9952 ;; This function calls:
  9953 ;;		_I2C_Master_Wait
  9954 ;; This function is called by:
  9955 ;;		_getTime
  9956 ;;		_setTime
  9957 ;;		_testFrequency
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           	psect	text34
  9962  003D28                     __ptext34:
  9963                           	opt stack 0
  9964  003D28                     _I2C_Master_Write:
  9965                           	opt stack 23
  9966                           
  9967                           ;I2C.c: 49: I2C_Master_Wait();
  9968                           
  9969                           ;incstack = 0
  9970  003D28  EC8B  F01E         	call	_I2C_Master_Wait	;wreg free
  9971                           
  9972                           ;I2C.c: 50: SSPBUF = d;
  9973  003D2C  C024  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9974  003D30  0012               	return		;funcret
  9975  003D32                     __end_of_I2C_Master_Write:
  9976                           	opt stack 0
  9977                           tblptru	equ	0xFF8
  9978                           tblptrh	equ	0xFF7
  9979                           tblptrl	equ	0xFF6
  9980                           tablat	equ	0xFF5
  9981                           prodh	equ	0xFF4
  9982                           prodl	equ	0xFF3
  9983                           intcon	equ	0xFF2
  9984                           postinc0	equ	0xFEE
  9985                           wreg	equ	0xFE8
  9986                           postdec1	equ	0xFE5
  9987                           fsr1l	equ	0xFE1
  9988                           indf2	equ	0xFDF
  9989                           postinc2	equ	0xFDE
  9990                           postdec2	equ	0xFDD
  9991                           fsr2h	equ	0xFDA
  9992                           fsr2l	equ	0xFD9
  9993                           status	equ	0xFD8
  9994                           
  9995 ;; *************** function _I2C_Master_Stop *****************
  9996 ;; Defined at:
  9997 ;;		line 41 in file "I2C.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;		None
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;		None
 10002 ;; Return value:  Size  Location     Type
 10003 ;;                  2  438[None  ] int 
 10004 ;; Registers used:
 10005 ;;		wreg, status,2, status,0, cstack
 10006 ;; Tracked objects:
 10007 ;;		On entry : 0/0
 10008 ;;		On exit  : 0/0
 10009 ;;		Unchanged: 0/0
 10010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;Total ram usage:        0 bytes
 10016 ;; Hardware stack levels used:    1
 10017 ;; Hardware stack levels required when called:    4
 10018 ;; This function calls:
 10019 ;;		_I2C_Master_Wait
 10020 ;; This function is called by:
 10021 ;;		_getTime
 10022 ;;		_setTime
 10023 ;;		_testFrequency
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           	psect	text35
 10028  003D42                     __ptext35:
 10029                           	opt stack 0
 10030  003D42                     _I2C_Master_Stop:
 10031                           	opt stack 23
 10032                           
 10033                           ;I2C.c: 43: I2C_Master_Wait();
 10034                           
 10035                           ;incstack = 0
 10036  003D42  EC8B  F01E         	call	_I2C_Master_Wait	;wreg free
 10037                           
 10038                           ;I2C.c: 44: PEN = 1;
 10039  003D46  84C5               	bsf	4037,2,c	;volatile
 10040  003D48  0012               	return		;funcret
 10041  003D4A                     __end_of_I2C_Master_Stop:
 10042                           	opt stack 0
 10043                           tblptru	equ	0xFF8
 10044                           tblptrh	equ	0xFF7
 10045                           tblptrl	equ	0xFF6
 10046                           tablat	equ	0xFF5
 10047                           prodh	equ	0xFF4
 10048                           prodl	equ	0xFF3
 10049                           intcon	equ	0xFF2
 10050                           postinc0	equ	0xFEE
 10051                           wreg	equ	0xFE8
 10052                           postdec1	equ	0xFE5
 10053                           fsr1l	equ	0xFE1
 10054                           indf2	equ	0xFDF
 10055                           postinc2	equ	0xFDE
 10056                           postdec2	equ	0xFDD
 10057                           fsr2h	equ	0xFDA
 10058                           fsr2l	equ	0xFD9
 10059                           status	equ	0xFD8
 10060                           
 10061 ;; *************** function _I2C_Master_Start *****************
 10062 ;; Defined at:
 10063 ;;		line 29 in file "I2C.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;		None
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;		None
 10068 ;; Return value:  Size  Location     Type
 10069 ;;                  2  434[None  ] int 
 10070 ;; Registers used:
 10071 ;;		wreg, status,2, status,0, cstack
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10081 ;;Total ram usage:        0 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; Hardware stack levels required when called:    4
 10084 ;; This function calls:
 10085 ;;		_I2C_Master_Wait
 10086 ;; This function is called by:
 10087 ;;		_getTime
 10088 ;;		_setTime
 10089 ;;		_testFrequency
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           	psect	text36
 10094  003D4A                     __ptext36:
 10095                           	opt stack 0
 10096  003D4A                     _I2C_Master_Start:
 10097                           	opt stack 23
 10098                           
 10099                           ;I2C.c: 31: I2C_Master_Wait();
 10100                           
 10101                           ;incstack = 0
 10102  003D4A  EC8B  F01E         	call	_I2C_Master_Wait	;wreg free
 10103                           
 10104                           ;I2C.c: 32: SEN = 1;
 10105  003D4E  80C5               	bsf	4037,0,c	;volatile
 10106  003D50  0012               	return		;funcret
 10107  003D52                     __end_of_I2C_Master_Start:
 10108                           	opt stack 0
 10109                           tblptru	equ	0xFF8
 10110                           tblptrh	equ	0xFF7
 10111                           tblptrl	equ	0xFF6
 10112                           tablat	equ	0xFF5
 10113                           prodh	equ	0xFF4
 10114                           prodl	equ	0xFF3
 10115                           intcon	equ	0xFF2
 10116                           postinc0	equ	0xFEE
 10117                           wreg	equ	0xFE8
 10118                           postdec1	equ	0xFE5
 10119                           fsr1l	equ	0xFE1
 10120                           indf2	equ	0xFDF
 10121                           postinc2	equ	0xFDE
 10122                           postdec2	equ	0xFDD
 10123                           fsr2h	equ	0xFDA
 10124                           fsr2l	equ	0xFD9
 10125                           status	equ	0xFD8
 10126                           
 10127 ;; *************** function _I2C_Master_Read *****************
 10128 ;; Defined at:
 10129 ;;		line 53 in file "I2C.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;  a               1    wreg     unsigned char 
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;  a               1   35[COMRAM] unsigned char 
 10134 ;;  temp            1   36[COMRAM] unsigned char 
 10135 ;; Return value:  Size  Location     Type
 10136 ;;                  1    wreg      unsigned char 
 10137 ;; Registers used:
 10138 ;;		wreg, status,2, status,0, cstack
 10139 ;; Tracked objects:
 10140 ;;		On entry : 0/0
 10141 ;;		On exit  : 0/0
 10142 ;;		Unchanged: 0/0
 10143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10147 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10148 ;;Total ram usage:        2 bytes
 10149 ;; Hardware stack levels used:    1
 10150 ;; Hardware stack levels required when called:    4
 10151 ;; This function calls:
 10152 ;;		_I2C_Master_Wait
 10153 ;; This function is called by:
 10154 ;;		_getTime
 10155 ;;		_testFrequency
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           	psect	text37
 10160  003BBE                     __ptext37:
 10161                           	opt stack 0
 10162  003BBE                     _I2C_Master_Read:
 10163                           	opt stack 23
 10164                           
 10165                           ;incstack = 0
 10166                           ;I2C_Master_Read@a stored from wreg
 10167  003BBE  6E24               	movwf	I2C_Master_Read@a,c
 10168                           
 10169                           ;I2C.c: 55: unsigned char temp;
 10170                           ;I2C.c: 56: I2C_Master_Wait();
 10171  003BC0  EC8B  F01E         	call	_I2C_Master_Wait	;wreg free
 10172                           
 10173                           ;I2C.c: 57: RCEN = 1;
 10174  003BC4  86C5               	bsf	4037,3,c	;volatile
 10175                           
 10176                           ;I2C.c: 58: I2C_Master_Wait();
 10177  003BC6  EC8B  F01E         	call	_I2C_Master_Wait	;wreg free
 10178                           
 10179                           ;I2C.c: 59: temp = SSPBUF;
 10180  003BCA  CFC9 F025          	movff	4041,I2C_Master_Read@temp	;volatile
 10181                           
 10182                           ;I2C.c: 60: I2C_Master_Wait();
 10183  003BCE  EC8B  F01E         	call	_I2C_Master_Wait	;wreg free
 10184                           
 10185                           ;I2C.c: 61: ACKDT = (a)?0:1;
 10186  003BD2  5024               	movf	I2C_Master_Read@a,w,c
 10187  003BD4  A4D8               	btfss	status,2,c
 10188  003BD6  D002               	goto	u6080
 10189  003BD8  8AC5               	bsf	4037,5,c	;volatile
 10190  003BDA  D001               	goto	l6182
 10191  003BDC                     u6080:
 10192  003BDC  9AC5               	bcf	4037,5,c	;volatile
 10193  003BDE                     l6182:
 10194                           
 10195                           ;I2C.c: 62: ACKEN = 1;
 10196  003BDE  88C5               	bsf	4037,4,c	;volatile
 10197                           
 10198                           ;I2C.c: 63: return temp;
 10199  003BE0  5025               	movf	I2C_Master_Read@temp,w,c
 10200  003BE2  0012               	return	
 10201  003BE4                     __end_of_I2C_Master_Read:
 10202                           	opt stack 0
 10203                           tblptru	equ	0xFF8
 10204                           tblptrh	equ	0xFF7
 10205                           tblptrl	equ	0xFF6
 10206                           tablat	equ	0xFF5
 10207                           prodh	equ	0xFF4
 10208                           prodl	equ	0xFF3
 10209                           intcon	equ	0xFF2
 10210                           postinc0	equ	0xFEE
 10211                           wreg	equ	0xFE8
 10212                           postdec1	equ	0xFE5
 10213                           fsr1l	equ	0xFE1
 10214                           indf2	equ	0xFDF
 10215                           postinc2	equ	0xFDE
 10216                           postdec2	equ	0xFDD
 10217                           fsr2h	equ	0xFDA
 10218                           fsr2l	equ	0xFD9
 10219                           status	equ	0xFD8
 10220                           
 10221 ;; *************** function _I2C_Master_Wait *****************
 10222 ;; Defined at:
 10223 ;;		line 24 in file "I2C.c"
 10224 ;; Parameters:    Size  Location     Type
 10225 ;;		None
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;		None
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      void 
 10230 ;; Registers used:
 10231 ;;		wreg, status,2, status,0
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;Total ram usage:        1 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    3
 10244 ;; This function calls:
 10245 ;;		Nothing
 10246 ;; This function is called by:
 10247 ;;		_I2C_Master_Start
 10248 ;;		_I2C_Master_Stop
 10249 ;;		_I2C_Master_Write
 10250 ;;		_I2C_Master_Read
 10251 ;;		_I2C_Master_RepeatedStart
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           	psect	text38
 10256  003D16                     __ptext38:
 10257                           	opt stack 0
 10258  003D16                     _I2C_Master_Wait:
 10259                           	opt stack 23
 10260  003D16                     l509:
 10261  003D16  B4C7               	btfsc	4039,2,c	;volatile
 10262  003D18  D7FE               	goto	l509
 10263  003D1A  CFC5 F023          	movff	4037,??_I2C_Master_Wait	;volatile
 10264  003D1E  0E1F               	movlw	31
 10265  003D20  1623               	andwf	??_I2C_Master_Wait,f,c
 10266  003D22  B4D8               	btfsc	status,2,c
 10267  003D24  0012               	return	
 10268  003D26  D7F7               	goto	l509
 10269  003D28                     __end_of_I2C_Master_Wait:
 10270                           	opt stack 0
 10271                           tblptru	equ	0xFF8
 10272                           tblptrh	equ	0xFF7
 10273                           tblptrl	equ	0xFF6
 10274                           tablat	equ	0xFF5
 10275                           prodh	equ	0xFF4
 10276                           prodl	equ	0xFF3
 10277                           intcon	equ	0xFF2
 10278                           postinc0	equ	0xFEE
 10279                           wreg	equ	0xFE8
 10280                           postdec1	equ	0xFE5
 10281                           fsr1l	equ	0xFE1
 10282                           indf2	equ	0xFDF
 10283                           postinc2	equ	0xFDE
 10284                           postdec2	equ	0xFDD
 10285                           fsr2h	equ	0xFDA
 10286                           fsr2l	equ	0xFD9
 10287                           status	equ	0xFD8
 10288                           
 10289 ;; *************** function _readPastRun *****************
 10290 ;; Defined at:
 10291 ;;		line 23 in file "eeprom.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;  run             2    0[BANK0 ] int 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;  i               2   16[BANK0 ] int 
 10296 ;;  data           14    2[BANK0 ] int [7]
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  2    0[BANK0 ] PTR int 
 10299 ;; Registers used:
 10300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10306 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;Total ram usage:       18 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; Hardware stack levels required when called:    4
 10313 ;; This function calls:
 10314 ;;		___wmul
 10315 ;;		_eepromRead
 10316 ;; This function is called by:
 10317 ;;		_showInterface
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321                           	psect	text39
 10322  00317A                     __ptext39:
 10323                           	opt stack 0
 10324  00317A                     _readPastRun:
 10325                           	opt stack 25
 10326                           
 10327                           ;eeprom.c: 24: int data[7];
 10328                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 10329                           
 10330                           ;incstack = 0
 10331  00317A  0E00               	movlw	0
 10332  00317C  0100               	movlb	0	; () banked
 10333  00317E  6F91               	movwf	(readPastRun@i+1)& (0+255),b
 10334  003180  0E00               	movlw	0
 10335  003182  6F90               	movwf	readPastRun@i& (0+255),b
 10336  003184                     l7088:
 10337                           
 10338                           ; BSR set to: 0
 10339  003184  0100               	movlb	0	; () banked
 10340  003186  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
 10341  003188  D008               	goto	l7092
 10342  00318A  0100               	movlb	0	; () banked
 10343  00318C  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 10344  00318E  E137               	bnz	l7098
 10345  003190  0E07               	movlw	7
 10346  003192  0100               	movlb	0	; () banked
 10347  003194  5D90               	subwf	readPastRun@i& (0+255),w,b
 10348  003196  B0D8               	btfsc	status,0,c
 10349  003198  D032               	goto	l7098
 10350  00319A                     l7092:
 10351                           
 10352                           ; BSR set to: 0
 10353                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 10354  00319A  C080  F031         	movff	readPastRun@run,___wmul@multiplier
 10355  00319E  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
 10356  0031A2  0E00               	movlw	0
 10357  0031A4  6E34               	movwf	___wmul@multiplicand+1,c
 10358  0031A6  0E07               	movlw	7
 10359  0031A8  6E33               	movwf	___wmul@multiplicand,c
 10360  0031AA  ECF2  F01D         	call	___wmul	;wreg free
 10361  0031AE  0100               	movlb	0	; () banked
 10362  0031B0  5190               	movf	readPastRun@i& (0+255),w,b
 10363  0031B2  2631               	addwf	?___wmul,f,c
 10364  0031B4  0100               	movlb	0	; () banked
 10365  0031B6  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 10366  0031B8  2232               	addwfc	?___wmul+1,f,c
 10367  0031BA  0E01               	movlw	1
 10368  0031BC  2631               	addwf	?___wmul,f,c
 10369  0031BE  0E00               	movlw	0
 10370  0031C0  2232               	addwfc	?___wmul+1,f,c
 10371  0031C2  C031  F037         	movff	?___wmul,eepromRead@address
 10372  0031C6  C032  F038         	movff	?___wmul+1,eepromRead@address+1
 10373  0031CA  0E00               	movlw	0
 10374  0031CC  BE38               	btfsc	eepromRead@address+1,7,c
 10375  0031CE  0EFF               	movlw	-1
 10376  0031D0  6E39               	movwf	eepromRead@address+2,c
 10377  0031D2  6E3A               	movwf	eepromRead@address+3,c
 10378  0031D4  EC67  F01E         	call	_eepromRead	;wreg free
 10379  0031D8  90D8               	bcf	status,0,c
 10380  0031DA  0100               	movlb	0	; () banked
 10381  0031DC  3590               	rlcf	readPastRun@i& (0+255),w,b
 10382  0031DE  6ED9               	movwf	fsr2l,c
 10383  0031E0  0100               	movlb	0	; () banked
 10384  0031E2  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
 10385  0031E4  6EDA               	movwf	fsr2h,c
 10386  0031E6  0E82               	movlw	low readPastRun@data
 10387  0031E8  26D9               	addwf	fsr2l,f,c
 10388  0031EA  0E00               	movlw	high readPastRun@data
 10389  0031EC  22DA               	addwfc	fsr2h,f,c
 10390  0031EE  C037  FFDE         	movff	?_eepromRead,postinc2
 10391  0031F2  C038  FFDD         	movff	?_eepromRead+1,postdec2
 10392                           
 10393                           ; BSR set to: 0
 10394  0031F6  0100               	movlb	0	; () banked
 10395  0031F8  4B90               	infsnz	readPastRun@i& (0+255),f,b
 10396  0031FA  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
 10397  0031FC  D7C3               	goto	l7088
 10398  0031FE                     l7098:
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;eeprom.c: 27: }
 10402                           ;eeprom.c: 28: return data;
 10403  0031FE  0E82               	movlw	low readPastRun@data
 10404  003200  0100               	movlb	0	; () banked
 10405  003202  6F80               	movwf	?_readPastRun& (0+255),b
 10406  003204  0E00               	movlw	high readPastRun@data
 10407  003206  0100               	movlb	0	; () banked
 10408  003208  6F81               	movwf	(?_readPastRun+1)& (0+255),b
 10409  00320A  0012               	return	
 10410  00320C                     __end_of_readPastRun:
 10411                           	opt stack 0
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           prodh	equ	0xFF4
 10417                           prodl	equ	0xFF3
 10418                           intcon	equ	0xFF2
 10419                           postinc0	equ	0xFEE
 10420                           wreg	equ	0xFE8
 10421                           postdec1	equ	0xFE5
 10422                           fsr1l	equ	0xFE1
 10423                           indf2	equ	0xFDF
 10424                           postinc2	equ	0xFDE
 10425                           postdec2	equ	0xFDD
 10426                           fsr2h	equ	0xFDA
 10427                           fsr2l	equ	0xFD9
 10428                           status	equ	0xFD8
 10429                           
 10430 ;; *************** function _eepromRead *****************
 10431 ;; Defined at:
 10432 ;;		line 66 in file "eeprom.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;  address         4   54[COMRAM] long 
 10435 ;; Auto vars:     Size  Location     Type
 10436 ;;		None
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  2   54[COMRAM] int 
 10439 ;; Registers used:
 10440 ;;		wreg, status,2, status,0
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;Total ram usage:        4 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    3
 10453 ;; This function calls:
 10454 ;;		Nothing
 10455 ;; This function is called by:
 10456 ;;		_readPastRun
 10457 ;;		_saveNewRun
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           	psect	text40
 10462  003CCE                     __ptext40:
 10463                           	opt stack 0
 10464  003CCE                     _eepromRead:
 10465                           	opt stack 25
 10466                           
 10467                           ;eeprom.c: 67: EEADR = address;
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;incstack = 0
 10471  003CCE  C037  FFA9         	movff	eepromRead@address,4009	;volatile
 10472                           
 10473                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 10474  003CD2  5038               	movf	eepromRead@address+1,w,c
 10475  003CD4  0B03               	andlw	3
 10476  003CD6  6EAA               	movwf	4010,c	;volatile
 10477                           
 10478                           ;eeprom.c: 69: EECON1 = 0;
 10479  003CD8  0E00               	movlw	0
 10480  003CDA  6EA6               	movwf	4006,c	;volatile
 10481                           
 10482                           ;eeprom.c: 70: EECON1 = 1;
 10483  003CDC  0E01               	movlw	1
 10484  003CDE  6EA6               	movwf	4006,c	;volatile
 10485                           
 10486                           ;eeprom.c: 71: return EEDATA;
 10487  003CE0  CFA8 F037          	movff	4008,?_eepromRead	;volatile
 10488  003CE4  6A38               	clrf	?_eepromRead+1,c
 10489  003CE6  0012               	return	
 10490  003CE8                     __end_of_eepromRead:
 10491                           	opt stack 0
 10492                           tblptru	equ	0xFF8
 10493                           tblptrh	equ	0xFF7
 10494                           tblptrl	equ	0xFF6
 10495                           tablat	equ	0xFF5
 10496                           prodh	equ	0xFF4
 10497                           prodl	equ	0xFF3
 10498                           intcon	equ	0xFF2
 10499                           postinc0	equ	0xFEE
 10500                           wreg	equ	0xFE8
 10501                           postdec1	equ	0xFE5
 10502                           fsr1l	equ	0xFE1
 10503                           indf2	equ	0xFDF
 10504                           postinc2	equ	0xFDE
 10505                           postdec2	equ	0xFDD
 10506                           fsr2h	equ	0xFDA
 10507                           fsr2l	equ	0xFD9
 10508                           status	equ	0xFD8
 10509                           
 10510 ;; *************** function ___wmul *****************
 10511 ;; Defined at:
 10512 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;  multiplier      2   48[COMRAM] unsigned int 
 10515 ;;  multiplicand    2   50[COMRAM] unsigned int 
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;  product         2   52[COMRAM] unsigned int 
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  2   48[COMRAM] unsigned int 
 10520 ;; Registers used:
 10521 ;;		wreg, status,2, status,0, prodl, prodh
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10530 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10531 ;;Total ram usage:        6 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    3
 10534 ;; This function calls:
 10535 ;;		Nothing
 10536 ;; This function is called by:
 10537 ;;		_readPastRun
 10538 ;;		_fround
 10539 ;;		_scale
 10540 ;;		_printf
 10541 ;;		_saveNewRun
 10542 ;; This function uses a non-reentrant model
 10543 ;;
 10544                           
 10545                           	psect	text41
 10546  003BE4                     __ptext41:
 10547                           	opt stack 0
 10548  003BE4                     ___wmul:
 10549                           	opt stack 24
 10550                           
 10551                           ;incstack = 0
 10552  003BE4  5031               	movf	___wmul@multiplier,w,c
 10553  003BE6  0233               	mulwf	___wmul@multiplicand,c
 10554  003BE8  CFF3 F035          	movff	prodl,___wmul@product
 10555  003BEC  CFF4 F036          	movff	prodh,___wmul@product+1
 10556  003BF0  5031               	movf	___wmul@multiplier,w,c
 10557  003BF2  0234               	mulwf	___wmul@multiplicand+1,c
 10558  003BF4  50F3               	movf	prodl,w,c
 10559  003BF6  2636               	addwf	___wmul@product+1,f,c
 10560  003BF8  5032               	movf	___wmul@multiplier+1,w,c
 10561  003BFA  0233               	mulwf	___wmul@multiplicand,c
 10562  003BFC  50F3               	movf	prodl,w,c
 10563  003BFE  2636               	addwf	___wmul@product+1,f,c
 10564  003C00  C035  F031         	movff	___wmul@product,?___wmul
 10565  003C04  C036  F032         	movff	___wmul@product+1,?___wmul+1
 10566  003C08  0012               	return	
 10567  003C0A                     __end_of___wmul:
 10568                           	opt stack 0
 10569                           tblptru	equ	0xFF8
 10570                           tblptrh	equ	0xFF7
 10571                           tblptrl	equ	0xFF6
 10572                           tablat	equ	0xFF5
 10573                           prodh	equ	0xFF4
 10574                           prodl	equ	0xFF3
 10575                           intcon	equ	0xFF2
 10576                           postinc0	equ	0xFEE
 10577                           wreg	equ	0xFE8
 10578                           postdec1	equ	0xFE5
 10579                           fsr1l	equ	0xFE1
 10580                           indf2	equ	0xFDF
 10581                           postinc2	equ	0xFDE
 10582                           postdec2	equ	0xFDD
 10583                           fsr2h	equ	0xFDA
 10584                           fsr2l	equ	0xFD9
 10585                           status	equ	0xFD8
 10586                           
 10587 ;; *************** function _pinSetup *****************
 10588 ;; Defined at:
 10589 ;;		line 293 in file "main.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;		None
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;		None
 10594 ;; Return value:  Size  Location     Type
 10595 ;;                  1    wreg      void 
 10596 ;; Registers used:
 10597 ;;		wreg, status,2, status,0
 10598 ;; Tracked objects:
 10599 ;;		On entry : 0/0
 10600 ;;		On exit  : 0/0
 10601 ;;		Unchanged: 0/0
 10602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;Total ram usage:        0 bytes
 10608 ;; Hardware stack levels used:    1
 10609 ;; Hardware stack levels required when called:    3
 10610 ;; This function calls:
 10611 ;;		Nothing
 10612 ;; This function is called by:
 10613 ;;		_main
 10614 ;;		_debug
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text42
 10619  003AE8                     __ptext42:
 10620                           	opt stack 0
 10621  003AE8                     _pinSetup:
 10622                           	opt stack 27
 10623                           
 10624                           ;main.c: 299: TRISA = 0xFF;
 10625                           
 10626                           ;incstack = 0
 10627  003AE8  6892               	setf	3986,c	;volatile
 10628                           
 10629                           ;main.c: 300: TRISB = 0xFF;
 10630  003AEA  6893               	setf	3987,c	;volatile
 10631                           
 10632                           ;main.c: 301: TRISC = 0b11000000;
 10633  003AEC  0EC0               	movlw	192
 10634  003AEE  6E94               	movwf	3988,c	;volatile
 10635                           
 10636                           ;main.c: 302: TRISD = 0x00;
 10637  003AF0  0E00               	movlw	0
 10638  003AF2  6E95               	movwf	3989,c	;volatile
 10639                           
 10640                           ;main.c: 303: TRISE = 0x00;
 10641  003AF4  0E00               	movlw	0
 10642  003AF6  6E96               	movwf	3990,c	;volatile
 10643                           
 10644                           ;main.c: 305: LATA = 0x00;
 10645  003AF8  0E00               	movlw	0
 10646  003AFA  6E89               	movwf	3977,c	;volatile
 10647                           
 10648                           ;main.c: 306: LATB = 0x00;
 10649  003AFC  0E00               	movlw	0
 10650  003AFE  6E8A               	movwf	3978,c	;volatile
 10651                           
 10652                           ;main.c: 307: LATC = 0x00;
 10653  003B00  0E00               	movlw	0
 10654  003B02  6E8B               	movwf	3979,c	;volatile
 10655                           
 10656                           ;main.c: 308: LATD = 0x00;
 10657  003B04  0E00               	movlw	0
 10658  003B06  6E8C               	movwf	3980,c	;volatile
 10659                           
 10660                           ;main.c: 309: LATE = 0x00;
 10661  003B08  0E00               	movlw	0
 10662  003B0A  6E8D               	movwf	3981,c	;volatile
 10663                           
 10664                           ;main.c: 311: ADCON0 = 0x00;
 10665  003B0C  0E00               	movlw	0
 10666  003B0E  6EC2               	movwf	4034,c	;volatile
 10667                           
 10668                           ;main.c: 313: ADCON1 |= 0x0B;
 10669  003B10  0E0B               	movlw	11
 10670  003B12  12C1               	iorwf	4033,f,c	;volatile
 10671                           
 10672                           ;main.c: 318: ADCON2 = 0;
 10673  003B14  0E00               	movlw	0
 10674  003B16  6EC0               	movwf	4032,c	;volatile
 10675                           
 10676                           ;main.c: 319: ADCON2 |= 0b010;
 10677  003B18  82C0               	bsf	4032,1,c	;volatile
 10678                           
 10679                           ;main.c: 320: ADCON2 |= 0b110<<3;
 10680  003B1A  0E30               	movlw	48
 10681  003B1C  12C0               	iorwf	4032,f,c	;volatile
 10682                           
 10683                           ;main.c: 321: ADCON2 |= 1<<7;
 10684  003B1E  8EC0               	bsf	4032,7,c	;volatile
 10685                           
 10686                           ;main.c: 324: INT1IE = 1;
 10687  003B20  86F0               	bsf	intcon3,3,c	;volatile
 10688                           
 10689                           ;main.c: 325: INT0IE = 1;
 10690  003B22  88F2               	bsf	intcon,4,c	;volatile
 10691                           
 10692                           ;main.c: 326: (INTCONbits.GIE = 1);
 10693  003B24  8EF2               	bsf	intcon,7,c	;volatile
 10694  003B26  0012               	return		;funcret
 10695  003B28                     __end_of_pinSetup:
 10696                           	opt stack 0
 10697                           tblptru	equ	0xFF8
 10698                           tblptrh	equ	0xFF7
 10699                           tblptrl	equ	0xFF6
 10700                           tablat	equ	0xFF5
 10701                           prodh	equ	0xFF4
 10702                           prodl	equ	0xFF3
 10703                           intcon	equ	0xFF2
 10704                           intcon3	equ	0xFF0
 10705                           postinc0	equ	0xFEE
 10706                           wreg	equ	0xFE8
 10707                           postdec1	equ	0xFE5
 10708                           fsr1l	equ	0xFE1
 10709                           indf2	equ	0xFDF
 10710                           postinc2	equ	0xFDE
 10711                           postdec2	equ	0xFDD
 10712                           fsr2h	equ	0xFDA
 10713                           fsr2l	equ	0xFD9
 10714                           status	equ	0xFD8
 10715                           
 10716 ;; *************** function _lcdHome *****************
 10717 ;; Defined at:
 10718 ;;		line 70 in file "lcd.c"
 10719 ;; Parameters:    Size  Location     Type
 10720 ;;		None
 10721 ;; Auto vars:     Size  Location     Type
 10722 ;;		None
 10723 ;; Return value:  Size  Location     Type
 10724 ;;                  2   26[None  ] int 
 10725 ;; Registers used:
 10726 ;;		wreg, status,2, status,0, cstack
 10727 ;; Tracked objects:
 10728 ;;		On entry : 0/0
 10729 ;;		On exit  : 0/0
 10730 ;;		Unchanged: 0/0
 10731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10736 ;;Total ram usage:        0 bytes
 10737 ;; Hardware stack levels used:    1
 10738 ;; Hardware stack levels required when called:    5
 10739 ;; This function calls:
 10740 ;;		_lcdInst
 10741 ;; This function is called by:
 10742 ;;		_main
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           	psect	text43
 10747  003D52                     __ptext43:
 10748                           	opt stack 0
 10749  003D52                     _lcdHome:
 10750                           	opt stack 25
 10751                           
 10752                           ;lcd.c: 71: lcdInst(0b11000000);
 10753                           
 10754                           ;incstack = 0
 10755  003D52  0EC0               	movlw	192
 10756  003D54  EC28  F01E         	call	_lcdInst
 10757  003D58  0012               	return		;funcret
 10758  003D5A                     __end_of_lcdHome:
 10759                           	opt stack 0
 10760                           tblptru	equ	0xFF8
 10761                           tblptrh	equ	0xFF7
 10762                           tblptrl	equ	0xFF6
 10763                           tablat	equ	0xFF5
 10764                           prodh	equ	0xFF4
 10765                           prodl	equ	0xFF3
 10766                           intcon	equ	0xFF2
 10767                           intcon3	equ	0xFF0
 10768                           postinc0	equ	0xFEE
 10769                           wreg	equ	0xFE8
 10770                           postdec1	equ	0xFE5
 10771                           fsr1l	equ	0xFE1
 10772                           indf2	equ	0xFDF
 10773                           postinc2	equ	0xFDE
 10774                           postdec2	equ	0xFDD
 10775                           fsr2h	equ	0xFDA
 10776                           fsr2l	equ	0xFD9
 10777                           status	equ	0xFD8
 10778                           
 10779 ;; *************** function _initServo *****************
 10780 ;; Defined at:
 10781 ;;		line 21 in file "servo.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;  motor           2   94[BANK0 ] PTR int 
 10784 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 10785 ;;  angle           2   96[BANK0 ] int 
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;  i               2  102[BANK0 ] int 
 10788 ;; Return value:  Size  Location     Type
 10789 ;;                  1    wreg      void 
 10790 ;; Registers used:
 10791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10797 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;Total ram usage:       10 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; Hardware stack levels required when called:    7
 10804 ;; This function calls:
 10805 ;;		_initTimer
 10806 ;;		_setAngle
 10807 ;;		_startTimer
 10808 ;; This function is called by:
 10809 ;;		_main
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813                           	psect	text44
 10814  0029E4                     __ptext44:
 10815                           	opt stack 0
 10816  0029E4                     _initServo:
 10817                           	opt stack 23
 10818                           
 10819                           ;servo.c: 24: for(int i = 0; i < n; i++){
 10820                           
 10821                           ;incstack = 0
 10822  0029E4  0E00               	movlw	0
 10823  0029E6  0100               	movlb	0	; () banked
 10824  0029E8  6FE7               	movwf	(initServo@i+1)& (0+255),b
 10825  0029EA  0E00               	movlw	0
 10826  0029EC  6FE6               	movwf	initServo@i& (0+255),b
 10827  0029EE  D017               	goto	l7254
 10828  0029F0                     l7248:
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;servo.c: 25: if(servos[i] == motor)return;
 10832  0029F0  90D8               	bcf	status,0,c
 10833  0029F2  0100               	movlb	0	; () banked
 10834  0029F4  35E6               	rlcf	initServo@i& (0+255),w,b
 10835  0029F6  6ED9               	movwf	fsr2l,c
 10836  0029F8  0100               	movlb	0	; () banked
 10837  0029FA  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
 10838  0029FC  6EDA               	movwf	fsr2h,c
 10839  0029FE  0E40               	movlw	low _servos
 10840  002A00  26D9               	addwf	fsr2l,f,c
 10841  002A02  0E01               	movlw	high _servos
 10842  002A04  22DA               	addwfc	fsr2h,f,c
 10843  002A06  0100               	movlb	0	; () banked
 10844  002A08  51DE               	movf	initServo@motor& (0+255),w,b
 10845  002A0A  18DE               	xorwf	postinc2,w,c
 10846  002A0C  E105               	bnz	l7252
 10847  002A0E  0100               	movlb	0	; () banked
 10848  002A10  51DF               	movf	(initServo@motor+1)& (0+255),w,b
 10849  002A12  18DE               	xorwf	postinc2,w,c
 10850  002A14  B4D8               	btfsc	status,2,c
 10851  002A16  0012               	return	
 10852  002A18                     l7252:
 10853                           
 10854                           ; BSR set to: 0
 10855  002A18  0100               	movlb	0	; () banked
 10856  002A1A  4BE6               	infsnz	initServo@i& (0+255),f,b
 10857  002A1C  2BE7               	incf	(initServo@i+1)& (0+255),f,b
 10858  002A1E                     l7254:
 10859                           
 10860                           ; BSR set to: 0
 10861  002A1E  0100               	movlb	0	; () banked
 10862  002A20  51FA               	movf	_n& (0+255),w,b
 10863  002A22  0100               	movlb	0	; () banked
 10864  002A24  5DE6               	subwf	initServo@i& (0+255),w,b
 10865  002A26  0100               	movlb	0	; () banked
 10866  002A28  51E7               	movf	(initServo@i+1)& (0+255),w,b
 10867  002A2A  0A80               	xorlw	128
 10868  002A2C  0100               	movlb	0	; () banked
 10869  002A2E  6FE2               	movwf	??_initServo& (0+255),b
 10870  002A30  0100               	movlb	0	; () banked
 10871  002A32  51FB               	movf	(_n+1)& (0+255),w,b
 10872  002A34  0A80               	xorlw	128
 10873  002A36  0100               	movlb	0	; () banked
 10874  002A38  59E2               	subwfb	??_initServo& (0+255),w,b
 10875  002A3A  A0D8               	btfss	status,0,c
 10876  002A3C  D7D9               	goto	l7248
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;servo.c: 26: }
 10880                           ;servo.c: 28: n++;
 10881                           
 10882                           ; BSR set to: 0
 10883  002A3E  0100               	movlb	0	; () banked
 10884  002A40  4BFA               	infsnz	_n& (0+255),f,b
 10885  002A42  2BFB               	incf	(_n+1)& (0+255),f,b
 10886                           
 10887                           ; BSR set to: 0
 10888                           ;servo.c: 29: servos[n-1] = motor;
 10889  002A44  0EFE               	movlw	254
 10890  002A46  0100               	movlb	0	; () banked
 10891  002A48  6FE2               	movwf	??_initServo& (0+255),b
 10892  002A4A  0EFF               	movlw	255
 10893  002A4C  0100               	movlb	0	; () banked
 10894  002A4E  6FE3               	movwf	(??_initServo+1)& (0+255),b
 10895  002A50  C0FA  F0E4         	movff	_n,??_initServo+2
 10896  002A54  C0FB  F0E5         	movff	_n+1,??_initServo+3
 10897  002A58  90D8               	bcf	status,0,c
 10898  002A5A  0100               	movlb	0	; () banked
 10899  002A5C  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
 10900  002A5E  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
 10901  002A60  0100               	movlb	0	; () banked
 10902  002A62  51E2               	movf	??_initServo& (0+255),w,b
 10903  002A64  0100               	movlb	0	; () banked
 10904  002A66  27E4               	addwf	(??_initServo+2)& (0+255),f,b
 10905  002A68  0100               	movlb	0	; () banked
 10906  002A6A  51E3               	movf	(??_initServo+1)& (0+255),w,b
 10907  002A6C  0100               	movlb	0	; () banked
 10908  002A6E  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
 10909  002A70  0E40               	movlw	low _servos
 10910  002A72  0100               	movlb	0	; () banked
 10911  002A74  25E4               	addwf	(??_initServo+2)& (0+255),w,b
 10912  002A76  6ED9               	movwf	fsr2l,c
 10913  002A78  0E01               	movlw	high _servos
 10914  002A7A  0100               	movlb	0	; () banked
 10915  002A7C  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
 10916  002A7E  6EDA               	movwf	fsr2h,c
 10917  002A80  C0DE  FFDE         	movff	initServo@motor,postinc2
 10918  002A84  C0DF  FFDD         	movff	initServo@motor+1,postdec2
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;servo.c: 30: setAngle(motor, angle);
 10922  002A88  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
 10923  002A8C  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
 10924  002A90  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
 10925  002A94  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
 10926  002A98  EC63  F015         	call	_setAngle	;wreg free
 10927                           
 10928                           ;servo.c: 32: initTimer(0);
 10929  002A9C  0E00               	movlw	0
 10930  002A9E  6E24               	movwf	initTimer@timer+1,c
 10931  002AA0  0E00               	movlw	0
 10932  002AA2  6E23               	movwf	initTimer@timer,c
 10933  002AA4  EC2C  F01D         	call	_initTimer	;wreg free
 10934                           
 10935                           ;servo.c: 33: startTimer(0,0);
 10936  002AA8  0E00               	movlw	0
 10937  002AAA  6E24               	movwf	startTimer@timer+1,c
 10938  002AAC  0E00               	movlw	0
 10939  002AAE  6E23               	movwf	startTimer@timer,c
 10940  002AB0  0E00               	movlw	0
 10941  002AB2  6E25               	movwf	startTimer@val,c
 10942  002AB4  0E00               	movlw	0
 10943  002AB6  6E26               	movwf	startTimer@val+1,c
 10944  002AB8  0E00               	movlw	0
 10945  002ABA  6E27               	movwf	startTimer@val+2,c
 10946  002ABC  0E00               	movlw	0
 10947  002ABE  6E28               	movwf	startTimer@val+3,c
 10948  002AC0  ECE0  F01C         	call	_startTimer	;wreg free
 10949  002AC4  0012               	return		;funcret
 10950  002AC6                     __end_of_initServo:
 10951                           	opt stack 0
 10952                           tblptru	equ	0xFF8
 10953                           tblptrh	equ	0xFF7
 10954                           tblptrl	equ	0xFF6
 10955                           tablat	equ	0xFF5
 10956                           prodh	equ	0xFF4
 10957                           prodl	equ	0xFF3
 10958                           intcon	equ	0xFF2
 10959                           intcon3	equ	0xFF0
 10960                           postinc0	equ	0xFEE
 10961                           wreg	equ	0xFE8
 10962                           postdec1	equ	0xFE5
 10963                           fsr1l	equ	0xFE1
 10964                           indf2	equ	0xFDF
 10965                           postinc2	equ	0xFDE
 10966                           postdec2	equ	0xFDD
 10967                           fsr2h	equ	0xFDA
 10968                           fsr2l	equ	0xFD9
 10969                           status	equ	0xFD8
 10970                           
 10971 ;; *************** function _startTimer *****************
 10972 ;; Defined at:
 10973 ;;		line 76 in file "timer.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;  timer           2   34[COMRAM] int 
 10976 ;;  val             4   36[COMRAM] long 
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;		None
 10979 ;; Return value:  Size  Location     Type
 10980 ;;                  1    wreg      void 
 10981 ;; Registers used:
 10982 ;;		wreg, status,2, status,0
 10983 ;; Tracked objects:
 10984 ;;		On entry : 0/0
 10985 ;;		On exit  : 0/0
 10986 ;;		Unchanged: 0/0
 10987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10988 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10992 ;;Total ram usage:        8 bytes
 10993 ;; Hardware stack levels used:    1
 10994 ;; Hardware stack levels required when called:    3
 10995 ;; This function calls:
 10996 ;;		Nothing
 10997 ;; This function is called by:
 10998 ;;		_main
 10999 ;;		_initServo
 11000 ;;		_testFrequency
 11001 ;; This function uses a non-reentrant model
 11002 ;;
 11003                           
 11004                           	psect	text45
 11005  0039C0                     __ptext45:
 11006                           	opt stack 0
 11007  0039C0                     _startTimer:
 11008                           	opt stack 27
 11009                           
 11010                           ;timer.c: 77: switch(timer){
 11011                           
 11012                           ;incstack = 0
 11013  0039C0  D012               	goto	l4932
 11014  0039C2                     l454:
 11015                           
 11016                           ;timer.c: 79: TMR0H = val>>8;
 11017  0039C2  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
 11018                           
 11019                           ;timer.c: 80: TMR0L = val;
 11020  0039C6  C025  FFD6         	movff	startTimer@val,4054	;volatile
 11021                           
 11022                           ;timer.c: 81: T0CON |= 1<<7;
 11023  0039CA  8ED5               	bsf	4053,7,c	;volatile
 11024                           
 11025                           ;timer.c: 82: break;
 11026  0039CC  0012               	return	
 11027  0039CE                     l456:
 11028                           
 11029                           ;timer.c: 84: TMR1H = val>>8;
 11030  0039CE  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
 11031                           
 11032                           ;timer.c: 85: TMR1L = val;
 11033  0039D2  C025  FFCE         	movff	startTimer@val,4046	;volatile
 11034                           
 11035                           ;timer.c: 86: T1CON |= 1<<0;
 11036  0039D6  80CD               	bsf	4045,0,c	;volatile
 11037                           
 11038                           ;timer.c: 87: break;
 11039  0039D8  0012               	return	
 11040  0039DA                     l457:
 11041                           
 11042                           ;timer.c: 89: TMR3H = val>>8;
 11043  0039DA  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
 11044                           
 11045                           ;timer.c: 90: TMR3L = val;
 11046  0039DE  C025  FFB2         	movff	startTimer@val,4018	;volatile
 11047                           
 11048                           ;timer.c: 91: T3CON |= 1<<0;
 11049  0039E2  80B1               	bsf	4017,0,c	;volatile
 11050                           
 11051                           ;timer.c: 92: }
 11052  0039E4  0012               	return	
 11053  0039E6                     l4932:
 11054  0039E6  C023  F029         	movff	startTimer@timer,??_startTimer
 11055  0039EA  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
 11056                           
 11057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11058                           ; Switch size 1, requested type "space"
 11059                           ; Number of cases is 1, Range of values is 0 to 0
 11060                           ; switch strategies available:
 11061                           ; Name         Instructions Cycles
 11062                           ; simple_byte            4     3 (average)
 11063                           ;	Chosen strategy is simple_byte
 11064  0039EE  502A               	movf	??_startTimer+1,w,c
 11065  0039F0  0A00               	xorlw	0	; case 0
 11066  0039F2  A4D8               	btfss	status,2,c
 11067  0039F4  0012               	return	
 11068                           
 11069                           ; Switch size 1, requested type "space"
 11070                           ; Number of cases is 3, Range of values is 0 to 3
 11071                           ; switch strategies available:
 11072                           ; Name         Instructions Cycles
 11073                           ; simple_byte           10     6 (average)
 11074                           ;	Chosen strategy is simple_byte
 11075  0039F6  5029               	movf	??_startTimer,w,c
 11076  0039F8  0A00               	xorlw	0	; case 0
 11077  0039FA  B4D8               	btfsc	status,2,c
 11078  0039FC  D7E2               	goto	l454
 11079  0039FE  0A01               	xorlw	1	; case 1
 11080  003A00  B4D8               	btfsc	status,2,c
 11081  003A02  D7E5               	goto	l456
 11082  003A04  0A02               	xorlw	2	; case 3
 11083  003A06  A4D8               	btfss	status,2,c
 11084  003A08  0012               	return	
 11085  003A0A  D7E7               	goto	l457
 11086  003A0C                     __end_of_startTimer:
 11087                           	opt stack 0
 11088                           tblptru	equ	0xFF8
 11089                           tblptrh	equ	0xFF7
 11090                           tblptrl	equ	0xFF6
 11091                           tablat	equ	0xFF5
 11092                           prodh	equ	0xFF4
 11093                           prodl	equ	0xFF3
 11094                           intcon	equ	0xFF2
 11095                           intcon3	equ	0xFF0
 11096                           postinc0	equ	0xFEE
 11097                           wreg	equ	0xFE8
 11098                           postdec1	equ	0xFE5
 11099                           fsr1l	equ	0xFE1
 11100                           indf2	equ	0xFDF
 11101                           postinc2	equ	0xFDE
 11102                           postdec2	equ	0xFDD
 11103                           fsr2h	equ	0xFDA
 11104                           fsr2l	equ	0xFD9
 11105                           status	equ	0xFD8
 11106                           
 11107 ;; *************** function _setAngle *****************
 11108 ;; Defined at:
 11109 ;;		line 44 in file "servo.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;  motor           2   84[BANK0 ] PTR int 
 11112 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 11113 ;;  angle           2   86[BANK0 ] int 
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;  i               2   92[BANK0 ] int 
 11116 ;;  period          2   90[BANK0 ] unsigned int 
 11117 ;; Return value:  Size  Location     Type
 11118 ;;                  1    wreg      void 
 11119 ;; Registers used:
 11120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11121 ;; Tracked objects:
 11122 ;;		On entry : 0/0
 11123 ;;		On exit  : 0/0
 11124 ;;		Unchanged: 0/0
 11125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11126 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11129 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11130 ;;Total ram usage:       10 bytes
 11131 ;; Hardware stack levels used:    1
 11132 ;; Hardware stack levels required when called:    6
 11133 ;; This function calls:
 11134 ;;		_angleToPulse
 11135 ;; This function is called by:
 11136 ;;		_sortBattery
 11137 ;;		_initServo
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           	psect	text46
 11142  002AC6                     __ptext46:
 11143                           	opt stack 0
 11144  002AC6                     _setAngle:
 11145                           	opt stack 23
 11146                           
 11147                           ;servo.c: 45: unsigned int period = 50000;
 11148                           
 11149                           ;incstack = 0
 11150  002AC6  0EC3               	movlw	195
 11151  002AC8  0100               	movlb	0	; () banked
 11152  002ACA  6FDB               	movwf	(setAngle@period+1)& (0+255),b
 11153  002ACC  0E50               	movlw	80
 11154  002ACE  6FDA               	movwf	setAngle@period& (0+255),b
 11155                           
 11156                           ;servo.c: 46: for(int i = 0; i < n; i++){
 11157  002AD0  0E00               	movlw	0
 11158  002AD2  0100               	movlb	0	; () banked
 11159  002AD4  6FDD               	movwf	(setAngle@i+1)& (0+255),b
 11160  002AD6  0E00               	movlw	0
 11161  002AD8  6FDC               	movwf	setAngle@i& (0+255),b
 11162  002ADA  D03F               	goto	l7072
 11163  002ADC                     l7064:
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;servo.c: 47: if(servos[i] == motor){
 11167  002ADC  90D8               	bcf	status,0,c
 11168  002ADE  0100               	movlb	0	; () banked
 11169  002AE0  35DC               	rlcf	setAngle@i& (0+255),w,b
 11170  002AE2  6ED9               	movwf	fsr2l,c
 11171  002AE4  0100               	movlb	0	; () banked
 11172  002AE6  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11173  002AE8  6EDA               	movwf	fsr2h,c
 11174  002AEA  0E40               	movlw	low _servos
 11175  002AEC  26D9               	addwf	fsr2l,f,c
 11176  002AEE  0E01               	movlw	high _servos
 11177  002AF0  22DA               	addwfc	fsr2h,f,c
 11178  002AF2  0100               	movlb	0	; () banked
 11179  002AF4  51D4               	movf	setAngle@motor& (0+255),w,b
 11180  002AF6  18DE               	xorwf	postinc2,w,c
 11181  002AF8  E11C               	bnz	l7068
 11182  002AFA  0100               	movlb	0	; () banked
 11183  002AFC  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
 11184  002AFE  18DE               	xorwf	postinc2,w,c
 11185  002B00  A4D8               	btfss	status,2,c
 11186  002B02  D017               	goto	l7068
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
 11190  002B04  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
 11191  002B08  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
 11192  002B0C  EC7F  F010         	call	_angleToPulse	;wreg free
 11193  002B10  90D8               	bcf	status,0,c
 11194  002B12  0100               	movlb	0	; () banked
 11195  002B14  35DC               	rlcf	setAngle@i& (0+255),w,b
 11196  002B16  6ED9               	movwf	fsr2l,c
 11197  002B18  0100               	movlb	0	; () banked
 11198  002B1A  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11199  002B1C  6EDA               	movwf	fsr2h,c
 11200  002B1E  0E38               	movlw	low _pulse
 11201  002B20  26D9               	addwf	fsr2l,f,c
 11202  002B22  0E01               	movlw	high _pulse
 11203  002B24  22DA               	addwfc	fsr2h,f,c
 11204  002B26  0100               	movlb	0	; () banked
 11205  002B28  C0BD  FFDE         	movff	?_angleToPulse,postinc2
 11206  002B2C  0100               	movlb	0	; () banked
 11207  002B2E  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
 11208  002B32                     l7068:
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;servo.c: 49: }
 11212                           ;servo.c: 50: period-=pulse[i];
 11213  002B32  90D8               	bcf	status,0,c
 11214  002B34  0100               	movlb	0	; () banked
 11215  002B36  35DC               	rlcf	setAngle@i& (0+255),w,b
 11216  002B38  6ED9               	movwf	fsr2l,c
 11217  002B3A  0100               	movlb	0	; () banked
 11218  002B3C  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11219  002B3E  6EDA               	movwf	fsr2h,c
 11220  002B40  0E38               	movlw	low _pulse
 11221  002B42  26D9               	addwf	fsr2l,f,c
 11222  002B44  0E01               	movlw	high _pulse
 11223  002B46  22DA               	addwfc	fsr2h,f,c
 11224  002B48  50DE               	movf	postinc2,w,c
 11225  002B4A  0100               	movlb	0	; () banked
 11226  002B4C  5FDA               	subwf	setAngle@period& (0+255),f,b
 11227  002B4E  50DD               	movf	postdec2,w,c
 11228  002B50  0100               	movlb	0	; () banked
 11229  002B52  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
 11230                           
 11231                           ; BSR set to: 0
 11232  002B54  0100               	movlb	0	; () banked
 11233  002B56  4BDC               	infsnz	setAngle@i& (0+255),f,b
 11234  002B58  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
 11235  002B5A                     l7072:
 11236                           
 11237                           ; BSR set to: 0
 11238  002B5A  0100               	movlb	0	; () banked
 11239  002B5C  51FA               	movf	_n& (0+255),w,b
 11240  002B5E  0100               	movlb	0	; () banked
 11241  002B60  5DDC               	subwf	setAngle@i& (0+255),w,b
 11242  002B62  0100               	movlb	0	; () banked
 11243  002B64  51DD               	movf	(setAngle@i+1)& (0+255),w,b
 11244  002B66  0A80               	xorlw	128
 11245  002B68  0100               	movlb	0	; () banked
 11246  002B6A  6FD8               	movwf	??_setAngle& (0+255),b
 11247  002B6C  0100               	movlb	0	; () banked
 11248  002B6E  51FB               	movf	(_n+1)& (0+255),w,b
 11249  002B70  0A80               	xorlw	128
 11250  002B72  0100               	movlb	0	; () banked
 11251  002B74  59D8               	subwfb	??_setAngle& (0+255),w,b
 11252  002B76  A0D8               	btfss	status,0,c
 11253  002B78  D7B1               	goto	l7064
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;servo.c: 51: }
 11257                           ;servo.c: 52: pulse[n] = period;
 11258                           
 11259                           ; BSR set to: 0
 11260  002B7A  90D8               	bcf	status,0,c
 11261  002B7C  0100               	movlb	0	; () banked
 11262  002B7E  35FA               	rlcf	_n& (0+255),w,b
 11263  002B80  6ED9               	movwf	fsr2l,c
 11264  002B82  0100               	movlb	0	; () banked
 11265  002B84  35FB               	rlcf	(_n+1)& (0+255),w,b
 11266  002B86  6EDA               	movwf	fsr2h,c
 11267  002B88  0E38               	movlw	low _pulse
 11268  002B8A  26D9               	addwf	fsr2l,f,c
 11269  002B8C  0E01               	movlw	high _pulse
 11270  002B8E  22DA               	addwfc	fsr2h,f,c
 11271  002B90  C0DA  FFDE         	movff	setAngle@period,postinc2
 11272  002B94  C0DB  FFDD         	movff	setAngle@period+1,postdec2
 11273                           
 11274                           ; BSR set to: 0
 11275  002B98  0012               	return		;funcret
 11276  002B9A                     __end_of_setAngle:
 11277                           	opt stack 0
 11278                           tblptru	equ	0xFF8
 11279                           tblptrh	equ	0xFF7
 11280                           tblptrl	equ	0xFF6
 11281                           tablat	equ	0xFF5
 11282                           prodh	equ	0xFF4
 11283                           prodl	equ	0xFF3
 11284                           intcon	equ	0xFF2
 11285                           intcon3	equ	0xFF0
 11286                           postinc0	equ	0xFEE
 11287                           wreg	equ	0xFE8
 11288                           postdec1	equ	0xFE5
 11289                           fsr1l	equ	0xFE1
 11290                           indf2	equ	0xFDF
 11291                           postinc2	equ	0xFDE
 11292                           postdec2	equ	0xFDD
 11293                           fsr2h	equ	0xFDA
 11294                           fsr2l	equ	0xFD9
 11295                           status	equ	0xFD8
 11296                           
 11297 ;; *************** function _angleToPulse *****************
 11298 ;; Defined at:
 11299 ;;		line 36 in file "servo.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  angle           2   61[BANK0 ] int 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;  a000            4   80[BANK0 ] long 
 11304 ;;  a180            4   73[BANK0 ] long 
 11305 ;;  offset          4   69[BANK0 ] long 
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  4   61[BANK0 ] long 
 11308 ;; Registers used:
 11309 ;;		wreg, status,2, status,0, cstack
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11315 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11316 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11317 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;Total ram usage:       23 bytes
 11320 ;; Hardware stack levels used:    1
 11321 ;; Hardware stack levels required when called:    5
 11322 ;; This function calls:
 11323 ;;		___altoft
 11324 ;;		___awtoft
 11325 ;;		___ftadd
 11326 ;;		___ftdiv
 11327 ;;		___ftmul
 11328 ;;		___fttol
 11329 ;; This function is called by:
 11330 ;;		_setAngle
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           	psect	text47
 11335  0020FE                     __ptext47:
 11336                           	opt stack 0
 11337  0020FE                     _angleToPulse:
 11338                           	opt stack 23
 11339                           
 11340                           ;servo.c: 37: long offset = -600;
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;incstack = 0
 11344  0020FE  0EA8               	movlw	168
 11345  002100  0100               	movlb	0	; () banked
 11346  002102  6FC5               	movwf	angleToPulse@offset& (0+255),b
 11347  002104  0EFD               	movlw	253
 11348  002106  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
 11349  002108  0EFF               	movlw	255
 11350  00210A  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
 11351  00210C  0EFF               	movlw	255
 11352  00210E  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
 11353                           
 11354                           ;servo.c: 38: long a000 = 1250;
 11355  002110  0EE2               	movlw	226
 11356  002112  0100               	movlb	0	; () banked
 11357  002114  6FD0               	movwf	angleToPulse@a000& (0+255),b
 11358  002116  0E04               	movlw	4
 11359  002118  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
 11360  00211A  0E00               	movlw	0
 11361  00211C  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
 11362  00211E  0E00               	movlw	0
 11363  002120  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
 11364                           
 11365                           ;servo.c: 39: long a180 = 6250;
 11366  002122  0E6A               	movlw	106
 11367  002124  0100               	movlb	0	; () banked
 11368  002126  6FC9               	movwf	angleToPulse@a180& (0+255),b
 11369  002128  0E18               	movlw	24
 11370  00212A  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
 11371  00212C  0E00               	movlw	0
 11372  00212E  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
 11373  002130  0E00               	movlw	0
 11374  002132  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 11378  002134  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
 11379  002138  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
 11380  00213C  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
 11381  002140  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
 11382  002144  0100               	movlb	0	; () banked
 11383  002146  1FC1               	comf	??_angleToPulse& (0+255),f,b
 11384  002148  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
 11385  00214A  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
 11386  00214C  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
 11387  00214E  2BC1               	incf	??_angleToPulse& (0+255),f,b
 11388  002150  0E00               	movlw	0
 11389  002152  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 11390  002154  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 11391  002156  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 11392  002158  0100               	movlb	0	; () banked
 11393  00215A  51C9               	movf	angleToPulse@a180& (0+255),w,b
 11394  00215C  0100               	movlb	0	; () banked
 11395  00215E  25C1               	addwf	??_angleToPulse& (0+255),w,b
 11396  002160  6E2B               	movwf	___altoft@c,c
 11397  002162  0100               	movlb	0	; () banked
 11398  002164  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
 11399  002166  0100               	movlb	0	; () banked
 11400  002168  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 11401  00216A  6E2C               	movwf	___altoft@c+1,c
 11402  00216C  0100               	movlb	0	; () banked
 11403  00216E  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
 11404  002170  0100               	movlb	0	; () banked
 11405  002172  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 11406  002174  6E2D               	movwf	___altoft@c+2,c
 11407  002176  0100               	movlb	0	; () banked
 11408  002178  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
 11409  00217A  0100               	movlb	0	; () banked
 11410  00217C  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 11411  00217E  6E2E               	movwf	___altoft@c+3,c
 11412  002180  EC9C  F01A         	call	___altoft	;wreg free
 11413  002184  C02B  F08C         	movff	?___altoft,___ftmul@f2
 11414  002188  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
 11415  00218C  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
 11416  002190  0E00               	movlw	0
 11417  002192  6E38               	movwf	___ftdiv@f2,c
 11418  002194  0E34               	movlw	52
 11419  002196  6E39               	movwf	___ftdiv@f2+1,c
 11420  002198  0E43               	movlw	67
 11421  00219A  6E3A               	movwf	___ftdiv@f2+2,c
 11422  00219C  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
 11423  0021A0  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
 11424  0021A4  ECB0  F01D         	call	___awtoft	;wreg free
 11425  0021A8  C02B  F035         	movff	?___awtoft,___ftdiv@f1
 11426  0021AC  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
 11427  0021B0  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
 11428  0021B4  ECFA  F012         	call	___ftdiv	;wreg free
 11429  0021B8  C035  F089         	movff	?___ftdiv,___ftmul@f1
 11430  0021BC  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
 11431  0021C0  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
 11432  0021C4  ECD0  F00F         	call	___ftmul	;wreg free
 11433  0021C8  C089  F0A5         	movff	?___ftmul,___ftadd@f2
 11434  0021CC  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
 11435  0021D0  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
 11436  0021D4  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
 11437  0021D8  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
 11438  0021DC  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
 11439  0021E0  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
 11440  0021E4  EC9C  F01A         	call	___altoft	;wreg free
 11441  0021E8  C02B  F0A2         	movff	?___altoft,___ftadd@f1
 11442  0021EC  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
 11443  0021F0  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
 11444  0021F4  EC6C  F00D         	call	___ftadd	;wreg free
 11445  0021F8  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1395
 11446  0021FC  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1395+1
 11447  002200  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1395+2
 11448                           
 11449                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 11450  002204  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
 11451  002208  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
 11452  00220C  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
 11453  002210  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
 11454  002214  EC9C  F01A         	call	___altoft	;wreg free
 11455  002218  C02B  F0A5         	movff	?___altoft,___ftadd@f2
 11456  00221C  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
 11457  002220  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
 11458  002224  C0CD  F0A2         	movff	_angleToPulse$1395,___ftadd@f1
 11459  002228  C0CE  F0A3         	movff	_angleToPulse$1395+1,___ftadd@f1+1
 11460  00222C  C0CF  F0A4         	movff	_angleToPulse$1395+2,___ftadd@f1+2
 11461  002230  EC6C  F00D         	call	___ftadd	;wreg free
 11462  002234  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
 11463  002238  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
 11464  00223C  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
 11465  002240  EC2B  F011         	call	___fttol	;wreg free
 11466  002244  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
 11467  002248  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
 11468  00224C  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
 11469  002250  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
 11470  002254  0012               	return	
 11471  002256                     __end_of_angleToPulse:
 11472                           	opt stack 0
 11473                           tblptru	equ	0xFF8
 11474                           tblptrh	equ	0xFF7
 11475                           tblptrl	equ	0xFF6
 11476                           tablat	equ	0xFF5
 11477                           prodh	equ	0xFF4
 11478                           prodl	equ	0xFF3
 11479                           intcon	equ	0xFF2
 11480                           intcon3	equ	0xFF0
 11481                           postinc0	equ	0xFEE
 11482                           wreg	equ	0xFE8
 11483                           postdec1	equ	0xFE5
 11484                           fsr1l	equ	0xFE1
 11485                           indf2	equ	0xFDF
 11486                           postinc2	equ	0xFDE
 11487                           postdec2	equ	0xFDD
 11488                           fsr2h	equ	0xFDA
 11489                           fsr2l	equ	0xFD9
 11490                           status	equ	0xFD8
 11491                           
 11492 ;; *************** function ___fttol *****************
 11493 ;; Defined at:
 11494 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;  f1              3   46[BANK0 ] float 
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;  lval            4   56[BANK0 ] unsigned long 
 11499 ;;  exp1            1   60[BANK0 ] unsigned char 
 11500 ;;  sign1           1   55[BANK0 ] unsigned char 
 11501 ;; Return value:  Size  Location     Type
 11502 ;;                  4   46[BANK0 ] long 
 11503 ;; Registers used:
 11504 ;;		wreg, status,2, status,0
 11505 ;; Tracked objects:
 11506 ;;		On entry : 0/0
 11507 ;;		On exit  : 0/0
 11508 ;;		Unchanged: 0/0
 11509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11510 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11511 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11512 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;Total ram usage:       15 bytes
 11515 ;; Hardware stack levels used:    1
 11516 ;; Hardware stack levels required when called:    3
 11517 ;; This function calls:
 11518 ;;		Nothing
 11519 ;; This function is called by:
 11520 ;;		_sortBattery
 11521 ;;		_angleToPulse
 11522 ;;		_printf
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           	psect	text48
 11527  002256                     __ptext48:
 11528                           	opt stack 0
 11529  002256                     ___fttol:
 11530                           	opt stack 24
 11531                           
 11532                           ;incstack = 0
 11533  002256  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 11534  00225A  0100               	movlb	0	; () banked
 11535  00225C  6BB3               	clrf	(??___fttol+1)& (0+255),b
 11536  00225E  6BB4               	clrf	(??___fttol+2)& (0+255),b
 11537  002260  0100               	movlb	0	; () banked
 11538  002262  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 11539  002264  0100               	movlb	0	; () banked
 11540  002266  37B2               	rlcf	??___fttol& (0+255),f,b
 11541  002268  E301               	bnc	u6481
 11542  00226A  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 11543  00226C                     u6481:
 11544  00226C  0100               	movlb	0	; () banked
 11545  00226E  51B2               	movf	??___fttol& (0+255),w,b
 11546  002270  0100               	movlb	0	; () banked
 11547  002272  6FBC               	movwf	___fttol@exp1& (0+255),b
 11548  002274  0100               	movlb	0	; () banked
 11549  002276  51BC               	movf	___fttol@exp1& (0+255),w,b
 11550  002278  A4D8               	btfss	status,2,c
 11551  00227A  D00A               	goto	l6486
 11552                           
 11553                           ; BSR set to: 0
 11554  00227C  0E00               	movlw	0
 11555  00227E  0100               	movlb	0	; () banked
 11556  002280  6FAE               	movwf	?___fttol& (0+255),b
 11557  002282  0E00               	movlw	0
 11558  002284  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11559  002286  0E00               	movlw	0
 11560  002288  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11561  00228A  0E00               	movlw	0
 11562  00228C  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11563                           
 11564                           ; BSR set to: 0
 11565  00228E  0012               	return	
 11566  002290                     l6486:
 11567                           
 11568                           ; BSR set to: 0
 11569  002290  0E17               	movlw	23
 11570  002292  0100               	movlb	0	; () banked
 11571  002294  6FB2               	movwf	??___fttol& (0+255),b
 11572  002296  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 11573  00229A  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 11574  00229E  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 11575  0022A2  0100               	movlb	0	; () banked
 11576  0022A4  29B2               	incf	??___fttol& (0+255),w,b
 11577  0022A6  0100               	movlb	0	; () banked
 11578  0022A8  6FB6               	movwf	(??___fttol+4)& (0+255),b
 11579  0022AA  D005               	goto	u6500
 11580  0022AC                     u6505:
 11581  0022AC  0100               	movlb	0	; () banked
 11582  0022AE  90D8               	bcf	status,0,c
 11583  0022B0  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 11584  0022B2  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 11585  0022B4  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 11586  0022B6                     u6500:
 11587  0022B6  0100               	movlb	0	; () banked
 11588  0022B8  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 11589  0022BA  D7F8               	goto	u6505
 11590  0022BC  0100               	movlb	0	; () banked
 11591  0022BE  51B3               	movf	(??___fttol+1)& (0+255),w,b
 11592  0022C0  0100               	movlb	0	; () banked
 11593  0022C2  6FB7               	movwf	___fttol@sign1& (0+255),b
 11594                           
 11595                           ; BSR set to: 0
 11596  0022C4  0100               	movlb	0	; () banked
 11597  0022C6  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 11598                           
 11599                           ; BSR set to: 0
 11600  0022C8  0EFF               	movlw	255
 11601  0022CA  0100               	movlb	0	; () banked
 11602  0022CC  17AE               	andwf	___fttol@f1& (0+255),f,b
 11603  0022CE  0EFF               	movlw	255
 11604  0022D0  0100               	movlb	0	; () banked
 11605  0022D2  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 11606  0022D4  0E00               	movlw	0
 11607  0022D6  0100               	movlb	0	; () banked
 11608  0022D8  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 11609                           
 11610                           ; BSR set to: 0
 11611  0022DA  0100               	movlb	0	; () banked
 11612  0022DC  51AE               	movf	___fttol@f1& (0+255),w,b
 11613  0022DE  0100               	movlb	0	; () banked
 11614  0022E0  6FB8               	movwf	___fttol@lval& (0+255),b
 11615  0022E2  0100               	movlb	0	; () banked
 11616  0022E4  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 11617  0022E6  0100               	movlb	0	; () banked
 11618  0022E8  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 11619  0022EA  0100               	movlb	0	; () banked
 11620  0022EC  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 11621  0022EE  0100               	movlb	0	; () banked
 11622  0022F0  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 11623  0022F2  0100               	movlb	0	; () banked
 11624  0022F4  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 11625                           
 11626                           ; BSR set to: 0
 11627  0022F6  0E8E               	movlw	142
 11628  0022F8  0100               	movlb	0	; () banked
 11629  0022FA  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 11630                           
 11631                           ; BSR set to: 0
 11632  0022FC  0100               	movlb	0	; () banked
 11633  0022FE  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 11634  002300  D01A               	goto	l6508
 11635                           
 11636                           ; BSR set to: 0
 11637  002302  0100               	movlb	0	; () banked
 11638  002304  51BC               	movf	___fttol@exp1& (0+255),w,b
 11639  002306  0A80               	xorlw	128
 11640  002308  0F8F               	addlw	143
 11641  00230A  B0D8               	btfsc	status,0,c
 11642  00230C  D00A               	goto	l6504
 11643                           
 11644                           ; BSR set to: 0
 11645  00230E  0E00               	movlw	0
 11646  002310  0100               	movlb	0	; () banked
 11647  002312  6FAE               	movwf	?___fttol& (0+255),b
 11648  002314  0E00               	movlw	0
 11649  002316  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11650  002318  0E00               	movlw	0
 11651  00231A  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11652  00231C  0E00               	movlw	0
 11653  00231E  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11654                           
 11655                           ; BSR set to: 0
 11656  002320  0012               	return	
 11657  002322                     l6504:
 11658                           
 11659                           ; BSR set to: 0
 11660  002322  0100               	movlb	0	; () banked
 11661  002324  90D8               	bcf	status,0,c
 11662  002326  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11663  002328  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11664  00232A  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11665  00232C  33B8               	rrcf	___fttol@lval& (0+255),f,b
 11666                           
 11667                           ; BSR set to: 0
 11668  00232E  0100               	movlb	0	; () banked
 11669  002330  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 11670  002332  D7F7               	goto	l6504
 11671                           
 11672                           ; BSR set to: 0
 11673  002334  D01B               	goto	l6518
 11674  002336                     l6508:
 11675                           
 11676                           ; BSR set to: 0
 11677  002336  0E17               	movlw	23
 11678  002338  0100               	movlb	0	; () banked
 11679  00233A  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 11680  00233C  D012               	goto	l6516
 11681                           
 11682                           ; BSR set to: 0
 11683  00233E  0E00               	movlw	0
 11684  002340  0100               	movlb	0	; () banked
 11685  002342  6FAE               	movwf	?___fttol& (0+255),b
 11686  002344  0E00               	movlw	0
 11687  002346  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11688  002348  0E00               	movlw	0
 11689  00234A  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11690  00234C  0E00               	movlw	0
 11691  00234E  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11692                           
 11693                           ; BSR set to: 0
 11694  002350  0012               	return	
 11695  002352                     l6514:
 11696                           
 11697                           ; BSR set to: 0
 11698  002352  0100               	movlb	0	; () banked
 11699  002354  90D8               	bcf	status,0,c
 11700  002356  37B8               	rlcf	___fttol@lval& (0+255),f,b
 11701  002358  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11702  00235A  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11703  00235C  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11704  00235E  0100               	movlb	0	; () banked
 11705  002360  07BC               	decf	___fttol@exp1& (0+255),f,b
 11706  002362                     l6516:
 11707                           
 11708                           ; BSR set to: 0
 11709  002362  0100               	movlb	0	; () banked
 11710  002364  51BC               	movf	___fttol@exp1& (0+255),w,b
 11711  002366  0100               	movlb	0	; () banked
 11712  002368  A4D8               	btfss	status,2,c
 11713  00236A  D7F3               	goto	l6514
 11714  00236C                     l6518:
 11715                           
 11716                           ; BSR set to: 0
 11717  00236C  0100               	movlb	0	; () banked
 11718  00236E  51B7               	movf	___fttol@sign1& (0+255),w,b
 11719  002370  0100               	movlb	0	; () banked
 11720  002372  B4D8               	btfsc	status,2,c
 11721  002374  D009               	goto	l6522
 11722                           
 11723                           ; BSR set to: 0
 11724  002376  0100               	movlb	0	; () banked
 11725  002378  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 11726  00237A  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 11727  00237C  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 11728  00237E  6DB8               	negf	___fttol@lval& (0+255),b
 11729  002380  0E00               	movlw	0
 11730  002382  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11731  002384  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11732  002386  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11733  002388                     l6522:
 11734                           
 11735                           ; BSR set to: 0
 11736  002388  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 11737  00238C  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 11738  002390  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 11739  002394  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 11740  002398  0012               	return	
 11741  00239A                     __end_of___fttol:
 11742                           	opt stack 0
 11743                           tblptru	equ	0xFF8
 11744                           tblptrh	equ	0xFF7
 11745                           tblptrl	equ	0xFF6
 11746                           tablat	equ	0xFF5
 11747                           prodh	equ	0xFF4
 11748                           prodl	equ	0xFF3
 11749                           intcon	equ	0xFF2
 11750                           intcon3	equ	0xFF0
 11751                           postinc0	equ	0xFEE
 11752                           wreg	equ	0xFE8
 11753                           postdec1	equ	0xFE5
 11754                           fsr1l	equ	0xFE1
 11755                           indf2	equ	0xFDF
 11756                           postinc2	equ	0xFDE
 11757                           postdec2	equ	0xFDD
 11758                           fsr2h	equ	0xFDA
 11759                           fsr2l	equ	0xFD9
 11760                           status	equ	0xFD8
 11761                           
 11762 ;; *************** function ___ftmul *****************
 11763 ;; Defined at:
 11764 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;  f1              3    9[BANK0 ] float 
 11767 ;;  f2              3   12[BANK0 ] float 
 11768 ;; Auto vars:     Size  Location     Type
 11769 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 11770 ;;  sign            1   23[BANK0 ] unsigned char 
 11771 ;;  cntr            1   22[BANK0 ] unsigned char 
 11772 ;;  exp             1   18[BANK0 ] unsigned char 
 11773 ;; Return value:  Size  Location     Type
 11774 ;;                  3    9[BANK0 ] float 
 11775 ;; Registers used:
 11776 ;;		wreg, status,2, status,0, cstack
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11782 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;Total ram usage:       15 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:    4
 11789 ;; This function calls:
 11790 ;;		___ftpack
 11791 ;; This function is called by:
 11792 ;;		_sortBattery
 11793 ;;		_angleToPulse
 11794 ;;		_fround
 11795 ;;		_scale
 11796 ;;		_printf
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           	psect	text49
 11801  001FA0                     __ptext49:
 11802                           	opt stack 0
 11803  001FA0                     ___ftmul:
 11804                           	opt stack 23
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;incstack = 0
 11808  001FA0  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 11809  001FA4  0100               	movlb	0	; () banked
 11810  001FA6  6B90               	clrf	(??___ftmul+1)& (0+255),b
 11811  001FA8  6B91               	clrf	(??___ftmul+2)& (0+255),b
 11812  001FAA  0100               	movlb	0	; () banked
 11813  001FAC  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 11814  001FAE  0100               	movlb	0	; () banked
 11815  001FB0  378F               	rlcf	??___ftmul& (0+255),f,b
 11816  001FB2  E301               	bnc	u5851
 11817  001FB4  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 11818  001FB6                     u5851:
 11819  001FB6  0100               	movlb	0	; () banked
 11820  001FB8  518F               	movf	??___ftmul& (0+255),w,b
 11821  001FBA  0100               	movlb	0	; () banked
 11822  001FBC  6F92               	movwf	___ftmul@exp& (0+255),b
 11823  001FBE  0100               	movlb	0	; () banked
 11824  001FC0  5192               	movf	___ftmul@exp& (0+255),w,b
 11825  001FC2  A4D8               	btfss	status,2,c
 11826  001FC4  D00A               	goto	l6002
 11827                           
 11828                           ; BSR set to: 0
 11829  001FC6  0E00               	movlw	0
 11830  001FC8  0100               	movlb	0	; () banked
 11831  001FCA  6F89               	movwf	?___ftmul& (0+255),b
 11832  001FCC  0E00               	movlw	0
 11833  001FCE  0100               	movlb	0	; () banked
 11834  001FD0  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 11835  001FD2  0E00               	movlw	0
 11836  001FD4  0100               	movlb	0	; () banked
 11837  001FD6  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 11838                           
 11839                           ; BSR set to: 0
 11840  001FD8  0012               	return	
 11841  001FDA                     l6002:
 11842                           
 11843                           ; BSR set to: 0
 11844  001FDA  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 11845  001FDE  0100               	movlb	0	; () banked
 11846  001FE0  6B90               	clrf	(??___ftmul+1)& (0+255),b
 11847  001FE2  6B91               	clrf	(??___ftmul+2)& (0+255),b
 11848  001FE4  0100               	movlb	0	; () banked
 11849  001FE6  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 11850  001FE8  0100               	movlb	0	; () banked
 11851  001FEA  378F               	rlcf	??___ftmul& (0+255),f,b
 11852  001FEC  E301               	bnc	u5871
 11853  001FEE  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 11854  001FF0                     u5871:
 11855  001FF0  0100               	movlb	0	; () banked
 11856  001FF2  518F               	movf	??___ftmul& (0+255),w,b
 11857  001FF4  0100               	movlb	0	; () banked
 11858  001FF6  6F97               	movwf	___ftmul@sign& (0+255),b
 11859  001FF8  0100               	movlb	0	; () banked
 11860  001FFA  5197               	movf	___ftmul@sign& (0+255),w,b
 11861  001FFC  A4D8               	btfss	status,2,c
 11862  001FFE  D00A               	goto	l6008
 11863                           
 11864                           ; BSR set to: 0
 11865  002000  0E00               	movlw	0
 11866  002002  0100               	movlb	0	; () banked
 11867  002004  6F89               	movwf	?___ftmul& (0+255),b
 11868  002006  0E00               	movlw	0
 11869  002008  0100               	movlb	0	; () banked
 11870  00200A  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 11871  00200C  0E00               	movlw	0
 11872  00200E  0100               	movlb	0	; () banked
 11873  002010  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 11874                           
 11875                           ; BSR set to: 0
 11876  002012  0012               	return	
 11877  002014                     l6008:
 11878                           
 11879                           ; BSR set to: 0
 11880  002014  0100               	movlb	0	; () banked
 11881  002016  5197               	movf	___ftmul@sign& (0+255),w,b
 11882  002018  0F7B               	addlw	123
 11883  00201A  0100               	movlb	0	; () banked
 11884  00201C  2792               	addwf	___ftmul@exp& (0+255),f,b
 11885                           
 11886                           ; BSR set to: 0
 11887  00201E  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 11888  002022  0100               	movlb	0	; () banked
 11889  002024  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11890  002026  0100               	movlb	0	; () banked
 11891  002028  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 11892  00202A  0E80               	movlw	128
 11893  00202C  0100               	movlb	0	; () banked
 11894  00202E  1797               	andwf	___ftmul@sign& (0+255),f,b
 11895                           
 11896                           ; BSR set to: 0
 11897  002030  0100               	movlb	0	; () banked
 11898  002032  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11899                           
 11900                           ; BSR set to: 0
 11901  002034  0100               	movlb	0	; () banked
 11902  002036  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11903                           
 11904                           ; BSR set to: 0
 11905  002038  0EFF               	movlw	255
 11906  00203A  0100               	movlb	0	; () banked
 11907  00203C  178C               	andwf	___ftmul@f2& (0+255),f,b
 11908  00203E  0EFF               	movlw	255
 11909  002040  0100               	movlb	0	; () banked
 11910  002042  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 11911  002044  0E00               	movlw	0
 11912  002046  0100               	movlb	0	; () banked
 11913  002048  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11914                           
 11915                           ; BSR set to: 0
 11916  00204A  0E00               	movlw	0
 11917  00204C  0100               	movlb	0	; () banked
 11918  00204E  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 11919  002050  0E00               	movlw	0
 11920  002052  0100               	movlb	0	; () banked
 11921  002054  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 11922  002056  0E00               	movlw	0
 11923  002058  0100               	movlb	0	; () banked
 11924  00205A  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 11925                           
 11926                           ; BSR set to: 0
 11927  00205C  0E07               	movlw	7
 11928  00205E  0100               	movlb	0	; () banked
 11929  002060  6F96               	movwf	___ftmul@cntr& (0+255),b
 11930  002062                     l6022:
 11931                           
 11932                           ; BSR set to: 0
 11933  002062  0100               	movlb	0	; () banked
 11934  002064  A189               	btfss	___ftmul@f1& (0+255),0,b
 11935  002066  D00C               	goto	l6026
 11936                           
 11937                           ; BSR set to: 0
 11938  002068  0100               	movlb	0	; () banked
 11939  00206A  518C               	movf	___ftmul@f2& (0+255),w,b
 11940  00206C  0100               	movlb	0	; () banked
 11941  00206E  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11942  002070  0100               	movlb	0	; () banked
 11943  002072  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 11944  002074  0100               	movlb	0	; () banked
 11945  002076  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11946  002078  0100               	movlb	0	; () banked
 11947  00207A  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11948  00207C  0100               	movlb	0	; () banked
 11949  00207E  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11950  002080                     l6026:
 11951                           
 11952                           ; BSR set to: 0
 11953  002080  0100               	movlb	0	; () banked
 11954  002082  90D8               	bcf	status,0,c
 11955  002084  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11956  002086  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11957  002088  3389               	rrcf	___ftmul@f1& (0+255),f,b
 11958  00208A  0100               	movlb	0	; () banked
 11959  00208C  90D8               	bcf	status,0,c
 11960  00208E  378C               	rlcf	___ftmul@f2& (0+255),f,b
 11961  002090  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 11962  002092  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 11963                           
 11964                           ; BSR set to: 0
 11965  002094  0100               	movlb	0	; () banked
 11966  002096  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 11967  002098  D7E4               	goto	l6022
 11968                           
 11969                           ; BSR set to: 0
 11970                           
 11971                           ; BSR set to: 0
 11972  00209A  0E09               	movlw	9
 11973  00209C  0100               	movlb	0	; () banked
 11974  00209E  6F96               	movwf	___ftmul@cntr& (0+255),b
 11975  0020A0                     l6032:
 11976                           
 11977                           ; BSR set to: 0
 11978  0020A0  0100               	movlb	0	; () banked
 11979  0020A2  A189               	btfss	___ftmul@f1& (0+255),0,b
 11980  0020A4  D00C               	goto	l6036
 11981                           
 11982                           ; BSR set to: 0
 11983  0020A6  0100               	movlb	0	; () banked
 11984  0020A8  518C               	movf	___ftmul@f2& (0+255),w,b
 11985  0020AA  0100               	movlb	0	; () banked
 11986  0020AC  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11987  0020AE  0100               	movlb	0	; () banked
 11988  0020B0  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 11989  0020B2  0100               	movlb	0	; () banked
 11990  0020B4  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11991  0020B6  0100               	movlb	0	; () banked
 11992  0020B8  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11993  0020BA  0100               	movlb	0	; () banked
 11994  0020BC  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11995  0020BE                     l6036:
 11996                           
 11997                           ; BSR set to: 0
 11998  0020BE  0100               	movlb	0	; () banked
 11999  0020C0  90D8               	bcf	status,0,c
 12000  0020C2  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12001  0020C4  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12002  0020C6  3389               	rrcf	___ftmul@f1& (0+255),f,b
 12003  0020C8  0100               	movlb	0	; () banked
 12004  0020CA  90D8               	bcf	status,0,c
 12005  0020CC  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 12006  0020CE  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 12007  0020D0  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 12008                           
 12009                           ; BSR set to: 0
 12010  0020D2  0100               	movlb	0	; () banked
 12011  0020D4  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 12012  0020D6  D7E4               	goto	l6032
 12013                           
 12014                           ; BSR set to: 0
 12015                           
 12016                           ; BSR set to: 0
 12017  0020D8  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 12018  0020DC  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12019  0020E0  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12020  0020E4  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 12021  0020E8  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 12022  0020EC  EC10  F018         	call	___ftpack	;wreg free
 12023  0020F0  C023  F089         	movff	?___ftpack,?___ftmul
 12024  0020F4  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 12025  0020F8  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 12026  0020FC  0012               	return	
 12027  0020FE                     __end_of___ftmul:
 12028                           	opt stack 0
 12029                           tblptru	equ	0xFF8
 12030                           tblptrh	equ	0xFF7
 12031                           tblptrl	equ	0xFF6
 12032                           tablat	equ	0xFF5
 12033                           prodh	equ	0xFF4
 12034                           prodl	equ	0xFF3
 12035                           intcon	equ	0xFF2
 12036                           intcon3	equ	0xFF0
 12037                           postinc0	equ	0xFEE
 12038                           wreg	equ	0xFE8
 12039                           postdec1	equ	0xFE5
 12040                           fsr1l	equ	0xFE1
 12041                           indf2	equ	0xFDF
 12042                           postinc2	equ	0xFDE
 12043                           postdec2	equ	0xFDD
 12044                           fsr2h	equ	0xFDA
 12045                           fsr2l	equ	0xFD9
 12046                           status	equ	0xFD8
 12047                           
 12048 ;; *************** function ___ftdiv *****************
 12049 ;; Defined at:
 12050 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;  f1              3   52[COMRAM] float 
 12053 ;;  f2              3   55[COMRAM] float 
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  f3              3    4[BANK0 ] float 
 12056 ;;  sign            1    8[BANK0 ] unsigned char 
 12057 ;;  exp             1    7[BANK0 ] unsigned char 
 12058 ;;  cntr            1    3[BANK0 ] unsigned char 
 12059 ;; Return value:  Size  Location     Type
 12060 ;;                  3   52[COMRAM] float 
 12061 ;; Registers used:
 12062 ;;		wreg, status,2, status,0, cstack
 12063 ;; Tracked objects:
 12064 ;;		On entry : 0/0
 12065 ;;		On exit  : 0/0
 12066 ;;		Unchanged: 0/0
 12067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12068 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12069 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12070 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12071 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12072 ;;Total ram usage:       15 bytes
 12073 ;; Hardware stack levels used:    1
 12074 ;; Hardware stack levels required when called:    4
 12075 ;; This function calls:
 12076 ;;		___ftpack
 12077 ;; This function is called by:
 12078 ;;		_sortBattery
 12079 ;;		_angleToPulse
 12080 ;;		_showRunTime
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084                           	psect	text50
 12085  0025F4                     __ptext50:
 12086                           	opt stack 0
 12087  0025F4                     ___ftdiv:
 12088                           	opt stack 23
 12089                           
 12090                           ;incstack = 0
 12091  0025F4  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
 12092  0025F8  0100               	movlb	0	; () banked
 12093  0025FA  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 12094  0025FC  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 12095  0025FE  3436               	rlcf	___ftdiv@f1+1,w,c
 12096  002600  0100               	movlb	0	; () banked
 12097  002602  3780               	rlcf	??___ftdiv& (0+255),f,b
 12098  002604  E301               	bnc	u6371
 12099  002606  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 12100  002608                     u6371:
 12101  002608  0100               	movlb	0	; () banked
 12102  00260A  5180               	movf	??___ftdiv& (0+255),w,b
 12103  00260C  0100               	movlb	0	; () banked
 12104  00260E  6F87               	movwf	___ftdiv@exp& (0+255),b
 12105  002610  0100               	movlb	0	; () banked
 12106  002612  5187               	movf	___ftdiv@exp& (0+255),w,b
 12107  002614  A4D8               	btfss	status,2,c
 12108  002616  D007               	goto	l6398
 12109                           
 12110                           ; BSR set to: 0
 12111  002618  0E00               	movlw	0
 12112  00261A  6E35               	movwf	?___ftdiv,c
 12113  00261C  0E00               	movlw	0
 12114  00261E  6E36               	movwf	?___ftdiv+1,c
 12115  002620  0E00               	movlw	0
 12116  002622  6E37               	movwf	?___ftdiv+2,c
 12117                           
 12118                           ; BSR set to: 0
 12119  002624  0012               	return	
 12120  002626                     l6398:
 12121                           
 12122                           ; BSR set to: 0
 12123  002626  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
 12124  00262A  0100               	movlb	0	; () banked
 12125  00262C  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 12126  00262E  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 12127  002630  3439               	rlcf	___ftdiv@f2+1,w,c
 12128  002632  0100               	movlb	0	; () banked
 12129  002634  3780               	rlcf	??___ftdiv& (0+255),f,b
 12130  002636  E301               	bnc	u6391
 12131  002638  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 12132  00263A                     u6391:
 12133  00263A  0100               	movlb	0	; () banked
 12134  00263C  5180               	movf	??___ftdiv& (0+255),w,b
 12135  00263E  0100               	movlb	0	; () banked
 12136  002640  6F88               	movwf	___ftdiv@sign& (0+255),b
 12137  002642  0100               	movlb	0	; () banked
 12138  002644  5188               	movf	___ftdiv@sign& (0+255),w,b
 12139  002646  A4D8               	btfss	status,2,c
 12140  002648  D007               	goto	l6404
 12141                           
 12142                           ; BSR set to: 0
 12143  00264A  0E00               	movlw	0
 12144  00264C  6E35               	movwf	?___ftdiv,c
 12145  00264E  0E00               	movlw	0
 12146  002650  6E36               	movwf	?___ftdiv+1,c
 12147  002652  0E00               	movlw	0
 12148  002654  6E37               	movwf	?___ftdiv+2,c
 12149                           
 12150                           ; BSR set to: 0
 12151  002656  0012               	return	
 12152  002658                     l6404:
 12153                           
 12154                           ; BSR set to: 0
 12155  002658  0E00               	movlw	0
 12156  00265A  0100               	movlb	0	; () banked
 12157  00265C  6F84               	movwf	___ftdiv@f3& (0+255),b
 12158  00265E  0E00               	movlw	0
 12159  002660  0100               	movlb	0	; () banked
 12160  002662  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
 12161  002664  0E00               	movlw	0
 12162  002666  0100               	movlb	0	; () banked
 12163  002668  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
 12164                           
 12165                           ; BSR set to: 0
 12166  00266A  0100               	movlb	0	; () banked
 12167  00266C  5188               	movf	___ftdiv@sign& (0+255),w,b
 12168  00266E  0F89               	addlw	137
 12169  002670  0100               	movlb	0	; () banked
 12170  002672  5F87               	subwf	___ftdiv@exp& (0+255),f,b
 12171                           
 12172                           ; BSR set to: 0
 12173  002674  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
 12174                           
 12175                           ; BSR set to: 0
 12176  002678  503A               	movf	___ftdiv@f2+2,w,c
 12177  00267A  0100               	movlb	0	; () banked
 12178  00267C  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
 12179                           
 12180                           ; BSR set to: 0
 12181  00267E  0E80               	movlw	128
 12182  002680  0100               	movlb	0	; () banked
 12183  002682  1788               	andwf	___ftdiv@sign& (0+255),f,b
 12184                           
 12185                           ; BSR set to: 0
 12186  002684  8E36               	bsf	___ftdiv@f1+1,7,c
 12187                           
 12188                           ; BSR set to: 0
 12189  002686  0EFF               	movlw	255
 12190  002688  1635               	andwf	___ftdiv@f1,f,c
 12191  00268A  0EFF               	movlw	255
 12192  00268C  1636               	andwf	___ftdiv@f1+1,f,c
 12193  00268E  0E00               	movlw	0
 12194  002690  1637               	andwf	___ftdiv@f1+2,f,c
 12195                           
 12196                           ; BSR set to: 0
 12197  002692  8E39               	bsf	___ftdiv@f2+1,7,c
 12198                           
 12199                           ; BSR set to: 0
 12200  002694  0EFF               	movlw	255
 12201  002696  1638               	andwf	___ftdiv@f2,f,c
 12202  002698  0EFF               	movlw	255
 12203  00269A  1639               	andwf	___ftdiv@f2+1,f,c
 12204  00269C  0E00               	movlw	0
 12205  00269E  163A               	andwf	___ftdiv@f2+2,f,c
 12206                           
 12207                           ; BSR set to: 0
 12208  0026A0  0E18               	movlw	24
 12209  0026A2  0100               	movlb	0	; () banked
 12210  0026A4  6F83               	movwf	___ftdiv@cntr& (0+255),b
 12211  0026A6                     l6424:
 12212                           
 12213                           ; BSR set to: 0
 12214  0026A6  0100               	movlb	0	; () banked
 12215  0026A8  90D8               	bcf	status,0,c
 12216  0026AA  3784               	rlcf	___ftdiv@f3& (0+255),f,b
 12217  0026AC  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 12218  0026AE  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 12219                           
 12220                           ; BSR set to: 0
 12221  0026B0  5038               	movf	___ftdiv@f2,w,c
 12222  0026B2  5C35               	subwf	___ftdiv@f1,w,c
 12223  0026B4  5039               	movf	___ftdiv@f2+1,w,c
 12224  0026B6  5836               	subwfb	___ftdiv@f1+1,w,c
 12225  0026B8  503A               	movf	___ftdiv@f2+2,w,c
 12226  0026BA  5837               	subwfb	___ftdiv@f1+2,w,c
 12227  0026BC  A0D8               	btfss	status,0,c
 12228  0026BE  D008               	goto	l1165
 12229                           
 12230                           ; BSR set to: 0
 12231  0026C0  5038               	movf	___ftdiv@f2,w,c
 12232  0026C2  5E35               	subwf	___ftdiv@f1,f,c
 12233  0026C4  5039               	movf	___ftdiv@f2+1,w,c
 12234  0026C6  5A36               	subwfb	___ftdiv@f1+1,f,c
 12235  0026C8  503A               	movf	___ftdiv@f2+2,w,c
 12236  0026CA  5A37               	subwfb	___ftdiv@f1+2,f,c
 12237                           
 12238                           ; BSR set to: 0
 12239  0026CC  0100               	movlb	0	; () banked
 12240  0026CE  8184               	bsf	___ftdiv@f3& (0+255),0,b
 12241  0026D0                     l1165:
 12242                           
 12243                           ; BSR set to: 0
 12244  0026D0  90D8               	bcf	status,0,c
 12245  0026D2  3635               	rlcf	___ftdiv@f1,f,c
 12246  0026D4  3636               	rlcf	___ftdiv@f1+1,f,c
 12247  0026D6  3637               	rlcf	___ftdiv@f1+2,f,c
 12248                           
 12249                           ; BSR set to: 0
 12250  0026D8  0100               	movlb	0	; () banked
 12251  0026DA  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
 12252  0026DC  D7E4               	goto	l6424
 12253                           
 12254                           ; BSR set to: 0
 12255                           
 12256                           ; BSR set to: 0
 12257  0026DE  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
 12258  0026E2  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12259  0026E6  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12260  0026EA  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
 12261  0026EE  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
 12262  0026F2  EC10  F018         	call	___ftpack	;wreg free
 12263  0026F6  C023  F035         	movff	?___ftpack,?___ftdiv
 12264  0026FA  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
 12265  0026FE  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
 12266  002702  0012               	return	
 12267  002704                     __end_of___ftdiv:
 12268                           	opt stack 0
 12269                           tblptru	equ	0xFF8
 12270                           tblptrh	equ	0xFF7
 12271                           tblptrl	equ	0xFF6
 12272                           tablat	equ	0xFF5
 12273                           prodh	equ	0xFF4
 12274                           prodl	equ	0xFF3
 12275                           intcon	equ	0xFF2
 12276                           intcon3	equ	0xFF0
 12277                           postinc0	equ	0xFEE
 12278                           wreg	equ	0xFE8
 12279                           postdec1	equ	0xFE5
 12280                           fsr1l	equ	0xFE1
 12281                           indf2	equ	0xFDF
 12282                           postinc2	equ	0xFDE
 12283                           postdec2	equ	0xFDD
 12284                           fsr2h	equ	0xFDA
 12285                           fsr2l	equ	0xFD9
 12286                           status	equ	0xFD8
 12287                           
 12288 ;; *************** function ___ftadd *****************
 12289 ;; Defined at:
 12290 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12291 ;; Parameters:    Size  Location     Type
 12292 ;;  f1              3   34[BANK0 ] float 
 12293 ;;  f2              3   37[BANK0 ] float 
 12294 ;; Auto vars:     Size  Location     Type
 12295 ;;  exp1            1   45[BANK0 ] unsigned char 
 12296 ;;  exp2            1   44[BANK0 ] unsigned char 
 12297 ;;  sign            1   43[BANK0 ] unsigned char 
 12298 ;; Return value:  Size  Location     Type
 12299 ;;                  3   34[BANK0 ] float 
 12300 ;; Registers used:
 12301 ;;		wreg, status,2, status,0, cstack
 12302 ;; Tracked objects:
 12303 ;;		On entry : 0/0
 12304 ;;		On exit  : 0/0
 12305 ;;		Unchanged: 0/0
 12306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12307 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12308 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12309 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12310 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12311 ;;Total ram usage:       12 bytes
 12312 ;; Hardware stack levels used:    1
 12313 ;; Hardware stack levels required when called:    4
 12314 ;; This function calls:
 12315 ;;		___ftpack
 12316 ;; This function is called by:
 12317 ;;		_angleToPulse
 12318 ;;		_printf
 12319 ;;		___ftsub
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           	psect	text51
 12324  001AD8                     __ptext51:
 12325                           	opt stack 0
 12326  001AD8                     ___ftadd:
 12327                           	opt stack 23
 12328                           
 12329                           ;incstack = 0
 12330  001AD8  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 12331  001ADC  0100               	movlb	0	; () banked
 12332  001ADE  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 12333  001AE0  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 12334  001AE2  0100               	movlb	0	; () banked
 12335  001AE4  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 12336  001AE6  0100               	movlb	0	; () banked
 12337  001AE8  37A8               	rlcf	??___ftadd& (0+255),f,b
 12338  001AEA  E301               	bnc	u5641
 12339  001AEC  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 12340  001AEE                     u5641:
 12341  001AEE  0100               	movlb	0	; () banked
 12342  001AF0  51A8               	movf	??___ftadd& (0+255),w,b
 12343  001AF2  0100               	movlb	0	; () banked
 12344  001AF4  6FAD               	movwf	___ftadd@exp1& (0+255),b
 12345  001AF6  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 12346  001AFA  0100               	movlb	0	; () banked
 12347  001AFC  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 12348  001AFE  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 12349  001B00  0100               	movlb	0	; () banked
 12350  001B02  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 12351  001B04  0100               	movlb	0	; () banked
 12352  001B06  37A8               	rlcf	??___ftadd& (0+255),f,b
 12353  001B08  E301               	bnc	u5651
 12354  001B0A  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 12355  001B0C                     u5651:
 12356  001B0C  0100               	movlb	0	; () banked
 12357  001B0E  51A8               	movf	??___ftadd& (0+255),w,b
 12358  001B10  0100               	movlb	0	; () banked
 12359  001B12  6FAC               	movwf	___ftadd@exp2& (0+255),b
 12360                           
 12361                           ; BSR set to: 0
 12362  001B14  0100               	movlb	0	; () banked
 12363  001B16  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12364  001B18  0100               	movlb	0	; () banked
 12365  001B1A  B4D8               	btfsc	status,2,c
 12366  001B1C  D011               	goto	l1130
 12367                           
 12368                           ; BSR set to: 0
 12369  001B1E  0100               	movlb	0	; () banked
 12370  001B20  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12371  001B22  0100               	movlb	0	; () banked
 12372  001B24  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 12373  001B26  B0D8               	btfsc	status,0,c
 12374  001B28  D012               	goto	l5934
 12375                           
 12376                           ; BSR set to: 0
 12377  001B2A  0100               	movlb	0	; () banked
 12378  001B2C  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12379  001B2E  0800               	sublw	0
 12380  001B30  0100               	movlb	0	; () banked
 12381  001B32  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 12382  001B34  0100               	movlb	0	; () banked
 12383  001B36  6FA8               	movwf	??___ftadd& (0+255),b
 12384  001B38  0E18               	movlw	24
 12385  001B3A  0100               	movlb	0	; () banked
 12386  001B3C  65A8               	cpfsgt	??___ftadd& (0+255),b
 12387  001B3E  D007               	goto	l5934
 12388  001B40                     l1130:
 12389                           
 12390                           ; BSR set to: 0
 12391  001B40  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 12392  001B44  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 12393  001B48  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 12394  001B4C  0012               	return	
 12395  001B4E                     l5934:
 12396                           
 12397                           ; BSR set to: 0
 12398  001B4E  0100               	movlb	0	; () banked
 12399  001B50  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12400  001B52  0100               	movlb	0	; () banked
 12401  001B54  B4D8               	btfsc	status,2,c
 12402  001B56  D011               	goto	l1134
 12403                           
 12404                           ; BSR set to: 0
 12405  001B58  0100               	movlb	0	; () banked
 12406  001B5A  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12407  001B5C  0100               	movlb	0	; () banked
 12408  001B5E  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 12409  001B60  B0D8               	btfsc	status,0,c
 12410  001B62  D012               	goto	l5940
 12411                           
 12412                           ; BSR set to: 0
 12413  001B64  0100               	movlb	0	; () banked
 12414  001B66  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12415  001B68  0800               	sublw	0
 12416  001B6A  0100               	movlb	0	; () banked
 12417  001B6C  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 12418  001B6E  0100               	movlb	0	; () banked
 12419  001B70  6FA8               	movwf	??___ftadd& (0+255),b
 12420  001B72  0E18               	movlw	24
 12421  001B74  0100               	movlb	0	; () banked
 12422  001B76  65A8               	cpfsgt	??___ftadd& (0+255),b
 12423  001B78  D007               	goto	l5940
 12424  001B7A                     l1134:
 12425                           
 12426                           ; BSR set to: 0
 12427  001B7A  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 12428  001B7E  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 12429  001B82  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 12430  001B86  0012               	return	
 12431  001B88                     l5940:
 12432                           
 12433                           ; BSR set to: 0
 12434  001B88  0E06               	movlw	6
 12435  001B8A  0100               	movlb	0	; () banked
 12436  001B8C  6FAB               	movwf	___ftadd@sign& (0+255),b
 12437                           
 12438                           ; BSR set to: 0
 12439  001B8E  0100               	movlb	0	; () banked
 12440  001B90  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 12441  001B92  D002               	goto	l5946
 12442                           
 12443                           ; BSR set to: 0
 12444  001B94  0100               	movlb	0	; () banked
 12445  001B96  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 12446  001B98                     l5946:
 12447                           
 12448                           ; BSR set to: 0
 12449  001B98  0100               	movlb	0	; () banked
 12450  001B9A  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12451  001B9C  D002               	goto	l1136
 12452                           
 12453                           ; BSR set to: 0
 12454  001B9E  0100               	movlb	0	; () banked
 12455  001BA0  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 12456  001BA2                     l1136:
 12457                           
 12458                           ; BSR set to: 0
 12459  001BA2  0100               	movlb	0	; () banked
 12460  001BA4  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12461                           
 12462                           ; BSR set to: 0
 12463  001BA6  0EFF               	movlw	255
 12464  001BA8  0100               	movlb	0	; () banked
 12465  001BAA  17A2               	andwf	___ftadd@f1& (0+255),f,b
 12466  001BAC  0EFF               	movlw	255
 12467  001BAE  0100               	movlb	0	; () banked
 12468  001BB0  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12469  001BB2  0E00               	movlw	0
 12470  001BB4  0100               	movlb	0	; () banked
 12471  001BB6  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12472  001BB8  0100               	movlb	0	; () banked
 12473  001BBA  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12474                           
 12475                           ; BSR set to: 0
 12476  001BBC  0EFF               	movlw	255
 12477  001BBE  0100               	movlb	0	; () banked
 12478  001BC0  17A5               	andwf	___ftadd@f2& (0+255),f,b
 12479  001BC2  0EFF               	movlw	255
 12480  001BC4  0100               	movlb	0	; () banked
 12481  001BC6  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 12482  001BC8  0E00               	movlw	0
 12483  001BCA  0100               	movlb	0	; () banked
 12484  001BCC  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 12485                           
 12486                           ; BSR set to: 0
 12487  001BCE  0100               	movlb	0	; () banked
 12488  001BD0  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12489  001BD2  0100               	movlb	0	; () banked
 12490  001BD4  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 12491  001BD6  B0D8               	btfsc	status,0,c
 12492  001BD8  D025               	goto	l5966
 12493  001BDA                     l5956:
 12494                           
 12495                           ; BSR set to: 0
 12496  001BDA  0100               	movlb	0	; () banked
 12497  001BDC  90D8               	bcf	status,0,c
 12498  001BDE  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 12499  001BE0  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 12500  001BE2  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 12501  001BE4  0100               	movlb	0	; () banked
 12502  001BE6  07AC               	decf	___ftadd@exp2& (0+255),f,b
 12503                           
 12504                           ; BSR set to: 0
 12505  001BE8  0100               	movlb	0	; () banked
 12506  001BEA  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12507  001BEC  0100               	movlb	0	; () banked
 12508  001BEE  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 12509  001BF0  B4D8               	btfsc	status,2,c
 12510  001BF2  D011               	goto	l5964
 12511                           
 12512                           ; BSR set to: 0
 12513  001BF4  0100               	movlb	0	; () banked
 12514  001BF6  07AB               	decf	___ftadd@sign& (0+255),f,b
 12515  001BF8  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 12516  001BFC  0E07               	movlw	7
 12517  001BFE  0100               	movlb	0	; () banked
 12518  001C00  17A8               	andwf	??___ftadd& (0+255),f,b
 12519  001C02  B4D8               	btfsc	status,2,c
 12520  001C04  D008               	goto	l5964
 12521  001C06  D7E9               	goto	l5956
 12522  001C08                     l5962:
 12523                           
 12524                           ; BSR set to: 0
 12525  001C08  0100               	movlb	0	; () banked
 12526  001C0A  90D8               	bcf	status,0,c
 12527  001C0C  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 12528  001C0E  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 12529  001C10  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 12530  001C12  0100               	movlb	0	; () banked
 12531  001C14  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 12532  001C16                     l5964:
 12533                           
 12534                           ; BSR set to: 0
 12535  001C16  0100               	movlb	0	; () banked
 12536  001C18  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12537  001C1A  0100               	movlb	0	; () banked
 12538  001C1C  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 12539  001C1E  B4D8               	btfsc	status,2,c
 12540  001C20  D02B               	goto	l1145
 12541  001C22  D7F2               	goto	l5962
 12542  001C24                     l5966:
 12543                           
 12544                           ; BSR set to: 0
 12545  001C24  0100               	movlb	0	; () banked
 12546  001C26  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12547  001C28  0100               	movlb	0	; () banked
 12548  001C2A  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 12549  001C2C  B0D8               	btfsc	status,0,c
 12550  001C2E  D024               	goto	l1145
 12551  001C30                     l5968:
 12552                           
 12553                           ; BSR set to: 0
 12554  001C30  0100               	movlb	0	; () banked
 12555  001C32  90D8               	bcf	status,0,c
 12556  001C34  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 12557  001C36  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 12558  001C38  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 12559  001C3A  0100               	movlb	0	; () banked
 12560  001C3C  07AD               	decf	___ftadd@exp1& (0+255),f,b
 12561                           
 12562                           ; BSR set to: 0
 12563  001C3E  0100               	movlb	0	; () banked
 12564  001C40  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12565  001C42  0100               	movlb	0	; () banked
 12566  001C44  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 12567  001C46  B4D8               	btfsc	status,2,c
 12568  001C48  D011               	goto	l5976
 12569                           
 12570                           ; BSR set to: 0
 12571  001C4A  0100               	movlb	0	; () banked
 12572  001C4C  07AB               	decf	___ftadd@sign& (0+255),f,b
 12573  001C4E  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 12574  001C52  0E07               	movlw	7
 12575  001C54  0100               	movlb	0	; () banked
 12576  001C56  17A8               	andwf	??___ftadd& (0+255),f,b
 12577  001C58  B4D8               	btfsc	status,2,c
 12578  001C5A  D008               	goto	l5976
 12579  001C5C  D7E9               	goto	l5968
 12580  001C5E                     l5974:
 12581                           
 12582                           ; BSR set to: 0
 12583  001C5E  0100               	movlb	0	; () banked
 12584  001C60  90D8               	bcf	status,0,c
 12585  001C62  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 12586  001C64  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 12587  001C66  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 12588  001C68  0100               	movlb	0	; () banked
 12589  001C6A  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 12590  001C6C                     l5976:
 12591                           
 12592                           ; BSR set to: 0
 12593  001C6C  0100               	movlb	0	; () banked
 12594  001C6E  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12595  001C70  0100               	movlb	0	; () banked
 12596  001C72  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 12597  001C74  A4D8               	btfss	status,2,c
 12598  001C76  D7F3               	goto	l5974
 12599  001C78                     l1145:
 12600                           
 12601                           ; BSR set to: 0
 12602  001C78  0100               	movlb	0	; () banked
 12603  001C7A  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 12604  001C7C  D012               	goto	l1154
 12605                           
 12606                           ; BSR set to: 0
 12607  001C7E  0EFF               	movlw	255
 12608  001C80  0100               	movlb	0	; () banked
 12609  001C82  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 12610  001C84  0EFF               	movlw	255
 12611  001C86  0100               	movlb	0	; () banked
 12612  001C88  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 12613  001C8A  0EFF               	movlw	255
 12614  001C8C  0100               	movlb	0	; () banked
 12615  001C8E  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 12616  001C90  0E01               	movlw	1
 12617  001C92  0100               	movlb	0	; () banked
 12618  001C94  27A2               	addwf	___ftadd@f1& (0+255),f,b
 12619  001C96  0E00               	movlw	0
 12620  001C98  0100               	movlb	0	; () banked
 12621  001C9A  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 12622  001C9C  0E00               	movlw	0
 12623  001C9E  0100               	movlb	0	; () banked
 12624  001CA0  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 12625  001CA2                     l1154:
 12626                           
 12627                           ; BSR set to: 0
 12628  001CA2  0100               	movlb	0	; () banked
 12629  001CA4  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 12630  001CA6  D012               	goto	l5982
 12631                           
 12632                           ; BSR set to: 0
 12633  001CA8  0EFF               	movlw	255
 12634  001CAA  0100               	movlb	0	; () banked
 12635  001CAC  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 12636  001CAE  0EFF               	movlw	255
 12637  001CB0  0100               	movlb	0	; () banked
 12638  001CB2  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12639  001CB4  0EFF               	movlw	255
 12640  001CB6  0100               	movlb	0	; () banked
 12641  001CB8  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12642  001CBA  0E01               	movlw	1
 12643  001CBC  0100               	movlb	0	; () banked
 12644  001CBE  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12645  001CC0  0E00               	movlw	0
 12646  001CC2  0100               	movlb	0	; () banked
 12647  001CC4  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12648  001CC6  0E00               	movlw	0
 12649  001CC8  0100               	movlb	0	; () banked
 12650  001CCA  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12651  001CCC                     l5982:
 12652                           
 12653                           ; BSR set to: 0
 12654  001CCC  0E00               	movlw	0
 12655  001CCE  0100               	movlb	0	; () banked
 12656  001CD0  6FAB               	movwf	___ftadd@sign& (0+255),b
 12657                           
 12658                           ; BSR set to: 0
 12659  001CD2  0100               	movlb	0	; () banked
 12660  001CD4  51A2               	movf	___ftadd@f1& (0+255),w,b
 12661  001CD6  0100               	movlb	0	; () banked
 12662  001CD8  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12663  001CDA  0100               	movlb	0	; () banked
 12664  001CDC  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 12665  001CDE  0100               	movlb	0	; () banked
 12666  001CE0  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12667  001CE2  0100               	movlb	0	; () banked
 12668  001CE4  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 12669  001CE6  0100               	movlb	0	; () banked
 12670  001CE8  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12671                           
 12672                           ; BSR set to: 0
 12673  001CEA  0100               	movlb	0	; () banked
 12674  001CEC  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12675  001CEE  D015               	goto	l5992
 12676                           
 12677                           ; BSR set to: 0
 12678  001CF0  0EFF               	movlw	255
 12679  001CF2  0100               	movlb	0	; () banked
 12680  001CF4  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 12681  001CF6  0EFF               	movlw	255
 12682  001CF8  0100               	movlb	0	; () banked
 12683  001CFA  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12684  001CFC  0EFF               	movlw	255
 12685  001CFE  0100               	movlb	0	; () banked
 12686  001D00  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12687  001D02  0E01               	movlw	1
 12688  001D04  0100               	movlb	0	; () banked
 12689  001D06  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12690  001D08  0E00               	movlw	0
 12691  001D0A  0100               	movlb	0	; () banked
 12692  001D0C  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12693  001D0E  0E00               	movlw	0
 12694  001D10  0100               	movlb	0	; () banked
 12695  001D12  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12696                           
 12697                           ; BSR set to: 0
 12698  001D14  0E01               	movlw	1
 12699  001D16  0100               	movlb	0	; () banked
 12700  001D18  6FAB               	movwf	___ftadd@sign& (0+255),b
 12701  001D1A                     l5992:
 12702                           
 12703                           ; BSR set to: 0
 12704  001D1A  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 12705  001D1E  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 12706  001D22  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 12707  001D26  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 12708  001D2A  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 12709  001D2E  EC10  F018         	call	___ftpack	;wreg free
 12710  001D32  C023  F0A2         	movff	?___ftpack,?___ftadd
 12711  001D36  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 12712  001D3A  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 12713  001D3E  0012               	return	
 12714  001D40                     __end_of___ftadd:
 12715                           	opt stack 0
 12716                           tblptru	equ	0xFF8
 12717                           tblptrh	equ	0xFF7
 12718                           tblptrl	equ	0xFF6
 12719                           tablat	equ	0xFF5
 12720                           prodh	equ	0xFF4
 12721                           prodl	equ	0xFF3
 12722                           intcon	equ	0xFF2
 12723                           intcon3	equ	0xFF0
 12724                           postinc0	equ	0xFEE
 12725                           wreg	equ	0xFE8
 12726                           postdec1	equ	0xFE5
 12727                           fsr1l	equ	0xFE1
 12728                           indf2	equ	0xFDF
 12729                           postinc2	equ	0xFDE
 12730                           postdec2	equ	0xFDD
 12731                           fsr2h	equ	0xFDA
 12732                           fsr2l	equ	0xFD9
 12733                           status	equ	0xFD8
 12734                           
 12735 ;; *************** function ___awtoft *****************
 12736 ;; Defined at:
 12737 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12738 ;; Parameters:    Size  Location     Type
 12739 ;;  c               2   42[COMRAM] int 
 12740 ;; Auto vars:     Size  Location     Type
 12741 ;;  sign            1   45[COMRAM] unsigned char 
 12742 ;; Return value:  Size  Location     Type
 12743 ;;                  3   42[COMRAM] float 
 12744 ;; Registers used:
 12745 ;;		wreg, status,2, status,0, cstack
 12746 ;; Tracked objects:
 12747 ;;		On entry : 0/0
 12748 ;;		On exit  : 0/0
 12749 ;;		Unchanged: 0/0
 12750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12751 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12754 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12755 ;;Total ram usage:        4 bytes
 12756 ;; Hardware stack levels used:    1
 12757 ;; Hardware stack levels required when called:    4
 12758 ;; This function calls:
 12759 ;;		___ftpack
 12760 ;; This function is called by:
 12761 ;;		_sortBattery
 12762 ;;		_angleToPulse
 12763 ;;		_showRunTime
 12764 ;;		_testFrequency
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text52
 12769  003B60                     __ptext52:
 12770                           	opt stack 0
 12771  003B60                     ___awtoft:
 12772                           	opt stack 23
 12773                           
 12774                           ;incstack = 0
 12775  003B60  0E00               	movlw	0
 12776  003B62  6E2E               	movwf	___awtoft@sign,c
 12777  003B64  AE2C               	btfss	___awtoft@c+1,7,c
 12778  003B66  D006               	goto	l6454
 12779  003B68  6C2B               	negf	___awtoft@c,c
 12780  003B6A  1E2C               	comf	___awtoft@c+1,f,c
 12781  003B6C  B0D8               	btfsc	status,0,c
 12782  003B6E  2A2C               	incf	___awtoft@c+1,f,c
 12783  003B70  0E01               	movlw	1
 12784  003B72  6E2E               	movwf	___awtoft@sign,c
 12785  003B74                     l6454:
 12786  003B74  C02B  F023         	movff	___awtoft@c,___ftpack@arg
 12787  003B78  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
 12788  003B7C  6A25               	clrf	___ftpack@arg+2,c
 12789  003B7E  0E8E               	movlw	142
 12790  003B80  6E26               	movwf	___ftpack@exp,c
 12791  003B82  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
 12792  003B86  EC10  F018         	call	___ftpack	;wreg free
 12793  003B8A  C023  F02B         	movff	?___ftpack,?___awtoft
 12794  003B8E  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
 12795  003B92  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
 12796  003B96  0012               	return	
 12797  003B98                     __end_of___awtoft:
 12798                           	opt stack 0
 12799                           tblptru	equ	0xFF8
 12800                           tblptrh	equ	0xFF7
 12801                           tblptrl	equ	0xFF6
 12802                           tablat	equ	0xFF5
 12803                           prodh	equ	0xFF4
 12804                           prodl	equ	0xFF3
 12805                           intcon	equ	0xFF2
 12806                           intcon3	equ	0xFF0
 12807                           postinc0	equ	0xFEE
 12808                           wreg	equ	0xFE8
 12809                           postdec1	equ	0xFE5
 12810                           fsr1l	equ	0xFE1
 12811                           indf2	equ	0xFDF
 12812                           postinc2	equ	0xFDE
 12813                           postdec2	equ	0xFDD
 12814                           fsr2h	equ	0xFDA
 12815                           fsr2l	equ	0xFD9
 12816                           status	equ	0xFD8
 12817                           
 12818 ;; *************** function ___altoft *****************
 12819 ;; Defined at:
 12820 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;  c               4   42[COMRAM] long 
 12823 ;; Auto vars:     Size  Location     Type
 12824 ;;  sign            1   51[COMRAM] unsigned char 
 12825 ;;  exp             1   50[COMRAM] unsigned char 
 12826 ;; Return value:  Size  Location     Type
 12827 ;;                  3   42[COMRAM] float 
 12828 ;; Registers used:
 12829 ;;		wreg, status,2, status,0, cstack
 12830 ;; Tracked objects:
 12831 ;;		On entry : 0/0
 12832 ;;		On exit  : 0/0
 12833 ;;		Unchanged: 0/0
 12834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12835 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12837 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12838 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12839 ;;Total ram usage:       10 bytes
 12840 ;; Hardware stack levels used:    1
 12841 ;; Hardware stack levels required when called:    4
 12842 ;; This function calls:
 12843 ;;		___ftpack
 12844 ;; This function is called by:
 12845 ;;		_sortBattery
 12846 ;;		_angleToPulse
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           	psect	text53
 12851  003538                     __ptext53:
 12852                           	opt stack 0
 12853  003538                     ___altoft:
 12854                           	opt stack 23
 12855                           
 12856                           ;incstack = 0
 12857  003538  0E00               	movlw	0
 12858  00353A  6E34               	movwf	___altoft@sign,c
 12859  00353C  0E8E               	movlw	142
 12860  00353E  6E33               	movwf	___altoft@exp,c
 12861  003540  AE2E               	btfss	___altoft@c+3,7,c
 12862  003542  D011               	goto	l6386
 12863  003544  1E2E               	comf	___altoft@c+3,f,c
 12864  003546  1E2D               	comf	___altoft@c+2,f,c
 12865  003548  1E2C               	comf	___altoft@c+1,f,c
 12866  00354A  6C2B               	negf	___altoft@c,c
 12867  00354C  0E00               	movlw	0
 12868  00354E  222C               	addwfc	___altoft@c+1,f,c
 12869  003550  222D               	addwfc	___altoft@c+2,f,c
 12870  003552  222E               	addwfc	___altoft@c+3,f,c
 12871  003554  0E01               	movlw	1
 12872  003556  6E34               	movwf	___altoft@sign,c
 12873  003558  D006               	goto	l6386
 12874  00355A                     l6384:
 12875  00355A  90D8               	bcf	status,0,c
 12876  00355C  322E               	rrcf	___altoft@c+3,f,c
 12877  00355E  322D               	rrcf	___altoft@c+2,f,c
 12878  003560  322C               	rrcf	___altoft@c+1,f,c
 12879  003562  322B               	rrcf	___altoft@c,f,c
 12880  003564  2A33               	incf	___altoft@exp,f,c
 12881  003566                     l6386:
 12882  003566  0E00               	movlw	0
 12883  003568  142B               	andwf	___altoft@c,w,c
 12884  00356A  6E2F               	movwf	??___altoft& (0+255),c
 12885  00356C  0E00               	movlw	0
 12886  00356E  142C               	andwf	___altoft@c+1,w,c
 12887  003570  6E30               	movwf	(??___altoft+1)& (0+255),c
 12888  003572  0E00               	movlw	0
 12889  003574  142D               	andwf	___altoft@c+2,w,c
 12890  003576  6E31               	movwf	(??___altoft+2)& (0+255),c
 12891  003578  0EFF               	movlw	255
 12892  00357A  142E               	andwf	___altoft@c+3,w,c
 12893  00357C  6E32               	movwf	(??___altoft+3)& (0+255),c
 12894  00357E  502F               	movf	??___altoft,w,c
 12895  003580  1030               	iorwf	??___altoft+1,w,c
 12896  003582  1031               	iorwf	??___altoft+2,w,c
 12897  003584  1032               	iorwf	??___altoft+3,w,c
 12898  003586  A4D8               	btfss	status,2,c
 12899  003588  D7E8               	goto	l6384
 12900  00358A  C02B  F023         	movff	___altoft@c,___ftpack@arg
 12901  00358E  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
 12902  003592  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
 12903  003596  C033  F026         	movff	___altoft@exp,___ftpack@exp
 12904  00359A  C034  F027         	movff	___altoft@sign,___ftpack@sign
 12905  00359E  EC10  F018         	call	___ftpack	;wreg free
 12906  0035A2  C023  F02B         	movff	?___ftpack,?___altoft
 12907  0035A6  C024  F02C         	movff	?___ftpack+1,?___altoft+1
 12908  0035AA  C025  F02D         	movff	?___ftpack+2,?___altoft+2
 12909  0035AE  0012               	return	
 12910  0035B0                     __end_of___altoft:
 12911                           	opt stack 0
 12912                           tblptru	equ	0xFF8
 12913                           tblptrh	equ	0xFF7
 12914                           tblptrl	equ	0xFF6
 12915                           tablat	equ	0xFF5
 12916                           prodh	equ	0xFF4
 12917                           prodl	equ	0xFF3
 12918                           intcon	equ	0xFF2
 12919                           intcon3	equ	0xFF0
 12920                           postinc0	equ	0xFEE
 12921                           wreg	equ	0xFE8
 12922                           postdec1	equ	0xFE5
 12923                           fsr1l	equ	0xFE1
 12924                           indf2	equ	0xFDF
 12925                           postinc2	equ	0xFDE
 12926                           postdec2	equ	0xFDD
 12927                           fsr2h	equ	0xFDA
 12928                           fsr2l	equ	0xFD9
 12929                           status	equ	0xFD8
 12930                           
 12931 ;; *************** function ___ftpack *****************
 12932 ;; Defined at:
 12933 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12934 ;; Parameters:    Size  Location     Type
 12935 ;;  arg             3   34[COMRAM] unsigned um
 12936 ;;  exp             1   37[COMRAM] unsigned char 
 12937 ;;  sign            1   38[COMRAM] unsigned char 
 12938 ;; Auto vars:     Size  Location     Type
 12939 ;;		None
 12940 ;; Return value:  Size  Location     Type
 12941 ;;                  3   34[COMRAM] float 
 12942 ;; Registers used:
 12943 ;;		wreg, status,2, status,0
 12944 ;; Tracked objects:
 12945 ;;		On entry : 0/0
 12946 ;;		On exit  : 0/0
 12947 ;;		Unchanged: 0/0
 12948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12949 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12951 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12952 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12953 ;;Total ram usage:        8 bytes
 12954 ;; Hardware stack levels used:    1
 12955 ;; Hardware stack levels required when called:    3
 12956 ;; This function calls:
 12957 ;;		Nothing
 12958 ;; This function is called by:
 12959 ;;		___altoft
 12960 ;;		___awtoft
 12961 ;;		___ftadd
 12962 ;;		___ftdiv
 12963 ;;		___ftmul
 12964 ;;		___lltoft
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           	psect	text54
 12969  003020                     __ptext54:
 12970                           	opt stack 0
 12971  003020                     ___ftpack:
 12972                           	opt stack 23
 12973                           
 12974                           ;incstack = 0
 12975  003020  5026               	movf	___ftpack@exp,w,c
 12976  003022  B4D8               	btfsc	status,2,c
 12977  003024  D005               	goto	l5882
 12978  003026  5023               	movf	___ftpack@arg,w,c
 12979  003028  1024               	iorwf	___ftpack@arg+1,w,c
 12980  00302A  1025               	iorwf	___ftpack@arg+2,w,c
 12981  00302C  A4D8               	btfss	status,2,c
 12982  00302E  D00C               	goto	l5888
 12983  003030                     l5882:
 12984  003030  0E00               	movlw	0
 12985  003032  6E23               	movwf	?___ftpack,c
 12986  003034  0E00               	movlw	0
 12987  003036  6E24               	movwf	?___ftpack+1,c
 12988  003038  0E00               	movlw	0
 12989  00303A  6E25               	movwf	?___ftpack+2,c
 12990  00303C  0012               	return	
 12991  00303E                     l5886:
 12992  00303E  2A26               	incf	___ftpack@exp,f,c
 12993  003040  90D8               	bcf	status,0,c
 12994  003042  3225               	rrcf	___ftpack@arg+2,f,c
 12995  003044  3224               	rrcf	___ftpack@arg+1,f,c
 12996  003046  3223               	rrcf	___ftpack@arg,f,c
 12997  003048                     l5888:
 12998  003048  0E00               	movlw	0
 12999  00304A  1423               	andwf	___ftpack@arg,w,c
 13000  00304C  6E28               	movwf	??___ftpack& (0+255),c
 13001  00304E  0E00               	movlw	0
 13002  003050  1424               	andwf	___ftpack@arg+1,w,c
 13003  003052  6E29               	movwf	(??___ftpack+1)& (0+255),c
 13004  003054  0EFE               	movlw	254
 13005  003056  1425               	andwf	___ftpack@arg+2,w,c
 13006  003058  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 13007  00305A  5028               	movf	??___ftpack,w,c
 13008  00305C  1029               	iorwf	??___ftpack+1,w,c
 13009  00305E  102A               	iorwf	??___ftpack+2,w,c
 13010  003060  B4D8               	btfsc	status,2,c
 13011  003062  D00C               	goto	l5894
 13012  003064  D7EC               	goto	l5886
 13013  003066                     l5890:
 13014  003066  2A26               	incf	___ftpack@exp,f,c
 13015  003068  0E01               	movlw	1
 13016  00306A  2623               	addwf	___ftpack@arg,f,c
 13017  00306C  0E00               	movlw	0
 13018  00306E  2224               	addwfc	___ftpack@arg+1,f,c
 13019  003070  0E00               	movlw	0
 13020  003072  2225               	addwfc	___ftpack@arg+2,f,c
 13021  003074  90D8               	bcf	status,0,c
 13022  003076  3225               	rrcf	___ftpack@arg+2,f,c
 13023  003078  3224               	rrcf	___ftpack@arg+1,f,c
 13024  00307A  3223               	rrcf	___ftpack@arg,f,c
 13025  00307C                     l5894:
 13026  00307C  0E00               	movlw	0
 13027  00307E  1423               	andwf	___ftpack@arg,w,c
 13028  003080  6E28               	movwf	??___ftpack& (0+255),c
 13029  003082  0E00               	movlw	0
 13030  003084  1424               	andwf	___ftpack@arg+1,w,c
 13031  003086  6E29               	movwf	(??___ftpack+1)& (0+255),c
 13032  003088  0EFF               	movlw	255
 13033  00308A  1425               	andwf	___ftpack@arg+2,w,c
 13034  00308C  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 13035  00308E  5028               	movf	??___ftpack,w,c
 13036  003090  1029               	iorwf	??___ftpack+1,w,c
 13037  003092  102A               	iorwf	??___ftpack+2,w,c
 13038  003094  B4D8               	btfsc	status,2,c
 13039  003096  D006               	goto	l5898
 13040  003098  D7E6               	goto	l5890
 13041  00309A                     l5896:
 13042  00309A  0626               	decf	___ftpack@exp,f,c
 13043  00309C  90D8               	bcf	status,0,c
 13044  00309E  3623               	rlcf	___ftpack@arg,f,c
 13045  0030A0  3624               	rlcf	___ftpack@arg+1,f,c
 13046  0030A2  3625               	rlcf	___ftpack@arg+2,f,c
 13047  0030A4                     l5898:
 13048  0030A4  BE24               	btfsc	___ftpack@arg+1,7,c
 13049  0030A6  D003               	goto	l1107
 13050  0030A8  0E02               	movlw	2
 13051  0030AA  6026               	cpfslt	___ftpack@exp,c
 13052  0030AC  D7F6               	goto	l5896
 13053  0030AE                     l1107:
 13054  0030AE  A026               	btfss	___ftpack@exp,0,c
 13055  0030B0  9E24               	bcf	___ftpack@arg+1,7,c
 13056  0030B2  90D8               	bcf	status,0,c
 13057  0030B4  3226               	rrcf	___ftpack@exp,f,c
 13058  0030B6  5026               	movf	___ftpack@exp,w,c
 13059  0030B8  1225               	iorwf	___ftpack@arg+2,f,c
 13060  0030BA  5027               	movf	___ftpack@sign,w,c
 13061  0030BC  A4D8               	btfss	status,2,c
 13062  0030BE  8E25               	bsf	___ftpack@arg+2,7,c
 13063  0030C0  C023  F023         	movff	___ftpack@arg,?___ftpack
 13064  0030C4  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 13065  0030C8  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 13066  0030CC  0012               	return	
 13067  0030CE                     __end_of___ftpack:
 13068                           	opt stack 0
 13069                           tblptru	equ	0xFF8
 13070                           tblptrh	equ	0xFF7
 13071                           tblptrl	equ	0xFF6
 13072                           tablat	equ	0xFF5
 13073                           prodh	equ	0xFF4
 13074                           prodl	equ	0xFF3
 13075                           intcon	equ	0xFF2
 13076                           intcon3	equ	0xFF0
 13077                           postinc0	equ	0xFEE
 13078                           wreg	equ	0xFE8
 13079                           postdec1	equ	0xFE5
 13080                           fsr1l	equ	0xFE1
 13081                           indf2	equ	0xFDF
 13082                           postinc2	equ	0xFDE
 13083                           postdec2	equ	0xFDD
 13084                           fsr2h	equ	0xFDA
 13085                           fsr2l	equ	0xFD9
 13086                           status	equ	0xFD8
 13087                           
 13088 ;; *************** function _initTimer *****************
 13089 ;; Defined at:
 13090 ;;		line 52 in file "timer.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;  timer           2   34[COMRAM] int 
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;		None
 13095 ;; Return value:  Size  Location     Type
 13096 ;;                  1    wreg      void 
 13097 ;; Registers used:
 13098 ;;		wreg, status,2, status,0
 13099 ;; Tracked objects:
 13100 ;;		On entry : 0/0
 13101 ;;		On exit  : 0/0
 13102 ;;		Unchanged: 0/0
 13103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13106 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;Total ram usage:        4 bytes
 13109 ;; Hardware stack levels used:    1
 13110 ;; Hardware stack levels required when called:    3
 13111 ;; This function calls:
 13112 ;;		Nothing
 13113 ;; This function is called by:
 13114 ;;		_main
 13115 ;;		_initServo
 13116 ;;		_testFrequency
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           	psect	text55
 13121  003A58                     __ptext55:
 13122                           	opt stack 0
 13123  003A58                     _initTimer:
 13124                           	opt stack 27
 13125                           
 13126                           ;timer.c: 53: switch(timer){
 13127                           
 13128                           ;incstack = 0
 13129  003A58  D00F               	goto	l4918
 13130  003A5A                     l4900:
 13131                           
 13132                           ;timer.c: 55: T0CON = 0;
 13133  003A5A  0E00               	movlw	0
 13134  003A5C  6ED5               	movwf	4053,c	;volatile
 13135                           
 13136                           ;timer.c: 56: T0CON |= 1<<3;
 13137  003A5E  86D5               	bsf	4053,3,c	;volatile
 13138                           
 13139                           ;timer.c: 58: TMR0IE = 1;
 13140  003A60  8AF2               	bsf	intcon,5,c	;volatile
 13141                           
 13142                           ;timer.c: 59: break;
 13143  003A62  D01C               	goto	l447
 13144  003A64                     l4906:
 13145                           
 13146                           ;timer.c: 61: T1CON = 0;
 13147  003A64  0E00               	movlw	0
 13148  003A66  6ECD               	movwf	4045,c	;volatile
 13149                           
 13150                           ;timer.c: 63: T1CON |= 0b11<<4;
 13151  003A68  0E30               	movlw	48
 13152  003A6A  12CD               	iorwf	4045,f,c	;volatile
 13153                           
 13154                           ;timer.c: 64: TMR1IE = 1;
 13155  003A6C  809D               	bsf	3997,0,c	;volatile
 13156                           
 13157                           ;timer.c: 65: break;
 13158  003A6E  D016               	goto	l447
 13159  003A70                     l4912:
 13160                           
 13161                           ;timer.c: 67: T3CON = 0;
 13162  003A70  0E00               	movlw	0
 13163  003A72  6EB1               	movwf	4017,c	;volatile
 13164                           
 13165                           ;timer.c: 68: TMR3IE = 1;
 13166  003A74  82A0               	bsf	4000,1,c	;volatile
 13167                           
 13168                           ;timer.c: 70: }
 13169                           
 13170                           ;timer.c: 69: break;
 13171  003A76  D012               	goto	l447
 13172  003A78                     l4918:
 13173  003A78  C023  F025         	movff	initTimer@timer,??_initTimer
 13174  003A7C  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
 13175                           
 13176                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13177                           ; Switch size 1, requested type "space"
 13178                           ; Number of cases is 1, Range of values is 0 to 0
 13179                           ; switch strategies available:
 13180                           ; Name         Instructions Cycles
 13181                           ; simple_byte            4     3 (average)
 13182                           ;	Chosen strategy is simple_byte
 13183  003A80  5026               	movf	??_initTimer+1,w,c
 13184  003A82  0A00               	xorlw	0	; case 0
 13185  003A84  A4D8               	btfss	status,2,c
 13186  003A86  D00A               	goto	l447
 13187                           
 13188                           ; Switch size 1, requested type "space"
 13189                           ; Number of cases is 3, Range of values is 0 to 3
 13190                           ; switch strategies available:
 13191                           ; Name         Instructions Cycles
 13192                           ; simple_byte           10     6 (average)
 13193                           ;	Chosen strategy is simple_byte
 13194  003A88  5025               	movf	??_initTimer,w,c
 13195  003A8A  0A00               	xorlw	0	; case 0
 13196  003A8C  B4D8               	btfsc	status,2,c
 13197  003A8E  D7E5               	goto	l4900
 13198  003A90  0A01               	xorlw	1	; case 1
 13199  003A92  B4D8               	btfsc	status,2,c
 13200  003A94  D7E7               	goto	l4906
 13201  003A96  0A02               	xorlw	2	; case 3
 13202  003A98  B4D8               	btfsc	status,2,c
 13203  003A9A  D7EA               	goto	l4912
 13204  003A9C                     l447:
 13205                           
 13206                           ;timer.c: 71: PEIE = 1;
 13207  003A9C  8CF2               	bsf	intcon,6,c	;volatile
 13208                           
 13209                           ;timer.c: 72: (INTCONbits.GIE = 1);
 13210  003A9E  8EF2               	bsf	intcon,7,c	;volatile
 13211  003AA0  0012               	return		;funcret
 13212  003AA2                     __end_of_initTimer:
 13213                           	opt stack 0
 13214                           tblptru	equ	0xFF8
 13215                           tblptrh	equ	0xFF7
 13216                           tblptrl	equ	0xFF6
 13217                           tablat	equ	0xFF5
 13218                           prodh	equ	0xFF4
 13219                           prodl	equ	0xFF3
 13220                           intcon	equ	0xFF2
 13221                           intcon3	equ	0xFF0
 13222                           postinc0	equ	0xFEE
 13223                           wreg	equ	0xFE8
 13224                           postdec1	equ	0xFE5
 13225                           fsr1l	equ	0xFE1
 13226                           indf2	equ	0xFDF
 13227                           postinc2	equ	0xFDE
 13228                           postdec2	equ	0xFDD
 13229                           fsr2h	equ	0xFDA
 13230                           fsr2l	equ	0xFD9
 13231                           status	equ	0xFD8
 13232                           
 13233 ;; *************** function _initLCD *****************
 13234 ;; Defined at:
 13235 ;;		line 15 in file "lcd.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;		None
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;		None
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      void 
 13242 ;; Registers used:
 13243 ;;		wreg, status,2, status,0, cstack
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13251 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13252 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13253 ;;Total ram usage:        1 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    5
 13256 ;; This function calls:
 13257 ;;		_lcdInst
 13258 ;; This function is called by:
 13259 ;;		_main
 13260 ;;		_debug
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264                           	psect	text56
 13265  003AA2                     __ptext56:
 13266                           	opt stack 0
 13267  003AA2                     _initLCD:
 13268                           	opt stack 25
 13269                           
 13270                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 13271                           
 13272                           ;incstack = 0
 13273  003AA2  0E31               	movlw	49
 13274  003AA4  6E27               	movwf	??_initLCD& (0+255),c
 13275  003AA6  0EB2               	movlw	178
 13276  003AA8                     u8027:
 13277  003AA8  2EE8               	decfsz	wreg,f,c
 13278  003AAA  D7FE               	bra	u8027
 13279  003AAC  2E27               	decfsz	??_initLCD& (0+255),f,c
 13280  003AAE  D7FC               	bra	u8027
 13281  003AB0  D000               	nop2	
 13282                           
 13283                           ;lcd.c: 18: lcdInst(0b00110011);
 13284  003AB2  0E33               	movlw	51
 13285  003AB4  EC28  F01E         	call	_lcdInst
 13286                           
 13287                           ;lcd.c: 19: lcdInst(0b00110010);
 13288  003AB8  0E32               	movlw	50
 13289  003ABA  EC28  F01E         	call	_lcdInst
 13290                           
 13291                           ;lcd.c: 20: lcdInst(0b00101000);
 13292  003ABE  0E28               	movlw	40
 13293  003AC0  EC28  F01E         	call	_lcdInst
 13294                           
 13295                           ;lcd.c: 21: lcdInst(0b00001111);
 13296  003AC4  0E0F               	movlw	15
 13297  003AC6  EC28  F01E         	call	_lcdInst
 13298                           
 13299                           ;lcd.c: 22: lcdInst(0b00000110);
 13300  003ACA  0E06               	movlw	6
 13301  003ACC  EC28  F01E         	call	_lcdInst
 13302                           
 13303                           ;lcd.c: 23: lcdInst(0b00000001);
 13304  003AD0  0E01               	movlw	1
 13305  003AD2  EC28  F01E         	call	_lcdInst
 13306                           
 13307                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 13308  003AD6  0E31               	movlw	49
 13309  003AD8  6E27               	movwf	??_initLCD& (0+255),c
 13310  003ADA  0EB2               	movlw	178
 13311  003ADC                     u8037:
 13312  003ADC  2EE8               	decfsz	wreg,f,c
 13313  003ADE  D7FE               	bra	u8037
 13314  003AE0  2E27               	decfsz	??_initLCD& (0+255),f,c
 13315  003AE2  D7FC               	bra	u8037
 13316  003AE4  D000               	nop2	
 13317  003AE6  0012               	return		;funcret
 13318  003AE8                     __end_of_initLCD:
 13319                           	opt stack 0
 13320                           tblptru	equ	0xFF8
 13321                           tblptrh	equ	0xFF7
 13322                           tblptrl	equ	0xFF6
 13323                           tablat	equ	0xFF5
 13324                           prodh	equ	0xFF4
 13325                           prodl	equ	0xFF3
 13326                           intcon	equ	0xFF2
 13327                           intcon3	equ	0xFF0
 13328                           postinc0	equ	0xFEE
 13329                           wreg	equ	0xFE8
 13330                           postdec1	equ	0xFE5
 13331                           fsr1l	equ	0xFE1
 13332                           indf2	equ	0xFDF
 13333                           postinc2	equ	0xFDE
 13334                           postdec2	equ	0xFDD
 13335                           fsr2h	equ	0xFDA
 13336                           fsr2l	equ	0xFD9
 13337                           status	equ	0xFD8
 13338                           
 13339 ;; *************** function _lcdInst *****************
 13340 ;; Defined at:
 13341 ;;		line 27 in file "lcd.c"
 13342 ;; Parameters:    Size  Location     Type
 13343 ;;  data            1    wreg     unsigned char 
 13344 ;; Auto vars:     Size  Location     Type
 13345 ;;  data            1   37[COMRAM] unsigned char 
 13346 ;; Return value:  Size  Location     Type
 13347 ;;                  1    wreg      void 
 13348 ;; Registers used:
 13349 ;;		wreg, status,2, status,0, cstack
 13350 ;; Tracked objects:
 13351 ;;		On entry : 0/0
 13352 ;;		On exit  : 0/0
 13353 ;;		Unchanged: 0/0
 13354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13358 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13359 ;;Total ram usage:        2 bytes
 13360 ;; Hardware stack levels used:    1
 13361 ;; Hardware stack levels required when called:    4
 13362 ;; This function calls:
 13363 ;;		_lcdNibble
 13364 ;; This function is called by:
 13365 ;;		_initLCD
 13366 ;;		_lcdHome
 13367 ;;		_lcdClear
 13368 ;;		_lcdNewline
 13369 ;; This function uses a non-reentrant model
 13370 ;;
 13371                           
 13372                           	psect	text57
 13373  003C50                     __ptext57:
 13374                           	opt stack 0
 13375  003C50                     _lcdInst:
 13376                           	opt stack 22
 13377                           
 13378                           ;incstack = 0
 13379                           ;lcdInst@data stored from wreg
 13380  003C50  6E26               	movwf	lcdInst@data,c
 13381                           
 13382                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 13383  003C52  948C               	bcf	3980,2,c	;volatile
 13384                           
 13385                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 13386  003C54  0E74               	movlw	116
 13387  003C56                     u8047:
 13388  003C56  2EE8               	decfsz	wreg,f,c
 13389  003C58  D7FE               	bra	u8047
 13390  003C5A  D000               	nop2	
 13391                           
 13392                           ;lcd.c: 30: lcdNibble(data);
 13393  003C5C  5026               	movf	lcdInst@data,w,c
 13394  003C5E  EC7B  F01B         	call	_lcdNibble
 13395                           
 13396                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 13397  003C62  0E04               	movlw	4
 13398  003C64  6E25               	movwf	??_lcdInst& (0+255),c
 13399  003C66  0E3E               	movlw	62
 13400  003C68                     u8057:
 13401  003C68  2EE8               	decfsz	wreg,f,c
 13402  003C6A  D7FE               	bra	u8057
 13403  003C6C  2E25               	decfsz	??_lcdInst& (0+255),f,c
 13404  003C6E  D7FC               	bra	u8057
 13405  003C70  0012               	return		;funcret
 13406  003C72                     __end_of_lcdInst:
 13407                           	opt stack 0
 13408                           tblptru	equ	0xFF8
 13409                           tblptrh	equ	0xFF7
 13410                           tblptrl	equ	0xFF6
 13411                           tablat	equ	0xFF5
 13412                           prodh	equ	0xFF4
 13413                           prodl	equ	0xFF3
 13414                           intcon	equ	0xFF2
 13415                           intcon3	equ	0xFF0
 13416                           postinc0	equ	0xFEE
 13417                           wreg	equ	0xFE8
 13418                           postdec1	equ	0xFE5
 13419                           fsr1l	equ	0xFE1
 13420                           indf2	equ	0xFDF
 13421                           postinc2	equ	0xFDE
 13422                           postdec2	equ	0xFDD
 13423                           fsr2h	equ	0xFDA
 13424                           fsr2l	equ	0xFD9
 13425                           status	equ	0xFD8
 13426                           
 13427 ;; *************** function _lcdNibble *****************
 13428 ;; Defined at:
 13429 ;;		line 46 in file "lcd.c"
 13430 ;; Parameters:    Size  Location     Type
 13431 ;;  data            1    wreg     unsigned char 
 13432 ;; Auto vars:     Size  Location     Type
 13433 ;;  data            1   35[COMRAM] unsigned char 
 13434 ;;  temp            1   34[COMRAM] unsigned char 
 13435 ;; Return value:  Size  Location     Type
 13436 ;;                  1    wreg      void 
 13437 ;; Registers used:
 13438 ;;		wreg, status,2, status,0
 13439 ;; Tracked objects:
 13440 ;;		On entry : 0/0
 13441 ;;		On exit  : 0/0
 13442 ;;		Unchanged: 0/0
 13443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13448 ;;Total ram usage:        2 bytes
 13449 ;; Hardware stack levels used:    1
 13450 ;; Hardware stack levels required when called:    3
 13451 ;; This function calls:
 13452 ;;		Nothing
 13453 ;; This function is called by:
 13454 ;;		_lcdInst
 13455 ;;		_putch
 13456 ;; This function uses a non-reentrant model
 13457 ;;
 13458                           
 13459                           	psect	text58
 13460  0036F6                     __ptext58:
 13461                           	opt stack 0
 13462  0036F6                     _lcdNibble:
 13463                           	opt stack 24
 13464                           
 13465                           ;incstack = 0
 13466                           ;lcdNibble@data stored from wreg
 13467  0036F6  6E24               	movwf	lcdNibble@data,c
 13468                           
 13469                           ;lcd.c: 48: char temp = data & 0xF0;
 13470  0036F8  5024               	movf	lcdNibble@data,w,c
 13471  0036FA  0BF0               	andlw	240
 13472  0036FC  6E23               	movwf	lcdNibble@temp,c
 13473                           
 13474                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13475  0036FE  508C               	movf	3980,w,c	;volatile
 13476  003700  0B0F               	andlw	15
 13477  003702  6E8C               	movwf	3980,c	;volatile
 13478                           
 13479                           ;lcd.c: 50: LATD = temp | LATD;
 13480  003704  5023               	movf	lcdNibble@temp,w,c
 13481  003706  108C               	iorwf	3980,w,c	;volatile
 13482  003708  6E8C               	movwf	3980,c	;volatile
 13483                           
 13484                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13485  00370A  968C               	bcf	3980,3,c	;volatile
 13486                           
 13487                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13488  00370C  0ED6               	movlw	214
 13489  00370E                     u8067:
 13490  00370E  D000               	nop2	
 13491  003710  D000               	nop2	
 13492  003712  2EE8               	decfsz	wreg,f,c
 13493  003714  D7FC               	bra	u8067
 13494  003716  D000               	nop2	
 13495                           
 13496                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13497  003718  868C               	bsf	3980,3,c	;volatile
 13498                           
 13499                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13500  00371A  0ED6               	movlw	214
 13501  00371C                     u8077:
 13502  00371C  D000               	nop2	
 13503  00371E  D000               	nop2	
 13504  003720  2EE8               	decfsz	wreg,f,c
 13505  003722  D7FC               	bra	u8077
 13506  003724  D000               	nop2	
 13507                           
 13508                           ;lcd.c: 58: data = data << 4;
 13509  003726  3824               	swapf	lcdNibble@data,w,c
 13510  003728  0BF0               	andlw	240
 13511  00372A  6E24               	movwf	lcdNibble@data,c
 13512                           
 13513                           ;lcd.c: 60: temp = data & 0xF0;
 13514  00372C  5024               	movf	lcdNibble@data,w,c
 13515  00372E  0BF0               	andlw	240
 13516  003730  6E23               	movwf	lcdNibble@temp,c
 13517                           
 13518                           ;lcd.c: 61: LATD = LATD & 0x0F;
 13519  003732  508C               	movf	3980,w,c	;volatile
 13520  003734  0B0F               	andlw	15
 13521  003736  6E8C               	movwf	3980,c	;volatile
 13522                           
 13523                           ;lcd.c: 62: LATD = temp | LATD;
 13524  003738  5023               	movf	lcdNibble@temp,w,c
 13525  00373A  108C               	iorwf	3980,w,c	;volatile
 13526  00373C  6E8C               	movwf	3980,c	;volatile
 13527                           
 13528                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 13529  00373E  968C               	bcf	3980,3,c	;volatile
 13530                           
 13531                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13532  003740  0ED6               	movlw	214
 13533  003742                     u8087:
 13534  003742  D000               	nop2	
 13535  003744  D000               	nop2	
 13536  003746  2EE8               	decfsz	wreg,f,c
 13537  003748  D7FC               	bra	u8087
 13538  00374A  D000               	nop2	
 13539                           
 13540                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 13541  00374C  868C               	bsf	3980,3,c	;volatile
 13542                           
 13543                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13544  00374E  0ED6               	movlw	214
 13545  003750                     u8097:
 13546  003750  D000               	nop2	
 13547  003752  D000               	nop2	
 13548  003754  2EE8               	decfsz	wreg,f,c
 13549  003756  D7FC               	bra	u8097
 13550  003758  D000               	nop2	
 13551  00375A  0012               	return		;funcret
 13552  00375C                     __end_of_lcdNibble:
 13553                           	opt stack 0
 13554                           tblptru	equ	0xFF8
 13555                           tblptrh	equ	0xFF7
 13556                           tblptrl	equ	0xFF6
 13557                           tablat	equ	0xFF5
 13558                           prodh	equ	0xFF4
 13559                           prodl	equ	0xFF3
 13560                           intcon	equ	0xFF2
 13561                           intcon3	equ	0xFF0
 13562                           postinc0	equ	0xFEE
 13563                           wreg	equ	0xFE8
 13564                           postdec1	equ	0xFE5
 13565                           fsr1l	equ	0xFE1
 13566                           indf2	equ	0xFDF
 13567                           postinc2	equ	0xFDE
 13568                           postdec2	equ	0xFDD
 13569                           fsr2h	equ	0xFDA
 13570                           fsr2l	equ	0xFD9
 13571                           status	equ	0xFD8
 13572                           
 13573 ;; *************** function ___almod *****************
 13574 ;; Defined at:
 13575 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 13576 ;; Parameters:    Size  Location     Type
 13577 ;;  dividend        4   48[COMRAM] long 
 13578 ;;  divisor         4   52[COMRAM] long 
 13579 ;; Auto vars:     Size  Location     Type
 13580 ;;  sign            1   57[COMRAM] unsigned char 
 13581 ;;  counter         1   56[COMRAM] unsigned char 
 13582 ;; Return value:  Size  Location     Type
 13583 ;;                  4   48[COMRAM] long 
 13584 ;; Registers used:
 13585 ;;		wreg, status,2, status,0
 13586 ;; Tracked objects:
 13587 ;;		On entry : 0/0
 13588 ;;		On exit  : 0/0
 13589 ;;		Unchanged: 0/0
 13590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13591 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13594 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13595 ;;Total ram usage:       10 bytes
 13596 ;; Hardware stack levels used:    1
 13597 ;; Hardware stack levels required when called:    3
 13598 ;; This function calls:
 13599 ;;		Nothing
 13600 ;; This function is called by:
 13601 ;;		_main
 13602 ;; This function uses a non-reentrant model
 13603 ;;
 13604                           
 13605                           	psect	text59
 13606  0030CE                     __ptext59:
 13607                           	opt stack 0
 13608  0030CE                     ___almod:
 13609                           	opt stack 27
 13610                           
 13611                           ;incstack = 0
 13612  0030CE  0E00               	movlw	0
 13613  0030D0  6E3A               	movwf	___almod@sign,c
 13614  0030D2  AE34               	btfss	___almod@dividend+3,7,c
 13615  0030D4  D00A               	goto	l5494
 13616  0030D6  1E34               	comf	___almod@dividend+3,f,c
 13617  0030D8  1E33               	comf	___almod@dividend+2,f,c
 13618  0030DA  1E32               	comf	___almod@dividend+1,f,c
 13619  0030DC  6C31               	negf	___almod@dividend,c
 13620  0030DE  0E00               	movlw	0
 13621  0030E0  2232               	addwfc	___almod@dividend+1,f,c
 13622  0030E2  2233               	addwfc	___almod@dividend+2,f,c
 13623  0030E4  2234               	addwfc	___almod@dividend+3,f,c
 13624  0030E6  0E01               	movlw	1
 13625  0030E8  6E3A               	movwf	___almod@sign,c
 13626  0030EA                     l5494:
 13627  0030EA  AE38               	btfss	___almod@divisor+3,7,c
 13628  0030EC  D008               	goto	l5498
 13629  0030EE  1E38               	comf	___almod@divisor+3,f,c
 13630  0030F0  1E37               	comf	___almod@divisor+2,f,c
 13631  0030F2  1E36               	comf	___almod@divisor+1,f,c
 13632  0030F4  6C35               	negf	___almod@divisor,c
 13633  0030F6  0E00               	movlw	0
 13634  0030F8  2236               	addwfc	___almod@divisor+1,f,c
 13635  0030FA  2237               	addwfc	___almod@divisor+2,f,c
 13636  0030FC  2238               	addwfc	___almod@divisor+3,f,c
 13637  0030FE                     l5498:
 13638  0030FE  5035               	movf	___almod@divisor,w,c
 13639  003100  1036               	iorwf	___almod@divisor+1,w,c
 13640  003102  1037               	iorwf	___almod@divisor+2,w,c
 13641  003104  1038               	iorwf	___almod@divisor+3,w,c
 13642  003106  B4D8               	btfsc	status,2,c
 13643  003108  D024               	goto	l5514
 13644  00310A  0E01               	movlw	1
 13645  00310C  6E39               	movwf	___almod@counter,c
 13646  00310E  D006               	goto	l5504
 13647  003110                     l5502:
 13648  003110  90D8               	bcf	status,0,c
 13649  003112  3635               	rlcf	___almod@divisor,f,c
 13650  003114  3636               	rlcf	___almod@divisor+1,f,c
 13651  003116  3637               	rlcf	___almod@divisor+2,f,c
 13652  003118  3638               	rlcf	___almod@divisor+3,f,c
 13653  00311A  2A39               	incf	___almod@counter,f,c
 13654  00311C                     l5504:
 13655  00311C  AE38               	btfss	___almod@divisor+3,7,c
 13656  00311E  D7F8               	goto	l5502
 13657  003120                     l5506:
 13658  003120  5035               	movf	___almod@divisor,w,c
 13659  003122  5C31               	subwf	___almod@dividend,w,c
 13660  003124  5036               	movf	___almod@divisor+1,w,c
 13661  003126  5832               	subwfb	___almod@dividend+1,w,c
 13662  003128  5037               	movf	___almod@divisor+2,w,c
 13663  00312A  5833               	subwfb	___almod@dividend+2,w,c
 13664  00312C  5038               	movf	___almod@divisor+3,w,c
 13665  00312E  5834               	subwfb	___almod@dividend+3,w,c
 13666  003130  A0D8               	btfss	status,0,c
 13667  003132  D008               	goto	l5510
 13668  003134  5035               	movf	___almod@divisor,w,c
 13669  003136  5E31               	subwf	___almod@dividend,f,c
 13670  003138  5036               	movf	___almod@divisor+1,w,c
 13671  00313A  5A32               	subwfb	___almod@dividend+1,f,c
 13672  00313C  5037               	movf	___almod@divisor+2,w,c
 13673  00313E  5A33               	subwfb	___almod@dividend+2,f,c
 13674  003140  5038               	movf	___almod@divisor+3,w,c
 13675  003142  5A34               	subwfb	___almod@dividend+3,f,c
 13676  003144                     l5510:
 13677  003144  90D8               	bcf	status,0,c
 13678  003146  3238               	rrcf	___almod@divisor+3,f,c
 13679  003148  3237               	rrcf	___almod@divisor+2,f,c
 13680  00314A  3236               	rrcf	___almod@divisor+1,f,c
 13681  00314C  3235               	rrcf	___almod@divisor,f,c
 13682  00314E  2E39               	decfsz	___almod@counter,f,c
 13683  003150  D7E7               	goto	l5506
 13684  003152                     l5514:
 13685  003152  503A               	movf	___almod@sign,w,c
 13686  003154  B4D8               	btfsc	status,2,c
 13687  003156  D008               	goto	l5518
 13688  003158  1E34               	comf	___almod@dividend+3,f,c
 13689  00315A  1E33               	comf	___almod@dividend+2,f,c
 13690  00315C  1E32               	comf	___almod@dividend+1,f,c
 13691  00315E  6C31               	negf	___almod@dividend,c
 13692  003160  0E00               	movlw	0
 13693  003162  2232               	addwfc	___almod@dividend+1,f,c
 13694  003164  2233               	addwfc	___almod@dividend+2,f,c
 13695  003166  2234               	addwfc	___almod@dividend+3,f,c
 13696  003168                     l5518:
 13697  003168  C031  F031         	movff	___almod@dividend,?___almod
 13698  00316C  C032  F032         	movff	___almod@dividend+1,?___almod+1
 13699  003170  C033  F033         	movff	___almod@dividend+2,?___almod+2
 13700  003174  C034  F034         	movff	___almod@dividend+3,?___almod+3
 13701  003178  0012               	return	
 13702  00317A                     __end_of___almod:
 13703                           	opt stack 0
 13704                           tblptru	equ	0xFF8
 13705                           tblptrh	equ	0xFF7
 13706                           tblptrl	equ	0xFF6
 13707                           tablat	equ	0xFF5
 13708                           prodh	equ	0xFF4
 13709                           prodl	equ	0xFF3
 13710                           intcon	equ	0xFF2
 13711                           intcon3	equ	0xFF0
 13712                           postinc0	equ	0xFEE
 13713                           wreg	equ	0xFE8
 13714                           postdec1	equ	0xFE5
 13715                           fsr1l	equ	0xFE1
 13716                           indf2	equ	0xFDF
 13717                           postinc2	equ	0xFDE
 13718                           postdec2	equ	0xFDD
 13719                           fsr2h	equ	0xFDA
 13720                           fsr2l	equ	0xFD9
 13721                           status	equ	0xFD8
 13722                           
 13723 ;; *************** function ___aldiv *****************
 13724 ;; Defined at:
 13725 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 13726 ;; Parameters:    Size  Location     Type
 13727 ;;  dividend        4   34[COMRAM] long 
 13728 ;;  divisor         4   38[COMRAM] long 
 13729 ;; Auto vars:     Size  Location     Type
 13730 ;;  quotient        4   44[COMRAM] long 
 13731 ;;  sign            1   43[COMRAM] unsigned char 
 13732 ;;  counter         1   42[COMRAM] unsigned char 
 13733 ;; Return value:  Size  Location     Type
 13734 ;;                  4   34[COMRAM] long 
 13735 ;; Registers used:
 13736 ;;		wreg, status,2, status,0
 13737 ;; Tracked objects:
 13738 ;;		On entry : 0/0
 13739 ;;		On exit  : 0/0
 13740 ;;		Unchanged: 0/0
 13741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13742 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;Total ram usage:       14 bytes
 13747 ;; Hardware stack levels used:    1
 13748 ;; Hardware stack levels required when called:    3
 13749 ;; This function calls:
 13750 ;;		Nothing
 13751 ;; This function is called by:
 13752 ;;		_main
 13753 ;; This function uses a non-reentrant model
 13754 ;;
 13755                           
 13756                           	psect	text60
 13757  002B9A                     __ptext60:
 13758                           	opt stack 0
 13759  002B9A                     ___aldiv:
 13760                           	opt stack 27
 13761                           
 13762                           ;incstack = 0
 13763  002B9A  0E00               	movlw	0
 13764  002B9C  6E2C               	movwf	___aldiv@sign,c
 13765  002B9E  AE2A               	btfss	___aldiv@divisor+3,7,c
 13766  002BA0  D00A               	goto	l5450
 13767  002BA2  1E2A               	comf	___aldiv@divisor+3,f,c
 13768  002BA4  1E29               	comf	___aldiv@divisor+2,f,c
 13769  002BA6  1E28               	comf	___aldiv@divisor+1,f,c
 13770  002BA8  6C27               	negf	___aldiv@divisor,c
 13771  002BAA  0E00               	movlw	0
 13772  002BAC  2228               	addwfc	___aldiv@divisor+1,f,c
 13773  002BAE  2229               	addwfc	___aldiv@divisor+2,f,c
 13774  002BB0  222A               	addwfc	___aldiv@divisor+3,f,c
 13775  002BB2  0E01               	movlw	1
 13776  002BB4  6E2C               	movwf	___aldiv@sign,c
 13777  002BB6                     l5450:
 13778  002BB6  AE26               	btfss	___aldiv@dividend+3,7,c
 13779  002BB8  D00A               	goto	l5456
 13780  002BBA  1E26               	comf	___aldiv@dividend+3,f,c
 13781  002BBC  1E25               	comf	___aldiv@dividend+2,f,c
 13782  002BBE  1E24               	comf	___aldiv@dividend+1,f,c
 13783  002BC0  6C23               	negf	___aldiv@dividend,c
 13784  002BC2  0E00               	movlw	0
 13785  002BC4  2224               	addwfc	___aldiv@dividend+1,f,c
 13786  002BC6  2225               	addwfc	___aldiv@dividend+2,f,c
 13787  002BC8  2226               	addwfc	___aldiv@dividend+3,f,c
 13788  002BCA  0E01               	movlw	1
 13789  002BCC  1A2C               	xorwf	___aldiv@sign,f,c
 13790  002BCE                     l5456:
 13791  002BCE  0E00               	movlw	0
 13792  002BD0  6E2D               	movwf	___aldiv@quotient,c
 13793  002BD2  0E00               	movlw	0
 13794  002BD4  6E2E               	movwf	___aldiv@quotient+1,c
 13795  002BD6  0E00               	movlw	0
 13796  002BD8  6E2F               	movwf	___aldiv@quotient+2,c
 13797  002BDA  0E00               	movlw	0
 13798  002BDC  6E30               	movwf	___aldiv@quotient+3,c
 13799  002BDE  5027               	movf	___aldiv@divisor,w,c
 13800  002BE0  1028               	iorwf	___aldiv@divisor+1,w,c
 13801  002BE2  1029               	iorwf	___aldiv@divisor+2,w,c
 13802  002BE4  102A               	iorwf	___aldiv@divisor+3,w,c
 13803  002BE6  B4D8               	btfsc	status,2,c
 13804  002BE8  D02A               	goto	l5478
 13805  002BEA  0E01               	movlw	1
 13806  002BEC  6E2B               	movwf	___aldiv@counter,c
 13807  002BEE  D006               	goto	l5464
 13808  002BF0                     l5462:
 13809  002BF0  90D8               	bcf	status,0,c
 13810  002BF2  3627               	rlcf	___aldiv@divisor,f,c
 13811  002BF4  3628               	rlcf	___aldiv@divisor+1,f,c
 13812  002BF6  3629               	rlcf	___aldiv@divisor+2,f,c
 13813  002BF8  362A               	rlcf	___aldiv@divisor+3,f,c
 13814  002BFA  2A2B               	incf	___aldiv@counter,f,c
 13815  002BFC                     l5464:
 13816  002BFC  AE2A               	btfss	___aldiv@divisor+3,7,c
 13817  002BFE  D7F8               	goto	l5462
 13818  002C00                     l5466:
 13819  002C00  90D8               	bcf	status,0,c
 13820  002C02  362D               	rlcf	___aldiv@quotient,f,c
 13821  002C04  362E               	rlcf	___aldiv@quotient+1,f,c
 13822  002C06  362F               	rlcf	___aldiv@quotient+2,f,c
 13823  002C08  3630               	rlcf	___aldiv@quotient+3,f,c
 13824  002C0A  5027               	movf	___aldiv@divisor,w,c
 13825  002C0C  5C23               	subwf	___aldiv@dividend,w,c
 13826  002C0E  5028               	movf	___aldiv@divisor+1,w,c
 13827  002C10  5824               	subwfb	___aldiv@dividend+1,w,c
 13828  002C12  5029               	movf	___aldiv@divisor+2,w,c
 13829  002C14  5825               	subwfb	___aldiv@dividend+2,w,c
 13830  002C16  502A               	movf	___aldiv@divisor+3,w,c
 13831  002C18  5826               	subwfb	___aldiv@dividend+3,w,c
 13832  002C1A  A0D8               	btfss	status,0,c
 13833  002C1C  D009               	goto	l5474
 13834  002C1E  5027               	movf	___aldiv@divisor,w,c
 13835  002C20  5E23               	subwf	___aldiv@dividend,f,c
 13836  002C22  5028               	movf	___aldiv@divisor+1,w,c
 13837  002C24  5A24               	subwfb	___aldiv@dividend+1,f,c
 13838  002C26  5029               	movf	___aldiv@divisor+2,w,c
 13839  002C28  5A25               	subwfb	___aldiv@dividend+2,f,c
 13840  002C2A  502A               	movf	___aldiv@divisor+3,w,c
 13841  002C2C  5A26               	subwfb	___aldiv@dividend+3,f,c
 13842  002C2E  802D               	bsf	___aldiv@quotient,0,c
 13843  002C30                     l5474:
 13844  002C30  90D8               	bcf	status,0,c
 13845  002C32  322A               	rrcf	___aldiv@divisor+3,f,c
 13846  002C34  3229               	rrcf	___aldiv@divisor+2,f,c
 13847  002C36  3228               	rrcf	___aldiv@divisor+1,f,c
 13848  002C38  3227               	rrcf	___aldiv@divisor,f,c
 13849  002C3A  2E2B               	decfsz	___aldiv@counter,f,c
 13850  002C3C  D7E1               	goto	l5466
 13851  002C3E                     l5478:
 13852  002C3E  502C               	movf	___aldiv@sign,w,c
 13853  002C40  B4D8               	btfsc	status,2,c
 13854  002C42  D008               	goto	l5482
 13855  002C44  1E30               	comf	___aldiv@quotient+3,f,c
 13856  002C46  1E2F               	comf	___aldiv@quotient+2,f,c
 13857  002C48  1E2E               	comf	___aldiv@quotient+1,f,c
 13858  002C4A  6C2D               	negf	___aldiv@quotient,c
 13859  002C4C  0E00               	movlw	0
 13860  002C4E  222E               	addwfc	___aldiv@quotient+1,f,c
 13861  002C50  222F               	addwfc	___aldiv@quotient+2,f,c
 13862  002C52  2230               	addwfc	___aldiv@quotient+3,f,c
 13863  002C54                     l5482:
 13864  002C54  C02D  F023         	movff	___aldiv@quotient,?___aldiv
 13865  002C58  C02E  F024         	movff	___aldiv@quotient+1,?___aldiv+1
 13866  002C5C  C02F  F025         	movff	___aldiv@quotient+2,?___aldiv+2
 13867  002C60  C030  F026         	movff	___aldiv@quotient+3,?___aldiv+3
 13868  002C64  0012               	return	
 13869  002C66                     __end_of___aldiv:
 13870                           	opt stack 0
 13871                           tblptru	equ	0xFF8
 13872                           tblptrh	equ	0xFF7
 13873                           tblptrl	equ	0xFF6
 13874                           tablat	equ	0xFF5
 13875                           prodh	equ	0xFF4
 13876                           prodl	equ	0xFF3
 13877                           intcon	equ	0xFF2
 13878                           intcon3	equ	0xFF0
 13879                           postinc0	equ	0xFEE
 13880                           wreg	equ	0xFE8
 13881                           postdec1	equ	0xFE5
 13882                           fsr1l	equ	0xFE1
 13883                           indf2	equ	0xFDF
 13884                           postinc2	equ	0xFDE
 13885                           postdec2	equ	0xFDD
 13886                           fsr2h	equ	0xFDA
 13887                           fsr2l	equ	0xFD9
 13888                           status	equ	0xFD8
 13889                           
 13890 ;; *************** function _service *****************
 13891 ;; Defined at:
 13892 ;;		line 333 in file "main.c"
 13893 ;; Parameters:    Size  Location     Type
 13894 ;;		None
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;  key             1   33[COMRAM] unsigned char 
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  1    wreg      void 
 13899 ;; Registers used:
 13900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13901 ;; Tracked objects:
 13902 ;;		On entry : 0/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13908 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13909 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13910 ;;Total ram usage:       15 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; Hardware stack levels required when called:    2
 13913 ;; This function calls:
 13914 ;;		_keyPressedInterruptService
 13915 ;;		_servoInterruptService
 13916 ;;		i2_startTimer
 13917 ;; This function is called by:
 13918 ;;		Interrupt level 2
 13919 ;; This function uses a non-reentrant model
 13920 ;;
 13921                           
 13922                           	psect	intcode
 13923  000008                     __pintcode:
 13924                           	opt stack 0
 13925  000008                     _service:
 13926                           	opt stack 21
 13927                           
 13928                           ;incstack = 0
 13929  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13930  00000A  ED7D  F014         	call	int_func,f	;refresh shadow registers
 13931                           tblptru	equ	0xFF8
 13932                           tblptrh	equ	0xFF7
 13933                           tblptrl	equ	0xFF6
 13934                           tablat	equ	0xFF5
 13935                           prodh	equ	0xFF4
 13936                           prodl	equ	0xFF3
 13937                           intcon	equ	0xFF2
 13938                           intcon3	equ	0xFF0
 13939                           postinc0	equ	0xFEE
 13940                           wreg	equ	0xFE8
 13941                           postdec1	equ	0xFE5
 13942                           fsr1l	equ	0xFE1
 13943                           indf2	equ	0xFDF
 13944                           postinc2	equ	0xFDE
 13945                           postdec2	equ	0xFDD
 13946                           fsr2h	equ	0xFDA
 13947                           fsr2l	equ	0xFD9
 13948                           status	equ	0xFD8
 13949                           
 13950                           	psect	intcode_body
 13951  0028FA                     __pintcode_body:
 13952                           	opt stack 21
 13953  0028FA                     int_func:
 13954                           	opt stack 21
 13955  0028FA  0006               	pop		; remove dummy address from shadow register refresh
 13956  0028FC  CFFA F014          	movff	pclath,??_service
 13957  002900  CFFB F015          	movff	pclatu,??_service+1
 13958  002904  CFE9 F016          	movff	fsr0l,??_service+2
 13959  002908  CFEA F017          	movff	fsr0h,??_service+3
 13960  00290C  CFE1 F018          	movff	fsr1l,??_service+4
 13961  002910  CFE2 F019          	movff	fsr1h,??_service+5
 13962  002914  CFD9 F01A          	movff	fsr2l,??_service+6
 13963  002918  CFDA F01B          	movff	fsr2h,??_service+7
 13964  00291C  CFF3 F01C          	movff	prodl,??_service+8
 13965  002920  CFF4 F01D          	movff	prodh,??_service+9
 13966  002924  CFF6 F01E          	movff	tblptrl,??_service+10
 13967  002928  CFF7 F01F          	movff	tblptrh,??_service+11
 13968  00292C  CFF8 F020          	movff	tblptru,??_service+12
 13969  002930  CFF5 F021          	movff	tablat,??_service+13
 13970                           
 13971                           ;main.c: 335: if( servoInterruptService() )return;
 13972  002934  EC82  F013         	call	_servoInterruptService	;wreg free
 13973  002938  0900               	iorlw	0
 13974  00293A  A4D8               	btfss	status,2,c
 13975  00293C  D035               	goto	i2l197
 13976                           
 13977                           ;main.c: 340: if(TMR1IF){
 13978  00293E  A09E               	btfss	3998,0,c	;volatile
 13979  002940  D017               	goto	i2l198
 13980                           
 13981                           ;main.c: 341: startTimer(1,0x8683);
 13982  002942  0E00               	movlw	0
 13983  002944  6E08               	movwf	i2startTimer@timer+1,c
 13984  002946  0E01               	movlw	1
 13985  002948  6E07               	movwf	i2startTimer@timer,c
 13986  00294A  0E83               	movlw	131
 13987  00294C  6E09               	movwf	i2startTimer@val,c
 13988  00294E  0E86               	movlw	134
 13989  002950  6E0A               	movwf	i2startTimer@val+1,c
 13990  002952  0E00               	movlw	0
 13991  002954  6E0B               	movwf	i2startTimer@val+2,c
 13992  002956  0E00               	movlw	0
 13993  002958  6E0C               	movwf	i2startTimer@val+3,c
 13994  00295A  EC06  F01D         	call	i2_startTimer	;wreg free
 13995                           
 13996                           ;main.c: 342: time+=1;
 13997  00295E  0E01               	movlw	1
 13998  002960  0101               	movlb	1	; () banked
 13999  002962  2748               	addwf	_time& (0+255),f,b
 14000  002964  0E00               	movlw	0
 14001  002966  2349               	addwfc	(_time+1)& (0+255),f,b
 14002  002968  234A               	addwfc	(_time+2)& (0+255),f,b
 14003  00296A  234B               	addwfc	(_time+3)& (0+255),f,b
 14004                           
 14005                           ; BSR set to: 1
 14006                           ;main.c: 343: TMR1IF = 0;
 14007  00296C  909E               	bcf	3998,0,c	;volatile
 14008                           
 14009                           ; BSR set to: 1
 14010                           ;main.c: 344: return;
 14011  00296E  D01C               	goto	i2l197
 14012  002970                     i2l198:
 14013                           
 14014                           ;main.c: 345: }
 14015                           ;main.c: 348: if(INT0IF){ INT0IF = 0;
 14016  002970  A2F2               	btfss	intcon,1,c	;volatile
 14017  002972  D007               	goto	i2l199
 14018  002974  92F2               	bcf	intcon,1,c	;volatile
 14019                           
 14020                           ;main.c: 349: batteryDetected = 1;
 14021  002976  0E00               	movlw	0
 14022  002978  0101               	movlb	1	; () banked
 14023  00297A  6F4D               	movwf	(_batteryDetected+1)& (0+255),b
 14024  00297C  0E01               	movlw	1
 14025  00297E  6F4C               	movwf	_batteryDetected& (0+255),b
 14026                           
 14027                           ; BSR set to: 1
 14028                           ;main.c: 350: return;
 14029  002980  D013               	goto	i2l197
 14030  002982                     i2l199:
 14031                           
 14032                           ;main.c: 351: }
 14033                           ;main.c: 354: if(INT1IF && INT1IE){INT1IF = 0;
 14034  002982  B0F0               	btfsc	intcon3,0,c	;volatile
 14035  002984  A6F0               	btfss	intcon3,3,c	;volatile
 14036  002986  D010               	goto	i2l197
 14037  002988  90F0               	bcf	intcon3,0,c	;volatile
 14038                           
 14039                           ;main.c: 355: keyPressedInterruptService();
 14040  00298A  EC39  F01E         	call	_keyPressedInterruptService	;wreg free
 14041                           
 14042                           ;main.c: 356: char key = (PORTB & 0xF0) >> 4;
 14043  00298E  3881               	swapf	3969,w,c	;volatile
 14044  002990  0B0F               	andlw	15
 14045  002992  0B0F               	andlw	15
 14046  002994  6E22               	movwf	service@key,c
 14047                           
 14048                           ;main.c: 357: if(key == 12)terminate = 1;
 14049  002996  0E0C               	movlw	12
 14050  002998  1822               	xorwf	service@key,w,c
 14051  00299A  A4D8               	btfss	status,2,c
 14052  00299C  D005               	goto	i2l197
 14053  00299E  0E00               	movlw	0
 14054  0029A0  0101               	movlb	1	; () banked
 14055  0029A2  6F57               	movwf	(_terminate+1)& (0+255),b
 14056  0029A4  0E01               	movlw	1
 14057  0029A6  6F56               	movwf	_terminate& (0+255),b
 14058  0029A8                     i2l197:
 14059  0029A8  C021  FFF5         	movff	??_service+13,tablat
 14060  0029AC  C020  FFF8         	movff	??_service+12,tblptru
 14061  0029B0  C01F  FFF7         	movff	??_service+11,tblptrh
 14062  0029B4  C01E  FFF6         	movff	??_service+10,tblptrl
 14063  0029B8  C01D  FFF4         	movff	??_service+9,prodh
 14064  0029BC  C01C  FFF3         	movff	??_service+8,prodl
 14065  0029C0  C01B  FFDA         	movff	??_service+7,fsr2h
 14066  0029C4  C01A  FFD9         	movff	??_service+6,fsr2l
 14067  0029C8  C019  FFE2         	movff	??_service+5,fsr1h
 14068  0029CC  C018  FFE1         	movff	??_service+4,fsr1l
 14069  0029D0  C017  FFEA         	movff	??_service+3,fsr0h
 14070  0029D4  C016  FFE9         	movff	??_service+2,fsr0l
 14071  0029D8  C015  FFFB         	movff	??_service+1,pclatu
 14072  0029DC  C014  FFFA         	movff	??_service,pclath
 14073  0029E0  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14074  0029E2  0011               	retfie		f
 14075  0029E4                     __end_of_service:
 14076                           	opt stack 0
 14077                           pclatu	equ	0xFFB
 14078                           pclath	equ	0xFFA
 14079                           tblptru	equ	0xFF8
 14080                           tblptrh	equ	0xFF7
 14081                           tblptrl	equ	0xFF6
 14082                           tablat	equ	0xFF5
 14083                           prodh	equ	0xFF4
 14084                           prodl	equ	0xFF3
 14085                           intcon	equ	0xFF2
 14086                           intcon3	equ	0xFF0
 14087                           postinc0	equ	0xFEE
 14088                           fsr0h	equ	0xFEA
 14089                           fsr0l	equ	0xFE9
 14090                           wreg	equ	0xFE8
 14091                           postdec1	equ	0xFE5
 14092                           fsr1h	equ	0xFE2
 14093                           fsr1l	equ	0xFE1
 14094                           indf2	equ	0xFDF
 14095                           postinc2	equ	0xFDE
 14096                           postdec2	equ	0xFDD
 14097                           fsr2h	equ	0xFDA
 14098                           fsr2l	equ	0xFD9
 14099                           status	equ	0xFD8
 14100                           
 14101 ;; *************** function _servoInterruptService *****************
 14102 ;; Defined at:
 14103 ;;		line 55 in file "servo.c"
 14104 ;; Parameters:    Size  Location     Type
 14105 ;;		None
 14106 ;; Auto vars:     Size  Location     Type
 14107 ;;		None
 14108 ;; Return value:  Size  Location     Type
 14109 ;;                  1    wreg      unsigned char 
 14110 ;; Registers used:
 14111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14112 ;; Tracked objects:
 14113 ;;		On entry : 0/0
 14114 ;;		On exit  : 0/0
 14115 ;;		Unchanged: 0/0
 14116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14119 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14121 ;;Total ram usage:        4 bytes
 14122 ;; Hardware stack levels used:    1
 14123 ;; Hardware stack levels required when called:    1
 14124 ;; This function calls:
 14125 ;;		i2___awmod
 14126 ;;		i2_digitalWrite
 14127 ;;		i2_startTimer
 14128 ;; This function is called by:
 14129 ;;		_service
 14130 ;; This function uses a non-reentrant model
 14131 ;;
 14132                           
 14133                           	psect	text62
 14134  002704                     __ptext62:
 14135                           	opt stack 0
 14136  002704                     _servoInterruptService:
 14137                           	opt stack 21
 14138                           
 14139                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 14140                           
 14141                           ;incstack = 0
 14142  002704  A4F2               	btfss	intcon,2,c	;volatile
 14143  002706  D082               	goto	i2l5434
 14144  002708  94F2               	bcf	intcon,2,c	;volatile
 14145                           
 14146                           ;servo.c: 58: digitalWrite(servos[curr],0);
 14147  00270A  90D8               	bcf	status,0,c
 14148  00270C  3458               	rlcf	_curr,w,c
 14149  00270E  6ED9               	movwf	fsr2l,c
 14150  002710  3459               	rlcf	_curr+1,w,c
 14151  002712  6EDA               	movwf	fsr2h,c
 14152  002714  0E40               	movlw	low _servos
 14153  002716  26D9               	addwf	fsr2l,f,c
 14154  002718  0E01               	movlw	high _servos
 14155  00271A  22DA               	addwfc	fsr2h,f,c
 14156  00271C  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14157  002720  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14158  002724  0E00               	movlw	0
 14159  002726  6E0A               	movwf	i2digitalWrite@val+1,c
 14160  002728  0E00               	movlw	0
 14161  00272A  6E09               	movwf	i2digitalWrite@val,c
 14162  00272C  ECFB  F016         	call	i2_digitalWrite	;wreg free
 14163                           
 14164                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 14165  002730  0E01               	movlw	1
 14166  002732  2458               	addwf	_curr,w,c
 14167  002734  6E01               	movwf	i2___awmod@dividend,c
 14168  002736  0E00               	movlw	0
 14169  002738  2059               	addwfc	_curr+1,w,c
 14170  00273A  6E02               	movwf	i2___awmod@dividend+1,c
 14171  00273C  0E01               	movlw	1
 14172  00273E  0100               	movlb	0	; () banked
 14173  002740  25FA               	addwf	_n& (0+255),w,b
 14174  002742  6E03               	movwf	i2___awmod@divisor,c
 14175  002744  0E00               	movlw	0
 14176  002746  0100               	movlb	0	; () banked
 14177  002748  21FB               	addwfc	(_n+1)& (0+255),w,b
 14178  00274A  6E04               	movwf	i2___awmod@divisor+1,c
 14179  00274C  EC10  F01B         	call	i2___awmod	;wreg free
 14180  002750  90D8               	bcf	status,0,c
 14181  002752  3601               	rlcf	?i2___awmod,f,c
 14182  002754  3602               	rlcf	?i2___awmod+1,f,c
 14183  002756  0E40               	movlw	low _servos
 14184  002758  2401               	addwf	?i2___awmod,w,c
 14185  00275A  6ED9               	movwf	fsr2l,c
 14186  00275C  0E01               	movlw	high _servos
 14187  00275E  2002               	addwfc	?i2___awmod+1,w,c
 14188  002760  6EDA               	movwf	fsr2h,c
 14189  002762  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14190  002766  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14191  00276A  0E00               	movlw	0
 14192  00276C  6E0A               	movwf	i2digitalWrite@val+1,c
 14193  00276E  0E01               	movlw	1
 14194  002770  6E09               	movwf	i2digitalWrite@val,c
 14195  002772  ECFB  F016         	call	i2_digitalWrite	;wreg free
 14196                           
 14197                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 14198  002776  0E00               	movlw	0
 14199  002778  6E08               	movwf	i2startTimer@timer+1,c
 14200  00277A  0E00               	movlw	0
 14201  00277C  6E07               	movwf	i2startTimer@timer,c
 14202  00277E  0EFF               	movlw	255
 14203  002780  6E10               	movwf	??_servoInterruptService& (0+255),c
 14204  002782  0EFF               	movlw	255
 14205  002784  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 14206  002786  0E01               	movlw	1
 14207  002788  2458               	addwf	_curr,w,c
 14208  00278A  6E01               	movwf	i2___awmod@dividend,c
 14209  00278C  0E00               	movlw	0
 14210  00278E  2059               	addwfc	_curr+1,w,c
 14211  002790  6E02               	movwf	i2___awmod@dividend+1,c
 14212  002792  0E01               	movlw	1
 14213  002794  0100               	movlb	0	; () banked
 14214  002796  25FA               	addwf	_n& (0+255),w,b
 14215  002798  6E03               	movwf	i2___awmod@divisor,c
 14216  00279A  0E00               	movlw	0
 14217  00279C  0100               	movlb	0	; () banked
 14218  00279E  21FB               	addwfc	(_n+1)& (0+255),w,b
 14219  0027A0  6E04               	movwf	i2___awmod@divisor+1,c
 14220  0027A2  EC10  F01B         	call	i2___awmod	;wreg free
 14221  0027A6  90D8               	bcf	status,0,c
 14222  0027A8  3601               	rlcf	?i2___awmod,f,c
 14223  0027AA  3602               	rlcf	?i2___awmod+1,f,c
 14224  0027AC  0E38               	movlw	low _pulse
 14225  0027AE  2401               	addwf	?i2___awmod,w,c
 14226  0027B0  6ED9               	movwf	fsr2l,c
 14227  0027B2  0E01               	movlw	high _pulse
 14228  0027B4  2002               	addwfc	?i2___awmod+1,w,c
 14229  0027B6  6EDA               	movwf	fsr2h,c
 14230  0027B8  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 14231  0027BC  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 14232  0027C0  1E12               	comf	??_servoInterruptService+2,f,c
 14233  0027C2  1E13               	comf	??_servoInterruptService+3,f,c
 14234  0027C4  4A12               	infsnz	??_servoInterruptService+2,f,c
 14235  0027C6  2A13               	incf	??_servoInterruptService+3,f,c
 14236  0027C8  5010               	movf	??_servoInterruptService,w,c
 14237  0027CA  2612               	addwf	??_servoInterruptService+2,f,c
 14238  0027CC  5011               	movf	??_servoInterruptService+1,w,c
 14239  0027CE  2213               	addwfc	??_servoInterruptService+3,f,c
 14240  0027D0  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 14241  0027D4  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 14242  0027D8  6A0B               	clrf	i2startTimer@val+2,c
 14243  0027DA  6A0C               	clrf	i2startTimer@val+3,c
 14244  0027DC  EC06  F01D         	call	i2_startTimer	;wreg free
 14245                           
 14246                           ;servo.c: 62: curr = (curr+1)%(n+1);
 14247  0027E0  0E01               	movlw	1
 14248  0027E2  2458               	addwf	_curr,w,c
 14249  0027E4  6E01               	movwf	i2___awmod@dividend,c
 14250  0027E6  0E00               	movlw	0
 14251  0027E8  2059               	addwfc	_curr+1,w,c
 14252  0027EA  6E02               	movwf	i2___awmod@dividend+1,c
 14253  0027EC  0E01               	movlw	1
 14254  0027EE  0100               	movlb	0	; () banked
 14255  0027F0  25FA               	addwf	_n& (0+255),w,b
 14256  0027F2  6E03               	movwf	i2___awmod@divisor,c
 14257  0027F4  0E00               	movlw	0
 14258  0027F6  0100               	movlb	0	; () banked
 14259  0027F8  21FB               	addwfc	(_n+1)& (0+255),w,b
 14260  0027FA  6E04               	movwf	i2___awmod@divisor+1,c
 14261  0027FC  EC10  F01B         	call	i2___awmod	;wreg free
 14262  002800  C001  F058         	movff	?i2___awmod,_curr
 14263  002804  C002  F059         	movff	?i2___awmod+1,_curr+1
 14264                           
 14265                           ;servo.c: 63: return 1;
 14266  002808  0E01               	movlw	1
 14267  00280A  0012               	return	
 14268  00280C                     i2l5434:
 14269                           
 14270                           ;servo.c: 64: }
 14271                           ;servo.c: 65: return 0;
 14272  00280C  0E00               	movlw	0
 14273  00280E  0012               	return	
 14274  002810                     __end_of_servoInterruptService:
 14275                           	opt stack 0
 14276                           pclatu	equ	0xFFB
 14277                           pclath	equ	0xFFA
 14278                           tblptru	equ	0xFF8
 14279                           tblptrh	equ	0xFF7
 14280                           tblptrl	equ	0xFF6
 14281                           tablat	equ	0xFF5
 14282                           prodh	equ	0xFF4
 14283                           prodl	equ	0xFF3
 14284                           intcon	equ	0xFF2
 14285                           intcon3	equ	0xFF0
 14286                           postinc0	equ	0xFEE
 14287                           fsr0h	equ	0xFEA
 14288                           fsr0l	equ	0xFE9
 14289                           wreg	equ	0xFE8
 14290                           postdec1	equ	0xFE5
 14291                           fsr1h	equ	0xFE2
 14292                           fsr1l	equ	0xFE1
 14293                           indf2	equ	0xFDF
 14294                           postinc2	equ	0xFDE
 14295                           postdec2	equ	0xFDD
 14296                           fsr2h	equ	0xFDA
 14297                           fsr2l	equ	0xFD9
 14298                           status	equ	0xFD8
 14299                           
 14300 ;; *************** function i2_startTimer *****************
 14301 ;; Defined at:
 14302 ;;		line 76 in file "timer.c"
 14303 ;; Parameters:    Size  Location     Type
 14304 ;;  timer           2    6[COMRAM] int 
 14305 ;;  val             4    8[COMRAM] long 
 14306 ;; Auto vars:     Size  Location     Type
 14307 ;;		None
 14308 ;; Return value:  Size  Location     Type
 14309 ;;                  1    wreg      void 
 14310 ;; Registers used:
 14311 ;;		wreg, status,2, status,0
 14312 ;; Tracked objects:
 14313 ;;		On entry : 0/0
 14314 ;;		On exit  : 0/0
 14315 ;;		Unchanged: 0/0
 14316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14317 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14319 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14320 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14321 ;;Total ram usage:        8 bytes
 14322 ;; Hardware stack levels used:    1
 14323 ;; This function calls:
 14324 ;;		Nothing
 14325 ;; This function is called by:
 14326 ;;		_service
 14327 ;;		_servoInterruptService
 14328 ;; This function uses a non-reentrant model
 14329 ;;
 14330                           
 14331                           	psect	text63
 14332  003A0C                     __ptext63:
 14333                           	opt stack 0
 14334  003A0C                     i2_startTimer:
 14335                           	opt stack 22
 14336                           
 14337                           ;timer.c: 77: switch(timer){
 14338                           
 14339                           ;incstack = 0
 14340  003A0C  D012               	goto	i2l5178
 14341  003A0E                     i2l454:
 14342                           
 14343                           ;timer.c: 79: TMR0H = val>>8;
 14344  003A0E  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 14345                           
 14346                           ;timer.c: 80: TMR0L = val;
 14347  003A12  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 14348                           
 14349                           ;timer.c: 81: T0CON |= 1<<7;
 14350  003A16  8ED5               	bsf	4053,7,c	;volatile
 14351                           
 14352                           ;timer.c: 82: break;
 14353  003A18  0012               	return	
 14354  003A1A                     i2l456:
 14355                           
 14356                           ;timer.c: 84: TMR1H = val>>8;
 14357  003A1A  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 14358                           
 14359                           ;timer.c: 85: TMR1L = val;
 14360  003A1E  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 14361                           
 14362                           ;timer.c: 86: T1CON |= 1<<0;
 14363  003A22  80CD               	bsf	4045,0,c	;volatile
 14364                           
 14365                           ;timer.c: 87: break;
 14366  003A24  0012               	return	
 14367  003A26                     i2l457:
 14368                           
 14369                           ;timer.c: 89: TMR3H = val>>8;
 14370  003A26  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 14371                           
 14372                           ;timer.c: 90: TMR3L = val;
 14373  003A2A  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 14374                           
 14375                           ;timer.c: 91: T3CON |= 1<<0;
 14376  003A2E  80B1               	bsf	4017,0,c	;volatile
 14377                           
 14378                           ;timer.c: 92: }
 14379  003A30  0012               	return	
 14380  003A32                     i2l5178:
 14381  003A32  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 14382  003A36  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 14383                           
 14384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14385                           ; Switch size 1, requested type "space"
 14386                           ; Number of cases is 1, Range of values is 0 to 0
 14387                           ; switch strategies available:
 14388                           ; Name         Instructions Cycles
 14389                           ; simple_byte            4     3 (average)
 14390                           ;	Chosen strategy is simple_byte
 14391  003A3A  500E               	movf	??i2_startTimer+1,w,c
 14392  003A3C  0A00               	xorlw	0	; case 0
 14393  003A3E  A4D8               	btfss	status,2,c
 14394  003A40  0012               	return	
 14395                           
 14396                           ; Switch size 1, requested type "space"
 14397                           ; Number of cases is 3, Range of values is 0 to 3
 14398                           ; switch strategies available:
 14399                           ; Name         Instructions Cycles
 14400                           ; simple_byte           10     6 (average)
 14401                           ;	Chosen strategy is simple_byte
 14402  003A42  500D               	movf	??i2_startTimer,w,c
 14403  003A44  0A00               	xorlw	0	; case 0
 14404  003A46  B4D8               	btfsc	status,2,c
 14405  003A48  D7E2               	goto	i2l454
 14406  003A4A  0A01               	xorlw	1	; case 1
 14407  003A4C  B4D8               	btfsc	status,2,c
 14408  003A4E  D7E5               	goto	i2l456
 14409  003A50  0A02               	xorlw	2	; case 3
 14410  003A52  A4D8               	btfss	status,2,c
 14411  003A54  0012               	return	
 14412  003A56  D7E7               	goto	i2l457
 14413  003A58                     __end_ofi2_startTimer:
 14414                           	opt stack 0
 14415                           pclatu	equ	0xFFB
 14416                           pclath	equ	0xFFA
 14417                           tblptru	equ	0xFF8
 14418                           tblptrh	equ	0xFF7
 14419                           tblptrl	equ	0xFF6
 14420                           tablat	equ	0xFF5
 14421                           prodh	equ	0xFF4
 14422                           prodl	equ	0xFF3
 14423                           intcon	equ	0xFF2
 14424                           intcon3	equ	0xFF0
 14425                           postinc0	equ	0xFEE
 14426                           fsr0h	equ	0xFEA
 14427                           fsr0l	equ	0xFE9
 14428                           wreg	equ	0xFE8
 14429                           postdec1	equ	0xFE5
 14430                           fsr1h	equ	0xFE2
 14431                           fsr1l	equ	0xFE1
 14432                           indf2	equ	0xFDF
 14433                           postinc2	equ	0xFDE
 14434                           postdec2	equ	0xFDD
 14435                           fsr2h	equ	0xFDA
 14436                           fsr2l	equ	0xFD9
 14437                           status	equ	0xFD8
 14438                           
 14439 ;; *************** function i2_digitalWrite *****************
 14440 ;; Defined at:
 14441 ;;		line 53 in file "iopin.c"
 14442 ;; Parameters:    Size  Location     Type
 14443 ;;  pin             2    6[COMRAM] PTR int 
 14444 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 14445 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 14446 ;;  val             2    8[COMRAM] int 
 14447 ;; Auto vars:     Size  Location     Type
 14448 ;;  digitalWrite    2   13[COMRAM] int 
 14449 ;; Return value:  Size  Location     Type
 14450 ;;                  1    wreg      void 
 14451 ;; Registers used:
 14452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14453 ;; Tracked objects:
 14454 ;;		On entry : 0/0
 14455 ;;		On exit  : 0/0
 14456 ;;		Unchanged: 0/0
 14457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14460 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14461 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14462 ;;Total ram usage:        9 bytes
 14463 ;; Hardware stack levels used:    1
 14464 ;; This function calls:
 14465 ;;		Nothing
 14466 ;; This function is called by:
 14467 ;;		_servoInterruptService
 14468 ;; This function uses a non-reentrant model
 14469 ;;
 14470                           
 14471                           	psect	text64
 14472  002DF6                     __ptext64:
 14473                           	opt stack 0
 14474  002DF6                     i2_digitalWrite:
 14475                           	opt stack 21
 14476                           
 14477                           ;iopin.c: 54: if(pin){
 14478                           
 14479                           ;incstack = 0
 14480  002DF6  5007               	movf	i2digitalWrite@pin,w,c
 14481  002DF8  1008               	iorwf	i2digitalWrite@pin+1,w,c
 14482  002DFA  B4D8               	btfsc	status,2,c
 14483  002DFC  0012               	return	
 14484                           
 14485                           ;iopin.c: 55: int p = 1 << pin[1];
 14486  002DFE  EE20 F002          	lfsr	2,2
 14487  002E02  5007               	movf	i2digitalWrite@pin,w,c
 14488  002E04  26D9               	addwf	fsr2l,f,c
 14489  002E06  5008               	movf	i2digitalWrite@pin+1,w,c
 14490  002E08  22DA               	addwfc	fsr2h,f,c
 14491  002E0A  50DF               	movf	indf2,w,c
 14492  002E0C  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 14493  002E0E  0E01               	movlw	1
 14494  002E10  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 14495  002E12  0E00               	movlw	0
 14496  002E14  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 14497  002E16  2A0B               	incf	??i2_digitalWrite,f,c
 14498  002E18  D003               	goto	i2u494_44
 14499  002E1A                     i2u494_45:
 14500  002E1A  90D8               	bcf	status,0,c
 14501  002E1C  360C               	rlcf	??i2_digitalWrite+1,f,c
 14502  002E1E  360D               	rlcf	??i2_digitalWrite+2,f,c
 14503  002E20                     i2u494_44:
 14504  002E20  2E0B               	decfsz	??i2_digitalWrite,f,c
 14505  002E22  D7FB               	goto	i2u494_45
 14506  002E24  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 14507  002E28  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 14508                           
 14509                           ;iopin.c: 56: if(val == 0){
 14510  002E2C  5009               	movf	i2digitalWrite@val,w,c
 14511  002E2E  100A               	iorwf	i2digitalWrite@val+1,w,c
 14512  002E30  A4D8               	btfss	status,2,c
 14513  002E32  D02B               	goto	i2l5164
 14514                           
 14515                           ;iopin.c: 57: p ^= 0xff;
 14516  002E34  0EFF               	movlw	255
 14517  002E36  1A0E               	xorwf	i2digitalWrite@p,f,c
 14518                           
 14519                           ;iopin.c: 58: }
 14520                           ;iopin.c: 60: switch(pin[0]){
 14521  002E38  D028               	goto	i2l5164
 14522  002E3A                     i2l5140:
 14523  002E3A  0409               	decf	i2digitalWrite@val,w,c
 14524  002E3C  100A               	iorwf	i2digitalWrite@val+1,w,c
 14525  002E3E  A4D8               	btfss	status,2,c
 14526  002E40  D003               	goto	i2l5144
 14527  002E42  500E               	movf	i2digitalWrite@p,w,c
 14528  002E44  1289               	iorwf	3977,f,c	;volatile
 14529  002E46  0012               	return	
 14530  002E48                     i2l5144:
 14531                           
 14532                           ;iopin.c: 62: else LATA &= p;
 14533  002E48  500E               	movf	i2digitalWrite@p,w,c
 14534  002E4A  1689               	andwf	3977,f,c	;volatile
 14535                           
 14536                           ;iopin.c: 63: break;
 14537  002E4C  0012               	return	
 14538  002E4E                     i2l5146:
 14539  002E4E  0409               	decf	i2digitalWrite@val,w,c
 14540  002E50  100A               	iorwf	i2digitalWrite@val+1,w,c
 14541  002E52  A4D8               	btfss	status,2,c
 14542  002E54  D003               	goto	i2l5150
 14543  002E56  500E               	movf	i2digitalWrite@p,w,c
 14544  002E58  128A               	iorwf	3978,f,c	;volatile
 14545  002E5A  0012               	return	
 14546  002E5C                     i2l5150:
 14547                           
 14548                           ;iopin.c: 65: else LATB &= p;
 14549  002E5C  500E               	movf	i2digitalWrite@p,w,c
 14550  002E5E  168A               	andwf	3978,f,c	;volatile
 14551                           
 14552                           ;iopin.c: 66: break;
 14553  002E60  0012               	return	
 14554  002E62                     i2l5152:
 14555  002E62  0409               	decf	i2digitalWrite@val,w,c
 14556  002E64  100A               	iorwf	i2digitalWrite@val+1,w,c
 14557  002E66  A4D8               	btfss	status,2,c
 14558  002E68  D003               	goto	i2l5156
 14559  002E6A  500E               	movf	i2digitalWrite@p,w,c
 14560  002E6C  128B               	iorwf	3979,f,c	;volatile
 14561  002E6E  0012               	return	
 14562  002E70                     i2l5156:
 14563                           
 14564                           ;iopin.c: 68: else LATC &= p;
 14565  002E70  500E               	movf	i2digitalWrite@p,w,c
 14566  002E72  168B               	andwf	3979,f,c	;volatile
 14567                           
 14568                           ;iopin.c: 69: break;
 14569  002E74  0012               	return	
 14570  002E76                     i2l5158:
 14571  002E76  0409               	decf	i2digitalWrite@val,w,c
 14572  002E78  100A               	iorwf	i2digitalWrite@val+1,w,c
 14573  002E7A  A4D8               	btfss	status,2,c
 14574  002E7C  D003               	goto	i2l5162
 14575  002E7E  500E               	movf	i2digitalWrite@p,w,c
 14576  002E80  128C               	iorwf	3980,f,c	;volatile
 14577  002E82  0012               	return	
 14578  002E84                     i2l5162:
 14579                           
 14580                           ;iopin.c: 71: else LATD &= p;
 14581  002E84  500E               	movf	i2digitalWrite@p,w,c
 14582  002E86  168C               	andwf	3980,f,c	;volatile
 14583                           
 14584                           ;iopin.c: 72: }
 14585  002E88  0012               	return	
 14586  002E8A                     i2l5164:
 14587  002E8A  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 14588  002E8E  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 14589  002E92  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 14590  002E96  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 14591                           
 14592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14593                           ; Switch size 1, requested type "space"
 14594                           ; Number of cases is 1, Range of values is 0 to 0
 14595                           ; switch strategies available:
 14596                           ; Name         Instructions Cycles
 14597                           ; simple_byte            4     3 (average)
 14598                           ;	Chosen strategy is simple_byte
 14599  002E9A  500C               	movf	??i2_digitalWrite+1,w,c
 14600  002E9C  0A00               	xorlw	0	; case 0
 14601  002E9E  A4D8               	btfss	status,2,c
 14602  002EA0  0012               	return	
 14603                           
 14604                           ; Switch size 1, requested type "space"
 14605                           ; Number of cases is 4, Range of values is 0 to 3
 14606                           ; switch strategies available:
 14607                           ; Name         Instructions Cycles
 14608                           ; simple_byte           13     7 (average)
 14609                           ;	Chosen strategy is simple_byte
 14610  002EA2  500B               	movf	??i2_digitalWrite,w,c
 14611  002EA4  0A00               	xorlw	0	; case 0
 14612  002EA6  B4D8               	btfsc	status,2,c
 14613  002EA8  D7C8               	goto	i2l5140
 14614  002EAA  0A01               	xorlw	1	; case 1
 14615  002EAC  B4D8               	btfsc	status,2,c
 14616  002EAE  D7CF               	goto	i2l5146
 14617  002EB0  0A03               	xorlw	3	; case 2
 14618  002EB2  B4D8               	btfsc	status,2,c
 14619  002EB4  D7D6               	goto	i2l5152
 14620  002EB6  0A01               	xorlw	1	; case 3
 14621  002EB8  A4D8               	btfss	status,2,c
 14622  002EBA  0012               	return	
 14623  002EBC  D7DC               	goto	i2l5158
 14624  002EBE                     __end_ofi2_digitalWrite:
 14625                           	opt stack 0
 14626                           pclatu	equ	0xFFB
 14627                           pclath	equ	0xFFA
 14628                           tblptru	equ	0xFF8
 14629                           tblptrh	equ	0xFF7
 14630                           tblptrl	equ	0xFF6
 14631                           tablat	equ	0xFF5
 14632                           prodh	equ	0xFF4
 14633                           prodl	equ	0xFF3
 14634                           intcon	equ	0xFF2
 14635                           intcon3	equ	0xFF0
 14636                           postinc0	equ	0xFEE
 14637                           fsr0h	equ	0xFEA
 14638                           fsr0l	equ	0xFE9
 14639                           wreg	equ	0xFE8
 14640                           postdec1	equ	0xFE5
 14641                           fsr1h	equ	0xFE2
 14642                           fsr1l	equ	0xFE1
 14643                           indf2	equ	0xFDF
 14644                           postinc2	equ	0xFDE
 14645                           postdec2	equ	0xFDD
 14646                           fsr2h	equ	0xFDA
 14647                           fsr2l	equ	0xFD9
 14648                           status	equ	0xFD8
 14649                           
 14650 ;; *************** function i2___awmod *****************
 14651 ;; Defined at:
 14652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 14653 ;; Parameters:    Size  Location     Type
 14654 ;;  dividend        2    0[COMRAM] int 
 14655 ;;  divisor         2    2[COMRAM] int 
 14656 ;; Auto vars:     Size  Location     Type
 14657 ;;  __awmod         1    5[COMRAM] unsigned char 
 14658 ;;  __awmod         1    4[COMRAM] unsigned char 
 14659 ;; Return value:  Size  Location     Type
 14660 ;;                  2    0[COMRAM] int 
 14661 ;; Registers used:
 14662 ;;		wreg, status,2, status,0
 14663 ;; Tracked objects:
 14664 ;;		On entry : 0/0
 14665 ;;		On exit  : 0/0
 14666 ;;		Unchanged: 0/0
 14667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14668 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14669 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14671 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14672 ;;Total ram usage:        6 bytes
 14673 ;; Hardware stack levels used:    1
 14674 ;; This function calls:
 14675 ;;		Nothing
 14676 ;; This function is called by:
 14677 ;;		_servoInterruptService
 14678 ;; This function uses a non-reentrant model
 14679 ;;
 14680                           
 14681                           	psect	text65
 14682  003620                     __ptext65:
 14683                           	opt stack 0
 14684  003620                     i2___awmod:
 14685                           	opt stack 21
 14686                           
 14687                           ;incstack = 0
 14688  003620  0E00               	movlw	0
 14689  003622  6E06               	movwf	i2___awmod@sign,c
 14690  003624  AE02               	btfss	i2___awmod@dividend+1,7,c
 14691  003626  D006               	goto	i2l5192
 14692  003628  6C01               	negf	i2___awmod@dividend,c
 14693  00362A  1E02               	comf	i2___awmod@dividend+1,f,c
 14694  00362C  B0D8               	btfsc	status,0,c
 14695  00362E  2A02               	incf	i2___awmod@dividend+1,f,c
 14696  003630  0E01               	movlw	1
 14697  003632  6E06               	movwf	i2___awmod@sign,c
 14698  003634                     i2l5192:
 14699  003634  AE04               	btfss	i2___awmod@divisor+1,7,c
 14700  003636  D004               	goto	i2l5196
 14701  003638  6C03               	negf	i2___awmod@divisor,c
 14702  00363A  1E04               	comf	i2___awmod@divisor+1,f,c
 14703  00363C  B0D8               	btfsc	status,0,c
 14704  00363E  2A04               	incf	i2___awmod@divisor+1,f,c
 14705  003640                     i2l5196:
 14706  003640  5003               	movf	i2___awmod@divisor,w,c
 14707  003642  1004               	iorwf	i2___awmod@divisor+1,w,c
 14708  003644  B4D8               	btfsc	status,2,c
 14709  003646  D018               	goto	i2l5212
 14710  003648  0E01               	movlw	1
 14711  00364A  6E05               	movwf	i2___awmod@counter,c
 14712  00364C  D004               	goto	i2l5202
 14713  00364E                     i2l5200:
 14714  00364E  90D8               	bcf	status,0,c
 14715  003650  3603               	rlcf	i2___awmod@divisor,f,c
 14716  003652  3604               	rlcf	i2___awmod@divisor+1,f,c
 14717  003654  2A05               	incf	i2___awmod@counter,f,c
 14718  003656                     i2l5202:
 14719  003656  AE04               	btfss	i2___awmod@divisor+1,7,c
 14720  003658  D7FA               	goto	i2l5200
 14721  00365A                     i2l5204:
 14722  00365A  5003               	movf	i2___awmod@divisor,w,c
 14723  00365C  5C01               	subwf	i2___awmod@dividend,w,c
 14724  00365E  5004               	movf	i2___awmod@divisor+1,w,c
 14725  003660  5802               	subwfb	i2___awmod@dividend+1,w,c
 14726  003662  A0D8               	btfss	status,0,c
 14727  003664  D004               	goto	i2l5208
 14728  003666  5003               	movf	i2___awmod@divisor,w,c
 14729  003668  5E01               	subwf	i2___awmod@dividend,f,c
 14730  00366A  5004               	movf	i2___awmod@divisor+1,w,c
 14731  00366C  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14732  00366E                     i2l5208:
 14733  00366E  90D8               	bcf	status,0,c
 14734  003670  3204               	rrcf	i2___awmod@divisor+1,f,c
 14735  003672  3203               	rrcf	i2___awmod@divisor,f,c
 14736  003674  2E05               	decfsz	i2___awmod@counter,f,c
 14737  003676  D7F1               	goto	i2l5204
 14738  003678                     i2l5212:
 14739  003678  5006               	movf	i2___awmod@sign,w,c
 14740  00367A  B4D8               	btfsc	status,2,c
 14741  00367C  D004               	goto	i2l5216
 14742  00367E  6C01               	negf	i2___awmod@dividend,c
 14743  003680  1E02               	comf	i2___awmod@dividend+1,f,c
 14744  003682  B0D8               	btfsc	status,0,c
 14745  003684  2A02               	incf	i2___awmod@dividend+1,f,c
 14746  003686                     i2l5216:
 14747  003686  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14748  00368A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14749  00368E  0012               	return	
 14750  003690                     __end_ofi2___awmod:
 14751                           	opt stack 0
 14752                           pclatu	equ	0xFFB
 14753                           pclath	equ	0xFFA
 14754                           tblptru	equ	0xFF8
 14755                           tblptrh	equ	0xFF7
 14756                           tblptrl	equ	0xFF6
 14757                           tablat	equ	0xFF5
 14758                           prodh	equ	0xFF4
 14759                           prodl	equ	0xFF3
 14760                           intcon	equ	0xFF2
 14761                           intcon3	equ	0xFF0
 14762                           postinc0	equ	0xFEE
 14763                           fsr0h	equ	0xFEA
 14764                           fsr0l	equ	0xFE9
 14765                           wreg	equ	0xFE8
 14766                           postdec1	equ	0xFE5
 14767                           fsr1h	equ	0xFE2
 14768                           fsr1l	equ	0xFE1
 14769                           indf2	equ	0xFDF
 14770                           postinc2	equ	0xFDE
 14771                           postdec2	equ	0xFDD
 14772                           fsr2h	equ	0xFDA
 14773                           fsr2l	equ	0xFD9
 14774                           status	equ	0xFD8
 14775                           
 14776 ;; *************** function _keyPressedInterruptService *****************
 14777 ;; Defined at:
 14778 ;;		line 49 in file "keypad.c"
 14779 ;; Parameters:    Size  Location     Type
 14780 ;;		None
 14781 ;; Auto vars:     Size  Location     Type
 14782 ;;  key             1    0[COMRAM] unsigned char 
 14783 ;; Return value:  Size  Location     Type
 14784 ;;                  1    wreg      void 
 14785 ;; Registers used:
 14786 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14787 ;; Tracked objects:
 14788 ;;		On entry : 0/0
 14789 ;;		On exit  : 0/0
 14790 ;;		Unchanged: 0/0
 14791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14795 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14796 ;;Total ram usage:        1 bytes
 14797 ;; Hardware stack levels used:    1
 14798 ;; This function calls:
 14799 ;;		Nothing
 14800 ;; This function is called by:
 14801 ;;		_service
 14802 ;; This function uses a non-reentrant model
 14803 ;;
 14804                           
 14805                           	psect	text66
 14806  003C72                     __ptext66:
 14807                           	opt stack 0
 14808  003C72                     _keyPressedInterruptService:
 14809                           	opt stack 22
 14810                           
 14811                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 14812                           
 14813                           ;incstack = 0
 14814  003C72  3881               	swapf	3969,w,c	;volatile
 14815  003C74  0B0F               	andlw	15
 14816  003C76  0B0F               	andlw	15
 14817  003C78  6E01               	movwf	keyPressedInterruptService@key,c
 14818                           
 14819                           ;keypad.c: 51: lastKey = keys[key];
 14820  003C7A  5001               	movf	keyPressedInterruptService@key,w,c
 14821  003C7C  0D01               	mullw	1
 14822  003C7E  0EC1               	movlw	low _keys
 14823  003C80  24F3               	addwf	prodl,w,c
 14824  003C82  6EF6               	movwf	tblptrl,c
 14825  003C84  0EFE               	movlw	high _keys
 14826  003C86  20F4               	addwfc	prodh,w,c
 14827  003C88  6EF7               	movwf	tblptrh,c
 14828  003C8A                     	if	0	;There are less than 3 active tblptr bytes
 14829  003C8A                     	endif
 14830  003C8A  0008               	tblrd		*
 14831  003C8C  CFF5 F05C          	movff	tablat,_lastKey
 14832  003C90  0012               	return		;funcret
 14833  003C92                     __end_of_keyPressedInterruptService:
 14834                           	opt stack 0
 14835                           pclatu	equ	0xFFB
 14836                           pclath	equ	0xFFA
 14837                           tblptru	equ	0xFF8
 14838                           tblptrh	equ	0xFF7
 14839                           tblptrl	equ	0xFF6
 14840                           tablat	equ	0xFF5
 14841                           prodh	equ	0xFF4
 14842                           prodl	equ	0xFF3
 14843                           intcon	equ	0xFF2
 14844                           intcon3	equ	0xFF0
 14845                           postinc0	equ	0xFEE
 14846                           fsr0h	equ	0xFEA
 14847                           fsr0l	equ	0xFE9
 14848                           wreg	equ	0xFE8
 14849                           postdec1	equ	0xFE5
 14850                           fsr1h	equ	0xFE2
 14851                           fsr1l	equ	0xFE1
 14852                           indf2	equ	0xFDF
 14853                           postinc2	equ	0xFDE
 14854                           postdec2	equ	0xFDD
 14855                           fsr2h	equ	0xFDA
 14856                           fsr2l	equ	0xFD9
 14857                           status	equ	0xFD8
 14858                           pclatu	equ	0xFFB
 14859                           pclath	equ	0xFFA
 14860                           tblptru	equ	0xFF8
 14861                           tblptrh	equ	0xFF7
 14862                           tblptrl	equ	0xFF6
 14863                           tablat	equ	0xFF5
 14864                           prodh	equ	0xFF4
 14865                           prodl	equ	0xFF3
 14866                           intcon	equ	0xFF2
 14867                           intcon3	equ	0xFF0
 14868                           postinc0	equ	0xFEE
 14869                           fsr0h	equ	0xFEA
 14870                           fsr0l	equ	0xFE9
 14871                           wreg	equ	0xFE8
 14872                           postdec1	equ	0xFE5
 14873                           fsr1h	equ	0xFE2
 14874                           fsr1l	equ	0xFE1
 14875                           indf2	equ	0xFDF
 14876                           postinc2	equ	0xFDE
 14877                           postdec2	equ	0xFDD
 14878                           fsr2h	equ	0xFDA
 14879                           fsr2l	equ	0xFD9
 14880                           status	equ	0xFD8
 14881                           
 14882                           	psect	rparam
 14883  0000                     pclatu	equ	0xFFB
 14884                           pclath	equ	0xFFA
 14885                           tblptru	equ	0xFF8
 14886                           tblptrh	equ	0xFF7
 14887                           tblptrl	equ	0xFF6
 14888                           tablat	equ	0xFF5
 14889                           prodh	equ	0xFF4
 14890                           prodl	equ	0xFF3
 14891                           intcon	equ	0xFF2
 14892                           intcon3	equ	0xFF0
 14893                           postinc0	equ	0xFEE
 14894                           fsr0h	equ	0xFEA
 14895                           fsr0l	equ	0xFE9
 14896                           wreg	equ	0xFE8
 14897                           postdec1	equ	0xFE5
 14898                           fsr1h	equ	0xFE2
 14899                           fsr1l	equ	0xFE1
 14900                           indf2	equ	0xFDF
 14901                           postinc2	equ	0xFDE
 14902                           postdec2	equ	0xFDD
 14903                           fsr2h	equ	0xFDA
 14904                           fsr2l	equ	0xFD9
 14905                           status	equ	0xFD8
 14906                           
 14907                           	psect	temp
 14908  00005D                     btemp:
 14909                           	opt stack 0
 14910  00005D                     	ds	1
 14911  0000                     int$flags	set	btemp
 14912                           pclatu	equ	0xFFB
 14913                           pclath	equ	0xFFA
 14914                           tblptru	equ	0xFF8
 14915                           tblptrh	equ	0xFF7
 14916                           tblptrl	equ	0xFF6
 14917                           tablat	equ	0xFF5
 14918                           prodh	equ	0xFF4
 14919                           prodl	equ	0xFF3
 14920                           intcon	equ	0xFF2
 14921                           intcon3	equ	0xFF0
 14922                           postinc0	equ	0xFEE
 14923                           fsr0h	equ	0xFEA
 14924                           fsr0l	equ	0xFE9
 14925                           wreg	equ	0xFE8
 14926                           postdec1	equ	0xFE5
 14927                           fsr1h	equ	0xFE2
 14928                           fsr1l	equ	0xFE1
 14929                           indf2	equ	0xFDF
 14930                           postinc2	equ	0xFDE
 14931                           postdec2	equ	0xFDD
 14932                           fsr2h	equ	0xFDA
 14933                           fsr2l	equ	0xFD9
 14934                           status	equ	0xFD8


Data Sizes:
    Strings     294
    Constant    174
    Data        59
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    116     124
    BANK1           256     56     118
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_20(CODE[19]), STR_19(CODE[18]), STR_18(CODE[17]), STR_17(CODE[19]), 
		 -> STR_16(CODE[17]), STR_15(CODE[19]), STR_14(CODE[17]), STR_13(CODE[18]), 
		 -> STR_12(CODE[17]), STR_11(CODE[18]), STR_10(CODE[9]), STR_9(CODE[10]), 
		 -> STR_8(CODE[8]), STR_7(CODE[15]), STR_6(CODE[14]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[8]), STR_2(CODE[9]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    showDateTime@t	PTR int  size(2) Largest target is 0

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(COMRAM[4]), cylinderDir(BANK1[4]), 


Critical Paths under _main in COMRAM

    _main->___almod
    _sortBattery->___ftdiv
    _showRunTime->___ftdiv
    _setTime->_I2C_Master_Write
    _printf->___almod
    _lcdNewline->_lcdInst
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _readPastRun->_eepromRead
    _eepromRead->___wmul
    ___wmul->___awdiv
    _lcdHome->_lcdInst
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _sortBattery->_printf
    _showInterface->_showRunTime
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  616078
                                             31 BANK1     25    25      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  114316
                                            107 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1748
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        6     6      0  407701
                                            115 BANK0      1     1      0
                                              0 BANK1      5     5      0
                            _initRTC
                        _readPastRun
                       _showDateTime
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (2) _showRunTime                                          8     6      2   72167
                                            107 BANK0      8     6      2
                           ___awtoft
                            ___ftdiv
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunStats                                         2     0      2   65359
                                            107 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   65347
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   65316
                                            107 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65285
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                         3     3      0   68325
                                            107 BANK0      3     3      0
                            _getTime
                            _initRTC
                           _lcdClear
                             _printf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              1     1      0     823
                                             37 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   64929
                                             61 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14293
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14014
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Init                                      8     4      4    1196
                                             47 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _getTime                                             19    17      2     993
                                             37 COMRAM    19    17      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     724
                                             35 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             35 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4353
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     293
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24248
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22690
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21383
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3734
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3102
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             48 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                             34 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1472
                                             19 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _initRTC
         _I2C_Master_Init
           ___lldiv
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _setTime
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     38      76       7       46.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     74      7C       5       96.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 02 17:52:50 2017

                       ___altoft@exp 0033                                    _n 00FA  
                  main@cylinderStart 0132                 main@cylinderBackward 012E  
                      ___altoft@sign 0034                          _sortBattery 0E0A  
                     showRunSelect@k 00EB                         ___awdiv@sign 002E  
                ___wmul@multiplicand 0033                          __CFG_BORV$3 000000  
                     showRunTime@run 00EB                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                          __CFG_OSC$HS 000000  
                   _redirectingServo 0172                         ___ftadd@exp1 00AD  
                       ___ftadd@exp2 00AC                  main@cylinderForward 012C  
                       ___ftadd@sign 00AB                                  l151 1992  
                                l152 199A                                  l225 3C3E  
                                l162 1AD6                                  l261 3B98  
                                l334 28F4                                  l183 11CC  
                                l264 3BA4                                  l509 3D16  
                                l454 39C2                                  l447 3A9C  
                                l359 3B34                                  l456 39CE  
                                l457 39DA                                  l811 0818  
                                l820 0A04                                  l771 0996  
                    ??_showInterface 00F3                         __CFG_CPB$OFF 000000  
                                _PEN 007E2A                         __CFG_CPD$OFF 000000  
                                _SEN 007E28                                  _n_C 0152  
                       ___awmod@sign 0028                                  prod 000FF3  
                                wreg 000FE8                      showRunTime@time 00F0  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0083  
                       ___ftdiv@sign 0088                         __CFG_WDT$OFF 000000  
                               l1130 1B40                                 l1107 30AE  
                               l1204 3C20                                 l1134 1B7A  
                               l1136 1BA2                                 l1145 1C78  
                               l1154 1CA2                                 l1075 25E2  
                               l1172 242C                                 l1165 26D0  
                               l1173 2454                                 l1254 34A4  
                               l1264 36E4                                 l1179 24BA  
                               l6002 1FDA                                 l6100 35D0  
                               l6022 2062                                 l6032 20A0  
                               l6008 2014                                 l6120 3616  
                               l6112 35FE                                 l6104 35DE  
                               l6026 2080                                 l6130 3456  
                               l6106 35E6                                 l7010 2CB8  
                               l6036 20BE                                 l6132 3462  
                               l6052 33C4                                 l6108 35EA  
                               l6116 3608                                 l6220 1434  
                               l7012 2CBE                                 l5510 3144  
                               l5502 3110                                 l6142 3496  
                               l6134 3466                                 l6302 2480  
                               l6206 1F58                                 l6230 1504  
                               l7022 2CE0                                 l7006 2CAA  
                               l7030 2CFA                                 l5504 311C  
                               l6312 24A8                                 l6064 33EA  
                               l6080 341C                                 l7024 2CE6  
                               l7016 2CCC                                 l5450 2BB6  
                               l5506 3120                                 l5514 3152  
                               l6322 24EA                                 l6314 24B4  
                               l6306 2490                                 l6066 33F2  
                               l6058 33D4                                 l6226 14DE  
                               l7106 2D36                                 l7130 396E  
                               l7122 3948                                 l7210 2EC6  
                               l7050 2896                                 l7042 283E  
                               l7018 2CD2                                 l4900 3A5A  
                               l6404 2658                                 l6084 342A  
                               l6076 3412                                 l6068 33F6  
                               l6244 16E2                                 l7140 3780  
                               l7028 2CF4                                 l7300 0FA0  
                               l5462 2BF0                                 l5518 3168  
                               l6182 3BDE                                 l6350 257A  
                               l6342 254A                                 l6238 1638  
                               l7222 2F14                                 l7046 286A  
                               l7038 2812                                 l7310 1088  
                               l5464 2BFC                                 l5456 2BCE  
                               l4912 3A70                                 l6424 26A6  
                               l6504 2322                                 l7064 2ADC  
                               l7072 2B5A                                 l6328 2508  
                               l6272 23F2                                 l6096 35C4  
                               l6256 3CC6                                 l7152 37BA  
                               l7232 2F50                                 l7208 2EC2  
                               l7056 28C2                                 l7320 111C  
                               l7312 10B6                                 l5482 2C54  
                               l5474 2C30                                 l5466 2C00  
                               l4906 3A64                                 l6522 2388  
                               l6514 2352                                 l6442 3996  
                               l6530 36A2                                 l6362 25A8  
                               l6266 23C6                                 l7170 3816  
                               l7162 37F0                                 l7330 116C  
                               l6516 2362                                 l6508 2336  
                               l7068 2B32                                 l4932 39E6  
                               l7252 2A18                                 l7092 319A  
                               l6532 36AE                                 l6372 25D0  
                               l6612 0124                                 l7228 2F38  
                               l7236 2F5C                                 l7420 17FA  
                               l5478 2C3E                                 l5494 30EA  
                               l4918 3A78                                 l6454 3B74  
                               l6518 236C                                 l7254 2A1E  
                               l6462 323C                                 l6534 36B2  
                               l6374 25DC                                 l6366 25B8  
                               l6198 1E90                                 l6710 0494  
                               l6702 0428                                 l6622 0186  
                               l6606 00FC                                 l7190 33A4  
                               l7182 3014                                 l7350 1204  
                               l6384 355A                                 l7248 29F0  
                               l7088 3184                                 l6560 34EC  
                               l6472 3298                                 l6544 3822  
                               l6712 04AA                                 l6640 01F2  
                               l6624 018C                                 l6616 0160  
                               l7408 17B6                                 l5498 30FE  
                               l6386 3566                                 l7098 31FE  
                               l6570 351A                                 l6466 326C  
                               l6538 36D6                                 l6546 382E  
                               l6722 051A                                 l6706 044E  
                               l6650 023E                                 l6642 01F8  
                               l6634 01C0                                 l6626 0192  
                               l6618 0176                                 l7362 1272  
                               l7338 119C                                 l7442 1A54  
                               l7434 19A2                                 l5940 1B88  
                               l6564 34F4                                 l6820 0988  
                               l6804 0840                                 l6732 0578  
                               l6708 0464                                 l6644 0210  
                               l6628 0198                                 l6660 026E  
                               l7356 1242                                 l7348 11DC  
                               l7452 1A78                                 l5934 1B4E  
                               l6398 2626                                 l6486 2290  
                               l6910 0C26                                 l6814 096C  
                               l6750 062A                                 l6718 04F4  
                               l6654 0256                                 l6638 01E6  
                               l6662 02B2                                 l6582 0022  
                               l7286 0ECA                                 l7438 1A3C  
                               l7390 1710                                 l6912 0C30  
                               l6904 0BE4                                 l6816 097A  
                               l6808 0892                                 l6736 05DE  
                               l6648 0224                                 l6592 0058  
                               l5890 3066                                 l5882 3030  
                               l5962 1C08                                 l5946 1B98  
                               l6930 0C9E                                 l6906 0BEE  
                               l6842 0A26                                 l6770 06F4  
                               l6754 067A                                 l6738 05E4  
                               l6586 0038                                 l5964 1C16  
                               l5956 1BDA                                 l6924 0C78  
                               l6852 0A76                                 l6828 09BE  
                               l6780 073E                                 l6764 06D0  
                               l6668 02CC                                 l6588 004E  
                               l5894 307C                                 l5886 303E  
                               l5982 1CCC                                 l5974 1C5E  
                               l5966 1C24                                 l6934 0CC6  
                               l6942 0DBA                                 l6926 0C84  
                               l6918 0C5C                                 l6854 0A7C  
                               l6846 0A4E                                 l6774 0702  
                               l6758 06A2                                 l6694 03C0  
                               l6678 0312                                 l6598 0088  
                               l5896 309A                                 l5888 3048  
                               l5992 1D1A                                 l5976 1C6C  
                               l5968 1C30                                 l6936 0D46  
                               l6944 0DCC                                 l6792 07E6  
                               l6776 0716                                 l6768 06DE  
                               l5898 30A4                                 l6946 0DD4  
                               l6866 0AC2                                 l6882 0B0E  
                               l6794 07FA                                 l6786 07CA  
                               l6892 0B78                                 l6868 0AC8  
                               l6884 0B20                                 l6788 07D8  
                               l6948 0DEA                                 l6798 081C  
                               l6888 0B48                                 l6984 38F4  
                               l6898 0BAC                                 l6994 391C  
                               l6988 38FC                                 _EEIF 007D0C  
                               STR_1 FFDC                                 STR_2 FFE6  
                               STR_3 FFF7                                 STR_4 FFAE  
                               STR_5 FF9D                                 STR_6 FFCE  
                               STR_7 FFBF                                 STR_8 FFEF  
                               STR_9 FFDC                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                       printf@tmpval 00D7                                 u6211 23D6  
                               _PEIE 007F96                                 u6080 3BDC  
                               u6075 38A6                                 u6500 22B6  
                               _RCEN 007E2B                                 u6191 23AA  
                               u8007 2DEC                                 u5641 1AEE  
                               u6505 22AC                                 u8017 3C42  
                               u8027 3AA8                                 u5651 1B0C  
                               u6371 2608                                 u8037 3ADC  
                               u7414 282E                                 u8047 3C56  
                               u6391 263A                                 u7415 282A  
                               u7424 285A                                 u8057 3C68  
                               u6481 226C                                 u7425 2856  
                               u7434 2886                                 u7354 2C90  
                               u8067 370E                                 u5851 1FB6  
                               u7435 2882                                 u7355 2C8A  
                               u7444 28B2                                 u8077 371C  
                               u7445 28AE                                 u7614 2FAA  
                               u8087 3742                                 u5871 1FF0  
                               u7615 2FA2                                 u6760 0358  
                               u8097 3750                                 u7820 1972  
                               u6765 034C                                 u7830 1974  
                               u6980 0810                                 u7937 18A2  
                               u7947 0E46                                 u7957 0EFC  
                               u7967 101A                                 u7977 122A  
                               u7987 1262                                 u7997 129C  
                               _RSEN 007E29                                 _n_AA 0150  
                               _n_9V 014E                      showRunStats@run 00EB  
                               _main 1708                                 _curr 0058  
                       ___ftpack@arg 0023                                 _keys FEC1  
                       ___ftpack@exp 0026                                 _time 0148  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 005D  
                    ??_showRunSelect 003B                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                        __CFG_MCLRE$ON 000000  
                       ___ftmul@cntr 0096                         ___param_bank 000000  
                       ___ftmul@sign 0097                         ___fttol@exp1 00BC  
                       ___fttol@lval 00B8                 __end_ofi2_startTimer 3A58  
                   ?_I2C_Master_Init 0030                     ?_I2C_Master_Read 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
                       ?_readPastRun 0080                 __end_of_angleToPulse 2256  
                    __end_of___aldiv 2C66                      __end_of___almod 317A  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___awdiv 3434  
                              _EEADR 000FA9                      __end_of___ftadd 1D40  
                              STR_10 FFE6                                STR_11 FF12  
                              STR_12 FF7B                                STR_20 FEFF  
                              STR_21 FF48                                STR_13 FF24  
                              STR_14 FF6A                                STR_15 FED9  
                              STR_16 FF8C                                STR_17 FEEC  
                              STR_18 FF59                                STR_19 FF36  
                    __end_of___awmod 3620                      __end_of___ftdiv 2704  
            ??_servoInterruptService 0010                      __end_of___ftneg 3C2E  
                    __end_of___lldiv 34B6                      __end_of___ftmul 20FE  
                              _T0CON 000FD5                      ___awdiv@divisor 002B  
                              _T1CON 000FCD                      __end_of___llmod 36F6  
                    __end_of___ftsub 39C0                      __end_of___fttol 239A  
                              _T3CON 000FB1                                i2l197 29A8  
                              i2l454 3A0E                                i2l198 2970  
                              i2l199 2982                                i2l456 3A1A  
                              i2l457 3A26                      ___awdiv@counter 002D  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR3H 000FB3  
                              _TMR1L 000FCE                                _TMR3L 000FB2  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _PORTD 000F83  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                    __end_of_lcdHome 3D5A                         ___lltoft@exp 0033  
                      _conveyorServo 015E                      __end_of_lcdInst 3C72  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                    __end_of_getTime 3538                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initLCD 3AE8  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002E  
                              _angle 0044                      __end_of_initRTC 3D16  
                    __end_of_dpowers FE53                                _count 0056  
                              _scale 12F2                      __end_of_isdigit 3CCE  
                      ___ftpack@sign 0027                                _pulse 0138  
                              _putch 3C2E                      __end_of_setTime 3924  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_service 29E4                                status 000FD8  
                 __size_ofi2___awmod 0070                       __CFG_PBADEN$ON 000000  
               __end_of_digitalWrite 2D2E                      __initialization 329C  
                       __end_of_main 1AD8                         __end_of_keys FED2  
                             ??_main 011F                        ___fttol@sign1 00B7  
                      __activetblptr 000002                 __size_of_digitalRead 00EA  
               __size_of__tdiv_to_l_ 0132                         _stoppingTime 015C  
                  ?_I2C_Master_Start 0001                      i2digitalWrite@p 000E  
                  ?_I2C_Master_Write 0024                   ??_I2C_Master_Start 0024  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                 ??_I2C_Master_Write 0026                               _ADCON2 000FC0  
                   __end_of___altoft 35B0                     ___llmod@dividend 0030  
                             ?_scale 0098                               _ADRESH 000FC4  
                             _EEADRH 000FAA                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _EECON1 000FA6  
                             _EECON2 000FA7        keyPressedInterruptService@key 0001  
                   ___awdiv@dividend 0029                     __end_of___awtoft 3B98  
                             ?_putch 0001                     __end_of___ftpack 30CE  
                   __end_of___lltoft 3878                               _INT0IE 007F94  
                             _INT0IF 007F91                               _INT1IE 007F83  
                             _INT1IF 007F80                         sortBattery@V 0116  
                       sortBattery@i 0119                               i2l5200 364E  
                             i2l5202 3656                               i2l5204 365A  
                             i2l5212 3678                               i2l5140 2E3A  
                             i2l5150 2E5C                               i2l5216 3686  
                             i2l5208 366E                               i2l5152 2E62  
                             i2l5144 2E48                               i2l5162 2E84  
                             i2l5146 2E4E                               i2l5156 2E70  
                             i2l5164 2E8A                               i2l5158 2E76  
                             i2l5192 3634                               i2l5178 3A32  
                             i2l5434 280C                               i2l5196 3640  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR3IE 007D01                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9                     __end_of_lcdClear 3D42  
                  _angleToPulse$1395 00CD                       __CFG_XINST$OFF 000000  
                   __end_of__powers_ FEA1                               ___ftge 320C  
                          ??___aldiv 002B                            ??___almod 0039  
                             ___wmul 3BE4                            ??___awdiv 002D  
                          ??___ftadd 00A8                       __CFG_STVREN$ON 000000  
                          ??___awmod 0027                            ??___ftdiv 0080  
                          ??___ftneg 0026                            ??___lldiv 002B  
                          ??___ftmul 008F                            ??___llmod 0038  
                          ??___ftsub 003B                            ??___fttol 00B2  
                             _fround 1D40                               clear_0 3302  
                             clear_1 3314                     ___awdiv@quotient 002F  
                    ___awmod@divisor 0025                            ??_lcdHome 0027  
                    ___awmod@counter 0027                               _servos 0140  
                          ??_lcdInst 0025                               _printf 0012  
                          ??_getTime 0028                     __end_of_pinSetup 3B28  
                   __end_of_setAngle 2B9A                    analogRead@channel 0023  
              ___ftmul@f3_as_product 0093                            ??_initLCD 0027  
                          ??_initRTC 0038                         __pdataCOMRAM 003B  
                          ??_isdigit 0023                      readPastRun@data 0082  
                  __end_ofi2___awmod 3690                        setAngle@angle 00D6  
                       __mediumconst FE2A                            ??_setTime 0026  
                       ?_showRunMenu 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_showRunTime 00EB                        setAngle@motor 00D4  
                          ??_service 0014                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 331A  
                         ___altoft@c 002B                           ___ftadd@f1 00A2  
                         ___ftadd@f2 00A5                           ___ftge@ff1 002F  
                         ___ftge@ff2 0032                        ___rparam_used 000001  
                         ___ftdiv@f1 0035                           ___ftdiv@f2 0038  
                         ___ftdiv@f3 0084                           ___ftneg@f1 0023  
                         ___awtoft@c 002B                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 0089                           ___ftmul@f2 008C  
                         ___ftsub@f1 00AE                           ___ftsub@f2 00B1  
                         ___fttol@f1 00AE                 __end_of_happynewyear FED9  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 0158  
                       __pidataBANK0 3D5A                         __pidataBANK1 3C92  
                         ___lltoft@c 002B                        _cylinderMotor 0166  
                      __end_of_scale 1708                         ?_sortBattery 0001  
                      __end_of_putch 3C50                   __size_of_lcdNibble 0066  
                         __div_to_l_ 24CC                    eepromRead@address 0037  
               __size_of_readPastRun 0092                      __div_to_l_@exp1 002E  
                    __div_to_l_@cntr 002D                              ??_scale 003B  
                    __div_to_l_@quot 0029                              ??_putch 0027  
                       i2_startTimer 3A0C                           __pbssBANK0 00FA  
                         __pbssBANK1 0138                         _angleToPulse 20FE  
              __size_of_digitalWrite 00C8                   __size_of_initTimer 004A  
                 __size_of_initServo 00E2                           _analogRead 3B28  
                      __div_to_l_@f1 0023                        __div_to_l_@f2 0026  
                            ?___ftge 002F                              ?___wmul 0031  
              sortBattery@resolution 010C                     _sortBattery$1394 0100  
                          ?___altoft 002B                              ?_fround 0098  
                         _lcdNewline 3D32                            ?___awtoft 002B  
                          ?___ftpack 0023                              ?_printf 00BD  
                          ?___lltoft 002B                           _eepromRead 3CCE  
     __size_of_servoInterruptService 010C        __end_of_servoInterruptService 2810  
              __end_of_showInterface 2F72                    i2startTimer@timer 0007  
                          ?_lcdClear 0001                     angleToPulse@a000 00D0  
                   angleToPulse@a180 00C9                         _digitalWrite 2C66  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7              __size_ofi2_digitalWrite 00C8  
                            _V_LIM_C 0041                  main@lastBatteryTime 0130  
                          ?_pinSetup 0001                            ?_setAngle 00D4  
                  __end_of_lcdNibble 375C                    __end_of__npowers_ FE7A  
                            __Hparam 0000                           _scale$1398 009B  
              __end_of_showRunSelect 37C0                              __Lparam 0000  
                       readPastRun@i 0090                              ___aldiv 2B9A  
                            ___almod 30CE                      __size_of___ftge 0090  
                            ___awdiv 33B0                              ___ftadd 1AD8  
                            ___awmod 35B0                           _readKeypad 3B98  
                            ___ftdiv 25F4                              ___ftneg 3C0A  
                            ___lldiv 3434                      __size_of___wmul 0026  
                            ___ftmul 1FA0                              ___llmod 3690  
                            ___ftsub 3974                              ___fttol 2256  
                            _n_OTHER 0154                           ??___altoft 002F  
                            __pcinit 329C                           ??___awtoft 002E  
                         ??___ftpack 0028                      __size_of_fround 0260  
                            __ramtop 1000                              _lcdHome 3D52  
                            _lcdInst 3C50                           ??___lltoft 002F  
                            __ptext0 1708                              __ptext1 0E0A  
                            __ptext2 2C66                              __ptext3 2810  
                            _getTime 34B6                              __ptext4 3B28  
                            __ptext5 2EBE                              __ptext6 2F72  
                            __ptext7 3328                              __ptext8 375C  
                            __ptext9 37C0                        ?_showDateTime 0001  
                    __size_of_printf 0DF8                              _padPin1 004E  
                            _padPin2 016A                              _padPin3 0052  
                      startTimer@val 0025                              _initLCD 3AA2  
                  __end_of_hexpowers FEC1                          ?__div_to_l_ 0023  
                            _lastKey 005C                              _initRTC 3D00  
                  __end_of_initTimer 3AA2                    __end_of_initServo 2AC6  
                            _dpowers FE2B                              _isdigit 3CB0  
                   ___awmod@dividend 0023                     ___aldiv@dividend 0023  
                            _setTime 38D2             __size_of_I2C_Master_Init 005A  
           __size_of_I2C_Master_Read 0026                           ??_lcdClear 0027  
           __size_of_I2C_Master_Wait 0012             __size_of_I2C_Master_Stop 0008  
                      ?_showMainMenu 0001                              _service 0008  
               __size_of_showRunMenu 005C                       __pintcode_body 28FA  
               __size_of_showRunTime 00AE                 end_of_initialization 331A  
                      __Lmediumconst FE2A                              int_func 28FA  
                     digitalRead@pin 0023                          ?_analogRead 0023  
                         ??_pinSetup 0023                           ??_setAngle 00D8  
          __size_of_I2C_Master_Start 0008            __size_of_I2C_Master_Write 000A  
                    ___lldiv@divisor 0027                      ___lldiv@counter 002F  
                     setAngle@period 00DA                        ?_showRunStats 00EB  
                            printf@c 00EA                              printf@f 00BD  
                   ___aldiv@quotient 002D                     I2C_Master_Init@c 0030  
                   I2C_Master_Read@a 0024                              postdec1 000FE5  
                            postdec2 000FDD                      _batteryDetected 014C  
                            postinc0 000FEE                              postinc2 000FDE  
                     __tdiv_to_l_@f1 0023                       __tdiv_to_l_@f2 0026  
                      ??_digitalRead 0025                          ?_lcdNewline 0001  
                      ??__tdiv_to_l_ 0029                       ??_showDateTime 00EB  
                          _PORTBbits 000F81                 __size_of_sortBattery 04E8  
                   showInterface@key 0104                     showInterface@run 0102  
                        ?_eepromRead 0037                       ??_showMainMenu 003B  
       ??_keyPressedInterruptService 0001                  _redirectAngle_OTHER 00F8  
                       _happynewyear FED2                   angleToPulse@offset 00C5  
                 sortBattery@V_float 0102                            i2___awmod 3620  
                         _startTimer 39C0                          ___ftdiv@exp 0087  
                        printf@width 00E4                  __size_of__div_to_l_ 0128  
                     ??_showRunStats 003B                          ___ftmul@exp 0092  
                        ?_readKeypad 0001                       __end_of___ftge 329C  
                     __end_of___wmul 3C0A                        __pidataCOMRAM 3CE8  
__size_of_keyPressedInterruptService 0020                       __end_of_fround 1FA0  
                     __end_of_printf 0E0A                  __size_of_analogRead 0038  
                start_initialization 329C                  __end_of_digitalRead 28FA  
                __end_of__tdiv_to_l_ 24CC                       initServo@angle 00E0  
                     initTimer@timer 0023                       initServo@motor 00DE  
                         ?i2___awmod 0001                       i2_digitalWrite 2DF6  
                  ??_I2C_Master_Init 0034                    ??_I2C_Master_Read 0024  
                  ??_I2C_Master_Wait 0023                    ??_I2C_Master_Stop 0024  
                __size_of_lcdNewline 0008                      ___llmod@divisor 0034  
                    ___llmod@counter 0038                  __size_of_eepromRead 001A  
                         initServo@i 00E6                             ??___ftge 0035  
                           ??___wmul 0035                          __pdataBANK0 00F4  
                        __pdataBANK1 0158                     __CFG_LPT1OSC$OFF 000000  
                           ??_fround 003B                        ??_readPastRun 003B  
                     readPastRun@run 0080                             ??_printf 00C7  
                  __size_of___altoft 0078                           fround@prec 00A1  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
                  __size_of___lltoft 005C                          __pbssCOMRAM 0052  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
             __end_ofi2_digitalWrite 2EBE               sortBattery@targetAngle 0114  
                       _isdigit$1031 0024                          ?_startTimer 0023  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
               __end_of_showDateTime 2DF6                    i2digitalWrite@pin 0007  
                  i2digitalWrite@val 0009                     _I2C_Master_Start 3D4A  
                   _I2C_Master_Write 3D28                    __CFG_CCP2MX$PORTC 000000  
                  __size_of_pinSetup 0040                 __end_of_showMainMenu 3974  
                  __size_of_setAngle 00D4                            __pintcode 0008  
                      __pmediumconst FE2A                            _lcdNibble 36F6  
                           ?___aldiv 0023                             ?___almod 0031  
                           ?___awdiv 0029                             ?___ftadd 00A2  
                           ?___awmod 0023                             ?___ftdiv 0035  
                           ?___ftneg 0023                             ?___lldiv 0023  
                           ?___ftmul 0089                             ?___llmod 0030  
                           ?___ftsub 00AE                            __npowers_ FE53  
                           ?___fttol 00AE                          _digitalRead 2810  
                   ___almod@dividend 0031                             ?_lcdHome 0001  
                           ?_lcdInst 0001                          __tdiv_to_l_ 239A  
                           ?_getTime 0026                         ??__div_to_l_ 0029  
                           ?_initLCD 0001                             ?_initRTC 0001  
                    startTimer@timer 0023                             ?_isdigit 0001  
 __end_of_keyPressedInterruptService 3C92           _keyPressedInterruptService 3C72  
                           ?_setTime 0001                  __end_of_readPastRun 320C  
               __end_of_showRunStats 33B0                             ?_service 0001  
                          _hexpowers FEA1                            _initTimer 3A58  
                          _initServo 29E4                      ?i2_digitalWrite 0007  
              _servoInterruptService 2704                          ??i2___awmod 0005  
                     __size_of_scale 0416                       __size_of_putch 0022  
                           _AA_float 004A                      ___aldiv@divisor 0027  
                    ___aldiv@counter 002B                       sortBattery@Vcc 0109  
                     ___wmul@product 0035                             _LATDbits 000F8C  
                       ??_analogRead 0027                   __end_of__div_to_l_ 25F4  
                           i2u494_44 2E20                             i2u494_45 2E1A  
             __size_of_showInterface 00B4                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001                       _padAngle_CLOSE 00F4  
                          _terminate 0156                        digitalWrite@p 002A  
                         service@key 0022                         ??_lcdNewline 0027  
                __size_of_startTimer 004C                    angleToPulse@angle 00BD  
                    main@cylinderDur 0134                    ___wmul@multiplier 0031  
                      lcdNibble@data 0024                         ??_eepromRead 003B  
                         printf@flag 00E6                        lcdNibble@temp 0023  
                         printf@fval 00DD                           printf@prec 00E8  
                      ??_showRunMenu 003B                        ??_showRunTime 00ED  
                 __end_of_analogRead 3B60                             _V_LIM_AA 003E  
                           _V_LIM_9V 003B               __size_of_showRunSelect 0064  
                         ?_initTimer 0023                           ?_initServo 00DE  
                  sortBattery@signal 0107             sortBattery@pos_v_counter 0105  
                I2C_Master_Read@temp 0025                            copy_data0 32B0  
                          copy_data1 32D0                            copy_data2 32F0  
                 i2___awmod@dividend 0001                   __end_of_lcdNewline 3D3A  
                      readKeypad@key 0023                             __Hrparam 0000  
                           __Lrparam 0000                   __end_of_eepromRead 3CE8  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0023  
                      ??_sortBattery 00EB                     __size_of___aldiv 00CC  
                   __size_of___almod 00AC                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0110                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 3538  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                           ___awtoft 3B60                             ___ftpack 3020  
                        _readPastRun 317A                          _cylinderDir 0162  
                        _fround$1396 009E                          _fround$1397 009B  
                           ___lltoft 381C                     __size_of_lcdHome 0008  
                   __size_of_lcdInst 0022                     __size_of_getTime 0082  
                      showDateTime@t 00EC                            setAngle@i 00DC  
                    _I2C_Master_Init 3878                      _I2C_Master_Read 3BBE  
                   __size_of_initLCD 0046                      _I2C_Master_Wait 3D16  
                   __size_of_initRTC 0016                      _I2C_Master_Stop 3D42  
                   __size_of_isdigit 001E               ?_servoInterruptService 0001  
                      _showInterface 2EBE                             _lcdClear 3D3A  
                   __size_of_setTime 0052                             __ptext10 3924  
                           __ptext11 3B98                             __ptext20 35B0  
                           __ptext12 2D2E                             __ptext21 33B0  
                           __ptext13 38D2                             __ptext30 3D00  
                           __ptext22 239A                             __ptext14 0012  
                           __ptext31 3878                             __ptext23 24CC  
                           __ptext15 12F2                             __ptext40 3CCE  
                           __ptext32 3434                             __ptext24 381C  
                           __ptext16 3C2E                             __ptext41 3BE4  
                           __ptext33 34B6                             __ptext25 3690  
                           __ptext17 3D32                             __ptext50 25F4  
                           __ptext42 3AE8                             __ptext34 3D28  
                           __ptext26 3974                             __ptext18 3CB0  
                           __ptext51 1AD8                             __ptext43 3D52  
                           __ptext35 3D42                             __ptext27 3C0A  
                           __ptext19 1D40                             __ptext60 2B9A  
                           __ptext52 3B60                             __ptext44 29E4  
                           __ptext36 3D4A                             __ptext28 320C  
                           __ptext53 3538                             __ptext45 39C0  
                           __ptext37 3BBE                             __ptext29 3D3A  
                           __ptext62 2704                             __ptext54 3020  
                           __ptext46 2AC6                             __ptext38 3D16  
                           __ptext63 3A0C                             __ptext55 3A58  
                           __ptext47 20FE                             __ptext39 317A  
                           __ptext64 2DF6                             __ptext56 3AA2  
                           __ptext48 2256                             __ptext65 3620  
                           __ptext57 3C50                             __ptext49 1FA0  
                           __ptext66 3C72                             __ptext58 36F6  
                           __ptext59 30CE                __size_of_showDateTime 00C8  
                           __powers_ FE7A                     __size_of_service 29DC  
                    i2startTimer@val 0009                      ___almod@divisor 0035  
                      ?i2_startTimer 0007                             _padServo 016E  
                    ___almod@counter 0039                  __end_of_showRunMenu 381C  
                 __end_of_readKeypad 3BBE                  __end_of_showRunTime 3020  
                      ?_angleToPulse 00BD                        __size_of_main 03D0  
              __size_of_showMainMenu 0050                             _pinSetup 3AE8  
                           _setAngle 2AC6                        _showRunSelect 375C  
                           _prevTime 005A                     sortBattery@V_236 011C  
                        ??_lcdNibble 0023                             getTime@i 0038  
                     showInterface@n 0100                        _padAngle_OPEN 0046  
                           int$flags 005D                     sortBattery@i_238 0112  
                   sortBattery@V_max 010F                            printf@idx 00D0  
                          printf@len 00D3                            printf@exp 00DB  
                          printf@val 00E0                             main@prev 0136  
                      showMainMenu@k 00EB                __size_of_showRunStats 0088  
                       _showDateTime 2D2E                    i2___awmod@divisor 0003  
                          putch@data 0027                    i2___awmod@counter 0005  
           __end_of_I2C_Master_Start 3D52                  __end_of_sortBattery 12F2  
           __end_of_I2C_Master_Write 3D32                           _INTCONbits 000FF2  
                     ?_showInterface 0001                        ?_digitalWrite 0023  
                        ??_initTimer 0025                          ??_initServo 00E2  
                           isdigit@c 0025                         _showMainMenu 3924  
                           scale@scl 009E                       ??i2_startTimer 000D  
                       ??_startTimer 0029                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0031                     __tdiv_to_l_@cntr 0030  
                     ??_angleToPulse 00C1                     __tdiv_to_l_@quot 002C  
                   ___lldiv@dividend 0023                             setTime@i 0026  
                     ?_showRunSelect 0001                         _showRunStats 3328  
                   _redirectAngle_AA 015A                     _redirectAngle_9V 0048  
                           printf@ap 00D5                             printf@cp 00D1  
            __end_of_I2C_Master_Init 38D2              __end_of_I2C_Master_Read 3BE4  
            __end_of_I2C_Master_Wait 3D28              __end_of_I2C_Master_Stop 3D4A  
                        lcdInst@data 0026                         ?_digitalRead 0023  
                       ?__tdiv_to_l_ 0023                   __end_of_startTimer 3A0C  
                        _printf$1399 00CD                     ??i2_digitalWrite 000B  
                   ___lldiv@quotient 002B                    I2C_Master_Write@d 0024  
                     ??_digitalWrite 0027          ?_keyPressedInterruptService 0001  
                       ___aldiv@sign 002C                          _showRunMenu 37C0  
                        _showRunTime 2F72                      _redirectAngle_C 00F6  
                        getTime@time 002A                     _padAngle_NEUTRAL 0158  
                    digitalWrite@pin 0023                      digitalWrite@val 0025  
                       ___almod@sign 003A                         showRunMenu@k 00EC  
                     showRunMenu@key 00EB  
