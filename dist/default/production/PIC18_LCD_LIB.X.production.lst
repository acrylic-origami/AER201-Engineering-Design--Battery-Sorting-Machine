

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 12 19:11:05 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 1.40
    64                           ; Generated 01/12/2016 GMT
    65                           ; 
    66                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F4620 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98                           	psect	idataBANK0
    99  001ADA                     __pidataBANK0:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _binAngle
   103  001ADA  003C               	dw	60
   104  001ADC  0050               	dw	80
   105  001ADE  0064               	dw	100
   106  001AE0  0078               	dw	120
   107                           
   108                           	psect	mediumconst
   109  00FE92                     __pmediumconst:
   110                           	opt stack 0
   111  00FE92  00                 	db	0
   112  00FE93                     _dpowers:
   113                           	opt stack 0
   114  00FE93  0001               	dw	1
   115  00FE95  0000               	dw	0
   116  00FE97  000A               	dw	10
   117  00FE99  0000               	dw	0
   118  00FE9B  0064               	dw	100
   119  00FE9D  0000               	dw	0
   120  00FE9F  03E8               	dw	1000
   121  00FEA1  0000               	dw	0
   122  00FEA3  2710               	dw	10000
   123  00FEA5  0000               	dw	0
   124  00FEA7  86A0               	dw	34464
   125  00FEA9  0001               	dw	1
   126  00FEAB  4240               	dw	16960
   127  00FEAD  000F               	dw	15
   128  00FEAF  9680               	dw	38528
   129  00FEB1  0098               	dw	152
   130  00FEB3  E100               	dw	57600
   131  00FEB5  05F5               	dw	1525
   132  00FEB7  CA00               	dw	51712
   133  00FEB9  3B9A               	dw	15258
   134  00FEBB                     __end_of_dpowers:
   135                           	opt stack 0
   136  00FEBB                     _hexpowers:
   137                           	opt stack 0
   138  00FEBB  0001               	dw	1
   139  00FEBD  0000               	dw	0
   140  00FEBF  0010               	dw	16
   141  00FEC1  0000               	dw	0
   142  00FEC3  0100               	dw	256
   143  00FEC5  0000               	dw	0
   144  00FEC7  1000               	dw	4096
   145  00FEC9  0000               	dw	0
   146  00FECB  0000               	dw	0
   147  00FECD  0001               	dw	1
   148  00FECF  0000               	dw	0
   149  00FED1  0010               	dw	16
   150  00FED3  0000               	dw	0
   151  00FED5  0100               	dw	256
   152  00FED7  0000               	dw	0
   153  00FED9  1000               	dw	4096
   154  00FEDB                     __end_of_hexpowers:
   155                           	opt stack 0
   156  00FEDB                     _keys:
   157                           	opt stack 0
   158  00FEDB  31                 	db	49
   159  00FEDC  32                 	db	50
   160  00FEDD  33                 	db	51
   161  00FEDE  41                 	db	65
   162  00FEDF  34                 	db	52
   163  00FEE0  35                 	db	53
   164  00FEE1  36                 	db	54
   165  00FEE2  42                 	db	66
   166  00FEE3  37                 	db	55
   167  00FEE4  38                 	db	56
   168  00FEE5  39                 	db	57
   169  00FEE6  43                 	db	67
   170  00FEE7  2A                 	db	42
   171  00FEE8  30                 	db	48
   172  00FEE9  23                 	db	35
   173  00FEEA  44                 	db	68
   174  00FEEB  00                 	db	0
   175  00FEEC                     __end_of_keys:
   176                           	opt stack 0
   177  00FEEC                     _happynewyear:
   178                           	opt stack 0
   179  00FEEC  45                 	db	69
   180  00FEED  59                 	db	89
   181  00FEEE  23                 	db	35
   182  00FEEF  07                 	db	7
   183  00FEF0  31                 	db	49
   184  00FEF1  12                 	db	18
   185  00FEF2  16                 	db	22
   186  00FEF3                     __end_of_happynewyear:
   187                           	opt stack 0
   188  0000                     _ADCON0	set	4034
   189  0000                     _ADCON1	set	4033
   190  0000                     _ADCON2	set	4032
   191  0000                     _ADRESH	set	4036
   192  0000                     _ADRESL	set	4035
   193  0000                     _EEADR	set	4009
   194  0000                     _EEADRH	set	4010
   195  0000                     _EECON1	set	4006
   196  0000                     _EECON2	set	4007
   197  0000                     _EEDATA	set	4008
   198  0000                     _INTCONbits	set	4082
   199  0000                     _LATA	set	3977
   200  0000                     _LATB	set	3978
   201  0000                     _LATC	set	3979
   202  0000                     _LATD	set	3980
   203  0000                     _LATDbits	set	3980
   204  0000                     _LATE	set	3981
   205  0000                     _PORTA	set	3968
   206  0000                     _PORTB	set	3969
   207  0000                     _PORTBbits	set	3969
   208  0000                     _PORTC	set	3970
   209  0000                     _PORTD	set	3971
   210  0000                     _SSPADD	set	4040
   211  0000                     _SSPBUF	set	4041
   212  0000                     _SSPCON1	set	4038
   213  0000                     _SSPCON2	set	4037
   214  0000                     _SSPSTAT	set	4039
   215  0000                     _T0CON	set	4053
   216  0000                     _T1CON	set	4045
   217  0000                     _T3CON	set	4017
   218  0000                     _TMR0H	set	4055
   219  0000                     _TMR0L	set	4054
   220  0000                     _TMR1H	set	4047
   221  0000                     _TMR1L	set	4046
   222  0000                     _TMR3H	set	4019
   223  0000                     _TMR3L	set	4018
   224  0000                     _TRISA	set	3986
   225  0000                     _TRISB	set	3987
   226  0000                     _TRISC	set	3988
   227  0000                     _TRISD	set	3989
   228  0000                     _TRISE	set	3990
   229  0000                     _ACKDT	set	32301
   230  0000                     _ACKEN	set	32300
   231  0000                     _EEIF	set	32012
   232  0000                     _INT0IE	set	32660
   233  0000                     _INT0IF	set	32657
   234  0000                     _INT1IE	set	32643
   235  0000                     _INT1IF	set	32640
   236  0000                     _PEIE	set	32662
   237  0000                     _PEN	set	32298
   238  0000                     _RCEN	set	32299
   239  0000                     _RSEN	set	32297
   240  0000                     _SEN	set	32296
   241  0000                     _TMR0IE	set	32661
   242  0000                     _TMR0IF	set	32658
   243  0000                     _TMR1IE	set	31976
   244  0000                     _TMR1IF	set	31984
   245  0000                     _TMR2IF	set	31985
   246  0000                     _TMR3IE	set	32001
   247  0000                     _TMR3IF	set	32009
   248  0000                     _TRISC3	set	31907
   249  0000                     _TRISC4	set	31908
   250  00FEF3                     STR_12:
   251  00FEF3  25                 	db	37
   252  00FEF4  63                 	db	99	;'c'
   253  00FEF5  29                 	db	41
   254  00FEF6  20                 	db	32
   255  00FEF7  74                 	db	116	;'t'
   256  00FEF8  69                 	db	105	;'i'
   257  00FEF9  6D                 	db	109	;'m'
   258  00FEFA  65                 	db	101	;'e'
   259  00FEFB  20                 	db	32
   260  00FEFC  20                 	db	32
   261  00FEFD  3C                 	db	60	;'<'
   262  00FEFE  41                 	db	65	;'A'
   263  00FEFF  20                 	db	32
   264  00FF00  20                 	db	32
   265  00FF01  20                 	db	32
   266  00FF02  20                 	db	32
   267  00FF03  20                 	db	32
   268  00FF04  0A                 	db	10
   269  00FF05  00                 	db	0
   270  00FF06                     STR_8:
   271  00FF06  73                 	db	115	;'s'
   272  00FF07  74                 	db	116	;'t'
   273  00FF08  61                 	db	97	;'a'
   274  00FF09  72                 	db	114	;'r'
   275  00FF0A  74                 	db	116	;'t'
   276  00FF0B  20                 	db	32
   277  00FF0C  20                 	db	32
   278  00FF0D  20                 	db	32
   279  00FF0E  3C                 	db	60	;'<'
   280  00FF0F  42                 	db	66	;'B'
   281  00FF10  20                 	db	32
   282  00FF11  20                 	db	32
   283  00FF12  20                 	db	32
   284  00FF13  20                 	db	32
   285  00FF14  20                 	db	32
   286  00FF15  20                 	db	32
   287  00FF16  0A                 	db	10
   288  00FF17  00                 	db	0
   289  00FF18                     STR_6:
   290  00FF18  20                 	db	32
   291  00FF19  20                 	db	32
   292  00FF1A  68                 	db	104	;'h'
   293  00FF1B  68                 	db	104	;'h'
   294  00FF1C  3A                 	db	58	;':'
   295  00FF1D  6D                 	db	109	;'m'
   296  00FF1E  6D                 	db	109	;'m'
   297  00FF1F  3A                 	db	58	;':'
   298  00FF20  73                 	db	115	;'s'
   299  00FF21  73                 	db	115	;'s'
   300  00FF22  20                 	db	32
   301  00FF23  20                 	db	32
   302  00FF24  20                 	db	32
   303  00FF25  20                 	db	32
   304  00FF26  20                 	db	32
   305  00FF27  20                 	db	32
   306  00FF28  0A                 	db	10
   307  00FF29  00                 	db	0
   308  00FF2A                     STR_10:
   309  00FF2A  73                 	db	115	;'s'
   310  00FF2B  65                 	db	101	;'e'
   311  00FF2C  6C                 	db	108	;'l'
   312  00FF2D  65                 	db	101	;'e'
   313  00FF2E  63                 	db	99	;'c'
   314  00FF2F  74                 	db	116	;'t'
   315  00FF30  20                 	db	32
   316  00FF31  72                 	db	114	;'r'
   317  00FF32  75                 	db	117	;'u'
   318  00FF33  6E                 	db	110	;'n'
   319  00FF34  3A                 	db	58	;':'
   320  00FF35  20                 	db	32
   321  00FF36  20                 	db	32
   322  00FF37  20                 	db	32
   323  00FF38  20                 	db	32
   324  00FF39  20                 	db	32
   325  00FF3A  0A                 	db	10
   326  00FF3B  00                 	db	0
   327  00FF3C                     STR_14:
   328  00FF3C  74                 	db	116	;'t'
   329  00FF3D  69                 	db	105	;'i'
   330  00FF3E  6D                 	db	109	;'m'
   331  00FF3F  65                 	db	101	;'e'
   332  00FF40  3A                 	db	58	;':'
   333  00FF41  20                 	db	32
   334  00FF42  6E                 	db	110	;'n'
   335  00FF43  6E                 	db	110	;'n'
   336  00FF44  6E                 	db	110	;'n'
   337  00FF45  20                 	db	32
   338  00FF46  73                 	db	115	;'s'
   339  00FF47  65                 	db	101	;'e'
   340  00FF48  63                 	db	99	;'c'
   341  00FF49  20                 	db	32
   342  00FF4A  20                 	db	32
   343  00FF4B  20                 	db	32
   344  00FF4C  0A                 	db	10
   345  00FF4D  00                 	db	0
   346  00FF4E                     STR_16:
   347  00FF4E  5B                 	db	91	;'['
   348  00FF4F  41                 	db	65	;'A'
   349  00FF50  41                 	db	65	;'A'
   350  00FF51  2C                 	db	44
   351  00FF52  39                 	db	57	;'9'
   352  00FF53  56                 	db	86	;'V'
   353  00FF54  2C                 	db	44
   354  00FF55  43                 	db	67	;'C'
   355  00FF56  2C                 	db	44
   356  00FF57  6F                 	db	111	;'o'
   357  00FF58  74                 	db	116	;'t'
   358  00FF59  68                 	db	104	;'h'
   359  00FF5A  65                 	db	101	;'e'
   360  00FF5B  72                 	db	114	;'r'
   361  00FF5C  5D                 	db	93	;']'
   362  00FF5D  20                 	db	32
   363  00FF5E  0A                 	db	10
   364  00FF5F  00                 	db	0
   365  00FF60                     STR_18:
   366  00FF60  30                 	db	48	;'0'
   367  00FF61  31                 	db	49	;'1'
   368  00FF62  32                 	db	50	;'2'
   369  00FF63  33                 	db	51	;'3'
   370  00FF64  34                 	db	52	;'4'
   371  00FF65  35                 	db	53	;'5'
   372  00FF66  36                 	db	54	;'6'
   373  00FF67  37                 	db	55	;'7'
   374  00FF68  38                 	db	56	;'8'
   375  00FF69  39                 	db	57	;'9'
   376  00FF6A  61                 	db	97	;'a'
   377  00FF6B  62                 	db	98	;'b'
   378  00FF6C  63                 	db	99	;'c'
   379  00FF6D  64                 	db	100	;'d'
   380  00FF6E  65                 	db	101	;'e'
   381  00FF6F  66                 	db	102	;'f'
   382  00FF70  00                 	db	0
   383  00FF71                     STR_15:
   384  00FF71  20                 	db	32
   385  00FF72  20                 	db	32
   386  00FF73  20                 	db	32
   387  00FF74  20                 	db	32
   388  00FF75  20                 	db	32
   389  00FF76  20                 	db	32
   390  00FF77  20                 	db	32
   391  00FF78  20                 	db	32
   392  00FF79  20                 	db	32
   393  00FF7A  20                 	db	32
   394  00FF7B  20                 	db	32
   395  00FF7C  20                 	db	32
   396  00FF7D  20                 	db	32
   397  00FF7E  20                 	db	32
   398  00FF7F  2A                 	db	42
   399  00FF80  3E                 	db	62	;'>'
   400  00FF81  00                 	db	0
   401  00FF82                     STR_11:
   402  00FF82  5B                 	db	91	;'['
   403  00FF83  31                 	db	49	;'1'
   404  00FF84  2C                 	db	44
   405  00FF85  32                 	db	50	;'2'
   406  00FF86  2C                 	db	44
   407  00FF87  33                 	db	51	;'3'
   408  00FF88  2C                 	db	44
   409  00FF89  34                 	db	52	;'4'
   410  00FF8A  5D                 	db	93	;']'
   411  00FF8B  20                 	db	32
   412  00FF8C  20                 	db	32
   413  00FF8D  20                 	db	32
   414  00FF8E  20                 	db	32
   415  00FF8F  20                 	db	32
   416  00FF90  2A                 	db	42
   417  00FF91  3E                 	db	62	;'>'
   418  00FF92  00                 	db	0
   419  00FF93                     STR_9:
   420  00FF93  68                 	db	104	;'h'
   421  00FF94  69                 	db	105	;'i'
   422  00FF95  73                 	db	115	;'s'
   423  00FF96  74                 	db	116	;'t'
   424  00FF97  6F                 	db	111	;'o'
   425  00FF98  72                 	db	114	;'r'
   426  00FF99  79                 	db	121	;'y'
   427  00FF9A  20                 	db	32
   428  00FF9B  3C                 	db	60	;'<'
   429  00FF9C  43                 	db	67	;'C'
   430  00FF9D  20                 	db	32
   431  00FF9E  20                 	db	32
   432  00FF9F  20                 	db	32
   433  00FFA0  20                 	db	32
   434  00FFA1  2A                 	db	42
   435  00FFA2  3E                 	db	62	;'>'
   436  00FFA3  00                 	db	0
   437  00FFA4                     STR_13:
   438  00FFA4  20                 	db	32
   439  00FFA5  20                 	db	32
   440  00FFA6  20                 	db	32
   441  00FFA7  73                 	db	115	;'s'
   442  00FFA8  74                 	db	116	;'t'
   443  00FFA9  61                 	db	97	;'a'
   444  00FFAA  74                 	db	116	;'t'
   445  00FFAB  73                 	db	115	;'s'
   446  00FFAC  20                 	db	32
   447  00FFAD  3C                 	db	60	;'<'
   448  00FFAE  42                 	db	66	;'B'
   449  00FFAF  20                 	db	32
   450  00FFB0  20                 	db	32
   451  00FFB1  20                 	db	32
   452  00FFB2  2A                 	db	42
   453  00FFB3  3E                 	db	62	;'>'
   454  00FFB4  00                 	db	0
   455  00FFB5                     STR_17:
   456  00FFB5  5B                 	db	91	;'['
   457  00FFB6  6E                 	db	110	;'n'
   458  00FFB7  6E                 	db	110	;'n'
   459  00FFB8  2C                 	db	44
   460  00FFB9  6E                 	db	110	;'n'
   461  00FFBA  2C                 	db	44
   462  00FFBB  6E                 	db	110	;'n'
   463  00FFBC  2C                 	db	44
   464  00FFBD  6E                 	db	110	;'n'
   465  00FFBE  6E                 	db	110	;'n'
   466  00FFBF  5D                 	db	93	;']'
   467  00FFC0  20                 	db	32
   468  00FFC1  20                 	db	32
   469  00FFC2  20                 	db	32
   470  00FFC3  2A                 	db	42
   471  00FFC4  3E                 	db	62	;'>'
   472  00FFC5  00                 	db	0
   473  00FFC6                     STR_7:
   474  00FFC6  20                 	db	32
   475  00FFC7  20                 	db	32
   476  00FFC8  6D                 	db	109	;'m'
   477  00FFC9  6D                 	db	109	;'m'
   478  00FFCA  3A                 	db	58	;':'
   479  00FFCB  64                 	db	100	;'d'
   480  00FFCC  64                 	db	100	;'d'
   481  00FFCD  3A                 	db	58	;':'
   482  00FFCE  79                 	db	121	;'y'
   483  00FFCF  79                 	db	121	;'y'
   484  00FFD0  20                 	db	32
   485  00FFD1  20                 	db	32
   486  00FFD2  20                 	db	32
   487  00FFD3  20                 	db	32
   488  00FFD4  41                 	db	65	;'A'
   489  00FFD5  3E                 	db	62	;'>'
   490  00FFD6  00                 	db	0
   491  00FFD7  5B                 	db	91	;'['
   492  00FFD8  25                 	db	37
   493  00FFD9  78                 	db	120	;'x'
   494  00FFDA  20                 	db	32
   495  00FFDB  25                 	db	37
   496  00FFDC  78                 	db	120	;'x'
   497  00FFDD  5D                 	db	93	;']'
   498  00FFDE  0A                 	db	10
   499  00FFDF  00                 	db	0
   500  00FFE0                     STR_2:
   501  00FFE0  73                 	db	115	;'s'
   502  00FFE1  6F                 	db	111	;'o'
   503  00FFE2  72                 	db	114	;'r'
   504  00FFE3  74                 	db	116	;'t'
   505  00FFE4  69                 	db	105	;'i'
   506  00FFE5  6E                 	db	110	;'n'
   507  00FFE6  67                 	db	103	;'g'
   508  00FFE7  21                 	db	33
   509  00FFE8  00                 	db	0
   510  00FFE9                     STR_1:
   511  00FFE9  73                 	db	115	;'s'
   512  00FFEA  74                 	db	116	;'t'
   513  00FFEB  61                 	db	97	;'a'
   514  00FFEC  72                 	db	114	;'r'
   515  00FFED  74                 	db	116	;'t'
   516  00FFEE  69                 	db	105	;'i'
   517  00FFEF  6E                 	db	110	;'n'
   518  00FFF0  67                 	db	103	;'g'
   519  00FFF1  00                 	db	0
   520  00FFF2  74                 	db	116	;'t'
   521  00FFF3  31                 	db	49	;'1'
   522  00FFF4  3A                 	db	58	;':'
   523  00FFF5  20                 	db	32
   524  00FFF6  25                 	db	37
   525  00FFF7  78                 	db	120	;'x'
   526  00FFF8  20                 	db	32
   527  00FFF9  00                 	db	0
   528  00FFFA                     STR_5:
   529  00FFFA  25                 	db	37
   530  00FFFB  6C                 	db	108	;'l'
   531  00FFFC  64                 	db	100	;'d'
   532  00FFFD  00                 	db	0
   533                           
   534                           ; #config settings
   535  00FFFE  00                 	db	0	; dummy byte at the end
   536  0000                     
   537                           	psect	cinit
   538  001842                     __pcinit:
   539                           	opt stack 0
   540  001842                     start_initialization:
   541                           	opt stack 0
   542  001842                     __initialization:
   543                           	opt stack 0
   544                           
   545                           ; Initialize objects allocated to BANK0 (8 bytes)
   546                           ; load TBLPTR registers with __pidataBANK0
   547  001842  0EDA               	movlw	low __pidataBANK0
   548  001844  6EF6               	movwf	tblptrl,c
   549  001846  0E1A               	movlw	high __pidataBANK0
   550  001848  6EF7               	movwf	tblptrh,c
   551  00184A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   552  00184C  6EF8               	movwf	tblptru,c
   553  00184E  EE00  F0C3         	lfsr	0,__pdataBANK0
   554  001852  EE10 F008          	lfsr	1,8
   555  001856                     copy_data0:
   556  001856  0009               	tblrd		*+
   557  001858  CFF5 FFEE          	movff	tablat,postinc0
   558  00185C  50E5               	movf	postdec1,w,c
   559  00185E  50E1               	movf	fsr1l,w,c
   560  001860  E1FA               	bnz	copy_data0
   561                           
   562                           ; Clear objects allocated to BANK0 (24 bytes)
   563  001862  EE00  F0AB         	lfsr	0,__pbssBANK0
   564  001866  0E18               	movlw	24
   565  001868                     clear_0:
   566  001868  6AEE               	clrf	postinc0,c
   567  00186A  06E8               	decf	wreg,f,c
   568  00186C  E1FD               	bnz	clear_0
   569                           
   570                           ; Clear objects allocated to COMRAM (8 bytes)
   571  00186E  EE00  F076         	lfsr	0,__pbssCOMRAM
   572  001872  0E08               	movlw	8
   573  001874                     clear_1:
   574  001874  6AEE               	clrf	postinc0,c
   575  001876  06E8               	decf	wreg,f,c
   576  001878  E1FD               	bnz	clear_1
   577  00187A                     end_of_initialization:
   578                           	opt stack 0
   579  00187A                     __end_of__initialization:
   580                           	opt stack 0
   581  00187A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   582  00187C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   583  00187E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   584  001880  6EF8               	movwf	tblptru,c
   585  001882  0100               	movlb	0
   586  001884  EFB0  F00B         	goto	_main	;jump to C main() function
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	bssCOMRAM
   597  000076                     __pbssCOMRAM:
   598                           	opt stack 0
   599  000076                     _port:
   600                           	opt stack 0
   601  000076                     	ds	8
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1l	equ	0xFE1
   610                           
   611                           	psect	bssBANK0
   612  0000AB                     __pbssBANK0:
   613                           	opt stack 0
   614  0000AB                     _pulse:
   615                           	opt stack 0
   616  0000AB                     	ds	16
   617  0000BB                     _pin:
   618                           	opt stack 0
   619  0000BB                     	ds	8
   620                           tblptru	equ	0xFF8
   621                           tblptrh	equ	0xFF7
   622                           tblptrl	equ	0xFF6
   623                           tablat	equ	0xFF5
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           postdec1	equ	0xFE5
   627                           fsr1l	equ	0xFE1
   628                           
   629                           	psect	dataBANK0
   630  0000C3                     __pdataBANK0:
   631                           	opt stack 0
   632  0000C3                     _binAngle:
   633                           	opt stack 0
   634  0000C3                     	ds	8
   635                           tblptru	equ	0xFF8
   636                           tblptrh	equ	0xFF7
   637                           tblptrl	equ	0xFF6
   638                           tablat	equ	0xFF5
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           postdec1	equ	0xFE5
   642                           fsr1l	equ	0xFE1
   643                           
   644                           	psect	cstackBANK0
   645  000080                     __pcstackBANK0:
   646                           	opt stack 0
   647  000080                     ?___lldiv:
   648                           	opt stack 0
   649  000080                     lcdNibble@temp:
   650                           	opt stack 0
   651  000080                     readKeypad@key:
   652                           	opt stack 0
   653  000080                     digitalWrite@port:
   654                           	opt stack 0
   655  000080                     ___lldiv@dividend:
   656                           	opt stack 0
   657                           
   658                           ; 4 bytes @ 0x0
   659  000080                     	ds	1
   660  000081                     lcdNibble@data:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x1
   664  000081                     	ds	1
   665  000082                     ??_lcdInst:
   666  000082                     digitalWrite@pin:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2
   670  000082                     	ds	1
   671  000083                     lcdInst@data:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x3
   675  000083                     	ds	1
   676  000084                     ??_initLCD:
   677  000084                     putch@data:
   678                           	opt stack 0
   679  000084                     digitalWrite@val:
   680                           	opt stack 0
   681  000084                     ___lldiv@divisor:
   682                           	opt stack 0
   683                           
   684                           ; 4 bytes @ 0x4
   685  000084                     	ds	2
   686  000086                     ??_digitalWrite:
   687                           
   688                           ; 1 bytes @ 0x6
   689  000086                     	ds	2
   690  000088                     ___lldiv@quotient:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x8
   694  000088                     	ds	4
   695  00008C                     ___lldiv@counter:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0xC
   699  00008C                     	ds	1
   700  00008D                     ?___llmod:
   701                           	opt stack 0
   702  00008D                     I2C_Master_Init@c:
   703                           	opt stack 0
   704  00008D                     ___llmod@dividend:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0xD
   708  00008D                     	ds	4
   709  000091                     ??_I2C_Master_Init:
   710  000091                     ___llmod@divisor:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x11
   714  000091                     	ds	4
   715  000095                     ___llmod@counter:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x15
   719  000095                     	ds	1
   720  000096                     ?_printf:
   721                           	opt stack 0
   722  000096                     printf@f:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x16
   726  000096                     	ds	6
   727  00009C                     ??_printf:
   728                           
   729                           ; 1 bytes @ 0x1C
   730  00009C                     	ds	2
   731  00009E                     printf@idx:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x1E
   735  00009E                     	ds	1
   736  00009F                     printf@prec:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x1F
   740  00009F                     	ds	2
   741  0000A1                     printf@ap:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x21
   745  0000A1                     	ds	2
   746  0000A3                     printf@val:
   747                           	opt stack 0
   748                           
   749                           ; 4 bytes @ 0x23
   750  0000A3                     	ds	4
   751  0000A7                     printf@flag:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x27
   755  0000A7                     	ds	1
   756  0000A8                     printf@c:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x28
   760  0000A8                     	ds	1
   761  0000A9                     runMenu@key:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x29
   765  0000A9                     	ds	1
   766  0000AA                     showInterface@key:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x2A
   770  0000AA                     	ds	1
   771  0000AB                     tblptru	equ	0xFF8
   772                           tblptrh	equ	0xFF7
   773                           tblptrl	equ	0xFF6
   774                           tablat	equ	0xFF5
   775                           postinc0	equ	0xFEE
   776                           wreg	equ	0xFE8
   777                           postdec1	equ	0xFE5
   778                           fsr1l	equ	0xFE1
   779                           
   780                           ; 1 bytes @ 0x2B
   781                           
   782                           	psect	cstackCOMRAM
   783  000001                     __pcstackCOMRAM:
   784                           	opt stack 0
   785  000001                     ?_digitalRead:
   786                           	opt stack 0
   787  000001                     ?___ftpack:
   788                           	opt stack 0
   789  000001                     ?i2___lldiv:
   790                           	opt stack 0
   791  000001                     i2lcdNibble@temp:
   792                           	opt stack 0
   793  000001                     digitalRead@port:
   794                           	opt stack 0
   795  000001                     startTimer@timer:
   796                           	opt stack 0
   797  000001                     i2digitalWrite@port:
   798                           	opt stack 0
   799  000001                     ___ftpack@arg:
   800                           	opt stack 0
   801  000001                     i2___lldiv@dividend:
   802                           	opt stack 0
   803                           
   804                           ; 4 bytes @ 0x0
   805  000001                     	ds	1
   806  000002                     i2lcdNibble@data:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x1
   810  000002                     	ds	1
   811  000003                     ??i2_lcdInst:
   812  000003                     digitalRead@pin:
   813                           	opt stack 0
   814  000003                     i2digitalWrite@pin:
   815                           	opt stack 0
   816  000003                     startTimer@val:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x2
   820  000003                     	ds	1
   821  000004                     ___ftpack@exp:
   822                           	opt stack 0
   823  000004                     i2lcdInst@data:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x3
   827  000004                     	ds	1
   828  000005                     ??_digitalRead:
   829  000005                     ___ftpack@sign:
   830                           	opt stack 0
   831  000005                     i2putch@data:
   832                           	opt stack 0
   833  000005                     i2digitalWrite@val:
   834                           	opt stack 0
   835  000005                     i2___lldiv@divisor:
   836                           	opt stack 0
   837                           
   838                           ; 4 bytes @ 0x4
   839  000005                     	ds	1
   840  000006                     ??___ftpack:
   841                           
   842                           ; 1 bytes @ 0x5
   843  000006                     	ds	1
   844  000007                     ??_startTimer:
   845  000007                     ??i2_digitalWrite:
   846                           
   847                           ; 1 bytes @ 0x6
   848  000007                     	ds	2
   849  000009                     ?___altoft:
   850                           	opt stack 0
   851  000009                     ?___awtoft:
   852                           	opt stack 0
   853  000009                     ___awtoft@c:
   854                           	opt stack 0
   855  000009                     ___altoft@c:
   856                           	opt stack 0
   857  000009                     i2___lldiv@quotient:
   858                           	opt stack 0
   859                           
   860                           ; 4 bytes @ 0x8
   861  000009                     	ds	1
   862  00000A                     ??_servoInterruptService:
   863                           
   864                           ; 1 bytes @ 0x9
   865  00000A                     	ds	2
   866  00000C                     ___awtoft@sign:
   867                           	opt stack 0
   868  00000C                     servoInterruptService@flags:
   869                           	opt stack 0
   870                           
   871                           ; 8 bytes @ 0xB
   872  00000C                     	ds	1
   873  00000D                     ??___altoft:
   874  00000D                     ?___ftdiv:
   875                           	opt stack 0
   876  00000D                     i2___lldiv@counter:
   877                           	opt stack 0
   878  00000D                     ___ftdiv@f1:
   879                           	opt stack 0
   880                           
   881                           ; 3 bytes @ 0xC
   882  00000D                     	ds	1
   883  00000E                     ?i2___llmod:
   884                           	opt stack 0
   885  00000E                     i2___llmod@dividend:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0xD
   889  00000E                     	ds	2
   890  000010                     ___ftdiv@f2:
   891                           	opt stack 0
   892                           
   893                           ; 3 bytes @ 0xF
   894  000010                     	ds	1
   895  000011                     ___altoft@exp:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x10
   899  000011                     	ds	1
   900  000012                     ___altoft@sign:
   901                           	opt stack 0
   902  000012                     i2___llmod@divisor:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x11
   906  000012                     	ds	1
   907  000013                     ??___ftdiv:
   908                           
   909                           ; 1 bytes @ 0x12
   910  000013                     	ds	1
   911  000014                     servoInterruptService@i:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x13
   915  000014                     	ds	2
   916  000016                     ___ftdiv@cntr:
   917                           	opt stack 0
   918  000016                     i2___llmod@counter:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x15
   922  000016                     	ds	1
   923  000017                     ?i2_printf:
   924                           	opt stack 0
   925  000017                     i2printf@f:
   926                           	opt stack 0
   927  000017                     ___ftdiv@f3:
   928                           	opt stack 0
   929                           
   930                           ; 3 bytes @ 0x16
   931  000017                     	ds	3
   932  00001A                     ___ftdiv@exp:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x19
   936  00001A                     	ds	1
   937  00001B                     ___ftdiv@sign:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x1A
   941  00001B                     	ds	1
   942  00001C                     ?___ftmul:
   943                           	opt stack 0
   944  00001C                     ___ftmul@f1:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x1B
   948  00001C                     	ds	1
   949  00001D                     ??i2_printf:
   950                           
   951                           ; 1 bytes @ 0x1C
   952  00001D                     	ds	2
   953  00001F                     i2printf@idx:
   954                           	opt stack 0
   955  00001F                     ___ftmul@f2:
   956                           	opt stack 0
   957                           
   958                           ; 3 bytes @ 0x1E
   959  00001F                     	ds	1
   960  000020                     i2printf@prec:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x1F
   964  000020                     	ds	2
   965  000022                     ??___ftmul:
   966  000022                     i2printf@ap:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x21
   970  000022                     	ds	2
   971  000024                     i2printf@val:
   972                           	opt stack 0
   973                           
   974                           ; 4 bytes @ 0x23
   975  000024                     	ds	1
   976  000025                     ___ftmul@exp:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x24
   980  000025                     	ds	1
   981  000026                     ___ftmul@f3_as_product:
   982                           	opt stack 0
   983                           
   984                           ; 3 bytes @ 0x25
   985  000026                     	ds	2
   986  000028                     i2printf@flag:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x27
   990  000028                     	ds	1
   991  000029                     ___ftmul@cntr:
   992                           	opt stack 0
   993  000029                     i2printf@c:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x28
   997  000029                     	ds	1
   998  00002A                     ___ftmul@sign:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x29
  1002  00002A                     	ds	1
  1003  00002B                     ?___ftadd:
  1004                           	opt stack 0
  1005  00002B                     ___ftadd@f1:
  1006                           	opt stack 0
  1007                           
  1008                           ; 3 bytes @ 0x2A
  1009  00002B                     	ds	3
  1010  00002E                     ___ftadd@f2:
  1011                           	opt stack 0
  1012                           
  1013                           ; 3 bytes @ 0x2D
  1014  00002E                     	ds	3
  1015  000031                     ??___ftadd:
  1016                           
  1017                           ; 1 bytes @ 0x30
  1018  000031                     	ds	3
  1019  000034                     ___ftadd@sign:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x33
  1023  000034                     	ds	1
  1024  000035                     ___ftadd@exp2:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x34
  1028  000035                     	ds	1
  1029  000036                     ___ftadd@exp1:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x35
  1033  000036                     	ds	1
  1034  000037                     ?___fttol:
  1035                           	opt stack 0
  1036  000037                     ___fttol@f1:
  1037                           	opt stack 0
  1038                           
  1039                           ; 3 bytes @ 0x36
  1040  000037                     	ds	4
  1041  00003B                     ??___fttol:
  1042                           
  1043                           ; 1 bytes @ 0x3A
  1044  00003B                     	ds	5
  1045  000040                     ___fttol@sign1:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x3F
  1049  000040                     	ds	1
  1050  000041                     ___fttol@lval:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x40
  1054  000041                     	ds	4
  1055  000045                     ___fttol@exp1:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x44
  1059  000045                     	ds	1
  1060  000046                     ?_angleToPulse:
  1061                           	opt stack 0
  1062  000046                     angleToPulse@angle:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x45
  1066  000046                     	ds	4
  1067  00004A                     ??_angleToPulse:
  1068                           
  1069                           ; 1 bytes @ 0x49
  1070  00004A                     	ds	4
  1071  00004E                     angleToPulse@offset:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x4D
  1075  00004E                     	ds	4
  1076  000052                     angleToPulse@a180:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x51
  1080  000052                     	ds	4
  1081  000056                     _angleToPulse$1199:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0x55
  1085  000056                     	ds	3
  1086  000059                     angleToPulse@a000:
  1087                           	opt stack 0
  1088                           
  1089                           ; 4 bytes @ 0x58
  1090  000059                     	ds	4
  1091  00005D                     setAngle@timer:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x5C
  1095  00005D                     	ds	2
  1096  00005F                     setAngle@angle:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x5E
  1100  00005F                     	ds	2
  1101  000061                     ??_setAngle:
  1102                           
  1103                           ; 1 bytes @ 0x60
  1104  000061                     	ds	6
  1105  000067                     ??_service:
  1106                           
  1107                           ; 1 bytes @ 0x66
  1108  000067                     	ds	14
  1109  000075                     service@key:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x74
  1113  000075                     	ds	1
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1l	equ	0xFE1
  1122                           
  1123 ;;
  1124 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1125 ;;
  1126 ;; *************** function _main *****************
  1127 ;; Defined at:
  1128 ;;		line 28 in file "main.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      void 
  1135 ;; Registers used:
  1136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;Total ram usage:        0 bytes
  1147 ;; Hardware stack levels required when called:   14
  1148 ;; This function calls:
  1149 ;;		_digitalWrite
  1150 ;;		_initLCD
  1151 ;;		_initRTC
  1152 ;;		_lcdClear
  1153 ;;		_pinSetup
  1154 ;;		_printf
  1155 ;;		_showInterface
  1156 ;; This function is called by:
  1157 ;;		Startup code after reset
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161                           	psect	text0
  1162  001760                     __ptext0:
  1163                           	opt stack 0
  1164  001760                     _main:
  1165                           	opt stack 17
  1166                           
  1167                           ;main.c: 29: pinSetup();
  1168                           
  1169                           ;incstack = 0
  1170  001760  EC44  F00C         	call	_pinSetup	;wreg free
  1171                           
  1172                           ;main.c: 30: initLCD();
  1173  001764  ECFC  F00B         	call	_initLCD	;wreg free
  1174                           
  1175                           ;main.c: 31: initRTC();
  1176  001768  EC58  F00D         	call	_initRTC	;wreg free
  1177                           
  1178                           ;main.c: 34: (INTCONbits.GIE = 0);
  1179                           
  1180                           ;main.c: 33: while(1){
  1181  00176C  9EF2               	bcf	intcon,7,c	;volatile
  1182                           
  1183                           ;main.c: 35: showInterface();
  1184  00176E  EC92  F005         	call	_showInterface	;wreg free
  1185                           
  1186                           ;main.c: 36: (INTCONbits.GIE = 1);
  1187  001772  8EF2               	bsf	intcon,7,c	;volatile
  1188                           
  1189                           ;main.c: 44: lcdClear();
  1190  001774  EC75  F00D         	call	_lcdClear	;wreg free
  1191                           
  1192                           ;main.c: 45: printf("starting");
  1193  001778  0EE9               	movlw	low STR_1
  1194  00177A  0100               	movlb	0	; () banked
  1195  00177C  6F96               	movwf	printf@f& (0+255),b
  1196  00177E  0EFF               	movlw	high STR_1
  1197  001780  0100               	movlb	0	; () banked
  1198  001782  6F97               	movwf	(printf@f+1)& (0+255),b
  1199  001784  EC09  F000         	call	_printf	;wreg free
  1200                           
  1201                           ;main.c: 46: digitalWrite(2,0,1);
  1202  001788  0E00               	movlw	0
  1203  00178A  0100               	movlb	0	; () banked
  1204  00178C  6F81               	movwf	(digitalWrite@port+1)& (0+255),b
  1205  00178E  0E02               	movlw	2
  1206  001790  6F80               	movwf	digitalWrite@port& (0+255),b
  1207  001792  0E00               	movlw	0
  1208  001794  0100               	movlb	0	; () banked
  1209  001796  6F83               	movwf	(digitalWrite@pin+1)& (0+255),b
  1210  001798  0E00               	movlw	0
  1211  00179A  6F82               	movwf	digitalWrite@pin& (0+255),b
  1212  00179C  0E00               	movlw	0
  1213  00179E  0100               	movlb	0	; () banked
  1214  0017A0  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  1215  0017A2  0E01               	movlw	1
  1216  0017A4  6F84               	movwf	digitalWrite@val& (0+255),b
  1217  0017A6  ECEC  F007         	call	_digitalWrite	;wreg free
  1218  0017AA                     l76:
  1219  0017AA  D7FF               	goto	l76
  1220  0017AC                     __end_of_main:
  1221                           	opt stack 0
  1222                           tblptru	equ	0xFF8
  1223                           tblptrh	equ	0xFF7
  1224                           tblptrl	equ	0xFF6
  1225                           tablat	equ	0xFF5
  1226                           intcon	equ	0xFF2
  1227                           postinc0	equ	0xFEE
  1228                           wreg	equ	0xFE8
  1229                           postdec1	equ	0xFE5
  1230                           fsr1l	equ	0xFE1
  1231                           
  1232 ;; *************** function _showInterface *****************
  1233 ;; Defined at:
  1234 ;;		line 89 in file "main.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  key             1   42[BANK0 ] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;Total ram usage:        1 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:   13
  1255 ;; This function calls:
  1256 ;;		_dateTime
  1257 ;;		_mainMenu
  1258 ;;		_readKeypad
  1259 ;;		_runMenu
  1260 ;;		_runSelect
  1261 ;;		_runStats
  1262 ;;		_runTime
  1263 ;; This function is called by:
  1264 ;;		_main
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text1
  1269  000B24                     __ptext1:
  1270                           	opt stack 0
  1271  000B24                     _showInterface:
  1272                           	opt stack 17
  1273  000B24                     
  1274                           ;main.c: 92: dateTime();
  1275  000B24  EC23  F00D         	call	_dateTime	;wreg free
  1276  000B28                     l3357:
  1277  000B28  EC99  F00C         	call	_readKeypad	;wreg free
  1278  000B2C  0A41               	xorlw	65
  1279  000B2E  A4D8               	btfss	status,2,c
  1280  000B30  D7FB               	goto	l3357
  1281  000B32                     l3359:
  1282                           
  1283                           ;main.c: 97: mainMenu();
  1284  000B32  EC10  F00D         	call	_mainMenu	;wreg free
  1285  000B36                     l3361:
  1286  000B36  EC99  F00C         	call	_readKeypad	;wreg free
  1287  000B3A  0100               	movlb	0	; () banked
  1288  000B3C  6FAA               	movwf	showInterface@key& (0+255),b
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 101: while(key != 'B' && key != 'C' && key != '*');
  1292  000B3E  0E42               	movlw	66
  1293  000B40  0100               	movlb	0	; () banked
  1294  000B42  19AA               	xorwf	showInterface@key& (0+255),w,b
  1295  000B44  B4D8               	btfsc	status,2,c
  1296  000B46  D00A               	goto	l3369
  1297                           
  1298                           ; BSR set to: 0
  1299  000B48  0E43               	movlw	67
  1300  000B4A  0100               	movlb	0	; () banked
  1301  000B4C  19AA               	xorwf	showInterface@key& (0+255),w,b
  1302  000B4E  B4D8               	btfsc	status,2,c
  1303  000B50  D005               	goto	l3369
  1304                           
  1305                           ; BSR set to: 0
  1306  000B52  0E2A               	movlw	42
  1307  000B54  0100               	movlb	0	; () banked
  1308  000B56  19AA               	xorwf	showInterface@key& (0+255),w,b
  1309  000B58  A4D8               	btfss	status,2,c
  1310  000B5A  D7ED               	goto	l3361
  1311  000B5C                     l3369:
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;main.c: 103: if(key == 'C'){
  1315  000B5C  0E43               	movlw	67
  1316  000B5E  0100               	movlb	0	; () banked
  1317  000B60  19AA               	xorwf	showInterface@key& (0+255),w,b
  1318  000B62  A4D8               	btfss	status,2,c
  1319  000B64  D056               	goto	l3413
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;main.c: 105: runSelect();
  1323  000B66  ECFD  F00C         	call	_runSelect	;wreg free
  1324  000B6A                     l3373:
  1325  000B6A  EC99  F00C         	call	_readKeypad	;wreg free
  1326  000B6E  0100               	movlb	0	; () banked
  1327  000B70  6FAA               	movwf	showInterface@key& (0+255),b
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;main.c: 111: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
  1331  000B72  0E31               	movlw	49
  1332  000B74  0100               	movlb	0	; () banked
  1333  000B76  19AA               	xorwf	showInterface@key& (0+255),w,b
  1334  000B78  B4D8               	btfsc	status,2,c
  1335  000B7A  D014               	goto	l3385
  1336                           
  1337                           ; BSR set to: 0
  1338  000B7C  0E32               	movlw	50
  1339  000B7E  0100               	movlb	0	; () banked
  1340  000B80  19AA               	xorwf	showInterface@key& (0+255),w,b
  1341  000B82  B4D8               	btfsc	status,2,c
  1342  000B84  D00F               	goto	l3385
  1343                           
  1344                           ; BSR set to: 0
  1345  000B86  0E33               	movlw	51
  1346  000B88  0100               	movlb	0	; () banked
  1347  000B8A  19AA               	xorwf	showInterface@key& (0+255),w,b
  1348  000B8C  B4D8               	btfsc	status,2,c
  1349  000B8E  D00A               	goto	l3385
  1350                           
  1351                           ; BSR set to: 0
  1352  000B90  0E34               	movlw	52
  1353  000B92  0100               	movlb	0	; () banked
  1354  000B94  19AA               	xorwf	showInterface@key& (0+255),w,b
  1355  000B96  B4D8               	btfsc	status,2,c
  1356  000B98  D005               	goto	l3385
  1357                           
  1358                           ; BSR set to: 0
  1359  000B9A  0E2A               	movlw	42
  1360  000B9C  0100               	movlb	0	; () banked
  1361  000B9E  19AA               	xorwf	showInterface@key& (0+255),w,b
  1362  000BA0  A4D8               	btfss	status,2,c
  1363  000BA2  D7E3               	goto	l3373
  1364  000BA4                     l3385:
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;main.c: 113: if(key == '*')continue;
  1368  000BA4  0E2A               	movlw	42
  1369  000BA6  0100               	movlb	0	; () banked
  1370  000BA8  19AA               	xorwf	showInterface@key& (0+255),w,b
  1371  000BAA  B4D8               	btfsc	status,2,c
  1372  000BAC  D7C2               	goto	l3359
  1373  000BAE                     l3389:
  1374                           
  1375                           ;main.c: 119: runMenu(key);
  1376  000BAE  0100               	movlb	0	; () banked
  1377  000BB0  51AA               	movf	showInterface@key& (0+255),w,b
  1378  000BB2  EC80  F00C         	call	_runMenu
  1379  000BB6                     l3391:
  1380  000BB6  EC99  F00C         	call	_readKeypad	;wreg free
  1381  000BBA  0100               	movlb	0	; () banked
  1382  000BBC  6FAA               	movwf	showInterface@key& (0+255),b
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 123: while(key != 'A' && key != 'B' && key != '*');
  1386  000BBE  0E41               	movlw	65
  1387  000BC0  0100               	movlb	0	; () banked
  1388  000BC2  19AA               	xorwf	showInterface@key& (0+255),w,b
  1389  000BC4  B4D8               	btfsc	status,2,c
  1390  000BC6  D00A               	goto	l3399
  1391                           
  1392                           ; BSR set to: 0
  1393  000BC8  0E42               	movlw	66
  1394  000BCA  0100               	movlb	0	; () banked
  1395  000BCC  19AA               	xorwf	showInterface@key& (0+255),w,b
  1396  000BCE  B4D8               	btfsc	status,2,c
  1397  000BD0  D005               	goto	l3399
  1398                           
  1399                           ; BSR set to: 0
  1400  000BD2  0E2A               	movlw	42
  1401  000BD4  0100               	movlb	0	; () banked
  1402  000BD6  19AA               	xorwf	showInterface@key& (0+255),w,b
  1403  000BD8  A4D8               	btfss	status,2,c
  1404  000BDA  D7ED               	goto	l3391
  1405  000BDC                     l3399:
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;main.c: 125: if(key == 'A'){
  1409  000BDC  0E41               	movlw	65
  1410  000BDE  0100               	movlb	0	; () banked
  1411  000BE0  19AA               	xorwf	showInterface@key& (0+255),w,b
  1412  000BE2  A4D8               	btfss	status,2,c
  1413  000BE4  D003               	goto	l3403
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;main.c: 127: runTime();
  1417  000BE6  ECD7  F00C         	call	_runTime	;wreg free
  1418                           
  1419                           ;main.c: 129: }
  1420  000BEA  D00D               	goto	l3411
  1421  000BEC                     l3403:
  1422                           
  1423                           ;main.c: 130: else if(key == 'B'){
  1424  000BEC  0E42               	movlw	66
  1425  000BEE  0100               	movlb	0	; () banked
  1426  000BF0  19AA               	xorwf	showInterface@key& (0+255),w,b
  1427  000BF2  A4D8               	btfss	status,2,c
  1428  000BF4  D003               	goto	l3407
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;main.c: 132: runStats();
  1432  000BF6  ECEA  F00C         	call	_runStats	;wreg free
  1433                           
  1434                           ;main.c: 134: }
  1435  000BFA  D005               	goto	l3411
  1436  000BFC                     l3407:
  1437                           
  1438                           ;main.c: 135: else if(key == '*')break;
  1439  000BFC  0E2A               	movlw	42
  1440  000BFE  0100               	movlb	0	; () banked
  1441  000C00  19AA               	xorwf	showInterface@key& (0+255),w,b
  1442  000C02  B4D8               	btfsc	status,2,c
  1443  000C04  D796               	goto	l3359
  1444  000C06                     l3411:
  1445  000C06  EC99  F00C         	call	_readKeypad	;wreg free
  1446  000C0A  0A2A               	xorlw	42
  1447  000C0C  B4D8               	btfsc	status,2,c
  1448  000C0E  D7CF               	goto	l3389
  1449  000C10  D7FA               	goto	l3411
  1450  000C12                     l3413:
  1451                           
  1452                           ;main.c: 141: else if(key == 'B'){
  1453  000C12  0E42               	movlw	66
  1454  000C14  0100               	movlb	0	; () banked
  1455  000C16  19AA               	xorwf	showInterface@key& (0+255),w,b
  1456  000C18  B4D8               	btfsc	status,2,c
  1457  000C1A  0012               	return	
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 144: else if(key == '*')
  1461                           
  1462                           ; BSR set to: 0
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;main.c: 143: }
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;main.c: 142: return;
  1469  000C1C  0E2A               	movlw	42
  1470  000C1E  0100               	movlb	0	; () banked
  1471  000C20  19AA               	xorwf	showInterface@key& (0+255),w,b
  1472  000C22  B4D8               	btfsc	status,2,c
  1473  000C24  D77F               	goto	l3355
  1474  000C26  D785               	goto	l3359
  1475  000C28                     __end_of_showInterface:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           intcon	equ	0xFF2
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1l	equ	0xFE1
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _runTime *****************
  1489 ;; Defined at:
  1490 ;;		line 36 in file "interface.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:   12
  1511 ;; This function calls:
  1512 ;;		_lcdClear
  1513 ;;		_printf
  1514 ;; This function is called by:
  1515 ;;		_showInterface
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text2
  1520  0019AE                     __ptext2:
  1521                           	opt stack 0
  1522  0019AE                     _runTime:
  1523                           	opt stack 17
  1524                           
  1525                           ;interface.c: 37: lcdClear();
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;incstack = 0
  1529  0019AE  EC75  F00D         	call	_lcdClear	;wreg free
  1530                           
  1531                           ;interface.c: 38: printf("time: nnn sec   \n");
  1532  0019B2  0E3C               	movlw	low STR_14
  1533  0019B4  0100               	movlb	0	; () banked
  1534  0019B6  6F96               	movwf	printf@f& (0+255),b
  1535  0019B8  0EFF               	movlw	high STR_14
  1536  0019BA  0100               	movlb	0	; () banked
  1537  0019BC  6F97               	movwf	(printf@f+1)& (0+255),b
  1538  0019BE  EC09  F000         	call	_printf	;wreg free
  1539                           
  1540                           ;interface.c: 39: printf("              *>");
  1541  0019C2  0E71               	movlw	low STR_15
  1542  0019C4  0100               	movlb	0	; () banked
  1543  0019C6  6F96               	movwf	printf@f& (0+255),b
  1544  0019C8  0EFF               	movlw	high STR_15
  1545  0019CA  0100               	movlb	0	; () banked
  1546  0019CC  6F97               	movwf	(printf@f+1)& (0+255),b
  1547  0019CE  EC09  F000         	call	_printf	;wreg free
  1548  0019D2  0012               	return		;funcret
  1549  0019D4                     __end_of_runTime:
  1550                           	opt stack 0
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           intcon	equ	0xFF2
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _runStats *****************
  1563 ;; Defined at:
  1564 ;;		line 42 in file "interface.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;		None
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;Total ram usage:        0 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:   12
  1585 ;; This function calls:
  1586 ;;		_lcdClear
  1587 ;;		_printf
  1588 ;; This function is called by:
  1589 ;;		_showInterface
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text3
  1594  0019D4                     __ptext3:
  1595                           	opt stack 0
  1596  0019D4                     _runStats:
  1597                           	opt stack 17
  1598                           
  1599                           ;interface.c: 43: lcdClear();
  1600                           
  1601                           ;incstack = 0
  1602  0019D4  EC75  F00D         	call	_lcdClear	;wreg free
  1603                           
  1604                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  1605  0019D8  0E4E               	movlw	low STR_16
  1606  0019DA  0100               	movlb	0	; () banked
  1607  0019DC  6F96               	movwf	printf@f& (0+255),b
  1608  0019DE  0EFF               	movlw	high STR_16
  1609  0019E0  0100               	movlb	0	; () banked
  1610  0019E2  6F97               	movwf	(printf@f+1)& (0+255),b
  1611  0019E4  EC09  F000         	call	_printf	;wreg free
  1612                           
  1613                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  1614  0019E8  0EB5               	movlw	low STR_17
  1615  0019EA  0100               	movlb	0	; () banked
  1616  0019EC  6F96               	movwf	printf@f& (0+255),b
  1617  0019EE  0EFF               	movlw	high STR_17
  1618  0019F0  0100               	movlb	0	; () banked
  1619  0019F2  6F97               	movwf	(printf@f+1)& (0+255),b
  1620  0019F4  EC09  F000         	call	_printf	;wreg free
  1621  0019F8  0012               	return		;funcret
  1622  0019FA                     __end_of_runStats:
  1623                           	opt stack 0
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           intcon	equ	0xFF2
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1l	equ	0xFE1
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _runSelect *****************
  1636 ;; Defined at:
  1637 ;;		line 24 in file "interface.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;Total ram usage:        0 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:   12
  1658 ;; This function calls:
  1659 ;;		_lcdClear
  1660 ;;		_printf
  1661 ;; This function is called by:
  1662 ;;		_showInterface
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text4
  1667  0019FA                     __ptext4:
  1668                           	opt stack 0
  1669  0019FA                     _runSelect:
  1670                           	opt stack 17
  1671                           
  1672                           ;interface.c: 25: lcdClear();
  1673                           
  1674                           ;incstack = 0
  1675  0019FA  EC75  F00D         	call	_lcdClear	;wreg free
  1676                           
  1677                           ;interface.c: 26: printf("select run:     \n");
  1678  0019FE  0E2A               	movlw	low STR_10
  1679  001A00  0100               	movlb	0	; () banked
  1680  001A02  6F96               	movwf	printf@f& (0+255),b
  1681  001A04  0EFF               	movlw	high STR_10
  1682  001A06  0100               	movlb	0	; () banked
  1683  001A08  6F97               	movwf	(printf@f+1)& (0+255),b
  1684  001A0A  EC09  F000         	call	_printf	;wreg free
  1685                           
  1686                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  1687  001A0E  0E82               	movlw	low STR_11
  1688  001A10  0100               	movlb	0	; () banked
  1689  001A12  6F96               	movwf	printf@f& (0+255),b
  1690  001A14  0EFF               	movlw	high STR_11
  1691  001A16  0100               	movlb	0	; () banked
  1692  001A18  6F97               	movwf	(printf@f+1)& (0+255),b
  1693  001A1A  EC09  F000         	call	_printf	;wreg free
  1694  001A1E  0012               	return		;funcret
  1695  001A20                     __end_of_runSelect:
  1696                           	opt stack 0
  1697                           tblptru	equ	0xFF8
  1698                           tblptrh	equ	0xFF7
  1699                           tblptrl	equ	0xFF6
  1700                           tablat	equ	0xFF5
  1701                           intcon	equ	0xFF2
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           postdec1	equ	0xFE5
  1705                           fsr1l	equ	0xFE1
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function _runMenu *****************
  1709 ;; Defined at:
  1710 ;;		line 30 in file "interface.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  key             1    wreg     unsigned char 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  key             1   41[BANK0 ] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;Total ram usage:        1 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:   12
  1731 ;; This function calls:
  1732 ;;		_lcdClear
  1733 ;;		_printf
  1734 ;; This function is called by:
  1735 ;;		_showInterface
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text5
  1740  001900                     __ptext5:
  1741                           	opt stack 0
  1742  001900                     _runMenu:
  1743                           	opt stack 17
  1744                           
  1745                           ;incstack = 0
  1746                           ;runMenu@key stored from wreg
  1747  001900  0100               	movlb	0	; () banked
  1748  001902  6FA9               	movwf	runMenu@key& (0+255),b
  1749                           
  1750                           ;interface.c: 31: lcdClear();
  1751  001904  EC75  F00D         	call	_lcdClear	;wreg free
  1752                           
  1753                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  1754  001908  0EF3               	movlw	low STR_12
  1755  00190A  0100               	movlb	0	; () banked
  1756  00190C  6F96               	movwf	printf@f& (0+255),b
  1757  00190E  0EFE               	movlw	high STR_12
  1758  001910  0100               	movlb	0	; () banked
  1759  001912  6F97               	movwf	(printf@f+1)& (0+255),b
  1760  001914  C0A9  F098         	movff	runMenu@key,?_printf+2
  1761  001918  0100               	movlb	0	; () banked
  1762  00191A  6B99               	clrf	(?_printf+3)& (0+255),b
  1763  00191C  EC09  F000         	call	_printf	;wreg free
  1764                           
  1765                           ;interface.c: 33: printf( "   stats <B   *>");
  1766  001920  0EA4               	movlw	low STR_13
  1767  001922  0100               	movlb	0	; () banked
  1768  001924  6F96               	movwf	printf@f& (0+255),b
  1769  001926  0EFF               	movlw	high STR_13
  1770  001928  0100               	movlb	0	; () banked
  1771  00192A  6F97               	movwf	(printf@f+1)& (0+255),b
  1772  00192C  EC09  F000         	call	_printf	;wreg free
  1773  001930  0012               	return		;funcret
  1774  001932                     __end_of_runMenu:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           intcon	equ	0xFF2
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1l	equ	0xFE1
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function _readKeypad *****************
  1788 ;; Defined at:
  1789 ;;		line 35 in file "keypad.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  key             1    0[BANK0 ] unsigned char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      unsigned char 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;Total ram usage:        1 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    7
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_showInterface
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text6
  1818  001932                     __ptext6:
  1819                           	opt stack 0
  1820  001932                     _readKeypad:
  1821                           	opt stack 22
  1822  001932                     l193:
  1823  001932  A281               	btfss	3969,1,c	;volatile
  1824  001934  D7FE               	goto	l193
  1825                           
  1826                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  1827  001936  3881               	swapf	3969,w,c	;volatile
  1828  001938  0B0F               	andlw	15
  1829  00193A  0B0F               	andlw	15
  1830  00193C  0100               	movlb	0	; () banked
  1831  00193E  6F80               	movwf	readKeypad@key& (0+255),b
  1832  001940                     l196:
  1833  001940  B281               	btfsc	3969,1,c	;volatile
  1834  001942  D7FE               	goto	l196
  1835                           
  1836                           ;keypad.c: 39: return keys[key];
  1837  001944  0100               	movlb	0	; () banked
  1838  001946  5180               	movf	readKeypad@key& (0+255),w,b
  1839  001948  0D01               	mullw	1
  1840  00194A  0EDB               	movlw	low _keys
  1841  00194C  24F3               	addwf	prodl,w,c
  1842  00194E  6EF6               	movwf	tblptrl,c
  1843  001950  0EFE               	movlw	high _keys
  1844  001952  20F4               	addwfc	prodh,w,c
  1845  001954  6EF7               	movwf	tblptrh,c
  1846  001956                     	if	0	;There are less than 3 active tblptr bytes
  1847  001956                     	endif
  1848  001956  0008               	tblrd		*
  1849  001958  50F5               	movf	tablat,w,c
  1850  00195A  0012               	return	
  1851  00195C                     __end_of_readKeypad:
  1852                           	opt stack 0
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           prodh	equ	0xFF4
  1858                           prodl	equ	0xFF3
  1859                           intcon	equ	0xFF2
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           postdec1	equ	0xFE5
  1863                           fsr1l	equ	0xFE1
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _mainMenu *****************
  1867 ;; Defined at:
  1868 ;;		line 18 in file "interface.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;Total ram usage:        0 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:   12
  1889 ;; This function calls:
  1890 ;;		_lcdClear
  1891 ;;		_printf
  1892 ;; This function is called by:
  1893 ;;		_showInterface
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           	psect	text7
  1898  001A20                     __ptext7:
  1899                           	opt stack 0
  1900  001A20                     _mainMenu:
  1901                           	opt stack 17
  1902                           
  1903                           ;interface.c: 19: lcdClear();
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;incstack = 0
  1907  001A20  EC75  F00D         	call	_lcdClear	;wreg free
  1908                           
  1909                           ;interface.c: 20: printf("start   <B      \n");
  1910  001A24  0E06               	movlw	low STR_8
  1911  001A26  0100               	movlb	0	; () banked
  1912  001A28  6F96               	movwf	printf@f& (0+255),b
  1913  001A2A  0EFF               	movlw	high STR_8
  1914  001A2C  0100               	movlb	0	; () banked
  1915  001A2E  6F97               	movwf	(printf@f+1)& (0+255),b
  1916  001A30  EC09  F000         	call	_printf	;wreg free
  1917                           
  1918                           ;interface.c: 21: printf("history <C    *>");
  1919  001A34  0E93               	movlw	low STR_9
  1920  001A36  0100               	movlb	0	; () banked
  1921  001A38  6F96               	movwf	printf@f& (0+255),b
  1922  001A3A  0EFF               	movlw	high STR_9
  1923  001A3C  0100               	movlb	0	; () banked
  1924  001A3E  6F97               	movwf	(printf@f+1)& (0+255),b
  1925  001A40  EC09  F000         	call	_printf	;wreg free
  1926  001A44  0012               	return		;funcret
  1927  001A46                     __end_of_mainMenu:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           prodh	equ	0xFF4
  1934                           prodl	equ	0xFF3
  1935                           intcon	equ	0xFF2
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1l	equ	0xFE1
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _dateTime *****************
  1943 ;; Defined at:
  1944 ;;		line 12 in file "interface.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:        0 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:   12
  1965 ;; This function calls:
  1966 ;;		_lcdClear
  1967 ;;		_printf
  1968 ;; This function is called by:
  1969 ;;		_showInterface
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text8
  1974  001A46                     __ptext8:
  1975                           	opt stack 0
  1976  001A46                     _dateTime:
  1977                           	opt stack 17
  1978                           
  1979                           ;interface.c: 13: lcdClear();
  1980                           
  1981                           ;incstack = 0
  1982  001A46  EC75  F00D         	call	_lcdClear	;wreg free
  1983                           
  1984                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  1985  001A4A  0E18               	movlw	low STR_6
  1986  001A4C  0100               	movlb	0	; () banked
  1987  001A4E  6F96               	movwf	printf@f& (0+255),b
  1988  001A50  0EFF               	movlw	high STR_6
  1989  001A52  0100               	movlb	0	; () banked
  1990  001A54  6F97               	movwf	(printf@f+1)& (0+255),b
  1991  001A56  EC09  F000         	call	_printf	;wreg free
  1992                           
  1993                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  1994  001A5A  0EC6               	movlw	low STR_7
  1995  001A5C  0100               	movlb	0	; () banked
  1996  001A5E  6F96               	movwf	printf@f& (0+255),b
  1997  001A60  0EFF               	movlw	high STR_7
  1998  001A62  0100               	movlb	0	; () banked
  1999  001A64  6F97               	movwf	(printf@f+1)& (0+255),b
  2000  001A66  EC09  F000         	call	_printf	;wreg free
  2001  001A6A  0012               	return		;funcret
  2002  001A6C                     __end_of_dateTime:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           prodh	equ	0xFF4
  2009                           prodl	equ	0xFF3
  2010                           intcon	equ	0xFF2
  2011                           postinc0	equ	0xFEE
  2012                           wreg	equ	0xFE8
  2013                           postdec1	equ	0xFE5
  2014                           fsr1l	equ	0xFE1
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function _printf *****************
  2018 ;; Defined at:
  2019 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  2022 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  2023 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  2024 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  2025 ;;		 -> STR_5(4), STR_4(9), STR_3(8), STR_2(9), 
  2026 ;;		 -> STR_1(9), 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  idx             1   30[BANK0 ] unsigned char 
  2029 ;;  val             4   35[BANK0 ] unsigned long 
  2030 ;;  tmpval          4    0        struct .
  2031 ;;  cp              3    0        PTR const unsigned char 
  2032 ;;  ap              2   33[BANK0 ] PTR void [1]
  2033 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2034 ;;  prec            2   31[BANK0 ] int 
  2035 ;;  len             2    0        unsigned int 
  2036 ;;  c               1   40[BANK0 ] char 
  2037 ;;  flag            1   39[BANK0 ] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  2   22[BANK0 ] int 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2047 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;Total ram usage:       19 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:   11
  2054 ;; This function calls:
  2055 ;;		___lldiv
  2056 ;;		___llmod
  2057 ;;		_putch
  2058 ;; This function is called by:
  2059 ;;		_main
  2060 ;;		_dateTime
  2061 ;;		_mainMenu
  2062 ;;		_runSelect
  2063 ;;		_runMenu
  2064 ;;		_runTime
  2065 ;;		_runStats
  2066 ;;		_testFrequency
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text9
  2071  000012                     __ptext9:
  2072                           	opt stack 0
  2073  000012                     _printf:
  2074                           	opt stack 17
  2075                           
  2076                           ;doprnt.c: 466: va_list ap;
  2077                           ;doprnt.c: 499: signed char c;
  2078                           ;doprnt.c: 504: int prec;
  2079                           ;doprnt.c: 508: unsigned char flag;
  2080                           ;doprnt.c: 523: union {
  2081                           ;doprnt.c: 524: unsigned long vd;
  2082                           ;doprnt.c: 525: double integ;
  2083                           ;doprnt.c: 526: } tmpval;
  2084                           ;doprnt.c: 528: unsigned long val;
  2085                           ;doprnt.c: 529: unsigned len;
  2086                           ;doprnt.c: 530: const char * cp;
  2087                           ;doprnt.c: 533: *ap = __va_start();
  2088                           
  2089                           ;incstack = 0
  2090  000012  0E98               	movlw	low (?_printf+2)
  2091  000014  0100               	movlb	0	; () banked
  2092  000016  6FA1               	movwf	printf@ap& (0+255),b
  2093  000018  0E00               	movlw	high (?_printf+2)
  2094  00001A  0100               	movlb	0	; () banked
  2095  00001C  6FA2               	movwf	(printf@ap+1)& (0+255),b
  2096                           
  2097                           ;doprnt.c: 536: while(c = *f++) {
  2098  00001E  D19D               	goto	l2799
  2099  000020                     l2703:
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;doprnt.c: 538: if(c != '%')
  2103  000020  0E25               	movlw	37
  2104  000022  0100               	movlb	0	; () banked
  2105  000024  19A8               	xorwf	printf@c& (0+255),w,b
  2106  000026  B4D8               	btfsc	status,2,c
  2107  000028  D005               	goto	l2707
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;doprnt.c: 540: {
  2111                           ;doprnt.c: 541: (putch(c) );
  2112  00002A  0100               	movlb	0	; () banked
  2113  00002C  51A8               	movf	printf@c& (0+255),w,b
  2114  00002E  ECC3  F00C         	call	_putch
  2115                           
  2116                           ;doprnt.c: 542: continue;
  2117  000032  D193               	goto	l2799
  2118  000034                     l2707:
  2119                           
  2120                           ;doprnt.c: 543: }
  2121                           ;doprnt.c: 548: flag = 0;
  2122  000034  0E00               	movlw	0
  2123  000036  0100               	movlb	0	; () banked
  2124  000038  6FA7               	movwf	printf@flag& (0+255),b
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;doprnt.c: 635: switch(c = *f++) {
  2128                           
  2129                           ;doprnt.c: 633: loop:
  2130  00003A  D017               	goto	l2721
  2131  00003C                     l2709:
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;doprnt.c: 643: flag |= 0x10;
  2135  00003C  0100               	movlb	0	; () banked
  2136  00003E  89A7               	bsf	printf@flag& (0+255),4,b
  2137                           
  2138                           ;doprnt.c: 644: goto loop;
  2139  000040  D014               	goto	l2721
  2140  000042                     l2711:
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;doprnt.c: 721: flag |= 0x80;
  2144  000042  0100               	movlb	0	; () banked
  2145  000044  8FA7               	bsf	printf@flag& (0+255),7,b
  2146                           
  2147                           ;doprnt.c: 723: break;
  2148  000046  D030               	goto	l567
  2149  000048                     l2713:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2153  000048  C0A1  FFD9         	movff	printf@ap,fsr2l
  2154  00004C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2155  000050  50DF               	movf	indf2,w,c
  2156  000052  0100               	movlb	0	; () banked
  2157  000054  6FA8               	movwf	printf@c& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160  000056  0E02               	movlw	2
  2161  000058  0100               	movlb	0	; () banked
  2162  00005A  27A1               	addwf	printf@ap& (0+255),f,b
  2163  00005C  0E00               	movlw	0
  2164  00005E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2165  000060                     l2717:
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 809: (putch(c) );
  2169  000060  0100               	movlb	0	; () banked
  2170  000062  51A8               	movf	printf@c& (0+255),w,b
  2171  000064  ECC3  F00C         	call	_putch
  2172                           
  2173                           ;doprnt.c: 810: continue;
  2174  000068  D178               	goto	l2799
  2175  00006A                     l2721:
  2176  00006A  C096  FFF6         	movff	printf@f,tblptrl
  2177  00006E  C097  FFF7         	movff	printf@f+1,tblptrh
  2178  000072  0100               	movlb	0	; () banked
  2179  000074  4B96               	infsnz	printf@f& (0+255),f,b
  2180  000076  2B97               	incf	(printf@f+1)& (0+255),f,b
  2181  000078                     	if	0	;tblptru may be non-zero
  2182  000078                     	endif
  2183  000078                     	if	0	;tblptru may be non-zero
  2184  000078                     	endif
  2185  000078  0008               	tblrd		*
  2186  00007A  CFF5 F0A8          	movff	tablat,printf@c
  2187  00007E  0100               	movlb	0	; () banked
  2188  000080  51A8               	movf	printf@c& (0+255),w,b
  2189                           
  2190                           ; Switch size 1, requested type "space"
  2191                           ; Number of cases is 6, Range of values is 0 to 120
  2192                           ; switch strategies available:
  2193                           ; Name         Instructions Cycles
  2194                           ; simple_byte           19    10 (average)
  2195                           ;	Chosen strategy is simple_byte
  2196  000082  0A00               	xorlw	0	; case 0
  2197  000084  B4D8               	btfsc	status,2,c
  2198  000086  0012               	return	
  2199  000088  0A63               	xorlw	99	; case 99
  2200  00008A  B4D8               	btfsc	status,2,c
  2201  00008C  D7DD               	goto	l2713
  2202  00008E  0A07               	xorlw	7	; case 100
  2203  000090  B4D8               	btfsc	status,2,c
  2204  000092  D00A               	goto	l567
  2205  000094  0A0D               	xorlw	13	; case 105
  2206  000096  B4D8               	btfsc	status,2,c
  2207  000098  D007               	goto	l567
  2208  00009A  0A05               	xorlw	5	; case 108
  2209  00009C  B4D8               	btfsc	status,2,c
  2210  00009E  D7CE               	goto	l2709
  2211  0000A0  0A14               	xorlw	20	; case 120
  2212  0000A2  B4D8               	btfsc	status,2,c
  2213  0000A4  D7CE               	goto	l2711
  2214  0000A6  D7DC               	goto	l2717
  2215  0000A8                     l567:
  2216                           
  2217                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2218  0000A8  0100               	movlb	0	; () banked
  2219  0000AA  BFA7               	btfsc	printf@flag& (0+255),7,b
  2220  0000AC  D034               	goto	l571
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;doprnt.c: 1253: {
  2224                           ;doprnt.c: 1255: if(flag & 0x10)
  2225  0000AE  0100               	movlb	0	; () banked
  2226  0000B0  A9A7               	btfss	printf@flag& (0+255),4,b
  2227  0000B2  D00E               	goto	l2729
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2231  0000B4  C0A1  FFD9         	movff	printf@ap,fsr2l
  2232  0000B8  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2233  0000BC  CFDE F0A3          	movff	postinc2,printf@val
  2234  0000C0  CFDE F0A4          	movff	postinc2,printf@val+1
  2235  0000C4  CFDE F0A5          	movff	postinc2,printf@val+2
  2236  0000C8  CFDE F0A6          	movff	postinc2,printf@val+3
  2237                           
  2238                           ; BSR set to: 0
  2239  0000CC  0E04               	movlw	4
  2240  0000CE  D00F               	goto	L1
  2241  0000D0                     l2729:
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;doprnt.c: 1257: else
  2245                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2246  0000D0  C0A1  FFD9         	movff	printf@ap,fsr2l
  2247  0000D4  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2248  0000D8  CFDE F0A3          	movff	postinc2,printf@val
  2249  0000DC  CFDD F0A4          	movff	postdec2,printf@val+1
  2250  0000E0  0100               	movlb	0	; () banked
  2251  0000E2  0E00               	movlw	0
  2252  0000E4  BFA4               	btfsc	(printf@val+1)& (0+255),7,b
  2253  0000E6  0EFF               	movlw	-1
  2254  0000E8  6FA5               	movwf	(printf@val+2)& (0+255),b
  2255  0000EA  6FA6               	movwf	(printf@val+3)& (0+255),b
  2256                           
  2257                           ; BSR set to: 0
  2258  0000EC  0E02               	movlw	2
  2259  0000EE                     L1:
  2260  0000EE  0100               	movlb	0	; () banked
  2261  0000F0  27A1               	addwf	printf@ap& (0+255),f,b
  2262  0000F2  0E00               	movlw	0
  2263  0000F4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;doprnt.c: 1261: if((long)val < 0) {
  2267                           
  2268                           ; BSR set to: 0
  2269  0000F6  0100               	movlb	0	; () banked
  2270  0000F8  AFA6               	btfss	(printf@val+3)& (0+255),7,b
  2271  0000FA  D07F               	goto	l2777
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;doprnt.c: 1262: flag |= 0x03;
  2275  0000FC  0E03               	movlw	3
  2276  0000FE  0100               	movlb	0	; () banked
  2277  000100  13A7               	iorwf	printf@flag& (0+255),f,b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;doprnt.c: 1263: val = -val;
  2281  000102  0100               	movlb	0	; () banked
  2282  000104  1FA6               	comf	(printf@val+3)& (0+255),f,b
  2283  000106  1FA5               	comf	(printf@val+2)& (0+255),f,b
  2284  000108  1FA4               	comf	(printf@val+1)& (0+255),f,b
  2285  00010A  6DA3               	negf	printf@val& (0+255),b
  2286  00010C  0E00               	movlw	0
  2287  00010E  23A4               	addwfc	(printf@val+1)& (0+255),f,b
  2288  000110  23A5               	addwfc	(printf@val+2)& (0+255),f,b
  2289  000112  23A6               	addwfc	(printf@val+3)& (0+255),f,b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;doprnt.c: 1264: }
  2293                           ;doprnt.c: 1266: }
  2294  000114  D072               	goto	l2777
  2295  000116                     l571:
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;doprnt.c: 1268: else
  2299                           ;doprnt.c: 1273: {
  2300                           ;doprnt.c: 1281: if(flag & 0x10)
  2301  000116  0100               	movlb	0	; () banked
  2302  000118  A9A7               	btfss	printf@flag& (0+255),4,b
  2303  00011A  D00E               	goto	l2743
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2307  00011C  C0A1  FFD9         	movff	printf@ap,fsr2l
  2308  000120  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2309  000124  CFDE F0A3          	movff	postinc2,printf@val
  2310  000128  CFDE F0A4          	movff	postinc2,printf@val+1
  2311  00012C  CFDE F0A5          	movff	postinc2,printf@val+2
  2312  000130  CFDE F0A6          	movff	postinc2,printf@val+3
  2313                           
  2314                           ; BSR set to: 0
  2315  000134  0E04               	movlw	4
  2316  000136  D010               	goto	L2
  2317  000138                     l2743:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;doprnt.c: 1283: else
  2321                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2322  000138  C0A1  FFD9         	movff	printf@ap,fsr2l
  2323  00013C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2324  000140  CFDE F09C          	movff	postinc2,??_printf
  2325  000144  CFDD F09D          	movff	postdec2,??_printf+1
  2326  000148  C09C  F0A3         	movff	??_printf,printf@val
  2327  00014C  C09D  F0A4         	movff	??_printf+1,printf@val+1
  2328  000150  0100               	movlb	0	; () banked
  2329  000152  6BA5               	clrf	(printf@val+2)& (0+255),b
  2330  000154  6BA6               	clrf	(printf@val+3)& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333  000156  0E02               	movlw	2
  2334  000158                     L2:
  2335  000158  0100               	movlb	0	; () banked
  2336  00015A  27A1               	addwf	printf@ap& (0+255),f,b
  2337  00015C  0E00               	movlw	0
  2338  00015E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;doprnt.c: 1287: }
  2342                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2343                           
  2344                           ; BSR set to: 0
  2345  000160  D04C               	goto	l2777
  2346  000162                     l2747:
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2350  000162  0E01               	movlw	1
  2351  000164  0100               	movlb	0	; () banked
  2352  000166  6FA8               	movwf	printf@c& (0+255),b
  2353  000168                     l2749:
  2354                           
  2355                           ; BSR set to: 0
  2356  000168  0E0A               	movlw	10
  2357  00016A  0100               	movlb	0	; () banked
  2358  00016C  19A8               	xorwf	printf@c& (0+255),w,b
  2359  00016E  B4D8               	btfsc	status,2,c
  2360  000170  D04D               	goto	l2779
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;doprnt.c: 1306: if(val < dpowers[c])
  2364                           
  2365                           ; BSR set to: 0
  2366                           
  2367                           ; BSR set to: 0
  2368  000172  0100               	movlb	0	; () banked
  2369  000174  51A8               	movf	printf@c& (0+255),w,b
  2370  000176  0D04               	mullw	4
  2371  000178  0E93               	movlw	low _dpowers
  2372  00017A  24F3               	addwf	prodl,w,c
  2373  00017C  6EF6               	movwf	tblptrl,c
  2374  00017E  0EFE               	movlw	high _dpowers
  2375  000180  20F4               	addwfc	prodh,w,c
  2376  000182  6EF7               	movwf	tblptrh,c
  2377  000184                     	if	0	;There are less than 3 active tblptr bytes
  2378  000184                     	endif
  2379  000184  0009               	tblrd		*+
  2380  000186  50F5               	movf	tablat,w,c
  2381  000188  0100               	movlb	0	; () banked
  2382  00018A  5DA3               	subwf	printf@val& (0+255),w,b
  2383  00018C  0009               	tblrd		*+
  2384  00018E  50F5               	movf	tablat,w,c
  2385  000190  0100               	movlb	0	; () banked
  2386  000192  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  2387  000194  0009               	tblrd		*+
  2388  000196  50F5               	movf	tablat,w,c
  2389  000198  0100               	movlb	0	; () banked
  2390  00019A  59A5               	subwfb	(printf@val+2)& (0+255),w,b
  2391  00019C  0009               	tblrd		*+
  2392  00019E  50F5               	movf	tablat,w,c
  2393  0001A0  0100               	movlb	0	; () banked
  2394  0001A2  59A6               	subwfb	(printf@val+3)& (0+255),w,b
  2395  0001A4  A0D8               	btfss	status,0,c
  2396  0001A6  D032               	goto	l2779
  2397                           
  2398                           ; BSR set to: 0
  2399                           
  2400                           ; BSR set to: 0
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;doprnt.c: 1307: break;
  2404  0001A8  0100               	movlb	0	; () banked
  2405  0001AA  2BA8               	incf	printf@c& (0+255),f,b
  2406  0001AC  D7DD               	goto	l2749
  2407  0001AE                     l2761:
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2411  0001AE  0E01               	movlw	1
  2412  0001B0  0100               	movlb	0	; () banked
  2413  0001B2  6FA8               	movwf	printf@c& (0+255),b
  2414  0001B4                     l2763:
  2415                           
  2416                           ; BSR set to: 0
  2417  0001B4  0E08               	movlw	8
  2418  0001B6  0100               	movlb	0	; () banked
  2419  0001B8  19A8               	xorwf	printf@c& (0+255),w,b
  2420  0001BA  B4D8               	btfsc	status,2,c
  2421  0001BC  D027               	goto	l2779
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2425                           
  2426                           ; BSR set to: 0
  2427                           
  2428                           ; BSR set to: 0
  2429  0001BE  0100               	movlb	0	; () banked
  2430  0001C0  51A8               	movf	printf@c& (0+255),w,b
  2431  0001C2  0D04               	mullw	4
  2432  0001C4  0EBB               	movlw	low _hexpowers
  2433  0001C6  24F3               	addwf	prodl,w,c
  2434  0001C8  6EF6               	movwf	tblptrl,c
  2435  0001CA  0EFE               	movlw	high _hexpowers
  2436  0001CC  20F4               	addwfc	prodh,w,c
  2437  0001CE  6EF7               	movwf	tblptrh,c
  2438  0001D0                     	if	0	;There are less than 3 active tblptr bytes
  2439  0001D0                     	endif
  2440  0001D0  0009               	tblrd		*+
  2441  0001D2  50F5               	movf	tablat,w,c
  2442  0001D4  0100               	movlb	0	; () banked
  2443  0001D6  5DA3               	subwf	printf@val& (0+255),w,b
  2444  0001D8  0009               	tblrd		*+
  2445  0001DA  50F5               	movf	tablat,w,c
  2446  0001DC  0100               	movlb	0	; () banked
  2447  0001DE  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  2448  0001E0  0009               	tblrd		*+
  2449  0001E2  50F5               	movf	tablat,w,c
  2450  0001E4  0100               	movlb	0	; () banked
  2451  0001E6  59A5               	subwfb	(printf@val+2)& (0+255),w,b
  2452  0001E8  0009               	tblrd		*+
  2453  0001EA  50F5               	movf	tablat,w,c
  2454  0001EC  0100               	movlb	0	; () banked
  2455  0001EE  59A6               	subwfb	(printf@val+3)& (0+255),w,b
  2456  0001F0  A0D8               	btfss	status,0,c
  2457  0001F2  D00C               	goto	l2779
  2458                           
  2459                           ; BSR set to: 0
  2460                           
  2461                           ; BSR set to: 0
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 1318: break;
  2465  0001F4  0100               	movlb	0	; () banked
  2466  0001F6  2BA8               	incf	printf@c& (0+255),f,b
  2467  0001F8  D7DD               	goto	l2763
  2468  0001FA                     l2777:
  2469                           
  2470                           ; BSR set to: 0
  2471  0001FA  0100               	movlb	0	; () banked
  2472  0001FC  51A7               	movf	printf@flag& (0+255),w,b
  2473  0001FE  0B80               	andlw	128
  2474                           
  2475                           ; Switch size 1, requested type "space"
  2476                           ; Number of cases is 2, Range of values is 0 to 128
  2477                           ; switch strategies available:
  2478                           ; Name         Instructions Cycles
  2479                           ; simple_byte            7     4 (average)
  2480                           ;	Chosen strategy is simple_byte
  2481  000200  0A00               	xorlw	0	; case 0
  2482  000202  B4D8               	btfsc	status,2,c
  2483  000204  D7AE               	goto	l2747
  2484  000206  0A80               	xorlw	128	; case 128
  2485  000208  B4D8               	btfsc	status,2,c
  2486  00020A  D7D1               	goto	l2761
  2487  00020C                     l2779:
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;doprnt.c: 1422: {
  2491                           ;doprnt.c: 1438: if(flag & 0x03)
  2492  00020C  C0A7  F09C         	movff	printf@flag,??_printf
  2493  000210  0E03               	movlw	3
  2494  000212  0100               	movlb	0	; () banked
  2495  000214  179C               	andwf	??_printf& (0+255),f,b
  2496  000216  B4D8               	btfsc	status,2,c
  2497  000218  D003               	goto	l2783
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;doprnt.c: 1439: (putch('-') );
  2501  00021A  0E2D               	movlw	45
  2502  00021C  ECC3  F00C         	call	_putch
  2503  000220                     l2783:
  2504                           
  2505                           ;doprnt.c: 1469: }
  2506                           ;doprnt.c: 1472: prec = c;
  2507  000220  0100               	movlb	0	; () banked
  2508  000222  51A8               	movf	printf@c& (0+255),w,b
  2509  000224  0100               	movlb	0	; () banked
  2510  000226  6F9F               	movwf	printf@prec& (0+255),b
  2511  000228  6BA0               	clrf	(printf@prec+1)& (0+255),b
  2512  00022A  BF9F               	btfsc	printf@prec& (0+255),7,b
  2513  00022C  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2514                           
  2515                           ;doprnt.c: 1474: while(prec--) {
  2516  00022E  D08A               	goto	l2797
  2517  000230                     l2785:
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2521  000230  C09F  F09C         	movff	printf@prec,??_printf
  2522  000234  C0A0  F09D         	movff	printf@prec+1,??_printf+1
  2523  000238  0100               	movlb	0	; () banked
  2524  00023A  90D8               	bcf	status,0,c
  2525  00023C  379C               	rlcf	??_printf& (0+255),f,b
  2526  00023E  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2527  000240  0100               	movlb	0	; () banked
  2528  000242  90D8               	bcf	status,0,c
  2529  000244  379C               	rlcf	??_printf& (0+255),f,b
  2530  000246  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2531  000248  0E93               	movlw	low _dpowers
  2532  00024A  0100               	movlb	0	; () banked
  2533  00024C  259C               	addwf	??_printf& (0+255),w,b
  2534  00024E  6EF6               	movwf	tblptrl,c
  2535  000250  0EFE               	movlw	high _dpowers
  2536  000252  219D               	addwfc	(??_printf+1)& (0+255),w,b
  2537  000254  6EF7               	movwf	tblptrh,c
  2538  000256                     	if	0	;There are less than 3 active tblptr bytes
  2539  000256                     	endif
  2540  000256  0009               	tblrd		*+
  2541  000258  CFF5 F084          	movff	tablat,___lldiv@divisor
  2542  00025C  0009               	tblrd		*+
  2543  00025E  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2544  000262  0009               	tblrd		*+
  2545  000264  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2546  000268  000A               	tblrd		*-
  2547  00026A  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2548  00026E  C0A3  F080         	movff	printf@val,___lldiv@dividend
  2549  000272  C0A4  F081         	movff	printf@val+1,___lldiv@dividend+1
  2550  000276  C0A5  F082         	movff	printf@val+2,___lldiv@dividend+2
  2551  00027A  C0A6  F083         	movff	printf@val+3,___lldiv@dividend+3
  2552  00027E  EC5C  F008         	call	___lldiv	;wreg free
  2553  000282  C080  F08D         	movff	?___lldiv,___llmod@dividend
  2554  000286  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  2555  00028A  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  2556  00028E  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  2557  000292  0E0A               	movlw	10
  2558  000294  0100               	movlb	0	; () banked
  2559  000296  6F91               	movwf	___llmod@divisor& (0+255),b
  2560  000298  0E00               	movlw	0
  2561  00029A  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  2562  00029C  0E00               	movlw	0
  2563  00029E  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  2564  0002A0  0E00               	movlw	0
  2565  0002A2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  2566  0002A4  EC14  F00A         	call	___llmod	;wreg free
  2567  0002A8  0100               	movlb	0	; () banked
  2568  0002AA  518D               	movf	?___llmod& (0+255),w,b
  2569  0002AC  0F30               	addlw	48
  2570  0002AE  0100               	movlb	0	; () banked
  2571  0002B0  6FA8               	movwf	printf@c& (0+255),b
  2572                           
  2573                           ;doprnt.c: 1491: break;
  2574  0002B2  D044               	goto	l2795
  2575  0002B4                     l2787:
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;doprnt.c: 1499: {
  2579                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2580  0002B4  C0A3  F080         	movff	printf@val,___lldiv@dividend
  2581  0002B8  C0A4  F081         	movff	printf@val+1,___lldiv@dividend+1
  2582  0002BC  C0A5  F082         	movff	printf@val+2,___lldiv@dividend+2
  2583  0002C0  C0A6  F083         	movff	printf@val+3,___lldiv@dividend+3
  2584  0002C4  C09F  F09C         	movff	printf@prec,??_printf
  2585  0002C8  C0A0  F09D         	movff	printf@prec+1,??_printf+1
  2586  0002CC  0100               	movlb	0	; () banked
  2587  0002CE  90D8               	bcf	status,0,c
  2588  0002D0  379C               	rlcf	??_printf& (0+255),f,b
  2589  0002D2  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2590  0002D4  0100               	movlb	0	; () banked
  2591  0002D6  90D8               	bcf	status,0,c
  2592  0002D8  379C               	rlcf	??_printf& (0+255),f,b
  2593  0002DA  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2594  0002DC  0EBB               	movlw	low _hexpowers
  2595  0002DE  0100               	movlb	0	; () banked
  2596  0002E0  259C               	addwf	??_printf& (0+255),w,b
  2597  0002E2  6EF6               	movwf	tblptrl,c
  2598  0002E4  0EFE               	movlw	high _hexpowers
  2599  0002E6  219D               	addwfc	(??_printf+1)& (0+255),w,b
  2600  0002E8  6EF7               	movwf	tblptrh,c
  2601  0002EA                     	if	0	;There are less than 3 active tblptr bytes
  2602  0002EA                     	endif
  2603  0002EA  0009               	tblrd		*+
  2604  0002EC  CFF5 F084          	movff	tablat,___lldiv@divisor
  2605  0002F0  0009               	tblrd		*+
  2606  0002F2  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2607  0002F6  0009               	tblrd		*+
  2608  0002F8  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2609  0002FC  000A               	tblrd		*-
  2610  0002FE  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2611  000302  EC5C  F008         	call	___lldiv	;wreg free
  2612  000306  0100               	movlb	0	; () banked
  2613  000308  5180               	movf	?___lldiv& (0+255),w,b
  2614  00030A  0B0F               	andlw	15
  2615  00030C  0100               	movlb	0	; () banked
  2616  00030E  6F9E               	movwf	printf@idx& (0+255),b
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2620  000310  0100               	movlb	0	; () banked
  2621  000312  519E               	movf	printf@idx& (0+255),w,b
  2622  000314  0D01               	mullw	1
  2623  000316  0E60               	movlw	low STR_18
  2624  000318  24F3               	addwf	prodl,w,c
  2625  00031A  6EF6               	movwf	tblptrl,c
  2626  00031C  0EFF               	movlw	high STR_18
  2627  00031E  20F4               	addwfc	prodh,w,c
  2628  000320  6EF7               	movwf	tblptrh,c
  2629  000322                     	if	0	;There are less than 3 active tblptr bytes
  2630  000322                     	endif
  2631  000322  0008               	tblrd		*
  2632  000324  CFF5 F0A8          	movff	tablat,printf@c
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;doprnt.c: 1523: }
  2636                           
  2637                           ;doprnt.c: 1508: }
  2638                           ;doprnt.c: 1510: break;
  2639  000328  D009               	goto	l2795
  2640  00032A                     l2793:
  2641                           
  2642                           ; BSR set to: 0
  2643  00032A  0100               	movlb	0	; () banked
  2644  00032C  51A7               	movf	printf@flag& (0+255),w,b
  2645  00032E  0B80               	andlw	128
  2646                           
  2647                           ; Switch size 1, requested type "space"
  2648                           ; Number of cases is 2, Range of values is 0 to 128
  2649                           ; switch strategies available:
  2650                           ; Name         Instructions Cycles
  2651                           ; simple_byte            7     4 (average)
  2652                           ;	Chosen strategy is simple_byte
  2653  000330  0A00               	xorlw	0	; case 0
  2654  000332  B4D8               	btfsc	status,2,c
  2655  000334  D77D               	goto	l2785
  2656  000336  0A80               	xorlw	128	; case 128
  2657  000338  B4D8               	btfsc	status,2,c
  2658  00033A  D7BC               	goto	l2787
  2659  00033C                     l2795:
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;doprnt.c: 1524: (putch(c) );
  2663  00033C  0100               	movlb	0	; () banked
  2664  00033E  51A8               	movf	printf@c& (0+255),w,b
  2665  000340  ECC3  F00C         	call	_putch
  2666  000344                     l2797:
  2667  000344  0100               	movlb	0	; () banked
  2668  000346  079F               	decf	printf@prec& (0+255),f,b
  2669  000348  A0D8               	btfss	status,0,c
  2670  00034A  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2671  00034C  0100               	movlb	0	; () banked
  2672  00034E  299F               	incf	printf@prec& (0+255),w,b
  2673  000350  E1EC               	bnz	l2793
  2674  000352  0100               	movlb	0	; () banked
  2675  000354  29A0               	incf	(printf@prec+1)& (0+255),w,b
  2676  000356  A4D8               	btfss	status,2,c
  2677  000358  D7E8               	goto	l2793
  2678  00035A                     l2799:
  2679  00035A  C096  FFF6         	movff	printf@f,tblptrl
  2680  00035E  C097  FFF7         	movff	printf@f+1,tblptrh
  2681  000362  0100               	movlb	0	; () banked
  2682  000364  4B96               	infsnz	printf@f& (0+255),f,b
  2683  000366  2B97               	incf	(printf@f+1)& (0+255),f,b
  2684  000368                     	if	0	;tblptru may be non-zero
  2685  000368                     	endif
  2686  000368                     	if	0	;tblptru may be non-zero
  2687  000368                     	endif
  2688  000368  0008               	tblrd		*
  2689  00036A  CFF5 F0A8          	movff	tablat,printf@c
  2690  00036E  0100               	movlb	0	; () banked
  2691  000370  51A8               	movf	printf@c& (0+255),w,b
  2692  000372  B4D8               	btfsc	status,2,c
  2693  000374  0012               	return	
  2694  000376  D654               	goto	l2703
  2695  000378                     __end_of_printf:
  2696                           	opt stack 0
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           prodh	equ	0xFF4
  2702                           prodl	equ	0xFF3
  2703                           intcon	equ	0xFF2
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postdec1	equ	0xFE5
  2707                           fsr1l	equ	0xFE1
  2708                           indf2	equ	0xFDF
  2709                           postinc2	equ	0xFDE
  2710                           postdec2	equ	0xFDD
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _putch *****************
  2716 ;; Defined at:
  2717 ;;		line 35 in file "lcd.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  data            1    wreg     unsigned char 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  data            1    4[BANK0 ] unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        1 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:   10
  2738 ;; This function calls:
  2739 ;;		_lcdNewline
  2740 ;;		_lcdNibble
  2741 ;; This function is called by:
  2742 ;;		_printf
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text10
  2747  001986                     __ptext10:
  2748                           	opt stack 0
  2749  001986                     _putch:
  2750                           	opt stack 17
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;incstack = 0
  2754                           ;putch@data stored from wreg
  2755  001986  0100               	movlb	0	; () banked
  2756  001988  6F84               	movwf	putch@data& (0+255),b
  2757                           
  2758                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  2759  00198A  0E0A               	movlw	10
  2760  00198C  0100               	movlb	0	; () banked
  2761  00198E  1984               	xorwf	putch@data& (0+255),w,b
  2762  001990  A4D8               	btfss	status,2,c
  2763  001992  D003               	goto	l159
  2764                           
  2765                           ; BSR set to: 0
  2766  001994  EC71  F00D         	call	_lcdNewline	;wreg free
  2767  001998  0012               	return	
  2768  00199A                     l159:
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;lcd.c: 37: else
  2772                           ;lcd.c: 38: {
  2773                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  2774  00199A  848C               	bsf	3980,2,c	;volatile
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  2778  00199C  0E74               	movlw	116
  2779  00199E                     u3277:
  2780  00199E  2EE8               	decfsz	wreg,f,c
  2781  0019A0  D7FE               	bra	u3277
  2782  0019A2  D000               	nop2	
  2783                           
  2784                           ;lcd.c: 41: lcdNibble(data);
  2785  0019A4  0100               	movlb	0	; () banked
  2786  0019A6  5184               	movf	putch@data& (0+255),w,b
  2787  0019A8  ECA2  F00A         	call	_lcdNibble
  2788  0019AC  0012               	return	
  2789  0019AE                     __end_of_putch:
  2790                           	opt stack 0
  2791                           tblptru	equ	0xFF8
  2792                           tblptrh	equ	0xFF7
  2793                           tblptrl	equ	0xFF6
  2794                           tablat	equ	0xFF5
  2795                           prodh	equ	0xFF4
  2796                           prodl	equ	0xFF3
  2797                           intcon	equ	0xFF2
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           postdec1	equ	0xFE5
  2801                           fsr1l	equ	0xFE1
  2802                           indf2	equ	0xFDF
  2803                           postinc2	equ	0xFDE
  2804                           postdec2	equ	0xFDD
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _lcdNewline *****************
  2810 ;; Defined at:
  2811 ;;		line 78 in file "lcd.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;		None
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;Total ram usage:        0 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    9
  2832 ;; This function calls:
  2833 ;;		_lcdInst
  2834 ;; This function is called by:
  2835 ;;		_putch
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text11
  2840  001AE2                     __ptext11:
  2841                           	opt stack 0
  2842  001AE2                     _lcdNewline:
  2843                           	opt stack 17
  2844                           
  2845                           ;lcd.c: 79: lcdInst(0b11000000);
  2846                           
  2847                           ;incstack = 0
  2848  001AE2  0EC0               	movlw	192
  2849  001AE4  ECAE  F00C         	call	_lcdInst
  2850  001AE8  0012               	return		;funcret
  2851  001AEA                     __end_of_lcdNewline:
  2852                           	opt stack 0
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           prodh	equ	0xFF4
  2858                           prodl	equ	0xFF3
  2859                           intcon	equ	0xFF2
  2860                           postinc0	equ	0xFEE
  2861                           wreg	equ	0xFE8
  2862                           postdec1	equ	0xFE5
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           postinc2	equ	0xFDE
  2866                           postdec2	equ	0xFDD
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function ___llmod *****************
  2872 ;; Defined at:
  2873 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  dividend        4   13[BANK0 ] unsigned long 
  2876 ;;  divisor         4   17[BANK0 ] unsigned long 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  counter         1   21[BANK0 ] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  4   13[BANK0 ] unsigned long 
  2881 ;; Registers used:
  2882 ;;		wreg, status,2, status,0
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2888 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;Total ram usage:        9 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    7
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_printf
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text12
  2903  001428                     __ptext12:
  2904                           	opt stack 0
  2905  001428                     ___llmod:
  2906                           	opt stack 20
  2907                           
  2908                           ;incstack = 0
  2909  001428  0100               	movlb	0	; () banked
  2910  00142A  5191               	movf	___llmod@divisor& (0+255),w,b
  2911  00142C  0100               	movlb	0	; () banked
  2912  00142E  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  2913  001430  0100               	movlb	0	; () banked
  2914  001432  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  2915  001434  0100               	movlb	0	; () banked
  2916  001436  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  2917  001438  B4D8               	btfsc	status,2,c
  2918  00143A  D03A               	goto	l957
  2919                           
  2920                           ; BSR set to: 0
  2921  00143C  0E01               	movlw	1
  2922  00143E  0100               	movlb	0	; () banked
  2923  001440  6F95               	movwf	___llmod@counter& (0+255),b
  2924  001442  D008               	goto	l2687
  2925  001444                     l2685:
  2926                           
  2927                           ; BSR set to: 0
  2928  001444  0100               	movlb	0	; () banked
  2929  001446  90D8               	bcf	status,0,c
  2930  001448  3791               	rlcf	___llmod@divisor& (0+255),f,b
  2931  00144A  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  2932  00144C  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  2933  00144E  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  2934  001450  0100               	movlb	0	; () banked
  2935  001452  2B95               	incf	___llmod@counter& (0+255),f,b
  2936  001454                     l2687:
  2937                           
  2938                           ; BSR set to: 0
  2939  001454  0100               	movlb	0	; () banked
  2940  001456  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  2941  001458  D7F5               	goto	l2685
  2942  00145A                     l2689:
  2943                           
  2944                           ; BSR set to: 0
  2945  00145A  0100               	movlb	0	; () banked
  2946  00145C  5191               	movf	___llmod@divisor& (0+255),w,b
  2947  00145E  0100               	movlb	0	; () banked
  2948  001460  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  2949  001462  0100               	movlb	0	; () banked
  2950  001464  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  2951  001466  0100               	movlb	0	; () banked
  2952  001468  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  2953  00146A  0100               	movlb	0	; () banked
  2954  00146C  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  2955  00146E  0100               	movlb	0	; () banked
  2956  001470  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2957  001472  0100               	movlb	0	; () banked
  2958  001474  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  2959  001476  0100               	movlb	0	; () banked
  2960  001478  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2961  00147A  A0D8               	btfss	status,0,c
  2962  00147C  D010               	goto	l2693
  2963                           
  2964                           ; BSR set to: 0
  2965  00147E  0100               	movlb	0	; () banked
  2966  001480  5191               	movf	___llmod@divisor& (0+255),w,b
  2967  001482  0100               	movlb	0	; () banked
  2968  001484  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  2969  001486  0100               	movlb	0	; () banked
  2970  001488  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  2971  00148A  0100               	movlb	0	; () banked
  2972  00148C  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2973  00148E  0100               	movlb	0	; () banked
  2974  001490  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  2975  001492  0100               	movlb	0	; () banked
  2976  001494  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2977  001496  0100               	movlb	0	; () banked
  2978  001498  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  2979  00149A  0100               	movlb	0	; () banked
  2980  00149C  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2981  00149E                     l2693:
  2982                           
  2983                           ; BSR set to: 0
  2984  00149E  0100               	movlb	0	; () banked
  2985  0014A0  90D8               	bcf	status,0,c
  2986  0014A2  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  2987  0014A4  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  2988  0014A6  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  2989  0014A8  3391               	rrcf	___llmod@divisor& (0+255),f,b
  2990                           
  2991                           ; BSR set to: 0
  2992  0014AA  0100               	movlb	0	; () banked
  2993  0014AC  2F95               	decfsz	___llmod@counter& (0+255),f,b
  2994  0014AE  D7D5               	goto	l2689
  2995  0014B0                     l957:
  2996                           
  2997                           ; BSR set to: 0
  2998  0014B0  C08D  F08D         	movff	___llmod@dividend,?___llmod
  2999  0014B4  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  3000  0014B8  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  3001  0014BC  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  3002                           
  3003                           ; BSR set to: 0
  3004  0014C0  0012               	return		;funcret
  3005  0014C2                     __end_of___llmod:
  3006                           	opt stack 0
  3007                           tblptru	equ	0xFF8
  3008                           tblptrh	equ	0xFF7
  3009                           tblptrl	equ	0xFF6
  3010                           tablat	equ	0xFF5
  3011                           prodh	equ	0xFF4
  3012                           prodl	equ	0xFF3
  3013                           intcon	equ	0xFF2
  3014                           postinc0	equ	0xFEE
  3015                           wreg	equ	0xFE8
  3016                           postdec1	equ	0xFE5
  3017                           fsr1l	equ	0xFE1
  3018                           indf2	equ	0xFDF
  3019                           postinc2	equ	0xFDE
  3020                           postdec2	equ	0xFDD
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function _lcdClear *****************
  3026 ;; Defined at:
  3027 ;;		line 74 in file "lcd.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;Total ram usage:        0 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    9
  3048 ;; This function calls:
  3049 ;;		_lcdInst
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;;		_dateTime
  3053 ;;		_mainMenu
  3054 ;;		_runSelect
  3055 ;;		_runMenu
  3056 ;;		_runTime
  3057 ;;		_runStats
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text13
  3062  001AEA                     __ptext13:
  3063                           	opt stack 0
  3064  001AEA                     _lcdClear:
  3065                           	opt stack 19
  3066                           
  3067                           ;lcd.c: 75: lcdInst(0b00000001);
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;incstack = 0
  3071  001AEA  0E01               	movlw	1
  3072  001AEC  ECAE  F00C         	call	_lcdInst
  3073  001AF0  0012               	return		;funcret
  3074  001AF2                     __end_of_lcdClear:
  3075                           	opt stack 0
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           intcon	equ	0xFF2
  3083                           postinc0	equ	0xFEE
  3084                           wreg	equ	0xFE8
  3085                           postdec1	equ	0xFE5
  3086                           fsr1l	equ	0xFE1
  3087                           indf2	equ	0xFDF
  3088                           postinc2	equ	0xFDE
  3089                           postdec2	equ	0xFDD
  3090                           fsr2h	equ	0xFDA
  3091                           fsr2l	equ	0xFD9
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _pinSetup *****************
  3095 ;; Defined at:
  3096 ;;		line 55 in file "main.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;		None
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		wreg, status,2, status,0
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;Total ram usage:        0 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    7
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_main
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text14
  3125  001888                     __ptext14:
  3126                           	opt stack 0
  3127  001888                     _pinSetup:
  3128                           	opt stack 23
  3129                           
  3130                           ;main.c: 61: TRISA = 0xFF;
  3131                           
  3132                           ;incstack = 0
  3133  001888  6892               	setf	3986,c	;volatile
  3134                           
  3135                           ;main.c: 62: TRISB = 0xFF;
  3136  00188A  6893               	setf	3987,c	;volatile
  3137                           
  3138                           ;main.c: 63: TRISC = 0x00;
  3139  00188C  0E00               	movlw	0
  3140  00188E  6E94               	movwf	3988,c	;volatile
  3141                           
  3142                           ;main.c: 64: TRISD = 0x00;
  3143  001890  0E00               	movlw	0
  3144  001892  6E95               	movwf	3989,c	;volatile
  3145                           
  3146                           ;main.c: 65: TRISE = 0x00;
  3147  001894  0E00               	movlw	0
  3148  001896  6E96               	movwf	3990,c	;volatile
  3149                           
  3150                           ;main.c: 67: LATA = 0x00;
  3151  001898  0E00               	movlw	0
  3152  00189A  6E89               	movwf	3977,c	;volatile
  3153                           
  3154                           ;main.c: 68: LATB = 0x00;
  3155  00189C  0E00               	movlw	0
  3156  00189E  6E8A               	movwf	3978,c	;volatile
  3157                           
  3158                           ;main.c: 69: LATC = 0x00;
  3159  0018A0  0E00               	movlw	0
  3160  0018A2  6E8B               	movwf	3979,c	;volatile
  3161                           
  3162                           ;main.c: 70: LATD = 0x00;
  3163  0018A4  0E00               	movlw	0
  3164  0018A6  6E8C               	movwf	3980,c	;volatile
  3165                           
  3166                           ;main.c: 71: LATE = 0x00;
  3167  0018A8  0E00               	movlw	0
  3168  0018AA  6E8D               	movwf	3981,c	;volatile
  3169                           
  3170                           ;main.c: 73: ADCON0 = 0x00;
  3171  0018AC  0E00               	movlw	0
  3172  0018AE  6EC2               	movwf	4034,c	;volatile
  3173                           
  3174                           ;main.c: 74: ADCON1 |= 0x0A;
  3175  0018B0  0E0A               	movlw	10
  3176  0018B2  12C1               	iorwf	4033,f,c	;volatile
  3177                           
  3178                           ;main.c: 78: ADCON2 = 0;
  3179  0018B4  0E00               	movlw	0
  3180  0018B6  6EC0               	movwf	4032,c	;volatile
  3181                           
  3182                           ;main.c: 79: ADCON2 |= 0b010;
  3183  0018B8  82C0               	bsf	4032,1,c	;volatile
  3184                           
  3185                           ;main.c: 80: ADCON2 |= 0b110<<3;
  3186  0018BA  0E30               	movlw	48
  3187  0018BC  12C0               	iorwf	4032,f,c	;volatile
  3188                           
  3189                           ;main.c: 81: ADCON2 |= 1<<7;
  3190  0018BE  8EC0               	bsf	4032,7,c	;volatile
  3191                           
  3192                           ;main.c: 84: INT1IE = 1;
  3193  0018C0  86F0               	bsf	intcon3,3,c	;volatile
  3194                           
  3195                           ;main.c: 85: INT0IE = 1;
  3196  0018C2  88F2               	bsf	intcon,4,c	;volatile
  3197                           
  3198                           ;main.c: 86: (INTCONbits.GIE = 1);
  3199  0018C4  8EF2               	bsf	intcon,7,c	;volatile
  3200  0018C6  0012               	return		;funcret
  3201  0018C8                     __end_of_pinSetup:
  3202                           	opt stack 0
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           prodh	equ	0xFF4
  3208                           prodl	equ	0xFF3
  3209                           intcon	equ	0xFF2
  3210                           intcon3	equ	0xFF0
  3211                           postinc0	equ	0xFEE
  3212                           wreg	equ	0xFE8
  3213                           postdec1	equ	0xFE5
  3214                           fsr1l	equ	0xFE1
  3215                           indf2	equ	0xFDF
  3216                           postinc2	equ	0xFDE
  3217                           postdec2	equ	0xFDD
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8
  3221                           
  3222 ;; *************** function _initRTC *****************
  3223 ;; Defined at:
  3224 ;;		line 19 in file "RTC.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;		None
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  1    wreg      void 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;Total ram usage:        0 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    9
  3245 ;; This function calls:
  3246 ;;		_I2C_Master_Init
  3247 ;; This function is called by:
  3248 ;;		_main
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text15
  3253  001AB0                     __ptext15:
  3254                           	opt stack 0
  3255  001AB0                     _initRTC:
  3256                           	opt stack 21
  3257                           
  3258                           ;RTC.c: 20: I2C_Master_Init(10000);
  3259                           
  3260                           ;incstack = 0
  3261  001AB0  0E10               	movlw	16
  3262  001AB2  0100               	movlb	0	; () banked
  3263  001AB4  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3264  001AB6  0E27               	movlw	39
  3265  001AB8  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3266  001ABA  0E00               	movlw	0
  3267  001ABC  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3268  001ABE  0E00               	movlw	0
  3269  001AC0  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3270  001AC2  EC80  F00B         	call	_I2C_Master_Init	;wreg free
  3271  001AC6  0012               	return		;funcret
  3272  001AC8                     __end_of_initRTC:
  3273                           	opt stack 0
  3274                           tblptru	equ	0xFF8
  3275                           tblptrh	equ	0xFF7
  3276                           tblptrl	equ	0xFF6
  3277                           tablat	equ	0xFF5
  3278                           prodh	equ	0xFF4
  3279                           prodl	equ	0xFF3
  3280                           intcon	equ	0xFF2
  3281                           intcon3	equ	0xFF0
  3282                           postinc0	equ	0xFEE
  3283                           wreg	equ	0xFE8
  3284                           postdec1	equ	0xFE5
  3285                           fsr1l	equ	0xFE1
  3286                           indf2	equ	0xFDF
  3287                           postinc2	equ	0xFDE
  3288                           postdec2	equ	0xFDD
  3289                           fsr2h	equ	0xFDA
  3290                           fsr2l	equ	0xFD9
  3291                           status	equ	0xFD8
  3292                           
  3293 ;; *************** function _I2C_Master_Init *****************
  3294 ;; Defined at:
  3295 ;;		line 13 in file "I2C.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  c               4   13[BANK0 ] const unsigned long 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;		None
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3309 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;Total ram usage:        8 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    8
  3316 ;; This function calls:
  3317 ;;		___lldiv
  3318 ;; This function is called by:
  3319 ;;		_initRTC
  3320 ;;		_testFrequency
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text16
  3325  001700                     __ptext16:
  3326                           	opt stack 0
  3327  001700                     _I2C_Master_Init:
  3328                           	opt stack 21
  3329                           
  3330                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3331                           
  3332                           ;incstack = 0
  3333  001700  0E00               	movlw	0
  3334  001702  6EC7               	movwf	4039,c	;volatile
  3335                           
  3336                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3337  001704  0E28               	movlw	40
  3338  001706  6EC6               	movwf	4038,c	;volatile
  3339                           
  3340                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3341  001708  0E00               	movlw	0
  3342  00170A  6EC5               	movwf	4037,c	;volatile
  3343                           
  3344                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3345  00170C  0E80               	movlw	128
  3346  00170E  0100               	movlb	0	; () banked
  3347  001710  6F80               	movwf	___lldiv@dividend& (0+255),b
  3348  001712  0E96               	movlw	150
  3349  001714  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3350  001716  0E98               	movlw	152
  3351  001718  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3352  00171A  0E00               	movlw	0
  3353  00171C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3354  00171E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3355  001722  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3356  001726  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3357  00172A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3358  00172E  0E02               	movlw	2
  3359  001730                     u2595:
  3360  001730  90D8               	bcf	status,0,c
  3361  001732  0100               	movlb	0	; () banked
  3362  001734  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3363  001736  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3364  001738  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3365  00173A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3366  00173C  2EE8               	decfsz	wreg,f,c
  3367  00173E  D7F8               	goto	u2595
  3368  001740  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3369  001744  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3370  001748  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3371  00174C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3372  001750  EC5C  F008         	call	___lldiv	;wreg free
  3373  001754  0100               	movlb	0	; () banked
  3374  001756  0580               	decf	?___lldiv& (0+255),w,b
  3375  001758  6EC8               	movwf	4040,c	;volatile
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;I2C.c: 20: TRISC3 = 1;
  3379  00175A  8694               	bsf	3988,3,c	;volatile
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;I2C.c: 21: TRISC4 = 1;
  3383  00175C  8894               	bsf	3988,4,c	;volatile
  3384                           
  3385                           ; BSR set to: 0
  3386  00175E  0012               	return		;funcret
  3387  001760                     __end_of_I2C_Master_Init:
  3388                           	opt stack 0
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           prodh	equ	0xFF4
  3394                           prodl	equ	0xFF3
  3395                           intcon	equ	0xFF2
  3396                           intcon3	equ	0xFF0
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           postdec1	equ	0xFE5
  3400                           fsr1l	equ	0xFE1
  3401                           indf2	equ	0xFDF
  3402                           postinc2	equ	0xFDE
  3403                           postdec2	equ	0xFDD
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function ___lldiv *****************
  3409 ;; Defined at:
  3410 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  dividend        4    0[BANK0 ] unsigned long 
  3413 ;;  divisor         4    4[BANK0 ] unsigned long 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  quotient        4    8[BANK0 ] unsigned long 
  3416 ;;  counter         1   12[BANK0 ] unsigned char 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  4    0[BANK0 ] unsigned long 
  3419 ;; Registers used:
  3420 ;;		wreg, status,2, status,0
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3426 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;Total ram usage:       13 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    7
  3433 ;; This function calls:
  3434 ;;		Nothing
  3435 ;; This function is called by:
  3436 ;;		_I2C_Master_Init
  3437 ;;		_printf
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text17
  3442  0010B8                     __ptext17:
  3443                           	opt stack 0
  3444  0010B8                     ___lldiv:
  3445                           	opt stack 20
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;incstack = 0
  3449  0010B8  0E00               	movlw	0
  3450  0010BA  0100               	movlb	0	; () banked
  3451  0010BC  6F88               	movwf	___lldiv@quotient& (0+255),b
  3452  0010BE  0E00               	movlw	0
  3453  0010C0  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3454  0010C2  0E00               	movlw	0
  3455  0010C4  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3456  0010C6  0E00               	movlw	0
  3457  0010C8  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3458                           
  3459                           ; BSR set to: 0
  3460  0010CA  0100               	movlb	0	; () banked
  3461  0010CC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3462  0010CE  0100               	movlb	0	; () banked
  3463  0010D0  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3464  0010D2  0100               	movlb	0	; () banked
  3465  0010D4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3466  0010D6  0100               	movlb	0	; () banked
  3467  0010D8  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3468  0010DA  B4D8               	btfsc	status,2,c
  3469  0010DC  D042               	goto	l947
  3470                           
  3471                           ; BSR set to: 0
  3472  0010DE  0E01               	movlw	1
  3473  0010E0  0100               	movlb	0	; () banked
  3474  0010E2  6F8C               	movwf	___lldiv@counter& (0+255),b
  3475  0010E4  D008               	goto	l2667
  3476  0010E6                     l2665:
  3477                           
  3478                           ; BSR set to: 0
  3479  0010E6  0100               	movlb	0	; () banked
  3480  0010E8  90D8               	bcf	status,0,c
  3481  0010EA  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3482  0010EC  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3483  0010EE  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3484  0010F0  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3485  0010F2  0100               	movlb	0	; () banked
  3486  0010F4  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3487  0010F6                     l2667:
  3488                           
  3489                           ; BSR set to: 0
  3490  0010F6  0100               	movlb	0	; () banked
  3491  0010F8  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3492  0010FA  D7F5               	goto	l2665
  3493  0010FC                     l2669:
  3494                           
  3495                           ; BSR set to: 0
  3496  0010FC  0100               	movlb	0	; () banked
  3497  0010FE  90D8               	bcf	status,0,c
  3498  001100  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3499  001102  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3500  001104  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3501  001106  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3502                           
  3503                           ; BSR set to: 0
  3504  001108  0100               	movlb	0	; () banked
  3505  00110A  5184               	movf	___lldiv@divisor& (0+255),w,b
  3506  00110C  0100               	movlb	0	; () banked
  3507  00110E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3508  001110  0100               	movlb	0	; () banked
  3509  001112  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3510  001114  0100               	movlb	0	; () banked
  3511  001116  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3512  001118  0100               	movlb	0	; () banked
  3513  00111A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3514  00111C  0100               	movlb	0	; () banked
  3515  00111E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3516  001120  0100               	movlb	0	; () banked
  3517  001122  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3518  001124  0100               	movlb	0	; () banked
  3519  001126  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3520  001128  A0D8               	btfss	status,0,c
  3521  00112A  D012               	goto	l2677
  3522                           
  3523                           ; BSR set to: 0
  3524  00112C  0100               	movlb	0	; () banked
  3525  00112E  5184               	movf	___lldiv@divisor& (0+255),w,b
  3526  001130  0100               	movlb	0	; () banked
  3527  001132  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3528  001134  0100               	movlb	0	; () banked
  3529  001136  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3530  001138  0100               	movlb	0	; () banked
  3531  00113A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3532  00113C  0100               	movlb	0	; () banked
  3533  00113E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3534  001140  0100               	movlb	0	; () banked
  3535  001142  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3536  001144  0100               	movlb	0	; () banked
  3537  001146  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3538  001148  0100               	movlb	0	; () banked
  3539  00114A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3540                           
  3541                           ; BSR set to: 0
  3542  00114C  0100               	movlb	0	; () banked
  3543  00114E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3544  001150                     l2677:
  3545                           
  3546                           ; BSR set to: 0
  3547  001150  0100               	movlb	0	; () banked
  3548  001152  90D8               	bcf	status,0,c
  3549  001154  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3550  001156  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3551  001158  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3552  00115A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3553                           
  3554                           ; BSR set to: 0
  3555  00115C  0100               	movlb	0	; () banked
  3556  00115E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3557  001160  D7CD               	goto	l2669
  3558  001162                     l947:
  3559                           
  3560                           ; BSR set to: 0
  3561  001162  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3562  001166  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3563  00116A  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3564  00116E  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3565                           
  3566                           ; BSR set to: 0
  3567  001172  0012               	return		;funcret
  3568  001174                     __end_of___lldiv:
  3569                           	opt stack 0
  3570                           tblptru	equ	0xFF8
  3571                           tblptrh	equ	0xFF7
  3572                           tblptrl	equ	0xFF6
  3573                           tablat	equ	0xFF5
  3574                           prodh	equ	0xFF4
  3575                           prodl	equ	0xFF3
  3576                           intcon	equ	0xFF2
  3577                           intcon3	equ	0xFF0
  3578                           postinc0	equ	0xFEE
  3579                           wreg	equ	0xFE8
  3580                           postdec1	equ	0xFE5
  3581                           fsr1l	equ	0xFE1
  3582                           indf2	equ	0xFDF
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function _initLCD *****************
  3590 ;; Defined at:
  3591 ;;		line 15 in file "lcd.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;		None
  3594 ;; Auto vars:     Size  Location     Type
  3595 ;;		None
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  1    wreg      void 
  3598 ;; Registers used:
  3599 ;;		wreg, status,2, status,0, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;Total ram usage:        1 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    9
  3612 ;; This function calls:
  3613 ;;		_lcdInst
  3614 ;; This function is called by:
  3615 ;;		_main
  3616 ;; This function uses a non-reentrant model
  3617 ;;
  3618                           
  3619                           	psect	text18
  3620  0017F8                     __ptext18:
  3621                           	opt stack 0
  3622  0017F8                     _initLCD:
  3623                           	opt stack 21
  3624                           
  3625                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;incstack = 0
  3629  0017F8  0E31               	movlw	49
  3630  0017FA  0100               	movlb	0	; () banked
  3631  0017FC  6F84               	movwf	??_initLCD& (0+255),b
  3632  0017FE  0EB2               	movlw	178
  3633  001800                     u3287:
  3634  001800  2EE8               	decfsz	wreg,f,c
  3635  001802  D7FE               	bra	u3287
  3636  001804  2F84               	decfsz	??_initLCD& (0+255),f,b
  3637  001806  D7FC               	bra	u3287
  3638  001808  F000               	nop	
  3639                           
  3640                           ;lcd.c: 18: lcdInst(0b00110011);
  3641  00180A  0E33               	movlw	51
  3642  00180C  ECAE  F00C         	call	_lcdInst
  3643                           
  3644                           ;lcd.c: 19: lcdInst(0b00110010);
  3645  001810  0E32               	movlw	50
  3646  001812  ECAE  F00C         	call	_lcdInst
  3647                           
  3648                           ;lcd.c: 20: lcdInst(0b00101000);
  3649  001816  0E28               	movlw	40
  3650  001818  ECAE  F00C         	call	_lcdInst
  3651                           
  3652                           ;lcd.c: 21: lcdInst(0b00001111);
  3653  00181C  0E0F               	movlw	15
  3654  00181E  ECAE  F00C         	call	_lcdInst
  3655                           
  3656                           ;lcd.c: 22: lcdInst(0b00000110);
  3657  001822  0E06               	movlw	6
  3658  001824  ECAE  F00C         	call	_lcdInst
  3659                           
  3660                           ;lcd.c: 23: lcdInst(0b00000001);
  3661  001828  0E01               	movlw	1
  3662  00182A  ECAE  F00C         	call	_lcdInst
  3663                           
  3664                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  3665  00182E  0E31               	movlw	49
  3666  001830  0100               	movlb	0	; () banked
  3667  001832  6F84               	movwf	??_initLCD& (0+255),b
  3668  001834  0EB2               	movlw	178
  3669  001836                     u3297:
  3670  001836  2EE8               	decfsz	wreg,f,c
  3671  001838  D7FE               	bra	u3297
  3672  00183A  2F84               	decfsz	??_initLCD& (0+255),f,b
  3673  00183C  D7FC               	bra	u3297
  3674  00183E  F000               	nop	
  3675  001840  0012               	return		;funcret
  3676  001842                     __end_of_initLCD:
  3677                           	opt stack 0
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           prodh	equ	0xFF4
  3683                           prodl	equ	0xFF3
  3684                           intcon	equ	0xFF2
  3685                           intcon3	equ	0xFF0
  3686                           postinc0	equ	0xFEE
  3687                           wreg	equ	0xFE8
  3688                           postdec1	equ	0xFE5
  3689                           fsr1l	equ	0xFE1
  3690                           indf2	equ	0xFDF
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _lcdInst *****************
  3698 ;; Defined at:
  3699 ;;		line 27 in file "lcd.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  data            1    wreg     unsigned char 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;  data            1    3[BANK0 ] unsigned char 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;Total ram usage:        2 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    8
  3720 ;; This function calls:
  3721 ;;		_lcdNibble
  3722 ;; This function is called by:
  3723 ;;		_initLCD
  3724 ;;		_lcdClear
  3725 ;;		_lcdNewline
  3726 ;;		_lcdHome
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text19
  3731  00195C                     __ptext19:
  3732                           	opt stack 0
  3733  00195C                     _lcdInst:
  3734                           	opt stack 17
  3735                           
  3736                           ;incstack = 0
  3737                           ;lcdInst@data stored from wreg
  3738  00195C  0100               	movlb	0	; () banked
  3739  00195E  6F83               	movwf	lcdInst@data& (0+255),b
  3740                           
  3741                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  3742  001960  948C               	bcf	3980,2,c	;volatile
  3743                           
  3744                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3745  001962  0E74               	movlw	116
  3746  001964                     u3307:
  3747  001964  2EE8               	decfsz	wreg,f,c
  3748  001966  D7FE               	bra	u3307
  3749  001968  D000               	nop2	
  3750                           
  3751                           ;lcd.c: 30: lcdNibble(data);
  3752  00196A  0100               	movlb	0	; () banked
  3753  00196C  5183               	movf	lcdInst@data& (0+255),w,b
  3754  00196E  ECA2  F00A         	call	_lcdNibble
  3755                           
  3756                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  3757  001972  0E04               	movlw	4
  3758  001974  0100               	movlb	0	; () banked
  3759  001976  6F82               	movwf	??_lcdInst& (0+255),b
  3760  001978  0E3D               	movlw	61
  3761  00197A                     u3317:
  3762  00197A  2EE8               	decfsz	wreg,f,c
  3763  00197C  D7FE               	bra	u3317
  3764  00197E  2F82               	decfsz	??_lcdInst& (0+255),f,b
  3765  001980  D7FC               	bra	u3317
  3766  001982  D000               	nop2	
  3767  001984  0012               	return		;funcret
  3768  001986                     __end_of_lcdInst:
  3769                           	opt stack 0
  3770                           tblptru	equ	0xFF8
  3771                           tblptrh	equ	0xFF7
  3772                           tblptrl	equ	0xFF6
  3773                           tablat	equ	0xFF5
  3774                           prodh	equ	0xFF4
  3775                           prodl	equ	0xFF3
  3776                           intcon	equ	0xFF2
  3777                           intcon3	equ	0xFF0
  3778                           postinc0	equ	0xFEE
  3779                           wreg	equ	0xFE8
  3780                           postdec1	equ	0xFE5
  3781                           fsr1l	equ	0xFE1
  3782                           indf2	equ	0xFDF
  3783                           postinc2	equ	0xFDE
  3784                           postdec2	equ	0xFDD
  3785                           fsr2h	equ	0xFDA
  3786                           fsr2l	equ	0xFD9
  3787                           status	equ	0xFD8
  3788                           
  3789 ;; *************** function _lcdNibble *****************
  3790 ;; Defined at:
  3791 ;;		line 46 in file "lcd.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  data            1    wreg     unsigned char 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  data            1    1[BANK0 ] unsigned char 
  3796 ;;  temp            1    0[BANK0 ] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;Total ram usage:        2 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    7
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_lcdInst
  3817 ;;		_putch
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text20
  3822  001544                     __ptext20:
  3823                           	opt stack 0
  3824  001544                     _lcdNibble:
  3825                           	opt stack 19
  3826                           
  3827                           ;incstack = 0
  3828                           ;lcdNibble@data stored from wreg
  3829  001544  0100               	movlb	0	; () banked
  3830  001546  6F81               	movwf	lcdNibble@data& (0+255),b
  3831                           
  3832                           ;lcd.c: 48: char temp = data & 0xF0;
  3833  001548  0100               	movlb	0	; () banked
  3834  00154A  5181               	movf	lcdNibble@data& (0+255),w,b
  3835  00154C  0BF0               	andlw	240
  3836  00154E  0100               	movlb	0	; () banked
  3837  001550  6F80               	movwf	lcdNibble@temp& (0+255),b
  3838                           
  3839                           ;lcd.c: 49: LATD = LATD & 0x0F;
  3840  001552  508C               	movf	3980,w,c	;volatile
  3841  001554  0B0F               	andlw	15
  3842  001556  6E8C               	movwf	3980,c	;volatile
  3843                           
  3844                           ;lcd.c: 50: LATD = temp | LATD;
  3845  001558  0100               	movlb	0	; () banked
  3846  00155A  5180               	movf	lcdNibble@temp& (0+255),w,b
  3847  00155C  108C               	iorwf	3980,w,c	;volatile
  3848  00155E  6E8C               	movwf	3980,c	;volatile
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  3852  001560  968C               	bcf	3980,3,c	;volatile
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3856  001562  0ED6               	movlw	214
  3857  001564                     u3327:
  3858  001564  D000               	nop2	
  3859  001566  D000               	nop2	
  3860  001568  2EE8               	decfsz	wreg,f,c
  3861  00156A  D7FC               	bra	u3327
  3862  00156C  D000               	nop2	
  3863                           
  3864                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  3865  00156E  868C               	bsf	3980,3,c	;volatile
  3866                           
  3867                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3868  001570  0ED6               	movlw	214
  3869  001572                     u3337:
  3870  001572  D000               	nop2	
  3871  001574  D000               	nop2	
  3872  001576  2EE8               	decfsz	wreg,f,c
  3873  001578  D7FC               	bra	u3337
  3874  00157A  D000               	nop2	
  3875                           
  3876                           ;lcd.c: 58: data = data << 4;
  3877  00157C  0100               	movlb	0	; () banked
  3878  00157E  3981               	swapf	lcdNibble@data& (0+255),w,b
  3879  001580  0BF0               	andlw	240
  3880  001582  0100               	movlb	0	; () banked
  3881  001584  6F81               	movwf	lcdNibble@data& (0+255),b
  3882                           
  3883                           ;lcd.c: 60: temp = data & 0xF0;
  3884  001586  0100               	movlb	0	; () banked
  3885  001588  5181               	movf	lcdNibble@data& (0+255),w,b
  3886  00158A  0BF0               	andlw	240
  3887  00158C  0100               	movlb	0	; () banked
  3888  00158E  6F80               	movwf	lcdNibble@temp& (0+255),b
  3889                           
  3890                           ;lcd.c: 61: LATD = LATD & 0x0F;
  3891  001590  508C               	movf	3980,w,c	;volatile
  3892  001592  0B0F               	andlw	15
  3893  001594  6E8C               	movwf	3980,c	;volatile
  3894                           
  3895                           ;lcd.c: 62: LATD = temp | LATD;
  3896  001596  0100               	movlb	0	; () banked
  3897  001598  5180               	movf	lcdNibble@temp& (0+255),w,b
  3898  00159A  108C               	iorwf	3980,w,c	;volatile
  3899  00159C  6E8C               	movwf	3980,c	;volatile
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  3903  00159E  968C               	bcf	3980,3,c	;volatile
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3907  0015A0  0ED6               	movlw	214
  3908  0015A2                     u3347:
  3909  0015A2  D000               	nop2	
  3910  0015A4  D000               	nop2	
  3911  0015A6  2EE8               	decfsz	wreg,f,c
  3912  0015A8  D7FC               	bra	u3347
  3913  0015AA  D000               	nop2	
  3914                           
  3915                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  3916  0015AC  868C               	bsf	3980,3,c	;volatile
  3917                           
  3918                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3919  0015AE  0ED6               	movlw	214
  3920  0015B0                     u3357:
  3921  0015B0  D000               	nop2	
  3922  0015B2  D000               	nop2	
  3923  0015B4  2EE8               	decfsz	wreg,f,c
  3924  0015B6  D7FC               	bra	u3357
  3925  0015B8  D000               	nop2	
  3926  0015BA  0012               	return		;funcret
  3927  0015BC                     __end_of_lcdNibble:
  3928                           	opt stack 0
  3929                           tblptru	equ	0xFF8
  3930                           tblptrh	equ	0xFF7
  3931                           tblptrl	equ	0xFF6
  3932                           tablat	equ	0xFF5
  3933                           prodh	equ	0xFF4
  3934                           prodl	equ	0xFF3
  3935                           intcon	equ	0xFF2
  3936                           intcon3	equ	0xFF0
  3937                           postinc0	equ	0xFEE
  3938                           wreg	equ	0xFE8
  3939                           postdec1	equ	0xFE5
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _digitalWrite *****************
  3949 ;; Defined at:
  3950 ;;		line 53 in file "iopin.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  port            2    0[BANK0 ] int 
  3953 ;;  pin             2    2[BANK0 ] int 
  3954 ;;  val             2    4[BANK0 ] int 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3966 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;Total ram usage:        9 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    7
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_main
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text21
  3981  000FD8                     __ptext21:
  3982                           	opt stack 0
  3983  000FD8                     _digitalWrite:
  3984                           	opt stack 23
  3985                           
  3986                           ;iopin.c: 54: pin = 1 << pin;
  3987                           
  3988                           ;incstack = 0
  3989  000FD8  C082  F086         	movff	digitalWrite@pin,??_digitalWrite
  3990  000FDC  0E01               	movlw	1
  3991  000FDE  0100               	movlb	0	; () banked
  3992  000FE0  6F87               	movwf	(??_digitalWrite+1)& (0+255),b
  3993  000FE2  0E00               	movlw	0
  3994  000FE4  0100               	movlb	0	; () banked
  3995  000FE6  6F88               	movwf	(??_digitalWrite+2)& (0+255),b
  3996  000FE8  0100               	movlb	0	; () banked
  3997  000FEA  2B86               	incf	??_digitalWrite& (0+255),f,b
  3998  000FEC  D004               	goto	u3004
  3999  000FEE                     u3005:
  4000  000FEE  90D8               	bcf	status,0,c
  4001  000FF0  0100               	movlb	0	; () banked
  4002  000FF2  3787               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  4003  000FF4  3788               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  4004  000FF6                     u3004:
  4005  000FF6  0100               	movlb	0	; () banked
  4006  000FF8  2F86               	decfsz	??_digitalWrite& (0+255),f,b
  4007  000FFA  D7F9               	goto	u3005
  4008  000FFC  C087  F082         	movff	??_digitalWrite+1,digitalWrite@pin
  4009  001000  C088  F083         	movff	??_digitalWrite+2,digitalWrite@pin+1
  4010                           
  4011                           ;iopin.c: 55: if(val == 0){
  4012  001004  0100               	movlb	0	; () banked
  4013  001006  5184               	movf	digitalWrite@val& (0+255),w,b
  4014  001008  0100               	movlb	0	; () banked
  4015  00100A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4016  00100C  A4D8               	btfss	status,2,c
  4017  00100E  D03C               	goto	l3451
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;iopin.c: 56: pin ^= 0xff;
  4021  001010  0EFF               	movlw	255
  4022  001012  0100               	movlb	0	; () banked
  4023  001014  1B82               	xorwf	digitalWrite@pin& (0+255),f,b
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;iopin.c: 57: }
  4027                           ;iopin.c: 59: switch(port){
  4028  001016  D038               	goto	l3451
  4029  001018                     l3427:
  4030                           
  4031                           ; BSR set to: 0
  4032  001018  0100               	movlb	0	; () banked
  4033  00101A  0584               	decf	digitalWrite@val& (0+255),w,b
  4034  00101C  0100               	movlb	0	; () banked
  4035  00101E  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4036  001020  A4D8               	btfss	status,2,c
  4037  001022  D004               	goto	l3431
  4038                           
  4039                           ; BSR set to: 0
  4040  001024  0100               	movlb	0	; () banked
  4041  001026  5182               	movf	digitalWrite@pin& (0+255),w,b
  4042  001028  1289               	iorwf	3977,f,c	;volatile
  4043  00102A  0012               	return	
  4044  00102C                     l3431:
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;iopin.c: 61: else LATA &= pin;
  4048  00102C  0100               	movlb	0	; () banked
  4049  00102E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4050  001030  1689               	andwf	3977,f,c	;volatile
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;iopin.c: 62: break;
  4054  001032  0012               	return	
  4055  001034                     l3433:
  4056                           
  4057                           ; BSR set to: 0
  4058  001034  0100               	movlb	0	; () banked
  4059  001036  0584               	decf	digitalWrite@val& (0+255),w,b
  4060  001038  0100               	movlb	0	; () banked
  4061  00103A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4062  00103C  A4D8               	btfss	status,2,c
  4063  00103E  D004               	goto	l3437
  4064                           
  4065                           ; BSR set to: 0
  4066  001040  0100               	movlb	0	; () banked
  4067  001042  5182               	movf	digitalWrite@pin& (0+255),w,b
  4068  001044  128A               	iorwf	3978,f,c	;volatile
  4069  001046  0012               	return	
  4070  001048                     l3437:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;iopin.c: 64: else LATB &= pin;
  4074  001048  0100               	movlb	0	; () banked
  4075  00104A  5182               	movf	digitalWrite@pin& (0+255),w,b
  4076  00104C  168A               	andwf	3978,f,c	;volatile
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;iopin.c: 65: break;
  4080  00104E  0012               	return	
  4081  001050                     l3439:
  4082                           
  4083                           ; BSR set to: 0
  4084  001050  0100               	movlb	0	; () banked
  4085  001052  0584               	decf	digitalWrite@val& (0+255),w,b
  4086  001054  0100               	movlb	0	; () banked
  4087  001056  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4088  001058  A4D8               	btfss	status,2,c
  4089  00105A  D004               	goto	l3443
  4090                           
  4091                           ; BSR set to: 0
  4092  00105C  0100               	movlb	0	; () banked
  4093  00105E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4094  001060  128B               	iorwf	3979,f,c	;volatile
  4095  001062  0012               	return	
  4096  001064                     l3443:
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;iopin.c: 67: else LATC &= pin;
  4100  001064  0100               	movlb	0	; () banked
  4101  001066  5182               	movf	digitalWrite@pin& (0+255),w,b
  4102  001068  168B               	andwf	3979,f,c	;volatile
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;iopin.c: 68: break;
  4106  00106A  0012               	return	
  4107  00106C                     l3445:
  4108                           
  4109                           ; BSR set to: 0
  4110  00106C  0100               	movlb	0	; () banked
  4111  00106E  0584               	decf	digitalWrite@val& (0+255),w,b
  4112  001070  0100               	movlb	0	; () banked
  4113  001072  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4114  001074  A4D8               	btfss	status,2,c
  4115  001076  D004               	goto	l3449
  4116                           
  4117                           ; BSR set to: 0
  4118  001078  0100               	movlb	0	; () banked
  4119  00107A  5182               	movf	digitalWrite@pin& (0+255),w,b
  4120  00107C  128C               	iorwf	3980,f,c	;volatile
  4121  00107E  0012               	return	
  4122  001080                     l3449:
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;iopin.c: 70: else LATD &= pin;
  4126  001080  0100               	movlb	0	; () banked
  4127  001082  5182               	movf	digitalWrite@pin& (0+255),w,b
  4128  001084  168C               	andwf	3980,f,c	;volatile
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;iopin.c: 71: }
  4132  001086  0012               	return	
  4133  001088                     l3451:
  4134                           
  4135                           ; BSR set to: 0
  4136  001088  C080  F086         	movff	digitalWrite@port,??_digitalWrite
  4137  00108C  C081  F087         	movff	digitalWrite@port+1,??_digitalWrite+1
  4138                           
  4139                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4140                           ; Switch size 1, requested type "space"
  4141                           ; Number of cases is 1, Range of values is 0 to 0
  4142                           ; switch strategies available:
  4143                           ; Name         Instructions Cycles
  4144                           ; simple_byte            4     3 (average)
  4145                           ;	Chosen strategy is simple_byte
  4146  001090  0100               	movlb	0	; () banked
  4147  001092  5187               	movf	(??_digitalWrite+1)& (0+255),w,b
  4148  001094  0A00               	xorlw	0	; case 0
  4149  001096  A4D8               	btfss	status,2,c
  4150  001098  0012               	return	
  4151                           
  4152                           ; BSR set to: 0
  4153                           ; Switch size 1, requested type "space"
  4154                           ; Number of cases is 4, Range of values is 0 to 3
  4155                           ; switch strategies available:
  4156                           ; Name         Instructions Cycles
  4157                           ; simple_byte           13     7 (average)
  4158                           ;	Chosen strategy is simple_byte
  4159  00109A  0100               	movlb	0	; () banked
  4160  00109C  5186               	movf	??_digitalWrite& (0+255),w,b
  4161  00109E  0A00               	xorlw	0	; case 0
  4162  0010A0  B4D8               	btfsc	status,2,c
  4163  0010A2  D7BA               	goto	l3427
  4164  0010A4  0A01               	xorlw	1	; case 1
  4165  0010A6  B4D8               	btfsc	status,2,c
  4166  0010A8  D7C5               	goto	l3433
  4167  0010AA  0A03               	xorlw	3	; case 2
  4168  0010AC  B4D8               	btfsc	status,2,c
  4169  0010AE  D7D0               	goto	l3439
  4170  0010B0  0A01               	xorlw	1	; case 3
  4171  0010B2  A4D8               	btfss	status,2,c
  4172  0010B4  0012               	return	
  4173  0010B6  D7DA               	goto	l3445
  4174  0010B8                     __end_of_digitalWrite:
  4175                           	opt stack 0
  4176                           tblptru	equ	0xFF8
  4177                           tblptrh	equ	0xFF7
  4178                           tblptrl	equ	0xFF6
  4179                           tablat	equ	0xFF5
  4180                           prodh	equ	0xFF4
  4181                           prodl	equ	0xFF3
  4182                           intcon	equ	0xFF2
  4183                           intcon3	equ	0xFF0
  4184                           postinc0	equ	0xFEE
  4185                           wreg	equ	0xFE8
  4186                           postdec1	equ	0xFE5
  4187                           fsr1l	equ	0xFE1
  4188                           indf2	equ	0xFDF
  4189                           postinc2	equ	0xFDE
  4190                           postdec2	equ	0xFDD
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function _service *****************
  4196 ;; Defined at:
  4197 ;;		line 152 in file "main.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  key             1  116[COMRAM] unsigned char 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      void 
  4204 ;; Registers used:
  4205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;Total ram usage:       15 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    6
  4218 ;; This function calls:
  4219 ;;		_servoInterruptService
  4220 ;;		_setAngle
  4221 ;;		_sortBatteryInterruptService
  4222 ;; This function is called by:
  4223 ;;		Interrupt level 2
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	intcode
  4228  000008                     __pintcode:
  4229                           	opt stack 0
  4230  000008                     _service:
  4231                           	opt stack 17
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;incstack = 0
  4235  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4236  00000A  ED7B  F007         	call	int_func,f	;refresh shadow registers
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           intcon	equ	0xFF2
  4244                           intcon3	equ	0xFF0
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           postdec1	equ	0xFE5
  4248                           fsr1l	equ	0xFE1
  4249                           indf2	equ	0xFDF
  4250                           postinc2	equ	0xFDE
  4251                           postdec2	equ	0xFDD
  4252                           fsr2h	equ	0xFDA
  4253                           fsr2l	equ	0xFD9
  4254                           status	equ	0xFD8
  4255                           
  4256                           	psect	intcode_body
  4257  000EF6                     __pintcode_body:
  4258                           	opt stack 17
  4259  000EF6                     int_func:
  4260                           	opt stack 17
  4261  000EF6  0006               	pop		; remove dummy address from shadow register refresh
  4262  000EF8  CFFA F067          	movff	pclath,??_service
  4263  000EFC  CFFB F068          	movff	pclatu,??_service+1
  4264  000F00  CFE9 F069          	movff	fsr0l,??_service+2
  4265  000F04  CFEA F06A          	movff	fsr0h,??_service+3
  4266  000F08  CFE1 F06B          	movff	fsr1l,??_service+4
  4267  000F0C  CFE2 F06C          	movff	fsr1h,??_service+5
  4268  000F10  CFD9 F06D          	movff	fsr2l,??_service+6
  4269  000F14  CFDA F06E          	movff	fsr2h,??_service+7
  4270  000F18  CFF3 F06F          	movff	prodl,??_service+8
  4271  000F1C  CFF4 F070          	movff	prodh,??_service+9
  4272  000F20  CFF6 F071          	movff	tblptrl,??_service+10
  4273  000F24  CFF7 F072          	movff	tblptrh,??_service+11
  4274  000F28  CFF8 F073          	movff	tblptru,??_service+12
  4275  000F2C  CFF5 F074          	movff	tablat,??_service+13
  4276                           
  4277                           ;main.c: 154: servoInterruptService();
  4278  000F30  EC32  F003         	call	_servoInterruptService	;wreg free
  4279                           
  4280                           ;main.c: 157: if(INT0IF){ INT0IF = 0;
  4281  000F34  A2F2               	btfss	intcon,1,c	;volatile
  4282  000F36  D003               	goto	i2l3539
  4283  000F38  92F2               	bcf	intcon,1,c	;volatile
  4284                           
  4285                           ;main.c: 158: sortBatteryInterruptService();
  4286  000F3A  EC64  F00D         	call	_sortBatteryInterruptService	;wreg free
  4287  000F3E                     i2l3539:
  4288                           
  4289                           ;main.c: 159: }
  4290                           ;main.c: 162: if(INT1IF){INT1IF = 0;
  4291  000F3E  A0F0               	btfss	intcon3,0,c	;volatile
  4292  000F40  D02D               	goto	i2l133
  4293  000F42  90F0               	bcf	intcon3,0,c	;volatile
  4294                           
  4295                           ;main.c: 163: char key = (PORTB & 0xF0) >> 4;
  4296  000F44  3881               	swapf	3969,w,c	;volatile
  4297  000F46  0B0F               	andlw	15
  4298  000F48  0B0F               	andlw	15
  4299  000F4A  6E75               	movwf	service@key,c
  4300                           
  4301                           ;main.c: 164: if(key == 0)setAngle(0,45);
  4302  000F4C  5075               	movf	service@key,w,c
  4303  000F4E  A4D8               	btfss	status,2,c
  4304  000F50  D00A               	goto	i2l3549
  4305  000F52  0E00               	movlw	0
  4306  000F54  6E5E               	movwf	setAngle@timer+1,c
  4307  000F56  0E00               	movlw	0
  4308  000F58  6E5D               	movwf	setAngle@timer,c
  4309  000F5A  0E00               	movlw	0
  4310  000F5C  6E60               	movwf	setAngle@angle+1,c
  4311  000F5E  0E2D               	movlw	45
  4312  000F60  6E5F               	movwf	setAngle@angle,c
  4313  000F62  ECC0  F009         	call	_setAngle	;wreg free
  4314  000F66                     i2l3549:
  4315                           
  4316                           ;main.c: 165: if(key == 1)setAngle(0,90);
  4317  000F66  0475               	decf	service@key,w,c
  4318  000F68  A4D8               	btfss	status,2,c
  4319  000F6A  D00A               	goto	i2l3553
  4320  000F6C  0E00               	movlw	0
  4321  000F6E  6E5E               	movwf	setAngle@timer+1,c
  4322  000F70  0E00               	movlw	0
  4323  000F72  6E5D               	movwf	setAngle@timer,c
  4324  000F74  0E00               	movlw	0
  4325  000F76  6E60               	movwf	setAngle@angle+1,c
  4326  000F78  0E5A               	movlw	90
  4327  000F7A  6E5F               	movwf	setAngle@angle,c
  4328  000F7C  ECC0  F009         	call	_setAngle	;wreg free
  4329  000F80                     i2l3553:
  4330                           
  4331                           ;main.c: 166: if(key == 2)setAngle(0,135);
  4332  000F80  0E02               	movlw	2
  4333  000F82  1875               	xorwf	service@key,w,c
  4334  000F84  A4D8               	btfss	status,2,c
  4335  000F86  D00A               	goto	i2l133
  4336  000F88  0E00               	movlw	0
  4337  000F8A  6E5E               	movwf	setAngle@timer+1,c
  4338  000F8C  0E00               	movlw	0
  4339  000F8E  6E5D               	movwf	setAngle@timer,c
  4340  000F90  0E00               	movlw	0
  4341  000F92  6E60               	movwf	setAngle@angle+1,c
  4342  000F94  0E87               	movlw	135
  4343  000F96  6E5F               	movwf	setAngle@angle,c
  4344  000F98  ECC0  F009         	call	_setAngle	;wreg free
  4345  000F9C                     i2l133:
  4346  000F9C  C074  FFF5         	movff	??_service+13,tablat
  4347  000FA0  C073  FFF8         	movff	??_service+12,tblptru
  4348  000FA4  C072  FFF7         	movff	??_service+11,tblptrh
  4349  000FA8  C071  FFF6         	movff	??_service+10,tblptrl
  4350  000FAC  C070  FFF4         	movff	??_service+9,prodh
  4351  000FB0  C06F  FFF3         	movff	??_service+8,prodl
  4352  000FB4  C06E  FFDA         	movff	??_service+7,fsr2h
  4353  000FB8  C06D  FFD9         	movff	??_service+6,fsr2l
  4354  000FBC  C06C  FFE2         	movff	??_service+5,fsr1h
  4355  000FC0  C06B  FFE1         	movff	??_service+4,fsr1l
  4356  000FC4  C06A  FFEA         	movff	??_service+3,fsr0h
  4357  000FC8  C069  FFE9         	movff	??_service+2,fsr0l
  4358  000FCC  C068  FFFB         	movff	??_service+1,pclatu
  4359  000FD0  C067  FFFA         	movff	??_service,pclath
  4360  000FD4  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4361  000FD6  0011               	retfie		f
  4362  000FD8                     __end_of_service:
  4363                           	opt stack 0
  4364                           pclatu	equ	0xFFB
  4365                           pclath	equ	0xFFA
  4366                           tblptru	equ	0xFF8
  4367                           tblptrh	equ	0xFF7
  4368                           tblptrl	equ	0xFF6
  4369                           tablat	equ	0xFF5
  4370                           prodh	equ	0xFF4
  4371                           prodl	equ	0xFF3
  4372                           intcon	equ	0xFF2
  4373                           intcon3	equ	0xFF0
  4374                           postinc0	equ	0xFEE
  4375                           fsr0h	equ	0xFEA
  4376                           fsr0l	equ	0xFE9
  4377                           wreg	equ	0xFE8
  4378                           postdec1	equ	0xFE5
  4379                           fsr1h	equ	0xFE2
  4380                           fsr1l	equ	0xFE1
  4381                           indf2	equ	0xFDF
  4382                           postinc2	equ	0xFDE
  4383                           postdec2	equ	0xFDD
  4384                           fsr2h	equ	0xFDA
  4385                           fsr2l	equ	0xFD9
  4386                           status	equ	0xFD8
  4387                           
  4388 ;; *************** function _sortBatteryInterruptService *****************
  4389 ;; Defined at:
  4390 ;;		line 173 in file "main.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;		None
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;		None
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;Total ram usage:        0 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    5
  4411 ;; This function calls:
  4412 ;;		i2_lcdClear
  4413 ;;		i2_printf
  4414 ;; This function is called by:
  4415 ;;		_service
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text23
  4420  001AC8                     __ptext23:
  4421                           	opt stack 0
  4422  001AC8                     _sortBatteryInterruptService:
  4423                           	opt stack 17
  4424                           
  4425                           ;main.c: 175: lcdClear();
  4426                           
  4427                           ;incstack = 0
  4428  001AC8  EC7D  F00D         	call	i2_lcdClear	;wreg free
  4429                           
  4430                           ;main.c: 176: printf("sorting!");
  4431  001ACC  0EE0               	movlw	low STR_2
  4432  001ACE  6E17               	movwf	i2printf@f,c
  4433  001AD0  0EFF               	movlw	high STR_2
  4434  001AD2  6E18               	movwf	i2printf@f+1,c
  4435  001AD4  ECBC  F001         	call	i2_printf	;wreg free
  4436  001AD8  0012               	return		;funcret
  4437  001ADA                     __end_of_sortBatteryInterruptService:
  4438                           	opt stack 0
  4439                           pclatu	equ	0xFFB
  4440                           pclath	equ	0xFFA
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           intcon	equ	0xFF2
  4448                           intcon3	equ	0xFF0
  4449                           postinc0	equ	0xFEE
  4450                           fsr0h	equ	0xFEA
  4451                           fsr0l	equ	0xFE9
  4452                           wreg	equ	0xFE8
  4453                           postdec1	equ	0xFE5
  4454                           fsr1h	equ	0xFE2
  4455                           fsr1l	equ	0xFE1
  4456                           indf2	equ	0xFDF
  4457                           postinc2	equ	0xFDE
  4458                           postdec2	equ	0xFDD
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _setAngle *****************
  4464 ;; Defined at:
  4465 ;;		line 34 in file "servo.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  timer           2   92[COMRAM] int 
  4468 ;;  angle           2   94[COMRAM] int 
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;Total ram usage:       10 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    5
  4487 ;; This function calls:
  4488 ;;		_angleToPulse
  4489 ;;		i2_lcdClear
  4490 ;;		i2_printf
  4491 ;; This function is called by:
  4492 ;;		_service
  4493 ;;		_initServo
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text24
  4498  001380                     __ptext24:
  4499                           	opt stack 0
  4500  001380                     _setAngle:
  4501                           	opt stack 17
  4502                           
  4503                           ;servo.c: 35: pulse[timer] = 0xffff - angleToPulse(angle);
  4504                           
  4505                           ;incstack = 0
  4506  001380  C05F  F046         	movff	setAngle@angle,angleToPulse@angle
  4507  001384  C060  F047         	movff	setAngle@angle+1,angleToPulse@angle+1
  4508  001388  ECF2  F004         	call	_angleToPulse	;wreg free
  4509  00138C  1E46               	comf	?_angleToPulse,f,c
  4510  00138E  1E47               	comf	?_angleToPulse+1,f,c
  4511  001390  1E48               	comf	?_angleToPulse+2,f,c
  4512  001392  1E49               	comf	?_angleToPulse+3,f,c
  4513  001394  2A46               	incf	?_angleToPulse,f,c
  4514  001396  0E00               	movlw	0
  4515  001398  2247               	addwfc	?_angleToPulse+1,f,c
  4516  00139A  2248               	addwfc	?_angleToPulse+2,f,c
  4517  00139C  2249               	addwfc	?_angleToPulse+3,f,c
  4518  00139E  0EFF               	movlw	255
  4519  0013A0  2446               	addwf	?_angleToPulse,w,c
  4520  0013A2  6E61               	movwf	??_setAngle& (0+255),c
  4521  0013A4  0EFF               	movlw	255
  4522  0013A6  2047               	addwfc	?_angleToPulse+1,w,c
  4523  0013A8  6E62               	movwf	(??_setAngle+1)& (0+255),c
  4524  0013AA  0E00               	movlw	0
  4525  0013AC  2048               	addwfc	?_angleToPulse+2,w,c
  4526  0013AE  6E63               	movwf	(??_setAngle+2)& (0+255),c
  4527  0013B0  0E00               	movlw	0
  4528  0013B2  2049               	addwfc	?_angleToPulse+3,w,c
  4529  0013B4  6E64               	movwf	(??_setAngle+3)& (0+255),c
  4530  0013B6  0EAB               	movlw	low _pulse
  4531  0013B8  6E65               	movwf	(??_setAngle+4)& (0+255),c
  4532  0013BA  0E00               	movlw	high _pulse
  4533  0013BC  6E66               	movwf	(??_setAngle+5)& (0+255),c
  4534  0013BE  90D8               	bcf	status,0,c
  4535  0013C0  345D               	rlcf	setAngle@timer,w,c
  4536  0013C2  6ED9               	movwf	fsr2l,c
  4537  0013C4  345E               	rlcf	setAngle@timer+1,w,c
  4538  0013C6  6EDA               	movwf	fsr2h,c
  4539  0013C8  90D8               	bcf	status,0,c
  4540  0013CA  36D9               	rlcf	fsr2l,f,c
  4541  0013CC  36DA               	rlcf	fsr2h,f,c
  4542  0013CE  5065               	movf	??_setAngle+4,w,c
  4543  0013D0  26D9               	addwf	fsr2l,f,c
  4544  0013D2  5066               	movf	??_setAngle+5,w,c
  4545  0013D4  22DA               	addwfc	fsr2h,f,c
  4546  0013D6  C061  FFDE         	movff	??_setAngle,postinc2
  4547  0013DA  C062  FFDE         	movff	??_setAngle+1,postinc2
  4548  0013DE  C063  FFDE         	movff	??_setAngle+2,postinc2
  4549  0013E2  C064  FFDE         	movff	??_setAngle+3,postinc2
  4550                           
  4551                           ;servo.c: 36: lcdClear();
  4552  0013E6  EC7D  F00D         	call	i2_lcdClear	;wreg free
  4553                           
  4554                           ;servo.c: 37: printf("%ld",pulse[timer]);
  4555  0013EA  0EFA               	movlw	low STR_5
  4556  0013EC  6E17               	movwf	i2printf@f,c
  4557  0013EE  0EFF               	movlw	high STR_5
  4558  0013F0  6E18               	movwf	i2printf@f+1,c
  4559  0013F2  0EAB               	movlw	low _pulse
  4560  0013F4  6E61               	movwf	??_setAngle& (0+255),c
  4561  0013F6  0E00               	movlw	high _pulse
  4562  0013F8  6E62               	movwf	(??_setAngle+1)& (0+255),c
  4563  0013FA  90D8               	bcf	status,0,c
  4564  0013FC  345D               	rlcf	setAngle@timer,w,c
  4565  0013FE  6ED9               	movwf	fsr2l,c
  4566  001400  345E               	rlcf	setAngle@timer+1,w,c
  4567  001402  6EDA               	movwf	fsr2h,c
  4568  001404  90D8               	bcf	status,0,c
  4569  001406  36D9               	rlcf	fsr2l,f,c
  4570  001408  36DA               	rlcf	fsr2h,f,c
  4571  00140A  5061               	movf	??_setAngle,w,c
  4572  00140C  26D9               	addwf	fsr2l,f,c
  4573  00140E  5062               	movf	??_setAngle+1,w,c
  4574  001410  22DA               	addwfc	fsr2h,f,c
  4575  001412  CFDE F019          	movff	postinc2,?i2_printf+2
  4576  001416  CFDE F01A          	movff	postinc2,?i2_printf+3
  4577  00141A  CFDE F01B          	movff	postinc2,?i2_printf+4
  4578  00141E  CFDE F01C          	movff	postinc2,?i2_printf+5
  4579  001422  ECBC  F001         	call	i2_printf	;wreg free
  4580  001426  0012               	return		;funcret
  4581  001428                     __end_of_setAngle:
  4582                           	opt stack 0
  4583                           pclatu	equ	0xFFB
  4584                           pclath	equ	0xFFA
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon	equ	0xFF2
  4592                           intcon3	equ	0xFF0
  4593                           postinc0	equ	0xFEE
  4594                           fsr0h	equ	0xFEA
  4595                           fsr0l	equ	0xFE9
  4596                           wreg	equ	0xFE8
  4597                           postdec1	equ	0xFE5
  4598                           fsr1h	equ	0xFE2
  4599                           fsr1l	equ	0xFE1
  4600                           indf2	equ	0xFDF
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function i2_printf *****************
  4608 ;; Defined at:
  4609 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  f               2   22[COMRAM] PTR const unsigned char 
  4612 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  4613 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  4614 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  4615 ;;		 -> STR_5(4), STR_4(9), STR_3(8), STR_2(9), 
  4616 ;;		 -> STR_1(9), 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;  printf          4   35[COMRAM] unsigned long 
  4619 ;;  printf          4    0        struct .
  4620 ;;  printf          3    0        PTR const unsigned char 
  4621 ;;  printf          2   33[COMRAM] PTR void [1]
  4622 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4623 ;;  printf          2   31[COMRAM] int 
  4624 ;;  printf          2    0        unsigned int 
  4625 ;;  printf          1   40[COMRAM] char 
  4626 ;;  printf          1   39[COMRAM] unsigned char 
  4627 ;;  printf          1   30[COMRAM] unsigned char 
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  2   22[COMRAM] int 
  4630 ;; Registers used:
  4631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4637 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;Total ram usage:       19 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    4
  4644 ;; This function calls:
  4645 ;;		i2___lldiv
  4646 ;;		i2___llmod
  4647 ;;		i2_putch
  4648 ;; This function is called by:
  4649 ;;		_sortBatteryInterruptService
  4650 ;;		_setAngle
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text25
  4655  000378                     __ptext25:
  4656                           	opt stack 0
  4657  000378                     i2_printf:
  4658                           	opt stack 17
  4659                           
  4660                           ;doprnt.c: 466: va_list ap;
  4661                           ;doprnt.c: 499: signed char c;
  4662                           ;doprnt.c: 504: int prec;
  4663                           ;doprnt.c: 508: unsigned char flag;
  4664                           ;doprnt.c: 523: union {
  4665                           ;doprnt.c: 524: unsigned long vd;
  4666                           ;doprnt.c: 525: double integ;
  4667                           ;doprnt.c: 526: } tmpval;
  4668                           ;doprnt.c: 528: unsigned long val;
  4669                           ;doprnt.c: 529: unsigned len;
  4670                           ;doprnt.c: 530: const char * cp;
  4671                           ;doprnt.c: 533: *ap = __va_start();
  4672                           
  4673                           ;incstack = 0
  4674  000378  0E19               	movlw	low (?i2_printf+2)
  4675  00037A  6E22               	movwf	i2printf@ap,c
  4676  00037C  0E00               	movlw	high (?i2_printf+2)
  4677  00037E  6E23               	movwf	i2printf@ap+1,c
  4678                           
  4679                           ;doprnt.c: 536: while(c = *f++) {
  4680  000380  D164               	goto	i2l3319
  4681  000382                     i2l3223:
  4682                           
  4683                           ;doprnt.c: 538: if(c != '%')
  4684  000382  0E25               	movlw	37
  4685  000384  1829               	xorwf	i2printf@c,w,c
  4686  000386  B4D8               	btfsc	status,2,c
  4687  000388  D004               	goto	i2l3227
  4688                           
  4689                           ;doprnt.c: 540: {
  4690                           ;doprnt.c: 541: (putch(c) );
  4691  00038A  5029               	movf	i2printf@c,w,c
  4692  00038C  EC36  F00D         	call	i2_putch
  4693                           
  4694                           ;doprnt.c: 542: continue;
  4695  000390  D15C               	goto	i2l3319
  4696  000392                     i2l3227:
  4697                           
  4698                           ;doprnt.c: 543: }
  4699                           ;doprnt.c: 548: flag = 0;
  4700  000392  0E00               	movlw	0
  4701  000394  6E28               	movwf	i2printf@flag,c
  4702                           
  4703                           ;doprnt.c: 635: switch(c = *f++) {
  4704                           
  4705                           ;doprnt.c: 633: loop:
  4706  000396  D012               	goto	i2l3241
  4707  000398                     i2l3229:
  4708                           
  4709                           ;doprnt.c: 643: flag |= 0x10;
  4710  000398  8828               	bsf	i2printf@flag,4,c
  4711                           
  4712                           ;doprnt.c: 644: goto loop;
  4713  00039A  D010               	goto	i2l3241
  4714  00039C                     i2l3231:
  4715                           
  4716                           ;doprnt.c: 721: flag |= 0x80;
  4717  00039C  8E28               	bsf	i2printf@flag,7,c
  4718                           
  4719                           ;doprnt.c: 723: break;
  4720  00039E  D02B               	goto	i2l567
  4721  0003A0                     i2l3233:
  4722                           
  4723                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4724  0003A0  C022  FFD9         	movff	i2printf@ap,fsr2l
  4725  0003A4  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4726  0003A8  50DF               	movf	indf2,w,c
  4727  0003AA  6E29               	movwf	i2printf@c,c
  4728  0003AC  0E02               	movlw	2
  4729  0003AE  2622               	addwf	i2printf@ap,f,c
  4730  0003B0  0E00               	movlw	0
  4731  0003B2  2223               	addwfc	i2printf@ap+1,f,c
  4732  0003B4                     i2l3237:
  4733                           
  4734                           ;doprnt.c: 809: (putch(c) );
  4735  0003B4  5029               	movf	i2printf@c,w,c
  4736  0003B6  EC36  F00D         	call	i2_putch
  4737                           
  4738                           ;doprnt.c: 810: continue;
  4739  0003BA  D147               	goto	i2l3319
  4740  0003BC                     i2l3241:
  4741  0003BC  C017  FFF6         	movff	i2printf@f,tblptrl
  4742  0003C0  C018  FFF7         	movff	i2printf@f+1,tblptrh
  4743  0003C4  4A17               	infsnz	i2printf@f,f,c
  4744  0003C6  2A18               	incf	i2printf@f+1,f,c
  4745  0003C8                     	if	0	;tblptru may be non-zero
  4746  0003C8                     	endif
  4747  0003C8                     	if	0	;tblptru may be non-zero
  4748  0003C8                     	endif
  4749  0003C8  0008               	tblrd		*
  4750  0003CA  CFF5 F029          	movff	tablat,i2printf@c
  4751  0003CE  5029               	movf	i2printf@c,w,c
  4752                           
  4753                           ; Switch size 1, requested type "space"
  4754                           ; Number of cases is 6, Range of values is 0 to 120
  4755                           ; switch strategies available:
  4756                           ; Name         Instructions Cycles
  4757                           ; simple_byte           19    10 (average)
  4758                           ;	Chosen strategy is simple_byte
  4759  0003D0  0A00               	xorlw	0	; case 0
  4760  0003D2  B4D8               	btfsc	status,2,c
  4761  0003D4  0012               	return	
  4762  0003D6  0A63               	xorlw	99	; case 99
  4763  0003D8  B4D8               	btfsc	status,2,c
  4764  0003DA  D7E2               	goto	i2l3233
  4765  0003DC  0A07               	xorlw	7	; case 100
  4766  0003DE  B4D8               	btfsc	status,2,c
  4767  0003E0  D00A               	goto	i2l567
  4768  0003E2  0A0D               	xorlw	13	; case 105
  4769  0003E4  B4D8               	btfsc	status,2,c
  4770  0003E6  D007               	goto	i2l567
  4771  0003E8  0A05               	xorlw	5	; case 108
  4772  0003EA  B4D8               	btfsc	status,2,c
  4773  0003EC  D7D5               	goto	i2l3229
  4774  0003EE  0A14               	xorlw	20	; case 120
  4775  0003F0  B4D8               	btfsc	status,2,c
  4776  0003F2  D7D4               	goto	i2l3231
  4777  0003F4  D7DF               	goto	i2l3237
  4778  0003F6                     i2l567:
  4779                           
  4780                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4781  0003F6  BE28               	btfsc	i2printf@flag,7,c
  4782  0003F8  D02E               	goto	i2l571
  4783                           
  4784                           ;doprnt.c: 1253: {
  4785                           ;doprnt.c: 1255: if(flag & 0x10)
  4786  0003FA  A828               	btfss	i2printf@flag,4,c
  4787  0003FC  D00E               	goto	i2l3249
  4788                           
  4789                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4790  0003FE  C022  FFD9         	movff	i2printf@ap,fsr2l
  4791  000402  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4792  000406  CFDE F024          	movff	postinc2,i2printf@val
  4793  00040A  CFDE F025          	movff	postinc2,i2printf@val+1
  4794  00040E  CFDE F026          	movff	postinc2,i2printf@val+2
  4795  000412  CFDE F027          	movff	postinc2,i2printf@val+3
  4796  000416  0E04               	movlw	4
  4797  000418  D00E               	goto	L3
  4798  00041A                     i2l3249:
  4799                           
  4800                           ;doprnt.c: 1257: else
  4801                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4802  00041A  C022  FFD9         	movff	i2printf@ap,fsr2l
  4803  00041E  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4804  000422  CFDE F024          	movff	postinc2,i2printf@val
  4805  000426  CFDD F025          	movff	postdec2,i2printf@val+1
  4806  00042A  0E00               	movlw	0
  4807  00042C  BE25               	btfsc	i2printf@val+1,7,c
  4808  00042E  0EFF               	movlw	-1
  4809  000430  6E26               	movwf	i2printf@val+2,c
  4810  000432  6E27               	movwf	i2printf@val+3,c
  4811  000434  0E02               	movlw	2
  4812  000436                     L3:
  4813  000436  2622               	addwf	i2printf@ap,f,c
  4814  000438  0E00               	movlw	0
  4815  00043A  2223               	addwfc	i2printf@ap+1,f,c
  4816                           
  4817                           ;doprnt.c: 1261: if((long)val < 0) {
  4818  00043C  AE27               	btfss	i2printf@val+3,7,c
  4819  00043E  D06A               	goto	i2l3297
  4820                           
  4821                           ;doprnt.c: 1262: flag |= 0x03;
  4822  000440  0E03               	movlw	3
  4823  000442  1228               	iorwf	i2printf@flag,f,c
  4824                           
  4825                           ;doprnt.c: 1263: val = -val;
  4826  000444  1E27               	comf	i2printf@val+3,f,c
  4827  000446  1E26               	comf	i2printf@val+2,f,c
  4828  000448  1E25               	comf	i2printf@val+1,f,c
  4829  00044A  6C24               	negf	i2printf@val,c
  4830  00044C  0E00               	movlw	0
  4831  00044E  2225               	addwfc	i2printf@val+1,f,c
  4832  000450  2226               	addwfc	i2printf@val+2,f,c
  4833  000452  2227               	addwfc	i2printf@val+3,f,c
  4834                           
  4835                           ;doprnt.c: 1264: }
  4836                           ;doprnt.c: 1266: }
  4837  000454  D05F               	goto	i2l3297
  4838  000456                     i2l571:
  4839                           
  4840                           ;doprnt.c: 1268: else
  4841                           ;doprnt.c: 1273: {
  4842                           ;doprnt.c: 1281: if(flag & 0x10)
  4843  000456  A828               	btfss	i2printf@flag,4,c
  4844  000458  D00E               	goto	i2l3263
  4845                           
  4846                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4847  00045A  C022  FFD9         	movff	i2printf@ap,fsr2l
  4848  00045E  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4849  000462  CFDE F024          	movff	postinc2,i2printf@val
  4850  000466  CFDE F025          	movff	postinc2,i2printf@val+1
  4851  00046A  CFDE F026          	movff	postinc2,i2printf@val+2
  4852  00046E  CFDE F027          	movff	postinc2,i2printf@val+3
  4853  000472  0E04               	movlw	4
  4854  000474  D00F               	goto	L4
  4855  000476                     i2l3263:
  4856                           
  4857                           ;doprnt.c: 1283: else
  4858                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4859  000476  C022  FFD9         	movff	i2printf@ap,fsr2l
  4860  00047A  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4861  00047E  CFDE F01D          	movff	postinc2,??i2_printf
  4862  000482  CFDD F01E          	movff	postdec2,??i2_printf+1
  4863  000486  C01D  F024         	movff	??i2_printf,i2printf@val
  4864  00048A  C01E  F025         	movff	??i2_printf+1,i2printf@val+1
  4865  00048E  6A26               	clrf	i2printf@val+2,c
  4866  000490  6A27               	clrf	i2printf@val+3,c
  4867  000492  0E02               	movlw	2
  4868  000494                     L4:
  4869  000494  2622               	addwf	i2printf@ap,f,c
  4870  000496  0E00               	movlw	0
  4871  000498  2223               	addwfc	i2printf@ap+1,f,c
  4872                           
  4873                           ;doprnt.c: 1287: }
  4874                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4875  00049A  D03C               	goto	i2l3297
  4876  00049C                     i2l3267:
  4877                           
  4878                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4879  00049C  0E01               	movlw	1
  4880  00049E  6E29               	movwf	i2printf@c,c
  4881  0004A0                     i2l3269:
  4882  0004A0  0E0A               	movlw	10
  4883  0004A2  1829               	xorwf	i2printf@c,w,c
  4884  0004A4  B4D8               	btfsc	status,2,c
  4885  0004A6  D03E               	goto	i2l3299
  4886                           
  4887                           ;doprnt.c: 1306: if(val < dpowers[c])
  4888  0004A8  5029               	movf	i2printf@c,w,c
  4889  0004AA  0D04               	mullw	4
  4890  0004AC  0E93               	movlw	low _dpowers
  4891  0004AE  24F3               	addwf	prodl,w,c
  4892  0004B0  6EF6               	movwf	tblptrl,c
  4893  0004B2  0EFE               	movlw	high _dpowers
  4894  0004B4  20F4               	addwfc	prodh,w,c
  4895  0004B6  6EF7               	movwf	tblptrh,c
  4896  0004B8                     	if	0	;There are less than 3 active tblptr bytes
  4897  0004B8                     	endif
  4898  0004B8  0009               	tblrd		*+
  4899  0004BA  50F5               	movf	tablat,w,c
  4900  0004BC  5C24               	subwf	i2printf@val,w,c
  4901  0004BE  0009               	tblrd		*+
  4902  0004C0  50F5               	movf	tablat,w,c
  4903  0004C2  5825               	subwfb	i2printf@val+1,w,c
  4904  0004C4  0009               	tblrd		*+
  4905  0004C6  50F5               	movf	tablat,w,c
  4906  0004C8  5826               	subwfb	i2printf@val+2,w,c
  4907  0004CA  0009               	tblrd		*+
  4908  0004CC  50F5               	movf	tablat,w,c
  4909  0004CE  5827               	subwfb	i2printf@val+3,w,c
  4910  0004D0  A0D8               	btfss	status,0,c
  4911  0004D2  D028               	goto	i2l3299
  4912                           
  4913                           ;doprnt.c: 1307: break;
  4914  0004D4  2A29               	incf	i2printf@c,f,c
  4915  0004D6  D7E4               	goto	i2l3269
  4916  0004D8                     i2l3281:
  4917                           
  4918                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4919  0004D8  0E01               	movlw	1
  4920  0004DA  6E29               	movwf	i2printf@c,c
  4921  0004DC                     i2l3283:
  4922  0004DC  0E08               	movlw	8
  4923  0004DE  1829               	xorwf	i2printf@c,w,c
  4924  0004E0  B4D8               	btfsc	status,2,c
  4925  0004E2  D020               	goto	i2l3299
  4926                           
  4927                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4928  0004E4  5029               	movf	i2printf@c,w,c
  4929  0004E6  0D04               	mullw	4
  4930  0004E8  0EBB               	movlw	low _hexpowers
  4931  0004EA  24F3               	addwf	prodl,w,c
  4932  0004EC  6EF6               	movwf	tblptrl,c
  4933  0004EE  0EFE               	movlw	high _hexpowers
  4934  0004F0  20F4               	addwfc	prodh,w,c
  4935  0004F2  6EF7               	movwf	tblptrh,c
  4936  0004F4                     	if	0	;There are less than 3 active tblptr bytes
  4937  0004F4                     	endif
  4938  0004F4  0009               	tblrd		*+
  4939  0004F6  50F5               	movf	tablat,w,c
  4940  0004F8  5C24               	subwf	i2printf@val,w,c
  4941  0004FA  0009               	tblrd		*+
  4942  0004FC  50F5               	movf	tablat,w,c
  4943  0004FE  5825               	subwfb	i2printf@val+1,w,c
  4944  000500  0009               	tblrd		*+
  4945  000502  50F5               	movf	tablat,w,c
  4946  000504  5826               	subwfb	i2printf@val+2,w,c
  4947  000506  0009               	tblrd		*+
  4948  000508  50F5               	movf	tablat,w,c
  4949  00050A  5827               	subwfb	i2printf@val+3,w,c
  4950  00050C  A0D8               	btfss	status,0,c
  4951  00050E  D00A               	goto	i2l3299
  4952                           
  4953                           ;doprnt.c: 1318: break;
  4954  000510  2A29               	incf	i2printf@c,f,c
  4955  000512  D7E4               	goto	i2l3283
  4956  000514                     i2l3297:
  4957  000514  5028               	movf	i2printf@flag,w,c
  4958  000516  0B80               	andlw	128
  4959                           
  4960                           ; Switch size 1, requested type "space"
  4961                           ; Number of cases is 2, Range of values is 0 to 128
  4962                           ; switch strategies available:
  4963                           ; Name         Instructions Cycles
  4964                           ; simple_byte            7     4 (average)
  4965                           ;	Chosen strategy is simple_byte
  4966  000518  0A00               	xorlw	0	; case 0
  4967  00051A  B4D8               	btfsc	status,2,c
  4968  00051C  D7BF               	goto	i2l3267
  4969  00051E  0A80               	xorlw	128	; case 128
  4970  000520  B4D8               	btfsc	status,2,c
  4971  000522  D7DA               	goto	i2l3281
  4972  000524                     i2l3299:
  4973                           
  4974                           ;doprnt.c: 1422: {
  4975                           ;doprnt.c: 1438: if(flag & 0x03)
  4976  000524  C028  F01D         	movff	i2printf@flag,??i2_printf
  4977  000528  0E03               	movlw	3
  4978  00052A  161D               	andwf	??i2_printf,f,c
  4979  00052C  B4D8               	btfsc	status,2,c
  4980  00052E  D003               	goto	i2l3303
  4981                           
  4982                           ;doprnt.c: 1439: (putch('-') );
  4983  000530  0E2D               	movlw	45
  4984  000532  EC36  F00D         	call	i2_putch
  4985  000536                     i2l3303:
  4986                           
  4987                           ;doprnt.c: 1469: }
  4988                           ;doprnt.c: 1472: prec = c;
  4989  000536  5029               	movf	i2printf@c,w,c
  4990  000538  6E20               	movwf	i2printf@prec,c
  4991  00053A  6A21               	clrf	i2printf@prec+1,c
  4992  00053C  BE20               	btfsc	i2printf@prec,7,c
  4993  00053E  0621               	decf	i2printf@prec+1,f,c
  4994                           
  4995                           ;doprnt.c: 1474: while(prec--) {
  4996  000540  D07C               	goto	i2l3317
  4997  000542                     i2l3305:
  4998                           
  4999                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5000  000542  C020  F01D         	movff	i2printf@prec,??i2_printf
  5001  000546  C021  F01E         	movff	i2printf@prec+1,??i2_printf+1
  5002  00054A  90D8               	bcf	status,0,c
  5003  00054C  361D               	rlcf	??i2_printf,f,c
  5004  00054E  361E               	rlcf	??i2_printf+1,f,c
  5005  000550  90D8               	bcf	status,0,c
  5006  000552  361D               	rlcf	??i2_printf,f,c
  5007  000554  361E               	rlcf	??i2_printf+1,f,c
  5008  000556  0E93               	movlw	low _dpowers
  5009  000558  241D               	addwf	??i2_printf,w,c
  5010  00055A  6EF6               	movwf	tblptrl,c
  5011  00055C  0EFE               	movlw	high _dpowers
  5012  00055E  201E               	addwfc	??i2_printf+1,w,c
  5013  000560  6EF7               	movwf	tblptrh,c
  5014  000562                     	if	0	;There are less than 3 active tblptr bytes
  5015  000562                     	endif
  5016  000562  0009               	tblrd		*+
  5017  000564  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  5018  000568  0009               	tblrd		*+
  5019  00056A  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  5020  00056E  0009               	tblrd		*+
  5021  000570  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  5022  000574  000A               	tblrd		*-
  5023  000576  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  5024  00057A  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  5025  00057E  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  5026  000582  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  5027  000586  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  5028  00058A  EC61  F00A         	call	i2___lldiv	;wreg free
  5029  00058E  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  5030  000592  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  5031  000596  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  5032  00059A  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  5033  00059E  0E0A               	movlw	10
  5034  0005A0  6E12               	movwf	i2___llmod@divisor,c
  5035  0005A2  0E00               	movlw	0
  5036  0005A4  6E13               	movwf	i2___llmod@divisor+1,c
  5037  0005A6  0E00               	movlw	0
  5038  0005A8  6E14               	movwf	i2___llmod@divisor+2,c
  5039  0005AA  0E00               	movlw	0
  5040  0005AC  6E15               	movwf	i2___llmod@divisor+3,c
  5041  0005AE  EC1A  F00B         	call	i2___llmod	;wreg free
  5042  0005B2  500E               	movf	?i2___llmod,w,c
  5043  0005B4  0F30               	addlw	48
  5044  0005B6  6E29               	movwf	i2printf@c,c
  5045                           
  5046                           ;doprnt.c: 1491: break;
  5047  0005B8  D03D               	goto	i2l3315
  5048  0005BA                     i2l3307:
  5049                           
  5050                           ;doprnt.c: 1499: {
  5051                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5052  0005BA  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  5053  0005BE  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  5054  0005C2  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  5055  0005C6  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  5056  0005CA  C020  F01D         	movff	i2printf@prec,??i2_printf
  5057  0005CE  C021  F01E         	movff	i2printf@prec+1,??i2_printf+1
  5058  0005D2  90D8               	bcf	status,0,c
  5059  0005D4  361D               	rlcf	??i2_printf,f,c
  5060  0005D6  361E               	rlcf	??i2_printf+1,f,c
  5061  0005D8  90D8               	bcf	status,0,c
  5062  0005DA  361D               	rlcf	??i2_printf,f,c
  5063  0005DC  361E               	rlcf	??i2_printf+1,f,c
  5064  0005DE  0EBB               	movlw	low _hexpowers
  5065  0005E0  241D               	addwf	??i2_printf,w,c
  5066  0005E2  6EF6               	movwf	tblptrl,c
  5067  0005E4  0EFE               	movlw	high _hexpowers
  5068  0005E6  201E               	addwfc	??i2_printf+1,w,c
  5069  0005E8  6EF7               	movwf	tblptrh,c
  5070  0005EA                     	if	0	;There are less than 3 active tblptr bytes
  5071  0005EA                     	endif
  5072  0005EA  0009               	tblrd		*+
  5073  0005EC  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  5074  0005F0  0009               	tblrd		*+
  5075  0005F2  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  5076  0005F6  0009               	tblrd		*+
  5077  0005F8  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  5078  0005FC  000A               	tblrd		*-
  5079  0005FE  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  5080  000602  EC61  F00A         	call	i2___lldiv	;wreg free
  5081  000606  5001               	movf	?i2___lldiv,w,c
  5082  000608  0B0F               	andlw	15
  5083  00060A  6E1F               	movwf	i2printf@idx,c
  5084                           
  5085                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5086  00060C  501F               	movf	i2printf@idx,w,c
  5087  00060E  0D01               	mullw	1
  5088  000610  0E60               	movlw	low STR_18
  5089  000612  24F3               	addwf	prodl,w,c
  5090  000614  6EF6               	movwf	tblptrl,c
  5091  000616  0EFF               	movlw	high STR_18
  5092  000618  20F4               	addwfc	prodh,w,c
  5093  00061A  6EF7               	movwf	tblptrh,c
  5094  00061C                     	if	0	;There are less than 3 active tblptr bytes
  5095  00061C                     	endif
  5096  00061C  0008               	tblrd		*
  5097  00061E  CFF5 F029          	movff	tablat,i2printf@c
  5098                           
  5099                           ;doprnt.c: 1523: }
  5100                           
  5101                           ;doprnt.c: 1508: }
  5102                           ;doprnt.c: 1510: break;
  5103  000622  D008               	goto	i2l3315
  5104  000624                     i2l3313:
  5105  000624  5028               	movf	i2printf@flag,w,c
  5106  000626  0B80               	andlw	128
  5107                           
  5108                           ; Switch size 1, requested type "space"
  5109                           ; Number of cases is 2, Range of values is 0 to 128
  5110                           ; switch strategies available:
  5111                           ; Name         Instructions Cycles
  5112                           ; simple_byte            7     4 (average)
  5113                           ;	Chosen strategy is simple_byte
  5114  000628  0A00               	xorlw	0	; case 0
  5115  00062A  B4D8               	btfsc	status,2,c
  5116  00062C  D78A               	goto	i2l3305
  5117  00062E  0A80               	xorlw	128	; case 128
  5118  000630  B4D8               	btfsc	status,2,c
  5119  000632  D7C3               	goto	i2l3307
  5120  000634                     i2l3315:
  5121                           
  5122                           ;doprnt.c: 1524: (putch(c) );
  5123  000634  5029               	movf	i2printf@c,w,c
  5124  000636  EC36  F00D         	call	i2_putch
  5125  00063A                     i2l3317:
  5126  00063A  0620               	decf	i2printf@prec,f,c
  5127  00063C  A0D8               	btfss	status,0,c
  5128  00063E  0621               	decf	i2printf@prec+1,f,c
  5129  000640  2820               	incf	i2printf@prec,w,c
  5130  000642  E1F0               	bnz	i2l3313
  5131  000644  2821               	incf	i2printf@prec+1,w,c
  5132  000646  A4D8               	btfss	status,2,c
  5133  000648  D7ED               	goto	i2l3313
  5134  00064A                     i2l3319:
  5135  00064A  C017  FFF6         	movff	i2printf@f,tblptrl
  5136  00064E  C018  FFF7         	movff	i2printf@f+1,tblptrh
  5137  000652  4A17               	infsnz	i2printf@f,f,c
  5138  000654  2A18               	incf	i2printf@f+1,f,c
  5139  000656                     	if	0	;tblptru may be non-zero
  5140  000656                     	endif
  5141  000656                     	if	0	;tblptru may be non-zero
  5142  000656                     	endif
  5143  000656  0008               	tblrd		*
  5144  000658  CFF5 F029          	movff	tablat,i2printf@c
  5145  00065C  5029               	movf	i2printf@c,w,c
  5146  00065E  B4D8               	btfsc	status,2,c
  5147  000660  0012               	return	
  5148  000662  D68F               	goto	i2l3223
  5149  000664                     __end_ofi2_printf:
  5150                           	opt stack 0
  5151                           pclatu	equ	0xFFB
  5152                           pclath	equ	0xFFA
  5153                           tblptru	equ	0xFF8
  5154                           tblptrh	equ	0xFF7
  5155                           tblptrl	equ	0xFF6
  5156                           tablat	equ	0xFF5
  5157                           prodh	equ	0xFF4
  5158                           prodl	equ	0xFF3
  5159                           intcon	equ	0xFF2
  5160                           intcon3	equ	0xFF0
  5161                           postinc0	equ	0xFEE
  5162                           fsr0h	equ	0xFEA
  5163                           fsr0l	equ	0xFE9
  5164                           wreg	equ	0xFE8
  5165                           postdec1	equ	0xFE5
  5166                           fsr1h	equ	0xFE2
  5167                           fsr1l	equ	0xFE1
  5168                           indf2	equ	0xFDF
  5169                           postinc2	equ	0xFDE
  5170                           postdec2	equ	0xFDD
  5171                           fsr2h	equ	0xFDA
  5172                           fsr2l	equ	0xFD9
  5173                           status	equ	0xFD8
  5174                           
  5175 ;; *************** function i2_putch *****************
  5176 ;; Defined at:
  5177 ;;		line 35 in file "lcd.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  data            1    wreg     unsigned char 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  data            1    4[COMRAM] unsigned char 
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;Total ram usage:        1 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    3
  5198 ;; This function calls:
  5199 ;;		i2_lcdNewline
  5200 ;;		i2_lcdNibble
  5201 ;; This function is called by:
  5202 ;;		i2_printf
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text26
  5207  001A6C                     __ptext26:
  5208                           	opt stack 0
  5209  001A6C                     i2_putch:
  5210                           	opt stack 17
  5211                           
  5212                           ;incstack = 0
  5213                           ;i2putch@data stored from wreg
  5214  001A6C  6E05               	movwf	i2putch@data,c
  5215                           
  5216                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5217  001A6E  0E0A               	movlw	10
  5218  001A70  1805               	xorwf	i2putch@data,w,c
  5219  001A72  A4D8               	btfss	status,2,c
  5220  001A74  D003               	goto	i2l159
  5221  001A76  EC79  F00D         	call	i2_lcdNewline	;wreg free
  5222  001A7A  0012               	return	
  5223  001A7C                     i2l159:
  5224                           
  5225                           ;lcd.c: 37: else
  5226                           ;lcd.c: 38: {
  5227                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5228  001A7C  848C               	bsf	3980,2,c	;volatile
  5229                           
  5230                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5231  001A7E  0E74               	movlw	116
  5232  001A80                     i2u336_47:
  5233  001A80  2EE8               	decfsz	wreg,f,c
  5234  001A82  D7FE               	bra	i2u336_47
  5235  001A84  D000               	nop2	
  5236                           
  5237                           ;lcd.c: 41: lcdNibble(data);
  5238  001A86  5005               	movf	i2putch@data,w,c
  5239  001A88  EC4D  F00B         	call	i2_lcdNibble
  5240  001A8C  0012               	return	
  5241  001A8E                     __end_ofi2_putch:
  5242                           	opt stack 0
  5243                           pclatu	equ	0xFFB
  5244                           pclath	equ	0xFFA
  5245                           tblptru	equ	0xFF8
  5246                           tblptrh	equ	0xFF7
  5247                           tblptrl	equ	0xFF6
  5248                           tablat	equ	0xFF5
  5249                           prodh	equ	0xFF4
  5250                           prodl	equ	0xFF3
  5251                           intcon	equ	0xFF2
  5252                           intcon3	equ	0xFF0
  5253                           postinc0	equ	0xFEE
  5254                           fsr0h	equ	0xFEA
  5255                           fsr0l	equ	0xFE9
  5256                           wreg	equ	0xFE8
  5257                           postdec1	equ	0xFE5
  5258                           fsr1h	equ	0xFE2
  5259                           fsr1l	equ	0xFE1
  5260                           indf2	equ	0xFDF
  5261                           postinc2	equ	0xFDE
  5262                           postdec2	equ	0xFDD
  5263                           fsr2h	equ	0xFDA
  5264                           fsr2l	equ	0xFD9
  5265                           status	equ	0xFD8
  5266                           
  5267 ;; *************** function i2_lcdNewline *****************
  5268 ;; Defined at:
  5269 ;;		line 78 in file "lcd.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;		None
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;		None
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  1    wreg      void 
  5276 ;; Registers used:
  5277 ;;		wreg, status,2, status,0, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;Total ram usage:        0 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    2
  5290 ;; This function calls:
  5291 ;;		i2_lcdInst
  5292 ;; This function is called by:
  5293 ;;		i2_putch
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           	psect	text27
  5298  001AF2                     __ptext27:
  5299                           	opt stack 0
  5300  001AF2                     i2_lcdNewline:
  5301                           	opt stack 17
  5302                           
  5303                           ;lcd.c: 79: lcdInst(0b11000000);
  5304                           
  5305                           ;incstack = 0
  5306  001AF2  0EC0               	movlw	192
  5307  001AF4  EC47  F00D         	call	i2_lcdInst
  5308  001AF8  0012               	return		;funcret
  5309  001AFA                     __end_ofi2_lcdNewline:
  5310                           	opt stack 0
  5311                           pclatu	equ	0xFFB
  5312                           pclath	equ	0xFFA
  5313                           tblptru	equ	0xFF8
  5314                           tblptrh	equ	0xFF7
  5315                           tblptrl	equ	0xFF6
  5316                           tablat	equ	0xFF5
  5317                           prodh	equ	0xFF4
  5318                           prodl	equ	0xFF3
  5319                           intcon	equ	0xFF2
  5320                           intcon3	equ	0xFF0
  5321                           postinc0	equ	0xFEE
  5322                           fsr0h	equ	0xFEA
  5323                           fsr0l	equ	0xFE9
  5324                           wreg	equ	0xFE8
  5325                           postdec1	equ	0xFE5
  5326                           fsr1h	equ	0xFE2
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function i2___llmod *****************
  5336 ;; Defined at:
  5337 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  dividend        4   13[COMRAM] unsigned long 
  5340 ;;  divisor         4   17[COMRAM] unsigned long 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  __llmod         1   21[COMRAM] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  4   13[COMRAM] unsigned long 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5352 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;Total ram usage:        9 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		i2_printf
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text28
  5366  001634                     __ptext28:
  5367                           	opt stack 0
  5368  001634                     i2___llmod:
  5369                           	opt stack 20
  5370                           
  5371                           ;incstack = 0
  5372  001634  5012               	movf	i2___llmod@divisor,w,c
  5373  001636  1013               	iorwf	i2___llmod@divisor+1,w,c
  5374  001638  1014               	iorwf	i2___llmod@divisor+2,w,c
  5375  00163A  1015               	iorwf	i2___llmod@divisor+3,w,c
  5376  00163C  B4D8               	btfsc	status,2,c
  5377  00163E  D024               	goto	i2l957
  5378  001640  0E01               	movlw	1
  5379  001642  6E16               	movwf	i2___llmod@counter,c
  5380  001644  D006               	goto	i2l3075
  5381  001646                     i2l3073:
  5382  001646  90D8               	bcf	status,0,c
  5383  001648  3612               	rlcf	i2___llmod@divisor,f,c
  5384  00164A  3613               	rlcf	i2___llmod@divisor+1,f,c
  5385  00164C  3614               	rlcf	i2___llmod@divisor+2,f,c
  5386  00164E  3615               	rlcf	i2___llmod@divisor+3,f,c
  5387  001650  2A16               	incf	i2___llmod@counter,f,c
  5388  001652                     i2l3075:
  5389  001652  AE15               	btfss	i2___llmod@divisor+3,7,c
  5390  001654  D7F8               	goto	i2l3073
  5391  001656                     i2l3077:
  5392  001656  5012               	movf	i2___llmod@divisor,w,c
  5393  001658  5C0E               	subwf	i2___llmod@dividend,w,c
  5394  00165A  5013               	movf	i2___llmod@divisor+1,w,c
  5395  00165C  580F               	subwfb	i2___llmod@dividend+1,w,c
  5396  00165E  5014               	movf	i2___llmod@divisor+2,w,c
  5397  001660  5810               	subwfb	i2___llmod@dividend+2,w,c
  5398  001662  5015               	movf	i2___llmod@divisor+3,w,c
  5399  001664  5811               	subwfb	i2___llmod@dividend+3,w,c
  5400  001666  A0D8               	btfss	status,0,c
  5401  001668  D008               	goto	i2l3081
  5402  00166A  5012               	movf	i2___llmod@divisor,w,c
  5403  00166C  5E0E               	subwf	i2___llmod@dividend,f,c
  5404  00166E  5013               	movf	i2___llmod@divisor+1,w,c
  5405  001670  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  5406  001672  5014               	movf	i2___llmod@divisor+2,w,c
  5407  001674  5A10               	subwfb	i2___llmod@dividend+2,f,c
  5408  001676  5015               	movf	i2___llmod@divisor+3,w,c
  5409  001678  5A11               	subwfb	i2___llmod@dividend+3,f,c
  5410  00167A                     i2l3081:
  5411  00167A  90D8               	bcf	status,0,c
  5412  00167C  3215               	rrcf	i2___llmod@divisor+3,f,c
  5413  00167E  3214               	rrcf	i2___llmod@divisor+2,f,c
  5414  001680  3213               	rrcf	i2___llmod@divisor+1,f,c
  5415  001682  3212               	rrcf	i2___llmod@divisor,f,c
  5416  001684  2E16               	decfsz	i2___llmod@counter,f,c
  5417  001686  D7E7               	goto	i2l3077
  5418  001688                     i2l957:
  5419  001688  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  5420  00168C  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  5421  001690  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  5422  001694  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  5423  001698  0012               	return		;funcret
  5424  00169A                     __end_ofi2___llmod:
  5425                           	opt stack 0
  5426                           pclatu	equ	0xFFB
  5427                           pclath	equ	0xFFA
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           intcon3	equ	0xFF0
  5436                           postinc0	equ	0xFEE
  5437                           fsr0h	equ	0xFEA
  5438                           fsr0l	equ	0xFE9
  5439                           wreg	equ	0xFE8
  5440                           postdec1	equ	0xFE5
  5441                           fsr1h	equ	0xFE2
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function i2___lldiv *****************
  5451 ;; Defined at:
  5452 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  dividend        4    0[COMRAM] unsigned long 
  5455 ;;  divisor         4    4[COMRAM] unsigned long 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;  __lldiv         4    8[COMRAM] unsigned long 
  5458 ;;  __lldiv         1   12[COMRAM] unsigned char 
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  4    0[COMRAM] unsigned long 
  5461 ;; Registers used:
  5462 ;;		wreg, status,2, status,0
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5468 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;Total ram usage:       13 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		i2_printf
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text29
  5482  0014C2                     __ptext29:
  5483                           	opt stack 0
  5484  0014C2                     i2___lldiv:
  5485                           	opt stack 20
  5486                           
  5487                           ;incstack = 0
  5488  0014C2  0E00               	movlw	0
  5489  0014C4  6E09               	movwf	i2___lldiv@quotient,c
  5490  0014C6  0E00               	movlw	0
  5491  0014C8  6E0A               	movwf	i2___lldiv@quotient+1,c
  5492  0014CA  0E00               	movlw	0
  5493  0014CC  6E0B               	movwf	i2___lldiv@quotient+2,c
  5494  0014CE  0E00               	movlw	0
  5495  0014D0  6E0C               	movwf	i2___lldiv@quotient+3,c
  5496  0014D2  5005               	movf	i2___lldiv@divisor,w,c
  5497  0014D4  1006               	iorwf	i2___lldiv@divisor+1,w,c
  5498  0014D6  1007               	iorwf	i2___lldiv@divisor+2,w,c
  5499  0014D8  1008               	iorwf	i2___lldiv@divisor+3,w,c
  5500  0014DA  B4D8               	btfsc	status,2,c
  5501  0014DC  D02A               	goto	i2l947
  5502  0014DE  0E01               	movlw	1
  5503  0014E0  6E0D               	movwf	i2___lldiv@counter,c
  5504  0014E2  D006               	goto	i2l3055
  5505  0014E4                     i2l3053:
  5506  0014E4  90D8               	bcf	status,0,c
  5507  0014E6  3605               	rlcf	i2___lldiv@divisor,f,c
  5508  0014E8  3606               	rlcf	i2___lldiv@divisor+1,f,c
  5509  0014EA  3607               	rlcf	i2___lldiv@divisor+2,f,c
  5510  0014EC  3608               	rlcf	i2___lldiv@divisor+3,f,c
  5511  0014EE  2A0D               	incf	i2___lldiv@counter,f,c
  5512  0014F0                     i2l3055:
  5513  0014F0  AE08               	btfss	i2___lldiv@divisor+3,7,c
  5514  0014F2  D7F8               	goto	i2l3053
  5515  0014F4                     i2l3057:
  5516  0014F4  90D8               	bcf	status,0,c
  5517  0014F6  3609               	rlcf	i2___lldiv@quotient,f,c
  5518  0014F8  360A               	rlcf	i2___lldiv@quotient+1,f,c
  5519  0014FA  360B               	rlcf	i2___lldiv@quotient+2,f,c
  5520  0014FC  360C               	rlcf	i2___lldiv@quotient+3,f,c
  5521  0014FE  5005               	movf	i2___lldiv@divisor,w,c
  5522  001500  5C01               	subwf	i2___lldiv@dividend,w,c
  5523  001502  5006               	movf	i2___lldiv@divisor+1,w,c
  5524  001504  5802               	subwfb	i2___lldiv@dividend+1,w,c
  5525  001506  5007               	movf	i2___lldiv@divisor+2,w,c
  5526  001508  5803               	subwfb	i2___lldiv@dividend+2,w,c
  5527  00150A  5008               	movf	i2___lldiv@divisor+3,w,c
  5528  00150C  5804               	subwfb	i2___lldiv@dividend+3,w,c
  5529  00150E  A0D8               	btfss	status,0,c
  5530  001510  D009               	goto	i2l3065
  5531  001512  5005               	movf	i2___lldiv@divisor,w,c
  5532  001514  5E01               	subwf	i2___lldiv@dividend,f,c
  5533  001516  5006               	movf	i2___lldiv@divisor+1,w,c
  5534  001518  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  5535  00151A  5007               	movf	i2___lldiv@divisor+2,w,c
  5536  00151C  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  5537  00151E  5008               	movf	i2___lldiv@divisor+3,w,c
  5538  001520  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  5539  001522  8009               	bsf	i2___lldiv@quotient,0,c
  5540  001524                     i2l3065:
  5541  001524  90D8               	bcf	status,0,c
  5542  001526  3208               	rrcf	i2___lldiv@divisor+3,f,c
  5543  001528  3207               	rrcf	i2___lldiv@divisor+2,f,c
  5544  00152A  3206               	rrcf	i2___lldiv@divisor+1,f,c
  5545  00152C  3205               	rrcf	i2___lldiv@divisor,f,c
  5546  00152E  2E0D               	decfsz	i2___lldiv@counter,f,c
  5547  001530  D7E1               	goto	i2l3057
  5548  001532                     i2l947:
  5549  001532  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  5550  001536  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  5551  00153A  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  5552  00153E  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  5553  001542  0012               	return		;funcret
  5554  001544                     __end_ofi2___lldiv:
  5555                           	opt stack 0
  5556                           pclatu	equ	0xFFB
  5557                           pclath	equ	0xFFA
  5558                           tblptru	equ	0xFF8
  5559                           tblptrh	equ	0xFF7
  5560                           tblptrl	equ	0xFF6
  5561                           tablat	equ	0xFF5
  5562                           prodh	equ	0xFF4
  5563                           prodl	equ	0xFF3
  5564                           intcon	equ	0xFF2
  5565                           intcon3	equ	0xFF0
  5566                           postinc0	equ	0xFEE
  5567                           fsr0h	equ	0xFEA
  5568                           fsr0l	equ	0xFE9
  5569                           wreg	equ	0xFE8
  5570                           postdec1	equ	0xFE5
  5571                           fsr1h	equ	0xFE2
  5572                           fsr1l	equ	0xFE1
  5573                           indf2	equ	0xFDF
  5574                           postinc2	equ	0xFDE
  5575                           postdec2	equ	0xFDD
  5576                           fsr2h	equ	0xFDA
  5577                           fsr2l	equ	0xFD9
  5578                           status	equ	0xFD8
  5579                           
  5580 ;; *************** function i2_lcdClear *****************
  5581 ;; Defined at:
  5582 ;;		line 74 in file "lcd.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;		None
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;		None
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  1    wreg      void 
  5589 ;; Registers used:
  5590 ;;		wreg, status,2, status,0, cstack
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;Total ram usage:        0 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    2
  5603 ;; This function calls:
  5604 ;;		i2_lcdInst
  5605 ;; This function is called by:
  5606 ;;		_sortBatteryInterruptService
  5607 ;;		_setAngle
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text30
  5612  001AFA                     __ptext30:
  5613                           	opt stack 0
  5614  001AFA                     i2_lcdClear:
  5615                           	opt stack 19
  5616                           
  5617                           ;lcd.c: 75: lcdInst(0b00000001);
  5618                           
  5619                           ;incstack = 0
  5620  001AFA  0E01               	movlw	1
  5621  001AFC  EC47  F00D         	call	i2_lcdInst
  5622  001B00  0012               	return		;funcret
  5623  001B02                     __end_ofi2_lcdClear:
  5624                           	opt stack 0
  5625                           pclatu	equ	0xFFB
  5626                           pclath	equ	0xFFA
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           intcon3	equ	0xFF0
  5635                           postinc0	equ	0xFEE
  5636                           fsr0h	equ	0xFEA
  5637                           fsr0l	equ	0xFE9
  5638                           wreg	equ	0xFE8
  5639                           postdec1	equ	0xFE5
  5640                           fsr1h	equ	0xFE2
  5641                           fsr1l	equ	0xFE1
  5642                           indf2	equ	0xFDF
  5643                           postinc2	equ	0xFDE
  5644                           postdec2	equ	0xFDD
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function i2_lcdInst *****************
  5650 ;; Defined at:
  5651 ;;		line 27 in file "lcd.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  data            1    wreg     unsigned char 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  data            1    3[COMRAM] unsigned char 
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      void 
  5658 ;; Registers used:
  5659 ;;		wreg, status,2, status,0, cstack
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;Total ram usage:        2 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    1
  5672 ;; This function calls:
  5673 ;;		i2_lcdNibble
  5674 ;; This function is called by:
  5675 ;;		i2_lcdClear
  5676 ;;		i2_lcdNewline
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text31
  5681  001A8E                     __ptext31:
  5682                           	opt stack 0
  5683  001A8E                     i2_lcdInst:
  5684                           	opt stack 17
  5685                           
  5686                           ;incstack = 0
  5687                           ;i2lcdInst@data stored from wreg
  5688  001A8E  6E04               	movwf	i2lcdInst@data,c
  5689                           
  5690                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  5691  001A90  948C               	bcf	3980,2,c	;volatile
  5692                           
  5693                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5694  001A92  0E74               	movlw	116
  5695  001A94                     i2u337_47:
  5696  001A94  2EE8               	decfsz	wreg,f,c
  5697  001A96  D7FE               	bra	i2u337_47
  5698  001A98  D000               	nop2	
  5699                           
  5700                           ;lcd.c: 30: lcdNibble(data);
  5701  001A9A  5004               	movf	i2lcdInst@data,w,c
  5702  001A9C  EC4D  F00B         	call	i2_lcdNibble
  5703                           
  5704                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  5705  001AA0  0E04               	movlw	4
  5706  001AA2  6E03               	movwf	??i2_lcdInst& (0+255),c
  5707  001AA4  0E3E               	movlw	62
  5708  001AA6                     i2u338_47:
  5709  001AA6  2EE8               	decfsz	wreg,f,c
  5710  001AA8  D7FE               	bra	i2u338_47
  5711  001AAA  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
  5712  001AAC  D7FC               	bra	i2u338_47
  5713  001AAE  0012               	return		;funcret
  5714  001AB0                     __end_ofi2_lcdInst:
  5715                           	opt stack 0
  5716                           pclatu	equ	0xFFB
  5717                           pclath	equ	0xFFA
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           prodh	equ	0xFF4
  5723                           prodl	equ	0xFF3
  5724                           intcon	equ	0xFF2
  5725                           intcon3	equ	0xFF0
  5726                           postinc0	equ	0xFEE
  5727                           fsr0h	equ	0xFEA
  5728                           fsr0l	equ	0xFE9
  5729                           wreg	equ	0xFE8
  5730                           postdec1	equ	0xFE5
  5731                           fsr1h	equ	0xFE2
  5732                           fsr1l	equ	0xFE1
  5733                           indf2	equ	0xFDF
  5734                           postinc2	equ	0xFDE
  5735                           postdec2	equ	0xFDD
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740 ;; *************** function i2_lcdNibble *****************
  5741 ;; Defined at:
  5742 ;;		line 46 in file "lcd.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  data            1    wreg     unsigned char 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;  data            1    1[COMRAM] unsigned char 
  5747 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  1    wreg      void 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;Total ram usage:        2 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		i2_lcdInst
  5767 ;;		i2_putch
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           	psect	text32
  5772  00169A                     __ptext32:
  5773                           	opt stack 0
  5774  00169A                     i2_lcdNibble:
  5775                           	opt stack 19
  5776                           
  5777                           ;incstack = 0
  5778                           ;i2lcdNibble@data stored from wreg
  5779  00169A  6E02               	movwf	i2lcdNibble@data,c
  5780                           
  5781                           ;lcd.c: 48: char temp = data & 0xF0;
  5782  00169C  5002               	movf	i2lcdNibble@data,w,c
  5783  00169E  0BF0               	andlw	240
  5784  0016A0  6E01               	movwf	i2lcdNibble@temp,c
  5785                           
  5786                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5787  0016A2  508C               	movf	3980,w,c	;volatile
  5788  0016A4  0B0F               	andlw	15
  5789  0016A6  6E8C               	movwf	3980,c	;volatile
  5790                           
  5791                           ;lcd.c: 50: LATD = temp | LATD;
  5792  0016A8  5001               	movf	i2lcdNibble@temp,w,c
  5793  0016AA  108C               	iorwf	3980,w,c	;volatile
  5794  0016AC  6E8C               	movwf	3980,c	;volatile
  5795                           
  5796                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5797  0016AE  968C               	bcf	3980,3,c	;volatile
  5798                           
  5799                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5800  0016B0  0ED6               	movlw	214
  5801  0016B2                     i2u339_47:
  5802  0016B2  D000               	nop2	
  5803  0016B4  D000               	nop2	
  5804  0016B6  2EE8               	decfsz	wreg,f,c
  5805  0016B8  D7FC               	bra	i2u339_47
  5806  0016BA  D000               	nop2	
  5807                           
  5808                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5809  0016BC  868C               	bsf	3980,3,c	;volatile
  5810                           
  5811                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5812  0016BE  0ED6               	movlw	214
  5813  0016C0                     i2u340_47:
  5814  0016C0  D000               	nop2	
  5815  0016C2  D000               	nop2	
  5816  0016C4  2EE8               	decfsz	wreg,f,c
  5817  0016C6  D7FC               	bra	i2u340_47
  5818  0016C8  D000               	nop2	
  5819                           
  5820                           ;lcd.c: 58: data = data << 4;
  5821  0016CA  3802               	swapf	i2lcdNibble@data,w,c
  5822  0016CC  0BF0               	andlw	240
  5823  0016CE  6E02               	movwf	i2lcdNibble@data,c
  5824                           
  5825                           ;lcd.c: 60: temp = data & 0xF0;
  5826  0016D0  5002               	movf	i2lcdNibble@data,w,c
  5827  0016D2  0BF0               	andlw	240
  5828  0016D4  6E01               	movwf	i2lcdNibble@temp,c
  5829                           
  5830                           ;lcd.c: 61: LATD = LATD & 0x0F;
  5831  0016D6  508C               	movf	3980,w,c	;volatile
  5832  0016D8  0B0F               	andlw	15
  5833  0016DA  6E8C               	movwf	3980,c	;volatile
  5834                           
  5835                           ;lcd.c: 62: LATD = temp | LATD;
  5836  0016DC  5001               	movf	i2lcdNibble@temp,w,c
  5837  0016DE  108C               	iorwf	3980,w,c	;volatile
  5838  0016E0  6E8C               	movwf	3980,c	;volatile
  5839                           
  5840                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  5841  0016E2  968C               	bcf	3980,3,c	;volatile
  5842                           
  5843                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5844  0016E4  0ED6               	movlw	214
  5845  0016E6                     i2u341_47:
  5846  0016E6  D000               	nop2	
  5847  0016E8  D000               	nop2	
  5848  0016EA  2EE8               	decfsz	wreg,f,c
  5849  0016EC  D7FC               	bra	i2u341_47
  5850  0016EE  D000               	nop2	
  5851                           
  5852                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  5853  0016F0  868C               	bsf	3980,3,c	;volatile
  5854                           
  5855                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5856  0016F2  0ED6               	movlw	214
  5857  0016F4                     i2u342_47:
  5858  0016F4  D000               	nop2	
  5859  0016F6  D000               	nop2	
  5860  0016F8  2EE8               	decfsz	wreg,f,c
  5861  0016FA  D7FC               	bra	i2u342_47
  5862  0016FC  D000               	nop2	
  5863  0016FE  0012               	return		;funcret
  5864  001700                     __end_ofi2_lcdNibble:
  5865                           	opt stack 0
  5866                           pclatu	equ	0xFFB
  5867                           pclath	equ	0xFFA
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           intcon3	equ	0xFF0
  5876                           postinc0	equ	0xFEE
  5877                           fsr0h	equ	0xFEA
  5878                           fsr0l	equ	0xFE9
  5879                           wreg	equ	0xFE8
  5880                           postdec1	equ	0xFE5
  5881                           fsr1h	equ	0xFE2
  5882                           fsr1l	equ	0xFE1
  5883                           indf2	equ	0xFDF
  5884                           postinc2	equ	0xFDE
  5885                           postdec2	equ	0xFDD
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function _angleToPulse *****************
  5891 ;; Defined at:
  5892 ;;		line 26 in file "servo.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  angle           2   69[COMRAM] int 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  a000            4   88[COMRAM] long 
  5897 ;;  a180            4   81[COMRAM] long 
  5898 ;;  offset          4   77[COMRAM] long 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  4   69[COMRAM] long 
  5901 ;; Registers used:
  5902 ;;		wreg, status,2, status,0, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;Total ram usage:       23 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    2
  5915 ;; This function calls:
  5916 ;;		___altoft
  5917 ;;		___awtoft
  5918 ;;		___ftadd
  5919 ;;		___ftdiv
  5920 ;;		___ftmul
  5921 ;;		___fttol
  5922 ;; This function is called by:
  5923 ;;		_setAngle
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text33
  5928  0009E4                     __ptext33:
  5929                           	opt stack 0
  5930  0009E4                     _angleToPulse:
  5931                           	opt stack 19
  5932                           
  5933                           ;servo.c: 27: long offset = 0;
  5934                           
  5935                           ;incstack = 0
  5936  0009E4  0E00               	movlw	0
  5937  0009E6  6E4E               	movwf	angleToPulse@offset,c
  5938  0009E8  0E00               	movlw	0
  5939  0009EA  6E4F               	movwf	angleToPulse@offset+1,c
  5940  0009EC  0E00               	movlw	0
  5941  0009EE  6E50               	movwf	angleToPulse@offset+2,c
  5942  0009F0  0E00               	movlw	0
  5943  0009F2  6E51               	movwf	angleToPulse@offset+3,c
  5944                           
  5945                           ;servo.c: 28: long a000 = 1250;
  5946  0009F4  0EE2               	movlw	226
  5947  0009F6  6E59               	movwf	angleToPulse@a000,c
  5948  0009F8  0E04               	movlw	4
  5949  0009FA  6E5A               	movwf	angleToPulse@a000+1,c
  5950  0009FC  0E00               	movlw	0
  5951  0009FE  6E5B               	movwf	angleToPulse@a000+2,c
  5952  000A00  0E00               	movlw	0
  5953  000A02  6E5C               	movwf	angleToPulse@a000+3,c
  5954                           
  5955                           ;servo.c: 29: long a180 = 6250;
  5956  000A04  0E6A               	movlw	106
  5957  000A06  6E52               	movwf	angleToPulse@a180,c
  5958  000A08  0E18               	movlw	24
  5959  000A0A  6E53               	movwf	angleToPulse@a180+1,c
  5960  000A0C  0E00               	movlw	0
  5961  000A0E  6E54               	movwf	angleToPulse@a180+2,c
  5962  000A10  0E00               	movlw	0
  5963  000A12  6E55               	movwf	angleToPulse@a180+3,c
  5964                           
  5965                           ;servo.c: 31: return a000 + angle/180.0*(a180-a000) + offset;
  5966  000A14  C059  F04A         	movff	angleToPulse@a000,??_angleToPulse
  5967  000A18  C05A  F04B         	movff	angleToPulse@a000+1,??_angleToPulse+1
  5968  000A1C  C05B  F04C         	movff	angleToPulse@a000+2,??_angleToPulse+2
  5969  000A20  C05C  F04D         	movff	angleToPulse@a000+3,??_angleToPulse+3
  5970  000A24  1E4A               	comf	??_angleToPulse,f,c
  5971  000A26  1E4B               	comf	??_angleToPulse+1,f,c
  5972  000A28  1E4C               	comf	??_angleToPulse+2,f,c
  5973  000A2A  1E4D               	comf	??_angleToPulse+3,f,c
  5974  000A2C  2A4A               	incf	??_angleToPulse,f,c
  5975  000A2E  0E00               	movlw	0
  5976  000A30  224B               	addwfc	??_angleToPulse+1,f,c
  5977  000A32  224C               	addwfc	??_angleToPulse+2,f,c
  5978  000A34  224D               	addwfc	??_angleToPulse+3,f,c
  5979  000A36  5052               	movf	angleToPulse@a180,w,c
  5980  000A38  244A               	addwf	??_angleToPulse,w,c
  5981  000A3A  6E09               	movwf	___altoft@c,c
  5982  000A3C  5053               	movf	angleToPulse@a180+1,w,c
  5983  000A3E  204B               	addwfc	??_angleToPulse+1,w,c
  5984  000A40  6E0A               	movwf	___altoft@c+1,c
  5985  000A42  5054               	movf	angleToPulse@a180+2,w,c
  5986  000A44  204C               	addwfc	??_angleToPulse+2,w,c
  5987  000A46  6E0B               	movwf	___altoft@c+2,c
  5988  000A48  5055               	movf	angleToPulse@a180+3,w,c
  5989  000A4A  204D               	addwfc	??_angleToPulse+3,w,c
  5990  000A4C  6E0C               	movwf	___altoft@c+3,c
  5991  000A4E  ECDE  F00A         	call	___altoft	;wreg free
  5992  000A52  C009  F01F         	movff	?___altoft,___ftmul@f2
  5993  000A56  C00A  F020         	movff	?___altoft+1,___ftmul@f2+1
  5994  000A5A  C00B  F021         	movff	?___altoft+2,___ftmul@f2+2
  5995  000A5E  0E00               	movlw	0
  5996  000A60  6E10               	movwf	___ftdiv@f2,c
  5997  000A62  0E34               	movlw	52
  5998  000A64  6E11               	movwf	___ftdiv@f2+1,c
  5999  000A66  0E43               	movlw	67
  6000  000A68  6E12               	movwf	___ftdiv@f2+2,c
  6001  000A6A  C046  F009         	movff	angleToPulse@angle,___awtoft@c
  6002  000A6E  C047  F00A         	movff	angleToPulse@angle+1,___awtoft@c+1
  6003  000A72  EC64  F00C         	call	___awtoft	;wreg free
  6004  000A76  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  6005  000A7A  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  6006  000A7E  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  6007  000A82  EC08  F007         	call	___ftdiv	;wreg free
  6008  000A86  C00D  F01C         	movff	?___ftdiv,___ftmul@f1
  6009  000A8A  C00E  F01D         	movff	?___ftdiv+1,___ftmul@f1+1
  6010  000A8E  C00F  F01E         	movff	?___ftdiv+2,___ftmul@f1+2
  6011  000A92  EC8E  F006         	call	___ftmul	;wreg free
  6012  000A96  C01C  F02E         	movff	?___ftmul,___ftadd@f2
  6013  000A9A  C01D  F02F         	movff	?___ftmul+1,___ftadd@f2+1
  6014  000A9E  C01E  F030         	movff	?___ftmul+2,___ftadd@f2+2
  6015  000AA2  C059  F009         	movff	angleToPulse@a000,___altoft@c
  6016  000AA6  C05A  F00A         	movff	angleToPulse@a000+1,___altoft@c+1
  6017  000AAA  C05B  F00B         	movff	angleToPulse@a000+2,___altoft@c+2
  6018  000AAE  C05C  F00C         	movff	angleToPulse@a000+3,___altoft@c+3
  6019  000AB2  ECDE  F00A         	call	___altoft	;wreg free
  6020  000AB6  C009  F02B         	movff	?___altoft,___ftadd@f1
  6021  000ABA  C00A  F02C         	movff	?___altoft+1,___ftadd@f1+1
  6022  000ABE  C00B  F02D         	movff	?___altoft+2,___ftadd@f1+2
  6023  000AC2  EC1C  F004         	call	___ftadd	;wreg free
  6024  000AC6  C02B  F056         	movff	?___ftadd,_angleToPulse$1199
  6025  000ACA  C02C  F057         	movff	?___ftadd+1,_angleToPulse$1199+1
  6026  000ACE  C02D  F058         	movff	?___ftadd+2,_angleToPulse$1199+2
  6027                           
  6028                           ;servo.c: 31: return a000 + angle/180.0*(a180-a000) + offset;
  6029  000AD2  C04E  F009         	movff	angleToPulse@offset,___altoft@c
  6030  000AD6  C04F  F00A         	movff	angleToPulse@offset+1,___altoft@c+1
  6031  000ADA  C050  F00B         	movff	angleToPulse@offset+2,___altoft@c+2
  6032  000ADE  C051  F00C         	movff	angleToPulse@offset+3,___altoft@c+3
  6033  000AE2  ECDE  F00A         	call	___altoft	;wreg free
  6034  000AE6  C009  F02E         	movff	?___altoft,___ftadd@f2
  6035  000AEA  C00A  F02F         	movff	?___altoft+1,___ftadd@f2+1
  6036  000AEE  C00B  F030         	movff	?___altoft+2,___ftadd@f2+2
  6037  000AF2  C056  F02B         	movff	_angleToPulse$1199,___ftadd@f1
  6038  000AF6  C057  F02C         	movff	_angleToPulse$1199+1,___ftadd@f1+1
  6039  000AFA  C058  F02D         	movff	_angleToPulse$1199+2,___ftadd@f1+2
  6040  000AFE  EC1C  F004         	call	___ftadd	;wreg free
  6041  000B02  C02B  F037         	movff	?___ftadd,___fttol@f1
  6042  000B06  C02C  F038         	movff	?___ftadd+1,___fttol@f1+1
  6043  000B0A  C02D  F039         	movff	?___ftadd+2,___fttol@f1+2
  6044  000B0E  EC14  F006         	call	___fttol	;wreg free
  6045  000B12  C037  F046         	movff	?___fttol,?_angleToPulse
  6046  000B16  C038  F047         	movff	?___fttol+1,?_angleToPulse+1
  6047  000B1A  C039  F048         	movff	?___fttol+2,?_angleToPulse+2
  6048  000B1E  C03A  F049         	movff	?___fttol+3,?_angleToPulse+3
  6049  000B22  0012               	return	
  6050  000B24                     __end_of_angleToPulse:
  6051                           	opt stack 0
  6052                           pclatu	equ	0xFFB
  6053                           pclath	equ	0xFFA
  6054                           tblptru	equ	0xFF8
  6055                           tblptrh	equ	0xFF7
  6056                           tblptrl	equ	0xFF6
  6057                           tablat	equ	0xFF5
  6058                           prodh	equ	0xFF4
  6059                           prodl	equ	0xFF3
  6060                           intcon	equ	0xFF2
  6061                           intcon3	equ	0xFF0
  6062                           postinc0	equ	0xFEE
  6063                           fsr0h	equ	0xFEA
  6064                           fsr0l	equ	0xFE9
  6065                           wreg	equ	0xFE8
  6066                           postdec1	equ	0xFE5
  6067                           fsr1h	equ	0xFE2
  6068                           fsr1l	equ	0xFE1
  6069                           indf2	equ	0xFDF
  6070                           postinc2	equ	0xFDE
  6071                           postdec2	equ	0xFDD
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8
  6075                           
  6076 ;; *************** function ___fttol *****************
  6077 ;; Defined at:
  6078 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;  f1              3   54[COMRAM] float 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  lval            4   64[COMRAM] unsigned long 
  6083 ;;  exp1            1   68[COMRAM] unsigned char 
  6084 ;;  sign1           1   63[COMRAM] unsigned char 
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  4   54[COMRAM] long 
  6087 ;; Registers used:
  6088 ;;		wreg, status,2, status,0
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6098 ;;Total ram usage:       15 bytes
  6099 ;; Hardware stack levels used:    1
  6100 ;; This function calls:
  6101 ;;		Nothing
  6102 ;; This function is called by:
  6103 ;;		_angleToPulse
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text34
  6108  000C28                     __ptext34:
  6109                           	opt stack 0
  6110  000C28                     ___fttol:
  6111                           	opt stack 20
  6112                           
  6113                           ;incstack = 0
  6114  000C28  C039  F03B         	movff	___fttol@f1+2,??___fttol
  6115  000C2C  6A3C               	clrf	(??___fttol+1)& (0+255),c
  6116  000C2E  6A3D               	clrf	(??___fttol+2)& (0+255),c
  6117  000C30  3438               	rlcf	___fttol@f1+1,w,c
  6118  000C32  363B               	rlcf	??___fttol& (0+255),f,c
  6119  000C34  E301               	bnc	u238_41
  6120  000C36  803C               	bsf	(??___fttol+1)& (0+255),0,c
  6121  000C38                     u238_41:
  6122  000C38  503B               	movf	??___fttol,w,c
  6123  000C3A  6E45               	movwf	___fttol@exp1,c
  6124  000C3C  5045               	movf	___fttol@exp1,w,c
  6125  000C3E  A4D8               	btfss	status,2,c
  6126  000C40  D009               	goto	i2l2999
  6127  000C42  0E00               	movlw	0
  6128  000C44  6E37               	movwf	?___fttol,c
  6129  000C46  0E00               	movlw	0
  6130  000C48  6E38               	movwf	?___fttol+1,c
  6131  000C4A  0E00               	movlw	0
  6132  000C4C  6E39               	movwf	?___fttol+2,c
  6133  000C4E  0E00               	movlw	0
  6134  000C50  6E3A               	movwf	?___fttol+3,c
  6135  000C52  0012               	return	
  6136  000C54                     i2l2999:
  6137  000C54  0E17               	movlw	23
  6138  000C56  6E3B               	movwf	??___fttol& (0+255),c
  6139  000C58  C037  F03C         	movff	___fttol@f1,??___fttol+1
  6140  000C5C  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  6141  000C60  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  6142  000C64  283B               	incf	??___fttol,w,c
  6143  000C66  6E3F               	movwf	(??___fttol+4)& (0+255),c
  6144  000C68  D004               	goto	i2u240_40
  6145  000C6A                     i2u240_45:
  6146  000C6A  90D8               	bcf	status,0,c
  6147  000C6C  323E               	rrcf	??___fttol+3,f,c
  6148  000C6E  323D               	rrcf	??___fttol+2,f,c
  6149  000C70  323C               	rrcf	??___fttol+1,f,c
  6150  000C72                     i2u240_40:
  6151  000C72  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  6152  000C74  D7FA               	goto	i2u240_45
  6153  000C76  503C               	movf	??___fttol+1,w,c
  6154  000C78  6E40               	movwf	___fttol@sign1,c
  6155  000C7A  8E38               	bsf	___fttol@f1+1,7,c
  6156  000C7C  0EFF               	movlw	255
  6157  000C7E  1637               	andwf	___fttol@f1,f,c
  6158  000C80  0EFF               	movlw	255
  6159  000C82  1638               	andwf	___fttol@f1+1,f,c
  6160  000C84  0E00               	movlw	0
  6161  000C86  1639               	andwf	___fttol@f1+2,f,c
  6162  000C88  5037               	movf	___fttol@f1,w,c
  6163  000C8A  6E41               	movwf	___fttol@lval,c
  6164  000C8C  5038               	movf	___fttol@f1+1,w,c
  6165  000C8E  6E42               	movwf	___fttol@lval+1,c
  6166  000C90  5039               	movf	___fttol@f1+2,w,c
  6167  000C92  6E43               	movwf	___fttol@lval+2,c
  6168  000C94  6A44               	clrf	___fttol@lval+3,c
  6169  000C96  0E8E               	movlw	142
  6170  000C98  5E45               	subwf	___fttol@exp1,f,c
  6171  000C9A  AE45               	btfss	___fttol@exp1,7,c
  6172  000C9C  D016               	goto	i2l3021
  6173  000C9E  5045               	movf	___fttol@exp1,w,c
  6174  000CA0  0A80               	xorlw	128
  6175  000CA2  0F8F               	addlw	143
  6176  000CA4  B0D8               	btfsc	status,0,c
  6177  000CA6  D009               	goto	i2l3017
  6178  000CA8  0E00               	movlw	0
  6179  000CAA  6E37               	movwf	?___fttol,c
  6180  000CAC  0E00               	movlw	0
  6181  000CAE  6E38               	movwf	?___fttol+1,c
  6182  000CB0  0E00               	movlw	0
  6183  000CB2  6E39               	movwf	?___fttol+2,c
  6184  000CB4  0E00               	movlw	0
  6185  000CB6  6E3A               	movwf	?___fttol+3,c
  6186  000CB8  0012               	return	
  6187  000CBA                     i2l3017:
  6188  000CBA  90D8               	bcf	status,0,c
  6189  000CBC  3244               	rrcf	___fttol@lval+3,f,c
  6190  000CBE  3243               	rrcf	___fttol@lval+2,f,c
  6191  000CC0  3242               	rrcf	___fttol@lval+1,f,c
  6192  000CC2  3241               	rrcf	___fttol@lval,f,c
  6193  000CC4  3E45               	incfsz	___fttol@exp1,f,c
  6194  000CC6  D7F9               	goto	i2l3017
  6195  000CC8  D015               	goto	i2l3031
  6196  000CCA                     i2l3021:
  6197  000CCA  0E17               	movlw	23
  6198  000CCC  6445               	cpfsgt	___fttol@exp1,c
  6199  000CCE  D00F               	goto	i2l3029
  6200  000CD0  0E00               	movlw	0
  6201  000CD2  6E37               	movwf	?___fttol,c
  6202  000CD4  0E00               	movlw	0
  6203  000CD6  6E38               	movwf	?___fttol+1,c
  6204  000CD8  0E00               	movlw	0
  6205  000CDA  6E39               	movwf	?___fttol+2,c
  6206  000CDC  0E00               	movlw	0
  6207  000CDE  6E3A               	movwf	?___fttol+3,c
  6208  000CE0  0012               	return	
  6209  000CE2                     i2l3027:
  6210  000CE2  90D8               	bcf	status,0,c
  6211  000CE4  3641               	rlcf	___fttol@lval,f,c
  6212  000CE6  3642               	rlcf	___fttol@lval+1,f,c
  6213  000CE8  3643               	rlcf	___fttol@lval+2,f,c
  6214  000CEA  3644               	rlcf	___fttol@lval+3,f,c
  6215  000CEC  0645               	decf	___fttol@exp1,f,c
  6216  000CEE                     i2l3029:
  6217  000CEE  5045               	movf	___fttol@exp1,w,c
  6218  000CF0  A4D8               	btfss	status,2,c
  6219  000CF2  D7F7               	goto	i2l3027
  6220  000CF4                     i2l3031:
  6221  000CF4  5040               	movf	___fttol@sign1,w,c
  6222  000CF6  B4D8               	btfsc	status,2,c
  6223  000CF8  D008               	goto	i2l3035
  6224  000CFA  1E44               	comf	___fttol@lval+3,f,c
  6225  000CFC  1E43               	comf	___fttol@lval+2,f,c
  6226  000CFE  1E42               	comf	___fttol@lval+1,f,c
  6227  000D00  6C41               	negf	___fttol@lval,c
  6228  000D02  0E00               	movlw	0
  6229  000D04  2242               	addwfc	___fttol@lval+1,f,c
  6230  000D06  2243               	addwfc	___fttol@lval+2,f,c
  6231  000D08  2244               	addwfc	___fttol@lval+3,f,c
  6232  000D0A                     i2l3035:
  6233  000D0A  C041  F037         	movff	___fttol@lval,?___fttol
  6234  000D0E  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  6235  000D12  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  6236  000D16  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  6237  000D1A  0012               	return	
  6238  000D1C                     __end_of___fttol:
  6239                           	opt stack 0
  6240                           pclatu	equ	0xFFB
  6241                           pclath	equ	0xFFA
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           prodh	equ	0xFF4
  6247                           prodl	equ	0xFF3
  6248                           intcon	equ	0xFF2
  6249                           intcon3	equ	0xFF0
  6250                           postinc0	equ	0xFEE
  6251                           fsr0h	equ	0xFEA
  6252                           fsr0l	equ	0xFE9
  6253                           wreg	equ	0xFE8
  6254                           postdec1	equ	0xFE5
  6255                           fsr1h	equ	0xFE2
  6256                           fsr1l	equ	0xFE1
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           postdec2	equ	0xFDD
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function ___ftmul *****************
  6265 ;; Defined at:
  6266 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  f1              3   27[COMRAM] float 
  6269 ;;  f2              3   30[COMRAM] float 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  6272 ;;  sign            1   41[COMRAM] unsigned char 
  6273 ;;  cntr            1   40[COMRAM] unsigned char 
  6274 ;;  exp             1   36[COMRAM] unsigned char 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  3   27[COMRAM] float 
  6277 ;; Registers used:
  6278 ;;		wreg, status,2, status,0, cstack
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6284 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;Total ram usage:       15 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    1
  6291 ;; This function calls:
  6292 ;;		___ftpack
  6293 ;; This function is called by:
  6294 ;;		_angleToPulse
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           	psect	text35
  6299  000D1C                     __ptext35:
  6300                           	opt stack 0
  6301  000D1C                     ___ftmul:
  6302                           	opt stack 19
  6303                           
  6304                           ;incstack = 0
  6305  000D1C  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  6306  000D20  6A23               	clrf	(??___ftmul+1)& (0+255),c
  6307  000D22  6A24               	clrf	(??___ftmul+2)& (0+255),c
  6308  000D24  341D               	rlcf	___ftmul@f1+1,w,c
  6309  000D26  3622               	rlcf	??___ftmul& (0+255),f,c
  6310  000D28  E301               	bnc	u231_41
  6311  000D2A  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  6312  000D2C                     u231_41:
  6313  000D2C  5022               	movf	??___ftmul,w,c
  6314  000D2E  6E25               	movwf	___ftmul@exp,c
  6315  000D30  5025               	movf	___ftmul@exp,w,c
  6316  000D32  A4D8               	btfss	status,2,c
  6317  000D34  D007               	goto	i2l2939
  6318  000D36  0E00               	movlw	0
  6319  000D38  6E1C               	movwf	?___ftmul,c
  6320  000D3A  0E00               	movlw	0
  6321  000D3C  6E1D               	movwf	?___ftmul+1,c
  6322  000D3E  0E00               	movlw	0
  6323  000D40  6E1E               	movwf	?___ftmul+2,c
  6324  000D42  0012               	return	
  6325  000D44                     i2l2939:
  6326  000D44  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  6327  000D48  6A23               	clrf	(??___ftmul+1)& (0+255),c
  6328  000D4A  6A24               	clrf	(??___ftmul+2)& (0+255),c
  6329  000D4C  3420               	rlcf	___ftmul@f2+1,w,c
  6330  000D4E  3622               	rlcf	??___ftmul& (0+255),f,c
  6331  000D50  E301               	bnc	u233_41
  6332  000D52  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  6333  000D54                     u233_41:
  6334  000D54  5022               	movf	??___ftmul,w,c
  6335  000D56  6E2A               	movwf	___ftmul@sign,c
  6336  000D58  502A               	movf	___ftmul@sign,w,c
  6337  000D5A  A4D8               	btfss	status,2,c
  6338  000D5C  D007               	goto	i2l2945
  6339  000D5E  0E00               	movlw	0
  6340  000D60  6E1C               	movwf	?___ftmul,c
  6341  000D62  0E00               	movlw	0
  6342  000D64  6E1D               	movwf	?___ftmul+1,c
  6343  000D66  0E00               	movlw	0
  6344  000D68  6E1E               	movwf	?___ftmul+2,c
  6345  000D6A  0012               	return	
  6346  000D6C                     i2l2945:
  6347  000D6C  502A               	movf	___ftmul@sign,w,c
  6348  000D6E  0F7B               	addlw	123
  6349  000D70  2625               	addwf	___ftmul@exp,f,c
  6350  000D72  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  6351  000D76  5021               	movf	___ftmul@f2+2,w,c
  6352  000D78  1A2A               	xorwf	___ftmul@sign,f,c
  6353  000D7A  0E80               	movlw	128
  6354  000D7C  162A               	andwf	___ftmul@sign,f,c
  6355  000D7E  8E1D               	bsf	___ftmul@f1+1,7,c
  6356  000D80  8E20               	bsf	___ftmul@f2+1,7,c
  6357  000D82  0EFF               	movlw	255
  6358  000D84  161F               	andwf	___ftmul@f2,f,c
  6359  000D86  0EFF               	movlw	255
  6360  000D88  1620               	andwf	___ftmul@f2+1,f,c
  6361  000D8A  0E00               	movlw	0
  6362  000D8C  1621               	andwf	___ftmul@f2+2,f,c
  6363  000D8E  0E00               	movlw	0
  6364  000D90  6E26               	movwf	___ftmul@f3_as_product,c
  6365  000D92  0E00               	movlw	0
  6366  000D94  6E27               	movwf	___ftmul@f3_as_product+1,c
  6367  000D96  0E00               	movlw	0
  6368  000D98  6E28               	movwf	___ftmul@f3_as_product+2,c
  6369  000D9A  0E07               	movlw	7
  6370  000D9C  6E29               	movwf	___ftmul@cntr,c
  6371  000D9E                     i2l2959:
  6372  000D9E  A01C               	btfss	___ftmul@f1,0,c
  6373  000DA0  D006               	goto	i2l2963
  6374  000DA2  501F               	movf	___ftmul@f2,w,c
  6375  000DA4  2626               	addwf	___ftmul@f3_as_product,f,c
  6376  000DA6  5020               	movf	___ftmul@f2+1,w,c
  6377  000DA8  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6378  000DAA  5021               	movf	___ftmul@f2+2,w,c
  6379  000DAC  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6380  000DAE                     i2l2963:
  6381  000DAE  90D8               	bcf	status,0,c
  6382  000DB0  321E               	rrcf	___ftmul@f1+2,f,c
  6383  000DB2  321D               	rrcf	___ftmul@f1+1,f,c
  6384  000DB4  321C               	rrcf	___ftmul@f1,f,c
  6385  000DB6  90D8               	bcf	status,0,c
  6386  000DB8  361F               	rlcf	___ftmul@f2,f,c
  6387  000DBA  3620               	rlcf	___ftmul@f2+1,f,c
  6388  000DBC  3621               	rlcf	___ftmul@f2+2,f,c
  6389  000DBE  2E29               	decfsz	___ftmul@cntr,f,c
  6390  000DC0  D7EE               	goto	i2l2959
  6391  000DC2  0E09               	movlw	9
  6392  000DC4  6E29               	movwf	___ftmul@cntr,c
  6393  000DC6                     i2l2969:
  6394  000DC6  A01C               	btfss	___ftmul@f1,0,c
  6395  000DC8  D006               	goto	i2l2973
  6396  000DCA  501F               	movf	___ftmul@f2,w,c
  6397  000DCC  2626               	addwf	___ftmul@f3_as_product,f,c
  6398  000DCE  5020               	movf	___ftmul@f2+1,w,c
  6399  000DD0  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6400  000DD2  5021               	movf	___ftmul@f2+2,w,c
  6401  000DD4  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6402  000DD6                     i2l2973:
  6403  000DD6  90D8               	bcf	status,0,c
  6404  000DD8  321E               	rrcf	___ftmul@f1+2,f,c
  6405  000DDA  321D               	rrcf	___ftmul@f1+1,f,c
  6406  000DDC  321C               	rrcf	___ftmul@f1,f,c
  6407  000DDE  90D8               	bcf	status,0,c
  6408  000DE0  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  6409  000DE2  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  6410  000DE4  3226               	rrcf	___ftmul@f3_as_product,f,c
  6411  000DE6  2E29               	decfsz	___ftmul@cntr,f,c
  6412  000DE8  D7EE               	goto	i2l2969
  6413  000DEA  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6414  000DEE  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6415  000DF2  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6416  000DF6  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  6417  000DFA  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  6418  000DFE  EC13  F009         	call	___ftpack	;wreg free
  6419  000E02  C001  F01C         	movff	?___ftpack,?___ftmul
  6420  000E06  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  6421  000E0A  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  6422  000E0E  0012               	return	
  6423  000E10                     __end_of___ftmul:
  6424                           	opt stack 0
  6425                           pclatu	equ	0xFFB
  6426                           pclath	equ	0xFFA
  6427                           tblptru	equ	0xFF8
  6428                           tblptrh	equ	0xFF7
  6429                           tblptrl	equ	0xFF6
  6430                           tablat	equ	0xFF5
  6431                           prodh	equ	0xFF4
  6432                           prodl	equ	0xFF3
  6433                           intcon	equ	0xFF2
  6434                           intcon3	equ	0xFF0
  6435                           postinc0	equ	0xFEE
  6436                           fsr0h	equ	0xFEA
  6437                           fsr0l	equ	0xFE9
  6438                           wreg	equ	0xFE8
  6439                           postdec1	equ	0xFE5
  6440                           fsr1h	equ	0xFE2
  6441                           fsr1l	equ	0xFE1
  6442                           indf2	equ	0xFDF
  6443                           postinc2	equ	0xFDE
  6444                           postdec2	equ	0xFDD
  6445                           fsr2h	equ	0xFDA
  6446                           fsr2l	equ	0xFD9
  6447                           status	equ	0xFD8
  6448                           
  6449 ;; *************** function ___ftdiv *****************
  6450 ;; Defined at:
  6451 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;  f1              3   12[COMRAM] float 
  6454 ;;  f2              3   15[COMRAM] float 
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;  f3              3   22[COMRAM] float 
  6457 ;;  sign            1   26[COMRAM] unsigned char 
  6458 ;;  exp             1   25[COMRAM] unsigned char 
  6459 ;;  cntr            1   21[COMRAM] unsigned char 
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  3   12[COMRAM] float 
  6462 ;; Registers used:
  6463 ;;		wreg, status,2, status,0, cstack
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6469 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;Total ram usage:       15 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    1
  6476 ;; This function calls:
  6477 ;;		___ftpack
  6478 ;; This function is called by:
  6479 ;;		_angleToPulse
  6480 ;;		_testFrequency
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           	psect	text36
  6485  000E10                     __ptext36:
  6486                           	opt stack 0
  6487  000E10                     ___ftdiv:
  6488                           	opt stack 19
  6489                           
  6490                           ;incstack = 0
  6491  000E10  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  6492  000E14  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6493  000E16  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6494  000E18  340E               	rlcf	___ftdiv@f1+1,w,c
  6495  000E1A  3613               	rlcf	??___ftdiv& (0+255),f,c
  6496  000E1C  E301               	bnc	u226_41
  6497  000E1E  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6498  000E20                     u226_41:
  6499  000E20  5013               	movf	??___ftdiv,w,c
  6500  000E22  6E1A               	movwf	___ftdiv@exp,c
  6501  000E24  501A               	movf	___ftdiv@exp,w,c
  6502  000E26  A4D8               	btfss	status,2,c
  6503  000E28  D007               	goto	i2l2893
  6504  000E2A  0E00               	movlw	0
  6505  000E2C  6E0D               	movwf	?___ftdiv,c
  6506  000E2E  0E00               	movlw	0
  6507  000E30  6E0E               	movwf	?___ftdiv+1,c
  6508  000E32  0E00               	movlw	0
  6509  000E34  6E0F               	movwf	?___ftdiv+2,c
  6510  000E36  0012               	return	
  6511  000E38                     i2l2893:
  6512  000E38  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  6513  000E3C  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6514  000E3E  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6515  000E40  3411               	rlcf	___ftdiv@f2+1,w,c
  6516  000E42  3613               	rlcf	??___ftdiv& (0+255),f,c
  6517  000E44  E301               	bnc	u228_41
  6518  000E46  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6519  000E48                     u228_41:
  6520  000E48  5013               	movf	??___ftdiv,w,c
  6521  000E4A  6E1B               	movwf	___ftdiv@sign,c
  6522  000E4C  501B               	movf	___ftdiv@sign,w,c
  6523  000E4E  A4D8               	btfss	status,2,c
  6524  000E50  D007               	goto	i2l2899
  6525  000E52  0E00               	movlw	0
  6526  000E54  6E0D               	movwf	?___ftdiv,c
  6527  000E56  0E00               	movlw	0
  6528  000E58  6E0E               	movwf	?___ftdiv+1,c
  6529  000E5A  0E00               	movlw	0
  6530  000E5C  6E0F               	movwf	?___ftdiv+2,c
  6531  000E5E  0012               	return	
  6532  000E60                     i2l2899:
  6533  000E60  0E00               	movlw	0
  6534  000E62  6E17               	movwf	___ftdiv@f3,c
  6535  000E64  0E00               	movlw	0
  6536  000E66  6E18               	movwf	___ftdiv@f3+1,c
  6537  000E68  0E00               	movlw	0
  6538  000E6A  6E19               	movwf	___ftdiv@f3+2,c
  6539  000E6C  501B               	movf	___ftdiv@sign,w,c
  6540  000E6E  0F89               	addlw	137
  6541  000E70  5E1A               	subwf	___ftdiv@exp,f,c
  6542  000E72  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  6543  000E76  5012               	movf	___ftdiv@f2+2,w,c
  6544  000E78  1A1B               	xorwf	___ftdiv@sign,f,c
  6545  000E7A  0E80               	movlw	128
  6546  000E7C  161B               	andwf	___ftdiv@sign,f,c
  6547  000E7E  8E0E               	bsf	___ftdiv@f1+1,7,c
  6548  000E80  0EFF               	movlw	255
  6549  000E82  160D               	andwf	___ftdiv@f1,f,c
  6550  000E84  0EFF               	movlw	255
  6551  000E86  160E               	andwf	___ftdiv@f1+1,f,c
  6552  000E88  0E00               	movlw	0
  6553  000E8A  160F               	andwf	___ftdiv@f1+2,f,c
  6554  000E8C  8E11               	bsf	___ftdiv@f2+1,7,c
  6555  000E8E  0EFF               	movlw	255
  6556  000E90  1610               	andwf	___ftdiv@f2,f,c
  6557  000E92  0EFF               	movlw	255
  6558  000E94  1611               	andwf	___ftdiv@f2+1,f,c
  6559  000E96  0E00               	movlw	0
  6560  000E98  1612               	andwf	___ftdiv@f2+2,f,c
  6561  000E9A  0E18               	movlw	24
  6562  000E9C  6E16               	movwf	___ftdiv@cntr,c
  6563  000E9E                     i2l2919:
  6564  000E9E  90D8               	bcf	status,0,c
  6565  000EA0  3617               	rlcf	___ftdiv@f3,f,c
  6566  000EA2  3618               	rlcf	___ftdiv@f3+1,f,c
  6567  000EA4  3619               	rlcf	___ftdiv@f3+2,f,c
  6568  000EA6  5010               	movf	___ftdiv@f2,w,c
  6569  000EA8  5C0D               	subwf	___ftdiv@f1,w,c
  6570  000EAA  5011               	movf	___ftdiv@f2+1,w,c
  6571  000EAC  580E               	subwfb	___ftdiv@f1+1,w,c
  6572  000EAE  5012               	movf	___ftdiv@f2+2,w,c
  6573  000EB0  580F               	subwfb	___ftdiv@f1+2,w,c
  6574  000EB2  A0D8               	btfss	status,0,c
  6575  000EB4  D007               	goto	i2l880
  6576  000EB6  5010               	movf	___ftdiv@f2,w,c
  6577  000EB8  5E0D               	subwf	___ftdiv@f1,f,c
  6578  000EBA  5011               	movf	___ftdiv@f2+1,w,c
  6579  000EBC  5A0E               	subwfb	___ftdiv@f1+1,f,c
  6580  000EBE  5012               	movf	___ftdiv@f2+2,w,c
  6581  000EC0  5A0F               	subwfb	___ftdiv@f1+2,f,c
  6582  000EC2  8017               	bsf	___ftdiv@f3,0,c
  6583  000EC4                     i2l880:
  6584  000EC4  90D8               	bcf	status,0,c
  6585  000EC6  360D               	rlcf	___ftdiv@f1,f,c
  6586  000EC8  360E               	rlcf	___ftdiv@f1+1,f,c
  6587  000ECA  360F               	rlcf	___ftdiv@f1+2,f,c
  6588  000ECC  2E16               	decfsz	___ftdiv@cntr,f,c
  6589  000ECE  D7E7               	goto	i2l2919
  6590  000ED0  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  6591  000ED4  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6592  000ED8  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6593  000EDC  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  6594  000EE0  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  6595  000EE4  EC13  F009         	call	___ftpack	;wreg free
  6596  000EE8  C001  F00D         	movff	?___ftpack,?___ftdiv
  6597  000EEC  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  6598  000EF0  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  6599  000EF4  0012               	return	
  6600  000EF6                     __end_of___ftdiv:
  6601                           	opt stack 0
  6602                           pclatu	equ	0xFFB
  6603                           pclath	equ	0xFFA
  6604                           tblptru	equ	0xFF8
  6605                           tblptrh	equ	0xFF7
  6606                           tblptrl	equ	0xFF6
  6607                           tablat	equ	0xFF5
  6608                           prodh	equ	0xFF4
  6609                           prodl	equ	0xFF3
  6610                           intcon	equ	0xFF2
  6611                           intcon3	equ	0xFF0
  6612                           postinc0	equ	0xFEE
  6613                           fsr0h	equ	0xFEA
  6614                           fsr0l	equ	0xFE9
  6615                           wreg	equ	0xFE8
  6616                           postdec1	equ	0xFE5
  6617                           fsr1h	equ	0xFE2
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
  6625                           
  6626 ;; *************** function ___ftadd *****************
  6627 ;; Defined at:
  6628 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  f1              3   42[COMRAM] float 
  6631 ;;  f2              3   45[COMRAM] float 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  exp1            1   53[COMRAM] unsigned char 
  6634 ;;  exp2            1   52[COMRAM] unsigned char 
  6635 ;;  sign            1   51[COMRAM] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  3   42[COMRAM] float 
  6638 ;; Registers used:
  6639 ;;		wreg, status,2, status,0, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6645 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;Total ram usage:       12 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    1
  6652 ;; This function calls:
  6653 ;;		___ftpack
  6654 ;; This function is called by:
  6655 ;;		_angleToPulse
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text37
  6660  000838                     __ptext37:
  6661                           	opt stack 0
  6662  000838                     ___ftadd:
  6663                           	opt stack 19
  6664                           
  6665                           ;incstack = 0
  6666  000838  C02D  F031         	movff	___ftadd@f1+2,??___ftadd
  6667  00083C  6A32               	clrf	(??___ftadd+1)& (0+255),c
  6668  00083E  6A33               	clrf	(??___ftadd+2)& (0+255),c
  6669  000840  342C               	rlcf	___ftadd@f1+1,w,c
  6670  000842  3631               	rlcf	??___ftadd& (0+255),f,c
  6671  000844  E301               	bnc	u205_41
  6672  000846  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  6673  000848                     u205_41:
  6674  000848  5031               	movf	??___ftadd,w,c
  6675  00084A  6E36               	movwf	___ftadd@exp1,c
  6676  00084C  C030  F031         	movff	___ftadd@f2+2,??___ftadd
  6677  000850  6A32               	clrf	(??___ftadd+1)& (0+255),c
  6678  000852  6A33               	clrf	(??___ftadd+2)& (0+255),c
  6679  000854  342F               	rlcf	___ftadd@f2+1,w,c
  6680  000856  3631               	rlcf	??___ftadd& (0+255),f,c
  6681  000858  E301               	bnc	u206_41
  6682  00085A  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  6683  00085C                     u206_41:
  6684  00085C  5031               	movf	??___ftadd,w,c
  6685  00085E  6E35               	movwf	___ftadd@exp2,c
  6686  000860  5036               	movf	___ftadd@exp1,w,c
  6687  000862  B4D8               	btfsc	status,2,c
  6688  000864  D00B               	goto	i2l845
  6689  000866  5035               	movf	___ftadd@exp2,w,c
  6690  000868  5C36               	subwf	___ftadd@exp1,w,c
  6691  00086A  B0D8               	btfsc	status,0,c
  6692  00086C  D00E               	goto	i2l2825
  6693  00086E  5036               	movf	___ftadd@exp1,w,c
  6694  000870  0800               	sublw	0
  6695  000872  2435               	addwf	___ftadd@exp2,w,c
  6696  000874  6E31               	movwf	??___ftadd& (0+255),c
  6697  000876  0E18               	movlw	24
  6698  000878  6431               	cpfsgt	??___ftadd,c
  6699  00087A  D007               	goto	i2l2825
  6700  00087C                     i2l845:
  6701  00087C  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  6702  000880  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  6703  000884  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  6704  000888  0012               	return	
  6705  00088A                     i2l2825:
  6706  00088A  5035               	movf	___ftadd@exp2,w,c
  6707  00088C  B4D8               	btfsc	status,2,c
  6708  00088E  D00B               	goto	i2l849
  6709  000890  5036               	movf	___ftadd@exp1,w,c
  6710  000892  5C35               	subwf	___ftadd@exp2,w,c
  6711  000894  B0D8               	btfsc	status,0,c
  6712  000896  D00E               	goto	i2l2831
  6713  000898  5035               	movf	___ftadd@exp2,w,c
  6714  00089A  0800               	sublw	0
  6715  00089C  2436               	addwf	___ftadd@exp1,w,c
  6716  00089E  6E31               	movwf	??___ftadd& (0+255),c
  6717  0008A0  0E18               	movlw	24
  6718  0008A2  6431               	cpfsgt	??___ftadd,c
  6719  0008A4  D007               	goto	i2l2831
  6720  0008A6                     i2l849:
  6721  0008A6  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  6722  0008AA  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  6723  0008AE  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  6724  0008B2  0012               	return	
  6725  0008B4                     i2l2831:
  6726  0008B4  0E06               	movlw	6
  6727  0008B6  6E34               	movwf	___ftadd@sign,c
  6728  0008B8  BE2D               	btfsc	___ftadd@f1+2,7,c
  6729  0008BA  8E34               	bsf	___ftadd@sign,7,c
  6730  0008BC  BE30               	btfsc	___ftadd@f2+2,7,c
  6731  0008BE  8C34               	bsf	___ftadd@sign,6,c
  6732  0008C0  8E2C               	bsf	___ftadd@f1+1,7,c
  6733  0008C2  0EFF               	movlw	255
  6734  0008C4  162B               	andwf	___ftadd@f1,f,c
  6735  0008C6  0EFF               	movlw	255
  6736  0008C8  162C               	andwf	___ftadd@f1+1,f,c
  6737  0008CA  0E00               	movlw	0
  6738  0008CC  162D               	andwf	___ftadd@f1+2,f,c
  6739  0008CE  8E2F               	bsf	___ftadd@f2+1,7,c
  6740  0008D0  0EFF               	movlw	255
  6741  0008D2  162E               	andwf	___ftadd@f2,f,c
  6742  0008D4  0EFF               	movlw	255
  6743  0008D6  162F               	andwf	___ftadd@f2+1,f,c
  6744  0008D8  0E00               	movlw	0
  6745  0008DA  1630               	andwf	___ftadd@f2+2,f,c
  6746  0008DC  5035               	movf	___ftadd@exp2,w,c
  6747  0008DE  5C36               	subwf	___ftadd@exp1,w,c
  6748  0008E0  B0D8               	btfsc	status,0,c
  6749  0008E2  D01B               	goto	i2l2857
  6750  0008E4                     i2l2847:
  6751  0008E4  90D8               	bcf	status,0,c
  6752  0008E6  362E               	rlcf	___ftadd@f2,f,c
  6753  0008E8  362F               	rlcf	___ftadd@f2+1,f,c
  6754  0008EA  3630               	rlcf	___ftadd@f2+2,f,c
  6755  0008EC  0635               	decf	___ftadd@exp2,f,c
  6756  0008EE  5036               	movf	___ftadd@exp1,w,c
  6757  0008F0  1835               	xorwf	___ftadd@exp2,w,c
  6758  0008F2  B4D8               	btfsc	status,2,c
  6759  0008F4  D00D               	goto	i2l2855
  6760  0008F6  0634               	decf	___ftadd@sign,f,c
  6761  0008F8  C034  F031         	movff	___ftadd@sign,??___ftadd
  6762  0008FC  0E07               	movlw	7
  6763  0008FE  1631               	andwf	??___ftadd,f,c
  6764  000900  B4D8               	btfsc	status,2,c
  6765  000902  D006               	goto	i2l2855
  6766  000904  D7EF               	goto	i2l2847
  6767  000906                     i2l2853:
  6768  000906  90D8               	bcf	status,0,c
  6769  000908  322D               	rrcf	___ftadd@f1+2,f,c
  6770  00090A  322C               	rrcf	___ftadd@f1+1,f,c
  6771  00090C  322B               	rrcf	___ftadd@f1,f,c
  6772  00090E  2A36               	incf	___ftadd@exp1,f,c
  6773  000910                     i2l2855:
  6774  000910  5035               	movf	___ftadd@exp2,w,c
  6775  000912  1836               	xorwf	___ftadd@exp1,w,c
  6776  000914  B4D8               	btfsc	status,2,c
  6777  000916  D01F               	goto	i2l860
  6778  000918  D7F6               	goto	i2l2853
  6779  00091A                     i2l2857:
  6780  00091A  5036               	movf	___ftadd@exp1,w,c
  6781  00091C  5C35               	subwf	___ftadd@exp2,w,c
  6782  00091E  B0D8               	btfsc	status,0,c
  6783  000920  D01A               	goto	i2l860
  6784  000922                     i2l2859:
  6785  000922  90D8               	bcf	status,0,c
  6786  000924  362B               	rlcf	___ftadd@f1,f,c
  6787  000926  362C               	rlcf	___ftadd@f1+1,f,c
  6788  000928  362D               	rlcf	___ftadd@f1+2,f,c
  6789  00092A  0636               	decf	___ftadd@exp1,f,c
  6790  00092C  5036               	movf	___ftadd@exp1,w,c
  6791  00092E  1835               	xorwf	___ftadd@exp2,w,c
  6792  000930  B4D8               	btfsc	status,2,c
  6793  000932  D00D               	goto	i2l2867
  6794  000934  0634               	decf	___ftadd@sign,f,c
  6795  000936  C034  F031         	movff	___ftadd@sign,??___ftadd
  6796  00093A  0E07               	movlw	7
  6797  00093C  1631               	andwf	??___ftadd,f,c
  6798  00093E  B4D8               	btfsc	status,2,c
  6799  000940  D006               	goto	i2l2867
  6800  000942  D7EF               	goto	i2l2859
  6801  000944                     i2l2865:
  6802  000944  90D8               	bcf	status,0,c
  6803  000946  3230               	rrcf	___ftadd@f2+2,f,c
  6804  000948  322F               	rrcf	___ftadd@f2+1,f,c
  6805  00094A  322E               	rrcf	___ftadd@f2,f,c
  6806  00094C  2A35               	incf	___ftadd@exp2,f,c
  6807  00094E                     i2l2867:
  6808  00094E  5035               	movf	___ftadd@exp2,w,c
  6809  000950  1836               	xorwf	___ftadd@exp1,w,c
  6810  000952  A4D8               	btfss	status,2,c
  6811  000954  D7F7               	goto	i2l2865
  6812  000956                     i2l860:
  6813  000956  AE34               	btfss	___ftadd@sign,7,c
  6814  000958  D00C               	goto	i2l869
  6815  00095A  0EFF               	movlw	255
  6816  00095C  1A2B               	xorwf	___ftadd@f1,f,c
  6817  00095E  0EFF               	movlw	255
  6818  000960  1A2C               	xorwf	___ftadd@f1+1,f,c
  6819  000962  0EFF               	movlw	255
  6820  000964  1A2D               	xorwf	___ftadd@f1+2,f,c
  6821  000966  0E01               	movlw	1
  6822  000968  262B               	addwf	___ftadd@f1,f,c
  6823  00096A  0E00               	movlw	0
  6824  00096C  222C               	addwfc	___ftadd@f1+1,f,c
  6825  00096E  0E00               	movlw	0
  6826  000970  222D               	addwfc	___ftadd@f1+2,f,c
  6827  000972                     i2l869:
  6828  000972  AC34               	btfss	___ftadd@sign,6,c
  6829  000974  D00C               	goto	i2l2873
  6830  000976  0EFF               	movlw	255
  6831  000978  1A2E               	xorwf	___ftadd@f2,f,c
  6832  00097A  0EFF               	movlw	255
  6833  00097C  1A2F               	xorwf	___ftadd@f2+1,f,c
  6834  00097E  0EFF               	movlw	255
  6835  000980  1A30               	xorwf	___ftadd@f2+2,f,c
  6836  000982  0E01               	movlw	1
  6837  000984  262E               	addwf	___ftadd@f2,f,c
  6838  000986  0E00               	movlw	0
  6839  000988  222F               	addwfc	___ftadd@f2+1,f,c
  6840  00098A  0E00               	movlw	0
  6841  00098C  2230               	addwfc	___ftadd@f2+2,f,c
  6842  00098E                     i2l2873:
  6843  00098E  0E00               	movlw	0
  6844  000990  6E34               	movwf	___ftadd@sign,c
  6845  000992  502B               	movf	___ftadd@f1,w,c
  6846  000994  262E               	addwf	___ftadd@f2,f,c
  6847  000996  502C               	movf	___ftadd@f1+1,w,c
  6848  000998  222F               	addwfc	___ftadd@f2+1,f,c
  6849  00099A  502D               	movf	___ftadd@f1+2,w,c
  6850  00099C  2230               	addwfc	___ftadd@f2+2,f,c
  6851  00099E  AE30               	btfss	___ftadd@f2+2,7,c
  6852  0009A0  D00E               	goto	i2l2883
  6853  0009A2  0EFF               	movlw	255
  6854  0009A4  1A2E               	xorwf	___ftadd@f2,f,c
  6855  0009A6  0EFF               	movlw	255
  6856  0009A8  1A2F               	xorwf	___ftadd@f2+1,f,c
  6857  0009AA  0EFF               	movlw	255
  6858  0009AC  1A30               	xorwf	___ftadd@f2+2,f,c
  6859  0009AE  0E01               	movlw	1
  6860  0009B0  262E               	addwf	___ftadd@f2,f,c
  6861  0009B2  0E00               	movlw	0
  6862  0009B4  222F               	addwfc	___ftadd@f2+1,f,c
  6863  0009B6  0E00               	movlw	0
  6864  0009B8  2230               	addwfc	___ftadd@f2+2,f,c
  6865  0009BA  0E01               	movlw	1
  6866  0009BC  6E34               	movwf	___ftadd@sign,c
  6867  0009BE                     i2l2883:
  6868  0009BE  C02E  F001         	movff	___ftadd@f2,___ftpack@arg
  6869  0009C2  C02F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6870  0009C6  C030  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6871  0009CA  C036  F004         	movff	___ftadd@exp1,___ftpack@exp
  6872  0009CE  C034  F005         	movff	___ftadd@sign,___ftpack@sign
  6873  0009D2  EC13  F009         	call	___ftpack	;wreg free
  6874  0009D6  C001  F02B         	movff	?___ftpack,?___ftadd
  6875  0009DA  C002  F02C         	movff	?___ftpack+1,?___ftadd+1
  6876  0009DE  C003  F02D         	movff	?___ftpack+2,?___ftadd+2
  6877  0009E2  0012               	return	
  6878  0009E4                     __end_of___ftadd:
  6879                           	opt stack 0
  6880                           pclatu	equ	0xFFB
  6881                           pclath	equ	0xFFA
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           prodh	equ	0xFF4
  6887                           prodl	equ	0xFF3
  6888                           intcon	equ	0xFF2
  6889                           intcon3	equ	0xFF0
  6890                           postinc0	equ	0xFEE
  6891                           fsr0h	equ	0xFEA
  6892                           fsr0l	equ	0xFE9
  6893                           wreg	equ	0xFE8
  6894                           postdec1	equ	0xFE5
  6895                           fsr1h	equ	0xFE2
  6896                           fsr1l	equ	0xFE1
  6897                           indf2	equ	0xFDF
  6898                           postinc2	equ	0xFDE
  6899                           postdec2	equ	0xFDD
  6900                           fsr2h	equ	0xFDA
  6901                           fsr2l	equ	0xFD9
  6902                           status	equ	0xFD8
  6903                           
  6904 ;; *************** function ___awtoft *****************
  6905 ;; Defined at:
  6906 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6907 ;; Parameters:    Size  Location     Type
  6908 ;;  c               2    8[COMRAM] int 
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;  sign            1   11[COMRAM] unsigned char 
  6911 ;; Return value:  Size  Location     Type
  6912 ;;                  3    8[COMRAM] float 
  6913 ;; Registers used:
  6914 ;;		wreg, status,2, status,0, cstack
  6915 ;; Tracked objects:
  6916 ;;		On entry : 0/0
  6917 ;;		On exit  : 0/0
  6918 ;;		Unchanged: 0/0
  6919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6920 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6924 ;;Total ram usage:        4 bytes
  6925 ;; Hardware stack levels used:    1
  6926 ;; Hardware stack levels required when called:    1
  6927 ;; This function calls:
  6928 ;;		___ftpack
  6929 ;; This function is called by:
  6930 ;;		_angleToPulse
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text38
  6935  0018C8                     __ptext38:
  6936                           	opt stack 0
  6937  0018C8                     ___awtoft:
  6938                           	opt stack 19
  6939                           
  6940                           ;incstack = 0
  6941  0018C8  0E00               	movlw	0
  6942  0018CA  6E0C               	movwf	___awtoft@sign,c
  6943  0018CC  AE0A               	btfss	___awtoft@c+1,7,c
  6944  0018CE  D006               	goto	i2l2989
  6945  0018D0  6C09               	negf	___awtoft@c,c
  6946  0018D2  1E0A               	comf	___awtoft@c+1,f,c
  6947  0018D4  B0D8               	btfsc	status,0,c
  6948  0018D6  2A0A               	incf	___awtoft@c+1,f,c
  6949  0018D8  0E01               	movlw	1
  6950  0018DA  6E0C               	movwf	___awtoft@sign,c
  6951  0018DC                     i2l2989:
  6952  0018DC  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6953  0018E0  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6954  0018E4  6A03               	clrf	___ftpack@arg+2,c
  6955  0018E6  0E8E               	movlw	142
  6956  0018E8  6E04               	movwf	___ftpack@exp,c
  6957  0018EA  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6958  0018EE  EC13  F009         	call	___ftpack	;wreg free
  6959  0018F2  C001  F009         	movff	?___ftpack,?___awtoft
  6960  0018F6  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6961  0018FA  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6962  0018FE  0012               	return	
  6963  001900                     __end_of___awtoft:
  6964                           	opt stack 0
  6965                           pclatu	equ	0xFFB
  6966                           pclath	equ	0xFFA
  6967                           tblptru	equ	0xFF8
  6968                           tblptrh	equ	0xFF7
  6969                           tblptrl	equ	0xFF6
  6970                           tablat	equ	0xFF5
  6971                           prodh	equ	0xFF4
  6972                           prodl	equ	0xFF3
  6973                           intcon	equ	0xFF2
  6974                           intcon3	equ	0xFF0
  6975                           postinc0	equ	0xFEE
  6976                           fsr0h	equ	0xFEA
  6977                           fsr0l	equ	0xFE9
  6978                           wreg	equ	0xFE8
  6979                           postdec1	equ	0xFE5
  6980                           fsr1h	equ	0xFE2
  6981                           fsr1l	equ	0xFE1
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function ___altoft *****************
  6990 ;; Defined at:
  6991 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  c               4    8[COMRAM] long 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  sign            1   17[COMRAM] unsigned char 
  6996 ;;  exp             1   16[COMRAM] unsigned char 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  3    8[COMRAM] float 
  6999 ;; Registers used:
  7000 ;;		wreg, status,2, status,0, cstack
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;Total ram usage:       10 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    1
  7013 ;; This function calls:
  7014 ;;		___ftpack
  7015 ;; This function is called by:
  7016 ;;		_angleToPulse
  7017 ;;		_testFrequency
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text39
  7022  0015BC                     __ptext39:
  7023                           	opt stack 0
  7024  0015BC                     ___altoft:
  7025                           	opt stack 19
  7026                           
  7027                           ;incstack = 0
  7028  0015BC  0E00               	movlw	0
  7029  0015BE  6E12               	movwf	___altoft@sign,c
  7030  0015C0  0E8E               	movlw	142
  7031  0015C2  6E11               	movwf	___altoft@exp,c
  7032  0015C4  AE0C               	btfss	___altoft@c+3,7,c
  7033  0015C6  D011               	goto	i2l2811
  7034  0015C8  1E0C               	comf	___altoft@c+3,f,c
  7035  0015CA  1E0B               	comf	___altoft@c+2,f,c
  7036  0015CC  1E0A               	comf	___altoft@c+1,f,c
  7037  0015CE  6C09               	negf	___altoft@c,c
  7038  0015D0  0E00               	movlw	0
  7039  0015D2  220A               	addwfc	___altoft@c+1,f,c
  7040  0015D4  220B               	addwfc	___altoft@c+2,f,c
  7041  0015D6  220C               	addwfc	___altoft@c+3,f,c
  7042  0015D8  0E01               	movlw	1
  7043  0015DA  6E12               	movwf	___altoft@sign,c
  7044  0015DC  D006               	goto	i2l2811
  7045  0015DE                     i2l2809:
  7046  0015DE  90D8               	bcf	status,0,c
  7047  0015E0  320C               	rrcf	___altoft@c+3,f,c
  7048  0015E2  320B               	rrcf	___altoft@c+2,f,c
  7049  0015E4  320A               	rrcf	___altoft@c+1,f,c
  7050  0015E6  3209               	rrcf	___altoft@c,f,c
  7051  0015E8  2A11               	incf	___altoft@exp,f,c
  7052  0015EA                     i2l2811:
  7053  0015EA  0E00               	movlw	0
  7054  0015EC  1409               	andwf	___altoft@c,w,c
  7055  0015EE  6E0D               	movwf	??___altoft& (0+255),c
  7056  0015F0  0E00               	movlw	0
  7057  0015F2  140A               	andwf	___altoft@c+1,w,c
  7058  0015F4  6E0E               	movwf	(??___altoft+1)& (0+255),c
  7059  0015F6  0E00               	movlw	0
  7060  0015F8  140B               	andwf	___altoft@c+2,w,c
  7061  0015FA  6E0F               	movwf	(??___altoft+2)& (0+255),c
  7062  0015FC  0EFF               	movlw	255
  7063  0015FE  140C               	andwf	___altoft@c+3,w,c
  7064  001600  6E10               	movwf	(??___altoft+3)& (0+255),c
  7065  001602  500D               	movf	??___altoft,w,c
  7066  001604  100E               	iorwf	??___altoft+1,w,c
  7067  001606  100F               	iorwf	??___altoft+2,w,c
  7068  001608  1010               	iorwf	??___altoft+3,w,c
  7069  00160A  A4D8               	btfss	status,2,c
  7070  00160C  D7E8               	goto	i2l2809
  7071  00160E  C009  F001         	movff	___altoft@c,___ftpack@arg
  7072  001612  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  7073  001616  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  7074  00161A  C011  F004         	movff	___altoft@exp,___ftpack@exp
  7075  00161E  C012  F005         	movff	___altoft@sign,___ftpack@sign
  7076  001622  EC13  F009         	call	___ftpack	;wreg free
  7077  001626  C001  F009         	movff	?___ftpack,?___altoft
  7078  00162A  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  7079  00162E  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  7080  001632  0012               	return	
  7081  001634                     __end_of___altoft:
  7082                           	opt stack 0
  7083                           pclatu	equ	0xFFB
  7084                           pclath	equ	0xFFA
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodh	equ	0xFF4
  7090                           prodl	equ	0xFF3
  7091                           intcon	equ	0xFF2
  7092                           intcon3	equ	0xFF0
  7093                           postinc0	equ	0xFEE
  7094                           fsr0h	equ	0xFEA
  7095                           fsr0l	equ	0xFE9
  7096                           wreg	equ	0xFE8
  7097                           postdec1	equ	0xFE5
  7098                           fsr1h	equ	0xFE2
  7099                           fsr1l	equ	0xFE1
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           fsr2h	equ	0xFDA
  7104                           fsr2l	equ	0xFD9
  7105                           status	equ	0xFD8
  7106                           
  7107 ;; *************** function ___ftpack *****************
  7108 ;; Defined at:
  7109 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;  arg             3    0[COMRAM] unsigned um
  7112 ;;  exp             1    3[COMRAM] unsigned char 
  7113 ;;  sign            1    4[COMRAM] unsigned char 
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;		None
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  3    0[COMRAM] float 
  7118 ;; Registers used:
  7119 ;;		wreg, status,2, status,0
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7125 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;Total ram usage:        8 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		___altoft
  7135 ;;		___awtoft
  7136 ;;		___ftadd
  7137 ;;		___ftdiv
  7138 ;;		___ftmul
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           	psect	text40
  7143  001226                     __ptext40:
  7144                           	opt stack 0
  7145  001226                     ___ftpack:
  7146                           	opt stack 19
  7147                           
  7148                           ;incstack = 0
  7149  001226  5004               	movf	___ftpack@exp,w,c
  7150  001228  B4D8               	btfsc	status,2,c
  7151  00122A  D005               	goto	i2l2627
  7152  00122C  5001               	movf	___ftpack@arg,w,c
  7153  00122E  1002               	iorwf	___ftpack@arg+1,w,c
  7154  001230  1003               	iorwf	___ftpack@arg+2,w,c
  7155  001232  A4D8               	btfss	status,2,c
  7156  001234  D00C               	goto	i2l2633
  7157  001236                     i2l2627:
  7158  001236  0E00               	movlw	0
  7159  001238  6E01               	movwf	?___ftpack,c
  7160  00123A  0E00               	movlw	0
  7161  00123C  6E02               	movwf	?___ftpack+1,c
  7162  00123E  0E00               	movlw	0
  7163  001240  6E03               	movwf	?___ftpack+2,c
  7164  001242  0012               	return	
  7165  001244                     i2l2631:
  7166  001244  2A04               	incf	___ftpack@exp,f,c
  7167  001246  90D8               	bcf	status,0,c
  7168  001248  3203               	rrcf	___ftpack@arg+2,f,c
  7169  00124A  3202               	rrcf	___ftpack@arg+1,f,c
  7170  00124C  3201               	rrcf	___ftpack@arg,f,c
  7171  00124E                     i2l2633:
  7172  00124E  0E00               	movlw	0
  7173  001250  1401               	andwf	___ftpack@arg,w,c
  7174  001252  6E06               	movwf	??___ftpack& (0+255),c
  7175  001254  0E00               	movlw	0
  7176  001256  1402               	andwf	___ftpack@arg+1,w,c
  7177  001258  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7178  00125A  0EFE               	movlw	254
  7179  00125C  1403               	andwf	___ftpack@arg+2,w,c
  7180  00125E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7181  001260  5006               	movf	??___ftpack,w,c
  7182  001262  1007               	iorwf	??___ftpack+1,w,c
  7183  001264  1008               	iorwf	??___ftpack+2,w,c
  7184  001266  B4D8               	btfsc	status,2,c
  7185  001268  D00C               	goto	i2l2639
  7186  00126A  D7EC               	goto	i2l2631
  7187  00126C                     i2l2635:
  7188  00126C  2A04               	incf	___ftpack@exp,f,c
  7189  00126E  0E01               	movlw	1
  7190  001270  2601               	addwf	___ftpack@arg,f,c
  7191  001272  0E00               	movlw	0
  7192  001274  2202               	addwfc	___ftpack@arg+1,f,c
  7193  001276  0E00               	movlw	0
  7194  001278  2203               	addwfc	___ftpack@arg+2,f,c
  7195  00127A  90D8               	bcf	status,0,c
  7196  00127C  3203               	rrcf	___ftpack@arg+2,f,c
  7197  00127E  3202               	rrcf	___ftpack@arg+1,f,c
  7198  001280  3201               	rrcf	___ftpack@arg,f,c
  7199  001282                     i2l2639:
  7200  001282  0E00               	movlw	0
  7201  001284  1401               	andwf	___ftpack@arg,w,c
  7202  001286  6E06               	movwf	??___ftpack& (0+255),c
  7203  001288  0E00               	movlw	0
  7204  00128A  1402               	andwf	___ftpack@arg+1,w,c
  7205  00128C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7206  00128E  0EFF               	movlw	255
  7207  001290  1403               	andwf	___ftpack@arg+2,w,c
  7208  001292  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7209  001294  5006               	movf	??___ftpack,w,c
  7210  001296  1007               	iorwf	??___ftpack+1,w,c
  7211  001298  1008               	iorwf	??___ftpack+2,w,c
  7212  00129A  B4D8               	btfsc	status,2,c
  7213  00129C  D006               	goto	i2l2643
  7214  00129E  D7E6               	goto	i2l2635
  7215  0012A0                     i2l2641:
  7216  0012A0  0604               	decf	___ftpack@exp,f,c
  7217  0012A2  90D8               	bcf	status,0,c
  7218  0012A4  3601               	rlcf	___ftpack@arg,f,c
  7219  0012A6  3602               	rlcf	___ftpack@arg+1,f,c
  7220  0012A8  3603               	rlcf	___ftpack@arg+2,f,c
  7221  0012AA                     i2l2643:
  7222  0012AA  BE02               	btfsc	___ftpack@arg+1,7,c
  7223  0012AC  D003               	goto	i2l822
  7224  0012AE  0E02               	movlw	2
  7225  0012B0  6004               	cpfslt	___ftpack@exp,c
  7226  0012B2  D7F6               	goto	i2l2641
  7227  0012B4                     i2l822:
  7228  0012B4  A004               	btfss	___ftpack@exp,0,c
  7229  0012B6  9E02               	bcf	___ftpack@arg+1,7,c
  7230  0012B8  90D8               	bcf	status,0,c
  7231  0012BA  3204               	rrcf	___ftpack@exp,f,c
  7232  0012BC  5004               	movf	___ftpack@exp,w,c
  7233  0012BE  1203               	iorwf	___ftpack@arg+2,f,c
  7234  0012C0  5005               	movf	___ftpack@sign,w,c
  7235  0012C2  A4D8               	btfss	status,2,c
  7236  0012C4  8E03               	bsf	___ftpack@arg+2,7,c
  7237  0012C6  C001  F001         	movff	___ftpack@arg,?___ftpack
  7238  0012CA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7239  0012CE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7240  0012D2  0012               	return	
  7241  0012D4                     __end_of___ftpack:
  7242                           	opt stack 0
  7243                           pclatu	equ	0xFFB
  7244                           pclath	equ	0xFFA
  7245                           tblptru	equ	0xFF8
  7246                           tblptrh	equ	0xFF7
  7247                           tblptrl	equ	0xFF6
  7248                           tablat	equ	0xFF5
  7249                           prodh	equ	0xFF4
  7250                           prodl	equ	0xFF3
  7251                           intcon	equ	0xFF2
  7252                           intcon3	equ	0xFF0
  7253                           postinc0	equ	0xFEE
  7254                           fsr0h	equ	0xFEA
  7255                           fsr0l	equ	0xFE9
  7256                           wreg	equ	0xFE8
  7257                           postdec1	equ	0xFE5
  7258                           fsr1h	equ	0xFE2
  7259                           fsr1l	equ	0xFE1
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function _servoInterruptService *****************
  7268 ;; Defined at:
  7269 ;;		line 40 in file "servo.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;  i               2   19[COMRAM] int 
  7274 ;;  flags           8   11[COMRAM] int [4]
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      void 
  7277 ;; Registers used:
  7278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;Total ram usage:       12 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    1
  7291 ;; This function calls:
  7292 ;;		_digitalRead
  7293 ;;		_startTimer
  7294 ;;		i2_digitalWrite
  7295 ;; This function is called by:
  7296 ;;		_service
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text41
  7301  000664                     __ptext41:
  7302                           	opt stack 0
  7303  000664                     _servoInterruptService:
  7304                           	opt stack 21
  7305                           
  7306                           ;servo.c: 42: int flags[4];
  7307                           ;servo.c: 43: flags[0] = TMR0IF;
  7308                           
  7309                           ;incstack = 0
  7310  000664  A4F2               	btfss	intcon,2,c	;volatile
  7311  000666  D002               	goto	i2u306_40
  7312  000668  0E01               	movlw	1
  7313  00066A  D001               	goto	i2u307_40
  7314  00066C                     i2u306_40:
  7315  00066C  0E00               	movlw	0
  7316  00066E                     i2u307_40:
  7317  00066E  6E0C               	movwf	servoInterruptService@flags,c
  7318  000670  6A0D               	clrf	servoInterruptService@flags+1,c
  7319                           
  7320                           ;servo.c: 44: flags[1] = TMR1IF;
  7321  000672  A09E               	btfss	3998,0,c	;volatile
  7322  000674  D002               	goto	i2u308_40
  7323  000676  0E01               	movlw	1
  7324  000678  D001               	goto	i2u309_40
  7325  00067A                     i2u308_40:
  7326  00067A  0E00               	movlw	0
  7327  00067C                     i2u309_40:
  7328  00067C  6E0E               	movwf	servoInterruptService@flags+2,c
  7329  00067E  6A0F               	clrf	servoInterruptService@flags+3,c
  7330                           
  7331                           ;servo.c: 45: flags[2] = TMR2IF;
  7332  000680  A29E               	btfss	3998,1,c	;volatile
  7333  000682  D002               	goto	i2u310_40
  7334  000684  0E01               	movlw	1
  7335  000686  D001               	goto	i2u311_40
  7336  000688                     i2u310_40:
  7337  000688  0E00               	movlw	0
  7338  00068A                     i2u311_40:
  7339  00068A  6E10               	movwf	servoInterruptService@flags+4,c
  7340  00068C  6A11               	clrf	servoInterruptService@flags+5,c
  7341                           
  7342                           ;servo.c: 46: flags[3] = TMR3IF;
  7343  00068E  A2A1               	btfss	4001,1,c	;volatile
  7344  000690  D002               	goto	i2u312_40
  7345  000692  0E01               	movlw	1
  7346  000694  D001               	goto	i2u313_40
  7347  000696                     i2u312_40:
  7348  000696  0E00               	movlw	0
  7349  000698                     i2u313_40:
  7350  000698  6E12               	movwf	servoInterruptService@flags+6,c
  7351  00069A  6A13               	clrf	servoInterruptService@flags+7,c
  7352                           
  7353                           ;servo.c: 48: for(int i = 0; i < 4; i++){
  7354  00069C  0E00               	movlw	0
  7355  00069E  6E15               	movwf	servoInterruptService@i+1,c
  7356  0006A0  0E00               	movlw	0
  7357  0006A2  6E14               	movwf	servoInterruptService@i,c
  7358  0006A4  BE15               	btfsc	servoInterruptService@i+1,7,c
  7359  0006A6  D008               	goto	i2l3463
  7360  0006A8  5015               	movf	servoInterruptService@i+1,w,c
  7361  0006AA  E105               	bnz	i2u314_40
  7362  0006AC  0E04               	movlw	4
  7363  0006AE  5C14               	subwf	servoInterruptService@i,w,c
  7364  0006B0  B0D8               	btfsc	status,0,c
  7365  0006B2  0012               	return	
  7366  0006B4  D001               	goto	i2l3463
  7367  0006B6                     i2u314_40:
  7368  0006B6  0012               	return	
  7369  0006B8                     i2l3463:
  7370                           
  7371                           ;servo.c: 49: if(flags[i]){
  7372  0006B8  90D8               	bcf	status,0,c
  7373  0006BA  3414               	rlcf	servoInterruptService@i,w,c
  7374  0006BC  6ED9               	movwf	fsr2l,c
  7375  0006BE  3415               	rlcf	servoInterruptService@i+1,w,c
  7376  0006C0  6EDA               	movwf	fsr2h,c
  7377  0006C2  0E0C               	movlw	low servoInterruptService@flags
  7378  0006C4  26D9               	addwf	fsr2l,f,c
  7379  0006C6  0E00               	movlw	high servoInterruptService@flags
  7380  0006C8  22DA               	addwfc	fsr2h,f,c
  7381  0006CA  50DE               	movf	postinc2,w,c
  7382  0006CC  10DE               	iorwf	postinc2,w,c
  7383  0006CE  B4D8               	btfsc	status,2,c
  7384  0006D0  D0AB               	goto	i2l3477
  7385                           
  7386                           ;servo.c: 51: if(digitalRead(port[i],pin[i])){
  7387  0006D2  90D8               	bcf	status,0,c
  7388  0006D4  3414               	rlcf	servoInterruptService@i,w,c
  7389  0006D6  6ED9               	movwf	fsr2l,c
  7390  0006D8  3415               	rlcf	servoInterruptService@i+1,w,c
  7391  0006DA  6EDA               	movwf	fsr2h,c
  7392  0006DC  0E76               	movlw	low _port
  7393  0006DE  26D9               	addwf	fsr2l,f,c
  7394  0006E0  0E00               	movlw	high _port
  7395  0006E2  22DA               	addwfc	fsr2h,f,c
  7396  0006E4  CFDE F001          	movff	postinc2,digitalRead@port
  7397  0006E8  CFDD F002          	movff	postdec2,digitalRead@port+1
  7398  0006EC  90D8               	bcf	status,0,c
  7399  0006EE  3414               	rlcf	servoInterruptService@i,w,c
  7400  0006F0  6ED9               	movwf	fsr2l,c
  7401  0006F2  3415               	rlcf	servoInterruptService@i+1,w,c
  7402  0006F4  6EDA               	movwf	fsr2h,c
  7403  0006F6  0EBB               	movlw	low _pin
  7404  0006F8  26D9               	addwf	fsr2l,f,c
  7405  0006FA  0E00               	movlw	high _pin
  7406  0006FC  22DA               	addwfc	fsr2h,f,c
  7407  0006FE  CFDE F003          	movff	postinc2,digitalRead@pin
  7408  000702  CFDD F004          	movff	postdec2,digitalRead@pin+1
  7409  000706  ECBA  F008         	call	_digitalRead	;wreg free
  7410  00070A  5001               	movf	?_digitalRead,w,c
  7411  00070C  1002               	iorwf	?_digitalRead+1,w,c
  7412  00070E  B4D8               	btfsc	status,2,c
  7413  000710  D02F               	goto	i2l3471
  7414                           
  7415                           ;servo.c: 52: startTimer(i,15535);
  7416  000712  C014  F001         	movff	servoInterruptService@i,startTimer@timer
  7417  000716  C015  F002         	movff	servoInterruptService@i+1,startTimer@timer+1
  7418  00071A  0EAF               	movlw	175
  7419  00071C  6E03               	movwf	startTimer@val,c
  7420  00071E  0E3C               	movlw	60
  7421  000720  6E04               	movwf	startTimer@val+1,c
  7422  000722  0E00               	movlw	0
  7423  000724  6E05               	movwf	startTimer@val+2,c
  7424  000726  0E00               	movlw	0
  7425  000728  6E06               	movwf	startTimer@val+3,c
  7426  00072A  ECD6  F00B         	call	_startTimer	;wreg free
  7427                           
  7428                           ;servo.c: 53: digitalWrite(port[i],pin[i],0);
  7429  00072E  90D8               	bcf	status,0,c
  7430  000730  3414               	rlcf	servoInterruptService@i,w,c
  7431  000732  6ED9               	movwf	fsr2l,c
  7432  000734  3415               	rlcf	servoInterruptService@i+1,w,c
  7433  000736  6EDA               	movwf	fsr2h,c
  7434  000738  0E76               	movlw	low _port
  7435  00073A  26D9               	addwf	fsr2l,f,c
  7436  00073C  0E00               	movlw	high _port
  7437  00073E  22DA               	addwfc	fsr2h,f,c
  7438  000740  CFDE F001          	movff	postinc2,i2digitalWrite@port
  7439  000744  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  7440  000748  90D8               	bcf	status,0,c
  7441  00074A  3414               	rlcf	servoInterruptService@i,w,c
  7442  00074C  6ED9               	movwf	fsr2l,c
  7443  00074E  3415               	rlcf	servoInterruptService@i+1,w,c
  7444  000750  6EDA               	movwf	fsr2h,c
  7445  000752  0EBB               	movlw	low _pin
  7446  000754  26D9               	addwf	fsr2l,f,c
  7447  000756  0E00               	movlw	high _pin
  7448  000758  22DA               	addwfc	fsr2h,f,c
  7449  00075A  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  7450  00075E  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  7451  000762  0E00               	movlw	0
  7452  000764  6E06               	movwf	i2digitalWrite@val+1,c
  7453  000766  0E00               	movlw	0
  7454  000768  6E05               	movwf	i2digitalWrite@val,c
  7455  00076A  EC6A  F009         	call	i2_digitalWrite	;wreg free
  7456                           
  7457                           ;servo.c: 54: }
  7458  00076E  D047               	goto	i2l3475
  7459  000770                     i2l3471:
  7460                           
  7461                           ;servo.c: 55: else{
  7462                           ;servo.c: 56: startTimer(i, pulse[i]);
  7463  000770  C014  F001         	movff	servoInterruptService@i,startTimer@timer
  7464  000774  C015  F002         	movff	servoInterruptService@i+1,startTimer@timer+1
  7465  000778  0EAB               	movlw	low _pulse
  7466  00077A  6E0A               	movwf	??_servoInterruptService& (0+255),c
  7467  00077C  0E00               	movlw	high _pulse
  7468  00077E  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  7469  000780  90D8               	bcf	status,0,c
  7470  000782  3414               	rlcf	servoInterruptService@i,w,c
  7471  000784  6ED9               	movwf	fsr2l,c
  7472  000786  3415               	rlcf	servoInterruptService@i+1,w,c
  7473  000788  6EDA               	movwf	fsr2h,c
  7474  00078A  90D8               	bcf	status,0,c
  7475  00078C  36D9               	rlcf	fsr2l,f,c
  7476  00078E  36DA               	rlcf	fsr2h,f,c
  7477  000790  500A               	movf	??_servoInterruptService,w,c
  7478  000792  26D9               	addwf	fsr2l,f,c
  7479  000794  500B               	movf	??_servoInterruptService+1,w,c
  7480  000796  22DA               	addwfc	fsr2h,f,c
  7481  000798  CFDE F003          	movff	postinc2,startTimer@val
  7482  00079C  CFDE F004          	movff	postinc2,startTimer@val+1
  7483  0007A0  CFDE F005          	movff	postinc2,startTimer@val+2
  7484  0007A4  CFDE F006          	movff	postinc2,startTimer@val+3
  7485  0007A8  ECD6  F00B         	call	_startTimer	;wreg free
  7486                           
  7487                           ;servo.c: 57: digitalWrite(port[i],pin[i],1);
  7488  0007AC  90D8               	bcf	status,0,c
  7489  0007AE  3414               	rlcf	servoInterruptService@i,w,c
  7490  0007B0  6ED9               	movwf	fsr2l,c
  7491  0007B2  3415               	rlcf	servoInterruptService@i+1,w,c
  7492  0007B4  6EDA               	movwf	fsr2h,c
  7493  0007B6  0E76               	movlw	low _port
  7494  0007B8  26D9               	addwf	fsr2l,f,c
  7495  0007BA  0E00               	movlw	high _port
  7496  0007BC  22DA               	addwfc	fsr2h,f,c
  7497  0007BE  CFDE F001          	movff	postinc2,i2digitalWrite@port
  7498  0007C2  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  7499  0007C6  90D8               	bcf	status,0,c
  7500  0007C8  3414               	rlcf	servoInterruptService@i,w,c
  7501  0007CA  6ED9               	movwf	fsr2l,c
  7502  0007CC  3415               	rlcf	servoInterruptService@i+1,w,c
  7503  0007CE  6EDA               	movwf	fsr2h,c
  7504  0007D0  0EBB               	movlw	low _pin
  7505  0007D2  26D9               	addwf	fsr2l,f,c
  7506  0007D4  0E00               	movlw	high _pin
  7507  0007D6  22DA               	addwfc	fsr2h,f,c
  7508  0007D8  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  7509  0007DC  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  7510  0007E0  0E00               	movlw	0
  7511  0007E2  6E06               	movwf	i2digitalWrite@val+1,c
  7512  0007E4  0E01               	movlw	1
  7513  0007E6  6E05               	movwf	i2digitalWrite@val,c
  7514  0007E8  EC6A  F009         	call	i2_digitalWrite	;wreg free
  7515                           
  7516                           ;servo.c: 58: }
  7517                           ;servo.c: 61: switch(i){
  7518  0007EC  D008               	goto	i2l3475
  7519  0007EE                     i2l492:
  7520  0007EE  94F2               	bcf	intcon,2,c	;volatile
  7521  0007F0  D01B               	goto	i2l3477
  7522  0007F2                     i2l494:
  7523  0007F2  909E               	bcf	3998,0,c	;volatile
  7524  0007F4  D019               	goto	i2l3477
  7525  0007F6                     i2l495:
  7526  0007F6  929E               	bcf	3998,1,c	;volatile
  7527  0007F8  D017               	goto	i2l3477
  7528  0007FA                     i2l496:
  7529  0007FA  92A1               	bcf	4001,1,c	;volatile
  7530                           
  7531                           ;servo.c: 66: }
  7532  0007FC  D015               	goto	i2l3477
  7533  0007FE                     i2l3475:
  7534  0007FE  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
  7535  000802  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
  7536                           
  7537                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7538                           ; Switch size 1, requested type "space"
  7539                           ; Number of cases is 1, Range of values is 0 to 0
  7540                           ; switch strategies available:
  7541                           ; Name         Instructions Cycles
  7542                           ; simple_byte            4     3 (average)
  7543                           ;	Chosen strategy is simple_byte
  7544  000806  500B               	movf	??_servoInterruptService+1,w,c
  7545  000808  0A00               	xorlw	0	; case 0
  7546  00080A  A4D8               	btfss	status,2,c
  7547  00080C  D00D               	goto	i2l3477
  7548                           
  7549                           ; Switch size 1, requested type "space"
  7550                           ; Number of cases is 4, Range of values is 0 to 3
  7551                           ; switch strategies available:
  7552                           ; Name         Instructions Cycles
  7553                           ; simple_byte           13     7 (average)
  7554                           ;	Chosen strategy is simple_byte
  7555  00080E  500A               	movf	??_servoInterruptService,w,c
  7556  000810  0A00               	xorlw	0	; case 0
  7557  000812  B4D8               	btfsc	status,2,c
  7558  000814  D7EC               	goto	i2l492
  7559  000816  0A01               	xorlw	1	; case 1
  7560  000818  B4D8               	btfsc	status,2,c
  7561  00081A  D7EB               	goto	i2l494
  7562  00081C  0A03               	xorlw	3	; case 2
  7563  00081E  B4D8               	btfsc	status,2,c
  7564  000820  D7EA               	goto	i2l495
  7565  000822  0A01               	xorlw	1	; case 3
  7566  000824  B4D8               	btfsc	status,2,c
  7567  000826  D7E9               	goto	i2l496
  7568  000828                     i2l3477:
  7569  000828  4A14               	infsnz	servoInterruptService@i,f,c
  7570  00082A  2A15               	incf	servoInterruptService@i+1,f,c
  7571  00082C  BE15               	btfsc	servoInterruptService@i+1,7,c
  7572  00082E  D744               	goto	i2l3463
  7573  000830  5015               	movf	servoInterruptService@i+1,w,c
  7574  000832  E101               	bnz	i2l497
  7575  000834  D73B               	goto	L5
  7576  000836                     i2l497:
  7577  000836  0012               	return		;funcret
  7578  000838                     __end_of_servoInterruptService:
  7579                           	opt stack 0
  7580                           pclatu	equ	0xFFB
  7581                           pclath	equ	0xFFA
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           prodh	equ	0xFF4
  7587                           prodl	equ	0xFF3
  7588                           intcon	equ	0xFF2
  7589                           intcon3	equ	0xFF0
  7590                           postinc0	equ	0xFEE
  7591                           fsr0h	equ	0xFEA
  7592                           fsr0l	equ	0xFE9
  7593                           wreg	equ	0xFE8
  7594                           postdec1	equ	0xFE5
  7595                           fsr1h	equ	0xFE2
  7596                           fsr1l	equ	0xFE1
  7597                           indf2	equ	0xFDF
  7598                           postinc2	equ	0xFDE
  7599                           postdec2	equ	0xFDD
  7600                           fsr2h	equ	0xFDA
  7601                           fsr2l	equ	0xFD9
  7602                           status	equ	0xFD8
  7603                           
  7604 ;; *************** function i2_digitalWrite *****************
  7605 ;; Defined at:
  7606 ;;		line 53 in file "iopin.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  port            2    0[COMRAM] int 
  7609 ;;  pin             2    2[COMRAM] int 
  7610 ;;  val             2    4[COMRAM] int 
  7611 ;; Auto vars:     Size  Location     Type
  7612 ;;		None
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  1    wreg      void 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7622 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;Total ram usage:        9 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_servoInterruptService
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text42
  7636  0012D4                     __ptext42:
  7637                           	opt stack 0
  7638  0012D4                     i2_digitalWrite:
  7639                           	opt stack 21
  7640                           
  7641                           ;iopin.c: 54: pin = 1 << pin;
  7642                           
  7643                           ;incstack = 0
  7644  0012D4  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
  7645  0012D8  0E01               	movlw	1
  7646  0012DA  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
  7647  0012DC  0E00               	movlw	0
  7648  0012DE  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
  7649  0012E0  2A07               	incf	??i2_digitalWrite,f,c
  7650  0012E2  D003               	goto	i2u260_44
  7651  0012E4                     i2u260_45:
  7652  0012E4  90D8               	bcf	status,0,c
  7653  0012E6  3608               	rlcf	??i2_digitalWrite+1,f,c
  7654  0012E8  3609               	rlcf	??i2_digitalWrite+2,f,c
  7655  0012EA                     i2u260_44:
  7656  0012EA  2E07               	decfsz	??i2_digitalWrite,f,c
  7657  0012EC  D7FB               	goto	i2u260_45
  7658  0012EE  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
  7659  0012F2  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
  7660                           
  7661                           ;iopin.c: 55: if(val == 0){
  7662  0012F6  5005               	movf	i2digitalWrite@val,w,c
  7663  0012F8  1006               	iorwf	i2digitalWrite@val+1,w,c
  7664  0012FA  A4D8               	btfss	status,2,c
  7665  0012FC  D02B               	goto	i2l3215
  7666                           
  7667                           ;iopin.c: 56: pin ^= 0xff;
  7668  0012FE  0EFF               	movlw	255
  7669  001300  1A03               	xorwf	i2digitalWrite@pin,f,c
  7670                           
  7671                           ;iopin.c: 57: }
  7672                           ;iopin.c: 59: switch(port){
  7673  001302  D028               	goto	i2l3215
  7674  001304                     i2l3191:
  7675  001304  0405               	decf	i2digitalWrite@val,w,c
  7676  001306  1006               	iorwf	i2digitalWrite@val+1,w,c
  7677  001308  A4D8               	btfss	status,2,c
  7678  00130A  D003               	goto	i2l3195
  7679  00130C  5003               	movf	i2digitalWrite@pin,w,c
  7680  00130E  1289               	iorwf	3977,f,c	;volatile
  7681  001310  0012               	return	
  7682  001312                     i2l3195:
  7683                           
  7684                           ;iopin.c: 61: else LATA &= pin;
  7685  001312  5003               	movf	i2digitalWrite@pin,w,c
  7686  001314  1689               	andwf	3977,f,c	;volatile
  7687                           
  7688                           ;iopin.c: 62: break;
  7689  001316  0012               	return	
  7690  001318                     i2l3197:
  7691  001318  0405               	decf	i2digitalWrite@val,w,c
  7692  00131A  1006               	iorwf	i2digitalWrite@val+1,w,c
  7693  00131C  A4D8               	btfss	status,2,c
  7694  00131E  D003               	goto	i2l3201
  7695  001320  5003               	movf	i2digitalWrite@pin,w,c
  7696  001322  128A               	iorwf	3978,f,c	;volatile
  7697  001324  0012               	return	
  7698  001326                     i2l3201:
  7699                           
  7700                           ;iopin.c: 64: else LATB &= pin;
  7701  001326  5003               	movf	i2digitalWrite@pin,w,c
  7702  001328  168A               	andwf	3978,f,c	;volatile
  7703                           
  7704                           ;iopin.c: 65: break;
  7705  00132A  0012               	return	
  7706  00132C                     i2l3203:
  7707  00132C  0405               	decf	i2digitalWrite@val,w,c
  7708  00132E  1006               	iorwf	i2digitalWrite@val+1,w,c
  7709  001330  A4D8               	btfss	status,2,c
  7710  001332  D003               	goto	i2l3207
  7711  001334  5003               	movf	i2digitalWrite@pin,w,c
  7712  001336  128B               	iorwf	3979,f,c	;volatile
  7713  001338  0012               	return	
  7714  00133A                     i2l3207:
  7715                           
  7716                           ;iopin.c: 67: else LATC &= pin;
  7717  00133A  5003               	movf	i2digitalWrite@pin,w,c
  7718  00133C  168B               	andwf	3979,f,c	;volatile
  7719                           
  7720                           ;iopin.c: 68: break;
  7721  00133E  0012               	return	
  7722  001340                     i2l3209:
  7723  001340  0405               	decf	i2digitalWrite@val,w,c
  7724  001342  1006               	iorwf	i2digitalWrite@val+1,w,c
  7725  001344  A4D8               	btfss	status,2,c
  7726  001346  D003               	goto	i2l3213
  7727  001348  5003               	movf	i2digitalWrite@pin,w,c
  7728  00134A  128C               	iorwf	3980,f,c	;volatile
  7729  00134C  0012               	return	
  7730  00134E                     i2l3213:
  7731                           
  7732                           ;iopin.c: 70: else LATD &= pin;
  7733  00134E  5003               	movf	i2digitalWrite@pin,w,c
  7734  001350  168C               	andwf	3980,f,c	;volatile
  7735                           
  7736                           ;iopin.c: 71: }
  7737  001352  0012               	return	
  7738  001354                     i2l3215:
  7739  001354  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
  7740  001358  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
  7741                           
  7742                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7743                           ; Switch size 1, requested type "space"
  7744                           ; Number of cases is 1, Range of values is 0 to 0
  7745                           ; switch strategies available:
  7746                           ; Name         Instructions Cycles
  7747                           ; simple_byte            4     3 (average)
  7748                           ;	Chosen strategy is simple_byte
  7749  00135C  5008               	movf	??i2_digitalWrite+1,w,c
  7750  00135E  0A00               	xorlw	0	; case 0
  7751  001360  A4D8               	btfss	status,2,c
  7752  001362  0012               	return	
  7753                           
  7754                           ; Switch size 1, requested type "space"
  7755                           ; Number of cases is 4, Range of values is 0 to 3
  7756                           ; switch strategies available:
  7757                           ; Name         Instructions Cycles
  7758                           ; simple_byte           13     7 (average)
  7759                           ;	Chosen strategy is simple_byte
  7760  001364  5007               	movf	??i2_digitalWrite,w,c
  7761  001366  0A00               	xorlw	0	; case 0
  7762  001368  B4D8               	btfsc	status,2,c
  7763  00136A  D7CC               	goto	i2l3191
  7764  00136C  0A01               	xorlw	1	; case 1
  7765  00136E  B4D8               	btfsc	status,2,c
  7766  001370  D7D3               	goto	i2l3197
  7767  001372  0A03               	xorlw	3	; case 2
  7768  001374  B4D8               	btfsc	status,2,c
  7769  001376  D7DA               	goto	i2l3203
  7770  001378  0A01               	xorlw	1	; case 3
  7771  00137A  A4D8               	btfss	status,2,c
  7772  00137C  0012               	return	
  7773  00137E  D7E0               	goto	i2l3209
  7774  001380                     __end_ofi2_digitalWrite:
  7775                           	opt stack 0
  7776                           pclatu	equ	0xFFB
  7777                           pclath	equ	0xFFA
  7778                           tblptru	equ	0xFF8
  7779                           tblptrh	equ	0xFF7
  7780                           tblptrl	equ	0xFF6
  7781                           tablat	equ	0xFF5
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           intcon	equ	0xFF2
  7785                           intcon3	equ	0xFF0
  7786                           postinc0	equ	0xFEE
  7787                           fsr0h	equ	0xFEA
  7788                           fsr0l	equ	0xFE9
  7789                           wreg	equ	0xFE8
  7790                           postdec1	equ	0xFE5
  7791                           fsr1h	equ	0xFE2
  7792                           fsr1l	equ	0xFE1
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           postdec2	equ	0xFDD
  7796                           fsr2h	equ	0xFDA
  7797                           fsr2l	equ	0xFD9
  7798                           status	equ	0xFD8
  7799                           
  7800 ;; *************** function _startTimer *****************
  7801 ;; Defined at:
  7802 ;;		line 75 in file "timer.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;  timer           2    0[COMRAM] int 
  7805 ;;  val             4    2[COMRAM] long 
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;		None
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  1    wreg      void 
  7810 ;; Registers used:
  7811 ;;		wreg, status,2, status,0
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7817 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;Total ram usage:        8 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; This function calls:
  7824 ;;		Nothing
  7825 ;; This function is called by:
  7826 ;;		_servoInterruptService
  7827 ;;		_testFrequency
  7828 ;;		_initServo
  7829 ;; This function uses a non-reentrant model
  7830 ;;
  7831                           
  7832                           	psect	text43
  7833  0017AC                     __ptext43:
  7834                           	opt stack 0
  7835  0017AC                     _startTimer:
  7836                           	opt stack 21
  7837                           
  7838                           ;timer.c: 76: switch(timer){
  7839                           
  7840                           ;incstack = 0
  7841  0017AC  D012               	goto	i2l3163
  7842  0017AE                     i2l365:
  7843                           
  7844                           ;timer.c: 78: TMR0H = val>>8;
  7845  0017AE  C004  FFD7         	movff	startTimer@val+1,4055	;volatile
  7846                           
  7847                           ;timer.c: 79: TMR0L = val;
  7848  0017B2  C003  FFD6         	movff	startTimer@val,4054	;volatile
  7849                           
  7850                           ;timer.c: 80: T0CON |= 1<<7;
  7851  0017B6  8ED5               	bsf	4053,7,c	;volatile
  7852                           
  7853                           ;timer.c: 81: break;
  7854  0017B8  0012               	return	
  7855  0017BA                     i2l367:
  7856                           
  7857                           ;timer.c: 83: TMR1H = val>>8;
  7858  0017BA  C004  FFCF         	movff	startTimer@val+1,4047	;volatile
  7859                           
  7860                           ;timer.c: 84: TMR1L = val;
  7861  0017BE  C003  FFCE         	movff	startTimer@val,4046	;volatile
  7862                           
  7863                           ;timer.c: 85: T1CON |= 1<<0;
  7864  0017C2  80CD               	bsf	4045,0,c	;volatile
  7865                           
  7866                           ;timer.c: 86: break;
  7867  0017C4  0012               	return	
  7868  0017C6                     i2l368:
  7869                           
  7870                           ;timer.c: 88: TMR3H = val>>8;
  7871  0017C6  C004  FFB3         	movff	startTimer@val+1,4019	;volatile
  7872                           
  7873                           ;timer.c: 89: TMR3L = val;
  7874  0017CA  C003  FFB2         	movff	startTimer@val,4018	;volatile
  7875                           
  7876                           ;timer.c: 90: T3CON |= 1<<0;
  7877  0017CE  80B1               	bsf	4017,0,c	;volatile
  7878                           
  7879                           ;timer.c: 91: }
  7880  0017D0  0012               	return	
  7881  0017D2                     i2l3163:
  7882  0017D2  C001  F007         	movff	startTimer@timer,??_startTimer
  7883  0017D6  C002  F008         	movff	startTimer@timer+1,??_startTimer+1
  7884                           
  7885                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7886                           ; Switch size 1, requested type "space"
  7887                           ; Number of cases is 1, Range of values is 0 to 0
  7888                           ; switch strategies available:
  7889                           ; Name         Instructions Cycles
  7890                           ; simple_byte            4     3 (average)
  7891                           ;	Chosen strategy is simple_byte
  7892  0017DA  5008               	movf	??_startTimer+1,w,c
  7893  0017DC  0A00               	xorlw	0	; case 0
  7894  0017DE  A4D8               	btfss	status,2,c
  7895  0017E0  0012               	return	
  7896                           
  7897                           ; Switch size 1, requested type "space"
  7898                           ; Number of cases is 3, Range of values is 0 to 3
  7899                           ; switch strategies available:
  7900                           ; Name         Instructions Cycles
  7901                           ; simple_byte           10     6 (average)
  7902                           ;	Chosen strategy is simple_byte
  7903  0017E2  5007               	movf	??_startTimer,w,c
  7904  0017E4  0A00               	xorlw	0	; case 0
  7905  0017E6  B4D8               	btfsc	status,2,c
  7906  0017E8  D7E2               	goto	i2l365
  7907  0017EA  0A01               	xorlw	1	; case 1
  7908  0017EC  B4D8               	btfsc	status,2,c
  7909  0017EE  D7E5               	goto	i2l367
  7910  0017F0  0A02               	xorlw	2	; case 3
  7911  0017F2  A4D8               	btfss	status,2,c
  7912  0017F4  0012               	return	
  7913  0017F6  D7E7               	goto	i2l368
  7914  0017F8                     __end_of_startTimer:
  7915                           	opt stack 0
  7916                           pclatu	equ	0xFFB
  7917                           pclath	equ	0xFFA
  7918                           tblptru	equ	0xFF8
  7919                           tblptrh	equ	0xFF7
  7920                           tblptrl	equ	0xFF6
  7921                           tablat	equ	0xFF5
  7922                           prodh	equ	0xFF4
  7923                           prodl	equ	0xFF3
  7924                           intcon	equ	0xFF2
  7925                           intcon3	equ	0xFF0
  7926                           postinc0	equ	0xFEE
  7927                           fsr0h	equ	0xFEA
  7928                           fsr0l	equ	0xFE9
  7929                           wreg	equ	0xFE8
  7930                           postdec1	equ	0xFE5
  7931                           fsr1h	equ	0xFE2
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940 ;; *************** function _digitalRead *****************
  7941 ;; Defined at:
  7942 ;;		line 43 in file "iopin.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  port            2    0[COMRAM] int 
  7945 ;;  pin             2    2[COMRAM] int 
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;		None
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  2    0[COMRAM] int 
  7950 ;; Registers used:
  7951 ;;		wreg, status,2, status,0
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;Total ram usage:        6 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; This function calls:
  7964 ;;		Nothing
  7965 ;; This function is called by:
  7966 ;;		_servoInterruptService
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           	psect	text44
  7971  001174                     __ptext44:
  7972                           	opt stack 0
  7973  001174                     _digitalRead:
  7974                           	opt stack 21
  7975                           
  7976                           ;iopin.c: 44: switch(port){
  7977                           
  7978                           ;incstack = 0
  7979  001174  D040               	goto	i2l3149
  7980  001176                     i2l3131:
  7981  001176  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7982  00117A  CF80 F006          	movff	3968,??_digitalRead+1	;volatile
  7983  00117E  2A05               	incf	??_digitalRead,f,c
  7984  001180  D002               	goto	i2u255_44
  7985  001182                     i2u255_45:
  7986  001182  90D8               	bcf	status,0,c
  7987  001184  3206               	rrcf	??_digitalRead+1,f,c
  7988  001186                     i2u255_44:
  7989  001186  2E05               	decfsz	??_digitalRead,f,c
  7990  001188  D7FC               	goto	i2u255_45
  7991  00118A  0E01               	movlw	1
  7992  00118C  1606               	andwf	??_digitalRead+1,f,c
  7993  00118E  5006               	movf	??_digitalRead+1,w,c
  7994  001190  6E01               	movwf	?_digitalRead,c
  7995  001192  6A02               	clrf	?_digitalRead+1,c
  7996  001194  0012               	return	
  7997  001196                     i2l3135:
  7998  001196  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7999  00119A  CF81 F006          	movff	3969,??_digitalRead+1	;volatile
  8000  00119E  2A05               	incf	??_digitalRead,f,c
  8001  0011A0  D002               	goto	i2u256_44
  8002  0011A2                     i2u256_45:
  8003  0011A2  90D8               	bcf	status,0,c
  8004  0011A4  3206               	rrcf	??_digitalRead+1,f,c
  8005  0011A6                     i2u256_44:
  8006  0011A6  2E05               	decfsz	??_digitalRead,f,c
  8007  0011A8  D7FC               	goto	i2u256_45
  8008  0011AA  0E01               	movlw	1
  8009  0011AC  1606               	andwf	??_digitalRead+1,f,c
  8010  0011AE  5006               	movf	??_digitalRead+1,w,c
  8011  0011B0  6E01               	movwf	?_digitalRead,c
  8012  0011B2  6A02               	clrf	?_digitalRead+1,c
  8013  0011B4  0012               	return	
  8014  0011B6                     i2l3139:
  8015  0011B6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8016  0011BA  CF82 F006          	movff	3970,??_digitalRead+1	;volatile
  8017  0011BE  2A05               	incf	??_digitalRead,f,c
  8018  0011C0  D002               	goto	i2u257_44
  8019  0011C2                     i2u257_45:
  8020  0011C2  90D8               	bcf	status,0,c
  8021  0011C4  3206               	rrcf	??_digitalRead+1,f,c
  8022  0011C6                     i2u257_44:
  8023  0011C6  2E05               	decfsz	??_digitalRead,f,c
  8024  0011C8  D7FC               	goto	i2u257_45
  8025  0011CA  0E01               	movlw	1
  8026  0011CC  1606               	andwf	??_digitalRead+1,f,c
  8027  0011CE  5006               	movf	??_digitalRead+1,w,c
  8028  0011D0  6E01               	movwf	?_digitalRead,c
  8029  0011D2  6A02               	clrf	?_digitalRead+1,c
  8030  0011D4  0012               	return	
  8031  0011D6                     i2l3143:
  8032  0011D6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8033  0011DA  CF83 F006          	movff	3971,??_digitalRead+1	;volatile
  8034  0011DE  2A05               	incf	??_digitalRead,f,c
  8035  0011E0  D002               	goto	i2u258_44
  8036  0011E2                     i2u258_45:
  8037  0011E2  90D8               	bcf	status,0,c
  8038  0011E4  3206               	rrcf	??_digitalRead+1,f,c
  8039  0011E6                     i2u258_44:
  8040  0011E6  2E05               	decfsz	??_digitalRead,f,c
  8041  0011E8  D7FC               	goto	i2u258_45
  8042  0011EA  0E01               	movlw	1
  8043  0011EC  1606               	andwf	??_digitalRead+1,f,c
  8044  0011EE  5006               	movf	??_digitalRead+1,w,c
  8045  0011F0  6E01               	movwf	?_digitalRead,c
  8046  0011F2  6A02               	clrf	?_digitalRead+1,c
  8047  0011F4  0012               	return	
  8048  0011F6                     i2l3149:
  8049  0011F6  C001  F005         	movff	digitalRead@port,??_digitalRead
  8050  0011FA  C002  F006         	movff	digitalRead@port+1,??_digitalRead+1
  8051                           
  8052                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8053                           ; Switch size 1, requested type "space"
  8054                           ; Number of cases is 1, Range of values is 0 to 0
  8055                           ; switch strategies available:
  8056                           ; Name         Instructions Cycles
  8057                           ; simple_byte            4     3 (average)
  8058                           ;	Chosen strategy is simple_byte
  8059  0011FE  5006               	movf	??_digitalRead+1,w,c
  8060  001200  0A00               	xorlw	0	; case 0
  8061  001202  A4D8               	btfss	status,2,c
  8062  001204  D00D               	goto	i2l260
  8063                           
  8064                           ; Switch size 1, requested type "space"
  8065                           ; Number of cases is 4, Range of values is 0 to 3
  8066                           ; switch strategies available:
  8067                           ; Name         Instructions Cycles
  8068                           ; simple_byte           13     7 (average)
  8069                           ;	Chosen strategy is simple_byte
  8070  001206  5005               	movf	??_digitalRead,w,c
  8071  001208  0A00               	xorlw	0	; case 0
  8072  00120A  B4D8               	btfsc	status,2,c
  8073  00120C  D7B4               	goto	i2l3131
  8074  00120E  0A01               	xorlw	1	; case 1
  8075  001210  B4D8               	btfsc	status,2,c
  8076  001212  D7C1               	goto	i2l3135
  8077  001214  0A03               	xorlw	3	; case 2
  8078  001216  B4D8               	btfsc	status,2,c
  8079  001218  D7CE               	goto	i2l3139
  8080  00121A  0A01               	xorlw	1	; case 3
  8081  00121C  B4D8               	btfsc	status,2,c
  8082  00121E  D7DB               	goto	i2l3143
  8083  001220                     i2l260:
  8084                           
  8085                           ;iopin.c: 50: return -1;
  8086  001220  6801               	setf	?_digitalRead,c
  8087  001222  6802               	setf	?_digitalRead+1,c
  8088  001224  0012               	return		;funcret
  8089  001226                     __end_of_digitalRead:
  8090                           	opt stack 0
  8091                           pclatu	equ	0xFFB
  8092                           pclath	equ	0xFFA
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           prodh	equ	0xFF4
  8098                           prodl	equ	0xFF3
  8099                           intcon	equ	0xFF2
  8100                           intcon3	equ	0xFF0
  8101                           postinc0	equ	0xFEE
  8102                           fsr0h	equ	0xFEA
  8103                           fsr0l	equ	0xFE9
  8104                           wreg	equ	0xFE8
  8105                           postdec1	equ	0xFE5
  8106                           fsr1h	equ	0xFE2
  8107                           fsr1l	equ	0xFE1
  8108                           indf2	equ	0xFDF
  8109                           postinc2	equ	0xFDE
  8110                           postdec2	equ	0xFDD
  8111                           fsr2h	equ	0xFDA
  8112                           fsr2l	equ	0xFD9
  8113                           status	equ	0xFD8
  8114                           pclatu	equ	0xFFB
  8115                           pclath	equ	0xFFA
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           intcon	equ	0xFF2
  8123                           intcon3	equ	0xFF0
  8124                           postinc0	equ	0xFEE
  8125                           fsr0h	equ	0xFEA
  8126                           fsr0l	equ	0xFE9
  8127                           wreg	equ	0xFE8
  8128                           postdec1	equ	0xFE5
  8129                           fsr1h	equ	0xFE2
  8130                           fsr1l	equ	0xFE1
  8131                           indf2	equ	0xFDF
  8132                           postinc2	equ	0xFDE
  8133                           postdec2	equ	0xFDD
  8134                           fsr2h	equ	0xFDA
  8135                           fsr2l	equ	0xFD9
  8136                           status	equ	0xFD8
  8137                           
  8138                           	psect	rparam
  8139  0000                     pclatu	equ	0xFFB
  8140                           pclath	equ	0xFFA
  8141                           tblptru	equ	0xFF8
  8142                           tblptrh	equ	0xFF7
  8143                           tblptrl	equ	0xFF6
  8144                           tablat	equ	0xFF5
  8145                           prodh	equ	0xFF4
  8146                           prodl	equ	0xFF3
  8147                           intcon	equ	0xFF2
  8148                           intcon3	equ	0xFF0
  8149                           postinc0	equ	0xFEE
  8150                           fsr0h	equ	0xFEA
  8151                           fsr0l	equ	0xFE9
  8152                           wreg	equ	0xFE8
  8153                           postdec1	equ	0xFE5
  8154                           fsr1h	equ	0xFE2
  8155                           fsr1l	equ	0xFE1
  8156                           indf2	equ	0xFDF
  8157                           postinc2	equ	0xFDE
  8158                           postdec2	equ	0xFDD
  8159                           fsr2h	equ	0xFDA
  8160                           fsr2l	equ	0xFD9
  8161                           status	equ	0xFD8
  8162                           
  8163                           	psect	temp
  8164  00007E                     btemp:
  8165                           	opt stack 0
  8166  00007E                     	ds	1
  8167  0000                     int$flags	set	btemp
  8168                           pclatu	equ	0xFFB
  8169                           pclath	equ	0xFFA
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           intcon	equ	0xFF2
  8177                           intcon3	equ	0xFF0
  8178                           postinc0	equ	0xFEE
  8179                           fsr0h	equ	0xFEA
  8180                           fsr0l	equ	0xFE9
  8181                           wreg	equ	0xFE8
  8182                           postdec1	equ	0xFE5
  8183                           fsr1h	equ	0xFE2
  8184                           fsr1l	equ	0xFE1
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8


Data Sizes:
    Strings     267
    Constant    96
    Data        8
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     43      75
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_17(CODE[17]), STR_16(CODE[18]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[18]), 
		 -> STR_5(CODE[4]), STR_4(CODE[9]), STR_3(CODE[8]), STR_2(CODE[9]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->_setAngle
    _sortBatteryInterruptService->i2_printf
    _setAngle->_angleToPulse
    i2_printf->i2___llmod
    i2_lcdNewline->i2_lcdInst
    i2___llmod->i2___lldiv
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_showInterface
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___llmod
    _lcdNewline->_lcdInst
    ___llmod->___lldiv
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23539
                       _digitalWrite
                            _initLCD
                            _initRTC
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0   18886
                                             42 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0    3092
                                             41 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              28    22      6    2935
                                             22 BANK0     19    13      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     287
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0     696
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     696
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (6) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _digitalWrite                                         9     3      6     752
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0   19985
                                            102 COMRAM    15    15      0
              _servoInterruptService
                           _setAngle
        _sortBatteryInterruptService
 ---------------------------------------------------------------------------------
 (9) _sortBatteryInterruptService                          0     0      0    1730
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _setAngle                                            10     6      4   16412
                                             92 COMRAM    10     6      4
                       _angleToPulse
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           28    22      6    1595
                                             22 COMRAM    19    13      6
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2___llmod                                           9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lldiv                                          13     5      8     266
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2_lcdClear                                          0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (13) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) _angleToPulse                                       23    19      4   14104
                                             69 COMRAM    23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     316
                                             54 COMRAM    15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            15     9      6    2665
                                             27 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftdiv                                            15     9      6    2747
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            12     6      6    3409
                                             42 COMRAM    12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___awtoft                                            4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4    2503
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1776
                                              9 COMRAM    12    12      0
                        _digitalRead
                         _startTimer
                     i2_digitalWrite
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) _startTimer                                          8     2      6     666
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) _digitalRead                                         6     2      4     238
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initRTC
     _I2C_Master_Init
       ___lldiv
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble

 _service (ROOT)
   _servoInterruptService
     _digitalRead
     _startTimer
     i2_digitalWrite
   _setAngle
     _angleToPulse
       ___altoft
         ___ftpack
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble
   _sortBatteryInterruptService
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2B      4B       5       58.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C8      34        0.0%
DATA                 0      0      C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 12 19:11:05 2017

                        ___altoft@exp 0011                         ___altoft@sign 0012  
                                  l76 17AA                           __CFG_BORV$3 000000  
                        __CFG_CP0$OFF 000000                          __CFG_CP1$OFF 000000  
                        __CFG_CP2$OFF 000000                          __CFG_CP3$OFF 000000  
                         __CFG_OSC$HS 000000                          ___ftadd@exp1 0036  
                        ___ftadd@exp2 0035                          ___ftadd@sign 0034  
                                 l159 199A                                   l193 1932  
                                 l196 1940                                   l571 0116  
                                 l567 00A8                       ??_showInterface 00AA  
                                 l947 1162                                   l957 14B0  
                        __CFG_CPB$OFF 000000                                   _PEN 007E2A  
                        __CFG_CPD$OFF 000000                                   _SEN 007E28  
                                 _pin 00BB                                   wreg 000FE8  
                          i2_lcdClear 1AFA                          __CFG_LVP$OFF 000000  
                        ___ftdiv@cntr 0016                          ___ftdiv@sign 001B  
                        __CFG_WDT$OFF 000000                                  l3411 0C06  
                                l3403 0BEC                                  l3413 0C12  
                                l3431 102C                                  l2711 0042  
                                l2703 0020                                  l3407 0BFC  
                                l3433 1034                                  l2713 0048  
                                l2721 006A                                  l3361 0B36  
                                l3443 1064                                  l3427 1018  
                                l3451 1088                                  l2707 0034  
                                l3355 0B24                                  l3445 106C  
                                l3437 1048                                  l2717 0060  
                                l2709 003C                                  l3373 0B6A  
                                l3357 0B28                                  l3439 1050  
                                l2743 0138                                  l3391 0BB6  
                                l3359 0B32                                  l3449 1080  
                                l2665 10E6                                  l2761 01AE  
                                l2729 00D0                                  l3385 0BA4  
                                l3369 0B5C                                  l2667 10F6  
                                l2763 01B4                                  l2747 0162  
                                l2677 1150                                  l2669 10FC  
                                l2693 149E                                  l2685 1444  
                                l2749 0168                                  l3389 0BAE  
                                l2687 1454                                  l2783 0220  
                                l3399 0BDC                                  l2689 145A  
                                l2785 0230                                  l2793 032A  
                                l2777 01FA                                  l2787 02B4  
                                l2795 033C                                  l2779 020C  
                                l2797 0344                                  l2799 035A  
                                _EEIF 007D0C                                  STR_1 FFE9  
                                STR_2 FFE0                                  STR_3 FFF2  
                                STR_4 FFD7                                  STR_5 FFFA  
                                STR_6 FF18                                  STR_7 FFC6  
                                STR_8 FF06                                  STR_9 FF93  
                                u3004 0FF6                                  u3005 0FEE  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  _LATD 000F8C  
                                _LATE 000F8D                                  u3307 1964  
                                u3317 197A                                  u3327 1564  
                                u3337 1572                                  u3347 15A2  
                                u3357 15B0                                  u3277 199E  
                                u3287 1800                                  u3297 1836  
                                u2595 1730                                  _PEIE 007F96  
                                _RCEN 007E2B                                  _RSEN 007E29  
                                _main 1760                          ___ftpack@arg 0001  
                                _keys FEDB                          ___ftpack@exp 0004  
                                _port 0076                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 007E                                  prodh 000FF4  
                                prodl 000FF3                                  start 000E  
                       __CFG_IESO$OFF 000000                       __end_ofi2_putch 1A8E  
                       __CFG_MCLRE$ON 000000                          ___ftmul@cntr 0029  
                        ___param_bank 000000                          ___ftmul@sign 002A  
                         i2_lcdNibble 169A                          ___fttol@exp1 0045  
                        ___fttol@lval 0041                      ?_I2C_Master_Init 008D  
                __end_of_angleToPulse 0B24                                 ?_main 0001  
                               _ACKEN 007E2C                                 _ACKDT 007E2D  
                               _EEADR 000FA9                       __end_of___ftadd 09E4  
                               STR_10 FF2A                                 STR_11 FF82  
                               STR_12 FEF3                                 STR_13 FFA4  
                               STR_14 FF3C                                 STR_15 FF71  
                               STR_16 FF4E                                 STR_17 FFB5  
                               STR_18 FF60                       __end_of___ftdiv 0EF6  
             ??_servoInterruptService 000A                       __end_of___lldiv 1174  
                     __end_of___ftmul 0E10                                 _T0CON 000FD5  
                               _T1CON 000FCD                       __end_of___llmod 14C2  
                     __end_of___fttol 0D1C                                 _T3CON 000FB1  
                               i2l133 0F9C                                 i2l260 1220  
                               i2l159 1A7C                                 i2l365 17AE  
                               i2l367 17BA                                 i2l368 17C6  
                               i2l571 0456                                 i2l492 07EE  
                               i2l494 07F2                                 i2l822 12B4  
                               i2l495 07F6                                 i2l567 03F6  
                               i2l496 07FA                                 i2l497 0836  
                               i2l860 0956                                 i2l845 087C  
                               i2l880 0EC4                                 i2l849 08A6  
                               i2l947 1532                                 i2l869 0972  
                               i2l957 1688                                 _TMR0H 000FD7  
                               _TMR1H 000FCF                                 _TMR0L 000FD6  
                               _TMR3H 000FB3                                 _TMR1L 000FCE  
                               _TMR3L 000FB2                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _PORTD 000F83                                 _TRISA 000F92  
                               _TRISB 000F93                                 _TRISC 000F94  
                               _TRISD 000F95                                 _TRISE 000F96  
                       __CFG_PWRT$OFF 000000                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                       __CFG_WRT3$OFF 000000                       __end_of_lcdInst 1986  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
              servoInterruptService@i 0014                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
               __size_ofi2_lcdNewline 0008                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                         __CFG_WRTD$OFF 000000  
                     __end_of_initLCD 1842                        __CFG_EBTRB$OFF 000000  
                       ___awtoft@sign 000C                       __end_of_initRTC 1AC8  
                     __end_of_dpowers FEBB                         ___ftpack@sign 0005  
                               _pulse 00AB                                 _putch 1986  
                               pclath 000FFA                                 tablat 000FF5  
                     __end_of_service 0FD8                       __end_of_runMenu 1932  
                     __end_of_runTime 19D4                                 status 000FD8  
                      __CFG_PBADEN$ON 000000                    __size_ofi2___lldiv 0082  
                  __size_ofi2___llmod 0066                      __end_ofi2_printf 0664  
                __end_of_digitalWrite 10B8                       __initialization 1842  
                   i2___lldiv@divisor 0005                    __size_ofi2_lcdInst 0022  
                        __end_of_main 17AC                     i2___lldiv@counter 000D  
                        __end_of_keys FEEC                            i2printf@ap 0022  
                        i2_lcdNewline 1AF2                                ??_main 00AB  
                       ___fttol@sign1 0040                         __activetblptr 000002  
                __size_of_digitalRead 00B2                           ?i2_lcdClear 0001  
                              _ADCON0 000FC2                                _ADCON1 000FC1  
                              _ADCON2 000FC0                      __end_of___altoft 1634  
                    ___llmod@dividend 008D                                _ADRESH 000FC4  
                              _EEADRH 000FAA                                _ADRESL 000FC3  
                              _EEDATA 000FA8                                _EECON1 000FA6  
                              _EECON2 000FA7                       i2lcdNibble@data 0002  
                    __end_of___awtoft 1900                                ?_putch 0001  
                    __end_of___ftpack 12D4                       i2lcdNibble@temp 0001  
                              _INT0IE 007F94                                _INT0IF 007F91  
                              _INT1IE 007F83                                _INT1IF 007F80  
                              i2l3021 0CCA                                i2l3031 0CF4  
                              i2l3201 1326                                i2l3017 0CBA  
                              i2l3131 1176                                i2l3203 132C  
                              i2l3035 0D0A                                i2l3027 0CE2  
                              i2l3213 134E                                i2l3029 0CEE  
                              i2l3053 14E4                                i2l3143 11D6  
                              i2l3135 1196                                i2l3207 133A  
                              i2l3215 1354                                i2l3055 14F0  
                              i2l3303 0536                                i2l3231 039C  
                              i2l3223 0382                                i2l3209 1340  
                              i2l3065 1524                                i2l3057 14F4  
                              i2l3081 167A                                i2l3073 1646  
                              i2l3305 0542                                i2l3313 0624  
                              i2l3233 03A0                                i2l3241 03BC  
                              i2l3139 11B6                                i2l3163 17D2  
                              i2l3075 1652                                i2l3307 05BA  
                              i2l3315 0634                                i2l3227 0392  
                              i2l3149 11F6                                u205_41 0848  
                              i2l3077 1656                                i2l3317 063A  
                              i2l3237 03B4                                i2l3229 0398  
                              i2l3191 1304                                i2l2631 1244  
                              i2l3263 0476                                i2l3319 064A  
                              i2l2641 12A0                                i2l2633 124E  
                              i2l3281 04D8                                i2l3249 041A  
                              i2l3195 1312                                i2l2643 12AA  
                              i2l2635 126C                                i2l2627 1236  
                              i2l2811 15EA                                i2l3283 04DC  
                              i2l3267 049C                                i2l3197 1318  
                              u206_41 085C                                i2l3269 04A0  
                              i2l3471 0770                                i2l3463 06B8  
                              i2l2639 1282                                i2l2831 08B4  
                              i2l2809 15DE                                i2l2825 088A  
                              i2l3297 0514                                i2l3553 0F80  
                              i2l3475 07FE                                i2l3299 0524  
                              i2l3539 0F3E                                i2l3477 0828  
                              i2l2853 0906                                u231_41 0D2C  
                              i2l3549 0F66                                i2l2855 0910  
                              i2l2847 08E4                                i2l2919 0E9E  
                              i2l2873 098E                                i2l2865 0944  
                              i2l2857 091A                                i2l2945 0D6C  
                              i2l2883 09BE                                i2l2867 094E  
                              i2l2859 0922                                i2l2963 0DAE  
                              i2l2939 0D44                                i2l2893 0E38  
                              i2l2973 0DD6                                i2l2959 0D9E  
                              i2l2969 0DC6                                i2l2899 0E60  
                              i2l2989 18DC                                u233_41 0D54  
                              i2l2999 0C54                                u226_41 0E20  
                              u228_41 0E48                                u238_41 0C38  
                              _TMR0IE 007F95                                _TMR0IF 007F92  
                           ??i2_putch 0005                                _TMR1IE 007CE8  
                              _TMR1IF 007CF0                                _TMR2IF 007CF1  
                              _TMR3IE 007D01                                _TMR3IF 007D09  
                              _SSPADD 000FC8                                _TRISC3 007CA3  
                              _TRISC4 007CA4                                _SSPBUF 000FC9  
                    __end_of_dateTime 1A6C                      __end_of_lcdClear 1AF2  
                   _angleToPulse$1199 0056                        __CFG_XINST$OFF 000000  
                    __end_of_mainMenu 1A46                             ??___ftadd 0031  
                      __CFG_STVREN$ON 000000                             ??___ftdiv 0013  
                           ??___lldiv 0088                             ??___ftmul 0022  
                           ??___llmod 0095                             ??___fttol 003B  
                              clear_0 1868                                clear_1 1874  
                           ??_lcdInst 0082                                _printf 0012  
                    __end_of_pinSetup 18C8                      __end_of_setAngle 1428  
               ___ftmul@f3_as_product 0026                             ??_initLCD 0084  
                           ??_initRTC 0095                     __end_ofi2___lldiv 1544  
                       setAngle@angle 005F                     __end_ofi2___llmod 169A  
                        __mediumconst FE92                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                       setAngle@timer 005D                             ??_service 0067  
                           ??_runMenu 00A9                      __end_of_runStats 19FA  
                           ??_runTime 00A9                     __end_ofi2_lcdInst 1AB0  
                          __accesstop 0080               __end_of__initialization 187A  
                          ___altoft@c 0009                            ___ftadd@f1 002B  
                          ___ftadd@f2 002E                         ___rparam_used 000001  
                          ___ftdiv@f1 000D                            ___ftdiv@f2 0010  
                          ___ftdiv@f3 0017                            ___awtoft@c 0009  
                   i2___llmod@divisor 0012                     i2___llmod@counter 0016  
                          ___ftmul@f1 001C                            ___ftmul@f2 001F  
                          ___fttol@f1 0037                  __end_of_happynewyear FEF3  
                      __pcstackCOMRAM 0001                    i2___lldiv@dividend 0001  
               __size_of_angleToPulse 0140                   __size_ofi2_lcdClear 0008  
                        __pidataBANK0 1ADA                         __end_of_putch 19AE  
                         i2printf@idx 001F                           i2printf@val 0024  
                  __size_of_lcdNibble 0078                           i2putch@data 0005  
                           ?i2_printf 0017                    i2digitalWrite@port 0001  
                             ??_putch 0084                    i2___lldiv@quotient 0009  
                          __pbssBANK0 00AB                          _angleToPulse 09E4  
               __size_of_digitalWrite 00E0                          ?i2_lcdNibble 0001  
                           ?___altoft 0009                            _lcdNewline 1AE2  
                           ?___awtoft 0009                             ?___ftpack 0001  
                             ?_printf 0096            servoInterruptService@flags 000C  
      __size_of_servoInterruptService 01D4         __end_of_servoInterruptService 0838  
               __end_of_showInterface 0C28                             ?_dateTime 0001  
                           ?_lcdClear 0001                    __size_of_runSelect 0026  
                    angleToPulse@a000 0059                            ??i2_printf 001D  
                    angleToPulse@a180 0052                          _digitalWrite 0FD8  
                             _SSPCON1 000FC6                               _SSPCON2 000FC5  
                             _SSPSTAT 000FC7                             ?_mainMenu 0001  
             __size_ofi2_digitalWrite 00AC                               i2_putch 1A6C  
                           ?_pinSetup 0001                             ?_setAngle 005D  
                   __end_of_lcdNibble 15BC                               __Hparam 0000  
                             __Lparam 0000                               ___ftadd 0838  
                          _readKeypad 1932                               ___ftdiv 0E10  
                             ___lldiv 10B8                               ___ftmul 0D1C  
                             ___llmod 1428                               ___fttol 0C28  
                           ?_runStats 0001                            ??___altoft 000D  
                             __pcinit 1842                            ??___awtoft 000C  
                          ??___ftpack 0006                               __ramtop 1000  
                             _lcdInst 195C                               __ptext0 1760  
                             __ptext1 0B24                               __ptext2 19AE  
                             __ptext3 19D4                               __ptext4 19FA  
                             __ptext5 1900                               __ptext6 1932  
                             __ptext7 1A20                               __ptext8 1A46  
                             __ptext9 0012                       __size_of_printf 0366  
                       startTimer@val 0003                               _initLCD 17F8  
                   __end_of_hexpowers FEDB                               _initRTC 1AB0  
                             _dpowers FE93                            ??_dateTime 00A9  
                        ??i2_lcdClear 0005              __size_of_I2C_Master_Init 0060  
                          ??_lcdClear 0084                               _service 0008  
                             _runMenu 1900                               _runTime 19AE  
                      __pintcode_body 0EF6                  end_of_initialization 187A  
                          ??_mainMenu 00A9                         __Lmediumconst FE92  
                             int_func 0EF6                        digitalRead@pin 0003  
                          ??_pinSetup 0080                            ??_setAngle 0061  
                     ___lldiv@divisor 0084                       ___lldiv@counter 008C  
                   __end_of_runSelect 1A20                               printf@c 00A8  
                             printf@f 0096                      I2C_Master_Init@c 008D  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                  __end_ofi2_lcdClear 1B02                            ??_runStats 00A9  
                       ??_digitalRead 0005                           ?_lcdNewline 0001  
                           _PORTBbits 000F81                      showInterface@key 00AA  
                        _happynewyear FEEC                    angleToPulse@offset 004E  
                           i2___lldiv 14C2                             i2___llmod 1634  
                          _startTimer 17AC          ?_sortBatteryInterruptService 0001  
                           i2_lcdInst 1A8E                           ___ftdiv@exp 001A  
                  i2___llmod@dividend 000E                           ___ftmul@exp 0025  
                         ?_readKeypad 0001                  __size_ofi2_lcdNibble 0066  
                       i2lcdInst@data 0004                        __end_of_printf 0378  
                        i2printf@flag 0028                          i2printf@prec 0020  
                 start_initialization 1842                   __end_of_digitalRead 1226  
                           i2printf@c 0029                             i2printf@f 0017  
                          ?i2___lldiv 0001                            ?i2___llmod 000E  
                   __size_ofi2_printf 02EC                        i2_digitalWrite 12D4  
                   ??_I2C_Master_Init 0091                            ?i2_lcdInst 0001  
                 __size_of_lcdNewline 0008         ??_sortBatteryInterruptService 002A  
                     ___llmod@divisor 0091                       ___llmod@counter 0095  
                         __pdataBANK0 00C3                      __CFG_LPT1OSC$OFF 000000  
                            ??_printf 009C                     __size_of___altoft 0078  
                   __size_of___awtoft 0038                     __size_of___ftpack 00AE  
                         __pbssCOMRAM 0076                         __pcstackBANK0 0080  
              __end_ofi2_digitalWrite 1380                     __size_of_dateTime 0026  
                         ?_startTimer 0001                     __size_of_lcdClear 0008  
                 __size_of_readKeypad 002A                              ?i2_putch 0001  
                   __size_of_mainMenu 0026                     i2digitalWrite@pin 0003  
                   i2digitalWrite@val 0005                     __CFG_CCP2MX$PORTC 000000  
                   __size_of_pinSetup 0040                     __size_of_setAngle 00A8  
                           __pintcode 0008                         __pmediumconst FE92  
                           _lcdNibble 1544                              ?___ftadd 002B  
                            ?___ftdiv 000D                              ?___lldiv 0080  
                            ?___ftmul 001C                              ?___llmod 008D  
                            ?___fttol 0037  __size_of_sortBatteryInterruptService 0012  
                       ?i2_lcdNewline 0001                           _digitalRead 1174  
                            ?_lcdInst 0001                     __size_of_runStats 0026  
                            ?_initLCD 0001                              ?_initRTC 0001  
                     startTimer@timer 0001                              ?_service 0001  
                           _hexpowers FEBB                              ?_runMenu 0001  
                            ?_runTime 0001                       ?i2_digitalWrite 0001  
               _servoInterruptService 0664                           ??i2___lldiv 0009  
                         ??i2___llmod 0016                        __size_of_putch 0028  
                         ??i2_lcdInst 0003                              _LATDbits 000F8C  
                            i2u310_40 0688                              i2u311_40 068A  
                            i2u312_40 0696                              i2u240_40 0C72  
                            i2u240_45 0C6A                              i2u313_40 0698  
                            i2u314_40 06B6                              i2u306_40 066C  
                            i2u307_40 066E                              i2u308_40 067A  
                            i2u260_44 12EA                              i2u260_45 12E4  
                            i2u340_47 16C0                              i2u309_40 067C  
                            i2u341_47 16E6                              i2u342_47 16F4  
                            i2u255_44 1186                              i2u255_45 1182  
                            i2u256_44 11A6                              i2u256_45 11A2  
                            i2u336_47 1A80                              i2u257_44 11C6  
                            i2u257_45 11C2                              i2u337_47 1A94  
                            i2u258_44 11E6                              i2u258_45 11E2  
                            i2u338_47 1AA6                              i2u339_47 16B2  
              __size_of_showInterface 0104                      __CFG_WDTPS$32768 000000  
                          ?_lcdNibble 0001                        ??i2_lcdNewline 0005  
                          service@key 0075                          ??_lcdNewline 0084  
                 __size_of_startTimer 004C                             _runSelect 19FA  
                   angleToPulse@angle 0046                         lcdNibble@data 0081  
                          printf@flag 00A7                         lcdNibble@temp 0080  
                          printf@prec 009F                            runMenu@key 00A9  
                            i2_printf 0378                             copy_data0 1856  
                    __size_ofi2_putch 0022                    __end_of_lcdNewline 1AEA  
                       readKeypad@key 0080                              __Hrparam 0000  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
                        ??_readKeypad 0080                      __size_of___ftadd 01AC  
                    __size_of___ftdiv 00E6                      __size_of___lldiv 00BC  
                            ___altoft 15BC                      __size_of___ftmul 00F4  
                    __size_of___llmod 009A                      __size_of___fttol 00F4  
                          ?_runSelect 0001                              ___awtoft 18C8  
                            ___ftpack 1226                      __size_of_lcdInst 002A  
                            _binAngle 00C3                       _I2C_Master_Init 1700  
                    __size_of_initLCD 004A                      __size_of_initRTC 0018  
                            _dateTime 1A46                ?_servoInterruptService 0001  
                       _showInterface 0B24                              _lcdClear 1AEA  
                            __ptext10 1986                              __ptext11 1AE2  
                            __ptext20 1544                              __ptext12 1428  
                            __ptext21 0FD8                              __ptext13 1AEA  
                            __ptext30 1AFA                              __ptext14 1888  
                            __ptext31 1A8E                              __ptext23 1AC8  
                            __ptext15 1AB0                              __ptext40 1226  
                            __ptext32 169A                              __ptext24 1380  
                            __ptext16 1700                              __ptext41 0664  
                            __ptext33 09E4                              __ptext25 0378  
                            __ptext17 10B8                              __ptext42 12D4  
                            __ptext34 0C28                              __ptext26 1A6C  
                            __ptext18 17F8                              __ptext43 17AC  
                            __ptext35 0D1C                              __ptext27 1AF2  
                            __ptext19 195C                              __ptext44 1174  
                            __ptext36 0E10                              __ptext28 1634  
                            __ptext37 0838                              __ptext29 14C2  
                            __ptext38 18C8                              __ptext39 15BC  
                    __size_of_service 0FD0                      __size_of_runMenu 0032  
                    __size_of_runTime 0026                              _mainMenu 1A20  
                  __end_of_readKeypad 195C                         ?_angleToPulse 0046  
                       __size_of_main 004C                              _pinSetup 1888  
                            _setAngle 1380                         ??i2_lcdNibble 0001  
                         ??_lcdNibble 0080                              int$flags 007E  
                            _runStats 19D4                             printf@idx 009E  
                           printf@val 00A3                             putch@data 0084  
                          _INTCONbits 000FF2                        ?_showInterface 0001  
                       ?_digitalWrite 0080                          ??_startTimer 0007  
                     digitalRead@port 0001                              intlevel2 0000  
                      ??_angleToPulse 004A                  __end_ofi2_lcdNewline 1AFA  
                    ___lldiv@dividend 0080                              printf@ap 00A1  
             __end_of_I2C_Master_Init 1760                           lcdInst@data 0083  
                        ?_digitalRead 0001                           ??_runSelect 00A9  
                  __end_of_startTimer 17F8                   __end_ofi2_lcdNibble 1700  
                    ??i2_digitalWrite 0007                      digitalWrite@port 0080  
                    ___lldiv@quotient 0088                        ??_digitalWrite 0086  
 __end_of_sortBatteryInterruptService 1ADA           _sortBatteryInterruptService 1AC8  
                     digitalWrite@pin 0082                       digitalWrite@val 0084  
