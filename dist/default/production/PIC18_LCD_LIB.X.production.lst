

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 26 21:57:52 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           ; Version 1.40
    31                           ; Generated 01/12/2016 GMT
    32                           ; 
    33                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4620 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	smallconst
    66  001000                     __psmallconst:
    67                           	opt stack 0
    68  001000  00                 	db	0
    69  001001  31                 	db	49
    70  001002  32                 	db	50
    71  001003  33                 	db	51
    72  001004  41                 	db	65
    73  001005  34                 	db	52
    74  001006  35                 	db	53
    75  001007  36                 	db	54
    76  001008  42                 	db	66
    77  001009  37                 	db	55
    78  00100A  38                 	db	56
    79  00100B  39                 	db	57
    80  00100C  43                 	db	67
    81  00100D  2A                 	db	42
    82  00100E  30                 	db	48
    83  00100F  23                 	db	35
    84  001010  44                 	db	68
    85  001011  00                 	db	0
    86  001012                     __end_of_keys:
    87                           	opt stack 0
    88  001012                     _dpowers:
    89                           	opt stack 0
    90  001012  0001               	dw	1
    91  001014  000A               	dw	10
    92  001016  0064               	dw	100
    93  001018  03E8               	dw	1000
    94  00101A  2710               	dw	10000
    95  00101C                     __end_of_dpowers:
    96                           	opt stack 0
    97  00101C                     _hexpowers:
    98                           	opt stack 0
    99  00101C  0001               	dw	1
   100  00101E  0010               	dw	16
   101  001020  0100               	dw	256
   102  001022  1000               	dw	4096
   103  001024                     __end_of_hexpowers:
   104                           	opt stack 0
   105  001024                     testFrequency@F2960:
   106                           	opt stack 0
   107  001024  45                 	db	69
   108  001025  59                 	db	89
   109  001026  23                 	db	35
   110  001027  07                 	db	7
   111  001028  31                 	db	49
   112  001029  12                 	db	18
   113  00102A  16                 	db	22
   114  00102B                     __end_oftestFrequency@F2960:
   115                           	opt stack 0
   116  0000                     _ADCON0	set	4034
   117  0000                     _ADCON1	set	4033
   118  0000                     _ADCON2	set	4032
   119  0000                     _ADRESH	set	4036
   120  0000                     _ADRESL	set	4035
   121  0000                     _EEADR	set	4009
   122  0000                     _EEADRH	set	4010
   123  0000                     _EECON1	set	4006
   124  0000                     _EECON2	set	4007
   125  0000                     _EEDATA	set	4008
   126  0000                     _INTCONbits	set	4082
   127  0000                     _LATA	set	3977
   128  0000                     _LATB	set	3978
   129  0000                     _LATC	set	3979
   130  0000                     _LATD	set	3980
   131  0000                     _LATDbits	set	3980
   132  0000                     _LATE	set	3981
   133  0000                     _PORTA	set	3968
   134  0000                     _PORTB	set	3969
   135  0000                     _PORTBbits	set	3969
   136  0000                     _PORTC	set	3970
   137  0000                     _PORTD	set	3971
   138  0000                     _SSPADD	set	4040
   139  0000                     _SSPBUF	set	4041
   140  0000                     _SSPCON1	set	4038
   141  0000                     _SSPCON2	set	4037
   142  0000                     _SSPSTAT	set	4039
   143  0000                     _T0CON	set	4053
   144  0000                     _TMR0H	set	4055
   145  0000                     _TMR0L	set	4054
   146  0000                     _TRISA	set	3986
   147  0000                     _TRISB	set	3987
   148  0000                     _TRISC	set	3988
   149  0000                     _TRISD	set	3989
   150  0000                     _TRISE	set	3990
   151  0000                     _ACKDT	set	32301
   152  0000                     _ACKEN	set	32300
   153  0000                     _EEIF	set	32012
   154  0000                     _PEIE	set	32662
   155  0000                     _PEN	set	32298
   156  0000                     _RCEN	set	32299
   157  0000                     _RSEN	set	32297
   158  0000                     _SEN	set	32296
   159  0000                     _TMR0IE	set	32661
   160  0000                     _TMR0IF	set	32658
   161  0000                     _TRISC3	set	31907
   162  0000                     _TRISC4	set	31908
   163  00102B                     STR_6:
   164  00102B  30                 	db	48	;'0'
   165  00102C  31                 	db	49	;'1'
   166  00102D  32                 	db	50	;'2'
   167  00102E  33                 	db	51	;'3'
   168  00102F  34                 	db	52	;'4'
   169  001030  35                 	db	53	;'5'
   170  001031  36                 	db	54	;'6'
   171  001032  37                 	db	55	;'7'
   172  001033  38                 	db	56	;'8'
   173  001034  39                 	db	57	;'9'
   174  001035  61                 	db	97	;'a'
   175  001036  62                 	db	98	;'b'
   176  001037  63                 	db	99	;'c'
   177  001038  64                 	db	100	;'d'
   178  001039  65                 	db	101	;'e'
   179  00103A  66                 	db	102	;'f'
   180  00103B  00                 	db	0
   181  00103C  74                 	db	116	;'t'
   182  00103D  31                 	db	49	;'1'
   183  00103E  3A                 	db	58	;':'
   184  00103F  20                 	db	32
   185  001040  25                 	db	37
   186  001041  78                 	db	120	;'x'
   187  001042  20                 	db	32
   188  001043  00                 	db	0
   189  001044  25                 	db	37
   190  001045  78                 	db	120	;'x'
   191  001046  20                 	db	32
   192  001047  25                 	db	37
   193  001048  78                 	db	120	;'x'
   194  001049  0A                 	db	10
   195  00104A  00                 	db	0
   196  00104B                     STR_3:
   197  00104B  25                 	db	37
   198  00104C  64                 	db	100	;'d'
   199  00104D  00                 	db	0
   200  00104E  30                 	db	48	;'0'
   201  00104F  00                 	db	0
   202  001050  31                 	db	49	;'1'
   203  001051  00                 	db	0
   204                           
   205                           ; #config settings
   206  001052  00                 	db	0	; dummy byte at the end
   207  0000                     
   208                           	psect	cinit
   209  00153E                     __pcinit:
   210                           	opt stack 0
   211  00153E                     start_initialization:
   212                           	opt stack 0
   213  00153E                     __initialization:
   214                           	opt stack 0
   215                           
   216                           ; Clear objects allocated to COMRAM (2 bytes)
   217  00153E  6A30               	clrf	(__pbssCOMRAM+1)& (0+255),c
   218  001540  6A2F               	clrf	__pbssCOMRAM& (0+255),c
   219  001542                     end_of_initialization:
   220                           	opt stack 0
   221  001542                     __end_of__initialization:
   222                           	opt stack 0
   223  001542  9031               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   224  001544  9231               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   225  001546  0E00               	movlw	low (__Lmediumconst shr (0+16))
   226  001548  6EF8               	movwf	tblptru,c
   227  00154A  0100               	movlb	0
   228  00154C  EFED  F009         	goto	_main	;jump to C main() function
   229                           tblptru	equ	0xFF8
   230                           
   231                           	psect	bssCOMRAM
   232  00002F                     __pbssCOMRAM:
   233                           	opt stack 0
   234  00002F                     _i:
   235                           	opt stack 0
   236  00002F                     	ds	2
   237                           tblptru	equ	0xFF8
   238                           
   239                           	psect	cstackCOMRAM
   240  000001                     __pcstackCOMRAM:
   241                           	opt stack 0
   242  000001                     ?___lwdiv:
   243                           	opt stack 0
   244  000001                     i2lcdNibble@temp:
   245                           	opt stack 0
   246  000001                     ___lwdiv@dividend:
   247                           	opt stack 0
   248  000001                     i2startT0@time:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x0
   252  000001                     	ds	1
   253  000002                     i2lcdNibble@data:
   254                           	opt stack 0
   255                           
   256                           ; 1 bytes @ 0x1
   257  000002                     	ds	1
   258  000003                     ??i2_lcdInst:
   259  000003                     ___lwdiv@divisor:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x2
   263  000003                     	ds	1
   264  000004                     i2lcdInst@data:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x3
   268  000004                     	ds	1
   269  000005                     putch@data:
   270                           	opt stack 0
   271  000005                     ___lwdiv@quotient:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x4
   275  000005                     	ds	2
   276  000007                     ___lwdiv@counter:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x6
   280  000007                     	ds	1
   281  000008                     ?___lwmod:
   282                           	opt stack 0
   283  000008                     ___lwmod@dividend:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x7
   287  000008                     	ds	2
   288  00000A                     ___lwmod@divisor:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x9
   292  00000A                     	ds	2
   293  00000C                     ___lwmod@counter:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0xB
   297  00000C                     	ds	1
   298  00000D                     ?_printf:
   299                           	opt stack 0
   300  00000D                     printf@f:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0xC
   304  00000D                     	ds	6
   305  000013                     ??_printf:
   306                           
   307                           ; 1 bytes @ 0x12
   308  000013                     	ds	1
   309  000014                     printf@idx:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x13
   313  000014                     	ds	1
   314  000015                     printf@ap:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x14
   318  000015                     	ds	2
   319  000017                     printf@prec:
   320                           	opt stack 0
   321                           
   322                           ; 1 bytes @ 0x16
   323  000017                     	ds	1
   324  000018                     printf@flag:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x17
   328  000018                     	ds	1
   329  000019                     printf@val:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x18
   333  000019                     	ds	2
   334  00001B                     printf@c:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x1A
   338  00001B                     	ds	1
   339  00001C                     ??_service:
   340                           
   341                           ; 1 bytes @ 0x1B
   342  00001C                     	ds	14
   343  00002A                     lcdNibble@temp:
   344                           	opt stack 0
   345  00002A                     startT0@time:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x29
   349  00002A                     	ds	1
   350  00002B                     lcdNibble@data:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x2A
   354  00002B                     	ds	1
   355  00002C                     ??_lcdInst:
   356                           
   357                           ; 1 bytes @ 0x2B
   358  00002C                     	ds	1
   359  00002D                     lcdInst@data:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x2C
   363  00002D                     	ds	1
   364  00002E                     ??_initLCD:
   365                           
   366                           ; 1 bytes @ 0x2D
   367  00002E                     	ds	1
   368  00002F                     tblptru	equ	0xFF8
   369                           
   370                           ; 1 bytes @ 0x2E
   371 ;;
   372 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   373 ;;
   374 ;; *************** function _main *****************
   375 ;; Defined at:
   376 ;;		line 31 in file "main.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;		None
   379 ;; Auto vars:     Size  Location     Type
   380 ;;		None
   381 ;; Return value:  Size  Location     Type
   382 ;;                  1    wreg      void 
   383 ;; Registers used:
   384 ;;		wreg, status,2, status,0, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : 0/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   394 ;;Total ram usage:        0 bytes
   395 ;; Hardware stack levels required when called:    9
   396 ;; This function calls:
   397 ;;		_initLCD
   398 ;;		_initT0
   399 ;;		_startT0
   400 ;; This function is called by:
   401 ;;		Startup code after reset
   402 ;; This function uses a non-reentrant model
   403 ;;
   404                           
   405                           	psect	text0
   406  0013DA                     __ptext0:
   407                           	opt stack 0
   408  0013DA                     _main:
   409                           	opt stack 22
   410                           
   411                           ;main.c: 34: TRISA = 0xFF;
   412                           
   413                           ;incstack = 0
   414  0013DA  6892               	setf	3986,c	;volatile
   415                           
   416                           ;main.c: 35: TRISB = 0xFF;
   417  0013DC  6893               	setf	3987,c	;volatile
   418                           
   419                           ;main.c: 36: TRISC = 0x00;
   420  0013DE  0E00               	movlw	0
   421  0013E0  6E94               	movwf	3988,c	;volatile
   422                           
   423                           ;main.c: 37: TRISD = 0x00;
   424  0013E2  0E00               	movlw	0
   425  0013E4  6E95               	movwf	3989,c	;volatile
   426                           
   427                           ;main.c: 38: TRISE = 0x00;
   428  0013E6  0E00               	movlw	0
   429  0013E8  6E96               	movwf	3990,c	;volatile
   430                           
   431                           ;main.c: 40: LATA = 0x00;
   432  0013EA  0E00               	movlw	0
   433  0013EC  6E89               	movwf	3977,c	;volatile
   434                           
   435                           ;main.c: 41: LATB = 0x00;
   436  0013EE  0E00               	movlw	0
   437  0013F0  6E8A               	movwf	3978,c	;volatile
   438                           
   439                           ;main.c: 42: LATC = 0x00;
   440  0013F2  0E00               	movlw	0
   441  0013F4  6E8B               	movwf	3979,c	;volatile
   442                           
   443                           ;main.c: 43: LATD = 0x00;
   444  0013F6  0E00               	movlw	0
   445  0013F8  6E8C               	movwf	3980,c	;volatile
   446                           
   447                           ;main.c: 44: LATE = 0x00;
   448  0013FA  0E00               	movlw	0
   449  0013FC  6E8D               	movwf	3981,c	;volatile
   450                           
   451                           ;main.c: 46: ADCON0 = 0x00;
   452  0013FE  0E00               	movlw	0
   453  001400  6EC2               	movwf	4034,c	;volatile
   454                           
   455                           ;main.c: 47: ADCON1 |= 0x0A;
   456  001402  0E0A               	movlw	10
   457  001404  12C1               	iorwf	4033,f,c	;volatile
   458                           
   459                           ;main.c: 51: ADCON2 = 0;
   460  001406  0E00               	movlw	0
   461  001408  6EC0               	movwf	4032,c	;volatile
   462                           
   463                           ;main.c: 52: ADCON2 |= 0b001;
   464  00140A  80C0               	bsf	4032,0,c	;volatile
   465                           
   466                           ;main.c: 53: ADCON2 |= 0b110<<3;
   467  00140C  0E30               	movlw	48
   468  00140E  12C0               	iorwf	4032,f,c	;volatile
   469                           
   470                           ;main.c: 54: ADCON2 |= 1<<7;
   471  001410  8EC0               	bsf	4032,7,c	;volatile
   472                           
   473                           ;main.c: 56: initLCD();
   474  001412  EC14  F00A         	call	_initLCD	;wreg free
   475                           
   476                           ;main.c: 58: initT0();
   477  001416  ECA8  F00A         	call	_initT0	;wreg free
   478                           
   479                           ;main.c: 59: startT0(1000);
   480  00141A  0E03               	movlw	3
   481  00141C  6E2B               	movwf	startT0@time+1,c
   482  00141E  0EE8               	movlw	232
   483  001420  6E2A               	movwf	startT0@time,c
   484  001422  EC8B  F00A         	call	_startT0	;wreg free
   485  001426                     l48:
   486  001426  D7FF               	goto	l48
   487  001428                     __end_of_main:
   488                           	opt stack 0
   489                           tblptru	equ	0xFF8
   490                           
   491 ;; *************** function _startT0 *****************
   492 ;; Defined at:
   493 ;;		line 54 in file "timer.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;  time            2   41[COMRAM] int 
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, status,2, status,0
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   507 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;Total ram usage:        2 bytes
   512 ;; Hardware stack levels used:    1
   513 ;; Hardware stack levels required when called:    6
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_main
   518 ;;		_testFrequency
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           	psect	text1
   523  001516                     __ptext1:
   524                           	opt stack 0
   525  001516                     _startT0:
   526                           	opt stack 24
   527                           
   528                           ;timer.c: 55: T0CON = 0;
   529                           
   530                           ;incstack = 0
   531  001516  0E00               	movlw	0
   532  001518  6ED5               	movwf	4053,c	;volatile
   533                           
   534                           ;timer.c: 58: T0CON |= 0b110;
   535  00151A  0E06               	movlw	6
   536  00151C  12D5               	iorwf	4053,f,c	;volatile
   537                           
   538                           ;timer.c: 59: TMR0H = time>>8;
   539  00151E  502B               	movf	startT0@time+1,w,c
   540  001520  6ED7               	movwf	4055,c	;volatile
   541                           
   542                           ;timer.c: 60: TMR0L = time & 0xFF;
   543  001522  C02A  FFD6         	movff	startT0@time,4054	;volatile
   544                           
   545                           ;timer.c: 61: T0CON |= 1<<7;
   546  001526  8ED5               	bsf	4053,7,c	;volatile
   547  001528  0012               	return		;funcret
   548  00152A                     __end_of_startT0:
   549                           	opt stack 0
   550                           tblptru	equ	0xFF8
   551                           
   552 ;; *************** function _initT0 *****************
   553 ;; Defined at:
   554 ;;		line 47 in file "timer.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;		None
   559 ;; Return value:  Size  Location     Type
   560 ;;                  1    wreg      void 
   561 ;; Registers used:
   562 ;;		None
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   572 ;;Total ram usage:        0 bytes
   573 ;; Hardware stack levels used:    1
   574 ;; Hardware stack levels required when called:    6
   575 ;; This function calls:
   576 ;;		Nothing
   577 ;; This function is called by:
   578 ;;		_main
   579 ;;		_testFrequency
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text2
   584  001550                     __ptext2:
   585                           	opt stack 0
   586  001550                     _initT0:
   587                           	opt stack 24
   588                           
   589                           ;timer.c: 49: TMR0IE = 1;
   590                           
   591                           ;incstack = 0
   592  001550  8AF2               	bsf	intcon,5,c	;volatile
   593                           
   594                           ;timer.c: 50: PEIE = 1;
   595  001552  8CF2               	bsf	intcon,6,c	;volatile
   596                           
   597                           ;timer.c: 51: (INTCONbits.GIE = 1);
   598  001554  8EF2               	bsf	intcon,7,c	;volatile
   599  001556  0012               	return		;funcret
   600  001558                     __end_of_initT0:
   601                           	opt stack 0
   602                           tblptru	equ	0xFF8
   603                           intcon	equ	0xFF2
   604                           
   605 ;; *************** function _initLCD *****************
   606 ;; Defined at:
   607 ;;		line 15 in file "lcd.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   624 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   625 ;;Total ram usage:        1 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    8
   628 ;; This function calls:
   629 ;;		_lcdInst
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text3
   636  001428                     __ptext3:
   637                           	opt stack 0
   638  001428                     _initLCD:
   639                           	opt stack 22
   640                           
   641                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
   642                           
   643                           ;incstack = 0
   644  001428  0E27               	movlw	39
   645  00142A  6E2E               	movwf	??_initLCD& (0+255),c
   646  00142C  0EF5               	movlw	245
   647  00142E                     u927:
   648  00142E  2EE8               	decfsz	wreg,f,c
   649  001430  D7FE               	bra	u927
   650  001432  2E2E               	decfsz	??_initLCD& (0+255),f,c
   651  001434  D7FC               	bra	u927
   652  001436  F000               	nop	
   653                           
   654                           ;lcd.c: 18: lcdInst(0b00110011);
   655  001438  0E33               	movlw	51
   656  00143A  EC58  F00A         	call	_lcdInst
   657                           
   658                           ;lcd.c: 19: lcdInst(0b00110010);
   659  00143E  0E32               	movlw	50
   660  001440  EC58  F00A         	call	_lcdInst
   661                           
   662                           ;lcd.c: 20: lcdInst(0b00101000);
   663  001444  0E28               	movlw	40
   664  001446  EC58  F00A         	call	_lcdInst
   665                           
   666                           ;lcd.c: 21: lcdInst(0b00001111);
   667  00144A  0E0F               	movlw	15
   668  00144C  EC58  F00A         	call	_lcdInst
   669                           
   670                           ;lcd.c: 22: lcdInst(0b00000110);
   671  001450  0E06               	movlw	6
   672  001452  EC58  F00A         	call	_lcdInst
   673                           
   674                           ;lcd.c: 23: lcdInst(0b00000001);
   675  001456  0E01               	movlw	1
   676  001458  EC58  F00A         	call	_lcdInst
   677                           
   678                           ;lcd.c: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
   679  00145C  0E27               	movlw	39
   680  00145E  6E2E               	movwf	??_initLCD& (0+255),c
   681  001460  0EF5               	movlw	245
   682  001462                     u937:
   683  001462  2EE8               	decfsz	wreg,f,c
   684  001464  D7FE               	bra	u937
   685  001466  2E2E               	decfsz	??_initLCD& (0+255),f,c
   686  001468  D7FC               	bra	u937
   687  00146A  F000               	nop	
   688  00146C  0012               	return		;funcret
   689  00146E                     __end_of_initLCD:
   690                           	opt stack 0
   691                           tblptru	equ	0xFF8
   692                           intcon	equ	0xFF2
   693                           wreg	equ	0xFE8
   694                           
   695 ;; *************** function _lcdInst *****************
   696 ;; Defined at:
   697 ;;		line 27 in file "lcd.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;  data            1    wreg     unsigned char 
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  data            1   44[COMRAM] unsigned char 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, status,2, status,0, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   713 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   715 ;;Total ram usage:        2 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    7
   718 ;; This function calls:
   719 ;;		_lcdNibble
   720 ;; This function is called by:
   721 ;;		_initLCD
   722 ;;		_lcdHome
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           	psect	text4
   727  0014B0                     __ptext4:
   728                           	opt stack 0
   729  0014B0                     _lcdInst:
   730                           	opt stack 22
   731                           
   732                           ;incstack = 0
   733                           ;lcdInst@data stored from wreg
   734  0014B0  6E2D               	movwf	lcdInst@data,c
   735                           
   736                           ;lcd.c: 28: LATDbits.LATD2 = 0;
   737  0014B2  948C               	bcf	3980,2,c	;volatile
   738                           
   739                           ;lcd.c: 29: _delay((unsigned long)((140)*(8000000/4000000.0)));
   740  0014B4  0E5D               	movlw	93
   741  0014B6                     u947:
   742  0014B6  2EE8               	decfsz	wreg,f,c
   743  0014B8  D7FE               	bra	u947
   744  0014BA  F000               	nop	
   745                           
   746                           ;lcd.c: 30: lcdNibble(data);
   747  0014BC  502D               	movf	lcdInst@data,w,c
   748  0014BE  EC6E  F009         	call	_lcdNibble
   749                           
   750                           ;lcd.c: 31: _delay((unsigned long)((1000)*(8000000/4000000.0)));
   751  0014C2  0E03               	movlw	3
   752  0014C4  6E2C               	movwf	??_lcdInst& (0+255),c
   753  0014C6  0E98               	movlw	152
   754  0014C8                     u957:
   755  0014C8  2EE8               	decfsz	wreg,f,c
   756  0014CA  D7FE               	bra	u957
   757  0014CC  2E2C               	decfsz	??_lcdInst& (0+255),f,c
   758  0014CE  D7FC               	bra	u957
   759  0014D0  0012               	return		;funcret
   760  0014D2                     __end_of_lcdInst:
   761                           	opt stack 0
   762                           tblptru	equ	0xFF8
   763                           intcon	equ	0xFF2
   764                           wreg	equ	0xFE8
   765                           
   766 ;; *************** function _lcdNibble *****************
   767 ;; Defined at:
   768 ;;		line 46 in file "lcd.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  data            1    wreg     unsigned char 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  data            1   42[COMRAM] unsigned char 
   773 ;;  temp            1   41[COMRAM] unsigned char 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;Total ram usage:        2 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    6
   790 ;; This function calls:
   791 ;;		Nothing
   792 ;; This function is called by:
   793 ;;		_lcdInst
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text5
   798  0012DC                     __ptext5:
   799                           	opt stack 0
   800  0012DC                     _lcdNibble:
   801                           	opt stack 22
   802                           
   803                           ;incstack = 0
   804                           ;lcdNibble@data stored from wreg
   805  0012DC  6E2B               	movwf	lcdNibble@data,c
   806                           
   807                           ;lcd.c: 48: char temp = data & 0xF0;
   808  0012DE  502B               	movf	lcdNibble@data,w,c
   809  0012E0  0BF0               	andlw	240
   810  0012E2  6E2A               	movwf	lcdNibble@temp,c
   811                           
   812                           ;lcd.c: 49: LATD = LATD & 0x0F;
   813  0012E4  508C               	movf	3980,w,c	;volatile
   814  0012E6  0B0F               	andlw	15
   815  0012E8  6E8C               	movwf	3980,c	;volatile
   816                           
   817                           ;lcd.c: 50: LATD = temp | LATD;
   818  0012EA  502A               	movf	lcdNibble@temp,w,c
   819  0012EC  108C               	iorwf	3980,w,c	;volatile
   820  0012EE  6E8C               	movwf	3980,c	;volatile
   821                           
   822                           ;lcd.c: 52: LATDbits.LATD3 = 0;
   823  0012F0  968C               	bcf	3980,3,c	;volatile
   824                           
   825                           ;lcd.c: 53: _delay((unsigned long)((600)*(8000000/4000000.0)));
   826  0012F2  0EF0               	movlw	240
   827  0012F4                     u967:
   828  0012F4  D000               	nop2	
   829  0012F6  2EE8               	decfsz	wreg,f,c
   830  0012F8  D7FD               	bra	u967
   831                           
   832                           ;lcd.c: 54: LATDbits.LATD3 = 1;
   833  0012FA  868C               	bsf	3980,3,c	;volatile
   834                           
   835                           ;lcd.c: 55: _delay((unsigned long)((600)*(8000000/4000000.0)));
   836  0012FC  0EF0               	movlw	240
   837  0012FE                     u977:
   838  0012FE  D000               	nop2	
   839  001300  2EE8               	decfsz	wreg,f,c
   840  001302  D7FD               	bra	u977
   841                           
   842                           ;lcd.c: 58: data = data << 4;
   843  001304  382B               	swapf	lcdNibble@data,w,c
   844  001306  0BF0               	andlw	240
   845  001308  6E2B               	movwf	lcdNibble@data,c
   846                           
   847                           ;lcd.c: 60: temp = data & 0xF0;
   848  00130A  502B               	movf	lcdNibble@data,w,c
   849  00130C  0BF0               	andlw	240
   850  00130E  6E2A               	movwf	lcdNibble@temp,c
   851                           
   852                           ;lcd.c: 61: LATD = LATD & 0x0F;
   853  001310  508C               	movf	3980,w,c	;volatile
   854  001312  0B0F               	andlw	15
   855  001314  6E8C               	movwf	3980,c	;volatile
   856                           
   857                           ;lcd.c: 62: LATD = temp | LATD;
   858  001316  502A               	movf	lcdNibble@temp,w,c
   859  001318  108C               	iorwf	3980,w,c	;volatile
   860  00131A  6E8C               	movwf	3980,c	;volatile
   861                           
   862                           ;lcd.c: 64: LATDbits.LATD3 = 0;
   863  00131C  968C               	bcf	3980,3,c	;volatile
   864                           
   865                           ;lcd.c: 65: _delay((unsigned long)((600)*(8000000/4000000.0)));
   866  00131E  0EF0               	movlw	240
   867  001320                     u987:
   868  001320  D000               	nop2	
   869  001322  2EE8               	decfsz	wreg,f,c
   870  001324  D7FD               	bra	u987
   871                           
   872                           ;lcd.c: 66: LATDbits.LATD3 = 1;
   873  001326  868C               	bsf	3980,3,c	;volatile
   874                           
   875                           ;lcd.c: 67: _delay((unsigned long)((600)*(8000000/4000000.0)));
   876  001328  0EF0               	movlw	240
   877  00132A                     u997:
   878  00132A  D000               	nop2	
   879  00132C  2EE8               	decfsz	wreg,f,c
   880  00132E  D7FD               	bra	u997
   881  001330  0012               	return		;funcret
   882  001332                     __end_of_lcdNibble:
   883                           	opt stack 0
   884                           tblptru	equ	0xFF8
   885                           intcon	equ	0xFF2
   886                           wreg	equ	0xFE8
   887                           
   888 ;; *************** function _service *****************
   889 ;; Defined at:
   890 ;;		line 66 in file "main.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   908 ;;Total ram usage:       14 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    5
   911 ;; This function calls:
   912 ;;		_lcdClear
   913 ;;		_printf
   914 ;;		i2_startT0
   915 ;; This function is called by:
   916 ;;		Interrupt level 2
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	intcode
   921  000008                     __pintcode:
   922                           	opt stack 0
   923  000008                     _service:
   924                           	opt stack 22
   925                           
   926                           ;incstack = 0
   927  000008  8231               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   928  00000A  ED1C  F009         	call	int_func,f	;refresh shadow registers
   929                           tblptru	equ	0xFF8
   930                           intcon	equ	0xFF2
   931                           wreg	equ	0xFE8
   932                           
   933                           	psect	intcode_body
   934  001238                     __pintcode_body:
   935                           	opt stack 22
   936  001238                     int_func:
   937                           	opt stack 22
   938  001238  0006               	pop		; remove dummy address from shadow register refresh
   939  00123A  CFFA F01C          	movff	pclath,??_service
   940  00123E  CFFB F01D          	movff	pclatu,??_service+1
   941  001242  CFE9 F01E          	movff	fsr0l,??_service+2
   942  001246  CFEA F01F          	movff	fsr0h,??_service+3
   943  00124A  CFE1 F020          	movff	fsr1l,??_service+4
   944  00124E  CFE2 F021          	movff	fsr1h,??_service+5
   945  001252  CFD9 F022          	movff	fsr2l,??_service+6
   946  001256  CFDA F023          	movff	fsr2h,??_service+7
   947  00125A  CFF3 F024          	movff	prodl,??_service+8
   948  00125E  CFF4 F025          	movff	prodh,??_service+9
   949  001262  CFF6 F026          	movff	tblptrl,??_service+10
   950  001266  CFF7 F027          	movff	tblptrh,??_service+11
   951  00126A  CFF8 F028          	movff	tblptru,??_service+12
   952  00126E  CFF5 F029          	movff	tablat,??_service+13
   953                           
   954                           ;main.c: 67: if(TMR0IF){
   955  001272  A4F2               	btfss	intcon,2,c	;volatile
   956  001274  D015               	goto	i2l57
   957                           
   958                           ;main.c: 68: TMR0IF = 0;
   959  001276  94F2               	bcf	intcon,2,c	;volatile
   960                           
   961                           ;main.c: 69: lcdClear();
   962  001278  ECB0  F00A         	call	_lcdClear	;wreg free
   963                           
   964                           ;main.c: 70: printf("%d",i++);
   965  00127C  0E4B               	movlw	low STR_3
   966  00127E  6E0D               	movwf	printf@f,c
   967  001280  0E10               	movlw	high STR_3
   968  001282  6E0E               	movwf	printf@f+1,c
   969  001284  C02F  F00F         	movff	_i,?_printf+2
   970  001288  C030  F010         	movff	_i+1,?_printf+3
   971  00128C  EC2A  F008         	call	_printf	;wreg free
   972  001290  4A2F               	infsnz	_i,f,c
   973  001292  2A30               	incf	_i+1,f,c
   974                           
   975                           ;main.c: 71: startT0(1000);
   976  001294  0E03               	movlw	3
   977  001296  6E02               	movwf	i2startT0@time+1,c
   978  001298  0EE8               	movlw	232
   979  00129A  6E01               	movwf	i2startT0@time,c
   980  00129C  EC95  F00A         	call	i2_startT0	;wreg free
   981  0012A0                     i2l57:
   982  0012A0  C029  FFF5         	movff	??_service+13,tablat
   983  0012A4  C028  FFF8         	movff	??_service+12,tblptru
   984  0012A8  C027  FFF7         	movff	??_service+11,tblptrh
   985  0012AC  C026  FFF6         	movff	??_service+10,tblptrl
   986  0012B0  C025  FFF4         	movff	??_service+9,prodh
   987  0012B4  C024  FFF3         	movff	??_service+8,prodl
   988  0012B8  C023  FFDA         	movff	??_service+7,fsr2h
   989  0012BC  C022  FFD9         	movff	??_service+6,fsr2l
   990  0012C0  C021  FFE2         	movff	??_service+5,fsr1h
   991  0012C4  C020  FFE1         	movff	??_service+4,fsr1l
   992  0012C8  C01F  FFEA         	movff	??_service+3,fsr0h
   993  0012CC  C01E  FFE9         	movff	??_service+2,fsr0l
   994  0012D0  C01D  FFFB         	movff	??_service+1,pclatu
   995  0012D4  C01C  FFFA         	movff	??_service,pclath
   996  0012D8  9231               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   997  0012DA  0011               	retfie		f
   998  0012DC                     __end_of_service:
   999                           	opt stack 0
  1000                           pclatu	equ	0xFFB
  1001                           pclath	equ	0xFFA
  1002                           tblptru	equ	0xFF8
  1003                           tblptrh	equ	0xFF7
  1004                           tblptrl	equ	0xFF6
  1005                           tablat	equ	0xFF5
  1006                           prodh	equ	0xFF4
  1007                           prodl	equ	0xFF3
  1008                           intcon	equ	0xFF2
  1009                           fsr0h	equ	0xFEA
  1010                           fsr0l	equ	0xFE9
  1011                           wreg	equ	0xFE8
  1012                           fsr1h	equ	0xFE2
  1013                           fsr1l	equ	0xFE1
  1014                           fsr2h	equ	0xFDA
  1015                           fsr2l	equ	0xFD9
  1016                           
  1017 ;; *************** function i2_startT0 *****************
  1018 ;; Defined at:
  1019 ;;		line 54 in file "timer.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  time            2    0[COMRAM] int 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;Total ram usage:        2 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; This function calls:
  1040 ;;		Nothing
  1041 ;; This function is called by:
  1042 ;;		_service
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           	psect	text7
  1047  00152A                     __ptext7:
  1048                           	opt stack 0
  1049  00152A                     i2_startT0:
  1050                           	opt stack 26
  1051                           
  1052                           ;timer.c: 55: T0CON = 0;
  1053                           
  1054                           ;incstack = 0
  1055  00152A  0E00               	movlw	0
  1056  00152C  6ED5               	movwf	4053,c	;volatile
  1057                           
  1058                           ;timer.c: 58: T0CON |= 0b110;
  1059  00152E  0E06               	movlw	6
  1060  001530  12D5               	iorwf	4053,f,c	;volatile
  1061                           
  1062                           ;timer.c: 59: TMR0H = time>>8;
  1063  001532  5002               	movf	i2startT0@time+1,w,c
  1064  001534  6ED7               	movwf	4055,c	;volatile
  1065                           
  1066                           ;timer.c: 60: TMR0L = time & 0xFF;
  1067  001536  C001  FFD6         	movff	i2startT0@time,4054	;volatile
  1068                           
  1069                           ;timer.c: 61: T0CON |= 1<<7;
  1070  00153A  8ED5               	bsf	4053,7,c	;volatile
  1071  00153C  0012               	return		;funcret
  1072  00153E                     __end_ofi2_startT0:
  1073                           	opt stack 0
  1074                           pclatu	equ	0xFFB
  1075                           pclath	equ	0xFFA
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodh	equ	0xFF4
  1081                           prodl	equ	0xFF3
  1082                           intcon	equ	0xFF2
  1083                           fsr0h	equ	0xFEA
  1084                           fsr0l	equ	0xFE9
  1085                           wreg	equ	0xFE8
  1086                           fsr1h	equ	0xFE2
  1087                           fsr1l	equ	0xFE1
  1088                           fsr2h	equ	0xFDA
  1089                           fsr2l	equ	0xFD9
  1090                           
  1091 ;; *************** function _printf *****************
  1092 ;; Defined at:
  1093 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1096 ;;		 -> STR_5(7), STR_4(8), STR_3(3), STR_2(2), 
  1097 ;;		 -> STR_1(2), 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  idx             1   19[COMRAM] unsigned char 
  1100 ;;  tmpval          4    0        struct .
  1101 ;;  cp              3    0        PTR const unsigned char 
  1102 ;;  val             2   24[COMRAM] unsigned int 
  1103 ;;  ap              2   20[COMRAM] PTR void [1]
  1104 ;;		 -> ?_printf(2), 
  1105 ;;  len             2    0        unsigned int 
  1106 ;;  c               1   26[COMRAM] char 
  1107 ;;  flag            1   23[COMRAM] unsigned char 
  1108 ;;  prec            1   22[COMRAM] char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  2   12[COMRAM] int 
  1111 ;; Registers used:
  1112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1118 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;Total ram usage:       15 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    4
  1125 ;; This function calls:
  1126 ;;		___lwdiv
  1127 ;;		___lwmod
  1128 ;;		_putch
  1129 ;; This function is called by:
  1130 ;;		_service
  1131 ;;		_printb
  1132 ;;		_testFrequency
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text8
  1137  001054                     __ptext8:
  1138                           	opt stack 0
  1139  001054                     _printf:
  1140                           	opt stack 22
  1141                           
  1142                           ;doprnt.c: 466: va_list ap;
  1143                           ;doprnt.c: 499: signed char c;
  1144                           ;doprnt.c: 506: signed char prec;
  1145                           ;doprnt.c: 508: unsigned char flag;
  1146                           ;doprnt.c: 523: union {
  1147                           ;doprnt.c: 524: unsigned long vd;
  1148                           ;doprnt.c: 525: double integ;
  1149                           ;doprnt.c: 526: } tmpval;
  1150                           ;doprnt.c: 528: unsigned int val;
  1151                           ;doprnt.c: 529: unsigned len;
  1152                           ;doprnt.c: 530: const char * cp;
  1153                           ;doprnt.c: 533: *ap = __va_start();
  1154                           
  1155                           ;incstack = 0
  1156  001054  0E0F               	movlw	low (?_printf+2)
  1157  001056  6E15               	movwf	printf@ap,c
  1158  001058  0E00               	movlw	high (?_printf+2)
  1159  00105A  6E16               	movwf	printf@ap+1,c
  1160                           
  1161                           ;doprnt.c: 536: while(c = *f++) {
  1162  00105C  D0E0               	goto	i2l1715
  1163  00105E                     i2l1637:
  1164                           
  1165                           ;doprnt.c: 538: if(c != '%')
  1166  00105E  0E25               	movlw	37
  1167  001060  181B               	xorwf	printf@c,w,c
  1168  001062  B4D8               	btfsc	status,2,c
  1169  001064  D004               	goto	i2l1641
  1170                           
  1171                           ;doprnt.c: 540: {
  1172                           ;doprnt.c: 541: (putch(c) );
  1173  001066  501B               	movf	printf@c,w,c
  1174  001068  EC69  F00A         	call	_putch
  1175                           
  1176                           ;doprnt.c: 542: continue;
  1177  00106C  D0D8               	goto	i2l1715
  1178  00106E                     i2l1641:
  1179                           
  1180                           ;doprnt.c: 543: }
  1181                           ;doprnt.c: 548: flag = 0;
  1182  00106E  0E00               	movlw	0
  1183  001070  6E18               	movwf	printf@flag,c
  1184                           
  1185                           ;doprnt.c: 635: switch(c = *f++) {
  1186  001072  D002               	goto	i2l1647
  1187  001074                     i2l1643:
  1188                           
  1189                           ;doprnt.c: 721: flag |= 0x80;
  1190  001074  8E18               	bsf	printf@flag,7,c
  1191                           
  1192                           ;doprnt.c: 723: break;
  1193  001076  D017               	goto	i2l358
  1194  001078                     i2l1647:
  1195  001078  C00D  FFF6         	movff	printf@f,tblptrl
  1196  00107C  C00E  FFF7         	movff	printf@f+1,tblptrh
  1197  001080  4A0D               	infsnz	printf@f,f,c
  1198  001082  2A0E               	incf	printf@f+1,f,c
  1199  001084                     	if	0	;tblptru may be non-zero
  1200  001084                     	endif
  1201  001084                     	if	0	;tblptru may be non-zero
  1202  001084                     	endif
  1203  001084  0008               	tblrd		*
  1204  001086  CFF5 F01B          	movff	tablat,printf@c
  1205  00108A  501B               	movf	printf@c,w,c
  1206                           
  1207                           ; Switch size 1, requested type "space"
  1208                           ; Number of cases is 4, Range of values is 0 to 120
  1209                           ; switch strategies available:
  1210                           ; Name         Instructions Cycles
  1211                           ; simple_byte           13     7 (average)
  1212                           ;	Chosen strategy is simple_byte
  1213  00108C  0A00               	xorlw	0	; case 0
  1214  00108E  B4D8               	btfsc	status,2,c
  1215  001090  0012               	return	
  1216  001092  0A64               	xorlw	100	; case 100
  1217  001094  B4D8               	btfsc	status,2,c
  1218  001096  D007               	goto	i2l358
  1219  001098  0A0D               	xorlw	13	; case 105
  1220  00109A  B4D8               	btfsc	status,2,c
  1221  00109C  D004               	goto	i2l358
  1222  00109E  0A11               	xorlw	17	; case 120
  1223  0010A0  B4D8               	btfsc	status,2,c
  1224  0010A2  D7E8               	goto	i2l1643
  1225  0010A4  D0BC               	goto	i2l1715
  1226  0010A6                     i2l358:
  1227                           
  1228                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1229  0010A6  BE18               	btfsc	printf@flag,7,c
  1230  0010A8  D015               	goto	i2l1659
  1231                           
  1232                           ;doprnt.c: 1253: {
  1233                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1234  0010AA  C015  FFD9         	movff	printf@ap,fsr2l
  1235  0010AE  C016  FFDA         	movff	printf@ap+1,fsr2h
  1236  0010B2  CFDE F019          	movff	postinc2,printf@val
  1237  0010B6  CFDD F01A          	movff	postdec2,printf@val+1
  1238  0010BA  0E02               	movlw	2
  1239  0010BC  2615               	addwf	printf@ap,f,c
  1240  0010BE  0E00               	movlw	0
  1241  0010C0  2216               	addwfc	printf@ap+1,f,c
  1242                           
  1243                           ;doprnt.c: 1261: if((int)val < 0) {
  1244  0010C2  AE1A               	btfss	printf@val+1,7,c
  1245  0010C4  D044               	goto	i2l1693
  1246                           
  1247                           ;doprnt.c: 1262: flag |= 0x03;
  1248  0010C6  0E03               	movlw	3
  1249  0010C8  1218               	iorwf	printf@flag,f,c
  1250                           
  1251                           ;doprnt.c: 1263: val = -val;
  1252  0010CA  6C19               	negf	printf@val,c
  1253  0010CC  1E1A               	comf	printf@val+1,f,c
  1254  0010CE  B0D8               	btfsc	status,0,c
  1255  0010D0  2A1A               	incf	printf@val+1,f,c
  1256                           
  1257                           ;doprnt.c: 1264: }
  1258                           ;doprnt.c: 1266: }
  1259  0010D2  D03D               	goto	i2l1693
  1260  0010D4                     i2l1659:
  1261                           
  1262                           ;doprnt.c: 1268: else
  1263                           ;doprnt.c: 1273: {
  1264                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1265  0010D4  C015  FFD9         	movff	printf@ap,fsr2l
  1266  0010D8  C016  FFDA         	movff	printf@ap+1,fsr2h
  1267  0010DC  CFDE F019          	movff	postinc2,printf@val
  1268  0010E0  CFDD F01A          	movff	postdec2,printf@val+1
  1269  0010E4  0E02               	movlw	2
  1270  0010E6  2615               	addwf	printf@ap,f,c
  1271  0010E8  0E00               	movlw	0
  1272  0010EA  2216               	addwfc	printf@ap+1,f,c
  1273                           
  1274                           ;doprnt.c: 1287: }
  1275                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1276  0010EC  D030               	goto	i2l1693
  1277  0010EE                     i2l1663:
  1278                           
  1279                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1280  0010EE  0E01               	movlw	1
  1281  0010F0  6E1B               	movwf	printf@c,c
  1282  0010F2                     i2l1665:
  1283  0010F2  0E05               	movlw	5
  1284  0010F4  181B               	xorwf	printf@c,w,c
  1285  0010F6  B4D8               	btfsc	status,2,c
  1286  0010F8  D032               	goto	i2l1695
  1287                           
  1288                           ;doprnt.c: 1306: if(val < dpowers[c])
  1289  0010FA  501B               	movf	printf@c,w,c
  1290  0010FC  0D02               	mullw	2
  1291  0010FE  0E12               	movlw	low _dpowers
  1292  001100  24F3               	addwf	prodl,w,c
  1293  001102  6EF6               	movwf	tblptrl,c
  1294  001104  0E10               	movlw	high _dpowers
  1295  001106  20F4               	addwfc	prodh,w,c
  1296  001108  6EF7               	movwf	tblptrh,c
  1297  00110A                     	if	0	;There are less than 3 active tblptr bytes
  1298  00110A                     	endif
  1299  00110A  0009               	tblrd		*+
  1300  00110C  50F5               	movf	tablat,w,c
  1301  00110E  5C19               	subwf	printf@val,w,c
  1302  001110  0009               	tblrd		*+
  1303  001112  50F5               	movf	tablat,w,c
  1304  001114  581A               	subwfb	printf@val+1,w,c
  1305  001116  A0D8               	btfss	status,0,c
  1306  001118  D022               	goto	i2l1695
  1307                           
  1308                           ;doprnt.c: 1307: break;
  1309  00111A  2A1B               	incf	printf@c,f,c
  1310  00111C  D7EA               	goto	i2l1665
  1311  00111E                     i2l1677:
  1312                           
  1313                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1314  00111E  0E01               	movlw	1
  1315  001120  6E1B               	movwf	printf@c,c
  1316  001122                     i2l1679:
  1317  001122  0E04               	movlw	4
  1318  001124  181B               	xorwf	printf@c,w,c
  1319  001126  B4D8               	btfsc	status,2,c
  1320  001128  D01A               	goto	i2l1695
  1321                           
  1322                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1323  00112A  501B               	movf	printf@c,w,c
  1324  00112C  0D02               	mullw	2
  1325  00112E  0E1C               	movlw	low _hexpowers
  1326  001130  24F3               	addwf	prodl,w,c
  1327  001132  6EF6               	movwf	tblptrl,c
  1328  001134  0E10               	movlw	high _hexpowers
  1329  001136  20F4               	addwfc	prodh,w,c
  1330  001138  6EF7               	movwf	tblptrh,c
  1331  00113A                     	if	0	;There are less than 3 active tblptr bytes
  1332  00113A                     	endif
  1333  00113A  0009               	tblrd		*+
  1334  00113C  50F5               	movf	tablat,w,c
  1335  00113E  5C19               	subwf	printf@val,w,c
  1336  001140  0009               	tblrd		*+
  1337  001142  50F5               	movf	tablat,w,c
  1338  001144  581A               	subwfb	printf@val+1,w,c
  1339  001146  A0D8               	btfss	status,0,c
  1340  001148  D00A               	goto	i2l1695
  1341                           
  1342                           ;doprnt.c: 1318: break;
  1343  00114A  2A1B               	incf	printf@c,f,c
  1344  00114C  D7EA               	goto	i2l1679
  1345  00114E                     i2l1693:
  1346  00114E  5018               	movf	printf@flag,w,c
  1347  001150  0B80               	andlw	128
  1348                           
  1349                           ; Switch size 1, requested type "space"
  1350                           ; Number of cases is 2, Range of values is 0 to 128
  1351                           ; switch strategies available:
  1352                           ; Name         Instructions Cycles
  1353                           ; simple_byte            7     4 (average)
  1354                           ;	Chosen strategy is simple_byte
  1355  001152  0A00               	xorlw	0	; case 0
  1356  001154  B4D8               	btfsc	status,2,c
  1357  001156  D7CB               	goto	i2l1663
  1358  001158  0A80               	xorlw	128	; case 128
  1359  00115A  B4D8               	btfsc	status,2,c
  1360  00115C  D7E0               	goto	i2l1677
  1361  00115E                     i2l1695:
  1362                           
  1363                           ;doprnt.c: 1422: {
  1364                           ;doprnt.c: 1438: if(flag & 0x03)
  1365  00115E  C018  F013         	movff	printf@flag,??_printf
  1366  001162  0E03               	movlw	3
  1367  001164  1613               	andwf	??_printf,f,c
  1368  001166  B4D8               	btfsc	status,2,c
  1369  001168  D003               	goto	i2l1699
  1370                           
  1371                           ;doprnt.c: 1439: (putch('-') );
  1372  00116A  0E2D               	movlw	45
  1373  00116C  EC69  F00A         	call	_putch
  1374  001170                     i2l1699:
  1375                           
  1376                           ;doprnt.c: 1469: }
  1377                           ;doprnt.c: 1472: prec = c;
  1378  001170  C01B  F017         	movff	printf@c,printf@prec
  1379                           
  1380                           ;doprnt.c: 1474: while(prec--) {
  1381  001174  D050               	goto	i2l1713
  1382  001176                     i2l1701:
  1383                           
  1384                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1385  001176  5017               	movf	printf@prec,w,c
  1386  001178  0D02               	mullw	2
  1387  00117A  0E12               	movlw	low _dpowers
  1388  00117C  24F3               	addwf	prodl,w,c
  1389  00117E  6EF6               	movwf	tblptrl,c
  1390  001180  0E10               	movlw	high _dpowers
  1391  001182  20F4               	addwfc	prodh,w,c
  1392  001184  6EF7               	movwf	tblptrh,c
  1393  001186                     	if	0	;There are less than 3 active tblptr bytes
  1394  001186                     	endif
  1395  001186  0009               	tblrd		*+
  1396  001188  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1397  00118C  000A               	tblrd		*-
  1398  00118E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1399  001192  C019  F001         	movff	printf@val,___lwdiv@dividend
  1400  001196  C01A  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1401  00119A  ECC4  F009         	call	___lwdiv	;wreg free
  1402  00119E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1403  0011A2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1404  0011A6  0E00               	movlw	0
  1405  0011A8  6E0B               	movwf	___lwmod@divisor+1,c
  1406  0011AA  0E0A               	movlw	10
  1407  0011AC  6E0A               	movwf	___lwmod@divisor,c
  1408  0011AE  EC37  F00A         	call	___lwmod	;wreg free
  1409  0011B2  5008               	movf	?___lwmod,w,c
  1410  0011B4  0F30               	addlw	48
  1411  0011B6  6E1B               	movwf	printf@c,c
  1412                           
  1413                           ;doprnt.c: 1491: break;
  1414  0011B8  D02B               	goto	i2l1711
  1415  0011BA                     i2l1703:
  1416                           
  1417                           ;doprnt.c: 1499: {
  1418                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1419  0011BA  C019  F001         	movff	printf@val,___lwdiv@dividend
  1420  0011BE  C01A  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1421  0011C2  5017               	movf	printf@prec,w,c
  1422  0011C4  0D02               	mullw	2
  1423  0011C6  0E1C               	movlw	low _hexpowers
  1424  0011C8  24F3               	addwf	prodl,w,c
  1425  0011CA  6EF6               	movwf	tblptrl,c
  1426  0011CC  0E10               	movlw	high _hexpowers
  1427  0011CE  20F4               	addwfc	prodh,w,c
  1428  0011D0  6EF7               	movwf	tblptrh,c
  1429  0011D2                     	if	0	;There are less than 3 active tblptr bytes
  1430  0011D2                     	endif
  1431  0011D2  0009               	tblrd		*+
  1432  0011D4  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1433  0011D8  000A               	tblrd		*-
  1434  0011DA  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1435  0011DE  ECC4  F009         	call	___lwdiv	;wreg free
  1436  0011E2  5001               	movf	?___lwdiv,w,c
  1437  0011E4  0B0F               	andlw	15
  1438  0011E6  6E14               	movwf	printf@idx,c
  1439                           
  1440                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1441  0011E8  5014               	movf	printf@idx,w,c
  1442  0011EA  0D01               	mullw	1
  1443  0011EC  0E2B               	movlw	low STR_6
  1444  0011EE  24F3               	addwf	prodl,w,c
  1445  0011F0  6EF6               	movwf	tblptrl,c
  1446  0011F2  0E10               	movlw	high STR_6
  1447  0011F4  20F4               	addwfc	prodh,w,c
  1448  0011F6  6EF7               	movwf	tblptrh,c
  1449  0011F8                     	if	0	;There are less than 3 active tblptr bytes
  1450  0011F8                     	endif
  1451  0011F8  0008               	tblrd		*
  1452  0011FA  CFF5 F01B          	movff	tablat,printf@c
  1453                           
  1454                           ;doprnt.c: 1523: }
  1455                           
  1456                           ;doprnt.c: 1508: }
  1457                           ;doprnt.c: 1510: break;
  1458  0011FE  D008               	goto	i2l1711
  1459  001200                     i2l1709:
  1460  001200  5018               	movf	printf@flag,w,c
  1461  001202  0B80               	andlw	128
  1462                           
  1463                           ; Switch size 1, requested type "space"
  1464                           ; Number of cases is 2, Range of values is 0 to 128
  1465                           ; switch strategies available:
  1466                           ; Name         Instructions Cycles
  1467                           ; simple_byte            7     4 (average)
  1468                           ;	Chosen strategy is simple_byte
  1469  001204  0A00               	xorlw	0	; case 0
  1470  001206  B4D8               	btfsc	status,2,c
  1471  001208  D7B6               	goto	i2l1701
  1472  00120A  0A80               	xorlw	128	; case 128
  1473  00120C  B4D8               	btfsc	status,2,c
  1474  00120E  D7D5               	goto	i2l1703
  1475  001210                     i2l1711:
  1476                           
  1477                           ;doprnt.c: 1524: (putch(c) );
  1478  001210  501B               	movf	printf@c,w,c
  1479  001212  EC69  F00A         	call	_putch
  1480  001216                     i2l1713:
  1481  001216  0617               	decf	printf@prec,f,c
  1482  001218  2817               	incf	printf@prec,w,c
  1483  00121A  A4D8               	btfss	status,2,c
  1484  00121C  D7F1               	goto	i2l1709
  1485  00121E                     i2l1715:
  1486  00121E  C00D  FFF6         	movff	printf@f,tblptrl
  1487  001222  C00E  FFF7         	movff	printf@f+1,tblptrh
  1488  001226  4A0D               	infsnz	printf@f,f,c
  1489  001228  2A0E               	incf	printf@f+1,f,c
  1490  00122A                     	if	0	;tblptru may be non-zero
  1491  00122A                     	endif
  1492  00122A                     	if	0	;tblptru may be non-zero
  1493  00122A                     	endif
  1494  00122A  0008               	tblrd		*
  1495  00122C  CFF5 F01B          	movff	tablat,printf@c
  1496  001230  501B               	movf	printf@c,w,c
  1497  001232  B4D8               	btfsc	status,2,c
  1498  001234  0012               	return	
  1499  001236  D713               	goto	i2l1637
  1500  001238                     __end_of_printf:
  1501                           	opt stack 0
  1502                           pclatu	equ	0xFFB
  1503                           pclath	equ	0xFFA
  1504                           tblptru	equ	0xFF8
  1505                           tblptrh	equ	0xFF7
  1506                           tblptrl	equ	0xFF6
  1507                           tablat	equ	0xFF5
  1508                           prodh	equ	0xFF4
  1509                           prodl	equ	0xFF3
  1510                           intcon	equ	0xFF2
  1511                           fsr0h	equ	0xFEA
  1512                           fsr0l	equ	0xFE9
  1513                           wreg	equ	0xFE8
  1514                           fsr1h	equ	0xFE2
  1515                           fsr1l	equ	0xFE1
  1516                           postinc2	equ	0xFDE
  1517                           postdec2	equ	0xFDD
  1518                           fsr2h	equ	0xFDA
  1519                           fsr2l	equ	0xFD9
  1520                           status	equ	0xFD8
  1521                           
  1522 ;; *************** function _putch *****************
  1523 ;; Defined at:
  1524 ;;		line 35 in file "lcd.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;  data            1    wreg     unsigned char 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  data            1    4[COMRAM] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, status,2, status,0, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;Total ram usage:        1 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    3
  1545 ;; This function calls:
  1546 ;;		_lcdNewline
  1547 ;;		i2_lcdNibble
  1548 ;; This function is called by:
  1549 ;;		_printf
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text9
  1554  0014D2                     __ptext9:
  1555                           	opt stack 0
  1556  0014D2                     _putch:
  1557                           	opt stack 22
  1558                           
  1559                           ;incstack = 0
  1560                           ;putch@data stored from wreg
  1561  0014D2  6E05               	movwf	putch@data,c
  1562                           
  1563                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  1564  0014D4  0E0A               	movlw	10
  1565  0014D6  1805               	xorwf	putch@data,w,c
  1566  0014D8  A4D8               	btfss	status,2,c
  1567  0014DA  D003               	goto	i2l78
  1568  0014DC  ECAC  F00A         	call	_lcdNewline	;wreg free
  1569  0014E0  0012               	return	
  1570  0014E2                     i2l78:
  1571                           
  1572                           ;lcd.c: 37: else
  1573                           ;lcd.c: 38: {
  1574                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  1575  0014E2  848C               	bsf	3980,2,c	;volatile
  1576                           
  1577                           ;lcd.c: 40: _delay((unsigned long)((140)*(8000000/4000000.0)));
  1578  0014E4  0E5D               	movlw	93
  1579  0014E6                     i2u100_47:
  1580  0014E6  2EE8               	decfsz	wreg,f,c
  1581  0014E8  D7FE               	bra	i2u100_47
  1582  0014EA  F000               	nop	
  1583                           
  1584                           ;lcd.c: 41: lcdNibble(data);
  1585  0014EC  5005               	movf	putch@data,w,c
  1586  0014EE  EC99  F009         	call	i2_lcdNibble
  1587  0014F2  0012               	return	
  1588  0014F4                     __end_of_putch:
  1589                           	opt stack 0
  1590                           pclatu	equ	0xFFB
  1591                           pclath	equ	0xFFA
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           prodh	equ	0xFF4
  1597                           prodl	equ	0xFF3
  1598                           intcon	equ	0xFF2
  1599                           fsr0h	equ	0xFEA
  1600                           fsr0l	equ	0xFE9
  1601                           wreg	equ	0xFE8
  1602                           fsr1h	equ	0xFE2
  1603                           fsr1l	equ	0xFE1
  1604                           postinc2	equ	0xFDE
  1605                           postdec2	equ	0xFDD
  1606                           fsr2h	equ	0xFDA
  1607                           fsr2l	equ	0xFD9
  1608                           status	equ	0xFD8
  1609                           
  1610 ;; *************** function _lcdNewline *****************
  1611 ;; Defined at:
  1612 ;;		line 78 in file "lcd.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;		None
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;		None
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, status,0, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;Total ram usage:        0 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    2
  1633 ;; This function calls:
  1634 ;;		i2_lcdInst
  1635 ;; This function is called by:
  1636 ;;		_putch
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           	psect	text10
  1641  001558                     __ptext10:
  1642                           	opt stack 0
  1643  001558                     _lcdNewline:
  1644                           	opt stack 22
  1645                           
  1646                           ;lcd.c: 79: lcdInst(0b11000000);
  1647                           
  1648                           ;incstack = 0
  1649  001558  0EC0               	movlw	192
  1650  00155A  EC7A  F00A         	call	i2_lcdInst
  1651  00155E  0012               	return		;funcret
  1652  001560                     __end_of_lcdNewline:
  1653                           	opt stack 0
  1654                           pclatu	equ	0xFFB
  1655                           pclath	equ	0xFFA
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           prodh	equ	0xFF4
  1661                           prodl	equ	0xFF3
  1662                           intcon	equ	0xFF2
  1663                           fsr0h	equ	0xFEA
  1664                           fsr0l	equ	0xFE9
  1665                           wreg	equ	0xFE8
  1666                           fsr1h	equ	0xFE2
  1667                           fsr1l	equ	0xFE1
  1668                           postinc2	equ	0xFDE
  1669                           postdec2	equ	0xFDD
  1670                           fsr2h	equ	0xFDA
  1671                           fsr2l	equ	0xFD9
  1672                           status	equ	0xFD8
  1673                           
  1674 ;; *************** function ___lwmod *****************
  1675 ;; Defined at:
  1676 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  dividend        2    7[COMRAM] unsigned int 
  1679 ;;  divisor         2    9[COMRAM] unsigned int 
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  counter         1   11[COMRAM] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  2    7[COMRAM] unsigned int 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1691 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;Total ram usage:        5 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_printf
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text11
  1705  00146E                     __ptext11:
  1706                           	opt stack 0
  1707  00146E                     ___lwmod:
  1708                           	opt stack 25
  1709                           
  1710                           ;incstack = 0
  1711  00146E  500A               	movf	___lwmod@divisor,w,c
  1712  001470  100B               	iorwf	___lwmod@divisor+1,w,c
  1713  001472  B4D8               	btfsc	status,2,c
  1714  001474  D018               	goto	i2l796
  1715  001476  0E01               	movlw	1
  1716  001478  6E0C               	movwf	___lwmod@counter,c
  1717  00147A  D004               	goto	i2l1625
  1718  00147C                     i2l1623:
  1719  00147C  90D8               	bcf	status,0,c
  1720  00147E  360A               	rlcf	___lwmod@divisor,f,c
  1721  001480  360B               	rlcf	___lwmod@divisor+1,f,c
  1722  001482  2A0C               	incf	___lwmod@counter,f,c
  1723  001484                     i2l1625:
  1724  001484  AE0B               	btfss	___lwmod@divisor+1,7,c
  1725  001486  D7FA               	goto	i2l1623
  1726  001488                     i2l1627:
  1727  001488  500A               	movf	___lwmod@divisor,w,c
  1728  00148A  5C08               	subwf	___lwmod@dividend,w,c
  1729  00148C  500B               	movf	___lwmod@divisor+1,w,c
  1730  00148E  5809               	subwfb	___lwmod@dividend+1,w,c
  1731  001490  A0D8               	btfss	status,0,c
  1732  001492  D004               	goto	i2l1631
  1733  001494  500A               	movf	___lwmod@divisor,w,c
  1734  001496  5E08               	subwf	___lwmod@dividend,f,c
  1735  001498  500B               	movf	___lwmod@divisor+1,w,c
  1736  00149A  5A09               	subwfb	___lwmod@dividend+1,f,c
  1737  00149C                     i2l1631:
  1738  00149C  90D8               	bcf	status,0,c
  1739  00149E  320B               	rrcf	___lwmod@divisor+1,f,c
  1740  0014A0  320A               	rrcf	___lwmod@divisor,f,c
  1741  0014A2  2E0C               	decfsz	___lwmod@counter,f,c
  1742  0014A4  D7F1               	goto	i2l1627
  1743  0014A6                     i2l796:
  1744  0014A6  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1745  0014AA  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1746  0014AE  0012               	return		;funcret
  1747  0014B0                     __end_of___lwmod:
  1748                           	opt stack 0
  1749                           pclatu	equ	0xFFB
  1750                           pclath	equ	0xFFA
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           prodh	equ	0xFF4
  1756                           prodl	equ	0xFF3
  1757                           intcon	equ	0xFF2
  1758                           fsr0h	equ	0xFEA
  1759                           fsr0l	equ	0xFE9
  1760                           wreg	equ	0xFE8
  1761                           fsr1h	equ	0xFE2
  1762                           fsr1l	equ	0xFE1
  1763                           postinc2	equ	0xFDE
  1764                           postdec2	equ	0xFDD
  1765                           fsr2h	equ	0xFDA
  1766                           fsr2l	equ	0xFD9
  1767                           status	equ	0xFD8
  1768                           
  1769 ;; *************** function ___lwdiv *****************
  1770 ;; Defined at:
  1771 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  dividend        2    0[COMRAM] unsigned int 
  1774 ;;  divisor         2    2[COMRAM] unsigned int 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  quotient        2    4[COMRAM] unsigned int 
  1777 ;;  counter         1    6[COMRAM] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  2    0[COMRAM] unsigned int 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1787 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;Total ram usage:        7 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_printf
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text12
  1801  001388                     __ptext12:
  1802                           	opt stack 0
  1803  001388                     ___lwdiv:
  1804                           	opt stack 25
  1805                           
  1806                           ;incstack = 0
  1807  001388  0E00               	movlw	0
  1808  00138A  6E06               	movwf	___lwdiv@quotient+1,c
  1809  00138C  0E00               	movlw	0
  1810  00138E  6E05               	movwf	___lwdiv@quotient,c
  1811  001390  5003               	movf	___lwdiv@divisor,w,c
  1812  001392  1004               	iorwf	___lwdiv@divisor+1,w,c
  1813  001394  B4D8               	btfsc	status,2,c
  1814  001396  D01C               	goto	i2l786
  1815  001398  0E01               	movlw	1
  1816  00139A  6E07               	movwf	___lwdiv@counter,c
  1817  00139C  D004               	goto	i2l1605
  1818  00139E                     i2l1603:
  1819  00139E  90D8               	bcf	status,0,c
  1820  0013A0  3603               	rlcf	___lwdiv@divisor,f,c
  1821  0013A2  3604               	rlcf	___lwdiv@divisor+1,f,c
  1822  0013A4  2A07               	incf	___lwdiv@counter,f,c
  1823  0013A6                     i2l1605:
  1824  0013A6  AE04               	btfss	___lwdiv@divisor+1,7,c
  1825  0013A8  D7FA               	goto	i2l1603
  1826  0013AA                     i2l1607:
  1827  0013AA  90D8               	bcf	status,0,c
  1828  0013AC  3605               	rlcf	___lwdiv@quotient,f,c
  1829  0013AE  3606               	rlcf	___lwdiv@quotient+1,f,c
  1830  0013B0  5003               	movf	___lwdiv@divisor,w,c
  1831  0013B2  5C01               	subwf	___lwdiv@dividend,w,c
  1832  0013B4  5004               	movf	___lwdiv@divisor+1,w,c
  1833  0013B6  5802               	subwfb	___lwdiv@dividend+1,w,c
  1834  0013B8  A0D8               	btfss	status,0,c
  1835  0013BA  D005               	goto	i2l1615
  1836  0013BC  5003               	movf	___lwdiv@divisor,w,c
  1837  0013BE  5E01               	subwf	___lwdiv@dividend,f,c
  1838  0013C0  5004               	movf	___lwdiv@divisor+1,w,c
  1839  0013C2  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1840  0013C4  8005               	bsf	___lwdiv@quotient,0,c
  1841  0013C6                     i2l1615:
  1842  0013C6  90D8               	bcf	status,0,c
  1843  0013C8  3204               	rrcf	___lwdiv@divisor+1,f,c
  1844  0013CA  3203               	rrcf	___lwdiv@divisor,f,c
  1845  0013CC  2E07               	decfsz	___lwdiv@counter,f,c
  1846  0013CE  D7ED               	goto	i2l1607
  1847  0013D0                     i2l786:
  1848  0013D0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1849  0013D4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1850  0013D8  0012               	return		;funcret
  1851  0013DA                     __end_of___lwdiv:
  1852                           	opt stack 0
  1853                           pclatu	equ	0xFFB
  1854                           pclath	equ	0xFFA
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           intcon	equ	0xFF2
  1862                           fsr0h	equ	0xFEA
  1863                           fsr0l	equ	0xFE9
  1864                           wreg	equ	0xFE8
  1865                           fsr1h	equ	0xFE2
  1866                           fsr1l	equ	0xFE1
  1867                           postinc2	equ	0xFDE
  1868                           postdec2	equ	0xFDD
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8
  1872                           
  1873 ;; *************** function _lcdClear *****************
  1874 ;; Defined at:
  1875 ;;		line 74 in file "lcd.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg, status,2, status,0, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;Total ram usage:        0 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    2
  1896 ;; This function calls:
  1897 ;;		i2_lcdInst
  1898 ;; This function is called by:
  1899 ;;		_service
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text13
  1904  001560                     __ptext13:
  1905                           	opt stack 0
  1906  001560                     _lcdClear:
  1907                           	opt stack 24
  1908                           
  1909                           ;lcd.c: 75: lcdInst(0b00000001);
  1910                           
  1911                           ;incstack = 0
  1912  001560  0E01               	movlw	1
  1913  001562  EC7A  F00A         	call	i2_lcdInst
  1914  001566  0012               	return		;funcret
  1915  001568                     __end_of_lcdClear:
  1916                           	opt stack 0
  1917                           pclatu	equ	0xFFB
  1918                           pclath	equ	0xFFA
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           prodh	equ	0xFF4
  1924                           prodl	equ	0xFF3
  1925                           intcon	equ	0xFF2
  1926                           fsr0h	equ	0xFEA
  1927                           fsr0l	equ	0xFE9
  1928                           wreg	equ	0xFE8
  1929                           fsr1h	equ	0xFE2
  1930                           fsr1l	equ	0xFE1
  1931                           postinc2	equ	0xFDE
  1932                           postdec2	equ	0xFDD
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function i2_lcdInst *****************
  1938 ;; Defined at:
  1939 ;;		line 27 in file "lcd.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  data            1    wreg     unsigned char 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  data            1    3[COMRAM] unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg, status,2, status,0, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;Total ram usage:        2 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    1
  1960 ;; This function calls:
  1961 ;;		i2_lcdNibble
  1962 ;; This function is called by:
  1963 ;;		_lcdClear
  1964 ;;		_lcdNewline
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text14
  1969  0014F4                     __ptext14:
  1970                           	opt stack 0
  1971  0014F4                     i2_lcdInst:
  1972                           	opt stack 22
  1973                           
  1974                           ;incstack = 0
  1975                           ;i2lcdInst@data stored from wreg
  1976  0014F4  6E04               	movwf	i2lcdInst@data,c
  1977                           
  1978                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  1979  0014F6  948C               	bcf	3980,2,c	;volatile
  1980                           
  1981                           ;lcd.c: 29: _delay((unsigned long)((140)*(8000000/4000000.0)));
  1982  0014F8  0E5D               	movlw	93
  1983  0014FA                     i2u101_47:
  1984  0014FA  2EE8               	decfsz	wreg,f,c
  1985  0014FC  D7FE               	bra	i2u101_47
  1986  0014FE  F000               	nop	
  1987                           
  1988                           ;lcd.c: 30: lcdNibble(data);
  1989  001500  5004               	movf	i2lcdInst@data,w,c
  1990  001502  EC99  F009         	call	i2_lcdNibble
  1991                           
  1992                           ;lcd.c: 31: _delay((unsigned long)((1000)*(8000000/4000000.0)));
  1993  001506  0E03               	movlw	3
  1994  001508  6E03               	movwf	??i2_lcdInst& (0+255),c
  1995  00150A  0E98               	movlw	152
  1996  00150C                     i2u102_47:
  1997  00150C  2EE8               	decfsz	wreg,f,c
  1998  00150E  D7FE               	bra	i2u102_47
  1999  001510  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
  2000  001512  D7FC               	bra	i2u102_47
  2001  001514  0012               	return		;funcret
  2002  001516                     __end_ofi2_lcdInst:
  2003                           	opt stack 0
  2004                           pclatu	equ	0xFFB
  2005                           pclath	equ	0xFFA
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           prodh	equ	0xFF4
  2011                           prodl	equ	0xFF3
  2012                           intcon	equ	0xFF2
  2013                           fsr0h	equ	0xFEA
  2014                           fsr0l	equ	0xFE9
  2015                           wreg	equ	0xFE8
  2016                           fsr1h	equ	0xFE2
  2017                           fsr1l	equ	0xFE1
  2018                           postinc2	equ	0xFDE
  2019                           postdec2	equ	0xFDD
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function i2_lcdNibble *****************
  2025 ;; Defined at:
  2026 ;;		line 46 in file "lcd.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  data            1    wreg     unsigned char 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  data            1    1[COMRAM] unsigned char 
  2031 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;Total ram usage:        2 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_putch
  2051 ;;		i2_lcdInst
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text15
  2056  001332                     __ptext15:
  2057                           	opt stack 0
  2058  001332                     i2_lcdNibble:
  2059                           	opt stack 24
  2060                           
  2061                           ;incstack = 0
  2062                           ;i2lcdNibble@data stored from wreg
  2063  001332  6E02               	movwf	i2lcdNibble@data,c
  2064                           
  2065                           ;lcd.c: 48: char temp = data & 0xF0;
  2066  001334  5002               	movf	i2lcdNibble@data,w,c
  2067  001336  0BF0               	andlw	240
  2068  001338  6E01               	movwf	i2lcdNibble@temp,c
  2069                           
  2070                           ;lcd.c: 49: LATD = LATD & 0x0F;
  2071  00133A  508C               	movf	3980,w,c	;volatile
  2072  00133C  0B0F               	andlw	15
  2073  00133E  6E8C               	movwf	3980,c	;volatile
  2074                           
  2075                           ;lcd.c: 50: LATD = temp | LATD;
  2076  001340  5001               	movf	i2lcdNibble@temp,w,c
  2077  001342  108C               	iorwf	3980,w,c	;volatile
  2078  001344  6E8C               	movwf	3980,c	;volatile
  2079                           
  2080                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  2081  001346  968C               	bcf	3980,3,c	;volatile
  2082                           
  2083                           ;lcd.c: 53: _delay((unsigned long)((600)*(8000000/4000000.0)));
  2084  001348  0EF0               	movlw	240
  2085  00134A                     i2u103_47:
  2086  00134A  D000               	nop2	
  2087  00134C  2EE8               	decfsz	wreg,f,c
  2088  00134E  D7FD               	bra	i2u103_47
  2089                           
  2090                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  2091  001350  868C               	bsf	3980,3,c	;volatile
  2092                           
  2093                           ;lcd.c: 55: _delay((unsigned long)((600)*(8000000/4000000.0)));
  2094  001352  0EF0               	movlw	240
  2095  001354                     i2u104_47:
  2096  001354  D000               	nop2	
  2097  001356  2EE8               	decfsz	wreg,f,c
  2098  001358  D7FD               	bra	i2u104_47
  2099                           
  2100                           ;lcd.c: 58: data = data << 4;
  2101  00135A  3802               	swapf	i2lcdNibble@data,w,c
  2102  00135C  0BF0               	andlw	240
  2103  00135E  6E02               	movwf	i2lcdNibble@data,c
  2104                           
  2105                           ;lcd.c: 60: temp = data & 0xF0;
  2106  001360  5002               	movf	i2lcdNibble@data,w,c
  2107  001362  0BF0               	andlw	240
  2108  001364  6E01               	movwf	i2lcdNibble@temp,c
  2109                           
  2110                           ;lcd.c: 61: LATD = LATD & 0x0F;
  2111  001366  508C               	movf	3980,w,c	;volatile
  2112  001368  0B0F               	andlw	15
  2113  00136A  6E8C               	movwf	3980,c	;volatile
  2114                           
  2115                           ;lcd.c: 62: LATD = temp | LATD;
  2116  00136C  5001               	movf	i2lcdNibble@temp,w,c
  2117  00136E  108C               	iorwf	3980,w,c	;volatile
  2118  001370  6E8C               	movwf	3980,c	;volatile
  2119                           
  2120                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  2121  001372  968C               	bcf	3980,3,c	;volatile
  2122                           
  2123                           ;lcd.c: 65: _delay((unsigned long)((600)*(8000000/4000000.0)));
  2124  001374  0EF0               	movlw	240
  2125  001376                     i2u105_47:
  2126  001376  D000               	nop2	
  2127  001378  2EE8               	decfsz	wreg,f,c
  2128  00137A  D7FD               	bra	i2u105_47
  2129                           
  2130                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  2131  00137C  868C               	bsf	3980,3,c	;volatile
  2132                           
  2133                           ;lcd.c: 67: _delay((unsigned long)((600)*(8000000/4000000.0)));
  2134  00137E  0EF0               	movlw	240
  2135  001380                     i2u106_47:
  2136  001380  D000               	nop2	
  2137  001382  2EE8               	decfsz	wreg,f,c
  2138  001384  D7FD               	bra	i2u106_47
  2139  001386  0012               	return		;funcret
  2140  001388                     __end_ofi2_lcdNibble:
  2141                           	opt stack 0
  2142                           pclatu	equ	0xFFB
  2143                           pclath	equ	0xFFA
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           prodh	equ	0xFF4
  2149                           prodl	equ	0xFF3
  2150                           intcon	equ	0xFF2
  2151                           fsr0h	equ	0xFEA
  2152                           fsr0l	equ	0xFE9
  2153                           wreg	equ	0xFE8
  2154                           fsr1h	equ	0xFE2
  2155                           fsr1l	equ	0xFE1
  2156                           postinc2	equ	0xFDE
  2157                           postdec2	equ	0xFDD
  2158                           fsr2h	equ	0xFDA
  2159                           fsr2l	equ	0xFD9
  2160                           status	equ	0xFD8
  2161                           pclatu	equ	0xFFB
  2162                           pclath	equ	0xFFA
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           intcon	equ	0xFF2
  2170                           fsr0h	equ	0xFEA
  2171                           fsr0l	equ	0xFE9
  2172                           wreg	equ	0xFE8
  2173                           fsr1h	equ	0xFE2
  2174                           fsr1l	equ	0xFE1
  2175                           postinc2	equ	0xFDE
  2176                           postdec2	equ	0xFDD
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181                           	psect	rparam
  2182  0000                     pclatu	equ	0xFFB
  2183                           pclath	equ	0xFFA
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           intcon	equ	0xFF2
  2191                           fsr0h	equ	0xFEA
  2192                           fsr0l	equ	0xFE9
  2193                           wreg	equ	0xFE8
  2194                           fsr1h	equ	0xFE2
  2195                           fsr1l	equ	0xFE1
  2196                           postinc2	equ	0xFDE
  2197                           postdec2	equ	0xFDD
  2198                           fsr2h	equ	0xFDA
  2199                           fsr2l	equ	0xFD9
  2200                           status	equ	0xFD8
  2201                           
  2202                           	psect	temp
  2203  000031                     btemp:
  2204                           	opt stack 0
  2205  000031                     	ds	1
  2206  0000                     int$flags	set	btemp
  2207                           pclatu	equ	0xFFB
  2208                           pclath	equ	0xFFA
  2209                           tblptru	equ	0xFF8
  2210                           tblptrh	equ	0xFF7
  2211                           tblptrl	equ	0xFF6
  2212                           tablat	equ	0xFF5
  2213                           prodh	equ	0xFF4
  2214                           prodl	equ	0xFF3
  2215                           intcon	equ	0xFF2
  2216                           fsr0h	equ	0xFEA
  2217                           fsr0l	equ	0xFE9
  2218                           wreg	equ	0xFE8
  2219                           fsr1h	equ	0xFE2
  2220                           fsr1l	equ	0xFE1
  2221                           postinc2	equ	0xFDE
  2222                           postdec2	equ	0xFDD
  2223                           fsr2h	equ	0xFDA
  2224                           fsr2l	equ	0xFD9
  2225                           status	equ	0xFD8


Data Sizes:
    Strings     39
    Constant    42
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     46      48
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_5(CODE[7]), STR_4(CODE[8]), STR_3(CODE[3]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_initLCD
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_printf
    _printf->___lwmod
    _lcdNewline->i2_lcdInst
    ___lwmod->___lwdiv
    _lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     300
                            _initLCD
                             _initT0
                            _startT0
 ---------------------------------------------------------------------------------
 (1) _startT0                                              2     0      2     210
                                             41 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initT0                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             45 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              2     2      0      90
                                             43 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             41 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _service                                             14    14      0    2157
                                             27 COMRAM    14    14      0
                           _lcdClear
                             _printf
                          i2_startT0
 ---------------------------------------------------------------------------------
 (5) i2_startT0                                            2     0      2      70
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _printf                                              24    18      6    1952
                                             12 COMRAM    15     9      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0     292
                                              4 COMRAM     1     1      0
                         _lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) _lcdNewline                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _lcdClear                                             0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initT0
   _startT0

 _service (ROOT)
   _lcdClear
     i2_lcdInst
       i2_lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
   i2_startT0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2E      30       1       38.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      30      34        0.0%
DATA                 0      0      30       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 26 21:57:52 2017

                         _i 002F                          l48 1426                 __CFG_BORV$3 000000  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000                __CFG_CPB$OFF 000000  
                       _PEN 007E2A                __CFG_CPD$OFF 000000                         _SEN 007E28  
                       u927 142E                         u937 1462                         u947 14B6  
                       u957 14C8                         u967 12F4                         u977 12FE  
                       u987 1320                         u997 132A                         wreg 000FE8  
              __CFG_LVP$OFF 000000                __CFG_WDT$OFF 000000                        _EEIF 007D0C  
                      STR_1 1050                        STR_2 104E                        STR_3 104B  
                      STR_4 103C                        STR_5 1044                        STR_6 102B  
                      _LATA 000F89                        _LATB 000F8A                        _LATC 000F8B  
                      _LATD 000F8C                        _LATE 000F8D                        _PEIE 007F96  
                      _RCEN 007E2B                        i2l57 12A0                        i2l78 14E2  
                      _RSEN 007E29                        _main 13DA                        _keys 1001  
                      fsr0h 000FEA                        fsr1h 000FE2                        fsr2h 000FDA  
                      fsr0l 000FE9                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 0031                        prodh 000FF4                        prodl 000FF3  
                      start 000E               __CFG_IESO$OFF 000000               __CFG_MCLRE$ON 000000  
              ___param_bank 000000                 i2_lcdNibble 1332                       ?_main 0001  
                     _ACKEN 007E2C                       _ACKDT 007E2D                       _EEADR 000FA9  
                     _T0CON 000FD5             __end_of___lwdiv 13DA             __end_of___lwmod 14B0  
                     i2l358 10A6                       i2l786 13D0                       i2l796 14A6  
                     _TMR0H 000FD7                       _TMR0L 000FD6                       _PORTA 000F80  
                     _PORTB 000F81                       _PORTC 000F82                       _PORTD 000F83  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000             __end_of_lcdInst 14D2              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000             __end_of_initLCD 146E              __CFG_EBTRB$OFF 000000  
           __end_of_dpowers 101C                       _putch 14D2                       pclath 000FFA  
                     tablat 000FF5             __end_of_service 12DC             __end_of_startT0 152A  
                     status 000FD8              __CFG_PBADEN$ON 000000             __initialization 153E  
        __size_ofi2_lcdInst 0022                __end_of_main 1428                __end_of_keys 1012  
                    ??_main 002F               __activetblptr 000002          __size_ofi2_startT0 0014  
             i2startT0@time 0001                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0                      _ADRESH 000FC4                      _EEADRH 000FAA  
                    _ADRESL 000FC3                      _EEDATA 000FA8                      _EECON1 000FA6  
                    _EECON2 000FA7             i2lcdNibble@data 0002                      ?_putch 0001  
           i2lcdNibble@temp 0001                      i2l1603 139E                      i2l1605 13A6  
                    i2l1701 1176                      i2l1615 13C6                      i2l1607 13AA  
                    i2l1631 149C                      i2l1623 147C                      i2l1703 11BA  
                    i2l1711 1210                      i2l1625 1484                      i2l1713 1216  
                    i2l1641 106E                      i2l1627 1488                      i2l1643 1074  
                    i2l1715 121E                      i2l1709 1200                      i2l1637 105E  
                    i2l1663 10EE                      i2l1647 1078                      i2l1665 10F2  
                    i2l1659 10D4                      i2l1677 111E                      i2l1693 114E  
                    i2l1679 1122                      i2l1695 115E                      i2l1699 1170  
                    _TMR0IE 007F95                      _TMR0IF 007F92                      _SSPADD 000FC8  
                    _TRISC3 007CA3                      _TRISC4 007CA4                      _SSPBUF 000FC9  
          __end_of_lcdClear 1568              __CFG_XINST$OFF 000000              __CFG_STVREN$ON 000000  
                 ??___lwdiv 0005                   ??___lwmod 000C                      _initT0 1550  
                 ??_lcdInst 002C                      _printf 1054                   ??_initLCD 002E  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_service 001C                   ??_startT0 002C  
         __end_ofi2_lcdInst 1516                  __accesstop 0080     __end_of__initialization 1542  
             ___rparam_used 000001           __end_ofi2_startT0 153E              __pcstackCOMRAM 0001  
             __end_of_putch 14F4          __size_of_lcdNibble 0056                     ??_putch 0005  
              ?i2_lcdNibble 0001                     ?_initT0 0001                  _lcdNewline 1558  
                   ?_printf 000D                   ?_lcdClear 0001                     _SSPCON1 000FC6  
                   _SSPCON2 000FC5                     _SSPSTAT 000FC7           __end_of_lcdNibble 1332  
                   __Hparam 0000                     __Lparam 0000                     ___lwdiv 1388  
                   ___lwmod 146E                __psmallconst 1000             __size_of_initT0 0008  
                   __pcinit 153E                     __ramtop 1000  __end_oftestFrequency@F2960 102B  
                   _lcdInst 14B0                     __ptext0 13DA                     __ptext1 1516  
                   __ptext2 1550                     __ptext3 1428                     __ptext4 14B0  
                   __ptext5 12DC                     __ptext7 152A                     __ptext8 1054  
                   __ptext9 14D2             __size_of_printf 01E4                     _initLCD 1428  
         __end_of_hexpowers 1024                     _dpowers 1012                  ??_lcdClear 0005  
                   _service 0008                     _startT0 1516              __pintcode_body 1238  
      end_of_initialization 1542               __Lmediumconst 0000                     int_func 1238  
                   printf@c 001B                     printf@f 000D                     postdec2 000FDD  
                   postinc2 000FDE                 ?_lcdNewline 0001                   _PORTBbits 000F81  
                 i2_lcdInst 14F4                   i2_startT0 152A        __size_ofi2_lcdNibble 0056  
             i2lcdInst@data 0004              __end_of_initT0 1558              __end_of_printf 1238  
       start_initialization 153E                 startT0@time 002A                  ?i2_lcdInst 0001  
       __size_of_lcdNewline 0008                  ?i2_startT0 0001                    ??_initT0 002A  
          __CFG_LPT1OSC$OFF 000000                    ??_printf 0013                 __pbssCOMRAM 002F  
         __size_of_lcdClear 0008            ___lwdiv@dividend 0001           __CFG_CCP2MX$PORTC 000000  
                 __pintcode 0008                   _lcdNibble 12DC                    ?___lwdiv 0001  
                  ?___lwmod 0008                    ?_lcdInst 0001                    ?_initLCD 0001  
               __smallconst 1000                    ?_service 0001                   _hexpowers 101C  
                  ?_startT0 002A            ___lwdiv@quotient 0005          testFrequency@F2960 1024  
            __size_of_putch 0022                 ??i2_lcdInst 0003                    _LATDbits 000F8C  
                  i2u100_47 14E6                    i2u101_47 14FA                    i2u102_47 150C  
                  i2u103_47 134A                    i2u104_47 1354                    i2u105_47 1376  
                  i2u106_47 1380            __CFG_WDTPS$32768 000000                 ??i2_startT0 0003  
                ?_lcdNibble 0001                ??_lcdNewline 0005               lcdNibble@data 002B  
                printf@flag 0018               lcdNibble@temp 002A                  printf@prec 0017  
        __end_of_lcdNewline 1560                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000            __size_of___lwdiv 0052            __size_of___lwmod 0042  
          __size_of_lcdInst 0022            __size_of_initLCD 0046                    _lcdClear 1560  
           ___lwdiv@divisor 0003             ___lwdiv@counter 0007                    __ptext10 1558  
                  __ptext11 146E                    __ptext12 1388                    __ptext13 1560  
                  __ptext14 14F4                    __ptext15 1332            __size_of_service 12D4  
          __size_of_startT0 0014               __size_of_main 004E               ??i2_lcdNibble 0001  
               ??_lcdNibble 002A                    int$flags 0031                   printf@idx 0014  
                 printf@val 0019                   putch@data 0005                  _INTCONbits 000FF2  
                  intlevel2 0000            ___lwmod@dividend 0008                    printf@ap 0015  
               lcdInst@data 002D         __end_ofi2_lcdNibble 1388             ___lwmod@divisor 000A  
           ___lwmod@counter 000C  
