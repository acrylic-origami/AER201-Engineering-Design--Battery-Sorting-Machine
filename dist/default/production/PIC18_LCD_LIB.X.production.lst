

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 18 17:42:21 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           ; Version 1.40
    79                           ; Generated 01/12/2016 GMT
    80                           ; 
    81                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F4620 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  002DEE                     __pidataCOMRAM:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _redirectAngle_9V
   118  002DEE  0064               	dw	100
   119                           
   120                           ;initializer for _redirectAngle_AA
   121  002DF0  003C               	dw	60
   122                           
   123                           ;initializer for _redirectAngle_C
   124  002DF2  0050               	dw	80
   125                           
   126                           ;initializer for _redirectAngle_OTHER
   127  002DF4  0078               	dw	120
   128                           
   129                           ;initializer for _padPin1
   130  002DF6  0000               	dw	0
   131  002DF8  0001               	dw	1
   132                           
   133                           ;initializer for _padPin2
   134  002DFA  0000               	dw	0
   135  002DFC  0002               	dw	2
   136                           
   137                           	psect	idataBANK0
   138  002DBE                     __pidataBANK0:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _padAngle_CLOSE
   142  002DBE  0046               	dw	70
   143                           
   144                           ;initializer for _padAngle_NEUTRAL
   145  002DC0  005A               	dw	90
   146                           
   147                           ;initializer for _padAngle_OPEN
   148  002DC2  00B4               	dw	180
   149                           
   150                           ;initializer for _conveyorServo
   151  002DC4  0000               	dw	0
   152  002DC6  0002               	dw	2
   153  002DC8  0001               	dw	1
   154                           
   155                           ;initializer for _padServo
   156  002DCA  0003               	dw	3
   157  002DCC  0002               	dw	2
   158  002DCE  0002               	dw	2
   159                           
   160                           ;initializer for _AA_float
   161  002DD0  0000               	dw	0
   162  002DD2  0003               	dw	3
   163                           
   164                           ;initializer for _cylinderMotor
   165  002DD4  0002               	dw	2
   166  002DD6  0000               	dw	0
   167                           
   168                           	psect	idataBANK1
   169  002DFE                     __pidataBANK1:
   170                           	opt stack 0
   171                           
   172                           ;initializer for sortBattery@F3131
   173  002DFE  0064               	dw	100
   174  002E00  005F               	dw	95
   175  002E02  005A               	dw	90
   176  002E04  0055               	dw	85
   177                           
   178                           ;initializer for _redirectingServo
   179  002E06  0001               	dw	1
   180  002E08  0002               	dw	2
   181  002E0A  0003               	dw	3
   182                           
   183                           	psect	mediumconst
   184  00FDD2                     __pmediumconst:
   185                           	opt stack 0
   186  00FDD2  00                 	db	0
   187  00FDD3                     _dpowers:
   188                           	opt stack 0
   189  00FDD3  0001               	dw	1
   190  00FDD5  0000               	dw	0
   191  00FDD7  000A               	dw	10
   192  00FDD9  0000               	dw	0
   193  00FDDB  0064               	dw	100
   194  00FDDD  0000               	dw	0
   195  00FDDF  03E8               	dw	1000
   196  00FDE1  0000               	dw	0
   197  00FDE3  2710               	dw	10000
   198  00FDE5  0000               	dw	0
   199  00FDE7  86A0               	dw	34464
   200  00FDE9  0001               	dw	1
   201  00FDEB  4240               	dw	16960
   202  00FDED  000F               	dw	15
   203  00FDEF  9680               	dw	38528
   204  00FDF1  0098               	dw	152
   205  00FDF3  E100               	dw	57600
   206  00FDF5  05F5               	dw	1525
   207  00FDF7  CA00               	dw	51712
   208  00FDF9  3B9A               	dw	15258
   209  00FDFB                     __end_of_dpowers:
   210                           	opt stack 0
   211  00FDFB                     __npowers_:
   212                           	opt stack 0
   213  00FDFB  00                 	db	0
   214  00FDFC  80                 	db	128
   215  00FDFD  3F                 	db	63
   216  00FDFE  CD                 	db	205
   217  00FDFF  CC                 	db	204
   218  00FE00  3D                 	db	61
   219  00FE01  D7                 	db	215
   220  00FE02  23                 	db	35
   221  00FE03  3C                 	db	60
   222  00FE04  12                 	db	18
   223  00FE05  83                 	db	131
   224  00FE06  3A                 	db	58
   225  00FE07  B7                 	db	183
   226  00FE08  D1                 	db	209
   227  00FE09  38                 	db	56
   228  00FE0A  C6                 	db	198
   229  00FE0B  27                 	db	39
   230  00FE0C  37                 	db	55
   231  00FE0D  38                 	db	56
   232  00FE0E  86                 	db	134
   233  00FE0F  35                 	db	53
   234  00FE10  C0                 	db	192
   235  00FE11  D6                 	db	214
   236  00FE12  33                 	db	51
   237  00FE13  CC                 	db	204
   238  00FE14  2B                 	db	43
   239  00FE15  32                 	db	50
   240  00FE16  70                 	db	112
   241  00FE17  89                 	db	137
   242  00FE18  30                 	db	48
   243  00FE19  E7                 	db	231
   244  00FE1A  DB                 	db	219
   245  00FE1B  2E                 	db	46
   246  00FE1C  E5                 	db	229
   247  00FE1D  3C                 	db	60
   248  00FE1E  1E                 	db	30
   249  00FE1F  42                 	db	66
   250  00FE20  A2                 	db	162
   251  00FE21  0D                 	db	13
   252  00FE22                     __end_of__npowers_:
   253                           	opt stack 0
   254  00FE22                     __powers_:
   255                           	opt stack 0
   256  00FE22  00                 	db	0
   257  00FE23  80                 	db	128
   258  00FE24  3F                 	db	63
   259  00FE25  00                 	db	0
   260  00FE26  20                 	db	32
   261  00FE27  41                 	db	65
   262  00FE28  00                 	db	0
   263  00FE29  C8                 	db	200
   264  00FE2A  42                 	db	66
   265  00FE2B  00                 	db	0
   266  00FE2C  7A                 	db	122
   267  00FE2D  44                 	db	68
   268  00FE2E  40                 	db	64
   269  00FE2F  1C                 	db	28
   270  00FE30  46                 	db	70
   271  00FE31  50                 	db	80
   272  00FE32  C3                 	db	195
   273  00FE33  47                 	db	71
   274  00FE34  24                 	db	36
   275  00FE35  74                 	db	116
   276  00FE36  49                 	db	73
   277  00FE37  97                 	db	151
   278  00FE38  18                 	db	24
   279  00FE39  4B                 	db	75
   280  00FE3A  BC                 	db	188
   281  00FE3B  BE                 	db	190
   282  00FE3C  4C                 	db	76
   283  00FE3D  6B                 	db	107
   284  00FE3E  6E                 	db	110
   285  00FE3F  4E                 	db	78
   286  00FE40  03                 	db	3
   287  00FE41  15                 	db	21
   288  00FE42  50                 	db	80
   289  00FE43  79                 	db	121
   290  00FE44  AD                 	db	173
   291  00FE45  60                 	db	96
   292  00FE46  F3                 	db	243
   293  00FE47  49                 	db	73
   294  00FE48  71                 	db	113
   295  00FE49                     __end_of__powers_:
   296                           	opt stack 0
   297  00FE49                     _hexpowers:
   298                           	opt stack 0
   299  00FE49  0001               	dw	1
   300  00FE4B  0000               	dw	0
   301  00FE4D  0010               	dw	16
   302  00FE4F  0000               	dw	0
   303  00FE51  0100               	dw	256
   304  00FE53  0000               	dw	0
   305  00FE55  1000               	dw	4096
   306  00FE57  0000               	dw	0
   307  00FE59  0000               	dw	0
   308  00FE5B  0001               	dw	1
   309  00FE5D  0000               	dw	0
   310  00FE5F  0010               	dw	16
   311  00FE61  0000               	dw	0
   312  00FE63  0100               	dw	256
   313  00FE65  0000               	dw	0
   314  00FE67  1000               	dw	4096
   315  00FE69                     __end_of_hexpowers:
   316                           	opt stack 0
   317  00FE69                     _keys:
   318                           	opt stack 0
   319  00FE69  31                 	db	49
   320  00FE6A  32                 	db	50
   321  00FE6B  33                 	db	51
   322  00FE6C  41                 	db	65
   323  00FE6D  34                 	db	52
   324  00FE6E  35                 	db	53
   325  00FE6F  36                 	db	54
   326  00FE70  42                 	db	66
   327  00FE71  37                 	db	55
   328  00FE72  38                 	db	56
   329  00FE73  39                 	db	57
   330  00FE74  43                 	db	67
   331  00FE75  2A                 	db	42
   332  00FE76  30                 	db	48
   333  00FE77  23                 	db	35
   334  00FE78  44                 	db	68
   335  00FE79  00                 	db	0
   336  00FE7A                     __end_of_keys:
   337                           	opt stack 0
   338  00FE7A                     _happynewyear:
   339                           	opt stack 0
   340  00FE7A  00                 	db	0
   341  00FE7B  59                 	db	89
   342  00FE7C  03                 	db	3
   343  00FE7D  01                 	db	1
   344  00FE7E  13                 	db	19
   345  00FE7F  04                 	db	4
   346  00FE80  17                 	db	23
   347  00FE81                     __end_of_happynewyear:
   348                           	opt stack 0
   349  0000                     _ADCON0	set	4034
   350  0000                     _ADCON1	set	4033
   351  0000                     _ADCON2	set	4032
   352  0000                     _ADRESH	set	4036
   353  0000                     _ADRESL	set	4035
   354  0000                     _EEADR	set	4009
   355  0000                     _EEADRH	set	4010
   356  0000                     _EECON1	set	4006
   357  0000                     _EECON2	set	4007
   358  0000                     _EEDATA	set	4008
   359  0000                     _INTCONbits	set	4082
   360  0000                     _LATA	set	3977
   361  0000                     _LATB	set	3978
   362  0000                     _LATC	set	3979
   363  0000                     _LATD	set	3980
   364  0000                     _LATDbits	set	3980
   365  0000                     _LATE	set	3981
   366  0000                     _PORTA	set	3968
   367  0000                     _PORTB	set	3969
   368  0000                     _PORTBbits	set	3969
   369  0000                     _PORTC	set	3970
   370  0000                     _PORTD	set	3971
   371  0000                     _SSPADD	set	4040
   372  0000                     _SSPBUF	set	4041
   373  0000                     _SSPCON1	set	4038
   374  0000                     _SSPCON2	set	4037
   375  0000                     _SSPSTAT	set	4039
   376  0000                     _T0CON	set	4053
   377  0000                     _T1CON	set	4045
   378  0000                     _T2CON	set	4042
   379  0000                     _T3CON	set	4017
   380  0000                     _TMR0H	set	4055
   381  0000                     _TMR0L	set	4054
   382  0000                     _TMR1H	set	4047
   383  0000                     _TMR1L	set	4046
   384  0000                     _TMR3H	set	4019
   385  0000                     _TMR3L	set	4018
   386  0000                     _TRISA	set	3986
   387  0000                     _TRISB	set	3987
   388  0000                     _TRISC	set	3988
   389  0000                     _TRISD	set	3989
   390  0000                     _TRISE	set	3990
   391  0000                     _ACKDT	set	32301
   392  0000                     _ACKEN	set	32300
   393  0000                     _EEIF	set	32012
   394  0000                     _INT0IE	set	32660
   395  0000                     _INT0IF	set	32657
   396  0000                     _INT1IE	set	32643
   397  0000                     _INT1IF	set	32640
   398  0000                     _PEIE	set	32662
   399  0000                     _PEN	set	32298
   400  0000                     _RCEN	set	32299
   401  0000                     _RSEN	set	32297
   402  0000                     _SEN	set	32296
   403  0000                     _TMR0IE	set	32661
   404  0000                     _TMR0IF	set	32658
   405  0000                     _TMR1IE	set	31976
   406  0000                     _TMR1IF	set	31984
   407  0000                     _TMR2IF	set	31985
   408  0000                     _TMR3IE	set	32001
   409  0000                     _TMR3IF	set	32009
   410  0000                     _TRISC3	set	31907
   411  0000                     _TRISC4	set	31908
   412  00FE81                     STR_8:
   413  00FE81  63                 	db	99	;'c'
   414  00FE82  6F                 	db	111	;'o'
   415  00FE83  6E                 	db	110	;'n'
   416  00FE84  76                 	db	118	;'v'
   417  00FE85  65                 	db	101	;'e'
   418  00FE86  79                 	db	121	;'y'
   419  00FE87  6F                 	db	111	;'o'
   420  00FE88  72                 	db	114	;'r'
   421  00FE89  20                 	db	32
   422  00FE8A  26                 	db	38
   423  00FE8B  20                 	db	32
   424  00FE8C  63                 	db	99	;'c'
   425  00FE8D  79                 	db	121	;'y'
   426  00FE8E  6C                 	db	108	;'l'
   427  00FE8F  69                 	db	105	;'i'
   428  00FE90  6E                 	db	110	;'n'
   429  00FE91  64                 	db	100	;'d'
   430  00FE92  65                 	db	101	;'e'
   431  00FE93  72                 	db	114	;'r'
   432  00FE94  20                 	db	32
   433  00FE95  6F                 	db	111	;'o'
   434  00FE96  6E                 	db	110	;'n'
   435  00FE97  3F                 	db	63	;'?'
   436  00FE98  00                 	db	0
   437  00FE99                     STR_5:
   438  00FE99  70                 	db	112	;'p'
   439  00FE9A  69                 	db	105	;'i'
   440  00FE9B  63                 	db	99	;'c'
   441  00FE9C  6B                 	db	107	;'k'
   442  00FE9D  20                 	db	32
   443  00FE9E  61                 	db	97	;'a'
   444  00FE9F  6E                 	db	110	;'n'
   445  00FEA0  67                 	db	103	;'g'
   446  00FEA1  6C                 	db	108	;'l'
   447  00FEA2  65                 	db	101	;'e'
   448  00FEA3  3A                 	db	58	;':'
   449  00FEA4  20                 	db	32
   450  00FEA5  31                 	db	49	;'1'
   451  00FEA6  2C                 	db	44
   452  00FEA7  32                 	db	50	;'2'
   453  00FEA8  2C                 	db	44
   454  00FEA9  33                 	db	51	;'3'
   455  00FEAA  2C                 	db	44
   456  00FEAB  34                 	db	52	;'4'
   457  00FEAC  3F                 	db	63	;'?'
   458  00FEAD  00                 	db	0
   459  00FEAE                     STR_2:
   460  00FEAE  69                 	db	105	;'i'
   461  00FEAF  6E                 	db	110	;'n'
   462  00FEB0  74                 	db	116	;'t'
   463  00FEB1  65                 	db	101	;'e'
   464  00FEB2  72                 	db	114	;'r'
   465  00FEB3  72                 	db	114	;'r'
   466  00FEB4  75                 	db	117	;'u'
   467  00FEB5  70                 	db	112	;'p'
   468  00FEB6  74                 	db	116	;'t'
   469  00FEB7  21                 	db	33
   470  00FEB8  21                 	db	33
   471  00FEB9  21                 	db	33
   472  00FEBA  0A                 	db	10
   473  00FEBB  63                 	db	99	;'c'
   474  00FEBC  6C                 	db	108	;'l'
   475  00FEBD  6F                 	db	111	;'o'
   476  00FEBE  73                 	db	115	;'s'
   477  00FEBF  65                 	db	101	;'e'
   478  00FEC0  3F                 	db	63	;'?'
   479  00FEC1  00                 	db	0
   480  00FEC2                     STR_17:
   481  00FEC2  25                 	db	37
   482  00FEC3  63                 	db	99	;'c'
   483  00FEC4  29                 	db	41
   484  00FEC5  20                 	db	32
   485  00FEC6  74                 	db	116	;'t'
   486  00FEC7  69                 	db	105	;'i'
   487  00FEC8  6D                 	db	109	;'m'
   488  00FEC9  65                 	db	101	;'e'
   489  00FECA  20                 	db	32
   490  00FECB  20                 	db	32
   491  00FECC  3C                 	db	60	;'<'
   492  00FECD  41                 	db	65	;'A'
   493  00FECE  20                 	db	32
   494  00FECF  20                 	db	32
   495  00FED0  20                 	db	32
   496  00FED1  20                 	db	32
   497  00FED2  20                 	db	32
   498  00FED3  0A                 	db	10
   499  00FED4  00                 	db	0
   500  00FED5                     STR_13:
   501  00FED5  73                 	db	115	;'s'
   502  00FED6  74                 	db	116	;'t'
   503  00FED7  61                 	db	97	;'a'
   504  00FED8  72                 	db	114	;'r'
   505  00FED9  74                 	db	116	;'t'
   506  00FEDA  20                 	db	32
   507  00FEDB  20                 	db	32
   508  00FEDC  20                 	db	32
   509  00FEDD  3C                 	db	60	;'<'
   510  00FEDE  42                 	db	66	;'B'
   511  00FEDF  20                 	db	32
   512  00FEE0  20                 	db	32
   513  00FEE1  20                 	db	32
   514  00FEE2  20                 	db	32
   515  00FEE3  20                 	db	32
   516  00FEE4  20                 	db	32
   517  00FEE5  0A                 	db	10
   518  00FEE6  00                 	db	0
   519  00FEE7                     STR_11:
   520  00FEE7  20                 	db	32
   521  00FEE8  20                 	db	32
   522  00FEE9  68                 	db	104	;'h'
   523  00FEEA  68                 	db	104	;'h'
   524  00FEEB  3A                 	db	58	;':'
   525  00FEEC  6D                 	db	109	;'m'
   526  00FEED  6D                 	db	109	;'m'
   527  00FEEE  3A                 	db	58	;':'
   528  00FEEF  73                 	db	115	;'s'
   529  00FEF0  73                 	db	115	;'s'
   530  00FEF1  20                 	db	32
   531  00FEF2  20                 	db	32
   532  00FEF3  20                 	db	32
   533  00FEF4  20                 	db	32
   534  00FEF5  20                 	db	32
   535  00FEF6  20                 	db	32
   536  00FEF7  0A                 	db	10
   537  00FEF8  00                 	db	0
   538  00FEF9                     STR_15:
   539  00FEF9  73                 	db	115	;'s'
   540  00FEFA  65                 	db	101	;'e'
   541  00FEFB  6C                 	db	108	;'l'
   542  00FEFC  65                 	db	101	;'e'
   543  00FEFD  63                 	db	99	;'c'
   544  00FEFE  74                 	db	116	;'t'
   545  00FEFF  20                 	db	32
   546  00FF00  72                 	db	114	;'r'
   547  00FF01  75                 	db	117	;'u'
   548  00FF02  6E                 	db	110	;'n'
   549  00FF03  3A                 	db	58	;':'
   550  00FF04  20                 	db	32
   551  00FF05  20                 	db	32
   552  00FF06  20                 	db	32
   553  00FF07  20                 	db	32
   554  00FF08  20                 	db	32
   555  00FF09  0A                 	db	10
   556  00FF0A  00                 	db	0
   557  00FF0B                     STR_19:
   558  00FF0B  74                 	db	116	;'t'
   559  00FF0C  69                 	db	105	;'i'
   560  00FF0D  6D                 	db	109	;'m'
   561  00FF0E  65                 	db	101	;'e'
   562  00FF0F  3A                 	db	58	;':'
   563  00FF10  20                 	db	32
   564  00FF11  6E                 	db	110	;'n'
   565  00FF12  6E                 	db	110	;'n'
   566  00FF13  6E                 	db	110	;'n'
   567  00FF14  20                 	db	32
   568  00FF15  73                 	db	115	;'s'
   569  00FF16  65                 	db	101	;'e'
   570  00FF17  63                 	db	99	;'c'
   571  00FF18  20                 	db	32
   572  00FF19  20                 	db	32
   573  00FF1A  20                 	db	32
   574  00FF1B  0A                 	db	10
   575  00FF1C  00                 	db	0
   576  00FF1D                     STR_21:
   577  00FF1D  5B                 	db	91	;'['
   578  00FF1E  41                 	db	65	;'A'
   579  00FF1F  41                 	db	65	;'A'
   580  00FF20  2C                 	db	44
   581  00FF21  39                 	db	57	;'9'
   582  00FF22  56                 	db	86	;'V'
   583  00FF23  2C                 	db	44
   584  00FF24  43                 	db	67	;'C'
   585  00FF25  2C                 	db	44
   586  00FF26  6F                 	db	111	;'o'
   587  00FF27  74                 	db	116	;'t'
   588  00FF28  68                 	db	104	;'h'
   589  00FF29  65                 	db	101	;'e'
   590  00FF2A  72                 	db	114	;'r'
   591  00FF2B  5D                 	db	93	;']'
   592  00FF2C  20                 	db	32
   593  00FF2D  0A                 	db	10
   594  00FF2E  00                 	db	0
   595  00FF2F                     STR_23:
   596  00FF2F  30                 	db	48	;'0'
   597  00FF30  31                 	db	49	;'1'
   598  00FF31  32                 	db	50	;'2'
   599  00FF32  33                 	db	51	;'3'
   600  00FF33  34                 	db	52	;'4'
   601  00FF34  35                 	db	53	;'5'
   602  00FF35  36                 	db	54	;'6'
   603  00FF36  37                 	db	55	;'7'
   604  00FF37  38                 	db	56	;'8'
   605  00FF38  39                 	db	57	;'9'
   606  00FF39  61                 	db	97	;'a'
   607  00FF3A  62                 	db	98	;'b'
   608  00FF3B  63                 	db	99	;'c'
   609  00FF3C  64                 	db	100	;'d'
   610  00FF3D  65                 	db	101	;'e'
   611  00FF3E  66                 	db	102	;'f'
   612  00FF3F  00                 	db	0
   613  00FF40                     STR_20:
   614  00FF40  20                 	db	32
   615  00FF41  20                 	db	32
   616  00FF42  20                 	db	32
   617  00FF43  20                 	db	32
   618  00FF44  20                 	db	32
   619  00FF45  20                 	db	32
   620  00FF46  20                 	db	32
   621  00FF47  20                 	db	32
   622  00FF48  20                 	db	32
   623  00FF49  20                 	db	32
   624  00FF4A  20                 	db	32
   625  00FF4B  20                 	db	32
   626  00FF4C  20                 	db	32
   627  00FF4D  20                 	db	32
   628  00FF4E  2A                 	db	42
   629  00FF4F  3E                 	db	62	;'>'
   630  00FF50  00                 	db	0
   631  00FF51                     STR_16:
   632  00FF51  5B                 	db	91	;'['
   633  00FF52  31                 	db	49	;'1'
   634  00FF53  2C                 	db	44
   635  00FF54  32                 	db	50	;'2'
   636  00FF55  2C                 	db	44
   637  00FF56  33                 	db	51	;'3'
   638  00FF57  2C                 	db	44
   639  00FF58  34                 	db	52	;'4'
   640  00FF59  5D                 	db	93	;']'
   641  00FF5A  20                 	db	32
   642  00FF5B  20                 	db	32
   643  00FF5C  20                 	db	32
   644  00FF5D  20                 	db	32
   645  00FF5E  20                 	db	32
   646  00FF5F  2A                 	db	42
   647  00FF60  3E                 	db	62	;'>'
   648  00FF61  00                 	db	0
   649  00FF62                     STR_14:
   650  00FF62  68                 	db	104	;'h'
   651  00FF63  69                 	db	105	;'i'
   652  00FF64  73                 	db	115	;'s'
   653  00FF65  74                 	db	116	;'t'
   654  00FF66  6F                 	db	111	;'o'
   655  00FF67  72                 	db	114	;'r'
   656  00FF68  79                 	db	121	;'y'
   657  00FF69  20                 	db	32
   658  00FF6A  3C                 	db	60	;'<'
   659  00FF6B  43                 	db	67	;'C'
   660  00FF6C  20                 	db	32
   661  00FF6D  20                 	db	32
   662  00FF6E  20                 	db	32
   663  00FF6F  20                 	db	32
   664  00FF70  2A                 	db	42
   665  00FF71  3E                 	db	62	;'>'
   666  00FF72  00                 	db	0
   667  00FF73                     STR_18:
   668  00FF73  20                 	db	32
   669  00FF74  20                 	db	32
   670  00FF75  20                 	db	32
   671  00FF76  73                 	db	115	;'s'
   672  00FF77  74                 	db	116	;'t'
   673  00FF78  61                 	db	97	;'a'
   674  00FF79  74                 	db	116	;'t'
   675  00FF7A  73                 	db	115	;'s'
   676  00FF7B  20                 	db	32
   677  00FF7C  3C                 	db	60	;'<'
   678  00FF7D  42                 	db	66	;'B'
   679  00FF7E  20                 	db	32
   680  00FF7F  20                 	db	32
   681  00FF80  20                 	db	32
   682  00FF81  2A                 	db	42
   683  00FF82  3E                 	db	62	;'>'
   684  00FF83  00                 	db	0
   685  00FF84                     STR_22:
   686  00FF84  5B                 	db	91	;'['
   687  00FF85  6E                 	db	110	;'n'
   688  00FF86  6E                 	db	110	;'n'
   689  00FF87  2C                 	db	44
   690  00FF88  6E                 	db	110	;'n'
   691  00FF89  2C                 	db	44
   692  00FF8A  6E                 	db	110	;'n'
   693  00FF8B  2C                 	db	44
   694  00FF8C  6E                 	db	110	;'n'
   695  00FF8D  6E                 	db	110	;'n'
   696  00FF8E  5D                 	db	93	;']'
   697  00FF8F  20                 	db	32
   698  00FF90  20                 	db	32
   699  00FF91  20                 	db	32
   700  00FF92  2A                 	db	42
   701  00FF93  3E                 	db	62	;'>'
   702  00FF94  00                 	db	0
   703  00FF95                     STR_12:
   704  00FF95  20                 	db	32
   705  00FF96  20                 	db	32
   706  00FF97  6D                 	db	109	;'m'
   707  00FF98  6D                 	db	109	;'m'
   708  00FF99  3A                 	db	58	;':'
   709  00FF9A  64                 	db	100	;'d'
   710  00FF9B  64                 	db	100	;'d'
   711  00FF9C  3A                 	db	58	;':'
   712  00FF9D  79                 	db	121	;'y'
   713  00FF9E  79                 	db	121	;'y'
   714  00FF9F  20                 	db	32
   715  00FFA0  20                 	db	32
   716  00FFA1  20                 	db	32
   717  00FFA2  20                 	db	32
   718  00FFA3  41                 	db	65	;'A'
   719  00FFA4  3E                 	db	62	;'>'
   720  00FFA5  00                 	db	0
   721  00FFA6                     STR_6:
   722  00FFA6  72                 	db	114	;'r'
   723  00FFA7  65                 	db	101	;'e'
   724  00FFA8  6C                 	db	108	;'l'
   725  00FFA9  65                 	db	101	;'e'
   726  00FFAA  61                 	db	97	;'a'
   727  00FFAB  73                 	db	115	;'s'
   728  00FFAC  65                 	db	101	;'e'
   729  00FFAD  20                 	db	32
   730  00FFAE  62                 	db	98	;'b'
   731  00FFAF  61                 	db	97	;'a'
   732  00FFB0  74                 	db	116	;'t'
   733  00FFB1  74                 	db	116	;'t'
   734  00FFB2  65                 	db	101	;'e'
   735  00FFB3  72                 	db	114	;'r'
   736  00FFB4  79                 	db	121	;'y'
   737  00FFB5  3F                 	db	63	;'?'
   738  00FFB6  00                 	db	0
   739  00FFB7                     STR_4:
   740  00FFB7  74                 	db	116	;'t'
   741  00FFB8  61                 	db	97	;'a'
   742  00FFB9  72                 	db	114	;'r'
   743  00FFBA  67                 	db	103	;'g'
   744  00FFBB  65                 	db	101	;'e'
   745  00FFBC  74                 	db	116	;'t'
   746  00FFBD  3A                 	db	58	;':'
   747  00FFBE  20                 	db	32
   748  00FFBF  25                 	db	37
   749  00FFC0  64                 	db	100	;'d'
   750  00FFC1  0A                 	db	10
   751  00FFC2  56                 	db	86	;'V'
   752  00FFC3  3A                 	db	58	;':'
   753  00FFC4  20                 	db	32
   754  00FFC5  25                 	db	37
   755  00FFC6  66                 	db	102	;'f'
   756  00FFC7  00                 	db	0
   757  00FFC8                     STR_7:
   758  00FFC8  72                 	db	114	;'r'
   759  00FFC9  65                 	db	101	;'e'
   760  00FFCA  73                 	db	115	;'s'
   761  00FFCB  65                 	db	101	;'e'
   762  00FFCC  74                 	db	116	;'t'
   763  00FFCD  20                 	db	32
   764  00FFCE  74                 	db	116	;'t'
   765  00FFCF  68                 	db	104	;'h'
   766  00FFD0  65                 	db	101	;'e'
   767  00FFD1  20                 	db	32
   768  00FFD2  70                 	db	112	;'p'
   769  00FFD3  61                 	db	97	;'a'
   770  00FFD4  64                 	db	100	;'d'
   771  00FFD5  3F                 	db	63	;'?'
   772  00FFD6  00                 	db	0
   773  00FFD7                     STR_3:
   774  00FFD7  72                 	db	114	;'r'
   775  00FFD8  65                 	db	101	;'e'
   776  00FFD9  61                 	db	97	;'a'
   777  00FFDA  64                 	db	100	;'d'
   778  00FFDB  20                 	db	32
   779  00FFDC  76                 	db	118	;'v'
   780  00FFDD  6F                 	db	111	;'o'
   781  00FFDE  6C                 	db	108	;'l'
   782  00FFDF  74                 	db	116	;'t'
   783  00FFE0  61                 	db	97	;'a'
   784  00FFE1  67                 	db	103	;'g'
   785  00FFE2  65                 	db	101	;'e'
   786  00FFE3  3F                 	db	63	;'?'
   787  00FFE4  00                 	db	0
   788  00FFE5  5B                 	db	91	;'['
   789  00FFE6  25                 	db	37
   790  00FFE7  78                 	db	120	;'x'
   791  00FFE8  20                 	db	32
   792  00FFE9  25                 	db	37
   793  00FFEA  78                 	db	120	;'x'
   794  00FFEB  5D                 	db	93	;']'
   795  00FFEC  0A                 	db	10
   796  00FFED  00                 	db	0
   797  00FFEE  74                 	db	116	;'t'
   798  00FFEF  31                 	db	49	;'1'
   799  00FFF0  3A                 	db	58	;':'
   800  00FFF1  20                 	db	32
   801  00FFF2  25                 	db	37
   802  00FFF3  78                 	db	120	;'x'
   803  00FFF4  20                 	db	32
   804  00FFF5  00                 	db	0
   805  00FFF6                     STR_1:
   806  00FFF6  72                 	db	114	;'r'
   807  00FFF7  75                 	db	117	;'u'
   808  00FFF8  6E                 	db	110	;'n'
   809  00FFF9  6E                 	db	110	;'n'
   810  00FFFA  69                 	db	105	;'i'
   811  00FFFB  6E                 	db	110	;'n'
   812  00FFFC  67                 	db	103	;'g'
   813  00FFFD  00                 	db	0
   814                           
   815                           ; #config settings
   816  00FFFE  00                 	db	0	; dummy byte at the end
   817  0000                     
   818                           	psect	cinit
   819  0025F2                     __pcinit:
   820                           	opt stack 0
   821  0025F2                     start_initialization:
   822                           	opt stack 0
   823  0025F2                     __initialization:
   824                           	opt stack 0
   825                           
   826                           ; Initialize objects allocated to BANK1 (14 bytes)
   827                           ; load TBLPTR registers with __pidataBANK1
   828  0025F2  0EFE               	movlw	low __pidataBANK1
   829  0025F4  6EF6               	movwf	tblptrl,c
   830  0025F6  0E2D               	movlw	high __pidataBANK1
   831  0025F8  6EF7               	movwf	tblptrh,c
   832  0025FA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   833  0025FC  6EF8               	movwf	tblptru,c
   834  0025FE  EE01  F04F         	lfsr	0,__pdataBANK1
   835  002602  EE10 F00E          	lfsr	1,14
   836  002606                     copy_data0:
   837  002606  0009               	tblrd		*+
   838  002608  CFF5 FFEE          	movff	tablat,postinc0
   839  00260C  50E5               	movf	postdec1,w,c
   840  00260E  50E1               	movf	fsr1l,w,c
   841  002610  E1FA               	bnz	copy_data0
   842                           
   843                           ; Initialize objects allocated to BANK0 (26 bytes)
   844                           ; load TBLPTR registers with __pidataBANK0
   845  002612  0EBE               	movlw	low __pidataBANK0
   846  002614  6EF6               	movwf	tblptrl,c
   847  002616  0E2D               	movlw	high __pidataBANK0
   848  002618  6EF7               	movwf	tblptrh,c
   849  00261A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   850  00261C  6EF8               	movwf	tblptru,c
   851  00261E  EE00  F0E3         	lfsr	0,__pdataBANK0
   852  002622  EE10 F01A          	lfsr	1,26
   853  002626                     copy_data1:
   854  002626  0009               	tblrd		*+
   855  002628  CFF5 FFEE          	movff	tablat,postinc0
   856  00262C  50E5               	movf	postdec1,w,c
   857  00262E  50E1               	movf	fsr1l,w,c
   858  002630  E1FA               	bnz	copy_data1
   859                           
   860                           ; Initialize objects allocated to COMRAM (16 bytes)
   861                           ; load TBLPTR registers with __pidataCOMRAM
   862  002632  0EEE               	movlw	low __pidataCOMRAM
   863  002634  6EF6               	movwf	tblptrl,c
   864  002636  0E2D               	movlw	high __pidataCOMRAM
   865  002638  6EF7               	movwf	tblptrh,c
   866  00263A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   867  00263C  6EF8               	movwf	tblptru,c
   868  00263E  EE00  F04C         	lfsr	0,__pdataCOMRAM
   869  002642  EE10 F010          	lfsr	1,16
   870  002646                     copy_data2:
   871  002646  0009               	tblrd		*+
   872  002648  CFF5 FFEE          	movff	tablat,postinc0
   873  00264C  50E5               	movf	postdec1,w,c
   874  00264E  50E1               	movf	fsr1l,w,c
   875  002650  E1FA               	bnz	copy_data2
   876                           
   877                           ; Clear objects allocated to BANK1 (32 bytes)
   878  002652  EE01  F02F         	lfsr	0,__pbssBANK1
   879  002656  0E20               	movlw	32
   880  002658                     clear_0:
   881  002658  6AEE               	clrf	postinc0,c
   882  00265A  06E8               	decf	wreg,f,c
   883  00265C  E1FD               	bnz	clear_0
   884                           
   885                           ; Clear objects allocated to BANK0 (2 bytes)
   886  00265E  0100               	movlb	0
   887  002660  6BFE               	clrf	(__pbssBANK0+1)& (0+255),b
   888  002662  6BFD               	clrf	__pbssBANK0& (0+255),b
   889                           
   890                           ; Clear objects allocated to COMRAM (18 bytes)
   891  002664  EE00  F03A         	lfsr	0,__pbssCOMRAM
   892  002668  0E12               	movlw	18
   893  00266A                     clear_1:
   894  00266A  6AEE               	clrf	postinc0,c
   895  00266C  06E8               	decf	wreg,f,c
   896  00266E  E1FD               	bnz	clear_1
   897  002670                     end_of_initialization:
   898                           	opt stack 0
   899  002670                     __end_of__initialization:
   900                           	opt stack 0
   901  002670  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   902  002672  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   903  002674  0E00               	movlw	low (__Lmediumconst shr (0+16))
   904  002676  6EF8               	movwf	tblptru,c
   905  002678  0100               	movlb	0
   906  00267A  EFCF  F011         	goto	_main	;jump to C main() function
   907                           tblptru	equ	0xFF8
   908                           tblptrh	equ	0xFF7
   909                           tblptrl	equ	0xFF6
   910                           tablat	equ	0xFF5
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           postdec1	equ	0xFE5
   914                           fsr1l	equ	0xFE1
   915                           
   916                           	psect	bssCOMRAM
   917  00003A                     __pbssCOMRAM:
   918                           	opt stack 0
   919  00003A                     _padPin3:
   920                           	opt stack 0
   921  00003A                     	ds	4
   922  00003E                     _V_LIM_9V:
   923                           	opt stack 0
   924  00003E                     	ds	3
   925  000041                     _V_LIM_AA:
   926                           	opt stack 0
   927  000041                     	ds	3
   928  000044                     _V_LIM_C:
   929                           	opt stack 0
   930  000044                     	ds	3
   931  000047                     _count:
   932                           	opt stack 0
   933  000047                     	ds	2
   934  000049                     _prevTime:
   935                           	opt stack 0
   936  000049                     	ds	2
   937  00004B                     _lastKey:
   938                           	opt stack 0
   939  00004B                     	ds	1
   940                           tblptru	equ	0xFF8
   941                           tblptrh	equ	0xFF7
   942                           tblptrl	equ	0xFF6
   943                           tablat	equ	0xFF5
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           postdec1	equ	0xFE5
   947                           fsr1l	equ	0xFE1
   948                           
   949                           	psect	dataCOMRAM
   950  00004C                     __pdataCOMRAM:
   951                           	opt stack 0
   952  00004C                     _redirectAngle_9V:
   953                           	opt stack 0
   954  00004C                     	ds	2
   955  00004E                     _redirectAngle_AA:
   956                           	opt stack 0
   957  00004E                     	ds	2
   958  000050                     _redirectAngle_C:
   959                           	opt stack 0
   960  000050                     	ds	2
   961  000052                     _redirectAngle_OTHER:
   962                           	opt stack 0
   963  000052                     	ds	2
   964  000054                     _padPin1:
   965                           	opt stack 0
   966  000054                     	ds	4
   967  000058                     _padPin2:
   968                           	opt stack 0
   969  000058                     	ds	4
   970                           tblptru	equ	0xFF8
   971                           tblptrh	equ	0xFF7
   972                           tblptrl	equ	0xFF6
   973                           tablat	equ	0xFF5
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           postdec1	equ	0xFE5
   977                           fsr1l	equ	0xFE1
   978                           
   979                           	psect	bssBANK0
   980  0000FD                     __pbssBANK0:
   981                           	opt stack 0
   982  0000FD                     _batteryDetected:
   983                           	opt stack 0
   984  0000FD                     	ds	2
   985                           tblptru	equ	0xFF8
   986                           tblptrh	equ	0xFF7
   987                           tblptrl	equ	0xFF6
   988                           tablat	equ	0xFF5
   989                           postinc0	equ	0xFEE
   990                           wreg	equ	0xFE8
   991                           postdec1	equ	0xFE5
   992                           fsr1l	equ	0xFE1
   993                           
   994                           	psect	dataBANK0
   995  0000E3                     __pdataBANK0:
   996                           	opt stack 0
   997  0000E3                     _padAngle_CLOSE:
   998                           	opt stack 0
   999  0000E3                     	ds	2
  1000  0000E5                     _padAngle_NEUTRAL:
  1001                           	opt stack 0
  1002  0000E5                     	ds	2
  1003  0000E7                     _padAngle_OPEN:
  1004                           	opt stack 0
  1005  0000E7                     	ds	2
  1006  0000E9                     _conveyorServo:
  1007                           	opt stack 0
  1008  0000E9                     	ds	6
  1009  0000EF                     _padServo:
  1010                           	opt stack 0
  1011  0000EF                     	ds	6
  1012  0000F5                     _AA_float:
  1013                           	opt stack 0
  1014  0000F5                     	ds	4
  1015  0000F9                     _cylinderMotor:
  1016                           	opt stack 0
  1017  0000F9                     	ds	4
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           postdec1	equ	0xFE5
  1025                           fsr1l	equ	0xFE1
  1026                           
  1027                           	psect	bssBANK1
  1028  00012F                     __pbssBANK1:
  1029                           	opt stack 0
  1030  00012F                     _pulse:
  1031                           	opt stack 0
  1032  00012F                     	ds	16
  1033  00013F                     _servo:
  1034                           	opt stack 0
  1035  00013F                     	ds	16
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           postdec1	equ	0xFE5
  1043                           fsr1l	equ	0xFE1
  1044                           
  1045                           	psect	dataBANK1
  1046  00014F                     __pdataBANK1:
  1047                           	opt stack 0
  1048  00014F                     sortBattery@F3131:
  1049                           	opt stack 0
  1050  00014F                     	ds	8
  1051  000157                     _redirectingServo:
  1052                           	opt stack 0
  1053  000157                     	ds	6
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           
  1063                           	psect	cstackBANK1
  1064  000100                     __pcstackBANK1:
  1065                           	opt stack 0
  1066  000100                     initServo@motor:
  1067                           	opt stack 0
  1068  000100                     _printf$1336:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x0
  1072  000100                     	ds	2
  1073  000102                     initServo@angle:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x2
  1077  000102                     	ds	1
  1078  000103                     printf@idx:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x3
  1082  000103                     	ds	1
  1083  000104                     initServo@port:
  1084                           	opt stack 0
  1085  000104                     printf@ap:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x4
  1089  000104                     	ds	2
  1090  000106                     initServo@pin:
  1091                           	opt stack 0
  1092  000106                     printf@flag:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x6
  1096  000106                     	ds	2
  1097  000108                     initServo@timer:
  1098                           	opt stack 0
  1099  000108                     printf@prec:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x8
  1103  000108                     	ds	2
  1104  00010A                     printf@exp:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0xA
  1108  00010A                     	ds	2
  1109  00010C                     printf@tmpval:
  1110                           	opt stack 0
  1111                           
  1112                           ; 4 bytes @ 0xC
  1113  00010C                     	ds	4
  1114  000110                     printf@val:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0x10
  1118  000110                     	ds	4
  1119  000114                     printf@fval:
  1120                           	opt stack 0
  1121                           
  1122                           ; 3 bytes @ 0x14
  1123  000114                     	ds	3
  1124  000117                     printf@c:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x17
  1128  000117                     	ds	1
  1129  000118                     ??_sortBattery:
  1130                           
  1131                           ; 1 bytes @ 0x18
  1132  000118                     	ds	4
  1133  00011C                     sortBattery@dir:
  1134                           	opt stack 0
  1135                           
  1136                           ; 8 bytes @ 0x1C
  1137  00011C                     	ds	8
  1138  000124                     sortBattery@Vcc:
  1139                           	opt stack 0
  1140                           
  1141                           ; 3 bytes @ 0x24
  1142  000124                     	ds	3
  1143  000127                     sortBattery@resolution:
  1144                           	opt stack 0
  1145                           
  1146                           ; 3 bytes @ 0x27
  1147  000127                     	ds	3
  1148  00012A                     sortBattery@V:
  1149                           	opt stack 0
  1150                           
  1151                           ; 3 bytes @ 0x2A
  1152  00012A                     	ds	3
  1153  00012D                     sortBattery@signal:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x2D
  1157  00012D                     	ds	2
  1158                           tblptru	equ	0xFF8
  1159                           tblptrh	equ	0xFF7
  1160                           tblptrl	equ	0xFF6
  1161                           tablat	equ	0xFF5
  1162                           postinc0	equ	0xFEE
  1163                           wreg	equ	0xFE8
  1164                           postdec1	equ	0xFE5
  1165                           fsr1l	equ	0xFE1
  1166                           
  1167                           	psect	cstackBANK0
  1168  000080                     __pcstackBANK0:
  1169                           	opt stack 0
  1170  000080                     ?___ftdiv:
  1171                           	opt stack 0
  1172  000080                     ___ftdiv@f1:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0x0
  1176  000080                     	ds	3
  1177  000083                     ___ftdiv@f2:
  1178                           	opt stack 0
  1179                           
  1180                           ; 3 bytes @ 0x3
  1181  000083                     	ds	3
  1182  000086                     ___ftdiv@cntr:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x6
  1186  000086                     	ds	1
  1187  000087                     ___ftdiv@f3:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0x7
  1191  000087                     	ds	3
  1192  00008A                     ___ftdiv@exp:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0xA
  1196  00008A                     	ds	1
  1197  00008B                     ___ftdiv@sign:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0xB
  1201  00008B                     	ds	1
  1202  00008C                     ?___ftmul:
  1203                           	opt stack 0
  1204  00008C                     ___ftmul@f1:
  1205                           	opt stack 0
  1206                           
  1207                           ; 3 bytes @ 0xC
  1208  00008C                     	ds	3
  1209  00008F                     ___ftmul@f2:
  1210                           	opt stack 0
  1211                           
  1212                           ; 3 bytes @ 0xF
  1213  00008F                     	ds	3
  1214  000092                     ??___ftmul:
  1215                           
  1216                           ; 1 bytes @ 0x12
  1217  000092                     	ds	3
  1218  000095                     ___ftmul@exp:
  1219                           	opt stack 0
  1220                           
  1221                           ; 1 bytes @ 0x15
  1222  000095                     	ds	1
  1223  000096                     ___ftmul@f3_as_product:
  1224                           	opt stack 0
  1225                           
  1226                           ; 3 bytes @ 0x16
  1227  000096                     	ds	3
  1228  000099                     ___ftmul@cntr:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x19
  1232  000099                     	ds	1
  1233  00009A                     ___ftmul@sign:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x1A
  1237  00009A                     	ds	1
  1238  00009B                     ?_fround:
  1239                           	opt stack 0
  1240  00009B                     ?_scale:
  1241                           	opt stack 0
  1242                           
  1243                           ; 3 bytes @ 0x1B
  1244  00009B                     	ds	3
  1245  00009E                     _fround$1334:
  1246                           	opt stack 0
  1247  00009E                     _scale$1335:
  1248                           	opt stack 0
  1249                           
  1250                           ; 3 bytes @ 0x1E
  1251  00009E                     	ds	3
  1252  0000A1                     scale@scl:
  1253                           	opt stack 0
  1254  0000A1                     _fround$1333:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x21
  1258  0000A1                     	ds	3
  1259  0000A4                     fround@prec:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x24
  1263  0000A4                     	ds	1
  1264  0000A5                     ?___ftadd:
  1265                           	opt stack 0
  1266  0000A5                     ___ftadd@f1:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0x25
  1270  0000A5                     	ds	3
  1271  0000A8                     ___ftadd@f2:
  1272                           	opt stack 0
  1273                           
  1274                           ; 3 bytes @ 0x28
  1275  0000A8                     	ds	3
  1276  0000AB                     ??___ftadd:
  1277                           
  1278                           ; 1 bytes @ 0x2B
  1279  0000AB                     	ds	3
  1280  0000AE                     ___ftadd@sign:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x2E
  1284  0000AE                     	ds	1
  1285  0000AF                     ___ftadd@exp2:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x2F
  1289  0000AF                     	ds	1
  1290  0000B0                     ___ftadd@exp1:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x30
  1294  0000B0                     	ds	1
  1295  0000B1                     ?___ftsub:
  1296                           	opt stack 0
  1297  0000B1                     ?___fttol:
  1298                           	opt stack 0
  1299  0000B1                     ___ftsub@f1:
  1300                           	opt stack 0
  1301  0000B1                     ___fttol@f1:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x31
  1305  0000B1                     	ds	3
  1306  0000B4                     ___ftsub@f2:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x34
  1310  0000B4                     	ds	1
  1311  0000B5                     ??___fttol:
  1312                           
  1313                           ; 1 bytes @ 0x35
  1314  0000B5                     	ds	5
  1315  0000BA                     ___fttol@sign1:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x3A
  1319  0000BA                     	ds	1
  1320  0000BB                     ___fttol@lval:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0x3B
  1324  0000BB                     	ds	4
  1325  0000BF                     ___fttol@exp1:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x3F
  1329  0000BF                     	ds	1
  1330  0000C0                     ?_printf:
  1331                           	opt stack 0
  1332  0000C0                     ?_angleToPulse:
  1333                           	opt stack 0
  1334  0000C0                     angleToPulse@angle:
  1335                           	opt stack 0
  1336  0000C0                     printf@f:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x40
  1340  0000C0                     	ds	4
  1341  0000C4                     ??_angleToPulse:
  1342                           
  1343                           ; 1 bytes @ 0x44
  1344  0000C4                     	ds	3
  1345  0000C7                     ??_printf:
  1346                           
  1347                           ; 1 bytes @ 0x47
  1348  0000C7                     	ds	1
  1349  0000C8                     angleToPulse@offset:
  1350                           	opt stack 0
  1351                           
  1352                           ; 4 bytes @ 0x48
  1353  0000C8                     	ds	4
  1354  0000CC                     angleToPulse@a180:
  1355                           	opt stack 0
  1356                           
  1357                           ; 4 bytes @ 0x4C
  1358  0000CC                     	ds	1
  1359  0000CD                     runMenu@key:
  1360                           	opt stack 0
  1361  0000CD                     pause@message:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x4D
  1365  0000CD                     	ds	1
  1366  0000CE                     showInterface@key:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x4E
  1370  0000CE                     	ds	2
  1371  0000D0                     _angleToPulse$1332:
  1372                           	opt stack 0
  1373                           
  1374                           ; 3 bytes @ 0x50
  1375  0000D0                     	ds	3
  1376  0000D3                     angleToPulse@a000:
  1377                           	opt stack 0
  1378                           
  1379                           ; 4 bytes @ 0x53
  1380  0000D3                     	ds	4
  1381  0000D7                     setAngle@motor:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x57
  1385  0000D7                     	ds	2
  1386  0000D9                     setAngle@angle:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x59
  1390  0000D9                     	ds	2
  1391  0000DB                     ??_setAngle:
  1392                           
  1393                           ; 1 bytes @ 0x5B
  1394  0000DB                     	ds	6
  1395  0000E1                     ??_initServo:
  1396                           
  1397                           ; 1 bytes @ 0x61
  1398  0000E1                     	ds	2
  1399                           tblptru	equ	0xFF8
  1400                           tblptrh	equ	0xFF7
  1401                           tblptrl	equ	0xFF6
  1402                           tablat	equ	0xFF5
  1403                           postinc0	equ	0xFEE
  1404                           wreg	equ	0xFE8
  1405                           postdec1	equ	0xFE5
  1406                           fsr1l	equ	0xFE1
  1407                           
  1408                           	psect	cstackCOMRAM
  1409  000001                     __pcstackCOMRAM:
  1410                           	opt stack 0
  1411  000001                     ?i2_digitalRead:
  1412                           	opt stack 0
  1413  000001                     keyPressedInterruptService@key:
  1414                           	opt stack 0
  1415  000001                     i2digitalRead@pin:
  1416                           	opt stack 0
  1417  000001                     i2digitalWrite@pin:
  1418                           	opt stack 0
  1419  000001                     i2startTimer@timer:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x0
  1423  000001                     	ds	2
  1424  000003                     ??i2_digitalRead:
  1425  000003                     i2digitalWrite@val:
  1426                           	opt stack 0
  1427  000003                     i2startTimer@val:
  1428                           	opt stack 0
  1429                           
  1430                           ; 4 bytes @ 0x2
  1431  000003                     	ds	2
  1432  000005                     ??i2_digitalWrite:
  1433                           
  1434                           ; 1 bytes @ 0x4
  1435  000005                     	ds	2
  1436  000007                     ??i2_startTimer:
  1437                           
  1438                           ; 1 bytes @ 0x6
  1439  000007                     	ds	1
  1440  000008                     i2digitalWrite@p:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x7
  1444  000008                     	ds	2
  1445  00000A                     ??_servoInterruptService:
  1446                           
  1447                           ; 1 bytes @ 0x9
  1448  00000A                     	ds	2
  1449  00000C                     servoInterruptService@flags:
  1450                           	opt stack 0
  1451                           
  1452                           ; 8 bytes @ 0xB
  1453  00000C                     	ds	8
  1454  000014                     servoInterruptService@i:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x13
  1458  000014                     	ds	2
  1459  000016                     ??_service:
  1460                           
  1461                           ; 1 bytes @ 0x15
  1462  000016                     	ds	14
  1463  000024                     ?_digitalRead:
  1464                           	opt stack 0
  1465  000024                     ?___awmod:
  1466                           	opt stack 0
  1467  000024                     ?___ftpack:
  1468                           	opt stack 0
  1469  000024                     ?___ftneg:
  1470                           	opt stack 0
  1471  000024                     ?_analogRead:
  1472                           	opt stack 0
  1473  000024                     ?__tdiv_to_l_:
  1474                           	opt stack 0
  1475  000024                     ?__div_to_l_:
  1476                           	opt stack 0
  1477  000024                     ?___lldiv:
  1478                           	opt stack 0
  1479  000024                     lcdNibble@temp:
  1480                           	opt stack 0
  1481  000024                     readKeypad@key:
  1482                           	opt stack 0
  1483  000024                     digitalRead@pin:
  1484                           	opt stack 0
  1485  000024                     digitalWrite@pin:
  1486                           	opt stack 0
  1487  000024                     analogRead@channel:
  1488                           	opt stack 0
  1489  000024                     initTimer@timer:
  1490                           	opt stack 0
  1491  000024                     startTimer@timer:
  1492                           	opt stack 0
  1493  000024                     stopServo@timer:
  1494                           	opt stack 0
  1495  000024                     ___awmod@dividend:
  1496                           	opt stack 0
  1497  000024                     __div_to_l_@f1:
  1498                           	opt stack 0
  1499  000024                     ___ftpack@arg:
  1500                           	opt stack 0
  1501  000024                     __tdiv_to_l_@f1:
  1502                           	opt stack 0
  1503  000024                     ___ftge@ff1:
  1504                           	opt stack 0
  1505  000024                     ___ftneg@f1:
  1506                           	opt stack 0
  1507  000024                     ___lldiv@dividend:
  1508                           	opt stack 0
  1509                           
  1510                           ; 4 bytes @ 0x23
  1511  000024                     	ds	1
  1512  000025                     lcdNibble@data:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x24
  1516  000025                     	ds	1
  1517  000026                     ??_stopServo:
  1518  000026                     ??_digitalRead:
  1519  000026                     ??_lcdInst:
  1520  000026                     ??_initTimer:
  1521  000026                     digitalWrite@val:
  1522                           	opt stack 0
  1523  000026                     ___awmod@divisor:
  1524                           	opt stack 0
  1525  000026                     startTimer@val:
  1526                           	opt stack 0
  1527                           
  1528                           ; 4 bytes @ 0x25
  1529  000026                     	ds	1
  1530  000027                     lcdInst@data:
  1531                           	opt stack 0
  1532  000027                     ___ftpack@exp:
  1533                           	opt stack 0
  1534  000027                     __div_to_l_@f2:
  1535                           	opt stack 0
  1536  000027                     __tdiv_to_l_@f2:
  1537                           	opt stack 0
  1538  000027                     ___ftge@ff2:
  1539                           	opt stack 0
  1540                           
  1541                           ; 3 bytes @ 0x26
  1542  000027                     	ds	1
  1543  000028                     ??_initLCD:
  1544  000028                     ??_digitalWrite:
  1545  000028                     ??_analogRead:
  1546  000028                     putch@data:
  1547                           	opt stack 0
  1548  000028                     ___awmod@counter:
  1549                           	opt stack 0
  1550  000028                     ___ftpack@sign:
  1551                           	opt stack 0
  1552  000028                     ___lldiv@divisor:
  1553                           	opt stack 0
  1554                           
  1555                           ; 4 bytes @ 0x27
  1556  000028                     	ds	1
  1557  000029                     ??___ftpack:
  1558  000029                     ___awmod@sign:
  1559                           	opt stack 0
  1560                           
  1561                           ; 1 bytes @ 0x28
  1562  000029                     	ds	1
  1563  00002A                     ??__tdiv_to_l_:
  1564  00002A                     ??_startTimer:
  1565  00002A                     ??___ftge:
  1566  00002A                     ?___awdiv:
  1567                           	opt stack 0
  1568  00002A                     ___awdiv@dividend:
  1569                           	opt stack 0
  1570  00002A                     __div_to_l_@quot:
  1571                           	opt stack 0
  1572                           
  1573                           ; 4 bytes @ 0x29
  1574  00002A                     	ds	1
  1575  00002B                     digitalWrite@p:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x2A
  1579  00002B                     	ds	1
  1580  00002C                     ?___altoft:
  1581                           	opt stack 0
  1582  00002C                     ?___awtoft:
  1583                           	opt stack 0
  1584  00002C                     ?___lltoft:
  1585                           	opt stack 0
  1586  00002C                     ___awdiv@divisor:
  1587                           	opt stack 0
  1588  00002C                     ___awtoft@c:
  1589                           	opt stack 0
  1590  00002C                     ___altoft@c:
  1591                           	opt stack 0
  1592  00002C                     ___lldiv@quotient:
  1593                           	opt stack 0
  1594  00002C                     ___lltoft@c:
  1595                           	opt stack 0
  1596                           
  1597                           ; 4 bytes @ 0x2B
  1598  00002C                     	ds	1
  1599  00002D                     __tdiv_to_l_@quot:
  1600                           	opt stack 0
  1601                           
  1602                           ; 4 bytes @ 0x2C
  1603  00002D                     	ds	1
  1604  00002E                     ___awdiv@counter:
  1605                           	opt stack 0
  1606  00002E                     __div_to_l_@cntr:
  1607                           	opt stack 0
  1608                           
  1609                           ; 1 bytes @ 0x2D
  1610  00002E                     	ds	1
  1611  00002F                     ___awdiv@sign:
  1612                           	opt stack 0
  1613  00002F                     ___awtoft@sign:
  1614                           	opt stack 0
  1615  00002F                     __div_to_l_@exp1:
  1616                           	opt stack 0
  1617                           
  1618                           ; 1 bytes @ 0x2E
  1619  00002F                     	ds	1
  1620  000030                     ??___altoft:
  1621  000030                     ??___lltoft:
  1622  000030                     ___lldiv@counter:
  1623                           	opt stack 0
  1624  000030                     ___awdiv@quotient:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x2F
  1628  000030                     	ds	1
  1629  000031                     ?___llmod:
  1630                           	opt stack 0
  1631  000031                     __tdiv_to_l_@cntr:
  1632                           	opt stack 0
  1633  000031                     ___llmod@dividend:
  1634                           	opt stack 0
  1635                           
  1636                           ; 4 bytes @ 0x30
  1637  000031                     	ds	1
  1638  000032                     ?___wmul:
  1639                           	opt stack 0
  1640  000032                     __tdiv_to_l_@exp1:
  1641                           	opt stack 0
  1642  000032                     ___wmul@multiplier:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x31
  1646  000032                     	ds	2
  1647  000034                     ___altoft@exp:
  1648                           	opt stack 0
  1649  000034                     ___lltoft@exp:
  1650                           	opt stack 0
  1651  000034                     ___wmul@multiplicand:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x33
  1655  000034                     	ds	1
  1656  000035                     ___altoft@sign:
  1657                           	opt stack 0
  1658  000035                     ___llmod@divisor:
  1659                           	opt stack 0
  1660                           
  1661                           ; 4 bytes @ 0x34
  1662  000035                     	ds	1
  1663  000036                     ??___ftdiv:
  1664  000036                     ___wmul@product:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x35
  1668  000036                     	ds	3
  1669  000039                     ___llmod@counter:
  1670                           	opt stack 0
  1671                           
  1672                           ; 1 bytes @ 0x38
  1673  000039                     	ds	1
  1674  00003A                     tblptru	equ	0xFF8
  1675                           tblptrh	equ	0xFF7
  1676                           tblptrl	equ	0xFF6
  1677                           tablat	equ	0xFF5
  1678                           postinc0	equ	0xFEE
  1679                           wreg	equ	0xFE8
  1680                           postdec1	equ	0xFE5
  1681                           fsr1l	equ	0xFE1
  1682                           
  1683                           ; 1 bytes @ 0x39
  1684 ;;
  1685 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1686 ;;
  1687 ;; *************** function _main *****************
  1688 ;; Defined at:
  1689 ;;		line 90 in file "main.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;		None
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1707 ;;Total ram usage:        0 bytes
  1708 ;; Hardware stack levels required when called:   10
  1709 ;; This function calls:
  1710 ;;		_digitalWrite
  1711 ;;		_initLCD
  1712 ;;		_initServo
  1713 ;;		_pinSetup
  1714 ;;		_printf
  1715 ;;		_showInterface
  1716 ;;		_sortBattery
  1717 ;; This function is called by:
  1718 ;;		Startup code after reset
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text0
  1723  00239E                     __ptext0:
  1724                           	opt stack 0
  1725  00239E                     _main:
  1726                           	opt stack 21
  1727                           
  1728                           ;main.c: 91: pinSetup();
  1729                           
  1730                           ;incstack = 0
  1731  00239E  ECA5  F015         	call	_pinSetup	;wreg free
  1732                           
  1733                           ;main.c: 92: initLCD();
  1734  0023A2  EC82  F015         	call	_initLCD	;wreg free
  1735                           
  1736                           ;main.c: 95: showInterface();
  1737                           
  1738                           ;main.c: 94: while(1){
  1739  0023A6  ECD6  F00E         	call	_showInterface	;wreg free
  1740                           
  1741                           ;main.c: 98: digitalWrite(cylinderMotor, 1);
  1742  0023AA  0EF9               	movlw	low _cylinderMotor
  1743  0023AC  6E24               	movwf	digitalWrite@pin,c
  1744  0023AE  0E00               	movlw	high _cylinderMotor
  1745  0023B0  6E25               	movwf	digitalWrite@pin+1,c
  1746  0023B2  0E00               	movlw	0
  1747  0023B4  6E27               	movwf	digitalWrite@val+1,c
  1748  0023B6  0E01               	movlw	1
  1749  0023B8  6E26               	movwf	digitalWrite@val,c
  1750  0023BA  ECB8  F010         	call	_digitalWrite	;wreg free
  1751                           
  1752                           ;main.c: 99: initServo(conveyorServo, 90);
  1753  0023BE  0EE9               	movlw	low _conveyorServo
  1754  0023C0  0101               	movlb	1	; () banked
  1755  0023C2  6F00               	movwf	initServo@motor& (0+255),b
  1756  0023C4  0E00               	movlw	high _conveyorServo
  1757  0023C6  0101               	movlb	1	; () banked
  1758  0023C8  6F01               	movwf	(initServo@motor+1)& (0+255),b
  1759  0023CA  0E00               	movlw	0
  1760  0023CC  0101               	movlb	1	; () banked
  1761  0023CE  6F03               	movwf	(initServo@angle+1)& (0+255),b
  1762  0023D0  0E5A               	movlw	90
  1763  0023D2  6F02               	movwf	initServo@angle& (0+255),b
  1764  0023D4  EC58  F00F         	call	_initServo	;wreg free
  1765                           
  1766                           ;main.c: 100: initServo(padServo, padAngle_NEUTRAL);
  1767  0023D8  0EEF               	movlw	low _padServo
  1768  0023DA  0101               	movlb	1	; () banked
  1769  0023DC  6F00               	movwf	initServo@motor& (0+255),b
  1770  0023DE  0E00               	movlw	high _padServo
  1771  0023E0  0101               	movlb	1	; () banked
  1772  0023E2  6F01               	movwf	(initServo@motor+1)& (0+255),b
  1773  0023E4  C0E5  F102         	movff	_padAngle_NEUTRAL,initServo@angle
  1774  0023E8  C0E6  F103         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1775  0023EC  EC58  F00F         	call	_initServo	;wreg free
  1776                           
  1777                           ;main.c: 101: initServo(redirectingServo, 90);
  1778  0023F0  0E57               	movlw	low _redirectingServo
  1779  0023F2  0101               	movlb	1	; () banked
  1780  0023F4  6F00               	movwf	initServo@motor& (0+255),b
  1781  0023F6  0E01               	movlw	high _redirectingServo
  1782  0023F8  0101               	movlb	1	; () banked
  1783  0023FA  6F01               	movwf	(initServo@motor+1)& (0+255),b
  1784  0023FC  0E00               	movlw	0
  1785  0023FE  0101               	movlb	1	; () banked
  1786  002400  6F03               	movwf	(initServo@angle+1)& (0+255),b
  1787  002402  0E5A               	movlw	90
  1788  002404  6F02               	movwf	initServo@angle& (0+255),b
  1789  002406  EC58  F00F         	call	_initServo	;wreg free
  1790                           
  1791                           ;main.c: 104: printf("running");
  1792  00240A  0EF6               	movlw	low STR_1
  1793  00240C  0100               	movlb	0	; () banked
  1794  00240E  6FC0               	movwf	printf@f& (0+255),b
  1795  002410  0EFF               	movlw	high STR_1
  1796  002412  0100               	movlb	0	; () banked
  1797  002414  6FC1               	movwf	(printf@f+1)& (0+255),b
  1798  002416  EC09  F000         	call	_printf	;wreg free
  1799  00241A                     l6036:
  1800  00241A  0100               	movlb	0	; () banked
  1801  00241C  51FD               	movf	_batteryDetected& (0+255),w,b
  1802  00241E  0100               	movlb	0	; () banked
  1803  002420  11FE               	iorwf	(_batteryDetected+1)& (0+255),w,b
  1804  002422  B4D8               	btfsc	status,2,c
  1805  002424  D7FA               	goto	l6036
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 110: }
  1809                           ;main.c: 112: sortBattery();
  1810                           
  1811                           ; BSR set to: 0
  1812  002426  EC0E  F009         	call	_sortBattery	;wreg free
  1813                           
  1814                           ;main.c: 115: batteryDetected = 0;
  1815  00242A  0E00               	movlw	0
  1816  00242C  0100               	movlb	0	; () banked
  1817  00242E  6FFE               	movwf	(_batteryDetected+1)& (0+255),b
  1818  002430  0E00               	movlw	0
  1819  002432  6FFD               	movwf	_batteryDetected& (0+255),b
  1820                           
  1821                           ; BSR set to: 0
  1822  002434  D7F2               	goto	l6036
  1823  002436                     __end_of_main:
  1824                           	opt stack 0
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           status	equ	0xFD8
  1834                           
  1835 ;; *************** function _sortBattery *****************
  1836 ;; Defined at:
  1837 ;;		line 124 in file "main.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  dir             8   28[BANK1 ] int [4]
  1842 ;;  V               3   42[BANK1 ] float 
  1843 ;;  resolution      3   39[BANK1 ] float 
  1844 ;;  Vcc             3   36[BANK1 ] float 
  1845 ;;  signal          2   45[BANK1 ] int 
  1846 ;;  targetAngle     2    0        int 
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  1    wreg      void 
  1849 ;; Registers used:
  1850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;      Totals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;Total ram usage:       23 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    9
  1863 ;; This function calls:
  1864 ;;		___altoft
  1865 ;;		___ftdiv
  1866 ;;		___ftmul
  1867 ;;		_analogRead
  1868 ;;		_digitalRead
  1869 ;;		_digitalWrite
  1870 ;;		_initServo
  1871 ;;		_lcdClear
  1872 ;;		_pause
  1873 ;;		_printf
  1874 ;;		_readKeypad
  1875 ;;		_setAngle
  1876 ;;		_stopServo
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text1
  1883  00121C                     __ptext1:
  1884                           	opt stack 0
  1885  00121C                     _sortBattery:
  1886                           	opt stack 21
  1887                           
  1888                           ;main.c: 127: stopServo(conveyorServo[0]);
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;incstack = 0
  1892  00121C  C0E9  F024         	movff	_conveyorServo,stopServo@timer
  1893  001220  C0EA  F025         	movff	_conveyorServo+1,stopServo@timer+1
  1894  001224  EC3C  F015         	call	_stopServo	;wreg free
  1895                           
  1896                           ;main.c: 128: digitalWrite(cylinderMotor, 0);
  1897  001228  0EF9               	movlw	low _cylinderMotor
  1898  00122A  6E24               	movwf	digitalWrite@pin,c
  1899  00122C  0E00               	movlw	high _cylinderMotor
  1900  00122E  6E25               	movwf	digitalWrite@pin+1,c
  1901  001230  0E00               	movlw	0
  1902  001232  6E27               	movwf	digitalWrite@val+1,c
  1903  001234  0E00               	movlw	0
  1904  001236  6E26               	movwf	digitalWrite@val,c
  1905  001238  ECB8  F010         	call	_digitalWrite	;wreg free
  1906                           
  1907                           ;main.c: 134: pause("interrupt!!!\nclose?");
  1908  00123C  0EAE               	movlw	low STR_2
  1909  00123E  0100               	movlb	0	; () banked
  1910  001240  6FCD               	movwf	pause@message& (0+255),b
  1911  001242  0EFE               	movlw	high STR_2
  1912  001244  0100               	movlb	0	; () banked
  1913  001246  6FCE               	movwf	(pause@message+1)& (0+255),b
  1914  001248  ECEC  F016         	call	_pause	;wreg free
  1915                           
  1916                           ;main.c: 135: setAngle(padServo, padAngle_CLOSE);
  1917  00124C  0EEF               	movlw	low _padServo
  1918  00124E  0100               	movlb	0	; () banked
  1919  001250  6FD7               	movwf	setAngle@motor& (0+255),b
  1920  001252  0E00               	movlw	high _padServo
  1921  001254  0100               	movlb	0	; () banked
  1922  001256  6FD8               	movwf	(setAngle@motor+1)& (0+255),b
  1923  001258  C0E3  F0D9         	movff	_padAngle_CLOSE,setAngle@angle
  1924  00125C  C0E4  F0DA         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  1925  001260  EC1B  F012         	call	_setAngle	;wreg free
  1926                           
  1927                           ;main.c: 138: pause("read voltage?");
  1928  001264  0ED7               	movlw	low STR_3
  1929  001266  0100               	movlb	0	; () banked
  1930  001268  6FCD               	movwf	pause@message& (0+255),b
  1931  00126A  0EFF               	movlw	high STR_3
  1932  00126C  0100               	movlb	0	; () banked
  1933  00126E  6FCE               	movwf	(pause@message+1)& (0+255),b
  1934  001270  ECEC  F016         	call	_pause	;wreg free
  1935                           
  1936                           ;main.c: 139: float Vcc = 4.8;
  1937  001274  0E9A               	movlw	154
  1938  001276  0101               	movlb	1	; () banked
  1939  001278  6F24               	movwf	sortBattery@Vcc& (0+255),b
  1940  00127A  0E99               	movlw	153
  1941  00127C  0101               	movlb	1	; () banked
  1942  00127E  6F25               	movwf	(sortBattery@Vcc+1)& (0+255),b
  1943  001280  0E40               	movlw	64
  1944  001282  0101               	movlb	1	; () banked
  1945  001284  6F26               	movwf	(sortBattery@Vcc+2)& (0+255),b
  1946                           
  1947                           ; BSR set to: 1
  1948                           ;main.c: 140: float resolution = (1<<10) - 1;
  1949  001286  0EC0               	movlw	192
  1950  001288  0101               	movlb	1	; () banked
  1951  00128A  6F27               	movwf	sortBattery@resolution& (0+255),b
  1952  00128C  0E7F               	movlw	127
  1953  00128E  0101               	movlb	1	; () banked
  1954  001290  6F28               	movwf	(sortBattery@resolution+1)& (0+255),b
  1955  001292  0E44               	movlw	68
  1956  001294  0101               	movlb	1	; () banked
  1957  001296  6F29               	movwf	(sortBattery@resolution+2)& (0+255),b
  1958                           
  1959                           ; BSR set to: 1
  1960                           ;main.c: 142: int targetAngle;
  1961                           ;main.c: 143: int signal = digitalRead(padPin1)<<1;
  1962  001298  0E54               	movlw	low _padPin1
  1963  00129A  6E24               	movwf	digitalRead@pin,c
  1964  00129C  0E00               	movlw	high _padPin1
  1965  00129E  6E25               	movwf	digitalRead@pin+1,c
  1966  0012A0  ECCE  F00F         	call	_digitalRead	;wreg free
  1967  0012A4  90D8               	bcf	status,0,c
  1968  0012A6  3424               	rlcf	?_digitalRead,w,c
  1969  0012A8  0101               	movlb	1	; () banked
  1970  0012AA  6F2D               	movwf	sortBattery@signal& (0+255),b
  1971  0012AC  3425               	rlcf	?_digitalRead+1,w,c
  1972  0012AE  0101               	movlb	1	; () banked
  1973  0012B0  6F2E               	movwf	(sortBattery@signal+1)& (0+255),b
  1974                           
  1975                           ; BSR set to: 1
  1976                           ;main.c: 144: signal |= digitalRead(padPin2);
  1977  0012B2  0E58               	movlw	low _padPin2
  1978  0012B4  6E24               	movwf	digitalRead@pin,c
  1979  0012B6  0E00               	movlw	high _padPin2
  1980  0012B8  6E25               	movwf	digitalRead@pin+1,c
  1981  0012BA  ECCE  F00F         	call	_digitalRead	;wreg free
  1982  0012BE  5024               	movf	?_digitalRead,w,c
  1983  0012C0  0101               	movlb	1	; () banked
  1984  0012C2  132D               	iorwf	sortBattery@signal& (0+255),f,b
  1985  0012C4  5025               	movf	?_digitalRead+1,w,c
  1986  0012C6  0101               	movlb	1	; () banked
  1987  0012C8  132E               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  1988                           
  1989                           ; BSR set to: 1
  1990                           ;main.c: 146: digitalWrite(AA_float, 1);
  1991  0012CA  0EF5               	movlw	low _AA_float
  1992  0012CC  6E24               	movwf	digitalWrite@pin,c
  1993  0012CE  0E00               	movlw	high _AA_float
  1994  0012D0  6E25               	movwf	digitalWrite@pin+1,c
  1995  0012D2  0E00               	movlw	0
  1996  0012D4  6E27               	movwf	digitalWrite@val+1,c
  1997  0012D6  0E01               	movlw	1
  1998  0012D8  6E26               	movwf	digitalWrite@val,c
  1999  0012DA  ECB8  F010         	call	_digitalWrite	;wreg free
  2000                           
  2001                           ;main.c: 147: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2002  0012DE  C127  F083         	movff	sortBattery@resolution,___ftdiv@f2
  2003  0012E2  C128  F084         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2004  0012E6  C129  F085         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2005  0012EA  C03C  F024         	movff	_padPin3+2,analogRead@channel
  2006  0012EE  C03D  F025         	movff	_padPin3+3,analogRead@channel+1
  2007  0012F2  ECE1  F015         	call	_analogRead	;wreg free
  2008  0012F6  C024  F02C         	movff	?_analogRead,___altoft@c
  2009  0012FA  C025  F02D         	movff	?_analogRead+1,___altoft@c+1
  2010  0012FE  C026  F02E         	movff	?_analogRead+2,___altoft@c+2
  2011  001302  C027  F02F         	movff	?_analogRead+3,___altoft@c+3
  2012  001306  ECC2  F013         	call	___altoft	;wreg free
  2013  00130A  C02C  F080         	movff	?___altoft,___ftdiv@f1
  2014  00130E  C02D  F081         	movff	?___altoft+1,___ftdiv@f1+1
  2015  001312  C02E  F082         	movff	?___altoft+2,___ftdiv@f1+2
  2016  001316  EC09  F00D         	call	___ftdiv	;wreg free
  2017  00131A  C080  F08C         	movff	?___ftdiv,___ftmul@f1
  2018  00131E  C081  F08D         	movff	?___ftdiv+1,___ftmul@f1+1
  2019  001322  C082  F08E         	movff	?___ftdiv+2,___ftmul@f1+2
  2020  001326  C124  F08F         	movff	sortBattery@Vcc,___ftmul@f2
  2021  00132A  C125  F090         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2022  00132E  C126  F091         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2023  001332  ECB8  F00B         	call	___ftmul	;wreg free
  2024  001336  C08C  F12A         	movff	?___ftmul,sortBattery@V
  2025  00133A  C08D  F12B         	movff	?___ftmul+1,sortBattery@V+1
  2026  00133E  C08E  F12C         	movff	?___ftmul+2,sortBattery@V+2
  2027                           
  2028                           ;main.c: 149: lcdClear();
  2029  001342  EC0A  F017         	call	_lcdClear	;wreg free
  2030                           
  2031                           ;main.c: 150: printf("target: %d\nV: %f",signal,V);
  2032  001346  0EB7               	movlw	low STR_4
  2033  001348  0100               	movlb	0	; () banked
  2034  00134A  6FC0               	movwf	printf@f& (0+255),b
  2035  00134C  0EFF               	movlw	high STR_4
  2036  00134E  0100               	movlb	0	; () banked
  2037  001350  6FC1               	movwf	(printf@f+1)& (0+255),b
  2038  001352  C12D  F0C2         	movff	sortBattery@signal,?_printf+2
  2039  001356  C12E  F0C3         	movff	sortBattery@signal+1,?_printf+3
  2040  00135A  C12A  F0C4         	movff	sortBattery@V,?_printf+4
  2041  00135E  C12B  F0C5         	movff	sortBattery@V+1,?_printf+5
  2042  001362  C12C  F0C6         	movff	sortBattery@V+2,?_printf+6
  2043  001366  EC09  F000         	call	_printf	;wreg free
  2044                           
  2045                           ;main.c: 151: readKeypad();
  2046  00136A  EC4F  F016         	call	_readKeypad	;wreg free
  2047                           
  2048                           ;main.c: 179: lcdClear();
  2049  00136E  EC0A  F017         	call	_lcdClear	;wreg free
  2050                           
  2051                           ;main.c: 180: printf("pick angle: 1,2,3,4?");
  2052  001372  0E99               	movlw	low STR_5
  2053  001374  0100               	movlb	0	; () banked
  2054  001376  6FC0               	movwf	printf@f& (0+255),b
  2055  001378  0EFE               	movlw	high STR_5
  2056  00137A  0100               	movlb	0	; () banked
  2057  00137C  6FC1               	movwf	(printf@f+1)& (0+255),b
  2058  00137E  EC09  F000         	call	_printf	;wreg free
  2059                           
  2060                           ;main.c: 181: int dir[4] = {100,95,90,85};
  2061  001382  EE21  F04F         	lfsr	2,sortBattery@F3131
  2062  001386  EE11  F01C         	lfsr	1,sortBattery@dir
  2063  00138A  0E07               	movlw	7
  2064  00138C                     u5831:
  2065  00138C  CFDB FFE3          	movff	plusw2,plusw1
  2066  001390  06E8               	decf	wreg,f,c
  2067  001392  E2FC               	bc	u5831
  2068                           
  2069                           ;main.c: 182: setAngle(redirectingServo, dir[readKeypad() - '0']);
  2070  001394  0E57               	movlw	low _redirectingServo
  2071  001396  0100               	movlb	0	; () banked
  2072  001398  6FD7               	movwf	setAngle@motor& (0+255),b
  2073  00139A  0E01               	movlw	high _redirectingServo
  2074  00139C  0100               	movlb	0	; () banked
  2075  00139E  6FD8               	movwf	(setAngle@motor+1)& (0+255),b
  2076  0013A0  0EA0               	movlw	160
  2077  0013A2  0101               	movlb	1	; () banked
  2078  0013A4  6F18               	movwf	??_sortBattery& (0+255),b
  2079  0013A6  0EFF               	movlw	255
  2080  0013A8  0101               	movlb	1	; () banked
  2081  0013AA  6F19               	movwf	(??_sortBattery+1)& (0+255),b
  2082  0013AC  EC4F  F016         	call	_readKeypad	;wreg free
  2083  0013B0  0101               	movlb	1	; () banked
  2084  0013B2  6F1A               	movwf	(??_sortBattery+2)& (0+255),b
  2085  0013B4  6B1B               	clrf	(??_sortBattery+3)& (0+255),b
  2086  0013B6  90D8               	bcf	status,0,c
  2087  0013B8  0101               	movlb	1	; () banked
  2088  0013BA  371A               	rlcf	(??_sortBattery+2)& (0+255),f,b
  2089  0013BC  371B               	rlcf	(??_sortBattery+3)& (0+255),f,b
  2090  0013BE  0101               	movlb	1	; () banked
  2091  0013C0  5118               	movf	??_sortBattery& (0+255),w,b
  2092  0013C2  0101               	movlb	1	; () banked
  2093  0013C4  271A               	addwf	(??_sortBattery+2)& (0+255),f,b
  2094  0013C6  0101               	movlb	1	; () banked
  2095  0013C8  5119               	movf	(??_sortBattery+1)& (0+255),w,b
  2096  0013CA  0101               	movlb	1	; () banked
  2097  0013CC  231B               	addwfc	(??_sortBattery+3)& (0+255),f,b
  2098  0013CE  0E1C               	movlw	low sortBattery@dir
  2099  0013D0  0101               	movlb	1	; () banked
  2100  0013D2  251A               	addwf	(??_sortBattery+2)& (0+255),w,b
  2101  0013D4  6ED9               	movwf	fsr2l,c
  2102  0013D6  0E01               	movlw	high sortBattery@dir
  2103  0013D8  0101               	movlb	1	; () banked
  2104  0013DA  211B               	addwfc	(??_sortBattery+3)& (0+255),w,b
  2105  0013DC  6EDA               	movwf	fsr2h,c
  2106  0013DE  CFDE F0D9          	movff	postinc2,setAngle@angle
  2107  0013E2  CFDD F0DA          	movff	postdec2,setAngle@angle+1
  2108  0013E6  EC1B  F012         	call	_setAngle	;wreg free
  2109                           
  2110                           ;main.c: 185: pause("release battery?");
  2111  0013EA  0EA6               	movlw	low STR_6
  2112  0013EC  0100               	movlb	0	; () banked
  2113  0013EE  6FCD               	movwf	pause@message& (0+255),b
  2114  0013F0  0EFF               	movlw	high STR_6
  2115  0013F2  0100               	movlb	0	; () banked
  2116  0013F4  6FCE               	movwf	(pause@message+1)& (0+255),b
  2117  0013F6  ECEC  F016         	call	_pause	;wreg free
  2118                           
  2119                           ;main.c: 186: setAngle(padServo, padAngle_OPEN);
  2120  0013FA  0EEF               	movlw	low _padServo
  2121  0013FC  0100               	movlb	0	; () banked
  2122  0013FE  6FD7               	movwf	setAngle@motor& (0+255),b
  2123  001400  0E00               	movlw	high _padServo
  2124  001402  0100               	movlb	0	; () banked
  2125  001404  6FD8               	movwf	(setAngle@motor+1)& (0+255),b
  2126  001406  C0E7  F0D9         	movff	_padAngle_OPEN,setAngle@angle
  2127  00140A  C0E8  F0DA         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2128  00140E  EC1B  F012         	call	_setAngle	;wreg free
  2129                           
  2130                           ;main.c: 190: pause("reset the pad?");
  2131  001412  0EC8               	movlw	low STR_7
  2132  001414  0100               	movlb	0	; () banked
  2133  001416  6FCD               	movwf	pause@message& (0+255),b
  2134  001418  0EFF               	movlw	high STR_7
  2135  00141A  0100               	movlb	0	; () banked
  2136  00141C  6FCE               	movwf	(pause@message+1)& (0+255),b
  2137  00141E  ECEC  F016         	call	_pause	;wreg free
  2138                           
  2139                           ;main.c: 191: setAngle(padServo, padAngle_NEUTRAL);
  2140  001422  0EEF               	movlw	low _padServo
  2141  001424  0100               	movlb	0	; () banked
  2142  001426  6FD7               	movwf	setAngle@motor& (0+255),b
  2143  001428  0E00               	movlw	high _padServo
  2144  00142A  0100               	movlb	0	; () banked
  2145  00142C  6FD8               	movwf	(setAngle@motor+1)& (0+255),b
  2146  00142E  C0E5  F0D9         	movff	_padAngle_NEUTRAL,setAngle@angle
  2147  001432  C0E6  F0DA         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2148  001436  EC1B  F012         	call	_setAngle	;wreg free
  2149                           
  2150                           ;main.c: 194: pause("conveyor & cylinder on?");
  2151  00143A  0E81               	movlw	low STR_8
  2152  00143C  0100               	movlb	0	; () banked
  2153  00143E  6FCD               	movwf	pause@message& (0+255),b
  2154  001440  0EFE               	movlw	high STR_8
  2155  001442  0100               	movlb	0	; () banked
  2156  001444  6FCE               	movwf	(pause@message+1)& (0+255),b
  2157  001446  ECEC  F016         	call	_pause	;wreg free
  2158                           
  2159                           ;main.c: 195: initServo(conveyorServo, 90);
  2160  00144A  0EE9               	movlw	low _conveyorServo
  2161  00144C  0101               	movlb	1	; () banked
  2162  00144E  6F00               	movwf	initServo@motor& (0+255),b
  2163  001450  0E00               	movlw	high _conveyorServo
  2164  001452  0101               	movlb	1	; () banked
  2165  001454  6F01               	movwf	(initServo@motor+1)& (0+255),b
  2166  001456  0E00               	movlw	0
  2167  001458  0101               	movlb	1	; () banked
  2168  00145A  6F03               	movwf	(initServo@angle+1)& (0+255),b
  2169  00145C  0E5A               	movlw	90
  2170  00145E  6F02               	movwf	initServo@angle& (0+255),b
  2171  001460  EC58  F00F         	call	_initServo	;wreg free
  2172                           
  2173                           ;main.c: 196: digitalWrite(cylinderMotor, 1);
  2174  001464  0EF9               	movlw	low _cylinderMotor
  2175  001466  6E24               	movwf	digitalWrite@pin,c
  2176  001468  0E00               	movlw	high _cylinderMotor
  2177  00146A  6E25               	movwf	digitalWrite@pin+1,c
  2178  00146C  0E00               	movlw	0
  2179  00146E  6E27               	movwf	digitalWrite@val+1,c
  2180  001470  0E01               	movlw	1
  2181  001472  6E26               	movwf	digitalWrite@val,c
  2182  001474  ECB8  F010         	call	_digitalWrite	;wreg free
  2183  001478                     l123:
  2184  001478  D7FF               	goto	l123
  2185  00147A                     __end_of_sortBattery:
  2186                           	opt stack 0
  2187                           tblptru	equ	0xFF8
  2188                           tblptrh	equ	0xFF7
  2189                           tblptrl	equ	0xFF6
  2190                           tablat	equ	0xFF5
  2191                           postinc0	equ	0xFEE
  2192                           wreg	equ	0xFE8
  2193                           postdec1	equ	0xFE5
  2194                           plusw1	equ	0xFE3
  2195                           fsr1l	equ	0xFE1
  2196                           postinc2	equ	0xFDE
  2197                           postdec2	equ	0xFDD
  2198                           plusw2	equ	0xFDB
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203 ;; *************** function _stopServo *****************
  2204 ;; Defined at:
  2205 ;;		line 32 in file "servo.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  timer           2   35[COMRAM] int 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;		None
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg, status,2, status,0
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2219 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;Total ram usage:        4 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    3
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_sortBattery
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text2
  2234  002A78                     __ptext2:
  2235                           	opt stack 0
  2236  002A78                     _stopServo:
  2237                           	opt stack 26
  2238                           
  2239                           ;servo.c: 33: switch(timer){
  2240                           
  2241                           ;incstack = 0
  2242  002A78  D00C               	goto	l5800
  2243  002A7A                     l5790:
  2244  002A7A  0E00               	movlw	0
  2245  002A7C  6ED5               	movwf	4053,c	;volatile
  2246  002A7E  0012               	return	
  2247  002A80                     l5792:
  2248  002A80  0E00               	movlw	0
  2249  002A82  6ECD               	movwf	4045,c	;volatile
  2250  002A84  0012               	return	
  2251  002A86                     l5794:
  2252  002A86  0E00               	movlw	0
  2253  002A88  6ECA               	movwf	4042,c	;volatile
  2254  002A8A  0012               	return	
  2255  002A8C                     l5796:
  2256  002A8C  0E00               	movlw	0
  2257  002A8E  6EB1               	movwf	4017,c	;volatile
  2258                           
  2259                           ;servo.c: 38: }
  2260  002A90  0012               	return	
  2261  002A92                     l5800:
  2262  002A92  C024  F026         	movff	stopServo@timer,??_stopServo
  2263  002A96  C025  F027         	movff	stopServo@timer+1,??_stopServo+1
  2264                           
  2265                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2266                           ; Switch size 1, requested type "space"
  2267                           ; Number of cases is 1, Range of values is 0 to 0
  2268                           ; switch strategies available:
  2269                           ; Name         Instructions Cycles
  2270                           ; simple_byte            4     3 (average)
  2271                           ;	Chosen strategy is simple_byte
  2272  002A9A  5027               	movf	??_stopServo+1,w,c
  2273  002A9C  0A00               	xorlw	0	; case 0
  2274  002A9E  A4D8               	btfss	status,2,c
  2275  002AA0  0012               	return	
  2276                           
  2277                           ; Switch size 1, requested type "space"
  2278                           ; Number of cases is 4, Range of values is 0 to 3
  2279                           ; switch strategies available:
  2280                           ; Name         Instructions Cycles
  2281                           ; simple_byte           13     7 (average)
  2282                           ;	Chosen strategy is simple_byte
  2283  002AA2  5026               	movf	??_stopServo,w,c
  2284  002AA4  0A00               	xorlw	0	; case 0
  2285  002AA6  B4D8               	btfsc	status,2,c
  2286  002AA8  D7E8               	goto	l5790
  2287  002AAA  0A01               	xorlw	1	; case 1
  2288  002AAC  B4D8               	btfsc	status,2,c
  2289  002AAE  D7E8               	goto	l5792
  2290  002AB0  0A03               	xorlw	3	; case 2
  2291  002AB2  B4D8               	btfsc	status,2,c
  2292  002AB4  D7E8               	goto	l5794
  2293  002AB6  0A01               	xorlw	1	; case 3
  2294  002AB8  A4D8               	btfss	status,2,c
  2295  002ABA  0012               	return	
  2296  002ABC  D7E7               	goto	l5796
  2297  002ABE                     __end_of_stopServo:
  2298                           	opt stack 0
  2299                           tblptru	equ	0xFF8
  2300                           tblptrh	equ	0xFF7
  2301                           tblptrl	equ	0xFF6
  2302                           tablat	equ	0xFF5
  2303                           postinc0	equ	0xFEE
  2304                           wreg	equ	0xFE8
  2305                           postdec1	equ	0xFE5
  2306                           plusw1	equ	0xFE3
  2307                           fsr1l	equ	0xFE1
  2308                           postinc2	equ	0xFDE
  2309                           postdec2	equ	0xFDD
  2310                           plusw2	equ	0xFDB
  2311                           fsr2h	equ	0xFDA
  2312                           fsr2l	equ	0xFD9
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _pause *****************
  2316 ;; Defined at:
  2317 ;;		line 250 in file "main.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  message         2   77[BANK0 ] PTR unsigned char 
  2320 ;;		 -> STR_8(24), STR_7(15), STR_6(17), STR_3(14), 
  2321 ;;		 -> STR_2(20), 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;Total ram usage:        2 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    8
  2340 ;; This function calls:
  2341 ;;		_lcdClear
  2342 ;;		_printf
  2343 ;;		_readKeypad
  2344 ;; This function is called by:
  2345 ;;		_sortBattery
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text3
  2350  002DD8                     __ptext3:
  2351                           	opt stack 0
  2352  002DD8                     _pause:
  2353                           	opt stack 21
  2354                           
  2355                           ;main.c: 251: lcdClear();
  2356                           
  2357                           ;incstack = 0
  2358  002DD8  EC0A  F017         	call	_lcdClear	;wreg free
  2359                           
  2360                           ;main.c: 252: printf(message);
  2361  002DDC  C0CD  F0C0         	movff	pause@message,printf@f
  2362  002DE0  C0CE  F0C1         	movff	pause@message+1,printf@f+1
  2363  002DE4  EC09  F000         	call	_printf	;wreg free
  2364                           
  2365                           ;main.c: 253: readKeypad();
  2366  002DE8  EC4F  F016         	call	_readKeypad	;wreg free
  2367  002DEC  0012               	return		;funcret
  2368  002DEE                     __end_of_pause:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           postdec1	equ	0xFE5
  2377                           plusw1	equ	0xFE3
  2378                           fsr1l	equ	0xFE1
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           plusw2	equ	0xFDB
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _initServo *****************
  2387 ;; Defined at:
  2388 ;;		line 19 in file "servo.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  motor           2    0[BANK1 ] PTR int 
  2391 ;;		 -> redirectingServo(6), padServo(6), conveyorServo(6), 
  2392 ;;  angle           2    2[BANK1 ] int 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  timer           2    8[BANK1 ] int 
  2395 ;;  pin             2    6[BANK1 ] int 
  2396 ;;  port            2    4[BANK1 ] int 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      void 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:         0       2      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:       12 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    7
  2413 ;; This function calls:
  2414 ;;		_initTimer
  2415 ;;		_setAngle
  2416 ;;		_startTimer
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;;		_sortBattery
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text4
  2424  001EB0                     __ptext4:
  2425                           	opt stack 0
  2426  001EB0                     _initServo:
  2427                           	opt stack 22
  2428                           
  2429                           ;servo.c: 20: int timer = motor[0];
  2430                           
  2431                           ;incstack = 0
  2432  001EB0  C100  FFD9         	movff	initServo@motor,fsr2l
  2433  001EB4  C101  FFDA         	movff	initServo@motor+1,fsr2h
  2434  001EB8  CFDE F108          	movff	postinc2,initServo@timer
  2435  001EBC  CFDD F109          	movff	postdec2,initServo@timer+1
  2436                           
  2437                           ;servo.c: 21: int port = motor[1];
  2438  001EC0  0101               	movlb	1	; () banked
  2439  001EC2  EE20 F002          	lfsr	2,2
  2440  001EC6  5100               	movf	initServo@motor& (0+255),w,b
  2441  001EC8  26D9               	addwf	fsr2l,f,c
  2442  001ECA  5101               	movf	(initServo@motor+1)& (0+255),w,b
  2443  001ECC  22DA               	addwfc	fsr2h,f,c
  2444  001ECE  CFDE F104          	movff	postinc2,initServo@port
  2445  001ED2  CFDD F105          	movff	postdec2,initServo@port+1
  2446                           
  2447                           ; BSR set to: 1
  2448                           ;servo.c: 22: int pin = motor[2];
  2449  001ED6  0101               	movlb	1	; () banked
  2450  001ED8  EE20 F004          	lfsr	2,4
  2451  001EDC  5100               	movf	initServo@motor& (0+255),w,b
  2452  001EDE  26D9               	addwf	fsr2l,f,c
  2453  001EE0  5101               	movf	(initServo@motor+1)& (0+255),w,b
  2454  001EE2  22DA               	addwfc	fsr2h,f,c
  2455  001EE4  CFDE F106          	movff	postinc2,initServo@pin
  2456  001EE8  CFDD F107          	movff	postdec2,initServo@pin+1
  2457                           
  2458                           ; BSR set to: 1
  2459                           ;servo.c: 24: servo[timer][0] = port;
  2460  001EEC  0E3F               	movlw	low _servo
  2461  001EEE  0100               	movlb	0	; () banked
  2462  001EF0  6FE1               	movwf	??_initServo& (0+255),b
  2463  001EF2  0E01               	movlw	high _servo
  2464  001EF4  0100               	movlb	0	; () banked
  2465  001EF6  6FE2               	movwf	(??_initServo+1)& (0+255),b
  2466  001EF8  90D8               	bcf	status,0,c
  2467  001EFA  0101               	movlb	1	; () banked
  2468  001EFC  3508               	rlcf	initServo@timer& (0+255),w,b
  2469  001EFE  6ED9               	movwf	fsr2l,c
  2470  001F00  0101               	movlb	1	; () banked
  2471  001F02  3509               	rlcf	(initServo@timer+1)& (0+255),w,b
  2472  001F04  6EDA               	movwf	fsr2h,c
  2473  001F06  90D8               	bcf	status,0,c
  2474  001F08  36D9               	rlcf	fsr2l,f,c
  2475  001F0A  36DA               	rlcf	fsr2h,f,c
  2476  001F0C  0100               	movlb	0	; () banked
  2477  001F0E  51E1               	movf	??_initServo& (0+255),w,b
  2478  001F10  26D9               	addwf	fsr2l,f,c
  2479  001F12  0100               	movlb	0	; () banked
  2480  001F14  51E2               	movf	(??_initServo+1)& (0+255),w,b
  2481  001F16  22DA               	addwfc	fsr2h,f,c
  2482  001F18  C104  FFDE         	movff	initServo@port,postinc2
  2483  001F1C  C105  FFDD         	movff	initServo@port+1,postdec2
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;servo.c: 25: servo[timer][1] = pin;
  2487  001F20  C108  F0E1         	movff	initServo@timer,??_initServo
  2488  001F24  C109  F0E2         	movff	initServo@timer+1,??_initServo+1
  2489  001F28  0100               	movlb	0	; () banked
  2490  001F2A  90D8               	bcf	status,0,c
  2491  001F2C  37E1               	rlcf	??_initServo& (0+255),f,b
  2492  001F2E  37E2               	rlcf	(??_initServo+1)& (0+255),f,b
  2493  001F30  0100               	movlb	0	; () banked
  2494  001F32  90D8               	bcf	status,0,c
  2495  001F34  37E1               	rlcf	??_initServo& (0+255),f,b
  2496  001F36  37E2               	rlcf	(??_initServo+1)& (0+255),f,b
  2497  001F38  0E02               	movlw	2
  2498  001F3A  0100               	movlb	0	; () banked
  2499  001F3C  27E1               	addwf	??_initServo& (0+255),f,b
  2500  001F3E  0E00               	movlw	0
  2501  001F40  23E2               	addwfc	(??_initServo+1)& (0+255),f,b
  2502  001F42  0E3F               	movlw	low _servo
  2503  001F44  0100               	movlb	0	; () banked
  2504  001F46  25E1               	addwf	??_initServo& (0+255),w,b
  2505  001F48  6ED9               	movwf	fsr2l,c
  2506  001F4A  0E01               	movlw	high _servo
  2507  001F4C  0100               	movlb	0	; () banked
  2508  001F4E  21E2               	addwfc	(??_initServo+1)& (0+255),w,b
  2509  001F50  6EDA               	movwf	fsr2h,c
  2510  001F52  C106  FFDE         	movff	initServo@pin,postinc2
  2511  001F56  C107  FFDD         	movff	initServo@pin+1,postdec2
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;servo.c: 26: setAngle(&timer, angle);
  2515  001F5A  0E08               	movlw	low initServo@timer
  2516  001F5C  0100               	movlb	0	; () banked
  2517  001F5E  6FD7               	movwf	setAngle@motor& (0+255),b
  2518  001F60  0E01               	movlw	high initServo@timer
  2519  001F62  0100               	movlb	0	; () banked
  2520  001F64  6FD8               	movwf	(setAngle@motor+1)& (0+255),b
  2521  001F66  C102  F0D9         	movff	initServo@angle,setAngle@angle
  2522  001F6A  C103  F0DA         	movff	initServo@angle+1,setAngle@angle+1
  2523  001F6E  EC1B  F012         	call	_setAngle	;wreg free
  2524                           
  2525                           ;servo.c: 28: initTimer(timer);
  2526  001F72  C108  F024         	movff	initServo@timer,initTimer@timer
  2527  001F76  C109  F025         	movff	initServo@timer+1,initTimer@timer+1
  2528  001F7A  EC5F  F015         	call	_initTimer	;wreg free
  2529                           
  2530                           ;servo.c: 29: startTimer(timer,0);
  2531  001F7E  C108  F024         	movff	initServo@timer,startTimer@timer
  2532  001F82  C109  F025         	movff	initServo@timer+1,startTimer@timer+1
  2533  001F86  0E00               	movlw	0
  2534  001F88  6E26               	movwf	startTimer@val,c
  2535  001F8A  0E00               	movlw	0
  2536  001F8C  6E27               	movwf	startTimer@val+1,c
  2537  001F8E  0E00               	movlw	0
  2538  001F90  6E28               	movwf	startTimer@val+2,c
  2539  001F92  0E00               	movlw	0
  2540  001F94  6E29               	movwf	startTimer@val+3,c
  2541  001F96  ECCA  F014         	call	_startTimer	;wreg free
  2542  001F9A  0012               	return		;funcret
  2543  001F9C                     __end_of_initServo:
  2544                           	opt stack 0
  2545                           tblptru	equ	0xFF8
  2546                           tblptrh	equ	0xFF7
  2547                           tblptrl	equ	0xFF6
  2548                           tablat	equ	0xFF5
  2549                           postinc0	equ	0xFEE
  2550                           wreg	equ	0xFE8
  2551                           postdec1	equ	0xFE5
  2552                           plusw1	equ	0xFE3
  2553                           fsr1l	equ	0xFE1
  2554                           postinc2	equ	0xFDE
  2555                           postdec2	equ	0xFDD
  2556                           plusw2	equ	0xFDB
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _startTimer *****************
  2562 ;; Defined at:
  2563 ;;		line 75 in file "timer.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  timer           2   35[COMRAM] int 
  2566 ;;  val             4   37[COMRAM] long 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;		None
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		wreg, status,2, status,0
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2578 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2580 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2581 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2582 ;;Total ram usage:        8 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:    3
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_initServo
  2589 ;;		_testFrequency
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text5
  2594  002994                     __ptext5:
  2595                           	opt stack 0
  2596  002994                     _startTimer:
  2597                           	opt stack 25
  2598                           
  2599                           ;timer.c: 76: switch(timer){
  2600                           
  2601                           ;incstack = 0
  2602  002994  D012               	goto	l5734
  2603  002996                     l372:
  2604                           
  2605                           ;timer.c: 78: TMR0H = val>>8;
  2606  002996  C027  FFD7         	movff	startTimer@val+1,4055	;volatile
  2607                           
  2608                           ;timer.c: 79: TMR0L = val;
  2609  00299A  C026  FFD6         	movff	startTimer@val,4054	;volatile
  2610                           
  2611                           ;timer.c: 80: T0CON |= 1<<7;
  2612  00299E  8ED5               	bsf	4053,7,c	;volatile
  2613                           
  2614                           ;timer.c: 81: break;
  2615  0029A0  0012               	return	
  2616  0029A2                     l374:
  2617                           
  2618                           ;timer.c: 83: TMR1H = val>>8;
  2619  0029A2  C027  FFCF         	movff	startTimer@val+1,4047	;volatile
  2620                           
  2621                           ;timer.c: 84: TMR1L = val;
  2622  0029A6  C026  FFCE         	movff	startTimer@val,4046	;volatile
  2623                           
  2624                           ;timer.c: 85: T1CON |= 1<<0;
  2625  0029AA  80CD               	bsf	4045,0,c	;volatile
  2626                           
  2627                           ;timer.c: 86: break;
  2628  0029AC  0012               	return	
  2629  0029AE                     l375:
  2630                           
  2631                           ;timer.c: 88: TMR3H = val>>8;
  2632  0029AE  C027  FFB3         	movff	startTimer@val+1,4019	;volatile
  2633                           
  2634                           ;timer.c: 89: TMR3L = val;
  2635  0029B2  C026  FFB2         	movff	startTimer@val,4018	;volatile
  2636                           
  2637                           ;timer.c: 90: T3CON |= 1<<0;
  2638  0029B6  80B1               	bsf	4017,0,c	;volatile
  2639                           
  2640                           ;timer.c: 91: }
  2641  0029B8  0012               	return	
  2642  0029BA                     l5734:
  2643  0029BA  C024  F02A         	movff	startTimer@timer,??_startTimer
  2644  0029BE  C025  F02B         	movff	startTimer@timer+1,??_startTimer+1
  2645                           
  2646                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2647                           ; Switch size 1, requested type "space"
  2648                           ; Number of cases is 1, Range of values is 0 to 0
  2649                           ; switch strategies available:
  2650                           ; Name         Instructions Cycles
  2651                           ; simple_byte            4     3 (average)
  2652                           ;	Chosen strategy is simple_byte
  2653  0029C2  502B               	movf	??_startTimer+1,w,c
  2654  0029C4  0A00               	xorlw	0	; case 0
  2655  0029C6  A4D8               	btfss	status,2,c
  2656  0029C8  0012               	return	
  2657                           
  2658                           ; Switch size 1, requested type "space"
  2659                           ; Number of cases is 3, Range of values is 0 to 3
  2660                           ; switch strategies available:
  2661                           ; Name         Instructions Cycles
  2662                           ; simple_byte           10     6 (average)
  2663                           ;	Chosen strategy is simple_byte
  2664  0029CA  502A               	movf	??_startTimer,w,c
  2665  0029CC  0A00               	xorlw	0	; case 0
  2666  0029CE  B4D8               	btfsc	status,2,c
  2667  0029D0  D7E2               	goto	l372
  2668  0029D2  0A01               	xorlw	1	; case 1
  2669  0029D4  B4D8               	btfsc	status,2,c
  2670  0029D6  D7E5               	goto	l374
  2671  0029D8  0A02               	xorlw	2	; case 3
  2672  0029DA  A4D8               	btfss	status,2,c
  2673  0029DC  0012               	return	
  2674  0029DE  D7E7               	goto	l375
  2675  0029E0                     __end_of_startTimer:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           postinc0	equ	0xFEE
  2682                           wreg	equ	0xFE8
  2683                           postdec1	equ	0xFE5
  2684                           plusw1	equ	0xFE3
  2685                           fsr1l	equ	0xFE1
  2686                           postinc2	equ	0xFDE
  2687                           postdec2	equ	0xFDD
  2688                           plusw2	equ	0xFDB
  2689                           fsr2h	equ	0xFDA
  2690                           fsr2l	equ	0xFD9
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _setAngle *****************
  2694 ;; Defined at:
  2695 ;;		line 49 in file "servo.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  motor           2   87[BANK0 ] PTR int 
  2698 ;;		 -> initServo@timer(2), redirectingServo(6), padServo(6), 
  2699 ;;  angle           2   89[BANK0 ] int 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;		None
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2711 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;Total ram usage:       10 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    6
  2718 ;; This function calls:
  2719 ;;		_angleToPulse
  2720 ;; This function is called by:
  2721 ;;		_sortBattery
  2722 ;;		_initServo
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text6
  2727  002436                     __ptext6:
  2728                           	opt stack 0
  2729  002436                     _setAngle:
  2730                           	opt stack 23
  2731                           
  2732                           ;servo.c: 50: pulse[motor[0]] = 0xffff - angleToPulse(angle);
  2733                           
  2734                           ;incstack = 0
  2735  002436  C0D9  F0C0         	movff	setAngle@angle,angleToPulse@angle
  2736  00243A  C0DA  F0C1         	movff	setAngle@angle+1,angleToPulse@angle+1
  2737  00243E  EC09  F00B         	call	_angleToPulse	;wreg free
  2738  002442  0100               	movlb	0	; () banked
  2739  002444  1FC0               	comf	?_angleToPulse& (0+255),f,b
  2740  002446  0100               	movlb	0	; () banked
  2741  002448  1FC1               	comf	(?_angleToPulse+1)& (0+255),f,b
  2742  00244A  0100               	movlb	0	; () banked
  2743  00244C  1FC2               	comf	(?_angleToPulse+2)& (0+255),f,b
  2744  00244E  0100               	movlb	0	; () banked
  2745  002450  1FC3               	comf	(?_angleToPulse+3)& (0+255),f,b
  2746  002452  0100               	movlb	0	; () banked
  2747  002454  2BC0               	incf	?_angleToPulse& (0+255),f,b
  2748  002456  0E00               	movlw	0
  2749  002458  0100               	movlb	0	; () banked
  2750  00245A  23C1               	addwfc	(?_angleToPulse+1)& (0+255),f,b
  2751  00245C  0100               	movlb	0	; () banked
  2752  00245E  23C2               	addwfc	(?_angleToPulse+2)& (0+255),f,b
  2753  002460  0100               	movlb	0	; () banked
  2754  002462  23C3               	addwfc	(?_angleToPulse+3)& (0+255),f,b
  2755  002464  0EFF               	movlw	255
  2756  002466  0100               	movlb	0	; () banked
  2757  002468  25C0               	addwf	?_angleToPulse& (0+255),w,b
  2758  00246A  0100               	movlb	0	; () banked
  2759  00246C  6FDB               	movwf	??_setAngle& (0+255),b
  2760  00246E  0EFF               	movlw	255
  2761  002470  0100               	movlb	0	; () banked
  2762  002472  21C1               	addwfc	(?_angleToPulse+1)& (0+255),w,b
  2763  002474  0100               	movlb	0	; () banked
  2764  002476  6FDC               	movwf	(??_setAngle+1)& (0+255),b
  2765  002478  0E00               	movlw	0
  2766  00247A  0100               	movlb	0	; () banked
  2767  00247C  21C2               	addwfc	(?_angleToPulse+2)& (0+255),w,b
  2768  00247E  0100               	movlb	0	; () banked
  2769  002480  6FDD               	movwf	(??_setAngle+2)& (0+255),b
  2770  002482  0E00               	movlw	0
  2771  002484  0100               	movlb	0	; () banked
  2772  002486  21C3               	addwfc	(?_angleToPulse+3)& (0+255),w,b
  2773  002488  0100               	movlb	0	; () banked
  2774  00248A  6FDE               	movwf	(??_setAngle+3)& (0+255),b
  2775  00248C  C0D7  FFD9         	movff	setAngle@motor,fsr2l
  2776  002490  C0D8  FFDA         	movff	setAngle@motor+1,fsr2h
  2777  002494  CFDE F0DF          	movff	postinc2,??_setAngle+4
  2778  002498  CFDD F0E0          	movff	postdec2,??_setAngle+5
  2779  00249C  0100               	movlb	0	; () banked
  2780  00249E  90D8               	bcf	status,0,c
  2781  0024A0  37DF               	rlcf	(??_setAngle+4)& (0+255),f,b
  2782  0024A2  37E0               	rlcf	(??_setAngle+5)& (0+255),f,b
  2783  0024A4  0100               	movlb	0	; () banked
  2784  0024A6  90D8               	bcf	status,0,c
  2785  0024A8  37DF               	rlcf	(??_setAngle+4)& (0+255),f,b
  2786  0024AA  37E0               	rlcf	(??_setAngle+5)& (0+255),f,b
  2787  0024AC  0E2F               	movlw	low _pulse
  2788  0024AE  0100               	movlb	0	; () banked
  2789  0024B0  25DF               	addwf	(??_setAngle+4)& (0+255),w,b
  2790  0024B2  6ED9               	movwf	fsr2l,c
  2791  0024B4  0E01               	movlw	high _pulse
  2792  0024B6  0100               	movlb	0	; () banked
  2793  0024B8  21E0               	addwfc	(??_setAngle+5)& (0+255),w,b
  2794  0024BA  6EDA               	movwf	fsr2h,c
  2795  0024BC  C0DB  FFDE         	movff	??_setAngle,postinc2
  2796  0024C0  C0DC  FFDE         	movff	??_setAngle+1,postinc2
  2797  0024C4  C0DD  FFDE         	movff	??_setAngle+2,postinc2
  2798  0024C8  C0DE  FFDE         	movff	??_setAngle+3,postinc2
  2799                           
  2800                           ; BSR set to: 0
  2801  0024CC  0012               	return		;funcret
  2802  0024CE                     __end_of_setAngle:
  2803                           	opt stack 0
  2804                           tblptru	equ	0xFF8
  2805                           tblptrh	equ	0xFF7
  2806                           tblptrl	equ	0xFF6
  2807                           tablat	equ	0xFF5
  2808                           postinc0	equ	0xFEE
  2809                           wreg	equ	0xFE8
  2810                           postdec1	equ	0xFE5
  2811                           plusw1	equ	0xFE3
  2812                           fsr1l	equ	0xFE1
  2813                           postinc2	equ	0xFDE
  2814                           postdec2	equ	0xFDD
  2815                           plusw2	equ	0xFDB
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _angleToPulse *****************
  2821 ;; Defined at:
  2822 ;;		line 41 in file "servo.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  angle           2   64[BANK0 ] int 
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  a000            4   83[BANK0 ] long 
  2827 ;;  a180            4   76[BANK0 ] long 
  2828 ;;  offset          4   72[BANK0 ] long 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  4   64[BANK0 ] long 
  2831 ;; Registers used:
  2832 ;;		wreg, status,2, status,0, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2838 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;Total ram usage:       23 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    5
  2845 ;; This function calls:
  2846 ;;		___altoft
  2847 ;;		___awtoft
  2848 ;;		___ftadd
  2849 ;;		___ftdiv
  2850 ;;		___ftmul
  2851 ;;		___fttol
  2852 ;; This function is called by:
  2853 ;;		_setAngle
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text7
  2858  001612                     __ptext7:
  2859                           	opt stack 0
  2860  001612                     _angleToPulse:
  2861                           	opt stack 23
  2862                           
  2863                           ;servo.c: 42: long offset = 0;
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;incstack = 0
  2867  001612  0E00               	movlw	0
  2868  001614  0100               	movlb	0	; () banked
  2869  001616  6FC8               	movwf	angleToPulse@offset& (0+255),b
  2870  001618  0E00               	movlw	0
  2871  00161A  6FC9               	movwf	(angleToPulse@offset+1)& (0+255),b
  2872  00161C  0E00               	movlw	0
  2873  00161E  6FCA               	movwf	(angleToPulse@offset+2)& (0+255),b
  2874  001620  0E00               	movlw	0
  2875  001622  6FCB               	movwf	(angleToPulse@offset+3)& (0+255),b
  2876                           
  2877                           ;servo.c: 43: long a000 = 1250;
  2878  001624  0EE2               	movlw	226
  2879  001626  0100               	movlb	0	; () banked
  2880  001628  6FD3               	movwf	angleToPulse@a000& (0+255),b
  2881  00162A  0E04               	movlw	4
  2882  00162C  6FD4               	movwf	(angleToPulse@a000+1)& (0+255),b
  2883  00162E  0E00               	movlw	0
  2884  001630  6FD5               	movwf	(angleToPulse@a000+2)& (0+255),b
  2885  001632  0E00               	movlw	0
  2886  001634  6FD6               	movwf	(angleToPulse@a000+3)& (0+255),b
  2887                           
  2888                           ;servo.c: 44: long a180 = 6250;
  2889  001636  0E6A               	movlw	106
  2890  001638  0100               	movlb	0	; () banked
  2891  00163A  6FCC               	movwf	angleToPulse@a180& (0+255),b
  2892  00163C  0E18               	movlw	24
  2893  00163E  6FCD               	movwf	(angleToPulse@a180+1)& (0+255),b
  2894  001640  0E00               	movlw	0
  2895  001642  6FCE               	movwf	(angleToPulse@a180+2)& (0+255),b
  2896  001644  0E00               	movlw	0
  2897  001646  6FCF               	movwf	(angleToPulse@a180+3)& (0+255),b
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;servo.c: 46: return a000 + angle/180.0*(a180-a000) + offset;
  2901  001648  C0D3  F0C4         	movff	angleToPulse@a000,??_angleToPulse
  2902  00164C  C0D4  F0C5         	movff	angleToPulse@a000+1,??_angleToPulse+1
  2903  001650  C0D5  F0C6         	movff	angleToPulse@a000+2,??_angleToPulse+2
  2904  001654  C0D6  F0C7         	movff	angleToPulse@a000+3,??_angleToPulse+3
  2905  001658  0100               	movlb	0	; () banked
  2906  00165A  1FC4               	comf	??_angleToPulse& (0+255),f,b
  2907  00165C  1FC5               	comf	(??_angleToPulse+1)& (0+255),f,b
  2908  00165E  1FC6               	comf	(??_angleToPulse+2)& (0+255),f,b
  2909  001660  1FC7               	comf	(??_angleToPulse+3)& (0+255),f,b
  2910  001662  2BC4               	incf	??_angleToPulse& (0+255),f,b
  2911  001664  0E00               	movlw	0
  2912  001666  23C5               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  2913  001668  23C6               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  2914  00166A  23C7               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  2915  00166C  0100               	movlb	0	; () banked
  2916  00166E  51CC               	movf	angleToPulse@a180& (0+255),w,b
  2917  001670  0100               	movlb	0	; () banked
  2918  001672  25C4               	addwf	??_angleToPulse& (0+255),w,b
  2919  001674  6E2C               	movwf	___altoft@c,c
  2920  001676  0100               	movlb	0	; () banked
  2921  001678  51CD               	movf	(angleToPulse@a180+1)& (0+255),w,b
  2922  00167A  0100               	movlb	0	; () banked
  2923  00167C  21C5               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  2924  00167E  6E2D               	movwf	___altoft@c+1,c
  2925  001680  0100               	movlb	0	; () banked
  2926  001682  51CE               	movf	(angleToPulse@a180+2)& (0+255),w,b
  2927  001684  0100               	movlb	0	; () banked
  2928  001686  21C6               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  2929  001688  6E2E               	movwf	___altoft@c+2,c
  2930  00168A  0100               	movlb	0	; () banked
  2931  00168C  51CF               	movf	(angleToPulse@a180+3)& (0+255),w,b
  2932  00168E  0100               	movlb	0	; () banked
  2933  001690  21C7               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  2934  001692  6E2F               	movwf	___altoft@c+3,c
  2935  001694  ECC2  F013         	call	___altoft	;wreg free
  2936  001698  C02C  F08F         	movff	?___altoft,___ftmul@f2
  2937  00169C  C02D  F090         	movff	?___altoft+1,___ftmul@f2+1
  2938  0016A0  C02E  F091         	movff	?___altoft+2,___ftmul@f2+2
  2939  0016A4  0E00               	movlw	0
  2940  0016A6  0100               	movlb	0	; () banked
  2941  0016A8  6F83               	movwf	___ftdiv@f2& (0+255),b
  2942  0016AA  0E34               	movlw	52
  2943  0016AC  0100               	movlb	0	; () banked
  2944  0016AE  6F84               	movwf	(___ftdiv@f2+1)& (0+255),b
  2945  0016B0  0E43               	movlw	67
  2946  0016B2  0100               	movlb	0	; () banked
  2947  0016B4  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  2948  0016B6  C0C0  F02C         	movff	angleToPulse@angle,___awtoft@c
  2949  0016BA  C0C1  F02D         	movff	angleToPulse@angle+1,___awtoft@c+1
  2950  0016BE  ECC5  F015         	call	___awtoft	;wreg free
  2951  0016C2  C02C  F080         	movff	?___awtoft,___ftdiv@f1
  2952  0016C6  C02D  F081         	movff	?___awtoft+1,___ftdiv@f1+1
  2953  0016CA  C02E  F082         	movff	?___awtoft+2,___ftdiv@f1+2
  2954  0016CE  EC09  F00D         	call	___ftdiv	;wreg free
  2955  0016D2  C080  F08C         	movff	?___ftdiv,___ftmul@f1
  2956  0016D6  C081  F08D         	movff	?___ftdiv+1,___ftmul@f1+1
  2957  0016DA  C082  F08E         	movff	?___ftdiv+2,___ftmul@f1+2
  2958  0016DE  ECB8  F00B         	call	___ftmul	;wreg free
  2959  0016E2  C08C  F0A8         	movff	?___ftmul,___ftadd@f2
  2960  0016E6  C08D  F0A9         	movff	?___ftmul+1,___ftadd@f2+1
  2961  0016EA  C08E  F0AA         	movff	?___ftmul+2,___ftadd@f2+2
  2962  0016EE  C0D3  F02C         	movff	angleToPulse@a000,___altoft@c
  2963  0016F2  C0D4  F02D         	movff	angleToPulse@a000+1,___altoft@c+1
  2964  0016F6  C0D5  F02E         	movff	angleToPulse@a000+2,___altoft@c+2
  2965  0016FA  C0D6  F02F         	movff	angleToPulse@a000+3,___altoft@c+3
  2966  0016FE  ECC2  F013         	call	___altoft	;wreg free
  2967  001702  C02C  F0A5         	movff	?___altoft,___ftadd@f1
  2968  001706  C02D  F0A6         	movff	?___altoft+1,___ftadd@f1+1
  2969  00170A  C02E  F0A7         	movff	?___altoft+2,___ftadd@f1+2
  2970  00170E  ECAA  F006         	call	___ftadd	;wreg free
  2971  001712  C0A5  F0D0         	movff	?___ftadd,_angleToPulse$1332
  2972  001716  C0A6  F0D1         	movff	?___ftadd+1,_angleToPulse$1332+1
  2973  00171A  C0A7  F0D2         	movff	?___ftadd+2,_angleToPulse$1332+2
  2974                           
  2975                           ;servo.c: 46: return a000 + angle/180.0*(a180-a000) + offset;
  2976  00171E  C0C8  F02C         	movff	angleToPulse@offset,___altoft@c
  2977  001722  C0C9  F02D         	movff	angleToPulse@offset+1,___altoft@c+1
  2978  001726  C0CA  F02E         	movff	angleToPulse@offset+2,___altoft@c+2
  2979  00172A  C0CB  F02F         	movff	angleToPulse@offset+3,___altoft@c+3
  2980  00172E  ECC2  F013         	call	___altoft	;wreg free
  2981  001732  C02C  F0A8         	movff	?___altoft,___ftadd@f2
  2982  001736  C02D  F0A9         	movff	?___altoft+1,___ftadd@f2+1
  2983  00173A  C02E  F0AA         	movff	?___altoft+2,___ftadd@f2+2
  2984  00173E  C0D0  F0A5         	movff	_angleToPulse$1332,___ftadd@f1
  2985  001742  C0D1  F0A6         	movff	_angleToPulse$1332+1,___ftadd@f1+1
  2986  001746  C0D2  F0A7         	movff	_angleToPulse$1332+2,___ftadd@f1+2
  2987  00174A  ECAA  F006         	call	___ftadd	;wreg free
  2988  00174E  C0A5  F0B1         	movff	?___ftadd,___fttol@f1
  2989  001752  C0A6  F0B2         	movff	?___ftadd+1,___fttol@f1+1
  2990  001756  C0A7  F0B3         	movff	?___ftadd+2,___fttol@f1+2
  2991  00175A  EC67  F00C         	call	___fttol	;wreg free
  2992  00175E  C0B1  F0C0         	movff	?___fttol,?_angleToPulse
  2993  001762  C0B2  F0C1         	movff	?___fttol+1,?_angleToPulse+1
  2994  001766  C0B3  F0C2         	movff	?___fttol+2,?_angleToPulse+2
  2995  00176A  C0B4  F0C3         	movff	?___fttol+3,?_angleToPulse+3
  2996  00176E  0012               	return	
  2997  001770                     __end_of_angleToPulse:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           plusw1	equ	0xFE3
  3007                           fsr1l	equ	0xFE1
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           plusw2	equ	0xFDB
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function ___ftdiv *****************
  3016 ;; Defined at:
  3017 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  f1              3    0[BANK0 ] float 
  3020 ;;  f2              3    3[BANK0 ] float 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  f3              3    7[BANK0 ] float 
  3023 ;;  sign            1   11[BANK0 ] unsigned char 
  3024 ;;  exp             1   10[BANK0 ] unsigned char 
  3025 ;;  cntr            1    6[BANK0 ] unsigned char 
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  3    0[BANK0 ] float 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2, status,0, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3035 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;Total ram usage:       15 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    4
  3042 ;; This function calls:
  3043 ;;		___ftpack
  3044 ;; This function is called by:
  3045 ;;		_sortBattery
  3046 ;;		_angleToPulse
  3047 ;;		_testFrequency
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text8
  3052  001A12                     __ptext8:
  3053                           	opt stack 0
  3054  001A12                     ___ftdiv:
  3055                           	opt stack 23
  3056                           
  3057                           ;incstack = 0
  3058  001A12  C082  F036         	movff	___ftdiv@f1+2,??___ftdiv
  3059  001A16  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  3060  001A18  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  3061  001A1A  0100               	movlb	0	; () banked
  3062  001A1C  3581               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3063  001A1E  3636               	rlcf	??___ftdiv& (0+255),f,c
  3064  001A20  E301               	bnc	u4471
  3065  001A22  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  3066  001A24                     u4471:
  3067  001A24  5036               	movf	??___ftdiv,w,c
  3068  001A26  0100               	movlb	0	; () banked
  3069  001A28  6F8A               	movwf	___ftdiv@exp& (0+255),b
  3070  001A2A  0100               	movlb	0	; () banked
  3071  001A2C  518A               	movf	___ftdiv@exp& (0+255),w,b
  3072  001A2E  A4D8               	btfss	status,2,c
  3073  001A30  D00A               	goto	l4972
  3074                           
  3075                           ; BSR set to: 0
  3076  001A32  0E00               	movlw	0
  3077  001A34  0100               	movlb	0	; () banked
  3078  001A36  6F80               	movwf	?___ftdiv& (0+255),b
  3079  001A38  0E00               	movlw	0
  3080  001A3A  0100               	movlb	0	; () banked
  3081  001A3C  6F81               	movwf	(?___ftdiv+1)& (0+255),b
  3082  001A3E  0E00               	movlw	0
  3083  001A40  0100               	movlb	0	; () banked
  3084  001A42  6F82               	movwf	(?___ftdiv+2)& (0+255),b
  3085                           
  3086                           ; BSR set to: 0
  3087  001A44  0012               	return	
  3088  001A46                     l4972:
  3089                           
  3090                           ; BSR set to: 0
  3091  001A46  C085  F036         	movff	___ftdiv@f2+2,??___ftdiv
  3092  001A4A  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  3093  001A4C  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  3094  001A4E  0100               	movlb	0	; () banked
  3095  001A50  3584               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3096  001A52  3636               	rlcf	??___ftdiv& (0+255),f,c
  3097  001A54  E301               	bnc	u4491
  3098  001A56  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  3099  001A58                     u4491:
  3100  001A58  5036               	movf	??___ftdiv,w,c
  3101  001A5A  0100               	movlb	0	; () banked
  3102  001A5C  6F8B               	movwf	___ftdiv@sign& (0+255),b
  3103  001A5E  0100               	movlb	0	; () banked
  3104  001A60  518B               	movf	___ftdiv@sign& (0+255),w,b
  3105  001A62  A4D8               	btfss	status,2,c
  3106  001A64  D00A               	goto	l4978
  3107                           
  3108                           ; BSR set to: 0
  3109  001A66  0E00               	movlw	0
  3110  001A68  0100               	movlb	0	; () banked
  3111  001A6A  6F80               	movwf	?___ftdiv& (0+255),b
  3112  001A6C  0E00               	movlw	0
  3113  001A6E  0100               	movlb	0	; () banked
  3114  001A70  6F81               	movwf	(?___ftdiv+1)& (0+255),b
  3115  001A72  0E00               	movlw	0
  3116  001A74  0100               	movlb	0	; () banked
  3117  001A76  6F82               	movwf	(?___ftdiv+2)& (0+255),b
  3118                           
  3119                           ; BSR set to: 0
  3120  001A78  0012               	return	
  3121  001A7A                     l4978:
  3122                           
  3123                           ; BSR set to: 0
  3124  001A7A  0E00               	movlw	0
  3125  001A7C  0100               	movlb	0	; () banked
  3126  001A7E  6F87               	movwf	___ftdiv@f3& (0+255),b
  3127  001A80  0E00               	movlw	0
  3128  001A82  0100               	movlb	0	; () banked
  3129  001A84  6F88               	movwf	(___ftdiv@f3+1)& (0+255),b
  3130  001A86  0E00               	movlw	0
  3131  001A88  0100               	movlb	0	; () banked
  3132  001A8A  6F89               	movwf	(___ftdiv@f3+2)& (0+255),b
  3133                           
  3134                           ; BSR set to: 0
  3135  001A8C  0100               	movlb	0	; () banked
  3136  001A8E  518B               	movf	___ftdiv@sign& (0+255),w,b
  3137  001A90  0F89               	addlw	137
  3138  001A92  0100               	movlb	0	; () banked
  3139  001A94  5F8A               	subwf	___ftdiv@exp& (0+255),f,b
  3140                           
  3141                           ; BSR set to: 0
  3142  001A96  C082  F08B         	movff	___ftdiv@f1+2,___ftdiv@sign
  3143                           
  3144                           ; BSR set to: 0
  3145  001A9A  0100               	movlb	0	; () banked
  3146  001A9C  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3147  001A9E  0100               	movlb	0	; () banked
  3148  001AA0  1B8B               	xorwf	___ftdiv@sign& (0+255),f,b
  3149                           
  3150                           ; BSR set to: 0
  3151  001AA2  0E80               	movlw	128
  3152  001AA4  0100               	movlb	0	; () banked
  3153  001AA6  178B               	andwf	___ftdiv@sign& (0+255),f,b
  3154                           
  3155                           ; BSR set to: 0
  3156  001AA8  0100               	movlb	0	; () banked
  3157  001AAA  8F81               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3158                           
  3159                           ; BSR set to: 0
  3160  001AAC  0EFF               	movlw	255
  3161  001AAE  0100               	movlb	0	; () banked
  3162  001AB0  1780               	andwf	___ftdiv@f1& (0+255),f,b
  3163  001AB2  0EFF               	movlw	255
  3164  001AB4  0100               	movlb	0	; () banked
  3165  001AB6  1781               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3166  001AB8  0E00               	movlw	0
  3167  001ABA  0100               	movlb	0	; () banked
  3168  001ABC  1782               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3169                           
  3170                           ; BSR set to: 0
  3171  001ABE  0100               	movlb	0	; () banked
  3172  001AC0  8F84               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3173                           
  3174                           ; BSR set to: 0
  3175  001AC2  0EFF               	movlw	255
  3176  001AC4  0100               	movlb	0	; () banked
  3177  001AC6  1783               	andwf	___ftdiv@f2& (0+255),f,b
  3178  001AC8  0EFF               	movlw	255
  3179  001ACA  0100               	movlb	0	; () banked
  3180  001ACC  1784               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3181  001ACE  0E00               	movlw	0
  3182  001AD0  0100               	movlb	0	; () banked
  3183  001AD2  1785               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3184                           
  3185                           ; BSR set to: 0
  3186  001AD4  0E18               	movlw	24
  3187  001AD6  0100               	movlb	0	; () banked
  3188  001AD8  6F86               	movwf	___ftdiv@cntr& (0+255),b
  3189  001ADA                     l4998:
  3190                           
  3191                           ; BSR set to: 0
  3192  001ADA  0100               	movlb	0	; () banked
  3193  001ADC  90D8               	bcf	status,0,c
  3194  001ADE  3787               	rlcf	___ftdiv@f3& (0+255),f,b
  3195  001AE0  3788               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3196  001AE2  3789               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3197                           
  3198                           ; BSR set to: 0
  3199  001AE4  0100               	movlb	0	; () banked
  3200  001AE6  5183               	movf	___ftdiv@f2& (0+255),w,b
  3201  001AE8  0100               	movlb	0	; () banked
  3202  001AEA  5D80               	subwf	___ftdiv@f1& (0+255),w,b
  3203  001AEC  0100               	movlb	0	; () banked
  3204  001AEE  5184               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3205  001AF0  0100               	movlb	0	; () banked
  3206  001AF2  5981               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3207  001AF4  0100               	movlb	0	; () banked
  3208  001AF6  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3209  001AF8  0100               	movlb	0	; () banked
  3210  001AFA  5982               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3211  001AFC  A0D8               	btfss	status,0,c
  3212  001AFE  D00E               	goto	l1032
  3213                           
  3214                           ; BSR set to: 0
  3215  001B00  0100               	movlb	0	; () banked
  3216  001B02  5183               	movf	___ftdiv@f2& (0+255),w,b
  3217  001B04  0100               	movlb	0	; () banked
  3218  001B06  5F80               	subwf	___ftdiv@f1& (0+255),f,b
  3219  001B08  0100               	movlb	0	; () banked
  3220  001B0A  5184               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3221  001B0C  0100               	movlb	0	; () banked
  3222  001B0E  5B81               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3223  001B10  0100               	movlb	0	; () banked
  3224  001B12  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3225  001B14  0100               	movlb	0	; () banked
  3226  001B16  5B82               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3227                           
  3228                           ; BSR set to: 0
  3229  001B18  0100               	movlb	0	; () banked
  3230  001B1A  8187               	bsf	___ftdiv@f3& (0+255),0,b
  3231  001B1C                     l1032:
  3232                           
  3233                           ; BSR set to: 0
  3234  001B1C  0100               	movlb	0	; () banked
  3235  001B1E  90D8               	bcf	status,0,c
  3236  001B20  3780               	rlcf	___ftdiv@f1& (0+255),f,b
  3237  001B22  3781               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3238  001B24  3782               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3239                           
  3240                           ; BSR set to: 0
  3241  001B26  0100               	movlb	0	; () banked
  3242  001B28  2F86               	decfsz	___ftdiv@cntr& (0+255),f,b
  3243  001B2A  D7D7               	goto	l4998
  3244                           
  3245                           ; BSR set to: 0
  3246                           
  3247                           ; BSR set to: 0
  3248  001B2C  C087  F024         	movff	___ftdiv@f3,___ftpack@arg
  3249  001B30  C088  F025         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3250  001B34  C089  F026         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3251  001B38  C08A  F027         	movff	___ftdiv@exp,___ftpack@exp
  3252  001B3C  C08B  F028         	movff	___ftdiv@sign,___ftpack@sign
  3253  001B40  EC78  F011         	call	___ftpack	;wreg free
  3254  001B44  C024  F080         	movff	?___ftpack,?___ftdiv
  3255  001B48  C025  F081         	movff	?___ftpack+1,?___ftdiv+1
  3256  001B4C  C026  F082         	movff	?___ftpack+2,?___ftdiv+2
  3257  001B50  0012               	return	
  3258  001B52                     __end_of___ftdiv:
  3259                           	opt stack 0
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           tblptrl	equ	0xFF6
  3263                           tablat	equ	0xFF5
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           postdec1	equ	0xFE5
  3267                           plusw1	equ	0xFE3
  3268                           fsr1l	equ	0xFE1
  3269                           postinc2	equ	0xFDE
  3270                           postdec2	equ	0xFDD
  3271                           plusw2	equ	0xFDB
  3272                           fsr2h	equ	0xFDA
  3273                           fsr2l	equ	0xFD9
  3274                           status	equ	0xFD8
  3275                           
  3276 ;; *************** function ___awtoft *****************
  3277 ;; Defined at:
  3278 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  c               2   43[COMRAM] int 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  sign            1   46[COMRAM] unsigned char 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  3   43[COMRAM] float 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3292 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;Total ram usage:        4 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    4
  3299 ;; This function calls:
  3300 ;;		___ftpack
  3301 ;; This function is called by:
  3302 ;;		_angleToPulse
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text9
  3307  002B8A                     __ptext9:
  3308                           	opt stack 0
  3309  002B8A                     ___awtoft:
  3310                           	opt stack 23
  3311                           
  3312                           ;incstack = 0
  3313  002B8A  0E00               	movlw	0
  3314  002B8C  6E2F               	movwf	___awtoft@sign,c
  3315  002B8E  AE2D               	btfss	___awtoft@c+1,7,c
  3316  002B90  D006               	goto	l5148
  3317  002B92  6C2C               	negf	___awtoft@c,c
  3318  002B94  1E2D               	comf	___awtoft@c+1,f,c
  3319  002B96  B0D8               	btfsc	status,0,c
  3320  002B98  2A2D               	incf	___awtoft@c+1,f,c
  3321  002B9A  0E01               	movlw	1
  3322  002B9C  6E2F               	movwf	___awtoft@sign,c
  3323  002B9E                     l5148:
  3324  002B9E  C02C  F024         	movff	___awtoft@c,___ftpack@arg
  3325  002BA2  C02D  F025         	movff	___awtoft@c+1,___ftpack@arg+1
  3326  002BA6  6A26               	clrf	___ftpack@arg+2,c
  3327  002BA8  0E8E               	movlw	142
  3328  002BAA  6E27               	movwf	___ftpack@exp,c
  3329  002BAC  C02F  F028         	movff	___awtoft@sign,___ftpack@sign
  3330  002BB0  EC78  F011         	call	___ftpack	;wreg free
  3331  002BB4  C024  F02C         	movff	?___ftpack,?___awtoft
  3332  002BB8  C025  F02D         	movff	?___ftpack+1,?___awtoft+1
  3333  002BBC  C026  F02E         	movff	?___ftpack+2,?___awtoft+2
  3334  002BC0  0012               	return	
  3335  002BC2                     __end_of___awtoft:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           postinc0	equ	0xFEE
  3342                           wreg	equ	0xFE8
  3343                           postdec1	equ	0xFE5
  3344                           plusw1	equ	0xFE3
  3345                           fsr1l	equ	0xFE1
  3346                           postinc2	equ	0xFDE
  3347                           postdec2	equ	0xFDD
  3348                           plusw2	equ	0xFDB
  3349                           fsr2h	equ	0xFDA
  3350                           fsr2l	equ	0xFD9
  3351                           status	equ	0xFD8
  3352                           
  3353 ;; *************** function ___altoft *****************
  3354 ;; Defined at:
  3355 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  c               4   43[COMRAM] long 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  sign            1   52[COMRAM] unsigned char 
  3360 ;;  exp             1   51[COMRAM] unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  3   43[COMRAM] float 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;Total ram usage:       10 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    4
  3377 ;; This function calls:
  3378 ;;		___ftpack
  3379 ;; This function is called by:
  3380 ;;		_sortBattery
  3381 ;;		_angleToPulse
  3382 ;;		_testFrequency
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text10
  3387  002784                     __ptext10:
  3388                           	opt stack 0
  3389  002784                     ___altoft:
  3390                           	opt stack 23
  3391                           
  3392                           ;incstack = 0
  3393  002784  0E00               	movlw	0
  3394  002786  6E35               	movwf	___altoft@sign,c
  3395  002788  0E8E               	movlw	142
  3396  00278A  6E34               	movwf	___altoft@exp,c
  3397  00278C  AE2F               	btfss	___altoft@c+3,7,c
  3398  00278E  D011               	goto	l4890
  3399  002790  1E2F               	comf	___altoft@c+3,f,c
  3400  002792  1E2E               	comf	___altoft@c+2,f,c
  3401  002794  1E2D               	comf	___altoft@c+1,f,c
  3402  002796  6C2C               	negf	___altoft@c,c
  3403  002798  0E00               	movlw	0
  3404  00279A  222D               	addwfc	___altoft@c+1,f,c
  3405  00279C  222E               	addwfc	___altoft@c+2,f,c
  3406  00279E  222F               	addwfc	___altoft@c+3,f,c
  3407  0027A0  0E01               	movlw	1
  3408  0027A2  6E35               	movwf	___altoft@sign,c
  3409  0027A4  D006               	goto	l4890
  3410  0027A6                     l4888:
  3411  0027A6  90D8               	bcf	status,0,c
  3412  0027A8  322F               	rrcf	___altoft@c+3,f,c
  3413  0027AA  322E               	rrcf	___altoft@c+2,f,c
  3414  0027AC  322D               	rrcf	___altoft@c+1,f,c
  3415  0027AE  322C               	rrcf	___altoft@c,f,c
  3416  0027B0  2A34               	incf	___altoft@exp,f,c
  3417  0027B2                     l4890:
  3418  0027B2  0E00               	movlw	0
  3419  0027B4  142C               	andwf	___altoft@c,w,c
  3420  0027B6  6E30               	movwf	??___altoft& (0+255),c
  3421  0027B8  0E00               	movlw	0
  3422  0027BA  142D               	andwf	___altoft@c+1,w,c
  3423  0027BC  6E31               	movwf	(??___altoft+1)& (0+255),c
  3424  0027BE  0E00               	movlw	0
  3425  0027C0  142E               	andwf	___altoft@c+2,w,c
  3426  0027C2  6E32               	movwf	(??___altoft+2)& (0+255),c
  3427  0027C4  0EFF               	movlw	255
  3428  0027C6  142F               	andwf	___altoft@c+3,w,c
  3429  0027C8  6E33               	movwf	(??___altoft+3)& (0+255),c
  3430  0027CA  5030               	movf	??___altoft,w,c
  3431  0027CC  1031               	iorwf	??___altoft+1,w,c
  3432  0027CE  1032               	iorwf	??___altoft+2,w,c
  3433  0027D0  1033               	iorwf	??___altoft+3,w,c
  3434  0027D2  A4D8               	btfss	status,2,c
  3435  0027D4  D7E8               	goto	l4888
  3436  0027D6  C02C  F024         	movff	___altoft@c,___ftpack@arg
  3437  0027DA  C02D  F025         	movff	___altoft@c+1,___ftpack@arg+1
  3438  0027DE  C02E  F026         	movff	___altoft@c+2,___ftpack@arg+2
  3439  0027E2  C034  F027         	movff	___altoft@exp,___ftpack@exp
  3440  0027E6  C035  F028         	movff	___altoft@sign,___ftpack@sign
  3441  0027EA  EC78  F011         	call	___ftpack	;wreg free
  3442  0027EE  C024  F02C         	movff	?___ftpack,?___altoft
  3443  0027F2  C025  F02D         	movff	?___ftpack+1,?___altoft+1
  3444  0027F6  C026  F02E         	movff	?___ftpack+2,?___altoft+2
  3445  0027FA  0012               	return	
  3446  0027FC                     __end_of___altoft:
  3447                           	opt stack 0
  3448                           tblptru	equ	0xFF8
  3449                           tblptrh	equ	0xFF7
  3450                           tblptrl	equ	0xFF6
  3451                           tablat	equ	0xFF5
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           plusw1	equ	0xFE3
  3456                           fsr1l	equ	0xFE1
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           plusw2	equ	0xFDB
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464 ;; *************** function _initTimer *****************
  3465 ;; Defined at:
  3466 ;;		line 52 in file "timer.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  timer           2   35[COMRAM] int 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3480 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;Total ram usage:        4 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    3
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_initServo
  3491 ;;		_testFrequency
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           	psect	text11
  3496  002ABE                     __ptext11:
  3497                           	opt stack 0
  3498  002ABE                     _initTimer:
  3499                           	opt stack 25
  3500                           
  3501                           ;timer.c: 53: switch(timer){
  3502                           
  3503                           ;incstack = 0
  3504  002ABE  D00D               	goto	l5720
  3505  002AC0                     l5704:
  3506                           
  3507                           ;timer.c: 55: T0CON = 0;
  3508  002AC0  0E00               	movlw	0
  3509  002AC2  6ED5               	movwf	4053,c	;volatile
  3510                           
  3511                           ;timer.c: 56: T0CON |= 1<<3;
  3512  002AC4  86D5               	bsf	4053,3,c	;volatile
  3513                           
  3514                           ;timer.c: 58: TMR0IE = 1;
  3515  002AC6  8AF2               	bsf	intcon,5,c	;volatile
  3516                           
  3517                           ;timer.c: 59: break;
  3518  002AC8  D01A               	goto	l365
  3519  002ACA                     l5710:
  3520                           
  3521                           ;timer.c: 61: T1CON = 0;
  3522  002ACA  0E00               	movlw	0
  3523  002ACC  6ECD               	movwf	4045,c	;volatile
  3524                           
  3525                           ;timer.c: 63: TMR1IE = 1;
  3526  002ACE  809D               	bsf	3997,0,c	;volatile
  3527                           
  3528                           ;timer.c: 64: break;
  3529  002AD0  D016               	goto	l365
  3530  002AD2                     l5714:
  3531                           
  3532                           ;timer.c: 66: T3CON = 0;
  3533  002AD2  0E00               	movlw	0
  3534  002AD4  6EB1               	movwf	4017,c	;volatile
  3535                           
  3536                           ;timer.c: 67: TMR3IE = 1;
  3537  002AD6  82A0               	bsf	4000,1,c	;volatile
  3538                           
  3539                           ;timer.c: 69: }
  3540                           
  3541                           ;timer.c: 68: break;
  3542  002AD8  D012               	goto	l365
  3543  002ADA                     l5720:
  3544  002ADA  C024  F026         	movff	initTimer@timer,??_initTimer
  3545  002ADE  C025  F027         	movff	initTimer@timer+1,??_initTimer+1
  3546                           
  3547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3548                           ; Switch size 1, requested type "space"
  3549                           ; Number of cases is 1, Range of values is 0 to 0
  3550                           ; switch strategies available:
  3551                           ; Name         Instructions Cycles
  3552                           ; simple_byte            4     3 (average)
  3553                           ;	Chosen strategy is simple_byte
  3554  002AE2  5027               	movf	??_initTimer+1,w,c
  3555  002AE4  0A00               	xorlw	0	; case 0
  3556  002AE6  A4D8               	btfss	status,2,c
  3557  002AE8  D00A               	goto	l365
  3558                           
  3559                           ; Switch size 1, requested type "space"
  3560                           ; Number of cases is 3, Range of values is 0 to 3
  3561                           ; switch strategies available:
  3562                           ; Name         Instructions Cycles
  3563                           ; simple_byte           10     6 (average)
  3564                           ;	Chosen strategy is simple_byte
  3565  002AEA  5026               	movf	??_initTimer,w,c
  3566  002AEC  0A00               	xorlw	0	; case 0
  3567  002AEE  B4D8               	btfsc	status,2,c
  3568  002AF0  D7E7               	goto	l5704
  3569  002AF2  0A01               	xorlw	1	; case 1
  3570  002AF4  B4D8               	btfsc	status,2,c
  3571  002AF6  D7E9               	goto	l5710
  3572  002AF8  0A02               	xorlw	2	; case 3
  3573  002AFA  B4D8               	btfsc	status,2,c
  3574  002AFC  D7EA               	goto	l5714
  3575  002AFE                     l365:
  3576                           
  3577                           ;timer.c: 70: PEIE = 1;
  3578  002AFE  8CF2               	bsf	intcon,6,c	;volatile
  3579                           
  3580                           ;timer.c: 71: (INTCONbits.GIE = 1);
  3581  002B00  8EF2               	bsf	intcon,7,c	;volatile
  3582  002B02  0012               	return		;funcret
  3583  002B04                     __end_of_initTimer:
  3584                           	opt stack 0
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           intcon	equ	0xFF2
  3590                           postinc0	equ	0xFEE
  3591                           wreg	equ	0xFE8
  3592                           postdec1	equ	0xFE5
  3593                           plusw1	equ	0xFE3
  3594                           fsr1l	equ	0xFE1
  3595                           postinc2	equ	0xFDE
  3596                           postdec2	equ	0xFDD
  3597                           plusw2	equ	0xFDB
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _digitalWrite *****************
  3603 ;; Defined at:
  3604 ;;		line 53 in file "iopin.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  pin             2   35[COMRAM] PTR int 
  3607 ;;		 -> servo(16), AA_float(4), cylinderMotor(4), 
  3608 ;;  val             2   37[COMRAM] int 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  p               2   42[COMRAM] int 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      void 
  3613 ;; Registers used:
  3614 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3620 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;Total ram usage:        9 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    3
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_main
  3631 ;;		_sortBattery
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text12
  3636  002170                     __ptext12:
  3637                           	opt stack 0
  3638  002170                     _digitalWrite:
  3639                           	opt stack 26
  3640                           
  3641                           ;iopin.c: 54: int p = 1 << pin[1];
  3642                           
  3643                           ;incstack = 0
  3644  002170  EE20 F002          	lfsr	2,2
  3645  002174  5024               	movf	digitalWrite@pin,w,c
  3646  002176  26D9               	addwf	fsr2l,f,c
  3647  002178  5025               	movf	digitalWrite@pin+1,w,c
  3648  00217A  22DA               	addwfc	fsr2h,f,c
  3649  00217C  50DF               	movf	indf2,w,c
  3650  00217E  6E28               	movwf	??_digitalWrite& (0+255),c
  3651  002180  0E01               	movlw	1
  3652  002182  6E29               	movwf	(??_digitalWrite+1)& (0+255),c
  3653  002184  0E00               	movlw	0
  3654  002186  6E2A               	movwf	(??_digitalWrite+2)& (0+255),c
  3655  002188  2A28               	incf	??_digitalWrite,f,c
  3656  00218A  D003               	goto	u5524
  3657  00218C                     u5525:
  3658  00218C  90D8               	bcf	status,0,c
  3659  00218E  3629               	rlcf	??_digitalWrite+1,f,c
  3660  002190  362A               	rlcf	??_digitalWrite+2,f,c
  3661  002192                     u5524:
  3662  002192  2E28               	decfsz	??_digitalWrite,f,c
  3663  002194  D7FB               	goto	u5525
  3664  002196  C029  F02B         	movff	??_digitalWrite+1,digitalWrite@p
  3665  00219A  C02A  F02C         	movff	??_digitalWrite+2,digitalWrite@p+1
  3666                           
  3667                           ;iopin.c: 55: if(val == 0){
  3668  00219E  5026               	movf	digitalWrite@val,w,c
  3669  0021A0  1027               	iorwf	digitalWrite@val+1,w,c
  3670  0021A2  A4D8               	btfss	status,2,c
  3671  0021A4  D02B               	goto	l5770
  3672                           
  3673                           ;iopin.c: 56: p ^= 0xff;
  3674  0021A6  0EFF               	movlw	255
  3675  0021A8  1A2B               	xorwf	digitalWrite@p,f,c
  3676                           
  3677                           ;iopin.c: 57: }
  3678                           ;iopin.c: 59: switch(pin[0]){
  3679  0021AA  D028               	goto	l5770
  3680  0021AC                     l5746:
  3681  0021AC  0426               	decf	digitalWrite@val,w,c
  3682  0021AE  1027               	iorwf	digitalWrite@val+1,w,c
  3683  0021B0  A4D8               	btfss	status,2,c
  3684  0021B2  D003               	goto	l5750
  3685  0021B4  502B               	movf	digitalWrite@p,w,c
  3686  0021B6  1289               	iorwf	3977,f,c	;volatile
  3687  0021B8  0012               	return	
  3688  0021BA                     l5750:
  3689                           
  3690                           ;iopin.c: 61: else LATA &= p;
  3691  0021BA  502B               	movf	digitalWrite@p,w,c
  3692  0021BC  1689               	andwf	3977,f,c	;volatile
  3693                           
  3694                           ;iopin.c: 62: break;
  3695  0021BE  0012               	return	
  3696  0021C0                     l5752:
  3697  0021C0  0426               	decf	digitalWrite@val,w,c
  3698  0021C2  1027               	iorwf	digitalWrite@val+1,w,c
  3699  0021C4  A4D8               	btfss	status,2,c
  3700  0021C6  D003               	goto	l5756
  3701  0021C8  502B               	movf	digitalWrite@p,w,c
  3702  0021CA  128A               	iorwf	3978,f,c	;volatile
  3703  0021CC  0012               	return	
  3704  0021CE                     l5756:
  3705                           
  3706                           ;iopin.c: 64: else LATB &= p;
  3707  0021CE  502B               	movf	digitalWrite@p,w,c
  3708  0021D0  168A               	andwf	3978,f,c	;volatile
  3709                           
  3710                           ;iopin.c: 65: break;
  3711  0021D2  0012               	return	
  3712  0021D4                     l5758:
  3713  0021D4  0426               	decf	digitalWrite@val,w,c
  3714  0021D6  1027               	iorwf	digitalWrite@val+1,w,c
  3715  0021D8  A4D8               	btfss	status,2,c
  3716  0021DA  D003               	goto	l5762
  3717  0021DC  502B               	movf	digitalWrite@p,w,c
  3718  0021DE  128B               	iorwf	3979,f,c	;volatile
  3719  0021E0  0012               	return	
  3720  0021E2                     l5762:
  3721                           
  3722                           ;iopin.c: 67: else LATC &= p;
  3723  0021E2  502B               	movf	digitalWrite@p,w,c
  3724  0021E4  168B               	andwf	3979,f,c	;volatile
  3725                           
  3726                           ;iopin.c: 68: break;
  3727  0021E6  0012               	return	
  3728  0021E8                     l5764:
  3729  0021E8  0426               	decf	digitalWrite@val,w,c
  3730  0021EA  1027               	iorwf	digitalWrite@val+1,w,c
  3731  0021EC  A4D8               	btfss	status,2,c
  3732  0021EE  D003               	goto	l5768
  3733  0021F0  502B               	movf	digitalWrite@p,w,c
  3734  0021F2  128C               	iorwf	3980,f,c	;volatile
  3735  0021F4  0012               	return	
  3736  0021F6                     l5768:
  3737                           
  3738                           ;iopin.c: 70: else LATD &= p;
  3739  0021F6  502B               	movf	digitalWrite@p,w,c
  3740  0021F8  168C               	andwf	3980,f,c	;volatile
  3741                           
  3742                           ;iopin.c: 71: }
  3743  0021FA  0012               	return	
  3744  0021FC                     l5770:
  3745  0021FC  C024  FFD9         	movff	digitalWrite@pin,fsr2l
  3746  002200  C025  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3747  002204  CFDE F028          	movff	postinc2,??_digitalWrite
  3748  002208  CFDD F029          	movff	postdec2,??_digitalWrite+1
  3749                           
  3750                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3751                           ; Switch size 1, requested type "space"
  3752                           ; Number of cases is 1, Range of values is 0 to 0
  3753                           ; switch strategies available:
  3754                           ; Name         Instructions Cycles
  3755                           ; simple_byte            4     3 (average)
  3756                           ;	Chosen strategy is simple_byte
  3757  00220C  5029               	movf	??_digitalWrite+1,w,c
  3758  00220E  0A00               	xorlw	0	; case 0
  3759  002210  A4D8               	btfss	status,2,c
  3760  002212  0012               	return	
  3761                           
  3762                           ; Switch size 1, requested type "space"
  3763                           ; Number of cases is 4, Range of values is 0 to 3
  3764                           ; switch strategies available:
  3765                           ; Name         Instructions Cycles
  3766                           ; simple_byte           13     7 (average)
  3767                           ;	Chosen strategy is simple_byte
  3768  002214  5028               	movf	??_digitalWrite,w,c
  3769  002216  0A00               	xorlw	0	; case 0
  3770  002218  B4D8               	btfsc	status,2,c
  3771  00221A  D7C8               	goto	l5746
  3772  00221C  0A01               	xorlw	1	; case 1
  3773  00221E  B4D8               	btfsc	status,2,c
  3774  002220  D7CF               	goto	l5752
  3775  002222  0A03               	xorlw	3	; case 2
  3776  002224  B4D8               	btfsc	status,2,c
  3777  002226  D7D6               	goto	l5758
  3778  002228  0A01               	xorlw	1	; case 3
  3779  00222A  A4D8               	btfss	status,2,c
  3780  00222C  0012               	return	
  3781  00222E  D7DC               	goto	l5764
  3782  002230                     __end_of_digitalWrite:
  3783                           	opt stack 0
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           intcon	equ	0xFF2
  3789                           postinc0	equ	0xFEE
  3790                           wreg	equ	0xFE8
  3791                           postdec1	equ	0xFE5
  3792                           plusw1	equ	0xFE3
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           plusw2	equ	0xFDB
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _digitalRead *****************
  3803 ;; Defined at:
  3804 ;;		line 43 in file "iopin.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  pin             2   35[COMRAM] PTR int 
  3807 ;;		 -> servo(16), padPin2(4), padPin1(4), 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  2   35[COMRAM] int 
  3812 ;; Registers used:
  3813 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3819 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;Total ram usage:        4 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    3
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_sortBattery
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text13
  3834  001F9C                     __ptext13:
  3835                           	opt stack 0
  3836  001F9C                     _digitalRead:
  3837                           	opt stack 26
  3838                           
  3839                           ;iopin.c: 44: switch(pin[0]){
  3840                           
  3841                           ;incstack = 0
  3842  001F9C  D058               	goto	l5832
  3843  001F9E                     l5814:
  3844  001F9E  EE20 F002          	lfsr	2,2
  3845  001FA2  5024               	movf	digitalRead@pin,w,c
  3846  001FA4  26D9               	addwf	fsr2l,f,c
  3847  001FA6  5025               	movf	digitalRead@pin+1,w,c
  3848  001FA8  22DA               	addwfc	fsr2h,f,c
  3849  001FAA  50DF               	movf	indf2,w,c
  3850  001FAC  6E26               	movwf	??_digitalRead& (0+255),c
  3851  001FAE  CF80 F027          	movff	3968,??_digitalRead+1	;volatile
  3852  001FB2  2A26               	incf	??_digitalRead,f,c
  3853  001FB4  D002               	goto	u5584
  3854  001FB6                     u5585:
  3855  001FB6  90D8               	bcf	status,0,c
  3856  001FB8  3227               	rrcf	??_digitalRead+1,f,c
  3857  001FBA                     u5584:
  3858  001FBA  2E26               	decfsz	??_digitalRead,f,c
  3859  001FBC  D7FC               	goto	u5585
  3860  001FBE  0E01               	movlw	1
  3861  001FC0  1627               	andwf	??_digitalRead+1,f,c
  3862  001FC2  5027               	movf	??_digitalRead+1,w,c
  3863  001FC4  6E24               	movwf	?_digitalRead,c
  3864  001FC6  6A25               	clrf	?_digitalRead+1,c
  3865  001FC8  0012               	return	
  3866  001FCA                     l5818:
  3867  001FCA  EE20 F002          	lfsr	2,2
  3868  001FCE  5024               	movf	digitalRead@pin,w,c
  3869  001FD0  26D9               	addwf	fsr2l,f,c
  3870  001FD2  5025               	movf	digitalRead@pin+1,w,c
  3871  001FD4  22DA               	addwfc	fsr2h,f,c
  3872  001FD6  50DF               	movf	indf2,w,c
  3873  001FD8  6E26               	movwf	??_digitalRead& (0+255),c
  3874  001FDA  CF81 F027          	movff	3969,??_digitalRead+1	;volatile
  3875  001FDE  2A26               	incf	??_digitalRead,f,c
  3876  001FE0  D002               	goto	u5594
  3877  001FE2                     u5595:
  3878  001FE2  90D8               	bcf	status,0,c
  3879  001FE4  3227               	rrcf	??_digitalRead+1,f,c
  3880  001FE6                     u5594:
  3881  001FE6  2E26               	decfsz	??_digitalRead,f,c
  3882  001FE8  D7FC               	goto	u5595
  3883  001FEA  0E01               	movlw	1
  3884  001FEC  1627               	andwf	??_digitalRead+1,f,c
  3885  001FEE  5027               	movf	??_digitalRead+1,w,c
  3886  001FF0  6E24               	movwf	?_digitalRead,c
  3887  001FF2  6A25               	clrf	?_digitalRead+1,c
  3888  001FF4  0012               	return	
  3889  001FF6                     l5822:
  3890  001FF6  EE20 F002          	lfsr	2,2
  3891  001FFA  5024               	movf	digitalRead@pin,w,c
  3892  001FFC  26D9               	addwf	fsr2l,f,c
  3893  001FFE  5025               	movf	digitalRead@pin+1,w,c
  3894  002000  22DA               	addwfc	fsr2h,f,c
  3895  002002  50DF               	movf	indf2,w,c
  3896  002004  6E26               	movwf	??_digitalRead& (0+255),c
  3897  002006  CF82 F027          	movff	3970,??_digitalRead+1	;volatile
  3898  00200A  2A26               	incf	??_digitalRead,f,c
  3899  00200C  D002               	goto	u5604
  3900  00200E                     u5605:
  3901  00200E  90D8               	bcf	status,0,c
  3902  002010  3227               	rrcf	??_digitalRead+1,f,c
  3903  002012                     u5604:
  3904  002012  2E26               	decfsz	??_digitalRead,f,c
  3905  002014  D7FC               	goto	u5605
  3906  002016  0E01               	movlw	1
  3907  002018  1627               	andwf	??_digitalRead+1,f,c
  3908  00201A  5027               	movf	??_digitalRead+1,w,c
  3909  00201C  6E24               	movwf	?_digitalRead,c
  3910  00201E  6A25               	clrf	?_digitalRead+1,c
  3911  002020  0012               	return	
  3912  002022                     l5826:
  3913  002022  EE20 F002          	lfsr	2,2
  3914  002026  5024               	movf	digitalRead@pin,w,c
  3915  002028  26D9               	addwf	fsr2l,f,c
  3916  00202A  5025               	movf	digitalRead@pin+1,w,c
  3917  00202C  22DA               	addwfc	fsr2h,f,c
  3918  00202E  50DF               	movf	indf2,w,c
  3919  002030  6E26               	movwf	??_digitalRead& (0+255),c
  3920  002032  CF83 F027          	movff	3971,??_digitalRead+1	;volatile
  3921  002036  2A26               	incf	??_digitalRead,f,c
  3922  002038  D002               	goto	u5614
  3923  00203A                     u5615:
  3924  00203A  90D8               	bcf	status,0,c
  3925  00203C  3227               	rrcf	??_digitalRead+1,f,c
  3926  00203E                     u5614:
  3927  00203E  2E26               	decfsz	??_digitalRead,f,c
  3928  002040  D7FC               	goto	u5615
  3929  002042  0E01               	movlw	1
  3930  002044  1627               	andwf	??_digitalRead+1,f,c
  3931  002046  5027               	movf	??_digitalRead+1,w,c
  3932  002048  6E24               	movwf	?_digitalRead,c
  3933  00204A  6A25               	clrf	?_digitalRead+1,c
  3934  00204C  0012               	return	
  3935  00204E                     l5832:
  3936  00204E  C024  FFD9         	movff	digitalRead@pin,fsr2l
  3937  002052  C025  FFDA         	movff	digitalRead@pin+1,fsr2h
  3938  002056  CFDE F026          	movff	postinc2,??_digitalRead
  3939  00205A  CFDD F027          	movff	postdec2,??_digitalRead+1
  3940                           
  3941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3942                           ; Switch size 1, requested type "space"
  3943                           ; Number of cases is 1, Range of values is 0 to 0
  3944                           ; switch strategies available:
  3945                           ; Name         Instructions Cycles
  3946                           ; simple_byte            4     3 (average)
  3947                           ;	Chosen strategy is simple_byte
  3948  00205E  5027               	movf	??_digitalRead+1,w,c
  3949  002060  0A00               	xorlw	0	; case 0
  3950  002062  A4D8               	btfss	status,2,c
  3951  002064  D00D               	goto	l267
  3952                           
  3953                           ; Switch size 1, requested type "space"
  3954                           ; Number of cases is 4, Range of values is 0 to 3
  3955                           ; switch strategies available:
  3956                           ; Name         Instructions Cycles
  3957                           ; simple_byte           13     7 (average)
  3958                           ;	Chosen strategy is simple_byte
  3959  002066  5026               	movf	??_digitalRead,w,c
  3960  002068  0A00               	xorlw	0	; case 0
  3961  00206A  B4D8               	btfsc	status,2,c
  3962  00206C  D798               	goto	l5814
  3963  00206E  0A01               	xorlw	1	; case 1
  3964  002070  B4D8               	btfsc	status,2,c
  3965  002072  D7AB               	goto	l5818
  3966  002074  0A03               	xorlw	3	; case 2
  3967  002076  B4D8               	btfsc	status,2,c
  3968  002078  D7BE               	goto	l5822
  3969  00207A  0A01               	xorlw	1	; case 3
  3970  00207C  B4D8               	btfsc	status,2,c
  3971  00207E  D7D1               	goto	l5826
  3972  002080                     l267:
  3973                           
  3974                           ;iopin.c: 50: return -1;
  3975  002080  6824               	setf	?_digitalRead,c
  3976  002082  6825               	setf	?_digitalRead+1,c
  3977  002084  0012               	return		;funcret
  3978  002086                     __end_of_digitalRead:
  3979                           	opt stack 0
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           intcon	equ	0xFF2
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           postdec1	equ	0xFE5
  3988                           plusw1	equ	0xFE3
  3989                           fsr1l	equ	0xFE1
  3990                           indf2	equ	0xFDF
  3991                           postinc2	equ	0xFDE
  3992                           postdec2	equ	0xFDD
  3993                           plusw2	equ	0xFDB
  3994                           fsr2h	equ	0xFDA
  3995                           fsr2l	equ	0xFD9
  3996                           status	equ	0xFD8
  3997                           
  3998 ;; *************** function _analogRead *****************
  3999 ;; Defined at:
  4000 ;;		line 88 in file "iopin.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  channel         2   35[COMRAM] int 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  4   35[COMRAM] long 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4014 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;Total ram usage:        6 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    3
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		_sortBattery
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text14
  4029  002BC2                     __ptext14:
  4030                           	opt stack 0
  4031  002BC2                     _analogRead:
  4032                           	opt stack 26
  4033                           
  4034                           ;iopin.c: 89: ADCON0 = channel<<2;
  4035                           
  4036                           ;incstack = 0
  4037  002BC2  4424               	rlncf	analogRead@channel,w,c
  4038  002BC4  46E8               	rlncf	wreg,f,c
  4039  002BC6  0BFC               	andlw	252
  4040  002BC8  6EC2               	movwf	4034,c	;volatile
  4041                           
  4042                           ;iopin.c: 90: ADCON0 |= 1<<0;
  4043  002BCA  80C2               	bsf	4034,0,c	;volatile
  4044                           
  4045                           ;iopin.c: 91: ADCON0 |= 1<<1;
  4046  002BCC  82C2               	bsf	4034,1,c	;volatile
  4047  002BCE                     l291:
  4048  002BCE  B2C2               	btfsc	4034,1,c	;volatile
  4049  002BD0  D7FE               	goto	l291
  4050                           
  4051                           ;iopin.c: 95: return (ADRESH<<8) + ADRESL;
  4052  002BD2  50C3               	movf	4035,w,c	;volatile
  4053  002BD4  CFC4 F028          	movff	4036,??_analogRead	;volatile
  4054  002BD8  6A29               	clrf	(??_analogRead+1)& (0+255),c
  4055  002BDA  C028  F029         	movff	??_analogRead,??_analogRead+1
  4056  002BDE  6A28               	clrf	??_analogRead,c
  4057  002BE0  2628               	addwf	??_analogRead,f,c
  4058  002BE2  0E00               	movlw	0
  4059  002BE4  2229               	addwfc	??_analogRead+1,f,c
  4060  002BE6  C028  F024         	movff	??_analogRead,?_analogRead
  4061  002BEA  C029  F025         	movff	??_analogRead+1,?_analogRead+1
  4062  002BEE  0E00               	movlw	0
  4063  002BF0  BE25               	btfsc	?_analogRead+1,7,c
  4064  002BF2  0EFF               	movlw	-1
  4065  002BF4  6E26               	movwf	?_analogRead+2,c
  4066  002BF6  6E27               	movwf	?_analogRead+3,c
  4067  002BF8  0012               	return	
  4068  002BFA                     __end_of_analogRead:
  4069                           	opt stack 0
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           intcon	equ	0xFF2
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           postdec1	equ	0xFE5
  4078                           plusw1	equ	0xFE3
  4079                           fsr1l	equ	0xFE1
  4080                           indf2	equ	0xFDF
  4081                           postinc2	equ	0xFDE
  4082                           postdec2	equ	0xFDD
  4083                           plusw2	equ	0xFDB
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _showInterface *****************
  4089 ;; Defined at:
  4090 ;;		line 16 in file "interface.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  key             1   78[BANK0 ] unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;Total ram usage:        1 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    9
  4111 ;; This function calls:
  4112 ;;		_dateTime
  4113 ;;		_mainMenu
  4114 ;;		_readKeypad
  4115 ;;		_runMenu
  4116 ;;		_runSelect
  4117 ;;		_runStats
  4118 ;;		_runTime
  4119 ;; This function is called by:
  4120 ;;		_main
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           	psect	text15
  4125  001DAC                     __ptext15:
  4126                           	opt stack 0
  4127  001DAC                     _showInterface:
  4128                           	opt stack 21
  4129  001DAC                     
  4130                           ;interface.c: 23: dateTime();
  4131  001DAC  EC75  F016         	call	_dateTime	;wreg free
  4132  001DB0                     l5900:
  4133  001DB0  EC4F  F016         	call	_readKeypad	;wreg free
  4134  001DB4  0A41               	xorlw	65
  4135  001DB6  A4D8               	btfss	status,2,c
  4136  001DB8  D7FB               	goto	l5900
  4137  001DBA                     l5902:
  4138                           
  4139                           ;interface.c: 28: mainMenu();
  4140  001DBA  EC62  F016         	call	_mainMenu	;wreg free
  4141  001DBE                     l5904:
  4142  001DBE  EC4F  F016         	call	_readKeypad	;wreg free
  4143  001DC2  0100               	movlb	0	; () banked
  4144  001DC4  6FCE               	movwf	showInterface@key& (0+255),b
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  4148  001DC6  0E42               	movlw	66
  4149  001DC8  0100               	movlb	0	; () banked
  4150  001DCA  19CE               	xorwf	showInterface@key& (0+255),w,b
  4151  001DCC  B4D8               	btfsc	status,2,c
  4152  001DCE  D00A               	goto	l5912
  4153                           
  4154                           ; BSR set to: 0
  4155  001DD0  0E43               	movlw	67
  4156  001DD2  0100               	movlb	0	; () banked
  4157  001DD4  19CE               	xorwf	showInterface@key& (0+255),w,b
  4158  001DD6  B4D8               	btfsc	status,2,c
  4159  001DD8  D005               	goto	l5912
  4160                           
  4161                           ; BSR set to: 0
  4162  001DDA  0E2A               	movlw	42
  4163  001DDC  0100               	movlb	0	; () banked
  4164  001DDE  19CE               	xorwf	showInterface@key& (0+255),w,b
  4165  001DE0  A4D8               	btfss	status,2,c
  4166  001DE2  D7ED               	goto	l5904
  4167  001DE4                     l5912:
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;interface.c: 34: if(key == 'C'){
  4171  001DE4  0E43               	movlw	67
  4172  001DE6  0100               	movlb	0	; () banked
  4173  001DE8  19CE               	xorwf	showInterface@key& (0+255),w,b
  4174  001DEA  A4D8               	btfss	status,2,c
  4175  001DEC  D056               	goto	l5956
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;interface.c: 36: runSelect();
  4179  001DEE  EC3C  F016         	call	_runSelect	;wreg free
  4180  001DF2                     l5916:
  4181  001DF2  EC4F  F016         	call	_readKeypad	;wreg free
  4182  001DF6  0100               	movlb	0	; () banked
  4183  001DF8  6FCE               	movwf	showInterface@key& (0+255),b
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  4187  001DFA  0E31               	movlw	49
  4188  001DFC  0100               	movlb	0	; () banked
  4189  001DFE  19CE               	xorwf	showInterface@key& (0+255),w,b
  4190  001E00  B4D8               	btfsc	status,2,c
  4191  001E02  D014               	goto	l5928
  4192                           
  4193                           ; BSR set to: 0
  4194  001E04  0E32               	movlw	50
  4195  001E06  0100               	movlb	0	; () banked
  4196  001E08  19CE               	xorwf	showInterface@key& (0+255),w,b
  4197  001E0A  B4D8               	btfsc	status,2,c
  4198  001E0C  D00F               	goto	l5928
  4199                           
  4200                           ; BSR set to: 0
  4201  001E0E  0E33               	movlw	51
  4202  001E10  0100               	movlb	0	; () banked
  4203  001E12  19CE               	xorwf	showInterface@key& (0+255),w,b
  4204  001E14  B4D8               	btfsc	status,2,c
  4205  001E16  D00A               	goto	l5928
  4206                           
  4207                           ; BSR set to: 0
  4208  001E18  0E34               	movlw	52
  4209  001E1A  0100               	movlb	0	; () banked
  4210  001E1C  19CE               	xorwf	showInterface@key& (0+255),w,b
  4211  001E1E  B4D8               	btfsc	status,2,c
  4212  001E20  D005               	goto	l5928
  4213                           
  4214                           ; BSR set to: 0
  4215  001E22  0E2A               	movlw	42
  4216  001E24  0100               	movlb	0	; () banked
  4217  001E26  19CE               	xorwf	showInterface@key& (0+255),w,b
  4218  001E28  A4D8               	btfss	status,2,c
  4219  001E2A  D7E3               	goto	l5916
  4220  001E2C                     l5928:
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;interface.c: 44: if(key == '*')continue;
  4224  001E2C  0E2A               	movlw	42
  4225  001E2E  0100               	movlb	0	; () banked
  4226  001E30  19CE               	xorwf	showInterface@key& (0+255),w,b
  4227  001E32  B4D8               	btfsc	status,2,c
  4228  001E34  D7C2               	goto	l5902
  4229  001E36                     l5932:
  4230                           
  4231                           ;interface.c: 50: runMenu(key);
  4232  001E36  0100               	movlb	0	; () banked
  4233  001E38  51CE               	movf	showInterface@key& (0+255),w,b
  4234  001E3A  ECFD  F015         	call	_runMenu
  4235  001E3E                     l5934:
  4236  001E3E  EC4F  F016         	call	_readKeypad	;wreg free
  4237  001E42  0100               	movlb	0	; () banked
  4238  001E44  6FCE               	movwf	showInterface@key& (0+255),b
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  4242  001E46  0E41               	movlw	65
  4243  001E48  0100               	movlb	0	; () banked
  4244  001E4A  19CE               	xorwf	showInterface@key& (0+255),w,b
  4245  001E4C  B4D8               	btfsc	status,2,c
  4246  001E4E  D00A               	goto	l5942
  4247                           
  4248                           ; BSR set to: 0
  4249  001E50  0E42               	movlw	66
  4250  001E52  0100               	movlb	0	; () banked
  4251  001E54  19CE               	xorwf	showInterface@key& (0+255),w,b
  4252  001E56  B4D8               	btfsc	status,2,c
  4253  001E58  D005               	goto	l5942
  4254                           
  4255                           ; BSR set to: 0
  4256  001E5A  0E2A               	movlw	42
  4257  001E5C  0100               	movlb	0	; () banked
  4258  001E5E  19CE               	xorwf	showInterface@key& (0+255),w,b
  4259  001E60  A4D8               	btfss	status,2,c
  4260  001E62  D7ED               	goto	l5934
  4261  001E64                     l5942:
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;interface.c: 56: if(key == 'A'){
  4265  001E64  0E41               	movlw	65
  4266  001E66  0100               	movlb	0	; () banked
  4267  001E68  19CE               	xorwf	showInterface@key& (0+255),w,b
  4268  001E6A  A4D8               	btfss	status,2,c
  4269  001E6C  D003               	goto	l5946
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;interface.c: 58: runTime();
  4273  001E6E  EC16  F016         	call	_runTime	;wreg free
  4274                           
  4275                           ;interface.c: 60: }
  4276  001E72  D00D               	goto	l5954
  4277  001E74                     l5946:
  4278                           
  4279                           ;interface.c: 61: else if(key == 'B'){
  4280  001E74  0E42               	movlw	66
  4281  001E76  0100               	movlb	0	; () banked
  4282  001E78  19CE               	xorwf	showInterface@key& (0+255),w,b
  4283  001E7A  A4D8               	btfss	status,2,c
  4284  001E7C  D003               	goto	l5950
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;interface.c: 63: runStats();
  4288  001E7E  EC29  F016         	call	_runStats	;wreg free
  4289                           
  4290                           ;interface.c: 65: }
  4291  001E82  D005               	goto	l5954
  4292  001E84                     l5950:
  4293                           
  4294                           ;interface.c: 66: else if(key == '*')break;
  4295  001E84  0E2A               	movlw	42
  4296  001E86  0100               	movlb	0	; () banked
  4297  001E88  19CE               	xorwf	showInterface@key& (0+255),w,b
  4298  001E8A  B4D8               	btfsc	status,2,c
  4299  001E8C  D796               	goto	l5902
  4300  001E8E                     l5954:
  4301  001E8E  EC4F  F016         	call	_readKeypad	;wreg free
  4302  001E92  0A2A               	xorlw	42
  4303  001E94  B4D8               	btfsc	status,2,c
  4304  001E96  D7CF               	goto	l5932
  4305  001E98  D7FA               	goto	l5954
  4306  001E9A                     l5956:
  4307                           
  4308                           ;interface.c: 72: else if(key == 'B'){
  4309  001E9A  0E42               	movlw	66
  4310  001E9C  0100               	movlb	0	; () banked
  4311  001E9E  19CE               	xorwf	showInterface@key& (0+255),w,b
  4312  001EA0  B4D8               	btfsc	status,2,c
  4313  001EA2  0012               	return	
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;interface.c: 75: else if(key == '*')
  4317                           
  4318                           ; BSR set to: 0
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;interface.c: 74: }
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;interface.c: 73: return;
  4325  001EA4  0E2A               	movlw	42
  4326  001EA6  0100               	movlb	0	; () banked
  4327  001EA8  19CE               	xorwf	showInterface@key& (0+255),w,b
  4328  001EAA  B4D8               	btfsc	status,2,c
  4329  001EAC  D77F               	goto	l5898
  4330  001EAE  D785               	goto	l5902
  4331  001EB0                     __end_of_showInterface:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           intcon	equ	0xFF2
  4338                           postinc0	equ	0xFEE
  4339                           wreg	equ	0xFE8
  4340                           postdec1	equ	0xFE5
  4341                           plusw1	equ	0xFE3
  4342                           fsr1l	equ	0xFE1
  4343                           indf2	equ	0xFDF
  4344                           postinc2	equ	0xFDE
  4345                           postdec2	equ	0xFDD
  4346                           plusw2	equ	0xFDB
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351 ;; *************** function _runTime *****************
  4352 ;; Defined at:
  4353 ;;		line 117 in file "interface.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      void 
  4360 ;; Registers used:
  4361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;Total ram usage:        0 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    8
  4374 ;; This function calls:
  4375 ;;		_lcdClear
  4376 ;;		_printf
  4377 ;; This function is called by:
  4378 ;;		_showInterface
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text16
  4383  002C2C                     __ptext16:
  4384                           	opt stack 0
  4385  002C2C                     _runTime:
  4386                           	opt stack 21
  4387                           
  4388                           ;interface.c: 118: lcdClear();
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;incstack = 0
  4392  002C2C  EC0A  F017         	call	_lcdClear	;wreg free
  4393                           
  4394                           ;interface.c: 119: printf("time: nnn sec   \n");
  4395  002C30  0E0B               	movlw	low STR_19
  4396  002C32  0100               	movlb	0	; () banked
  4397  002C34  6FC0               	movwf	printf@f& (0+255),b
  4398  002C36  0EFF               	movlw	high STR_19
  4399  002C38  0100               	movlb	0	; () banked
  4400  002C3A  6FC1               	movwf	(printf@f+1)& (0+255),b
  4401  002C3C  EC09  F000         	call	_printf	;wreg free
  4402                           
  4403                           ;interface.c: 120: printf("              *>");
  4404  002C40  0E40               	movlw	low STR_20
  4405  002C42  0100               	movlb	0	; () banked
  4406  002C44  6FC0               	movwf	printf@f& (0+255),b
  4407  002C46  0EFF               	movlw	high STR_20
  4408  002C48  0100               	movlb	0	; () banked
  4409  002C4A  6FC1               	movwf	(printf@f+1)& (0+255),b
  4410  002C4C  EC09  F000         	call	_printf	;wreg free
  4411  002C50  0012               	return		;funcret
  4412  002C52                     __end_of_runTime:
  4413                           	opt stack 0
  4414                           tblptru	equ	0xFF8
  4415                           tblptrh	equ	0xFF7
  4416                           tblptrl	equ	0xFF6
  4417                           tablat	equ	0xFF5
  4418                           intcon	equ	0xFF2
  4419                           postinc0	equ	0xFEE
  4420                           wreg	equ	0xFE8
  4421                           postdec1	equ	0xFE5
  4422                           plusw1	equ	0xFE3
  4423                           fsr1l	equ	0xFE1
  4424                           indf2	equ	0xFDF
  4425                           postinc2	equ	0xFDE
  4426                           postdec2	equ	0xFDD
  4427                           plusw2	equ	0xFDB
  4428                           fsr2h	equ	0xFDA
  4429                           fsr2l	equ	0xFD9
  4430                           status	equ	0xFD8
  4431                           
  4432 ;; *************** function _runStats *****************
  4433 ;; Defined at:
  4434 ;;		line 123 in file "interface.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;Total ram usage:        0 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:    8
  4455 ;; This function calls:
  4456 ;;		_lcdClear
  4457 ;;		_printf
  4458 ;; This function is called by:
  4459 ;;		_showInterface
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text17
  4464  002C52                     __ptext17:
  4465                           	opt stack 0
  4466  002C52                     _runStats:
  4467                           	opt stack 21
  4468                           
  4469                           ;interface.c: 124: lcdClear();
  4470                           
  4471                           ;incstack = 0
  4472  002C52  EC0A  F017         	call	_lcdClear	;wreg free
  4473                           
  4474                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  4475  002C56  0E1D               	movlw	low STR_21
  4476  002C58  0100               	movlb	0	; () banked
  4477  002C5A  6FC0               	movwf	printf@f& (0+255),b
  4478  002C5C  0EFF               	movlw	high STR_21
  4479  002C5E  0100               	movlb	0	; () banked
  4480  002C60  6FC1               	movwf	(printf@f+1)& (0+255),b
  4481  002C62  EC09  F000         	call	_printf	;wreg free
  4482                           
  4483                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  4484  002C66  0E84               	movlw	low STR_22
  4485  002C68  0100               	movlb	0	; () banked
  4486  002C6A  6FC0               	movwf	printf@f& (0+255),b
  4487  002C6C  0EFF               	movlw	high STR_22
  4488  002C6E  0100               	movlb	0	; () banked
  4489  002C70  6FC1               	movwf	(printf@f+1)& (0+255),b
  4490  002C72  EC09  F000         	call	_printf	;wreg free
  4491  002C76  0012               	return		;funcret
  4492  002C78                     __end_of_runStats:
  4493                           	opt stack 0
  4494                           tblptru	equ	0xFF8
  4495                           tblptrh	equ	0xFF7
  4496                           tblptrl	equ	0xFF6
  4497                           tablat	equ	0xFF5
  4498                           intcon	equ	0xFF2
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           postdec1	equ	0xFE5
  4502                           plusw1	equ	0xFE3
  4503                           fsr1l	equ	0xFE1
  4504                           indf2	equ	0xFDF
  4505                           postinc2	equ	0xFDE
  4506                           postdec2	equ	0xFDD
  4507                           plusw2	equ	0xFDB
  4508                           fsr2h	equ	0xFDA
  4509                           fsr2l	equ	0xFD9
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function _runSelect *****************
  4513 ;; Defined at:
  4514 ;;		line 105 in file "interface.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;		None
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;		None
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;Total ram usage:        0 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    8
  4535 ;; This function calls:
  4536 ;;		_lcdClear
  4537 ;;		_printf
  4538 ;; This function is called by:
  4539 ;;		_showInterface
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text18
  4544  002C78                     __ptext18:
  4545                           	opt stack 0
  4546  002C78                     _runSelect:
  4547                           	opt stack 21
  4548                           
  4549                           ;interface.c: 106: lcdClear();
  4550                           
  4551                           ;incstack = 0
  4552  002C78  EC0A  F017         	call	_lcdClear	;wreg free
  4553                           
  4554                           ;interface.c: 107: printf("select run:     \n");
  4555  002C7C  0EF9               	movlw	low STR_15
  4556  002C7E  0100               	movlb	0	; () banked
  4557  002C80  6FC0               	movwf	printf@f& (0+255),b
  4558  002C82  0EFE               	movlw	high STR_15
  4559  002C84  0100               	movlb	0	; () banked
  4560  002C86  6FC1               	movwf	(printf@f+1)& (0+255),b
  4561  002C88  EC09  F000         	call	_printf	;wreg free
  4562                           
  4563                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  4564  002C8C  0E51               	movlw	low STR_16
  4565  002C8E  0100               	movlb	0	; () banked
  4566  002C90  6FC0               	movwf	printf@f& (0+255),b
  4567  002C92  0EFF               	movlw	high STR_16
  4568  002C94  0100               	movlb	0	; () banked
  4569  002C96  6FC1               	movwf	(printf@f+1)& (0+255),b
  4570  002C98  EC09  F000         	call	_printf	;wreg free
  4571  002C9C  0012               	return		;funcret
  4572  002C9E                     __end_of_runSelect:
  4573                           	opt stack 0
  4574                           tblptru	equ	0xFF8
  4575                           tblptrh	equ	0xFF7
  4576                           tblptrl	equ	0xFF6
  4577                           tablat	equ	0xFF5
  4578                           intcon	equ	0xFF2
  4579                           postinc0	equ	0xFEE
  4580                           wreg	equ	0xFE8
  4581                           postdec1	equ	0xFE5
  4582                           plusw1	equ	0xFE3
  4583                           fsr1l	equ	0xFE1
  4584                           indf2	equ	0xFDF
  4585                           postinc2	equ	0xFDE
  4586                           postdec2	equ	0xFDD
  4587                           plusw2	equ	0xFDB
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _runMenu *****************
  4593 ;; Defined at:
  4594 ;;		line 111 in file "interface.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  key             1    wreg     unsigned char 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  key             1   77[BANK0 ] unsigned char 
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  1    wreg      void 
  4601 ;; Registers used:
  4602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;Total ram usage:        1 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    8
  4615 ;; This function calls:
  4616 ;;		_lcdClear
  4617 ;;		_printf
  4618 ;; This function is called by:
  4619 ;;		_showInterface
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text19
  4624  002BFA                     __ptext19:
  4625                           	opt stack 0
  4626  002BFA                     _runMenu:
  4627                           	opt stack 21
  4628                           
  4629                           ;incstack = 0
  4630                           ;runMenu@key stored from wreg
  4631  002BFA  0100               	movlb	0	; () banked
  4632  002BFC  6FCD               	movwf	runMenu@key& (0+255),b
  4633                           
  4634                           ;interface.c: 112: lcdClear();
  4635  002BFE  EC0A  F017         	call	_lcdClear	;wreg free
  4636                           
  4637                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4638  002C02  0EC2               	movlw	low STR_17
  4639  002C04  0100               	movlb	0	; () banked
  4640  002C06  6FC0               	movwf	printf@f& (0+255),b
  4641  002C08  0EFE               	movlw	high STR_17
  4642  002C0A  0100               	movlb	0	; () banked
  4643  002C0C  6FC1               	movwf	(printf@f+1)& (0+255),b
  4644  002C0E  C0CD  F0C2         	movff	runMenu@key,?_printf+2
  4645  002C12  0100               	movlb	0	; () banked
  4646  002C14  6BC3               	clrf	(?_printf+3)& (0+255),b
  4647  002C16  EC09  F000         	call	_printf	;wreg free
  4648                           
  4649                           ;interface.c: 114: printf( "   stats <B   *>");
  4650  002C1A  0E73               	movlw	low STR_18
  4651  002C1C  0100               	movlb	0	; () banked
  4652  002C1E  6FC0               	movwf	printf@f& (0+255),b
  4653  002C20  0EFF               	movlw	high STR_18
  4654  002C22  0100               	movlb	0	; () banked
  4655  002C24  6FC1               	movwf	(printf@f+1)& (0+255),b
  4656  002C26  EC09  F000         	call	_printf	;wreg free
  4657  002C2A  0012               	return		;funcret
  4658  002C2C                     __end_of_runMenu:
  4659                           	opt stack 0
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           intcon	equ	0xFF2
  4665                           postinc0	equ	0xFEE
  4666                           wreg	equ	0xFE8
  4667                           postdec1	equ	0xFE5
  4668                           plusw1	equ	0xFE3
  4669                           fsr1l	equ	0xFE1
  4670                           indf2	equ	0xFDF
  4671                           postinc2	equ	0xFDE
  4672                           postdec2	equ	0xFDD
  4673                           plusw2	equ	0xFDB
  4674                           fsr2h	equ	0xFDA
  4675                           fsr2l	equ	0xFD9
  4676                           status	equ	0xFD8
  4677                           
  4678 ;; *************** function _readKeypad *****************
  4679 ;; Defined at:
  4680 ;;		line 36 in file "keypad.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;		None
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  key             1   35[COMRAM] unsigned char 
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  1    wreg      unsigned char 
  4687 ;; Registers used:
  4688 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;Total ram usage:        1 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; Hardware stack levels required when called:    3
  4701 ;; This function calls:
  4702 ;;		Nothing
  4703 ;; This function is called by:
  4704 ;;		_sortBattery
  4705 ;;		_pause
  4706 ;;		_showInterface
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text20
  4711  002C9E                     __ptext20:
  4712                           	opt stack 0
  4713  002C9E                     _readKeypad:
  4714                           	opt stack 26
  4715  002C9E                     l194:
  4716  002C9E  A281               	btfss	3969,1,c	;volatile
  4717  002CA0  D7FE               	goto	l194
  4718                           
  4719                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4720  002CA2  3881               	swapf	3969,w,c	;volatile
  4721  002CA4  0B0F               	andlw	15
  4722  002CA6  0B0F               	andlw	15
  4723  002CA8  6E24               	movwf	readKeypad@key,c
  4724  002CAA                     l197:
  4725  002CAA  B281               	btfsc	3969,1,c	;volatile
  4726  002CAC  D7FE               	goto	l197
  4727                           
  4728                           ;keypad.c: 40: return keys[key];
  4729  002CAE  5024               	movf	readKeypad@key,w,c
  4730  002CB0  0D01               	mullw	1
  4731  002CB2  0E69               	movlw	low _keys
  4732  002CB4  24F3               	addwf	prodl,w,c
  4733  002CB6  6EF6               	movwf	tblptrl,c
  4734  002CB8  0EFE               	movlw	high _keys
  4735  002CBA  20F4               	addwfc	prodh,w,c
  4736  002CBC  6EF7               	movwf	tblptrh,c
  4737  002CBE                     	if	0	;There are less than 3 active tblptr bytes
  4738  002CBE                     	endif
  4739  002CBE  0008               	tblrd		*
  4740  002CC0  50F5               	movf	tablat,w,c
  4741  002CC2  0012               	return	
  4742  002CC4                     __end_of_readKeypad:
  4743                           	opt stack 0
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           intcon	equ	0xFF2
  4751                           postinc0	equ	0xFEE
  4752                           wreg	equ	0xFE8
  4753                           postdec1	equ	0xFE5
  4754                           plusw1	equ	0xFE3
  4755                           fsr1l	equ	0xFE1
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           plusw2	equ	0xFDB
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _mainMenu *****************
  4765 ;; Defined at:
  4766 ;;		line 99 in file "interface.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;Total ram usage:        0 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    8
  4787 ;; This function calls:
  4788 ;;		_lcdClear
  4789 ;;		_printf
  4790 ;; This function is called by:
  4791 ;;		_showInterface
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text21
  4796  002CC4                     __ptext21:
  4797                           	opt stack 0
  4798  002CC4                     _mainMenu:
  4799                           	opt stack 21
  4800                           
  4801                           ;interface.c: 100: lcdClear();
  4802                           
  4803                           ;incstack = 0
  4804  002CC4  EC0A  F017         	call	_lcdClear	;wreg free
  4805                           
  4806                           ;interface.c: 101: printf("start   <B      \n");
  4807  002CC8  0ED5               	movlw	low STR_13
  4808  002CCA  0100               	movlb	0	; () banked
  4809  002CCC  6FC0               	movwf	printf@f& (0+255),b
  4810  002CCE  0EFE               	movlw	high STR_13
  4811  002CD0  0100               	movlb	0	; () banked
  4812  002CD2  6FC1               	movwf	(printf@f+1)& (0+255),b
  4813  002CD4  EC09  F000         	call	_printf	;wreg free
  4814                           
  4815                           ;interface.c: 102: printf("history <C    *>");
  4816  002CD8  0E62               	movlw	low STR_14
  4817  002CDA  0100               	movlb	0	; () banked
  4818  002CDC  6FC0               	movwf	printf@f& (0+255),b
  4819  002CDE  0EFF               	movlw	high STR_14
  4820  002CE0  0100               	movlb	0	; () banked
  4821  002CE2  6FC1               	movwf	(printf@f+1)& (0+255),b
  4822  002CE4  EC09  F000         	call	_printf	;wreg free
  4823  002CE8  0012               	return		;funcret
  4824  002CEA                     __end_of_mainMenu:
  4825                           	opt stack 0
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodh	equ	0xFF4
  4831                           prodl	equ	0xFF3
  4832                           intcon	equ	0xFF2
  4833                           postinc0	equ	0xFEE
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           plusw1	equ	0xFE3
  4837                           fsr1l	equ	0xFE1
  4838                           indf2	equ	0xFDF
  4839                           postinc2	equ	0xFDE
  4840                           postdec2	equ	0xFDD
  4841                           plusw2	equ	0xFDB
  4842                           fsr2h	equ	0xFDA
  4843                           fsr2l	equ	0xFD9
  4844                           status	equ	0xFD8
  4845                           
  4846 ;; *************** function _dateTime *****************
  4847 ;; Defined at:
  4848 ;;		line 84 in file "interface.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;		None
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  1    wreg      void 
  4855 ;; Registers used:
  4856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;Total ram usage:        0 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    8
  4869 ;; This function calls:
  4870 ;;		_lcdClear
  4871 ;;		_printf
  4872 ;; This function is called by:
  4873 ;;		_showInterface
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text22
  4878  002CEA                     __ptext22:
  4879                           	opt stack 0
  4880  002CEA                     _dateTime:
  4881                           	opt stack 21
  4882                           
  4883                           ;interface.c: 94: lcdClear();
  4884                           
  4885                           ;incstack = 0
  4886  002CEA  EC0A  F017         	call	_lcdClear	;wreg free
  4887                           
  4888                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  4889  002CEE  0EE7               	movlw	low STR_11
  4890  002CF0  0100               	movlb	0	; () banked
  4891  002CF2  6FC0               	movwf	printf@f& (0+255),b
  4892  002CF4  0EFE               	movlw	high STR_11
  4893  002CF6  0100               	movlb	0	; () banked
  4894  002CF8  6FC1               	movwf	(printf@f+1)& (0+255),b
  4895  002CFA  EC09  F000         	call	_printf	;wreg free
  4896                           
  4897                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  4898  002CFE  0E95               	movlw	low STR_12
  4899  002D00  0100               	movlb	0	; () banked
  4900  002D02  6FC0               	movwf	printf@f& (0+255),b
  4901  002D04  0EFF               	movlw	high STR_12
  4902  002D06  0100               	movlb	0	; () banked
  4903  002D08  6FC1               	movwf	(printf@f+1)& (0+255),b
  4904  002D0A  EC09  F000         	call	_printf	;wreg free
  4905  002D0E  0012               	return		;funcret
  4906  002D10                     __end_of_dateTime:
  4907                           	opt stack 0
  4908                           tblptru	equ	0xFF8
  4909                           tblptrh	equ	0xFF7
  4910                           tblptrl	equ	0xFF6
  4911                           tablat	equ	0xFF5
  4912                           prodh	equ	0xFF4
  4913                           prodl	equ	0xFF3
  4914                           intcon	equ	0xFF2
  4915                           postinc0	equ	0xFEE
  4916                           wreg	equ	0xFE8
  4917                           postdec1	equ	0xFE5
  4918                           plusw1	equ	0xFE3
  4919                           fsr1l	equ	0xFE1
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           plusw2	equ	0xFDB
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function _printf *****************
  4929 ;; Defined at:
  4930 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  f               2   64[BANK0 ] PTR const unsigned char 
  4933 ;;		 -> STR_22(17), STR_21(18), STR_20(17), STR_19(18), 
  4934 ;;		 -> STR_18(17), STR_17(19), STR_16(17), STR_15(18), 
  4935 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  4936 ;;		 -> STR_10(9), STR_9(8), STR_8(24), STR_7(15), 
  4937 ;;		 -> STR_6(17), STR_5(21), STR_4(17), STR_3(14), 
  4938 ;;		 -> STR_2(20), STR_1(8), 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  idx             1    3[BANK1 ] unsigned char 
  4941 ;;  val             4   16[BANK1 ] unsigned long 
  4942 ;;  tmpval          4   12[BANK1 ] struct .
  4943 ;;  fval            3   20[BANK1 ] struct .
  4944 ;;  cp              3    0        PTR const unsigned char 
  4945 ;;  exp             2   10[BANK1 ] int 
  4946 ;;  prec            2    8[BANK1 ] int 
  4947 ;;  flag            2    6[BANK1 ] unsigned short 
  4948 ;;  ap              2    4[BANK1 ] PTR void [1]
  4949 ;;		 -> ?_printf(2), 
  4950 ;;  len             2    0        unsigned int 
  4951 ;;  width           2    0        int 
  4952 ;;  c               1   23[BANK1 ] char 
  4953 ;;  d               1    0        unsigned char 
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  2   64[BANK0 ] int 
  4956 ;; Registers used:
  4957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4963 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;      Totals:         0      13      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4967 ;;Total ram usage:       37 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:    7
  4970 ;; This function calls:
  4971 ;;		___awdiv
  4972 ;;		___ftadd
  4973 ;;		___ftge
  4974 ;;		___ftmul
  4975 ;;		___ftneg
  4976 ;;		___ftsub
  4977 ;;		___fttol
  4978 ;;		___lldiv
  4979 ;;		___llmod
  4980 ;;		___lltoft
  4981 ;;		___wmul
  4982 ;;		__div_to_l_
  4983 ;;		__tdiv_to_l_
  4984 ;;		_fround
  4985 ;;		_putch
  4986 ;;		_scale
  4987 ;; This function is called by:
  4988 ;;		_main
  4989 ;;		_sortBattery
  4990 ;;		_pause
  4991 ;;		_dateTime
  4992 ;;		_mainMenu
  4993 ;;		_runSelect
  4994 ;;		_runMenu
  4995 ;;		_runTime
  4996 ;;		_runStats
  4997 ;;		_testFrequency
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text23
  5002  000012                     __ptext23:
  5003                           	opt stack 0
  5004  000012                     _printf:
  5005                           	opt stack 22
  5006                           
  5007                           ;doprnt.c: 466: va_list ap;
  5008                           ;doprnt.c: 499: signed char c;
  5009                           ;doprnt.c: 501: int width;
  5010                           ;doprnt.c: 504: int prec;
  5011                           ;doprnt.c: 508: unsigned short flag;
  5012                           ;doprnt.c: 515: char d;
  5013                           ;doprnt.c: 516: double fval;
  5014                           ;doprnt.c: 517: int exp;
  5015                           ;doprnt.c: 523: union {
  5016                           ;doprnt.c: 524: unsigned long vd;
  5017                           ;doprnt.c: 525: double integ;
  5018                           ;doprnt.c: 526: } tmpval;
  5019                           ;doprnt.c: 528: unsigned long val;
  5020                           ;doprnt.c: 529: unsigned len;
  5021                           ;doprnt.c: 530: const char * cp;
  5022                           ;doprnt.c: 533: *ap = __va_start();
  5023                           
  5024                           ;incstack = 0
  5025  000012  0EC2               	movlw	low (?_printf+2)
  5026  000014  0101               	movlb	1	; () banked
  5027  000016  6F04               	movwf	printf@ap& (0+255),b
  5028  000018  0E00               	movlw	high (?_printf+2)
  5029  00001A  0101               	movlb	1	; () banked
  5030  00001C  6F05               	movwf	(printf@ap+1)& (0+255),b
  5031                           
  5032                           ;doprnt.c: 536: while(c = *f++) {
  5033  00001E  EF8F  F004         	goto	l5688
  5034  000022                     l5470:
  5035                           
  5036                           ; BSR set to: 1
  5037                           ;doprnt.c: 538: if(c != '%')
  5038  000022  0E25               	movlw	37
  5039  000024  0101               	movlb	1	; () banked
  5040  000026  1917               	xorwf	printf@c& (0+255),w,b
  5041  000028  B4D8               	btfsc	status,2,c
  5042  00002A  D006               	goto	l5474
  5043                           
  5044                           ; BSR set to: 1
  5045                           ;doprnt.c: 540: {
  5046                           ;doprnt.c: 541: (putch(c) );
  5047  00002C  0101               	movlb	1	; () banked
  5048  00002E  5117               	movf	printf@c& (0+255),w,b
  5049  000030  ECAD  F016         	call	_putch
  5050                           
  5051                           ;doprnt.c: 542: continue;
  5052  000034  EF8F  F004         	goto	l5688
  5053  000038                     l5474:
  5054                           
  5055                           ;doprnt.c: 543: }
  5056                           ;doprnt.c: 548: flag = 0;
  5057  000038  0E00               	movlw	0
  5058  00003A  0101               	movlb	1	; () banked
  5059  00003C  6F07               	movwf	(printf@flag+1)& (0+255),b
  5060  00003E  0E00               	movlw	0
  5061  000040  6F06               	movwf	printf@flag& (0+255),b
  5062                           
  5063                           ;doprnt.c: 635: switch(c = *f++) {
  5064  000042  D018               	goto	l5488
  5065  000044                     l5476:
  5066                           
  5067                           ; BSR set to: 1
  5068                           ;doprnt.c: 663: flag |= 0x400;
  5069  000044  0101               	movlb	1	; () banked
  5070  000046  8507               	bsf	(printf@flag+1)& (0+255),2,b
  5071                           
  5072                           ; BSR set to: 1
  5073                           ;doprnt.c: 698: case 'i':
  5074                           ;doprnt.c: 699: break;
  5075                           
  5076                           ; BSR set to: 1
  5077                           
  5078                           ;doprnt.c: 697: case 'd':
  5079                           
  5080                           ;doprnt.c: 664: break;
  5081  000048  D034               	goto	l5490
  5082  00004A                     l5478:
  5083                           
  5084                           ; BSR set to: 1
  5085                           ;doprnt.c: 721: flag |= 0x80;
  5086  00004A  0101               	movlb	1	; () banked
  5087  00004C  8F06               	bsf	printf@flag& (0+255),7,b
  5088                           
  5089                           ;doprnt.c: 723: break;
  5090  00004E  D031               	goto	l5490
  5091  000050                     l5480:
  5092                           
  5093                           ; BSR set to: 1
  5094                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5095  000050  C104  FFD9         	movff	printf@ap,fsr2l
  5096  000054  C105  FFDA         	movff	printf@ap+1,fsr2h
  5097  000058  50DF               	movf	indf2,w,c
  5098  00005A  0101               	movlb	1	; () banked
  5099  00005C  6F17               	movwf	printf@c& (0+255),b
  5100                           
  5101                           ; BSR set to: 1
  5102  00005E  0E02               	movlw	2
  5103  000060  0101               	movlb	1	; () banked
  5104  000062  2704               	addwf	printf@ap& (0+255),f,b
  5105  000064  0E00               	movlw	0
  5106  000066  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  5107  000068                     l5484:
  5108                           
  5109                           ; BSR set to: 1
  5110                           ;doprnt.c: 809: (putch(c) );
  5111  000068  0101               	movlb	1	; () banked
  5112  00006A  5117               	movf	printf@c& (0+255),w,b
  5113  00006C  ECAD  F016         	call	_putch
  5114                           
  5115                           ;doprnt.c: 810: continue;
  5116  000070  EF8F  F004         	goto	l5688
  5117  000074                     l5488:
  5118  000074  C0C0  FFF6         	movff	printf@f,tblptrl
  5119  000078  C0C1  FFF7         	movff	printf@f+1,tblptrh
  5120  00007C  0100               	movlb	0	; () banked
  5121  00007E  4BC0               	infsnz	printf@f& (0+255),f,b
  5122  000080  2BC1               	incf	(printf@f+1)& (0+255),f,b
  5123  000082                     	if	0	;tblptru may be non-zero
  5124  000082                     	endif
  5125  000082                     	if	0	;tblptru may be non-zero
  5126  000082                     	endif
  5127  000082  0008               	tblrd		*
  5128  000084  CFF5 F117          	movff	tablat,printf@c
  5129  000088  0101               	movlb	1	; () banked
  5130  00008A  5117               	movf	printf@c& (0+255),w,b
  5131                           
  5132                           ; Switch size 1, requested type "space"
  5133                           ; Number of cases is 6, Range of values is 0 to 120
  5134                           ; switch strategies available:
  5135                           ; Name         Instructions Cycles
  5136                           ; simple_byte           19    10 (average)
  5137                           ;	Chosen strategy is simple_byte
  5138  00008C  0A00               	xorlw	0	; case 0
  5139  00008E  B4D8               	btfsc	status,2,c
  5140  000090  0012               	return	
  5141  000092  0A63               	xorlw	99	; case 99
  5142  000094  B4D8               	btfsc	status,2,c
  5143  000096  D7DC               	goto	l5480
  5144  000098  0A07               	xorlw	7	; case 100
  5145  00009A  B4D8               	btfsc	status,2,c
  5146  00009C  D00A               	goto	l5490
  5147  00009E  0A02               	xorlw	2	; case 102
  5148  0000A0  B4D8               	btfsc	status,2,c
  5149  0000A2  D7D0               	goto	l5476
  5150  0000A4  0A0F               	xorlw	15	; case 105
  5151  0000A6  B4D8               	btfsc	status,2,c
  5152  0000A8  D004               	goto	l5490
  5153  0000AA  0A11               	xorlw	17	; case 120
  5154  0000AC  B4D8               	btfsc	status,2,c
  5155  0000AE  D7CD               	goto	l5478
  5156  0000B0  D7DB               	goto	l5484
  5157  0000B2                     l5490:
  5158                           
  5159                           ;doprnt.c: 825: if(flag & (0x700)) {
  5160  0000B2  0E07               	movlw	7
  5161  0000B4  0101               	movlb	1	; () banked
  5162  0000B6  1507               	andwf	(printf@flag+1)& (0+255),w,b
  5163  0000B8  B4D8               	btfsc	status,2,c
  5164  0000BA  D2F4               	goto	l673
  5165                           
  5166                           ; BSR set to: 1
  5167                           ;doprnt.c: 829: prec = 6;
  5168  0000BC  0E00               	movlw	0
  5169  0000BE  0101               	movlb	1	; () banked
  5170  0000C0  6F09               	movwf	(printf@prec+1)& (0+255),b
  5171  0000C2  0E06               	movlw	6
  5172  0000C4  6F08               	movwf	printf@prec& (0+255),b
  5173                           
  5174                           ; BSR set to: 1
  5175                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5176  0000C6  C104  FFD9         	movff	printf@ap,fsr2l
  5177  0000CA  C105  FFDA         	movff	printf@ap+1,fsr2h
  5178  0000CE  CFDE F114          	movff	postinc2,printf@fval
  5179  0000D2  CFDE F115          	movff	postinc2,printf@fval+1
  5180  0000D6  CFDD F116          	movff	postdec2,printf@fval+2
  5181                           
  5182                           ; BSR set to: 1
  5183  0000DA  0E03               	movlw	3
  5184  0000DC  0101               	movlb	1	; () banked
  5185  0000DE  2704               	addwf	printf@ap& (0+255),f,b
  5186  0000E0  0E00               	movlw	0
  5187  0000E2  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  5188                           
  5189                           ; BSR set to: 1
  5190                           ;doprnt.c: 831: if(fval < 0.0) {
  5191  0000E4  0101               	movlb	1	; () banked
  5192  0000E6  AF16               	btfss	(printf@fval+2)& (0+255),7,b
  5193  0000E8  D011               	goto	l5504
  5194                           
  5195                           ; BSR set to: 1
  5196                           ;doprnt.c: 832: fval = -fval;
  5197  0000EA  C114  F024         	movff	printf@fval,___ftneg@f1
  5198  0000EE  C115  F025         	movff	printf@fval+1,___ftneg@f1+1
  5199  0000F2  C116  F026         	movff	printf@fval+2,___ftneg@f1+2
  5200  0000F6  EC9B  F016         	call	___ftneg	;wreg free
  5201  0000FA  C024  F114         	movff	?___ftneg,printf@fval
  5202  0000FE  C025  F115         	movff	?___ftneg+1,printf@fval+1
  5203  000102  C026  F116         	movff	?___ftneg+2,printf@fval+2
  5204                           
  5205                           ;doprnt.c: 833: flag |= 0x03;
  5206  000106  0E03               	movlw	3
  5207  000108  0101               	movlb	1	; () banked
  5208  00010A  1306               	iorwf	printf@flag& (0+255),f,b
  5209  00010C                     l5504:
  5210                           
  5211                           ; BSR set to: 1
  5212                           ;doprnt.c: 834: }
  5213                           ;doprnt.c: 835: exp = 0;
  5214  00010C  0E00               	movlw	0
  5215  00010E  0101               	movlb	1	; () banked
  5216  000110  6F0B               	movwf	(printf@exp+1)& (0+255),b
  5217  000112  0E00               	movlw	0
  5218  000114  6F0A               	movwf	printf@exp& (0+255),b
  5219                           
  5220                           ; BSR set to: 1
  5221                           ;doprnt.c: 836: if( fval!=0) {
  5222  000116  0101               	movlb	1	; () banked
  5223  000118  5114               	movf	printf@fval& (0+255),w,b
  5224  00011A  0101               	movlb	1	; () banked
  5225  00011C  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5226  00011E  0101               	movlb	1	; () banked
  5227  000120  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5228  000122  B4D8               	btfsc	status,2,c
  5229  000124  D091               	goto	l5532
  5230                           
  5231                           ; BSR set to: 1
  5232                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5233  000126  0E82               	movlw	130
  5234  000128  0100               	movlb	0	; () banked
  5235  00012A  6FC7               	movwf	??_printf& (0+255),b
  5236  00012C  0EFF               	movlw	255
  5237  00012E  0100               	movlb	0	; () banked
  5238  000130  6FC8               	movwf	(??_printf+1)& (0+255),b
  5239  000132  C114  F0C9         	movff	printf@fval,??_printf+2
  5240  000136  C115  F0CA         	movff	printf@fval+1,??_printf+3
  5241  00013A  C116  F0CB         	movff	printf@fval+2,??_printf+4
  5242  00013E  C117  F0CC         	movff	printf@fval+3,??_printf+5
  5243  000142  0E10               	movlw	16
  5244  000144  D006               	goto	u5190
  5245  000146                     u5195:
  5246  000146  0100               	movlb	0	; () banked
  5247  000148  90D8               	bcf	status,0,c
  5248  00014A  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  5249  00014C  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  5250  00014E  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  5251  000150  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  5252  000152                     u5190:
  5253  000152  2EE8               	decfsz	wreg,f,c
  5254  000154  D7F8               	goto	u5195
  5255  000156  0100               	movlb	0	; () banked
  5256  000158  51C9               	movf	(??_printf+2)& (0+255),w,b
  5257  00015A  0100               	movlb	0	; () banked
  5258  00015C  25C7               	addwf	??_printf& (0+255),w,b
  5259  00015E  0101               	movlb	1	; () banked
  5260  000160  6F0A               	movwf	printf@exp& (0+255),b
  5261  000162  0E00               	movlw	0
  5262  000164  0100               	movlb	0	; () banked
  5263  000166  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  5264  000168  0101               	movlb	1	; () banked
  5265  00016A  6F0B               	movwf	(printf@exp+1)& (0+255),b
  5266                           
  5267                           ; BSR set to: 1
  5268                           ;doprnt.c: 838: exp--;
  5269  00016C  0101               	movlb	1	; () banked
  5270  00016E  070A               	decf	printf@exp& (0+255),f,b
  5271  000170  A0D8               	btfss	status,0,c
  5272  000172  070B               	decf	(printf@exp+1)& (0+255),f,b
  5273                           
  5274                           ; BSR set to: 1
  5275                           ;doprnt.c: 839: exp *= 3;
  5276  000174  C10A  F032         	movff	printf@exp,___wmul@multiplier
  5277  000178  C10B  F033         	movff	printf@exp+1,___wmul@multiplier+1
  5278  00017C  0E00               	movlw	0
  5279  00017E  6E35               	movwf	___wmul@multiplicand+1,c
  5280  000180  0E03               	movlw	3
  5281  000182  6E34               	movwf	___wmul@multiplicand,c
  5282  000184  EC88  F016         	call	___wmul	;wreg free
  5283  000188  C032  F10A         	movff	?___wmul,printf@exp
  5284  00018C  C033  F10B         	movff	?___wmul+1,printf@exp+1
  5285                           
  5286                           ;doprnt.c: 840: exp /= 10;
  5287  000190  C10A  F02A         	movff	printf@exp,___awdiv@dividend
  5288  000194  C10B  F02B         	movff	printf@exp+1,___awdiv@dividend+1
  5289  000198  0E00               	movlw	0
  5290  00019A  6E2D               	movwf	___awdiv@divisor+1,c
  5291  00019C  0E0A               	movlw	10
  5292  00019E  6E2C               	movwf	___awdiv@divisor,c
  5293  0001A0  EC3F  F013         	call	___awdiv	;wreg free
  5294  0001A4  C02A  F10A         	movff	?___awdiv,printf@exp
  5295  0001A8  C02B  F10B         	movff	?___awdiv+1,printf@exp+1
  5296                           
  5297                           ;doprnt.c: 841: if(exp < 0)
  5298  0001AC  0101               	movlb	1	; () banked
  5299  0001AE  AF0B               	btfss	(printf@exp+1)& (0+255),7,b
  5300  0001B0  D004               	goto	l5520
  5301                           
  5302                           ; BSR set to: 1
  5303                           ;doprnt.c: 842: exp--;
  5304  0001B2  0101               	movlb	1	; () banked
  5305  0001B4  070A               	decf	printf@exp& (0+255),f,b
  5306  0001B6  A0D8               	btfss	status,0,c
  5307  0001B8  070B               	decf	(printf@exp+1)& (0+255),f,b
  5308  0001BA                     l5520:
  5309                           
  5310                           ; BSR set to: 1
  5311                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5312  0001BA  0101               	movlb	1	; () banked
  5313  0001BC  510A               	movf	printf@exp& (0+255),w,b
  5314  0001BE  0800               	sublw	0
  5315  0001C0  EC9F  F004         	call	_scale
  5316  0001C4  C09B  F10C         	movff	?_scale,printf@tmpval
  5317  0001C8  C09C  F10D         	movff	?_scale+1,printf@tmpval+1
  5318  0001CC  C09D  F10E         	movff	?_scale+2,printf@tmpval+2
  5319                           
  5320                           ;doprnt.c: 847: tmpval.integ *= fval;
  5321  0001D0  C10C  F08C         	movff	printf@tmpval,___ftmul@f1
  5322  0001D4  C10D  F08D         	movff	printf@tmpval+1,___ftmul@f1+1
  5323  0001D8  C10E  F08E         	movff	printf@tmpval+2,___ftmul@f1+2
  5324  0001DC  C114  F08F         	movff	printf@fval,___ftmul@f2
  5325  0001E0  C115  F090         	movff	printf@fval+1,___ftmul@f2+1
  5326  0001E4  C116  F091         	movff	printf@fval+2,___ftmul@f2+2
  5327  0001E8  ECB8  F00B         	call	___ftmul	;wreg free
  5328  0001EC  C08C  F10C         	movff	?___ftmul,printf@tmpval
  5329  0001F0  C08D  F10D         	movff	?___ftmul+1,printf@tmpval+1
  5330  0001F4  C08E  F10E         	movff	?___ftmul+2,printf@tmpval+2
  5331                           
  5332                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5333  0001F8  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5334  0001FC  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5335  000200  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5336  000204  0E00               	movlw	0
  5337  000206  6E27               	movwf	___ftge@ff2,c
  5338  000208  0E80               	movlw	128
  5339  00020A  6E28               	movwf	___ftge@ff2+1,c
  5340  00020C  0E3F               	movlw	63
  5341  00020E  6E29               	movwf	___ftge@ff2+2,c
  5342  000210  ECB1  F012         	call	___ftge	;wreg free
  5343  000214  B0D8               	btfsc	status,0,c
  5344  000216  D005               	goto	l5528
  5345                           
  5346                           ;doprnt.c: 849: exp--;
  5347  000218  0101               	movlb	1	; () banked
  5348  00021A  070A               	decf	printf@exp& (0+255),f,b
  5349  00021C  A0D8               	btfss	status,0,c
  5350  00021E  070B               	decf	(printf@exp+1)& (0+255),f,b
  5351  000220  D013               	goto	l5532
  5352  000222                     l5528:
  5353                           
  5354                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5355  000222  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5356  000226  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5357  00022A  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5358  00022E  0E00               	movlw	0
  5359  000230  6E27               	movwf	___ftge@ff2,c
  5360  000232  0E20               	movlw	32
  5361  000234  6E28               	movwf	___ftge@ff2+1,c
  5362  000236  0E41               	movlw	65
  5363  000238  6E29               	movwf	___ftge@ff2+2,c
  5364  00023A  ECB1  F012         	call	___ftge	;wreg free
  5365  00023E  A0D8               	btfss	status,0,c
  5366  000240  D003               	goto	l5532
  5367                           
  5368                           ;doprnt.c: 851: exp++;
  5369  000242  0101               	movlb	1	; () banked
  5370  000244  4B0A               	infsnz	printf@exp& (0+255),f,b
  5371  000246  2B0B               	incf	(printf@exp+1)& (0+255),f,b
  5372  000248                     l5532:
  5373                           
  5374                           ;doprnt.c: 852: }
  5375                           ;doprnt.c: 1112: if(prec <= 12)
  5376  000248  0101               	movlb	1	; () banked
  5377  00024A  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  5378  00024C  D008               	goto	l5534
  5379  00024E  0101               	movlb	1	; () banked
  5380  000250  5109               	movf	(printf@prec+1)& (0+255),w,b
  5381  000252  E11D               	bnz	l5536
  5382  000254  0E0D               	movlw	13
  5383  000256  0101               	movlb	1	; () banked
  5384  000258  5D08               	subwf	printf@prec& (0+255),w,b
  5385  00025A  B0D8               	btfsc	status,0,c
  5386  00025C  D018               	goto	l5536
  5387  00025E                     l5534:
  5388                           
  5389                           ; BSR set to: 1
  5390                           ;doprnt.c: 1113: fval += fround(prec);
  5391  00025E  C114  F0A5         	movff	printf@fval,___ftadd@f1
  5392  000262  C115  F0A6         	movff	printf@fval+1,___ftadd@f1+1
  5393  000266  C116  F0A7         	movff	printf@fval+2,___ftadd@f1+2
  5394  00026A  0101               	movlb	1	; () banked
  5395  00026C  5108               	movf	printf@prec& (0+255),w,b
  5396  00026E  ECDE  F007         	call	_fround
  5397  000272  C09B  F0A8         	movff	?_fround,___ftadd@f2
  5398  000276  C09C  F0A9         	movff	?_fround+1,___ftadd@f2+1
  5399  00027A  C09D  F0AA         	movff	?_fround+2,___ftadd@f2+2
  5400  00027E  ECAA  F006         	call	___ftadd	;wreg free
  5401  000282  C0A5  F114         	movff	?___ftadd,printf@fval
  5402  000286  C0A6  F115         	movff	?___ftadd+1,printf@fval+1
  5403  00028A  C0A7  F116         	movff	?___ftadd+2,printf@fval+2
  5404  00028E                     l5536:
  5405                           
  5406                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5407  00028E  0101               	movlb	1	; () banked
  5408  000290  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  5409  000292  D008               	goto	l5538
  5410  000294  0101               	movlb	1	; () banked
  5411  000296  510B               	movf	(printf@exp+1)& (0+255),w,b
  5412  000298  E12A               	bnz	l5544
  5413  00029A  0E0A               	movlw	10
  5414  00029C  0101               	movlb	1	; () banked
  5415  00029E  5D0A               	subwf	printf@exp& (0+255),w,b
  5416  0002A0  B0D8               	btfsc	status,0,c
  5417  0002A2  D025               	goto	l5544
  5418  0002A4                     l5538:
  5419                           
  5420                           ; BSR set to: 1
  5421  0002A4  0101               	movlb	1	; () banked
  5422  0002A6  5114               	movf	printf@fval& (0+255),w,b
  5423  0002A8  0101               	movlb	1	; () banked
  5424  0002AA  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5425  0002AC  0101               	movlb	1	; () banked
  5426  0002AE  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5427  0002B0  B4D8               	btfsc	status,2,c
  5428  0002B2  D05F               	goto	l5558
  5429                           
  5430                           ; BSR set to: 1
  5431  0002B4  C114  F0B1         	movff	printf@fval,___fttol@f1
  5432  0002B8  C115  F0B2         	movff	printf@fval+1,___fttol@f1+1
  5433  0002BC  C116  F0B3         	movff	printf@fval+2,___fttol@f1+2
  5434  0002C0  EC67  F00C         	call	___fttol	;wreg free
  5435  0002C4  0100               	movlb	0	; () banked
  5436  0002C6  51B1               	movf	?___fttol& (0+255),w,b
  5437  0002C8  0100               	movlb	0	; () banked
  5438  0002CA  11B2               	iorwf	(?___fttol+1)& (0+255),w,b
  5439  0002CC  0100               	movlb	0	; () banked
  5440  0002CE  11B3               	iorwf	(?___fttol+2)& (0+255),w,b
  5441  0002D0  0100               	movlb	0	; () banked
  5442  0002D2  11B4               	iorwf	(?___fttol+3)& (0+255),w,b
  5443  0002D4  A4D8               	btfss	status,2,c
  5444  0002D6  D04D               	goto	l5558
  5445                           
  5446                           ; BSR set to: 0
  5447  0002D8  0101               	movlb	1	; () banked
  5448  0002DA  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  5449  0002DC  D04A               	goto	l5558
  5450  0002DE  0101               	movlb	1	; () banked
  5451  0002E0  510B               	movf	(printf@exp+1)& (0+255),w,b
  5452  0002E2  E105               	bnz	l5544
  5453  0002E4  0E02               	movlw	2
  5454  0002E6  0101               	movlb	1	; () banked
  5455  0002E8  5D0A               	subwf	printf@exp& (0+255),w,b
  5456  0002EA  A0D8               	btfss	status,0,c
  5457  0002EC  D042               	goto	l5558
  5458  0002EE                     l5544:
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5462  0002EE  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5463  0002F2  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5464  0002F6  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5465  0002FA  0E70               	movlw	112
  5466  0002FC  6E27               	movwf	___ftge@ff2,c
  5467  0002FE  0E89               	movlw	137
  5468  000300  6E28               	movwf	___ftge@ff2+1,c
  5469  000302  0E40               	movlw	64
  5470  000304  6E29               	movwf	___ftge@ff2+2,c
  5471  000306  ECB1  F012         	call	___ftge	;wreg free
  5472  00030A  B0D8               	btfsc	status,0,c
  5473  00030C  D003               	goto	l5548
  5474                           
  5475                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5476  00030E  0101               	movlb	1	; () banked
  5477  000310  0EF7               	movlw	247
  5478  000312  D002               	goto	L1
  5479  000314                     l5548:
  5480                           
  5481                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5482  000314  0101               	movlb	1	; () banked
  5483  000316  0EF8               	movlw	248
  5484  000318                     L1:
  5485  000318  270A               	addwf	printf@exp& (0+255),f,b
  5486  00031A  0EFF               	movlw	255
  5487  00031C  230B               	addwfc	(printf@exp+1)& (0+255),f,b
  5488                           
  5489                           ; BSR set to: 1
  5490                           ;doprnt.c: 1124: }
  5491                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5492                           
  5493                           ; BSR set to: 1
  5494  00031E  0101               	movlb	1	; () banked
  5495  000320  510A               	movf	printf@exp& (0+255),w,b
  5496  000322  EC9F  F004         	call	_scale
  5497  000326  C09B  F10C         	movff	?_scale,printf@tmpval
  5498  00032A  C09C  F10D         	movff	?_scale+1,printf@tmpval+1
  5499  00032E  C09D  F10E         	movff	?_scale+2,printf@tmpval+2
  5500                           
  5501                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5502  000332  C114  F024         	movff	printf@fval,__tdiv_to_l_@f1
  5503  000336  C115  F025         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5504  00033A  C116  F026         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5505  00033E  C10C  F027         	movff	printf@tmpval,__tdiv_to_l_@f2
  5506  000342  C10D  F028         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5507  000346  C10E  F029         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5508  00034A  ECA9  F00D         	call	__tdiv_to_l_	;wreg free
  5509  00034E  C024  F110         	movff	?__tdiv_to_l_,printf@val
  5510  000352  C025  F111         	movff	?__tdiv_to_l_+1,printf@val+1
  5511  000356  C026  F112         	movff	?__tdiv_to_l_+2,printf@val+2
  5512  00035A  C027  F113         	movff	?__tdiv_to_l_+3,printf@val+3
  5513                           
  5514                           ;doprnt.c: 1129: fval = 0.0;
  5515  00035E  0E00               	movlw	0
  5516  000360  0101               	movlb	1	; () banked
  5517  000362  6F14               	movwf	printf@fval& (0+255),b
  5518  000364  0E00               	movlw	0
  5519  000366  0101               	movlb	1	; () banked
  5520  000368  6F15               	movwf	(printf@fval+1)& (0+255),b
  5521  00036A  0E00               	movlw	0
  5522  00036C  0101               	movlb	1	; () banked
  5523  00036E  6F16               	movwf	(printf@fval+2)& (0+255),b
  5524                           
  5525                           ;doprnt.c: 1130: } else {
  5526  000370  D033               	goto	l5562
  5527  000372                     l5558:
  5528                           
  5529                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5530  000372  C114  F0B1         	movff	printf@fval,___fttol@f1
  5531  000376  C115  F0B2         	movff	printf@fval+1,___fttol@f1+1
  5532  00037A  C116  F0B3         	movff	printf@fval+2,___fttol@f1+2
  5533  00037E  EC67  F00C         	call	___fttol	;wreg free
  5534  000382  C0B1  F110         	movff	?___fttol,printf@val
  5535  000386  C0B2  F111         	movff	?___fttol+1,printf@val+1
  5536  00038A  C0B3  F112         	movff	?___fttol+2,printf@val+2
  5537  00038E  C0B4  F113         	movff	?___fttol+3,printf@val+3
  5538                           
  5539                           ;doprnt.c: 1132: fval -= (double)val;
  5540  000392  C114  F0B1         	movff	printf@fval,___ftsub@f1
  5541  000396  C115  F0B2         	movff	printf@fval+1,___ftsub@f1+1
  5542  00039A  C116  F0B3         	movff	printf@fval+2,___ftsub@f1+2
  5543  00039E  C110  F02C         	movff	printf@val,___lltoft@c
  5544  0003A2  C111  F02D         	movff	printf@val+1,___lltoft@c+1
  5545  0003A6  C112  F02E         	movff	printf@val+2,___lltoft@c+2
  5546  0003AA  C113  F02F         	movff	printf@val+3,___lltoft@c+3
  5547  0003AE  EC9C  F014         	call	___lltoft	;wreg free
  5548  0003B2  C02C  F0B4         	movff	?___lltoft,___ftsub@f2
  5549  0003B6  C02D  F0B5         	movff	?___lltoft+1,___ftsub@f2+1
  5550  0003BA  C02E  F0B6         	movff	?___lltoft+2,___ftsub@f2+2
  5551  0003BE  ECF0  F014         	call	___ftsub	;wreg free
  5552  0003C2  C0B1  F114         	movff	?___ftsub,printf@fval
  5553  0003C6  C0B2  F115         	movff	?___ftsub+1,printf@fval+1
  5554  0003CA  C0B3  F116         	movff	?___ftsub+2,printf@fval+2
  5555                           
  5556                           ;doprnt.c: 1133: exp = 0;
  5557  0003CE  0E00               	movlw	0
  5558  0003D0  0101               	movlb	1	; () banked
  5559  0003D2  6F0B               	movwf	(printf@exp+1)& (0+255),b
  5560  0003D4  0E00               	movlw	0
  5561  0003D6  6F0A               	movwf	printf@exp& (0+255),b
  5562  0003D8                     l5562:
  5563                           
  5564                           ; BSR set to: 1
  5565                           ;doprnt.c: 1134: }
  5566                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5567  0003D8  0E01               	movlw	1
  5568  0003DA  0101               	movlb	1	; () banked
  5569  0003DC  6F17               	movwf	printf@c& (0+255),b
  5570  0003DE                     l5564:
  5571                           
  5572                           ; BSR set to: 1
  5573  0003DE  0E0A               	movlw	10
  5574  0003E0  0101               	movlb	1	; () banked
  5575  0003E2  1917               	xorwf	printf@c& (0+255),w,b
  5576  0003E4  B4D8               	btfsc	status,2,c
  5577  0003E6  D01E               	goto	l5576
  5578                           
  5579                           ; BSR set to: 1
  5580                           ;doprnt.c: 1137: if(val < dpowers[c])
  5581                           
  5582                           ; BSR set to: 1
  5583                           
  5584                           ; BSR set to: 1
  5585  0003E8  0101               	movlb	1	; () banked
  5586  0003EA  5117               	movf	printf@c& (0+255),w,b
  5587  0003EC  0D04               	mullw	4
  5588  0003EE  0ED3               	movlw	low _dpowers
  5589  0003F0  24F3               	addwf	prodl,w,c
  5590  0003F2  6EF6               	movwf	tblptrl,c
  5591  0003F4  0EFD               	movlw	high _dpowers
  5592  0003F6  20F4               	addwfc	prodh,w,c
  5593  0003F8  6EF7               	movwf	tblptrh,c
  5594  0003FA                     	if	0	;There are less than 3 active tblptr bytes
  5595  0003FA                     	endif
  5596  0003FA  0009               	tblrd		*+
  5597  0003FC  50F5               	movf	tablat,w,c
  5598  0003FE  0101               	movlb	1	; () banked
  5599  000400  5D10               	subwf	printf@val& (0+255),w,b
  5600  000402  0009               	tblrd		*+
  5601  000404  50F5               	movf	tablat,w,c
  5602  000406  0101               	movlb	1	; () banked
  5603  000408  5911               	subwfb	(printf@val+1)& (0+255),w,b
  5604  00040A  0009               	tblrd		*+
  5605  00040C  50F5               	movf	tablat,w,c
  5606  00040E  0101               	movlb	1	; () banked
  5607  000410  5912               	subwfb	(printf@val+2)& (0+255),w,b
  5608  000412  0009               	tblrd		*+
  5609  000414  50F5               	movf	tablat,w,c
  5610  000416  0101               	movlb	1	; () banked
  5611  000418  5913               	subwfb	(printf@val+3)& (0+255),w,b
  5612  00041A  A0D8               	btfss	status,0,c
  5613  00041C  D003               	goto	l5576
  5614                           
  5615                           ; BSR set to: 1
  5616                           
  5617                           ; BSR set to: 1
  5618                           
  5619                           ; BSR set to: 1
  5620                           ;doprnt.c: 1138: break;
  5621  00041E  0101               	movlb	1	; () banked
  5622  000420  2B17               	incf	printf@c& (0+255),f,b
  5623  000422  D7DD               	goto	l5564
  5624  000424                     l5576:
  5625                           
  5626                           ; BSR set to: 1
  5627                           ;doprnt.c: 1175: {
  5628                           ;doprnt.c: 1188: if(flag & 0x03)
  5629  000424  0E03               	movlw	3
  5630  000426  0101               	movlb	1	; () banked
  5631  000428  1506               	andwf	printf@flag& (0+255),w,b
  5632  00042A  0100               	movlb	0	; () banked
  5633  00042C  6FC7               	movwf	??_printf& (0+255),b
  5634  00042E  0E00               	movlw	0
  5635  000430  0101               	movlb	1	; () banked
  5636  000432  1507               	andwf	(printf@flag+1)& (0+255),w,b
  5637  000434  0100               	movlb	0	; () banked
  5638  000436  6FC8               	movwf	(??_printf+1)& (0+255),b
  5639  000438  0100               	movlb	0	; () banked
  5640  00043A  51C7               	movf	??_printf& (0+255),w,b
  5641  00043C  0100               	movlb	0	; () banked
  5642  00043E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5643  000440  B4D8               	btfsc	status,2,c
  5644  000442  D04A               	goto	l5586
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;doprnt.c: 1190: (putch('-') );
  5648  000444  0E2D               	movlw	45
  5649  000446  ECAD  F016         	call	_putch
  5650                           
  5651                           ;doprnt.c: 1195: }
  5652                           ;doprnt.c: 1196: while(c--) {
  5653  00044A  D046               	goto	l5586
  5654  00044C                     l5580:
  5655                           
  5656                           ;doprnt.c: 1200: {
  5657                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5658  00044C  C110  F024         	movff	printf@val,___lldiv@dividend
  5659  000450  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  5660  000454  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  5661  000458  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  5662  00045C  0101               	movlb	1	; () banked
  5663  00045E  5117               	movf	printf@c& (0+255),w,b
  5664  000460  0D04               	mullw	4
  5665  000462  0ED3               	movlw	low _dpowers
  5666  000464  24F3               	addwf	prodl,w,c
  5667  000466  6EF6               	movwf	tblptrl,c
  5668  000468  0EFD               	movlw	high _dpowers
  5669  00046A  20F4               	addwfc	prodh,w,c
  5670  00046C  6EF7               	movwf	tblptrh,c
  5671  00046E                     	if	0	;There are less than 3 active tblptr bytes
  5672  00046E                     	endif
  5673  00046E  0009               	tblrd		*+
  5674  000470  CFF5 F028          	movff	tablat,___lldiv@divisor
  5675  000474  0009               	tblrd		*+
  5676  000476  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  5677  00047A  0009               	tblrd		*+
  5678  00047C  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  5679  000480  000A               	tblrd		*-
  5680  000482  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  5681  000486  EC81  F013         	call	___lldiv	;wreg free
  5682  00048A  C024  F10C         	movff	?___lldiv,printf@tmpval
  5683  00048E  C025  F10D         	movff	?___lldiv+1,printf@tmpval+1
  5684  000492  C026  F10E         	movff	?___lldiv+2,printf@tmpval+2
  5685  000496  C027  F10F         	movff	?___lldiv+3,printf@tmpval+3
  5686                           
  5687                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5688  00049A  C10C  F031         	movff	printf@tmpval,___llmod@dividend
  5689  00049E  C10D  F032         	movff	printf@tmpval+1,___llmod@dividend+1
  5690  0004A2  C10E  F033         	movff	printf@tmpval+2,___llmod@dividend+2
  5691  0004A6  C10F  F034         	movff	printf@tmpval+3,___llmod@dividend+3
  5692  0004AA  0E0A               	movlw	10
  5693  0004AC  6E35               	movwf	___llmod@divisor,c
  5694  0004AE  0E00               	movlw	0
  5695  0004B0  6E36               	movwf	___llmod@divisor+1,c
  5696  0004B2  0E00               	movlw	0
  5697  0004B4  6E37               	movwf	___llmod@divisor+2,c
  5698  0004B6  0E00               	movlw	0
  5699  0004B8  6E38               	movwf	___llmod@divisor+3,c
  5700  0004BA  EC36  F014         	call	___llmod	;wreg free
  5701  0004BE  C031  F10C         	movff	?___llmod,printf@tmpval
  5702  0004C2  C032  F10D         	movff	?___llmod+1,printf@tmpval+1
  5703  0004C6  C033  F10E         	movff	?___llmod+2,printf@tmpval+2
  5704  0004CA  C034  F10F         	movff	?___llmod+3,printf@tmpval+3
  5705                           
  5706                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5707  0004CE  0101               	movlb	1	; () banked
  5708  0004D0  510C               	movf	printf@tmpval& (0+255),w,b
  5709  0004D2  0F30               	addlw	48
  5710  0004D4  ECAD  F016         	call	_putch
  5711  0004D8                     l5586:
  5712  0004D8  0101               	movlb	1	; () banked
  5713  0004DA  0717               	decf	printf@c& (0+255),f,b
  5714  0004DC  0101               	movlb	1	; () banked
  5715  0004DE  2917               	incf	printf@c& (0+255),w,b
  5716  0004E0  B4D8               	btfsc	status,2,c
  5717  0004E2  D008               	goto	l5592
  5718  0004E4  D7B3               	goto	l5580
  5719  0004E6                     l5588:
  5720                           
  5721                           ; BSR set to: 1
  5722                           ;doprnt.c: 1208: (putch('0') );
  5723  0004E6  0E30               	movlw	48
  5724  0004E8  ECAD  F016         	call	_putch
  5725                           
  5726                           ;doprnt.c: 1209: exp--;
  5727  0004EC  0101               	movlb	1	; () banked
  5728  0004EE  070A               	decf	printf@exp& (0+255),f,b
  5729  0004F0  A0D8               	btfss	status,0,c
  5730  0004F2  070B               	decf	(printf@exp+1)& (0+255),f,b
  5731  0004F4                     l5592:
  5732                           
  5733                           ; BSR set to: 1
  5734  0004F4  0101               	movlb	1	; () banked
  5735  0004F6  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  5736  0004F8  D007               	goto	l5594
  5737  0004FA  0101               	movlb	1	; () banked
  5738  0004FC  510B               	movf	(printf@exp+1)& (0+255),w,b
  5739  0004FE  E1F3               	bnz	l5588
  5740  000500  0101               	movlb	1	; () banked
  5741  000502  050A               	decf	printf@exp& (0+255),w,b
  5742  000504  B0D8               	btfsc	status,0,c
  5743  000506  D7EF               	goto	l5588
  5744  000508                     l5594:
  5745                           
  5746                           ; BSR set to: 1
  5747                           ;doprnt.c: 1210: }
  5748                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5749  000508  0101               	movlb	1	; () banked
  5750  00050A  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  5751  00050C  D00C               	goto	l701
  5752  00050E  0101               	movlb	1	; () banked
  5753  000510  5109               	movf	(printf@prec+1)& (0+255),w,b
  5754  000512  E105               	bnz	u5350
  5755  000514  0E09               	movlw	9
  5756  000516  0101               	movlb	1	; () banked
  5757  000518  5D08               	subwf	printf@prec& (0+255),w,b
  5758  00051A  A0D8               	btfss	status,0,c
  5759  00051C  D004               	goto	l701
  5760  00051E                     u5350:
  5761                           
  5762                           ; BSR set to: 1
  5763                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5764  00051E  0E08               	movlw	8
  5765  000520  0101               	movlb	1	; () banked
  5766  000522  6F17               	movwf	printf@c& (0+255),b
  5767  000524  D002               	goto	l5598
  5768  000526                     l701:
  5769                           
  5770                           ; BSR set to: 1
  5771                           ;doprnt.c: 1213: else
  5772                           ;doprnt.c: 1214: c = prec;
  5773  000526  C108  F117         	movff	printf@prec,printf@c
  5774  00052A                     l5598:
  5775                           
  5776                           ; BSR set to: 1
  5777                           ;doprnt.c: 1215: prec -= c;
  5778  00052A  0101               	movlb	1	; () banked
  5779  00052C  5117               	movf	printf@c& (0+255),w,b
  5780  00052E  0101               	movlb	1	; () banked
  5781  000530  5F08               	subwf	printf@prec& (0+255),f,b
  5782  000532  0E00               	movlw	0
  5783  000534  0101               	movlb	1	; () banked
  5784  000536  BF17               	btfsc	printf@c& (0+255),7,b
  5785  000538  0EFF               	movlw	255
  5786  00053A  0101               	movlb	1	; () banked
  5787  00053C  5B09               	subwfb	(printf@prec+1)& (0+255),f,b
  5788                           
  5789                           ; BSR set to: 1
  5790                           ;doprnt.c: 1219: if(c)
  5791  00053E  0101               	movlb	1	; () banked
  5792  000540  5117               	movf	printf@c& (0+255),w,b
  5793  000542  0101               	movlb	1	; () banked
  5794  000544  B4D8               	btfsc	status,2,c
  5795  000546  D003               	goto	l5604
  5796                           
  5797                           ; BSR set to: 1
  5798                           ;doprnt.c: 1221: (putch('.') );
  5799  000548  0E2E               	movlw	46
  5800  00054A  ECAD  F016         	call	_putch
  5801  00054E                     l5604:
  5802                           
  5803                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5804  00054E  0101               	movlb	1	; () banked
  5805  000550  5117               	movf	printf@c& (0+255),w,b
  5806  000552  EC9F  F004         	call	_scale
  5807  000556  C09B  F100         	movff	?_scale,_printf$1336
  5808  00055A  C09C  F101         	movff	?_scale+1,_printf$1336+1
  5809  00055E  C09D  F102         	movff	?_scale+2,_printf$1336+2
  5810                           
  5811                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5812  000562  C114  F08F         	movff	printf@fval,___ftmul@f2
  5813  000566  C115  F090         	movff	printf@fval+1,___ftmul@f2+1
  5814  00056A  C116  F091         	movff	printf@fval+2,___ftmul@f2+2
  5815  00056E  C100  F08C         	movff	_printf$1336,___ftmul@f1
  5816  000572  C101  F08D         	movff	_printf$1336+1,___ftmul@f1+1
  5817  000576  C102  F08E         	movff	_printf$1336+2,___ftmul@f1+2
  5818  00057A  ECB8  F00B         	call	___ftmul	;wreg free
  5819  00057E  C08C  F0B1         	movff	?___ftmul,___fttol@f1
  5820  000582  C08D  F0B2         	movff	?___ftmul+1,___fttol@f1+1
  5821  000586  C08E  F0B3         	movff	?___ftmul+2,___fttol@f1+2
  5822  00058A  EC67  F00C         	call	___fttol	;wreg free
  5823  00058E  C0B1  F110         	movff	?___fttol,printf@val
  5824  000592  C0B2  F111         	movff	?___fttol+1,printf@val+1
  5825  000596  C0B3  F112         	movff	?___fttol+2,printf@val+2
  5826  00059A  C0B4  F113         	movff	?___fttol+3,printf@val+3
  5827                           
  5828                           ;doprnt.c: 1228: while(c--) {
  5829  00059E  D06D               	goto	l5614
  5830  0005A0                     l5608:
  5831                           
  5832                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5833  0005A0  C110  F024         	movff	printf@val,___lldiv@dividend
  5834  0005A4  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  5835  0005A8  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  5836  0005AC  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  5837  0005B0  0101               	movlb	1	; () banked
  5838  0005B2  5117               	movf	printf@c& (0+255),w,b
  5839  0005B4  0D04               	mullw	4
  5840  0005B6  0ED3               	movlw	low _dpowers
  5841  0005B8  24F3               	addwf	prodl,w,c
  5842  0005BA  6EF6               	movwf	tblptrl,c
  5843  0005BC  0EFD               	movlw	high _dpowers
  5844  0005BE  20F4               	addwfc	prodh,w,c
  5845  0005C0  6EF7               	movwf	tblptrh,c
  5846  0005C2                     	if	0	;There are less than 3 active tblptr bytes
  5847  0005C2                     	endif
  5848  0005C2  0009               	tblrd		*+
  5849  0005C4  CFF5 F028          	movff	tablat,___lldiv@divisor
  5850  0005C8  0009               	tblrd		*+
  5851  0005CA  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  5852  0005CE  0009               	tblrd		*+
  5853  0005D0  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  5854  0005D4  000A               	tblrd		*-
  5855  0005D6  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  5856  0005DA  EC81  F013         	call	___lldiv	;wreg free
  5857  0005DE  C024  F10C         	movff	?___lldiv,printf@tmpval
  5858  0005E2  C025  F10D         	movff	?___lldiv+1,printf@tmpval+1
  5859  0005E6  C026  F10E         	movff	?___lldiv+2,printf@tmpval+2
  5860  0005EA  C027  F10F         	movff	?___lldiv+3,printf@tmpval+3
  5861                           
  5862                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5863  0005EE  C10C  F031         	movff	printf@tmpval,___llmod@dividend
  5864  0005F2  C10D  F032         	movff	printf@tmpval+1,___llmod@dividend+1
  5865  0005F6  C10E  F033         	movff	printf@tmpval+2,___llmod@dividend+2
  5866  0005FA  C10F  F034         	movff	printf@tmpval+3,___llmod@dividend+3
  5867  0005FE  0E0A               	movlw	10
  5868  000600  6E35               	movwf	___llmod@divisor,c
  5869  000602  0E00               	movlw	0
  5870  000604  6E36               	movwf	___llmod@divisor+1,c
  5871  000606  0E00               	movlw	0
  5872  000608  6E37               	movwf	___llmod@divisor+2,c
  5873  00060A  0E00               	movlw	0
  5874  00060C  6E38               	movwf	___llmod@divisor+3,c
  5875  00060E  EC36  F014         	call	___llmod	;wreg free
  5876  000612  C031  F10C         	movff	?___llmod,printf@tmpval
  5877  000616  C032  F10D         	movff	?___llmod+1,printf@tmpval+1
  5878  00061A  C033  F10E         	movff	?___llmod+2,printf@tmpval+2
  5879  00061E  C034  F10F         	movff	?___llmod+3,printf@tmpval+3
  5880                           
  5881                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5882  000622  0101               	movlb	1	; () banked
  5883  000624  510C               	movf	printf@tmpval& (0+255),w,b
  5884  000626  0F30               	addlw	48
  5885  000628  ECAD  F016         	call	_putch
  5886                           
  5887                           ;doprnt.c: 1232: val %= dpowers[c];
  5888  00062C  C110  F031         	movff	printf@val,___llmod@dividend
  5889  000630  C111  F032         	movff	printf@val+1,___llmod@dividend+1
  5890  000634  C112  F033         	movff	printf@val+2,___llmod@dividend+2
  5891  000638  C113  F034         	movff	printf@val+3,___llmod@dividend+3
  5892  00063C  0101               	movlb	1	; () banked
  5893  00063E  5117               	movf	printf@c& (0+255),w,b
  5894  000640  0D04               	mullw	4
  5895  000642  0ED3               	movlw	low _dpowers
  5896  000644  24F3               	addwf	prodl,w,c
  5897  000646  6EF6               	movwf	tblptrl,c
  5898  000648  0EFD               	movlw	high _dpowers
  5899  00064A  20F4               	addwfc	prodh,w,c
  5900  00064C  6EF7               	movwf	tblptrh,c
  5901  00064E                     	if	0	;There are less than 3 active tblptr bytes
  5902  00064E                     	endif
  5903  00064E  0009               	tblrd		*+
  5904  000650  CFF5 F035          	movff	tablat,___llmod@divisor
  5905  000654  0009               	tblrd		*+
  5906  000656  CFF5 F036          	movff	tablat,___llmod@divisor+1
  5907  00065A  0009               	tblrd		*+
  5908  00065C  CFF5 F037          	movff	tablat,___llmod@divisor+2
  5909  000660  000A               	tblrd		*-
  5910  000662  CFF5 F038          	movff	tablat,___llmod@divisor+3
  5911  000666  EC36  F014         	call	___llmod	;wreg free
  5912  00066A  C031  F110         	movff	?___llmod,printf@val
  5913  00066E  C032  F111         	movff	?___llmod+1,printf@val+1
  5914  000672  C033  F112         	movff	?___llmod+2,printf@val+2
  5915  000676  C034  F113         	movff	?___llmod+3,printf@val+3
  5916  00067A                     l5614:
  5917  00067A  0101               	movlb	1	; () banked
  5918  00067C  0717               	decf	printf@c& (0+255),f,b
  5919  00067E  0101               	movlb	1	; () banked
  5920  000680  2917               	incf	printf@c& (0+255),w,b
  5921  000682  B4D8               	btfsc	status,2,c
  5922  000684  D008               	goto	l5620
  5923  000686  D78C               	goto	l5608
  5924  000688                     l5616:
  5925                           
  5926                           ; BSR set to: 1
  5927                           ;doprnt.c: 1236: (putch('0') );
  5928  000688  0E30               	movlw	48
  5929  00068A  ECAD  F016         	call	_putch
  5930                           
  5931                           ;doprnt.c: 1237: prec--;
  5932  00068E  0101               	movlb	1	; () banked
  5933  000690  0708               	decf	printf@prec& (0+255),f,b
  5934  000692  A0D8               	btfss	status,0,c
  5935  000694  0709               	decf	(printf@prec+1)& (0+255),f,b
  5936  000696                     l5620:
  5937                           
  5938                           ; BSR set to: 1
  5939  000696  0101               	movlb	1	; () banked
  5940  000698  5108               	movf	printf@prec& (0+255),w,b
  5941  00069A  0101               	movlb	1	; () banked
  5942  00069C  1109               	iorwf	(printf@prec+1)& (0+255),w,b
  5943  00069E  B4D8               	btfsc	status,2,c
  5944  0006A0  D13E               	goto	l5688
  5945  0006A2  D7F2               	goto	l5616
  5946  0006A4                     l673:
  5947                           
  5948                           ; BSR set to: 1
  5949                           ;doprnt.c: 1246: }
  5950                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5951  0006A4  0101               	movlb	1	; () banked
  5952  0006A6  BF06               	btfsc	printf@flag& (0+255),7,b
  5953  0006A8  D023               	goto	l5632
  5954                           
  5955                           ; BSR set to: 1
  5956                           ;doprnt.c: 1253: {
  5957                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5958  0006AA  C104  FFD9         	movff	printf@ap,fsr2l
  5959  0006AE  C105  FFDA         	movff	printf@ap+1,fsr2h
  5960  0006B2  CFDE F110          	movff	postinc2,printf@val
  5961  0006B6  CFDD F111          	movff	postdec2,printf@val+1
  5962  0006BA  0101               	movlb	1	; () banked
  5963  0006BC  0E00               	movlw	0
  5964  0006BE  BF11               	btfsc	(printf@val+1)& (0+255),7,b
  5965  0006C0  0EFF               	movlw	-1
  5966  0006C2  6F12               	movwf	(printf@val+2)& (0+255),b
  5967  0006C4  6F13               	movwf	(printf@val+3)& (0+255),b
  5968                           
  5969                           ; BSR set to: 1
  5970  0006C6  0E02               	movlw	2
  5971  0006C8  0101               	movlb	1	; () banked
  5972  0006CA  2704               	addwf	printf@ap& (0+255),f,b
  5973  0006CC  0E00               	movlw	0
  5974  0006CE  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  5975                           
  5976                           ; BSR set to: 1
  5977                           ;doprnt.c: 1261: if((long)val < 0) {
  5978  0006D0  0101               	movlb	1	; () banked
  5979  0006D2  AF13               	btfss	(printf@val+3)& (0+255),7,b
  5980  0006D4  D06E               	goto	l5666
  5981                           
  5982                           ; BSR set to: 1
  5983                           ;doprnt.c: 1262: flag |= 0x03;
  5984  0006D6  0E03               	movlw	3
  5985  0006D8  0101               	movlb	1	; () banked
  5986  0006DA  1306               	iorwf	printf@flag& (0+255),f,b
  5987                           
  5988                           ; BSR set to: 1
  5989                           ;doprnt.c: 1263: val = -val;
  5990  0006DC  0101               	movlb	1	; () banked
  5991  0006DE  1F13               	comf	(printf@val+3)& (0+255),f,b
  5992  0006E0  1F12               	comf	(printf@val+2)& (0+255),f,b
  5993  0006E2  1F11               	comf	(printf@val+1)& (0+255),f,b
  5994  0006E4  6D10               	negf	printf@val& (0+255),b
  5995  0006E6  0E00               	movlw	0
  5996  0006E8  2311               	addwfc	(printf@val+1)& (0+255),f,b
  5997  0006EA  2312               	addwfc	(printf@val+2)& (0+255),f,b
  5998  0006EC  2313               	addwfc	(printf@val+3)& (0+255),f,b
  5999                           
  6000                           ; BSR set to: 1
  6001                           ;doprnt.c: 1264: }
  6002                           ;doprnt.c: 1266: }
  6003  0006EE  D061               	goto	l5666
  6004  0006F0                     l5632:
  6005                           
  6006                           ; BSR set to: 1
  6007                           ;doprnt.c: 1268: else
  6008                           ;doprnt.c: 1273: {
  6009                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6010  0006F0  C104  FFD9         	movff	printf@ap,fsr2l
  6011  0006F4  C105  FFDA         	movff	printf@ap+1,fsr2h
  6012  0006F8  CFDE F0C7          	movff	postinc2,??_printf
  6013  0006FC  CFDD F0C8          	movff	postdec2,??_printf+1
  6014  000700  C0C7  F110         	movff	??_printf,printf@val
  6015  000704  C0C8  F111         	movff	??_printf+1,printf@val+1
  6016  000708  0101               	movlb	1	; () banked
  6017  00070A  6B12               	clrf	(printf@val+2)& (0+255),b
  6018  00070C  6B13               	clrf	(printf@val+3)& (0+255),b
  6019                           
  6020                           ; BSR set to: 1
  6021  00070E  0E02               	movlw	2
  6022  000710  0101               	movlb	1	; () banked
  6023  000712  2704               	addwf	printf@ap& (0+255),f,b
  6024  000714  0E00               	movlw	0
  6025  000716  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  6026                           
  6027                           ; BSR set to: 1
  6028                           ;doprnt.c: 1287: }
  6029                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6030  000718  D04C               	goto	l5666
  6031  00071A                     l5636:
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6035  00071A  0E01               	movlw	1
  6036  00071C  0101               	movlb	1	; () banked
  6037  00071E  6F17               	movwf	printf@c& (0+255),b
  6038  000720                     l5638:
  6039                           
  6040                           ; BSR set to: 1
  6041  000720  0E0A               	movlw	10
  6042  000722  0101               	movlb	1	; () banked
  6043  000724  1917               	xorwf	printf@c& (0+255),w,b
  6044  000726  B4D8               	btfsc	status,2,c
  6045  000728  D04D               	goto	l5668
  6046                           
  6047                           ; BSR set to: 1
  6048                           ;doprnt.c: 1306: if(val < dpowers[c])
  6049                           
  6050                           ; BSR set to: 1
  6051                           
  6052                           ; BSR set to: 1
  6053  00072A  0101               	movlb	1	; () banked
  6054  00072C  5117               	movf	printf@c& (0+255),w,b
  6055  00072E  0D04               	mullw	4
  6056  000730  0ED3               	movlw	low _dpowers
  6057  000732  24F3               	addwf	prodl,w,c
  6058  000734  6EF6               	movwf	tblptrl,c
  6059  000736  0EFD               	movlw	high _dpowers
  6060  000738  20F4               	addwfc	prodh,w,c
  6061  00073A  6EF7               	movwf	tblptrh,c
  6062  00073C                     	if	0	;There are less than 3 active tblptr bytes
  6063  00073C                     	endif
  6064  00073C  0009               	tblrd		*+
  6065  00073E  50F5               	movf	tablat,w,c
  6066  000740  0101               	movlb	1	; () banked
  6067  000742  5D10               	subwf	printf@val& (0+255),w,b
  6068  000744  0009               	tblrd		*+
  6069  000746  50F5               	movf	tablat,w,c
  6070  000748  0101               	movlb	1	; () banked
  6071  00074A  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6072  00074C  0009               	tblrd		*+
  6073  00074E  50F5               	movf	tablat,w,c
  6074  000750  0101               	movlb	1	; () banked
  6075  000752  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6076  000754  0009               	tblrd		*+
  6077  000756  50F5               	movf	tablat,w,c
  6078  000758  0101               	movlb	1	; () banked
  6079  00075A  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6080  00075C  A0D8               	btfss	status,0,c
  6081  00075E  D032               	goto	l5668
  6082                           
  6083                           ; BSR set to: 1
  6084                           
  6085                           ; BSR set to: 1
  6086                           
  6087                           ; BSR set to: 1
  6088                           ;doprnt.c: 1307: break;
  6089  000760  0101               	movlb	1	; () banked
  6090  000762  2B17               	incf	printf@c& (0+255),f,b
  6091  000764  D7DD               	goto	l5638
  6092  000766                     l5650:
  6093                           
  6094                           ; BSR set to: 1
  6095                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6096  000766  0E01               	movlw	1
  6097  000768  0101               	movlb	1	; () banked
  6098  00076A  6F17               	movwf	printf@c& (0+255),b
  6099  00076C                     l5652:
  6100                           
  6101                           ; BSR set to: 1
  6102  00076C  0E08               	movlw	8
  6103  00076E  0101               	movlb	1	; () banked
  6104  000770  1917               	xorwf	printf@c& (0+255),w,b
  6105  000772  B4D8               	btfsc	status,2,c
  6106  000774  D027               	goto	l5668
  6107                           
  6108                           ; BSR set to: 1
  6109                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6110                           
  6111                           ; BSR set to: 1
  6112                           
  6113                           ; BSR set to: 1
  6114  000776  0101               	movlb	1	; () banked
  6115  000778  5117               	movf	printf@c& (0+255),w,b
  6116  00077A  0D04               	mullw	4
  6117  00077C  0E49               	movlw	low _hexpowers
  6118  00077E  24F3               	addwf	prodl,w,c
  6119  000780  6EF6               	movwf	tblptrl,c
  6120  000782  0EFE               	movlw	high _hexpowers
  6121  000784  20F4               	addwfc	prodh,w,c
  6122  000786  6EF7               	movwf	tblptrh,c
  6123  000788                     	if	0	;There are less than 3 active tblptr bytes
  6124  000788                     	endif
  6125  000788  0009               	tblrd		*+
  6126  00078A  50F5               	movf	tablat,w,c
  6127  00078C  0101               	movlb	1	; () banked
  6128  00078E  5D10               	subwf	printf@val& (0+255),w,b
  6129  000790  0009               	tblrd		*+
  6130  000792  50F5               	movf	tablat,w,c
  6131  000794  0101               	movlb	1	; () banked
  6132  000796  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6133  000798  0009               	tblrd		*+
  6134  00079A  50F5               	movf	tablat,w,c
  6135  00079C  0101               	movlb	1	; () banked
  6136  00079E  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6137  0007A0  0009               	tblrd		*+
  6138  0007A2  50F5               	movf	tablat,w,c
  6139  0007A4  0101               	movlb	1	; () banked
  6140  0007A6  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6141  0007A8  A0D8               	btfss	status,0,c
  6142  0007AA  D00C               	goto	l5668
  6143                           
  6144                           ; BSR set to: 1
  6145                           
  6146                           ; BSR set to: 1
  6147                           
  6148                           ; BSR set to: 1
  6149                           ;doprnt.c: 1318: break;
  6150  0007AC  0101               	movlb	1	; () banked
  6151  0007AE  2B17               	incf	printf@c& (0+255),f,b
  6152  0007B0  D7DD               	goto	l5652
  6153  0007B2                     l5666:
  6154                           
  6155                           ; BSR set to: 1
  6156  0007B2  0101               	movlb	1	; () banked
  6157  0007B4  5106               	movf	printf@flag& (0+255),w,b
  6158  0007B6  0B80               	andlw	128
  6159                           
  6160                           ; Switch size 1, requested type "space"
  6161                           ; Number of cases is 2, Range of values is 0 to 128
  6162                           ; switch strategies available:
  6163                           ; Name         Instructions Cycles
  6164                           ; simple_byte            7     4 (average)
  6165                           ;	Chosen strategy is simple_byte
  6166  0007B8  0A00               	xorlw	0	; case 0
  6167  0007BA  B4D8               	btfsc	status,2,c
  6168  0007BC  D7AE               	goto	l5636
  6169  0007BE  0A80               	xorlw	128	; case 128
  6170  0007C0  B4D8               	btfsc	status,2,c
  6171  0007C2  D7D1               	goto	l5650
  6172  0007C4                     l5668:
  6173                           
  6174                           ; BSR set to: 1
  6175                           ;doprnt.c: 1422: {
  6176                           ;doprnt.c: 1438: if(flag & 0x03)
  6177  0007C4  0E03               	movlw	3
  6178  0007C6  0101               	movlb	1	; () banked
  6179  0007C8  1506               	andwf	printf@flag& (0+255),w,b
  6180  0007CA  0100               	movlb	0	; () banked
  6181  0007CC  6FC7               	movwf	??_printf& (0+255),b
  6182  0007CE  0E00               	movlw	0
  6183  0007D0  0101               	movlb	1	; () banked
  6184  0007D2  1507               	andwf	(printf@flag+1)& (0+255),w,b
  6185  0007D4  0100               	movlb	0	; () banked
  6186  0007D6  6FC8               	movwf	(??_printf+1)& (0+255),b
  6187  0007D8  0100               	movlb	0	; () banked
  6188  0007DA  51C7               	movf	??_printf& (0+255),w,b
  6189  0007DC  0100               	movlb	0	; () banked
  6190  0007DE  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6191  0007E0  B4D8               	btfsc	status,2,c
  6192  0007E2  D003               	goto	l5672
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;doprnt.c: 1439: (putch('-') );
  6196  0007E4  0E2D               	movlw	45
  6197  0007E6  ECAD  F016         	call	_putch
  6198  0007EA                     l5672:
  6199                           
  6200                           ;doprnt.c: 1469: }
  6201                           ;doprnt.c: 1472: prec = c;
  6202  0007EA  0101               	movlb	1	; () banked
  6203  0007EC  5117               	movf	printf@c& (0+255),w,b
  6204  0007EE  0101               	movlb	1	; () banked
  6205  0007F0  6F08               	movwf	printf@prec& (0+255),b
  6206  0007F2  6B09               	clrf	(printf@prec+1)& (0+255),b
  6207  0007F4  BF08               	btfsc	printf@prec& (0+255),7,b
  6208  0007F6  0709               	decf	(printf@prec+1)& (0+255),f,b
  6209                           
  6210                           ;doprnt.c: 1474: while(prec--) {
  6211  0007F8  D087               	goto	l5686
  6212  0007FA                     l5674:
  6213                           
  6214                           ; BSR set to: 1
  6215                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6216  0007FA  C108  F0C7         	movff	printf@prec,??_printf
  6217  0007FE  C109  F0C8         	movff	printf@prec+1,??_printf+1
  6218  000802  0100               	movlb	0	; () banked
  6219  000804  90D8               	bcf	status,0,c
  6220  000806  37C7               	rlcf	??_printf& (0+255),f,b
  6221  000808  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6222  00080A  0100               	movlb	0	; () banked
  6223  00080C  90D8               	bcf	status,0,c
  6224  00080E  37C7               	rlcf	??_printf& (0+255),f,b
  6225  000810  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6226  000812  0ED3               	movlw	low _dpowers
  6227  000814  0100               	movlb	0	; () banked
  6228  000816  25C7               	addwf	??_printf& (0+255),w,b
  6229  000818  6EF6               	movwf	tblptrl,c
  6230  00081A  0EFD               	movlw	high _dpowers
  6231  00081C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6232  00081E  6EF7               	movwf	tblptrh,c
  6233  000820                     	if	0	;There are less than 3 active tblptr bytes
  6234  000820                     	endif
  6235  000820  0009               	tblrd		*+
  6236  000822  CFF5 F028          	movff	tablat,___lldiv@divisor
  6237  000826  0009               	tblrd		*+
  6238  000828  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  6239  00082C  0009               	tblrd		*+
  6240  00082E  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  6241  000832  000A               	tblrd		*-
  6242  000834  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  6243  000838  C110  F024         	movff	printf@val,___lldiv@dividend
  6244  00083C  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  6245  000840  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  6246  000844  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  6247  000848  EC81  F013         	call	___lldiv	;wreg free
  6248  00084C  C024  F031         	movff	?___lldiv,___llmod@dividend
  6249  000850  C025  F032         	movff	?___lldiv+1,___llmod@dividend+1
  6250  000854  C026  F033         	movff	?___lldiv+2,___llmod@dividend+2
  6251  000858  C027  F034         	movff	?___lldiv+3,___llmod@dividend+3
  6252  00085C  0E0A               	movlw	10
  6253  00085E  6E35               	movwf	___llmod@divisor,c
  6254  000860  0E00               	movlw	0
  6255  000862  6E36               	movwf	___llmod@divisor+1,c
  6256  000864  0E00               	movlw	0
  6257  000866  6E37               	movwf	___llmod@divisor+2,c
  6258  000868  0E00               	movlw	0
  6259  00086A  6E38               	movwf	___llmod@divisor+3,c
  6260  00086C  EC36  F014         	call	___llmod	;wreg free
  6261  000870  5031               	movf	?___llmod,w,c
  6262  000872  0F30               	addlw	48
  6263  000874  0101               	movlb	1	; () banked
  6264  000876  6F17               	movwf	printf@c& (0+255),b
  6265                           
  6266                           ;doprnt.c: 1491: break;
  6267  000878  D043               	goto	l5684
  6268  00087A                     l5676:
  6269                           
  6270                           ; BSR set to: 1
  6271                           ;doprnt.c: 1499: {
  6272                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6273  00087A  C110  F024         	movff	printf@val,___lldiv@dividend
  6274  00087E  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  6275  000882  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  6276  000886  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  6277  00088A  C108  F0C7         	movff	printf@prec,??_printf
  6278  00088E  C109  F0C8         	movff	printf@prec+1,??_printf+1
  6279  000892  0100               	movlb	0	; () banked
  6280  000894  90D8               	bcf	status,0,c
  6281  000896  37C7               	rlcf	??_printf& (0+255),f,b
  6282  000898  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6283  00089A  0100               	movlb	0	; () banked
  6284  00089C  90D8               	bcf	status,0,c
  6285  00089E  37C7               	rlcf	??_printf& (0+255),f,b
  6286  0008A0  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6287  0008A2  0E49               	movlw	low _hexpowers
  6288  0008A4  0100               	movlb	0	; () banked
  6289  0008A6  25C7               	addwf	??_printf& (0+255),w,b
  6290  0008A8  6EF6               	movwf	tblptrl,c
  6291  0008AA  0EFE               	movlw	high _hexpowers
  6292  0008AC  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6293  0008AE  6EF7               	movwf	tblptrh,c
  6294  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  6295  0008B0                     	endif
  6296  0008B0  0009               	tblrd		*+
  6297  0008B2  CFF5 F028          	movff	tablat,___lldiv@divisor
  6298  0008B6  0009               	tblrd		*+
  6299  0008B8  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  6300  0008BC  0009               	tblrd		*+
  6301  0008BE  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  6302  0008C2  000A               	tblrd		*-
  6303  0008C4  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  6304  0008C8  EC81  F013         	call	___lldiv	;wreg free
  6305  0008CC  5024               	movf	?___lldiv,w,c
  6306  0008CE  0B0F               	andlw	15
  6307  0008D0  0101               	movlb	1	; () banked
  6308  0008D2  6F03               	movwf	printf@idx& (0+255),b
  6309                           
  6310                           ; BSR set to: 1
  6311                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6312  0008D4  0101               	movlb	1	; () banked
  6313  0008D6  5103               	movf	printf@idx& (0+255),w,b
  6314  0008D8  0D01               	mullw	1
  6315  0008DA  0E2F               	movlw	low STR_23
  6316  0008DC  24F3               	addwf	prodl,w,c
  6317  0008DE  6EF6               	movwf	tblptrl,c
  6318  0008E0  0EFF               	movlw	high STR_23
  6319  0008E2  20F4               	addwfc	prodh,w,c
  6320  0008E4  6EF7               	movwf	tblptrh,c
  6321  0008E6                     	if	0	;There are less than 3 active tblptr bytes
  6322  0008E6                     	endif
  6323  0008E6  0008               	tblrd		*
  6324  0008E8  CFF5 F117          	movff	tablat,printf@c
  6325                           
  6326                           ; BSR set to: 1
  6327                           ;doprnt.c: 1523: }
  6328                           
  6329                           ;doprnt.c: 1508: }
  6330                           ;doprnt.c: 1510: break;
  6331  0008EC  D009               	goto	l5684
  6332  0008EE                     l5682:
  6333                           
  6334                           ; BSR set to: 1
  6335  0008EE  0101               	movlb	1	; () banked
  6336  0008F0  5106               	movf	printf@flag& (0+255),w,b
  6337  0008F2  0B80               	andlw	128
  6338                           
  6339                           ; Switch size 1, requested type "space"
  6340                           ; Number of cases is 2, Range of values is 0 to 128
  6341                           ; switch strategies available:
  6342                           ; Name         Instructions Cycles
  6343                           ; simple_byte            7     4 (average)
  6344                           ;	Chosen strategy is simple_byte
  6345  0008F4  0A00               	xorlw	0	; case 0
  6346  0008F6  B4D8               	btfsc	status,2,c
  6347  0008F8  D780               	goto	l5674
  6348  0008FA  0A80               	xorlw	128	; case 128
  6349  0008FC  B4D8               	btfsc	status,2,c
  6350  0008FE  D7BD               	goto	l5676
  6351  000900                     l5684:
  6352                           
  6353                           ; BSR set to: 1
  6354                           ;doprnt.c: 1524: (putch(c) );
  6355  000900  0101               	movlb	1	; () banked
  6356  000902  5117               	movf	printf@c& (0+255),w,b
  6357  000904  ECAD  F016         	call	_putch
  6358  000908                     l5686:
  6359  000908  0101               	movlb	1	; () banked
  6360  00090A  0708               	decf	printf@prec& (0+255),f,b
  6361  00090C  A0D8               	btfss	status,0,c
  6362  00090E  0709               	decf	(printf@prec+1)& (0+255),f,b
  6363  000910  0101               	movlb	1	; () banked
  6364  000912  2908               	incf	printf@prec& (0+255),w,b
  6365  000914  E1EC               	bnz	l5682
  6366  000916  0101               	movlb	1	; () banked
  6367  000918  2909               	incf	(printf@prec+1)& (0+255),w,b
  6368  00091A  A4D8               	btfss	status,2,c
  6369  00091C  D7E8               	goto	l5682
  6370  00091E                     l5688:
  6371  00091E  C0C0  FFF6         	movff	printf@f,tblptrl
  6372  000922  C0C1  FFF7         	movff	printf@f+1,tblptrh
  6373  000926  0100               	movlb	0	; () banked
  6374  000928  4BC0               	infsnz	printf@f& (0+255),f,b
  6375  00092A  2BC1               	incf	(printf@f+1)& (0+255),f,b
  6376  00092C                     	if	0	;tblptru may be non-zero
  6377  00092C                     	endif
  6378  00092C                     	if	0	;tblptru may be non-zero
  6379  00092C                     	endif
  6380  00092C  0008               	tblrd		*
  6381  00092E  CFF5 F117          	movff	tablat,printf@c
  6382  000932  0101               	movlb	1	; () banked
  6383  000934  5117               	movf	printf@c& (0+255),w,b
  6384  000936  B4D8               	btfsc	status,2,c
  6385  000938  0012               	return	
  6386  00093A  EF11  F000         	goto	l5470
  6387  00093E                     __end_of_printf:
  6388                           	opt stack 0
  6389                           tblptru	equ	0xFF8
  6390                           tblptrh	equ	0xFF7
  6391                           tblptrl	equ	0xFF6
  6392                           tablat	equ	0xFF5
  6393                           prodh	equ	0xFF4
  6394                           prodl	equ	0xFF3
  6395                           intcon	equ	0xFF2
  6396                           postinc0	equ	0xFEE
  6397                           wreg	equ	0xFE8
  6398                           postdec1	equ	0xFE5
  6399                           plusw1	equ	0xFE3
  6400                           fsr1l	equ	0xFE1
  6401                           indf2	equ	0xFDF
  6402                           postinc2	equ	0xFDE
  6403                           postdec2	equ	0xFDD
  6404                           plusw2	equ	0xFDB
  6405                           fsr2h	equ	0xFDA
  6406                           fsr2l	equ	0xFD9
  6407                           status	equ	0xFD8
  6408                           
  6409 ;; *************** function _scale *****************
  6410 ;; Defined at:
  6411 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;  scl             1    wreg     char 
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  scl             1   33[BANK0 ] char 
  6416 ;; Return value:  Size  Location     Type
  6417 ;;                  3   27[BANK0 ] char 
  6418 ;; Registers used:
  6419 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6420 ;; Tracked objects:
  6421 ;;		On entry : 0/0
  6422 ;;		On exit  : 0/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6425 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;Total ram usage:        7 bytes
  6430 ;; Hardware stack levels used:    1
  6431 ;; Hardware stack levels required when called:    5
  6432 ;; This function calls:
  6433 ;;		___awdiv
  6434 ;;		___awmod
  6435 ;;		___ftmul
  6436 ;;		___wmul
  6437 ;; This function is called by:
  6438 ;;		_printf
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text24
  6443  00093E                     __ptext24:
  6444                           	opt stack 0
  6445  00093E                     _scale:
  6446                           	opt stack 23
  6447                           
  6448                           ; BSR set to: 1
  6449                           ;incstack = 0
  6450                           ;scale@scl stored from wreg
  6451  00093E  0100               	movlb	0	; () banked
  6452  000940  6FA1               	movwf	scale@scl& (0+255),b
  6453                           
  6454                           ;doprnt.c: 428: if(scl < 0) {
  6455  000942  0100               	movlb	0	; () banked
  6456  000944  AFA1               	btfss	scale@scl& (0+255),7,b
  6457  000946  D104               	goto	l5256
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;doprnt.c: 429: scl = -scl;
  6461  000948  0100               	movlb	0	; () banked
  6462  00094A  6DA1               	negf	scale@scl& (0+255),b
  6463                           
  6464                           ;doprnt.c: 430: if(scl>=110)
  6465  00094C  0100               	movlb	0	; () banked
  6466  00094E  51A1               	movf	scale@scl& (0+255),w,b
  6467  000950  0A80               	xorlw	128
  6468  000952  0F12               	addlw	-238
  6469  000954  A0D8               	btfss	status,0,c
  6470  000956  D094               	goto	l5246
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6474  000958  0E00               	movlw	0
  6475  00095A  6E35               	movwf	___wmul@multiplicand+1,c
  6476  00095C  0E03               	movlw	3
  6477  00095E  6E34               	movwf	___wmul@multiplicand,c
  6478  000960  0E00               	movlw	0
  6479  000962  6E2D               	movwf	___awdiv@divisor+1,c
  6480  000964  0E0A               	movlw	10
  6481  000966  6E2C               	movwf	___awdiv@divisor,c
  6482  000968  0E00               	movlw	0
  6483  00096A  6E27               	movwf	___awmod@divisor+1,c
  6484  00096C  0E64               	movlw	100
  6485  00096E  6E26               	movwf	___awmod@divisor,c
  6486  000970  0100               	movlb	0	; () banked
  6487  000972  51A1               	movf	scale@scl& (0+255),w,b
  6488  000974  6E24               	movwf	___awmod@dividend,c
  6489  000976  6A25               	clrf	___awmod@dividend+1,c
  6490  000978  BE24               	btfsc	___awmod@dividend,7,c
  6491  00097A  0625               	decf	___awmod@dividend+1,f,c
  6492  00097C  ECFE  F013         	call	___awmod	;wreg free
  6493  000980  C024  F02A         	movff	?___awmod,___awdiv@dividend
  6494  000984  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  6495  000988  EC3F  F013         	call	___awdiv	;wreg free
  6496  00098C  0E09               	movlw	9
  6497  00098E  242A               	addwf	?___awdiv,w,c
  6498  000990  6E32               	movwf	___wmul@multiplier,c
  6499  000992  0E00               	movlw	0
  6500  000994  202B               	addwfc	?___awdiv+1,w,c
  6501  000996  6E33               	movwf	___wmul@multiplier+1,c
  6502  000998  EC88  F016         	call	___wmul	;wreg free
  6503  00099C  0EFB               	movlw	low __npowers_
  6504  00099E  2432               	addwf	?___wmul,w,c
  6505  0009A0  6EF6               	movwf	tblptrl,c
  6506  0009A2  0EFD               	movlw	high __npowers_
  6507  0009A4  2033               	addwfc	?___wmul+1,w,c
  6508  0009A6  6EF7               	movwf	tblptrh,c
  6509  0009A8                     	if	0	;There are less than 3 active tblptr bytes
  6510  0009A8                     	endif
  6511  0009A8  0009               	tblrd		*+
  6512  0009AA  CFF5 F08F          	movff	tablat,___ftmul@f2
  6513  0009AE  0009               	tblrd		*+
  6514  0009B0  CFF5 F090          	movff	tablat,___ftmul@f2+1
  6515  0009B4  000A               	tblrd		*-
  6516  0009B6  CFF5 F091          	movff	tablat,___ftmul@f2+2
  6517  0009BA  0E00               	movlw	0
  6518  0009BC  6E2D               	movwf	___awdiv@divisor+1,c
  6519  0009BE  0E64               	movlw	100
  6520  0009C0  6E2C               	movwf	___awdiv@divisor,c
  6521  0009C2  0100               	movlb	0	; () banked
  6522  0009C4  51A1               	movf	scale@scl& (0+255),w,b
  6523  0009C6  6E2A               	movwf	___awdiv@dividend,c
  6524  0009C8  6A2B               	clrf	___awdiv@dividend+1,c
  6525  0009CA  BE2A               	btfsc	___awdiv@dividend,7,c
  6526  0009CC  062B               	decf	___awdiv@dividend+1,f,c
  6527  0009CE  EC3F  F013         	call	___awdiv	;wreg free
  6528  0009D2  0E12               	movlw	18
  6529  0009D4  242A               	addwf	?___awdiv,w,c
  6530  0009D6  6E32               	movwf	___wmul@multiplier,c
  6531  0009D8  0E00               	movlw	0
  6532  0009DA  202B               	addwfc	?___awdiv+1,w,c
  6533  0009DC  6E33               	movwf	___wmul@multiplier+1,c
  6534  0009DE  0E00               	movlw	0
  6535  0009E0  6E35               	movwf	___wmul@multiplicand+1,c
  6536  0009E2  0E03               	movlw	3
  6537  0009E4  6E34               	movwf	___wmul@multiplicand,c
  6538  0009E6  EC88  F016         	call	___wmul	;wreg free
  6539  0009EA  0EFB               	movlw	low __npowers_
  6540  0009EC  2432               	addwf	?___wmul,w,c
  6541  0009EE  6EF6               	movwf	tblptrl,c
  6542  0009F0  0EFD               	movlw	high __npowers_
  6543  0009F2  2033               	addwfc	?___wmul+1,w,c
  6544  0009F4  6EF7               	movwf	tblptrh,c
  6545  0009F6                     	if	0	;There are less than 3 active tblptr bytes
  6546  0009F6                     	endif
  6547  0009F6  0009               	tblrd		*+
  6548  0009F8  CFF5 F08C          	movff	tablat,___ftmul@f1
  6549  0009FC  0009               	tblrd		*+
  6550  0009FE  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  6551  000A02  000A               	tblrd		*-
  6552  000A04  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  6553  000A08  ECB8  F00B         	call	___ftmul	;wreg free
  6554  000A0C  C08C  F09E         	movff	?___ftmul,_scale$1335
  6555  000A10  C08D  F09F         	movff	?___ftmul+1,_scale$1335+1
  6556  000A14  C08E  F0A0         	movff	?___ftmul+2,_scale$1335+2
  6557                           
  6558                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6559  000A18  C09E  F08C         	movff	_scale$1335,___ftmul@f1
  6560  000A1C  C09F  F08D         	movff	_scale$1335+1,___ftmul@f1+1
  6561  000A20  C0A0  F08E         	movff	_scale$1335+2,___ftmul@f1+2
  6562  000A24  0E00               	movlw	0
  6563  000A26  6E35               	movwf	___wmul@multiplicand+1,c
  6564  000A28  0E03               	movlw	3
  6565  000A2A  6E34               	movwf	___wmul@multiplicand,c
  6566  000A2C  0E00               	movlw	0
  6567  000A2E  6E27               	movwf	___awmod@divisor+1,c
  6568  000A30  0E0A               	movlw	10
  6569  000A32  6E26               	movwf	___awmod@divisor,c
  6570  000A34  0100               	movlb	0	; () banked
  6571  000A36  51A1               	movf	scale@scl& (0+255),w,b
  6572  000A38  6E24               	movwf	___awmod@dividend,c
  6573  000A3A  6A25               	clrf	___awmod@dividend+1,c
  6574  000A3C  BE24               	btfsc	___awmod@dividend,7,c
  6575  000A3E  0625               	decf	___awmod@dividend+1,f,c
  6576  000A40  ECFE  F013         	call	___awmod	;wreg free
  6577  000A44  C024  F032         	movff	?___awmod,___wmul@multiplier
  6578  000A48  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  6579  000A4C  EC88  F016         	call	___wmul	;wreg free
  6580  000A50  0EFB               	movlw	low __npowers_
  6581  000A52  2432               	addwf	?___wmul,w,c
  6582  000A54  6EF6               	movwf	tblptrl,c
  6583  000A56  0EFD               	movlw	high __npowers_
  6584  000A58  2033               	addwfc	?___wmul+1,w,c
  6585  000A5A  6EF7               	movwf	tblptrh,c
  6586  000A5C                     	if	0	;There are less than 3 active tblptr bytes
  6587  000A5C                     	endif
  6588  000A5C  0009               	tblrd		*+
  6589  000A5E  CFF5 F08F          	movff	tablat,___ftmul@f2
  6590  000A62  0009               	tblrd		*+
  6591  000A64  CFF5 F090          	movff	tablat,___ftmul@f2+1
  6592  000A68  000A               	tblrd		*-
  6593  000A6A  CFF5 F091          	movff	tablat,___ftmul@f2+2
  6594  000A6E  ECB8  F00B         	call	___ftmul	;wreg free
  6595  000A72  C08C  F09B         	movff	?___ftmul,?_scale
  6596  000A76  C08D  F09C         	movff	?___ftmul+1,?_scale+1
  6597  000A7A  C08E  F09D         	movff	?___ftmul+2,?_scale+2
  6598  000A7E  0012               	return	
  6599  000A80                     l5246:
  6600                           
  6601                           ;doprnt.c: 432: else if(scl > 10)
  6602  000A80  0100               	movlb	0	; () banked
  6603  000A82  51A1               	movf	scale@scl& (0+255),w,b
  6604  000A84  0A80               	xorlw	128
  6605  000A86  0F75               	addlw	-139
  6606  000A88  A0D8               	btfss	status,0,c
  6607  000A8A  D04F               	goto	l5252
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6611  000A8C  0E00               	movlw	0
  6612  000A8E  6E2D               	movwf	___awdiv@divisor+1,c
  6613  000A90  0E0A               	movlw	10
  6614  000A92  6E2C               	movwf	___awdiv@divisor,c
  6615  000A94  0100               	movlb	0	; () banked
  6616  000A96  51A1               	movf	scale@scl& (0+255),w,b
  6617  000A98  6E2A               	movwf	___awdiv@dividend,c
  6618  000A9A  6A2B               	clrf	___awdiv@dividend+1,c
  6619  000A9C  BE2A               	btfsc	___awdiv@dividend,7,c
  6620  000A9E  062B               	decf	___awdiv@dividend+1,f,c
  6621  000AA0  EC3F  F013         	call	___awdiv	;wreg free
  6622  000AA4  0E09               	movlw	9
  6623  000AA6  242A               	addwf	?___awdiv,w,c
  6624  000AA8  6E32               	movwf	___wmul@multiplier,c
  6625  000AAA  0E00               	movlw	0
  6626  000AAC  202B               	addwfc	?___awdiv+1,w,c
  6627  000AAE  6E33               	movwf	___wmul@multiplier+1,c
  6628  000AB0  0E00               	movlw	0
  6629  000AB2  6E35               	movwf	___wmul@multiplicand+1,c
  6630  000AB4  0E03               	movlw	3
  6631  000AB6  6E34               	movwf	___wmul@multiplicand,c
  6632  000AB8  EC88  F016         	call	___wmul	;wreg free
  6633  000ABC  0EFB               	movlw	low __npowers_
  6634  000ABE  2432               	addwf	?___wmul,w,c
  6635  000AC0  6EF6               	movwf	tblptrl,c
  6636  000AC2  0EFD               	movlw	high __npowers_
  6637  000AC4  2033               	addwfc	?___wmul+1,w,c
  6638  000AC6  6EF7               	movwf	tblptrh,c
  6639  000AC8                     	if	0	;There are less than 3 active tblptr bytes
  6640  000AC8                     	endif
  6641  000AC8  0009               	tblrd		*+
  6642  000ACA  CFF5 F08C          	movff	tablat,___ftmul@f1
  6643  000ACE  0009               	tblrd		*+
  6644  000AD0  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  6645  000AD4  000A               	tblrd		*-
  6646  000AD6  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  6647  000ADA  0E00               	movlw	0
  6648  000ADC  6E35               	movwf	___wmul@multiplicand+1,c
  6649  000ADE  0E03               	movlw	3
  6650  000AE0  6E34               	movwf	___wmul@multiplicand,c
  6651  000AE2  0E00               	movlw	0
  6652  000AE4  6E27               	movwf	___awmod@divisor+1,c
  6653  000AE6  0E0A               	movlw	10
  6654  000AE8  6E26               	movwf	___awmod@divisor,c
  6655  000AEA  0100               	movlb	0	; () banked
  6656  000AEC  51A1               	movf	scale@scl& (0+255),w,b
  6657  000AEE  6E24               	movwf	___awmod@dividend,c
  6658  000AF0  6A25               	clrf	___awmod@dividend+1,c
  6659  000AF2  BE24               	btfsc	___awmod@dividend,7,c
  6660  000AF4  0625               	decf	___awmod@dividend+1,f,c
  6661  000AF6  ECFE  F013         	call	___awmod	;wreg free
  6662  000AFA  C024  F032         	movff	?___awmod,___wmul@multiplier
  6663  000AFE  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  6664  000B02  EC88  F016         	call	___wmul	;wreg free
  6665  000B06  0EFB               	movlw	low __npowers_
  6666  000B08  2432               	addwf	?___wmul,w,c
  6667  000B0A  6EF6               	movwf	tblptrl,c
  6668  000B0C  0EFD               	movlw	high __npowers_
  6669  000B0E  2033               	addwfc	?___wmul+1,w,c
  6670  000B10  6EF7               	movwf	tblptrh,c
  6671  000B12                     	if	0	;There are less than 3 active tblptr bytes
  6672  000B12                     	endif
  6673  000B12  0009               	tblrd		*+
  6674  000B14  CFF5 F08F          	movff	tablat,___ftmul@f2
  6675  000B18  0009               	tblrd		*+
  6676  000B1A  CFF5 F090          	movff	tablat,___ftmul@f2+1
  6677  000B1E  000A               	tblrd		*-
  6678  000B20  CFF5 F091          	movff	tablat,___ftmul@f2+2
  6679  000B24  ECB8  F00B         	call	___ftmul	;wreg free
  6680  000B28  D7A4               	goto	L2
  6681  000B2A                     l5252:
  6682                           
  6683                           ;doprnt.c: 434: return _npowers_[scl];
  6684  000B2A  0100               	movlb	0	; () banked
  6685  000B2C  51A1               	movf	scale@scl& (0+255),w,b
  6686  000B2E  0D03               	mullw	3
  6687  000B30  0EFB               	movlw	low __npowers_
  6688  000B32  24F3               	addwf	prodl,w,c
  6689  000B34  6EF6               	movwf	tblptrl,c
  6690  000B36  0EFD               	movlw	high __npowers_
  6691  000B38  20F4               	addwfc	prodh,w,c
  6692  000B3A  6EF7               	movwf	tblptrh,c
  6693  000B3C                     	if	0	;There are less than 3 active tblptr bytes
  6694  000B3C                     	endif
  6695  000B3C  0009               	tblrd		*+
  6696  000B3E  CFF5 F09B          	movff	tablat,?_scale
  6697  000B42  0009               	tblrd		*+
  6698  000B44  CFF5 F09C          	movff	tablat,?_scale+1
  6699  000B48  000A               	tblrd		*-
  6700  000B4A  CFF5 F09D          	movff	tablat,?_scale+2
  6701                           
  6702                           ; BSR set to: 0
  6703  000B4E  0012               	return	
  6704  000B50                     l5256:
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;doprnt.c: 435: }
  6708                           ;doprnt.c: 436: if(scl>=110)
  6709  000B50  0100               	movlb	0	; () banked
  6710  000B52  51A1               	movf	scale@scl& (0+255),w,b
  6711  000B54  0A80               	xorlw	128
  6712  000B56  0F12               	addlw	-238
  6713  000B58  A0D8               	btfss	status,0,c
  6714  000B5A  D094               	goto	l5264
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6718  000B5C  0E00               	movlw	0
  6719  000B5E  6E35               	movwf	___wmul@multiplicand+1,c
  6720  000B60  0E03               	movlw	3
  6721  000B62  6E34               	movwf	___wmul@multiplicand,c
  6722  000B64  0E00               	movlw	0
  6723  000B66  6E2D               	movwf	___awdiv@divisor+1,c
  6724  000B68  0E0A               	movlw	10
  6725  000B6A  6E2C               	movwf	___awdiv@divisor,c
  6726  000B6C  0E00               	movlw	0
  6727  000B6E  6E27               	movwf	___awmod@divisor+1,c
  6728  000B70  0E64               	movlw	100
  6729  000B72  6E26               	movwf	___awmod@divisor,c
  6730  000B74  0100               	movlb	0	; () banked
  6731  000B76  51A1               	movf	scale@scl& (0+255),w,b
  6732  000B78  6E24               	movwf	___awmod@dividend,c
  6733  000B7A  6A25               	clrf	___awmod@dividend+1,c
  6734  000B7C  BE24               	btfsc	___awmod@dividend,7,c
  6735  000B7E  0625               	decf	___awmod@dividend+1,f,c
  6736  000B80  ECFE  F013         	call	___awmod	;wreg free
  6737  000B84  C024  F02A         	movff	?___awmod,___awdiv@dividend
  6738  000B88  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  6739  000B8C  EC3F  F013         	call	___awdiv	;wreg free
  6740  000B90  0E09               	movlw	9
  6741  000B92  242A               	addwf	?___awdiv,w,c
  6742  000B94  6E32               	movwf	___wmul@multiplier,c
  6743  000B96  0E00               	movlw	0
  6744  000B98  202B               	addwfc	?___awdiv+1,w,c
  6745  000B9A  6E33               	movwf	___wmul@multiplier+1,c
  6746  000B9C  EC88  F016         	call	___wmul	;wreg free
  6747  000BA0  0E22               	movlw	low __powers_
  6748  000BA2  2432               	addwf	?___wmul,w,c
  6749  000BA4  6EF6               	movwf	tblptrl,c
  6750  000BA6  0EFE               	movlw	high __powers_
  6751  000BA8  2033               	addwfc	?___wmul+1,w,c
  6752  000BAA  6EF7               	movwf	tblptrh,c
  6753  000BAC                     	if	0	;There are less than 3 active tblptr bytes
  6754  000BAC                     	endif
  6755  000BAC  0009               	tblrd		*+
  6756  000BAE  CFF5 F08F          	movff	tablat,___ftmul@f2
  6757  000BB2  0009               	tblrd		*+
  6758  000BB4  CFF5 F090          	movff	tablat,___ftmul@f2+1
  6759  000BB8  000A               	tblrd		*-
  6760  000BBA  CFF5 F091          	movff	tablat,___ftmul@f2+2
  6761  000BBE  0E00               	movlw	0
  6762  000BC0  6E2D               	movwf	___awdiv@divisor+1,c
  6763  000BC2  0E64               	movlw	100
  6764  000BC4  6E2C               	movwf	___awdiv@divisor,c
  6765  000BC6  0100               	movlb	0	; () banked
  6766  000BC8  51A1               	movf	scale@scl& (0+255),w,b
  6767  000BCA  6E2A               	movwf	___awdiv@dividend,c
  6768  000BCC  6A2B               	clrf	___awdiv@dividend+1,c
  6769  000BCE  BE2A               	btfsc	___awdiv@dividend,7,c
  6770  000BD0  062B               	decf	___awdiv@dividend+1,f,c
  6771  000BD2  EC3F  F013         	call	___awdiv	;wreg free
  6772  000BD6  0E12               	movlw	18
  6773  000BD8  242A               	addwf	?___awdiv,w,c
  6774  000BDA  6E32               	movwf	___wmul@multiplier,c
  6775  000BDC  0E00               	movlw	0
  6776  000BDE  202B               	addwfc	?___awdiv+1,w,c
  6777  000BE0  6E33               	movwf	___wmul@multiplier+1,c
  6778  000BE2  0E00               	movlw	0
  6779  000BE4  6E35               	movwf	___wmul@multiplicand+1,c
  6780  000BE6  0E03               	movlw	3
  6781  000BE8  6E34               	movwf	___wmul@multiplicand,c
  6782  000BEA  EC88  F016         	call	___wmul	;wreg free
  6783  000BEE  0E22               	movlw	low __powers_
  6784  000BF0  2432               	addwf	?___wmul,w,c
  6785  000BF2  6EF6               	movwf	tblptrl,c
  6786  000BF4  0EFE               	movlw	high __powers_
  6787  000BF6  2033               	addwfc	?___wmul+1,w,c
  6788  000BF8  6EF7               	movwf	tblptrh,c
  6789  000BFA                     	if	0	;There are less than 3 active tblptr bytes
  6790  000BFA                     	endif
  6791  000BFA  0009               	tblrd		*+
  6792  000BFC  CFF5 F08C          	movff	tablat,___ftmul@f1
  6793  000C00  0009               	tblrd		*+
  6794  000C02  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  6795  000C06  000A               	tblrd		*-
  6796  000C08  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  6797  000C0C  ECB8  F00B         	call	___ftmul	;wreg free
  6798  000C10  C08C  F09E         	movff	?___ftmul,_scale$1335
  6799  000C14  C08D  F09F         	movff	?___ftmul+1,_scale$1335+1
  6800  000C18  C08E  F0A0         	movff	?___ftmul+2,_scale$1335+2
  6801                           
  6802                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6803  000C1C  C09E  F08C         	movff	_scale$1335,___ftmul@f1
  6804  000C20  C09F  F08D         	movff	_scale$1335+1,___ftmul@f1+1
  6805  000C24  C0A0  F08E         	movff	_scale$1335+2,___ftmul@f1+2
  6806  000C28  0E00               	movlw	0
  6807  000C2A  6E35               	movwf	___wmul@multiplicand+1,c
  6808  000C2C  0E03               	movlw	3
  6809  000C2E  6E34               	movwf	___wmul@multiplicand,c
  6810  000C30  0E00               	movlw	0
  6811  000C32  6E27               	movwf	___awmod@divisor+1,c
  6812  000C34  0E0A               	movlw	10
  6813  000C36  6E26               	movwf	___awmod@divisor,c
  6814  000C38  0100               	movlb	0	; () banked
  6815  000C3A  51A1               	movf	scale@scl& (0+255),w,b
  6816  000C3C  6E24               	movwf	___awmod@dividend,c
  6817  000C3E  6A25               	clrf	___awmod@dividend+1,c
  6818  000C40  BE24               	btfsc	___awmod@dividend,7,c
  6819  000C42  0625               	decf	___awmod@dividend+1,f,c
  6820  000C44  ECFE  F013         	call	___awmod	;wreg free
  6821  000C48  C024  F032         	movff	?___awmod,___wmul@multiplier
  6822  000C4C  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  6823  000C50  EC88  F016         	call	___wmul	;wreg free
  6824  000C54  0E22               	movlw	low __powers_
  6825  000C56  2432               	addwf	?___wmul,w,c
  6826  000C58  6EF6               	movwf	tblptrl,c
  6827  000C5A  0EFE               	movlw	high __powers_
  6828  000C5C  2033               	addwfc	?___wmul+1,w,c
  6829  000C5E  6EF7               	movwf	tblptrh,c
  6830  000C60                     	if	0	;There are less than 3 active tblptr bytes
  6831  000C60                     	endif
  6832  000C60  0009               	tblrd		*+
  6833  000C62  CFF5 F08F          	movff	tablat,___ftmul@f2
  6834  000C66  0009               	tblrd		*+
  6835  000C68  CFF5 F090          	movff	tablat,___ftmul@f2+1
  6836  000C6C  000A               	tblrd		*-
  6837  000C6E  CFF5 F091          	movff	tablat,___ftmul@f2+2
  6838  000C72  ECB8  F00B         	call	___ftmul	;wreg free
  6839  000C76  C08C  F09B         	movff	?___ftmul,?_scale
  6840  000C7A  C08D  F09C         	movff	?___ftmul+1,?_scale+1
  6841  000C7E  C08E  F09D         	movff	?___ftmul+2,?_scale+2
  6842  000C82  0012               	return	
  6843  000C84                     l5264:
  6844                           
  6845                           ;doprnt.c: 438: else if(scl > 10)
  6846  000C84  0100               	movlb	0	; () banked
  6847  000C86  51A1               	movf	scale@scl& (0+255),w,b
  6848  000C88  0A80               	xorlw	128
  6849  000C8A  0F75               	addlw	-139
  6850  000C8C  A0D8               	btfss	status,0,c
  6851  000C8E  D04F               	goto	l5270
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6855  000C90  0E00               	movlw	0
  6856  000C92  6E2D               	movwf	___awdiv@divisor+1,c
  6857  000C94  0E0A               	movlw	10
  6858  000C96  6E2C               	movwf	___awdiv@divisor,c
  6859  000C98  0100               	movlb	0	; () banked
  6860  000C9A  51A1               	movf	scale@scl& (0+255),w,b
  6861  000C9C  6E2A               	movwf	___awdiv@dividend,c
  6862  000C9E  6A2B               	clrf	___awdiv@dividend+1,c
  6863  000CA0  BE2A               	btfsc	___awdiv@dividend,7,c
  6864  000CA2  062B               	decf	___awdiv@dividend+1,f,c
  6865  000CA4  EC3F  F013         	call	___awdiv	;wreg free
  6866  000CA8  0E09               	movlw	9
  6867  000CAA  242A               	addwf	?___awdiv,w,c
  6868  000CAC  6E32               	movwf	___wmul@multiplier,c
  6869  000CAE  0E00               	movlw	0
  6870  000CB0  202B               	addwfc	?___awdiv+1,w,c
  6871  000CB2  6E33               	movwf	___wmul@multiplier+1,c
  6872  000CB4  0E00               	movlw	0
  6873  000CB6  6E35               	movwf	___wmul@multiplicand+1,c
  6874  000CB8  0E03               	movlw	3
  6875  000CBA  6E34               	movwf	___wmul@multiplicand,c
  6876  000CBC  EC88  F016         	call	___wmul	;wreg free
  6877  000CC0  0E22               	movlw	low __powers_
  6878  000CC2  2432               	addwf	?___wmul,w,c
  6879  000CC4  6EF6               	movwf	tblptrl,c
  6880  000CC6  0EFE               	movlw	high __powers_
  6881  000CC8  2033               	addwfc	?___wmul+1,w,c
  6882  000CCA  6EF7               	movwf	tblptrh,c
  6883  000CCC                     	if	0	;There are less than 3 active tblptr bytes
  6884  000CCC                     	endif
  6885  000CCC  0009               	tblrd		*+
  6886  000CCE  CFF5 F08C          	movff	tablat,___ftmul@f1
  6887  000CD2  0009               	tblrd		*+
  6888  000CD4  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  6889  000CD8  000A               	tblrd		*-
  6890  000CDA  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  6891  000CDE  0E00               	movlw	0
  6892  000CE0  6E35               	movwf	___wmul@multiplicand+1,c
  6893  000CE2  0E03               	movlw	3
  6894  000CE4  6E34               	movwf	___wmul@multiplicand,c
  6895  000CE6  0E00               	movlw	0
  6896  000CE8  6E27               	movwf	___awmod@divisor+1,c
  6897  000CEA  0E0A               	movlw	10
  6898  000CEC  6E26               	movwf	___awmod@divisor,c
  6899  000CEE  0100               	movlb	0	; () banked
  6900  000CF0  51A1               	movf	scale@scl& (0+255),w,b
  6901  000CF2  6E24               	movwf	___awmod@dividend,c
  6902  000CF4  6A25               	clrf	___awmod@dividend+1,c
  6903  000CF6  BE24               	btfsc	___awmod@dividend,7,c
  6904  000CF8  0625               	decf	___awmod@dividend+1,f,c
  6905  000CFA  ECFE  F013         	call	___awmod	;wreg free
  6906  000CFE  C024  F032         	movff	?___awmod,___wmul@multiplier
  6907  000D02  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  6908  000D06  EC88  F016         	call	___wmul	;wreg free
  6909  000D0A  0E22               	movlw	low __powers_
  6910  000D0C  2432               	addwf	?___wmul,w,c
  6911  000D0E  6EF6               	movwf	tblptrl,c
  6912  000D10  0EFE               	movlw	high __powers_
  6913  000D12  2033               	addwfc	?___wmul+1,w,c
  6914  000D14  6EF7               	movwf	tblptrh,c
  6915  000D16                     	if	0	;There are less than 3 active tblptr bytes
  6916  000D16                     	endif
  6917  000D16  0009               	tblrd		*+
  6918  000D18  CFF5 F08F          	movff	tablat,___ftmul@f2
  6919  000D1C  0009               	tblrd		*+
  6920  000D1E  CFF5 F090          	movff	tablat,___ftmul@f2+1
  6921  000D22  000A               	tblrd		*-
  6922  000D24  CFF5 F091          	movff	tablat,___ftmul@f2+2
  6923  000D28  ECB8  F00B         	call	___ftmul	;wreg free
  6924  000D2C  D7A4               	goto	L3
  6925  000D2E                     l5270:
  6926                           
  6927                           ;doprnt.c: 440: return _powers_[scl];
  6928  000D2E  0100               	movlb	0	; () banked
  6929  000D30  51A1               	movf	scale@scl& (0+255),w,b
  6930  000D32  0D03               	mullw	3
  6931  000D34  0E22               	movlw	low __powers_
  6932  000D36  24F3               	addwf	prodl,w,c
  6933  000D38  6EF6               	movwf	tblptrl,c
  6934  000D3A  0EFE               	movlw	high __powers_
  6935  000D3C  20F4               	addwfc	prodh,w,c
  6936  000D3E  6EF7               	movwf	tblptrh,c
  6937  000D40                     	if	0	;There are less than 3 active tblptr bytes
  6938  000D40                     	endif
  6939  000D40  0009               	tblrd		*+
  6940  000D42  CFF5 F09B          	movff	tablat,?_scale
  6941  000D46  0009               	tblrd		*+
  6942  000D48  CFF5 F09C          	movff	tablat,?_scale+1
  6943  000D4C  000A               	tblrd		*-
  6944  000D4E  CFF5 F09D          	movff	tablat,?_scale+2
  6945  000D52  0012               	return	
  6946  000D54                     __end_of_scale:
  6947                           	opt stack 0
  6948                           tblptru	equ	0xFF8
  6949                           tblptrh	equ	0xFF7
  6950                           tblptrl	equ	0xFF6
  6951                           tablat	equ	0xFF5
  6952                           prodh	equ	0xFF4
  6953                           prodl	equ	0xFF3
  6954                           intcon	equ	0xFF2
  6955                           postinc0	equ	0xFEE
  6956                           wreg	equ	0xFE8
  6957                           postdec1	equ	0xFE5
  6958                           plusw1	equ	0xFE3
  6959                           fsr1l	equ	0xFE1
  6960                           indf2	equ	0xFDF
  6961                           postinc2	equ	0xFDE
  6962                           postdec2	equ	0xFDD
  6963                           plusw2	equ	0xFDB
  6964                           fsr2h	equ	0xFDA
  6965                           fsr2l	equ	0xFD9
  6966                           status	equ	0xFD8
  6967                           
  6968 ;; *************** function _putch *****************
  6969 ;; Defined at:
  6970 ;;		line 35 in file "lcd.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  data            1    wreg     unsigned char 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;  data            1   39[COMRAM] unsigned char 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  1    wreg      void 
  6977 ;; Registers used:
  6978 ;;		wreg, status,2, status,0, cstack
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;Total ram usage:        1 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    6
  6991 ;; This function calls:
  6992 ;;		_lcdNewline
  6993 ;;		_lcdNibble
  6994 ;; This function is called by:
  6995 ;;		_printf
  6996 ;; This function uses a non-reentrant model
  6997 ;;
  6998                           
  6999                           	psect	text25
  7000  002D5A                     __ptext25:
  7001                           	opt stack 0
  7002  002D5A                     _putch:
  7003                           	opt stack 22
  7004                           
  7005                           ;incstack = 0
  7006                           ;putch@data stored from wreg
  7007  002D5A  6E28               	movwf	putch@data,c
  7008                           
  7009                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7010  002D5C  0E0A               	movlw	10
  7011  002D5E  1828               	xorwf	putch@data,w,c
  7012  002D60  A4D8               	btfss	status,2,c
  7013  002D62  D003               	goto	l158
  7014  002D64  EC06  F017         	call	_lcdNewline	;wreg free
  7015  002D68  0012               	return	
  7016  002D6A                     l158:
  7017                           
  7018                           ;lcd.c: 37: else
  7019                           ;lcd.c: 38: {
  7020                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7021  002D6A  848C               	bsf	3980,2,c	;volatile
  7022                           
  7023                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7024  002D6C  0E74               	movlw	116
  7025  002D6E                     u5907:
  7026  002D6E  2EE8               	decfsz	wreg,f,c
  7027  002D70  D7FE               	bra	u5907
  7028  002D72  D000               	nop2	
  7029                           
  7030                           ;lcd.c: 41: lcdNibble(data);
  7031  002D74  5028               	movf	putch@data,w,c
  7032  002D76  EC69  F014         	call	_lcdNibble
  7033  002D7A  0012               	return	
  7034  002D7C                     __end_of_putch:
  7035                           	opt stack 0
  7036                           tblptru	equ	0xFF8
  7037                           tblptrh	equ	0xFF7
  7038                           tblptrl	equ	0xFF6
  7039                           tablat	equ	0xFF5
  7040                           prodh	equ	0xFF4
  7041                           prodl	equ	0xFF3
  7042                           intcon	equ	0xFF2
  7043                           postinc0	equ	0xFEE
  7044                           wreg	equ	0xFE8
  7045                           postdec1	equ	0xFE5
  7046                           plusw1	equ	0xFE3
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           plusw2	equ	0xFDB
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function _lcdNewline *****************
  7057 ;; Defined at:
  7058 ;;		line 78 in file "lcd.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;		None
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;		None
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  1    wreg      void 
  7065 ;; Registers used:
  7066 ;;		wreg, status,2, status,0, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7076 ;;Total ram usage:        0 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    5
  7079 ;; This function calls:
  7080 ;;		_lcdInst
  7081 ;; This function is called by:
  7082 ;;		_putch
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           	psect	text26
  7087  002E0C                     __ptext26:
  7088                           	opt stack 0
  7089  002E0C                     _lcdNewline:
  7090                           	opt stack 22
  7091                           
  7092                           ;lcd.c: 79: lcdInst(0b11000000);
  7093                           
  7094                           ;incstack = 0
  7095  002E0C  0EC0               	movlw	192
  7096  002E0E  ECBE  F016         	call	_lcdInst
  7097  002E12  0012               	return		;funcret
  7098  002E14                     __end_of_lcdNewline:
  7099                           	opt stack 0
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           postinc0	equ	0xFEE
  7108                           wreg	equ	0xFE8
  7109                           postdec1	equ	0xFE5
  7110                           plusw1	equ	0xFE3
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           plusw2	equ	0xFDB
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _fround *****************
  7121 ;; Defined at:
  7122 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  prec            1    wreg     unsigned char 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  prec            1   36[BANK0 ] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  3   27[BANK0 ] unsigned char 
  7129 ;; Registers used:
  7130 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7136 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;Total ram usage:       10 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    5
  7143 ;; This function calls:
  7144 ;;		___awdiv
  7145 ;;		___awmod
  7146 ;;		___ftmul
  7147 ;;		___wmul
  7148 ;; This function is called by:
  7149 ;;		_printf
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text27
  7154  000FBC                     __ptext27:
  7155                           	opt stack 0
  7156  000FBC                     _fround:
  7157                           	opt stack 23
  7158                           
  7159                           ;incstack = 0
  7160                           ;fround@prec stored from wreg
  7161  000FBC  0100               	movlb	0	; () banked
  7162  000FBE  6FA4               	movwf	fround@prec& (0+255),b
  7163                           
  7164                           ;doprnt.c: 413: if(prec>=110)
  7165  000FC0  0E6D               	movlw	109
  7166  000FC2  0100               	movlb	0	; () banked
  7167  000FC4  65A4               	cpfsgt	fround@prec& (0+255),b
  7168  000FC6  D0A2               	goto	l5224
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7172  000FC8  0E00               	movlw	0
  7173  000FCA  6E35               	movwf	___wmul@multiplicand+1,c
  7174  000FCC  0E03               	movlw	3
  7175  000FCE  6E34               	movwf	___wmul@multiplicand,c
  7176  000FD0  0E00               	movlw	0
  7177  000FD2  6E2D               	movwf	___awdiv@divisor+1,c
  7178  000FD4  0E0A               	movlw	10
  7179  000FD6  6E2C               	movwf	___awdiv@divisor,c
  7180  000FD8  0E00               	movlw	0
  7181  000FDA  6E27               	movwf	___awmod@divisor+1,c
  7182  000FDC  0E64               	movlw	100
  7183  000FDE  6E26               	movwf	___awmod@divisor,c
  7184  000FE0  C0A4  F024         	movff	fround@prec,___awmod@dividend
  7185  000FE4  6A25               	clrf	___awmod@dividend+1,c
  7186  000FE6  ECFE  F013         	call	___awmod	;wreg free
  7187  000FEA  C024  F02A         	movff	?___awmod,___awdiv@dividend
  7188  000FEE  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  7189  000FF2  EC3F  F013         	call	___awdiv	;wreg free
  7190  000FF6  0E09               	movlw	9
  7191  000FF8  242A               	addwf	?___awdiv,w,c
  7192  000FFA  6E32               	movwf	___wmul@multiplier,c
  7193  000FFC  0E00               	movlw	0
  7194  000FFE  202B               	addwfc	?___awdiv+1,w,c
  7195  001000  6E33               	movwf	___wmul@multiplier+1,c
  7196  001002  EC88  F016         	call	___wmul	;wreg free
  7197  001006  0EFB               	movlw	low __npowers_
  7198  001008  2432               	addwf	?___wmul,w,c
  7199  00100A  6EF6               	movwf	tblptrl,c
  7200  00100C  0EFD               	movlw	high __npowers_
  7201  00100E  2033               	addwfc	?___wmul+1,w,c
  7202  001010  6EF7               	movwf	tblptrh,c
  7203  001012                     	if	0	;There are less than 3 active tblptr bytes
  7204  001012                     	endif
  7205  001012  0009               	tblrd		*+
  7206  001014  CFF5 F08F          	movff	tablat,___ftmul@f2
  7207  001018  0009               	tblrd		*+
  7208  00101A  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7209  00101E  000A               	tblrd		*-
  7210  001020  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7211  001024  0E00               	movlw	0
  7212  001026  6E2D               	movwf	___awdiv@divisor+1,c
  7213  001028  0E64               	movlw	100
  7214  00102A  6E2C               	movwf	___awdiv@divisor,c
  7215  00102C  C0A4  F02A         	movff	fround@prec,___awdiv@dividend
  7216  001030  6A2B               	clrf	___awdiv@dividend+1,c
  7217  001032  EC3F  F013         	call	___awdiv	;wreg free
  7218  001036  0E12               	movlw	18
  7219  001038  242A               	addwf	?___awdiv,w,c
  7220  00103A  6E32               	movwf	___wmul@multiplier,c
  7221  00103C  0E00               	movlw	0
  7222  00103E  202B               	addwfc	?___awdiv+1,w,c
  7223  001040  6E33               	movwf	___wmul@multiplier+1,c
  7224  001042  0E00               	movlw	0
  7225  001044  6E35               	movwf	___wmul@multiplicand+1,c
  7226  001046  0E03               	movlw	3
  7227  001048  6E34               	movwf	___wmul@multiplicand,c
  7228  00104A  EC88  F016         	call	___wmul	;wreg free
  7229  00104E  0EFB               	movlw	low __npowers_
  7230  001050  2432               	addwf	?___wmul,w,c
  7231  001052  6EF6               	movwf	tblptrl,c
  7232  001054  0EFD               	movlw	high __npowers_
  7233  001056  2033               	addwfc	?___wmul+1,w,c
  7234  001058  6EF7               	movwf	tblptrh,c
  7235  00105A                     	if	0	;There are less than 3 active tblptr bytes
  7236  00105A                     	endif
  7237  00105A  0009               	tblrd		*+
  7238  00105C  CFF5 F08C          	movff	tablat,___ftmul@f1
  7239  001060  0009               	tblrd		*+
  7240  001062  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7241  001066  000A               	tblrd		*-
  7242  001068  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7243  00106C  ECB8  F00B         	call	___ftmul	;wreg free
  7244  001070  C08C  F0A1         	movff	?___ftmul,_fround$1333
  7245  001074  C08D  F0A2         	movff	?___ftmul+1,_fround$1333+1
  7246  001078  C08E  F0A3         	movff	?___ftmul+2,_fround$1333+2
  7247                           
  7248                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7249  00107C  0E00               	movlw	0
  7250  00107E  6E35               	movwf	___wmul@multiplicand+1,c
  7251  001080  0E03               	movlw	3
  7252  001082  6E34               	movwf	___wmul@multiplicand,c
  7253  001084  0E00               	movlw	0
  7254  001086  6E27               	movwf	___awmod@divisor+1,c
  7255  001088  0E0A               	movlw	10
  7256  00108A  6E26               	movwf	___awmod@divisor,c
  7257  00108C  C0A4  F024         	movff	fround@prec,___awmod@dividend
  7258  001090  6A25               	clrf	___awmod@dividend+1,c
  7259  001092  ECFE  F013         	call	___awmod	;wreg free
  7260  001096  C024  F032         	movff	?___awmod,___wmul@multiplier
  7261  00109A  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7262  00109E  EC88  F016         	call	___wmul	;wreg free
  7263  0010A2  0EFB               	movlw	low __npowers_
  7264  0010A4  2432               	addwf	?___wmul,w,c
  7265  0010A6  6EF6               	movwf	tblptrl,c
  7266  0010A8  0EFD               	movlw	high __npowers_
  7267  0010AA  2033               	addwfc	?___wmul+1,w,c
  7268  0010AC  6EF7               	movwf	tblptrh,c
  7269  0010AE                     	if	0	;There are less than 3 active tblptr bytes
  7270  0010AE                     	endif
  7271  0010AE  0009               	tblrd		*+
  7272  0010B0  CFF5 F08F          	movff	tablat,___ftmul@f2
  7273  0010B4  0009               	tblrd		*+
  7274  0010B6  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7275  0010BA  000A               	tblrd		*-
  7276  0010BC  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7277  0010C0  C0A1  F08C         	movff	_fround$1333,___ftmul@f1
  7278  0010C4  C0A2  F08D         	movff	_fround$1333+1,___ftmul@f1+1
  7279  0010C8  C0A3  F08E         	movff	_fround$1333+2,___ftmul@f1+2
  7280  0010CC  ECB8  F00B         	call	___ftmul	;wreg free
  7281  0010D0  C08C  F09E         	movff	?___ftmul,_fround$1334
  7282  0010D4  C08D  F09F         	movff	?___ftmul+1,_fround$1334+1
  7283  0010D8  C08E  F0A0         	movff	?___ftmul+2,_fround$1334+2
  7284                           
  7285                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7286  0010DC  C09E  F08C         	movff	_fround$1334,___ftmul@f1
  7287  0010E0  C09F  F08D         	movff	_fround$1334+1,___ftmul@f1+1
  7288  0010E4  C0A0  F08E         	movff	_fround$1334+2,___ftmul@f1+2
  7289  0010E8  0E00               	movlw	0
  7290  0010EA  0100               	movlb	0	; () banked
  7291  0010EC  6F8F               	movwf	___ftmul@f2& (0+255),b
  7292  0010EE  0E00               	movlw	0
  7293  0010F0  0100               	movlb	0	; () banked
  7294  0010F2  6F90               	movwf	(___ftmul@f2+1)& (0+255),b
  7295  0010F4  0E3F               	movlw	63
  7296  0010F6  0100               	movlb	0	; () banked
  7297  0010F8  6F91               	movwf	(___ftmul@f2+2)& (0+255),b
  7298  0010FA  ECB8  F00B         	call	___ftmul	;wreg free
  7299  0010FE  C08C  F09B         	movff	?___ftmul,?_fround
  7300  001102  C08D  F09C         	movff	?___ftmul+1,?_fround+1
  7301  001106  C08E  F09D         	movff	?___ftmul+2,?_fround+2
  7302  00110A  0012               	return	
  7303  00110C                     l5224:
  7304                           
  7305                           ;doprnt.c: 415: else if(prec > 10)
  7306  00110C  0E0A               	movlw	10
  7307  00110E  0100               	movlb	0	; () banked
  7308  001110  65A4               	cpfsgt	fround@prec& (0+255),b
  7309  001112  D060               	goto	l5232
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7313  001114  0E00               	movlw	0
  7314  001116  6E35               	movwf	___wmul@multiplicand+1,c
  7315  001118  0E03               	movlw	3
  7316  00111A  6E34               	movwf	___wmul@multiplicand,c
  7317  00111C  0E00               	movlw	0
  7318  00111E  6E27               	movwf	___awmod@divisor+1,c
  7319  001120  0E0A               	movlw	10
  7320  001122  6E26               	movwf	___awmod@divisor,c
  7321  001124  C0A4  F024         	movff	fround@prec,___awmod@dividend
  7322  001128  6A25               	clrf	___awmod@dividend+1,c
  7323  00112A  ECFE  F013         	call	___awmod	;wreg free
  7324  00112E  C024  F032         	movff	?___awmod,___wmul@multiplier
  7325  001132  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7326  001136  EC88  F016         	call	___wmul	;wreg free
  7327  00113A  0EFB               	movlw	low __npowers_
  7328  00113C  2432               	addwf	?___wmul,w,c
  7329  00113E  6EF6               	movwf	tblptrl,c
  7330  001140  0EFD               	movlw	high __npowers_
  7331  001142  2033               	addwfc	?___wmul+1,w,c
  7332  001144  6EF7               	movwf	tblptrh,c
  7333  001146                     	if	0	;There are less than 3 active tblptr bytes
  7334  001146                     	endif
  7335  001146  0009               	tblrd		*+
  7336  001148  CFF5 F08F          	movff	tablat,___ftmul@f2
  7337  00114C  0009               	tblrd		*+
  7338  00114E  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7339  001152  000A               	tblrd		*-
  7340  001154  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7341  001158  0E00               	movlw	0
  7342  00115A  6E2D               	movwf	___awdiv@divisor+1,c
  7343  00115C  0E0A               	movlw	10
  7344  00115E  6E2C               	movwf	___awdiv@divisor,c
  7345  001160  C0A4  F02A         	movff	fround@prec,___awdiv@dividend
  7346  001164  6A2B               	clrf	___awdiv@dividend+1,c
  7347  001166  EC3F  F013         	call	___awdiv	;wreg free
  7348  00116A  0E09               	movlw	9
  7349  00116C  242A               	addwf	?___awdiv,w,c
  7350  00116E  6E32               	movwf	___wmul@multiplier,c
  7351  001170  0E00               	movlw	0
  7352  001172  202B               	addwfc	?___awdiv+1,w,c
  7353  001174  6E33               	movwf	___wmul@multiplier+1,c
  7354  001176  0E00               	movlw	0
  7355  001178  6E35               	movwf	___wmul@multiplicand+1,c
  7356  00117A  0E03               	movlw	3
  7357  00117C  6E34               	movwf	___wmul@multiplicand,c
  7358  00117E  EC88  F016         	call	___wmul	;wreg free
  7359  001182  0EFB               	movlw	low __npowers_
  7360  001184  2432               	addwf	?___wmul,w,c
  7361  001186  6EF6               	movwf	tblptrl,c
  7362  001188  0EFD               	movlw	high __npowers_
  7363  00118A  2033               	addwfc	?___wmul+1,w,c
  7364  00118C  6EF7               	movwf	tblptrh,c
  7365  00118E                     	if	0	;There are less than 3 active tblptr bytes
  7366  00118E                     	endif
  7367  00118E  0009               	tblrd		*+
  7368  001190  CFF5 F08C          	movff	tablat,___ftmul@f1
  7369  001194  0009               	tblrd		*+
  7370  001196  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7371  00119A  000A               	tblrd		*-
  7372  00119C  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7373  0011A0  ECB8  F00B         	call	___ftmul	;wreg free
  7374  0011A4  C08C  F0A1         	movff	?___ftmul,_fround$1333
  7375  0011A8  C08D  F0A2         	movff	?___ftmul+1,_fround$1333+1
  7376  0011AC  C08E  F0A3         	movff	?___ftmul+2,_fround$1333+2
  7377                           
  7378                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7379  0011B0  C0A1  F08C         	movff	_fround$1333,___ftmul@f1
  7380  0011B4  C0A2  F08D         	movff	_fround$1333+1,___ftmul@f1+1
  7381  0011B8  C0A3  F08E         	movff	_fround$1333+2,___ftmul@f1+2
  7382  0011BC  0E00               	movlw	0
  7383  0011BE  0100               	movlb	0	; () banked
  7384  0011C0  6F8F               	movwf	___ftmul@f2& (0+255),b
  7385  0011C2  0E00               	movlw	0
  7386  0011C4  0100               	movlb	0	; () banked
  7387  0011C6  6F90               	movwf	(___ftmul@f2+1)& (0+255),b
  7388  0011C8  0E3F               	movlw	63
  7389  0011CA  0100               	movlb	0	; () banked
  7390  0011CC  6F91               	movwf	(___ftmul@f2+2)& (0+255),b
  7391  0011CE  ECB8  F00B         	call	___ftmul	;wreg free
  7392  0011D2  D795               	goto	L4
  7393  0011D4                     l5232:
  7394                           
  7395                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7396  0011D4  0100               	movlb	0	; () banked
  7397  0011D6  51A4               	movf	fround@prec& (0+255),w,b
  7398  0011D8  0D03               	mullw	3
  7399  0011DA  0EFB               	movlw	low __npowers_
  7400  0011DC  24F3               	addwf	prodl,w,c
  7401  0011DE  6EF6               	movwf	tblptrl,c
  7402  0011E0  0EFD               	movlw	high __npowers_
  7403  0011E2  20F4               	addwfc	prodh,w,c
  7404  0011E4  6EF7               	movwf	tblptrh,c
  7405  0011E6                     	if	0	;There are less than 3 active tblptr bytes
  7406  0011E6                     	endif
  7407  0011E6  0009               	tblrd		*+
  7408  0011E8  CFF5 F08C          	movff	tablat,___ftmul@f1
  7409  0011EC  0009               	tblrd		*+
  7410  0011EE  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7411  0011F2  000A               	tblrd		*-
  7412  0011F4  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7413  0011F8  0E00               	movlw	0
  7414  0011FA  0100               	movlb	0	; () banked
  7415  0011FC  6F8F               	movwf	___ftmul@f2& (0+255),b
  7416  0011FE  0E00               	movlw	0
  7417  001200  0100               	movlb	0	; () banked
  7418  001202  6F90               	movwf	(___ftmul@f2+1)& (0+255),b
  7419  001204  0E3F               	movlw	63
  7420  001206  0100               	movlb	0	; () banked
  7421  001208  6F91               	movwf	(___ftmul@f2+2)& (0+255),b
  7422  00120A  ECB8  F00B         	call	___ftmul	;wreg free
  7423  00120E  C08C  F09B         	movff	?___ftmul,?_fround
  7424  001212  C08D  F09C         	movff	?___ftmul+1,?_fround+1
  7425  001216  C08E  F09D         	movff	?___ftmul+2,?_fround+2
  7426  00121A  0012               	return	
  7427  00121C                     __end_of_fround:
  7428                           	opt stack 0
  7429                           tblptru	equ	0xFF8
  7430                           tblptrh	equ	0xFF7
  7431                           tblptrl	equ	0xFF6
  7432                           tablat	equ	0xFF5
  7433                           prodh	equ	0xFF4
  7434                           prodl	equ	0xFF3
  7435                           intcon	equ	0xFF2
  7436                           postinc0	equ	0xFEE
  7437                           wreg	equ	0xFE8
  7438                           postdec1	equ	0xFE5
  7439                           plusw1	equ	0xFE3
  7440                           fsr1l	equ	0xFE1
  7441                           indf2	equ	0xFDF
  7442                           postinc2	equ	0xFDE
  7443                           postdec2	equ	0xFDD
  7444                           plusw2	equ	0xFDB
  7445                           fsr2h	equ	0xFDA
  7446                           fsr2l	equ	0xFD9
  7447                           status	equ	0xFD8
  7448                           
  7449 ;; *************** function ___wmul *****************
  7450 ;; Defined at:
  7451 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  multiplier      2   49[COMRAM] unsigned int 
  7454 ;;  multiplicand    2   51[COMRAM] unsigned int 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;  product         2   53[COMRAM] unsigned int 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  2   49[COMRAM] unsigned int 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0, prodl, prodh
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;Total ram usage:        6 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    3
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_fround
  7477 ;;		_scale
  7478 ;;		_printf
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text28
  7483  002D10                     __ptext28:
  7484                           	opt stack 0
  7485  002D10                     ___wmul:
  7486                           	opt stack 24
  7487                           
  7488                           ;incstack = 0
  7489  002D10  5032               	movf	___wmul@multiplier,w,c
  7490  002D12  0234               	mulwf	___wmul@multiplicand,c
  7491  002D14  CFF3 F036          	movff	prodl,___wmul@product
  7492  002D18  CFF4 F037          	movff	prodh,___wmul@product+1
  7493  002D1C  5032               	movf	___wmul@multiplier,w,c
  7494  002D1E  0235               	mulwf	___wmul@multiplicand+1,c
  7495  002D20  50F3               	movf	prodl,w,c
  7496  002D22  2637               	addwf	___wmul@product+1,f,c
  7497  002D24  5033               	movf	___wmul@multiplier+1,w,c
  7498  002D26  0234               	mulwf	___wmul@multiplicand,c
  7499  002D28  50F3               	movf	prodl,w,c
  7500  002D2A  2637               	addwf	___wmul@product+1,f,c
  7501  002D2C  C036  F032         	movff	___wmul@product,?___wmul
  7502  002D30  C037  F033         	movff	___wmul@product+1,?___wmul+1
  7503  002D34  0012               	return	
  7504  002D36                     __end_of___wmul:
  7505                           	opt stack 0
  7506                           tblptru	equ	0xFF8
  7507                           tblptrh	equ	0xFF7
  7508                           tblptrl	equ	0xFF6
  7509                           tablat	equ	0xFF5
  7510                           prodh	equ	0xFF4
  7511                           prodl	equ	0xFF3
  7512                           intcon	equ	0xFF2
  7513                           postinc0	equ	0xFEE
  7514                           wreg	equ	0xFE8
  7515                           postdec1	equ	0xFE5
  7516                           plusw1	equ	0xFE3
  7517                           fsr1l	equ	0xFE1
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           postdec2	equ	0xFDD
  7521                           plusw2	equ	0xFDB
  7522                           fsr2h	equ	0xFDA
  7523                           fsr2l	equ	0xFD9
  7524                           status	equ	0xFD8
  7525                           
  7526 ;; *************** function ___ftmul *****************
  7527 ;; Defined at:
  7528 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;  f1              3   12[BANK0 ] float 
  7531 ;;  f2              3   15[BANK0 ] float 
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  7534 ;;  sign            1   26[BANK0 ] unsigned char 
  7535 ;;  cntr            1   25[BANK0 ] unsigned char 
  7536 ;;  exp             1   21[BANK0 ] unsigned char 
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  3   12[BANK0 ] float 
  7539 ;; Registers used:
  7540 ;;		wreg, status,2, status,0, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7546 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;Total ram usage:       15 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; Hardware stack levels required when called:    4
  7553 ;; This function calls:
  7554 ;;		___ftpack
  7555 ;; This function is called by:
  7556 ;;		_sortBattery
  7557 ;;		_angleToPulse
  7558 ;;		_fround
  7559 ;;		_scale
  7560 ;;		_printf
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text29
  7565  001770                     __ptext29:
  7566                           	opt stack 0
  7567  001770                     ___ftmul:
  7568                           	opt stack 23
  7569                           
  7570                           ;incstack = 0
  7571  001770  C08E  F092         	movff	___ftmul@f1+2,??___ftmul
  7572  001774  0100               	movlb	0	; () banked
  7573  001776  6B93               	clrf	(??___ftmul+1)& (0+255),b
  7574  001778  6B94               	clrf	(??___ftmul+2)& (0+255),b
  7575  00177A  0100               	movlb	0	; () banked
  7576  00177C  358D               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7577  00177E  0100               	movlb	0	; () banked
  7578  001780  3792               	rlcf	??___ftmul& (0+255),f,b
  7579  001782  E301               	bnc	u4521
  7580  001784  8193               	bsf	(??___ftmul+1)& (0+255),0,b
  7581  001786                     u4521:
  7582  001786  0100               	movlb	0	; () banked
  7583  001788  5192               	movf	??___ftmul& (0+255),w,b
  7584  00178A  0100               	movlb	0	; () banked
  7585  00178C  6F95               	movwf	___ftmul@exp& (0+255),b
  7586  00178E  0100               	movlb	0	; () banked
  7587  001790  5195               	movf	___ftmul@exp& (0+255),w,b
  7588  001792  A4D8               	btfss	status,2,c
  7589  001794  D00A               	goto	l5018
  7590                           
  7591                           ; BSR set to: 0
  7592  001796  0E00               	movlw	0
  7593  001798  0100               	movlb	0	; () banked
  7594  00179A  6F8C               	movwf	?___ftmul& (0+255),b
  7595  00179C  0E00               	movlw	0
  7596  00179E  0100               	movlb	0	; () banked
  7597  0017A0  6F8D               	movwf	(?___ftmul+1)& (0+255),b
  7598  0017A2  0E00               	movlw	0
  7599  0017A4  0100               	movlb	0	; () banked
  7600  0017A6  6F8E               	movwf	(?___ftmul+2)& (0+255),b
  7601                           
  7602                           ; BSR set to: 0
  7603  0017A8  0012               	return	
  7604  0017AA                     l5018:
  7605                           
  7606                           ; BSR set to: 0
  7607  0017AA  C091  F092         	movff	___ftmul@f2+2,??___ftmul
  7608  0017AE  0100               	movlb	0	; () banked
  7609  0017B0  6B93               	clrf	(??___ftmul+1)& (0+255),b
  7610  0017B2  6B94               	clrf	(??___ftmul+2)& (0+255),b
  7611  0017B4  0100               	movlb	0	; () banked
  7612  0017B6  3590               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7613  0017B8  0100               	movlb	0	; () banked
  7614  0017BA  3792               	rlcf	??___ftmul& (0+255),f,b
  7615  0017BC  E301               	bnc	u4541
  7616  0017BE  8193               	bsf	(??___ftmul+1)& (0+255),0,b
  7617  0017C0                     u4541:
  7618  0017C0  0100               	movlb	0	; () banked
  7619  0017C2  5192               	movf	??___ftmul& (0+255),w,b
  7620  0017C4  0100               	movlb	0	; () banked
  7621  0017C6  6F9A               	movwf	___ftmul@sign& (0+255),b
  7622  0017C8  0100               	movlb	0	; () banked
  7623  0017CA  519A               	movf	___ftmul@sign& (0+255),w,b
  7624  0017CC  A4D8               	btfss	status,2,c
  7625  0017CE  D00A               	goto	l5024
  7626                           
  7627                           ; BSR set to: 0
  7628  0017D0  0E00               	movlw	0
  7629  0017D2  0100               	movlb	0	; () banked
  7630  0017D4  6F8C               	movwf	?___ftmul& (0+255),b
  7631  0017D6  0E00               	movlw	0
  7632  0017D8  0100               	movlb	0	; () banked
  7633  0017DA  6F8D               	movwf	(?___ftmul+1)& (0+255),b
  7634  0017DC  0E00               	movlw	0
  7635  0017DE  0100               	movlb	0	; () banked
  7636  0017E0  6F8E               	movwf	(?___ftmul+2)& (0+255),b
  7637                           
  7638                           ; BSR set to: 0
  7639  0017E2  0012               	return	
  7640  0017E4                     l5024:
  7641                           
  7642                           ; BSR set to: 0
  7643  0017E4  0100               	movlb	0	; () banked
  7644  0017E6  519A               	movf	___ftmul@sign& (0+255),w,b
  7645  0017E8  0F7B               	addlw	123
  7646  0017EA  0100               	movlb	0	; () banked
  7647  0017EC  2795               	addwf	___ftmul@exp& (0+255),f,b
  7648                           
  7649                           ; BSR set to: 0
  7650  0017EE  C08E  F09A         	movff	___ftmul@f1+2,___ftmul@sign
  7651  0017F2  0100               	movlb	0	; () banked
  7652  0017F4  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  7653  0017F6  0100               	movlb	0	; () banked
  7654  0017F8  1B9A               	xorwf	___ftmul@sign& (0+255),f,b
  7655  0017FA  0E80               	movlw	128
  7656  0017FC  0100               	movlb	0	; () banked
  7657  0017FE  179A               	andwf	___ftmul@sign& (0+255),f,b
  7658                           
  7659                           ; BSR set to: 0
  7660  001800  0100               	movlb	0	; () banked
  7661  001802  8F8D               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7662                           
  7663                           ; BSR set to: 0
  7664  001804  0100               	movlb	0	; () banked
  7665  001806  8F90               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7666                           
  7667                           ; BSR set to: 0
  7668  001808  0EFF               	movlw	255
  7669  00180A  0100               	movlb	0	; () banked
  7670  00180C  178F               	andwf	___ftmul@f2& (0+255),f,b
  7671  00180E  0EFF               	movlw	255
  7672  001810  0100               	movlb	0	; () banked
  7673  001812  1790               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7674  001814  0E00               	movlw	0
  7675  001816  0100               	movlb	0	; () banked
  7676  001818  1791               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7677                           
  7678                           ; BSR set to: 0
  7679  00181A  0E00               	movlw	0
  7680  00181C  0100               	movlb	0	; () banked
  7681  00181E  6F96               	movwf	___ftmul@f3_as_product& (0+255),b
  7682  001820  0E00               	movlw	0
  7683  001822  0100               	movlb	0	; () banked
  7684  001824  6F97               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7685  001826  0E00               	movlw	0
  7686  001828  0100               	movlb	0	; () banked
  7687  00182A  6F98               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7688                           
  7689                           ; BSR set to: 0
  7690  00182C  0E07               	movlw	7
  7691  00182E  0100               	movlb	0	; () banked
  7692  001830  6F99               	movwf	___ftmul@cntr& (0+255),b
  7693  001832                     l5038:
  7694                           
  7695                           ; BSR set to: 0
  7696  001832  0100               	movlb	0	; () banked
  7697  001834  A18C               	btfss	___ftmul@f1& (0+255),0,b
  7698  001836  D00C               	goto	l5042
  7699                           
  7700                           ; BSR set to: 0
  7701  001838  0100               	movlb	0	; () banked
  7702  00183A  518F               	movf	___ftmul@f2& (0+255),w,b
  7703  00183C  0100               	movlb	0	; () banked
  7704  00183E  2796               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7705  001840  0100               	movlb	0	; () banked
  7706  001842  5190               	movf	(___ftmul@f2+1)& (0+255),w,b
  7707  001844  0100               	movlb	0	; () banked
  7708  001846  2397               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7709  001848  0100               	movlb	0	; () banked
  7710  00184A  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  7711  00184C  0100               	movlb	0	; () banked
  7712  00184E  2398               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7713  001850                     l5042:
  7714                           
  7715                           ; BSR set to: 0
  7716  001850  0100               	movlb	0	; () banked
  7717  001852  90D8               	bcf	status,0,c
  7718  001854  338E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7719  001856  338D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7720  001858  338C               	rrcf	___ftmul@f1& (0+255),f,b
  7721  00185A  0100               	movlb	0	; () banked
  7722  00185C  90D8               	bcf	status,0,c
  7723  00185E  378F               	rlcf	___ftmul@f2& (0+255),f,b
  7724  001860  3790               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7725  001862  3791               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7726                           
  7727                           ; BSR set to: 0
  7728  001864  0100               	movlb	0	; () banked
  7729  001866  2F99               	decfsz	___ftmul@cntr& (0+255),f,b
  7730  001868  D7E4               	goto	l5038
  7731                           
  7732                           ; BSR set to: 0
  7733                           
  7734                           ; BSR set to: 0
  7735  00186A  0E09               	movlw	9
  7736  00186C  0100               	movlb	0	; () banked
  7737  00186E  6F99               	movwf	___ftmul@cntr& (0+255),b
  7738  001870                     l5048:
  7739                           
  7740                           ; BSR set to: 0
  7741  001870  0100               	movlb	0	; () banked
  7742  001872  A18C               	btfss	___ftmul@f1& (0+255),0,b
  7743  001874  D00C               	goto	l5052
  7744                           
  7745                           ; BSR set to: 0
  7746  001876  0100               	movlb	0	; () banked
  7747  001878  518F               	movf	___ftmul@f2& (0+255),w,b
  7748  00187A  0100               	movlb	0	; () banked
  7749  00187C  2796               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7750  00187E  0100               	movlb	0	; () banked
  7751  001880  5190               	movf	(___ftmul@f2+1)& (0+255),w,b
  7752  001882  0100               	movlb	0	; () banked
  7753  001884  2397               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7754  001886  0100               	movlb	0	; () banked
  7755  001888  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  7756  00188A  0100               	movlb	0	; () banked
  7757  00188C  2398               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7758  00188E                     l5052:
  7759                           
  7760                           ; BSR set to: 0
  7761  00188E  0100               	movlb	0	; () banked
  7762  001890  90D8               	bcf	status,0,c
  7763  001892  338E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7764  001894  338D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7765  001896  338C               	rrcf	___ftmul@f1& (0+255),f,b
  7766  001898  0100               	movlb	0	; () banked
  7767  00189A  90D8               	bcf	status,0,c
  7768  00189C  3398               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7769  00189E  3397               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7770  0018A0  3396               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7771                           
  7772                           ; BSR set to: 0
  7773  0018A2  0100               	movlb	0	; () banked
  7774  0018A4  2F99               	decfsz	___ftmul@cntr& (0+255),f,b
  7775  0018A6  D7E4               	goto	l5048
  7776                           
  7777                           ; BSR set to: 0
  7778                           
  7779                           ; BSR set to: 0
  7780  0018A8  C096  F024         	movff	___ftmul@f3_as_product,___ftpack@arg
  7781  0018AC  C097  F025         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7782  0018B0  C098  F026         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7783  0018B4  C095  F027         	movff	___ftmul@exp,___ftpack@exp
  7784  0018B8  C09A  F028         	movff	___ftmul@sign,___ftpack@sign
  7785  0018BC  EC78  F011         	call	___ftpack	;wreg free
  7786  0018C0  C024  F08C         	movff	?___ftpack,?___ftmul
  7787  0018C4  C025  F08D         	movff	?___ftpack+1,?___ftmul+1
  7788  0018C8  C026  F08E         	movff	?___ftpack+2,?___ftmul+2
  7789  0018CC  0012               	return	
  7790  0018CE                     __end_of___ftmul:
  7791                           	opt stack 0
  7792                           tblptru	equ	0xFF8
  7793                           tblptrh	equ	0xFF7
  7794                           tblptrl	equ	0xFF6
  7795                           tablat	equ	0xFF5
  7796                           prodh	equ	0xFF4
  7797                           prodl	equ	0xFF3
  7798                           intcon	equ	0xFF2
  7799                           postinc0	equ	0xFEE
  7800                           wreg	equ	0xFE8
  7801                           postdec1	equ	0xFE5
  7802                           plusw1	equ	0xFE3
  7803                           fsr1l	equ	0xFE1
  7804                           indf2	equ	0xFDF
  7805                           postinc2	equ	0xFDE
  7806                           postdec2	equ	0xFDD
  7807                           plusw2	equ	0xFDB
  7808                           fsr2h	equ	0xFDA
  7809                           fsr2l	equ	0xFD9
  7810                           status	equ	0xFD8
  7811                           
  7812 ;; *************** function ___awmod *****************
  7813 ;; Defined at:
  7814 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7815 ;; Parameters:    Size  Location     Type
  7816 ;;  dividend        2   35[COMRAM] int 
  7817 ;;  divisor         2   37[COMRAM] int 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;  sign            1   40[COMRAM] unsigned char 
  7820 ;;  counter         1   39[COMRAM] unsigned char 
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  2   35[COMRAM] int 
  7823 ;; Registers used:
  7824 ;;		wreg, status,2, status,0
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7830 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7834 ;;Total ram usage:        6 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    3
  7837 ;; This function calls:
  7838 ;;		Nothing
  7839 ;; This function is called by:
  7840 ;;		_fround
  7841 ;;		_scale
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text30
  7846  0027FC                     __ptext30:
  7847                           	opt stack 0
  7848  0027FC                     ___awmod:
  7849                           	opt stack 24
  7850                           
  7851                           ;incstack = 0
  7852  0027FC  0E00               	movlw	0
  7853  0027FE  6E29               	movwf	___awmod@sign,c
  7854  002800  AE25               	btfss	___awmod@dividend+1,7,c
  7855  002802  D006               	goto	l5112
  7856  002804  6C24               	negf	___awmod@dividend,c
  7857  002806  1E25               	comf	___awmod@dividend+1,f,c
  7858  002808  B0D8               	btfsc	status,0,c
  7859  00280A  2A25               	incf	___awmod@dividend+1,f,c
  7860  00280C  0E01               	movlw	1
  7861  00280E  6E29               	movwf	___awmod@sign,c
  7862  002810                     l5112:
  7863  002810  AE27               	btfss	___awmod@divisor+1,7,c
  7864  002812  D004               	goto	l5116
  7865  002814  6C26               	negf	___awmod@divisor,c
  7866  002816  1E27               	comf	___awmod@divisor+1,f,c
  7867  002818  B0D8               	btfsc	status,0,c
  7868  00281A  2A27               	incf	___awmod@divisor+1,f,c
  7869  00281C                     l5116:
  7870  00281C  5026               	movf	___awmod@divisor,w,c
  7871  00281E  1027               	iorwf	___awmod@divisor+1,w,c
  7872  002820  B4D8               	btfsc	status,2,c
  7873  002822  D018               	goto	l5132
  7874  002824  0E01               	movlw	1
  7875  002826  6E28               	movwf	___awmod@counter,c
  7876  002828  D004               	goto	l5122
  7877  00282A                     l5120:
  7878  00282A  90D8               	bcf	status,0,c
  7879  00282C  3626               	rlcf	___awmod@divisor,f,c
  7880  00282E  3627               	rlcf	___awmod@divisor+1,f,c
  7881  002830  2A28               	incf	___awmod@counter,f,c
  7882  002832                     l5122:
  7883  002832  AE27               	btfss	___awmod@divisor+1,7,c
  7884  002834  D7FA               	goto	l5120
  7885  002836                     l5124:
  7886  002836  5026               	movf	___awmod@divisor,w,c
  7887  002838  5C24               	subwf	___awmod@dividend,w,c
  7888  00283A  5027               	movf	___awmod@divisor+1,w,c
  7889  00283C  5825               	subwfb	___awmod@dividend+1,w,c
  7890  00283E  A0D8               	btfss	status,0,c
  7891  002840  D004               	goto	l5128
  7892  002842  5026               	movf	___awmod@divisor,w,c
  7893  002844  5E24               	subwf	___awmod@dividend,f,c
  7894  002846  5027               	movf	___awmod@divisor+1,w,c
  7895  002848  5A25               	subwfb	___awmod@dividend+1,f,c
  7896  00284A                     l5128:
  7897  00284A  90D8               	bcf	status,0,c
  7898  00284C  3227               	rrcf	___awmod@divisor+1,f,c
  7899  00284E  3226               	rrcf	___awmod@divisor,f,c
  7900  002850  2E28               	decfsz	___awmod@counter,f,c
  7901  002852  D7F1               	goto	l5124
  7902  002854                     l5132:
  7903  002854  5029               	movf	___awmod@sign,w,c
  7904  002856  B4D8               	btfsc	status,2,c
  7905  002858  D004               	goto	l5136
  7906  00285A  6C24               	negf	___awmod@dividend,c
  7907  00285C  1E25               	comf	___awmod@dividend+1,f,c
  7908  00285E  B0D8               	btfsc	status,0,c
  7909  002860  2A25               	incf	___awmod@dividend+1,f,c
  7910  002862                     l5136:
  7911  002862  C024  F024         	movff	___awmod@dividend,?___awmod
  7912  002866  C025  F025         	movff	___awmod@dividend+1,?___awmod+1
  7913  00286A  0012               	return	
  7914  00286C                     __end_of___awmod:
  7915                           	opt stack 0
  7916                           tblptru	equ	0xFF8
  7917                           tblptrh	equ	0xFF7
  7918                           tblptrl	equ	0xFF6
  7919                           tablat	equ	0xFF5
  7920                           prodh	equ	0xFF4
  7921                           prodl	equ	0xFF3
  7922                           intcon	equ	0xFF2
  7923                           postinc0	equ	0xFEE
  7924                           wreg	equ	0xFE8
  7925                           postdec1	equ	0xFE5
  7926                           plusw1	equ	0xFE3
  7927                           fsr1l	equ	0xFE1
  7928                           indf2	equ	0xFDF
  7929                           postinc2	equ	0xFDE
  7930                           postdec2	equ	0xFDD
  7931                           plusw2	equ	0xFDB
  7932                           fsr2h	equ	0xFDA
  7933                           fsr2l	equ	0xFD9
  7934                           status	equ	0xFD8
  7935                           
  7936 ;; *************** function ___awdiv *****************
  7937 ;; Defined at:
  7938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;  dividend        2   41[COMRAM] int 
  7941 ;;  divisor         2   43[COMRAM] int 
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;  quotient        2   47[COMRAM] int 
  7944 ;;  sign            1   46[COMRAM] unsigned char 
  7945 ;;  counter         1   45[COMRAM] unsigned char 
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  2   41[COMRAM] int 
  7948 ;; Registers used:
  7949 ;;		wreg, status,2, status,0
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;Total ram usage:        8 bytes
  7960 ;; Hardware stack levels used:    1
  7961 ;; Hardware stack levels required when called:    3
  7962 ;; This function calls:
  7963 ;;		Nothing
  7964 ;; This function is called by:
  7965 ;;		_fround
  7966 ;;		_scale
  7967 ;;		_printf
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text31
  7972  00267E                     __ptext31:
  7973                           	opt stack 0
  7974  00267E                     ___awdiv:
  7975                           	opt stack 24
  7976                           
  7977                           ;incstack = 0
  7978  00267E  0E00               	movlw	0
  7979  002680  6E2F               	movwf	___awdiv@sign,c
  7980  002682  AE2D               	btfss	___awdiv@divisor+1,7,c
  7981  002684  D006               	goto	l5068
  7982  002686  6C2C               	negf	___awdiv@divisor,c
  7983  002688  1E2D               	comf	___awdiv@divisor+1,f,c
  7984  00268A  B0D8               	btfsc	status,0,c
  7985  00268C  2A2D               	incf	___awdiv@divisor+1,f,c
  7986  00268E  0E01               	movlw	1
  7987  002690  6E2F               	movwf	___awdiv@sign,c
  7988  002692                     l5068:
  7989  002692  AE2B               	btfss	___awdiv@dividend+1,7,c
  7990  002694  D006               	goto	l5074
  7991  002696  6C2A               	negf	___awdiv@dividend,c
  7992  002698  1E2B               	comf	___awdiv@dividend+1,f,c
  7993  00269A  B0D8               	btfsc	status,0,c
  7994  00269C  2A2B               	incf	___awdiv@dividend+1,f,c
  7995  00269E  0E01               	movlw	1
  7996  0026A0  1A2F               	xorwf	___awdiv@sign,f,c
  7997  0026A2                     l5074:
  7998  0026A2  0E00               	movlw	0
  7999  0026A4  6E31               	movwf	___awdiv@quotient+1,c
  8000  0026A6  0E00               	movlw	0
  8001  0026A8  6E30               	movwf	___awdiv@quotient,c
  8002  0026AA  502C               	movf	___awdiv@divisor,w,c
  8003  0026AC  102D               	iorwf	___awdiv@divisor+1,w,c
  8004  0026AE  B4D8               	btfsc	status,2,c
  8005  0026B0  D01C               	goto	l5096
  8006  0026B2  0E01               	movlw	1
  8007  0026B4  6E2E               	movwf	___awdiv@counter,c
  8008  0026B6  D004               	goto	l5082
  8009  0026B8                     l5080:
  8010  0026B8  90D8               	bcf	status,0,c
  8011  0026BA  362C               	rlcf	___awdiv@divisor,f,c
  8012  0026BC  362D               	rlcf	___awdiv@divisor+1,f,c
  8013  0026BE  2A2E               	incf	___awdiv@counter,f,c
  8014  0026C0                     l5082:
  8015  0026C0  AE2D               	btfss	___awdiv@divisor+1,7,c
  8016  0026C2  D7FA               	goto	l5080
  8017  0026C4                     l5084:
  8018  0026C4  90D8               	bcf	status,0,c
  8019  0026C6  3630               	rlcf	___awdiv@quotient,f,c
  8020  0026C8  3631               	rlcf	___awdiv@quotient+1,f,c
  8021  0026CA  502C               	movf	___awdiv@divisor,w,c
  8022  0026CC  5C2A               	subwf	___awdiv@dividend,w,c
  8023  0026CE  502D               	movf	___awdiv@divisor+1,w,c
  8024  0026D0  582B               	subwfb	___awdiv@dividend+1,w,c
  8025  0026D2  A0D8               	btfss	status,0,c
  8026  0026D4  D005               	goto	l5092
  8027  0026D6  502C               	movf	___awdiv@divisor,w,c
  8028  0026D8  5E2A               	subwf	___awdiv@dividend,f,c
  8029  0026DA  502D               	movf	___awdiv@divisor+1,w,c
  8030  0026DC  5A2B               	subwfb	___awdiv@dividend+1,f,c
  8031  0026DE  8030               	bsf	___awdiv@quotient,0,c
  8032  0026E0                     l5092:
  8033  0026E0  90D8               	bcf	status,0,c
  8034  0026E2  322D               	rrcf	___awdiv@divisor+1,f,c
  8035  0026E4  322C               	rrcf	___awdiv@divisor,f,c
  8036  0026E6  2E2E               	decfsz	___awdiv@counter,f,c
  8037  0026E8  D7ED               	goto	l5084
  8038  0026EA                     l5096:
  8039  0026EA  502F               	movf	___awdiv@sign,w,c
  8040  0026EC  B4D8               	btfsc	status,2,c
  8041  0026EE  D004               	goto	l5100
  8042  0026F0  6C30               	negf	___awdiv@quotient,c
  8043  0026F2  1E31               	comf	___awdiv@quotient+1,f,c
  8044  0026F4  B0D8               	btfsc	status,0,c
  8045  0026F6  2A31               	incf	___awdiv@quotient+1,f,c
  8046  0026F8                     l5100:
  8047  0026F8  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  8048  0026FC  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  8049  002700  0012               	return	
  8050  002702                     __end_of___awdiv:
  8051                           	opt stack 0
  8052                           tblptru	equ	0xFF8
  8053                           tblptrh	equ	0xFF7
  8054                           tblptrl	equ	0xFF6
  8055                           tablat	equ	0xFF5
  8056                           prodh	equ	0xFF4
  8057                           prodl	equ	0xFF3
  8058                           intcon	equ	0xFF2
  8059                           postinc0	equ	0xFEE
  8060                           wreg	equ	0xFE8
  8061                           postdec1	equ	0xFE5
  8062                           plusw1	equ	0xFE3
  8063                           fsr1l	equ	0xFE1
  8064                           indf2	equ	0xFDF
  8065                           postinc2	equ	0xFDE
  8066                           postdec2	equ	0xFDD
  8067                           plusw2	equ	0xFDB
  8068                           fsr2h	equ	0xFDA
  8069                           fsr2l	equ	0xFD9
  8070                           status	equ	0xFD8
  8071                           
  8072 ;; *************** function __tdiv_to_l_ *****************
  8073 ;; Defined at:
  8074 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  f1              3   35[COMRAM] float 
  8077 ;;  f2              3   38[COMRAM] float 
  8078 ;; Auto vars:     Size  Location     Type
  8079 ;;  quot            4   44[COMRAM] unsigned long 
  8080 ;;  exp1            1   49[COMRAM] unsigned char 
  8081 ;;  cntr            1   48[COMRAM] unsigned char 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  4   35[COMRAM] unsigned long 
  8084 ;; Registers used:
  8085 ;;		wreg, status,2, status,0
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8091 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8092 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8093 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8094 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8095 ;;Total ram usage:       15 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    3
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_printf
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           	psect	text32
  8106  001B52                     __ptext32:
  8107                           	opt stack 0
  8108  001B52                     __tdiv_to_l_:
  8109                           	opt stack 25
  8110                           
  8111                           ;incstack = 0
  8112  001B52  C026  F02A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8113  001B56  6A2B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8114  001B58  6A2C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8115  001B5A  3425               	rlcf	__tdiv_to_l_@f1+1,w,c
  8116  001B5C  362A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8117  001B5E  E301               	bnc	u4871
  8118  001B60  802B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8119  001B62                     u4871:
  8120  001B62  502A               	movf	??__tdiv_to_l_,w,c
  8121  001B64  6E32               	movwf	__tdiv_to_l_@exp1,c
  8122  001B66  5032               	movf	__tdiv_to_l_@exp1,w,c
  8123  001B68  A4D8               	btfss	status,2,c
  8124  001B6A  D009               	goto	l5280
  8125  001B6C  0E00               	movlw	0
  8126  001B6E  6E24               	movwf	?__tdiv_to_l_,c
  8127  001B70  0E00               	movlw	0
  8128  001B72  6E25               	movwf	?__tdiv_to_l_+1,c
  8129  001B74  0E00               	movlw	0
  8130  001B76  6E26               	movwf	?__tdiv_to_l_+2,c
  8131  001B78  0E00               	movlw	0
  8132  001B7A  6E27               	movwf	?__tdiv_to_l_+3,c
  8133  001B7C  0012               	return	
  8134  001B7E                     l5280:
  8135  001B7E  C029  F02A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8136  001B82  6A2B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8137  001B84  6A2C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8138  001B86  3428               	rlcf	__tdiv_to_l_@f2+1,w,c
  8139  001B88  362A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8140  001B8A  E301               	bnc	u4891
  8141  001B8C  802B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8142  001B8E                     u4891:
  8143  001B8E  502A               	movf	??__tdiv_to_l_,w,c
  8144  001B90  6E31               	movwf	__tdiv_to_l_@cntr,c
  8145  001B92  5031               	movf	__tdiv_to_l_@cntr,w,c
  8146  001B94  A4D8               	btfss	status,2,c
  8147  001B96  D009               	goto	l5286
  8148  001B98  0E00               	movlw	0
  8149  001B9A  6E24               	movwf	?__tdiv_to_l_,c
  8150  001B9C  0E00               	movlw	0
  8151  001B9E  6E25               	movwf	?__tdiv_to_l_+1,c
  8152  001BA0  0E00               	movlw	0
  8153  001BA2  6E26               	movwf	?__tdiv_to_l_+2,c
  8154  001BA4  0E00               	movlw	0
  8155  001BA6  6E27               	movwf	?__tdiv_to_l_+3,c
  8156  001BA8  0012               	return	
  8157  001BAA                     l5286:
  8158  001BAA  8E25               	bsf	__tdiv_to_l_@f1+1,7,c
  8159  001BAC  0EFF               	movlw	255
  8160  001BAE  1624               	andwf	__tdiv_to_l_@f1,f,c
  8161  001BB0  0EFF               	movlw	255
  8162  001BB2  1625               	andwf	__tdiv_to_l_@f1+1,f,c
  8163  001BB4  0E00               	movlw	0
  8164  001BB6  1626               	andwf	__tdiv_to_l_@f1+2,f,c
  8165  001BB8  8E28               	bsf	__tdiv_to_l_@f2+1,7,c
  8166  001BBA  0EFF               	movlw	255
  8167  001BBC  1627               	andwf	__tdiv_to_l_@f2,f,c
  8168  001BBE  0EFF               	movlw	255
  8169  001BC0  1628               	andwf	__tdiv_to_l_@f2+1,f,c
  8170  001BC2  0E00               	movlw	0
  8171  001BC4  1629               	andwf	__tdiv_to_l_@f2+2,f,c
  8172  001BC6  0E00               	movlw	0
  8173  001BC8  6E2D               	movwf	__tdiv_to_l_@quot,c
  8174  001BCA  0E00               	movlw	0
  8175  001BCC  6E2E               	movwf	__tdiv_to_l_@quot+1,c
  8176  001BCE  0E00               	movlw	0
  8177  001BD0  6E2F               	movwf	__tdiv_to_l_@quot+2,c
  8178  001BD2  0E00               	movlw	0
  8179  001BD4  6E30               	movwf	__tdiv_to_l_@quot+3,c
  8180  001BD6  0E7F               	movlw	127
  8181  001BD8  5E32               	subwf	__tdiv_to_l_@exp1,f,c
  8182  001BDA  5031               	movf	__tdiv_to_l_@cntr,w,c
  8183  001BDC  0F98               	addlw	152
  8184  001BDE  5E32               	subwf	__tdiv_to_l_@exp1,f,c
  8185  001BE0  0E18               	movlw	24
  8186  001BE2  6E31               	movwf	__tdiv_to_l_@cntr,c
  8187  001BE4                     l1039:
  8188  001BE4  90D8               	bcf	status,0,c
  8189  001BE6  362D               	rlcf	__tdiv_to_l_@quot,f,c
  8190  001BE8  362E               	rlcf	__tdiv_to_l_@quot+1,f,c
  8191  001BEA  362F               	rlcf	__tdiv_to_l_@quot+2,f,c
  8192  001BEC  3630               	rlcf	__tdiv_to_l_@quot+3,f,c
  8193  001BEE  5027               	movf	__tdiv_to_l_@f2,w,c
  8194  001BF0  5C24               	subwf	__tdiv_to_l_@f1,w,c
  8195  001BF2  5028               	movf	__tdiv_to_l_@f2+1,w,c
  8196  001BF4  5825               	subwfb	__tdiv_to_l_@f1+1,w,c
  8197  001BF6  5029               	movf	__tdiv_to_l_@f2+2,w,c
  8198  001BF8  5826               	subwfb	__tdiv_to_l_@f1+2,w,c
  8199  001BFA  A0D8               	btfss	status,0,c
  8200  001BFC  D007               	goto	l1040
  8201  001BFE  5027               	movf	__tdiv_to_l_@f2,w,c
  8202  001C00  5E24               	subwf	__tdiv_to_l_@f1,f,c
  8203  001C02  5028               	movf	__tdiv_to_l_@f2+1,w,c
  8204  001C04  5A25               	subwfb	__tdiv_to_l_@f1+1,f,c
  8205  001C06  5029               	movf	__tdiv_to_l_@f2+2,w,c
  8206  001C08  5A26               	subwfb	__tdiv_to_l_@f1+2,f,c
  8207  001C0A  802D               	bsf	__tdiv_to_l_@quot,0,c
  8208  001C0C                     l1040:
  8209  001C0C  90D8               	bcf	status,0,c
  8210  001C0E  3624               	rlcf	__tdiv_to_l_@f1,f,c
  8211  001C10  3625               	rlcf	__tdiv_to_l_@f1+1,f,c
  8212  001C12  3626               	rlcf	__tdiv_to_l_@f1+2,f,c
  8213  001C14  2E31               	decfsz	__tdiv_to_l_@cntr,f,c
  8214  001C16  D7E6               	goto	l1039
  8215  001C18  AE32               	btfss	__tdiv_to_l_@exp1,7,c
  8216  001C1A  D016               	goto	l5320
  8217  001C1C  5032               	movf	__tdiv_to_l_@exp1,w,c
  8218  001C1E  0A80               	xorlw	128
  8219  001C20  0F97               	addlw	151
  8220  001C22  B0D8               	btfsc	status,0,c
  8221  001C24  D009               	goto	l5316
  8222  001C26  0E00               	movlw	0
  8223  001C28  6E24               	movwf	?__tdiv_to_l_,c
  8224  001C2A  0E00               	movlw	0
  8225  001C2C  6E25               	movwf	?__tdiv_to_l_+1,c
  8226  001C2E  0E00               	movlw	0
  8227  001C30  6E26               	movwf	?__tdiv_to_l_+2,c
  8228  001C32  0E00               	movlw	0
  8229  001C34  6E27               	movwf	?__tdiv_to_l_+3,c
  8230  001C36  0012               	return	
  8231  001C38                     l5316:
  8232  001C38  90D8               	bcf	status,0,c
  8233  001C3A  3230               	rrcf	__tdiv_to_l_@quot+3,f,c
  8234  001C3C  322F               	rrcf	__tdiv_to_l_@quot+2,f,c
  8235  001C3E  322E               	rrcf	__tdiv_to_l_@quot+1,f,c
  8236  001C40  322D               	rrcf	__tdiv_to_l_@quot,f,c
  8237  001C42  3E32               	incfsz	__tdiv_to_l_@exp1,f,c
  8238  001C44  D7F9               	goto	l5316
  8239  001C46  D015               	goto	l1046
  8240  001C48                     l5320:
  8241  001C48  0E17               	movlw	23
  8242  001C4A  6432               	cpfsgt	__tdiv_to_l_@exp1,c
  8243  001C4C  D00F               	goto	l5328
  8244  001C4E  0E00               	movlw	0
  8245  001C50  6E24               	movwf	?__tdiv_to_l_,c
  8246  001C52  0E00               	movlw	0
  8247  001C54  6E25               	movwf	?__tdiv_to_l_+1,c
  8248  001C56  0E00               	movlw	0
  8249  001C58  6E26               	movwf	?__tdiv_to_l_+2,c
  8250  001C5A  0E00               	movlw	0
  8251  001C5C  6E27               	movwf	?__tdiv_to_l_+3,c
  8252  001C5E  0012               	return	
  8253  001C60                     l5326:
  8254  001C60  90D8               	bcf	status,0,c
  8255  001C62  362D               	rlcf	__tdiv_to_l_@quot,f,c
  8256  001C64  362E               	rlcf	__tdiv_to_l_@quot+1,f,c
  8257  001C66  362F               	rlcf	__tdiv_to_l_@quot+2,f,c
  8258  001C68  3630               	rlcf	__tdiv_to_l_@quot+3,f,c
  8259  001C6A  0632               	decf	__tdiv_to_l_@exp1,f,c
  8260  001C6C                     l5328:
  8261  001C6C  5032               	movf	__tdiv_to_l_@exp1,w,c
  8262  001C6E  A4D8               	btfss	status,2,c
  8263  001C70  D7F7               	goto	l5326
  8264  001C72                     l1046:
  8265  001C72  C02D  F024         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8266  001C76  C02E  F025         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8267  001C7A  C02F  F026         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8268  001C7E  C030  F027         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8269  001C82  0012               	return		;funcret
  8270  001C84                     __end_of__tdiv_to_l_:
  8271                           	opt stack 0
  8272                           tblptru	equ	0xFF8
  8273                           tblptrh	equ	0xFF7
  8274                           tblptrl	equ	0xFF6
  8275                           tablat	equ	0xFF5
  8276                           prodh	equ	0xFF4
  8277                           prodl	equ	0xFF3
  8278                           intcon	equ	0xFF2
  8279                           postinc0	equ	0xFEE
  8280                           wreg	equ	0xFE8
  8281                           postdec1	equ	0xFE5
  8282                           plusw1	equ	0xFE3
  8283                           fsr1l	equ	0xFE1
  8284                           indf2	equ	0xFDF
  8285                           postinc2	equ	0xFDE
  8286                           postdec2	equ	0xFDD
  8287                           plusw2	equ	0xFDB
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function __div_to_l_ *****************
  8293 ;; Defined at:
  8294 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  f1              3   35[COMRAM] unsigned long 
  8297 ;;  f2              3   38[COMRAM] unsigned long 
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;  quot            4   41[COMRAM] unsigned long 
  8300 ;;  exp1            1   46[COMRAM] unsigned char 
  8301 ;;  cntr            1   45[COMRAM] unsigned char 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  4   35[COMRAM] unsigned long 
  8304 ;; Registers used:
  8305 ;;		wreg, status,2, status,0
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8311 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8314 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8315 ;;Total ram usage:       12 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    3
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_printf
  8322 ;; This function uses a non-reentrant model
  8323 ;;
  8324                           
  8325                           	psect	text33
  8326  001C84                     __ptext33:
  8327                           	opt stack 0
  8328  001C84                     __div_to_l_:
  8329                           	opt stack 25
  8330                           
  8331                           ;incstack = 0
  8332  001C84  3426               	rlcf	__div_to_l_@f1+2,w,c
  8333  001C86  3427               	rlcf	__div_to_l_@f1+3,w,c
  8334  001C88  6E2F               	movwf	__div_to_l_@exp1,c
  8335  001C8A  502F               	movf	__div_to_l_@exp1,w,c
  8336  001C8C  A4D8               	btfss	status,2,c
  8337  001C8E  D009               	goto	l5336
  8338  001C90  0E00               	movlw	0
  8339  001C92  6E24               	movwf	?__div_to_l_,c
  8340  001C94  0E00               	movlw	0
  8341  001C96  6E25               	movwf	?__div_to_l_+1,c
  8342  001C98  0E00               	movlw	0
  8343  001C9A  6E26               	movwf	?__div_to_l_+2,c
  8344  001C9C  0E00               	movlw	0
  8345  001C9E  6E27               	movwf	?__div_to_l_+3,c
  8346  001CA0  0012               	return	
  8347  001CA2                     l5336:
  8348  001CA2  3429               	rlcf	__div_to_l_@f2+2,w,c
  8349  001CA4  342A               	rlcf	__div_to_l_@f2+3,w,c
  8350  001CA6  6E2E               	movwf	__div_to_l_@cntr,c
  8351  001CA8  502E               	movf	__div_to_l_@cntr,w,c
  8352  001CAA  A4D8               	btfss	status,2,c
  8353  001CAC  D009               	goto	l5342
  8354  001CAE  0E00               	movlw	0
  8355  001CB0  6E24               	movwf	?__div_to_l_,c
  8356  001CB2  0E00               	movlw	0
  8357  001CB4  6E25               	movwf	?__div_to_l_+1,c
  8358  001CB6  0E00               	movlw	0
  8359  001CB8  6E26               	movwf	?__div_to_l_+2,c
  8360  001CBA  0E00               	movlw	0
  8361  001CBC  6E27               	movwf	?__div_to_l_+3,c
  8362  001CBE  0012               	return	
  8363  001CC0                     l5342:
  8364  001CC0  8E26               	bsf	__div_to_l_@f1+2,7,c
  8365  001CC2  0EFF               	movlw	255
  8366  001CC4  1624               	andwf	__div_to_l_@f1,f,c
  8367  001CC6  0EFF               	movlw	255
  8368  001CC8  1625               	andwf	__div_to_l_@f1+1,f,c
  8369  001CCA  0EFF               	movlw	255
  8370  001CCC  1626               	andwf	__div_to_l_@f1+2,f,c
  8371  001CCE  0E00               	movlw	0
  8372  001CD0  1627               	andwf	__div_to_l_@f1+3,f,c
  8373  001CD2  8E29               	bsf	__div_to_l_@f2+2,7,c
  8374  001CD4  0EFF               	movlw	255
  8375  001CD6  1627               	andwf	__div_to_l_@f2,f,c
  8376  001CD8  0EFF               	movlw	255
  8377  001CDA  1628               	andwf	__div_to_l_@f2+1,f,c
  8378  001CDC  0EFF               	movlw	255
  8379  001CDE  1629               	andwf	__div_to_l_@f2+2,f,c
  8380  001CE0  0E00               	movlw	0
  8381  001CE2  162A               	andwf	__div_to_l_@f2+3,f,c
  8382  001CE4  0E00               	movlw	0
  8383  001CE6  6E2A               	movwf	__div_to_l_@quot,c
  8384  001CE8  0E00               	movlw	0
  8385  001CEA  6E2B               	movwf	__div_to_l_@quot+1,c
  8386  001CEC  0E00               	movlw	0
  8387  001CEE  6E2C               	movwf	__div_to_l_@quot+2,c
  8388  001CF0  0E00               	movlw	0
  8389  001CF2  6E2D               	movwf	__div_to_l_@quot+3,c
  8390  001CF4  0E7F               	movlw	127
  8391  001CF6  5E2F               	subwf	__div_to_l_@exp1,f,c
  8392  001CF8  502E               	movf	__div_to_l_@cntr,w,c
  8393  001CFA  0FA0               	addlw	160
  8394  001CFC  5E2F               	subwf	__div_to_l_@exp1,f,c
  8395  001CFE  0E20               	movlw	32
  8396  001D00  6E2E               	movwf	__div_to_l_@cntr,c
  8397  001D02                     l5356:
  8398  001D02  90D8               	bcf	status,0,c
  8399  001D04  362A               	rlcf	__div_to_l_@quot,f,c
  8400  001D06  362B               	rlcf	__div_to_l_@quot+1,f,c
  8401  001D08  362C               	rlcf	__div_to_l_@quot+2,f,c
  8402  001D0A  362D               	rlcf	__div_to_l_@quot+3,f,c
  8403  001D0C  5027               	movf	__div_to_l_@f2,w,c
  8404  001D0E  5C24               	subwf	__div_to_l_@f1,w,c
  8405  001D10  5028               	movf	__div_to_l_@f2+1,w,c
  8406  001D12  5825               	subwfb	__div_to_l_@f1+1,w,c
  8407  001D14  5029               	movf	__div_to_l_@f2+2,w,c
  8408  001D16  5826               	subwfb	__div_to_l_@f1+2,w,c
  8409  001D18  502A               	movf	__div_to_l_@f2+3,w,c
  8410  001D1A  5827               	subwfb	__div_to_l_@f1+3,w,c
  8411  001D1C  A0D8               	btfss	status,0,c
  8412  001D1E  D009               	goto	l5364
  8413  001D20  5027               	movf	__div_to_l_@f2,w,c
  8414  001D22  5E24               	subwf	__div_to_l_@f1,f,c
  8415  001D24  5028               	movf	__div_to_l_@f2+1,w,c
  8416  001D26  5A25               	subwfb	__div_to_l_@f1+1,f,c
  8417  001D28  5029               	movf	__div_to_l_@f2+2,w,c
  8418  001D2A  5A26               	subwfb	__div_to_l_@f1+2,f,c
  8419  001D2C  502A               	movf	__div_to_l_@f2+3,w,c
  8420  001D2E  5A27               	subwfb	__div_to_l_@f1+3,f,c
  8421  001D30  802A               	bsf	__div_to_l_@quot,0,c
  8422  001D32                     l5364:
  8423  001D32  90D8               	bcf	status,0,c
  8424  001D34  3624               	rlcf	__div_to_l_@f1,f,c
  8425  001D36  3625               	rlcf	__div_to_l_@f1+1,f,c
  8426  001D38  3626               	rlcf	__div_to_l_@f1+2,f,c
  8427  001D3A  3627               	rlcf	__div_to_l_@f1+3,f,c
  8428  001D3C  2E2E               	decfsz	__div_to_l_@cntr,f,c
  8429  001D3E  D7E1               	goto	l5356
  8430  001D40  AE2F               	btfss	__div_to_l_@exp1,7,c
  8431  001D42  D016               	goto	l5380
  8432  001D44  502F               	movf	__div_to_l_@exp1,w,c
  8433  001D46  0A80               	xorlw	128
  8434  001D48  0F9F               	addlw	159
  8435  001D4A  B0D8               	btfsc	status,0,c
  8436  001D4C  D009               	goto	l5376
  8437  001D4E  0E00               	movlw	0
  8438  001D50  6E24               	movwf	?__div_to_l_,c
  8439  001D52  0E00               	movlw	0
  8440  001D54  6E25               	movwf	?__div_to_l_+1,c
  8441  001D56  0E00               	movlw	0
  8442  001D58  6E26               	movwf	?__div_to_l_+2,c
  8443  001D5A  0E00               	movlw	0
  8444  001D5C  6E27               	movwf	?__div_to_l_+3,c
  8445  001D5E  0012               	return	
  8446  001D60                     l5376:
  8447  001D60  90D8               	bcf	status,0,c
  8448  001D62  322D               	rrcf	__div_to_l_@quot+3,f,c
  8449  001D64  322C               	rrcf	__div_to_l_@quot+2,f,c
  8450  001D66  322B               	rrcf	__div_to_l_@quot+1,f,c
  8451  001D68  322A               	rrcf	__div_to_l_@quot,f,c
  8452  001D6A  3E2F               	incfsz	__div_to_l_@exp1,f,c
  8453  001D6C  D7F9               	goto	l5376
  8454  001D6E  D015               	goto	l942
  8455  001D70                     l5380:
  8456  001D70  0E1F               	movlw	31
  8457  001D72  642F               	cpfsgt	__div_to_l_@exp1,c
  8458  001D74  D00F               	goto	l5388
  8459  001D76  0E00               	movlw	0
  8460  001D78  6E24               	movwf	?__div_to_l_,c
  8461  001D7A  0E00               	movlw	0
  8462  001D7C  6E25               	movwf	?__div_to_l_+1,c
  8463  001D7E  0E00               	movlw	0
  8464  001D80  6E26               	movwf	?__div_to_l_+2,c
  8465  001D82  0E00               	movlw	0
  8466  001D84  6E27               	movwf	?__div_to_l_+3,c
  8467  001D86  0012               	return	
  8468  001D88                     l5386:
  8469  001D88  90D8               	bcf	status,0,c
  8470  001D8A  362A               	rlcf	__div_to_l_@quot,f,c
  8471  001D8C  362B               	rlcf	__div_to_l_@quot+1,f,c
  8472  001D8E  362C               	rlcf	__div_to_l_@quot+2,f,c
  8473  001D90  362D               	rlcf	__div_to_l_@quot+3,f,c
  8474  001D92  062F               	decf	__div_to_l_@exp1,f,c
  8475  001D94                     l5388:
  8476  001D94  502F               	movf	__div_to_l_@exp1,w,c
  8477  001D96  A4D8               	btfss	status,2,c
  8478  001D98  D7F7               	goto	l5386
  8479  001D9A                     l942:
  8480  001D9A  C02A  F024         	movff	__div_to_l_@quot,?__div_to_l_
  8481  001D9E  C02B  F025         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8482  001DA2  C02C  F026         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8483  001DA6  C02D  F027         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8484  001DAA  0012               	return		;funcret
  8485  001DAC                     __end_of__div_to_l_:
  8486                           	opt stack 0
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           intcon	equ	0xFF2
  8494                           postinc0	equ	0xFEE
  8495                           wreg	equ	0xFE8
  8496                           postdec1	equ	0xFE5
  8497                           plusw1	equ	0xFE3
  8498                           fsr1l	equ	0xFE1
  8499                           indf2	equ	0xFDF
  8500                           postinc2	equ	0xFDE
  8501                           postdec2	equ	0xFDD
  8502                           plusw2	equ	0xFDB
  8503                           fsr2h	equ	0xFDA
  8504                           fsr2l	equ	0xFD9
  8505                           status	equ	0xFD8
  8506                           
  8507 ;; *************** function ___lltoft *****************
  8508 ;; Defined at:
  8509 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  c               4   43[COMRAM] unsigned long 
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  exp             1   51[COMRAM] unsigned char 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  3   43[COMRAM] float 
  8516 ;; Registers used:
  8517 ;;		wreg, status,2, status,0, cstack
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8523 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;Total ram usage:        9 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    4
  8530 ;; This function calls:
  8531 ;;		___ftpack
  8532 ;; This function is called by:
  8533 ;;		_printf
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           	psect	text34
  8538  002938                     __ptext34:
  8539                           	opt stack 0
  8540  002938                     ___lltoft:
  8541                           	opt stack 24
  8542                           
  8543                           ;incstack = 0
  8544  002938  0E8E               	movlw	142
  8545  00293A  6E34               	movwf	___lltoft@exp,c
  8546  00293C  D006               	goto	l5462
  8547  00293E                     l5460:
  8548  00293E  90D8               	bcf	status,0,c
  8549  002940  322F               	rrcf	___lltoft@c+3,f,c
  8550  002942  322E               	rrcf	___lltoft@c+2,f,c
  8551  002944  322D               	rrcf	___lltoft@c+1,f,c
  8552  002946  322C               	rrcf	___lltoft@c,f,c
  8553  002948  2A34               	incf	___lltoft@exp,f,c
  8554  00294A                     l5462:
  8555  00294A  0E00               	movlw	0
  8556  00294C  142C               	andwf	___lltoft@c,w,c
  8557  00294E  6E30               	movwf	??___lltoft& (0+255),c
  8558  002950  0E00               	movlw	0
  8559  002952  142D               	andwf	___lltoft@c+1,w,c
  8560  002954  6E31               	movwf	(??___lltoft+1)& (0+255),c
  8561  002956  0E00               	movlw	0
  8562  002958  142E               	andwf	___lltoft@c+2,w,c
  8563  00295A  6E32               	movwf	(??___lltoft+2)& (0+255),c
  8564  00295C  0EFF               	movlw	255
  8565  00295E  142F               	andwf	___lltoft@c+3,w,c
  8566  002960  6E33               	movwf	(??___lltoft+3)& (0+255),c
  8567  002962  5030               	movf	??___lltoft,w,c
  8568  002964  1031               	iorwf	??___lltoft+1,w,c
  8569  002966  1032               	iorwf	??___lltoft+2,w,c
  8570  002968  1033               	iorwf	??___lltoft+3,w,c
  8571  00296A  A4D8               	btfss	status,2,c
  8572  00296C  D7E8               	goto	l5460
  8573  00296E  C02C  F024         	movff	___lltoft@c,___ftpack@arg
  8574  002972  C02D  F025         	movff	___lltoft@c+1,___ftpack@arg+1
  8575  002976  C02E  F026         	movff	___lltoft@c+2,___ftpack@arg+2
  8576  00297A  C034  F027         	movff	___lltoft@exp,___ftpack@exp
  8577  00297E  0E00               	movlw	0
  8578  002980  6E28               	movwf	___ftpack@sign,c
  8579  002982  EC78  F011         	call	___ftpack	;wreg free
  8580  002986  C024  F02C         	movff	?___ftpack,?___lltoft
  8581  00298A  C025  F02D         	movff	?___ftpack+1,?___lltoft+1
  8582  00298E  C026  F02E         	movff	?___ftpack+2,?___lltoft+2
  8583  002992  0012               	return	
  8584  002994                     __end_of___lltoft:
  8585                           	opt stack 0
  8586                           tblptru	equ	0xFF8
  8587                           tblptrh	equ	0xFF7
  8588                           tblptrl	equ	0xFF6
  8589                           tablat	equ	0xFF5
  8590                           prodh	equ	0xFF4
  8591                           prodl	equ	0xFF3
  8592                           intcon	equ	0xFF2
  8593                           postinc0	equ	0xFEE
  8594                           wreg	equ	0xFE8
  8595                           postdec1	equ	0xFE5
  8596                           plusw1	equ	0xFE3
  8597                           fsr1l	equ	0xFE1
  8598                           indf2	equ	0xFDF
  8599                           postinc2	equ	0xFDE
  8600                           postdec2	equ	0xFDD
  8601                           plusw2	equ	0xFDB
  8602                           fsr2h	equ	0xFDA
  8603                           fsr2l	equ	0xFD9
  8604                           status	equ	0xFD8
  8605                           
  8606 ;; *************** function ___llmod *****************
  8607 ;; Defined at:
  8608 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8609 ;; Parameters:    Size  Location     Type
  8610 ;;  dividend        4   48[COMRAM] unsigned long 
  8611 ;;  divisor         4   52[COMRAM] unsigned long 
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;  counter         1   56[COMRAM] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  4   48[COMRAM] unsigned long 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8623 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;Total ram usage:        9 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    3
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_printf
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text35
  8638  00286C                     __ptext35:
  8639                           	opt stack 0
  8640  00286C                     ___llmod:
  8641                           	opt stack 25
  8642                           
  8643                           ;incstack = 0
  8644  00286C  5035               	movf	___llmod@divisor,w,c
  8645  00286E  1036               	iorwf	___llmod@divisor+1,w,c
  8646  002870  1037               	iorwf	___llmod@divisor+2,w,c
  8647  002872  1038               	iorwf	___llmod@divisor+3,w,c
  8648  002874  B4D8               	btfsc	status,2,c
  8649  002876  D024               	goto	l1126
  8650  002878  0E01               	movlw	1
  8651  00287A  6E39               	movwf	___llmod@counter,c
  8652  00287C  D006               	goto	l5448
  8653  00287E                     l5446:
  8654  00287E  90D8               	bcf	status,0,c
  8655  002880  3635               	rlcf	___llmod@divisor,f,c
  8656  002882  3636               	rlcf	___llmod@divisor+1,f,c
  8657  002884  3637               	rlcf	___llmod@divisor+2,f,c
  8658  002886  3638               	rlcf	___llmod@divisor+3,f,c
  8659  002888  2A39               	incf	___llmod@counter,f,c
  8660  00288A                     l5448:
  8661  00288A  AE38               	btfss	___llmod@divisor+3,7,c
  8662  00288C  D7F8               	goto	l5446
  8663  00288E                     l5450:
  8664  00288E  5035               	movf	___llmod@divisor,w,c
  8665  002890  5C31               	subwf	___llmod@dividend,w,c
  8666  002892  5036               	movf	___llmod@divisor+1,w,c
  8667  002894  5832               	subwfb	___llmod@dividend+1,w,c
  8668  002896  5037               	movf	___llmod@divisor+2,w,c
  8669  002898  5833               	subwfb	___llmod@dividend+2,w,c
  8670  00289A  5038               	movf	___llmod@divisor+3,w,c
  8671  00289C  5834               	subwfb	___llmod@dividend+3,w,c
  8672  00289E  A0D8               	btfss	status,0,c
  8673  0028A0  D008               	goto	l5454
  8674  0028A2  5035               	movf	___llmod@divisor,w,c
  8675  0028A4  5E31               	subwf	___llmod@dividend,f,c
  8676  0028A6  5036               	movf	___llmod@divisor+1,w,c
  8677  0028A8  5A32               	subwfb	___llmod@dividend+1,f,c
  8678  0028AA  5037               	movf	___llmod@divisor+2,w,c
  8679  0028AC  5A33               	subwfb	___llmod@dividend+2,f,c
  8680  0028AE  5038               	movf	___llmod@divisor+3,w,c
  8681  0028B0  5A34               	subwfb	___llmod@dividend+3,f,c
  8682  0028B2                     l5454:
  8683  0028B2  90D8               	bcf	status,0,c
  8684  0028B4  3238               	rrcf	___llmod@divisor+3,f,c
  8685  0028B6  3237               	rrcf	___llmod@divisor+2,f,c
  8686  0028B8  3236               	rrcf	___llmod@divisor+1,f,c
  8687  0028BA  3235               	rrcf	___llmod@divisor,f,c
  8688  0028BC  2E39               	decfsz	___llmod@counter,f,c
  8689  0028BE  D7E7               	goto	l5450
  8690  0028C0                     l1126:
  8691  0028C0  C031  F031         	movff	___llmod@dividend,?___llmod
  8692  0028C4  C032  F032         	movff	___llmod@dividend+1,?___llmod+1
  8693  0028C8  C033  F033         	movff	___llmod@dividend+2,?___llmod+2
  8694  0028CC  C034  F034         	movff	___llmod@dividend+3,?___llmod+3
  8695  0028D0  0012               	return		;funcret
  8696  0028D2                     __end_of___llmod:
  8697                           	opt stack 0
  8698                           tblptru	equ	0xFF8
  8699                           tblptrh	equ	0xFF7
  8700                           tblptrl	equ	0xFF6
  8701                           tablat	equ	0xFF5
  8702                           prodh	equ	0xFF4
  8703                           prodl	equ	0xFF3
  8704                           intcon	equ	0xFF2
  8705                           postinc0	equ	0xFEE
  8706                           wreg	equ	0xFE8
  8707                           postdec1	equ	0xFE5
  8708                           plusw1	equ	0xFE3
  8709                           fsr1l	equ	0xFE1
  8710                           indf2	equ	0xFDF
  8711                           postinc2	equ	0xFDE
  8712                           postdec2	equ	0xFDD
  8713                           plusw2	equ	0xFDB
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function ___lldiv *****************
  8719 ;; Defined at:
  8720 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  dividend        4   35[COMRAM] unsigned long 
  8723 ;;  divisor         4   39[COMRAM] unsigned long 
  8724 ;; Auto vars:     Size  Location     Type
  8725 ;;  quotient        4   43[COMRAM] unsigned long 
  8726 ;;  counter         1   47[COMRAM] unsigned char 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  4   35[COMRAM] unsigned long 
  8729 ;; Registers used:
  8730 ;;		wreg, status,2, status,0
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8736 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8739 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8740 ;;Total ram usage:       13 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    3
  8743 ;; This function calls:
  8744 ;;		Nothing
  8745 ;; This function is called by:
  8746 ;;		_printf
  8747 ;;		_I2C_Master_Init
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           	psect	text36
  8752  002702                     __ptext36:
  8753                           	opt stack 0
  8754  002702                     ___lldiv:
  8755                           	opt stack 25
  8756                           
  8757                           ;incstack = 0
  8758  002702  0E00               	movlw	0
  8759  002704  6E2C               	movwf	___lldiv@quotient,c
  8760  002706  0E00               	movlw	0
  8761  002708  6E2D               	movwf	___lldiv@quotient+1,c
  8762  00270A  0E00               	movlw	0
  8763  00270C  6E2E               	movwf	___lldiv@quotient+2,c
  8764  00270E  0E00               	movlw	0
  8765  002710  6E2F               	movwf	___lldiv@quotient+3,c
  8766  002712  5028               	movf	___lldiv@divisor,w,c
  8767  002714  1029               	iorwf	___lldiv@divisor+1,w,c
  8768  002716  102A               	iorwf	___lldiv@divisor+2,w,c
  8769  002718  102B               	iorwf	___lldiv@divisor+3,w,c
  8770  00271A  B4D8               	btfsc	status,2,c
  8771  00271C  D02A               	goto	l1116
  8772  00271E  0E01               	movlw	1
  8773  002720  6E30               	movwf	___lldiv@counter,c
  8774  002722  D006               	goto	l5428
  8775  002724                     l5426:
  8776  002724  90D8               	bcf	status,0,c
  8777  002726  3628               	rlcf	___lldiv@divisor,f,c
  8778  002728  3629               	rlcf	___lldiv@divisor+1,f,c
  8779  00272A  362A               	rlcf	___lldiv@divisor+2,f,c
  8780  00272C  362B               	rlcf	___lldiv@divisor+3,f,c
  8781  00272E  2A30               	incf	___lldiv@counter,f,c
  8782  002730                     l5428:
  8783  002730  AE2B               	btfss	___lldiv@divisor+3,7,c
  8784  002732  D7F8               	goto	l5426
  8785  002734                     l5430:
  8786  002734  90D8               	bcf	status,0,c
  8787  002736  362C               	rlcf	___lldiv@quotient,f,c
  8788  002738  362D               	rlcf	___lldiv@quotient+1,f,c
  8789  00273A  362E               	rlcf	___lldiv@quotient+2,f,c
  8790  00273C  362F               	rlcf	___lldiv@quotient+3,f,c
  8791  00273E  5028               	movf	___lldiv@divisor,w,c
  8792  002740  5C24               	subwf	___lldiv@dividend,w,c
  8793  002742  5029               	movf	___lldiv@divisor+1,w,c
  8794  002744  5825               	subwfb	___lldiv@dividend+1,w,c
  8795  002746  502A               	movf	___lldiv@divisor+2,w,c
  8796  002748  5826               	subwfb	___lldiv@dividend+2,w,c
  8797  00274A  502B               	movf	___lldiv@divisor+3,w,c
  8798  00274C  5827               	subwfb	___lldiv@dividend+3,w,c
  8799  00274E  A0D8               	btfss	status,0,c
  8800  002750  D009               	goto	l5438
  8801  002752  5028               	movf	___lldiv@divisor,w,c
  8802  002754  5E24               	subwf	___lldiv@dividend,f,c
  8803  002756  5029               	movf	___lldiv@divisor+1,w,c
  8804  002758  5A25               	subwfb	___lldiv@dividend+1,f,c
  8805  00275A  502A               	movf	___lldiv@divisor+2,w,c
  8806  00275C  5A26               	subwfb	___lldiv@dividend+2,f,c
  8807  00275E  502B               	movf	___lldiv@divisor+3,w,c
  8808  002760  5A27               	subwfb	___lldiv@dividend+3,f,c
  8809  002762  802C               	bsf	___lldiv@quotient,0,c
  8810  002764                     l5438:
  8811  002764  90D8               	bcf	status,0,c
  8812  002766  322B               	rrcf	___lldiv@divisor+3,f,c
  8813  002768  322A               	rrcf	___lldiv@divisor+2,f,c
  8814  00276A  3229               	rrcf	___lldiv@divisor+1,f,c
  8815  00276C  3228               	rrcf	___lldiv@divisor,f,c
  8816  00276E  2E30               	decfsz	___lldiv@counter,f,c
  8817  002770  D7E1               	goto	l5430
  8818  002772                     l1116:
  8819  002772  C02C  F024         	movff	___lldiv@quotient,?___lldiv
  8820  002776  C02D  F025         	movff	___lldiv@quotient+1,?___lldiv+1
  8821  00277A  C02E  F026         	movff	___lldiv@quotient+2,?___lldiv+2
  8822  00277E  C02F  F027         	movff	___lldiv@quotient+3,?___lldiv+3
  8823  002782  0012               	return		;funcret
  8824  002784                     __end_of___lldiv:
  8825                           	opt stack 0
  8826                           tblptru	equ	0xFF8
  8827                           tblptrh	equ	0xFF7
  8828                           tblptrl	equ	0xFF6
  8829                           tablat	equ	0xFF5
  8830                           prodh	equ	0xFF4
  8831                           prodl	equ	0xFF3
  8832                           intcon	equ	0xFF2
  8833                           postinc0	equ	0xFEE
  8834                           wreg	equ	0xFE8
  8835                           postdec1	equ	0xFE5
  8836                           plusw1	equ	0xFE3
  8837                           fsr1l	equ	0xFE1
  8838                           indf2	equ	0xFDF
  8839                           postinc2	equ	0xFDE
  8840                           postdec2	equ	0xFDD
  8841                           plusw2	equ	0xFDB
  8842                           fsr2h	equ	0xFDA
  8843                           fsr2l	equ	0xFD9
  8844                           status	equ	0xFD8
  8845                           
  8846 ;; *************** function ___fttol *****************
  8847 ;; Defined at:
  8848 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;  f1              3   49[BANK0 ] float 
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  lval            4   59[BANK0 ] unsigned long 
  8853 ;;  exp1            1   63[BANK0 ] unsigned char 
  8854 ;;  sign1           1   58[BANK0 ] unsigned char 
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  4   49[BANK0 ] long 
  8857 ;; Registers used:
  8858 ;;		wreg, status,2, status,0
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8864 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;Total ram usage:       15 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    3
  8871 ;; This function calls:
  8872 ;;		Nothing
  8873 ;; This function is called by:
  8874 ;;		_angleToPulse
  8875 ;;		_printf
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text37
  8880  0018CE                     __ptext37:
  8881                           	opt stack 0
  8882  0018CE                     ___fttol:
  8883                           	opt stack 24
  8884                           
  8885                           ;incstack = 0
  8886  0018CE  C0B3  F0B5         	movff	___fttol@f1+2,??___fttol
  8887  0018D2  0100               	movlb	0	; () banked
  8888  0018D4  6BB6               	clrf	(??___fttol+1)& (0+255),b
  8889  0018D6  6BB7               	clrf	(??___fttol+2)& (0+255),b
  8890  0018D8  0100               	movlb	0	; () banked
  8891  0018DA  35B2               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8892  0018DC  0100               	movlb	0	; () banked
  8893  0018DE  37B5               	rlcf	??___fttol& (0+255),f,b
  8894  0018E0  E301               	bnc	u4711
  8895  0018E2  81B6               	bsf	(??___fttol+1)& (0+255),0,b
  8896  0018E4                     u4711:
  8897  0018E4  0100               	movlb	0	; () banked
  8898  0018E6  51B5               	movf	??___fttol& (0+255),w,b
  8899  0018E8  0100               	movlb	0	; () banked
  8900  0018EA  6FBF               	movwf	___fttol@exp1& (0+255),b
  8901  0018EC  0100               	movlb	0	; () banked
  8902  0018EE  51BF               	movf	___fttol@exp1& (0+255),w,b
  8903  0018F0  A4D8               	btfss	status,2,c
  8904  0018F2  D00A               	goto	l5158
  8905                           
  8906                           ; BSR set to: 0
  8907  0018F4  0E00               	movlw	0
  8908  0018F6  0100               	movlb	0	; () banked
  8909  0018F8  6FB1               	movwf	?___fttol& (0+255),b
  8910  0018FA  0E00               	movlw	0
  8911  0018FC  6FB2               	movwf	(?___fttol+1)& (0+255),b
  8912  0018FE  0E00               	movlw	0
  8913  001900  6FB3               	movwf	(?___fttol+2)& (0+255),b
  8914  001902  0E00               	movlw	0
  8915  001904  6FB4               	movwf	(?___fttol+3)& (0+255),b
  8916                           
  8917                           ; BSR set to: 0
  8918  001906  0012               	return	
  8919  001908                     l5158:
  8920                           
  8921                           ; BSR set to: 0
  8922  001908  0E17               	movlw	23
  8923  00190A  0100               	movlb	0	; () banked
  8924  00190C  6FB5               	movwf	??___fttol& (0+255),b
  8925  00190E  C0B1  F0B6         	movff	___fttol@f1,??___fttol+1
  8926  001912  C0B2  F0B7         	movff	___fttol@f1+1,??___fttol+2
  8927  001916  C0B3  F0B8         	movff	___fttol@f1+2,??___fttol+3
  8928  00191A  0100               	movlb	0	; () banked
  8929  00191C  29B5               	incf	??___fttol& (0+255),w,b
  8930  00191E  0100               	movlb	0	; () banked
  8931  001920  6FB9               	movwf	(??___fttol+4)& (0+255),b
  8932  001922  D005               	goto	u4730
  8933  001924                     u4735:
  8934  001924  0100               	movlb	0	; () banked
  8935  001926  90D8               	bcf	status,0,c
  8936  001928  33B8               	rrcf	(??___fttol+3)& (0+255),f,b
  8937  00192A  33B7               	rrcf	(??___fttol+2)& (0+255),f,b
  8938  00192C  33B6               	rrcf	(??___fttol+1)& (0+255),f,b
  8939  00192E                     u4730:
  8940  00192E  0100               	movlb	0	; () banked
  8941  001930  2FB9               	decfsz	(??___fttol+4)& (0+255),f,b
  8942  001932  D7F8               	goto	u4735
  8943  001934  0100               	movlb	0	; () banked
  8944  001936  51B6               	movf	(??___fttol+1)& (0+255),w,b
  8945  001938  0100               	movlb	0	; () banked
  8946  00193A  6FBA               	movwf	___fttol@sign1& (0+255),b
  8947                           
  8948                           ; BSR set to: 0
  8949  00193C  0100               	movlb	0	; () banked
  8950  00193E  8FB2               	bsf	(___fttol@f1+1)& (0+255),7,b
  8951                           
  8952                           ; BSR set to: 0
  8953  001940  0EFF               	movlw	255
  8954  001942  0100               	movlb	0	; () banked
  8955  001944  17B1               	andwf	___fttol@f1& (0+255),f,b
  8956  001946  0EFF               	movlw	255
  8957  001948  0100               	movlb	0	; () banked
  8958  00194A  17B2               	andwf	(___fttol@f1+1)& (0+255),f,b
  8959  00194C  0E00               	movlw	0
  8960  00194E  0100               	movlb	0	; () banked
  8961  001950  17B3               	andwf	(___fttol@f1+2)& (0+255),f,b
  8962                           
  8963                           ; BSR set to: 0
  8964  001952  0100               	movlb	0	; () banked
  8965  001954  51B1               	movf	___fttol@f1& (0+255),w,b
  8966  001956  0100               	movlb	0	; () banked
  8967  001958  6FBB               	movwf	___fttol@lval& (0+255),b
  8968  00195A  0100               	movlb	0	; () banked
  8969  00195C  51B2               	movf	(___fttol@f1+1)& (0+255),w,b
  8970  00195E  0100               	movlb	0	; () banked
  8971  001960  6FBC               	movwf	(___fttol@lval+1)& (0+255),b
  8972  001962  0100               	movlb	0	; () banked
  8973  001964  51B3               	movf	(___fttol@f1+2)& (0+255),w,b
  8974  001966  0100               	movlb	0	; () banked
  8975  001968  6FBD               	movwf	(___fttol@lval+2)& (0+255),b
  8976  00196A  0100               	movlb	0	; () banked
  8977  00196C  6BBE               	clrf	(___fttol@lval+3)& (0+255),b
  8978                           
  8979                           ; BSR set to: 0
  8980  00196E  0E8E               	movlw	142
  8981  001970  0100               	movlb	0	; () banked
  8982  001972  5FBF               	subwf	___fttol@exp1& (0+255),f,b
  8983                           
  8984                           ; BSR set to: 0
  8985  001974  0100               	movlb	0	; () banked
  8986  001976  AFBF               	btfss	___fttol@exp1& (0+255),7,b
  8987  001978  D01A               	goto	l5180
  8988                           
  8989                           ; BSR set to: 0
  8990  00197A  0100               	movlb	0	; () banked
  8991  00197C  51BF               	movf	___fttol@exp1& (0+255),w,b
  8992  00197E  0A80               	xorlw	128
  8993  001980  0F8F               	addlw	143
  8994  001982  B0D8               	btfsc	status,0,c
  8995  001984  D00A               	goto	l5176
  8996                           
  8997                           ; BSR set to: 0
  8998  001986  0E00               	movlw	0
  8999  001988  0100               	movlb	0	; () banked
  9000  00198A  6FB1               	movwf	?___fttol& (0+255),b
  9001  00198C  0E00               	movlw	0
  9002  00198E  6FB2               	movwf	(?___fttol+1)& (0+255),b
  9003  001990  0E00               	movlw	0
  9004  001992  6FB3               	movwf	(?___fttol+2)& (0+255),b
  9005  001994  0E00               	movlw	0
  9006  001996  6FB4               	movwf	(?___fttol+3)& (0+255),b
  9007                           
  9008                           ; BSR set to: 0
  9009  001998  0012               	return	
  9010  00199A                     l5176:
  9011                           
  9012                           ; BSR set to: 0
  9013  00199A  0100               	movlb	0	; () banked
  9014  00199C  90D8               	bcf	status,0,c
  9015  00199E  33BE               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9016  0019A0  33BD               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9017  0019A2  33BC               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9018  0019A4  33BB               	rrcf	___fttol@lval& (0+255),f,b
  9019                           
  9020                           ; BSR set to: 0
  9021  0019A6  0100               	movlb	0	; () banked
  9022  0019A8  3FBF               	incfsz	___fttol@exp1& (0+255),f,b
  9023  0019AA  D7F7               	goto	l5176
  9024                           
  9025                           ; BSR set to: 0
  9026  0019AC  D01B               	goto	l5190
  9027  0019AE                     l5180:
  9028                           
  9029                           ; BSR set to: 0
  9030  0019AE  0E17               	movlw	23
  9031  0019B0  0100               	movlb	0	; () banked
  9032  0019B2  65BF               	cpfsgt	___fttol@exp1& (0+255),b
  9033  0019B4  D012               	goto	l5188
  9034                           
  9035                           ; BSR set to: 0
  9036  0019B6  0E00               	movlw	0
  9037  0019B8  0100               	movlb	0	; () banked
  9038  0019BA  6FB1               	movwf	?___fttol& (0+255),b
  9039  0019BC  0E00               	movlw	0
  9040  0019BE  6FB2               	movwf	(?___fttol+1)& (0+255),b
  9041  0019C0  0E00               	movlw	0
  9042  0019C2  6FB3               	movwf	(?___fttol+2)& (0+255),b
  9043  0019C4  0E00               	movlw	0
  9044  0019C6  6FB4               	movwf	(?___fttol+3)& (0+255),b
  9045                           
  9046                           ; BSR set to: 0
  9047  0019C8  0012               	return	
  9048  0019CA                     l5186:
  9049                           
  9050                           ; BSR set to: 0
  9051  0019CA  0100               	movlb	0	; () banked
  9052  0019CC  90D8               	bcf	status,0,c
  9053  0019CE  37BB               	rlcf	___fttol@lval& (0+255),f,b
  9054  0019D0  37BC               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9055  0019D2  37BD               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9056  0019D4  37BE               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9057  0019D6  0100               	movlb	0	; () banked
  9058  0019D8  07BF               	decf	___fttol@exp1& (0+255),f,b
  9059  0019DA                     l5188:
  9060                           
  9061                           ; BSR set to: 0
  9062  0019DA  0100               	movlb	0	; () banked
  9063  0019DC  51BF               	movf	___fttol@exp1& (0+255),w,b
  9064  0019DE  0100               	movlb	0	; () banked
  9065  0019E0  A4D8               	btfss	status,2,c
  9066  0019E2  D7F3               	goto	l5186
  9067  0019E4                     l5190:
  9068                           
  9069                           ; BSR set to: 0
  9070  0019E4  0100               	movlb	0	; () banked
  9071  0019E6  51BA               	movf	___fttol@sign1& (0+255),w,b
  9072  0019E8  0100               	movlb	0	; () banked
  9073  0019EA  B4D8               	btfsc	status,2,c
  9074  0019EC  D009               	goto	l5194
  9075                           
  9076                           ; BSR set to: 0
  9077  0019EE  0100               	movlb	0	; () banked
  9078  0019F0  1FBE               	comf	(___fttol@lval+3)& (0+255),f,b
  9079  0019F2  1FBD               	comf	(___fttol@lval+2)& (0+255),f,b
  9080  0019F4  1FBC               	comf	(___fttol@lval+1)& (0+255),f,b
  9081  0019F6  6DBB               	negf	___fttol@lval& (0+255),b
  9082  0019F8  0E00               	movlw	0
  9083  0019FA  23BC               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9084  0019FC  23BD               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9085  0019FE  23BE               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9086  001A00                     l5194:
  9087                           
  9088                           ; BSR set to: 0
  9089  001A00  C0BB  F0B1         	movff	___fttol@lval,?___fttol
  9090  001A04  C0BC  F0B2         	movff	___fttol@lval+1,?___fttol+1
  9091  001A08  C0BD  F0B3         	movff	___fttol@lval+2,?___fttol+2
  9092  001A0C  C0BE  F0B4         	movff	___fttol@lval+3,?___fttol+3
  9093  001A10  0012               	return	
  9094  001A12                     __end_of___fttol:
  9095                           	opt stack 0
  9096                           tblptru	equ	0xFF8
  9097                           tblptrh	equ	0xFF7
  9098                           tblptrl	equ	0xFF6
  9099                           tablat	equ	0xFF5
  9100                           prodh	equ	0xFF4
  9101                           prodl	equ	0xFF3
  9102                           intcon	equ	0xFF2
  9103                           postinc0	equ	0xFEE
  9104                           wreg	equ	0xFE8
  9105                           postdec1	equ	0xFE5
  9106                           plusw1	equ	0xFE3
  9107                           fsr1l	equ	0xFE1
  9108                           indf2	equ	0xFDF
  9109                           postinc2	equ	0xFDE
  9110                           postdec2	equ	0xFDD
  9111                           plusw2	equ	0xFDB
  9112                           fsr2h	equ	0xFDA
  9113                           fsr2l	equ	0xFD9
  9114                           status	equ	0xFD8
  9115                           
  9116 ;; *************** function ___ftsub *****************
  9117 ;; Defined at:
  9118 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  f1              3   49[BANK0 ] float 
  9121 ;;  f2              3   52[BANK0 ] float 
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;		None
  9124 ;; Return value:  Size  Location     Type
  9125 ;;                  3   49[BANK0 ] float 
  9126 ;; Registers used:
  9127 ;;		wreg, status,2, status,0, cstack
  9128 ;; Tracked objects:
  9129 ;;		On entry : 0/0
  9130 ;;		On exit  : 0/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9133 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9136 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9137 ;;Total ram usage:        6 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    5
  9140 ;; This function calls:
  9141 ;;		___ftadd
  9142 ;; This function is called by:
  9143 ;;		_printf
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           	psect	text38
  9148  0029E0                     __ptext38:
  9149                           	opt stack 0
  9150  0029E0                     ___ftsub:
  9151                           	opt stack 23
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;incstack = 0
  9155  0029E0  0100               	movlb	0	; () banked
  9156  0029E2  51B4               	movf	___ftsub@f2& (0+255),w,b
  9157  0029E4  0100               	movlb	0	; () banked
  9158  0029E6  11B5               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9159  0029E8  0100               	movlb	0	; () banked
  9160  0029EA  11B6               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9161  0029EC  B4D8               	btfsc	status,2,c
  9162  0029EE  D009               	goto	l5394
  9163                           
  9164                           ; BSR set to: 0
  9165  0029F0  0E00               	movlw	0
  9166  0029F2  0100               	movlb	0	; () banked
  9167  0029F4  1BB4               	xorwf	___ftsub@f2& (0+255),f,b
  9168  0029F6  0E00               	movlw	0
  9169  0029F8  0100               	movlb	0	; () banked
  9170  0029FA  1BB5               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9171  0029FC  0E80               	movlw	128
  9172  0029FE  0100               	movlb	0	; () banked
  9173  002A00  1BB6               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9174  002A02                     l5394:
  9175                           
  9176                           ; BSR set to: 0
  9177  002A02  C0B1  F0A5         	movff	___ftsub@f1,___ftadd@f1
  9178  002A06  C0B2  F0A6         	movff	___ftsub@f1+1,___ftadd@f1+1
  9179  002A0A  C0B3  F0A7         	movff	___ftsub@f1+2,___ftadd@f1+2
  9180  002A0E  C0B4  F0A8         	movff	___ftsub@f2,___ftadd@f2
  9181  002A12  C0B5  F0A9         	movff	___ftsub@f2+1,___ftadd@f2+1
  9182  002A16  C0B6  F0AA         	movff	___ftsub@f2+2,___ftadd@f2+2
  9183  002A1A  ECAA  F006         	call	___ftadd	;wreg free
  9184  002A1E  C0A5  F0B1         	movff	?___ftadd,?___ftsub
  9185  002A22  C0A6  F0B2         	movff	?___ftadd+1,?___ftsub+1
  9186  002A26  C0A7  F0B3         	movff	?___ftadd+2,?___ftsub+2
  9187  002A2A  0012               	return	
  9188  002A2C                     __end_of___ftsub:
  9189                           	opt stack 0
  9190                           tblptru	equ	0xFF8
  9191                           tblptrh	equ	0xFF7
  9192                           tblptrl	equ	0xFF6
  9193                           tablat	equ	0xFF5
  9194                           prodh	equ	0xFF4
  9195                           prodl	equ	0xFF3
  9196                           intcon	equ	0xFF2
  9197                           postinc0	equ	0xFEE
  9198                           wreg	equ	0xFE8
  9199                           postdec1	equ	0xFE5
  9200                           plusw1	equ	0xFE3
  9201                           fsr1l	equ	0xFE1
  9202                           indf2	equ	0xFDF
  9203                           postinc2	equ	0xFDE
  9204                           postdec2	equ	0xFDD
  9205                           plusw2	equ	0xFDB
  9206                           fsr2h	equ	0xFDA
  9207                           fsr2l	equ	0xFD9
  9208                           status	equ	0xFD8
  9209                           
  9210 ;; *************** function ___ftadd *****************
  9211 ;; Defined at:
  9212 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  f1              3   37[BANK0 ] float 
  9215 ;;  f2              3   40[BANK0 ] float 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  exp1            1   48[BANK0 ] unsigned char 
  9218 ;;  exp2            1   47[BANK0 ] unsigned char 
  9219 ;;  sign            1   46[BANK0 ] unsigned char 
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  3   37[BANK0 ] float 
  9222 ;; Registers used:
  9223 ;;		wreg, status,2, status,0, cstack
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9229 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;Total ram usage:       12 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    4
  9236 ;; This function calls:
  9237 ;;		___ftpack
  9238 ;; This function is called by:
  9239 ;;		_angleToPulse
  9240 ;;		_printf
  9241 ;;		___ftsub
  9242 ;; This function uses a non-reentrant model
  9243 ;;
  9244                           
  9245                           	psect	text39
  9246  000D54                     __ptext39:
  9247                           	opt stack 0
  9248  000D54                     ___ftadd:
  9249                           	opt stack 23
  9250                           
  9251                           ;incstack = 0
  9252  000D54  C0A7  F0AB         	movff	___ftadd@f1+2,??___ftadd
  9253  000D58  0100               	movlb	0	; () banked
  9254  000D5A  6BAC               	clrf	(??___ftadd+1)& (0+255),b
  9255  000D5C  6BAD               	clrf	(??___ftadd+2)& (0+255),b
  9256  000D5E  0100               	movlb	0	; () banked
  9257  000D60  35A6               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9258  000D62  0100               	movlb	0	; () banked
  9259  000D64  37AB               	rlcf	??___ftadd& (0+255),f,b
  9260  000D66  E301               	bnc	u4261
  9261  000D68  81AC               	bsf	(??___ftadd+1)& (0+255),0,b
  9262  000D6A                     u4261:
  9263  000D6A  0100               	movlb	0	; () banked
  9264  000D6C  51AB               	movf	??___ftadd& (0+255),w,b
  9265  000D6E  0100               	movlb	0	; () banked
  9266  000D70  6FB0               	movwf	___ftadd@exp1& (0+255),b
  9267  000D72  C0AA  F0AB         	movff	___ftadd@f2+2,??___ftadd
  9268  000D76  0100               	movlb	0	; () banked
  9269  000D78  6BAC               	clrf	(??___ftadd+1)& (0+255),b
  9270  000D7A  6BAD               	clrf	(??___ftadd+2)& (0+255),b
  9271  000D7C  0100               	movlb	0	; () banked
  9272  000D7E  35A9               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9273  000D80  0100               	movlb	0	; () banked
  9274  000D82  37AB               	rlcf	??___ftadd& (0+255),f,b
  9275  000D84  E301               	bnc	u4271
  9276  000D86  81AC               	bsf	(??___ftadd+1)& (0+255),0,b
  9277  000D88                     u4271:
  9278  000D88  0100               	movlb	0	; () banked
  9279  000D8A  51AB               	movf	??___ftadd& (0+255),w,b
  9280  000D8C  0100               	movlb	0	; () banked
  9281  000D8E  6FAF               	movwf	___ftadd@exp2& (0+255),b
  9282                           
  9283                           ; BSR set to: 0
  9284  000D90  0100               	movlb	0	; () banked
  9285  000D92  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9286  000D94  0100               	movlb	0	; () banked
  9287  000D96  B4D8               	btfsc	status,2,c
  9288  000D98  D011               	goto	l997
  9289                           
  9290                           ; BSR set to: 0
  9291  000D9A  0100               	movlb	0	; () banked
  9292  000D9C  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9293  000D9E  0100               	movlb	0	; () banked
  9294  000DA0  5DB0               	subwf	___ftadd@exp1& (0+255),w,b
  9295  000DA2  B0D8               	btfsc	status,0,c
  9296  000DA4  D012               	goto	l4904
  9297                           
  9298                           ; BSR set to: 0
  9299  000DA6  0100               	movlb	0	; () banked
  9300  000DA8  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9301  000DAA  0800               	sublw	0
  9302  000DAC  0100               	movlb	0	; () banked
  9303  000DAE  25AF               	addwf	___ftadd@exp2& (0+255),w,b
  9304  000DB0  0100               	movlb	0	; () banked
  9305  000DB2  6FAB               	movwf	??___ftadd& (0+255),b
  9306  000DB4  0E18               	movlw	24
  9307  000DB6  0100               	movlb	0	; () banked
  9308  000DB8  65AB               	cpfsgt	??___ftadd& (0+255),b
  9309  000DBA  D007               	goto	l4904
  9310  000DBC                     l997:
  9311                           
  9312                           ; BSR set to: 0
  9313  000DBC  C0A8  F0A5         	movff	___ftadd@f2,?___ftadd
  9314  000DC0  C0A9  F0A6         	movff	___ftadd@f2+1,?___ftadd+1
  9315  000DC4  C0AA  F0A7         	movff	___ftadd@f2+2,?___ftadd+2
  9316  000DC8  0012               	return	
  9317  000DCA                     l4904:
  9318                           
  9319                           ; BSR set to: 0
  9320  000DCA  0100               	movlb	0	; () banked
  9321  000DCC  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9322  000DCE  0100               	movlb	0	; () banked
  9323  000DD0  B4D8               	btfsc	status,2,c
  9324  000DD2  D011               	goto	l1001
  9325                           
  9326                           ; BSR set to: 0
  9327  000DD4  0100               	movlb	0	; () banked
  9328  000DD6  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9329  000DD8  0100               	movlb	0	; () banked
  9330  000DDA  5DAF               	subwf	___ftadd@exp2& (0+255),w,b
  9331  000DDC  B0D8               	btfsc	status,0,c
  9332  000DDE  D012               	goto	l4910
  9333                           
  9334                           ; BSR set to: 0
  9335  000DE0  0100               	movlb	0	; () banked
  9336  000DE2  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9337  000DE4  0800               	sublw	0
  9338  000DE6  0100               	movlb	0	; () banked
  9339  000DE8  25B0               	addwf	___ftadd@exp1& (0+255),w,b
  9340  000DEA  0100               	movlb	0	; () banked
  9341  000DEC  6FAB               	movwf	??___ftadd& (0+255),b
  9342  000DEE  0E18               	movlw	24
  9343  000DF0  0100               	movlb	0	; () banked
  9344  000DF2  65AB               	cpfsgt	??___ftadd& (0+255),b
  9345  000DF4  D007               	goto	l4910
  9346  000DF6                     l1001:
  9347                           
  9348                           ; BSR set to: 0
  9349  000DF6  C0A5  F0A5         	movff	___ftadd@f1,?___ftadd
  9350  000DFA  C0A6  F0A6         	movff	___ftadd@f1+1,?___ftadd+1
  9351  000DFE  C0A7  F0A7         	movff	___ftadd@f1+2,?___ftadd+2
  9352  000E02  0012               	return	
  9353  000E04                     l4910:
  9354                           
  9355                           ; BSR set to: 0
  9356  000E04  0E06               	movlw	6
  9357  000E06  0100               	movlb	0	; () banked
  9358  000E08  6FAE               	movwf	___ftadd@sign& (0+255),b
  9359                           
  9360                           ; BSR set to: 0
  9361  000E0A  0100               	movlb	0	; () banked
  9362  000E0C  AFA7               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9363  000E0E  D002               	goto	l4916
  9364                           
  9365                           ; BSR set to: 0
  9366  000E10  0100               	movlb	0	; () banked
  9367  000E12  8FAE               	bsf	___ftadd@sign& (0+255),7,b
  9368  000E14                     l4916:
  9369                           
  9370                           ; BSR set to: 0
  9371  000E14  0100               	movlb	0	; () banked
  9372  000E16  AFAA               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9373  000E18  D002               	goto	l1003
  9374                           
  9375                           ; BSR set to: 0
  9376  000E1A  0100               	movlb	0	; () banked
  9377  000E1C  8DAE               	bsf	___ftadd@sign& (0+255),6,b
  9378  000E1E                     l1003:
  9379                           
  9380                           ; BSR set to: 0
  9381  000E1E  0100               	movlb	0	; () banked
  9382  000E20  8FA6               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9383                           
  9384                           ; BSR set to: 0
  9385  000E22  0EFF               	movlw	255
  9386  000E24  0100               	movlb	0	; () banked
  9387  000E26  17A5               	andwf	___ftadd@f1& (0+255),f,b
  9388  000E28  0EFF               	movlw	255
  9389  000E2A  0100               	movlb	0	; () banked
  9390  000E2C  17A6               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9391  000E2E  0E00               	movlw	0
  9392  000E30  0100               	movlb	0	; () banked
  9393  000E32  17A7               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9394  000E34  0100               	movlb	0	; () banked
  9395  000E36  8FA9               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9396                           
  9397                           ; BSR set to: 0
  9398  000E38  0EFF               	movlw	255
  9399  000E3A  0100               	movlb	0	; () banked
  9400  000E3C  17A8               	andwf	___ftadd@f2& (0+255),f,b
  9401  000E3E  0EFF               	movlw	255
  9402  000E40  0100               	movlb	0	; () banked
  9403  000E42  17A9               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9404  000E44  0E00               	movlw	0
  9405  000E46  0100               	movlb	0	; () banked
  9406  000E48  17AA               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9407                           
  9408                           ; BSR set to: 0
  9409  000E4A  0100               	movlb	0	; () banked
  9410  000E4C  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9411  000E4E  0100               	movlb	0	; () banked
  9412  000E50  5DB0               	subwf	___ftadd@exp1& (0+255),w,b
  9413  000E52  B0D8               	btfsc	status,0,c
  9414  000E54  D025               	goto	l4936
  9415  000E56                     l4926:
  9416                           
  9417                           ; BSR set to: 0
  9418  000E56  0100               	movlb	0	; () banked
  9419  000E58  90D8               	bcf	status,0,c
  9420  000E5A  37A8               	rlcf	___ftadd@f2& (0+255),f,b
  9421  000E5C  37A9               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9422  000E5E  37AA               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9423  000E60  0100               	movlb	0	; () banked
  9424  000E62  07AF               	decf	___ftadd@exp2& (0+255),f,b
  9425                           
  9426                           ; BSR set to: 0
  9427  000E64  0100               	movlb	0	; () banked
  9428  000E66  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9429  000E68  0100               	movlb	0	; () banked
  9430  000E6A  19AF               	xorwf	___ftadd@exp2& (0+255),w,b
  9431  000E6C  B4D8               	btfsc	status,2,c
  9432  000E6E  D011               	goto	l4934
  9433                           
  9434                           ; BSR set to: 0
  9435  000E70  0100               	movlb	0	; () banked
  9436  000E72  07AE               	decf	___ftadd@sign& (0+255),f,b
  9437  000E74  C0AE  F0AB         	movff	___ftadd@sign,??___ftadd
  9438  000E78  0E07               	movlw	7
  9439  000E7A  0100               	movlb	0	; () banked
  9440  000E7C  17AB               	andwf	??___ftadd& (0+255),f,b
  9441  000E7E  B4D8               	btfsc	status,2,c
  9442  000E80  D008               	goto	l4934
  9443  000E82  D7E9               	goto	l4926
  9444  000E84                     l4932:
  9445                           
  9446                           ; BSR set to: 0
  9447  000E84  0100               	movlb	0	; () banked
  9448  000E86  90D8               	bcf	status,0,c
  9449  000E88  33A7               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9450  000E8A  33A6               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9451  000E8C  33A5               	rrcf	___ftadd@f1& (0+255),f,b
  9452  000E8E  0100               	movlb	0	; () banked
  9453  000E90  2BB0               	incf	___ftadd@exp1& (0+255),f,b
  9454  000E92                     l4934:
  9455                           
  9456                           ; BSR set to: 0
  9457  000E92  0100               	movlb	0	; () banked
  9458  000E94  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9459  000E96  0100               	movlb	0	; () banked
  9460  000E98  19B0               	xorwf	___ftadd@exp1& (0+255),w,b
  9461  000E9A  B4D8               	btfsc	status,2,c
  9462  000E9C  D02B               	goto	l1012
  9463  000E9E  D7F2               	goto	l4932
  9464  000EA0                     l4936:
  9465                           
  9466                           ; BSR set to: 0
  9467  000EA0  0100               	movlb	0	; () banked
  9468  000EA2  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9469  000EA4  0100               	movlb	0	; () banked
  9470  000EA6  5DAF               	subwf	___ftadd@exp2& (0+255),w,b
  9471  000EA8  B0D8               	btfsc	status,0,c
  9472  000EAA  D024               	goto	l1012
  9473  000EAC                     l4938:
  9474                           
  9475                           ; BSR set to: 0
  9476  000EAC  0100               	movlb	0	; () banked
  9477  000EAE  90D8               	bcf	status,0,c
  9478  000EB0  37A5               	rlcf	___ftadd@f1& (0+255),f,b
  9479  000EB2  37A6               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9480  000EB4  37A7               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9481  000EB6  0100               	movlb	0	; () banked
  9482  000EB8  07B0               	decf	___ftadd@exp1& (0+255),f,b
  9483                           
  9484                           ; BSR set to: 0
  9485  000EBA  0100               	movlb	0	; () banked
  9486  000EBC  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9487  000EBE  0100               	movlb	0	; () banked
  9488  000EC0  19AF               	xorwf	___ftadd@exp2& (0+255),w,b
  9489  000EC2  B4D8               	btfsc	status,2,c
  9490  000EC4  D011               	goto	l4946
  9491                           
  9492                           ; BSR set to: 0
  9493  000EC6  0100               	movlb	0	; () banked
  9494  000EC8  07AE               	decf	___ftadd@sign& (0+255),f,b
  9495  000ECA  C0AE  F0AB         	movff	___ftadd@sign,??___ftadd
  9496  000ECE  0E07               	movlw	7
  9497  000ED0  0100               	movlb	0	; () banked
  9498  000ED2  17AB               	andwf	??___ftadd& (0+255),f,b
  9499  000ED4  B4D8               	btfsc	status,2,c
  9500  000ED6  D008               	goto	l4946
  9501  000ED8  D7E9               	goto	l4938
  9502  000EDA                     l4944:
  9503                           
  9504                           ; BSR set to: 0
  9505  000EDA  0100               	movlb	0	; () banked
  9506  000EDC  90D8               	bcf	status,0,c
  9507  000EDE  33AA               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9508  000EE0  33A9               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9509  000EE2  33A8               	rrcf	___ftadd@f2& (0+255),f,b
  9510  000EE4  0100               	movlb	0	; () banked
  9511  000EE6  2BAF               	incf	___ftadd@exp2& (0+255),f,b
  9512  000EE8                     l4946:
  9513                           
  9514                           ; BSR set to: 0
  9515  000EE8  0100               	movlb	0	; () banked
  9516  000EEA  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9517  000EEC  0100               	movlb	0	; () banked
  9518  000EEE  19B0               	xorwf	___ftadd@exp1& (0+255),w,b
  9519  000EF0  A4D8               	btfss	status,2,c
  9520  000EF2  D7F3               	goto	l4944
  9521  000EF4                     l1012:
  9522                           
  9523                           ; BSR set to: 0
  9524  000EF4  0100               	movlb	0	; () banked
  9525  000EF6  AFAE               	btfss	___ftadd@sign& (0+255),7,b
  9526  000EF8  D012               	goto	l1021
  9527                           
  9528                           ; BSR set to: 0
  9529  000EFA  0EFF               	movlw	255
  9530  000EFC  0100               	movlb	0	; () banked
  9531  000EFE  1BA5               	xorwf	___ftadd@f1& (0+255),f,b
  9532  000F00  0EFF               	movlw	255
  9533  000F02  0100               	movlb	0	; () banked
  9534  000F04  1BA6               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9535  000F06  0EFF               	movlw	255
  9536  000F08  0100               	movlb	0	; () banked
  9537  000F0A  1BA7               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9538  000F0C  0E01               	movlw	1
  9539  000F0E  0100               	movlb	0	; () banked
  9540  000F10  27A5               	addwf	___ftadd@f1& (0+255),f,b
  9541  000F12  0E00               	movlw	0
  9542  000F14  0100               	movlb	0	; () banked
  9543  000F16  23A6               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9544  000F18  0E00               	movlw	0
  9545  000F1A  0100               	movlb	0	; () banked
  9546  000F1C  23A7               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9547  000F1E                     l1021:
  9548                           
  9549                           ; BSR set to: 0
  9550  000F1E  0100               	movlb	0	; () banked
  9551  000F20  ADAE               	btfss	___ftadd@sign& (0+255),6,b
  9552  000F22  D012               	goto	l4952
  9553                           
  9554                           ; BSR set to: 0
  9555  000F24  0EFF               	movlw	255
  9556  000F26  0100               	movlb	0	; () banked
  9557  000F28  1BA8               	xorwf	___ftadd@f2& (0+255),f,b
  9558  000F2A  0EFF               	movlw	255
  9559  000F2C  0100               	movlb	0	; () banked
  9560  000F2E  1BA9               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9561  000F30  0EFF               	movlw	255
  9562  000F32  0100               	movlb	0	; () banked
  9563  000F34  1BAA               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9564  000F36  0E01               	movlw	1
  9565  000F38  0100               	movlb	0	; () banked
  9566  000F3A  27A8               	addwf	___ftadd@f2& (0+255),f,b
  9567  000F3C  0E00               	movlw	0
  9568  000F3E  0100               	movlb	0	; () banked
  9569  000F40  23A9               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9570  000F42  0E00               	movlw	0
  9571  000F44  0100               	movlb	0	; () banked
  9572  000F46  23AA               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9573  000F48                     l4952:
  9574                           
  9575                           ; BSR set to: 0
  9576  000F48  0E00               	movlw	0
  9577  000F4A  0100               	movlb	0	; () banked
  9578  000F4C  6FAE               	movwf	___ftadd@sign& (0+255),b
  9579                           
  9580                           ; BSR set to: 0
  9581  000F4E  0100               	movlb	0	; () banked
  9582  000F50  51A5               	movf	___ftadd@f1& (0+255),w,b
  9583  000F52  0100               	movlb	0	; () banked
  9584  000F54  27A8               	addwf	___ftadd@f2& (0+255),f,b
  9585  000F56  0100               	movlb	0	; () banked
  9586  000F58  51A6               	movf	(___ftadd@f1+1)& (0+255),w,b
  9587  000F5A  0100               	movlb	0	; () banked
  9588  000F5C  23A9               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9589  000F5E  0100               	movlb	0	; () banked
  9590  000F60  51A7               	movf	(___ftadd@f1+2)& (0+255),w,b
  9591  000F62  0100               	movlb	0	; () banked
  9592  000F64  23AA               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9593                           
  9594                           ; BSR set to: 0
  9595  000F66  0100               	movlb	0	; () banked
  9596  000F68  AFAA               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9597  000F6A  D015               	goto	l4962
  9598                           
  9599                           ; BSR set to: 0
  9600  000F6C  0EFF               	movlw	255
  9601  000F6E  0100               	movlb	0	; () banked
  9602  000F70  1BA8               	xorwf	___ftadd@f2& (0+255),f,b
  9603  000F72  0EFF               	movlw	255
  9604  000F74  0100               	movlb	0	; () banked
  9605  000F76  1BA9               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9606  000F78  0EFF               	movlw	255
  9607  000F7A  0100               	movlb	0	; () banked
  9608  000F7C  1BAA               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9609  000F7E  0E01               	movlw	1
  9610  000F80  0100               	movlb	0	; () banked
  9611  000F82  27A8               	addwf	___ftadd@f2& (0+255),f,b
  9612  000F84  0E00               	movlw	0
  9613  000F86  0100               	movlb	0	; () banked
  9614  000F88  23A9               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9615  000F8A  0E00               	movlw	0
  9616  000F8C  0100               	movlb	0	; () banked
  9617  000F8E  23AA               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9618                           
  9619                           ; BSR set to: 0
  9620  000F90  0E01               	movlw	1
  9621  000F92  0100               	movlb	0	; () banked
  9622  000F94  6FAE               	movwf	___ftadd@sign& (0+255),b
  9623  000F96                     l4962:
  9624                           
  9625                           ; BSR set to: 0
  9626  000F96  C0A8  F024         	movff	___ftadd@f2,___ftpack@arg
  9627  000F9A  C0A9  F025         	movff	___ftadd@f2+1,___ftpack@arg+1
  9628  000F9E  C0AA  F026         	movff	___ftadd@f2+2,___ftpack@arg+2
  9629  000FA2  C0B0  F027         	movff	___ftadd@exp1,___ftpack@exp
  9630  000FA6  C0AE  F028         	movff	___ftadd@sign,___ftpack@sign
  9631  000FAA  EC78  F011         	call	___ftpack	;wreg free
  9632  000FAE  C024  F0A5         	movff	?___ftpack,?___ftadd
  9633  000FB2  C025  F0A6         	movff	?___ftpack+1,?___ftadd+1
  9634  000FB6  C026  F0A7         	movff	?___ftpack+2,?___ftadd+2
  9635  000FBA  0012               	return	
  9636  000FBC                     __end_of___ftadd:
  9637                           	opt stack 0
  9638                           tblptru	equ	0xFF8
  9639                           tblptrh	equ	0xFF7
  9640                           tblptrl	equ	0xFF6
  9641                           tablat	equ	0xFF5
  9642                           prodh	equ	0xFF4
  9643                           prodl	equ	0xFF3
  9644                           intcon	equ	0xFF2
  9645                           postinc0	equ	0xFEE
  9646                           wreg	equ	0xFE8
  9647                           postdec1	equ	0xFE5
  9648                           plusw1	equ	0xFE3
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           plusw2	equ	0xFDB
  9654                           fsr2h	equ	0xFDA
  9655                           fsr2l	equ	0xFD9
  9656                           status	equ	0xFD8
  9657                           
  9658 ;; *************** function ___ftpack *****************
  9659 ;; Defined at:
  9660 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;  arg             3   35[COMRAM] unsigned um
  9663 ;;  exp             1   38[COMRAM] unsigned char 
  9664 ;;  sign            1   39[COMRAM] unsigned char 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;		None
  9667 ;; Return value:  Size  Location     Type
  9668 ;;                  3   35[COMRAM] float 
  9669 ;; Registers used:
  9670 ;;		wreg, status,2, status,0
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9676 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;Total ram usage:        8 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:    3
  9683 ;; This function calls:
  9684 ;;		Nothing
  9685 ;; This function is called by:
  9686 ;;		___altoft
  9687 ;;		___awtoft
  9688 ;;		___ftadd
  9689 ;;		___ftdiv
  9690 ;;		___ftmul
  9691 ;;		___lltoft
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           	psect	text40
  9696  0022F0                     __ptext40:
  9697                           	opt stack 0
  9698  0022F0                     ___ftpack:
  9699                           	opt stack 23
  9700                           
  9701                           ;incstack = 0
  9702  0022F0  5027               	movf	___ftpack@exp,w,c
  9703  0022F2  B4D8               	btfsc	status,2,c
  9704  0022F4  D005               	goto	l4840
  9705  0022F6  5024               	movf	___ftpack@arg,w,c
  9706  0022F8  1025               	iorwf	___ftpack@arg+1,w,c
  9707  0022FA  1026               	iorwf	___ftpack@arg+2,w,c
  9708  0022FC  A4D8               	btfss	status,2,c
  9709  0022FE  D00C               	goto	l4846
  9710  002300                     l4840:
  9711  002300  0E00               	movlw	0
  9712  002302  6E24               	movwf	?___ftpack,c
  9713  002304  0E00               	movlw	0
  9714  002306  6E25               	movwf	?___ftpack+1,c
  9715  002308  0E00               	movlw	0
  9716  00230A  6E26               	movwf	?___ftpack+2,c
  9717  00230C  0012               	return	
  9718  00230E                     l4844:
  9719  00230E  2A27               	incf	___ftpack@exp,f,c
  9720  002310  90D8               	bcf	status,0,c
  9721  002312  3226               	rrcf	___ftpack@arg+2,f,c
  9722  002314  3225               	rrcf	___ftpack@arg+1,f,c
  9723  002316  3224               	rrcf	___ftpack@arg,f,c
  9724  002318                     l4846:
  9725  002318  0E00               	movlw	0
  9726  00231A  1424               	andwf	___ftpack@arg,w,c
  9727  00231C  6E29               	movwf	??___ftpack& (0+255),c
  9728  00231E  0E00               	movlw	0
  9729  002320  1425               	andwf	___ftpack@arg+1,w,c
  9730  002322  6E2A               	movwf	(??___ftpack+1)& (0+255),c
  9731  002324  0EFE               	movlw	254
  9732  002326  1426               	andwf	___ftpack@arg+2,w,c
  9733  002328  6E2B               	movwf	(??___ftpack+2)& (0+255),c
  9734  00232A  5029               	movf	??___ftpack,w,c
  9735  00232C  102A               	iorwf	??___ftpack+1,w,c
  9736  00232E  102B               	iorwf	??___ftpack+2,w,c
  9737  002330  B4D8               	btfsc	status,2,c
  9738  002332  D00C               	goto	l4852
  9739  002334  D7EC               	goto	l4844
  9740  002336                     l4848:
  9741  002336  2A27               	incf	___ftpack@exp,f,c
  9742  002338  0E01               	movlw	1
  9743  00233A  2624               	addwf	___ftpack@arg,f,c
  9744  00233C  0E00               	movlw	0
  9745  00233E  2225               	addwfc	___ftpack@arg+1,f,c
  9746  002340  0E00               	movlw	0
  9747  002342  2226               	addwfc	___ftpack@arg+2,f,c
  9748  002344  90D8               	bcf	status,0,c
  9749  002346  3226               	rrcf	___ftpack@arg+2,f,c
  9750  002348  3225               	rrcf	___ftpack@arg+1,f,c
  9751  00234A  3224               	rrcf	___ftpack@arg,f,c
  9752  00234C                     l4852:
  9753  00234C  0E00               	movlw	0
  9754  00234E  1424               	andwf	___ftpack@arg,w,c
  9755  002350  6E29               	movwf	??___ftpack& (0+255),c
  9756  002352  0E00               	movlw	0
  9757  002354  1425               	andwf	___ftpack@arg+1,w,c
  9758  002356  6E2A               	movwf	(??___ftpack+1)& (0+255),c
  9759  002358  0EFF               	movlw	255
  9760  00235A  1426               	andwf	___ftpack@arg+2,w,c
  9761  00235C  6E2B               	movwf	(??___ftpack+2)& (0+255),c
  9762  00235E  5029               	movf	??___ftpack,w,c
  9763  002360  102A               	iorwf	??___ftpack+1,w,c
  9764  002362  102B               	iorwf	??___ftpack+2,w,c
  9765  002364  B4D8               	btfsc	status,2,c
  9766  002366  D006               	goto	l4856
  9767  002368  D7E6               	goto	l4848
  9768  00236A                     l4854:
  9769  00236A  0627               	decf	___ftpack@exp,f,c
  9770  00236C  90D8               	bcf	status,0,c
  9771  00236E  3624               	rlcf	___ftpack@arg,f,c
  9772  002370  3625               	rlcf	___ftpack@arg+1,f,c
  9773  002372  3626               	rlcf	___ftpack@arg+2,f,c
  9774  002374                     l4856:
  9775  002374  BE25               	btfsc	___ftpack@arg+1,7,c
  9776  002376  D003               	goto	l974
  9777  002378  0E02               	movlw	2
  9778  00237A  6027               	cpfslt	___ftpack@exp,c
  9779  00237C  D7F6               	goto	l4854
  9780  00237E                     l974:
  9781  00237E  A027               	btfss	___ftpack@exp,0,c
  9782  002380  9E25               	bcf	___ftpack@arg+1,7,c
  9783  002382  90D8               	bcf	status,0,c
  9784  002384  3227               	rrcf	___ftpack@exp,f,c
  9785  002386  5027               	movf	___ftpack@exp,w,c
  9786  002388  1226               	iorwf	___ftpack@arg+2,f,c
  9787  00238A  5028               	movf	___ftpack@sign,w,c
  9788  00238C  A4D8               	btfss	status,2,c
  9789  00238E  8E26               	bsf	___ftpack@arg+2,7,c
  9790  002390  C024  F024         	movff	___ftpack@arg,?___ftpack
  9791  002394  C025  F025         	movff	___ftpack@arg+1,?___ftpack+1
  9792  002398  C026  F026         	movff	___ftpack@arg+2,?___ftpack+2
  9793  00239C  0012               	return	
  9794  00239E                     __end_of___ftpack:
  9795                           	opt stack 0
  9796                           tblptru	equ	0xFF8
  9797                           tblptrh	equ	0xFF7
  9798                           tblptrl	equ	0xFF6
  9799                           tablat	equ	0xFF5
  9800                           prodh	equ	0xFF4
  9801                           prodl	equ	0xFF3
  9802                           intcon	equ	0xFF2
  9803                           postinc0	equ	0xFEE
  9804                           wreg	equ	0xFE8
  9805                           postdec1	equ	0xFE5
  9806                           plusw1	equ	0xFE3
  9807                           fsr1l	equ	0xFE1
  9808                           indf2	equ	0xFDF
  9809                           postinc2	equ	0xFDE
  9810                           postdec2	equ	0xFDD
  9811                           plusw2	equ	0xFDB
  9812                           fsr2h	equ	0xFDA
  9813                           fsr2l	equ	0xFD9
  9814                           status	equ	0xFD8
  9815                           
  9816 ;; *************** function ___ftneg *****************
  9817 ;; Defined at:
  9818 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;  f1              3   35[COMRAM] float 
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  3   35[COMRAM] float 
  9825 ;; Registers used:
  9826 ;;		wreg, status,2, status,0
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9832 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9836 ;;Total ram usage:        3 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    3
  9839 ;; This function calls:
  9840 ;;		Nothing
  9841 ;; This function is called by:
  9842 ;;		_printf
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text41
  9847  002D36                     __ptext41:
  9848                           	opt stack 0
  9849  002D36                     ___ftneg:
  9850                           	opt stack 25
  9851                           
  9852                           ;incstack = 0
  9853  002D36  5024               	movf	___ftneg@f1,w,c
  9854  002D38  1025               	iorwf	___ftneg@f1+1,w,c
  9855  002D3A  1026               	iorwf	___ftneg@f1+2,w,c
  9856  002D3C  B4D8               	btfsc	status,2,c
  9857  002D3E  D006               	goto	l1071
  9858  002D40  0E00               	movlw	0
  9859  002D42  1A24               	xorwf	___ftneg@f1,f,c
  9860  002D44  0E00               	movlw	0
  9861  002D46  1A25               	xorwf	___ftneg@f1+1,f,c
  9862  002D48  0E80               	movlw	128
  9863  002D4A  1A26               	xorwf	___ftneg@f1+2,f,c
  9864  002D4C                     l1071:
  9865  002D4C  C024  F024         	movff	___ftneg@f1,?___ftneg
  9866  002D50  C025  F025         	movff	___ftneg@f1+1,?___ftneg+1
  9867  002D54  C026  F026         	movff	___ftneg@f1+2,?___ftneg+2
  9868  002D58  0012               	return		;funcret
  9869  002D5A                     __end_of___ftneg:
  9870                           	opt stack 0
  9871                           tblptru	equ	0xFF8
  9872                           tblptrh	equ	0xFF7
  9873                           tblptrl	equ	0xFF6
  9874                           tablat	equ	0xFF5
  9875                           prodh	equ	0xFF4
  9876                           prodl	equ	0xFF3
  9877                           intcon	equ	0xFF2
  9878                           postinc0	equ	0xFEE
  9879                           wreg	equ	0xFE8
  9880                           postdec1	equ	0xFE5
  9881                           plusw1	equ	0xFE3
  9882                           fsr1l	equ	0xFE1
  9883                           indf2	equ	0xFDF
  9884                           postinc2	equ	0xFDE
  9885                           postdec2	equ	0xFDD
  9886                           plusw2	equ	0xFDB
  9887                           fsr2h	equ	0xFDA
  9888                           fsr2l	equ	0xFD9
  9889                           status	equ	0xFD8
  9890                           
  9891 ;; *************** function ___ftge *****************
  9892 ;; Defined at:
  9893 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9894 ;; Parameters:    Size  Location     Type
  9895 ;;  ff1             3   35[COMRAM] float 
  9896 ;;  ff2             3   38[COMRAM] float 
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;		None
  9899 ;; Return value:  Size  Location     Type
  9900 ;;		None               void
  9901 ;; Registers used:
  9902 ;;		wreg, status,2, status,0
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9908 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9910 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9912 ;;Total ram usage:        9 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    3
  9915 ;; This function calls:
  9916 ;;		Nothing
  9917 ;; This function is called by:
  9918 ;;		_printf
  9919 ;; This function uses a non-reentrant model
  9920 ;;
  9921                           
  9922                           	psect	text42
  9923  002562                     __ptext42:
  9924                           	opt stack 0
  9925  002562                     ___ftge:
  9926                           	opt stack 25
  9927                           
  9928                           ;incstack = 0
  9929  002562  AE26               	btfss	___ftge@ff1+2,7,c
  9930  002564  D016               	goto	l5402
  9931  002566  C024  F02A         	movff	___ftge@ff1,??___ftge
  9932  00256A  C025  F02B         	movff	___ftge@ff1+1,??___ftge+1
  9933  00256E  C026  F02C         	movff	___ftge@ff1+2,??___ftge+2
  9934  002572  1E2A               	comf	??___ftge,f,c
  9935  002574  1E2B               	comf	??___ftge+1,f,c
  9936  002576  1E2C               	comf	??___ftge+2,f,c
  9937  002578  2A2A               	incf	??___ftge,f,c
  9938  00257A  0E00               	movlw	0
  9939  00257C  222B               	addwfc	??___ftge+1,f,c
  9940  00257E  222C               	addwfc	??___ftge+2,f,c
  9941  002580  0E00               	movlw	0
  9942  002582  242A               	addwf	??___ftge,w,c
  9943  002584  6E24               	movwf	___ftge@ff1,c
  9944  002586  0E00               	movlw	0
  9945  002588  202B               	addwfc	??___ftge+1,w,c
  9946  00258A  6E25               	movwf	___ftge@ff1+1,c
  9947  00258C  0E80               	movlw	128
  9948  00258E  202C               	addwfc	??___ftge+2,w,c
  9949  002590  6E26               	movwf	___ftge@ff1+2,c
  9950  002592                     l5402:
  9951  002592  AE29               	btfss	___ftge@ff2+2,7,c
  9952  002594  D016               	goto	l5406
  9953  002596  C027  F02A         	movff	___ftge@ff2,??___ftge
  9954  00259A  C028  F02B         	movff	___ftge@ff2+1,??___ftge+1
  9955  00259E  C029  F02C         	movff	___ftge@ff2+2,??___ftge+2
  9956  0025A2  1E2A               	comf	??___ftge,f,c
  9957  0025A4  1E2B               	comf	??___ftge+1,f,c
  9958  0025A6  1E2C               	comf	??___ftge+2,f,c
  9959  0025A8  2A2A               	incf	??___ftge,f,c
  9960  0025AA  0E00               	movlw	0
  9961  0025AC  222B               	addwfc	??___ftge+1,f,c
  9962  0025AE  222C               	addwfc	??___ftge+2,f,c
  9963  0025B0  0E00               	movlw	0
  9964  0025B2  242A               	addwf	??___ftge,w,c
  9965  0025B4  6E27               	movwf	___ftge@ff2,c
  9966  0025B6  0E00               	movlw	0
  9967  0025B8  202B               	addwfc	??___ftge+1,w,c
  9968  0025BA  6E28               	movwf	___ftge@ff2+1,c
  9969  0025BC  0E80               	movlw	128
  9970  0025BE  202C               	addwfc	??___ftge+2,w,c
  9971  0025C0  6E29               	movwf	___ftge@ff2+2,c
  9972  0025C2                     l5406:
  9973  0025C2  0E00               	movlw	0
  9974  0025C4  1A24               	xorwf	___ftge@ff1,f,c
  9975  0025C6  0E00               	movlw	0
  9976  0025C8  1A25               	xorwf	___ftge@ff1+1,f,c
  9977  0025CA  0E80               	movlw	128
  9978  0025CC  1A26               	xorwf	___ftge@ff1+2,f,c
  9979  0025CE  0E00               	movlw	0
  9980  0025D0  1A27               	xorwf	___ftge@ff2,f,c
  9981  0025D2  0E00               	movlw	0
  9982  0025D4  1A28               	xorwf	___ftge@ff2+1,f,c
  9983  0025D6  0E80               	movlw	128
  9984  0025D8  1A29               	xorwf	___ftge@ff2+2,f,c
  9985  0025DA  5027               	movf	___ftge@ff2,w,c
  9986  0025DC  5C24               	subwf	___ftge@ff1,w,c
  9987  0025DE  5028               	movf	___ftge@ff2+1,w,c
  9988  0025E0  5825               	subwfb	___ftge@ff1+1,w,c
  9989  0025E2  5029               	movf	___ftge@ff2+2,w,c
  9990  0025E4  5826               	subwfb	___ftge@ff1+2,w,c
  9991  0025E6  B0D8               	btfsc	status,0,c
  9992  0025E8  D002               	goto	l5412
  9993  0025EA  90D8               	bcf	status,0,c
  9994  0025EC  0012               	return	
  9995  0025EE                     l5412:
  9996  0025EE  80D8               	bsf	status,0,c
  9997  0025F0  0012               	return	
  9998  0025F2                     __end_of___ftge:
  9999                           	opt stack 0
 10000                           tblptru	equ	0xFF8
 10001                           tblptrh	equ	0xFF7
 10002                           tblptrl	equ	0xFF6
 10003                           tablat	equ	0xFF5
 10004                           prodh	equ	0xFF4
 10005                           prodl	equ	0xFF3
 10006                           intcon	equ	0xFF2
 10007                           postinc0	equ	0xFEE
 10008                           wreg	equ	0xFE8
 10009                           postdec1	equ	0xFE5
 10010                           plusw1	equ	0xFE3
 10011                           fsr1l	equ	0xFE1
 10012                           indf2	equ	0xFDF
 10013                           postinc2	equ	0xFDE
 10014                           postdec2	equ	0xFDD
 10015                           plusw2	equ	0xFDB
 10016                           fsr2h	equ	0xFDA
 10017                           fsr2l	equ	0xFD9
 10018                           status	equ	0xFD8
 10019                           
 10020 ;; *************** function _lcdClear *****************
 10021 ;; Defined at:
 10022 ;;		line 74 in file "lcd.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;		None
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;		None
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  1    wreg      void 
 10029 ;; Registers used:
 10030 ;;		wreg, status,2, status,0, cstack
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;Total ram usage:        0 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    5
 10043 ;; This function calls:
 10044 ;;		_lcdInst
 10045 ;; This function is called by:
 10046 ;;		_sortBattery
 10047 ;;		_pause
 10048 ;;		_dateTime
 10049 ;;		_mainMenu
 10050 ;;		_runSelect
 10051 ;;		_runMenu
 10052 ;;		_runTime
 10053 ;;		_runStats
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           	psect	text43
 10058  002E14                     __ptext43:
 10059                           	opt stack 0
 10060  002E14                     _lcdClear:
 10061                           	opt stack 23
 10062                           
 10063                           ;lcd.c: 75: lcdInst(0b00000001);
 10064                           
 10065                           ;incstack = 0
 10066  002E14  0E01               	movlw	1
 10067  002E16  ECBE  F016         	call	_lcdInst
 10068  002E1A  0012               	return		;funcret
 10069  002E1C                     __end_of_lcdClear:
 10070                           	opt stack 0
 10071                           tblptru	equ	0xFF8
 10072                           tblptrh	equ	0xFF7
 10073                           tblptrl	equ	0xFF6
 10074                           tablat	equ	0xFF5
 10075                           prodh	equ	0xFF4
 10076                           prodl	equ	0xFF3
 10077                           intcon	equ	0xFF2
 10078                           postinc0	equ	0xFEE
 10079                           wreg	equ	0xFE8
 10080                           postdec1	equ	0xFE5
 10081                           plusw1	equ	0xFE3
 10082                           fsr1l	equ	0xFE1
 10083                           indf2	equ	0xFDF
 10084                           postinc2	equ	0xFDE
 10085                           postdec2	equ	0xFDD
 10086                           plusw2	equ	0xFDB
 10087                           fsr2h	equ	0xFDA
 10088                           fsr2l	equ	0xFD9
 10089                           status	equ	0xFD8
 10090                           
 10091 ;; *************** function _pinSetup *****************
 10092 ;; Defined at:
 10093 ;;		line 201 in file "main.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;		None
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;		None
 10098 ;; Return value:  Size  Location     Type
 10099 ;;                  1    wreg      void 
 10100 ;; Registers used:
 10101 ;;		wreg, status,2, status,0
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10111 ;;Total ram usage:        0 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; Hardware stack levels required when called:    3
 10114 ;; This function calls:
 10115 ;;		Nothing
 10116 ;; This function is called by:
 10117 ;;		_main
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           	psect	text44
 10122  002B4A                     __ptext44:
 10123                           	opt stack 0
 10124  002B4A                     _pinSetup:
 10125                           	opt stack 27
 10126                           
 10127                           ;main.c: 207: TRISA = 0xFF;
 10128                           
 10129                           ;incstack = 0
 10130  002B4A  6892               	setf	3986,c	;volatile
 10131                           
 10132                           ;main.c: 208: TRISB = 0xFF;
 10133  002B4C  6893               	setf	3987,c	;volatile
 10134                           
 10135                           ;main.c: 209: TRISC = 0x00;
 10136  002B4E  0E00               	movlw	0
 10137  002B50  6E94               	movwf	3988,c	;volatile
 10138                           
 10139                           ;main.c: 210: TRISD = 0x00;
 10140  002B52  0E00               	movlw	0
 10141  002B54  6E95               	movwf	3989,c	;volatile
 10142                           
 10143                           ;main.c: 211: TRISE = 0x00;
 10144  002B56  0E00               	movlw	0
 10145  002B58  6E96               	movwf	3990,c	;volatile
 10146                           
 10147                           ;main.c: 213: LATA = 0x00;
 10148  002B5A  0E00               	movlw	0
 10149  002B5C  6E89               	movwf	3977,c	;volatile
 10150                           
 10151                           ;main.c: 214: LATB = 0x00;
 10152  002B5E  0E00               	movlw	0
 10153  002B60  6E8A               	movwf	3978,c	;volatile
 10154                           
 10155                           ;main.c: 215: LATC = 0x00;
 10156  002B62  0E00               	movlw	0
 10157  002B64  6E8B               	movwf	3979,c	;volatile
 10158                           
 10159                           ;main.c: 216: LATD = 0x00;
 10160  002B66  0E00               	movlw	0
 10161  002B68  6E8C               	movwf	3980,c	;volatile
 10162                           
 10163                           ;main.c: 217: LATE = 0x00;
 10164  002B6A  0E00               	movlw	0
 10165  002B6C  6E8D               	movwf	3981,c	;volatile
 10166                           
 10167                           ;main.c: 219: ADCON0 = 0x00;
 10168  002B6E  0E00               	movlw	0
 10169  002B70  6EC2               	movwf	4034,c	;volatile
 10170                           
 10171                           ;main.c: 220: ADCON1 |= 0x0E;
 10172  002B72  0E0E               	movlw	14
 10173  002B74  12C1               	iorwf	4033,f,c	;volatile
 10174                           
 10175                           ;main.c: 224: ADCON2 = 0;
 10176  002B76  0E00               	movlw	0
 10177  002B78  6EC0               	movwf	4032,c	;volatile
 10178                           
 10179                           ;main.c: 225: ADCON2 |= 0b010;
 10180  002B7A  82C0               	bsf	4032,1,c	;volatile
 10181                           
 10182                           ;main.c: 226: ADCON2 |= 0b110<<3;
 10183  002B7C  0E30               	movlw	48
 10184  002B7E  12C0               	iorwf	4032,f,c	;volatile
 10185                           
 10186                           ;main.c: 227: ADCON2 |= 1<<7;
 10187  002B80  8EC0               	bsf	4032,7,c	;volatile
 10188                           
 10189                           ;main.c: 230: INT1IE = 1;
 10190  002B82  86F0               	bsf	intcon3,3,c	;volatile
 10191                           
 10192                           ;main.c: 231: INT0IE = 1;
 10193  002B84  88F2               	bsf	intcon,4,c	;volatile
 10194                           
 10195                           ;main.c: 232: (INTCONbits.GIE = 1);
 10196  002B86  8EF2               	bsf	intcon,7,c	;volatile
 10197  002B88  0012               	return		;funcret
 10198  002B8A                     __end_of_pinSetup:
 10199                           	opt stack 0
 10200                           tblptru	equ	0xFF8
 10201                           tblptrh	equ	0xFF7
 10202                           tblptrl	equ	0xFF6
 10203                           tablat	equ	0xFF5
 10204                           prodh	equ	0xFF4
 10205                           prodl	equ	0xFF3
 10206                           intcon	equ	0xFF2
 10207                           intcon3	equ	0xFF0
 10208                           postinc0	equ	0xFEE
 10209                           wreg	equ	0xFE8
 10210                           postdec1	equ	0xFE5
 10211                           plusw1	equ	0xFE3
 10212                           fsr1l	equ	0xFE1
 10213                           indf2	equ	0xFDF
 10214                           postinc2	equ	0xFDE
 10215                           postdec2	equ	0xFDD
 10216                           plusw2	equ	0xFDB
 10217                           fsr2h	equ	0xFDA
 10218                           fsr2l	equ	0xFD9
 10219                           status	equ	0xFD8
 10220                           
 10221 ;; *************** function _initLCD *****************
 10222 ;; Defined at:
 10223 ;;		line 15 in file "lcd.c"
 10224 ;; Parameters:    Size  Location     Type
 10225 ;;		None
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;		None
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      void 
 10230 ;; Registers used:
 10231 ;;		wreg, status,2, status,0, cstack
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;Total ram usage:        1 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    5
 10244 ;; This function calls:
 10245 ;;		_lcdInst
 10246 ;; This function is called by:
 10247 ;;		_main
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           	psect	text45
 10252  002B04                     __ptext45:
 10253                           	opt stack 0
 10254  002B04                     _initLCD:
 10255                           	opt stack 25
 10256                           
 10257                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 10258                           
 10259                           ;incstack = 0
 10260  002B04  0E31               	movlw	49
 10261  002B06  6E28               	movwf	??_initLCD& (0+255),c
 10262  002B08  0EB2               	movlw	178
 10263  002B0A                     u5917:
 10264  002B0A  2EE8               	decfsz	wreg,f,c
 10265  002B0C  D7FE               	bra	u5917
 10266  002B0E  2E28               	decfsz	??_initLCD& (0+255),f,c
 10267  002B10  D7FC               	bra	u5917
 10268  002B12  D000               	nop2	
 10269                           
 10270                           ;lcd.c: 18: lcdInst(0b00110011);
 10271  002B14  0E33               	movlw	51
 10272  002B16  ECBE  F016         	call	_lcdInst
 10273                           
 10274                           ;lcd.c: 19: lcdInst(0b00110010);
 10275  002B1A  0E32               	movlw	50
 10276  002B1C  ECBE  F016         	call	_lcdInst
 10277                           
 10278                           ;lcd.c: 20: lcdInst(0b00101000);
 10279  002B20  0E28               	movlw	40
 10280  002B22  ECBE  F016         	call	_lcdInst
 10281                           
 10282                           ;lcd.c: 21: lcdInst(0b00001111);
 10283  002B26  0E0F               	movlw	15
 10284  002B28  ECBE  F016         	call	_lcdInst
 10285                           
 10286                           ;lcd.c: 22: lcdInst(0b00000110);
 10287  002B2C  0E06               	movlw	6
 10288  002B2E  ECBE  F016         	call	_lcdInst
 10289                           
 10290                           ;lcd.c: 23: lcdInst(0b00000001);
 10291  002B32  0E01               	movlw	1
 10292  002B34  ECBE  F016         	call	_lcdInst
 10293                           
 10294                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 10295  002B38  0E31               	movlw	49
 10296  002B3A  6E28               	movwf	??_initLCD& (0+255),c
 10297  002B3C  0EB2               	movlw	178
 10298  002B3E                     u5927:
 10299  002B3E  2EE8               	decfsz	wreg,f,c
 10300  002B40  D7FE               	bra	u5927
 10301  002B42  2E28               	decfsz	??_initLCD& (0+255),f,c
 10302  002B44  D7FC               	bra	u5927
 10303  002B46  D000               	nop2	
 10304  002B48  0012               	return		;funcret
 10305  002B4A                     __end_of_initLCD:
 10306                           	opt stack 0
 10307                           tblptru	equ	0xFF8
 10308                           tblptrh	equ	0xFF7
 10309                           tblptrl	equ	0xFF6
 10310                           tablat	equ	0xFF5
 10311                           prodh	equ	0xFF4
 10312                           prodl	equ	0xFF3
 10313                           intcon	equ	0xFF2
 10314                           intcon3	equ	0xFF0
 10315                           postinc0	equ	0xFEE
 10316                           wreg	equ	0xFE8
 10317                           postdec1	equ	0xFE5
 10318                           plusw1	equ	0xFE3
 10319                           fsr1l	equ	0xFE1
 10320                           indf2	equ	0xFDF
 10321                           postinc2	equ	0xFDE
 10322                           postdec2	equ	0xFDD
 10323                           plusw2	equ	0xFDB
 10324                           fsr2h	equ	0xFDA
 10325                           fsr2l	equ	0xFD9
 10326                           status	equ	0xFD8
 10327                           
 10328 ;; *************** function _lcdInst *****************
 10329 ;; Defined at:
 10330 ;;		line 27 in file "lcd.c"
 10331 ;; Parameters:    Size  Location     Type
 10332 ;;  data            1    wreg     unsigned char 
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;  data            1   38[COMRAM] unsigned char 
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  1    wreg      void 
 10337 ;; Registers used:
 10338 ;;		wreg, status,2, status,0, cstack
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;Total ram usage:        2 bytes
 10349 ;; Hardware stack levels used:    1
 10350 ;; Hardware stack levels required when called:    4
 10351 ;; This function calls:
 10352 ;;		_lcdNibble
 10353 ;; This function is called by:
 10354 ;;		_initLCD
 10355 ;;		_lcdClear
 10356 ;;		_lcdNewline
 10357 ;;		_lcdHome
 10358 ;; This function uses a non-reentrant model
 10359 ;;
 10360                           
 10361                           	psect	text46
 10362  002D7C                     __ptext46:
 10363                           	opt stack 0
 10364  002D7C                     _lcdInst:
 10365                           	opt stack 22
 10366                           
 10367                           ;incstack = 0
 10368                           ;lcdInst@data stored from wreg
 10369  002D7C  6E27               	movwf	lcdInst@data,c
 10370                           
 10371                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 10372  002D7E  948C               	bcf	3980,2,c	;volatile
 10373                           
 10374                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 10375  002D80  0E74               	movlw	116
 10376  002D82                     u5937:
 10377  002D82  2EE8               	decfsz	wreg,f,c
 10378  002D84  D7FE               	bra	u5937
 10379  002D86  D000               	nop2	
 10380                           
 10381                           ;lcd.c: 30: lcdNibble(data);
 10382  002D88  5027               	movf	lcdInst@data,w,c
 10383  002D8A  EC69  F014         	call	_lcdNibble
 10384                           
 10385                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 10386  002D8E  0E04               	movlw	4
 10387  002D90  6E26               	movwf	??_lcdInst& (0+255),c
 10388  002D92  0E3E               	movlw	62
 10389  002D94                     u5947:
 10390  002D94  2EE8               	decfsz	wreg,f,c
 10391  002D96  D7FE               	bra	u5947
 10392  002D98  2E26               	decfsz	??_lcdInst& (0+255),f,c
 10393  002D9A  D7FC               	bra	u5947
 10394  002D9C  0012               	return		;funcret
 10395  002D9E                     __end_of_lcdInst:
 10396                           	opt stack 0
 10397                           tblptru	equ	0xFF8
 10398                           tblptrh	equ	0xFF7
 10399                           tblptrl	equ	0xFF6
 10400                           tablat	equ	0xFF5
 10401                           prodh	equ	0xFF4
 10402                           prodl	equ	0xFF3
 10403                           intcon	equ	0xFF2
 10404                           intcon3	equ	0xFF0
 10405                           postinc0	equ	0xFEE
 10406                           wreg	equ	0xFE8
 10407                           postdec1	equ	0xFE5
 10408                           plusw1	equ	0xFE3
 10409                           fsr1l	equ	0xFE1
 10410                           indf2	equ	0xFDF
 10411                           postinc2	equ	0xFDE
 10412                           postdec2	equ	0xFDD
 10413                           plusw2	equ	0xFDB
 10414                           fsr2h	equ	0xFDA
 10415                           fsr2l	equ	0xFD9
 10416                           status	equ	0xFD8
 10417                           
 10418 ;; *************** function _lcdNibble *****************
 10419 ;; Defined at:
 10420 ;;		line 46 in file "lcd.c"
 10421 ;; Parameters:    Size  Location     Type
 10422 ;;  data            1    wreg     unsigned char 
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;  data            1   36[COMRAM] unsigned char 
 10425 ;;  temp            1   35[COMRAM] unsigned char 
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  1    wreg      void 
 10428 ;; Registers used:
 10429 ;;		wreg, status,2, status,0
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10438 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;Total ram usage:        2 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    3
 10442 ;; This function calls:
 10443 ;;		Nothing
 10444 ;; This function is called by:
 10445 ;;		_lcdInst
 10446 ;;		_putch
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           	psect	text47
 10451  0028D2                     __ptext47:
 10452                           	opt stack 0
 10453  0028D2                     _lcdNibble:
 10454                           	opt stack 24
 10455                           
 10456                           ;incstack = 0
 10457                           ;lcdNibble@data stored from wreg
 10458  0028D2  6E25               	movwf	lcdNibble@data,c
 10459                           
 10460                           ;lcd.c: 48: char temp = data & 0xF0;
 10461  0028D4  5025               	movf	lcdNibble@data,w,c
 10462  0028D6  0BF0               	andlw	240
 10463  0028D8  6E24               	movwf	lcdNibble@temp,c
 10464                           
 10465                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10466  0028DA  508C               	movf	3980,w,c	;volatile
 10467  0028DC  0B0F               	andlw	15
 10468  0028DE  6E8C               	movwf	3980,c	;volatile
 10469                           
 10470                           ;lcd.c: 50: LATD = temp | LATD;
 10471  0028E0  5024               	movf	lcdNibble@temp,w,c
 10472  0028E2  108C               	iorwf	3980,w,c	;volatile
 10473  0028E4  6E8C               	movwf	3980,c	;volatile
 10474                           
 10475                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10476  0028E6  968C               	bcf	3980,3,c	;volatile
 10477                           
 10478                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10479  0028E8  0ED6               	movlw	214
 10480  0028EA                     u5957:
 10481  0028EA  D000               	nop2	
 10482  0028EC  D000               	nop2	
 10483  0028EE  2EE8               	decfsz	wreg,f,c
 10484  0028F0  D7FC               	bra	u5957
 10485  0028F2  D000               	nop2	
 10486                           
 10487                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10488  0028F4  868C               	bsf	3980,3,c	;volatile
 10489                           
 10490                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10491  0028F6  0ED6               	movlw	214
 10492  0028F8                     u5967:
 10493  0028F8  D000               	nop2	
 10494  0028FA  D000               	nop2	
 10495  0028FC  2EE8               	decfsz	wreg,f,c
 10496  0028FE  D7FC               	bra	u5967
 10497  002900  D000               	nop2	
 10498                           
 10499                           ;lcd.c: 58: data = data << 4;
 10500  002902  3825               	swapf	lcdNibble@data,w,c
 10501  002904  0BF0               	andlw	240
 10502  002906  6E25               	movwf	lcdNibble@data,c
 10503                           
 10504                           ;lcd.c: 60: temp = data & 0xF0;
 10505  002908  5025               	movf	lcdNibble@data,w,c
 10506  00290A  0BF0               	andlw	240
 10507  00290C  6E24               	movwf	lcdNibble@temp,c
 10508                           
 10509                           ;lcd.c: 61: LATD = LATD & 0x0F;
 10510  00290E  508C               	movf	3980,w,c	;volatile
 10511  002910  0B0F               	andlw	15
 10512  002912  6E8C               	movwf	3980,c	;volatile
 10513                           
 10514                           ;lcd.c: 62: LATD = temp | LATD;
 10515  002914  5024               	movf	lcdNibble@temp,w,c
 10516  002916  108C               	iorwf	3980,w,c	;volatile
 10517  002918  6E8C               	movwf	3980,c	;volatile
 10518                           
 10519                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 10520  00291A  968C               	bcf	3980,3,c	;volatile
 10521                           
 10522                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10523  00291C  0ED6               	movlw	214
 10524  00291E                     u5977:
 10525  00291E  D000               	nop2	
 10526  002920  D000               	nop2	
 10527  002922  2EE8               	decfsz	wreg,f,c
 10528  002924  D7FC               	bra	u5977
 10529  002926  D000               	nop2	
 10530                           
 10531                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 10532  002928  868C               	bsf	3980,3,c	;volatile
 10533                           
 10534                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10535  00292A  0ED6               	movlw	214
 10536  00292C                     u5987:
 10537  00292C  D000               	nop2	
 10538  00292E  D000               	nop2	
 10539  002930  2EE8               	decfsz	wreg,f,c
 10540  002932  D7FC               	bra	u5987
 10541  002934  D000               	nop2	
 10542  002936  0012               	return		;funcret
 10543  002938                     __end_of_lcdNibble:
 10544                           	opt stack 0
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           prodh	equ	0xFF4
 10550                           prodl	equ	0xFF3
 10551                           intcon	equ	0xFF2
 10552                           intcon3	equ	0xFF0
 10553                           postinc0	equ	0xFEE
 10554                           wreg	equ	0xFE8
 10555                           postdec1	equ	0xFE5
 10556                           plusw1	equ	0xFE3
 10557                           fsr1l	equ	0xFE1
 10558                           indf2	equ	0xFDF
 10559                           postinc2	equ	0xFDE
 10560                           postdec2	equ	0xFDD
 10561                           plusw2	equ	0xFDB
 10562                           fsr2h	equ	0xFDA
 10563                           fsr2l	equ	0xFD9
 10564                           status	equ	0xFD8
 10565                           
 10566 ;; *************** function _service *****************
 10567 ;; Defined at:
 10568 ;;		line 235 in file "main.c"
 10569 ;; Parameters:    Size  Location     Type
 10570 ;;		None
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;		None
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      void 
 10575 ;; Registers used:
 10576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10584 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;Total ram usage:       14 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    2
 10589 ;; This function calls:
 10590 ;;		_keyPressedInterruptService
 10591 ;;		_servoInterruptService
 10592 ;; This function is called by:
 10593 ;;		Interrupt level 2
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           	psect	intcode
 10598  000008                     __pintcode:
 10599                           	opt stack 0
 10600  000008                     _service:
 10601                           	opt stack 21
 10602                           
 10603                           ;incstack = 0
 10604  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10605  00000A  ED67  F012         	call	int_func,f	;refresh shadow registers
 10606                           tblptru	equ	0xFF8
 10607                           tblptrh	equ	0xFF7
 10608                           tblptrl	equ	0xFF6
 10609                           tablat	equ	0xFF5
 10610                           prodh	equ	0xFF4
 10611                           prodl	equ	0xFF3
 10612                           intcon	equ	0xFF2
 10613                           intcon3	equ	0xFF0
 10614                           postinc0	equ	0xFEE
 10615                           wreg	equ	0xFE8
 10616                           postdec1	equ	0xFE5
 10617                           plusw1	equ	0xFE3
 10618                           fsr1l	equ	0xFE1
 10619                           indf2	equ	0xFDF
 10620                           postinc2	equ	0xFDE
 10621                           postdec2	equ	0xFDD
 10622                           plusw2	equ	0xFDB
 10623                           fsr2h	equ	0xFDA
 10624                           fsr2l	equ	0xFD9
 10625                           status	equ	0xFD8
 10626                           
 10627                           	psect	intcode_body
 10628  0024CE                     __pintcode_body:
 10629                           	opt stack 21
 10630  0024CE                     int_func:
 10631                           	opt stack 21
 10632  0024CE  0006               	pop		; remove dummy address from shadow register refresh
 10633  0024D0  CFFA F016          	movff	pclath,??_service
 10634  0024D4  CFFB F017          	movff	pclatu,??_service+1
 10635  0024D8  CFE9 F018          	movff	fsr0l,??_service+2
 10636  0024DC  CFEA F019          	movff	fsr0h,??_service+3
 10637  0024E0  CFE1 F01A          	movff	fsr1l,??_service+4
 10638  0024E4  CFE2 F01B          	movff	fsr1h,??_service+5
 10639  0024E8  CFD9 F01C          	movff	fsr2l,??_service+6
 10640  0024EC  CFDA F01D          	movff	fsr2h,??_service+7
 10641  0024F0  CFF3 F01E          	movff	prodl,??_service+8
 10642  0024F4  CFF4 F01F          	movff	prodh,??_service+9
 10643  0024F8  CFF6 F020          	movff	tblptrl,??_service+10
 10644  0024FC  CFF7 F021          	movff	tblptrh,??_service+11
 10645  002500  CFF8 F022          	movff	tblptru,??_service+12
 10646  002504  CFF5 F023          	movff	tablat,??_service+13
 10647                           
 10648                           ;main.c: 237: servoInterruptService();
 10649  002508  EC3D  F00A         	call	_servoInterruptService	;wreg free
 10650                           
 10651                           ;main.c: 240: if(INT0IF){ INT0IF = 0;
 10652  00250C  A2F2               	btfss	intcon,1,c	;volatile
 10653  00250E  D006               	goto	i2l4566
 10654  002510  92F2               	bcf	intcon,1,c	;volatile
 10655                           
 10656                           ;main.c: 241: batteryDetected = 1;
 10657  002512  0E00               	movlw	0
 10658  002514  0100               	movlb	0	; () banked
 10659  002516  6FFE               	movwf	(_batteryDetected+1)& (0+255),b
 10660  002518  0E01               	movlw	1
 10661  00251A  6FFD               	movwf	_batteryDetected& (0+255),b
 10662  00251C                     i2l4566:
 10663                           
 10664                           ;main.c: 242: }
 10665                           ;main.c: 245: if(INT1IF){INT1IF = 0;
 10666  00251C  A0F0               	btfss	intcon3,0,c	;volatile
 10667  00251E  D003               	goto	i2l134
 10668  002520  90F0               	bcf	intcon3,0,c	;volatile
 10669                           
 10670                           ;main.c: 246: keyPressedInterruptService();
 10671  002522  ECCF  F016         	call	_keyPressedInterruptService	;wreg free
 10672  002526                     i2l134:
 10673  002526  C023  FFF5         	movff	??_service+13,tablat
 10674  00252A  C022  FFF8         	movff	??_service+12,tblptru
 10675  00252E  C021  FFF7         	movff	??_service+11,tblptrh
 10676  002532  C020  FFF6         	movff	??_service+10,tblptrl
 10677  002536  C01F  FFF4         	movff	??_service+9,prodh
 10678  00253A  C01E  FFF3         	movff	??_service+8,prodl
 10679  00253E  C01D  FFDA         	movff	??_service+7,fsr2h
 10680  002542  C01C  FFD9         	movff	??_service+6,fsr2l
 10681  002546  C01B  FFE2         	movff	??_service+5,fsr1h
 10682  00254A  C01A  FFE1         	movff	??_service+4,fsr1l
 10683  00254E  C019  FFEA         	movff	??_service+3,fsr0h
 10684  002552  C018  FFE9         	movff	??_service+2,fsr0l
 10685  002556  C017  FFFB         	movff	??_service+1,pclatu
 10686  00255A  C016  FFFA         	movff	??_service,pclath
 10687  00255E  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10688  002560  0011               	retfie		f
 10689  002562                     __end_of_service:
 10690                           	opt stack 0
 10691                           pclatu	equ	0xFFB
 10692                           pclath	equ	0xFFA
 10693                           tblptru	equ	0xFF8
 10694                           tblptrh	equ	0xFF7
 10695                           tblptrl	equ	0xFF6
 10696                           tablat	equ	0xFF5
 10697                           prodh	equ	0xFF4
 10698                           prodl	equ	0xFF3
 10699                           intcon	equ	0xFF2
 10700                           intcon3	equ	0xFF0
 10701                           postinc0	equ	0xFEE
 10702                           fsr0h	equ	0xFEA
 10703                           fsr0l	equ	0xFE9
 10704                           wreg	equ	0xFE8
 10705                           postdec1	equ	0xFE5
 10706                           plusw1	equ	0xFE3
 10707                           fsr1h	equ	0xFE2
 10708                           fsr1l	equ	0xFE1
 10709                           indf2	equ	0xFDF
 10710                           postinc2	equ	0xFDE
 10711                           postdec2	equ	0xFDD
 10712                           plusw2	equ	0xFDB
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function _servoInterruptService *****************
 10718 ;; Defined at:
 10719 ;;		line 53 in file "servo.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;		None
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;  i               2   19[COMRAM] int 
 10724 ;;  flags           8   11[COMRAM] int [4]
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      void 
 10727 ;; Registers used:
 10728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10736 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10737 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10738 ;;Total ram usage:       12 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    1
 10741 ;; This function calls:
 10742 ;;		i2_digitalRead
 10743 ;;		i2_digitalWrite
 10744 ;;		i2_startTimer
 10745 ;; This function is called by:
 10746 ;;		_service
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           	psect	text49
 10751  00147A                     __ptext49:
 10752                           	opt stack 0
 10753  00147A                     _servoInterruptService:
 10754                           	opt stack 21
 10755                           
 10756                           ;servo.c: 55: int flags[4];
 10757                           ;servo.c: 56: flags[0] = TMR0IF;
 10758                           
 10759                           ;incstack = 0
 10760  00147A  A4F2               	btfss	intcon,2,c	;volatile
 10761  00147C  D002               	goto	i2u396_40
 10762  00147E  0E01               	movlw	1
 10763  001480  D001               	goto	i2u397_40
 10764  001482                     i2u396_40:
 10765  001482  0E00               	movlw	0
 10766  001484                     i2u397_40:
 10767  001484  6E0C               	movwf	servoInterruptService@flags,c
 10768  001486  6A0D               	clrf	servoInterruptService@flags+1,c
 10769                           
 10770                           ;servo.c: 57: flags[1] = TMR1IF;
 10771  001488  A09E               	btfss	3998,0,c	;volatile
 10772  00148A  D002               	goto	i2u398_40
 10773  00148C  0E01               	movlw	1
 10774  00148E  D001               	goto	i2u399_40
 10775  001490                     i2u398_40:
 10776  001490  0E00               	movlw	0
 10777  001492                     i2u399_40:
 10778  001492  6E0E               	movwf	servoInterruptService@flags+2,c
 10779  001494  6A0F               	clrf	servoInterruptService@flags+3,c
 10780                           
 10781                           ;servo.c: 58: flags[2] = TMR2IF;
 10782  001496  A29E               	btfss	3998,1,c	;volatile
 10783  001498  D002               	goto	i2u400_40
 10784  00149A  0E01               	movlw	1
 10785  00149C  D001               	goto	i2u401_40
 10786  00149E                     i2u400_40:
 10787  00149E  0E00               	movlw	0
 10788  0014A0                     i2u401_40:
 10789  0014A0  6E10               	movwf	servoInterruptService@flags+4,c
 10790  0014A2  6A11               	clrf	servoInterruptService@flags+5,c
 10791                           
 10792                           ;servo.c: 59: flags[3] = TMR3IF;
 10793  0014A4  A2A1               	btfss	4001,1,c	;volatile
 10794  0014A6  D002               	goto	i2u402_40
 10795  0014A8  0E01               	movlw	1
 10796  0014AA  D001               	goto	i2u403_40
 10797  0014AC                     i2u402_40:
 10798  0014AC  0E00               	movlw	0
 10799  0014AE                     i2u403_40:
 10800  0014AE  6E12               	movwf	servoInterruptService@flags+6,c
 10801  0014B0  6A13               	clrf	servoInterruptService@flags+7,c
 10802                           
 10803                           ;servo.c: 61: for(int i = 0; i < 4; i++){
 10804  0014B2  0E00               	movlw	0
 10805  0014B4  6E15               	movwf	servoInterruptService@i+1,c
 10806  0014B6  0E00               	movlw	0
 10807  0014B8  6E14               	movwf	servoInterruptService@i,c
 10808  0014BA  BE15               	btfsc	servoInterruptService@i+1,7,c
 10809  0014BC  D008               	goto	i2l4504
 10810  0014BE  5015               	movf	servoInterruptService@i+1,w,c
 10811  0014C0  E105               	bnz	i2u404_40
 10812  0014C2  0E04               	movlw	4
 10813  0014C4  5C14               	subwf	servoInterruptService@i,w,c
 10814  0014C6  B0D8               	btfsc	status,0,c
 10815  0014C8  0012               	return	
 10816  0014CA  D001               	goto	i2l4504
 10817  0014CC                     i2u404_40:
 10818  0014CC  0012               	return	
 10819  0014CE                     i2l4504:
 10820                           
 10821                           ;servo.c: 62: if(flags[i]){
 10822  0014CE  90D8               	bcf	status,0,c
 10823  0014D0  3414               	rlcf	servoInterruptService@i,w,c
 10824  0014D2  6ED9               	movwf	fsr2l,c
 10825  0014D4  3415               	rlcf	servoInterruptService@i+1,w,c
 10826  0014D6  6EDA               	movwf	fsr2h,c
 10827  0014D8  0E0C               	movlw	low servoInterruptService@flags
 10828  0014DA  26D9               	addwf	fsr2l,f,c
 10829  0014DC  0E00               	movlw	high servoInterruptService@flags
 10830  0014DE  22DA               	addwfc	fsr2h,f,c
 10831  0014E0  50DE               	movf	postinc2,w,c
 10832  0014E2  10DE               	iorwf	postinc2,w,c
 10833  0014E4  B4D8               	btfsc	status,2,c
 10834  0014E6  D08D               	goto	i2l4518
 10835                           
 10836                           ;servo.c: 64: if(digitalRead(servo[i])){
 10837  0014E8  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 10838  0014EC  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 10839  0014F0  90D8               	bcf	status,0,c
 10840  0014F2  360A               	rlcf	??_servoInterruptService,f,c
 10841  0014F4  360B               	rlcf	??_servoInterruptService+1,f,c
 10842  0014F6  90D8               	bcf	status,0,c
 10843  0014F8  360A               	rlcf	??_servoInterruptService,f,c
 10844  0014FA  360B               	rlcf	??_servoInterruptService+1,f,c
 10845  0014FC  0E3F               	movlw	low _servo
 10846  0014FE  240A               	addwf	??_servoInterruptService,w,c
 10847  001500  6E01               	movwf	i2digitalRead@pin,c
 10848  001502  0E01               	movlw	high _servo
 10849  001504  200B               	addwfc	??_servoInterruptService+1,w,c
 10850  001506  6E02               	movwf	i2digitalRead@pin+1,c
 10851  001508  EC43  F010         	call	i2_digitalRead	;wreg free
 10852  00150C  5001               	movf	?i2_digitalRead,w,c
 10853  00150E  1002               	iorwf	?i2_digitalRead+1,w,c
 10854  001510  B4D8               	btfsc	status,2,c
 10855  001512  D025               	goto	i2l4512
 10856                           
 10857                           ;servo.c: 65: startTimer(i,15535);
 10858  001514  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 10859  001518  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 10860  00151C  0EAF               	movlw	175
 10861  00151E  6E03               	movwf	i2startTimer@val,c
 10862  001520  0E3C               	movlw	60
 10863  001522  6E04               	movwf	i2startTimer@val+1,c
 10864  001524  0E00               	movlw	0
 10865  001526  6E05               	movwf	i2startTimer@val+2,c
 10866  001528  0E00               	movlw	0
 10867  00152A  6E06               	movwf	i2startTimer@val+3,c
 10868  00152C  EC16  F015         	call	i2_startTimer	;wreg free
 10869                           
 10870                           ;servo.c: 66: digitalWrite(servo[i],0);
 10871  001530  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 10872  001534  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 10873  001538  90D8               	bcf	status,0,c
 10874  00153A  360A               	rlcf	??_servoInterruptService,f,c
 10875  00153C  360B               	rlcf	??_servoInterruptService+1,f,c
 10876  00153E  90D8               	bcf	status,0,c
 10877  001540  360A               	rlcf	??_servoInterruptService,f,c
 10878  001542  360B               	rlcf	??_servoInterruptService+1,f,c
 10879  001544  0E3F               	movlw	low _servo
 10880  001546  240A               	addwf	??_servoInterruptService,w,c
 10881  001548  6E01               	movwf	i2digitalWrite@pin,c
 10882  00154A  0E01               	movlw	high _servo
 10883  00154C  200B               	addwfc	??_servoInterruptService+1,w,c
 10884  00154E  6E02               	movwf	i2digitalWrite@pin+1,c
 10885  001550  0E00               	movlw	0
 10886  001552  6E04               	movwf	i2digitalWrite@val+1,c
 10887  001554  0E00               	movlw	0
 10888  001556  6E03               	movwf	i2digitalWrite@val,c
 10889  001558  EC18  F011         	call	i2_digitalWrite	;wreg free
 10890                           
 10891                           ;servo.c: 67: }
 10892  00155C  D03D               	goto	i2l4516
 10893  00155E                     i2l4512:
 10894                           
 10895                           ;servo.c: 68: else{
 10896                           ;servo.c: 69: startTimer(i, pulse[i]);
 10897  00155E  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 10898  001562  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 10899  001566  0E2F               	movlw	low _pulse
 10900  001568  6E0A               	movwf	??_servoInterruptService& (0+255),c
 10901  00156A  0E01               	movlw	high _pulse
 10902  00156C  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
 10903  00156E  90D8               	bcf	status,0,c
 10904  001570  3414               	rlcf	servoInterruptService@i,w,c
 10905  001572  6ED9               	movwf	fsr2l,c
 10906  001574  3415               	rlcf	servoInterruptService@i+1,w,c
 10907  001576  6EDA               	movwf	fsr2h,c
 10908  001578  90D8               	bcf	status,0,c
 10909  00157A  36D9               	rlcf	fsr2l,f,c
 10910  00157C  36DA               	rlcf	fsr2h,f,c
 10911  00157E  500A               	movf	??_servoInterruptService,w,c
 10912  001580  26D9               	addwf	fsr2l,f,c
 10913  001582  500B               	movf	??_servoInterruptService+1,w,c
 10914  001584  22DA               	addwfc	fsr2h,f,c
 10915  001586  CFDE F003          	movff	postinc2,i2startTimer@val
 10916  00158A  CFDE F004          	movff	postinc2,i2startTimer@val+1
 10917  00158E  CFDE F005          	movff	postinc2,i2startTimer@val+2
 10918  001592  CFDE F006          	movff	postinc2,i2startTimer@val+3
 10919  001596  EC16  F015         	call	i2_startTimer	;wreg free
 10920                           
 10921                           ;servo.c: 70: digitalWrite(servo[i],1);
 10922  00159A  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 10923  00159E  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 10924  0015A2  90D8               	bcf	status,0,c
 10925  0015A4  360A               	rlcf	??_servoInterruptService,f,c
 10926  0015A6  360B               	rlcf	??_servoInterruptService+1,f,c
 10927  0015A8  90D8               	bcf	status,0,c
 10928  0015AA  360A               	rlcf	??_servoInterruptService,f,c
 10929  0015AC  360B               	rlcf	??_servoInterruptService+1,f,c
 10930  0015AE  0E3F               	movlw	low _servo
 10931  0015B0  240A               	addwf	??_servoInterruptService,w,c
 10932  0015B2  6E01               	movwf	i2digitalWrite@pin,c
 10933  0015B4  0E01               	movlw	high _servo
 10934  0015B6  200B               	addwfc	??_servoInterruptService+1,w,c
 10935  0015B8  6E02               	movwf	i2digitalWrite@pin+1,c
 10936  0015BA  0E00               	movlw	0
 10937  0015BC  6E04               	movwf	i2digitalWrite@val+1,c
 10938  0015BE  0E01               	movlw	1
 10939  0015C0  6E03               	movwf	i2digitalWrite@val,c
 10940  0015C2  EC18  F011         	call	i2_digitalWrite	;wreg free
 10941                           
 10942                           ;servo.c: 71: }
 10943                           ;servo.c: 74: switch(i){
 10944  0015C6  D008               	goto	i2l4516
 10945  0015C8                     i2l510:
 10946  0015C8  94F2               	bcf	intcon,2,c	;volatile
 10947  0015CA  D01B               	goto	i2l4518
 10948  0015CC                     i2l512:
 10949  0015CC  909E               	bcf	3998,0,c	;volatile
 10950  0015CE  D019               	goto	i2l4518
 10951  0015D0                     i2l513:
 10952  0015D0  929E               	bcf	3998,1,c	;volatile
 10953  0015D2  D017               	goto	i2l4518
 10954  0015D4                     i2l514:
 10955  0015D4  92A1               	bcf	4001,1,c	;volatile
 10956                           
 10957                           ;servo.c: 79: }
 10958  0015D6  D015               	goto	i2l4518
 10959  0015D8                     i2l4516:
 10960  0015D8  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 10961  0015DC  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 10962                           
 10963                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10964                           ; Switch size 1, requested type "space"
 10965                           ; Number of cases is 1, Range of values is 0 to 0
 10966                           ; switch strategies available:
 10967                           ; Name         Instructions Cycles
 10968                           ; simple_byte            4     3 (average)
 10969                           ;	Chosen strategy is simple_byte
 10970  0015E0  500B               	movf	??_servoInterruptService+1,w,c
 10971  0015E2  0A00               	xorlw	0	; case 0
 10972  0015E4  A4D8               	btfss	status,2,c
 10973  0015E6  D00D               	goto	i2l4518
 10974                           
 10975                           ; Switch size 1, requested type "space"
 10976                           ; Number of cases is 4, Range of values is 0 to 3
 10977                           ; switch strategies available:
 10978                           ; Name         Instructions Cycles
 10979                           ; simple_byte           13     7 (average)
 10980                           ;	Chosen strategy is simple_byte
 10981  0015E8  500A               	movf	??_servoInterruptService,w,c
 10982  0015EA  0A00               	xorlw	0	; case 0
 10983  0015EC  B4D8               	btfsc	status,2,c
 10984  0015EE  D7EC               	goto	i2l510
 10985  0015F0  0A01               	xorlw	1	; case 1
 10986  0015F2  B4D8               	btfsc	status,2,c
 10987  0015F4  D7EB               	goto	i2l512
 10988  0015F6  0A03               	xorlw	3	; case 2
 10989  0015F8  B4D8               	btfsc	status,2,c
 10990  0015FA  D7EA               	goto	i2l513
 10991  0015FC  0A01               	xorlw	1	; case 3
 10992  0015FE  B4D8               	btfsc	status,2,c
 10993  001600  D7E9               	goto	i2l514
 10994  001602                     i2l4518:
 10995  001602  4A14               	infsnz	servoInterruptService@i,f,c
 10996  001604  2A15               	incf	servoInterruptService@i+1,f,c
 10997  001606  BE15               	btfsc	servoInterruptService@i+1,7,c
 10998  001608  D762               	goto	i2l4504
 10999  00160A  5015               	movf	servoInterruptService@i+1,w,c
 11000  00160C  E101               	bnz	i2l515
 11001  00160E  D759               	goto	L5
 11002  001610                     i2l515:
 11003  001610  0012               	return		;funcret
 11004  001612                     __end_of_servoInterruptService:
 11005                           	opt stack 0
 11006                           pclatu	equ	0xFFB
 11007                           pclath	equ	0xFFA
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           intcon3	equ	0xFF0
 11016                           postinc0	equ	0xFEE
 11017                           fsr0h	equ	0xFEA
 11018                           fsr0l	equ	0xFE9
 11019                           wreg	equ	0xFE8
 11020                           postdec1	equ	0xFE5
 11021                           plusw1	equ	0xFE3
 11022                           fsr1h	equ	0xFE2
 11023                           fsr1l	equ	0xFE1
 11024                           indf2	equ	0xFDF
 11025                           postinc2	equ	0xFDE
 11026                           postdec2	equ	0xFDD
 11027                           plusw2	equ	0xFDB
 11028                           fsr2h	equ	0xFDA
 11029                           fsr2l	equ	0xFD9
 11030                           status	equ	0xFD8
 11031                           
 11032 ;; *************** function i2_startTimer *****************
 11033 ;; Defined at:
 11034 ;;		line 75 in file "timer.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;  timer           2    0[COMRAM] int 
 11037 ;;  val             4    2[COMRAM] long 
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;		None
 11040 ;; Return value:  Size  Location     Type
 11041 ;;                  1    wreg      void 
 11042 ;; Registers used:
 11043 ;;		wreg, status,2, status,0
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11049 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11051 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11052 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11053 ;;Total ram usage:        8 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; This function calls:
 11056 ;;		Nothing
 11057 ;; This function is called by:
 11058 ;;		_servoInterruptService
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           	psect	text50
 11063  002A2C                     __ptext50:
 11064                           	opt stack 0
 11065  002A2C                     i2_startTimer:
 11066                           	opt stack 21
 11067                           
 11068                           ;timer.c: 76: switch(timer){
 11069                           
 11070                           ;incstack = 0
 11071  002A2C  D012               	goto	i2l4344
 11072  002A2E                     i2l372:
 11073                           
 11074                           ;timer.c: 78: TMR0H = val>>8;
 11075  002A2E  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 11076                           
 11077                           ;timer.c: 79: TMR0L = val;
 11078  002A32  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
 11079                           
 11080                           ;timer.c: 80: T0CON |= 1<<7;
 11081  002A36  8ED5               	bsf	4053,7,c	;volatile
 11082                           
 11083                           ;timer.c: 81: break;
 11084  002A38  0012               	return	
 11085  002A3A                     i2l374:
 11086                           
 11087                           ;timer.c: 83: TMR1H = val>>8;
 11088  002A3A  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 11089                           
 11090                           ;timer.c: 84: TMR1L = val;
 11091  002A3E  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
 11092                           
 11093                           ;timer.c: 85: T1CON |= 1<<0;
 11094  002A42  80CD               	bsf	4045,0,c	;volatile
 11095                           
 11096                           ;timer.c: 86: break;
 11097  002A44  0012               	return	
 11098  002A46                     i2l375:
 11099                           
 11100                           ;timer.c: 88: TMR3H = val>>8;
 11101  002A46  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 11102                           
 11103                           ;timer.c: 89: TMR3L = val;
 11104  002A4A  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
 11105                           
 11106                           ;timer.c: 90: T3CON |= 1<<0;
 11107  002A4E  80B1               	bsf	4017,0,c	;volatile
 11108                           
 11109                           ;timer.c: 91: }
 11110  002A50  0012               	return	
 11111  002A52                     i2l4344:
 11112  002A52  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
 11113  002A56  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
 11114                           
 11115                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11116                           ; Switch size 1, requested type "space"
 11117                           ; Number of cases is 1, Range of values is 0 to 0
 11118                           ; switch strategies available:
 11119                           ; Name         Instructions Cycles
 11120                           ; simple_byte            4     3 (average)
 11121                           ;	Chosen strategy is simple_byte
 11122  002A5A  5008               	movf	??i2_startTimer+1,w,c
 11123  002A5C  0A00               	xorlw	0	; case 0
 11124  002A5E  A4D8               	btfss	status,2,c
 11125  002A60  0012               	return	
 11126                           
 11127                           ; Switch size 1, requested type "space"
 11128                           ; Number of cases is 3, Range of values is 0 to 3
 11129                           ; switch strategies available:
 11130                           ; Name         Instructions Cycles
 11131                           ; simple_byte           10     6 (average)
 11132                           ;	Chosen strategy is simple_byte
 11133  002A62  5007               	movf	??i2_startTimer,w,c
 11134  002A64  0A00               	xorlw	0	; case 0
 11135  002A66  B4D8               	btfsc	status,2,c
 11136  002A68  D7E2               	goto	i2l372
 11137  002A6A  0A01               	xorlw	1	; case 1
 11138  002A6C  B4D8               	btfsc	status,2,c
 11139  002A6E  D7E5               	goto	i2l374
 11140  002A70  0A02               	xorlw	2	; case 3
 11141  002A72  A4D8               	btfss	status,2,c
 11142  002A74  0012               	return	
 11143  002A76  D7E7               	goto	i2l375
 11144  002A78                     __end_ofi2_startTimer:
 11145                           	opt stack 0
 11146                           pclatu	equ	0xFFB
 11147                           pclath	equ	0xFFA
 11148                           tblptru	equ	0xFF8
 11149                           tblptrh	equ	0xFF7
 11150                           tblptrl	equ	0xFF6
 11151                           tablat	equ	0xFF5
 11152                           prodh	equ	0xFF4
 11153                           prodl	equ	0xFF3
 11154                           intcon	equ	0xFF2
 11155                           intcon3	equ	0xFF0
 11156                           postinc0	equ	0xFEE
 11157                           fsr0h	equ	0xFEA
 11158                           fsr0l	equ	0xFE9
 11159                           wreg	equ	0xFE8
 11160                           postdec1	equ	0xFE5
 11161                           plusw1	equ	0xFE3
 11162                           fsr1h	equ	0xFE2
 11163                           fsr1l	equ	0xFE1
 11164                           indf2	equ	0xFDF
 11165                           postinc2	equ	0xFDE
 11166                           postdec2	equ	0xFDD
 11167                           plusw2	equ	0xFDB
 11168                           fsr2h	equ	0xFDA
 11169                           fsr2l	equ	0xFD9
 11170                           status	equ	0xFD8
 11171                           
 11172 ;; *************** function i2_digitalWrite *****************
 11173 ;; Defined at:
 11174 ;;		line 53 in file "iopin.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;  pin             2    0[COMRAM] PTR int 
 11177 ;;		 -> servo(16), AA_float(4), cylinderMotor(4), 
 11178 ;;  val             2    2[COMRAM] int 
 11179 ;; Auto vars:     Size  Location     Type
 11180 ;;  digitalWrite    2    7[COMRAM] int 
 11181 ;; Return value:  Size  Location     Type
 11182 ;;                  1    wreg      void 
 11183 ;; Registers used:
 11184 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11185 ;; Tracked objects:
 11186 ;;		On entry : 0/0
 11187 ;;		On exit  : 0/0
 11188 ;;		Unchanged: 0/0
 11189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11190 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11191 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11192 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11193 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;Total ram usage:        9 bytes
 11195 ;; Hardware stack levels used:    1
 11196 ;; This function calls:
 11197 ;;		Nothing
 11198 ;; This function is called by:
 11199 ;;		_servoInterruptService
 11200 ;; This function uses a non-reentrant model
 11201 ;;
 11202                           
 11203                           	psect	text51
 11204  002230                     __ptext51:
 11205                           	opt stack 0
 11206  002230                     i2_digitalWrite:
 11207                           	opt stack 21
 11208                           
 11209                           ;iopin.c: 54: int p = 1 << pin[1];
 11210                           
 11211                           ;incstack = 0
 11212  002230  EE20 F002          	lfsr	2,2
 11213  002234  5001               	movf	i2digitalWrite@pin,w,c
 11214  002236  26D9               	addwf	fsr2l,f,c
 11215  002238  5002               	movf	i2digitalWrite@pin+1,w,c
 11216  00223A  22DA               	addwfc	fsr2h,f,c
 11217  00223C  50DF               	movf	indf2,w,c
 11218  00223E  6E05               	movwf	??i2_digitalWrite& (0+255),c
 11219  002240  0E01               	movlw	1
 11220  002242  6E06               	movwf	(??i2_digitalWrite+1)& (0+255),c
 11221  002244  0E00               	movlw	0
 11222  002246  6E07               	movwf	(??i2_digitalWrite+2)& (0+255),c
 11223  002248  2A05               	incf	??i2_digitalWrite,f,c
 11224  00224A  D003               	goto	i2u369_44
 11225  00224C                     i2u369_45:
 11226  00224C  90D8               	bcf	status,0,c
 11227  00224E  3606               	rlcf	??i2_digitalWrite+1,f,c
 11228  002250  3607               	rlcf	??i2_digitalWrite+2,f,c
 11229  002252                     i2u369_44:
 11230  002252  2E05               	decfsz	??i2_digitalWrite,f,c
 11231  002254  D7FB               	goto	i2u369_45
 11232  002256  C006  F008         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 11233  00225A  C007  F009         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 11234                           
 11235                           ;iopin.c: 55: if(val == 0){
 11236  00225E  5003               	movf	i2digitalWrite@val,w,c
 11237  002260  1004               	iorwf	i2digitalWrite@val+1,w,c
 11238  002262  A4D8               	btfss	status,2,c
 11239  002264  D02B               	goto	i2l4330
 11240                           
 11241                           ;iopin.c: 56: p ^= 0xff;
 11242  002266  0EFF               	movlw	255
 11243  002268  1A08               	xorwf	i2digitalWrite@p,f,c
 11244                           
 11245                           ;iopin.c: 57: }
 11246                           ;iopin.c: 59: switch(pin[0]){
 11247  00226A  D028               	goto	i2l4330
 11248  00226C                     i2l4306:
 11249  00226C  0403               	decf	i2digitalWrite@val,w,c
 11250  00226E  1004               	iorwf	i2digitalWrite@val+1,w,c
 11251  002270  A4D8               	btfss	status,2,c
 11252  002272  D003               	goto	i2l4310
 11253  002274  5008               	movf	i2digitalWrite@p,w,c
 11254  002276  1289               	iorwf	3977,f,c	;volatile
 11255  002278  0012               	return	
 11256  00227A                     i2l4310:
 11257                           
 11258                           ;iopin.c: 61: else LATA &= p;
 11259  00227A  5008               	movf	i2digitalWrite@p,w,c
 11260  00227C  1689               	andwf	3977,f,c	;volatile
 11261                           
 11262                           ;iopin.c: 62: break;
 11263  00227E  0012               	return	
 11264  002280                     i2l4312:
 11265  002280  0403               	decf	i2digitalWrite@val,w,c
 11266  002282  1004               	iorwf	i2digitalWrite@val+1,w,c
 11267  002284  A4D8               	btfss	status,2,c
 11268  002286  D003               	goto	i2l4316
 11269  002288  5008               	movf	i2digitalWrite@p,w,c
 11270  00228A  128A               	iorwf	3978,f,c	;volatile
 11271  00228C  0012               	return	
 11272  00228E                     i2l4316:
 11273                           
 11274                           ;iopin.c: 64: else LATB &= p;
 11275  00228E  5008               	movf	i2digitalWrite@p,w,c
 11276  002290  168A               	andwf	3978,f,c	;volatile
 11277                           
 11278                           ;iopin.c: 65: break;
 11279  002292  0012               	return	
 11280  002294                     i2l4318:
 11281  002294  0403               	decf	i2digitalWrite@val,w,c
 11282  002296  1004               	iorwf	i2digitalWrite@val+1,w,c
 11283  002298  A4D8               	btfss	status,2,c
 11284  00229A  D003               	goto	i2l4322
 11285  00229C  5008               	movf	i2digitalWrite@p,w,c
 11286  00229E  128B               	iorwf	3979,f,c	;volatile
 11287  0022A0  0012               	return	
 11288  0022A2                     i2l4322:
 11289                           
 11290                           ;iopin.c: 67: else LATC &= p;
 11291  0022A2  5008               	movf	i2digitalWrite@p,w,c
 11292  0022A4  168B               	andwf	3979,f,c	;volatile
 11293                           
 11294                           ;iopin.c: 68: break;
 11295  0022A6  0012               	return	
 11296  0022A8                     i2l4324:
 11297  0022A8  0403               	decf	i2digitalWrite@val,w,c
 11298  0022AA  1004               	iorwf	i2digitalWrite@val+1,w,c
 11299  0022AC  A4D8               	btfss	status,2,c
 11300  0022AE  D003               	goto	i2l4328
 11301  0022B0  5008               	movf	i2digitalWrite@p,w,c
 11302  0022B2  128C               	iorwf	3980,f,c	;volatile
 11303  0022B4  0012               	return	
 11304  0022B6                     i2l4328:
 11305                           
 11306                           ;iopin.c: 70: else LATD &= p;
 11307  0022B6  5008               	movf	i2digitalWrite@p,w,c
 11308  0022B8  168C               	andwf	3980,f,c	;volatile
 11309                           
 11310                           ;iopin.c: 71: }
 11311  0022BA  0012               	return	
 11312  0022BC                     i2l4330:
 11313  0022BC  C001  FFD9         	movff	i2digitalWrite@pin,fsr2l
 11314  0022C0  C002  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 11315  0022C4  CFDE F005          	movff	postinc2,??i2_digitalWrite
 11316  0022C8  CFDD F006          	movff	postdec2,??i2_digitalWrite+1
 11317                           
 11318                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11319                           ; Switch size 1, requested type "space"
 11320                           ; Number of cases is 1, Range of values is 0 to 0
 11321                           ; switch strategies available:
 11322                           ; Name         Instructions Cycles
 11323                           ; simple_byte            4     3 (average)
 11324                           ;	Chosen strategy is simple_byte
 11325  0022CC  5006               	movf	??i2_digitalWrite+1,w,c
 11326  0022CE  0A00               	xorlw	0	; case 0
 11327  0022D0  A4D8               	btfss	status,2,c
 11328  0022D2  0012               	return	
 11329                           
 11330                           ; Switch size 1, requested type "space"
 11331                           ; Number of cases is 4, Range of values is 0 to 3
 11332                           ; switch strategies available:
 11333                           ; Name         Instructions Cycles
 11334                           ; simple_byte           13     7 (average)
 11335                           ;	Chosen strategy is simple_byte
 11336  0022D4  5005               	movf	??i2_digitalWrite,w,c
 11337  0022D6  0A00               	xorlw	0	; case 0
 11338  0022D8  B4D8               	btfsc	status,2,c
 11339  0022DA  D7C8               	goto	i2l4306
 11340  0022DC  0A01               	xorlw	1	; case 1
 11341  0022DE  B4D8               	btfsc	status,2,c
 11342  0022E0  D7CF               	goto	i2l4312
 11343  0022E2  0A03               	xorlw	3	; case 2
 11344  0022E4  B4D8               	btfsc	status,2,c
 11345  0022E6  D7D6               	goto	i2l4318
 11346  0022E8  0A01               	xorlw	1	; case 3
 11347  0022EA  A4D8               	btfss	status,2,c
 11348  0022EC  0012               	return	
 11349  0022EE  D7DC               	goto	i2l4324
 11350  0022F0                     __end_ofi2_digitalWrite:
 11351                           	opt stack 0
 11352                           pclatu	equ	0xFFB
 11353                           pclath	equ	0xFFA
 11354                           tblptru	equ	0xFF8
 11355                           tblptrh	equ	0xFF7
 11356                           tblptrl	equ	0xFF6
 11357                           tablat	equ	0xFF5
 11358                           prodh	equ	0xFF4
 11359                           prodl	equ	0xFF3
 11360                           intcon	equ	0xFF2
 11361                           intcon3	equ	0xFF0
 11362                           postinc0	equ	0xFEE
 11363                           fsr0h	equ	0xFEA
 11364                           fsr0l	equ	0xFE9
 11365                           wreg	equ	0xFE8
 11366                           postdec1	equ	0xFE5
 11367                           plusw1	equ	0xFE3
 11368                           fsr1h	equ	0xFE2
 11369                           fsr1l	equ	0xFE1
 11370                           indf2	equ	0xFDF
 11371                           postinc2	equ	0xFDE
 11372                           postdec2	equ	0xFDD
 11373                           plusw2	equ	0xFDB
 11374                           fsr2h	equ	0xFDA
 11375                           fsr2l	equ	0xFD9
 11376                           status	equ	0xFD8
 11377                           
 11378 ;; *************** function i2_digitalRead *****************
 11379 ;; Defined at:
 11380 ;;		line 43 in file "iopin.c"
 11381 ;; Parameters:    Size  Location     Type
 11382 ;;  pin             2    0[COMRAM] PTR int 
 11383 ;;		 -> servo(16), padPin2(4), padPin1(4), 
 11384 ;; Auto vars:     Size  Location     Type
 11385 ;;		None
 11386 ;; Return value:  Size  Location     Type
 11387 ;;                  2    0[COMRAM] int 
 11388 ;; Registers used:
 11389 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11390 ;; Tracked objects:
 11391 ;;		On entry : 0/0
 11392 ;;		On exit  : 0/0
 11393 ;;		Unchanged: 0/0
 11394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11395 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;Total ram usage:        4 bytes
 11400 ;; Hardware stack levels used:    1
 11401 ;; This function calls:
 11402 ;;		Nothing
 11403 ;; This function is called by:
 11404 ;;		_servoInterruptService
 11405 ;; This function uses a non-reentrant model
 11406 ;;
 11407                           
 11408                           	psect	text52
 11409  002086                     __ptext52:
 11410                           	opt stack 0
 11411  002086                     i2_digitalRead:
 11412                           	opt stack 21
 11413                           
 11414                           ;iopin.c: 44: switch(pin[0]){
 11415                           
 11416                           ;incstack = 0
 11417  002086  D058               	goto	i2l4294
 11418  002088                     i2l4276:
 11419  002088  EE20 F002          	lfsr	2,2
 11420  00208C  5001               	movf	i2digitalRead@pin,w,c
 11421  00208E  26D9               	addwf	fsr2l,f,c
 11422  002090  5002               	movf	i2digitalRead@pin+1,w,c
 11423  002092  22DA               	addwfc	fsr2h,f,c
 11424  002094  50DF               	movf	indf2,w,c
 11425  002096  6E03               	movwf	??i2_digitalRead& (0+255),c
 11426  002098  CF80 F004          	movff	3968,??i2_digitalRead+1	;volatile
 11427  00209C  2A03               	incf	??i2_digitalRead,f,c
 11428  00209E  D002               	goto	i2u365_44
 11429  0020A0                     i2u365_45:
 11430  0020A0  90D8               	bcf	status,0,c
 11431  0020A2  3204               	rrcf	??i2_digitalRead+1,f,c
 11432  0020A4                     i2u365_44:
 11433  0020A4  2E03               	decfsz	??i2_digitalRead,f,c
 11434  0020A6  D7FC               	goto	i2u365_45
 11435  0020A8  0E01               	movlw	1
 11436  0020AA  1604               	andwf	??i2_digitalRead+1,f,c
 11437  0020AC  5004               	movf	??i2_digitalRead+1,w,c
 11438  0020AE  6E01               	movwf	?i2_digitalRead,c
 11439  0020B0  6A02               	clrf	?i2_digitalRead+1,c
 11440  0020B2  0012               	return	
 11441  0020B4                     i2l4280:
 11442  0020B4  EE20 F002          	lfsr	2,2
 11443  0020B8  5001               	movf	i2digitalRead@pin,w,c
 11444  0020BA  26D9               	addwf	fsr2l,f,c
 11445  0020BC  5002               	movf	i2digitalRead@pin+1,w,c
 11446  0020BE  22DA               	addwfc	fsr2h,f,c
 11447  0020C0  50DF               	movf	indf2,w,c
 11448  0020C2  6E03               	movwf	??i2_digitalRead& (0+255),c
 11449  0020C4  CF81 F004          	movff	3969,??i2_digitalRead+1	;volatile
 11450  0020C8  2A03               	incf	??i2_digitalRead,f,c
 11451  0020CA  D002               	goto	i2u366_44
 11452  0020CC                     i2u366_45:
 11453  0020CC  90D8               	bcf	status,0,c
 11454  0020CE  3204               	rrcf	??i2_digitalRead+1,f,c
 11455  0020D0                     i2u366_44:
 11456  0020D0  2E03               	decfsz	??i2_digitalRead,f,c
 11457  0020D2  D7FC               	goto	i2u366_45
 11458  0020D4  0E01               	movlw	1
 11459  0020D6  1604               	andwf	??i2_digitalRead+1,f,c
 11460  0020D8  5004               	movf	??i2_digitalRead+1,w,c
 11461  0020DA  6E01               	movwf	?i2_digitalRead,c
 11462  0020DC  6A02               	clrf	?i2_digitalRead+1,c
 11463  0020DE  0012               	return	
 11464  0020E0                     i2l4284:
 11465  0020E0  EE20 F002          	lfsr	2,2
 11466  0020E4  5001               	movf	i2digitalRead@pin,w,c
 11467  0020E6  26D9               	addwf	fsr2l,f,c
 11468  0020E8  5002               	movf	i2digitalRead@pin+1,w,c
 11469  0020EA  22DA               	addwfc	fsr2h,f,c
 11470  0020EC  50DF               	movf	indf2,w,c
 11471  0020EE  6E03               	movwf	??i2_digitalRead& (0+255),c
 11472  0020F0  CF82 F004          	movff	3970,??i2_digitalRead+1	;volatile
 11473  0020F4  2A03               	incf	??i2_digitalRead,f,c
 11474  0020F6  D002               	goto	i2u367_44
 11475  0020F8                     i2u367_45:
 11476  0020F8  90D8               	bcf	status,0,c
 11477  0020FA  3204               	rrcf	??i2_digitalRead+1,f,c
 11478  0020FC                     i2u367_44:
 11479  0020FC  2E03               	decfsz	??i2_digitalRead,f,c
 11480  0020FE  D7FC               	goto	i2u367_45
 11481  002100  0E01               	movlw	1
 11482  002102  1604               	andwf	??i2_digitalRead+1,f,c
 11483  002104  5004               	movf	??i2_digitalRead+1,w,c
 11484  002106  6E01               	movwf	?i2_digitalRead,c
 11485  002108  6A02               	clrf	?i2_digitalRead+1,c
 11486  00210A  0012               	return	
 11487  00210C                     i2l4288:
 11488  00210C  EE20 F002          	lfsr	2,2
 11489  002110  5001               	movf	i2digitalRead@pin,w,c
 11490  002112  26D9               	addwf	fsr2l,f,c
 11491  002114  5002               	movf	i2digitalRead@pin+1,w,c
 11492  002116  22DA               	addwfc	fsr2h,f,c
 11493  002118  50DF               	movf	indf2,w,c
 11494  00211A  6E03               	movwf	??i2_digitalRead& (0+255),c
 11495  00211C  CF83 F004          	movff	3971,??i2_digitalRead+1	;volatile
 11496  002120  2A03               	incf	??i2_digitalRead,f,c
 11497  002122  D002               	goto	i2u368_44
 11498  002124                     i2u368_45:
 11499  002124  90D8               	bcf	status,0,c
 11500  002126  3204               	rrcf	??i2_digitalRead+1,f,c
 11501  002128                     i2u368_44:
 11502  002128  2E03               	decfsz	??i2_digitalRead,f,c
 11503  00212A  D7FC               	goto	i2u368_45
 11504  00212C  0E01               	movlw	1
 11505  00212E  1604               	andwf	??i2_digitalRead+1,f,c
 11506  002130  5004               	movf	??i2_digitalRead+1,w,c
 11507  002132  6E01               	movwf	?i2_digitalRead,c
 11508  002134  6A02               	clrf	?i2_digitalRead+1,c
 11509  002136  0012               	return	
 11510  002138                     i2l4294:
 11511  002138  C001  FFD9         	movff	i2digitalRead@pin,fsr2l
 11512  00213C  C002  FFDA         	movff	i2digitalRead@pin+1,fsr2h
 11513  002140  CFDE F003          	movff	postinc2,??i2_digitalRead
 11514  002144  CFDD F004          	movff	postdec2,??i2_digitalRead+1
 11515                           
 11516                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11517                           ; Switch size 1, requested type "space"
 11518                           ; Number of cases is 1, Range of values is 0 to 0
 11519                           ; switch strategies available:
 11520                           ; Name         Instructions Cycles
 11521                           ; simple_byte            4     3 (average)
 11522                           ;	Chosen strategy is simple_byte
 11523  002148  5004               	movf	??i2_digitalRead+1,w,c
 11524  00214A  0A00               	xorlw	0	; case 0
 11525  00214C  A4D8               	btfss	status,2,c
 11526  00214E  D00D               	goto	i2l267
 11527                           
 11528                           ; Switch size 1, requested type "space"
 11529                           ; Number of cases is 4, Range of values is 0 to 3
 11530                           ; switch strategies available:
 11531                           ; Name         Instructions Cycles
 11532                           ; simple_byte           13     7 (average)
 11533                           ;	Chosen strategy is simple_byte
 11534  002150  5003               	movf	??i2_digitalRead,w,c
 11535  002152  0A00               	xorlw	0	; case 0
 11536  002154  B4D8               	btfsc	status,2,c
 11537  002156  D798               	goto	i2l4276
 11538  002158  0A01               	xorlw	1	; case 1
 11539  00215A  B4D8               	btfsc	status,2,c
 11540  00215C  D7AB               	goto	i2l4280
 11541  00215E  0A03               	xorlw	3	; case 2
 11542  002160  B4D8               	btfsc	status,2,c
 11543  002162  D7BE               	goto	i2l4284
 11544  002164  0A01               	xorlw	1	; case 3
 11545  002166  B4D8               	btfsc	status,2,c
 11546  002168  D7D1               	goto	i2l4288
 11547  00216A                     i2l267:
 11548                           
 11549                           ;iopin.c: 50: return -1;
 11550  00216A  6801               	setf	?i2_digitalRead,c
 11551  00216C  6802               	setf	?i2_digitalRead+1,c
 11552  00216E  0012               	return		;funcret
 11553  002170                     __end_ofi2_digitalRead:
 11554                           	opt stack 0
 11555                           pclatu	equ	0xFFB
 11556                           pclath	equ	0xFFA
 11557                           tblptru	equ	0xFF8
 11558                           tblptrh	equ	0xFF7
 11559                           tblptrl	equ	0xFF6
 11560                           tablat	equ	0xFF5
 11561                           prodh	equ	0xFF4
 11562                           prodl	equ	0xFF3
 11563                           intcon	equ	0xFF2
 11564                           intcon3	equ	0xFF0
 11565                           postinc0	equ	0xFEE
 11566                           fsr0h	equ	0xFEA
 11567                           fsr0l	equ	0xFE9
 11568                           wreg	equ	0xFE8
 11569                           postdec1	equ	0xFE5
 11570                           plusw1	equ	0xFE3
 11571                           fsr1h	equ	0xFE2
 11572                           fsr1l	equ	0xFE1
 11573                           indf2	equ	0xFDF
 11574                           postinc2	equ	0xFDE
 11575                           postdec2	equ	0xFDD
 11576                           plusw2	equ	0xFDB
 11577                           fsr2h	equ	0xFDA
 11578                           fsr2l	equ	0xFD9
 11579                           status	equ	0xFD8
 11580                           
 11581 ;; *************** function _keyPressedInterruptService *****************
 11582 ;; Defined at:
 11583 ;;		line 49 in file "keypad.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;  key             1    0[COMRAM] unsigned char 
 11588 ;; Return value:  Size  Location     Type
 11589 ;;                  1    wreg      void 
 11590 ;; Registers used:
 11591 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11592 ;; Tracked objects:
 11593 ;;		On entry : 0/0
 11594 ;;		On exit  : 0/0
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;Total ram usage:        1 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; This function calls:
 11604 ;;		Nothing
 11605 ;; This function is called by:
 11606 ;;		_service
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           	psect	text53
 11611  002D9E                     __ptext53:
 11612                           	opt stack 0
 11613  002D9E                     _keyPressedInterruptService:
 11614                           	opt stack 22
 11615                           
 11616                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 11617                           
 11618                           ;incstack = 0
 11619  002D9E  3881               	swapf	3969,w,c	;volatile
 11620  002DA0  0B0F               	andlw	15
 11621  002DA2  0B0F               	andlw	15
 11622  002DA4  6E01               	movwf	keyPressedInterruptService@key,c
 11623                           
 11624                           ;keypad.c: 51: lastKey = keys[key];
 11625  002DA6  5001               	movf	keyPressedInterruptService@key,w,c
 11626  002DA8  0D01               	mullw	1
 11627  002DAA  0E69               	movlw	low _keys
 11628  002DAC  24F3               	addwf	prodl,w,c
 11629  002DAE  6EF6               	movwf	tblptrl,c
 11630  002DB0  0EFE               	movlw	high _keys
 11631  002DB2  20F4               	addwfc	prodh,w,c
 11632  002DB4  6EF7               	movwf	tblptrh,c
 11633  002DB6                     	if	0	;There are less than 3 active tblptr bytes
 11634  002DB6                     	endif
 11635  002DB6  0008               	tblrd		*
 11636  002DB8  CFF5 F04B          	movff	tablat,_lastKey
 11637  002DBC  0012               	return		;funcret
 11638  002DBE                     __end_of_keyPressedInterruptService:
 11639                           	opt stack 0
 11640                           pclatu	equ	0xFFB
 11641                           pclath	equ	0xFFA
 11642                           tblptru	equ	0xFF8
 11643                           tblptrh	equ	0xFF7
 11644                           tblptrl	equ	0xFF6
 11645                           tablat	equ	0xFF5
 11646                           prodh	equ	0xFF4
 11647                           prodl	equ	0xFF3
 11648                           intcon	equ	0xFF2
 11649                           intcon3	equ	0xFF0
 11650                           postinc0	equ	0xFEE
 11651                           fsr0h	equ	0xFEA
 11652                           fsr0l	equ	0xFE9
 11653                           wreg	equ	0xFE8
 11654                           postdec1	equ	0xFE5
 11655                           plusw1	equ	0xFE3
 11656                           fsr1h	equ	0xFE2
 11657                           fsr1l	equ	0xFE1
 11658                           indf2	equ	0xFDF
 11659                           postinc2	equ	0xFDE
 11660                           postdec2	equ	0xFDD
 11661                           plusw2	equ	0xFDB
 11662                           fsr2h	equ	0xFDA
 11663                           fsr2l	equ	0xFD9
 11664                           status	equ	0xFD8
 11665                           pclatu	equ	0xFFB
 11666                           pclath	equ	0xFFA
 11667                           tblptru	equ	0xFF8
 11668                           tblptrh	equ	0xFF7
 11669                           tblptrl	equ	0xFF6
 11670                           tablat	equ	0xFF5
 11671                           prodh	equ	0xFF4
 11672                           prodl	equ	0xFF3
 11673                           intcon	equ	0xFF2
 11674                           intcon3	equ	0xFF0
 11675                           postinc0	equ	0xFEE
 11676                           fsr0h	equ	0xFEA
 11677                           fsr0l	equ	0xFE9
 11678                           wreg	equ	0xFE8
 11679                           postdec1	equ	0xFE5
 11680                           plusw1	equ	0xFE3
 11681                           fsr1h	equ	0xFE2
 11682                           fsr1l	equ	0xFE1
 11683                           indf2	equ	0xFDF
 11684                           postinc2	equ	0xFDE
 11685                           postdec2	equ	0xFDD
 11686                           plusw2	equ	0xFDB
 11687                           fsr2h	equ	0xFDA
 11688                           fsr2l	equ	0xFD9
 11689                           status	equ	0xFD8
 11690                           
 11691                           	psect	rparam
 11692  0000                     pclatu	equ	0xFFB
 11693                           pclath	equ	0xFFA
 11694                           tblptru	equ	0xFF8
 11695                           tblptrh	equ	0xFF7
 11696                           tblptrl	equ	0xFF6
 11697                           tablat	equ	0xFF5
 11698                           prodh	equ	0xFF4
 11699                           prodl	equ	0xFF3
 11700                           intcon	equ	0xFF2
 11701                           intcon3	equ	0xFF0
 11702                           postinc0	equ	0xFEE
 11703                           fsr0h	equ	0xFEA
 11704                           fsr0l	equ	0xFE9
 11705                           wreg	equ	0xFE8
 11706                           postdec1	equ	0xFE5
 11707                           plusw1	equ	0xFE3
 11708                           fsr1h	equ	0xFE2
 11709                           fsr1l	equ	0xFE1
 11710                           indf2	equ	0xFDF
 11711                           postinc2	equ	0xFDE
 11712                           postdec2	equ	0xFDD
 11713                           plusw2	equ	0xFDB
 11714                           fsr2h	equ	0xFDA
 11715                           fsr2l	equ	0xFD9
 11716                           status	equ	0xFD8
 11717                           
 11718                           	psect	temp
 11719  00005C                     btemp:
 11720                           	opt stack 0
 11721  00005C                     	ds	1
 11722  0000                     int$flags	set	btemp
 11723                           pclatu	equ	0xFFB
 11724                           pclath	equ	0xFFA
 11725                           tblptru	equ	0xFF8
 11726                           tblptrh	equ	0xFF7
 11727                           tblptrl	equ	0xFF6
 11728                           tablat	equ	0xFF5
 11729                           prodh	equ	0xFF4
 11730                           prodl	equ	0xFF3
 11731                           intcon	equ	0xFF2
 11732                           intcon3	equ	0xFF0
 11733                           postinc0	equ	0xFEE
 11734                           fsr0h	equ	0xFEA
 11735                           fsr0l	equ	0xFE9
 11736                           wreg	equ	0xFE8
 11737                           postdec1	equ	0xFE5
 11738                           plusw1	equ	0xFE3
 11739                           fsr1h	equ	0xFE2
 11740                           fsr1l	equ	0xFE1
 11741                           indf2	equ	0xFDF
 11742                           postinc2	equ	0xFDE
 11743                           postdec2	equ	0xFDD
 11744                           plusw2	equ	0xFDB
 11745                           fsr2h	equ	0xFDA
 11746                           fsr2l	equ	0xFD9
 11747                           status	equ	0xFD8


Data Sizes:
    Strings     381
    Constant    174
    Data        56
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     57      91
    BANK0           128     99     127
    BANK1           256     47      93
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_22(CODE[17]), STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[18]), 
		 -> STR_18(CODE[17]), STR_17(CODE[19]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[9]), STR_9(CODE[8]), STR_8(CODE[24]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[21]), STR_4(CODE[17]), STR_3(CODE[14]), 
		 -> STR_2(CODE[20]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 6
		 -> initServo@timer(BANK1[2]), redirectingServo(BANK1[6]), padServo(BANK0[6]), 

    initServo@motor	PTR int  size(2) Largest target is 6
		 -> redirectingServo(BANK1[6]), padServo(BANK0[6]), conveyorServo(BANK0[6]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 16
		 -> servo(BANK1[16]), AA_float(BANK0[4]), cylinderMotor(BANK0[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 16
		 -> servo(BANK1[16]), padPin2(COMRAM[4]), padPin1(COMRAM[4]), 

    pause@message	PTR unsigned char  size(2) Largest target is 24
		 -> STR_8(CODE[24]), STR_7(CODE[15]), STR_6(CODE[17]), STR_3(CODE[14]), 
		 -> STR_2(CODE[20]), 


Critical Paths under _main in COMRAM

    _angleToPulse->___ftdiv
    ___ftdiv->___altoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _printf->___llmod
    _lcdNewline->_lcdInst
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftdiv
    ___ftadd->___ftdiv
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_initServo
    _pause->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftdiv
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _pause->_printf
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  603283
                       _digitalWrite
                            _initLCD
                          _initServo
                           _pinSetup
                             _printf
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         25    25      0  174936
                                             24 BANK1     23    23      0
                           ___altoft
                            ___ftdiv
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                          _initServo
                           _lcdClear
                              _pause
                             _printf
                         _readKeypad
                           _setAngle
                          _stopServo
 ---------------------------------------------------------------------------------
 (2) _stopServo                                            4     2      2     108
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   58030
                                             77 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _initServo                                           12     8      4   23369
                                             97 BANK0      2     2      0
                                              0 BANK1     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           8     2      6     693
                                             35 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   21522
                                             87 BANK0     10     6      4
                       _angleToPulse
                         _readKeypad (ARG)
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   20690
                                             64 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             53 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2794
                                             43 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             43 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _initTimer                                            4     2      2     185
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1255
                                             35 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     351
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     108
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  346143
                                             78 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   57611
                                             77 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             35 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    38      7   57385
                                             64 BANK0     13     6      7
                                              0 BANK1     24    24      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12847
                                             27 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             39 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12568
                                             27 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2696
                                             49 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5650
                                             12 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             41 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             35 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             35 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             43 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             48 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             35 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     679
                                             49 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4903
                                             49 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             37 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             35 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             35 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     660
                                             35 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             39 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             37 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             35 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             14    14      0    1171
                                             21 COMRAM    14    14      0
         _keyPressedInterruptService
              _servoInterruptService
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1148
                                              9 COMRAM    12    12      0
                      i2_digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     436
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (10) i2_digitalRead                                       4     2      2     136
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _readKeypad (ARG)
     _startTimer
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _initServo
       _initTimer
       _setAngle
         _angleToPulse
           ___altoft
             ___ftpack
             _analogRead (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         _readKeypad (ARG)
       _startTimer
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _readKeypad (ARG)
     _stopServo

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2_digitalRead
     i2_digitalWrite
     i2_startTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2F      5D       7       36.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     63      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     39      5B       1       72.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     137      34        0.0%
DATA                 0      0     137       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 18 17:42:21 2017

                       ___altoft@exp 0034                        ___altoft@sign 0035  
                        _sortBattery 121C                         ___awdiv@sign 002F  
                ___wmul@multiplicand 0034                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                        __CFG_OSC$HS 000000                     _redirectingServo 0157  
                       ___ftadd@exp1 00B0                         ___ftadd@exp2 00AF  
                       ___ftadd@sign 00AE                                  l123 1478  
                                l158 2D6A                                  l194 2C9E  
                                l291 2BCE                                  l267 2080  
                                l372 2996                                  l701 0526  
                                l197 2CAA                                  l365 2AFE  
                                l374 29A2                                  l375 29AE  
                                l673 06A4                      ??_showInterface 003A  
                                l942 1D9A                                  l974 237E  
                                l997 0DBC                         __CFG_CPB$OFF 000000  
                                _PEN 007E2A                         __CFG_CPD$OFF 000000  
                                _SEN 007E28                         ___awmod@sign 0029  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0086                         ___ftdiv@sign 008B  
                       __CFG_WDT$OFF 000000                                 l1001 0DF6  
                               l1003 0E1E                                 l1012 0EF4  
                               l1021 0F1E                                 l1040 1C0C  
                               l1032 1B1C                                 l1116 2772  
                               l1126 28C0                                 l1046 1C72  
                               l1071 2D4C                                 l1039 1BE4  
                               l5100 26F8                                 l5120 282A  
                               l5112 2810                                 l5024 17E4  
                               l5122 2832                                 l5042 1850  
                               l5018 17AA                                 l5124 2836  
                               l5132 2854                                 l5116 281C  
                               l5052 188E                                 l5038 1832  
                               l5320 1C48                                 l5080 26B8  
                               l5136 2862                                 l5128 284A  
                               l5048 1870                                 l5232 11D4  
                               l5224 110C                                 l5402 2592  
                               l5082 26C0                                 l5074 26A2  
                               l5412 25EE                                 l5180 19AE  
                               l5316 1C38                                 l5092 26E0  
                               l5084 26C4                                 l5068 2692  
                               l5252 0B2A                                 l5148 2B9E  
                               l6036 241A                                 l5406 25C2  
                               l5190 19E4                                 l5158 1908  
                               l5430 2734                                 l5342 1CC0  
                               l5326 1C60                                 l5270 0D2E  
                               l5246 0A80                                 l5176 199A  
                               l5336 1CA2                                 l5328 1C6C  
                               l5280 1B7E                                 l5096 26EA  
                               l5264 0C84                                 l5256 0B50  
                               l5520 01BA                                 l5504 010C  
                               l5194 1A00                                 l5186 19CA  
                               l5426 2724                                 l5450 288E  
                               l5188 19DA                                 l5428 2730  
                               l5460 293E                                 l5380 1D70  
                               l5364 1D32                                 l5356 1D02  
                               l5620 0696                                 l5604 054E  
                               l5532 0248                                 l4910 0E04  
                               l5438 2764                                 l5454 28B2  
                               l5446 287E                                 l5462 294A  
                               l5286 1BAA                                 l5614 067A  
                               l5534 025E                                 l5470 0022  
                               l5710 2ACA                                 l4840 2300  
                               l4904 0DCA                                 l5448 288A  
                               l5376 1D60                                 l5632 06F0  
                               l5616 0688                                 l5608 05A0  
                               l5544 02EE                                 l5536 028E  
                               l5528 0222                                 l5480 0050  
                               l5704 2AC0                                 l5720 2ADA  
                               l5800 2A92                                 l5394 2A02  
                               l5386 1D88                                 l5650 0766  
                               l5562 03D8                                 l5538 02A4  
                               l5490 00B2                                 l5474 0038  
                               l5714 2AD2                                 l4852 234C  
                               l4844 230E                                 l4932 0E84  
                               l4916 0E14                                 l5388 1D94  
                               l5652 076C                                 l5636 071A  
                               l5580 044C                                 l5564 03DE  
                               l5548 0314                                 l5484 0068  
                               l5476 0044                                 l5900 1DB0  
                               l4854 236A                                 l4846 2318  
                               l4934 0E92                                 l4926 0E56  
                               l5638 0720                                 l5558 0372  
                               l5478 004A                                 l5902 1DBA  
                               l5822 1FF6                                 l5814 1F9E  
                               l5750 21BA                                 l5734 29BA  
                               l4856 2374                                 l4848 2336  
                               l4952 0F48                                 l4944 0EDA  
                               l4936 0EA0                                 l5672 07EA  
                               l5592 04F4                                 l5576 0424  
                               l5488 0074                                 l5912 1DE4  
                               l5904 1DBE                                 l5832 204E  
                               l5752 21C0                                 l4962 0F96  
                               l4946 0EE8                                 l4938 0EAC  
                               l5674 07FA                                 l5682 08EE  
                               l5666 07B2                                 l5594 0508  
                               l5586 04D8                                 l5826 2022  
                               l5818 1FCA                                 l5762 21E2  
                               l5746 21AC                                 l5770 21FC  
                               l4890 27B2                                 l5676 087A  
                               l5684 0900                                 l5668 07C4  
                               l5588 04E6                                 l5932 1E36  
                               l5916 1DF2                                 l5764 21E8  
                               l5756 21CE                                 l4972 1A46  
                               l5686 0908                                 l5598 052A  
                               l5950 1E84                                 l5942 1E64  
                               l5934 1E3E                                 l5758 21D4  
                               l5790 2A7A                                 l5688 091E  
                               l5928 1E2C                                 l5768 21F6  
                               l4888 27A6                                 l5792 2A80  
                               l5954 1E8E                                 l5946 1E74  
                               l4978 1A7A                                 l5794 2A86  
                               l5956 1E9A                                 l5796 2A8C  
                               l4998 1ADA                                 l5898 1DAC  
                               _EEIF 007D0C                                 STR_1 FFF6  
                               STR_2 FEAE                                 STR_3 FFD7  
                               STR_4 FFB7                                 STR_5 FE99  
                               STR_6 FFA6                                 STR_7 FFC8  
                               STR_8 FE81                                 STR_9 FFEE  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 010C  
                               u4261 0D6A                                 u4271 0D88  
                               u4521 1786                                 _PEIE 007F96  
                               u4541 17C0                                 u5350 051E  
                               u5190 0152                                 u4711 18E4  
                               u4471 1A24                                 u4730 192E  
                               u5195 0146                                 u4491 1A58  
                               u5604 2012                                 u5524 2192  
                               _RCEN 007E2B                                 u5605 200E  
                               u5525 218C                                 u5614 203E  
                               u4735 1924                                 u5615 203A  
                               u4871 1B62                                 u5831 138C  
                               u5584 1FBA                                 u5585 1FB6  
                               u5594 1FE6                                 u4891 1B8E  
                               u5907 2D6E                                 u5595 1FE2  
                               u5917 2B0A                                 u5927 2B3E  
                               u5937 2D82                                 u5947 2D94  
                               u5957 28EA                                 u5967 28F8  
                               u5977 291E                                 u5987 292C  
                               _RSEN 007E29                                 _main 239E  
                       ___ftpack@arg 0024                                 _keys FE69  
                       ___ftpack@exp 0027                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005C                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                        __CFG_MCLRE$ON 000000  
                       ___ftmul@cntr 0099                         ___param_bank 000000  
                       ___ftmul@sign 009A                         ___fttol@exp1 00BF  
                       ___fttol@lval 00BB                 __end_ofi2_startTimer 2A78  
               __end_of_angleToPulse 1770                                ?_main 0001  
                              _ACKEN 007E2C                                _ACKDT 007E2D  
                    __end_of___awdiv 2702                                _EEADR 000FA9  
                    __end_of___ftadd 0FBC                                STR_10 FFE5  
                              STR_11 FEE7                                STR_12 FF95  
                              STR_20 FF40                                STR_21 FF1D  
                              STR_13 FED5                                STR_22 FF84  
                              STR_14 FF62                                STR_23 FF2F  
                              STR_15 FEF9                                STR_16 FF51  
                              STR_17 FEC2                                STR_18 FF73  
                              STR_19 FF0B                      __end_of___awmod 286C  
                    __end_of___ftdiv 1B52              ??_servoInterruptService 000A  
                    __end_of___ftneg 2D5A                      __end_of___lldiv 2784  
                    __end_of___ftmul 18CE                                _T0CON 000FD5  
                    ___awdiv@divisor 002C                                _T1CON 000FCD  
                    __end_of___llmod 28D2                      __end_of___ftsub 2A2C  
                    __end_of___fttol 1A12                                _T2CON 000FCA  
                              _T3CON 000FB1                                i2l134 2526  
                              i2l510 15C8                                i2l512 15CC  
                              i2l513 15D0                                i2l514 15D4  
                              i2l267 216A                                i2l515 1610  
                              i2l372 2A2E                                i2l374 2A3A  
                              i2l375 2A46                      ___awdiv@counter 002E  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR3H 000FB3  
                              _TMR1L 000FCE                                _TMR3L 000FB2  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _PORTD 000F83  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                       ___lltoft@exp 0034                        _conveyorServo 00E9  
                    __end_of_lcdInst 2D9E                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000               servoInterruptService@i 0014  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 2B4A                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 002F                      __end_of_dpowers FDFB  
                              _count 0047                                _scale 093E  
                              _pause 2DD8                        ___ftpack@sign 0028  
                              _servo 013F                                _pulse 012F  
                              _putch 2D5A                                pclath 000FFA  
                              tablat 000FF5                      __end_of_service 2562  
                    __end_of_runMenu 2C2C                                plusw1 000FE3  
                              plusw2 000FDB                      __end_of_runTime 2C52  
                              status 000FD8                       __CFG_PBADEN$ON 000000  
               __end_of_digitalWrite 2230                      __initialization 25F2  
                       __end_of_main 2436                         __end_of_keys FE7A  
                             ??_main 003A                        ___fttol@sign1 00BA  
                      __activetblptr 000002                 __size_of_digitalRead 00EA  
               __size_of__tdiv_to_l_ 0132                      i2digitalWrite@p 0008  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                     __end_of___altoft 27FC  
                   ___llmod@dividend 0031                               ?_scale 009B  
                             _ADRESH 000FC4                               _EEADRH 000FAA  
                             _ADRESL 000FC3                               _EEDATA 000FA8  
                             ?_pause 00CD                               _EECON1 000FA6  
                             _EECON2 000FA7        keyPressedInterruptService@key 0001  
                   ___awdiv@dividend 002A                     __end_of___awtoft 2BC2  
                             ?_putch 0001                     __end_of___ftpack 239E  
                   __end_of___lltoft 2994                               _INT0IE 007F94  
                             _INT0IF 007F91                               _INT1IE 007F83  
                             _INT1IF 007F80                         sortBattery@V 012A  
                             i2l4310 227A                               i2l4312 2280  
                             i2l4322 22A2                               i2l4306 226C  
                             i2l4330 22BC                               i2l4324 22A8  
                             i2l4316 228E                               i2l4318 2294  
                             i2l4280 20B4                               i2l4328 22B6  
                             i2l4344 2A52                               i2l4512 155E  
                             i2l4504 14CE                               i2l4284 20E0  
                             i2l4276 2088                               i2l4516 15D8  
                             i2l4294 2138                               i2l4518 1602  
                             i2l4288 210C                               i2l4566 251C  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR2IF 007CF1                               _TMR3IE 007D01  
                             _TMR3IF 007D09                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9               __size_ofi2_digitalRead 00EA  
                   __end_of_dateTime 2D10                    _angleToPulse$1332 00D0  
                   __end_of_lcdClear 2E1C                       __CFG_XINST$OFF 000000  
                   __end_of__powers_ FE49                               ___ftge 2562  
                   __end_of_mainMenu 2CEA                               ___wmul 2D10  
                          ??___awdiv 002E                            ??___ftadd 00AB  
                     __CFG_STVREN$ON 000000                            ??___awmod 0028  
                          ??___ftdiv 0036                            ??___ftneg 0027  
                          ??___lldiv 002C                            ??___ftmul 0092  
                          ??___llmod 0039                            ??___ftsub 0039  
                          ??___fttol 00B5                               _fround 0FBC  
                             clear_0 2658                               clear_1 266A  
                   ___awdiv@quotient 0030                      ___awmod@divisor 0026  
                    ___awmod@counter 0028                            ??_lcdInst 0026  
                             _printf 0012                     __end_of_pinSetup 2B8A  
                   __end_of_setAngle 24CE                    analogRead@channel 0024  
              ___ftmul@f3_as_product 0096                            ??_initLCD 0028  
                       __pdataCOMRAM 004C                        setAngle@angle 00D9  
                       __mediumconst FDD2                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                      setAngle@motor 00D7                            ??_service 0016  
                          ??_runMenu 003A                     __end_of_runStats 2C78  
                          ??_runTime 003A                           __accesstop 0080  
            __end_of__initialization 2670                           ___altoft@c 002C  
                         ___ftadd@f1 00A5                           ___ftadd@f2 00A8  
                         ___ftge@ff1 0024                           ___ftge@ff2 0027  
                      ___rparam_used 000001                           ___ftdiv@f1 0080  
                         ___ftdiv@f2 0083                           ___ftdiv@f3 0087  
                         ___ftneg@f1 0024                           ___awtoft@c 002C  
              __size_ofi2_startTimer 004C                           ___ftmul@f1 008C  
                         ___ftmul@f2 008F                           ___ftsub@f1 00B1  
                         ___ftsub@f2 00B4                           ___fttol@f1 00B1  
               __end_of_happynewyear FE81                       __pcstackCOMRAM 0001  
              __size_of_angleToPulse 015E                         __pidataBANK0 2DBE  
                       __pidataBANK1 2DFE                           ___lltoft@c 002C  
                      _cylinderMotor 00F9                        __end_of_scale 0D54  
                       ?_sortBattery 0001                        __end_of_pause 2DEE  
                      __end_of_putch 2D7C                        i2_digitalRead 2086  
                 __size_of_lcdNibble 0066                           __div_to_l_ 1C84  
                   i2digitalRead@pin 0001                      __div_to_l_@exp1 002F  
                    __div_to_l_@cntr 002E                              ??_scale 0039  
                            ??_pause 003A                      __div_to_l_@quot 002A  
                            ??_putch 0028                         i2_startTimer 2A2C  
                         __pbssBANK0 00FD                           __pbssBANK1 012F  
                       _angleToPulse 1612                __size_of_digitalWrite 00C0  
                 __size_of_initTimer 0046                   __size_of_initServo 00EC  
                         _analogRead 2BC2                        __div_to_l_@f1 0024  
                      __div_to_l_@f2 0027                              ?___ftge 0024  
                            ?___wmul 0032                sortBattery@resolution 0127  
                          ?___altoft 002C                              ?_fround 009B  
                         _lcdNewline 2E0C                            ?___awtoft 002C  
                          ?___ftpack 0024                       ?i2_digitalRead 0001  
                            ?_printf 00C0                            ?___lltoft 002C  
         servoInterruptService@flags 000C       __size_of_servoInterruptService 0198  
      __end_of_servoInterruptService 1612                __end_of_showInterface 1EB0  
                          ?_dateTime 0001                       stopServo@timer 0024  
                  i2startTimer@timer 0001                            ?_lcdClear 0001  
                 __size_of_runSelect 0026                     angleToPulse@a000 00D3  
                   angleToPulse@a180 00CC                         _digitalWrite 2170  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                            ?_mainMenu 0001  
            __size_ofi2_digitalWrite 00C0                   __size_of_stopServo 0046  
                            _V_LIM_C 0044                            ?_pinSetup 0001  
                          ?_setAngle 00D7                    __end_of_lcdNibble 2938  
                       initServo@pin 0106                    __end_of__npowers_ FE22  
                            __Hparam 0000                           _scale$1335 009E  
                            __Lparam 0000                      __size_of___ftge 0090  
                            ___awdiv 267E                              ___ftadd 0D54  
                            ___awmod 27FC                           _readKeypad 2C9E  
                            ___ftdiv 1A12                              ___ftneg 2D36  
                            ___lldiv 2702                      __size_of___wmul 0026  
                            ___ftmul 1770                              ___llmod 286C  
                            ___ftsub 29E0                              ___fttol 18CE  
                          ?_runStats 0001                           ??___altoft 0030  
                            __pcinit 25F2                           ??___awtoft 002F  
                         ??___ftpack 0029                      __size_of_fround 0260  
                            __ramtop 1000                              _lcdInst 2D7C  
                         ??___lltoft 0030                              __ptext0 239E  
                            __ptext1 121C                              __ptext2 2A78  
                            __ptext3 2DD8                              __ptext4 1EB0  
                            __ptext5 2994                              __ptext6 2436  
                            __ptext7 1612                              __ptext8 1A12  
                            __ptext9 2B8A                      __size_of_printf 092C  
                            _padPin1 0054                              _padPin2 0058  
                            _padPin3 003A                        startTimer@val 0026  
                            _initLCD 2B04                    __end_of_hexpowers FE69  
                        ?__div_to_l_ 0024                              _lastKey 004B  
                  __end_of_initTimer 2B04                    __end_of_initServo 1F9C  
                            _dpowers FDD3                     ___awmod@dividend 0024  
                         ??_dateTime 003A                           ??_lcdClear 0028  
                            _service 0008                              _runMenu 2BFA  
                            _runTime 2C2C                       __pintcode_body 24CE  
               end_of_initialization 2670                           ??_mainMenu 003A  
                      __Lmediumconst FDD2                              int_func 24CE  
                     digitalRead@pin 0024                          ?_analogRead 0024  
                         ??_pinSetup 0024                           ??_setAngle 00DB  
                    ___lldiv@divisor 0028                      ___lldiv@counter 0030  
                  __end_of_runSelect 2C9E                              printf@c 0117  
                            printf@f 00C0                              postdec1 000FE5  
                            postdec2 000FDD                      _batteryDetected 00FD  
                            postinc0 000FEE                              postinc2 000FDE  
                         ??_runStats 003A                      ??i2_digitalRead 0003  
                     __tdiv_to_l_@f1 0024                       __tdiv_to_l_@f2 0027  
                      ??_digitalRead 0026                          ?_lcdNewline 0001  
                      ??__tdiv_to_l_ 002A                    __end_of_stopServo 2ABE  
                          _PORTBbits 000F81                 __size_of_sortBattery 025E  
                   showInterface@key 00CE         ??_keyPressedInterruptService 0001  
                _redirectAngle_OTHER 0052                         _happynewyear FE7A  
                 angleToPulse@offset 00C8                           _startTimer 2994  
                        ___ftdiv@exp 008A                  __size_of__div_to_l_ 0128  
                        ___ftmul@exp 0095                          ?_readKeypad 0001  
                     __end_of___ftge 25F2                       __end_of___wmul 2D36  
                      __pidataCOMRAM 2DEE  __size_of_keyPressedInterruptService 0020  
                     __end_of_fround 121C                       __end_of_printf 093E  
                __size_of_analogRead 0038                  start_initialization 25F2  
                __end_of_digitalRead 2086                  __end_of__tdiv_to_l_ 1C84  
                     initServo@angle 0102                       initTimer@timer 0024  
                     initServo@motor 0100                       initServo@timer 0108  
                     i2_digitalWrite 2230                  __size_of_lcdNewline 0008  
                    ___llmod@divisor 0035                      ___llmod@counter 0039  
                           ??___ftge 002A                             ??___wmul 0036  
                        __pdataBANK0 00E3                          __pdataBANK1 014F  
                       pause@message 00CD                     __CFG_LPT1OSC$OFF 000000  
                           ??_fround 0039                             ??_printf 00C7  
                  __size_of___altoft 0078                           fround@prec 00A4  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
                  __size_of___lltoft 005C                          __pbssCOMRAM 003A  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
             __end_ofi2_digitalWrite 22F0                    __size_of_dateTime 0026  
                        ?_startTimer 0024                    __size_of_lcdClear 0008  
                __size_of_readKeypad 0026                    __size_of_mainMenu 0026  
                  i2digitalWrite@pin 0001                    i2digitalWrite@val 0003  
                  __CFG_CCP2MX$PORTC 000000                    __size_of_pinSetup 0040  
                  __size_of_setAngle 0098                            __pintcode 0008  
                      __pmediumconst FDD2                            _lcdNibble 28D2  
                           ?___awdiv 002A                             ?___ftadd 00A5  
                           ?___awmod 0024                             ?___ftdiv 0080  
                           ?___ftneg 0024                             ?___lldiv 0024  
                           ?___ftmul 008C                             ?___llmod 0031  
                           ?___ftsub 00B1                            __npowers_ FDFB  
                           ?___fttol 00B1                          _digitalRead 1F9C  
                           ?_lcdInst 0001                          __tdiv_to_l_ 1B52  
                  __size_of_runStats 0026                         ??__div_to_l_ 002A  
                           ?_initLCD 0001                      startTimer@timer 0024  
 __end_of_keyPressedInterruptService 2DBE           _keyPressedInterruptService 2D9E  
                           ?_service 0001                            _hexpowers FE49  
                           ?_runMenu 0001                            _initTimer 2ABE  
                          _initServo 1EB0                             ?_runTime 0001  
                    ?i2_digitalWrite 0001                _servoInterruptService 147A  
                     __size_of_scale 0416                       __size_of_pause 0016  
                     __size_of_putch 0022                             _AA_float 00F5  
                     sortBattery@Vcc 0124                       ___wmul@product 0036  
                     sortBattery@dir 011C                             _LATDbits 000F8C  
                       ??_analogRead 0028                             i2u400_40 149E  
                           i2u401_40 14A0                             i2u402_40 14AC  
                           i2u403_40 14AE                             i2u404_40 14CC  
                 __end_of__div_to_l_ 1DAC                             i2u365_44 20A4  
                           i2u365_45 20A0                             i2u366_44 20D0  
                           i2u366_45 20CC                             i2u367_44 20FC  
                           i2u367_45 20F8                             i2u368_44 2128  
                           i2u368_45 2124                             i2u369_44 2252  
                           i2u369_45 224C                             i2u396_40 1482  
                           i2u397_40 1484                             i2u398_40 1490  
                           i2u399_40 1492               __size_of_showInterface 0104  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
                     _padAngle_CLOSE 00E3                        digitalWrite@p 002B  
                       ??_lcdNewline 0028                  __size_of_startTimer 004C  
                          _runSelect 2C78                    angleToPulse@angle 00C0  
                  ___wmul@multiplier 0032                        lcdNibble@data 0025  
                         printf@flag 0106                        lcdNibble@temp 0024  
                         printf@fval 0114                           printf@prec 0108  
                          _stopServo 2A78                   __end_of_analogRead 2BFA  
                           _V_LIM_AA 0041                             _V_LIM_9V 003E  
                         runMenu@key 00CD                           ?_initTimer 0024  
                         ?_initServo 0100                    sortBattery@signal 012D  
                          copy_data0 2606                            copy_data1 2626  
                          copy_data2 2646                        initServo@port 0104  
                 __end_of_lcdNewline 2E14                        readKeypad@key 0024  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0024  
                      ??_sortBattery 0118                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0140                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 2784  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                         ?_runSelect 0001                             ___awtoft 2B8A  
                           ___ftpack 22F0                __end_ofi2_digitalRead 2170  
                        _fround$1333 00A1                          _fround$1334 009E  
                           ___lltoft 2938                     __size_of_lcdInst 0022  
                   __size_of_initLCD 0046                             _dateTime 2CEA  
                         ?_stopServo 0024               ?_servoInterruptService 0001  
                      _showInterface 1DAC                             _lcdClear 2E14  
                           __ptext10 2784                             __ptext11 2ABE  
                           __ptext20 2C9E                             __ptext12 2170  
                           __ptext21 2CC4                             __ptext13 1F9C  
                           __ptext30 27FC                             __ptext22 2CEA  
                           __ptext14 2BC2                             __ptext31 267E  
                           __ptext23 0012                             __ptext15 1DAC  
                           __ptext40 22F0                             __ptext32 1B52  
                           __ptext24 093E                             __ptext16 2C2C  
                           __ptext41 2D36                             __ptext33 1C84  
                           __ptext25 2D5A                             __ptext17 2C52  
                           __ptext50 2A2C                             __ptext42 2562  
                           __ptext34 2938                             __ptext26 2E0C  
                           __ptext18 2C78                             __ptext51 2230  
                           __ptext43 2E14                             __ptext35 286C  
                           __ptext27 0FBC                             __ptext19 2BFA  
                           __ptext52 2086                             __ptext44 2B4A  
                           __ptext36 2702                             __ptext28 2D10  
                           __ptext53 2D9E                             __ptext45 2B04  
                           __ptext37 18CE                             __ptext29 1770  
                           __ptext46 2D7C                             __ptext38 29E0  
                           __ptext47 28D2                             __ptext39 0D54  
                           __ptext49 147A                             __powers_ FE22  
                   __size_of_service 255A                     __size_of_runMenu 0032  
                    i2startTimer@val 0003                     __size_of_runTime 0026  
                      ?i2_startTimer 0001                             _mainMenu 2CC4  
                           _padServo 00EF                   __end_of_readKeypad 2CC4  
                      ?_angleToPulse 00C0                        __size_of_main 0098  
                           _pinSetup 2B4A                             _setAngle 2436  
                   sortBattery@F3131 014F                             _prevTime 0049  
                        ??_lcdNibble 0024                        _padAngle_OPEN 00E7  
                           int$flags 005C                             _runStats 2C52  
                          printf@idx 0103                            printf@exp 010A  
                          printf@val 0110                            putch@data 0028  
                __end_of_sortBattery 147A                           _INTCONbits 000FF2  
                     ?_showInterface 0001                        ?_digitalWrite 0024  
                        ??_initTimer 0026                          ??_initServo 00E1  
                           scale@scl 00A1                       ??i2_startTimer 0007  
                       ??_startTimer 002A                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0032                     __tdiv_to_l_@cntr 0031  
                     ??_angleToPulse 00C4                     __tdiv_to_l_@quot 002D  
                   ___lldiv@dividend 0024                     _redirectAngle_AA 004E  
                   _redirectAngle_9V 004C                             printf@ap 0104  
                        lcdInst@data 0027                         ?_digitalRead 0024  
                        ??_runSelect 003A                         ?__tdiv_to_l_ 0024  
                 __end_of_startTimer 29E0                          _printf$1336 0100  
                   ??i2_digitalWrite 0005                     ___lldiv@quotient 002C  
                        ??_stopServo 0026                       ??_digitalWrite 0028  
        ?_keyPressedInterruptService 0001                      _redirectAngle_C 0050  
                   _padAngle_NEUTRAL 00E5                      digitalWrite@pin 0024  
                    digitalWrite@val 0026  
