

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 26 13:24:27 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    90  0000                     
    91                           ; Version 1.40
    92                           ; Generated 01/12/2016 GMT
    93                           ; 
    94                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F4620 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     
   126                           	psect	idataBANK1
   127  0051A8                     __pidataBANK1:
   128                           	opt stack 0
   129                           
   130                           ;initializer for _V_LIM_9V
   131  0051A8  E1                 	db	225
   132  0051A9  FA                 	db	250
   133  0051AA  3F                 	db	63
   134                           
   135                           ;initializer for _V_LIM_AA
   136  0051AB  E9                 	db	233
   137  0051AC  A6                 	db	166
   138  0051AD  3E                 	db	62
   139                           
   140                           ;initializer for _V_LIM_C
   141  0051AE  33                 	db	51
   142  0051AF  A3                 	db	163
   143  0051B0  3F                 	db	63
   144                           
   145                           ;initializer for _angle
   146  0051B1  005A               	dw	90
   147                           
   148                           ;initializer for _nothingImportant
   149  0051B3  FFFF               	dw	65535
   150                           
   151                           ;initializer for _padAngle_CLOSE
   152  0051B5  001E               	dw	30
   153                           
   154                           ;initializer for _padAngle_NEUTRAL
   155  0051B7  003C               	dw	60
   156                           
   157                           ;initializer for _padAngle_OPEN
   158  0051B9  00B4               	dw	180
   159                           
   160                           ;initializer for _period
   161  0051BB  797C               	dw	31100
   162                           
   163                           ;initializer for _redirectAngle_9V
   164  0051BD  0076               	dw	118
   165                           
   166                           ;initializer for _redirectAngle_AA
   167  0051BF  008A               	dw	138
   168                           
   169                           ;initializer for _redirectAngle_C
   170  0051C1  00A6               	dw	166
   171                           
   172                           ;initializer for _redirectAngle_OTHER
   173  0051C3  0099               	dw	153
   174                           
   175                           ;initializer for _AA_float
   176  0051C5  0002               	dw	2
   177  0051C7  0005               	dw	5
   178                           
   179                           ;initializer for _conveyorServo
   180  0051C9  0002               	dw	2
   181  0051CB  0002               	dw	2
   182                           
   183                           ;initializer for _cylinderDir
   184  0051CD  0003               	dw	3
   185  0051CF  0001               	dw	1
   186                           
   187                           ;initializer for _cylinderMotor
   188  0051D1  0002               	dw	2
   189  0051D3  0000               	dw	0
   190                           
   191                           ;initializer for _padPin1
   192  0051D5  0002               	dw	2
   193  0051D7  0006               	dw	6
   194                           
   195                           ;initializer for _padPin2
   196  0051D9  0002               	dw	2
   197  0051DB  0007               	dw	7
   198                           
   199                           ;initializer for _padServo
   200  0051DD  0002               	dw	2
   201  0051DF  0001               	dw	1
   202                           
   203                           ;initializer for _redirectingServo
   204  0051E1  0003               	dw	3
   205  0051E3  0000               	dw	0
   206                           
   207                           	psect	mediumconst
   208  00FE30                     __pmediumconst:
   209                           	opt stack 0
   210  00FE30  00                 	db	0
   211  00FE31                     _dpowers:
   212                           	opt stack 0
   213  00FE31  0001               	dw	1
   214  00FE33  0000               	dw	0
   215  00FE35  000A               	dw	10
   216  00FE37  0000               	dw	0
   217  00FE39  0064               	dw	100
   218  00FE3B  0000               	dw	0
   219  00FE3D  03E8               	dw	1000
   220  00FE3F  0000               	dw	0
   221  00FE41  2710               	dw	10000
   222  00FE43  0000               	dw	0
   223  00FE45  86A0               	dw	34464
   224  00FE47  0001               	dw	1
   225  00FE49  4240               	dw	16960
   226  00FE4B  000F               	dw	15
   227  00FE4D  9680               	dw	38528
   228  00FE4F  0098               	dw	152
   229  00FE51  E100               	dw	57600
   230  00FE53  05F5               	dw	1525
   231  00FE55  CA00               	dw	51712
   232  00FE57  3B9A               	dw	15258
   233  00FE59                     __end_of_dpowers:
   234                           	opt stack 0
   235  00FE59                     __npowers_:
   236                           	opt stack 0
   237  00FE59  00                 	db	0
   238  00FE5A  80                 	db	128
   239  00FE5B  3F                 	db	63
   240  00FE5C  CD                 	db	205
   241  00FE5D  CC                 	db	204
   242  00FE5E  3D                 	db	61
   243  00FE5F  D7                 	db	215
   244  00FE60  23                 	db	35
   245  00FE61  3C                 	db	60
   246  00FE62  12                 	db	18
   247  00FE63  83                 	db	131
   248  00FE64  3A                 	db	58
   249  00FE65  B7                 	db	183
   250  00FE66  D1                 	db	209
   251  00FE67  38                 	db	56
   252  00FE68  C6                 	db	198
   253  00FE69  27                 	db	39
   254  00FE6A  37                 	db	55
   255  00FE6B  38                 	db	56
   256  00FE6C  86                 	db	134
   257  00FE6D  35                 	db	53
   258  00FE6E  C0                 	db	192
   259  00FE6F  D6                 	db	214
   260  00FE70  33                 	db	51
   261  00FE71  CC                 	db	204
   262  00FE72  2B                 	db	43
   263  00FE73  32                 	db	50
   264  00FE74  70                 	db	112
   265  00FE75  89                 	db	137
   266  00FE76  30                 	db	48
   267  00FE77  E7                 	db	231
   268  00FE78  DB                 	db	219
   269  00FE79  2E                 	db	46
   270  00FE7A  E5                 	db	229
   271  00FE7B  3C                 	db	60
   272  00FE7C  1E                 	db	30
   273  00FE7D  42                 	db	66
   274  00FE7E  A2                 	db	162
   275  00FE7F  0D                 	db	13
   276  00FE80                     __end_of__npowers_:
   277                           	opt stack 0
   278  00FE80                     __powers_:
   279                           	opt stack 0
   280  00FE80  00                 	db	0
   281  00FE81  80                 	db	128
   282  00FE82  3F                 	db	63
   283  00FE83  00                 	db	0
   284  00FE84  20                 	db	32
   285  00FE85  41                 	db	65
   286  00FE86  00                 	db	0
   287  00FE87  C8                 	db	200
   288  00FE88  42                 	db	66
   289  00FE89  00                 	db	0
   290  00FE8A  7A                 	db	122
   291  00FE8B  44                 	db	68
   292  00FE8C  40                 	db	64
   293  00FE8D  1C                 	db	28
   294  00FE8E  46                 	db	70
   295  00FE8F  50                 	db	80
   296  00FE90  C3                 	db	195
   297  00FE91  47                 	db	71
   298  00FE92  24                 	db	36
   299  00FE93  74                 	db	116
   300  00FE94  49                 	db	73
   301  00FE95  97                 	db	151
   302  00FE96  18                 	db	24
   303  00FE97  4B                 	db	75
   304  00FE98  BC                 	db	188
   305  00FE99  BE                 	db	190
   306  00FE9A  4C                 	db	76
   307  00FE9B  6B                 	db	107
   308  00FE9C  6E                 	db	110
   309  00FE9D  4E                 	db	78
   310  00FE9E  03                 	db	3
   311  00FE9F  15                 	db	21
   312  00FEA0  50                 	db	80
   313  00FEA1  79                 	db	121
   314  00FEA2  AD                 	db	173
   315  00FEA3  60                 	db	96
   316  00FEA4  F3                 	db	243
   317  00FEA5  49                 	db	73
   318  00FEA6  71                 	db	113
   319  00FEA7                     __end_of__powers_:
   320                           	opt stack 0
   321  00FEA7                     _hexpowers:
   322                           	opt stack 0
   323  00FEA7  0001               	dw	1
   324  00FEA9  0000               	dw	0
   325  00FEAB  0010               	dw	16
   326  00FEAD  0000               	dw	0
   327  00FEAF  0100               	dw	256
   328  00FEB1  0000               	dw	0
   329  00FEB3  1000               	dw	4096
   330  00FEB5  0000               	dw	0
   331  00FEB7  0000               	dw	0
   332  00FEB9  0001               	dw	1
   333  00FEBB  0000               	dw	0
   334  00FEBD  0010               	dw	16
   335  00FEBF  0000               	dw	0
   336  00FEC1  0100               	dw	256
   337  00FEC3  0000               	dw	0
   338  00FEC5  1000               	dw	4096
   339  00FEC7                     __end_of_hexpowers:
   340                           	opt stack 0
   341  00FEC7                     _keys:
   342                           	opt stack 0
   343  00FEC7  31                 	db	49
   344  00FEC8  32                 	db	50
   345  00FEC9  33                 	db	51
   346  00FECA  41                 	db	65
   347  00FECB  34                 	db	52
   348  00FECC  35                 	db	53
   349  00FECD  36                 	db	54
   350  00FECE  42                 	db	66
   351  00FECF  37                 	db	55
   352  00FED0  38                 	db	56
   353  00FED1  39                 	db	57
   354  00FED2  43                 	db	67
   355  00FED3  2A                 	db	42
   356  00FED4  30                 	db	48
   357  00FED5  23                 	db	35
   358  00FED6  44                 	db	68
   359  00FED7  00                 	db	0
   360  00FED8                     __end_of_keys:
   361                           	opt stack 0
   362  00FED8                     _happynewyear:
   363                           	opt stack 0
   364  00FED8  00                 	db	0
   365  00FED9  59                 	db	89
   366  00FEDA  03                 	db	3
   367  00FEDB  01                 	db	1
   368  00FEDC  13                 	db	19
   369  00FEDD  04                 	db	4
   370  00FEDE  17                 	db	23
   371  00FEDF                     __end_of_happynewyear:
   372                           	opt stack 0
   373  0000                     _ADCON0	set	4034
   374  0000                     _ADCON1	set	4033
   375  0000                     _ADCON2	set	4032
   376  0000                     _ADRESH	set	4036
   377  0000                     _ADRESL	set	4035
   378  0000                     _EEADR	set	4009
   379  0000                     _EEADRH	set	4010
   380  0000                     _EECON1	set	4006
   381  0000                     _EECON2	set	4007
   382  0000                     _EEDATA	set	4008
   383  0000                     _INTCONbits	set	4082
   384  0000                     _LATA	set	3977
   385  0000                     _LATB	set	3978
   386  0000                     _LATC	set	3979
   387  0000                     _LATD	set	3980
   388  0000                     _LATDbits	set	3980
   389  0000                     _LATE	set	3981
   390  0000                     _PORTA	set	3968
   391  0000                     _PORTB	set	3969
   392  0000                     _PORTBbits	set	3969
   393  0000                     _PORTC	set	3970
   394  0000                     _PORTD	set	3971
   395  0000                     _SSPADD	set	4040
   396  0000                     _SSPBUF	set	4041
   397  0000                     _SSPCON1	set	4038
   398  0000                     _SSPCON2	set	4037
   399  0000                     _SSPSTAT	set	4039
   400  0000                     _T0CON	set	4053
   401  0000                     _T1CON	set	4045
   402  0000                     _T3CON	set	4017
   403  0000                     _TMR0H	set	4055
   404  0000                     _TMR0L	set	4054
   405  0000                     _TMR1H	set	4047
   406  0000                     _TMR1L	set	4046
   407  0000                     _TMR3H	set	4019
   408  0000                     _TMR3L	set	4018
   409  0000                     _TRISA	set	3986
   410  0000                     _TRISB	set	3987
   411  0000                     _TRISC	set	3988
   412  0000                     _TRISD	set	3989
   413  0000                     _TRISE	set	3990
   414  0000                     _ACKDT	set	32301
   415  0000                     _ACKEN	set	32300
   416  0000                     _EEIF	set	32012
   417  0000                     _INT0IE	set	32660
   418  0000                     _INT0IF	set	32657
   419  0000                     _INT1IE	set	32643
   420  0000                     _INT1IF	set	32640
   421  0000                     _PEIE	set	32662
   422  0000                     _PEN	set	32298
   423  0000                     _RCEN	set	32299
   424  0000                     _RSEN	set	32297
   425  0000                     _SEN	set	32296
   426  0000                     _TMR0IE	set	32661
   427  0000                     _TMR0IF	set	32658
   428  0000                     _TMR1IE	set	31976
   429  0000                     _TMR1IF	set	31984
   430  0000                     _TMR3IE	set	32001
   431  0000                     _TRISC3	set	31907
   432  0000                     _TRISC4	set	31908
   433  00FEDF  25                 	db	37
   434  00FEE0  63                 	db	99	;'c'
   435  00FEE1  29                 	db	41
   436  00FEE2  20                 	db	32
   437  00FEE3  74                 	db	116	;'t'
   438  00FEE4  69                 	db	105	;'i'
   439  00FEE5  6D                 	db	109	;'m'
   440  00FEE6  65                 	db	101	;'e'
   441  00FEE7  20                 	db	32
   442  00FEE8  20                 	db	32
   443  00FEE9  3C                 	db	60	;'<'
   444  00FEEA  41                 	db	65	;'A'
   445  00FEEB  20                 	db	32
   446  00FEEC  20                 	db	32
   447  00FEED  20                 	db	32
   448  00FEEE  20                 	db	32
   449  00FEEF  20                 	db	32
   450  00FEF0  0A                 	db	10
   451  00FEF1  00                 	db	0
   452  00FEF2  73                 	db	115	;'s'
   453  00FEF3  74                 	db	116	;'t'
   454  00FEF4  61                 	db	97	;'a'
   455  00FEF5  72                 	db	114	;'r'
   456  00FEF6  74                 	db	116	;'t'
   457  00FEF7  20                 	db	32
   458  00FEF8  20                 	db	32
   459  00FEF9  20                 	db	32
   460  00FEFA  3C                 	db	60	;'<'
   461  00FEFB  42                 	db	66	;'B'
   462  00FEFC  20                 	db	32
   463  00FEFD  20                 	db	32
   464  00FEFE  20                 	db	32
   465  00FEFF  20                 	db	32
   466  00FF00  20                 	db	32
   467  00FF01  20                 	db	32
   468  00FF02  0A                 	db	10
   469  00FF03  00                 	db	0
   470  00FF04  20                 	db	32
   471  00FF05  20                 	db	32
   472  00FF06  68                 	db	104	;'h'
   473  00FF07  68                 	db	104	;'h'
   474  00FF08  3A                 	db	58	;':'
   475  00FF09  6D                 	db	109	;'m'
   476  00FF0A  6D                 	db	109	;'m'
   477  00FF0B  3A                 	db	58	;':'
   478  00FF0C  73                 	db	115	;'s'
   479  00FF0D  73                 	db	115	;'s'
   480  00FF0E  20                 	db	32
   481  00FF0F  20                 	db	32
   482  00FF10  20                 	db	32
   483  00FF11  20                 	db	32
   484  00FF12  20                 	db	32
   485  00FF13  20                 	db	32
   486  00FF14  0A                 	db	10
   487  00FF15  00                 	db	0
   488  00FF16  73                 	db	115	;'s'
   489  00FF17  65                 	db	101	;'e'
   490  00FF18  6C                 	db	108	;'l'
   491  00FF19  65                 	db	101	;'e'
   492  00FF1A  63                 	db	99	;'c'
   493  00FF1B  74                 	db	116	;'t'
   494  00FF1C  20                 	db	32
   495  00FF1D  72                 	db	114	;'r'
   496  00FF1E  75                 	db	117	;'u'
   497  00FF1F  6E                 	db	110	;'n'
   498  00FF20  3A                 	db	58	;':'
   499  00FF21  20                 	db	32
   500  00FF22  20                 	db	32
   501  00FF23  20                 	db	32
   502  00FF24  20                 	db	32
   503  00FF25  20                 	db	32
   504  00FF26  0A                 	db	10
   505  00FF27  00                 	db	0
   506  00FF28  74                 	db	116	;'t'
   507  00FF29  69                 	db	105	;'i'
   508  00FF2A  6D                 	db	109	;'m'
   509  00FF2B  65                 	db	101	;'e'
   510  00FF2C  3A                 	db	58	;':'
   511  00FF2D  20                 	db	32
   512  00FF2E  6E                 	db	110	;'n'
   513  00FF2F  6E                 	db	110	;'n'
   514  00FF30  6E                 	db	110	;'n'
   515  00FF31  20                 	db	32
   516  00FF32  73                 	db	115	;'s'
   517  00FF33  65                 	db	101	;'e'
   518  00FF34  63                 	db	99	;'c'
   519  00FF35  20                 	db	32
   520  00FF36  20                 	db	32
   521  00FF37  20                 	db	32
   522  00FF38  0A                 	db	10
   523  00FF39  00                 	db	0
   524  00FF3A  5B                 	db	91	;'['
   525  00FF3B  41                 	db	65	;'A'
   526  00FF3C  41                 	db	65	;'A'
   527  00FF3D  2C                 	db	44
   528  00FF3E  39                 	db	57	;'9'
   529  00FF3F  56                 	db	86	;'V'
   530  00FF40  2C                 	db	44
   531  00FF41  43                 	db	67	;'C'
   532  00FF42  2C                 	db	44
   533  00FF43  6F                 	db	111	;'o'
   534  00FF44  74                 	db	116	;'t'
   535  00FF45  68                 	db	104	;'h'
   536  00FF46  65                 	db	101	;'e'
   537  00FF47  72                 	db	114	;'r'
   538  00FF48  5D                 	db	93	;']'
   539  00FF49  20                 	db	32
   540  00FF4A  0A                 	db	10
   541  00FF4B  00                 	db	0
   542  00FF4C                     STR_18:
   543  00FF4C  30                 	db	48	;'0'
   544  00FF4D  31                 	db	49	;'1'
   545  00FF4E  32                 	db	50	;'2'
   546  00FF4F  33                 	db	51	;'3'
   547  00FF50  34                 	db	52	;'4'
   548  00FF51  35                 	db	53	;'5'
   549  00FF52  36                 	db	54	;'6'
   550  00FF53  37                 	db	55	;'7'
   551  00FF54  38                 	db	56	;'8'
   552  00FF55  39                 	db	57	;'9'
   553  00FF56  61                 	db	97	;'a'
   554  00FF57  62                 	db	98	;'b'
   555  00FF58  63                 	db	99	;'c'
   556  00FF59  64                 	db	100	;'d'
   557  00FF5A  65                 	db	101	;'e'
   558  00FF5B  66                 	db	102	;'f'
   559  00FF5C  00                 	db	0
   560  00FF5D  20                 	db	32
   561  00FF5E  20                 	db	32
   562  00FF5F  20                 	db	32
   563  00FF60  20                 	db	32
   564  00FF61  20                 	db	32
   565  00FF62  20                 	db	32
   566  00FF63  20                 	db	32
   567  00FF64  20                 	db	32
   568  00FF65  20                 	db	32
   569  00FF66  20                 	db	32
   570  00FF67  20                 	db	32
   571  00FF68  20                 	db	32
   572  00FF69  20                 	db	32
   573  00FF6A  20                 	db	32
   574  00FF6B  2A                 	db	42
   575  00FF6C  3E                 	db	62	;'>'
   576  00FF6D  00                 	db	0
   577  00FF6E  5B                 	db	91	;'['
   578  00FF6F  31                 	db	49	;'1'
   579  00FF70  2C                 	db	44
   580  00FF71  32                 	db	50	;'2'
   581  00FF72  2C                 	db	44
   582  00FF73  33                 	db	51	;'3'
   583  00FF74  2C                 	db	44
   584  00FF75  34                 	db	52	;'4'
   585  00FF76  5D                 	db	93	;']'
   586  00FF77  20                 	db	32
   587  00FF78  20                 	db	32
   588  00FF79  20                 	db	32
   589  00FF7A  20                 	db	32
   590  00FF7B  20                 	db	32
   591  00FF7C  2A                 	db	42
   592  00FF7D  3E                 	db	62	;'>'
   593  00FF7E  00                 	db	0
   594  00FF7F  68                 	db	104	;'h'
   595  00FF80  69                 	db	105	;'i'
   596  00FF81  73                 	db	115	;'s'
   597  00FF82  74                 	db	116	;'t'
   598  00FF83  6F                 	db	111	;'o'
   599  00FF84  72                 	db	114	;'r'
   600  00FF85  79                 	db	121	;'y'
   601  00FF86  20                 	db	32
   602  00FF87  3C                 	db	60	;'<'
   603  00FF88  43                 	db	67	;'C'
   604  00FF89  20                 	db	32
   605  00FF8A  20                 	db	32
   606  00FF8B  20                 	db	32
   607  00FF8C  20                 	db	32
   608  00FF8D  2A                 	db	42
   609  00FF8E  3E                 	db	62	;'>'
   610  00FF8F  00                 	db	0
   611  00FF90  20                 	db	32
   612  00FF91  20                 	db	32
   613  00FF92  20                 	db	32
   614  00FF93  73                 	db	115	;'s'
   615  00FF94  74                 	db	116	;'t'
   616  00FF95  61                 	db	97	;'a'
   617  00FF96  74                 	db	116	;'t'
   618  00FF97  73                 	db	115	;'s'
   619  00FF98  20                 	db	32
   620  00FF99  3C                 	db	60	;'<'
   621  00FF9A  42                 	db	66	;'B'
   622  00FF9B  20                 	db	32
   623  00FF9C  20                 	db	32
   624  00FF9D  20                 	db	32
   625  00FF9E  2A                 	db	42
   626  00FF9F  3E                 	db	62	;'>'
   627  00FFA0  00                 	db	0
   628  00FFA1  5B                 	db	91	;'['
   629  00FFA2  6E                 	db	110	;'n'
   630  00FFA3  6E                 	db	110	;'n'
   631  00FFA4  2C                 	db	44
   632  00FFA5  6E                 	db	110	;'n'
   633  00FFA6  2C                 	db	44
   634  00FFA7  6E                 	db	110	;'n'
   635  00FFA8  2C                 	db	44
   636  00FFA9  6E                 	db	110	;'n'
   637  00FFAA  6E                 	db	110	;'n'
   638  00FFAB  5D                 	db	93	;']'
   639  00FFAC  20                 	db	32
   640  00FFAD  20                 	db	32
   641  00FFAE  20                 	db	32
   642  00FFAF  2A                 	db	42
   643  00FFB0  3E                 	db	62	;'>'
   644  00FFB1  00                 	db	0
   645  00FFB2  20                 	db	32
   646  00FFB3  20                 	db	32
   647  00FFB4  6D                 	db	109	;'m'
   648  00FFB5  6D                 	db	109	;'m'
   649  00FFB6  3A                 	db	58	;':'
   650  00FFB7  64                 	db	100	;'d'
   651  00FFB8  64                 	db	100	;'d'
   652  00FFB9  3A                 	db	58	;':'
   653  00FFBA  79                 	db	121	;'y'
   654  00FFBB  79                 	db	121	;'y'
   655  00FFBC  20                 	db	32
   656  00FFBD  20                 	db	32
   657  00FFBE  20                 	db	32
   658  00FFBF  20                 	db	32
   659  00FFC0  41                 	db	65	;'A'
   660  00FFC1  3E                 	db	62	;'>'
   661  00FFC2  00                 	db	0
   662  00FFC3                     STR_2:
   663  00FFC3  74                 	db	116	;'t'
   664  00FFC4  69                 	db	105	;'i'
   665  00FFC5  6D                 	db	109	;'m'
   666  00FFC6  65                 	db	101	;'e'
   667  00FFC7  20                 	db	32
   668  00FFC8  25                 	db	37
   669  00FFC9  30                 	db	48	;'0'
   670  00FFCA  32                 	db	50	;'2'
   671  00FFCB  6C                 	db	108	;'l'
   672  00FFCC  64                 	db	100	;'d'
   673  00FFCD  3A                 	db	58	;':'
   674  00FFCE  25                 	db	37
   675  00FFCF  30                 	db	48	;'0'
   676  00FFD0  32                 	db	50	;'2'
   677  00FFD1  6C                 	db	108	;'l'
   678  00FFD2  64                 	db	100	;'d'
   679  00FFD3  00                 	db	0
   680  00FFD4                     STR_3:
   681  00FFD4  73                 	db	115	;'s'
   682  00FFD5  69                 	db	105	;'i'
   683  00FFD6  67                 	db	103	;'g'
   684  00FFD7  3A                 	db	58	;':'
   685  00FFD8  20                 	db	32
   686  00FFD9  25                 	db	37
   687  00FFDA  64                 	db	100	;'d'
   688  00FFDB  20                 	db	32
   689  00FFDC  0A                 	db	10
   690  00FFDD  56                 	db	86	;'V'
   691  00FFDE  3A                 	db	58	;':'
   692  00FFDF  20                 	db	32
   693  00FFE0  25                 	db	37
   694  00FFE1  66                 	db	102	;'f'
   695  00FFE2  00                 	db	0
   696  00FFE3                     STR_4:
   697  00FFE3  70                 	db	112	;'p'
   698  00FFE4  65                 	db	101	;'e'
   699  00FFE5  72                 	db	114	;'r'
   700  00FFE6  69                 	db	105	;'i'
   701  00FFE7  6F                 	db	111	;'o'
   702  00FFE8  64                 	db	100	;'d'
   703  00FFE9  20                 	db	32
   704  00FFEA  25                 	db	37
   705  00FFEB  6C                 	db	108	;'l'
   706  00FFEC  64                 	db	100	;'d'
   707  00FFED  00                 	db	0
   708  00FFEE  74                 	db	116	;'t'
   709  00FFEF  31                 	db	49	;'1'
   710  00FFF0  3A                 	db	58	;':'
   711  00FFF1  20                 	db	32
   712  00FFF2  25                 	db	37
   713  00FFF3  78                 	db	120	;'x'
   714  00FFF4  20                 	db	32
   715  00FFF5  00                 	db	0
   716  00FFF6                     STR_1:
   717  00FFF6  72                 	db	114	;'r'
   718  00FFF7  75                 	db	117	;'u'
   719  00FFF8  6E                 	db	110	;'n'
   720  00FFF9  6E                 	db	110	;'n'
   721  00FFFA  69                 	db	105	;'i'
   722  00FFFB  6E                 	db	110	;'n'
   723  00FFFC  67                 	db	103	;'g'
   724  00FFFD  00                 	db	0
   725                           
   726                           ; #config settings
   727  00FFFE  00                 	db	0	; dummy byte at the end
   728  0000                     
   729                           	psect	cinit
   730  00505E                     __pcinit:
   731                           	opt stack 0
   732  00505E                     start_initialization:
   733                           	opt stack 0
   734  00505E                     __initialization:
   735                           	opt stack 0
   736                           
   737                           ; Initialize objects allocated to BANK1 (61 bytes)
   738                           ; load TBLPTR registers with __pidataBANK1
   739  00505E  0EA8               	movlw	low __pidataBANK1
   740  005060  6EF6               	movwf	tblptrl,c
   741  005062  0E51               	movlw	high __pidataBANK1
   742  005064  6EF7               	movwf	tblptrh,c
   743  005066  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   744  005068  6EF8               	movwf	tblptru,c
   745  00506A  EE01  F049         	lfsr	0,__pdataBANK1
   746  00506E  EE10 F03D          	lfsr	1,61
   747  005072                     copy_data0:
   748  005072  0009               	tblrd		*+
   749  005074  CFF5 FFEE          	movff	tablat,postinc0
   750  005078  50E5               	movf	postdec1,w,c
   751  00507A  50E1               	movf	fsr1l,w,c
   752  00507C  E1FA               	bnz	copy_data0
   753                           
   754                           ; Clear objects allocated to BANK1 (30 bytes)
   755  00507E  EE01  F086         	lfsr	0,__pbssBANK1
   756  005082  0E1E               	movlw	30
   757  005084                     clear_0:
   758  005084  6AEE               	clrf	postinc0,c
   759  005086  06E8               	decf	wreg,f,c
   760  005088  E1FD               	bnz	clear_0
   761                           
   762                           ; Clear objects allocated to BANK0 (2 bytes)
   763  00508A  0100               	movlb	0
   764  00508C  6BFF               	clrf	(__pbssBANK0+1)& (0+255),b
   765  00508E  6BFE               	clrf	__pbssBANK0& (0+255),b
   766                           
   767                           ; Clear objects allocated to COMRAM (3 bytes)
   768  005090  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   769  005092  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   770  005094  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   771  005096                     end_of_initialization:
   772                           	opt stack 0
   773  005096                     __end_of__initialization:
   774                           	opt stack 0
   775  005096  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   776  005098  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   777  00509A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   778  00509C  6EF8               	movwf	tblptru,c
   779  00509E  0100               	movlb	0
   780  0050A0  EFD5  F011         	goto	_main	;jump to C main() function
   781                           tblptru	equ	0xFF8
   782                           tblptrh	equ	0xFF7
   783                           tblptrl	equ	0xFF6
   784                           tablat	equ	0xFF5
   785                           postinc0	equ	0xFEE
   786                           wreg	equ	0xFE8
   787                           postdec1	equ	0xFE5
   788                           fsr1l	equ	0xFE1
   789                           
   790                           	psect	bssCOMRAM
   791  00007B                     __pbssCOMRAM:
   792                           	opt stack 0
   793  00007B                     _curr:
   794                           	opt stack 0
   795  00007B                     	ds	2
   796  00007D                     _lastKey:
   797                           	opt stack 0
   798  00007D                     	ds	1
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postdec1	equ	0xFE5
   806                           fsr1l	equ	0xFE1
   807                           
   808                           	psect	bssBANK0
   809  0000FE                     __pbssBANK0:
   810                           	opt stack 0
   811  0000FE                     _n:
   812                           	opt stack 0
   813  0000FE                     	ds	2
   814                           tblptru	equ	0xFF8
   815                           tblptrh	equ	0xFF7
   816                           tblptrl	equ	0xFF6
   817                           tablat	equ	0xFF5
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           postdec1	equ	0xFE5
   821                           fsr1l	equ	0xFE1
   822                           
   823                           	psect	bssBANK1
   824  000186                     __pbssBANK1:
   825                           	opt stack 0
   826  000186                     _pulse:
   827                           	opt stack 0
   828  000186                     	ds	8
   829  00018E                     _servos:
   830                           	opt stack 0
   831  00018E                     	ds	8
   832  000196                     _padPin3:
   833                           	opt stack 0
   834  000196                     	ds	4
   835  00019A                     _time:
   836                           	opt stack 0
   837  00019A                     	ds	4
   838  00019E                     _batteryDetected:
   839                           	opt stack 0
   840  00019E                     	ds	2
   841  0001A0                     _count:
   842                           	opt stack 0
   843  0001A0                     	ds	2
   844  0001A2                     _prevTime:
   845                           	opt stack 0
   846  0001A2                     	ds	2
   847                           tblptru	equ	0xFF8
   848                           tblptrh	equ	0xFF7
   849                           tblptrl	equ	0xFF6
   850                           tablat	equ	0xFF5
   851                           postinc0	equ	0xFEE
   852                           wreg	equ	0xFE8
   853                           postdec1	equ	0xFE5
   854                           fsr1l	equ	0xFE1
   855                           
   856                           	psect	dataBANK1
   857  000149                     __pdataBANK1:
   858                           	opt stack 0
   859  000149                     _V_LIM_9V:
   860                           	opt stack 0
   861  000149                     	ds	3
   862  00014C                     _V_LIM_AA:
   863                           	opt stack 0
   864  00014C                     	ds	3
   865  00014F                     _V_LIM_C:
   866                           	opt stack 0
   867  00014F                     	ds	3
   868  000152                     _angle:
   869                           	opt stack 0
   870  000152                     	ds	2
   871  000154                     _nothingImportant:
   872                           	opt stack 0
   873  000154                     	ds	2
   874  000156                     _padAngle_CLOSE:
   875                           	opt stack 0
   876  000156                     	ds	2
   877  000158                     _padAngle_NEUTRAL:
   878                           	opt stack 0
   879  000158                     	ds	2
   880  00015A                     _padAngle_OPEN:
   881                           	opt stack 0
   882  00015A                     	ds	2
   883  00015C                     _period:
   884                           	opt stack 0
   885  00015C                     	ds	2
   886  00015E                     _redirectAngle_9V:
   887                           	opt stack 0
   888  00015E                     	ds	2
   889  000160                     _redirectAngle_AA:
   890                           	opt stack 0
   891  000160                     	ds	2
   892  000162                     _redirectAngle_C:
   893                           	opt stack 0
   894  000162                     	ds	2
   895  000164                     _redirectAngle_OTHER:
   896                           	opt stack 0
   897  000164                     	ds	2
   898  000166                     _AA_float:
   899                           	opt stack 0
   900  000166                     	ds	4
   901  00016A                     _conveyorServo:
   902                           	opt stack 0
   903  00016A                     	ds	4
   904  00016E                     _cylinderDir:
   905                           	opt stack 0
   906  00016E                     	ds	4
   907  000172                     _cylinderMotor:
   908                           	opt stack 0
   909  000172                     	ds	4
   910  000176                     _padPin1:
   911                           	opt stack 0
   912  000176                     	ds	4
   913  00017A                     _padPin2:
   914                           	opt stack 0
   915  00017A                     	ds	4
   916  00017E                     _padServo:
   917                           	opt stack 0
   918  00017E                     	ds	4
   919  000182                     _redirectingServo:
   920                           	opt stack 0
   921  000182                     	ds	4
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           
   931                           	psect	cstackBANK1
   932  000100                     __pcstackBANK1:
   933                           	opt stack 0
   934  000100                     _printf$1339:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x0
   938  000100                     	ds	3
   939  000103                     printf@cp:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x3
   943  000103                     	ds	2
   944  000105                     printf@idx:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x5
   948  000105                     	ds	1
   949  000106                     printf@len:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x6
   953  000106                     	ds	2
   954  000108                     printf@ap:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x8
   958  000108                     	ds	2
   959  00010A                     printf@prec:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0xA
   963  00010A                     	ds	2
   964  00010C                     printf@tmpval:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0xC
   968  00010C                     	ds	4
   969  000110                     printf@exp:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x10
   973  000110                     	ds	2
   974  000112                     printf@val:
   975                           	opt stack 0
   976                           
   977                           ; 4 bytes @ 0x12
   978  000112                     	ds	4
   979  000116                     printf@width:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x16
   983  000116                     	ds	2
   984  000118                     printf@fval:
   985                           	opt stack 0
   986                           
   987                           ; 3 bytes @ 0x18
   988  000118                     	ds	3
   989  00011B                     printf@flag:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x1B
   993  00011B                     	ds	2
   994  00011D                     printf@c:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x1D
   998  00011D                     	ds	1
   999  00011E                     sortBattery@V_float:
  1000                           	opt stack 0
  1001                           
  1002                           ; 3 bytes @ 0x1E
  1003  00011E                     	ds	3
  1004  000121                     sortBattery@Vcc:
  1005                           	opt stack 0
  1006                           
  1007                           ; 3 bytes @ 0x21
  1008  000121                     	ds	3
  1009  000124                     sortBattery@resolution:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x24
  1013  000124                     	ds	3
  1014  000127                     sortBattery@targetAngle:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x27
  1018  000127                     	ds	2
  1019  000129                     sortBattery@signal:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x29
  1023  000129                     	ds	2
  1024  00012B                     sortBattery@V:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x2B
  1028  00012B                     	ds	3
  1029  00012E                     ??_main:
  1030                           
  1031                           ; 1 bytes @ 0x2E
  1032  00012E                     	ds	13
  1033  00013B                     main@prevTime:
  1034                           	opt stack 0
  1035                           
  1036                           ; 4 bytes @ 0x3B
  1037  00013B                     	ds	4
  1038  00013F                     main@cylinderForward:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x3F
  1042  00013F                     	ds	2
  1043  000141                     main@cylinderBackward:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x41
  1047  000141                     	ds	2
  1048  000143                     main@cylinderStart:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x43
  1052  000143                     	ds	2
  1053  000145                     main@cylinderDur:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x45
  1057  000145                     	ds	2
  1058  000147                     main@prev:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x47
  1062  000147                     	ds	2
  1063                           tblptru	equ	0xFF8
  1064                           tblptrh	equ	0xFF7
  1065                           tblptrl	equ	0xFF6
  1066                           tablat	equ	0xFF5
  1067                           postinc0	equ	0xFEE
  1068                           wreg	equ	0xFE8
  1069                           postdec1	equ	0xFE5
  1070                           fsr1l	equ	0xFE1
  1071                           
  1072                           	psect	cstackBANK0
  1073  000080                     __pcstackBANK0:
  1074                           	opt stack 0
  1075  000080                     ??_isdigit:
  1076  000080                     ?_digitalRead:
  1077                           	opt stack 0
  1078  000080                     ?___awmod:
  1079                           	opt stack 0
  1080  000080                     ?___ftpack:
  1081                           	opt stack 0
  1082  000080                     ?___ftneg:
  1083                           	opt stack 0
  1084  000080                     ?_analogRead:
  1085                           	opt stack 0
  1086  000080                     ?__tdiv_to_l_:
  1087                           	opt stack 0
  1088  000080                     ?__div_to_l_:
  1089                           	opt stack 0
  1090  000080                     ?___aldiv:
  1091                           	opt stack 0
  1092  000080                     ?___lldiv:
  1093                           	opt stack 0
  1094  000080                     lcdNibble@temp:
  1095                           	opt stack 0
  1096  000080                     readKeypad@key:
  1097                           	opt stack 0
  1098  000080                     digitalRead@pin:
  1099                           	opt stack 0
  1100  000080                     digitalWrite@pin:
  1101                           	opt stack 0
  1102  000080                     analogRead@channel:
  1103                           	opt stack 0
  1104  000080                     initTimer@timer:
  1105                           	opt stack 0
  1106  000080                     startTimer@timer:
  1107                           	opt stack 0
  1108  000080                     ___awmod@dividend:
  1109                           	opt stack 0
  1110  000080                     __div_to_l_@f1:
  1111                           	opt stack 0
  1112  000080                     ___ftpack@arg:
  1113                           	opt stack 0
  1114  000080                     __tdiv_to_l_@f1:
  1115                           	opt stack 0
  1116  000080                     ___ftge@ff1:
  1117                           	opt stack 0
  1118  000080                     ___ftneg@f1:
  1119                           	opt stack 0
  1120  000080                     ___aldiv@dividend:
  1121                           	opt stack 0
  1122  000080                     ___lldiv@dividend:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x0
  1126  000080                     	ds	1
  1127  000081                     lcdNibble@data:
  1128                           	opt stack 0
  1129  000081                     _isdigit$962:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x1
  1133  000081                     	ds	1
  1134  000082                     ??_initTimer:
  1135  000082                     ??_digitalRead:
  1136  000082                     ??_lcdInst:
  1137  000082                     isdigit@c:
  1138                           	opt stack 0
  1139  000082                     digitalWrite@val:
  1140                           	opt stack 0
  1141  000082                     ___awmod@divisor:
  1142                           	opt stack 0
  1143  000082                     startTimer@val:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0x2
  1147  000082                     	ds	1
  1148  000083                     lcdInst@data:
  1149                           	opt stack 0
  1150  000083                     ___ftpack@exp:
  1151                           	opt stack 0
  1152  000083                     __div_to_l_@f2:
  1153                           	opt stack 0
  1154  000083                     __tdiv_to_l_@f2:
  1155                           	opt stack 0
  1156  000083                     ___ftge@ff2:
  1157                           	opt stack 0
  1158                           
  1159                           ; 3 bytes @ 0x3
  1160  000083                     	ds	1
  1161  000084                     ??_initLCD:
  1162  000084                     ??_digitalWrite:
  1163  000084                     ??_analogRead:
  1164  000084                     putch@data:
  1165                           	opt stack 0
  1166  000084                     ___awmod@counter:
  1167                           	opt stack 0
  1168  000084                     ___ftpack@sign:
  1169                           	opt stack 0
  1170  000084                     ___aldiv@divisor:
  1171                           	opt stack 0
  1172  000084                     ___lldiv@divisor:
  1173                           	opt stack 0
  1174                           
  1175                           ; 4 bytes @ 0x4
  1176  000084                     	ds	1
  1177  000085                     ??___ftpack:
  1178  000085                     ___awmod@sign:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x5
  1182  000085                     	ds	1
  1183  000086                     ??_startTimer:
  1184  000086                     ??__tdiv_to_l_:
  1185  000086                     ??___ftge:
  1186  000086                     ?___awdiv:
  1187                           	opt stack 0
  1188  000086                     ___awdiv@dividend:
  1189                           	opt stack 0
  1190  000086                     __div_to_l_@quot:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x6
  1194  000086                     	ds	1
  1195  000087                     digitalWrite@p:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x7
  1199  000087                     	ds	1
  1200  000088                     ?___altoft:
  1201                           	opt stack 0
  1202  000088                     ?___awtoft:
  1203                           	opt stack 0
  1204  000088                     ?___lltoft:
  1205                           	opt stack 0
  1206  000088                     ___aldiv@counter:
  1207                           	opt stack 0
  1208  000088                     ___awdiv@divisor:
  1209                           	opt stack 0
  1210  000088                     ___awtoft@c:
  1211                           	opt stack 0
  1212  000088                     ___altoft@c:
  1213                           	opt stack 0
  1214  000088                     ___lldiv@quotient:
  1215                           	opt stack 0
  1216  000088                     ___lltoft@c:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x8
  1220  000088                     	ds	1
  1221  000089                     ___aldiv@sign:
  1222                           	opt stack 0
  1223  000089                     __tdiv_to_l_@quot:
  1224                           	opt stack 0
  1225                           
  1226                           ; 4 bytes @ 0x9
  1227  000089                     	ds	1
  1228  00008A                     ___awdiv@counter:
  1229                           	opt stack 0
  1230  00008A                     __div_to_l_@cntr:
  1231                           	opt stack 0
  1232  00008A                     ___aldiv@quotient:
  1233                           	opt stack 0
  1234                           
  1235                           ; 4 bytes @ 0xA
  1236  00008A                     	ds	1
  1237  00008B                     ___awdiv@sign:
  1238                           	opt stack 0
  1239  00008B                     ___awtoft@sign:
  1240                           	opt stack 0
  1241  00008B                     __div_to_l_@exp1:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0xB
  1245  00008B                     	ds	1
  1246  00008C                     ??___altoft:
  1247  00008C                     ??___lltoft:
  1248  00008C                     ___lldiv@counter:
  1249                           	opt stack 0
  1250  00008C                     ___awdiv@quotient:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0xC
  1254  00008C                     	ds	1
  1255  00008D                     ?___llmod:
  1256                           	opt stack 0
  1257  00008D                     __tdiv_to_l_@cntr:
  1258                           	opt stack 0
  1259  00008D                     ___llmod@dividend:
  1260                           	opt stack 0
  1261                           
  1262                           ; 4 bytes @ 0xD
  1263  00008D                     	ds	1
  1264  00008E                     ?___wmul:
  1265                           	opt stack 0
  1266  00008E                     ?___almod:
  1267                           	opt stack 0
  1268  00008E                     __tdiv_to_l_@exp1:
  1269                           	opt stack 0
  1270  00008E                     ___wmul@multiplier:
  1271                           	opt stack 0
  1272  00008E                     ___almod@dividend:
  1273                           	opt stack 0
  1274                           
  1275                           ; 4 bytes @ 0xE
  1276  00008E                     	ds	2
  1277  000090                     ___altoft@exp:
  1278                           	opt stack 0
  1279  000090                     ___lltoft@exp:
  1280                           	opt stack 0
  1281  000090                     ___wmul@multiplicand:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x10
  1285  000090                     	ds	1
  1286  000091                     ___altoft@sign:
  1287                           	opt stack 0
  1288  000091                     ___llmod@divisor:
  1289                           	opt stack 0
  1290                           
  1291                           ; 4 bytes @ 0x11
  1292  000091                     	ds	1
  1293  000092                     ?___ftdiv:
  1294                           	opt stack 0
  1295  000092                     ___wmul@product:
  1296                           	opt stack 0
  1297  000092                     ___ftdiv@f1:
  1298                           	opt stack 0
  1299  000092                     ___almod@divisor:
  1300                           	opt stack 0
  1301                           
  1302                           ; 4 bytes @ 0x12
  1303  000092                     	ds	3
  1304  000095                     ___llmod@counter:
  1305                           	opt stack 0
  1306  000095                     ___ftdiv@f2:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x15
  1310  000095                     	ds	1
  1311  000096                     ___almod@counter:
  1312                           	opt stack 0
  1313                           
  1314                           ; 1 bytes @ 0x16
  1315  000096                     	ds	1
  1316  000097                     ___almod@sign:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x17
  1320  000097                     	ds	1
  1321  000098                     ??___ftdiv:
  1322                           
  1323                           ; 1 bytes @ 0x18
  1324  000098                     	ds	3
  1325  00009B                     ___ftdiv@cntr:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x1B
  1329  00009B                     	ds	1
  1330  00009C                     ___ftdiv@f3:
  1331                           	opt stack 0
  1332                           
  1333                           ; 3 bytes @ 0x1C
  1334  00009C                     	ds	3
  1335  00009F                     ___ftdiv@exp:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x1F
  1339  00009F                     	ds	1
  1340  0000A0                     ___ftdiv@sign:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x20
  1344  0000A0                     	ds	1
  1345  0000A1                     ?___ftmul:
  1346                           	opt stack 0
  1347  0000A1                     ___ftmul@f1:
  1348                           	opt stack 0
  1349                           
  1350                           ; 3 bytes @ 0x21
  1351  0000A1                     	ds	3
  1352  0000A4                     ___ftmul@f2:
  1353                           	opt stack 0
  1354                           
  1355                           ; 3 bytes @ 0x24
  1356  0000A4                     	ds	3
  1357  0000A7                     ??___ftmul:
  1358                           
  1359                           ; 1 bytes @ 0x27
  1360  0000A7                     	ds	3
  1361  0000AA                     ___ftmul@exp:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x2A
  1365  0000AA                     	ds	1
  1366  0000AB                     ___ftmul@f3_as_product:
  1367                           	opt stack 0
  1368                           
  1369                           ; 3 bytes @ 0x2B
  1370  0000AB                     	ds	3
  1371  0000AE                     ___ftmul@cntr:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x2E
  1375  0000AE                     	ds	1
  1376  0000AF                     ___ftmul@sign:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x2F
  1380  0000AF                     	ds	1
  1381  0000B0                     ?_fround:
  1382                           	opt stack 0
  1383  0000B0                     ?_scale:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0x30
  1387  0000B0                     	ds	3
  1388  0000B3                     _fround$1337:
  1389                           	opt stack 0
  1390  0000B3                     _scale$1338:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x33
  1394  0000B3                     	ds	3
  1395  0000B6                     scale@scl:
  1396                           	opt stack 0
  1397  0000B6                     _fround$1336:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x36
  1401  0000B6                     	ds	3
  1402  0000B9                     fround@prec:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x39
  1406  0000B9                     	ds	1
  1407  0000BA                     ?___ftadd:
  1408                           	opt stack 0
  1409  0000BA                     ___ftadd@f1:
  1410                           	opt stack 0
  1411                           
  1412                           ; 3 bytes @ 0x3A
  1413  0000BA                     	ds	3
  1414  0000BD                     ___ftadd@f2:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x3D
  1418  0000BD                     	ds	3
  1419  0000C0                     ??___ftadd:
  1420                           
  1421                           ; 1 bytes @ 0x40
  1422  0000C0                     	ds	3
  1423  0000C3                     ___ftadd@sign:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x43
  1427  0000C3                     	ds	1
  1428  0000C4                     ___ftadd@exp2:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x44
  1432  0000C4                     	ds	1
  1433  0000C5                     ___ftadd@exp1:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x45
  1437  0000C5                     	ds	1
  1438  0000C6                     ?___ftsub:
  1439                           	opt stack 0
  1440  0000C6                     ?___fttol:
  1441                           	opt stack 0
  1442  0000C6                     ___ftsub@f1:
  1443                           	opt stack 0
  1444  0000C6                     ___fttol@f1:
  1445                           	opt stack 0
  1446                           
  1447                           ; 3 bytes @ 0x46
  1448  0000C6                     	ds	3
  1449  0000C9                     ___ftsub@f2:
  1450                           	opt stack 0
  1451                           
  1452                           ; 3 bytes @ 0x49
  1453  0000C9                     	ds	1
  1454  0000CA                     ??___fttol:
  1455                           
  1456                           ; 1 bytes @ 0x4A
  1457  0000CA                     	ds	2
  1458  0000CC                     
  1459                           ; 1 bytes @ 0x4C
  1460  0000CC                     	ds	3
  1461  0000CF                     ___fttol@sign1:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x4F
  1465  0000CF                     	ds	1
  1466  0000D0                     ___fttol@lval:
  1467                           	opt stack 0
  1468                           
  1469                           ; 4 bytes @ 0x50
  1470  0000D0                     	ds	4
  1471  0000D4                     ___fttol@exp1:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x54
  1475  0000D4                     	ds	1
  1476  0000D5                     ?_printf:
  1477                           	opt stack 0
  1478  0000D5                     ?_angleToPulse:
  1479                           	opt stack 0
  1480  0000D5                     angleToPulse@angle:
  1481                           	opt stack 0
  1482  0000D5                     printf@f:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x55
  1486  0000D5                     	ds	4
  1487  0000D9                     ??_angleToPulse:
  1488                           
  1489                           ; 1 bytes @ 0x59
  1490  0000D9                     	ds	4
  1491  0000DD                     angleToPulse@offset:
  1492                           	opt stack 0
  1493                           
  1494                           ; 4 bytes @ 0x5D
  1495  0000DD                     	ds	2
  1496  0000DF                     ??_printf:
  1497                           
  1498                           ; 1 bytes @ 0x5F
  1499  0000DF                     	ds	2
  1500  0000E1                     angleToPulse@a180:
  1501                           	opt stack 0
  1502                           
  1503                           ; 4 bytes @ 0x61
  1504  0000E1                     	ds	4
  1505  0000E5                     _angleToPulse$1335:
  1506                           	opt stack 0
  1507                           
  1508                           ; 3 bytes @ 0x65
  1509  0000E5                     	ds	3
  1510  0000E8                     angleToPulse@a000:
  1511                           	opt stack 0
  1512                           
  1513                           ; 4 bytes @ 0x68
  1514  0000E8                     	ds	4
  1515  0000EC                     setAngle@motor:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x6C
  1519  0000EC                     	ds	2
  1520  0000EE                     setAngle@angle:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x6E
  1524  0000EE                     	ds	2
  1525  0000F0                     ??_setAngle:
  1526                           
  1527                           ; 1 bytes @ 0x70
  1528  0000F0                     	ds	2
  1529  0000F2                     setAngle@period:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x72
  1533  0000F2                     	ds	2
  1534  0000F4                     setAngle@i:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x74
  1538  0000F4                     	ds	2
  1539  0000F6                     ??_sortBattery:
  1540  0000F6                     initServo@motor:
  1541                           	opt stack 0
  1542                           
  1543                           ; 2 bytes @ 0x76
  1544  0000F6                     	ds	2
  1545  0000F8                     initServo@angle:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x78
  1549  0000F8                     	ds	2
  1550  0000FA                     ??_initServo:
  1551                           
  1552                           ; 1 bytes @ 0x7A
  1553  0000FA                     	ds	4
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1l	equ	0xFE1
  1562                           
  1563                           	psect	cstackCOMRAM
  1564  000001                     __pcstackCOMRAM:
  1565                           	opt stack 0
  1566  000001                     ??i2_isdigit:
  1567  000001                     ?i2___awmod:
  1568                           	opt stack 0
  1569  000001                     ?i2___ftpack:
  1570                           	opt stack 0
  1571  000001                     ?i2___ftneg:
  1572                           	opt stack 0
  1573  000001                     ?i2__div_to_l_:
  1574                           	opt stack 0
  1575  000001                     ?i2__tdiv_to_l_:
  1576                           	opt stack 0
  1577  000001                     ?i2___lldiv:
  1578                           	opt stack 0
  1579  000001                     i2lcdNibble@temp:
  1580                           	opt stack 0
  1581  000001                     i2___awmod@dividend:
  1582                           	opt stack 0
  1583  000001                     i2__div_to_l_@f1:
  1584                           	opt stack 0
  1585  000001                     i2___ftpack@arg:
  1586                           	opt stack 0
  1587  000001                     i2__tdiv_to_l_@f1:
  1588                           	opt stack 0
  1589  000001                     i2___ftge@ff1:
  1590                           	opt stack 0
  1591  000001                     i2___ftneg@f1:
  1592                           	opt stack 0
  1593  000001                     i2___lldiv@dividend:
  1594                           	opt stack 0
  1595                           
  1596                           ; 4 bytes @ 0x0
  1597  000001                     	ds	1
  1598  000002                     i2lcdNibble@data:
  1599                           	opt stack 0
  1600  000002                     i2_isdigit$962:
  1601                           	opt stack 0
  1602                           
  1603                           ; 1 bytes @ 0x1
  1604  000002                     	ds	1
  1605  000003                     ??i2_lcdInst:
  1606  000003                     i2isdigit@c:
  1607                           	opt stack 0
  1608  000003                     i2___awmod@divisor:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x2
  1612  000003                     	ds	1
  1613  000004                     i2lcdInst@data:
  1614                           	opt stack 0
  1615  000004                     i2___ftpack@exp:
  1616                           	opt stack 0
  1617  000004                     i2__div_to_l_@f2:
  1618                           	opt stack 0
  1619  000004                     i2__tdiv_to_l_@f2:
  1620                           	opt stack 0
  1621  000004                     i2___ftge@ff2:
  1622                           	opt stack 0
  1623                           
  1624                           ; 3 bytes @ 0x3
  1625  000004                     	ds	1
  1626  000005                     i2putch@data:
  1627                           	opt stack 0
  1628  000005                     i2___awmod@counter:
  1629                           	opt stack 0
  1630  000005                     i2___ftpack@sign:
  1631                           	opt stack 0
  1632  000005                     i2___lldiv@divisor:
  1633                           	opt stack 0
  1634                           
  1635                           ; 4 bytes @ 0x4
  1636  000005                     	ds	1
  1637  000006                     ??i2___ftpack:
  1638  000006                     i2___awmod@sign:
  1639                           	opt stack 0
  1640                           
  1641                           ; 1 bytes @ 0x5
  1642  000006                     	ds	1
  1643  000007                     ??i2__tdiv_to_l_:
  1644  000007                     ??i2___ftge:
  1645  000007                     ?i2___awdiv:
  1646                           	opt stack 0
  1647  000007                     i2digitalWrite@pin:
  1648                           	opt stack 0
  1649  000007                     i2startTimer@timer:
  1650                           	opt stack 0
  1651  000007                     i2___awdiv@dividend:
  1652                           	opt stack 0
  1653  000007                     i2__div_to_l_@quot:
  1654                           	opt stack 0
  1655                           
  1656                           ; 4 bytes @ 0x6
  1657  000007                     	ds	2
  1658  000009                     ?i2___lltoft:
  1659                           	opt stack 0
  1660  000009                     i2digitalWrite@val:
  1661                           	opt stack 0
  1662  000009                     i2___awdiv@divisor:
  1663                           	opt stack 0
  1664  000009                     i2startTimer@val:
  1665                           	opt stack 0
  1666  000009                     i2___lldiv@quotient:
  1667                           	opt stack 0
  1668  000009                     i2___lltoft@c:
  1669                           	opt stack 0
  1670                           
  1671                           ; 4 bytes @ 0x8
  1672  000009                     	ds	1
  1673  00000A                     i2__tdiv_to_l_@quot:
  1674                           	opt stack 0
  1675                           
  1676                           ; 4 bytes @ 0x9
  1677  00000A                     	ds	1
  1678  00000B                     ??i2_digitalWrite:
  1679  00000B                     i2___awdiv@counter:
  1680                           	opt stack 0
  1681  00000B                     i2__div_to_l_@cntr:
  1682                           	opt stack 0
  1683                           
  1684                           ; 1 bytes @ 0xA
  1685  00000B                     	ds	1
  1686  00000C                     i2___awdiv@sign:
  1687                           	opt stack 0
  1688  00000C                     i2__div_to_l_@exp1:
  1689                           	opt stack 0
  1690                           
  1691                           ; 1 bytes @ 0xB
  1692  00000C                     	ds	1
  1693  00000D                     ??i2_startTimer:
  1694  00000D                     ??i2___lltoft:
  1695  00000D                     i2___lldiv@counter:
  1696                           	opt stack 0
  1697  00000D                     i2___awdiv@quotient:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0xC
  1701  00000D                     	ds	1
  1702  00000E                     ?i2___llmod:
  1703                           	opt stack 0
  1704  00000E                     i2__tdiv_to_l_@cntr:
  1705                           	opt stack 0
  1706  00000E                     i2digitalWrite@p:
  1707                           	opt stack 0
  1708  00000E                     i2___llmod@dividend:
  1709                           	opt stack 0
  1710                           
  1711                           ; 4 bytes @ 0xD
  1712  00000E                     	ds	1
  1713  00000F                     ?i2___wmul:
  1714                           	opt stack 0
  1715  00000F                     i2__tdiv_to_l_@exp1:
  1716                           	opt stack 0
  1717  00000F                     i2___wmul@multiplier:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0xE
  1721  00000F                     	ds	1
  1722  000010                     ??_servoInterruptService:
  1723                           
  1724                           ; 1 bytes @ 0xF
  1725  000010                     	ds	1
  1726  000011                     i2___lltoft@exp:
  1727                           	opt stack 0
  1728  000011                     i2___wmul@multiplicand:
  1729                           	opt stack 0
  1730                           
  1731                           ; 2 bytes @ 0x10
  1732  000011                     	ds	1
  1733  000012                     i2___llmod@divisor:
  1734                           	opt stack 0
  1735                           
  1736                           ; 4 bytes @ 0x11
  1737  000012                     	ds	1
  1738  000013                     i2___wmul@product:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x12
  1742  000013                     	ds	2
  1743  000015                     ?i2___ftmul:
  1744                           	opt stack 0
  1745  000015                     i2___ftmul@f1:
  1746                           	opt stack 0
  1747                           
  1748                           ; 3 bytes @ 0x14
  1749  000015                     	ds	1
  1750  000016                     i2___llmod@counter:
  1751                           	opt stack 0
  1752                           
  1753                           ; 1 bytes @ 0x15
  1754  000016                     	ds	2
  1755  000018                     i2___ftmul@f2:
  1756                           	opt stack 0
  1757                           
  1758                           ; 3 bytes @ 0x17
  1759  000018                     	ds	3
  1760  00001B                     ??i2___ftmul:
  1761                           
  1762                           ; 1 bytes @ 0x1A
  1763  00001B                     	ds	3
  1764  00001E                     i2___ftmul@exp:
  1765                           	opt stack 0
  1766                           
  1767                           ; 1 bytes @ 0x1D
  1768  00001E                     	ds	1
  1769  00001F                     i2___ftmul@f3_as_product:
  1770                           	opt stack 0
  1771                           
  1772                           ; 3 bytes @ 0x1E
  1773  00001F                     	ds	3
  1774  000022                     i2___ftmul@cntr:
  1775                           	opt stack 0
  1776                           
  1777                           ; 1 bytes @ 0x21
  1778  000022                     	ds	1
  1779  000023                     i2___ftmul@sign:
  1780                           	opt stack 0
  1781                           
  1782                           ; 1 bytes @ 0x22
  1783  000023                     	ds	1
  1784  000024                     ?i2_fround:
  1785                           	opt stack 0
  1786  000024                     ?i2_scale:
  1787                           	opt stack 0
  1788                           
  1789                           ; 3 bytes @ 0x23
  1790  000024                     	ds	3
  1791  000027                     i2_fround$1532:
  1792                           	opt stack 0
  1793  000027                     i2_scale$1533:
  1794                           	opt stack 0
  1795                           
  1796                           ; 3 bytes @ 0x26
  1797  000027                     	ds	3
  1798  00002A                     i2scale@scl:
  1799                           	opt stack 0
  1800  00002A                     i2_fround$1531:
  1801                           	opt stack 0
  1802                           
  1803                           ; 3 bytes @ 0x29
  1804  00002A                     	ds	1
  1805  00002B                     ?i2___fttol:
  1806                           	opt stack 0
  1807  00002B                     i2___fttol@f1:
  1808                           	opt stack 0
  1809                           
  1810                           ; 3 bytes @ 0x2A
  1811  00002B                     	ds	2
  1812  00002D                     i2fround@prec:
  1813                           	opt stack 0
  1814                           
  1815                           ; 1 bytes @ 0x2C
  1816  00002D                     	ds	1
  1817  00002E                     ?i2___ftadd:
  1818                           	opt stack 0
  1819  00002E                     i2___ftadd@f1:
  1820                           	opt stack 0
  1821                           
  1822                           ; 3 bytes @ 0x2D
  1823  00002E                     	ds	1
  1824  00002F                     ??i2___fttol:
  1825                           
  1826                           ; 1 bytes @ 0x2E
  1827  00002F                     	ds	2
  1828  000031                     i2___ftadd@f2:
  1829                           	opt stack 0
  1830                           
  1831                           ; 3 bytes @ 0x30
  1832  000031                     	ds	3
  1833  000034                     ??i2___ftadd:
  1834  000034                     i2___fttol@sign1:
  1835                           	opt stack 0
  1836                           
  1837                           ; 1 bytes @ 0x33
  1838  000034                     	ds	1
  1839  000035                     i2___fttol@lval:
  1840                           	opt stack 0
  1841                           
  1842                           ; 4 bytes @ 0x34
  1843  000035                     	ds	2
  1844  000037                     i2___ftadd@sign:
  1845                           	opt stack 0
  1846                           
  1847                           ; 1 bytes @ 0x36
  1848  000037                     	ds	1
  1849  000038                     i2___ftadd@exp2:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x37
  1853  000038                     	ds	1
  1854  000039                     i2___ftadd@exp1:
  1855                           	opt stack 0
  1856  000039                     i2___fttol@exp1:
  1857                           	opt stack 0
  1858                           
  1859                           ; 1 bytes @ 0x38
  1860  000039                     	ds	1
  1861  00003A                     ?i2___ftsub:
  1862                           	opt stack 0
  1863  00003A                     i2___ftsub@f1:
  1864                           	opt stack 0
  1865                           
  1866                           ; 3 bytes @ 0x39
  1867  00003A                     	ds	3
  1868  00003D                     i2___ftsub@f2:
  1869                           	opt stack 0
  1870                           
  1871                           ; 3 bytes @ 0x3C
  1872  00003D                     	ds	3
  1873  000040                     ?i2_printf:
  1874                           	opt stack 0
  1875  000040                     i2printf@f:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x3F
  1879  000040                     	ds	4
  1880  000044                     ??i2_printf:
  1881                           
  1882                           ; 1 bytes @ 0x43
  1883  000044                     	ds	6
  1884  00004A                     i2_printf$1534:
  1885                           	opt stack 0
  1886                           
  1887                           ; 3 bytes @ 0x49
  1888  00004A                     	ds	3
  1889  00004D                     i2printf@idx:
  1890                           	opt stack 0
  1891                           
  1892                           ; 1 bytes @ 0x4C
  1893  00004D                     	ds	1
  1894  00004E                     i2printf@cp:
  1895                           	opt stack 0
  1896                           
  1897                           ; 2 bytes @ 0x4D
  1898  00004E                     	ds	2
  1899  000050                     i2printf@len:
  1900                           	opt stack 0
  1901                           
  1902                           ; 2 bytes @ 0x4F
  1903  000050                     	ds	2
  1904  000052                     i2printf@ap:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x51
  1908  000052                     	ds	2
  1909  000054                     i2printf@prec:
  1910                           	opt stack 0
  1911                           
  1912                           ; 2 bytes @ 0x53
  1913  000054                     	ds	2
  1914  000056                     i2printf@tmpval:
  1915                           	opt stack 0
  1916                           
  1917                           ; 4 bytes @ 0x55
  1918  000056                     	ds	4
  1919  00005A                     i2printf@exp:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0x59
  1923  00005A                     	ds	2
  1924  00005C                     i2printf@val:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x5B
  1928  00005C                     	ds	4
  1929  000060                     i2printf@fval:
  1930                           	opt stack 0
  1931                           
  1932                           ; 3 bytes @ 0x5F
  1933  000060                     	ds	3
  1934  000063                     i2printf@width:
  1935                           	opt stack 0
  1936                           
  1937                           ; 2 bytes @ 0x62
  1938  000063                     	ds	2
  1939  000065                     i2printf@flag:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x64
  1943  000065                     	ds	2
  1944  000067                     i2printf@c:
  1945                           	opt stack 0
  1946                           
  1947                           ; 1 bytes @ 0x66
  1948  000067                     	ds	1
  1949  000068                     ??_service:
  1950                           
  1951                           ; 1 bytes @ 0x67
  1952  000068                     	ds	18
  1953  00007A                     service@key:
  1954                           	opt stack 0
  1955                           
  1956                           ; 1 bytes @ 0x79
  1957  00007A                     	ds	1
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1l	equ	0xFE1
  1966                           
  1967 ;;
  1968 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1969 ;;
  1970 ;; *************** function _main *****************
  1971 ;; Defined at:
  1972 ;;		line 94 in file "main.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  prev            2   71[BANK1 ] int 
  1977 ;;  cylinderDur     2   69[BANK1 ] int 
  1978 ;;  cylinderStar    2   67[BANK1 ] int 
  1979 ;;  cylinderBack    2   65[BANK1 ] int 
  1980 ;;  cylinderForw    2   63[BANK1 ] int 
  1981 ;;  prevTime        4   59[BANK1 ] long 
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Totals:         0       0      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;Total ram usage:       27 bytes
  1996 ;; Hardware stack levels required when called:   12
  1997 ;; This function calls:
  1998 ;;		___aldiv
  1999 ;;		___almod
  2000 ;;		_digitalRead
  2001 ;;		_digitalWrite
  2002 ;;		_initLCD
  2003 ;;		_initServo
  2004 ;;		_initTimer
  2005 ;;		_lcdClear
  2006 ;;		_lcdHome
  2007 ;;		_pinSetup
  2008 ;;		_printf
  2009 ;;		_sortBattery
  2010 ;;		_startTimer
  2011 ;; This function is called by:
  2012 ;;		Startup code after reset
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text0
  2017  0023AA                     __ptext0:
  2018                           	opt stack 0
  2019  0023AA                     _main:
  2020                           	opt stack 19
  2021                           
  2022                           ;main.c: 95: pinSetup();
  2023                           
  2024                           ;incstack = 0
  2025  0023AA  ECB5  F028         	call	_pinSetup	;wreg free
  2026                           
  2027                           ;main.c: 96: initLCD();
  2028  0023AE  EC0A  F028         	call	_initLCD	;wreg free
  2029                           
  2030                           ;main.c: 104: long prevTime = 0;
  2031                           
  2032                           ;main.c: 98: while(1){
  2033  0023B2  0E00               	movlw	0
  2034  0023B4  0101               	movlb	1	; () banked
  2035  0023B6  6F3B               	movwf	main@prevTime& (0+255),b
  2036  0023B8  0E00               	movlw	0
  2037  0023BA  6F3C               	movwf	(main@prevTime+1)& (0+255),b
  2038  0023BC  0E00               	movlw	0
  2039  0023BE  6F3D               	movwf	(main@prevTime+2)& (0+255),b
  2040  0023C0  0E00               	movlw	0
  2041  0023C2  6F3E               	movwf	(main@prevTime+3)& (0+255),b
  2042                           
  2043                           ; BSR set to: 1
  2044                           ;main.c: 105: time = 0;
  2045  0023C4  0E00               	movlw	0
  2046  0023C6  0101               	movlb	1	; () banked
  2047  0023C8  6F9A               	movwf	_time& (0+255),b
  2048  0023CA  0E00               	movlw	0
  2049  0023CC  6F9B               	movwf	(_time+1)& (0+255),b
  2050  0023CE  0E00               	movlw	0
  2051  0023D0  6F9C               	movwf	(_time+2)& (0+255),b
  2052  0023D2  0E00               	movlw	0
  2053  0023D4  6F9D               	movwf	(_time+3)& (0+255),b
  2054                           
  2055                           ;main.c: 106: initTimer(1);
  2056  0023D6  0E00               	movlw	0
  2057  0023D8  0100               	movlb	0	; () banked
  2058  0023DA  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  2059  0023DC  0E01               	movlw	1
  2060  0023DE  6F80               	movwf	initTimer@timer& (0+255),b
  2061  0023E0  EC97  F027         	call	_initTimer	;wreg free
  2062                           
  2063                           ;main.c: 107: startTimer(1,0);
  2064  0023E4  0E00               	movlw	0
  2065  0023E6  0100               	movlb	0	; () banked
  2066  0023E8  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  2067  0023EA  0E01               	movlw	1
  2068  0023EC  6F80               	movwf	startTimer@timer& (0+255),b
  2069  0023EE  0E00               	movlw	0
  2070  0023F0  0100               	movlb	0	; () banked
  2071  0023F2  6F82               	movwf	startTimer@val& (0+255),b
  2072  0023F4  0E00               	movlw	0
  2073  0023F6  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2074  0023F8  0E00               	movlw	0
  2075  0023FA  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2076  0023FC  0E00               	movlw	0
  2077  0023FE  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2078  002400  EC6F  F027         	call	_startTimer	;wreg free
  2079                           
  2080                           ;main.c: 110: digitalWrite(cylinderMotor, 1);
  2081  002404  0E72               	movlw	low _cylinderMotor
  2082  002406  0100               	movlb	0	; () banked
  2083  002408  6F80               	movwf	digitalWrite@pin& (0+255),b
  2084  00240A  0E01               	movlw	high _cylinderMotor
  2085  00240C  0100               	movlb	0	; () banked
  2086  00240E  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2087  002410  0E00               	movlw	0
  2088  002412  0100               	movlb	0	; () banked
  2089  002414  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2090  002416  0E01               	movlw	1
  2091  002418  6F82               	movwf	digitalWrite@val& (0+255),b
  2092  00241A  ECF5  F01F         	call	_digitalWrite	;wreg free
  2093                           
  2094                           ;main.c: 111: initServo(conveyorServo, 0);
  2095  00241E  0E6A               	movlw	low _conveyorServo
  2096  002420  0100               	movlb	0	; () banked
  2097  002422  6FF6               	movwf	initServo@motor& (0+255),b
  2098  002424  0E01               	movlw	high _conveyorServo
  2099  002426  0100               	movlb	0	; () banked
  2100  002428  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2101  00242A  0E00               	movlw	0
  2102  00242C  0100               	movlb	0	; () banked
  2103  00242E  6FF9               	movwf	(initServo@angle+1)& (0+255),b
  2104  002430  0E00               	movlw	0
  2105  002432  6FF8               	movwf	initServo@angle& (0+255),b
  2106  002434  EC5F  F025         	call	_initServo	;wreg free
  2107                           
  2108                           ;main.c: 112: initServo(padServo, padAngle_NEUTRAL);
  2109  002438  0E7E               	movlw	low _padServo
  2110  00243A  0100               	movlb	0	; () banked
  2111  00243C  6FF6               	movwf	initServo@motor& (0+255),b
  2112  00243E  0E01               	movlw	high _padServo
  2113  002440  0100               	movlb	0	; () banked
  2114  002442  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2115  002444  C158  F0F8         	movff	_padAngle_NEUTRAL,initServo@angle
  2116  002448  C159  F0F9         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2117  00244C  EC5F  F025         	call	_initServo	;wreg free
  2118                           
  2119                           ;main.c: 113: initServo(redirectingServo, redirectAngle_AA);
  2120  002450  0E82               	movlw	low _redirectingServo
  2121  002452  0100               	movlb	0	; () banked
  2122  002454  6FF6               	movwf	initServo@motor& (0+255),b
  2123  002456  0E01               	movlw	high _redirectingServo
  2124  002458  0100               	movlb	0	; () banked
  2125  00245A  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2126  00245C  C160  F0F8         	movff	_redirectAngle_AA,initServo@angle
  2127  002460  C161  F0F9         	movff	_redirectAngle_AA+1,initServo@angle+1
  2128  002464  EC5F  F025         	call	_initServo	;wreg free
  2129  002468                     l118:
  2130                           
  2131                           ;main.c: 117: lcdClear();
  2132  002468  ECD3  F029         	call	_lcdClear	;wreg free
  2133                           
  2134                           ;main.c: 118: printf("running");
  2135  00246C  0EF6               	movlw	low STR_1
  2136  00246E  0100               	movlb	0	; () banked
  2137  002470  6FD5               	movwf	printf@f& (0+255),b
  2138  002472  0EFF               	movlw	high STR_1
  2139  002474  0100               	movlb	0	; () banked
  2140  002476  6FD6               	movwf	(printf@f+1)& (0+255),b
  2141  002478  EC09  F000         	call	_printf	;wreg free
  2142                           
  2143                           ;main.c: 120: int cylinderStart = time;
  2144  00247C  C19A  F143         	movff	_time,main@cylinderStart
  2145  002480  C19B  F144         	movff	_time+1,main@cylinderStart+1
  2146                           
  2147                           ;main.c: 121: int cylinderDur = 0;
  2148  002484  0E00               	movlw	0
  2149  002486  0101               	movlb	1	; () banked
  2150  002488  6F46               	movwf	(main@cylinderDur+1)& (0+255),b
  2151  00248A  0E00               	movlw	0
  2152  00248C  6F45               	movwf	main@cylinderDur& (0+255),b
  2153                           
  2154                           ; BSR set to: 1
  2155                           ;main.c: 122: int cylinderForward = 10;
  2156  00248E  0E00               	movlw	0
  2157  002490  0101               	movlb	1	; () banked
  2158  002492  6F40               	movwf	(main@cylinderForward+1)& (0+255),b
  2159  002494  0E0A               	movlw	10
  2160  002496  6F3F               	movwf	main@cylinderForward& (0+255),b
  2161                           
  2162                           ; BSR set to: 1
  2163                           ;main.c: 123: int cylinderBackward = 10;
  2164  002498  0E00               	movlw	0
  2165  00249A  0101               	movlb	1	; () banked
  2166  00249C  6F42               	movwf	(main@cylinderBackward+1)& (0+255),b
  2167  00249E  0E0A               	movlw	10
  2168  0024A0  6F41               	movwf	main@cylinderBackward& (0+255),b
  2169                           
  2170                           ;main.c: 124: while(!batteryDetected){
  2171  0024A2  D0DC               	goto	l6721
  2172  0024A4                     l6707:
  2173                           
  2174                           ; BSR set to: 1
  2175                           ;main.c: 125: lcdHome();
  2176  0024A4  ECD7  F029         	call	_lcdHome	;wreg free
  2177                           
  2178                           ;main.c: 126: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2179  0024A8  0EC3               	movlw	low STR_2
  2180  0024AA  0100               	movlb	0	; () banked
  2181  0024AC  6FD5               	movwf	printf@f& (0+255),b
  2182  0024AE  0EFF               	movlw	high STR_2
  2183  0024B0  0100               	movlb	0	; () banked
  2184  0024B2  6FD6               	movwf	(printf@f+1)& (0+255),b
  2185  0024B4  C19A  F080         	movff	_time,___aldiv@dividend
  2186  0024B8  C19B  F081         	movff	_time+1,___aldiv@dividend+1
  2187  0024BC  C19C  F082         	movff	_time+2,___aldiv@dividend+2
  2188  0024C0  C19D  F083         	movff	_time+3,___aldiv@dividend+3
  2189  0024C4  0E58               	movlw	88
  2190  0024C6  0100               	movlb	0	; () banked
  2191  0024C8  6F84               	movwf	___aldiv@divisor& (0+255),b
  2192  0024CA  0E02               	movlw	2
  2193  0024CC  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2194  0024CE  0E00               	movlw	0
  2195  0024D0  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2196  0024D2  0E00               	movlw	0
  2197  0024D4  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2198  0024D6  EC5F  F01E         	call	___aldiv	;wreg free
  2199  0024DA  C080  F0D7         	movff	?___aldiv,?_printf+2
  2200  0024DE  C081  F0D8         	movff	?___aldiv+1,?_printf+3
  2201  0024E2  C082  F0D9         	movff	?___aldiv+2,?_printf+4
  2202  0024E6  C083  F0DA         	movff	?___aldiv+3,?_printf+5
  2203  0024EA  0E0A               	movlw	10
  2204  0024EC  0100               	movlb	0	; () banked
  2205  0024EE  6F84               	movwf	___aldiv@divisor& (0+255),b
  2206  0024F0  0E00               	movlw	0
  2207  0024F2  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2208  0024F4  0E00               	movlw	0
  2209  0024F6  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2210  0024F8  0E00               	movlw	0
  2211  0024FA  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2212  0024FC  C19A  F080         	movff	_time,___aldiv@dividend
  2213  002500  C19B  F081         	movff	_time+1,___aldiv@dividend+1
  2214  002504  C19C  F082         	movff	_time+2,___aldiv@dividend+2
  2215  002508  C19D  F083         	movff	_time+3,___aldiv@dividend+3
  2216  00250C  EC5F  F01E         	call	___aldiv	;wreg free
  2217  002510  C080  F08E         	movff	?___aldiv,___almod@dividend
  2218  002514  C081  F08F         	movff	?___aldiv+1,___almod@dividend+1
  2219  002518  C082  F090         	movff	?___aldiv+2,___almod@dividend+2
  2220  00251C  C083  F091         	movff	?___aldiv+3,___almod@dividend+3
  2221  002520  0E3C               	movlw	60
  2222  002522  0100               	movlb	0	; () banked
  2223  002524  6F92               	movwf	___almod@divisor& (0+255),b
  2224  002526  0E00               	movlw	0
  2225  002528  6F93               	movwf	(___almod@divisor+1)& (0+255),b
  2226  00252A  0E00               	movlw	0
  2227  00252C  6F94               	movwf	(___almod@divisor+2)& (0+255),b
  2228  00252E  0E00               	movlw	0
  2229  002530  6F95               	movwf	(___almod@divisor+3)& (0+255),b
  2230  002532  EC6B  F021         	call	___almod	;wreg free
  2231  002536  C08E  F0DB         	movff	?___almod,?_printf+6
  2232  00253A  C08F  F0DC         	movff	?___almod+1,?_printf+7
  2233  00253E  C090  F0DD         	movff	?___almod+2,?_printf+8
  2234  002542  C091  F0DE         	movff	?___almod+3,?_printf+9
  2235  002546  EC09  F000         	call	_printf	;wreg free
  2236                           
  2237                           ;main.c: 127: _delay((unsigned long)((77)*(10000000/4000.0)));
  2238  00254A  0EFA               	movlw	250
  2239  00254C  0101               	movlb	1	; () banked
  2240  00254E  6F2E               	movwf	??_main& (0+255),b
  2241  002550  0EFF               	movlw	255
  2242  002552                     u7867:
  2243  002552  2EE8               	decfsz	wreg,f,c
  2244  002554  D7FE               	bra	u7867
  2245  002556  2F2E               	decfsz	??_main& (0+255),f,b
  2246  002558  D7FC               	bra	u7867
  2247                           
  2248                           ;main.c: 129: if(time - cylinderStart >= cylinderDur)
  2249  00255A  C145  F12E         	movff	main@cylinderDur,??_main
  2250  00255E  C146  F12F         	movff	main@cylinderDur+1,??_main+1
  2251  002562  0E00               	movlw	0
  2252  002564  0101               	movlb	1	; () banked
  2253  002566  BF2F               	btfsc	(??_main+1)& (0+255),7,b
  2254  002568  0EFF               	movlw	255
  2255  00256A  6F30               	movwf	(??_main+2)& (0+255),b
  2256  00256C  6F31               	movwf	(??_main+3)& (0+255),b
  2257  00256E  C143  F132         	movff	main@cylinderStart,??_main+4
  2258  002572  C144  F133         	movff	main@cylinderStart+1,??_main+5
  2259  002576  0E00               	movlw	0
  2260  002578  0101               	movlb	1	; () banked
  2261  00257A  BF33               	btfsc	(??_main+5)& (0+255),7,b
  2262  00257C  0EFF               	movlw	255
  2263  00257E  6F34               	movwf	(??_main+6)& (0+255),b
  2264  002580  6F35               	movwf	(??_main+7)& (0+255),b
  2265  002582  0101               	movlb	1	; () banked
  2266  002584  1F32               	comf	(??_main+4)& (0+255),f,b
  2267  002586  1F33               	comf	(??_main+5)& (0+255),f,b
  2268  002588  1F34               	comf	(??_main+6)& (0+255),f,b
  2269  00258A  1F35               	comf	(??_main+7)& (0+255),f,b
  2270  00258C  2B32               	incf	(??_main+4)& (0+255),f,b
  2271  00258E  0E00               	movlw	0
  2272  002590  2333               	addwfc	(??_main+5)& (0+255),f,b
  2273  002592  2334               	addwfc	(??_main+6)& (0+255),f,b
  2274  002594  2335               	addwfc	(??_main+7)& (0+255),f,b
  2275  002596  0101               	movlb	1	; () banked
  2276  002598  519A               	movf	_time& (0+255),w,b
  2277  00259A  0101               	movlb	1	; () banked
  2278  00259C  2532               	addwf	(??_main+4)& (0+255),w,b
  2279  00259E  0101               	movlb	1	; () banked
  2280  0025A0  6F36               	movwf	(??_main+8)& (0+255),b
  2281  0025A2  0101               	movlb	1	; () banked
  2282  0025A4  519B               	movf	(_time+1)& (0+255),w,b
  2283  0025A6  0101               	movlb	1	; () banked
  2284  0025A8  2133               	addwfc	(??_main+5)& (0+255),w,b
  2285  0025AA  0101               	movlb	1	; () banked
  2286  0025AC  6F37               	movwf	(??_main+9)& (0+255),b
  2287  0025AE  0101               	movlb	1	; () banked
  2288  0025B0  519C               	movf	(_time+2)& (0+255),w,b
  2289  0025B2  0101               	movlb	1	; () banked
  2290  0025B4  2134               	addwfc	(??_main+6)& (0+255),w,b
  2291  0025B6  0101               	movlb	1	; () banked
  2292  0025B8  6F38               	movwf	(??_main+10)& (0+255),b
  2293  0025BA  0101               	movlb	1	; () banked
  2294  0025BC  519D               	movf	(_time+3)& (0+255),w,b
  2295  0025BE  0101               	movlb	1	; () banked
  2296  0025C0  2135               	addwfc	(??_main+7)& (0+255),w,b
  2297  0025C2  0101               	movlb	1	; () banked
  2298  0025C4  6F39               	movwf	(??_main+11)& (0+255),b
  2299  0025C6  0101               	movlb	1	; () banked
  2300  0025C8  512E               	movf	??_main& (0+255),w,b
  2301  0025CA  0101               	movlb	1	; () banked
  2302  0025CC  5D36               	subwf	(??_main+8)& (0+255),w,b
  2303  0025CE  0101               	movlb	1	; () banked
  2304  0025D0  512F               	movf	(??_main+1)& (0+255),w,b
  2305  0025D2  0101               	movlb	1	; () banked
  2306  0025D4  5937               	subwfb	(??_main+9)& (0+255),w,b
  2307  0025D6  0101               	movlb	1	; () banked
  2308  0025D8  5130               	movf	(??_main+2)& (0+255),w,b
  2309  0025DA  0101               	movlb	1	; () banked
  2310  0025DC  5938               	subwfb	(??_main+10)& (0+255),w,b
  2311  0025DE  0101               	movlb	1	; () banked
  2312  0025E0  5139               	movf	(??_main+11)& (0+255),w,b
  2313  0025E2  0A80               	xorlw	128
  2314  0025E4  0101               	movlb	1	; () banked
  2315  0025E6  6F3A               	movwf	(??_main+12)& (0+255),b
  2316  0025E8  0101               	movlb	1	; () banked
  2317  0025EA  5131               	movf	(??_main+3)& (0+255),w,b
  2318  0025EC  0A80               	xorlw	128
  2319  0025EE  0101               	movlb	1	; () banked
  2320  0025F0  593A               	subwfb	(??_main+12)& (0+255),w,b
  2321  0025F2  A0D8               	btfss	status,0,c
  2322  0025F4  D033               	goto	l6721
  2323                           
  2324                           ; BSR set to: 1
  2325                           ;main.c: 130: {
  2326                           ;main.c: 131: int prev = digitalRead(cylinderDir);
  2327  0025F6  0E6E               	movlw	low _cylinderDir
  2328  0025F8  0100               	movlb	0	; () banked
  2329  0025FA  6F80               	movwf	digitalRead@pin& (0+255),b
  2330  0025FC  0E01               	movlw	high _cylinderDir
  2331  0025FE  0100               	movlb	0	; () banked
  2332  002600  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2333  002602  EC33  F01D         	call	_digitalRead	;wreg free
  2334  002606  C080  F147         	movff	?_digitalRead,main@prev
  2335  00260A  C081  F148         	movff	?_digitalRead+1,main@prev+1
  2336                           
  2337                           ;main.c: 132: digitalWrite(cylinderDir, !prev);
  2338  00260E  0E6E               	movlw	low _cylinderDir
  2339  002610  0100               	movlb	0	; () banked
  2340  002612  6F80               	movwf	digitalWrite@pin& (0+255),b
  2341  002614  0E01               	movlw	high _cylinderDir
  2342  002616  0100               	movlb	0	; () banked
  2343  002618  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2344  00261A  0101               	movlb	1	; () banked
  2345  00261C  5147               	movf	main@prev& (0+255),w,b
  2346  00261E  0101               	movlb	1	; () banked
  2347  002620  1148               	iorwf	(main@prev+1)& (0+255),w,b
  2348  002622  A4D8               	btfss	status,2,c
  2349  002624  D002               	goto	u7530
  2350  002626  0E01               	movlw	1
  2351  002628  D001               	goto	u7540
  2352  00262A                     u7530:
  2353  00262A  0E00               	movlw	0
  2354  00262C                     u7540:
  2355  00262C  0100               	movlb	0	; () banked
  2356  00262E  6F82               	movwf	digitalWrite@val& (0+255),b
  2357  002630  6B83               	clrf	(digitalWrite@val+1)& (0+255),b
  2358  002632  ECF5  F01F         	call	_digitalWrite	;wreg free
  2359                           
  2360                           ;main.c: 133: if(prev)cylinderDur = cylinderBackward;
  2361  002636  0101               	movlb	1	; () banked
  2362  002638  5147               	movf	main@prev& (0+255),w,b
  2363  00263A  0101               	movlb	1	; () banked
  2364  00263C  1148               	iorwf	(main@prev+1)& (0+255),w,b
  2365  00263E  B4D8               	btfsc	status,2,c
  2366  002640  D005               	goto	l122
  2367                           
  2368                           ; BSR set to: 1
  2369  002642  C141  F145         	movff	main@cylinderBackward,main@cylinderDur
  2370  002646  C142  F146         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2371  00264A  D004               	goto	l123
  2372  00264C                     l122:
  2373                           
  2374                           ; BSR set to: 1
  2375                           ;main.c: 134: else cylinderDur = cylinderForward;
  2376  00264C  C13F  F145         	movff	main@cylinderForward,main@cylinderDur
  2377  002650  C140  F146         	movff	main@cylinderForward+1,main@cylinderDur+1
  2378  002654                     l123:
  2379                           
  2380                           ; BSR set to: 1
  2381                           ;main.c: 135: cylinderStart = time;
  2382  002654  C19A  F143         	movff	_time,main@cylinderStart
  2383  002658  C19B  F144         	movff	_time+1,main@cylinderStart+1
  2384  00265C                     l6721:
  2385                           
  2386                           ; BSR set to: 1
  2387  00265C  0101               	movlb	1	; () banked
  2388  00265E  519E               	movf	_batteryDetected& (0+255),w,b
  2389  002660  0101               	movlb	1	; () banked
  2390  002662  119F               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2391  002664  B4D8               	btfsc	status,2,c
  2392  002666  D71E               	goto	l6707
  2393                           
  2394                           ; BSR set to: 1
  2395                           ;main.c: 136: }
  2396                           ;main.c: 137: }
  2397                           ;main.c: 139: sortBattery();
  2398                           
  2399                           ; BSR set to: 1
  2400  002668  ECF8  F00F         	call	_sortBattery	;wreg free
  2401                           
  2402                           ;main.c: 142: batteryDetected = 0;
  2403  00266C  0E00               	movlw	0
  2404  00266E  0101               	movlb	1	; () banked
  2405  002670  6F9F               	movwf	(_batteryDetected+1)& (0+255),b
  2406  002672  0E00               	movlw	0
  2407  002674  6F9E               	movwf	_batteryDetected& (0+255),b
  2408                           
  2409                           ; BSR set to: 1
  2410  002676  D6F8               	goto	l118
  2411  002678                     l129:
  2412  002678  D7FF               	goto	l129
  2413  00267A                     __end_of_main:
  2414                           	opt stack 0
  2415                           tblptru	equ	0xFF8
  2416                           tblptrh	equ	0xFF7
  2417                           tblptrl	equ	0xFF6
  2418                           tablat	equ	0xFF5
  2419                           postinc0	equ	0xFEE
  2420                           wreg	equ	0xFE8
  2421                           postdec1	equ	0xFE5
  2422                           fsr1l	equ	0xFE1
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _sortBattery *****************
  2426 ;; Defined at:
  2427 ;;		line 154 in file "main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  V_float         3   30[BANK1 ] float 
  2432 ;;  V               3   43[BANK1 ] float 
  2433 ;;  resolution      3   36[BANK1 ] float 
  2434 ;;  Vcc             3   33[BANK1 ] float 
  2435 ;;  signal          2   41[BANK1 ] int 
  2436 ;;  targetAngle     2   39[BANK1 ] int 
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      void 
  2439 ;; Registers used:
  2440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Totals:         0       2      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;Total ram usage:       18 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:   11
  2453 ;; This function calls:
  2454 ;;		___altoft
  2455 ;;		___ftdiv
  2456 ;;		___ftge
  2457 ;;		___ftmul
  2458 ;;		_analogRead
  2459 ;;		_digitalRead
  2460 ;;		_digitalWrite
  2461 ;;		_lcdClear
  2462 ;;		_printf
  2463 ;;		_readKeypad
  2464 ;;		_setAngle
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text1
  2471  001FF0                     __ptext1:
  2472                           	opt stack 0
  2473  001FF0                     _sortBattery:
  2474                           	opt stack 19
  2475                           
  2476                           ;main.c: 157: setAngle(conveyorServo, 90);
  2477                           
  2478                           ;incstack = 0
  2479  001FF0  0E6A               	movlw	low _conveyorServo
  2480  001FF2  0100               	movlb	0	; () banked
  2481  001FF4  6FEC               	movwf	setAngle@motor& (0+255),b
  2482  001FF6  0E01               	movlw	high _conveyorServo
  2483  001FF8  0100               	movlb	0	; () banked
  2484  001FFA  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2485  001FFC  0E00               	movlw	0
  2486  001FFE  0100               	movlb	0	; () banked
  2487  002000  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2488  002002  0E5A               	movlw	90
  2489  002004  6FEE               	movwf	setAngle@angle& (0+255),b
  2490  002006  ECE4  F021         	call	_setAngle	;wreg free
  2491                           
  2492                           ;main.c: 158: digitalWrite(cylinderMotor, 0);
  2493  00200A  0E72               	movlw	low _cylinderMotor
  2494  00200C  0100               	movlb	0	; () banked
  2495  00200E  6F80               	movwf	digitalWrite@pin& (0+255),b
  2496  002010  0E01               	movlw	high _cylinderMotor
  2497  002012  0100               	movlb	0	; () banked
  2498  002014  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2499  002016  0E00               	movlw	0
  2500  002018  0100               	movlb	0	; () banked
  2501  00201A  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2502  00201C  0E00               	movlw	0
  2503  00201E  6F82               	movwf	digitalWrite@val& (0+255),b
  2504  002020  ECF5  F01F         	call	_digitalWrite	;wreg free
  2505                           
  2506                           ;main.c: 161: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2507  002024  0E0D               	movlw	13
  2508  002026  0100               	movlb	0	; () banked
  2509  002028  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2510  00202A  0EAF               	movlw	175
  2511  00202C  0100               	movlb	0	; () banked
  2512  00202E  6FF6               	movwf	??_sortBattery& (0+255),b
  2513  002030  0EB6               	movlw	182
  2514  002032                     u7877:
  2515  002032  2EE8               	decfsz	wreg,f,c
  2516  002034  D7FE               	bra	u7877
  2517  002036  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2518  002038  D7FC               	bra	u7877
  2519  00203A  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2520  00203C  D7FA               	bra	u7877
  2521  00203E  F000               	nop	
  2522                           
  2523                           ;main.c: 165: setAngle(padServo, padAngle_CLOSE);
  2524  002040  0E7E               	movlw	low _padServo
  2525  002042  0100               	movlb	0	; () banked
  2526  002044  6FEC               	movwf	setAngle@motor& (0+255),b
  2527  002046  0E01               	movlw	high _padServo
  2528  002048  0100               	movlb	0	; () banked
  2529  00204A  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2530  00204C  C156  F0EE         	movff	_padAngle_CLOSE,setAngle@angle
  2531  002050  C157  F0EF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  2532  002054  ECE4  F021         	call	_setAngle	;wreg free
  2533                           
  2534                           ;main.c: 166: _delay((unsigned long)((500)*(10000000/4000.0)));
  2535  002058  0E07               	movlw	7
  2536  00205A  0100               	movlb	0	; () banked
  2537  00205C  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2538  00205E  0E58               	movlw	88
  2539  002060  0100               	movlb	0	; () banked
  2540  002062  6FF6               	movwf	??_sortBattery& (0+255),b
  2541  002064  0E59               	movlw	89
  2542  002066                     u7887:
  2543  002066  2EE8               	decfsz	wreg,f,c
  2544  002068  D7FE               	bra	u7887
  2545  00206A  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2546  00206C  D7FC               	bra	u7887
  2547  00206E  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2548  002070  D7FA               	bra	u7887
  2549  002072  D000               	nop2	
  2550                           
  2551                           ;main.c: 170: float Vcc = 4.61;
  2552  002074  0E85               	movlw	133
  2553  002076  0101               	movlb	1	; () banked
  2554  002078  6F21               	movwf	sortBattery@Vcc& (0+255),b
  2555  00207A  0E93               	movlw	147
  2556  00207C  0101               	movlb	1	; () banked
  2557  00207E  6F22               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2558  002080  0E40               	movlw	64
  2559  002082  0101               	movlb	1	; () banked
  2560  002084  6F23               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2561                           
  2562                           ; BSR set to: 1
  2563                           ;main.c: 171: float resolution = (1<<10) - 1;
  2564  002086  0EC0               	movlw	192
  2565  002088  0101               	movlb	1	; () banked
  2566  00208A  6F24               	movwf	sortBattery@resolution& (0+255),b
  2567  00208C  0E7F               	movlw	127
  2568  00208E  0101               	movlb	1	; () banked
  2569  002090  6F25               	movwf	(sortBattery@resolution+1)& (0+255),b
  2570  002092  0E44               	movlw	68
  2571  002094  0101               	movlb	1	; () banked
  2572  002096  6F26               	movwf	(sortBattery@resolution+2)& (0+255),b
  2573                           
  2574                           ; BSR set to: 1
  2575                           ;main.c: 173: int targetAngle;
  2576                           ;main.c: 174: int signal = digitalRead(padPin1)<<1;
  2577  002098  0E76               	movlw	low _padPin1
  2578  00209A  0100               	movlb	0	; () banked
  2579  00209C  6F80               	movwf	digitalRead@pin& (0+255),b
  2580  00209E  0E01               	movlw	high _padPin1
  2581  0020A0  0100               	movlb	0	; () banked
  2582  0020A2  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2583  0020A4  EC33  F01D         	call	_digitalRead	;wreg free
  2584  0020A8  90D8               	bcf	status,0,c
  2585  0020AA  0100               	movlb	0	; () banked
  2586  0020AC  3580               	rlcf	?_digitalRead& (0+255),w,b
  2587  0020AE  0101               	movlb	1	; () banked
  2588  0020B0  6F29               	movwf	sortBattery@signal& (0+255),b
  2589  0020B2  0100               	movlb	0	; () banked
  2590  0020B4  3581               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2591  0020B6  0101               	movlb	1	; () banked
  2592  0020B8  6F2A               	movwf	(sortBattery@signal+1)& (0+255),b
  2593                           
  2594                           ; BSR set to: 1
  2595                           ;main.c: 175: signal |= digitalRead(padPin2);
  2596  0020BA  0E7A               	movlw	low _padPin2
  2597  0020BC  0100               	movlb	0	; () banked
  2598  0020BE  6F80               	movwf	digitalRead@pin& (0+255),b
  2599  0020C0  0E01               	movlw	high _padPin2
  2600  0020C2  0100               	movlb	0	; () banked
  2601  0020C4  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2602  0020C6  EC33  F01D         	call	_digitalRead	;wreg free
  2603  0020CA  0100               	movlb	0	; () banked
  2604  0020CC  5180               	movf	?_digitalRead& (0+255),w,b
  2605  0020CE  0101               	movlb	1	; () banked
  2606  0020D0  1329               	iorwf	sortBattery@signal& (0+255),f,b
  2607  0020D2  0100               	movlb	0	; () banked
  2608  0020D4  5181               	movf	(?_digitalRead+1)& (0+255),w,b
  2609  0020D6  0101               	movlb	1	; () banked
  2610  0020D8  132A               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2611                           
  2612                           ; BSR set to: 1
  2613                           ;main.c: 177: digitalWrite(AA_float, 1);
  2614  0020DA  0E66               	movlw	low _AA_float
  2615  0020DC  0100               	movlb	0	; () banked
  2616  0020DE  6F80               	movwf	digitalWrite@pin& (0+255),b
  2617  0020E0  0E01               	movlw	high _AA_float
  2618  0020E2  0100               	movlb	0	; () banked
  2619  0020E4  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2620  0020E6  0E00               	movlw	0
  2621  0020E8  0100               	movlb	0	; () banked
  2622  0020EA  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2623  0020EC  0E01               	movlw	1
  2624  0020EE  6F82               	movwf	digitalWrite@val& (0+255),b
  2625  0020F0  ECF5  F01F         	call	_digitalWrite	;wreg free
  2626                           
  2627                           ;main.c: 178: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2628  0020F4  C124  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2629  0020F8  C125  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2630  0020FC  C126  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2631  002100  C198  F080         	movff	_padPin3+2,analogRead@channel
  2632  002104  C199  F081         	movff	_padPin3+3,analogRead@channel+1
  2633  002108  EC74  F028         	call	_analogRead	;wreg free
  2634  00210C  C080  F088         	movff	?_analogRead,___altoft@c
  2635  002110  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2636  002114  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2637  002118  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2638  00211C  EC7B  F024         	call	___altoft	;wreg free
  2639  002120  C088  F092         	movff	?___altoft,___ftdiv@f1
  2640  002124  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2641  002128  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2642  00212C  ECB5  F01A         	call	___ftdiv	;wreg free
  2643  002130  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2644  002134  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2645  002138  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2646  00213C  C121  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2647  002140  C122  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2648  002144  C123  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2649  002148  EC06  F01A         	call	___ftmul	;wreg free
  2650  00214C  C0A1  F12B         	movff	?___ftmul,sortBattery@V
  2651  002150  C0A2  F12C         	movff	?___ftmul+1,sortBattery@V+1
  2652  002154  C0A3  F12D         	movff	?___ftmul+2,sortBattery@V+2
  2653                           
  2654                           ;main.c: 180: lcdClear();
  2655  002158  ECD3  F029         	call	_lcdClear	;wreg free
  2656                           
  2657                           ;main.c: 181: printf("sig: %d \nV: %f",signal,V);
  2658  00215C  0ED4               	movlw	low STR_3
  2659  00215E  0100               	movlb	0	; () banked
  2660  002160  6FD5               	movwf	printf@f& (0+255),b
  2661  002162  0EFF               	movlw	high STR_3
  2662  002164  0100               	movlb	0	; () banked
  2663  002166  6FD6               	movwf	(printf@f+1)& (0+255),b
  2664  002168  C129  F0D7         	movff	sortBattery@signal,?_printf+2
  2665  00216C  C12A  F0D8         	movff	sortBattery@signal+1,?_printf+3
  2666  002170  C12B  F0D9         	movff	sortBattery@V,?_printf+4
  2667  002174  C12C  F0DA         	movff	sortBattery@V+1,?_printf+5
  2668  002178  C12D  F0DB         	movff	sortBattery@V+2,?_printf+6
  2669  00217C  EC09  F000         	call	_printf	;wreg free
  2670                           
  2671                           ;main.c: 182: readKeypad();
  2672  002180  EC26  F029         	call	_readKeypad	;wreg free
  2673                           
  2674                           ;main.c: 186: switch(signal){
  2675  002184  D0A3               	goto	l6241
  2676  002186                     l6219:
  2677                           
  2678                           ;main.c: 189: digitalWrite(AA_float, 0);
  2679  002186  0E66               	movlw	low _AA_float
  2680  002188  0100               	movlb	0	; () banked
  2681  00218A  6F80               	movwf	digitalWrite@pin& (0+255),b
  2682  00218C  0E01               	movlw	high _AA_float
  2683  00218E  0100               	movlb	0	; () banked
  2684  002190  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2685  002192  0E00               	movlw	0
  2686  002194  0100               	movlb	0	; () banked
  2687  002196  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2688  002198  0E00               	movlw	0
  2689  00219A  6F82               	movwf	digitalWrite@val& (0+255),b
  2690  00219C  ECF5  F01F         	call	_digitalWrite	;wreg free
  2691                           
  2692                           ;main.c: 190: _delay((unsigned long)((1)*(10000000/4000.0)));
  2693  0021A0  0E04               	movlw	4
  2694  0021A2  0100               	movlb	0	; () banked
  2695  0021A4  6FF6               	movwf	??_sortBattery& (0+255),b
  2696  0021A6  0E3D               	movlw	61
  2697  0021A8                     u7897:
  2698  0021A8  2EE8               	decfsz	wreg,f,c
  2699  0021AA  D7FE               	bra	u7897
  2700  0021AC  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2701  0021AE  D7FC               	bra	u7897
  2702  0021B0  D000               	nop2	
  2703                           
  2704                           ;main.c: 191: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2705  0021B2  C124  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2706  0021B6  C125  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2707  0021BA  C126  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2708  0021BE  C198  F080         	movff	_padPin3+2,analogRead@channel
  2709  0021C2  C199  F081         	movff	_padPin3+3,analogRead@channel+1
  2710  0021C6  EC74  F028         	call	_analogRead	;wreg free
  2711  0021CA  C080  F088         	movff	?_analogRead,___altoft@c
  2712  0021CE  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2713  0021D2  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2714  0021D6  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2715  0021DA  EC7B  F024         	call	___altoft	;wreg free
  2716  0021DE  C088  F092         	movff	?___altoft,___ftdiv@f1
  2717  0021E2  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2718  0021E6  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2719  0021EA  ECB5  F01A         	call	___ftdiv	;wreg free
  2720  0021EE  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2721  0021F2  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2722  0021F6  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2723  0021FA  C121  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2724  0021FE  C122  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2725  002202  C123  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2726  002206  EC06  F01A         	call	___ftmul	;wreg free
  2727  00220A  C0A1  F11E         	movff	?___ftmul,sortBattery@V_float
  2728  00220E  C0A2  F11F         	movff	?___ftmul+1,sortBattery@V_float+1
  2729  002212  C0A3  F120         	movff	?___ftmul+2,sortBattery@V_float+2
  2730                           
  2731                           ;main.c: 192: if(V_float < 0.1){
  2732  002216  C11E  F080         	movff	sortBattery@V_float,___ftge@ff1
  2733  00221A  C11F  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2734  00221E  C120  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2735  002222  0ECD               	movlw	205
  2736  002224  0100               	movlb	0	; () banked
  2737  002226  6F83               	movwf	___ftge@ff2& (0+255),b
  2738  002228  0ECC               	movlw	204
  2739  00222A  0100               	movlb	0	; () banked
  2740  00222C  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2741  00222E  0E3D               	movlw	61
  2742  002230  0100               	movlb	0	; () banked
  2743  002232  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2744  002234  EC4E  F022         	call	___ftge	;wreg free
  2745  002238  0100               	movlb	0	; () banked
  2746  00223A  B0D8               	btfsc	status,0,c
  2747  00223C  D016               	goto	l6231
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;main.c: 193: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2751  00223E  C14C  F080         	movff	_V_LIM_AA,___ftge@ff1
  2752  002242  C14D  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2753  002246  C14E  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2754  00224A  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2755  00224E  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2756  002252  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2757  002256  EC4E  F022         	call	___ftge	;wreg free
  2758  00225A  0100               	movlb	0	; () banked
  2759  00225C  B0D8               	btfsc	status,0,c
  2760  00225E  D031               	goto	l145
  2761                           
  2762                           ; BSR set to: 0
  2763  002260  C160  F127         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2764  002264  C161  F128         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2765  002268  D045               	goto	l6243
  2766  00226A                     l6231:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 199: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2770  00226A  C149  F080         	movff	_V_LIM_9V,___ftge@ff1
  2771  00226E  C14A  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2772  002272  C14B  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2773  002276  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2774  00227A  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2775  00227E  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2776  002282  EC4E  F022         	call	___ftge	;wreg free
  2777  002286  0100               	movlb	0	; () banked
  2778  002288  B0D8               	btfsc	status,0,c
  2779  00228A  D01B               	goto	l145
  2780                           
  2781                           ; BSR set to: 0
  2782  00228C  C15E  F127         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2783  002290  C15F  F128         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2784  002294  D02F               	goto	l6243
  2785  002296                     l6235:
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 203: if(V > V_LIM_C) targetAngle = redirectAngle_C;
  2789  002296  C14F  F080         	movff	_V_LIM_C,___ftge@ff1
  2790  00229A  C150  F081         	movff	_V_LIM_C+1,___ftge@ff1+1
  2791  00229E  C151  F082         	movff	_V_LIM_C+2,___ftge@ff1+2
  2792  0022A2  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2793  0022A6  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2794  0022AA  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2795  0022AE  EC4E  F022         	call	___ftge	;wreg free
  2796  0022B2  0100               	movlb	0	; () banked
  2797  0022B4  B0D8               	btfsc	status,0,c
  2798  0022B6  D005               	goto	l145
  2799                           
  2800                           ; BSR set to: 0
  2801  0022B8  C162  F127         	movff	_redirectAngle_C,sortBattery@targetAngle
  2802  0022BC  C163  F128         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2803  0022C0  D019               	goto	l6243
  2804  0022C2                     l145:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;main.c: 204: else targetAngle = redirectAngle_OTHER;
  2808  0022C2  C164  F127         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2809  0022C6  C165  F128         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 206: }
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;main.c: 205: break;
  2816  0022CA  D014               	goto	l6243
  2817  0022CC                     l6241:
  2818  0022CC  C129  F0F6         	movff	sortBattery@signal,??_sortBattery
  2819  0022D0  C12A  F0F7         	movff	sortBattery@signal+1,??_sortBattery+1
  2820                           
  2821                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2822                           ; Switch size 1, requested type "space"
  2823                           ; Number of cases is 1, Range of values is 0 to 0
  2824                           ; switch strategies available:
  2825                           ; Name         Instructions Cycles
  2826                           ; simple_byte            4     3 (average)
  2827                           ;	Chosen strategy is simple_byte
  2828  0022D4  0100               	movlb	0	; () banked
  2829  0022D6  51F7               	movf	(??_sortBattery+1)& (0+255),w,b
  2830  0022D8  0A00               	xorlw	0	; case 0
  2831  0022DA  A4D8               	btfss	status,2,c
  2832  0022DC  D00B               	goto	l6243
  2833                           
  2834                           ; BSR set to: 0
  2835                           ; Switch size 1, requested type "space"
  2836                           ; Number of cases is 3, Range of values is 0 to 2
  2837                           ; switch strategies available:
  2838                           ; Name         Instructions Cycles
  2839                           ; simple_byte           10     6 (average)
  2840                           ;	Chosen strategy is simple_byte
  2841  0022DE  0100               	movlb	0	; () banked
  2842  0022E0  51F6               	movf	??_sortBattery& (0+255),w,b
  2843  0022E2  0A00               	xorlw	0	; case 0
  2844  0022E4  B4D8               	btfsc	status,2,c
  2845  0022E6  D74F               	goto	l6219
  2846  0022E8  0A01               	xorlw	1	; case 1
  2847  0022EA  B4D8               	btfsc	status,2,c
  2848  0022EC  D7D4               	goto	l6235
  2849  0022EE  0A03               	xorlw	3	; case 2
  2850  0022F0  B4D8               	btfsc	status,2,c
  2851  0022F2  D7BB               	goto	l6231
  2852  0022F4                     l6243:
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;main.c: 208: setAngle(redirectingServo, targetAngle);
  2856  0022F4  0E82               	movlw	low _redirectingServo
  2857  0022F6  0100               	movlb	0	; () banked
  2858  0022F8  6FEC               	movwf	setAngle@motor& (0+255),b
  2859  0022FA  0E01               	movlw	high _redirectingServo
  2860  0022FC  0100               	movlb	0	; () banked
  2861  0022FE  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2862  002300  C127  F0EE         	movff	sortBattery@targetAngle,setAngle@angle
  2863  002304  C128  F0EF         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2864  002308  ECE4  F021         	call	_setAngle	;wreg free
  2865                           
  2866                           ;main.c: 209: _delay((unsigned long)((500)*(10000000/4000.0)));
  2867  00230C  0E07               	movlw	7
  2868  00230E  0100               	movlb	0	; () banked
  2869  002310  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2870  002312  0E58               	movlw	88
  2871  002314  0100               	movlb	0	; () banked
  2872  002316  6FF6               	movwf	??_sortBattery& (0+255),b
  2873  002318  0E59               	movlw	89
  2874  00231A                     u7907:
  2875  00231A  2EE8               	decfsz	wreg,f,c
  2876  00231C  D7FE               	bra	u7907
  2877  00231E  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2878  002320  D7FC               	bra	u7907
  2879  002322  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2880  002324  D7FA               	bra	u7907
  2881  002326  D000               	nop2	
  2882                           
  2883                           ;main.c: 213: setAngle(padServo, padAngle_OPEN);
  2884  002328  0E7E               	movlw	low _padServo
  2885  00232A  0100               	movlb	0	; () banked
  2886  00232C  6FEC               	movwf	setAngle@motor& (0+255),b
  2887  00232E  0E01               	movlw	high _padServo
  2888  002330  0100               	movlb	0	; () banked
  2889  002332  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2890  002334  C15A  F0EE         	movff	_padAngle_OPEN,setAngle@angle
  2891  002338  C15B  F0EF         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2892  00233C  ECE4  F021         	call	_setAngle	;wreg free
  2893                           
  2894                           ;main.c: 214: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2895  002340  0E0D               	movlw	13
  2896  002342  0100               	movlb	0	; () banked
  2897  002344  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2898  002346  0EAF               	movlw	175
  2899  002348  0100               	movlb	0	; () banked
  2900  00234A  6FF6               	movwf	??_sortBattery& (0+255),b
  2901  00234C  0EB6               	movlw	182
  2902  00234E                     u7917:
  2903  00234E  2EE8               	decfsz	wreg,f,c
  2904  002350  D7FE               	bra	u7917
  2905  002352  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2906  002354  D7FC               	bra	u7917
  2907  002356  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2908  002358  D7FA               	bra	u7917
  2909  00235A  F000               	nop	
  2910                           
  2911                           ;main.c: 218: setAngle(padServo, padAngle_NEUTRAL);
  2912  00235C  0E7E               	movlw	low _padServo
  2913  00235E  0100               	movlb	0	; () banked
  2914  002360  6FEC               	movwf	setAngle@motor& (0+255),b
  2915  002362  0E01               	movlw	high _padServo
  2916  002364  0100               	movlb	0	; () banked
  2917  002366  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2918  002368  C158  F0EE         	movff	_padAngle_NEUTRAL,setAngle@angle
  2919  00236C  C159  F0EF         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2920  002370  ECE4  F021         	call	_setAngle	;wreg free
  2921                           
  2922                           ;main.c: 222: setAngle(conveyorServo, 0);
  2923  002374  0E6A               	movlw	low _conveyorServo
  2924  002376  0100               	movlb	0	; () banked
  2925  002378  6FEC               	movwf	setAngle@motor& (0+255),b
  2926  00237A  0E01               	movlw	high _conveyorServo
  2927  00237C  0100               	movlb	0	; () banked
  2928  00237E  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2929  002380  0E00               	movlw	0
  2930  002382  0100               	movlb	0	; () banked
  2931  002384  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2932  002386  0E00               	movlw	0
  2933  002388  6FEE               	movwf	setAngle@angle& (0+255),b
  2934  00238A  ECE4  F021         	call	_setAngle	;wreg free
  2935                           
  2936                           ;main.c: 223: digitalWrite(cylinderMotor, 1);
  2937  00238E  0E72               	movlw	low _cylinderMotor
  2938  002390  0100               	movlb	0	; () banked
  2939  002392  6F80               	movwf	digitalWrite@pin& (0+255),b
  2940  002394  0E01               	movlw	high _cylinderMotor
  2941  002396  0100               	movlb	0	; () banked
  2942  002398  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2943  00239A  0E00               	movlw	0
  2944  00239C  0100               	movlb	0	; () banked
  2945  00239E  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2946  0023A0  0E01               	movlw	1
  2947  0023A2  6F82               	movwf	digitalWrite@val& (0+255),b
  2948  0023A4  ECF5  F01F         	call	_digitalWrite	;wreg free
  2949  0023A8  0012               	return		;funcret
  2950  0023AA                     __end_of_sortBattery:
  2951                           	opt stack 0
  2952                           tblptru	equ	0xFF8
  2953                           tblptrh	equ	0xFF7
  2954                           tblptrl	equ	0xFF6
  2955                           tablat	equ	0xFF5
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           postdec1	equ	0xFE5
  2959                           fsr1l	equ	0xFE1
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _readKeypad *****************
  2963 ;; Defined at:
  2964 ;;		line 36 in file "keypad.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;		None
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  key             1    0[BANK0 ] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      unsigned char 
  2971 ;; Registers used:
  2972 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;Total ram usage:        1 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    6
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_sortBattery
  2989 ;;		_pause
  2990 ;;		_showInterface
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text2
  2995  00524C                     __ptext2:
  2996                           	opt stack 0
  2997  00524C                     _readKeypad:
  2998                           	opt stack 23
  2999  00524C                     l227:
  3000  00524C  A281               	btfss	3969,1,c	;volatile
  3001  00524E  D7FE               	goto	l227
  3002                           
  3003                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  3004  005250  3881               	swapf	3969,w,c	;volatile
  3005  005252  0B0F               	andlw	15
  3006  005254  0B0F               	andlw	15
  3007  005256  0100               	movlb	0	; () banked
  3008  005258  6F80               	movwf	readKeypad@key& (0+255),b
  3009  00525A                     l230:
  3010  00525A  B281               	btfsc	3969,1,c	;volatile
  3011  00525C  D7FE               	goto	l230
  3012                           
  3013                           ;keypad.c: 40: return keys[key];
  3014  00525E  0100               	movlb	0	; () banked
  3015  005260  5180               	movf	readKeypad@key& (0+255),w,b
  3016  005262  0D01               	mullw	1
  3017  005264  0EC7               	movlw	low _keys
  3018  005266  24F3               	addwf	prodl,w,c
  3019  005268  6EF6               	movwf	tblptrl,c
  3020  00526A  0EFE               	movlw	high _keys
  3021  00526C  20F4               	addwfc	prodh,w,c
  3022  00526E  6EF7               	movwf	tblptrh,c
  3023  005270                     	if	0	;There are less than 3 active tblptr bytes
  3024  005270                     	endif
  3025  005270  0008               	tblrd		*
  3026  005272  50F5               	movf	tablat,w,c
  3027  005274  0012               	return	
  3028  005276                     __end_of_readKeypad:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           postdec1	equ	0xFE5
  3039                           fsr1l	equ	0xFE1
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _printf *****************
  3043 ;; Defined at:
  3044 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  f               2   85[BANK0 ] PTR const unsigned char 
  3047 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  3048 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  3049 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  3050 ;;		 -> STR_5(8), STR_4(11), STR_3(15), STR_2(17), 
  3051 ;;		 -> STR_1(8), 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  idx             1    5[BANK1 ] unsigned char 
  3054 ;;  val             4   18[BANK1 ] unsigned long 
  3055 ;;  tmpval          4   12[BANK1 ] struct .
  3056 ;;  fval            3   24[BANK1 ] struct .
  3057 ;;  flag            2   27[BANK1 ] unsigned short 
  3058 ;;  width           2   22[BANK1 ] int 
  3059 ;;  exp             2   16[BANK1 ] int 
  3060 ;;  prec            2   10[BANK1 ] int 
  3061 ;;  ap              2    8[BANK1 ] PTR void [1]
  3062 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3063 ;;  len             2    6[BANK1 ] unsigned int 
  3064 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
  3065 ;;		 -> printf@c(1), 
  3066 ;;  c               1   29[BANK1 ] char 
  3067 ;;  d               1    0        unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  2   85[BANK0 ] int 
  3070 ;; Registers used:
  3071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3077 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Totals:         0      16      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;Total ram usage:       46 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:   10
  3084 ;; This function calls:
  3085 ;;		___awdiv
  3086 ;;		___ftadd
  3087 ;;		___ftge
  3088 ;;		___ftmul
  3089 ;;		___ftneg
  3090 ;;		___ftsub
  3091 ;;		___fttol
  3092 ;;		___lldiv
  3093 ;;		___llmod
  3094 ;;		___lltoft
  3095 ;;		___wmul
  3096 ;;		__div_to_l_
  3097 ;;		__tdiv_to_l_
  3098 ;;		_fround
  3099 ;;		_isdigit
  3100 ;;		_putch
  3101 ;;		_scale
  3102 ;; This function is called by:
  3103 ;;		_main
  3104 ;;		_sortBattery
  3105 ;;		_pause
  3106 ;;		_testFrequency
  3107 ;;		_dateTime
  3108 ;;		_mainMenu
  3109 ;;		_runSelect
  3110 ;;		_runMenu
  3111 ;;		_runTime
  3112 ;;		_runStats
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text3
  3117  000012                     __ptext3:
  3118                           	opt stack 0
  3119  000012                     _printf:
  3120                           	opt stack 19
  3121                           
  3122                           ;doprnt.c: 466: va_list ap;
  3123                           ;doprnt.c: 499: signed char c;
  3124                           ;doprnt.c: 501: int width;
  3125                           ;doprnt.c: 504: int prec;
  3126                           ;doprnt.c: 508: unsigned short flag;
  3127                           ;doprnt.c: 515: char d;
  3128                           ;doprnt.c: 516: double fval;
  3129                           ;doprnt.c: 517: int exp;
  3130                           ;doprnt.c: 523: union {
  3131                           ;doprnt.c: 524: unsigned long vd;
  3132                           ;doprnt.c: 525: double integ;
  3133                           ;doprnt.c: 526: } tmpval;
  3134                           ;doprnt.c: 528: unsigned long val;
  3135                           ;doprnt.c: 529: unsigned len;
  3136                           ;doprnt.c: 530: const char * cp;
  3137                           ;doprnt.c: 533: *ap = __va_start();
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;incstack = 0
  3141  000012  0ED7               	movlw	low (?_printf+2)
  3142  000014  0101               	movlb	1	; () banked
  3143  000016  6F08               	movwf	printf@ap& (0+255),b
  3144  000018  0E00               	movlw	high (?_printf+2)
  3145  00001A  0101               	movlb	1	; () banked
  3146  00001C  6F09               	movwf	(printf@ap+1)& (0+255),b
  3147                           
  3148                           ;doprnt.c: 536: while(c = *f++) {
  3149  00001E  EF55  F006         	goto	l5721
  3150  000022                     l5399:
  3151                           
  3152                           ; BSR set to: 1
  3153                           ;doprnt.c: 538: if(c != '%')
  3154  000022  0E25               	movlw	37
  3155  000024  0101               	movlb	1	; () banked
  3156  000026  191D               	xorwf	printf@c& (0+255),w,b
  3157  000028  B4D8               	btfsc	status,2,c
  3158  00002A  D006               	goto	l5403
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;doprnt.c: 540: {
  3162                           ;doprnt.c: 541: (putch(c) );
  3163  00002C  0101               	movlb	1	; () banked
  3164  00002E  511D               	movf	printf@c& (0+255),w,b
  3165  000030  EC65  F029         	call	_putch
  3166                           
  3167                           ;doprnt.c: 542: continue;
  3168  000034  EF55  F006         	goto	l5721
  3169  000038                     l5403:
  3170                           
  3171                           ;doprnt.c: 543: }
  3172                           ;doprnt.c: 546: width = 0;
  3173  000038  0E00               	movlw	0
  3174  00003A  0101               	movlb	1	; () banked
  3175  00003C  6F17               	movwf	(printf@width+1)& (0+255),b
  3176  00003E  0E00               	movlw	0
  3177  000040  6F16               	movwf	printf@width& (0+255),b
  3178                           
  3179                           ;doprnt.c: 548: flag = 0;
  3180  000042  0E00               	movlw	0
  3181  000044  0101               	movlb	1	; () banked
  3182  000046  6F1C               	movwf	(printf@flag+1)& (0+255),b
  3183  000048  0E00               	movlw	0
  3184  00004A  6F1B               	movwf	printf@flag& (0+255),b
  3185                           
  3186                           ; BSR set to: 1
  3187                           ;doprnt.c: 551: switch(*f) {
  3188                           
  3189                           ;doprnt.c: 550: for(;;) {
  3190  00004C  D005               	goto	l5409
  3191  00004E                     l5405:
  3192                           
  3193                           ;doprnt.c: 580: flag |= 0x04;
  3194  00004E  0101               	movlb	1	; () banked
  3195  000050  851B               	bsf	printf@flag& (0+255),2,b
  3196                           
  3197                           ;doprnt.c: 581: f++;
  3198  000052  0100               	movlb	0	; () banked
  3199  000054  4BD5               	infsnz	printf@f& (0+255),f,b
  3200  000056  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3201  000058                     l5409:
  3202  000058  C0D5  FFF6         	movff	printf@f,tblptrl
  3203  00005C  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3204  000060                     	if	0	;tblptru may be non-zero
  3205  000060                     	endif
  3206  000060                     	if	0	;tblptru may be non-zero
  3207  000060                     	endif
  3208  000060  0008               	tblrd		*
  3209  000062  50F5               	movf	tablat,w,c
  3210                           
  3211                           ; Switch size 1, requested type "space"
  3212                           ; Number of cases is 1, Range of values is 48 to 48
  3213                           ; switch strategies available:
  3214                           ; Name         Instructions Cycles
  3215                           ; simple_byte            4     3 (average)
  3216                           ;	Chosen strategy is simple_byte
  3217  000064  0A30               	xorlw	48	; case 48
  3218  000066  B4D8               	btfsc	status,2,c
  3219  000068  D7F2               	goto	l5405
  3220                           
  3221                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3222                           
  3223                           ;doprnt.c: 586: }
  3224                           
  3225                           ;doprnt.c: 585: break;
  3226  00006A  C0D5  FFF6         	movff	printf@f,tblptrl
  3227  00006E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3228  000072                     	if	0	;tblptru may be non-zero
  3229  000072                     	endif
  3230  000072                     	if	0	;tblptru may be non-zero
  3231  000072                     	endif
  3232  000072  0008               	tblrd		*
  3233  000074  50F5               	movf	tablat,w,c
  3234  000076  EC3B  F029         	call	_isdigit
  3235  00007A  A0D8               	btfss	status,0,c
  3236  00007C  D0A1               	goto	l5455
  3237                           
  3238                           ;doprnt.c: 598: width = 0;
  3239  00007E  0E00               	movlw	0
  3240  000080  0101               	movlb	1	; () banked
  3241  000082  6F17               	movwf	(printf@width+1)& (0+255),b
  3242  000084  0E00               	movlw	0
  3243  000086  6F16               	movwf	printf@width& (0+255),b
  3244  000088                     l5415:
  3245                           
  3246                           ;doprnt.c: 600: width *= 10;
  3247  000088  C116  F08E         	movff	printf@width,___wmul@multiplier
  3248  00008C  C117  F08F         	movff	printf@width+1,___wmul@multiplier+1
  3249  000090  0E00               	movlw	0
  3250  000092  0100               	movlb	0	; () banked
  3251  000094  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3252  000096  0E0A               	movlw	10
  3253  000098  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3254  00009A  ECF3  F028         	call	___wmul	;wreg free
  3255  00009E  C08E  F116         	movff	?___wmul,printf@width
  3256  0000A2  C08F  F117         	movff	?___wmul+1,printf@width+1
  3257                           
  3258                           ;doprnt.c: 601: width += *f++ - '0';
  3259  0000A6  0ED0               	movlw	208
  3260  0000A8  0100               	movlb	0	; () banked
  3261  0000AA  6FDF               	movwf	??_printf& (0+255),b
  3262  0000AC  0EFF               	movlw	255
  3263  0000AE  0100               	movlb	0	; () banked
  3264  0000B0  6FE0               	movwf	(??_printf+1)& (0+255),b
  3265  0000B2  C0D5  FFF6         	movff	printf@f,tblptrl
  3266  0000B6  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3267  0000BA                     	if	0	;tblptru may be non-zero
  3268  0000BA                     	endif
  3269  0000BA                     	if	0	;tblptru may be non-zero
  3270  0000BA                     	endif
  3271  0000BA  0008               	tblrd		*
  3272  0000BC  50F5               	movf	tablat,w,c
  3273  0000BE  0100               	movlb	0	; () banked
  3274  0000C0  6FE1               	movwf	(??_printf+2)& (0+255),b
  3275  0000C2  6BE2               	clrf	(??_printf+3)& (0+255),b
  3276  0000C4  0100               	movlb	0	; () banked
  3277  0000C6  51DF               	movf	??_printf& (0+255),w,b
  3278  0000C8  0100               	movlb	0	; () banked
  3279  0000CA  27E1               	addwf	(??_printf+2)& (0+255),f,b
  3280  0000CC  0100               	movlb	0	; () banked
  3281  0000CE  51E0               	movf	(??_printf+1)& (0+255),w,b
  3282  0000D0  0100               	movlb	0	; () banked
  3283  0000D2  23E2               	addwfc	(??_printf+3)& (0+255),f,b
  3284  0000D4  0100               	movlb	0	; () banked
  3285  0000D6  51E1               	movf	(??_printf+2)& (0+255),w,b
  3286  0000D8  0101               	movlb	1	; () banked
  3287  0000DA  2716               	addwf	printf@width& (0+255),f,b
  3288  0000DC  0100               	movlb	0	; () banked
  3289  0000DE  51E2               	movf	(??_printf+3)& (0+255),w,b
  3290  0000E0  0101               	movlb	1	; () banked
  3291  0000E2  2317               	addwfc	(printf@width+1)& (0+255),f,b
  3292                           
  3293                           ; BSR set to: 1
  3294  0000E4  0100               	movlb	0	; () banked
  3295  0000E6  4BD5               	infsnz	printf@f& (0+255),f,b
  3296  0000E8  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3300  0000EA  C0D5  FFF6         	movff	printf@f,tblptrl
  3301  0000EE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3302  0000F2                     	if	0	;tblptru may be non-zero
  3303  0000F2                     	endif
  3304  0000F2                     	if	0	;tblptru may be non-zero
  3305  0000F2                     	endif
  3306  0000F2  0008               	tblrd		*
  3307  0000F4  50F5               	movf	tablat,w,c
  3308  0000F6  EC3B  F029         	call	_isdigit
  3309  0000FA  A0D8               	btfss	status,0,c
  3310  0000FC  D061               	goto	l5455
  3311  0000FE  D7C4               	goto	l5415
  3312  000100                     l5423:
  3313                           
  3314                           ;doprnt.c: 643: flag |= 0x10;
  3315  000100  0101               	movlb	1	; () banked
  3316  000102  891B               	bsf	printf@flag& (0+255),4,b
  3317                           
  3318                           ;doprnt.c: 644: goto loop;
  3319  000104  D05D               	goto	l5455
  3320  000106                     l5425:
  3321                           
  3322                           ; BSR set to: 1
  3323                           ;doprnt.c: 663: flag |= 0x400;
  3324  000106  0101               	movlb	1	; () banked
  3325  000108  851C               	bsf	(printf@flag+1)& (0+255),2,b
  3326                           
  3327                           ; BSR set to: 1
  3328                           ;doprnt.c: 698: case 'i':
  3329                           ;doprnt.c: 699: break;
  3330                           
  3331                           ; BSR set to: 1
  3332                           
  3333                           ;doprnt.c: 697: case 'd':
  3334                           
  3335                           ;doprnt.c: 664: break;
  3336  00010A  D07C               	goto	l5457
  3337  00010C                     l5427:
  3338                           
  3339                           ; BSR set to: 1
  3340                           ;doprnt.c: 721: flag |= 0x80;
  3341  00010C  0101               	movlb	1	; () banked
  3342  00010E  8F1B               	bsf	printf@flag& (0+255),7,b
  3343                           
  3344                           ;doprnt.c: 723: break;
  3345  000110  D079               	goto	l5457
  3346  000112                     l5429:
  3347                           
  3348                           ; BSR set to: 1
  3349                           ;doprnt.c: 757: if(width > len)
  3350  000112  0101               	movlb	1	; () banked
  3351  000114  5116               	movf	printf@width& (0+255),w,b
  3352  000116  0101               	movlb	1	; () banked
  3353  000118  5D06               	subwf	printf@len& (0+255),w,b
  3354  00011A  0101               	movlb	1	; () banked
  3355  00011C  5117               	movf	(printf@width+1)& (0+255),w,b
  3356  00011E  0101               	movlb	1	; () banked
  3357  000120  5907               	subwfb	(printf@len+1)& (0+255),w,b
  3358  000122  B0D8               	btfsc	status,0,c
  3359  000124  D009               	goto	l5433
  3360                           
  3361                           ; BSR set to: 1
  3362                           ;doprnt.c: 758: width -= len;
  3363  000126  0101               	movlb	1	; () banked
  3364  000128  5106               	movf	printf@len& (0+255),w,b
  3365  00012A  0101               	movlb	1	; () banked
  3366  00012C  5F16               	subwf	printf@width& (0+255),f,b
  3367  00012E  0101               	movlb	1	; () banked
  3368  000130  5107               	movf	(printf@len+1)& (0+255),w,b
  3369  000132  0101               	movlb	1	; () banked
  3370  000134  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  3371  000136  D009               	goto	l5437
  3372  000138                     l5433:
  3373                           
  3374                           ; BSR set to: 1
  3375                           ;doprnt.c: 759: else
  3376                           ;doprnt.c: 760: width = 0;
  3377  000138  0E00               	movlw	0
  3378  00013A  0101               	movlb	1	; () banked
  3379  00013C  6F17               	movwf	(printf@width+1)& (0+255),b
  3380  00013E  0E00               	movlw	0
  3381  000140  6F16               	movwf	printf@width& (0+255),b
  3382                           
  3383                           ; BSR set to: 1
  3384                           ;doprnt.c: 764: while(width--)
  3385  000142  D003               	goto	l5437
  3386  000144                     l5435:
  3387                           
  3388                           ; BSR set to: 1
  3389                           ;doprnt.c: 765: (putch(' ') );
  3390  000144  0E20               	movlw	32
  3391  000146  EC65  F029         	call	_putch
  3392  00014A                     l5437:
  3393  00014A  0101               	movlb	1	; () banked
  3394  00014C  0716               	decf	printf@width& (0+255),f,b
  3395  00014E  A0D8               	btfss	status,0,c
  3396  000150  0717               	decf	(printf@width+1)& (0+255),f,b
  3397  000152  0101               	movlb	1	; () banked
  3398  000154  2916               	incf	printf@width& (0+255),w,b
  3399  000156  E1F6               	bnz	l5435
  3400  000158  0101               	movlb	1	; () banked
  3401  00015A  2917               	incf	(printf@width+1)& (0+255),w,b
  3402  00015C  B4D8               	btfsc	status,2,c
  3403  00015E  D00B               	goto	l5443
  3404  000160  D7F1               	goto	l5435
  3405  000162                     l5439:
  3406                           
  3407                           ; BSR set to: 1
  3408                           ;doprnt.c: 768: (putch(*cp++) );
  3409  000162  C103  FFD9         	movff	printf@cp,fsr2l
  3410  000166  C104  FFDA         	movff	printf@cp+1,fsr2h
  3411  00016A  50DF               	movf	indf2,w,c
  3412  00016C  EC65  F029         	call	_putch
  3413  000170  0101               	movlb	1	; () banked
  3414  000172  4B03               	infsnz	printf@cp& (0+255),f,b
  3415  000174  2B04               	incf	(printf@cp+1)& (0+255),f,b
  3416  000176                     l5443:
  3417                           
  3418                           ; BSR set to: 1
  3419  000176  0101               	movlb	1	; () banked
  3420  000178  0706               	decf	printf@len& (0+255),f,b
  3421  00017A  A0D8               	btfss	status,0,c
  3422  00017C  0707               	decf	(printf@len+1)& (0+255),f,b
  3423  00017E  0101               	movlb	1	; () banked
  3424  000180  2906               	incf	printf@len& (0+255),w,b
  3425  000182  E1EF               	bnz	l5439
  3426  000184  0101               	movlb	1	; () banked
  3427  000186  2907               	incf	(printf@len+1)& (0+255),w,b
  3428  000188  B4D8               	btfsc	status,2,c
  3429  00018A  EF55  F006         	goto	l5721
  3430  00018E  D7E9               	goto	l5439
  3431  000190                     l5445:
  3432                           
  3433                           ; BSR set to: 1
  3434                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3435  000190  C108  FFD9         	movff	printf@ap,fsr2l
  3436  000194  C109  FFDA         	movff	printf@ap+1,fsr2h
  3437  000198  50DF               	movf	indf2,w,c
  3438  00019A  0101               	movlb	1	; () banked
  3439  00019C  6F1D               	movwf	printf@c& (0+255),b
  3440                           
  3441                           ; BSR set to: 1
  3442  00019E  0E02               	movlw	2
  3443  0001A0  0101               	movlb	1	; () banked
  3444  0001A2  2708               	addwf	printf@ap& (0+255),f,b
  3445  0001A4  0E00               	movlw	0
  3446  0001A6  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  3447  0001A8                     l5449:
  3448                           
  3449                           ; BSR set to: 1
  3450                           ;doprnt.c: 805: cp = (char *)&c;
  3451  0001A8  0E1D               	movlw	low printf@c
  3452  0001AA  0101               	movlb	1	; () banked
  3453  0001AC  6F03               	movwf	printf@cp& (0+255),b
  3454  0001AE  0E01               	movlw	high printf@c
  3455  0001B0  0101               	movlb	1	; () banked
  3456  0001B2  6F04               	movwf	(printf@cp+1)& (0+255),b
  3457                           
  3458                           ; BSR set to: 1
  3459                           ;doprnt.c: 806: len = 1;
  3460  0001B4  0E00               	movlw	0
  3461  0001B6  0101               	movlb	1	; () banked
  3462  0001B8  6F07               	movwf	(printf@len+1)& (0+255),b
  3463  0001BA  0E01               	movlw	1
  3464  0001BC  6F06               	movwf	printf@len& (0+255),b
  3465                           
  3466                           ;doprnt.c: 807: goto dostring;
  3467  0001BE  D7A9               	goto	l5429
  3468  0001C0                     l5455:
  3469  0001C0  C0D5  FFF6         	movff	printf@f,tblptrl
  3470  0001C4  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3471  0001C8  0100               	movlb	0	; () banked
  3472  0001CA  4BD5               	infsnz	printf@f& (0+255),f,b
  3473  0001CC  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3474  0001CE                     	if	0	;tblptru may be non-zero
  3475  0001CE                     	endif
  3476  0001CE                     	if	0	;tblptru may be non-zero
  3477  0001CE                     	endif
  3478  0001CE  0008               	tblrd		*
  3479  0001D0  CFF5 F11D          	movff	tablat,printf@c
  3480  0001D4  0101               	movlb	1	; () banked
  3481  0001D6  511D               	movf	printf@c& (0+255),w,b
  3482                           
  3483                           ; Switch size 1, requested type "space"
  3484                           ; Number of cases is 7, Range of values is 0 to 120
  3485                           ; switch strategies available:
  3486                           ; Name         Instructions Cycles
  3487                           ; simple_byte           22    12 (average)
  3488                           ;	Chosen strategy is simple_byte
  3489  0001D8  0A00               	xorlw	0	; case 0
  3490  0001DA  B4D8               	btfsc	status,2,c
  3491  0001DC  0012               	return	
  3492  0001DE  0A63               	xorlw	99	; case 99
  3493  0001E0  B4D8               	btfsc	status,2,c
  3494  0001E2  D7D6               	goto	l5445
  3495  0001E4  0A07               	xorlw	7	; case 100
  3496  0001E6  B4D8               	btfsc	status,2,c
  3497  0001E8  D00D               	goto	l5457
  3498  0001EA  0A02               	xorlw	2	; case 102
  3499  0001EC  B4D8               	btfsc	status,2,c
  3500  0001EE  D78B               	goto	l5425
  3501  0001F0  0A0F               	xorlw	15	; case 105
  3502  0001F2  B4D8               	btfsc	status,2,c
  3503  0001F4  D007               	goto	l5457
  3504  0001F6  0A05               	xorlw	5	; case 108
  3505  0001F8  B4D8               	btfsc	status,2,c
  3506  0001FA  D782               	goto	l5423
  3507  0001FC  0A14               	xorlw	20	; case 120
  3508  0001FE  B4D8               	btfsc	status,2,c
  3509  000200  D785               	goto	l5427
  3510  000202  D7D2               	goto	l5449
  3511  000204                     l5457:
  3512                           
  3513                           ; BSR set to: 1
  3514                           ;doprnt.c: 825: if(flag & (0x700)) {
  3515  000204  0E07               	movlw	7
  3516  000206  0101               	movlb	1	; () banked
  3517  000208  151C               	andwf	(printf@flag+1)& (0+255),w,b
  3518  00020A  B4D8               	btfsc	status,2,c
  3519  00020C  D37A               	goto	l700
  3520                           
  3521                           ; BSR set to: 1
  3522                           ;doprnt.c: 829: prec = 6;
  3523  00020E  0E00               	movlw	0
  3524  000210  0101               	movlb	1	; () banked
  3525  000212  6F0B               	movwf	(printf@prec+1)& (0+255),b
  3526  000214  0E06               	movlw	6
  3527  000216  6F0A               	movwf	printf@prec& (0+255),b
  3528                           
  3529                           ; BSR set to: 1
  3530                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3531  000218  C108  FFD9         	movff	printf@ap,fsr2l
  3532  00021C  C109  FFDA         	movff	printf@ap+1,fsr2h
  3533  000220  CFDE F118          	movff	postinc2,printf@fval
  3534  000224  CFDE F119          	movff	postinc2,printf@fval+1
  3535  000228  CFDD F11A          	movff	postdec2,printf@fval+2
  3536                           
  3537                           ; BSR set to: 1
  3538  00022C  0E03               	movlw	3
  3539  00022E  0101               	movlb	1	; () banked
  3540  000230  2708               	addwf	printf@ap& (0+255),f,b
  3541  000232  0E00               	movlw	0
  3542  000234  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  3543                           
  3544                           ; BSR set to: 1
  3545                           ;doprnt.c: 831: if(fval < 0.0) {
  3546  000236  0101               	movlb	1	; () banked
  3547  000238  AF1A               	btfss	(printf@fval+2)& (0+255),7,b
  3548  00023A  D011               	goto	l5471
  3549                           
  3550                           ; BSR set to: 1
  3551                           ;doprnt.c: 832: fval = -fval;
  3552  00023C  C118  F080         	movff	printf@fval,___ftneg@f1
  3553  000240  C119  F081         	movff	printf@fval+1,___ftneg@f1+1
  3554  000244  C11A  F082         	movff	printf@fval+2,___ftneg@f1+2
  3555  000248  EC0E  F029         	call	___ftneg	;wreg free
  3556  00024C  C080  F118         	movff	?___ftneg,printf@fval
  3557  000250  C081  F119         	movff	?___ftneg+1,printf@fval+1
  3558  000254  C082  F11A         	movff	?___ftneg+2,printf@fval+2
  3559                           
  3560                           ;doprnt.c: 833: flag |= 0x03;
  3561  000258  0E03               	movlw	3
  3562  00025A  0101               	movlb	1	; () banked
  3563  00025C  131B               	iorwf	printf@flag& (0+255),f,b
  3564  00025E                     l5471:
  3565                           
  3566                           ; BSR set to: 1
  3567                           ;doprnt.c: 834: }
  3568                           ;doprnt.c: 835: exp = 0;
  3569  00025E  0E00               	movlw	0
  3570  000260  0101               	movlb	1	; () banked
  3571  000262  6F11               	movwf	(printf@exp+1)& (0+255),b
  3572  000264  0E00               	movlw	0
  3573  000266  6F10               	movwf	printf@exp& (0+255),b
  3574                           
  3575                           ; BSR set to: 1
  3576                           ;doprnt.c: 836: if( fval!=0) {
  3577  000268  0101               	movlb	1	; () banked
  3578  00026A  5118               	movf	printf@fval& (0+255),w,b
  3579  00026C  0101               	movlb	1	; () banked
  3580  00026E  1119               	iorwf	(printf@fval+1)& (0+255),w,b
  3581  000270  0101               	movlb	1	; () banked
  3582  000272  111A               	iorwf	(printf@fval+2)& (0+255),w,b
  3583  000274  B4D8               	btfsc	status,2,c
  3584  000276  D09B               	goto	l5499
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3588  000278  0E82               	movlw	130
  3589  00027A  0100               	movlb	0	; () banked
  3590  00027C  6FDF               	movwf	??_printf& (0+255),b
  3591  00027E  0EFF               	movlw	255
  3592  000280  0100               	movlb	0	; () banked
  3593  000282  6FE0               	movwf	(??_printf+1)& (0+255),b
  3594  000284  C118  F0E1         	movff	printf@fval,??_printf+2
  3595  000288  C119  F0E2         	movff	printf@fval+1,??_printf+3
  3596  00028C  C11A  F0E3         	movff	printf@fval+2,??_printf+4
  3597  000290  C11B  F0E4         	movff	printf@fval+3,??_printf+5
  3598  000294  0E10               	movlw	16
  3599  000296  D006               	goto	u5670
  3600  000298                     u5675:
  3601  000298  0100               	movlb	0	; () banked
  3602  00029A  90D8               	bcf	status,0,c
  3603  00029C  33E4               	rrcf	(??_printf+5)& (0+255),f,b
  3604  00029E  33E3               	rrcf	(??_printf+4)& (0+255),f,b
  3605  0002A0  33E2               	rrcf	(??_printf+3)& (0+255),f,b
  3606  0002A2  33E1               	rrcf	(??_printf+2)& (0+255),f,b
  3607  0002A4                     u5670:
  3608  0002A4  2EE8               	decfsz	wreg,f,c
  3609  0002A6  D7F8               	goto	u5675
  3610  0002A8  0100               	movlb	0	; () banked
  3611  0002AA  51E1               	movf	(??_printf+2)& (0+255),w,b
  3612  0002AC  0100               	movlb	0	; () banked
  3613  0002AE  25DF               	addwf	??_printf& (0+255),w,b
  3614  0002B0  0101               	movlb	1	; () banked
  3615  0002B2  6F10               	movwf	printf@exp& (0+255),b
  3616  0002B4  0E00               	movlw	0
  3617  0002B6  0100               	movlb	0	; () banked
  3618  0002B8  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  3619  0002BA  0101               	movlb	1	; () banked
  3620  0002BC  6F11               	movwf	(printf@exp+1)& (0+255),b
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;doprnt.c: 838: exp--;
  3624  0002BE  0101               	movlb	1	; () banked
  3625  0002C0  0710               	decf	printf@exp& (0+255),f,b
  3626  0002C2  A0D8               	btfss	status,0,c
  3627  0002C4  0711               	decf	(printf@exp+1)& (0+255),f,b
  3628                           
  3629                           ; BSR set to: 1
  3630                           ;doprnt.c: 839: exp *= 3;
  3631  0002C6  C110  F08E         	movff	printf@exp,___wmul@multiplier
  3632  0002CA  C111  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  3633  0002CE  0E00               	movlw	0
  3634  0002D0  0100               	movlb	0	; () banked
  3635  0002D2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3636  0002D4  0E03               	movlw	3
  3637  0002D6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3638  0002D8  ECF3  F028         	call	___wmul	;wreg free
  3639  0002DC  C08E  F110         	movff	?___wmul,printf@exp
  3640  0002E0  C08F  F111         	movff	?___wmul+1,printf@exp+1
  3641                           
  3642                           ;doprnt.c: 840: exp /= 10;
  3643  0002E4  C110  F086         	movff	printf@exp,___awdiv@dividend
  3644  0002E8  C111  F087         	movff	printf@exp+1,___awdiv@dividend+1
  3645  0002EC  0E00               	movlw	0
  3646  0002EE  0100               	movlb	0	; () banked
  3647  0002F0  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3648  0002F2  0E0A               	movlw	10
  3649  0002F4  6F88               	movwf	___awdiv@divisor& (0+255),b
  3650  0002F6  EC16  F023         	call	___awdiv	;wreg free
  3651  0002FA  C086  F110         	movff	?___awdiv,printf@exp
  3652  0002FE  C087  F111         	movff	?___awdiv+1,printf@exp+1
  3653                           
  3654                           ;doprnt.c: 841: if(exp < 0)
  3655  000302  0101               	movlb	1	; () banked
  3656  000304  AF11               	btfss	(printf@exp+1)& (0+255),7,b
  3657  000306  D004               	goto	l5487
  3658                           
  3659                           ; BSR set to: 1
  3660                           ;doprnt.c: 842: exp--;
  3661  000308  0101               	movlb	1	; () banked
  3662  00030A  0710               	decf	printf@exp& (0+255),f,b
  3663  00030C  A0D8               	btfss	status,0,c
  3664  00030E  0711               	decf	(printf@exp+1)& (0+255),f,b
  3665  000310                     l5487:
  3666                           
  3667                           ; BSR set to: 1
  3668                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3669  000310  0101               	movlb	1	; () banked
  3670  000312  5110               	movf	printf@exp& (0+255),w,b
  3671  000314  0800               	sublw	0
  3672  000316  ECA9  F00B         	call	_scale
  3673  00031A  C0B0  F10C         	movff	?_scale,printf@tmpval
  3674  00031E  C0B1  F10D         	movff	?_scale+1,printf@tmpval+1
  3675  000322  C0B2  F10E         	movff	?_scale+2,printf@tmpval+2
  3676                           
  3677                           ;doprnt.c: 847: tmpval.integ *= fval;
  3678  000326  C10C  F0A1         	movff	printf@tmpval,___ftmul@f1
  3679  00032A  C10D  F0A2         	movff	printf@tmpval+1,___ftmul@f1+1
  3680  00032E  C10E  F0A3         	movff	printf@tmpval+2,___ftmul@f1+2
  3681  000332  C118  F0A4         	movff	printf@fval,___ftmul@f2
  3682  000336  C119  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  3683  00033A  C11A  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  3684  00033E  EC06  F01A         	call	___ftmul	;wreg free
  3685  000342  C0A1  F10C         	movff	?___ftmul,printf@tmpval
  3686  000346  C0A2  F10D         	movff	?___ftmul+1,printf@tmpval+1
  3687  00034A  C0A3  F10E         	movff	?___ftmul+2,printf@tmpval+2
  3688                           
  3689                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3690  00034E  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3691  000352  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3692  000356  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3693  00035A  0E00               	movlw	0
  3694  00035C  0100               	movlb	0	; () banked
  3695  00035E  6F83               	movwf	___ftge@ff2& (0+255),b
  3696  000360  0E80               	movlw	128
  3697  000362  0100               	movlb	0	; () banked
  3698  000364  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3699  000366  0E3F               	movlw	63
  3700  000368  0100               	movlb	0	; () banked
  3701  00036A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3702  00036C  EC4E  F022         	call	___ftge	;wreg free
  3703  000370  0100               	movlb	0	; () banked
  3704  000372  B0D8               	btfsc	status,0,c
  3705  000374  D005               	goto	l5495
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;doprnt.c: 849: exp--;
  3709  000376  0101               	movlb	1	; () banked
  3710  000378  0710               	decf	printf@exp& (0+255),f,b
  3711  00037A  A0D8               	btfss	status,0,c
  3712  00037C  0711               	decf	(printf@exp+1)& (0+255),f,b
  3713  00037E  D017               	goto	l5499
  3714  000380                     l5495:
  3715                           
  3716                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3717  000380  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3718  000384  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3719  000388  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3720  00038C  0E00               	movlw	0
  3721  00038E  0100               	movlb	0	; () banked
  3722  000390  6F83               	movwf	___ftge@ff2& (0+255),b
  3723  000392  0E20               	movlw	32
  3724  000394  0100               	movlb	0	; () banked
  3725  000396  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3726  000398  0E41               	movlw	65
  3727  00039A  0100               	movlb	0	; () banked
  3728  00039C  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3729  00039E  EC4E  F022         	call	___ftge	;wreg free
  3730  0003A2  0100               	movlb	0	; () banked
  3731  0003A4  A0D8               	btfss	status,0,c
  3732  0003A6  D003               	goto	l5499
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;doprnt.c: 851: exp++;
  3736  0003A8  0101               	movlb	1	; () banked
  3737  0003AA  4B10               	infsnz	printf@exp& (0+255),f,b
  3738  0003AC  2B11               	incf	(printf@exp+1)& (0+255),f,b
  3739  0003AE                     l5499:
  3740                           
  3741                           ;doprnt.c: 852: }
  3742                           ;doprnt.c: 1112: if(prec <= 12)
  3743  0003AE  0101               	movlb	1	; () banked
  3744  0003B0  BF0B               	btfsc	(printf@prec+1)& (0+255),7,b
  3745  0003B2  D008               	goto	l5501
  3746  0003B4  0101               	movlb	1	; () banked
  3747  0003B6  510B               	movf	(printf@prec+1)& (0+255),w,b
  3748  0003B8  E11D               	bnz	l5503
  3749  0003BA  0E0D               	movlw	13
  3750  0003BC  0101               	movlb	1	; () banked
  3751  0003BE  5D0A               	subwf	printf@prec& (0+255),w,b
  3752  0003C0  B0D8               	btfsc	status,0,c
  3753  0003C2  D018               	goto	l5503
  3754  0003C4                     l5501:
  3755                           
  3756                           ; BSR set to: 1
  3757                           ;doprnt.c: 1113: fval += fround(prec);
  3758  0003C4  C118  F0BA         	movff	printf@fval,___ftadd@f1
  3759  0003C8  C119  F0BB         	movff	printf@fval+1,___ftadd@f1+1
  3760  0003CC  C11A  F0BC         	movff	printf@fval+2,___ftadd@f1+2
  3761  0003D0  0101               	movlb	1	; () banked
  3762  0003D2  510A               	movf	printf@prec& (0+255),w,b
  3763  0003D4  EC3D  F013         	call	_fround
  3764  0003D8  C0B0  F0BD         	movff	?_fround,___ftadd@f2
  3765  0003DC  C0B1  F0BE         	movff	?_fround+1,___ftadd@f2+1
  3766  0003E0  C0B2  F0BF         	movff	?_fround+2,___ftadd@f2+2
  3767  0003E4  EC93  F014         	call	___ftadd	;wreg free
  3768  0003E8  C0BA  F118         	movff	?___ftadd,printf@fval
  3769  0003EC  C0BB  F119         	movff	?___ftadd+1,printf@fval+1
  3770  0003F0  C0BC  F11A         	movff	?___ftadd+2,printf@fval+2
  3771  0003F4                     l5503:
  3772                           
  3773                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3774  0003F4  0101               	movlb	1	; () banked
  3775  0003F6  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3776  0003F8  D008               	goto	l5505
  3777  0003FA  0101               	movlb	1	; () banked
  3778  0003FC  5111               	movf	(printf@exp+1)& (0+255),w,b
  3779  0003FE  E12A               	bnz	l5511
  3780  000400  0E0A               	movlw	10
  3781  000402  0101               	movlb	1	; () banked
  3782  000404  5D10               	subwf	printf@exp& (0+255),w,b
  3783  000406  B0D8               	btfsc	status,0,c
  3784  000408  D025               	goto	l5511
  3785  00040A                     l5505:
  3786                           
  3787                           ; BSR set to: 1
  3788  00040A  0101               	movlb	1	; () banked
  3789  00040C  5118               	movf	printf@fval& (0+255),w,b
  3790  00040E  0101               	movlb	1	; () banked
  3791  000410  1119               	iorwf	(printf@fval+1)& (0+255),w,b
  3792  000412  0101               	movlb	1	; () banked
  3793  000414  111A               	iorwf	(printf@fval+2)& (0+255),w,b
  3794  000416  B4D8               	btfsc	status,2,c
  3795  000418  D063               	goto	l5525
  3796                           
  3797                           ; BSR set to: 1
  3798  00041A  C118  F0C6         	movff	printf@fval,___fttol@f1
  3799  00041E  C119  F0C7         	movff	printf@fval+1,___fttol@f1+1
  3800  000422  C11A  F0C8         	movff	printf@fval+2,___fttol@f1+2
  3801  000426  EC5B  F01B         	call	___fttol	;wreg free
  3802  00042A  0100               	movlb	0	; () banked
  3803  00042C  51C6               	movf	?___fttol& (0+255),w,b
  3804  00042E  0100               	movlb	0	; () banked
  3805  000430  11C7               	iorwf	(?___fttol+1)& (0+255),w,b
  3806  000432  0100               	movlb	0	; () banked
  3807  000434  11C8               	iorwf	(?___fttol+2)& (0+255),w,b
  3808  000436  0100               	movlb	0	; () banked
  3809  000438  11C9               	iorwf	(?___fttol+3)& (0+255),w,b
  3810  00043A  A4D8               	btfss	status,2,c
  3811  00043C  D051               	goto	l5525
  3812                           
  3813                           ; BSR set to: 0
  3814  00043E  0101               	movlb	1	; () banked
  3815  000440  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3816  000442  D04E               	goto	l5525
  3817  000444  0101               	movlb	1	; () banked
  3818  000446  5111               	movf	(printf@exp+1)& (0+255),w,b
  3819  000448  E105               	bnz	l5511
  3820  00044A  0E02               	movlw	2
  3821  00044C  0101               	movlb	1	; () banked
  3822  00044E  5D10               	subwf	printf@exp& (0+255),w,b
  3823  000450  A0D8               	btfss	status,0,c
  3824  000452  D046               	goto	l5525
  3825  000454                     l5511:
  3826                           
  3827                           ; BSR set to: 1
  3828                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3829  000454  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3830  000458  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3831  00045C  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3832  000460  0E70               	movlw	112
  3833  000462  0100               	movlb	0	; () banked
  3834  000464  6F83               	movwf	___ftge@ff2& (0+255),b
  3835  000466  0E89               	movlw	137
  3836  000468  0100               	movlb	0	; () banked
  3837  00046A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3838  00046C  0E40               	movlw	64
  3839  00046E  0100               	movlb	0	; () banked
  3840  000470  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3841  000472  EC4E  F022         	call	___ftge	;wreg free
  3842  000476  0100               	movlb	0	; () banked
  3843  000478  B0D8               	btfsc	status,0,c
  3844  00047A  D003               	goto	l5515
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3848  00047C  0101               	movlb	1	; () banked
  3849  00047E  0EF7               	movlw	247
  3850  000480  D002               	goto	L1
  3851  000482                     l5515:
  3852                           
  3853                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3854  000482  0101               	movlb	1	; () banked
  3855  000484  0EF8               	movlw	248
  3856  000486                     L1:
  3857  000486  2710               	addwf	printf@exp& (0+255),f,b
  3858  000488  0EFF               	movlw	255
  3859  00048A  2311               	addwfc	(printf@exp+1)& (0+255),f,b
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;doprnt.c: 1124: }
  3863                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3864                           
  3865                           ; BSR set to: 1
  3866  00048C  0101               	movlb	1	; () banked
  3867  00048E  5110               	movf	printf@exp& (0+255),w,b
  3868  000490  ECA9  F00B         	call	_scale
  3869  000494  C0B0  F10C         	movff	?_scale,printf@tmpval
  3870  000498  C0B1  F10D         	movff	?_scale+1,printf@tmpval+1
  3871  00049C  C0B2  F10E         	movff	?_scale+2,printf@tmpval+2
  3872                           
  3873                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3874  0004A0  C118  F080         	movff	printf@fval,__tdiv_to_l_@f1
  3875  0004A4  C119  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3876  0004A8  C11A  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3877  0004AC  C10C  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  3878  0004B0  C10D  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3879  0004B4  C10E  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3880  0004B8  ECC0  F017         	call	__tdiv_to_l_	;wreg free
  3881  0004BC  C080  F112         	movff	?__tdiv_to_l_,printf@val
  3882  0004C0  C081  F113         	movff	?__tdiv_to_l_+1,printf@val+1
  3883  0004C4  C082  F114         	movff	?__tdiv_to_l_+2,printf@val+2
  3884  0004C8  C083  F115         	movff	?__tdiv_to_l_+3,printf@val+3
  3885                           
  3886                           ;doprnt.c: 1129: fval = 0.0;
  3887  0004CC  0E00               	movlw	0
  3888  0004CE  0101               	movlb	1	; () banked
  3889  0004D0  6F18               	movwf	printf@fval& (0+255),b
  3890  0004D2  0E00               	movlw	0
  3891  0004D4  0101               	movlb	1	; () banked
  3892  0004D6  6F19               	movwf	(printf@fval+1)& (0+255),b
  3893  0004D8  0E00               	movlw	0
  3894  0004DA  0101               	movlb	1	; () banked
  3895  0004DC  6F1A               	movwf	(printf@fval+2)& (0+255),b
  3896                           
  3897                           ;doprnt.c: 1130: } else {
  3898  0004DE  D033               	goto	l5529
  3899  0004E0                     l5525:
  3900                           
  3901                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3902  0004E0  C118  F0C6         	movff	printf@fval,___fttol@f1
  3903  0004E4  C119  F0C7         	movff	printf@fval+1,___fttol@f1+1
  3904  0004E8  C11A  F0C8         	movff	printf@fval+2,___fttol@f1+2
  3905  0004EC  EC5B  F01B         	call	___fttol	;wreg free
  3906  0004F0  C0C6  F112         	movff	?___fttol,printf@val
  3907  0004F4  C0C7  F113         	movff	?___fttol+1,printf@val+1
  3908  0004F8  C0C8  F114         	movff	?___fttol+2,printf@val+2
  3909  0004FC  C0C9  F115         	movff	?___fttol+3,printf@val+3
  3910                           
  3911                           ;doprnt.c: 1132: fval -= (double)val;
  3912  000500  C118  F0C6         	movff	printf@fval,___ftsub@f1
  3913  000504  C119  F0C7         	movff	printf@fval+1,___ftsub@f1+1
  3914  000508  C11A  F0C8         	movff	printf@fval+2,___ftsub@f1+2
  3915  00050C  C112  F088         	movff	printf@val,___lltoft@c
  3916  000510  C113  F089         	movff	printf@val+1,___lltoft@c+1
  3917  000514  C114  F08A         	movff	printf@val+2,___lltoft@c+2
  3918  000518  C115  F08B         	movff	printf@val+3,___lltoft@c+3
  3919  00051C  EC29  F026         	call	___lltoft	;wreg free
  3920  000520  C088  F0C9         	movff	?___lltoft,___ftsub@f2
  3921  000524  C089  F0CA         	movff	?___lltoft+1,___ftsub@f2+1
  3922  000528  C08A  F0CB         	movff	?___lltoft+2,___ftsub@f2+2
  3923  00052C  ECBE  F027         	call	___ftsub	;wreg free
  3924  000530  C0C6  F118         	movff	?___ftsub,printf@fval
  3925  000534  C0C7  F119         	movff	?___ftsub+1,printf@fval+1
  3926  000538  C0C8  F11A         	movff	?___ftsub+2,printf@fval+2
  3927                           
  3928                           ;doprnt.c: 1133: exp = 0;
  3929  00053C  0E00               	movlw	0
  3930  00053E  0101               	movlb	1	; () banked
  3931  000540  6F11               	movwf	(printf@exp+1)& (0+255),b
  3932  000542  0E00               	movlw	0
  3933  000544  6F10               	movwf	printf@exp& (0+255),b
  3934  000546                     l5529:
  3935                           
  3936                           ; BSR set to: 1
  3937                           ;doprnt.c: 1134: }
  3938                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3939  000546  0E01               	movlw	1
  3940  000548  0101               	movlb	1	; () banked
  3941  00054A  6F1D               	movwf	printf@c& (0+255),b
  3942  00054C                     l5531:
  3943                           
  3944                           ; BSR set to: 1
  3945  00054C  0E0A               	movlw	10
  3946  00054E  0101               	movlb	1	; () banked
  3947  000550  191D               	xorwf	printf@c& (0+255),w,b
  3948  000552  B4D8               	btfsc	status,2,c
  3949  000554  D01E               	goto	l5543
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;doprnt.c: 1137: if(val < dpowers[c])
  3953                           
  3954                           ; BSR set to: 1
  3955                           
  3956                           ; BSR set to: 1
  3957  000556  0101               	movlb	1	; () banked
  3958  000558  511D               	movf	printf@c& (0+255),w,b
  3959  00055A  0D04               	mullw	4
  3960  00055C  0E31               	movlw	low _dpowers
  3961  00055E  24F3               	addwf	prodl,w,c
  3962  000560  6EF6               	movwf	tblptrl,c
  3963  000562  0EFE               	movlw	high _dpowers
  3964  000564  20F4               	addwfc	prodh,w,c
  3965  000566  6EF7               	movwf	tblptrh,c
  3966  000568                     	if	0	;There are less than 3 active tblptr bytes
  3967  000568                     	endif
  3968  000568  0009               	tblrd		*+
  3969  00056A  50F5               	movf	tablat,w,c
  3970  00056C  0101               	movlb	1	; () banked
  3971  00056E  5D12               	subwf	printf@val& (0+255),w,b
  3972  000570  0009               	tblrd		*+
  3973  000572  50F5               	movf	tablat,w,c
  3974  000574  0101               	movlb	1	; () banked
  3975  000576  5913               	subwfb	(printf@val+1)& (0+255),w,b
  3976  000578  0009               	tblrd		*+
  3977  00057A  50F5               	movf	tablat,w,c
  3978  00057C  0101               	movlb	1	; () banked
  3979  00057E  5914               	subwfb	(printf@val+2)& (0+255),w,b
  3980  000580  0009               	tblrd		*+
  3981  000582  50F5               	movf	tablat,w,c
  3982  000584  0101               	movlb	1	; () banked
  3983  000586  5915               	subwfb	(printf@val+3)& (0+255),w,b
  3984  000588  A0D8               	btfss	status,0,c
  3985  00058A  D003               	goto	l5543
  3986                           
  3987                           ; BSR set to: 1
  3988                           
  3989                           ; BSR set to: 1
  3990                           
  3991                           ; BSR set to: 1
  3992                           ;doprnt.c: 1138: break;
  3993  00058C  0101               	movlb	1	; () banked
  3994  00058E  2B1D               	incf	printf@c& (0+255),f,b
  3995  000590  D7DD               	goto	l5531
  3996  000592                     l5543:
  3997                           
  3998                           ; BSR set to: 1
  3999                           ;doprnt.c: 1142: width -= prec + c + exp;
  4000  000592  C11D  F0DF         	movff	printf@c,??_printf
  4001  000596  0100               	movlb	0	; () banked
  4002  000598  6BE0               	clrf	(??_printf+1)& (0+255),b
  4003  00059A  BFDF               	btfsc	??_printf& (0+255),7,b
  4004  00059C  07E0               	decf	(??_printf+1)& (0+255),f,b
  4005  00059E  0101               	movlb	1	; () banked
  4006  0005A0  510A               	movf	printf@prec& (0+255),w,b
  4007  0005A2  0100               	movlb	0	; () banked
  4008  0005A4  27DF               	addwf	??_printf& (0+255),f,b
  4009  0005A6  0101               	movlb	1	; () banked
  4010  0005A8  510B               	movf	(printf@prec+1)& (0+255),w,b
  4011  0005AA  0100               	movlb	0	; () banked
  4012  0005AC  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  4013  0005AE  0101               	movlb	1	; () banked
  4014  0005B0  5110               	movf	printf@exp& (0+255),w,b
  4015  0005B2  0100               	movlb	0	; () banked
  4016  0005B4  27DF               	addwf	??_printf& (0+255),f,b
  4017  0005B6  0101               	movlb	1	; () banked
  4018  0005B8  5111               	movf	(printf@exp+1)& (0+255),w,b
  4019  0005BA  0100               	movlb	0	; () banked
  4020  0005BC  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  4021  0005BE  0100               	movlb	0	; () banked
  4022  0005C0  51DF               	movf	??_printf& (0+255),w,b
  4023  0005C2  0101               	movlb	1	; () banked
  4024  0005C4  5F16               	subwf	printf@width& (0+255),f,b
  4025  0005C6  0100               	movlb	0	; () banked
  4026  0005C8  51E0               	movf	(??_printf+1)& (0+255),w,b
  4027  0005CA  0101               	movlb	1	; () banked
  4028  0005CC  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  4029                           
  4030                           ;doprnt.c: 1143: if(
  4031                           ;doprnt.c: 1147: prec)
  4032  0005CE  0101               	movlb	1	; () banked
  4033  0005D0  510A               	movf	printf@prec& (0+255),w,b
  4034  0005D2  0101               	movlb	1	; () banked
  4035  0005D4  110B               	iorwf	(printf@prec+1)& (0+255),w,b
  4036  0005D6  B4D8               	btfsc	status,2,c
  4037  0005D8  D004               	goto	l5547
  4038                           
  4039                           ; BSR set to: 1
  4040                           ;doprnt.c: 1148: width--;
  4041  0005DA  0101               	movlb	1	; () banked
  4042  0005DC  0716               	decf	printf@width& (0+255),f,b
  4043  0005DE  A0D8               	btfss	status,0,c
  4044  0005E0  0717               	decf	(printf@width+1)& (0+255),f,b
  4045  0005E2                     l5547:
  4046                           
  4047                           ; BSR set to: 1
  4048                           ;doprnt.c: 1149: if(flag & 0x03)
  4049  0005E2  0E03               	movlw	3
  4050  0005E4  0101               	movlb	1	; () banked
  4051  0005E6  151B               	andwf	printf@flag& (0+255),w,b
  4052  0005E8  0100               	movlb	0	; () banked
  4053  0005EA  6FDF               	movwf	??_printf& (0+255),b
  4054  0005EC  0E00               	movlw	0
  4055  0005EE  0101               	movlb	1	; () banked
  4056  0005F0  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4057  0005F2  0100               	movlb	0	; () banked
  4058  0005F4  6FE0               	movwf	(??_printf+1)& (0+255),b
  4059  0005F6  0100               	movlb	0	; () banked
  4060  0005F8  51DF               	movf	??_printf& (0+255),w,b
  4061  0005FA  0100               	movlb	0	; () banked
  4062  0005FC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4063  0005FE  B4D8               	btfsc	status,2,c
  4064  000600  D004               	goto	l5551
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;doprnt.c: 1150: width--;
  4068  000602  0101               	movlb	1	; () banked
  4069  000604  0716               	decf	printf@width& (0+255),f,b
  4070  000606  A0D8               	btfss	status,0,c
  4071  000608  0717               	decf	(printf@width+1)& (0+255),f,b
  4072  00060A                     l5551:
  4073                           
  4074                           ;doprnt.c: 1153: if(flag & 0x04) {
  4075  00060A  0101               	movlb	1	; () banked
  4076  00060C  A51B               	btfss	printf@flag& (0+255),2,b
  4077  00060E  D02D               	goto	l5567
  4078                           
  4079                           ; BSR set to: 1
  4080                           ;doprnt.c: 1157: if(flag & 0x03)
  4081  000610  0E03               	movlw	3
  4082  000612  0101               	movlb	1	; () banked
  4083  000614  151B               	andwf	printf@flag& (0+255),w,b
  4084  000616  0100               	movlb	0	; () banked
  4085  000618  6FDF               	movwf	??_printf& (0+255),b
  4086  00061A  0E00               	movlw	0
  4087  00061C  0101               	movlb	1	; () banked
  4088  00061E  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4089  000620  0100               	movlb	0	; () banked
  4090  000622  6FE0               	movwf	(??_printf+1)& (0+255),b
  4091  000624  0100               	movlb	0	; () banked
  4092  000626  51DF               	movf	??_printf& (0+255),w,b
  4093  000628  0100               	movlb	0	; () banked
  4094  00062A  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4095  00062C  B4D8               	btfsc	status,2,c
  4096  00062E  D00B               	goto	l5561
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;doprnt.c: 1159: (putch('-') );
  4100  000630  0E2D               	movlw	45
  4101  000632  EC65  F029         	call	_putch
  4102                           
  4103                           ;doprnt.c: 1168: while(width > 0) {
  4104  000636  D007               	goto	l5561
  4105  000638                     l5557:
  4106                           
  4107                           ;doprnt.c: 1169: (putch('0') );
  4108  000638  0E30               	movlw	48
  4109  00063A  EC65  F029         	call	_putch
  4110                           
  4111                           ;doprnt.c: 1170: width--;
  4112  00063E  0101               	movlb	1	; () banked
  4113  000640  0716               	decf	printf@width& (0+255),f,b
  4114  000642  A0D8               	btfss	status,0,c
  4115  000644  0717               	decf	(printf@width+1)& (0+255),f,b
  4116  000646                     l5561:
  4117  000646  0101               	movlb	1	; () banked
  4118  000648  BF17               	btfsc	(printf@width+1)& (0+255),7,b
  4119  00064A  D074               	goto	l5579
  4120  00064C  0101               	movlb	1	; () banked
  4121  00064E  5117               	movf	(printf@width+1)& (0+255),w,b
  4122  000650  E1F3               	bnz	l5557
  4123  000652  0101               	movlb	1	; () banked
  4124  000654  0516               	decf	printf@width& (0+255),w,b
  4125  000656  A0D8               	btfss	status,0,c
  4126  000658  D06D               	goto	l5579
  4127  00065A  D7EE               	goto	l5557
  4128  00065C                     l5563:
  4129                           
  4130                           ; BSR set to: 1
  4131                           ;doprnt.c: 1181: (putch(' ') );
  4132  00065C  0E20               	movlw	32
  4133  00065E  EC65  F029         	call	_putch
  4134                           
  4135                           ;doprnt.c: 1182: width--;
  4136  000662  0101               	movlb	1	; () banked
  4137  000664  0716               	decf	printf@width& (0+255),f,b
  4138  000666  A0D8               	btfss	status,0,c
  4139  000668  0717               	decf	(printf@width+1)& (0+255),f,b
  4140  00066A                     l5567:
  4141                           
  4142                           ; BSR set to: 1
  4143  00066A  0101               	movlb	1	; () banked
  4144  00066C  BF17               	btfsc	(printf@width+1)& (0+255),7,b
  4145  00066E  D007               	goto	l5569
  4146  000670  0101               	movlb	1	; () banked
  4147  000672  5117               	movf	(printf@width+1)& (0+255),w,b
  4148  000674  E1F3               	bnz	l5563
  4149  000676  0101               	movlb	1	; () banked
  4150  000678  0516               	decf	printf@width& (0+255),w,b
  4151  00067A  B0D8               	btfsc	status,0,c
  4152  00067C  D7EF               	goto	l5563
  4153  00067E                     l5569:
  4154                           
  4155                           ; BSR set to: 1
  4156                           ;doprnt.c: 1183: }
  4157                           ;doprnt.c: 1188: if(flag & 0x03)
  4158  00067E  0E03               	movlw	3
  4159  000680  0101               	movlb	1	; () banked
  4160  000682  151B               	andwf	printf@flag& (0+255),w,b
  4161  000684  0100               	movlb	0	; () banked
  4162  000686  6FDF               	movwf	??_printf& (0+255),b
  4163  000688  0E00               	movlw	0
  4164  00068A  0101               	movlb	1	; () banked
  4165  00068C  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4166  00068E  0100               	movlb	0	; () banked
  4167  000690  6FE0               	movwf	(??_printf+1)& (0+255),b
  4168  000692  0100               	movlb	0	; () banked
  4169  000694  51DF               	movf	??_printf& (0+255),w,b
  4170  000696  0100               	movlb	0	; () banked
  4171  000698  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4172  00069A  B4D8               	btfsc	status,2,c
  4173  00069C  D04B               	goto	l5579
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;doprnt.c: 1190: (putch('-') );
  4177  00069E  0E2D               	movlw	45
  4178  0006A0  EC65  F029         	call	_putch
  4179                           
  4180                           ;doprnt.c: 1195: }
  4181                           ;doprnt.c: 1196: while(c--) {
  4182  0006A4  D047               	goto	l5579
  4183  0006A6                     l5573:
  4184                           
  4185                           ;doprnt.c: 1200: {
  4186                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4187  0006A6  C112  F080         	movff	printf@val,___lldiv@dividend
  4188  0006AA  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4189  0006AE  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4190  0006B2  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4191  0006B6  0101               	movlb	1	; () banked
  4192  0006B8  511D               	movf	printf@c& (0+255),w,b
  4193  0006BA  0D04               	mullw	4
  4194  0006BC  0E31               	movlw	low _dpowers
  4195  0006BE  24F3               	addwf	prodl,w,c
  4196  0006C0  6EF6               	movwf	tblptrl,c
  4197  0006C2  0EFE               	movlw	high _dpowers
  4198  0006C4  20F4               	addwfc	prodh,w,c
  4199  0006C6  6EF7               	movwf	tblptrh,c
  4200  0006C8                     	if	0	;There are less than 3 active tblptr bytes
  4201  0006C8                     	endif
  4202  0006C8  0009               	tblrd		*+
  4203  0006CA  CFF5 F084          	movff	tablat,___lldiv@divisor
  4204  0006CE  0009               	tblrd		*+
  4205  0006D0  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4206  0006D4  0009               	tblrd		*+
  4207  0006D6  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4208  0006DA  000A               	tblrd		*-
  4209  0006DC  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4210  0006E0  EC75  F023         	call	___lldiv	;wreg free
  4211  0006E4  C080  F10C         	movff	?___lldiv,printf@tmpval
  4212  0006E8  C081  F10D         	movff	?___lldiv+1,printf@tmpval+1
  4213  0006EC  C082  F10E         	movff	?___lldiv+2,printf@tmpval+2
  4214  0006F0  C083  F10F         	movff	?___lldiv+3,printf@tmpval+3
  4215                           
  4216                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4217  0006F4  C10C  F08D         	movff	printf@tmpval,___llmod@dividend
  4218  0006F8  C10D  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  4219  0006FC  C10E  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  4220  000700  C10F  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  4221  000704  0E0A               	movlw	10
  4222  000706  0100               	movlb	0	; () banked
  4223  000708  6F91               	movwf	___llmod@divisor& (0+255),b
  4224  00070A  0E00               	movlw	0
  4225  00070C  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4226  00070E  0E00               	movlw	0
  4227  000710  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4228  000712  0E00               	movlw	0
  4229  000714  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4230  000716  ECCA  F024         	call	___llmod	;wreg free
  4231  00071A  C08D  F10C         	movff	?___llmod,printf@tmpval
  4232  00071E  C08E  F10D         	movff	?___llmod+1,printf@tmpval+1
  4233  000722  C08F  F10E         	movff	?___llmod+2,printf@tmpval+2
  4234  000726  C090  F10F         	movff	?___llmod+3,printf@tmpval+3
  4235                           
  4236                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  4237  00072A  0101               	movlb	1	; () banked
  4238  00072C  510C               	movf	printf@tmpval& (0+255),w,b
  4239  00072E  0F30               	addlw	48
  4240  000730  EC65  F029         	call	_putch
  4241  000734                     l5579:
  4242  000734  0101               	movlb	1	; () banked
  4243  000736  071D               	decf	printf@c& (0+255),f,b
  4244  000738  0101               	movlb	1	; () banked
  4245  00073A  291D               	incf	printf@c& (0+255),w,b
  4246  00073C  B4D8               	btfsc	status,2,c
  4247  00073E  D008               	goto	l5585
  4248  000740  D7B2               	goto	l5573
  4249  000742                     l5581:
  4250                           
  4251                           ; BSR set to: 1
  4252                           ;doprnt.c: 1208: (putch('0') );
  4253  000742  0E30               	movlw	48
  4254  000744  EC65  F029         	call	_putch
  4255                           
  4256                           ;doprnt.c: 1209: exp--;
  4257  000748  0101               	movlb	1	; () banked
  4258  00074A  0710               	decf	printf@exp& (0+255),f,b
  4259  00074C  A0D8               	btfss	status,0,c
  4260  00074E  0711               	decf	(printf@exp+1)& (0+255),f,b
  4261  000750                     l5585:
  4262                           
  4263                           ; BSR set to: 1
  4264  000750  0101               	movlb	1	; () banked
  4265  000752  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  4266  000754  D007               	goto	l5587
  4267  000756  0101               	movlb	1	; () banked
  4268  000758  5111               	movf	(printf@exp+1)& (0+255),w,b
  4269  00075A  E1F3               	bnz	l5581
  4270  00075C  0101               	movlb	1	; () banked
  4271  00075E  0510               	decf	printf@exp& (0+255),w,b
  4272  000760  B0D8               	btfsc	status,0,c
  4273  000762  D7EF               	goto	l5581
  4274  000764                     l5587:
  4275                           
  4276                           ; BSR set to: 1
  4277                           ;doprnt.c: 1210: }
  4278                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4279  000764  0101               	movlb	1	; () banked
  4280  000766  BF0B               	btfsc	(printf@prec+1)& (0+255),7,b
  4281  000768  D00C               	goto	l739
  4282  00076A  0101               	movlb	1	; () banked
  4283  00076C  510B               	movf	(printf@prec+1)& (0+255),w,b
  4284  00076E  E105               	bnz	u5890
  4285  000770  0E09               	movlw	9
  4286  000772  0101               	movlb	1	; () banked
  4287  000774  5D0A               	subwf	printf@prec& (0+255),w,b
  4288  000776  A0D8               	btfss	status,0,c
  4289  000778  D004               	goto	l739
  4290  00077A                     u5890:
  4291                           
  4292                           ; BSR set to: 1
  4293                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4294  00077A  0E08               	movlw	8
  4295  00077C  0101               	movlb	1	; () banked
  4296  00077E  6F1D               	movwf	printf@c& (0+255),b
  4297  000780  D002               	goto	l5591
  4298  000782                     l739:
  4299                           
  4300                           ; BSR set to: 1
  4301                           ;doprnt.c: 1213: else
  4302                           ;doprnt.c: 1214: c = prec;
  4303  000782  C10A  F11D         	movff	printf@prec,printf@c
  4304  000786                     l5591:
  4305                           
  4306                           ; BSR set to: 1
  4307                           ;doprnt.c: 1215: prec -= c;
  4308  000786  0101               	movlb	1	; () banked
  4309  000788  511D               	movf	printf@c& (0+255),w,b
  4310  00078A  0101               	movlb	1	; () banked
  4311  00078C  5F0A               	subwf	printf@prec& (0+255),f,b
  4312  00078E  0E00               	movlw	0
  4313  000790  0101               	movlb	1	; () banked
  4314  000792  BF1D               	btfsc	printf@c& (0+255),7,b
  4315  000794  0EFF               	movlw	255
  4316  000796  0101               	movlb	1	; () banked
  4317  000798  5B0B               	subwfb	(printf@prec+1)& (0+255),f,b
  4318                           
  4319                           ; BSR set to: 1
  4320                           ;doprnt.c: 1219: if(c)
  4321  00079A  0101               	movlb	1	; () banked
  4322  00079C  511D               	movf	printf@c& (0+255),w,b
  4323  00079E  0101               	movlb	1	; () banked
  4324  0007A0  B4D8               	btfsc	status,2,c
  4325  0007A2  D003               	goto	l5597
  4326                           
  4327                           ; BSR set to: 1
  4328                           ;doprnt.c: 1221: (putch('.') );
  4329  0007A4  0E2E               	movlw	46
  4330  0007A6  EC65  F029         	call	_putch
  4331  0007AA                     l5597:
  4332                           
  4333                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4334  0007AA  0101               	movlb	1	; () banked
  4335  0007AC  511D               	movf	printf@c& (0+255),w,b
  4336  0007AE  ECA9  F00B         	call	_scale
  4337  0007B2  C0B0  F100         	movff	?_scale,_printf$1339
  4338  0007B6  C0B1  F101         	movff	?_scale+1,_printf$1339+1
  4339  0007BA  C0B2  F102         	movff	?_scale+2,_printf$1339+2
  4340                           
  4341                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4342  0007BE  C118  F0A4         	movff	printf@fval,___ftmul@f2
  4343  0007C2  C119  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  4344  0007C6  C11A  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  4345  0007CA  C100  F0A1         	movff	_printf$1339,___ftmul@f1
  4346  0007CE  C101  F0A2         	movff	_printf$1339+1,___ftmul@f1+1
  4347  0007D2  C102  F0A3         	movff	_printf$1339+2,___ftmul@f1+2
  4348  0007D6  EC06  F01A         	call	___ftmul	;wreg free
  4349  0007DA  C0A1  F0C6         	movff	?___ftmul,___fttol@f1
  4350  0007DE  C0A2  F0C7         	movff	?___ftmul+1,___fttol@f1+1
  4351  0007E2  C0A3  F0C8         	movff	?___ftmul+2,___fttol@f1+2
  4352  0007E6  EC5B  F01B         	call	___fttol	;wreg free
  4353  0007EA  C0C6  F112         	movff	?___fttol,printf@val
  4354  0007EE  C0C7  F113         	movff	?___fttol+1,printf@val+1
  4355  0007F2  C0C8  F114         	movff	?___fttol+2,printf@val+2
  4356  0007F6  C0C9  F115         	movff	?___fttol+3,printf@val+3
  4357                           
  4358                           ;doprnt.c: 1228: while(c--) {
  4359  0007FA  D06E               	goto	l5607
  4360  0007FC                     l5601:
  4361                           
  4362                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4363  0007FC  C112  F080         	movff	printf@val,___lldiv@dividend
  4364  000800  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4365  000804  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4366  000808  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4367  00080C  0101               	movlb	1	; () banked
  4368  00080E  511D               	movf	printf@c& (0+255),w,b
  4369  000810  0D04               	mullw	4
  4370  000812  0E31               	movlw	low _dpowers
  4371  000814  24F3               	addwf	prodl,w,c
  4372  000816  6EF6               	movwf	tblptrl,c
  4373  000818  0EFE               	movlw	high _dpowers
  4374  00081A  20F4               	addwfc	prodh,w,c
  4375  00081C  6EF7               	movwf	tblptrh,c
  4376  00081E                     	if	0	;There are less than 3 active tblptr bytes
  4377  00081E                     	endif
  4378  00081E  0009               	tblrd		*+
  4379  000820  CFF5 F084          	movff	tablat,___lldiv@divisor
  4380  000824  0009               	tblrd		*+
  4381  000826  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4382  00082A  0009               	tblrd		*+
  4383  00082C  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4384  000830  000A               	tblrd		*-
  4385  000832  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4386  000836  EC75  F023         	call	___lldiv	;wreg free
  4387  00083A  C080  F10C         	movff	?___lldiv,printf@tmpval
  4388  00083E  C081  F10D         	movff	?___lldiv+1,printf@tmpval+1
  4389  000842  C082  F10E         	movff	?___lldiv+2,printf@tmpval+2
  4390  000846  C083  F10F         	movff	?___lldiv+3,printf@tmpval+3
  4391                           
  4392                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4393  00084A  C10C  F08D         	movff	printf@tmpval,___llmod@dividend
  4394  00084E  C10D  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  4395  000852  C10E  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  4396  000856  C10F  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  4397  00085A  0E0A               	movlw	10
  4398  00085C  0100               	movlb	0	; () banked
  4399  00085E  6F91               	movwf	___llmod@divisor& (0+255),b
  4400  000860  0E00               	movlw	0
  4401  000862  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4402  000864  0E00               	movlw	0
  4403  000866  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4404  000868  0E00               	movlw	0
  4405  00086A  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4406  00086C  ECCA  F024         	call	___llmod	;wreg free
  4407  000870  C08D  F10C         	movff	?___llmod,printf@tmpval
  4408  000874  C08E  F10D         	movff	?___llmod+1,printf@tmpval+1
  4409  000878  C08F  F10E         	movff	?___llmod+2,printf@tmpval+2
  4410  00087C  C090  F10F         	movff	?___llmod+3,printf@tmpval+3
  4411                           
  4412                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4413  000880  0101               	movlb	1	; () banked
  4414  000882  510C               	movf	printf@tmpval& (0+255),w,b
  4415  000884  0F30               	addlw	48
  4416  000886  EC65  F029         	call	_putch
  4417                           
  4418                           ;doprnt.c: 1232: val %= dpowers[c];
  4419  00088A  C112  F08D         	movff	printf@val,___llmod@dividend
  4420  00088E  C113  F08E         	movff	printf@val+1,___llmod@dividend+1
  4421  000892  C114  F08F         	movff	printf@val+2,___llmod@dividend+2
  4422  000896  C115  F090         	movff	printf@val+3,___llmod@dividend+3
  4423  00089A  0101               	movlb	1	; () banked
  4424  00089C  511D               	movf	printf@c& (0+255),w,b
  4425  00089E  0D04               	mullw	4
  4426  0008A0  0E31               	movlw	low _dpowers
  4427  0008A2  24F3               	addwf	prodl,w,c
  4428  0008A4  6EF6               	movwf	tblptrl,c
  4429  0008A6  0EFE               	movlw	high _dpowers
  4430  0008A8  20F4               	addwfc	prodh,w,c
  4431  0008AA  6EF7               	movwf	tblptrh,c
  4432  0008AC                     	if	0	;There are less than 3 active tblptr bytes
  4433  0008AC                     	endif
  4434  0008AC  0009               	tblrd		*+
  4435  0008AE  CFF5 F091          	movff	tablat,___llmod@divisor
  4436  0008B2  0009               	tblrd		*+
  4437  0008B4  CFF5 F092          	movff	tablat,___llmod@divisor+1
  4438  0008B8  0009               	tblrd		*+
  4439  0008BA  CFF5 F093          	movff	tablat,___llmod@divisor+2
  4440  0008BE  000A               	tblrd		*-
  4441  0008C0  CFF5 F094          	movff	tablat,___llmod@divisor+3
  4442  0008C4  ECCA  F024         	call	___llmod	;wreg free
  4443  0008C8  C08D  F112         	movff	?___llmod,printf@val
  4444  0008CC  C08E  F113         	movff	?___llmod+1,printf@val+1
  4445  0008D0  C08F  F114         	movff	?___llmod+2,printf@val+2
  4446  0008D4  C090  F115         	movff	?___llmod+3,printf@val+3
  4447  0008D8                     l5607:
  4448  0008D8  0101               	movlb	1	; () banked
  4449  0008DA  071D               	decf	printf@c& (0+255),f,b
  4450  0008DC  0101               	movlb	1	; () banked
  4451  0008DE  291D               	incf	printf@c& (0+255),w,b
  4452  0008E0  B4D8               	btfsc	status,2,c
  4453  0008E2  D008               	goto	l5613
  4454  0008E4  D78B               	goto	l5601
  4455  0008E6                     l5609:
  4456                           
  4457                           ; BSR set to: 1
  4458                           ;doprnt.c: 1236: (putch('0') );
  4459  0008E6  0E30               	movlw	48
  4460  0008E8  EC65  F029         	call	_putch
  4461                           
  4462                           ;doprnt.c: 1237: prec--;
  4463  0008EC  0101               	movlb	1	; () banked
  4464  0008EE  070A               	decf	printf@prec& (0+255),f,b
  4465  0008F0  A0D8               	btfss	status,0,c
  4466  0008F2  070B               	decf	(printf@prec+1)& (0+255),f,b
  4467  0008F4                     l5613:
  4468                           
  4469                           ; BSR set to: 1
  4470  0008F4  0101               	movlb	1	; () banked
  4471  0008F6  510A               	movf	printf@prec& (0+255),w,b
  4472  0008F8  0101               	movlb	1	; () banked
  4473  0008FA  110B               	iorwf	(printf@prec+1)& (0+255),w,b
  4474  0008FC  B4D8               	btfsc	status,2,c
  4475  0008FE  D1D5               	goto	l5721
  4476  000900  D7F2               	goto	l5609
  4477  000902                     l700:
  4478                           
  4479                           ; BSR set to: 1
  4480                           ;doprnt.c: 1246: }
  4481                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4482  000902  0101               	movlb	1	; () banked
  4483  000904  BF1B               	btfsc	printf@flag& (0+255),7,b
  4484  000906  D034               	goto	l748
  4485                           
  4486                           ; BSR set to: 1
  4487                           ;doprnt.c: 1253: {
  4488                           ;doprnt.c: 1255: if(flag & 0x10)
  4489  000908  0101               	movlb	1	; () banked
  4490  00090A  A91B               	btfss	printf@flag& (0+255),4,b
  4491  00090C  D00E               	goto	l5621
  4492                           
  4493                           ; BSR set to: 1
  4494                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4495  00090E  C108  FFD9         	movff	printf@ap,fsr2l
  4496  000912  C109  FFDA         	movff	printf@ap+1,fsr2h
  4497  000916  CFDE F112          	movff	postinc2,printf@val
  4498  00091A  CFDE F113          	movff	postinc2,printf@val+1
  4499  00091E  CFDE F114          	movff	postinc2,printf@val+2
  4500  000922  CFDE F115          	movff	postinc2,printf@val+3
  4501                           
  4502                           ; BSR set to: 1
  4503  000926  0E04               	movlw	4
  4504  000928  D00F               	goto	L2
  4505  00092A                     l5621:
  4506                           
  4507                           ; BSR set to: 1
  4508                           ;doprnt.c: 1257: else
  4509                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4510  00092A  C108  FFD9         	movff	printf@ap,fsr2l
  4511  00092E  C109  FFDA         	movff	printf@ap+1,fsr2h
  4512  000932  CFDE F112          	movff	postinc2,printf@val
  4513  000936  CFDD F113          	movff	postdec2,printf@val+1
  4514  00093A  0101               	movlb	1	; () banked
  4515  00093C  0E00               	movlw	0
  4516  00093E  BF13               	btfsc	(printf@val+1)& (0+255),7,b
  4517  000940  0EFF               	movlw	-1
  4518  000942  6F14               	movwf	(printf@val+2)& (0+255),b
  4519  000944  6F15               	movwf	(printf@val+3)& (0+255),b
  4520                           
  4521                           ; BSR set to: 1
  4522  000946  0E02               	movlw	2
  4523  000948                     L2:
  4524  000948  0101               	movlb	1	; () banked
  4525  00094A  2708               	addwf	printf@ap& (0+255),f,b
  4526  00094C  0E00               	movlw	0
  4527  00094E  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  4528                           
  4529                           ; BSR set to: 1
  4530                           ;doprnt.c: 1261: if((long)val < 0) {
  4531                           
  4532                           ; BSR set to: 1
  4533  000950  0101               	movlb	1	; () banked
  4534  000952  AF15               	btfss	(printf@val+3)& (0+255),7,b
  4535  000954  D07F               	goto	l5669
  4536                           
  4537                           ; BSR set to: 1
  4538                           ;doprnt.c: 1262: flag |= 0x03;
  4539  000956  0E03               	movlw	3
  4540  000958  0101               	movlb	1	; () banked
  4541  00095A  131B               	iorwf	printf@flag& (0+255),f,b
  4542                           
  4543                           ; BSR set to: 1
  4544                           ;doprnt.c: 1263: val = -val;
  4545  00095C  0101               	movlb	1	; () banked
  4546  00095E  1F15               	comf	(printf@val+3)& (0+255),f,b
  4547  000960  1F14               	comf	(printf@val+2)& (0+255),f,b
  4548  000962  1F13               	comf	(printf@val+1)& (0+255),f,b
  4549  000964  6D12               	negf	printf@val& (0+255),b
  4550  000966  0E00               	movlw	0
  4551  000968  2313               	addwfc	(printf@val+1)& (0+255),f,b
  4552  00096A  2314               	addwfc	(printf@val+2)& (0+255),f,b
  4553  00096C  2315               	addwfc	(printf@val+3)& (0+255),f,b
  4554                           
  4555                           ; BSR set to: 1
  4556                           ;doprnt.c: 1264: }
  4557                           ;doprnt.c: 1266: }
  4558  00096E  D072               	goto	l5669
  4559  000970                     l748:
  4560                           
  4561                           ; BSR set to: 1
  4562                           ;doprnt.c: 1268: else
  4563                           ;doprnt.c: 1273: {
  4564                           ;doprnt.c: 1281: if(flag & 0x10)
  4565  000970  0101               	movlb	1	; () banked
  4566  000972  A91B               	btfss	printf@flag& (0+255),4,b
  4567  000974  D00E               	goto	l5635
  4568                           
  4569                           ; BSR set to: 1
  4570                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4571  000976  C108  FFD9         	movff	printf@ap,fsr2l
  4572  00097A  C109  FFDA         	movff	printf@ap+1,fsr2h
  4573  00097E  CFDE F112          	movff	postinc2,printf@val
  4574  000982  CFDE F113          	movff	postinc2,printf@val+1
  4575  000986  CFDE F114          	movff	postinc2,printf@val+2
  4576  00098A  CFDE F115          	movff	postinc2,printf@val+3
  4577                           
  4578                           ; BSR set to: 1
  4579  00098E  0E04               	movlw	4
  4580  000990  D010               	goto	L3
  4581  000992                     l5635:
  4582                           
  4583                           ; BSR set to: 1
  4584                           ;doprnt.c: 1283: else
  4585                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4586  000992  C108  FFD9         	movff	printf@ap,fsr2l
  4587  000996  C109  FFDA         	movff	printf@ap+1,fsr2h
  4588  00099A  CFDE F0DF          	movff	postinc2,??_printf
  4589  00099E  CFDD F0E0          	movff	postdec2,??_printf+1
  4590  0009A2  C0DF  F112         	movff	??_printf,printf@val
  4591  0009A6  C0E0  F113         	movff	??_printf+1,printf@val+1
  4592  0009AA  0101               	movlb	1	; () banked
  4593  0009AC  6B14               	clrf	(printf@val+2)& (0+255),b
  4594  0009AE  6B15               	clrf	(printf@val+3)& (0+255),b
  4595                           
  4596                           ; BSR set to: 1
  4597  0009B0  0E02               	movlw	2
  4598  0009B2                     L3:
  4599  0009B2  0101               	movlb	1	; () banked
  4600  0009B4  2708               	addwf	printf@ap& (0+255),f,b
  4601  0009B6  0E00               	movlw	0
  4602  0009B8  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  4603                           
  4604                           ; BSR set to: 1
  4605                           ;doprnt.c: 1287: }
  4606                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4607                           
  4608                           ; BSR set to: 1
  4609  0009BA  D04C               	goto	l5669
  4610  0009BC                     l5639:
  4611                           
  4612                           ; BSR set to: 1
  4613                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4614  0009BC  0E01               	movlw	1
  4615  0009BE  0101               	movlb	1	; () banked
  4616  0009C0  6F1D               	movwf	printf@c& (0+255),b
  4617  0009C2                     l5641:
  4618                           
  4619                           ; BSR set to: 1
  4620  0009C2  0E0A               	movlw	10
  4621  0009C4  0101               	movlb	1	; () banked
  4622  0009C6  191D               	xorwf	printf@c& (0+255),w,b
  4623  0009C8  B4D8               	btfsc	status,2,c
  4624  0009CA  D04D               	goto	l5671
  4625                           
  4626                           ; BSR set to: 1
  4627                           ;doprnt.c: 1306: if(val < dpowers[c])
  4628                           
  4629                           ; BSR set to: 1
  4630                           
  4631                           ; BSR set to: 1
  4632  0009CC  0101               	movlb	1	; () banked
  4633  0009CE  511D               	movf	printf@c& (0+255),w,b
  4634  0009D0  0D04               	mullw	4
  4635  0009D2  0E31               	movlw	low _dpowers
  4636  0009D4  24F3               	addwf	prodl,w,c
  4637  0009D6  6EF6               	movwf	tblptrl,c
  4638  0009D8  0EFE               	movlw	high _dpowers
  4639  0009DA  20F4               	addwfc	prodh,w,c
  4640  0009DC  6EF7               	movwf	tblptrh,c
  4641  0009DE                     	if	0	;There are less than 3 active tblptr bytes
  4642  0009DE                     	endif
  4643  0009DE  0009               	tblrd		*+
  4644  0009E0  50F5               	movf	tablat,w,c
  4645  0009E2  0101               	movlb	1	; () banked
  4646  0009E4  5D12               	subwf	printf@val& (0+255),w,b
  4647  0009E6  0009               	tblrd		*+
  4648  0009E8  50F5               	movf	tablat,w,c
  4649  0009EA  0101               	movlb	1	; () banked
  4650  0009EC  5913               	subwfb	(printf@val+1)& (0+255),w,b
  4651  0009EE  0009               	tblrd		*+
  4652  0009F0  50F5               	movf	tablat,w,c
  4653  0009F2  0101               	movlb	1	; () banked
  4654  0009F4  5914               	subwfb	(printf@val+2)& (0+255),w,b
  4655  0009F6  0009               	tblrd		*+
  4656  0009F8  50F5               	movf	tablat,w,c
  4657  0009FA  0101               	movlb	1	; () banked
  4658  0009FC  5915               	subwfb	(printf@val+3)& (0+255),w,b
  4659  0009FE  A0D8               	btfss	status,0,c
  4660  000A00  D032               	goto	l5671
  4661                           
  4662                           ; BSR set to: 1
  4663                           
  4664                           ; BSR set to: 1
  4665                           
  4666                           ; BSR set to: 1
  4667                           ;doprnt.c: 1307: break;
  4668  000A02  0101               	movlb	1	; () banked
  4669  000A04  2B1D               	incf	printf@c& (0+255),f,b
  4670  000A06  D7DD               	goto	l5641
  4671  000A08                     l5653:
  4672                           
  4673                           ; BSR set to: 1
  4674                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4675  000A08  0E01               	movlw	1
  4676  000A0A  0101               	movlb	1	; () banked
  4677  000A0C  6F1D               	movwf	printf@c& (0+255),b
  4678  000A0E                     l5655:
  4679                           
  4680                           ; BSR set to: 1
  4681  000A0E  0E08               	movlw	8
  4682  000A10  0101               	movlb	1	; () banked
  4683  000A12  191D               	xorwf	printf@c& (0+255),w,b
  4684  000A14  B4D8               	btfsc	status,2,c
  4685  000A16  D027               	goto	l5671
  4686                           
  4687                           ; BSR set to: 1
  4688                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4689                           
  4690                           ; BSR set to: 1
  4691                           
  4692                           ; BSR set to: 1
  4693  000A18  0101               	movlb	1	; () banked
  4694  000A1A  511D               	movf	printf@c& (0+255),w,b
  4695  000A1C  0D04               	mullw	4
  4696  000A1E  0EA7               	movlw	low _hexpowers
  4697  000A20  24F3               	addwf	prodl,w,c
  4698  000A22  6EF6               	movwf	tblptrl,c
  4699  000A24  0EFE               	movlw	high _hexpowers
  4700  000A26  20F4               	addwfc	prodh,w,c
  4701  000A28  6EF7               	movwf	tblptrh,c
  4702  000A2A                     	if	0	;There are less than 3 active tblptr bytes
  4703  000A2A                     	endif
  4704  000A2A  0009               	tblrd		*+
  4705  000A2C  50F5               	movf	tablat,w,c
  4706  000A2E  0101               	movlb	1	; () banked
  4707  000A30  5D12               	subwf	printf@val& (0+255),w,b
  4708  000A32  0009               	tblrd		*+
  4709  000A34  50F5               	movf	tablat,w,c
  4710  000A36  0101               	movlb	1	; () banked
  4711  000A38  5913               	subwfb	(printf@val+1)& (0+255),w,b
  4712  000A3A  0009               	tblrd		*+
  4713  000A3C  50F5               	movf	tablat,w,c
  4714  000A3E  0101               	movlb	1	; () banked
  4715  000A40  5914               	subwfb	(printf@val+2)& (0+255),w,b
  4716  000A42  0009               	tblrd		*+
  4717  000A44  50F5               	movf	tablat,w,c
  4718  000A46  0101               	movlb	1	; () banked
  4719  000A48  5915               	subwfb	(printf@val+3)& (0+255),w,b
  4720  000A4A  A0D8               	btfss	status,0,c
  4721  000A4C  D00C               	goto	l5671
  4722                           
  4723                           ; BSR set to: 1
  4724                           
  4725                           ; BSR set to: 1
  4726                           
  4727                           ; BSR set to: 1
  4728                           ;doprnt.c: 1318: break;
  4729  000A4E  0101               	movlb	1	; () banked
  4730  000A50  2B1D               	incf	printf@c& (0+255),f,b
  4731  000A52  D7DD               	goto	l5655
  4732  000A54                     l5669:
  4733                           
  4734                           ; BSR set to: 1
  4735  000A54  0101               	movlb	1	; () banked
  4736  000A56  511B               	movf	printf@flag& (0+255),w,b
  4737  000A58  0B80               	andlw	128
  4738                           
  4739                           ; Switch size 1, requested type "space"
  4740                           ; Number of cases is 2, Range of values is 0 to 128
  4741                           ; switch strategies available:
  4742                           ; Name         Instructions Cycles
  4743                           ; simple_byte            7     4 (average)
  4744                           ;	Chosen strategy is simple_byte
  4745  000A5A  0A00               	xorlw	0	; case 0
  4746  000A5C  B4D8               	btfsc	status,2,c
  4747  000A5E  D7AE               	goto	l5639
  4748  000A60  0A80               	xorlw	128	; case 128
  4749  000A62  B4D8               	btfsc	status,2,c
  4750  000A64  D7D1               	goto	l5653
  4751  000A66                     l5671:
  4752                           
  4753                           ; BSR set to: 1
  4754                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4755  000A66  0101               	movlb	1	; () banked
  4756  000A68  5116               	movf	printf@width& (0+255),w,b
  4757  000A6A  0101               	movlb	1	; () banked
  4758  000A6C  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4759  000A6E  B4D8               	btfsc	status,2,c
  4760  000A70  D014               	goto	l5677
  4761                           
  4762                           ; BSR set to: 1
  4763  000A72  0E03               	movlw	3
  4764  000A74  0101               	movlb	1	; () banked
  4765  000A76  151B               	andwf	printf@flag& (0+255),w,b
  4766  000A78  0100               	movlb	0	; () banked
  4767  000A7A  6FDF               	movwf	??_printf& (0+255),b
  4768  000A7C  0E00               	movlw	0
  4769  000A7E  0101               	movlb	1	; () banked
  4770  000A80  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4771  000A82  0100               	movlb	0	; () banked
  4772  000A84  6FE0               	movwf	(??_printf+1)& (0+255),b
  4773  000A86  0100               	movlb	0	; () banked
  4774  000A88  51DF               	movf	??_printf& (0+255),w,b
  4775  000A8A  0100               	movlb	0	; () banked
  4776  000A8C  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4777  000A8E  B4D8               	btfsc	status,2,c
  4778  000A90  D004               	goto	l5677
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;doprnt.c: 1346: width--;
  4782  000A92  0101               	movlb	1	; () banked
  4783  000A94  0716               	decf	printf@width& (0+255),f,b
  4784  000A96  A0D8               	btfss	status,0,c
  4785  000A98  0717               	decf	(printf@width+1)& (0+255),f,b
  4786  000A9A                     l5677:
  4787                           
  4788                           ;doprnt.c: 1381: if(width > c)
  4789  000A9A  0E80               	movlw	128
  4790  000A9C  0101               	movlb	1	; () banked
  4791  000A9E  BF1D               	btfsc	printf@c& (0+255),7,b
  4792  000AA0  0E7F               	movlw	127
  4793  000AA2  0100               	movlb	0	; () banked
  4794  000AA4  6FDF               	movwf	??_printf& (0+255),b
  4795  000AA6  0101               	movlb	1	; () banked
  4796  000AA8  5116               	movf	printf@width& (0+255),w,b
  4797  000AAA  0101               	movlb	1	; () banked
  4798  000AAC  5D1D               	subwf	printf@c& (0+255),w,b
  4799  000AAE  0101               	movlb	1	; () banked
  4800  000AB0  5117               	movf	(printf@width+1)& (0+255),w,b
  4801  000AB2  0A80               	xorlw	128
  4802  000AB4  0100               	movlb	0	; () banked
  4803  000AB6  59DF               	subwfb	??_printf& (0+255),w,b
  4804  000AB8  B0D8               	btfsc	status,0,c
  4805  000ABA  D00B               	goto	l5681
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;doprnt.c: 1382: width -= c;
  4809  000ABC  0101               	movlb	1	; () banked
  4810  000ABE  511D               	movf	printf@c& (0+255),w,b
  4811  000AC0  0101               	movlb	1	; () banked
  4812  000AC2  5F16               	subwf	printf@width& (0+255),f,b
  4813  000AC4  0E00               	movlw	0
  4814  000AC6  0101               	movlb	1	; () banked
  4815  000AC8  BF1D               	btfsc	printf@c& (0+255),7,b
  4816  000ACA  0EFF               	movlw	255
  4817  000ACC  0101               	movlb	1	; () banked
  4818  000ACE  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  4819  000AD0  D005               	goto	l5683
  4820  000AD2                     l5681:
  4821                           
  4822                           ;doprnt.c: 1383: else
  4823                           ;doprnt.c: 1384: width = 0;
  4824  000AD2  0E00               	movlw	0
  4825  000AD4  0101               	movlb	1	; () banked
  4826  000AD6  6F17               	movwf	(printf@width+1)& (0+255),b
  4827  000AD8  0E00               	movlw	0
  4828  000ADA  6F16               	movwf	printf@width& (0+255),b
  4829  000ADC                     l5683:
  4830                           
  4831                           ; BSR set to: 1
  4832                           ;doprnt.c: 1387: if(flag & 0x04) {
  4833  000ADC  0101               	movlb	1	; () banked
  4834  000ADE  A51B               	btfss	printf@flag& (0+255),2,b
  4835  000AE0  D021               	goto	l5695
  4836                           
  4837                           ; BSR set to: 1
  4838                           ;doprnt.c: 1392: if(flag & 0x03)
  4839  000AE2  0E03               	movlw	3
  4840  000AE4  0101               	movlb	1	; () banked
  4841  000AE6  151B               	andwf	printf@flag& (0+255),w,b
  4842  000AE8  0100               	movlb	0	; () banked
  4843  000AEA  6FDF               	movwf	??_printf& (0+255),b
  4844  000AEC  0E00               	movlw	0
  4845  000AEE  0101               	movlb	1	; () banked
  4846  000AF0  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4847  000AF2  0100               	movlb	0	; () banked
  4848  000AF4  6FE0               	movwf	(??_printf+1)& (0+255),b
  4849  000AF6  0100               	movlb	0	; () banked
  4850  000AF8  51DF               	movf	??_printf& (0+255),w,b
  4851  000AFA  0100               	movlb	0	; () banked
  4852  000AFC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4853  000AFE  B4D8               	btfsc	status,2,c
  4854  000B00  D003               	goto	l5689
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;doprnt.c: 1393: (putch('-') );
  4858  000B02  0E2D               	movlw	45
  4859  000B04  EC65  F029         	call	_putch
  4860  000B08                     l5689:
  4861                           
  4862                           ;doprnt.c: 1415: if(width)
  4863  000B08  0101               	movlb	1	; () banked
  4864  000B0A  5116               	movf	printf@width& (0+255),w,b
  4865  000B0C  0101               	movlb	1	; () banked
  4866  000B0E  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4867  000B10  B4D8               	btfsc	status,2,c
  4868  000B12  D02E               	goto	l5705
  4869                           
  4870                           ; BSR set to: 1
  4871                           ;doprnt.c: 1417: (putch('0') );
  4872                           
  4873                           ; BSR set to: 1
  4874                           
  4875                           ;doprnt.c: 1416: do
  4876  000B14  0E30               	movlw	48
  4877  000B16  EC65  F029         	call	_putch
  4878                           
  4879                           ;doprnt.c: 1418: while(--width);
  4880  000B1A  0101               	movlb	1	; () banked
  4881  000B1C  0716               	decf	printf@width& (0+255),f,b
  4882  000B1E  A0D8               	btfss	status,0,c
  4883  000B20  0717               	decf	(printf@width+1)& (0+255),f,b
  4884  000B22  D7F2               	goto	l5689
  4885  000B24                     l5695:
  4886                           
  4887                           ; BSR set to: 1
  4888                           ;doprnt.c: 1422: {
  4889                           ;doprnt.c: 1424: if(width
  4890                           ;doprnt.c: 1428: )
  4891  000B24  0101               	movlb	1	; () banked
  4892  000B26  5116               	movf	printf@width& (0+255),w,b
  4893  000B28  0101               	movlb	1	; () banked
  4894  000B2A  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4895  000B2C  B4D8               	btfsc	status,2,c
  4896  000B2E  D00D               	goto	l5701
  4897  000B30                     l5697:
  4898                           
  4899                           ; BSR set to: 1
  4900                           ;doprnt.c: 1430: (putch(' ') );
  4901  000B30  0E20               	movlw	32
  4902  000B32  EC65  F029         	call	_putch
  4903                           
  4904                           ;doprnt.c: 1431: while(--width);
  4905  000B36  0101               	movlb	1	; () banked
  4906  000B38  0716               	decf	printf@width& (0+255),f,b
  4907  000B3A  A0D8               	btfss	status,0,c
  4908  000B3C  0717               	decf	(printf@width+1)& (0+255),f,b
  4909  000B3E  0101               	movlb	1	; () banked
  4910  000B40  5116               	movf	printf@width& (0+255),w,b
  4911  000B42  0101               	movlb	1	; () banked
  4912  000B44  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4913  000B46  A4D8               	btfss	status,2,c
  4914  000B48  D7F3               	goto	l5697
  4915  000B4A                     l5701:
  4916                           
  4917                           ; BSR set to: 1
  4918                           ;doprnt.c: 1438: if(flag & 0x03)
  4919  000B4A  0E03               	movlw	3
  4920  000B4C  0101               	movlb	1	; () banked
  4921  000B4E  151B               	andwf	printf@flag& (0+255),w,b
  4922  000B50  0100               	movlb	0	; () banked
  4923  000B52  6FDF               	movwf	??_printf& (0+255),b
  4924  000B54  0E00               	movlw	0
  4925  000B56  0101               	movlb	1	; () banked
  4926  000B58  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4927  000B5A  0100               	movlb	0	; () banked
  4928  000B5C  6FE0               	movwf	(??_printf+1)& (0+255),b
  4929  000B5E  0100               	movlb	0	; () banked
  4930  000B60  51DF               	movf	??_printf& (0+255),w,b
  4931  000B62  0100               	movlb	0	; () banked
  4932  000B64  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4933  000B66  B4D8               	btfsc	status,2,c
  4934  000B68  D003               	goto	l5705
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;doprnt.c: 1439: (putch('-') );
  4938  000B6A  0E2D               	movlw	45
  4939  000B6C  EC65  F029         	call	_putch
  4940  000B70                     l5705:
  4941                           
  4942                           ;doprnt.c: 1469: }
  4943                           ;doprnt.c: 1472: prec = c;
  4944  000B70  0101               	movlb	1	; () banked
  4945  000B72  511D               	movf	printf@c& (0+255),w,b
  4946  000B74  0101               	movlb	1	; () banked
  4947  000B76  6F0A               	movwf	printf@prec& (0+255),b
  4948  000B78  6B0B               	clrf	(printf@prec+1)& (0+255),b
  4949  000B7A  BF0A               	btfsc	printf@prec& (0+255),7,b
  4950  000B7C  070B               	decf	(printf@prec+1)& (0+255),f,b
  4951                           
  4952                           ;doprnt.c: 1474: while(prec--) {
  4953  000B7E  D08A               	goto	l5719
  4954  000B80                     l5707:
  4955                           
  4956                           ; BSR set to: 1
  4957                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4958  000B80  C10A  F0DF         	movff	printf@prec,??_printf
  4959  000B84  C10B  F0E0         	movff	printf@prec+1,??_printf+1
  4960  000B88  0100               	movlb	0	; () banked
  4961  000B8A  90D8               	bcf	status,0,c
  4962  000B8C  37DF               	rlcf	??_printf& (0+255),f,b
  4963  000B8E  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4964  000B90  0100               	movlb	0	; () banked
  4965  000B92  90D8               	bcf	status,0,c
  4966  000B94  37DF               	rlcf	??_printf& (0+255),f,b
  4967  000B96  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4968  000B98  0E31               	movlw	low _dpowers
  4969  000B9A  0100               	movlb	0	; () banked
  4970  000B9C  25DF               	addwf	??_printf& (0+255),w,b
  4971  000B9E  6EF6               	movwf	tblptrl,c
  4972  000BA0  0EFE               	movlw	high _dpowers
  4973  000BA2  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  4974  000BA4  6EF7               	movwf	tblptrh,c
  4975  000BA6                     	if	0	;There are less than 3 active tblptr bytes
  4976  000BA6                     	endif
  4977  000BA6  0009               	tblrd		*+
  4978  000BA8  CFF5 F084          	movff	tablat,___lldiv@divisor
  4979  000BAC  0009               	tblrd		*+
  4980  000BAE  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4981  000BB2  0009               	tblrd		*+
  4982  000BB4  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4983  000BB8  000A               	tblrd		*-
  4984  000BBA  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4985  000BBE  C112  F080         	movff	printf@val,___lldiv@dividend
  4986  000BC2  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4987  000BC6  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4988  000BCA  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4989  000BCE  EC75  F023         	call	___lldiv	;wreg free
  4990  000BD2  C080  F08D         	movff	?___lldiv,___llmod@dividend
  4991  000BD6  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  4992  000BDA  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  4993  000BDE  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  4994  000BE2  0E0A               	movlw	10
  4995  000BE4  0100               	movlb	0	; () banked
  4996  000BE6  6F91               	movwf	___llmod@divisor& (0+255),b
  4997  000BE8  0E00               	movlw	0
  4998  000BEA  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4999  000BEC  0E00               	movlw	0
  5000  000BEE  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  5001  000BF0  0E00               	movlw	0
  5002  000BF2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  5003  000BF4  ECCA  F024         	call	___llmod	;wreg free
  5004  000BF8  0100               	movlb	0	; () banked
  5005  000BFA  518D               	movf	?___llmod& (0+255),w,b
  5006  000BFC  0F30               	addlw	48
  5007  000BFE  0101               	movlb	1	; () banked
  5008  000C00  6F1D               	movwf	printf@c& (0+255),b
  5009                           
  5010                           ;doprnt.c: 1491: break;
  5011  000C02  D044               	goto	l5717
  5012  000C04                     l5709:
  5013                           
  5014                           ; BSR set to: 1
  5015                           ;doprnt.c: 1499: {
  5016                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5017  000C04  C112  F080         	movff	printf@val,___lldiv@dividend
  5018  000C08  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  5019  000C0C  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  5020  000C10  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  5021  000C14  C10A  F0DF         	movff	printf@prec,??_printf
  5022  000C18  C10B  F0E0         	movff	printf@prec+1,??_printf+1
  5023  000C1C  0100               	movlb	0	; () banked
  5024  000C1E  90D8               	bcf	status,0,c
  5025  000C20  37DF               	rlcf	??_printf& (0+255),f,b
  5026  000C22  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  5027  000C24  0100               	movlb	0	; () banked
  5028  000C26  90D8               	bcf	status,0,c
  5029  000C28  37DF               	rlcf	??_printf& (0+255),f,b
  5030  000C2A  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  5031  000C2C  0EA7               	movlw	low _hexpowers
  5032  000C2E  0100               	movlb	0	; () banked
  5033  000C30  25DF               	addwf	??_printf& (0+255),w,b
  5034  000C32  6EF6               	movwf	tblptrl,c
  5035  000C34  0EFE               	movlw	high _hexpowers
  5036  000C36  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  5037  000C38  6EF7               	movwf	tblptrh,c
  5038  000C3A                     	if	0	;There are less than 3 active tblptr bytes
  5039  000C3A                     	endif
  5040  000C3A  0009               	tblrd		*+
  5041  000C3C  CFF5 F084          	movff	tablat,___lldiv@divisor
  5042  000C40  0009               	tblrd		*+
  5043  000C42  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  5044  000C46  0009               	tblrd		*+
  5045  000C48  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  5046  000C4C  000A               	tblrd		*-
  5047  000C4E  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  5048  000C52  EC75  F023         	call	___lldiv	;wreg free
  5049  000C56  0100               	movlb	0	; () banked
  5050  000C58  5180               	movf	?___lldiv& (0+255),w,b
  5051  000C5A  0B0F               	andlw	15
  5052  000C5C  0101               	movlb	1	; () banked
  5053  000C5E  6F05               	movwf	printf@idx& (0+255),b
  5054                           
  5055                           ; BSR set to: 1
  5056                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5057  000C60  0101               	movlb	1	; () banked
  5058  000C62  5105               	movf	printf@idx& (0+255),w,b
  5059  000C64  0D01               	mullw	1
  5060  000C66  0E4C               	movlw	low STR_18
  5061  000C68  24F3               	addwf	prodl,w,c
  5062  000C6A  6EF6               	movwf	tblptrl,c
  5063  000C6C  0EFF               	movlw	high STR_18
  5064  000C6E  20F4               	addwfc	prodh,w,c
  5065  000C70  6EF7               	movwf	tblptrh,c
  5066  000C72                     	if	0	;There are less than 3 active tblptr bytes
  5067  000C72                     	endif
  5068  000C72  0008               	tblrd		*
  5069  000C74  CFF5 F11D          	movff	tablat,printf@c
  5070                           
  5071                           ; BSR set to: 1
  5072                           ;doprnt.c: 1523: }
  5073                           
  5074                           ;doprnt.c: 1508: }
  5075                           ;doprnt.c: 1510: break;
  5076  000C78  D009               	goto	l5717
  5077  000C7A                     l5715:
  5078                           
  5079                           ; BSR set to: 1
  5080  000C7A  0101               	movlb	1	; () banked
  5081  000C7C  511B               	movf	printf@flag& (0+255),w,b
  5082  000C7E  0B80               	andlw	128
  5083                           
  5084                           ; Switch size 1, requested type "space"
  5085                           ; Number of cases is 2, Range of values is 0 to 128
  5086                           ; switch strategies available:
  5087                           ; Name         Instructions Cycles
  5088                           ; simple_byte            7     4 (average)
  5089                           ;	Chosen strategy is simple_byte
  5090  000C80  0A00               	xorlw	0	; case 0
  5091  000C82  B4D8               	btfsc	status,2,c
  5092  000C84  D77D               	goto	l5707
  5093  000C86  0A80               	xorlw	128	; case 128
  5094  000C88  B4D8               	btfsc	status,2,c
  5095  000C8A  D7BC               	goto	l5709
  5096  000C8C                     l5717:
  5097                           
  5098                           ; BSR set to: 1
  5099                           ;doprnt.c: 1524: (putch(c) );
  5100  000C8C  0101               	movlb	1	; () banked
  5101  000C8E  511D               	movf	printf@c& (0+255),w,b
  5102  000C90  EC65  F029         	call	_putch
  5103  000C94                     l5719:
  5104  000C94  0101               	movlb	1	; () banked
  5105  000C96  070A               	decf	printf@prec& (0+255),f,b
  5106  000C98  A0D8               	btfss	status,0,c
  5107  000C9A  070B               	decf	(printf@prec+1)& (0+255),f,b
  5108  000C9C  0101               	movlb	1	; () banked
  5109  000C9E  290A               	incf	printf@prec& (0+255),w,b
  5110  000CA0  E1EC               	bnz	l5715
  5111  000CA2  0101               	movlb	1	; () banked
  5112  000CA4  290B               	incf	(printf@prec+1)& (0+255),w,b
  5113  000CA6  A4D8               	btfss	status,2,c
  5114  000CA8  D7E8               	goto	l5715
  5115  000CAA                     l5721:
  5116  000CAA  C0D5  FFF6         	movff	printf@f,tblptrl
  5117  000CAE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5118  000CB2  0100               	movlb	0	; () banked
  5119  000CB4  4BD5               	infsnz	printf@f& (0+255),f,b
  5120  000CB6  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5121  000CB8                     	if	0	;tblptru may be non-zero
  5122  000CB8                     	endif
  5123  000CB8                     	if	0	;tblptru may be non-zero
  5124  000CB8                     	endif
  5125  000CB8  0008               	tblrd		*
  5126  000CBA  CFF5 F11D          	movff	tablat,printf@c
  5127  000CBE  0101               	movlb	1	; () banked
  5128  000CC0  511D               	movf	printf@c& (0+255),w,b
  5129  000CC2  B4D8               	btfsc	status,2,c
  5130  000CC4  0012               	return	
  5131  000CC6  EF11  F000         	goto	l5399
  5132  000CCA                     __end_of_printf:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           postinc0	equ	0xFEE
  5141                           wreg	equ	0xFE8
  5142                           postdec1	equ	0xFE5
  5143                           fsr1l	equ	0xFE1
  5144                           indf2	equ	0xFDF
  5145                           postinc2	equ	0xFDE
  5146                           postdec2	equ	0xFDD
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function _scale *****************
  5152 ;; Defined at:
  5153 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;  scl             1    wreg     char 
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;  scl             1   54[BANK0 ] char 
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  3   48[BANK0 ] char 
  5160 ;; Registers used:
  5161 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5167 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;Total ram usage:        7 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    8
  5174 ;; This function calls:
  5175 ;;		___awdiv
  5176 ;;		___awmod
  5177 ;;		___ftmul
  5178 ;;		___wmul
  5179 ;; This function is called by:
  5180 ;;		_printf
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text4
  5185  001752                     __ptext4:
  5186                           	opt stack 0
  5187  001752                     _scale:
  5188                           	opt stack 20
  5189                           
  5190                           ;incstack = 0
  5191                           ;scale@scl stored from wreg
  5192  001752  0100               	movlb	0	; () banked
  5193  001754  6FB6               	movwf	scale@scl& (0+255),b
  5194                           
  5195                           ;doprnt.c: 428: if(scl < 0) {
  5196  001756  0100               	movlb	0	; () banked
  5197  001758  AFB6               	btfss	scale@scl& (0+255),7,b
  5198  00175A  D12A               	goto	l4885
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;doprnt.c: 429: scl = -scl;
  5202  00175C  0100               	movlb	0	; () banked
  5203  00175E  6DB6               	negf	scale@scl& (0+255),b
  5204                           
  5205                           ;doprnt.c: 430: if(scl>=110)
  5206  001760  0100               	movlb	0	; () banked
  5207  001762  51B6               	movf	scale@scl& (0+255),w,b
  5208  001764  0A80               	xorlw	128
  5209  001766  0F12               	addlw	-238
  5210  001768  A0D8               	btfss	status,0,c
  5211  00176A  D0AC               	goto	l4875
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5215  00176C  0E00               	movlw	0
  5216  00176E  0100               	movlb	0	; () banked
  5217  001770  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5218  001772  0E03               	movlw	3
  5219  001774  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5220  001776  0E00               	movlw	0
  5221  001778  0100               	movlb	0	; () banked
  5222  00177A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5223  00177C  0E0A               	movlw	10
  5224  00177E  6F88               	movwf	___awdiv@divisor& (0+255),b
  5225  001780  0E00               	movlw	0
  5226  001782  0100               	movlb	0	; () banked
  5227  001784  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5228  001786  0E64               	movlw	100
  5229  001788  6F82               	movwf	___awmod@divisor& (0+255),b
  5230  00178A  0100               	movlb	0	; () banked
  5231  00178C  51B6               	movf	scale@scl& (0+255),w,b
  5232  00178E  0100               	movlb	0	; () banked
  5233  001790  6F80               	movwf	___awmod@dividend& (0+255),b
  5234  001792  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5235  001794  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5236  001796  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5237  001798  EC2A  F024         	call	___awmod	;wreg free
  5238  00179C  C080  F086         	movff	?___awmod,___awdiv@dividend
  5239  0017A0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5240  0017A4  EC16  F023         	call	___awdiv	;wreg free
  5241  0017A8  0E09               	movlw	9
  5242  0017AA  0100               	movlb	0	; () banked
  5243  0017AC  2586               	addwf	?___awdiv& (0+255),w,b
  5244  0017AE  0100               	movlb	0	; () banked
  5245  0017B0  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5246  0017B2  0E00               	movlw	0
  5247  0017B4  0100               	movlb	0	; () banked
  5248  0017B6  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5249  0017B8  0100               	movlb	0	; () banked
  5250  0017BA  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5251  0017BC  ECF3  F028         	call	___wmul	;wreg free
  5252  0017C0  0E59               	movlw	low __npowers_
  5253  0017C2  0100               	movlb	0	; () banked
  5254  0017C4  258E               	addwf	?___wmul& (0+255),w,b
  5255  0017C6  6EF6               	movwf	tblptrl,c
  5256  0017C8  0EFE               	movlw	high __npowers_
  5257  0017CA  0100               	movlb	0	; () banked
  5258  0017CC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5259  0017CE  6EF7               	movwf	tblptrh,c
  5260  0017D0                     	if	0	;There are less than 3 active tblptr bytes
  5261  0017D0                     	endif
  5262  0017D0  0009               	tblrd		*+
  5263  0017D2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5264  0017D6  0009               	tblrd		*+
  5265  0017D8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5266  0017DC  000A               	tblrd		*-
  5267  0017DE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5268  0017E2  0E00               	movlw	0
  5269  0017E4  0100               	movlb	0	; () banked
  5270  0017E6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5271  0017E8  0E64               	movlw	100
  5272  0017EA  6F88               	movwf	___awdiv@divisor& (0+255),b
  5273  0017EC  0100               	movlb	0	; () banked
  5274  0017EE  51B6               	movf	scale@scl& (0+255),w,b
  5275  0017F0  0100               	movlb	0	; () banked
  5276  0017F2  6F86               	movwf	___awdiv@dividend& (0+255),b
  5277  0017F4  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5278  0017F6  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5279  0017F8  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5280  0017FA  EC16  F023         	call	___awdiv	;wreg free
  5281  0017FE  0E12               	movlw	18
  5282  001800  0100               	movlb	0	; () banked
  5283  001802  2586               	addwf	?___awdiv& (0+255),w,b
  5284  001804  0100               	movlb	0	; () banked
  5285  001806  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5286  001808  0E00               	movlw	0
  5287  00180A  0100               	movlb	0	; () banked
  5288  00180C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5289  00180E  0100               	movlb	0	; () banked
  5290  001810  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5291  001812  0E00               	movlw	0
  5292  001814  0100               	movlb	0	; () banked
  5293  001816  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5294  001818  0E03               	movlw	3
  5295  00181A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5296  00181C  ECF3  F028         	call	___wmul	;wreg free
  5297  001820  0E59               	movlw	low __npowers_
  5298  001822  0100               	movlb	0	; () banked
  5299  001824  258E               	addwf	?___wmul& (0+255),w,b
  5300  001826  6EF6               	movwf	tblptrl,c
  5301  001828  0EFE               	movlw	high __npowers_
  5302  00182A  0100               	movlb	0	; () banked
  5303  00182C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5304  00182E  6EF7               	movwf	tblptrh,c
  5305  001830                     	if	0	;There are less than 3 active tblptr bytes
  5306  001830                     	endif
  5307  001830  0009               	tblrd		*+
  5308  001832  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5309  001836  0009               	tblrd		*+
  5310  001838  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5311  00183C  000A               	tblrd		*-
  5312  00183E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5313  001842  EC06  F01A         	call	___ftmul	;wreg free
  5314  001846  C0A1  F0B3         	movff	?___ftmul,_scale$1338
  5315  00184A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1338+1
  5316  00184E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1338+2
  5317                           
  5318                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5319  001852  C0B3  F0A1         	movff	_scale$1338,___ftmul@f1
  5320  001856  C0B4  F0A2         	movff	_scale$1338+1,___ftmul@f1+1
  5321  00185A  C0B5  F0A3         	movff	_scale$1338+2,___ftmul@f1+2
  5322  00185E  0E00               	movlw	0
  5323  001860  0100               	movlb	0	; () banked
  5324  001862  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5325  001864  0E03               	movlw	3
  5326  001866  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5327  001868  0E00               	movlw	0
  5328  00186A  0100               	movlb	0	; () banked
  5329  00186C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5330  00186E  0E0A               	movlw	10
  5331  001870  6F82               	movwf	___awmod@divisor& (0+255),b
  5332  001872  0100               	movlb	0	; () banked
  5333  001874  51B6               	movf	scale@scl& (0+255),w,b
  5334  001876  0100               	movlb	0	; () banked
  5335  001878  6F80               	movwf	___awmod@dividend& (0+255),b
  5336  00187A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5337  00187C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5338  00187E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5339  001880  EC2A  F024         	call	___awmod	;wreg free
  5340  001884  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5341  001888  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5342  00188C  ECF3  F028         	call	___wmul	;wreg free
  5343  001890  0E59               	movlw	low __npowers_
  5344  001892  0100               	movlb	0	; () banked
  5345  001894  258E               	addwf	?___wmul& (0+255),w,b
  5346  001896  6EF6               	movwf	tblptrl,c
  5347  001898  0EFE               	movlw	high __npowers_
  5348  00189A  0100               	movlb	0	; () banked
  5349  00189C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5350  00189E  6EF7               	movwf	tblptrh,c
  5351  0018A0                     	if	0	;There are less than 3 active tblptr bytes
  5352  0018A0                     	endif
  5353  0018A0  0009               	tblrd		*+
  5354  0018A2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5355  0018A6  0009               	tblrd		*+
  5356  0018A8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5357  0018AC  000A               	tblrd		*-
  5358  0018AE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5359  0018B2  EC06  F01A         	call	___ftmul	;wreg free
  5360  0018B6  C0A1  F0B0         	movff	?___ftmul,?_scale
  5361  0018BA  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  5362  0018BE  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  5363  0018C2  0012               	return	
  5364  0018C4                     l4875:
  5365                           
  5366                           ;doprnt.c: 432: else if(scl > 10)
  5367  0018C4  0100               	movlb	0	; () banked
  5368  0018C6  51B6               	movf	scale@scl& (0+255),w,b
  5369  0018C8  0A80               	xorlw	128
  5370  0018CA  0F75               	addlw	-139
  5371  0018CC  A0D8               	btfss	status,0,c
  5372  0018CE  D05D               	goto	l4881
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5376  0018D0  0E00               	movlw	0
  5377  0018D2  0100               	movlb	0	; () banked
  5378  0018D4  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5379  0018D6  0E0A               	movlw	10
  5380  0018D8  6F88               	movwf	___awdiv@divisor& (0+255),b
  5381  0018DA  0100               	movlb	0	; () banked
  5382  0018DC  51B6               	movf	scale@scl& (0+255),w,b
  5383  0018DE  0100               	movlb	0	; () banked
  5384  0018E0  6F86               	movwf	___awdiv@dividend& (0+255),b
  5385  0018E2  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5386  0018E4  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5387  0018E6  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5388  0018E8  EC16  F023         	call	___awdiv	;wreg free
  5389  0018EC  0E09               	movlw	9
  5390  0018EE  0100               	movlb	0	; () banked
  5391  0018F0  2586               	addwf	?___awdiv& (0+255),w,b
  5392  0018F2  0100               	movlb	0	; () banked
  5393  0018F4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5394  0018F6  0E00               	movlw	0
  5395  0018F8  0100               	movlb	0	; () banked
  5396  0018FA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5397  0018FC  0100               	movlb	0	; () banked
  5398  0018FE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5399  001900  0E00               	movlw	0
  5400  001902  0100               	movlb	0	; () banked
  5401  001904  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5402  001906  0E03               	movlw	3
  5403  001908  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5404  00190A  ECF3  F028         	call	___wmul	;wreg free
  5405  00190E  0E59               	movlw	low __npowers_
  5406  001910  0100               	movlb	0	; () banked
  5407  001912  258E               	addwf	?___wmul& (0+255),w,b
  5408  001914  6EF6               	movwf	tblptrl,c
  5409  001916  0EFE               	movlw	high __npowers_
  5410  001918  0100               	movlb	0	; () banked
  5411  00191A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5412  00191C  6EF7               	movwf	tblptrh,c
  5413  00191E                     	if	0	;There are less than 3 active tblptr bytes
  5414  00191E                     	endif
  5415  00191E  0009               	tblrd		*+
  5416  001920  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5417  001924  0009               	tblrd		*+
  5418  001926  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5419  00192A  000A               	tblrd		*-
  5420  00192C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5421  001930  0E00               	movlw	0
  5422  001932  0100               	movlb	0	; () banked
  5423  001934  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5424  001936  0E03               	movlw	3
  5425  001938  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5426  00193A  0E00               	movlw	0
  5427  00193C  0100               	movlb	0	; () banked
  5428  00193E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5429  001940  0E0A               	movlw	10
  5430  001942  6F82               	movwf	___awmod@divisor& (0+255),b
  5431  001944  0100               	movlb	0	; () banked
  5432  001946  51B6               	movf	scale@scl& (0+255),w,b
  5433  001948  0100               	movlb	0	; () banked
  5434  00194A  6F80               	movwf	___awmod@dividend& (0+255),b
  5435  00194C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5436  00194E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5437  001950  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5438  001952  EC2A  F024         	call	___awmod	;wreg free
  5439  001956  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5440  00195A  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5441  00195E  ECF3  F028         	call	___wmul	;wreg free
  5442  001962  0E59               	movlw	low __npowers_
  5443  001964  0100               	movlb	0	; () banked
  5444  001966  258E               	addwf	?___wmul& (0+255),w,b
  5445  001968  6EF6               	movwf	tblptrl,c
  5446  00196A  0EFE               	movlw	high __npowers_
  5447  00196C  0100               	movlb	0	; () banked
  5448  00196E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5449  001970  6EF7               	movwf	tblptrh,c
  5450  001972                     	if	0	;There are less than 3 active tblptr bytes
  5451  001972                     	endif
  5452  001972  0009               	tblrd		*+
  5453  001974  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5454  001978  0009               	tblrd		*+
  5455  00197A  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5456  00197E  000A               	tblrd		*-
  5457  001980  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5458  001984  EC06  F01A         	call	___ftmul	;wreg free
  5459  001988  D796               	goto	L4
  5460  00198A                     l4881:
  5461                           
  5462                           ;doprnt.c: 434: return _npowers_[scl];
  5463  00198A  0100               	movlb	0	; () banked
  5464  00198C  51B6               	movf	scale@scl& (0+255),w,b
  5465  00198E  0D03               	mullw	3
  5466  001990  0E59               	movlw	low __npowers_
  5467  001992  24F3               	addwf	prodl,w,c
  5468  001994  6EF6               	movwf	tblptrl,c
  5469  001996  0EFE               	movlw	high __npowers_
  5470  001998  20F4               	addwfc	prodh,w,c
  5471  00199A  6EF7               	movwf	tblptrh,c
  5472  00199C                     	if	0	;There are less than 3 active tblptr bytes
  5473  00199C                     	endif
  5474  00199C  0009               	tblrd		*+
  5475  00199E  CFF5 F0B0          	movff	tablat,?_scale
  5476  0019A2  0009               	tblrd		*+
  5477  0019A4  CFF5 F0B1          	movff	tablat,?_scale+1
  5478  0019A8  000A               	tblrd		*-
  5479  0019AA  CFF5 F0B2          	movff	tablat,?_scale+2
  5480                           
  5481                           ; BSR set to: 0
  5482  0019AE  0012               	return	
  5483  0019B0                     l4885:
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;doprnt.c: 435: }
  5487                           ;doprnt.c: 436: if(scl>=110)
  5488  0019B0  0100               	movlb	0	; () banked
  5489  0019B2  51B6               	movf	scale@scl& (0+255),w,b
  5490  0019B4  0A80               	xorlw	128
  5491  0019B6  0F12               	addlw	-238
  5492  0019B8  A0D8               	btfss	status,0,c
  5493  0019BA  D0AC               	goto	l4893
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5497  0019BC  0E00               	movlw	0
  5498  0019BE  0100               	movlb	0	; () banked
  5499  0019C0  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5500  0019C2  0E03               	movlw	3
  5501  0019C4  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5502  0019C6  0E00               	movlw	0
  5503  0019C8  0100               	movlb	0	; () banked
  5504  0019CA  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5505  0019CC  0E0A               	movlw	10
  5506  0019CE  6F88               	movwf	___awdiv@divisor& (0+255),b
  5507  0019D0  0E00               	movlw	0
  5508  0019D2  0100               	movlb	0	; () banked
  5509  0019D4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5510  0019D6  0E64               	movlw	100
  5511  0019D8  6F82               	movwf	___awmod@divisor& (0+255),b
  5512  0019DA  0100               	movlb	0	; () banked
  5513  0019DC  51B6               	movf	scale@scl& (0+255),w,b
  5514  0019DE  0100               	movlb	0	; () banked
  5515  0019E0  6F80               	movwf	___awmod@dividend& (0+255),b
  5516  0019E2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5517  0019E4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5518  0019E6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5519  0019E8  EC2A  F024         	call	___awmod	;wreg free
  5520  0019EC  C080  F086         	movff	?___awmod,___awdiv@dividend
  5521  0019F0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5522  0019F4  EC16  F023         	call	___awdiv	;wreg free
  5523  0019F8  0E09               	movlw	9
  5524  0019FA  0100               	movlb	0	; () banked
  5525  0019FC  2586               	addwf	?___awdiv& (0+255),w,b
  5526  0019FE  0100               	movlb	0	; () banked
  5527  001A00  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5528  001A02  0E00               	movlw	0
  5529  001A04  0100               	movlb	0	; () banked
  5530  001A06  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5531  001A08  0100               	movlb	0	; () banked
  5532  001A0A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5533  001A0C  ECF3  F028         	call	___wmul	;wreg free
  5534  001A10  0E80               	movlw	low __powers_
  5535  001A12  0100               	movlb	0	; () banked
  5536  001A14  258E               	addwf	?___wmul& (0+255),w,b
  5537  001A16  6EF6               	movwf	tblptrl,c
  5538  001A18  0EFE               	movlw	high __powers_
  5539  001A1A  0100               	movlb	0	; () banked
  5540  001A1C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5541  001A1E  6EF7               	movwf	tblptrh,c
  5542  001A20                     	if	0	;There are less than 3 active tblptr bytes
  5543  001A20                     	endif
  5544  001A20  0009               	tblrd		*+
  5545  001A22  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5546  001A26  0009               	tblrd		*+
  5547  001A28  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5548  001A2C  000A               	tblrd		*-
  5549  001A2E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5550  001A32  0E00               	movlw	0
  5551  001A34  0100               	movlb	0	; () banked
  5552  001A36  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5553  001A38  0E64               	movlw	100
  5554  001A3A  6F88               	movwf	___awdiv@divisor& (0+255),b
  5555  001A3C  0100               	movlb	0	; () banked
  5556  001A3E  51B6               	movf	scale@scl& (0+255),w,b
  5557  001A40  0100               	movlb	0	; () banked
  5558  001A42  6F86               	movwf	___awdiv@dividend& (0+255),b
  5559  001A44  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5560  001A46  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5561  001A48  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5562  001A4A  EC16  F023         	call	___awdiv	;wreg free
  5563  001A4E  0E12               	movlw	18
  5564  001A50  0100               	movlb	0	; () banked
  5565  001A52  2586               	addwf	?___awdiv& (0+255),w,b
  5566  001A54  0100               	movlb	0	; () banked
  5567  001A56  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5568  001A58  0E00               	movlw	0
  5569  001A5A  0100               	movlb	0	; () banked
  5570  001A5C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5571  001A5E  0100               	movlb	0	; () banked
  5572  001A60  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5573  001A62  0E00               	movlw	0
  5574  001A64  0100               	movlb	0	; () banked
  5575  001A66  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5576  001A68  0E03               	movlw	3
  5577  001A6A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5578  001A6C  ECF3  F028         	call	___wmul	;wreg free
  5579  001A70  0E80               	movlw	low __powers_
  5580  001A72  0100               	movlb	0	; () banked
  5581  001A74  258E               	addwf	?___wmul& (0+255),w,b
  5582  001A76  6EF6               	movwf	tblptrl,c
  5583  001A78  0EFE               	movlw	high __powers_
  5584  001A7A  0100               	movlb	0	; () banked
  5585  001A7C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5586  001A7E  6EF7               	movwf	tblptrh,c
  5587  001A80                     	if	0	;There are less than 3 active tblptr bytes
  5588  001A80                     	endif
  5589  001A80  0009               	tblrd		*+
  5590  001A82  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5591  001A86  0009               	tblrd		*+
  5592  001A88  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5593  001A8C  000A               	tblrd		*-
  5594  001A8E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5595  001A92  EC06  F01A         	call	___ftmul	;wreg free
  5596  001A96  C0A1  F0B3         	movff	?___ftmul,_scale$1338
  5597  001A9A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1338+1
  5598  001A9E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1338+2
  5599                           
  5600                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5601  001AA2  C0B3  F0A1         	movff	_scale$1338,___ftmul@f1
  5602  001AA6  C0B4  F0A2         	movff	_scale$1338+1,___ftmul@f1+1
  5603  001AAA  C0B5  F0A3         	movff	_scale$1338+2,___ftmul@f1+2
  5604  001AAE  0E00               	movlw	0
  5605  001AB0  0100               	movlb	0	; () banked
  5606  001AB2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5607  001AB4  0E03               	movlw	3
  5608  001AB6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5609  001AB8  0E00               	movlw	0
  5610  001ABA  0100               	movlb	0	; () banked
  5611  001ABC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5612  001ABE  0E0A               	movlw	10
  5613  001AC0  6F82               	movwf	___awmod@divisor& (0+255),b
  5614  001AC2  0100               	movlb	0	; () banked
  5615  001AC4  51B6               	movf	scale@scl& (0+255),w,b
  5616  001AC6  0100               	movlb	0	; () banked
  5617  001AC8  6F80               	movwf	___awmod@dividend& (0+255),b
  5618  001ACA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5619  001ACC  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5620  001ACE  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5621  001AD0  EC2A  F024         	call	___awmod	;wreg free
  5622  001AD4  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5623  001AD8  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5624  001ADC  ECF3  F028         	call	___wmul	;wreg free
  5625  001AE0  0E80               	movlw	low __powers_
  5626  001AE2  0100               	movlb	0	; () banked
  5627  001AE4  258E               	addwf	?___wmul& (0+255),w,b
  5628  001AE6  6EF6               	movwf	tblptrl,c
  5629  001AE8  0EFE               	movlw	high __powers_
  5630  001AEA  0100               	movlb	0	; () banked
  5631  001AEC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5632  001AEE  6EF7               	movwf	tblptrh,c
  5633  001AF0                     	if	0	;There are less than 3 active tblptr bytes
  5634  001AF0                     	endif
  5635  001AF0  0009               	tblrd		*+
  5636  001AF2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5637  001AF6  0009               	tblrd		*+
  5638  001AF8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5639  001AFC  000A               	tblrd		*-
  5640  001AFE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5641  001B02  EC06  F01A         	call	___ftmul	;wreg free
  5642  001B06  C0A1  F0B0         	movff	?___ftmul,?_scale
  5643  001B0A  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  5644  001B0E  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  5645  001B12  0012               	return	
  5646  001B14                     l4893:
  5647                           
  5648                           ;doprnt.c: 438: else if(scl > 10)
  5649  001B14  0100               	movlb	0	; () banked
  5650  001B16  51B6               	movf	scale@scl& (0+255),w,b
  5651  001B18  0A80               	xorlw	128
  5652  001B1A  0F75               	addlw	-139
  5653  001B1C  A0D8               	btfss	status,0,c
  5654  001B1E  D05D               	goto	l4899
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5658  001B20  0E00               	movlw	0
  5659  001B22  0100               	movlb	0	; () banked
  5660  001B24  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5661  001B26  0E0A               	movlw	10
  5662  001B28  6F88               	movwf	___awdiv@divisor& (0+255),b
  5663  001B2A  0100               	movlb	0	; () banked
  5664  001B2C  51B6               	movf	scale@scl& (0+255),w,b
  5665  001B2E  0100               	movlb	0	; () banked
  5666  001B30  6F86               	movwf	___awdiv@dividend& (0+255),b
  5667  001B32  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5668  001B34  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5669  001B36  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5670  001B38  EC16  F023         	call	___awdiv	;wreg free
  5671  001B3C  0E09               	movlw	9
  5672  001B3E  0100               	movlb	0	; () banked
  5673  001B40  2586               	addwf	?___awdiv& (0+255),w,b
  5674  001B42  0100               	movlb	0	; () banked
  5675  001B44  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5676  001B46  0E00               	movlw	0
  5677  001B48  0100               	movlb	0	; () banked
  5678  001B4A  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5679  001B4C  0100               	movlb	0	; () banked
  5680  001B4E  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5681  001B50  0E00               	movlw	0
  5682  001B52  0100               	movlb	0	; () banked
  5683  001B54  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5684  001B56  0E03               	movlw	3
  5685  001B58  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5686  001B5A  ECF3  F028         	call	___wmul	;wreg free
  5687  001B5E  0E80               	movlw	low __powers_
  5688  001B60  0100               	movlb	0	; () banked
  5689  001B62  258E               	addwf	?___wmul& (0+255),w,b
  5690  001B64  6EF6               	movwf	tblptrl,c
  5691  001B66  0EFE               	movlw	high __powers_
  5692  001B68  0100               	movlb	0	; () banked
  5693  001B6A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5694  001B6C  6EF7               	movwf	tblptrh,c
  5695  001B6E                     	if	0	;There are less than 3 active tblptr bytes
  5696  001B6E                     	endif
  5697  001B6E  0009               	tblrd		*+
  5698  001B70  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5699  001B74  0009               	tblrd		*+
  5700  001B76  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5701  001B7A  000A               	tblrd		*-
  5702  001B7C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5703  001B80  0E00               	movlw	0
  5704  001B82  0100               	movlb	0	; () banked
  5705  001B84  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5706  001B86  0E03               	movlw	3
  5707  001B88  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5708  001B8A  0E00               	movlw	0
  5709  001B8C  0100               	movlb	0	; () banked
  5710  001B8E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5711  001B90  0E0A               	movlw	10
  5712  001B92  6F82               	movwf	___awmod@divisor& (0+255),b
  5713  001B94  0100               	movlb	0	; () banked
  5714  001B96  51B6               	movf	scale@scl& (0+255),w,b
  5715  001B98  0100               	movlb	0	; () banked
  5716  001B9A  6F80               	movwf	___awmod@dividend& (0+255),b
  5717  001B9C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5718  001B9E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5719  001BA0  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5720  001BA2  EC2A  F024         	call	___awmod	;wreg free
  5721  001BA6  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5722  001BAA  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5723  001BAE  ECF3  F028         	call	___wmul	;wreg free
  5724  001BB2  0E80               	movlw	low __powers_
  5725  001BB4  0100               	movlb	0	; () banked
  5726  001BB6  258E               	addwf	?___wmul& (0+255),w,b
  5727  001BB8  6EF6               	movwf	tblptrl,c
  5728  001BBA  0EFE               	movlw	high __powers_
  5729  001BBC  0100               	movlb	0	; () banked
  5730  001BBE  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5731  001BC0  6EF7               	movwf	tblptrh,c
  5732  001BC2                     	if	0	;There are less than 3 active tblptr bytes
  5733  001BC2                     	endif
  5734  001BC2  0009               	tblrd		*+
  5735  001BC4  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5736  001BC8  0009               	tblrd		*+
  5737  001BCA  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5738  001BCE  000A               	tblrd		*-
  5739  001BD0  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5740  001BD4  EC06  F01A         	call	___ftmul	;wreg free
  5741  001BD8  D796               	goto	L5
  5742  001BDA                     l4899:
  5743                           
  5744                           ;doprnt.c: 440: return _powers_[scl];
  5745  001BDA  0100               	movlb	0	; () banked
  5746  001BDC  51B6               	movf	scale@scl& (0+255),w,b
  5747  001BDE  0D03               	mullw	3
  5748  001BE0  0E80               	movlw	low __powers_
  5749  001BE2  24F3               	addwf	prodl,w,c
  5750  001BE4  6EF6               	movwf	tblptrl,c
  5751  001BE6  0EFE               	movlw	high __powers_
  5752  001BE8  20F4               	addwfc	prodh,w,c
  5753  001BEA  6EF7               	movwf	tblptrh,c
  5754  001BEC                     	if	0	;There are less than 3 active tblptr bytes
  5755  001BEC                     	endif
  5756  001BEC  0009               	tblrd		*+
  5757  001BEE  CFF5 F0B0          	movff	tablat,?_scale
  5758  001BF2  0009               	tblrd		*+
  5759  001BF4  CFF5 F0B1          	movff	tablat,?_scale+1
  5760  001BF8  000A               	tblrd		*-
  5761  001BFA  CFF5 F0B2          	movff	tablat,?_scale+2
  5762  001BFE  0012               	return	
  5763  001C00                     __end_of_scale:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           postdec1	equ	0xFE5
  5774                           fsr1l	equ	0xFE1
  5775                           indf2	equ	0xFDF
  5776                           postinc2	equ	0xFDE
  5777                           postdec2	equ	0xFDD
  5778                           fsr2h	equ	0xFDA
  5779                           fsr2l	equ	0xFD9
  5780                           status	equ	0xFD8
  5781                           
  5782 ;; *************** function _putch *****************
  5783 ;; Defined at:
  5784 ;;		line 35 in file "lcd.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  data            1    wreg     unsigned char 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  data            1    4[BANK0 ] unsigned char 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      void 
  5791 ;; Registers used:
  5792 ;;		wreg, status,2, status,0, cstack
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;Total ram usage:        1 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:    9
  5805 ;; This function calls:
  5806 ;;		_lcdNewline
  5807 ;;		_lcdNibble
  5808 ;; This function is called by:
  5809 ;;		_printf
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text5
  5814  0052CA                     __ptext5:
  5815                           	opt stack 0
  5816  0052CA                     _putch:
  5817                           	opt stack 19
  5818                           
  5819                           ;incstack = 0
  5820                           ;putch@data stored from wreg
  5821  0052CA  0100               	movlb	0	; () banked
  5822  0052CC  6F84               	movwf	putch@data& (0+255),b
  5823                           
  5824                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5825  0052CE  0E0A               	movlw	10
  5826  0052D0  0100               	movlb	0	; () banked
  5827  0052D2  1984               	xorwf	putch@data& (0+255),w,b
  5828  0052D4  A4D8               	btfss	status,2,c
  5829  0052D6  D003               	goto	l191
  5830                           
  5831                           ; BSR set to: 0
  5832  0052D8  ECCF  F029         	call	_lcdNewline	;wreg free
  5833  0052DC  0012               	return	
  5834  0052DE                     l191:
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;lcd.c: 37: else
  5838                           ;lcd.c: 38: {
  5839                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5840  0052DE  848C               	bsf	3980,2,c	;volatile
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5844  0052E0  0E74               	movlw	116
  5845  0052E2                     u7927:
  5846  0052E2  2EE8               	decfsz	wreg,f,c
  5847  0052E4  D7FE               	bra	u7927
  5848  0052E6  D000               	nop2	
  5849                           
  5850                           ;lcd.c: 41: lcdNibble(data);
  5851  0052E8  0100               	movlb	0	; () banked
  5852  0052EA  5184               	movf	putch@data& (0+255),w,b
  5853  0052EC  EC67  F026         	call	_lcdNibble
  5854  0052F0  0012               	return	
  5855  0052F2                     __end_of_putch:
  5856                           	opt stack 0
  5857                           tblptru	equ	0xFF8
  5858                           tblptrh	equ	0xFF7
  5859                           tblptrl	equ	0xFF6
  5860                           tablat	equ	0xFF5
  5861                           prodh	equ	0xFF4
  5862                           prodl	equ	0xFF3
  5863                           postinc0	equ	0xFEE
  5864                           wreg	equ	0xFE8
  5865                           postdec1	equ	0xFE5
  5866                           fsr1l	equ	0xFE1
  5867                           indf2	equ	0xFDF
  5868                           postinc2	equ	0xFDE
  5869                           postdec2	equ	0xFDD
  5870                           fsr2h	equ	0xFDA
  5871                           fsr2l	equ	0xFD9
  5872                           status	equ	0xFD8
  5873                           
  5874 ;; *************** function _lcdNewline *****************
  5875 ;; Defined at:
  5876 ;;		line 78 in file "lcd.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;		None
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;		None
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  1    wreg      void 
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;Total ram usage:        0 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    8
  5897 ;; This function calls:
  5898 ;;		_lcdInst
  5899 ;; This function is called by:
  5900 ;;		_putch
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text6
  5905  00539E                     __ptext6:
  5906                           	opt stack 0
  5907  00539E                     _lcdNewline:
  5908                           	opt stack 19
  5909                           
  5910                           ;lcd.c: 79: lcdInst(0b11000000);
  5911                           
  5912                           ;incstack = 0
  5913  00539E  0EC0               	movlw	192
  5914  0053A0  EC50  F029         	call	_lcdInst
  5915  0053A4  0012               	return		;funcret
  5916  0053A6                     __end_of_lcdNewline:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           tblptrh	equ	0xFF7
  5920                           tblptrl	equ	0xFF6
  5921                           tablat	equ	0xFF5
  5922                           prodh	equ	0xFF4
  5923                           prodl	equ	0xFF3
  5924                           postinc0	equ	0xFEE
  5925                           wreg	equ	0xFE8
  5926                           postdec1	equ	0xFE5
  5927                           fsr1l	equ	0xFE1
  5928                           indf2	equ	0xFDF
  5929                           postinc2	equ	0xFDE
  5930                           postdec2	equ	0xFDD
  5931                           fsr2h	equ	0xFDA
  5932                           fsr2l	equ	0xFD9
  5933                           status	equ	0xFD8
  5934                           
  5935 ;; *************** function _isdigit *****************
  5936 ;; Defined at:
  5937 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  c               1    wreg     unsigned char 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  c               1    2[BANK0 ] unsigned char 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;		None               void
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;Total ram usage:        3 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    6
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_printf
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           	psect	text7
  5966  005276                     __ptext7:
  5967                           	opt stack 0
  5968  005276                     _isdigit:
  5969                           	opt stack 22
  5970                           
  5971                           ;incstack = 0
  5972                           ;isdigit@c stored from wreg
  5973  005276  0100               	movlb	0	; () banked
  5974  005278  6F82               	movwf	isdigit@c& (0+255),b
  5975  00527A  0E00               	movlw	0
  5976  00527C  0100               	movlb	0	; () banked
  5977  00527E  6F81               	movwf	_isdigit$962& (0+255),b
  5978                           
  5979                           ; BSR set to: 0
  5980  005280  0E3A               	movlw	58
  5981  005282  0100               	movlb	0	; () banked
  5982  005284  6182               	cpfslt	isdigit@c& (0+255),b
  5983  005286  D007               	goto	l4911
  5984                           
  5985                           ; BSR set to: 0
  5986  005288  0E2F               	movlw	47
  5987  00528A  0100               	movlb	0	; () banked
  5988  00528C  6582               	cpfsgt	isdigit@c& (0+255),b
  5989  00528E  D003               	goto	l4911
  5990                           
  5991                           ; BSR set to: 0
  5992  005290  0E01               	movlw	1
  5993  005292  0100               	movlb	0	; () banked
  5994  005294  6F81               	movwf	_isdigit$962& (0+255),b
  5995  005296                     l4911:
  5996                           
  5997                           ; BSR set to: 0
  5998  005296  C081  F080         	movff	_isdigit$962,??_isdigit
  5999  00529A  0100               	movlb	0	; () banked
  6000  00529C  3180               	rrcf	??_isdigit& (0+255),w,b
  6001  00529E  0012               	return	
  6002  0052A0                     __end_of_isdigit:
  6003                           	opt stack 0
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           postinc0	equ	0xFEE
  6011                           wreg	equ	0xFE8
  6012                           postdec1	equ	0xFE5
  6013                           fsr1l	equ	0xFE1
  6014                           indf2	equ	0xFDF
  6015                           postinc2	equ	0xFDE
  6016                           postdec2	equ	0xFDD
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021 ;; *************** function _fround *****************
  6022 ;; Defined at:
  6023 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  prec            1    wreg     unsigned char 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  prec            1   57[BANK0 ] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  3   48[BANK0 ] unsigned char 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6037 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6041 ;;Total ram usage:       10 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    8
  6044 ;; This function calls:
  6045 ;;		___awdiv
  6046 ;;		___awmod
  6047 ;;		___ftmul
  6048 ;;		___wmul
  6049 ;; This function is called by:
  6050 ;;		_printf
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           	psect	text8
  6055  00267A                     __ptext8:
  6056                           	opt stack 0
  6057  00267A                     _fround:
  6058                           	opt stack 20
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;incstack = 0
  6062                           ;fround@prec stored from wreg
  6063  00267A  0100               	movlb	0	; () banked
  6064  00267C  6FB9               	movwf	fround@prec& (0+255),b
  6065                           
  6066                           ;doprnt.c: 413: if(prec>=110)
  6067  00267E  0E6D               	movlw	109
  6068  002680  0100               	movlb	0	; () banked
  6069  002682  65B9               	cpfsgt	fround@prec& (0+255),b
  6070  002684  D0BA               	goto	l4853
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6074  002686  0E00               	movlw	0
  6075  002688  0100               	movlb	0	; () banked
  6076  00268A  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6077  00268C  0E03               	movlw	3
  6078  00268E  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6079  002690  0E00               	movlw	0
  6080  002692  0100               	movlb	0	; () banked
  6081  002694  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6082  002696  0E0A               	movlw	10
  6083  002698  6F88               	movwf	___awdiv@divisor& (0+255),b
  6084  00269A  0E00               	movlw	0
  6085  00269C  0100               	movlb	0	; () banked
  6086  00269E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6087  0026A0  0E64               	movlw	100
  6088  0026A2  6F82               	movwf	___awmod@divisor& (0+255),b
  6089  0026A4  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6090  0026A8  0100               	movlb	0	; () banked
  6091  0026AA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6092  0026AC  EC2A  F024         	call	___awmod	;wreg free
  6093  0026B0  C080  F086         	movff	?___awmod,___awdiv@dividend
  6094  0026B4  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6095  0026B8  EC16  F023         	call	___awdiv	;wreg free
  6096  0026BC  0E09               	movlw	9
  6097  0026BE  0100               	movlb	0	; () banked
  6098  0026C0  2586               	addwf	?___awdiv& (0+255),w,b
  6099  0026C2  0100               	movlb	0	; () banked
  6100  0026C4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6101  0026C6  0E00               	movlw	0
  6102  0026C8  0100               	movlb	0	; () banked
  6103  0026CA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6104  0026CC  0100               	movlb	0	; () banked
  6105  0026CE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6106  0026D0  ECF3  F028         	call	___wmul	;wreg free
  6107  0026D4  0E59               	movlw	low __npowers_
  6108  0026D6  0100               	movlb	0	; () banked
  6109  0026D8  258E               	addwf	?___wmul& (0+255),w,b
  6110  0026DA  6EF6               	movwf	tblptrl,c
  6111  0026DC  0EFE               	movlw	high __npowers_
  6112  0026DE  0100               	movlb	0	; () banked
  6113  0026E0  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6114  0026E2  6EF7               	movwf	tblptrh,c
  6115  0026E4                     	if	0	;There are less than 3 active tblptr bytes
  6116  0026E4                     	endif
  6117  0026E4  0009               	tblrd		*+
  6118  0026E6  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6119  0026EA  0009               	tblrd		*+
  6120  0026EC  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6121  0026F0  000A               	tblrd		*-
  6122  0026F2  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6123  0026F6  0E00               	movlw	0
  6124  0026F8  0100               	movlb	0	; () banked
  6125  0026FA  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6126  0026FC  0E64               	movlw	100
  6127  0026FE  6F88               	movwf	___awdiv@divisor& (0+255),b
  6128  002700  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  6129  002704  0100               	movlb	0	; () banked
  6130  002706  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6131  002708  EC16  F023         	call	___awdiv	;wreg free
  6132  00270C  0E12               	movlw	18
  6133  00270E  0100               	movlb	0	; () banked
  6134  002710  2586               	addwf	?___awdiv& (0+255),w,b
  6135  002712  0100               	movlb	0	; () banked
  6136  002714  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6137  002716  0E00               	movlw	0
  6138  002718  0100               	movlb	0	; () banked
  6139  00271A  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6140  00271C  0100               	movlb	0	; () banked
  6141  00271E  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6142  002720  0E00               	movlw	0
  6143  002722  0100               	movlb	0	; () banked
  6144  002724  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6145  002726  0E03               	movlw	3
  6146  002728  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6147  00272A  ECF3  F028         	call	___wmul	;wreg free
  6148  00272E  0E59               	movlw	low __npowers_
  6149  002730  0100               	movlb	0	; () banked
  6150  002732  258E               	addwf	?___wmul& (0+255),w,b
  6151  002734  6EF6               	movwf	tblptrl,c
  6152  002736  0EFE               	movlw	high __npowers_
  6153  002738  0100               	movlb	0	; () banked
  6154  00273A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6155  00273C  6EF7               	movwf	tblptrh,c
  6156  00273E                     	if	0	;There are less than 3 active tblptr bytes
  6157  00273E                     	endif
  6158  00273E  0009               	tblrd		*+
  6159  002740  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6160  002744  0009               	tblrd		*+
  6161  002746  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6162  00274A  000A               	tblrd		*-
  6163  00274C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6164  002750  EC06  F01A         	call	___ftmul	;wreg free
  6165  002754  C0A1  F0B6         	movff	?___ftmul,_fround$1336
  6166  002758  C0A2  F0B7         	movff	?___ftmul+1,_fround$1336+1
  6167  00275C  C0A3  F0B8         	movff	?___ftmul+2,_fround$1336+2
  6168                           
  6169                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6170  002760  0E00               	movlw	0
  6171  002762  0100               	movlb	0	; () banked
  6172  002764  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6173  002766  0E03               	movlw	3
  6174  002768  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6175  00276A  0E00               	movlw	0
  6176  00276C  0100               	movlb	0	; () banked
  6177  00276E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6178  002770  0E0A               	movlw	10
  6179  002772  6F82               	movwf	___awmod@divisor& (0+255),b
  6180  002774  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6181  002778  0100               	movlb	0	; () banked
  6182  00277A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6183  00277C  EC2A  F024         	call	___awmod	;wreg free
  6184  002780  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6185  002784  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6186  002788  ECF3  F028         	call	___wmul	;wreg free
  6187  00278C  0E59               	movlw	low __npowers_
  6188  00278E  0100               	movlb	0	; () banked
  6189  002790  258E               	addwf	?___wmul& (0+255),w,b
  6190  002792  6EF6               	movwf	tblptrl,c
  6191  002794  0EFE               	movlw	high __npowers_
  6192  002796  0100               	movlb	0	; () banked
  6193  002798  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6194  00279A  6EF7               	movwf	tblptrh,c
  6195  00279C                     	if	0	;There are less than 3 active tblptr bytes
  6196  00279C                     	endif
  6197  00279C  0009               	tblrd		*+
  6198  00279E  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6199  0027A2  0009               	tblrd		*+
  6200  0027A4  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6201  0027A8  000A               	tblrd		*-
  6202  0027AA  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6203  0027AE  C0B6  F0A1         	movff	_fround$1336,___ftmul@f1
  6204  0027B2  C0B7  F0A2         	movff	_fround$1336+1,___ftmul@f1+1
  6205  0027B6  C0B8  F0A3         	movff	_fround$1336+2,___ftmul@f1+2
  6206  0027BA  EC06  F01A         	call	___ftmul	;wreg free
  6207  0027BE  C0A1  F0B3         	movff	?___ftmul,_fround$1337
  6208  0027C2  C0A2  F0B4         	movff	?___ftmul+1,_fround$1337+1
  6209  0027C6  C0A3  F0B5         	movff	?___ftmul+2,_fround$1337+2
  6210                           
  6211                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6212  0027CA  C0B3  F0A1         	movff	_fround$1337,___ftmul@f1
  6213  0027CE  C0B4  F0A2         	movff	_fround$1337+1,___ftmul@f1+1
  6214  0027D2  C0B5  F0A3         	movff	_fround$1337+2,___ftmul@f1+2
  6215  0027D6  0E00               	movlw	0
  6216  0027D8  0100               	movlb	0	; () banked
  6217  0027DA  6FA4               	movwf	___ftmul@f2& (0+255),b
  6218  0027DC  0E00               	movlw	0
  6219  0027DE  0100               	movlb	0	; () banked
  6220  0027E0  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6221  0027E2  0E3F               	movlw	63
  6222  0027E4  0100               	movlb	0	; () banked
  6223  0027E6  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6224  0027E8  EC06  F01A         	call	___ftmul	;wreg free
  6225  0027EC  C0A1  F0B0         	movff	?___ftmul,?_fround
  6226  0027F0  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  6227  0027F4  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  6228  0027F8  0012               	return	
  6229  0027FA                     l4853:
  6230                           
  6231                           ;doprnt.c: 415: else if(prec > 10)
  6232  0027FA  0E0A               	movlw	10
  6233  0027FC  0100               	movlb	0	; () banked
  6234  0027FE  65B9               	cpfsgt	fround@prec& (0+255),b
  6235  002800  D06E               	goto	l4861
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6239  002802  0E00               	movlw	0
  6240  002804  0100               	movlb	0	; () banked
  6241  002806  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6242  002808  0E03               	movlw	3
  6243  00280A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6244  00280C  0E00               	movlw	0
  6245  00280E  0100               	movlb	0	; () banked
  6246  002810  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6247  002812  0E0A               	movlw	10
  6248  002814  6F82               	movwf	___awmod@divisor& (0+255),b
  6249  002816  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6250  00281A  0100               	movlb	0	; () banked
  6251  00281C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6252  00281E  EC2A  F024         	call	___awmod	;wreg free
  6253  002822  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6254  002826  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6255  00282A  ECF3  F028         	call	___wmul	;wreg free
  6256  00282E  0E59               	movlw	low __npowers_
  6257  002830  0100               	movlb	0	; () banked
  6258  002832  258E               	addwf	?___wmul& (0+255),w,b
  6259  002834  6EF6               	movwf	tblptrl,c
  6260  002836  0EFE               	movlw	high __npowers_
  6261  002838  0100               	movlb	0	; () banked
  6262  00283A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6263  00283C  6EF7               	movwf	tblptrh,c
  6264  00283E                     	if	0	;There are less than 3 active tblptr bytes
  6265  00283E                     	endif
  6266  00283E  0009               	tblrd		*+
  6267  002840  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6268  002844  0009               	tblrd		*+
  6269  002846  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6270  00284A  000A               	tblrd		*-
  6271  00284C  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6272  002850  0E00               	movlw	0
  6273  002852  0100               	movlb	0	; () banked
  6274  002854  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6275  002856  0E0A               	movlw	10
  6276  002858  6F88               	movwf	___awdiv@divisor& (0+255),b
  6277  00285A  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  6278  00285E  0100               	movlb	0	; () banked
  6279  002860  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6280  002862  EC16  F023         	call	___awdiv	;wreg free
  6281  002866  0E09               	movlw	9
  6282  002868  0100               	movlb	0	; () banked
  6283  00286A  2586               	addwf	?___awdiv& (0+255),w,b
  6284  00286C  0100               	movlb	0	; () banked
  6285  00286E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6286  002870  0E00               	movlw	0
  6287  002872  0100               	movlb	0	; () banked
  6288  002874  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6289  002876  0100               	movlb	0	; () banked
  6290  002878  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6291  00287A  0E00               	movlw	0
  6292  00287C  0100               	movlb	0	; () banked
  6293  00287E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6294  002880  0E03               	movlw	3
  6295  002882  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6296  002884  ECF3  F028         	call	___wmul	;wreg free
  6297  002888  0E59               	movlw	low __npowers_
  6298  00288A  0100               	movlb	0	; () banked
  6299  00288C  258E               	addwf	?___wmul& (0+255),w,b
  6300  00288E  6EF6               	movwf	tblptrl,c
  6301  002890  0EFE               	movlw	high __npowers_
  6302  002892  0100               	movlb	0	; () banked
  6303  002894  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6304  002896  6EF7               	movwf	tblptrh,c
  6305  002898                     	if	0	;There are less than 3 active tblptr bytes
  6306  002898                     	endif
  6307  002898  0009               	tblrd		*+
  6308  00289A  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6309  00289E  0009               	tblrd		*+
  6310  0028A0  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6311  0028A4  000A               	tblrd		*-
  6312  0028A6  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6313  0028AA  EC06  F01A         	call	___ftmul	;wreg free
  6314  0028AE  C0A1  F0B6         	movff	?___ftmul,_fround$1336
  6315  0028B2  C0A2  F0B7         	movff	?___ftmul+1,_fround$1336+1
  6316  0028B6  C0A3  F0B8         	movff	?___ftmul+2,_fround$1336+2
  6317                           
  6318                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6319  0028BA  C0B6  F0A1         	movff	_fround$1336,___ftmul@f1
  6320  0028BE  C0B7  F0A2         	movff	_fround$1336+1,___ftmul@f1+1
  6321  0028C2  C0B8  F0A3         	movff	_fround$1336+2,___ftmul@f1+2
  6322  0028C6  0E00               	movlw	0
  6323  0028C8  0100               	movlb	0	; () banked
  6324  0028CA  6FA4               	movwf	___ftmul@f2& (0+255),b
  6325  0028CC  0E00               	movlw	0
  6326  0028CE  0100               	movlb	0	; () banked
  6327  0028D0  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6328  0028D2  0E3F               	movlw	63
  6329  0028D4  0100               	movlb	0	; () banked
  6330  0028D6  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6331  0028D8  EC06  F01A         	call	___ftmul	;wreg free
  6332  0028DC  D787               	goto	L6
  6333  0028DE                     l4861:
  6334                           
  6335                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6336  0028DE  0100               	movlb	0	; () banked
  6337  0028E0  51B9               	movf	fround@prec& (0+255),w,b
  6338  0028E2  0D03               	mullw	3
  6339  0028E4  0E59               	movlw	low __npowers_
  6340  0028E6  24F3               	addwf	prodl,w,c
  6341  0028E8  6EF6               	movwf	tblptrl,c
  6342  0028EA  0EFE               	movlw	high __npowers_
  6343  0028EC  20F4               	addwfc	prodh,w,c
  6344  0028EE  6EF7               	movwf	tblptrh,c
  6345  0028F0                     	if	0	;There are less than 3 active tblptr bytes
  6346  0028F0                     	endif
  6347  0028F0  0009               	tblrd		*+
  6348  0028F2  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6349  0028F6  0009               	tblrd		*+
  6350  0028F8  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6351  0028FC  000A               	tblrd		*-
  6352  0028FE  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6353  002902  0E00               	movlw	0
  6354  002904  0100               	movlb	0	; () banked
  6355  002906  6FA4               	movwf	___ftmul@f2& (0+255),b
  6356  002908  0E00               	movlw	0
  6357  00290A  0100               	movlb	0	; () banked
  6358  00290C  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6359  00290E  0E3F               	movlw	63
  6360  002910  0100               	movlb	0	; () banked
  6361  002912  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6362  002914  EC06  F01A         	call	___ftmul	;wreg free
  6363  002918  C0A1  F0B0         	movff	?___ftmul,?_fround
  6364  00291C  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  6365  002920  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  6366  002924  0012               	return	
  6367  002926                     __end_of_fround:
  6368                           	opt stack 0
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           postinc0	equ	0xFEE
  6376                           wreg	equ	0xFE8
  6377                           postdec1	equ	0xFE5
  6378                           fsr1l	equ	0xFE1
  6379                           indf2	equ	0xFDF
  6380                           postinc2	equ	0xFDE
  6381                           postdec2	equ	0xFDD
  6382                           fsr2h	equ	0xFDA
  6383                           fsr2l	equ	0xFD9
  6384                           status	equ	0xFD8
  6385                           
  6386 ;; *************** function ___wmul *****************
  6387 ;; Defined at:
  6388 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;  multiplier      2   14[BANK0 ] unsigned int 
  6391 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  product         2   18[BANK0 ] unsigned int 
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  2   14[BANK0 ] unsigned int 
  6396 ;; Registers used:
  6397 ;;		wreg, status,2, status,0, prodl, prodh
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6403 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;Total ram usage:        6 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    6
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_fround
  6414 ;;		_scale
  6415 ;;		_printf
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text9
  6420  0051E6                     __ptext9:
  6421                           	opt stack 0
  6422  0051E6                     ___wmul:
  6423                           	opt stack 21
  6424                           
  6425                           ;incstack = 0
  6426  0051E6  0100               	movlb	0	; () banked
  6427  0051E8  518E               	movf	___wmul@multiplier& (0+255),w,b
  6428  0051EA  0100               	movlb	0	; () banked
  6429  0051EC  0390               	mulwf	___wmul@multiplicand& (0+255),b
  6430  0051EE  CFF3 F092          	movff	prodl,___wmul@product
  6431  0051F2  CFF4 F093          	movff	prodh,___wmul@product+1
  6432  0051F6  0100               	movlb	0	; () banked
  6433  0051F8  518E               	movf	___wmul@multiplier& (0+255),w,b
  6434  0051FA  0100               	movlb	0	; () banked
  6435  0051FC  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6436  0051FE  50F3               	movf	prodl,w,c
  6437  005200  0100               	movlb	0	; () banked
  6438  005202  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  6439  005204  0100               	movlb	0	; () banked
  6440  005206  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6441  005208  0100               	movlb	0	; () banked
  6442  00520A  0390               	mulwf	___wmul@multiplicand& (0+255),b
  6443  00520C  50F3               	movf	prodl,w,c
  6444  00520E  0100               	movlb	0	; () banked
  6445  005210  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  6446                           
  6447                           ; BSR set to: 0
  6448  005212  C092  F08E         	movff	___wmul@product,?___wmul
  6449  005216  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  6450  00521A  0012               	return	
  6451  00521C                     __end_of___wmul:
  6452                           	opt stack 0
  6453                           tblptru	equ	0xFF8
  6454                           tblptrh	equ	0xFF7
  6455                           tblptrl	equ	0xFF6
  6456                           tablat	equ	0xFF5
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           postinc0	equ	0xFEE
  6460                           wreg	equ	0xFE8
  6461                           postdec1	equ	0xFE5
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           postdec2	equ	0xFDD
  6466                           fsr2h	equ	0xFDA
  6467                           fsr2l	equ	0xFD9
  6468                           status	equ	0xFD8
  6469                           
  6470 ;; *************** function ___awmod *****************
  6471 ;; Defined at:
  6472 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  dividend        2    0[BANK0 ] int 
  6475 ;;  divisor         2    2[BANK0 ] int 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  sign            1    5[BANK0 ] unsigned char 
  6478 ;;  counter         1    4[BANK0 ] unsigned char 
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  2    0[BANK0 ] int 
  6481 ;; Registers used:
  6482 ;;		wreg, status,2, status,0
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6488 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;Total ram usage:        6 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    6
  6495 ;; This function calls:
  6496 ;;		Nothing
  6497 ;; This function is called by:
  6498 ;;		_fround
  6499 ;;		_scale
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           	psect	text10
  6504  004854                     __ptext10:
  6505                           	opt stack 0
  6506  004854                     ___awmod:
  6507                           	opt stack 21
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;incstack = 0
  6511  004854  0E00               	movlw	0
  6512  004856  0100               	movlb	0	; () banked
  6513  004858  6F85               	movwf	___awmod@sign& (0+255),b
  6514                           
  6515                           ; BSR set to: 0
  6516  00485A  0100               	movlb	0	; () banked
  6517  00485C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6518  00485E  D008               	goto	l4697
  6519                           
  6520                           ; BSR set to: 0
  6521  004860  0100               	movlb	0	; () banked
  6522  004862  6D80               	negf	___awmod@dividend& (0+255),b
  6523  004864  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6524  004866  B0D8               	btfsc	status,0,c
  6525  004868  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6526                           
  6527                           ; BSR set to: 0
  6528  00486A  0E01               	movlw	1
  6529  00486C  0100               	movlb	0	; () banked
  6530  00486E  6F85               	movwf	___awmod@sign& (0+255),b
  6531  004870                     l4697:
  6532                           
  6533                           ; BSR set to: 0
  6534  004870  0100               	movlb	0	; () banked
  6535  004872  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6536  004874  D005               	goto	l4701
  6537                           
  6538                           ; BSR set to: 0
  6539  004876  0100               	movlb	0	; () banked
  6540  004878  6D82               	negf	___awmod@divisor& (0+255),b
  6541  00487A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  6542  00487C  B0D8               	btfsc	status,0,c
  6543  00487E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  6544  004880                     l4701:
  6545                           
  6546                           ; BSR set to: 0
  6547  004880  0100               	movlb	0	; () banked
  6548  004882  5182               	movf	___awmod@divisor& (0+255),w,b
  6549  004884  0100               	movlb	0	; () banked
  6550  004886  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6551  004888  B4D8               	btfsc	status,2,c
  6552  00488A  D026               	goto	l4717
  6553                           
  6554                           ; BSR set to: 0
  6555  00488C  0E01               	movlw	1
  6556  00488E  0100               	movlb	0	; () banked
  6557  004890  6F84               	movwf	___awmod@counter& (0+255),b
  6558  004892  D006               	goto	l4707
  6559  004894                     l4705:
  6560                           
  6561                           ; BSR set to: 0
  6562  004894  0100               	movlb	0	; () banked
  6563  004896  90D8               	bcf	status,0,c
  6564  004898  3782               	rlcf	___awmod@divisor& (0+255),f,b
  6565  00489A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6566  00489C  0100               	movlb	0	; () banked
  6567  00489E  2B84               	incf	___awmod@counter& (0+255),f,b
  6568  0048A0                     l4707:
  6569                           
  6570                           ; BSR set to: 0
  6571  0048A0  0100               	movlb	0	; () banked
  6572  0048A2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6573  0048A4  D7F7               	goto	l4705
  6574  0048A6                     l4709:
  6575                           
  6576                           ; BSR set to: 0
  6577  0048A6  0100               	movlb	0	; () banked
  6578  0048A8  5182               	movf	___awmod@divisor& (0+255),w,b
  6579  0048AA  0100               	movlb	0	; () banked
  6580  0048AC  5D80               	subwf	___awmod@dividend& (0+255),w,b
  6581  0048AE  0100               	movlb	0	; () banked
  6582  0048B0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6583  0048B2  0100               	movlb	0	; () banked
  6584  0048B4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6585  0048B6  A0D8               	btfss	status,0,c
  6586  0048B8  D008               	goto	l4713
  6587                           
  6588                           ; BSR set to: 0
  6589  0048BA  0100               	movlb	0	; () banked
  6590  0048BC  5182               	movf	___awmod@divisor& (0+255),w,b
  6591  0048BE  0100               	movlb	0	; () banked
  6592  0048C0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  6593  0048C2  0100               	movlb	0	; () banked
  6594  0048C4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6595  0048C6  0100               	movlb	0	; () banked
  6596  0048C8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6597  0048CA                     l4713:
  6598                           
  6599                           ; BSR set to: 0
  6600  0048CA  0100               	movlb	0	; () banked
  6601  0048CC  90D8               	bcf	status,0,c
  6602  0048CE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6603  0048D0  3382               	rrcf	___awmod@divisor& (0+255),f,b
  6604                           
  6605                           ; BSR set to: 0
  6606  0048D2  0100               	movlb	0	; () banked
  6607  0048D4  2F84               	decfsz	___awmod@counter& (0+255),f,b
  6608  0048D6  D7E7               	goto	l4709
  6609  0048D8                     l4717:
  6610                           
  6611                           ; BSR set to: 0
  6612  0048D8  0100               	movlb	0	; () banked
  6613  0048DA  5185               	movf	___awmod@sign& (0+255),w,b
  6614  0048DC  0100               	movlb	0	; () banked
  6615  0048DE  B4D8               	btfsc	status,2,c
  6616  0048E0  D005               	goto	l4721
  6617                           
  6618                           ; BSR set to: 0
  6619  0048E2  0100               	movlb	0	; () banked
  6620  0048E4  6D80               	negf	___awmod@dividend& (0+255),b
  6621  0048E6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6622  0048E8  B0D8               	btfsc	status,0,c
  6623  0048EA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6624  0048EC                     l4721:
  6625                           
  6626                           ; BSR set to: 0
  6627  0048EC  C080  F080         	movff	___awmod@dividend,?___awmod
  6628  0048F0  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  6629  0048F4  0012               	return	
  6630  0048F6                     __end_of___awmod:
  6631                           	opt stack 0
  6632                           tblptru	equ	0xFF8
  6633                           tblptrh	equ	0xFF7
  6634                           tblptrl	equ	0xFF6
  6635                           tablat	equ	0xFF5
  6636                           prodh	equ	0xFF4
  6637                           prodl	equ	0xFF3
  6638                           postinc0	equ	0xFEE
  6639                           wreg	equ	0xFE8
  6640                           postdec1	equ	0xFE5
  6641                           fsr1l	equ	0xFE1
  6642                           indf2	equ	0xFDF
  6643                           postinc2	equ	0xFDE
  6644                           postdec2	equ	0xFDD
  6645                           fsr2h	equ	0xFDA
  6646                           fsr2l	equ	0xFD9
  6647                           status	equ	0xFD8
  6648                           
  6649 ;; *************** function ___awdiv *****************
  6650 ;; Defined at:
  6651 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  dividend        2    6[BANK0 ] int 
  6654 ;;  divisor         2    8[BANK0 ] int 
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;  quotient        2   12[BANK0 ] int 
  6657 ;;  sign            1   11[BANK0 ] unsigned char 
  6658 ;;  counter         1   10[BANK0 ] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  2    6[BANK0 ] int 
  6661 ;; Registers used:
  6662 ;;		wreg, status,2, status,0
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;Total ram usage:        8 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    6
  6675 ;; This function calls:
  6676 ;;		Nothing
  6677 ;; This function is called by:
  6678 ;;		_fround
  6679 ;;		_scale
  6680 ;;		_printf
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text11
  6685  00462C                     __ptext11:
  6686                           	opt stack 0
  6687  00462C                     ___awdiv:
  6688                           	opt stack 21
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;incstack = 0
  6692  00462C  0E00               	movlw	0
  6693  00462E  0100               	movlb	0	; () banked
  6694  004630  6F8B               	movwf	___awdiv@sign& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697  004632  0100               	movlb	0	; () banked
  6698  004634  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6699  004636  D008               	goto	l4653
  6700                           
  6701                           ; BSR set to: 0
  6702  004638  0100               	movlb	0	; () banked
  6703  00463A  6D88               	negf	___awdiv@divisor& (0+255),b
  6704  00463C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6705  00463E  B0D8               	btfsc	status,0,c
  6706  004640  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6707                           
  6708                           ; BSR set to: 0
  6709  004642  0E01               	movlw	1
  6710  004644  0100               	movlb	0	; () banked
  6711  004646  6F8B               	movwf	___awdiv@sign& (0+255),b
  6712  004648                     l4653:
  6713                           
  6714                           ; BSR set to: 0
  6715  004648  0100               	movlb	0	; () banked
  6716  00464A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6717  00464C  D008               	goto	l4659
  6718                           
  6719                           ; BSR set to: 0
  6720  00464E  0100               	movlb	0	; () banked
  6721  004650  6D86               	negf	___awdiv@dividend& (0+255),b
  6722  004652  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6723  004654  B0D8               	btfsc	status,0,c
  6724  004656  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6725                           
  6726                           ; BSR set to: 0
  6727  004658  0E01               	movlw	1
  6728  00465A  0100               	movlb	0	; () banked
  6729  00465C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  6730  00465E                     l4659:
  6731                           
  6732                           ; BSR set to: 0
  6733  00465E  0E00               	movlw	0
  6734  004660  0100               	movlb	0	; () banked
  6735  004662  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  6736  004664  0E00               	movlw	0
  6737  004666  6F8C               	movwf	___awdiv@quotient& (0+255),b
  6738                           
  6739                           ; BSR set to: 0
  6740  004668  0100               	movlb	0	; () banked
  6741  00466A  5188               	movf	___awdiv@divisor& (0+255),w,b
  6742  00466C  0100               	movlb	0	; () banked
  6743  00466E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6744  004670  B4D8               	btfsc	status,2,c
  6745  004672  D02C               	goto	l4681
  6746                           
  6747                           ; BSR set to: 0
  6748  004674  0E01               	movlw	1
  6749  004676  0100               	movlb	0	; () banked
  6750  004678  6F8A               	movwf	___awdiv@counter& (0+255),b
  6751  00467A  D006               	goto	l4667
  6752  00467C                     l4665:
  6753                           
  6754                           ; BSR set to: 0
  6755  00467C  0100               	movlb	0	; () banked
  6756  00467E  90D8               	bcf	status,0,c
  6757  004680  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  6758  004682  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6759  004684  0100               	movlb	0	; () banked
  6760  004686  2B8A               	incf	___awdiv@counter& (0+255),f,b
  6761  004688                     l4667:
  6762                           
  6763                           ; BSR set to: 0
  6764  004688  0100               	movlb	0	; () banked
  6765  00468A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6766  00468C  D7F7               	goto	l4665
  6767  00468E                     l4669:
  6768                           
  6769                           ; BSR set to: 0
  6770  00468E  0100               	movlb	0	; () banked
  6771  004690  90D8               	bcf	status,0,c
  6772  004692  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  6773  004694  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6774                           
  6775                           ; BSR set to: 0
  6776  004696  0100               	movlb	0	; () banked
  6777  004698  5188               	movf	___awdiv@divisor& (0+255),w,b
  6778  00469A  0100               	movlb	0	; () banked
  6779  00469C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  6780  00469E  0100               	movlb	0	; () banked
  6781  0046A0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6782  0046A2  0100               	movlb	0	; () banked
  6783  0046A4  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6784  0046A6  A0D8               	btfss	status,0,c
  6785  0046A8  D00A               	goto	l4677
  6786                           
  6787                           ; BSR set to: 0
  6788  0046AA  0100               	movlb	0	; () banked
  6789  0046AC  5188               	movf	___awdiv@divisor& (0+255),w,b
  6790  0046AE  0100               	movlb	0	; () banked
  6791  0046B0  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  6792  0046B2  0100               	movlb	0	; () banked
  6793  0046B4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6794  0046B6  0100               	movlb	0	; () banked
  6795  0046B8  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6796                           
  6797                           ; BSR set to: 0
  6798  0046BA  0100               	movlb	0	; () banked
  6799  0046BC  818C               	bsf	___awdiv@quotient& (0+255),0,b
  6800  0046BE                     l4677:
  6801                           
  6802                           ; BSR set to: 0
  6803  0046BE  0100               	movlb	0	; () banked
  6804  0046C0  90D8               	bcf	status,0,c
  6805  0046C2  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6806  0046C4  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  6807                           
  6808                           ; BSR set to: 0
  6809  0046C6  0100               	movlb	0	; () banked
  6810  0046C8  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  6811  0046CA  D7E1               	goto	l4669
  6812  0046CC                     l4681:
  6813                           
  6814                           ; BSR set to: 0
  6815  0046CC  0100               	movlb	0	; () banked
  6816  0046CE  518B               	movf	___awdiv@sign& (0+255),w,b
  6817  0046D0  0100               	movlb	0	; () banked
  6818  0046D2  B4D8               	btfsc	status,2,c
  6819  0046D4  D005               	goto	l4685
  6820                           
  6821                           ; BSR set to: 0
  6822  0046D6  0100               	movlb	0	; () banked
  6823  0046D8  6D8C               	negf	___awdiv@quotient& (0+255),b
  6824  0046DA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6825  0046DC  B0D8               	btfsc	status,0,c
  6826  0046DE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6827  0046E0                     l4685:
  6828                           
  6829                           ; BSR set to: 0
  6830  0046E0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  6831  0046E4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  6832  0046E8  0012               	return	
  6833  0046EA                     __end_of___awdiv:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           postinc0	equ	0xFEE
  6842                           wreg	equ	0xFE8
  6843                           postdec1	equ	0xFE5
  6844                           fsr1l	equ	0xFE1
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function __tdiv_to_l_ *****************
  6853 ;; Defined at:
  6854 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  f1              3    0[BANK0 ] float 
  6857 ;;  f2              3    3[BANK0 ] float 
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  quot            4    9[BANK0 ] unsigned long 
  6860 ;;  exp1            1   14[BANK0 ] unsigned char 
  6861 ;;  cntr            1   13[BANK0 ] unsigned char 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  4    0[BANK0 ] unsigned long 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2, status,0
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6871 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;Total ram usage:       15 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    6
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_printf
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           	psect	text12
  6886  002F80                     __ptext12:
  6887                           	opt stack 0
  6888  002F80                     __tdiv_to_l_:
  6889                           	opt stack 22
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;incstack = 0
  6893  002F80  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6894  002F84  0100               	movlb	0	; () banked
  6895  002F86  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6896  002F88  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6897  002F8A  0100               	movlb	0	; () banked
  6898  002F8C  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6899  002F8E  0100               	movlb	0	; () banked
  6900  002F90  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6901  002F92  E301               	bnc	u4841
  6902  002F94  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6903  002F96                     u4841:
  6904  002F96  0100               	movlb	0	; () banked
  6905  002F98  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6906  002F9A  0100               	movlb	0	; () banked
  6907  002F9C  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6908  002F9E  0100               	movlb	0	; () banked
  6909  002FA0  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6910  002FA2  A4D8               	btfss	status,2,c
  6911  002FA4  D00A               	goto	l4921
  6912                           
  6913                           ; BSR set to: 0
  6914  002FA6  0E00               	movlw	0
  6915  002FA8  0100               	movlb	0	; () banked
  6916  002FAA  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6917  002FAC  0E00               	movlw	0
  6918  002FAE  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6919  002FB0  0E00               	movlw	0
  6920  002FB2  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6921  002FB4  0E00               	movlw	0
  6922  002FB6  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6923                           
  6924                           ; BSR set to: 0
  6925  002FB8  0012               	return	
  6926  002FBA                     l4921:
  6927                           
  6928                           ; BSR set to: 0
  6929  002FBA  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6930  002FBE  0100               	movlb	0	; () banked
  6931  002FC0  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6932  002FC2  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6933  002FC4  0100               	movlb	0	; () banked
  6934  002FC6  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6935  002FC8  0100               	movlb	0	; () banked
  6936  002FCA  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6937  002FCC  E301               	bnc	u4861
  6938  002FCE  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6939  002FD0                     u4861:
  6940  002FD0  0100               	movlb	0	; () banked
  6941  002FD2  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6942  002FD4  0100               	movlb	0	; () banked
  6943  002FD6  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6944  002FD8  0100               	movlb	0	; () banked
  6945  002FDA  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6946  002FDC  A4D8               	btfss	status,2,c
  6947  002FDE  D00A               	goto	l4927
  6948                           
  6949                           ; BSR set to: 0
  6950  002FE0  0E00               	movlw	0
  6951  002FE2  0100               	movlb	0	; () banked
  6952  002FE4  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6953  002FE6  0E00               	movlw	0
  6954  002FE8  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6955  002FEA  0E00               	movlw	0
  6956  002FEC  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6957  002FEE  0E00               	movlw	0
  6958  002FF0  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6959                           
  6960                           ; BSR set to: 0
  6961  002FF2  0012               	return	
  6962  002FF4                     l4927:
  6963                           
  6964                           ; BSR set to: 0
  6965  002FF4  0100               	movlb	0	; () banked
  6966  002FF6  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6967                           
  6968                           ; BSR set to: 0
  6969  002FF8  0EFF               	movlw	255
  6970  002FFA  0100               	movlb	0	; () banked
  6971  002FFC  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6972  002FFE  0EFF               	movlw	255
  6973  003000  0100               	movlb	0	; () banked
  6974  003002  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6975  003004  0E00               	movlw	0
  6976  003006  0100               	movlb	0	; () banked
  6977  003008  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6978  00300A  0100               	movlb	0	; () banked
  6979  00300C  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6980                           
  6981                           ; BSR set to: 0
  6982  00300E  0EFF               	movlw	255
  6983  003010  0100               	movlb	0	; () banked
  6984  003012  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6985  003014  0EFF               	movlw	255
  6986  003016  0100               	movlb	0	; () banked
  6987  003018  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6988  00301A  0E00               	movlw	0
  6989  00301C  0100               	movlb	0	; () banked
  6990  00301E  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6991                           
  6992                           ; BSR set to: 0
  6993  003020  0E00               	movlw	0
  6994  003022  0100               	movlb	0	; () banked
  6995  003024  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  6996  003026  0E00               	movlw	0
  6997  003028  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6998  00302A  0E00               	movlw	0
  6999  00302C  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  7000  00302E  0E00               	movlw	0
  7001  003030  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  7002                           
  7003                           ; BSR set to: 0
  7004  003032  0E7F               	movlw	127
  7005  003034  0100               	movlb	0	; () banked
  7006  003036  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  7007                           
  7008                           ; BSR set to: 0
  7009  003038  0100               	movlb	0	; () banked
  7010  00303A  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  7011  00303C  0F98               	addlw	152
  7012  00303E  0100               	movlb	0	; () banked
  7013  003040  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  7014                           
  7015                           ; BSR set to: 0
  7016  003042  0E18               	movlw	24
  7017  003044  0100               	movlb	0	; () banked
  7018  003046  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  7019  003048                     l1093:
  7020                           
  7021                           ; BSR set to: 0
  7022  003048  0100               	movlb	0	; () banked
  7023  00304A  90D8               	bcf	status,0,c
  7024  00304C  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  7025  00304E  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  7026  003050  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  7027  003052  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  7028                           
  7029                           ; BSR set to: 0
  7030  003054  0100               	movlb	0	; () banked
  7031  003056  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  7032  003058  0100               	movlb	0	; () banked
  7033  00305A  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  7034  00305C  0100               	movlb	0	; () banked
  7035  00305E  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  7036  003060  0100               	movlb	0	; () banked
  7037  003062  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  7038  003064  0100               	movlb	0	; () banked
  7039  003066  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  7040  003068  0100               	movlb	0	; () banked
  7041  00306A  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  7042  00306C  A0D8               	btfss	status,0,c
  7043  00306E  D00E               	goto	l1094
  7044                           
  7045                           ; BSR set to: 0
  7046  003070  0100               	movlb	0	; () banked
  7047  003072  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  7048  003074  0100               	movlb	0	; () banked
  7049  003076  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  7050  003078  0100               	movlb	0	; () banked
  7051  00307A  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  7052  00307C  0100               	movlb	0	; () banked
  7053  00307E  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  7054  003080  0100               	movlb	0	; () banked
  7055  003082  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  7056  003084  0100               	movlb	0	; () banked
  7057  003086  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  7058                           
  7059                           ; BSR set to: 0
  7060  003088  0100               	movlb	0	; () banked
  7061  00308A  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  7062  00308C                     l1094:
  7063                           
  7064                           ; BSR set to: 0
  7065  00308C  0100               	movlb	0	; () banked
  7066  00308E  90D8               	bcf	status,0,c
  7067  003090  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  7068  003092  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  7069  003094  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  7070                           
  7071                           ; BSR set to: 0
  7072  003096  0100               	movlb	0	; () banked
  7073  003098  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  7074  00309A  D7D6               	goto	l1093
  7075                           
  7076                           ; BSR set to: 0
  7077                           
  7078                           ; BSR set to: 0
  7079  00309C  0100               	movlb	0	; () banked
  7080  00309E  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  7081  0030A0  D01A               	goto	l4961
  7082                           
  7083                           ; BSR set to: 0
  7084  0030A2  0100               	movlb	0	; () banked
  7085  0030A4  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  7086  0030A6  0A80               	xorlw	128
  7087  0030A8  0F97               	addlw	151
  7088  0030AA  B0D8               	btfsc	status,0,c
  7089  0030AC  D00A               	goto	l4957
  7090                           
  7091                           ; BSR set to: 0
  7092  0030AE  0E00               	movlw	0
  7093  0030B0  0100               	movlb	0	; () banked
  7094  0030B2  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  7095  0030B4  0E00               	movlw	0
  7096  0030B6  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  7097  0030B8  0E00               	movlw	0
  7098  0030BA  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  7099  0030BC  0E00               	movlw	0
  7100  0030BE  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  7101                           
  7102                           ; BSR set to: 0
  7103  0030C0  0012               	return	
  7104  0030C2                     l4957:
  7105                           
  7106                           ; BSR set to: 0
  7107  0030C2  0100               	movlb	0	; () banked
  7108  0030C4  90D8               	bcf	status,0,c
  7109  0030C6  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  7110  0030C8  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  7111  0030CA  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  7112  0030CC  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  7113                           
  7114                           ; BSR set to: 0
  7115  0030CE  0100               	movlb	0	; () banked
  7116  0030D0  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  7117  0030D2  D7F7               	goto	l4957
  7118                           
  7119                           ; BSR set to: 0
  7120  0030D4  D01B               	goto	l1100
  7121  0030D6                     l4961:
  7122                           
  7123                           ; BSR set to: 0
  7124  0030D6  0E17               	movlw	23
  7125  0030D8  0100               	movlb	0	; () banked
  7126  0030DA  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  7127  0030DC  D012               	goto	l4969
  7128                           
  7129                           ; BSR set to: 0
  7130  0030DE  0E00               	movlw	0
  7131  0030E0  0100               	movlb	0	; () banked
  7132  0030E2  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  7133  0030E4  0E00               	movlw	0
  7134  0030E6  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  7135  0030E8  0E00               	movlw	0
  7136  0030EA  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  7137  0030EC  0E00               	movlw	0
  7138  0030EE  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  7139                           
  7140                           ; BSR set to: 0
  7141  0030F0  0012               	return	
  7142  0030F2                     l4967:
  7143                           
  7144                           ; BSR set to: 0
  7145  0030F2  0100               	movlb	0	; () banked
  7146  0030F4  90D8               	bcf	status,0,c
  7147  0030F6  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  7148  0030F8  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  7149  0030FA  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  7150  0030FC  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  7151  0030FE  0100               	movlb	0	; () banked
  7152  003100  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  7153  003102                     l4969:
  7154                           
  7155                           ; BSR set to: 0
  7156  003102  0100               	movlb	0	; () banked
  7157  003104  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  7158  003106  0100               	movlb	0	; () banked
  7159  003108  A4D8               	btfss	status,2,c
  7160  00310A  D7F3               	goto	l4967
  7161  00310C                     l1100:
  7162                           
  7163                           ; BSR set to: 0
  7164  00310C  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7165  003110  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7166  003114  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7167  003118  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7168                           
  7169                           ; BSR set to: 0
  7170  00311C  0012               	return		;funcret
  7171  00311E                     __end_of__tdiv_to_l_:
  7172                           	opt stack 0
  7173                           tblptru	equ	0xFF8
  7174                           tblptrh	equ	0xFF7
  7175                           tblptrl	equ	0xFF6
  7176                           tablat	equ	0xFF5
  7177                           prodh	equ	0xFF4
  7178                           prodl	equ	0xFF3
  7179                           postinc0	equ	0xFEE
  7180                           wreg	equ	0xFE8
  7181                           postdec1	equ	0xFE5
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function __div_to_l_ *****************
  7191 ;; Defined at:
  7192 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  f1              3    0[BANK0 ] unsigned long 
  7195 ;;  f2              3    3[BANK0 ] unsigned long 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  quot            4    6[BANK0 ] unsigned long 
  7198 ;;  exp1            1   11[BANK0 ] unsigned char 
  7199 ;;  cntr            1   10[BANK0 ] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  4    0[BANK0 ] unsigned long 
  7202 ;; Registers used:
  7203 ;;		wreg, status,2, status,0
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7209 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;Total ram usage:       12 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    6
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_printf
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text13
  7224  00311E                     __ptext13:
  7225                           	opt stack 0
  7226  00311E                     __div_to_l_:
  7227                           	opt stack 22
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;incstack = 0
  7231  00311E  0100               	movlb	0	; () banked
  7232  003120  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  7233  003122  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  7234  003124  0100               	movlb	0	; () banked
  7235  003126  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  7236  003128  0100               	movlb	0	; () banked
  7237  00312A  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7238  00312C  A4D8               	btfss	status,2,c
  7239  00312E  D00A               	goto	l4977
  7240                           
  7241                           ; BSR set to: 0
  7242  003130  0E00               	movlw	0
  7243  003132  0100               	movlb	0	; () banked
  7244  003134  6F80               	movwf	?__div_to_l_& (0+255),b
  7245  003136  0E00               	movlw	0
  7246  003138  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7247  00313A  0E00               	movlw	0
  7248  00313C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7249  00313E  0E00               	movlw	0
  7250  003140  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7251                           
  7252                           ; BSR set to: 0
  7253  003142  0012               	return	
  7254  003144                     l4977:
  7255                           
  7256                           ; BSR set to: 0
  7257  003144  0100               	movlb	0	; () banked
  7258  003146  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  7259  003148  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  7260  00314A  0100               	movlb	0	; () banked
  7261  00314C  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  7262  00314E  0100               	movlb	0	; () banked
  7263  003150  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  7264  003152  A4D8               	btfss	status,2,c
  7265  003154  D00A               	goto	l4983
  7266                           
  7267                           ; BSR set to: 0
  7268  003156  0E00               	movlw	0
  7269  003158  0100               	movlb	0	; () banked
  7270  00315A  6F80               	movwf	?__div_to_l_& (0+255),b
  7271  00315C  0E00               	movlw	0
  7272  00315E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7273  003160  0E00               	movlw	0
  7274  003162  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7275  003164  0E00               	movlw	0
  7276  003166  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7277                           
  7278                           ; BSR set to: 0
  7279  003168  0012               	return	
  7280  00316A                     l4983:
  7281                           
  7282                           ; BSR set to: 0
  7283  00316A  0100               	movlb	0	; () banked
  7284  00316C  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  7285                           
  7286                           ; BSR set to: 0
  7287  00316E  0EFF               	movlw	255
  7288  003170  0100               	movlb	0	; () banked
  7289  003172  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  7290  003174  0EFF               	movlw	255
  7291  003176  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  7292  003178  0EFF               	movlw	255
  7293  00317A  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  7294  00317C  0E00               	movlw	0
  7295  00317E  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  7296                           
  7297                           ; BSR set to: 0
  7298  003180  0100               	movlb	0	; () banked
  7299  003182  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  7300  003184  0EFF               	movlw	255
  7301  003186  0100               	movlb	0	; () banked
  7302  003188  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  7303  00318A  0EFF               	movlw	255
  7304  00318C  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  7305  00318E  0EFF               	movlw	255
  7306  003190  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  7307  003192  0E00               	movlw	0
  7308  003194  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  7309                           
  7310                           ; BSR set to: 0
  7311  003196  0E00               	movlw	0
  7312  003198  0100               	movlb	0	; () banked
  7313  00319A  6F86               	movwf	__div_to_l_@quot& (0+255),b
  7314  00319C  0E00               	movlw	0
  7315  00319E  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  7316  0031A0  0E00               	movlw	0
  7317  0031A2  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  7318  0031A4  0E00               	movlw	0
  7319  0031A6  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  7320                           
  7321                           ; BSR set to: 0
  7322  0031A8  0E7F               	movlw	127
  7323  0031AA  0100               	movlb	0	; () banked
  7324  0031AC  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7325                           
  7326                           ; BSR set to: 0
  7327  0031AE  0100               	movlb	0	; () banked
  7328  0031B0  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  7329  0031B2  0FA0               	addlw	160
  7330  0031B4  0100               	movlb	0	; () banked
  7331  0031B6  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7332                           
  7333                           ; BSR set to: 0
  7334  0031B8  0E20               	movlw	32
  7335  0031BA  0100               	movlb	0	; () banked
  7336  0031BC  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  7337  0031BE                     l4997:
  7338                           
  7339                           ; BSR set to: 0
  7340  0031BE  0100               	movlb	0	; () banked
  7341  0031C0  90D8               	bcf	status,0,c
  7342  0031C2  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  7343  0031C4  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7344  0031C6  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7345  0031C8  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7346                           
  7347                           ; BSR set to: 0
  7348  0031CA  0100               	movlb	0	; () banked
  7349  0031CC  5183               	movf	__div_to_l_@f2& (0+255),w,b
  7350  0031CE  0100               	movlb	0	; () banked
  7351  0031D0  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  7352  0031D2  0100               	movlb	0	; () banked
  7353  0031D4  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7354  0031D6  0100               	movlb	0	; () banked
  7355  0031D8  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  7356  0031DA  0100               	movlb	0	; () banked
  7357  0031DC  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7358  0031DE  0100               	movlb	0	; () banked
  7359  0031E0  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  7360  0031E2  0100               	movlb	0	; () banked
  7361  0031E4  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7362  0031E6  0100               	movlb	0	; () banked
  7363  0031E8  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  7364  0031EA  A0D8               	btfss	status,0,c
  7365  0031EC  D012               	goto	l5005
  7366                           
  7367                           ; BSR set to: 0
  7368  0031EE  0100               	movlb	0	; () banked
  7369  0031F0  5183               	movf	__div_to_l_@f2& (0+255),w,b
  7370  0031F2  0100               	movlb	0	; () banked
  7371  0031F4  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  7372  0031F6  0100               	movlb	0	; () banked
  7373  0031F8  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7374  0031FA  0100               	movlb	0	; () banked
  7375  0031FC  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  7376  0031FE  0100               	movlb	0	; () banked
  7377  003200  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7378  003202  0100               	movlb	0	; () banked
  7379  003204  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  7380  003206  0100               	movlb	0	; () banked
  7381  003208  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7382  00320A  0100               	movlb	0	; () banked
  7383  00320C  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  7384                           
  7385                           ; BSR set to: 0
  7386  00320E  0100               	movlb	0	; () banked
  7387  003210  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  7388  003212                     l5005:
  7389                           
  7390                           ; BSR set to: 0
  7391  003212  0100               	movlb	0	; () banked
  7392  003214  90D8               	bcf	status,0,c
  7393  003216  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  7394  003218  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  7395  00321A  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  7396  00321C  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  7397                           
  7398                           ; BSR set to: 0
  7399  00321E  0100               	movlb	0	; () banked
  7400  003220  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  7401  003222  D7CD               	goto	l4997
  7402                           
  7403                           ; BSR set to: 0
  7404                           
  7405                           ; BSR set to: 0
  7406  003224  0100               	movlb	0	; () banked
  7407  003226  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  7408  003228  D01A               	goto	l5021
  7409                           
  7410                           ; BSR set to: 0
  7411  00322A  0100               	movlb	0	; () banked
  7412  00322C  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7413  00322E  0A80               	xorlw	128
  7414  003230  0F9F               	addlw	159
  7415  003232  B0D8               	btfsc	status,0,c
  7416  003234  D00A               	goto	l5017
  7417                           
  7418                           ; BSR set to: 0
  7419  003236  0E00               	movlw	0
  7420  003238  0100               	movlb	0	; () banked
  7421  00323A  6F80               	movwf	?__div_to_l_& (0+255),b
  7422  00323C  0E00               	movlw	0
  7423  00323E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7424  003240  0E00               	movlw	0
  7425  003242  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7426  003244  0E00               	movlw	0
  7427  003246  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7428                           
  7429                           ; BSR set to: 0
  7430  003248  0012               	return	
  7431  00324A                     l5017:
  7432                           
  7433                           ; BSR set to: 0
  7434  00324A  0100               	movlb	0	; () banked
  7435  00324C  90D8               	bcf	status,0,c
  7436  00324E  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  7437  003250  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  7438  003252  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  7439  003254  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  7440                           
  7441                           ; BSR set to: 0
  7442  003256  0100               	movlb	0	; () banked
  7443  003258  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  7444  00325A  D7F7               	goto	l5017
  7445                           
  7446                           ; BSR set to: 0
  7447  00325C  D01B               	goto	l996
  7448  00325E                     l5021:
  7449                           
  7450                           ; BSR set to: 0
  7451  00325E  0E1F               	movlw	31
  7452  003260  0100               	movlb	0	; () banked
  7453  003262  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  7454  003264  D012               	goto	l5029
  7455                           
  7456                           ; BSR set to: 0
  7457  003266  0E00               	movlw	0
  7458  003268  0100               	movlb	0	; () banked
  7459  00326A  6F80               	movwf	?__div_to_l_& (0+255),b
  7460  00326C  0E00               	movlw	0
  7461  00326E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7462  003270  0E00               	movlw	0
  7463  003272  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7464  003274  0E00               	movlw	0
  7465  003276  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7466                           
  7467                           ; BSR set to: 0
  7468  003278  0012               	return	
  7469  00327A                     l5027:
  7470                           
  7471                           ; BSR set to: 0
  7472  00327A  0100               	movlb	0	; () banked
  7473  00327C  90D8               	bcf	status,0,c
  7474  00327E  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  7475  003280  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7476  003282  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7477  003284  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7478  003286  0100               	movlb	0	; () banked
  7479  003288  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  7480  00328A                     l5029:
  7481                           
  7482                           ; BSR set to: 0
  7483  00328A  0100               	movlb	0	; () banked
  7484  00328C  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7485  00328E  0100               	movlb	0	; () banked
  7486  003290  A4D8               	btfss	status,2,c
  7487  003292  D7F3               	goto	l5027
  7488  003294                     l996:
  7489                           
  7490                           ; BSR set to: 0
  7491  003294  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  7492  003298  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7493  00329C  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7494  0032A0  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7495                           
  7496                           ; BSR set to: 0
  7497  0032A4  0012               	return		;funcret
  7498  0032A6                     __end_of__div_to_l_:
  7499                           	opt stack 0
  7500                           tblptru	equ	0xFF8
  7501                           tblptrh	equ	0xFF7
  7502                           tblptrl	equ	0xFF6
  7503                           tablat	equ	0xFF5
  7504                           prodh	equ	0xFF4
  7505                           prodl	equ	0xFF3
  7506                           postinc0	equ	0xFEE
  7507                           wreg	equ	0xFE8
  7508                           postdec1	equ	0xFE5
  7509                           fsr1l	equ	0xFE1
  7510                           indf2	equ	0xFDF
  7511                           postinc2	equ	0xFDE
  7512                           postdec2	equ	0xFDD
  7513                           fsr2h	equ	0xFDA
  7514                           fsr2l	equ	0xFD9
  7515                           status	equ	0xFD8
  7516                           
  7517 ;; *************** function ___lltoft *****************
  7518 ;; Defined at:
  7519 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;  c               4    8[BANK0 ] unsigned long 
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;  exp             1   16[BANK0 ] unsigned char 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  3    8[BANK0 ] float 
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0, cstack
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7533 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;Total ram usage:        9 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    7
  7540 ;; This function calls:
  7541 ;;		___ftpack
  7542 ;; This function is called by:
  7543 ;;		_printf
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           	psect	text14
  7548  004C52                     __ptext14:
  7549                           	opt stack 0
  7550  004C52                     ___lltoft:
  7551                           	opt stack 21
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;incstack = 0
  7555  004C52  0E8E               	movlw	142
  7556  004C54  0100               	movlb	0	; () banked
  7557  004C56  6F90               	movwf	___lltoft@exp& (0+255),b
  7558  004C58  D008               	goto	l5103
  7559  004C5A                     l5101:
  7560                           
  7561                           ; BSR set to: 0
  7562  004C5A  0100               	movlb	0	; () banked
  7563  004C5C  90D8               	bcf	status,0,c
  7564  004C5E  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7565  004C60  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7566  004C62  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7567  004C64  3388               	rrcf	___lltoft@c& (0+255),f,b
  7568  004C66  0100               	movlb	0	; () banked
  7569  004C68  2B90               	incf	___lltoft@exp& (0+255),f,b
  7570  004C6A                     l5103:
  7571                           
  7572                           ; BSR set to: 0
  7573  004C6A  0E00               	movlw	0
  7574  004C6C  0100               	movlb	0	; () banked
  7575  004C6E  1588               	andwf	___lltoft@c& (0+255),w,b
  7576  004C70  0100               	movlb	0	; () banked
  7577  004C72  6F8C               	movwf	??___lltoft& (0+255),b
  7578  004C74  0E00               	movlw	0
  7579  004C76  0100               	movlb	0	; () banked
  7580  004C78  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  7581  004C7A  0100               	movlb	0	; () banked
  7582  004C7C  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  7583  004C7E  0E00               	movlw	0
  7584  004C80  0100               	movlb	0	; () banked
  7585  004C82  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7586  004C84  0100               	movlb	0	; () banked
  7587  004C86  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  7588  004C88  0EFF               	movlw	255
  7589  004C8A  0100               	movlb	0	; () banked
  7590  004C8C  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7591  004C8E  0100               	movlb	0	; () banked
  7592  004C90  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  7593  004C92  0100               	movlb	0	; () banked
  7594  004C94  518C               	movf	??___lltoft& (0+255),w,b
  7595  004C96  0100               	movlb	0	; () banked
  7596  004C98  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7597  004C9A  0100               	movlb	0	; () banked
  7598  004C9C  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7599  004C9E  0100               	movlb	0	; () banked
  7600  004CA0  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7601  004CA2  A4D8               	btfss	status,2,c
  7602  004CA4  D7DA               	goto	l5101
  7603                           
  7604                           ; BSR set to: 0
  7605                           
  7606                           ; BSR set to: 0
  7607  004CA6  C088  F080         	movff	___lltoft@c,___ftpack@arg
  7608  004CAA  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  7609  004CAE  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  7610  004CB2  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  7611  004CB6  0E00               	movlw	0
  7612  004CB8  0100               	movlb	0	; () banked
  7613  004CBA  6F84               	movwf	___ftpack@sign& (0+255),b
  7614  004CBC  ECEC  F01E         	call	___ftpack	;wreg free
  7615  004CC0  C080  F088         	movff	?___ftpack,?___lltoft
  7616  004CC4  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  7617  004CC8  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  7618  004CCC  0012               	return	
  7619  004CCE                     __end_of___lltoft:
  7620                           	opt stack 0
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           postinc0	equ	0xFEE
  7628                           wreg	equ	0xFE8
  7629                           postdec1	equ	0xFE5
  7630                           fsr1l	equ	0xFE1
  7631                           indf2	equ	0xFDF
  7632                           postinc2	equ	0xFDE
  7633                           postdec2	equ	0xFDD
  7634                           fsr2h	equ	0xFDA
  7635                           fsr2l	equ	0xFD9
  7636                           status	equ	0xFD8
  7637                           
  7638 ;; *************** function ___llmod *****************
  7639 ;; Defined at:
  7640 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;  dividend        4   13[BANK0 ] unsigned long 
  7643 ;;  divisor         4   17[BANK0 ] unsigned long 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;  counter         1   21[BANK0 ] unsigned char 
  7646 ;; Return value:  Size  Location     Type
  7647 ;;                  4   13[BANK0 ] unsigned long 
  7648 ;; Registers used:
  7649 ;;		wreg, status,2, status,0
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7655 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;Total ram usage:        9 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    6
  7662 ;; This function calls:
  7663 ;;		Nothing
  7664 ;; This function is called by:
  7665 ;;		_printf
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           	psect	text15
  7670  004994                     __ptext15:
  7671                           	opt stack 0
  7672  004994                     ___llmod:
  7673                           	opt stack 22
  7674                           
  7675                           ;incstack = 0
  7676  004994  0100               	movlb	0	; () banked
  7677  004996  5191               	movf	___llmod@divisor& (0+255),w,b
  7678  004998  0100               	movlb	0	; () banked
  7679  00499A  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7680  00499C  0100               	movlb	0	; () banked
  7681  00499E  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7682  0049A0  0100               	movlb	0	; () banked
  7683  0049A2  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7684  0049A4  B4D8               	btfsc	status,2,c
  7685  0049A6  D03A               	goto	l1185
  7686                           
  7687                           ; BSR set to: 0
  7688  0049A8  0E01               	movlw	1
  7689  0049AA  0100               	movlb	0	; () banked
  7690  0049AC  6F95               	movwf	___llmod@counter& (0+255),b
  7691  0049AE  D008               	goto	l5089
  7692  0049B0                     l5087:
  7693                           
  7694                           ; BSR set to: 0
  7695  0049B0  0100               	movlb	0	; () banked
  7696  0049B2  90D8               	bcf	status,0,c
  7697  0049B4  3791               	rlcf	___llmod@divisor& (0+255),f,b
  7698  0049B6  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7699  0049B8  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7700  0049BA  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7701  0049BC  0100               	movlb	0	; () banked
  7702  0049BE  2B95               	incf	___llmod@counter& (0+255),f,b
  7703  0049C0                     l5089:
  7704                           
  7705                           ; BSR set to: 0
  7706  0049C0  0100               	movlb	0	; () banked
  7707  0049C2  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7708  0049C4  D7F5               	goto	l5087
  7709  0049C6                     l5091:
  7710                           
  7711                           ; BSR set to: 0
  7712  0049C6  0100               	movlb	0	; () banked
  7713  0049C8  5191               	movf	___llmod@divisor& (0+255),w,b
  7714  0049CA  0100               	movlb	0	; () banked
  7715  0049CC  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  7716  0049CE  0100               	movlb	0	; () banked
  7717  0049D0  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  7718  0049D2  0100               	movlb	0	; () banked
  7719  0049D4  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7720  0049D6  0100               	movlb	0	; () banked
  7721  0049D8  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  7722  0049DA  0100               	movlb	0	; () banked
  7723  0049DC  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7724  0049DE  0100               	movlb	0	; () banked
  7725  0049E0  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  7726  0049E2  0100               	movlb	0	; () banked
  7727  0049E4  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7728  0049E6  A0D8               	btfss	status,0,c
  7729  0049E8  D010               	goto	l5095
  7730                           
  7731                           ; BSR set to: 0
  7732  0049EA  0100               	movlb	0	; () banked
  7733  0049EC  5191               	movf	___llmod@divisor& (0+255),w,b
  7734  0049EE  0100               	movlb	0	; () banked
  7735  0049F0  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  7736  0049F2  0100               	movlb	0	; () banked
  7737  0049F4  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  7738  0049F6  0100               	movlb	0	; () banked
  7739  0049F8  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7740  0049FA  0100               	movlb	0	; () banked
  7741  0049FC  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  7742  0049FE  0100               	movlb	0	; () banked
  7743  004A00  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7744  004A02  0100               	movlb	0	; () banked
  7745  004A04  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  7746  004A06  0100               	movlb	0	; () banked
  7747  004A08  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7748  004A0A                     l5095:
  7749                           
  7750                           ; BSR set to: 0
  7751  004A0A  0100               	movlb	0	; () banked
  7752  004A0C  90D8               	bcf	status,0,c
  7753  004A0E  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7754  004A10  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7755  004A12  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7756  004A14  3391               	rrcf	___llmod@divisor& (0+255),f,b
  7757                           
  7758                           ; BSR set to: 0
  7759  004A16  0100               	movlb	0	; () banked
  7760  004A18  2F95               	decfsz	___llmod@counter& (0+255),f,b
  7761  004A1A  D7D5               	goto	l5091
  7762  004A1C                     l1185:
  7763                           
  7764                           ; BSR set to: 0
  7765  004A1C  C08D  F08D         	movff	___llmod@dividend,?___llmod
  7766  004A20  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  7767  004A24  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  7768  004A28  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  7769                           
  7770                           ; BSR set to: 0
  7771  004A2C  0012               	return		;funcret
  7772  004A2E                     __end_of___llmod:
  7773                           	opt stack 0
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           postinc0	equ	0xFEE
  7781                           wreg	equ	0xFE8
  7782                           postdec1	equ	0xFE5
  7783                           fsr1l	equ	0xFE1
  7784                           indf2	equ	0xFDF
  7785                           postinc2	equ	0xFDE
  7786                           postdec2	equ	0xFDD
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function ___lldiv *****************
  7792 ;; Defined at:
  7793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  dividend        4    0[BANK0 ] unsigned long 
  7796 ;;  divisor         4    4[BANK0 ] unsigned long 
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;  quotient        4    8[BANK0 ] unsigned long 
  7799 ;;  counter         1   12[BANK0 ] unsigned char 
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  4    0[BANK0 ] unsigned long 
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7809 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;Total ram usage:       13 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    6
  7816 ;; This function calls:
  7817 ;;		Nothing
  7818 ;; This function is called by:
  7819 ;;		_printf
  7820 ;;		_I2C_Master_Init
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text16
  7825  0046EA                     __ptext16:
  7826                           	opt stack 0
  7827  0046EA                     ___lldiv:
  7828                           	opt stack 22
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;incstack = 0
  7832  0046EA  0E00               	movlw	0
  7833  0046EC  0100               	movlb	0	; () banked
  7834  0046EE  6F88               	movwf	___lldiv@quotient& (0+255),b
  7835  0046F0  0E00               	movlw	0
  7836  0046F2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7837  0046F4  0E00               	movlw	0
  7838  0046F6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7839  0046F8  0E00               	movlw	0
  7840  0046FA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7841                           
  7842                           ; BSR set to: 0
  7843  0046FC  0100               	movlb	0	; () banked
  7844  0046FE  5184               	movf	___lldiv@divisor& (0+255),w,b
  7845  004700  0100               	movlb	0	; () banked
  7846  004702  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7847  004704  0100               	movlb	0	; () banked
  7848  004706  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7849  004708  0100               	movlb	0	; () banked
  7850  00470A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7851  00470C  B4D8               	btfsc	status,2,c
  7852  00470E  D042               	goto	l1175
  7853                           
  7854                           ; BSR set to: 0
  7855  004710  0E01               	movlw	1
  7856  004712  0100               	movlb	0	; () banked
  7857  004714  6F8C               	movwf	___lldiv@counter& (0+255),b
  7858  004716  D008               	goto	l5069
  7859  004718                     l5067:
  7860                           
  7861                           ; BSR set to: 0
  7862  004718  0100               	movlb	0	; () banked
  7863  00471A  90D8               	bcf	status,0,c
  7864  00471C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7865  00471E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7866  004720  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7867  004722  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7868  004724  0100               	movlb	0	; () banked
  7869  004726  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7870  004728                     l5069:
  7871                           
  7872                           ; BSR set to: 0
  7873  004728  0100               	movlb	0	; () banked
  7874  00472A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7875  00472C  D7F5               	goto	l5067
  7876  00472E                     l5071:
  7877                           
  7878                           ; BSR set to: 0
  7879  00472E  0100               	movlb	0	; () banked
  7880  004730  90D8               	bcf	status,0,c
  7881  004732  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7882  004734  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7883  004736  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7884  004738  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7885                           
  7886                           ; BSR set to: 0
  7887  00473A  0100               	movlb	0	; () banked
  7888  00473C  5184               	movf	___lldiv@divisor& (0+255),w,b
  7889  00473E  0100               	movlb	0	; () banked
  7890  004740  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7891  004742  0100               	movlb	0	; () banked
  7892  004744  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7893  004746  0100               	movlb	0	; () banked
  7894  004748  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7895  00474A  0100               	movlb	0	; () banked
  7896  00474C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7897  00474E  0100               	movlb	0	; () banked
  7898  004750  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7899  004752  0100               	movlb	0	; () banked
  7900  004754  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7901  004756  0100               	movlb	0	; () banked
  7902  004758  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7903  00475A  A0D8               	btfss	status,0,c
  7904  00475C  D012               	goto	l5079
  7905                           
  7906                           ; BSR set to: 0
  7907  00475E  0100               	movlb	0	; () banked
  7908  004760  5184               	movf	___lldiv@divisor& (0+255),w,b
  7909  004762  0100               	movlb	0	; () banked
  7910  004764  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7911  004766  0100               	movlb	0	; () banked
  7912  004768  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7913  00476A  0100               	movlb	0	; () banked
  7914  00476C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7915  00476E  0100               	movlb	0	; () banked
  7916  004770  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7917  004772  0100               	movlb	0	; () banked
  7918  004774  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7919  004776  0100               	movlb	0	; () banked
  7920  004778  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7921  00477A  0100               	movlb	0	; () banked
  7922  00477C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7923                           
  7924                           ; BSR set to: 0
  7925  00477E  0100               	movlb	0	; () banked
  7926  004780  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7927  004782                     l5079:
  7928                           
  7929                           ; BSR set to: 0
  7930  004782  0100               	movlb	0	; () banked
  7931  004784  90D8               	bcf	status,0,c
  7932  004786  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7933  004788  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7934  00478A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7935  00478C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7936                           
  7937                           ; BSR set to: 0
  7938  00478E  0100               	movlb	0	; () banked
  7939  004790  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7940  004792  D7CD               	goto	l5071
  7941  004794                     l1175:
  7942                           
  7943                           ; BSR set to: 0
  7944  004794  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7945  004798  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7946  00479C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7947  0047A0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7948                           
  7949                           ; BSR set to: 0
  7950  0047A4  0012               	return		;funcret
  7951  0047A6                     __end_of___lldiv:
  7952                           	opt stack 0
  7953                           tblptru	equ	0xFF8
  7954                           tblptrh	equ	0xFF7
  7955                           tblptrl	equ	0xFF6
  7956                           tablat	equ	0xFF5
  7957                           prodh	equ	0xFF4
  7958                           prodl	equ	0xFF3
  7959                           postinc0	equ	0xFEE
  7960                           wreg	equ	0xFE8
  7961                           postdec1	equ	0xFE5
  7962                           fsr1l	equ	0xFE1
  7963                           indf2	equ	0xFDF
  7964                           postinc2	equ	0xFDE
  7965                           postdec2	equ	0xFDD
  7966                           fsr2h	equ	0xFDA
  7967                           fsr2l	equ	0xFD9
  7968                           status	equ	0xFD8
  7969                           
  7970 ;; *************** function ___ftsub *****************
  7971 ;; Defined at:
  7972 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;  f1              3   70[BANK0 ] float 
  7975 ;;  f2              3   73[BANK0 ] float 
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;		None
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  3   70[BANK0 ] float 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7987 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;Total ram usage:        6 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    8
  7994 ;; This function calls:
  7995 ;;		___ftadd
  7996 ;; This function is called by:
  7997 ;;		_printf
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           	psect	text17
  8002  004F7C                     __ptext17:
  8003                           	opt stack 0
  8004  004F7C                     ___ftsub:
  8005                           	opt stack 20
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;incstack = 0
  8009  004F7C  0100               	movlb	0	; () banked
  8010  004F7E  51C9               	movf	___ftsub@f2& (0+255),w,b
  8011  004F80  0100               	movlb	0	; () banked
  8012  004F82  11CA               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8013  004F84  0100               	movlb	0	; () banked
  8014  004F86  11CB               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8015  004F88  B4D8               	btfsc	status,2,c
  8016  004F8A  D009               	goto	l5035
  8017                           
  8018                           ; BSR set to: 0
  8019  004F8C  0E00               	movlw	0
  8020  004F8E  0100               	movlb	0	; () banked
  8021  004F90  1BC9               	xorwf	___ftsub@f2& (0+255),f,b
  8022  004F92  0E00               	movlw	0
  8023  004F94  0100               	movlb	0	; () banked
  8024  004F96  1BCA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8025  004F98  0E80               	movlw	128
  8026  004F9A  0100               	movlb	0	; () banked
  8027  004F9C  1BCB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8028  004F9E                     l5035:
  8029                           
  8030                           ; BSR set to: 0
  8031  004F9E  C0C6  F0BA         	movff	___ftsub@f1,___ftadd@f1
  8032  004FA2  C0C7  F0BB         	movff	___ftsub@f1+1,___ftadd@f1+1
  8033  004FA6  C0C8  F0BC         	movff	___ftsub@f1+2,___ftadd@f1+2
  8034  004FAA  C0C9  F0BD         	movff	___ftsub@f2,___ftadd@f2
  8035  004FAE  C0CA  F0BE         	movff	___ftsub@f2+1,___ftadd@f2+1
  8036  004FB2  C0CB  F0BF         	movff	___ftsub@f2+2,___ftadd@f2+2
  8037  004FB6  EC93  F014         	call	___ftadd	;wreg free
  8038  004FBA  C0BA  F0C6         	movff	?___ftadd,?___ftsub
  8039  004FBE  C0BB  F0C7         	movff	?___ftadd+1,?___ftsub+1
  8040  004FC2  C0BC  F0C8         	movff	?___ftadd+2,?___ftsub+2
  8041  004FC6  0012               	return	
  8042  004FC8                     __end_of___ftsub:
  8043                           	opt stack 0
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           postinc0	equ	0xFEE
  8051                           wreg	equ	0xFE8
  8052                           postdec1	equ	0xFE5
  8053                           fsr1l	equ	0xFE1
  8054                           indf2	equ	0xFDF
  8055                           postinc2	equ	0xFDE
  8056                           postdec2	equ	0xFDD
  8057                           fsr2h	equ	0xFDA
  8058                           fsr2l	equ	0xFD9
  8059                           status	equ	0xFD8
  8060                           
  8061 ;; *************** function ___ftneg *****************
  8062 ;; Defined at:
  8063 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  f1              3    0[BANK0 ] float 
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;		None
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  3    0[BANK0 ] float 
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8077 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8081 ;;Total ram usage:        3 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    6
  8084 ;; This function calls:
  8085 ;;		Nothing
  8086 ;; This function is called by:
  8087 ;;		_printf
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           	psect	text18
  8092  00521C                     __ptext18:
  8093                           	opt stack 0
  8094  00521C                     ___ftneg:
  8095                           	opt stack 22
  8096                           
  8097                           ;incstack = 0
  8098  00521C  0100               	movlb	0	; () banked
  8099  00521E  5180               	movf	___ftneg@f1& (0+255),w,b
  8100  005220  0100               	movlb	0	; () banked
  8101  005222  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8102  005224  0100               	movlb	0	; () banked
  8103  005226  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8104  005228  B4D8               	btfsc	status,2,c
  8105  00522A  D009               	goto	l1125
  8106                           
  8107                           ; BSR set to: 0
  8108  00522C  0E00               	movlw	0
  8109  00522E  0100               	movlb	0	; () banked
  8110  005230  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  8111  005232  0E00               	movlw	0
  8112  005234  0100               	movlb	0	; () banked
  8113  005236  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8114  005238  0E80               	movlw	128
  8115  00523A  0100               	movlb	0	; () banked
  8116  00523C  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8117  00523E                     l1125:
  8118                           
  8119                           ; BSR set to: 0
  8120  00523E  C080  F080         	movff	___ftneg@f1,?___ftneg
  8121  005242  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  8122  005246  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  8123                           
  8124                           ; BSR set to: 0
  8125  00524A  0012               	return		;funcret
  8126  00524C                     __end_of___ftneg:
  8127                           	opt stack 0
  8128                           tblptru	equ	0xFF8
  8129                           tblptrh	equ	0xFF7
  8130                           tblptrl	equ	0xFF6
  8131                           tablat	equ	0xFF5
  8132                           prodh	equ	0xFF4
  8133                           prodl	equ	0xFF3
  8134                           postinc0	equ	0xFEE
  8135                           wreg	equ	0xFE8
  8136                           postdec1	equ	0xFE5
  8137                           fsr1l	equ	0xFE1
  8138                           indf2	equ	0xFDF
  8139                           postinc2	equ	0xFDE
  8140                           postdec2	equ	0xFDD
  8141                           fsr2h	equ	0xFDA
  8142                           fsr2l	equ	0xFD9
  8143                           status	equ	0xFD8
  8144                           
  8145 ;; *************** function ___ftge *****************
  8146 ;; Defined at:
  8147 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  ff1             3    0[BANK0 ] float 
  8150 ;;  ff2             3    3[BANK0 ] float 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;		None
  8153 ;; Return value:  Size  Location     Type
  8154 ;;		None               void
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8162 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;Total ram usage:        9 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    6
  8169 ;; This function calls:
  8170 ;;		Nothing
  8171 ;; This function is called by:
  8172 ;;		_sortBattery
  8173 ;;		_printf
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           	psect	text19
  8178  00449C                     __ptext19:
  8179                           	opt stack 0
  8180  00449C                     ___ftge:
  8181                           	opt stack 22
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;incstack = 0
  8185  00449C  0100               	movlb	0	; () banked
  8186  00449E  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8187  0044A0  D01D               	goto	l5043
  8188                           
  8189                           ; BSR set to: 0
  8190  0044A2  C080  F086         	movff	___ftge@ff1,??___ftge
  8191  0044A6  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  8192  0044AA  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  8193  0044AE  0100               	movlb	0	; () banked
  8194  0044B0  1F86               	comf	??___ftge& (0+255),f,b
  8195  0044B2  1F87               	comf	(??___ftge+1)& (0+255),f,b
  8196  0044B4  1F88               	comf	(??___ftge+2)& (0+255),f,b
  8197  0044B6  2B86               	incf	??___ftge& (0+255),f,b
  8198  0044B8  0E00               	movlw	0
  8199  0044BA  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  8200  0044BC  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  8201  0044BE  0E00               	movlw	0
  8202  0044C0  0100               	movlb	0	; () banked
  8203  0044C2  2586               	addwf	??___ftge& (0+255),w,b
  8204  0044C4  0100               	movlb	0	; () banked
  8205  0044C6  6F80               	movwf	___ftge@ff1& (0+255),b
  8206  0044C8  0E00               	movlw	0
  8207  0044CA  0100               	movlb	0	; () banked
  8208  0044CC  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8209  0044CE  0100               	movlb	0	; () banked
  8210  0044D0  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  8211  0044D2  0E80               	movlw	128
  8212  0044D4  0100               	movlb	0	; () banked
  8213  0044D6  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8214  0044D8  0100               	movlb	0	; () banked
  8215  0044DA  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  8216  0044DC                     l5043:
  8217                           
  8218                           ; BSR set to: 0
  8219  0044DC  0100               	movlb	0	; () banked
  8220  0044DE  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8221  0044E0  D01D               	goto	l5047
  8222                           
  8223                           ; BSR set to: 0
  8224  0044E2  C083  F086         	movff	___ftge@ff2,??___ftge
  8225  0044E6  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  8226  0044EA  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  8227  0044EE  0100               	movlb	0	; () banked
  8228  0044F0  1F86               	comf	??___ftge& (0+255),f,b
  8229  0044F2  1F87               	comf	(??___ftge+1)& (0+255),f,b
  8230  0044F4  1F88               	comf	(??___ftge+2)& (0+255),f,b
  8231  0044F6  2B86               	incf	??___ftge& (0+255),f,b
  8232  0044F8  0E00               	movlw	0
  8233  0044FA  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  8234  0044FC  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  8235  0044FE  0E00               	movlw	0
  8236  004500  0100               	movlb	0	; () banked
  8237  004502  2586               	addwf	??___ftge& (0+255),w,b
  8238  004504  0100               	movlb	0	; () banked
  8239  004506  6F83               	movwf	___ftge@ff2& (0+255),b
  8240  004508  0E00               	movlw	0
  8241  00450A  0100               	movlb	0	; () banked
  8242  00450C  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8243  00450E  0100               	movlb	0	; () banked
  8244  004510  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  8245  004512  0E80               	movlw	128
  8246  004514  0100               	movlb	0	; () banked
  8247  004516  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8248  004518  0100               	movlb	0	; () banked
  8249  00451A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  8250  00451C                     l5047:
  8251                           
  8252                           ; BSR set to: 0
  8253  00451C  0E00               	movlw	0
  8254  00451E  0100               	movlb	0	; () banked
  8255  004520  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  8256  004522  0E00               	movlw	0
  8257  004524  0100               	movlb	0	; () banked
  8258  004526  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8259  004528  0E80               	movlw	128
  8260  00452A  0100               	movlb	0	; () banked
  8261  00452C  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8262                           
  8263                           ; BSR set to: 0
  8264  00452E  0E00               	movlw	0
  8265  004530  0100               	movlb	0	; () banked
  8266  004532  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  8267  004534  0E00               	movlw	0
  8268  004536  0100               	movlb	0	; () banked
  8269  004538  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8270  00453A  0E80               	movlw	128
  8271  00453C  0100               	movlb	0	; () banked
  8272  00453E  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8273  004540  0100               	movlb	0	; () banked
  8274  004542  5183               	movf	___ftge@ff2& (0+255),w,b
  8275  004544  0100               	movlb	0	; () banked
  8276  004546  5D80               	subwf	___ftge@ff1& (0+255),w,b
  8277  004548  0100               	movlb	0	; () banked
  8278  00454A  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  8279  00454C  0100               	movlb	0	; () banked
  8280  00454E  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8281  004550  0100               	movlb	0	; () banked
  8282  004552  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  8283  004554  0100               	movlb	0	; () banked
  8284  004556  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8285  004558  B0D8               	btfsc	status,0,c
  8286  00455A  D002               	goto	l5053
  8287                           
  8288                           ; BSR set to: 0
  8289  00455C  90D8               	bcf	status,0,c
  8290  00455E  0012               	return	
  8291  004560                     l5053:
  8292                           
  8293                           ; BSR set to: 0
  8294  004560  80D8               	bsf	status,0,c
  8295                           
  8296                           ; BSR set to: 0
  8297  004562  0012               	return	
  8298  004564                     __end_of___ftge:
  8299                           	opt stack 0
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           prodh	equ	0xFF4
  8305                           prodl	equ	0xFF3
  8306                           postinc0	equ	0xFEE
  8307                           wreg	equ	0xFE8
  8308                           postdec1	equ	0xFE5
  8309                           fsr1l	equ	0xFE1
  8310                           indf2	equ	0xFDF
  8311                           postinc2	equ	0xFDE
  8312                           postdec2	equ	0xFDD
  8313                           fsr2h	equ	0xFDA
  8314                           fsr2l	equ	0xFD9
  8315                           status	equ	0xFD8
  8316                           
  8317 ;; *************** function _lcdClear *****************
  8318 ;; Defined at:
  8319 ;;		line 74 in file "lcd.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;		None
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;		None
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      void 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8337 ;;Total ram usage:        0 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    8
  8340 ;; This function calls:
  8341 ;;		_lcdInst
  8342 ;; This function is called by:
  8343 ;;		_main
  8344 ;;		_sortBattery
  8345 ;;		_pause
  8346 ;;		_dateTime
  8347 ;;		_mainMenu
  8348 ;;		_runSelect
  8349 ;;		_runMenu
  8350 ;;		_runTime
  8351 ;;		_runStats
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	text20
  8356  0053A6                     __ptext20:
  8357                           	opt stack 0
  8358  0053A6                     _lcdClear:
  8359                           	opt stack 21
  8360                           
  8361                           ;lcd.c: 75: lcdInst(0b00000001);
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;incstack = 0
  8365  0053A6  0E01               	movlw	1
  8366  0053A8  EC50  F029         	call	_lcdInst
  8367  0053AC  0012               	return		;funcret
  8368  0053AE                     __end_of_lcdClear:
  8369                           	opt stack 0
  8370                           tblptru	equ	0xFF8
  8371                           tblptrh	equ	0xFF7
  8372                           tblptrl	equ	0xFF6
  8373                           tablat	equ	0xFF5
  8374                           prodh	equ	0xFF4
  8375                           prodl	equ	0xFF3
  8376                           postinc0	equ	0xFEE
  8377                           wreg	equ	0xFE8
  8378                           postdec1	equ	0xFE5
  8379                           fsr1l	equ	0xFE1
  8380                           indf2	equ	0xFDF
  8381                           postinc2	equ	0xFDE
  8382                           postdec2	equ	0xFDD
  8383                           fsr2h	equ	0xFDA
  8384                           fsr2l	equ	0xFD9
  8385                           status	equ	0xFD8
  8386                           
  8387 ;; *************** function _digitalWrite *****************
  8388 ;; Defined at:
  8389 ;;		line 53 in file "iopin.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;  pin             2    0[BANK0 ] PTR int 
  8392 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  8393 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  8394 ;;  val             2    2[BANK0 ] int 
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  p               2    7[BANK0 ] int 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8406 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8409 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;Total ram usage:        9 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    6
  8413 ;; This function calls:
  8414 ;;		Nothing
  8415 ;; This function is called by:
  8416 ;;		_main
  8417 ;;		_sortBattery
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           	psect	text21
  8422  003FEA                     __ptext21:
  8423                           	opt stack 0
  8424  003FEA                     _digitalWrite:
  8425                           	opt stack 23
  8426                           
  8427                           ;iopin.c: 54: if(pin){
  8428                           
  8429                           ;incstack = 0
  8430  003FEA  0100               	movlb	0	; () banked
  8431  003FEC  5180               	movf	digitalWrite@pin& (0+255),w,b
  8432  003FEE  0100               	movlb	0	; () banked
  8433  003FF0  1181               	iorwf	(digitalWrite@pin+1)& (0+255),w,b
  8434  003FF2  B4D8               	btfsc	status,2,c
  8435  003FF4  0012               	return	
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;iopin.c: 55: int p = 1 << pin[1];
  8439  003FF6  0100               	movlb	0	; () banked
  8440  003FF8  EE20 F002          	lfsr	2,2
  8441  003FFC  5180               	movf	digitalWrite@pin& (0+255),w,b
  8442  003FFE  26D9               	addwf	fsr2l,f,c
  8443  004000  5181               	movf	(digitalWrite@pin+1)& (0+255),w,b
  8444  004002  22DA               	addwfc	fsr2h,f,c
  8445  004004  50DF               	movf	indf2,w,c
  8446  004006  0100               	movlb	0	; () banked
  8447  004008  6F84               	movwf	??_digitalWrite& (0+255),b
  8448  00400A  0E01               	movlw	1
  8449  00400C  0100               	movlb	0	; () banked
  8450  00400E  6F85               	movwf	(??_digitalWrite+1)& (0+255),b
  8451  004010  0E00               	movlw	0
  8452  004012  0100               	movlb	0	; () banked
  8453  004014  6F86               	movwf	(??_digitalWrite+2)& (0+255),b
  8454  004016  0100               	movlb	0	; () banked
  8455  004018  2B84               	incf	??_digitalWrite& (0+255),f,b
  8456  00401A  D004               	goto	u5524
  8457  00401C                     u5525:
  8458  00401C  90D8               	bcf	status,0,c
  8459  00401E  0100               	movlb	0	; () banked
  8460  004020  3785               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  8461  004022  3786               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  8462  004024                     u5524:
  8463  004024  0100               	movlb	0	; () banked
  8464  004026  2F84               	decfsz	??_digitalWrite& (0+255),f,b
  8465  004028  D7F9               	goto	u5525
  8466  00402A  C085  F087         	movff	??_digitalWrite+1,digitalWrite@p
  8467  00402E  C086  F088         	movff	??_digitalWrite+2,digitalWrite@p+1
  8468                           
  8469                           ;iopin.c: 56: if(val == 0){
  8470  004032  0100               	movlb	0	; () banked
  8471  004034  5182               	movf	digitalWrite@val& (0+255),w,b
  8472  004036  0100               	movlb	0	; () banked
  8473  004038  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8474  00403A  A4D8               	btfss	status,2,c
  8475  00403C  D03C               	goto	l5389
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;iopin.c: 57: p ^= 0xff;
  8479  00403E  0EFF               	movlw	255
  8480  004040  0100               	movlb	0	; () banked
  8481  004042  1B87               	xorwf	digitalWrite@p& (0+255),f,b
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;iopin.c: 58: }
  8485                           ;iopin.c: 60: switch(pin[0]){
  8486  004044  D038               	goto	l5389
  8487  004046                     l5365:
  8488                           
  8489                           ; BSR set to: 0
  8490  004046  0100               	movlb	0	; () banked
  8491  004048  0582               	decf	digitalWrite@val& (0+255),w,b
  8492  00404A  0100               	movlb	0	; () banked
  8493  00404C  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8494  00404E  A4D8               	btfss	status,2,c
  8495  004050  D004               	goto	l5369
  8496                           
  8497                           ; BSR set to: 0
  8498  004052  0100               	movlb	0	; () banked
  8499  004054  5187               	movf	digitalWrite@p& (0+255),w,b
  8500  004056  1289               	iorwf	3977,f,c	;volatile
  8501  004058  0012               	return	
  8502  00405A                     l5369:
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;iopin.c: 62: else LATA &= p;
  8506  00405A  0100               	movlb	0	; () banked
  8507  00405C  5187               	movf	digitalWrite@p& (0+255),w,b
  8508  00405E  1689               	andwf	3977,f,c	;volatile
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;iopin.c: 63: break;
  8512  004060  0012               	return	
  8513  004062                     l5371:
  8514                           
  8515                           ; BSR set to: 0
  8516  004062  0100               	movlb	0	; () banked
  8517  004064  0582               	decf	digitalWrite@val& (0+255),w,b
  8518  004066  0100               	movlb	0	; () banked
  8519  004068  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8520  00406A  A4D8               	btfss	status,2,c
  8521  00406C  D004               	goto	l5375
  8522                           
  8523                           ; BSR set to: 0
  8524  00406E  0100               	movlb	0	; () banked
  8525  004070  5187               	movf	digitalWrite@p& (0+255),w,b
  8526  004072  128A               	iorwf	3978,f,c	;volatile
  8527  004074  0012               	return	
  8528  004076                     l5375:
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;iopin.c: 65: else LATB &= p;
  8532  004076  0100               	movlb	0	; () banked
  8533  004078  5187               	movf	digitalWrite@p& (0+255),w,b
  8534  00407A  168A               	andwf	3978,f,c	;volatile
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;iopin.c: 66: break;
  8538  00407C  0012               	return	
  8539  00407E                     l5377:
  8540                           
  8541                           ; BSR set to: 0
  8542  00407E  0100               	movlb	0	; () banked
  8543  004080  0582               	decf	digitalWrite@val& (0+255),w,b
  8544  004082  0100               	movlb	0	; () banked
  8545  004084  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8546  004086  A4D8               	btfss	status,2,c
  8547  004088  D004               	goto	l5381
  8548                           
  8549                           ; BSR set to: 0
  8550  00408A  0100               	movlb	0	; () banked
  8551  00408C  5187               	movf	digitalWrite@p& (0+255),w,b
  8552  00408E  128B               	iorwf	3979,f,c	;volatile
  8553  004090  0012               	return	
  8554  004092                     l5381:
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;iopin.c: 68: else LATC &= p;
  8558  004092  0100               	movlb	0	; () banked
  8559  004094  5187               	movf	digitalWrite@p& (0+255),w,b
  8560  004096  168B               	andwf	3979,f,c	;volatile
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;iopin.c: 69: break;
  8564  004098  0012               	return	
  8565  00409A                     l5383:
  8566                           
  8567                           ; BSR set to: 0
  8568  00409A  0100               	movlb	0	; () banked
  8569  00409C  0582               	decf	digitalWrite@val& (0+255),w,b
  8570  00409E  0100               	movlb	0	; () banked
  8571  0040A0  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8572  0040A2  A4D8               	btfss	status,2,c
  8573  0040A4  D004               	goto	l5387
  8574                           
  8575                           ; BSR set to: 0
  8576  0040A6  0100               	movlb	0	; () banked
  8577  0040A8  5187               	movf	digitalWrite@p& (0+255),w,b
  8578  0040AA  128C               	iorwf	3980,f,c	;volatile
  8579  0040AC  0012               	return	
  8580  0040AE                     l5387:
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;iopin.c: 71: else LATD &= p;
  8584  0040AE  0100               	movlb	0	; () banked
  8585  0040B0  5187               	movf	digitalWrite@p& (0+255),w,b
  8586  0040B2  168C               	andwf	3980,f,c	;volatile
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;iopin.c: 72: }
  8590  0040B4  0012               	return	
  8591  0040B6                     l5389:
  8592                           
  8593                           ; BSR set to: 0
  8594  0040B6  C080  FFD9         	movff	digitalWrite@pin,fsr2l
  8595  0040BA  C081  FFDA         	movff	digitalWrite@pin+1,fsr2h
  8596  0040BE  CFDE F084          	movff	postinc2,??_digitalWrite
  8597  0040C2  CFDD F085          	movff	postdec2,??_digitalWrite+1
  8598                           
  8599                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8600                           ; Switch size 1, requested type "space"
  8601                           ; Number of cases is 1, Range of values is 0 to 0
  8602                           ; switch strategies available:
  8603                           ; Name         Instructions Cycles
  8604                           ; simple_byte            4     3 (average)
  8605                           ;	Chosen strategy is simple_byte
  8606  0040C6  0100               	movlb	0	; () banked
  8607  0040C8  5185               	movf	(??_digitalWrite+1)& (0+255),w,b
  8608  0040CA  0A00               	xorlw	0	; case 0
  8609  0040CC  A4D8               	btfss	status,2,c
  8610  0040CE  0012               	return	
  8611                           
  8612                           ; BSR set to: 0
  8613                           ; Switch size 1, requested type "space"
  8614                           ; Number of cases is 4, Range of values is 0 to 3
  8615                           ; switch strategies available:
  8616                           ; Name         Instructions Cycles
  8617                           ; simple_byte           13     7 (average)
  8618                           ;	Chosen strategy is simple_byte
  8619  0040D0  0100               	movlb	0	; () banked
  8620  0040D2  5184               	movf	??_digitalWrite& (0+255),w,b
  8621  0040D4  0A00               	xorlw	0	; case 0
  8622  0040D6  B4D8               	btfsc	status,2,c
  8623  0040D8  D7B6               	goto	l5365
  8624  0040DA  0A01               	xorlw	1	; case 1
  8625  0040DC  B4D8               	btfsc	status,2,c
  8626  0040DE  D7C1               	goto	l5371
  8627  0040E0  0A03               	xorlw	3	; case 2
  8628  0040E2  B4D8               	btfsc	status,2,c
  8629  0040E4  D7CC               	goto	l5377
  8630  0040E6  0A01               	xorlw	1	; case 3
  8631  0040E8  A4D8               	btfss	status,2,c
  8632                           
  8633                           ; BSR set to: 0
  8634  0040EA  0012               	return	
  8635  0040EC  D7D6               	goto	l5383
  8636  0040EE                     __end_of_digitalWrite:
  8637                           	opt stack 0
  8638                           tblptru	equ	0xFF8
  8639                           tblptrh	equ	0xFF7
  8640                           tblptrl	equ	0xFF6
  8641                           tablat	equ	0xFF5
  8642                           prodh	equ	0xFF4
  8643                           prodl	equ	0xFF3
  8644                           postinc0	equ	0xFEE
  8645                           wreg	equ	0xFE8
  8646                           postdec1	equ	0xFE5
  8647                           fsr1l	equ	0xFE1
  8648                           indf2	equ	0xFDF
  8649                           postinc2	equ	0xFDE
  8650                           postdec2	equ	0xFDD
  8651                           fsr2h	equ	0xFDA
  8652                           fsr2l	equ	0xFD9
  8653                           status	equ	0xFD8
  8654                           
  8655 ;; *************** function _digitalRead *****************
  8656 ;; Defined at:
  8657 ;;		line 43 in file "iopin.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;  pin             2    0[BANK0 ] PTR int 
  8660 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;		None
  8663 ;; Return value:  Size  Location     Type
  8664 ;;                  2    0[BANK0 ] int 
  8665 ;; Registers used:
  8666 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8667 ;; Tracked objects:
  8668 ;;		On entry : 0/0
  8669 ;;		On exit  : 0/0
  8670 ;;		Unchanged: 0/0
  8671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8675 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8676 ;;Total ram usage:        4 bytes
  8677 ;; Hardware stack levels used:    1
  8678 ;; Hardware stack levels required when called:    6
  8679 ;; This function calls:
  8680 ;;		Nothing
  8681 ;; This function is called by:
  8682 ;;		_main
  8683 ;;		_sortBattery
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           	psect	text22
  8688  003A66                     __ptext22:
  8689                           	opt stack 0
  8690  003A66                     _digitalRead:
  8691                           	opt stack 23
  8692                           
  8693                           ;iopin.c: 44: switch(pin[0]){
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;incstack = 0
  8697  003A66  D078               	goto	l5743
  8698  003A68                     l5725:
  8699  003A68  0100               	movlb	0	; () banked
  8700  003A6A  EE20 F002          	lfsr	2,2
  8701  003A6E  5180               	movf	digitalRead@pin& (0+255),w,b
  8702  003A70  26D9               	addwf	fsr2l,f,c
  8703  003A72  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8704  003A74  22DA               	addwfc	fsr2h,f,c
  8705  003A76  50DF               	movf	indf2,w,c
  8706  003A78  0100               	movlb	0	; () banked
  8707  003A7A  6F82               	movwf	??_digitalRead& (0+255),b
  8708  003A7C  CF80 F083          	movff	3968,??_digitalRead+1	;volatile
  8709  003A80  0100               	movlb	0	; () banked
  8710  003A82  2B82               	incf	??_digitalRead& (0+255),f,b
  8711  003A84  D003               	goto	u6154
  8712  003A86                     u6155:
  8713  003A86  0100               	movlb	0	; () banked
  8714  003A88  90D8               	bcf	status,0,c
  8715  003A8A  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8716  003A8C                     u6154:
  8717  003A8C  0100               	movlb	0	; () banked
  8718  003A8E  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8719  003A90  D7FA               	goto	u6155
  8720  003A92  0E01               	movlw	1
  8721  003A94  0100               	movlb	0	; () banked
  8722  003A96  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8723  003A98  0100               	movlb	0	; () banked
  8724  003A9A  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8725  003A9C  0100               	movlb	0	; () banked
  8726  003A9E  6F80               	movwf	?_digitalRead& (0+255),b
  8727  003AA0  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8728                           
  8729                           ; BSR set to: 0
  8730  003AA2  0012               	return	
  8731  003AA4                     l5729:
  8732                           
  8733                           ; BSR set to: 0
  8734  003AA4  0100               	movlb	0	; () banked
  8735  003AA6  EE20 F002          	lfsr	2,2
  8736  003AAA  5180               	movf	digitalRead@pin& (0+255),w,b
  8737  003AAC  26D9               	addwf	fsr2l,f,c
  8738  003AAE  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8739  003AB0  22DA               	addwfc	fsr2h,f,c
  8740  003AB2  50DF               	movf	indf2,w,c
  8741  003AB4  0100               	movlb	0	; () banked
  8742  003AB6  6F82               	movwf	??_digitalRead& (0+255),b
  8743  003AB8  CF81 F083          	movff	3969,??_digitalRead+1	;volatile
  8744  003ABC  0100               	movlb	0	; () banked
  8745  003ABE  2B82               	incf	??_digitalRead& (0+255),f,b
  8746  003AC0  D003               	goto	u6164
  8747  003AC2                     u6165:
  8748  003AC2  0100               	movlb	0	; () banked
  8749  003AC4  90D8               	bcf	status,0,c
  8750  003AC6  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8751  003AC8                     u6164:
  8752  003AC8  0100               	movlb	0	; () banked
  8753  003ACA  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8754  003ACC  D7FA               	goto	u6165
  8755  003ACE  0E01               	movlw	1
  8756  003AD0  0100               	movlb	0	; () banked
  8757  003AD2  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8758  003AD4  0100               	movlb	0	; () banked
  8759  003AD6  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8760  003AD8  0100               	movlb	0	; () banked
  8761  003ADA  6F80               	movwf	?_digitalRead& (0+255),b
  8762  003ADC  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8763                           
  8764                           ; BSR set to: 0
  8765  003ADE  0012               	return	
  8766  003AE0                     l5733:
  8767                           
  8768                           ; BSR set to: 0
  8769  003AE0  0100               	movlb	0	; () banked
  8770  003AE2  EE20 F002          	lfsr	2,2
  8771  003AE6  5180               	movf	digitalRead@pin& (0+255),w,b
  8772  003AE8  26D9               	addwf	fsr2l,f,c
  8773  003AEA  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8774  003AEC  22DA               	addwfc	fsr2h,f,c
  8775  003AEE  50DF               	movf	indf2,w,c
  8776  003AF0  0100               	movlb	0	; () banked
  8777  003AF2  6F82               	movwf	??_digitalRead& (0+255),b
  8778  003AF4  CF82 F083          	movff	3970,??_digitalRead+1	;volatile
  8779  003AF8  0100               	movlb	0	; () banked
  8780  003AFA  2B82               	incf	??_digitalRead& (0+255),f,b
  8781  003AFC  D003               	goto	u6174
  8782  003AFE                     u6175:
  8783  003AFE  0100               	movlb	0	; () banked
  8784  003B00  90D8               	bcf	status,0,c
  8785  003B02  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8786  003B04                     u6174:
  8787  003B04  0100               	movlb	0	; () banked
  8788  003B06  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8789  003B08  D7FA               	goto	u6175
  8790  003B0A  0E01               	movlw	1
  8791  003B0C  0100               	movlb	0	; () banked
  8792  003B0E  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8793  003B10  0100               	movlb	0	; () banked
  8794  003B12  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8795  003B14  0100               	movlb	0	; () banked
  8796  003B16  6F80               	movwf	?_digitalRead& (0+255),b
  8797  003B18  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8798                           
  8799                           ; BSR set to: 0
  8800  003B1A  0012               	return	
  8801  003B1C                     l5737:
  8802                           
  8803                           ; BSR set to: 0
  8804  003B1C  0100               	movlb	0	; () banked
  8805  003B1E  EE20 F002          	lfsr	2,2
  8806  003B22  5180               	movf	digitalRead@pin& (0+255),w,b
  8807  003B24  26D9               	addwf	fsr2l,f,c
  8808  003B26  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8809  003B28  22DA               	addwfc	fsr2h,f,c
  8810  003B2A  50DF               	movf	indf2,w,c
  8811  003B2C  0100               	movlb	0	; () banked
  8812  003B2E  6F82               	movwf	??_digitalRead& (0+255),b
  8813  003B30  CF83 F083          	movff	3971,??_digitalRead+1	;volatile
  8814  003B34  0100               	movlb	0	; () banked
  8815  003B36  2B82               	incf	??_digitalRead& (0+255),f,b
  8816  003B38  D003               	goto	u6184
  8817  003B3A                     u6185:
  8818  003B3A  0100               	movlb	0	; () banked
  8819  003B3C  90D8               	bcf	status,0,c
  8820  003B3E  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8821  003B40                     u6184:
  8822  003B40  0100               	movlb	0	; () banked
  8823  003B42  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8824  003B44  D7FA               	goto	u6185
  8825  003B46  0E01               	movlw	1
  8826  003B48  0100               	movlb	0	; () banked
  8827  003B4A  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8828  003B4C  0100               	movlb	0	; () banked
  8829  003B4E  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8830  003B50  0100               	movlb	0	; () banked
  8831  003B52  6F80               	movwf	?_digitalRead& (0+255),b
  8832  003B54  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8833                           
  8834                           ; BSR set to: 0
  8835  003B56  0012               	return	
  8836  003B58                     l5743:
  8837  003B58  C080  FFD9         	movff	digitalRead@pin,fsr2l
  8838  003B5C  C081  FFDA         	movff	digitalRead@pin+1,fsr2h
  8839  003B60  CFDE F082          	movff	postinc2,??_digitalRead
  8840  003B64  CFDD F083          	movff	postdec2,??_digitalRead+1
  8841                           
  8842                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8843                           ; Switch size 1, requested type "space"
  8844                           ; Number of cases is 1, Range of values is 0 to 0
  8845                           ; switch strategies available:
  8846                           ; Name         Instructions Cycles
  8847                           ; simple_byte            4     3 (average)
  8848                           ;	Chosen strategy is simple_byte
  8849  003B68  0100               	movlb	0	; () banked
  8850  003B6A  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8851  003B6C  0A00               	xorlw	0	; case 0
  8852  003B6E  A4D8               	btfss	status,2,c
  8853  003B70  D00E               	goto	l300
  8854                           
  8855                           ; BSR set to: 0
  8856                           ; Switch size 1, requested type "space"
  8857                           ; Number of cases is 4, Range of values is 0 to 3
  8858                           ; switch strategies available:
  8859                           ; Name         Instructions Cycles
  8860                           ; simple_byte           13     7 (average)
  8861                           ;	Chosen strategy is simple_byte
  8862  003B72  0100               	movlb	0	; () banked
  8863  003B74  5182               	movf	??_digitalRead& (0+255),w,b
  8864  003B76  0A00               	xorlw	0	; case 0
  8865  003B78  B4D8               	btfsc	status,2,c
  8866  003B7A  D776               	goto	l5725
  8867  003B7C  0A01               	xorlw	1	; case 1
  8868  003B7E  B4D8               	btfsc	status,2,c
  8869  003B80  D791               	goto	l5729
  8870  003B82  0A03               	xorlw	3	; case 2
  8871  003B84  B4D8               	btfsc	status,2,c
  8872  003B86  D7AC               	goto	l5733
  8873  003B88  0A01               	xorlw	1	; case 3
  8874  003B8A  B4D8               	btfsc	status,2,c
  8875  003B8C  D7C7               	goto	l5737
  8876  003B8E                     l300:
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;iopin.c: 50: return -1;
  8880  003B8E  0100               	movlb	0	; () banked
  8881  003B90  6980               	setf	?_digitalRead& (0+255),b
  8882  003B92  6981               	setf	(?_digitalRead+1)& (0+255),b
  8883                           
  8884                           ; BSR set to: 0
  8885  003B94  0012               	return		;funcret
  8886  003B96                     __end_of_digitalRead:
  8887                           	opt stack 0
  8888                           tblptru	equ	0xFF8
  8889                           tblptrh	equ	0xFF7
  8890                           tblptrl	equ	0xFF6
  8891                           tablat	equ	0xFF5
  8892                           prodh	equ	0xFF4
  8893                           prodl	equ	0xFF3
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           postdec1	equ	0xFE5
  8897                           fsr1l	equ	0xFE1
  8898                           indf2	equ	0xFDF
  8899                           postinc2	equ	0xFDE
  8900                           postdec2	equ	0xFDD
  8901                           fsr2h	equ	0xFDA
  8902                           fsr2l	equ	0xFD9
  8903                           status	equ	0xFD8
  8904                           
  8905 ;; *************** function _analogRead *****************
  8906 ;; Defined at:
  8907 ;;		line 90 in file "iopin.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  channel         2    0[BANK0 ] int 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;		None
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  4    0[BANK0 ] long 
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8921 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;Total ram usage:        6 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    6
  8928 ;; This function calls:
  8929 ;;		Nothing
  8930 ;; This function is called by:
  8931 ;;		_sortBattery
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text23
  8936  0050E8                     __ptext23:
  8937                           	opt stack 0
  8938  0050E8                     _analogRead:
  8939                           	opt stack 23
  8940                           
  8941                           ;iopin.c: 91: ADCON0 = channel<<2;
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;incstack = 0
  8945  0050E8  0100               	movlb	0	; () banked
  8946  0050EA  4580               	rlncf	analogRead@channel& (0+255),w,b
  8947  0050EC  46E8               	rlncf	wreg,f,c
  8948  0050EE  0BFC               	andlw	252
  8949  0050F0  6EC2               	movwf	4034,c	;volatile
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;iopin.c: 92: ADCON0 |= 1<<0;
  8953  0050F2  80C2               	bsf	4034,0,c	;volatile
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;iopin.c: 93: ADCON0 |= 1<<1;
  8957  0050F4  82C2               	bsf	4034,1,c	;volatile
  8958  0050F6                     l325:
  8959  0050F6  B2C2               	btfsc	4034,1,c	;volatile
  8960  0050F8  D7FE               	goto	l325
  8961                           
  8962                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  8963  0050FA  50C3               	movf	4035,w,c	;volatile
  8964  0050FC  CFC4 F084          	movff	4036,??_analogRead	;volatile
  8965  005100  0100               	movlb	0	; () banked
  8966  005102  6B85               	clrf	(??_analogRead+1)& (0+255),b
  8967  005104  C084  F085         	movff	??_analogRead,??_analogRead+1
  8968  005108  0100               	movlb	0	; () banked
  8969  00510A  6B84               	clrf	??_analogRead& (0+255),b
  8970  00510C  0100               	movlb	0	; () banked
  8971  00510E  2784               	addwf	??_analogRead& (0+255),f,b
  8972  005110  0E00               	movlw	0
  8973  005112  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  8974  005114  C084  F080         	movff	??_analogRead,?_analogRead
  8975  005118  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  8976  00511C  0100               	movlb	0	; () banked
  8977  00511E  0E00               	movlw	0
  8978  005120  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  8979  005122  0EFF               	movlw	-1
  8980  005124  6F82               	movwf	(?_analogRead+2)& (0+255),b
  8981  005126  6F83               	movwf	(?_analogRead+3)& (0+255),b
  8982  005128  0012               	return	
  8983  00512A                     __end_of_analogRead:
  8984                           	opt stack 0
  8985                           tblptru	equ	0xFF8
  8986                           tblptrh	equ	0xFF7
  8987                           tblptrl	equ	0xFF6
  8988                           tablat	equ	0xFF5
  8989                           prodh	equ	0xFF4
  8990                           prodl	equ	0xFF3
  8991                           postinc0	equ	0xFEE
  8992                           wreg	equ	0xFE8
  8993                           postdec1	equ	0xFE5
  8994                           fsr1l	equ	0xFE1
  8995                           indf2	equ	0xFDF
  8996                           postinc2	equ	0xFDE
  8997                           postdec2	equ	0xFDD
  8998                           fsr2h	equ	0xFDA
  8999                           fsr2l	equ	0xFD9
  9000                           status	equ	0xFD8
  9001                           
  9002 ;; *************** function _pinSetup *****************
  9003 ;; Defined at:
  9004 ;;		line 226 in file "main.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;		None
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;		None
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  1    wreg      void 
  9011 ;; Registers used:
  9012 ;;		wreg, status,2, status,0
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;Total ram usage:        0 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    6
  9025 ;; This function calls:
  9026 ;;		Nothing
  9027 ;; This function is called by:
  9028 ;;		_main
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           	psect	text24
  9033  00516A                     __ptext24:
  9034                           	opt stack 0
  9035  00516A                     _pinSetup:
  9036                           	opt stack 24
  9037                           
  9038                           ;main.c: 232: TRISA = 0xFF;
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;incstack = 0
  9042  00516A  6892               	setf	3986,c	;volatile
  9043                           
  9044                           ;main.c: 233: TRISB = 0xFF;
  9045  00516C  6893               	setf	3987,c	;volatile
  9046                           
  9047                           ;main.c: 234: TRISC = 0b11000000;
  9048  00516E  0EC0               	movlw	192
  9049  005170  6E94               	movwf	3988,c	;volatile
  9050                           
  9051                           ;main.c: 235: TRISD = 0x00;
  9052  005172  0E00               	movlw	0
  9053  005174  6E95               	movwf	3989,c	;volatile
  9054                           
  9055                           ;main.c: 236: TRISE = 0x00;
  9056  005176  0E00               	movlw	0
  9057  005178  6E96               	movwf	3990,c	;volatile
  9058                           
  9059                           ;main.c: 238: LATA = 0x00;
  9060  00517A  0E00               	movlw	0
  9061  00517C  6E89               	movwf	3977,c	;volatile
  9062                           
  9063                           ;main.c: 239: LATB = 0x00;
  9064  00517E  0E00               	movlw	0
  9065  005180  6E8A               	movwf	3978,c	;volatile
  9066                           
  9067                           ;main.c: 240: LATC = 0x00;
  9068  005182  0E00               	movlw	0
  9069  005184  6E8B               	movwf	3979,c	;volatile
  9070                           
  9071                           ;main.c: 241: LATD = 0x00;
  9072  005186  0E00               	movlw	0
  9073  005188  6E8C               	movwf	3980,c	;volatile
  9074                           
  9075                           ;main.c: 242: LATE = 0x00;
  9076  00518A  0E00               	movlw	0
  9077  00518C  6E8D               	movwf	3981,c	;volatile
  9078                           
  9079                           ;main.c: 244: ADCON0 = 0x00;
  9080  00518E  0E00               	movlw	0
  9081  005190  6EC2               	movwf	4034,c	;volatile
  9082                           
  9083                           ;main.c: 246: ADCON1 |= 0x0B;
  9084  005192  0E0B               	movlw	11
  9085  005194  12C1               	iorwf	4033,f,c	;volatile
  9086                           
  9087                           ;main.c: 251: ADCON2 = 0;
  9088  005196  0E00               	movlw	0
  9089  005198  6EC0               	movwf	4032,c	;volatile
  9090                           
  9091                           ;main.c: 252: ADCON2 |= 0b010;
  9092  00519A  82C0               	bsf	4032,1,c	;volatile
  9093                           
  9094                           ;main.c: 253: ADCON2 |= 0b110<<3;
  9095  00519C  0E30               	movlw	48
  9096  00519E  12C0               	iorwf	4032,f,c	;volatile
  9097                           
  9098                           ;main.c: 254: ADCON2 |= 1<<7;
  9099  0051A0  8EC0               	bsf	4032,7,c	;volatile
  9100                           
  9101                           ;main.c: 258: INT0IE = 1;
  9102  0051A2  88F2               	bsf	intcon,4,c	;volatile
  9103                           
  9104                           ;main.c: 259: (INTCONbits.GIE = 1);
  9105  0051A4  8EF2               	bsf	intcon,7,c	;volatile
  9106  0051A6  0012               	return		;funcret
  9107  0051A8                     __end_of_pinSetup:
  9108                           	opt stack 0
  9109                           tblptru	equ	0xFF8
  9110                           tblptrh	equ	0xFF7
  9111                           tblptrl	equ	0xFF6
  9112                           tablat	equ	0xFF5
  9113                           prodh	equ	0xFF4
  9114                           prodl	equ	0xFF3
  9115                           intcon	equ	0xFF2
  9116                           postinc0	equ	0xFEE
  9117                           wreg	equ	0xFE8
  9118                           postdec1	equ	0xFE5
  9119                           fsr1l	equ	0xFE1
  9120                           indf2	equ	0xFDF
  9121                           postinc2	equ	0xFDE
  9122                           postdec2	equ	0xFDD
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function _lcdHome *****************
  9128 ;; Defined at:
  9129 ;;		line 70 in file "lcd.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;		None
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;		None
  9134 ;; Return value:  Size  Location     Type
  9135 ;;                  2   18[None  ] int 
  9136 ;; Registers used:
  9137 ;;		wreg, status,2, status,0, cstack
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;Total ram usage:        0 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:    8
  9150 ;; This function calls:
  9151 ;;		_lcdInst
  9152 ;; This function is called by:
  9153 ;;		_main
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           	psect	text25
  9158  0053AE                     __ptext25:
  9159                           	opt stack 0
  9160  0053AE                     _lcdHome:
  9161                           	opt stack 22
  9162                           
  9163                           ;lcd.c: 71: lcdInst(0b11000000);
  9164                           
  9165                           ;incstack = 0
  9166  0053AE  0EC0               	movlw	192
  9167  0053B0  EC50  F029         	call	_lcdInst
  9168  0053B4  0012               	return		;funcret
  9169  0053B6                     __end_of_lcdHome:
  9170                           	opt stack 0
  9171                           tblptru	equ	0xFF8
  9172                           tblptrh	equ	0xFF7
  9173                           tblptrl	equ	0xFF6
  9174                           tablat	equ	0xFF5
  9175                           prodh	equ	0xFF4
  9176                           prodl	equ	0xFF3
  9177                           intcon	equ	0xFF2
  9178                           postinc0	equ	0xFEE
  9179                           wreg	equ	0xFE8
  9180                           postdec1	equ	0xFE5
  9181                           fsr1l	equ	0xFE1
  9182                           indf2	equ	0xFDF
  9183                           postinc2	equ	0xFDE
  9184                           postdec2	equ	0xFDD
  9185                           fsr2h	equ	0xFDA
  9186                           fsr2l	equ	0xFD9
  9187                           status	equ	0xFD8
  9188                           
  9189 ;; *************** function _initServo *****************
  9190 ;; Defined at:
  9191 ;;		line 21 in file "servo.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;  motor           2  118[BANK0 ] PTR int 
  9194 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9195 ;;  angle           2  120[BANK0 ] int 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;		None
  9198 ;; Return value:  Size  Location     Type
  9199 ;;                  1    wreg      void 
  9200 ;; Registers used:
  9201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9207 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9209 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;Total ram usage:        8 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:   10
  9214 ;; This function calls:
  9215 ;;		_initTimer
  9216 ;;		_setAngle
  9217 ;;		_startTimer
  9218 ;; This function is called by:
  9219 ;;		_main
  9220 ;; This function uses a non-reentrant model
  9221 ;;
  9222                           
  9223                           	psect	text26
  9224  004ABE                     __ptext26:
  9225                           	opt stack 0
  9226  004ABE                     _initServo:
  9227                           	opt stack 20
  9228                           
  9229                           ;servo.c: 22: n++;
  9230                           
  9231                           ;incstack = 0
  9232  004ABE  0100               	movlb	0	; () banked
  9233  004AC0  4BFE               	infsnz	_n& (0+255),f,b
  9234  004AC2  2BFF               	incf	(_n+1)& (0+255),f,b
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;servo.c: 23: servos[n-1] = motor;
  9238  004AC4  0EFE               	movlw	254
  9239  004AC6  0100               	movlb	0	; () banked
  9240  004AC8  6FFA               	movwf	??_initServo& (0+255),b
  9241  004ACA  0EFF               	movlw	255
  9242  004ACC  0100               	movlb	0	; () banked
  9243  004ACE  6FFB               	movwf	(??_initServo+1)& (0+255),b
  9244  004AD0  C0FE  F0FC         	movff	_n,??_initServo+2
  9245  004AD4  C0FF  F0FD         	movff	_n+1,??_initServo+3
  9246  004AD8  90D8               	bcf	status,0,c
  9247  004ADA  0100               	movlb	0	; () banked
  9248  004ADC  37FC               	rlcf	(??_initServo+2)& (0+255),f,b
  9249  004ADE  37FD               	rlcf	(??_initServo+3)& (0+255),f,b
  9250  004AE0  0100               	movlb	0	; () banked
  9251  004AE2  51FA               	movf	??_initServo& (0+255),w,b
  9252  004AE4  0100               	movlb	0	; () banked
  9253  004AE6  27FC               	addwf	(??_initServo+2)& (0+255),f,b
  9254  004AE8  0100               	movlb	0	; () banked
  9255  004AEA  51FB               	movf	(??_initServo+1)& (0+255),w,b
  9256  004AEC  0100               	movlb	0	; () banked
  9257  004AEE  23FD               	addwfc	(??_initServo+3)& (0+255),f,b
  9258  004AF0  0E8E               	movlw	low _servos
  9259  004AF2  0100               	movlb	0	; () banked
  9260  004AF4  25FC               	addwf	(??_initServo+2)& (0+255),w,b
  9261  004AF6  6ED9               	movwf	fsr2l,c
  9262  004AF8  0E01               	movlw	high _servos
  9263  004AFA  0100               	movlb	0	; () banked
  9264  004AFC  21FD               	addwfc	(??_initServo+3)& (0+255),w,b
  9265  004AFE  6EDA               	movwf	fsr2h,c
  9266  004B00  C0F6  FFDE         	movff	initServo@motor,postinc2
  9267  004B04  C0F7  FFDD         	movff	initServo@motor+1,postdec2
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;servo.c: 24: setAngle(motor, angle);
  9271  004B08  C0F6  F0EC         	movff	initServo@motor,setAngle@motor
  9272  004B0C  C0F7  F0ED         	movff	initServo@motor+1,setAngle@motor+1
  9273  004B10  C0F8  F0EE         	movff	initServo@angle,setAngle@angle
  9274  004B14  C0F9  F0EF         	movff	initServo@angle+1,setAngle@angle+1
  9275  004B18  ECE4  F021         	call	_setAngle	;wreg free
  9276                           
  9277                           ;servo.c: 26: initTimer(0);
  9278  004B1C  0E00               	movlw	0
  9279  004B1E  0100               	movlb	0	; () banked
  9280  004B20  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  9281  004B22  0E00               	movlw	0
  9282  004B24  6F80               	movwf	initTimer@timer& (0+255),b
  9283  004B26  EC97  F027         	call	_initTimer	;wreg free
  9284                           
  9285                           ;servo.c: 27: startTimer(0,0);
  9286  004B2A  0E00               	movlw	0
  9287  004B2C  0100               	movlb	0	; () banked
  9288  004B2E  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  9289  004B30  0E00               	movlw	0
  9290  004B32  6F80               	movwf	startTimer@timer& (0+255),b
  9291  004B34  0E00               	movlw	0
  9292  004B36  0100               	movlb	0	; () banked
  9293  004B38  6F82               	movwf	startTimer@val& (0+255),b
  9294  004B3A  0E00               	movlw	0
  9295  004B3C  6F83               	movwf	(startTimer@val+1)& (0+255),b
  9296  004B3E  0E00               	movlw	0
  9297  004B40  6F84               	movwf	(startTimer@val+2)& (0+255),b
  9298  004B42  0E00               	movlw	0
  9299  004B44  6F85               	movwf	(startTimer@val+3)& (0+255),b
  9300  004B46  EC6F  F027         	call	_startTimer	;wreg free
  9301  004B4A  0012               	return		;funcret
  9302  004B4C                     __end_of_initServo:
  9303                           	opt stack 0
  9304                           tblptru	equ	0xFF8
  9305                           tblptrh	equ	0xFF7
  9306                           tblptrl	equ	0xFF6
  9307                           tablat	equ	0xFF5
  9308                           prodh	equ	0xFF4
  9309                           prodl	equ	0xFF3
  9310                           intcon	equ	0xFF2
  9311                           postinc0	equ	0xFEE
  9312                           wreg	equ	0xFE8
  9313                           postdec1	equ	0xFE5
  9314                           fsr1l	equ	0xFE1
  9315                           indf2	equ	0xFDF
  9316                           postinc2	equ	0xFDE
  9317                           postdec2	equ	0xFDD
  9318                           fsr2h	equ	0xFDA
  9319                           fsr2l	equ	0xFD9
  9320                           status	equ	0xFD8
  9321                           
  9322 ;; *************** function _startTimer *****************
  9323 ;; Defined at:
  9324 ;;		line 76 in file "timer.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;  timer           2    0[BANK0 ] int 
  9327 ;;  val             4    2[BANK0 ] long 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  1    wreg      void 
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9339 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;Total ram usage:        8 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    6
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		_main
  9350 ;;		_initServo
  9351 ;;		_testFrequency
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           	psect	text27
  9356  004EDE                     __ptext27:
  9357                           	opt stack 0
  9358  004EDE                     _startTimer:
  9359                           	opt stack 24
  9360                           
  9361                           ;timer.c: 77: switch(timer){
  9362                           
  9363                           ;incstack = 0
  9364  004EDE  D012               	goto	l5349
  9365  004EE0                     l406:
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;timer.c: 79: TMR0H = val>>8;
  9369  004EE0  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  9370                           
  9371                           ;timer.c: 80: TMR0L = val;
  9372  004EE4  C082  FFD6         	movff	startTimer@val,4054	;volatile
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;timer.c: 81: T0CON |= 1<<7;
  9376  004EE8  8ED5               	bsf	4053,7,c	;volatile
  9377                           
  9378                           ;timer.c: 82: break;
  9379  004EEA  0012               	return	
  9380  004EEC                     l408:
  9381                           
  9382                           ; BSR set to: 0
  9383                           ;timer.c: 84: TMR1H = val>>8;
  9384  004EEC  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  9385                           
  9386                           ;timer.c: 85: TMR1L = val;
  9387  004EF0  C082  FFCE         	movff	startTimer@val,4046	;volatile
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;timer.c: 86: T1CON |= 1<<0;
  9391  004EF4  80CD               	bsf	4045,0,c	;volatile
  9392                           
  9393                           ;timer.c: 87: break;
  9394  004EF6  0012               	return	
  9395  004EF8                     l409:
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;timer.c: 89: TMR3H = val>>8;
  9399  004EF8  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  9400                           
  9401                           ;timer.c: 90: TMR3L = val;
  9402  004EFC  C082  FFB2         	movff	startTimer@val,4018	;volatile
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;timer.c: 91: T3CON |= 1<<0;
  9406  004F00  80B1               	bsf	4017,0,c	;volatile
  9407                           
  9408                           ;timer.c: 92: }
  9409  004F02  0012               	return	
  9410  004F04                     l5349:
  9411  004F04  C080  F086         	movff	startTimer@timer,??_startTimer
  9412  004F08  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  9413                           
  9414                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9415                           ; Switch size 1, requested type "space"
  9416                           ; Number of cases is 1, Range of values is 0 to 0
  9417                           ; switch strategies available:
  9418                           ; Name         Instructions Cycles
  9419                           ; simple_byte            4     3 (average)
  9420                           ;	Chosen strategy is simple_byte
  9421  004F0C  0100               	movlb	0	; () banked
  9422  004F0E  5187               	movf	(??_startTimer+1)& (0+255),w,b
  9423  004F10  0A00               	xorlw	0	; case 0
  9424  004F12  A4D8               	btfss	status,2,c
  9425  004F14  0012               	return	
  9426                           
  9427                           ; BSR set to: 0
  9428                           ; Switch size 1, requested type "space"
  9429                           ; Number of cases is 3, Range of values is 0 to 3
  9430                           ; switch strategies available:
  9431                           ; Name         Instructions Cycles
  9432                           ; simple_byte           10     6 (average)
  9433                           ;	Chosen strategy is simple_byte
  9434  004F16  0100               	movlb	0	; () banked
  9435  004F18  5186               	movf	??_startTimer& (0+255),w,b
  9436  004F1A  0A00               	xorlw	0	; case 0
  9437  004F1C  B4D8               	btfsc	status,2,c
  9438  004F1E  D7E0               	goto	l406
  9439  004F20  0A01               	xorlw	1	; case 1
  9440  004F22  B4D8               	btfsc	status,2,c
  9441  004F24  D7E3               	goto	l408
  9442  004F26  0A02               	xorlw	2	; case 3
  9443  004F28  A4D8               	btfss	status,2,c
  9444  004F2A  0012               	return	
  9445  004F2C  D7E5               	goto	l409
  9446  004F2E                     __end_of_startTimer:
  9447                           	opt stack 0
  9448                           tblptru	equ	0xFF8
  9449                           tblptrh	equ	0xFF7
  9450                           tblptrl	equ	0xFF6
  9451                           tablat	equ	0xFF5
  9452                           prodh	equ	0xFF4
  9453                           prodl	equ	0xFF3
  9454                           intcon	equ	0xFF2
  9455                           postinc0	equ	0xFEE
  9456                           wreg	equ	0xFE8
  9457                           postdec1	equ	0xFE5
  9458                           fsr1l	equ	0xFE1
  9459                           indf2	equ	0xFDF
  9460                           postinc2	equ	0xFDE
  9461                           postdec2	equ	0xFDD
  9462                           fsr2h	equ	0xFDA
  9463                           fsr2l	equ	0xFD9
  9464                           status	equ	0xFD8
  9465                           
  9466 ;; *************** function _setAngle *****************
  9467 ;; Defined at:
  9468 ;;		line 41 in file "servo.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;  motor           2  108[BANK0 ] PTR int 
  9471 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9472 ;;  angle           2  110[BANK0 ] int 
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  i               2  116[BANK0 ] int 
  9475 ;;  period          2  114[BANK0 ] unsigned int 
  9476 ;; Return value:  Size  Location     Type
  9477 ;;                  1    wreg      void 
  9478 ;; Registers used:
  9479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9480 ;; Tracked objects:
  9481 ;;		On entry : 0/0
  9482 ;;		On exit  : 0/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9485 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9487 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9489 ;;Total ram usage:       10 bytes
  9490 ;; Hardware stack levels used:    1
  9491 ;; Hardware stack levels required when called:    9
  9492 ;; This function calls:
  9493 ;;		_angleToPulse
  9494 ;; This function is called by:
  9495 ;;		_sortBattery
  9496 ;;		_initServo
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           	psect	text28
  9501  0043C8                     __ptext28:
  9502                           	opt stack 0
  9503  0043C8                     _setAngle:
  9504                           	opt stack 20
  9505                           
  9506                           ;servo.c: 42: unsigned int period = 50000;
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;incstack = 0
  9510  0043C8  0EC3               	movlw	195
  9511  0043CA  0100               	movlb	0	; () banked
  9512  0043CC  6FF3               	movwf	(setAngle@period+1)& (0+255),b
  9513  0043CE  0E50               	movlw	80
  9514  0043D0  6FF2               	movwf	setAngle@period& (0+255),b
  9515                           
  9516                           ;servo.c: 43: for(int i = 0; i < n; i++){
  9517  0043D2  0E00               	movlw	0
  9518  0043D4  0100               	movlb	0	; () banked
  9519  0043D6  6FF5               	movwf	(setAngle@i+1)& (0+255),b
  9520  0043D8  0E00               	movlw	0
  9521  0043DA  6FF4               	movwf	setAngle@i& (0+255),b
  9522  0043DC  D03F               	goto	l5759
  9523  0043DE                     l5751:
  9524                           
  9525                           ; BSR set to: 0
  9526                           ;servo.c: 44: if(servos[i] == motor){
  9527  0043DE  90D8               	bcf	status,0,c
  9528  0043E0  0100               	movlb	0	; () banked
  9529  0043E2  35F4               	rlcf	setAngle@i& (0+255),w,b
  9530  0043E4  6ED9               	movwf	fsr2l,c
  9531  0043E6  0100               	movlb	0	; () banked
  9532  0043E8  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9533  0043EA  6EDA               	movwf	fsr2h,c
  9534  0043EC  0E8E               	movlw	low _servos
  9535  0043EE  26D9               	addwf	fsr2l,f,c
  9536  0043F0  0E01               	movlw	high _servos
  9537  0043F2  22DA               	addwfc	fsr2h,f,c
  9538  0043F4  0100               	movlb	0	; () banked
  9539  0043F6  51EC               	movf	setAngle@motor& (0+255),w,b
  9540  0043F8  18DE               	xorwf	postinc2,w,c
  9541  0043FA  E11C               	bnz	l5755
  9542  0043FC  0100               	movlb	0	; () banked
  9543  0043FE  51ED               	movf	(setAngle@motor+1)& (0+255),w,b
  9544  004400  18DE               	xorwf	postinc2,w,c
  9545  004402  A4D8               	btfss	status,2,c
  9546  004404  D017               	goto	l5755
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
  9550  004406  C0EE  F0D5         	movff	setAngle@angle,angleToPulse@angle
  9551  00440A  C0EF  F0D6         	movff	setAngle@angle+1,angleToPulse@angle+1
  9552  00440E  EC53  F019         	call	_angleToPulse	;wreg free
  9553  004412  90D8               	bcf	status,0,c
  9554  004414  0100               	movlb	0	; () banked
  9555  004416  35F4               	rlcf	setAngle@i& (0+255),w,b
  9556  004418  6ED9               	movwf	fsr2l,c
  9557  00441A  0100               	movlb	0	; () banked
  9558  00441C  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9559  00441E  6EDA               	movwf	fsr2h,c
  9560  004420  0E86               	movlw	low _pulse
  9561  004422  26D9               	addwf	fsr2l,f,c
  9562  004424  0E01               	movlw	high _pulse
  9563  004426  22DA               	addwfc	fsr2h,f,c
  9564  004428  0100               	movlb	0	; () banked
  9565  00442A  C0D5  FFDE         	movff	?_angleToPulse,postinc2
  9566  00442E  0100               	movlb	0	; () banked
  9567  004430  C0D6  FFDD         	movff	?_angleToPulse+1,postdec2
  9568  004434                     l5755:
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;servo.c: 46: }
  9572                           ;servo.c: 47: period-=pulse[i];
  9573  004434  90D8               	bcf	status,0,c
  9574  004436  0100               	movlb	0	; () banked
  9575  004438  35F4               	rlcf	setAngle@i& (0+255),w,b
  9576  00443A  6ED9               	movwf	fsr2l,c
  9577  00443C  0100               	movlb	0	; () banked
  9578  00443E  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9579  004440  6EDA               	movwf	fsr2h,c
  9580  004442  0E86               	movlw	low _pulse
  9581  004444  26D9               	addwf	fsr2l,f,c
  9582  004446  0E01               	movlw	high _pulse
  9583  004448  22DA               	addwfc	fsr2h,f,c
  9584  00444A  50DE               	movf	postinc2,w,c
  9585  00444C  0100               	movlb	0	; () banked
  9586  00444E  5FF2               	subwf	setAngle@period& (0+255),f,b
  9587  004450  50DD               	movf	postdec2,w,c
  9588  004452  0100               	movlb	0	; () banked
  9589  004454  5BF3               	subwfb	(setAngle@period+1)& (0+255),f,b
  9590                           
  9591                           ; BSR set to: 0
  9592  004456  0100               	movlb	0	; () banked
  9593  004458  4BF4               	infsnz	setAngle@i& (0+255),f,b
  9594  00445A  2BF5               	incf	(setAngle@i+1)& (0+255),f,b
  9595  00445C                     l5759:
  9596                           
  9597                           ; BSR set to: 0
  9598  00445C  0100               	movlb	0	; () banked
  9599  00445E  51FE               	movf	_n& (0+255),w,b
  9600  004460  0100               	movlb	0	; () banked
  9601  004462  5DF4               	subwf	setAngle@i& (0+255),w,b
  9602  004464  0100               	movlb	0	; () banked
  9603  004466  51F5               	movf	(setAngle@i+1)& (0+255),w,b
  9604  004468  0A80               	xorlw	128
  9605  00446A  0100               	movlb	0	; () banked
  9606  00446C  6FF0               	movwf	??_setAngle& (0+255),b
  9607  00446E  0100               	movlb	0	; () banked
  9608  004470  51FF               	movf	(_n+1)& (0+255),w,b
  9609  004472  0A80               	xorlw	128
  9610  004474  0100               	movlb	0	; () banked
  9611  004476  59F0               	subwfb	??_setAngle& (0+255),w,b
  9612  004478  A0D8               	btfss	status,0,c
  9613  00447A  D7B1               	goto	l5751
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;servo.c: 48: }
  9617                           ;servo.c: 49: pulse[n] = period;
  9618                           
  9619                           ; BSR set to: 0
  9620  00447C  90D8               	bcf	status,0,c
  9621  00447E  0100               	movlb	0	; () banked
  9622  004480  35FE               	rlcf	_n& (0+255),w,b
  9623  004482  6ED9               	movwf	fsr2l,c
  9624  004484  0100               	movlb	0	; () banked
  9625  004486  35FF               	rlcf	(_n+1)& (0+255),w,b
  9626  004488  6EDA               	movwf	fsr2h,c
  9627  00448A  0E86               	movlw	low _pulse
  9628  00448C  26D9               	addwf	fsr2l,f,c
  9629  00448E  0E01               	movlw	high _pulse
  9630  004490  22DA               	addwfc	fsr2h,f,c
  9631  004492  C0F2  FFDE         	movff	setAngle@period,postinc2
  9632  004496  C0F3  FFDD         	movff	setAngle@period+1,postdec2
  9633                           
  9634                           ; BSR set to: 0
  9635  00449A  0012               	return		;funcret
  9636  00449C                     __end_of_setAngle:
  9637                           	opt stack 0
  9638                           tblptru	equ	0xFF8
  9639                           tblptrh	equ	0xFF7
  9640                           tblptrl	equ	0xFF6
  9641                           tablat	equ	0xFF5
  9642                           prodh	equ	0xFF4
  9643                           prodl	equ	0xFF3
  9644                           intcon	equ	0xFF2
  9645                           postinc0	equ	0xFEE
  9646                           wreg	equ	0xFE8
  9647                           postdec1	equ	0xFE5
  9648                           fsr1l	equ	0xFE1
  9649                           indf2	equ	0xFDF
  9650                           postinc2	equ	0xFDE
  9651                           postdec2	equ	0xFDD
  9652                           fsr2h	equ	0xFDA
  9653                           fsr2l	equ	0xFD9
  9654                           status	equ	0xFD8
  9655                           
  9656 ;; *************** function _angleToPulse *****************
  9657 ;; Defined at:
  9658 ;;		line 33 in file "servo.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;  angle           2   85[BANK0 ] int 
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  a000            4  104[BANK0 ] long 
  9663 ;;  a180            4   97[BANK0 ] long 
  9664 ;;  offset          4   93[BANK0 ] long 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  4   85[BANK0 ] long 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9674 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;Total ram usage:       23 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    8
  9681 ;; This function calls:
  9682 ;;		___altoft
  9683 ;;		___awtoft
  9684 ;;		___ftadd
  9685 ;;		___ftdiv
  9686 ;;		___ftmul
  9687 ;;		___fttol
  9688 ;; This function is called by:
  9689 ;;		_setAngle
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           	psect	text29
  9694  0032A6                     __ptext29:
  9695                           	opt stack 0
  9696  0032A6                     _angleToPulse:
  9697                           	opt stack 20
  9698                           
  9699                           ;servo.c: 34: long offset = -600;
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;incstack = 0
  9703  0032A6  0EA8               	movlw	168
  9704  0032A8  0100               	movlb	0	; () banked
  9705  0032AA  6FDD               	movwf	angleToPulse@offset& (0+255),b
  9706  0032AC  0EFD               	movlw	253
  9707  0032AE  6FDE               	movwf	(angleToPulse@offset+1)& (0+255),b
  9708  0032B0  0EFF               	movlw	255
  9709  0032B2  6FDF               	movwf	(angleToPulse@offset+2)& (0+255),b
  9710  0032B4  0EFF               	movlw	255
  9711  0032B6  6FE0               	movwf	(angleToPulse@offset+3)& (0+255),b
  9712                           
  9713                           ;servo.c: 35: long a000 = 1250;
  9714  0032B8  0EE2               	movlw	226
  9715  0032BA  0100               	movlb	0	; () banked
  9716  0032BC  6FE8               	movwf	angleToPulse@a000& (0+255),b
  9717  0032BE  0E04               	movlw	4
  9718  0032C0  6FE9               	movwf	(angleToPulse@a000+1)& (0+255),b
  9719  0032C2  0E00               	movlw	0
  9720  0032C4  6FEA               	movwf	(angleToPulse@a000+2)& (0+255),b
  9721  0032C6  0E00               	movlw	0
  9722  0032C8  6FEB               	movwf	(angleToPulse@a000+3)& (0+255),b
  9723                           
  9724                           ;servo.c: 36: long a180 = 6250;
  9725  0032CA  0E6A               	movlw	106
  9726  0032CC  0100               	movlb	0	; () banked
  9727  0032CE  6FE1               	movwf	angleToPulse@a180& (0+255),b
  9728  0032D0  0E18               	movlw	24
  9729  0032D2  6FE2               	movwf	(angleToPulse@a180+1)& (0+255),b
  9730  0032D4  0E00               	movlw	0
  9731  0032D6  6FE3               	movwf	(angleToPulse@a180+2)& (0+255),b
  9732  0032D8  0E00               	movlw	0
  9733  0032DA  6FE4               	movwf	(angleToPulse@a180+3)& (0+255),b
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9737  0032DC  C0E8  F0D9         	movff	angleToPulse@a000,??_angleToPulse
  9738  0032E0  C0E9  F0DA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  9739  0032E4  C0EA  F0DB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  9740  0032E8  C0EB  F0DC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  9741  0032EC  0100               	movlb	0	; () banked
  9742  0032EE  1FD9               	comf	??_angleToPulse& (0+255),f,b
  9743  0032F0  1FDA               	comf	(??_angleToPulse+1)& (0+255),f,b
  9744  0032F2  1FDB               	comf	(??_angleToPulse+2)& (0+255),f,b
  9745  0032F4  1FDC               	comf	(??_angleToPulse+3)& (0+255),f,b
  9746  0032F6  2BD9               	incf	??_angleToPulse& (0+255),f,b
  9747  0032F8  0E00               	movlw	0
  9748  0032FA  23DA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  9749  0032FC  23DB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  9750  0032FE  23DC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  9751  003300  0100               	movlb	0	; () banked
  9752  003302  51E1               	movf	angleToPulse@a180& (0+255),w,b
  9753  003304  0100               	movlb	0	; () banked
  9754  003306  25D9               	addwf	??_angleToPulse& (0+255),w,b
  9755  003308  0100               	movlb	0	; () banked
  9756  00330A  6F88               	movwf	___altoft@c& (0+255),b
  9757  00330C  0100               	movlb	0	; () banked
  9758  00330E  51E2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  9759  003310  0100               	movlb	0	; () banked
  9760  003312  21DA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  9761  003314  0100               	movlb	0	; () banked
  9762  003316  6F89               	movwf	(___altoft@c+1)& (0+255),b
  9763  003318  0100               	movlb	0	; () banked
  9764  00331A  51E3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  9765  00331C  0100               	movlb	0	; () banked
  9766  00331E  21DB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  9767  003320  0100               	movlb	0	; () banked
  9768  003322  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  9769  003324  0100               	movlb	0	; () banked
  9770  003326  51E4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  9771  003328  0100               	movlb	0	; () banked
  9772  00332A  21DC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  9773  00332C  0100               	movlb	0	; () banked
  9774  00332E  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  9775  003330  EC7B  F024         	call	___altoft	;wreg free
  9776  003334  C088  F0A4         	movff	?___altoft,___ftmul@f2
  9777  003338  C089  F0A5         	movff	?___altoft+1,___ftmul@f2+1
  9778  00333C  C08A  F0A6         	movff	?___altoft+2,___ftmul@f2+2
  9779  003340  0E00               	movlw	0
  9780  003342  0100               	movlb	0	; () banked
  9781  003344  6F95               	movwf	___ftdiv@f2& (0+255),b
  9782  003346  0E34               	movlw	52
  9783  003348  0100               	movlb	0	; () banked
  9784  00334A  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
  9785  00334C  0E43               	movlw	67
  9786  00334E  0100               	movlb	0	; () banked
  9787  003350  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
  9788  003352  C0D5  F088         	movff	angleToPulse@angle,___awtoft@c
  9789  003356  C0D6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  9790  00335A  EC52  F028         	call	___awtoft	;wreg free
  9791  00335E  C088  F092         	movff	?___awtoft,___ftdiv@f1
  9792  003362  C089  F093         	movff	?___awtoft+1,___ftdiv@f1+1
  9793  003366  C08A  F094         	movff	?___awtoft+2,___ftdiv@f1+2
  9794  00336A  ECB5  F01A         	call	___ftdiv	;wreg free
  9795  00336E  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  9796  003372  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  9797  003376  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  9798  00337A  EC06  F01A         	call	___ftmul	;wreg free
  9799  00337E  C0A1  F0BD         	movff	?___ftmul,___ftadd@f2
  9800  003382  C0A2  F0BE         	movff	?___ftmul+1,___ftadd@f2+1
  9801  003386  C0A3  F0BF         	movff	?___ftmul+2,___ftadd@f2+2
  9802  00338A  C0E8  F088         	movff	angleToPulse@a000,___altoft@c
  9803  00338E  C0E9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  9804  003392  C0EA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  9805  003396  C0EB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  9806  00339A  EC7B  F024         	call	___altoft	;wreg free
  9807  00339E  C088  F0BA         	movff	?___altoft,___ftadd@f1
  9808  0033A2  C089  F0BB         	movff	?___altoft+1,___ftadd@f1+1
  9809  0033A6  C08A  F0BC         	movff	?___altoft+2,___ftadd@f1+2
  9810  0033AA  EC93  F014         	call	___ftadd	;wreg free
  9811  0033AE  C0BA  F0E5         	movff	?___ftadd,_angleToPulse$1335
  9812  0033B2  C0BB  F0E6         	movff	?___ftadd+1,_angleToPulse$1335+1
  9813  0033B6  C0BC  F0E7         	movff	?___ftadd+2,_angleToPulse$1335+2
  9814                           
  9815                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9816  0033BA  C0DD  F088         	movff	angleToPulse@offset,___altoft@c
  9817  0033BE  C0DE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  9818  0033C2  C0DF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  9819  0033C6  C0E0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  9820  0033CA  EC7B  F024         	call	___altoft	;wreg free
  9821  0033CE  C088  F0BD         	movff	?___altoft,___ftadd@f2
  9822  0033D2  C089  F0BE         	movff	?___altoft+1,___ftadd@f2+1
  9823  0033D6  C08A  F0BF         	movff	?___altoft+2,___ftadd@f2+2
  9824  0033DA  C0E5  F0BA         	movff	_angleToPulse$1335,___ftadd@f1
  9825  0033DE  C0E6  F0BB         	movff	_angleToPulse$1335+1,___ftadd@f1+1
  9826  0033E2  C0E7  F0BC         	movff	_angleToPulse$1335+2,___ftadd@f1+2
  9827  0033E6  EC93  F014         	call	___ftadd	;wreg free
  9828  0033EA  C0BA  F0C6         	movff	?___ftadd,___fttol@f1
  9829  0033EE  C0BB  F0C7         	movff	?___ftadd+1,___fttol@f1+1
  9830  0033F2  C0BC  F0C8         	movff	?___ftadd+2,___fttol@f1+2
  9831  0033F6  EC5B  F01B         	call	___fttol	;wreg free
  9832  0033FA  C0C6  F0D5         	movff	?___fttol,?_angleToPulse
  9833  0033FE  C0C7  F0D6         	movff	?___fttol+1,?_angleToPulse+1
  9834  003402  C0C8  F0D7         	movff	?___fttol+2,?_angleToPulse+2
  9835  003406  C0C9  F0D8         	movff	?___fttol+3,?_angleToPulse+3
  9836  00340A  0012               	return	
  9837  00340C                     __end_of_angleToPulse:
  9838                           	opt stack 0
  9839                           tblptru	equ	0xFF8
  9840                           tblptrh	equ	0xFF7
  9841                           tblptrl	equ	0xFF6
  9842                           tablat	equ	0xFF5
  9843                           prodh	equ	0xFF4
  9844                           prodl	equ	0xFF3
  9845                           intcon	equ	0xFF2
  9846                           postinc0	equ	0xFEE
  9847                           wreg	equ	0xFE8
  9848                           postdec1	equ	0xFE5
  9849                           fsr1l	equ	0xFE1
  9850                           indf2	equ	0xFDF
  9851                           postinc2	equ	0xFDE
  9852                           postdec2	equ	0xFDD
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8
  9856                           
  9857 ;; *************** function ___fttol *****************
  9858 ;; Defined at:
  9859 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;  f1              3   70[BANK0 ] float 
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;  lval            4   80[BANK0 ] unsigned long 
  9864 ;;  exp1            1   84[BANK0 ] unsigned char 
  9865 ;;  sign1           1   79[BANK0 ] unsigned char 
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  4   70[BANK0 ] long 
  9868 ;; Registers used:
  9869 ;;		wreg, status,2, status,0
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9875 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;Total ram usage:       15 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; Hardware stack levels required when called:    6
  9882 ;; This function calls:
  9883 ;;		Nothing
  9884 ;; This function is called by:
  9885 ;;		_angleToPulse
  9886 ;;		_printf
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           	psect	text30
  9891  0036B6                     __ptext30:
  9892                           	opt stack 0
  9893  0036B6                     ___fttol:
  9894                           	opt stack 21
  9895                           
  9896                           ;incstack = 0
  9897  0036B6  C0C8  F0CA         	movff	___fttol@f1+2,??___fttol
  9898  0036BA  0100               	movlb	0	; () banked
  9899  0036BC  6BCB               	clrf	(??___fttol+1)& (0+255),b
  9900  0036BE  6BCC               	clrf	(??___fttol+2)& (0+255),b
  9901  0036C0  0100               	movlb	0	; () banked
  9902  0036C2  35C7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9903  0036C4  0100               	movlb	0	; () banked
  9904  0036C6  37CA               	rlcf	??___fttol& (0+255),f,b
  9905  0036C8  E301               	bnc	u4581
  9906  0036CA  81CB               	bsf	(??___fttol+1)& (0+255),0,b
  9907  0036CC                     u4581:
  9908  0036CC  0100               	movlb	0	; () banked
  9909  0036CE  51CA               	movf	??___fttol& (0+255),w,b
  9910  0036D0  0100               	movlb	0	; () banked
  9911  0036D2  6FD4               	movwf	___fttol@exp1& (0+255),b
  9912  0036D4  0100               	movlb	0	; () banked
  9913  0036D6  51D4               	movf	___fttol@exp1& (0+255),w,b
  9914  0036D8  A4D8               	btfss	status,2,c
  9915  0036DA  D00A               	goto	l4743
  9916                           
  9917                           ; BSR set to: 0
  9918  0036DC  0E00               	movlw	0
  9919  0036DE  0100               	movlb	0	; () banked
  9920  0036E0  6FC6               	movwf	?___fttol& (0+255),b
  9921  0036E2  0E00               	movlw	0
  9922  0036E4  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9923  0036E6  0E00               	movlw	0
  9924  0036E8  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9925  0036EA  0E00               	movlw	0
  9926  0036EC  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9927                           
  9928                           ; BSR set to: 0
  9929  0036EE  0012               	return	
  9930  0036F0                     l4743:
  9931                           
  9932                           ; BSR set to: 0
  9933  0036F0  0E17               	movlw	23
  9934  0036F2  0100               	movlb	0	; () banked
  9935  0036F4  6FCA               	movwf	??___fttol& (0+255),b
  9936  0036F6  C0C6  F0CB         	movff	___fttol@f1,??___fttol+1
  9937  0036FA  C0C7  F0CC         	movff	___fttol@f1+1,??___fttol+2
  9938  0036FE  C0C8  F0CD         	movff	___fttol@f1+2,??___fttol+3
  9939  003702  0100               	movlb	0	; () banked
  9940  003704  29CA               	incf	??___fttol& (0+255),w,b
  9941  003706  0100               	movlb	0	; () banked
  9942  003708  6FCE               	movwf	(??___fttol+4)& (0+255),b
  9943  00370A  D005               	goto	u4600
  9944  00370C                     u4605:
  9945  00370C  0100               	movlb	0	; () banked
  9946  00370E  90D8               	bcf	status,0,c
  9947  003710  33CD               	rrcf	(??___fttol+3)& (0+255),f,b
  9948  003712  33CC               	rrcf	(??___fttol+2)& (0+255),f,b
  9949  003714  33CB               	rrcf	(??___fttol+1)& (0+255),f,b
  9950  003716                     u4600:
  9951  003716  0100               	movlb	0	; () banked
  9952  003718  2FCE               	decfsz	(??___fttol+4)& (0+255),f,b
  9953  00371A  D7F8               	goto	u4605
  9954  00371C  0100               	movlb	0	; () banked
  9955  00371E  51CB               	movf	(??___fttol+1)& (0+255),w,b
  9956  003720  0100               	movlb	0	; () banked
  9957  003722  6FCF               	movwf	___fttol@sign1& (0+255),b
  9958                           
  9959                           ; BSR set to: 0
  9960  003724  0100               	movlb	0	; () banked
  9961  003726  8FC7               	bsf	(___fttol@f1+1)& (0+255),7,b
  9962                           
  9963                           ; BSR set to: 0
  9964  003728  0EFF               	movlw	255
  9965  00372A  0100               	movlb	0	; () banked
  9966  00372C  17C6               	andwf	___fttol@f1& (0+255),f,b
  9967  00372E  0EFF               	movlw	255
  9968  003730  0100               	movlb	0	; () banked
  9969  003732  17C7               	andwf	(___fttol@f1+1)& (0+255),f,b
  9970  003734  0E00               	movlw	0
  9971  003736  0100               	movlb	0	; () banked
  9972  003738  17C8               	andwf	(___fttol@f1+2)& (0+255),f,b
  9973                           
  9974                           ; BSR set to: 0
  9975  00373A  0100               	movlb	0	; () banked
  9976  00373C  51C6               	movf	___fttol@f1& (0+255),w,b
  9977  00373E  0100               	movlb	0	; () banked
  9978  003740  6FD0               	movwf	___fttol@lval& (0+255),b
  9979  003742  0100               	movlb	0	; () banked
  9980  003744  51C7               	movf	(___fttol@f1+1)& (0+255),w,b
  9981  003746  0100               	movlb	0	; () banked
  9982  003748  6FD1               	movwf	(___fttol@lval+1)& (0+255),b
  9983  00374A  0100               	movlb	0	; () banked
  9984  00374C  51C8               	movf	(___fttol@f1+2)& (0+255),w,b
  9985  00374E  0100               	movlb	0	; () banked
  9986  003750  6FD2               	movwf	(___fttol@lval+2)& (0+255),b
  9987  003752  0100               	movlb	0	; () banked
  9988  003754  6BD3               	clrf	(___fttol@lval+3)& (0+255),b
  9989                           
  9990                           ; BSR set to: 0
  9991  003756  0E8E               	movlw	142
  9992  003758  0100               	movlb	0	; () banked
  9993  00375A  5FD4               	subwf	___fttol@exp1& (0+255),f,b
  9994                           
  9995                           ; BSR set to: 0
  9996  00375C  0100               	movlb	0	; () banked
  9997  00375E  AFD4               	btfss	___fttol@exp1& (0+255),7,b
  9998  003760  D01A               	goto	l4765
  9999                           
 10000                           ; BSR set to: 0
 10001  003762  0100               	movlb	0	; () banked
 10002  003764  51D4               	movf	___fttol@exp1& (0+255),w,b
 10003  003766  0A80               	xorlw	128
 10004  003768  0F8F               	addlw	143
 10005  00376A  B0D8               	btfsc	status,0,c
 10006  00376C  D00A               	goto	l4761
 10007                           
 10008                           ; BSR set to: 0
 10009  00376E  0E00               	movlw	0
 10010  003770  0100               	movlb	0	; () banked
 10011  003772  6FC6               	movwf	?___fttol& (0+255),b
 10012  003774  0E00               	movlw	0
 10013  003776  6FC7               	movwf	(?___fttol+1)& (0+255),b
 10014  003778  0E00               	movlw	0
 10015  00377A  6FC8               	movwf	(?___fttol+2)& (0+255),b
 10016  00377C  0E00               	movlw	0
 10017  00377E  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10018                           
 10019                           ; BSR set to: 0
 10020  003780  0012               	return	
 10021  003782                     l4761:
 10022                           
 10023                           ; BSR set to: 0
 10024  003782  0100               	movlb	0	; () banked
 10025  003784  90D8               	bcf	status,0,c
 10026  003786  33D3               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10027  003788  33D2               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10028  00378A  33D1               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10029  00378C  33D0               	rrcf	___fttol@lval& (0+255),f,b
 10030                           
 10031                           ; BSR set to: 0
 10032  00378E  0100               	movlb	0	; () banked
 10033  003790  3FD4               	incfsz	___fttol@exp1& (0+255),f,b
 10034  003792  D7F7               	goto	l4761
 10035                           
 10036                           ; BSR set to: 0
 10037  003794  D01B               	goto	l4775
 10038  003796                     l4765:
 10039                           
 10040                           ; BSR set to: 0
 10041  003796  0E17               	movlw	23
 10042  003798  0100               	movlb	0	; () banked
 10043  00379A  65D4               	cpfsgt	___fttol@exp1& (0+255),b
 10044  00379C  D012               	goto	l4773
 10045                           
 10046                           ; BSR set to: 0
 10047  00379E  0E00               	movlw	0
 10048  0037A0  0100               	movlb	0	; () banked
 10049  0037A2  6FC6               	movwf	?___fttol& (0+255),b
 10050  0037A4  0E00               	movlw	0
 10051  0037A6  6FC7               	movwf	(?___fttol+1)& (0+255),b
 10052  0037A8  0E00               	movlw	0
 10053  0037AA  6FC8               	movwf	(?___fttol+2)& (0+255),b
 10054  0037AC  0E00               	movlw	0
 10055  0037AE  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10056                           
 10057                           ; BSR set to: 0
 10058  0037B0  0012               	return	
 10059  0037B2                     l4771:
 10060                           
 10061                           ; BSR set to: 0
 10062  0037B2  0100               	movlb	0	; () banked
 10063  0037B4  90D8               	bcf	status,0,c
 10064  0037B6  37D0               	rlcf	___fttol@lval& (0+255),f,b
 10065  0037B8  37D1               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10066  0037BA  37D2               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10067  0037BC  37D3               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10068  0037BE  0100               	movlb	0	; () banked
 10069  0037C0  07D4               	decf	___fttol@exp1& (0+255),f,b
 10070  0037C2                     l4773:
 10071                           
 10072                           ; BSR set to: 0
 10073  0037C2  0100               	movlb	0	; () banked
 10074  0037C4  51D4               	movf	___fttol@exp1& (0+255),w,b
 10075  0037C6  0100               	movlb	0	; () banked
 10076  0037C8  A4D8               	btfss	status,2,c
 10077  0037CA  D7F3               	goto	l4771
 10078  0037CC                     l4775:
 10079                           
 10080                           ; BSR set to: 0
 10081  0037CC  0100               	movlb	0	; () banked
 10082  0037CE  51CF               	movf	___fttol@sign1& (0+255),w,b
 10083  0037D0  0100               	movlb	0	; () banked
 10084  0037D2  B4D8               	btfsc	status,2,c
 10085  0037D4  D009               	goto	l4779
 10086                           
 10087                           ; BSR set to: 0
 10088  0037D6  0100               	movlb	0	; () banked
 10089  0037D8  1FD3               	comf	(___fttol@lval+3)& (0+255),f,b
 10090  0037DA  1FD2               	comf	(___fttol@lval+2)& (0+255),f,b
 10091  0037DC  1FD1               	comf	(___fttol@lval+1)& (0+255),f,b
 10092  0037DE  6DD0               	negf	___fttol@lval& (0+255),b
 10093  0037E0  0E00               	movlw	0
 10094  0037E2  23D1               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10095  0037E4  23D2               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10096  0037E6  23D3               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10097  0037E8                     l4779:
 10098                           
 10099                           ; BSR set to: 0
 10100  0037E8  C0D0  F0C6         	movff	___fttol@lval,?___fttol
 10101  0037EC  C0D1  F0C7         	movff	___fttol@lval+1,?___fttol+1
 10102  0037F0  C0D2  F0C8         	movff	___fttol@lval+2,?___fttol+2
 10103  0037F4  C0D3  F0C9         	movff	___fttol@lval+3,?___fttol+3
 10104  0037F8  0012               	return	
 10105  0037FA                     __end_of___fttol:
 10106                           	opt stack 0
 10107                           tblptru	equ	0xFF8
 10108                           tblptrh	equ	0xFF7
 10109                           tblptrl	equ	0xFF6
 10110                           tablat	equ	0xFF5
 10111                           prodh	equ	0xFF4
 10112                           prodl	equ	0xFF3
 10113                           intcon	equ	0xFF2
 10114                           postinc0	equ	0xFEE
 10115                           wreg	equ	0xFE8
 10116                           postdec1	equ	0xFE5
 10117                           fsr1l	equ	0xFE1
 10118                           indf2	equ	0xFDF
 10119                           postinc2	equ	0xFDE
 10120                           postdec2	equ	0xFDD
 10121                           fsr2h	equ	0xFDA
 10122                           fsr2l	equ	0xFD9
 10123                           status	equ	0xFD8
 10124                           
 10125 ;; *************** function ___ftmul *****************
 10126 ;; Defined at:
 10127 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;  f1              3   33[BANK0 ] float 
 10130 ;;  f2              3   36[BANK0 ] float 
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
 10133 ;;  sign            1   47[BANK0 ] unsigned char 
 10134 ;;  cntr            1   46[BANK0 ] unsigned char 
 10135 ;;  exp             1   42[BANK0 ] unsigned char 
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  3   33[BANK0 ] float 
 10138 ;; Registers used:
 10139 ;;		wreg, status,2, status,0, cstack
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10145 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10147 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10148 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;Total ram usage:       15 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    7
 10152 ;; This function calls:
 10153 ;;		___ftpack
 10154 ;; This function is called by:
 10155 ;;		_sortBattery
 10156 ;;		_angleToPulse
 10157 ;;		_fround
 10158 ;;		_scale
 10159 ;;		_printf
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           	psect	text31
 10164  00340C                     __ptext31:
 10165                           	opt stack 0
 10166  00340C                     ___ftmul:
 10167                           	opt stack 20
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;incstack = 0
 10171  00340C  C0A3  F0A7         	movff	___ftmul@f1+2,??___ftmul
 10172  003410  0100               	movlb	0	; () banked
 10173  003412  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 10174  003414  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 10175  003416  0100               	movlb	0	; () banked
 10176  003418  35A2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10177  00341A  0100               	movlb	0	; () banked
 10178  00341C  37A7               	rlcf	??___ftmul& (0+255),f,b
 10179  00341E  E301               	bnc	u4391
 10180  003420  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10181  003422                     u4391:
 10182  003422  0100               	movlb	0	; () banked
 10183  003424  51A7               	movf	??___ftmul& (0+255),w,b
 10184  003426  0100               	movlb	0	; () banked
 10185  003428  6FAA               	movwf	___ftmul@exp& (0+255),b
 10186  00342A  0100               	movlb	0	; () banked
 10187  00342C  51AA               	movf	___ftmul@exp& (0+255),w,b
 10188  00342E  A4D8               	btfss	status,2,c
 10189  003430  D00A               	goto	l4603
 10190                           
 10191                           ; BSR set to: 0
 10192  003432  0E00               	movlw	0
 10193  003434  0100               	movlb	0	; () banked
 10194  003436  6FA1               	movwf	?___ftmul& (0+255),b
 10195  003438  0E00               	movlw	0
 10196  00343A  0100               	movlb	0	; () banked
 10197  00343C  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10198  00343E  0E00               	movlw	0
 10199  003440  0100               	movlb	0	; () banked
 10200  003442  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10201                           
 10202                           ; BSR set to: 0
 10203  003444  0012               	return	
 10204  003446                     l4603:
 10205                           
 10206                           ; BSR set to: 0
 10207  003446  C0A6  F0A7         	movff	___ftmul@f2+2,??___ftmul
 10208  00344A  0100               	movlb	0	; () banked
 10209  00344C  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 10210  00344E  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 10211  003450  0100               	movlb	0	; () banked
 10212  003452  35A5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10213  003454  0100               	movlb	0	; () banked
 10214  003456  37A7               	rlcf	??___ftmul& (0+255),f,b
 10215  003458  E301               	bnc	u4411
 10216  00345A  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10217  00345C                     u4411:
 10218  00345C  0100               	movlb	0	; () banked
 10219  00345E  51A7               	movf	??___ftmul& (0+255),w,b
 10220  003460  0100               	movlb	0	; () banked
 10221  003462  6FAF               	movwf	___ftmul@sign& (0+255),b
 10222  003464  0100               	movlb	0	; () banked
 10223  003466  51AF               	movf	___ftmul@sign& (0+255),w,b
 10224  003468  A4D8               	btfss	status,2,c
 10225  00346A  D00A               	goto	l4609
 10226                           
 10227                           ; BSR set to: 0
 10228  00346C  0E00               	movlw	0
 10229  00346E  0100               	movlb	0	; () banked
 10230  003470  6FA1               	movwf	?___ftmul& (0+255),b
 10231  003472  0E00               	movlw	0
 10232  003474  0100               	movlb	0	; () banked
 10233  003476  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10234  003478  0E00               	movlw	0
 10235  00347A  0100               	movlb	0	; () banked
 10236  00347C  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10237                           
 10238                           ; BSR set to: 0
 10239  00347E  0012               	return	
 10240  003480                     l4609:
 10241                           
 10242                           ; BSR set to: 0
 10243  003480  0100               	movlb	0	; () banked
 10244  003482  51AF               	movf	___ftmul@sign& (0+255),w,b
 10245  003484  0F7B               	addlw	123
 10246  003486  0100               	movlb	0	; () banked
 10247  003488  27AA               	addwf	___ftmul@exp& (0+255),f,b
 10248                           
 10249                           ; BSR set to: 0
 10250  00348A  C0A3  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
 10251  00348E  0100               	movlb	0	; () banked
 10252  003490  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10253  003492  0100               	movlb	0	; () banked
 10254  003494  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
 10255  003496  0E80               	movlw	128
 10256  003498  0100               	movlb	0	; () banked
 10257  00349A  17AF               	andwf	___ftmul@sign& (0+255),f,b
 10258                           
 10259                           ; BSR set to: 0
 10260  00349C  0100               	movlb	0	; () banked
 10261  00349E  8FA2               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10262                           
 10263                           ; BSR set to: 0
 10264  0034A0  0100               	movlb	0	; () banked
 10265  0034A2  8FA5               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10266                           
 10267                           ; BSR set to: 0
 10268  0034A4  0EFF               	movlw	255
 10269  0034A6  0100               	movlb	0	; () banked
 10270  0034A8  17A4               	andwf	___ftmul@f2& (0+255),f,b
 10271  0034AA  0EFF               	movlw	255
 10272  0034AC  0100               	movlb	0	; () banked
 10273  0034AE  17A5               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10274  0034B0  0E00               	movlw	0
 10275  0034B2  0100               	movlb	0	; () banked
 10276  0034B4  17A6               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10277                           
 10278                           ; BSR set to: 0
 10279  0034B6  0E00               	movlw	0
 10280  0034B8  0100               	movlb	0	; () banked
 10281  0034BA  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
 10282  0034BC  0E00               	movlw	0
 10283  0034BE  0100               	movlb	0	; () banked
 10284  0034C0  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10285  0034C2  0E00               	movlw	0
 10286  0034C4  0100               	movlb	0	; () banked
 10287  0034C6  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10288                           
 10289                           ; BSR set to: 0
 10290  0034C8  0E07               	movlw	7
 10291  0034CA  0100               	movlb	0	; () banked
 10292  0034CC  6FAE               	movwf	___ftmul@cntr& (0+255),b
 10293  0034CE                     l4623:
 10294                           
 10295                           ; BSR set to: 0
 10296  0034CE  0100               	movlb	0	; () banked
 10297  0034D0  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 10298  0034D2  D00C               	goto	l4627
 10299                           
 10300                           ; BSR set to: 0
 10301  0034D4  0100               	movlb	0	; () banked
 10302  0034D6  51A4               	movf	___ftmul@f2& (0+255),w,b
 10303  0034D8  0100               	movlb	0	; () banked
 10304  0034DA  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10305  0034DC  0100               	movlb	0	; () banked
 10306  0034DE  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 10307  0034E0  0100               	movlb	0	; () banked
 10308  0034E2  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10309  0034E4  0100               	movlb	0	; () banked
 10310  0034E6  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10311  0034E8  0100               	movlb	0	; () banked
 10312  0034EA  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10313  0034EC                     l4627:
 10314                           
 10315                           ; BSR set to: 0
 10316  0034EC  0100               	movlb	0	; () banked
 10317  0034EE  90D8               	bcf	status,0,c
 10318  0034F0  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10319  0034F2  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10320  0034F4  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 10321  0034F6  0100               	movlb	0	; () banked
 10322  0034F8  90D8               	bcf	status,0,c
 10323  0034FA  37A4               	rlcf	___ftmul@f2& (0+255),f,b
 10324  0034FC  37A5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10325  0034FE  37A6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10326                           
 10327                           ; BSR set to: 0
 10328  003500  0100               	movlb	0	; () banked
 10329  003502  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 10330  003504  D7E4               	goto	l4623
 10331                           
 10332                           ; BSR set to: 0
 10333                           
 10334                           ; BSR set to: 0
 10335  003506  0E09               	movlw	9
 10336  003508  0100               	movlb	0	; () banked
 10337  00350A  6FAE               	movwf	___ftmul@cntr& (0+255),b
 10338  00350C                     l4633:
 10339                           
 10340                           ; BSR set to: 0
 10341  00350C  0100               	movlb	0	; () banked
 10342  00350E  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 10343  003510  D00C               	goto	l4637
 10344                           
 10345                           ; BSR set to: 0
 10346  003512  0100               	movlb	0	; () banked
 10347  003514  51A4               	movf	___ftmul@f2& (0+255),w,b
 10348  003516  0100               	movlb	0	; () banked
 10349  003518  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10350  00351A  0100               	movlb	0	; () banked
 10351  00351C  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 10352  00351E  0100               	movlb	0	; () banked
 10353  003520  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10354  003522  0100               	movlb	0	; () banked
 10355  003524  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10356  003526  0100               	movlb	0	; () banked
 10357  003528  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10358  00352A                     l4637:
 10359                           
 10360                           ; BSR set to: 0
 10361  00352A  0100               	movlb	0	; () banked
 10362  00352C  90D8               	bcf	status,0,c
 10363  00352E  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10364  003530  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10365  003532  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 10366  003534  0100               	movlb	0	; () banked
 10367  003536  90D8               	bcf	status,0,c
 10368  003538  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10369  00353A  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10370  00353C  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10371                           
 10372                           ; BSR set to: 0
 10373  00353E  0100               	movlb	0	; () banked
 10374  003540  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 10375  003542  D7E4               	goto	l4633
 10376                           
 10377                           ; BSR set to: 0
 10378                           
 10379                           ; BSR set to: 0
 10380  003544  C0AB  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
 10381  003548  C0AC  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10382  00354C  C0AD  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10383  003550  C0AA  F083         	movff	___ftmul@exp,___ftpack@exp
 10384  003554  C0AF  F084         	movff	___ftmul@sign,___ftpack@sign
 10385  003558  ECEC  F01E         	call	___ftpack	;wreg free
 10386  00355C  C080  F0A1         	movff	?___ftpack,?___ftmul
 10387  003560  C081  F0A2         	movff	?___ftpack+1,?___ftmul+1
 10388  003564  C082  F0A3         	movff	?___ftpack+2,?___ftmul+2
 10389  003568  0012               	return	
 10390  00356A                     __end_of___ftmul:
 10391                           	opt stack 0
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           postinc0	equ	0xFEE
 10400                           wreg	equ	0xFE8
 10401                           postdec1	equ	0xFE5
 10402                           fsr1l	equ	0xFE1
 10403                           indf2	equ	0xFDF
 10404                           postinc2	equ	0xFDE
 10405                           postdec2	equ	0xFDD
 10406                           fsr2h	equ	0xFDA
 10407                           fsr2l	equ	0xFD9
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function ___ftdiv *****************
 10411 ;; Defined at:
 10412 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;  f1              3   18[BANK0 ] float 
 10415 ;;  f2              3   21[BANK0 ] float 
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;  f3              3   28[BANK0 ] float 
 10418 ;;  sign            1   32[BANK0 ] unsigned char 
 10419 ;;  exp             1   31[BANK0 ] unsigned char 
 10420 ;;  cntr            1   27[BANK0 ] unsigned char 
 10421 ;; Return value:  Size  Location     Type
 10422 ;;                  3   18[BANK0 ] float 
 10423 ;; Registers used:
 10424 ;;		wreg, status,2, status,0, cstack
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10430 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10433 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10434 ;;Total ram usage:       15 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    7
 10437 ;; This function calls:
 10438 ;;		___ftpack
 10439 ;; This function is called by:
 10440 ;;		_sortBattery
 10441 ;;		_angleToPulse
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           	psect	text32
 10446  00356A                     __ptext32:
 10447                           	opt stack 0
 10448  00356A                     ___ftdiv:
 10449                           	opt stack 20
 10450                           
 10451                           ;incstack = 0
 10452  00356A  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
 10453  00356E  0100               	movlb	0	; () banked
 10454  003570  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 10455  003572  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 10456  003574  0100               	movlb	0	; () banked
 10457  003576  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10458  003578  0100               	movlb	0	; () banked
 10459  00357A  3798               	rlcf	??___ftdiv& (0+255),f,b
 10460  00357C  E301               	bnc	u4341
 10461  00357E  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 10462  003580                     u4341:
 10463  003580  0100               	movlb	0	; () banked
 10464  003582  5198               	movf	??___ftdiv& (0+255),w,b
 10465  003584  0100               	movlb	0	; () banked
 10466  003586  6F9F               	movwf	___ftdiv@exp& (0+255),b
 10467  003588  0100               	movlb	0	; () banked
 10468  00358A  519F               	movf	___ftdiv@exp& (0+255),w,b
 10469  00358C  A4D8               	btfss	status,2,c
 10470  00358E  D00A               	goto	l4557
 10471                           
 10472                           ; BSR set to: 0
 10473  003590  0E00               	movlw	0
 10474  003592  0100               	movlb	0	; () banked
 10475  003594  6F92               	movwf	?___ftdiv& (0+255),b
 10476  003596  0E00               	movlw	0
 10477  003598  0100               	movlb	0	; () banked
 10478  00359A  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 10479  00359C  0E00               	movlw	0
 10480  00359E  0100               	movlb	0	; () banked
 10481  0035A0  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 10482                           
 10483                           ; BSR set to: 0
 10484  0035A2  0012               	return	
 10485  0035A4                     l4557:
 10486                           
 10487                           ; BSR set to: 0
 10488  0035A4  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
 10489  0035A8  0100               	movlb	0	; () banked
 10490  0035AA  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 10491  0035AC  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 10492  0035AE  0100               	movlb	0	; () banked
 10493  0035B0  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10494  0035B2  0100               	movlb	0	; () banked
 10495  0035B4  3798               	rlcf	??___ftdiv& (0+255),f,b
 10496  0035B6  E301               	bnc	u4361
 10497  0035B8  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 10498  0035BA                     u4361:
 10499  0035BA  0100               	movlb	0	; () banked
 10500  0035BC  5198               	movf	??___ftdiv& (0+255),w,b
 10501  0035BE  0100               	movlb	0	; () banked
 10502  0035C0  6FA0               	movwf	___ftdiv@sign& (0+255),b
 10503  0035C2  0100               	movlb	0	; () banked
 10504  0035C4  51A0               	movf	___ftdiv@sign& (0+255),w,b
 10505  0035C6  A4D8               	btfss	status,2,c
 10506  0035C8  D00A               	goto	l4563
 10507                           
 10508                           ; BSR set to: 0
 10509  0035CA  0E00               	movlw	0
 10510  0035CC  0100               	movlb	0	; () banked
 10511  0035CE  6F92               	movwf	?___ftdiv& (0+255),b
 10512  0035D0  0E00               	movlw	0
 10513  0035D2  0100               	movlb	0	; () banked
 10514  0035D4  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 10515  0035D6  0E00               	movlw	0
 10516  0035D8  0100               	movlb	0	; () banked
 10517  0035DA  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520  0035DC  0012               	return	
 10521  0035DE                     l4563:
 10522                           
 10523                           ; BSR set to: 0
 10524  0035DE  0E00               	movlw	0
 10525  0035E0  0100               	movlb	0	; () banked
 10526  0035E2  6F9C               	movwf	___ftdiv@f3& (0+255),b
 10527  0035E4  0E00               	movlw	0
 10528  0035E6  0100               	movlb	0	; () banked
 10529  0035E8  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
 10530  0035EA  0E00               	movlw	0
 10531  0035EC  0100               	movlb	0	; () banked
 10532  0035EE  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
 10533                           
 10534                           ; BSR set to: 0
 10535  0035F0  0100               	movlb	0	; () banked
 10536  0035F2  51A0               	movf	___ftdiv@sign& (0+255),w,b
 10537  0035F4  0F89               	addlw	137
 10538  0035F6  0100               	movlb	0	; () banked
 10539  0035F8  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
 10540                           
 10541                           ; BSR set to: 0
 10542  0035FA  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
 10543                           
 10544                           ; BSR set to: 0
 10545  0035FE  0100               	movlb	0	; () banked
 10546  003600  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10547  003602  0100               	movlb	0	; () banked
 10548  003604  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
 10549                           
 10550                           ; BSR set to: 0
 10551  003606  0E80               	movlw	128
 10552  003608  0100               	movlb	0	; () banked
 10553  00360A  17A0               	andwf	___ftdiv@sign& (0+255),f,b
 10554                           
 10555                           ; BSR set to: 0
 10556  00360C  0100               	movlb	0	; () banked
 10557  00360E  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10558                           
 10559                           ; BSR set to: 0
 10560  003610  0EFF               	movlw	255
 10561  003612  0100               	movlb	0	; () banked
 10562  003614  1792               	andwf	___ftdiv@f1& (0+255),f,b
 10563  003616  0EFF               	movlw	255
 10564  003618  0100               	movlb	0	; () banked
 10565  00361A  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10566  00361C  0E00               	movlw	0
 10567  00361E  0100               	movlb	0	; () banked
 10568  003620  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10569                           
 10570                           ; BSR set to: 0
 10571  003622  0100               	movlb	0	; () banked
 10572  003624  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10573                           
 10574                           ; BSR set to: 0
 10575  003626  0EFF               	movlw	255
 10576  003628  0100               	movlb	0	; () banked
 10577  00362A  1795               	andwf	___ftdiv@f2& (0+255),f,b
 10578  00362C  0EFF               	movlw	255
 10579  00362E  0100               	movlb	0	; () banked
 10580  003630  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10581  003632  0E00               	movlw	0
 10582  003634  0100               	movlb	0	; () banked
 10583  003636  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10584                           
 10585                           ; BSR set to: 0
 10586  003638  0E18               	movlw	24
 10587  00363A  0100               	movlb	0	; () banked
 10588  00363C  6F9B               	movwf	___ftdiv@cntr& (0+255),b
 10589  00363E                     l4583:
 10590                           
 10591                           ; BSR set to: 0
 10592  00363E  0100               	movlb	0	; () banked
 10593  003640  90D8               	bcf	status,0,c
 10594  003642  379C               	rlcf	___ftdiv@f3& (0+255),f,b
 10595  003644  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10596  003646  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10597                           
 10598                           ; BSR set to: 0
 10599  003648  0100               	movlb	0	; () banked
 10600  00364A  5195               	movf	___ftdiv@f2& (0+255),w,b
 10601  00364C  0100               	movlb	0	; () banked
 10602  00364E  5D92               	subwf	___ftdiv@f1& (0+255),w,b
 10603  003650  0100               	movlb	0	; () banked
 10604  003652  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10605  003654  0100               	movlb	0	; () banked
 10606  003656  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10607  003658  0100               	movlb	0	; () banked
 10608  00365A  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10609  00365C  0100               	movlb	0	; () banked
 10610  00365E  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10611  003660  A0D8               	btfss	status,0,c
 10612  003662  D00E               	goto	l1086
 10613                           
 10614                           ; BSR set to: 0
 10615  003664  0100               	movlb	0	; () banked
 10616  003666  5195               	movf	___ftdiv@f2& (0+255),w,b
 10617  003668  0100               	movlb	0	; () banked
 10618  00366A  5F92               	subwf	___ftdiv@f1& (0+255),f,b
 10619  00366C  0100               	movlb	0	; () banked
 10620  00366E  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10621  003670  0100               	movlb	0	; () banked
 10622  003672  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10623  003674  0100               	movlb	0	; () banked
 10624  003676  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10625  003678  0100               	movlb	0	; () banked
 10626  00367A  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10627                           
 10628                           ; BSR set to: 0
 10629  00367C  0100               	movlb	0	; () banked
 10630  00367E  819C               	bsf	___ftdiv@f3& (0+255),0,b
 10631  003680                     l1086:
 10632                           
 10633                           ; BSR set to: 0
 10634  003680  0100               	movlb	0	; () banked
 10635  003682  90D8               	bcf	status,0,c
 10636  003684  3792               	rlcf	___ftdiv@f1& (0+255),f,b
 10637  003686  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10638  003688  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10639                           
 10640                           ; BSR set to: 0
 10641  00368A  0100               	movlb	0	; () banked
 10642  00368C  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
 10643  00368E  D7D7               	goto	l4583
 10644                           
 10645                           ; BSR set to: 0
 10646                           
 10647                           ; BSR set to: 0
 10648  003690  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
 10649  003694  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10650  003698  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10651  00369C  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
 10652  0036A0  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
 10653  0036A4  ECEC  F01E         	call	___ftpack	;wreg free
 10654  0036A8  C080  F092         	movff	?___ftpack,?___ftdiv
 10655  0036AC  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
 10656  0036B0  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
 10657  0036B4  0012               	return	
 10658  0036B6                     __end_of___ftdiv:
 10659                           	opt stack 0
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           prodh	equ	0xFF4
 10665                           prodl	equ	0xFF3
 10666                           intcon	equ	0xFF2
 10667                           postinc0	equ	0xFEE
 10668                           wreg	equ	0xFE8
 10669                           postdec1	equ	0xFE5
 10670                           fsr1l	equ	0xFE1
 10671                           indf2	equ	0xFDF
 10672                           postinc2	equ	0xFDE
 10673                           postdec2	equ	0xFDD
 10674                           fsr2h	equ	0xFDA
 10675                           fsr2l	equ	0xFD9
 10676                           status	equ	0xFD8
 10677                           
 10678 ;; *************** function ___ftadd *****************
 10679 ;; Defined at:
 10680 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;  f1              3   58[BANK0 ] float 
 10683 ;;  f2              3   61[BANK0 ] float 
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;  exp1            1   69[BANK0 ] unsigned char 
 10686 ;;  exp2            1   68[BANK0 ] unsigned char 
 10687 ;;  sign            1   67[BANK0 ] unsigned char 
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  3   58[BANK0 ] float 
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10697 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;Total ram usage:       12 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    7
 10704 ;; This function calls:
 10705 ;;		___ftpack
 10706 ;; This function is called by:
 10707 ;;		_angleToPulse
 10708 ;;		_printf
 10709 ;;		___ftsub
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text33
 10714  002926                     __ptext33:
 10715                           	opt stack 0
 10716  002926                     ___ftadd:
 10717                           	opt stack 20
 10718                           
 10719                           ;incstack = 0
 10720  002926  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
 10721  00292A  0100               	movlb	0	; () banked
 10722  00292C  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10723  00292E  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10724  002930  0100               	movlb	0	; () banked
 10725  002932  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10726  002934  0100               	movlb	0	; () banked
 10727  002936  37C0               	rlcf	??___ftadd& (0+255),f,b
 10728  002938  E301               	bnc	u4131
 10729  00293A  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10730  00293C                     u4131:
 10731  00293C  0100               	movlb	0	; () banked
 10732  00293E  51C0               	movf	??___ftadd& (0+255),w,b
 10733  002940  0100               	movlb	0	; () banked
 10734  002942  6FC5               	movwf	___ftadd@exp1& (0+255),b
 10735  002944  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
 10736  002948  0100               	movlb	0	; () banked
 10737  00294A  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10738  00294C  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10739  00294E  0100               	movlb	0	; () banked
 10740  002950  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10741  002952  0100               	movlb	0	; () banked
 10742  002954  37C0               	rlcf	??___ftadd& (0+255),f,b
 10743  002956  E301               	bnc	u4141
 10744  002958  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10745  00295A                     u4141:
 10746  00295A  0100               	movlb	0	; () banked
 10747  00295C  51C0               	movf	??___ftadd& (0+255),w,b
 10748  00295E  0100               	movlb	0	; () banked
 10749  002960  6FC4               	movwf	___ftadd@exp2& (0+255),b
 10750                           
 10751                           ; BSR set to: 0
 10752  002962  0100               	movlb	0	; () banked
 10753  002964  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10754  002966  0100               	movlb	0	; () banked
 10755  002968  B4D8               	btfsc	status,2,c
 10756  00296A  D011               	goto	l1051
 10757                           
 10758                           ; BSR set to: 0
 10759  00296C  0100               	movlb	0	; () banked
 10760  00296E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10761  002970  0100               	movlb	0	; () banked
 10762  002972  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10763  002974  B0D8               	btfsc	status,0,c
 10764  002976  D012               	goto	l4489
 10765                           
 10766                           ; BSR set to: 0
 10767  002978  0100               	movlb	0	; () banked
 10768  00297A  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10769  00297C  0800               	sublw	0
 10770  00297E  0100               	movlb	0	; () banked
 10771  002980  25C4               	addwf	___ftadd@exp2& (0+255),w,b
 10772  002982  0100               	movlb	0	; () banked
 10773  002984  6FC0               	movwf	??___ftadd& (0+255),b
 10774  002986  0E18               	movlw	24
 10775  002988  0100               	movlb	0	; () banked
 10776  00298A  65C0               	cpfsgt	??___ftadd& (0+255),b
 10777  00298C  D007               	goto	l4489
 10778  00298E                     l1051:
 10779                           
 10780                           ; BSR set to: 0
 10781  00298E  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
 10782  002992  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
 10783  002996  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
 10784  00299A  0012               	return	
 10785  00299C                     l4489:
 10786                           
 10787                           ; BSR set to: 0
 10788  00299C  0100               	movlb	0	; () banked
 10789  00299E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10790  0029A0  0100               	movlb	0	; () banked
 10791  0029A2  B4D8               	btfsc	status,2,c
 10792  0029A4  D011               	goto	l1055
 10793                           
 10794                           ; BSR set to: 0
 10795  0029A6  0100               	movlb	0	; () banked
 10796  0029A8  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10797  0029AA  0100               	movlb	0	; () banked
 10798  0029AC  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10799  0029AE  B0D8               	btfsc	status,0,c
 10800  0029B0  D012               	goto	l4495
 10801                           
 10802                           ; BSR set to: 0
 10803  0029B2  0100               	movlb	0	; () banked
 10804  0029B4  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10805  0029B6  0800               	sublw	0
 10806  0029B8  0100               	movlb	0	; () banked
 10807  0029BA  25C5               	addwf	___ftadd@exp1& (0+255),w,b
 10808  0029BC  0100               	movlb	0	; () banked
 10809  0029BE  6FC0               	movwf	??___ftadd& (0+255),b
 10810  0029C0  0E18               	movlw	24
 10811  0029C2  0100               	movlb	0	; () banked
 10812  0029C4  65C0               	cpfsgt	??___ftadd& (0+255),b
 10813  0029C6  D007               	goto	l4495
 10814  0029C8                     l1055:
 10815                           
 10816                           ; BSR set to: 0
 10817  0029C8  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
 10818  0029CC  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
 10819  0029D0  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
 10820  0029D4  0012               	return	
 10821  0029D6                     l4495:
 10822                           
 10823                           ; BSR set to: 0
 10824  0029D6  0E06               	movlw	6
 10825  0029D8  0100               	movlb	0	; () banked
 10826  0029DA  6FC3               	movwf	___ftadd@sign& (0+255),b
 10827                           
 10828                           ; BSR set to: 0
 10829  0029DC  0100               	movlb	0	; () banked
 10830  0029DE  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10831  0029E0  D002               	goto	l4501
 10832                           
 10833                           ; BSR set to: 0
 10834  0029E2  0100               	movlb	0	; () banked
 10835  0029E4  8FC3               	bsf	___ftadd@sign& (0+255),7,b
 10836  0029E6                     l4501:
 10837                           
 10838                           ; BSR set to: 0
 10839  0029E6  0100               	movlb	0	; () banked
 10840  0029E8  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10841  0029EA  D002               	goto	l1057
 10842                           
 10843                           ; BSR set to: 0
 10844  0029EC  0100               	movlb	0	; () banked
 10845  0029EE  8DC3               	bsf	___ftadd@sign& (0+255),6,b
 10846  0029F0                     l1057:
 10847                           
 10848                           ; BSR set to: 0
 10849  0029F0  0100               	movlb	0	; () banked
 10850  0029F2  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10851                           
 10852                           ; BSR set to: 0
 10853  0029F4  0EFF               	movlw	255
 10854  0029F6  0100               	movlb	0	; () banked
 10855  0029F8  17BA               	andwf	___ftadd@f1& (0+255),f,b
 10856  0029FA  0EFF               	movlw	255
 10857  0029FC  0100               	movlb	0	; () banked
 10858  0029FE  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10859  002A00  0E00               	movlw	0
 10860  002A02  0100               	movlb	0	; () banked
 10861  002A04  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10862  002A06  0100               	movlb	0	; () banked
 10863  002A08  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10864                           
 10865                           ; BSR set to: 0
 10866  002A0A  0EFF               	movlw	255
 10867  002A0C  0100               	movlb	0	; () banked
 10868  002A0E  17BD               	andwf	___ftadd@f2& (0+255),f,b
 10869  002A10  0EFF               	movlw	255
 10870  002A12  0100               	movlb	0	; () banked
 10871  002A14  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10872  002A16  0E00               	movlw	0
 10873  002A18  0100               	movlb	0	; () banked
 10874  002A1A  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10875                           
 10876                           ; BSR set to: 0
 10877  002A1C  0100               	movlb	0	; () banked
 10878  002A1E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10879  002A20  0100               	movlb	0	; () banked
 10880  002A22  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10881  002A24  B0D8               	btfsc	status,0,c
 10882  002A26  D025               	goto	l4521
 10883  002A28                     l4511:
 10884                           
 10885                           ; BSR set to: 0
 10886  002A28  0100               	movlb	0	; () banked
 10887  002A2A  90D8               	bcf	status,0,c
 10888  002A2C  37BD               	rlcf	___ftadd@f2& (0+255),f,b
 10889  002A2E  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10890  002A30  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10891  002A32  0100               	movlb	0	; () banked
 10892  002A34  07C4               	decf	___ftadd@exp2& (0+255),f,b
 10893                           
 10894                           ; BSR set to: 0
 10895  002A36  0100               	movlb	0	; () banked
 10896  002A38  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10897  002A3A  0100               	movlb	0	; () banked
 10898  002A3C  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10899  002A3E  B4D8               	btfsc	status,2,c
 10900  002A40  D011               	goto	l4519
 10901                           
 10902                           ; BSR set to: 0
 10903  002A42  0100               	movlb	0	; () banked
 10904  002A44  07C3               	decf	___ftadd@sign& (0+255),f,b
 10905  002A46  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10906  002A4A  0E07               	movlw	7
 10907  002A4C  0100               	movlb	0	; () banked
 10908  002A4E  17C0               	andwf	??___ftadd& (0+255),f,b
 10909  002A50  B4D8               	btfsc	status,2,c
 10910  002A52  D008               	goto	l4519
 10911  002A54  D7E9               	goto	l4511
 10912  002A56                     l4517:
 10913                           
 10914                           ; BSR set to: 0
 10915  002A56  0100               	movlb	0	; () banked
 10916  002A58  90D8               	bcf	status,0,c
 10917  002A5A  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10918  002A5C  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10919  002A5E  33BA               	rrcf	___ftadd@f1& (0+255),f,b
 10920  002A60  0100               	movlb	0	; () banked
 10921  002A62  2BC5               	incf	___ftadd@exp1& (0+255),f,b
 10922  002A64                     l4519:
 10923                           
 10924                           ; BSR set to: 0
 10925  002A64  0100               	movlb	0	; () banked
 10926  002A66  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10927  002A68  0100               	movlb	0	; () banked
 10928  002A6A  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10929  002A6C  B4D8               	btfsc	status,2,c
 10930  002A6E  D02B               	goto	l1066
 10931  002A70  D7F2               	goto	l4517
 10932  002A72                     l4521:
 10933                           
 10934                           ; BSR set to: 0
 10935  002A72  0100               	movlb	0	; () banked
 10936  002A74  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10937  002A76  0100               	movlb	0	; () banked
 10938  002A78  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10939  002A7A  B0D8               	btfsc	status,0,c
 10940  002A7C  D024               	goto	l1066
 10941  002A7E                     l4523:
 10942                           
 10943                           ; BSR set to: 0
 10944  002A7E  0100               	movlb	0	; () banked
 10945  002A80  90D8               	bcf	status,0,c
 10946  002A82  37BA               	rlcf	___ftadd@f1& (0+255),f,b
 10947  002A84  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10948  002A86  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10949  002A88  0100               	movlb	0	; () banked
 10950  002A8A  07C5               	decf	___ftadd@exp1& (0+255),f,b
 10951                           
 10952                           ; BSR set to: 0
 10953  002A8C  0100               	movlb	0	; () banked
 10954  002A8E  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10955  002A90  0100               	movlb	0	; () banked
 10956  002A92  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10957  002A94  B4D8               	btfsc	status,2,c
 10958  002A96  D011               	goto	l4531
 10959                           
 10960                           ; BSR set to: 0
 10961  002A98  0100               	movlb	0	; () banked
 10962  002A9A  07C3               	decf	___ftadd@sign& (0+255),f,b
 10963  002A9C  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10964  002AA0  0E07               	movlw	7
 10965  002AA2  0100               	movlb	0	; () banked
 10966  002AA4  17C0               	andwf	??___ftadd& (0+255),f,b
 10967  002AA6  B4D8               	btfsc	status,2,c
 10968  002AA8  D008               	goto	l4531
 10969  002AAA  D7E9               	goto	l4523
 10970  002AAC                     l4529:
 10971                           
 10972                           ; BSR set to: 0
 10973  002AAC  0100               	movlb	0	; () banked
 10974  002AAE  90D8               	bcf	status,0,c
 10975  002AB0  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10976  002AB2  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10977  002AB4  33BD               	rrcf	___ftadd@f2& (0+255),f,b
 10978  002AB6  0100               	movlb	0	; () banked
 10979  002AB8  2BC4               	incf	___ftadd@exp2& (0+255),f,b
 10980  002ABA                     l4531:
 10981                           
 10982                           ; BSR set to: 0
 10983  002ABA  0100               	movlb	0	; () banked
 10984  002ABC  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10985  002ABE  0100               	movlb	0	; () banked
 10986  002AC0  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10987  002AC2  A4D8               	btfss	status,2,c
 10988  002AC4  D7F3               	goto	l4529
 10989  002AC6                     l1066:
 10990                           
 10991                           ; BSR set to: 0
 10992  002AC6  0100               	movlb	0	; () banked
 10993  002AC8  AFC3               	btfss	___ftadd@sign& (0+255),7,b
 10994  002ACA  D012               	goto	l1075
 10995                           
 10996                           ; BSR set to: 0
 10997  002ACC  0EFF               	movlw	255
 10998  002ACE  0100               	movlb	0	; () banked
 10999  002AD0  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
 11000  002AD2  0EFF               	movlw	255
 11001  002AD4  0100               	movlb	0	; () banked
 11002  002AD6  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11003  002AD8  0EFF               	movlw	255
 11004  002ADA  0100               	movlb	0	; () banked
 11005  002ADC  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11006  002ADE  0E01               	movlw	1
 11007  002AE0  0100               	movlb	0	; () banked
 11008  002AE2  27BA               	addwf	___ftadd@f1& (0+255),f,b
 11009  002AE4  0E00               	movlw	0
 11010  002AE6  0100               	movlb	0	; () banked
 11011  002AE8  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11012  002AEA  0E00               	movlw	0
 11013  002AEC  0100               	movlb	0	; () banked
 11014  002AEE  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11015  002AF0                     l1075:
 11016                           
 11017                           ; BSR set to: 0
 11018  002AF0  0100               	movlb	0	; () banked
 11019  002AF2  ADC3               	btfss	___ftadd@sign& (0+255),6,b
 11020  002AF4  D012               	goto	l4537
 11021                           
 11022                           ; BSR set to: 0
 11023  002AF6  0EFF               	movlw	255
 11024  002AF8  0100               	movlb	0	; () banked
 11025  002AFA  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 11026  002AFC  0EFF               	movlw	255
 11027  002AFE  0100               	movlb	0	; () banked
 11028  002B00  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11029  002B02  0EFF               	movlw	255
 11030  002B04  0100               	movlb	0	; () banked
 11031  002B06  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11032  002B08  0E01               	movlw	1
 11033  002B0A  0100               	movlb	0	; () banked
 11034  002B0C  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11035  002B0E  0E00               	movlw	0
 11036  002B10  0100               	movlb	0	; () banked
 11037  002B12  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11038  002B14  0E00               	movlw	0
 11039  002B16  0100               	movlb	0	; () banked
 11040  002B18  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11041  002B1A                     l4537:
 11042                           
 11043                           ; BSR set to: 0
 11044  002B1A  0E00               	movlw	0
 11045  002B1C  0100               	movlb	0	; () banked
 11046  002B1E  6FC3               	movwf	___ftadd@sign& (0+255),b
 11047                           
 11048                           ; BSR set to: 0
 11049  002B20  0100               	movlb	0	; () banked
 11050  002B22  51BA               	movf	___ftadd@f1& (0+255),w,b
 11051  002B24  0100               	movlb	0	; () banked
 11052  002B26  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11053  002B28  0100               	movlb	0	; () banked
 11054  002B2A  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
 11055  002B2C  0100               	movlb	0	; () banked
 11056  002B2E  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11057  002B30  0100               	movlb	0	; () banked
 11058  002B32  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
 11059  002B34  0100               	movlb	0	; () banked
 11060  002B36  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11061                           
 11062                           ; BSR set to: 0
 11063  002B38  0100               	movlb	0	; () banked
 11064  002B3A  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11065  002B3C  D015               	goto	l4547
 11066                           
 11067                           ; BSR set to: 0
 11068  002B3E  0EFF               	movlw	255
 11069  002B40  0100               	movlb	0	; () banked
 11070  002B42  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 11071  002B44  0EFF               	movlw	255
 11072  002B46  0100               	movlb	0	; () banked
 11073  002B48  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11074  002B4A  0EFF               	movlw	255
 11075  002B4C  0100               	movlb	0	; () banked
 11076  002B4E  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11077  002B50  0E01               	movlw	1
 11078  002B52  0100               	movlb	0	; () banked
 11079  002B54  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11080  002B56  0E00               	movlw	0
 11081  002B58  0100               	movlb	0	; () banked
 11082  002B5A  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11083  002B5C  0E00               	movlw	0
 11084  002B5E  0100               	movlb	0	; () banked
 11085  002B60  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11086                           
 11087                           ; BSR set to: 0
 11088  002B62  0E01               	movlw	1
 11089  002B64  0100               	movlb	0	; () banked
 11090  002B66  6FC3               	movwf	___ftadd@sign& (0+255),b
 11091  002B68                     l4547:
 11092                           
 11093                           ; BSR set to: 0
 11094  002B68  C0BD  F080         	movff	___ftadd@f2,___ftpack@arg
 11095  002B6C  C0BE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 11096  002B70  C0BF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 11097  002B74  C0C5  F083         	movff	___ftadd@exp1,___ftpack@exp
 11098  002B78  C0C3  F084         	movff	___ftadd@sign,___ftpack@sign
 11099  002B7C  ECEC  F01E         	call	___ftpack	;wreg free
 11100  002B80  C080  F0BA         	movff	?___ftpack,?___ftadd
 11101  002B84  C081  F0BB         	movff	?___ftpack+1,?___ftadd+1
 11102  002B88  C082  F0BC         	movff	?___ftpack+2,?___ftadd+2
 11103  002B8C  0012               	return	
 11104  002B8E                     __end_of___ftadd:
 11105                           	opt stack 0
 11106                           tblptru	equ	0xFF8
 11107                           tblptrh	equ	0xFF7
 11108                           tblptrl	equ	0xFF6
 11109                           tablat	equ	0xFF5
 11110                           prodh	equ	0xFF4
 11111                           prodl	equ	0xFF3
 11112                           intcon	equ	0xFF2
 11113                           postinc0	equ	0xFEE
 11114                           wreg	equ	0xFE8
 11115                           postdec1	equ	0xFE5
 11116                           fsr1l	equ	0xFE1
 11117                           indf2	equ	0xFDF
 11118                           postinc2	equ	0xFDE
 11119                           postdec2	equ	0xFDD
 11120                           fsr2h	equ	0xFDA
 11121                           fsr2l	equ	0xFD9
 11122                           status	equ	0xFD8
 11123                           
 11124 ;; *************** function ___awtoft *****************
 11125 ;; Defined at:
 11126 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  c               2    8[BANK0 ] int 
 11129 ;; Auto vars:     Size  Location     Type
 11130 ;;  sign            1   11[BANK0 ] unsigned char 
 11131 ;; Return value:  Size  Location     Type
 11132 ;;                  3    8[BANK0 ] float 
 11133 ;; Registers used:
 11134 ;;		wreg, status,2, status,0, cstack
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11140 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;Total ram usage:        4 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; Hardware stack levels required when called:    7
 11147 ;; This function calls:
 11148 ;;		___ftpack
 11149 ;; This function is called by:
 11150 ;;		_angleToPulse
 11151 ;;		_testFrequency
 11152 ;; This function uses a non-reentrant model
 11153 ;;
 11154                           
 11155                           	psect	text34
 11156  0050A4                     __ptext34:
 11157                           	opt stack 0
 11158  0050A4                     ___awtoft:
 11159                           	opt stack 20
 11160                           
 11161                           ;incstack = 0
 11162  0050A4  0E00               	movlw	0
 11163  0050A6  0100               	movlb	0	; () banked
 11164  0050A8  6F8B               	movwf	___awtoft@sign& (0+255),b
 11165                           
 11166                           ; BSR set to: 0
 11167  0050AA  0100               	movlb	0	; () banked
 11168  0050AC  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
 11169  0050AE  D008               	goto	l4733
 11170                           
 11171                           ; BSR set to: 0
 11172  0050B0  0100               	movlb	0	; () banked
 11173  0050B2  6D88               	negf	___awtoft@c& (0+255),b
 11174  0050B4  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
 11175  0050B6  B0D8               	btfsc	status,0,c
 11176  0050B8  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
 11177                           
 11178                           ; BSR set to: 0
 11179  0050BA  0E01               	movlw	1
 11180  0050BC  0100               	movlb	0	; () banked
 11181  0050BE  6F8B               	movwf	___awtoft@sign& (0+255),b
 11182  0050C0                     l4733:
 11183                           
 11184                           ; BSR set to: 0
 11185  0050C0  C088  F080         	movff	___awtoft@c,___ftpack@arg
 11186  0050C4  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
 11187  0050C8  0100               	movlb	0	; () banked
 11188  0050CA  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
 11189  0050CC  0E8E               	movlw	142
 11190  0050CE  0100               	movlb	0	; () banked
 11191  0050D0  6F83               	movwf	___ftpack@exp& (0+255),b
 11192  0050D2  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
 11193  0050D6  ECEC  F01E         	call	___ftpack	;wreg free
 11194  0050DA  C080  F088         	movff	?___ftpack,?___awtoft
 11195  0050DE  C081  F089         	movff	?___ftpack+1,?___awtoft+1
 11196  0050E2  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
 11197  0050E6  0012               	return	
 11198  0050E8                     __end_of___awtoft:
 11199                           	opt stack 0
 11200                           tblptru	equ	0xFF8
 11201                           tblptrh	equ	0xFF7
 11202                           tblptrl	equ	0xFF6
 11203                           tablat	equ	0xFF5
 11204                           prodh	equ	0xFF4
 11205                           prodl	equ	0xFF3
 11206                           intcon	equ	0xFF2
 11207                           postinc0	equ	0xFEE
 11208                           wreg	equ	0xFE8
 11209                           postdec1	equ	0xFE5
 11210                           fsr1l	equ	0xFE1
 11211                           indf2	equ	0xFDF
 11212                           postinc2	equ	0xFDE
 11213                           postdec2	equ	0xFDD
 11214                           fsr2h	equ	0xFDA
 11215                           fsr2l	equ	0xFD9
 11216                           status	equ	0xFD8
 11217                           
 11218 ;; *************** function ___altoft *****************
 11219 ;; Defined at:
 11220 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;  c               4    8[BANK0 ] long 
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;  sign            1   17[BANK0 ] unsigned char 
 11225 ;;  exp             1   16[BANK0 ] unsigned char 
 11226 ;; Return value:  Size  Location     Type
 11227 ;;                  3    8[BANK0 ] float 
 11228 ;; Registers used:
 11229 ;;		wreg, status,2, status,0, cstack
 11230 ;; Tracked objects:
 11231 ;;		On entry : 0/0
 11232 ;;		On exit  : 0/0
 11233 ;;		Unchanged: 0/0
 11234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11235 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11236 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11237 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;Total ram usage:       10 bytes
 11240 ;; Hardware stack levels used:    1
 11241 ;; Hardware stack levels required when called:    7
 11242 ;; This function calls:
 11243 ;;		___ftpack
 11244 ;; This function is called by:
 11245 ;;		_sortBattery
 11246 ;;		_angleToPulse
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           	psect	text35
 11251  0048F6                     __ptext35:
 11252                           	opt stack 0
 11253  0048F6                     ___altoft:
 11254                           	opt stack 20
 11255                           
 11256                           ;incstack = 0
 11257  0048F6  0E00               	movlw	0
 11258  0048F8  0100               	movlb	0	; () banked
 11259  0048FA  6F91               	movwf	___altoft@sign& (0+255),b
 11260  0048FC  0E8E               	movlw	142
 11261  0048FE  0100               	movlb	0	; () banked
 11262  004900  6F90               	movwf	___altoft@exp& (0+255),b
 11263                           
 11264                           ; BSR set to: 0
 11265  004902  0100               	movlb	0	; () banked
 11266  004904  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 11267  004906  D015               	goto	l4475
 11268                           
 11269                           ; BSR set to: 0
 11270  004908  0100               	movlb	0	; () banked
 11271  00490A  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 11272  00490C  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 11273  00490E  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 11274  004910  6D88               	negf	___altoft@c& (0+255),b
 11275  004912  0E00               	movlw	0
 11276  004914  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 11277  004916  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 11278  004918  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 11279                           
 11280                           ; BSR set to: 0
 11281  00491A  0E01               	movlw	1
 11282  00491C  0100               	movlb	0	; () banked
 11283  00491E  6F91               	movwf	___altoft@sign& (0+255),b
 11284                           
 11285                           ; BSR set to: 0
 11286  004920  D008               	goto	l4475
 11287  004922                     l4473:
 11288                           
 11289                           ; BSR set to: 0
 11290  004922  0100               	movlb	0	; () banked
 11291  004924  90D8               	bcf	status,0,c
 11292  004926  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 11293  004928  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 11294  00492A  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 11295  00492C  3388               	rrcf	___altoft@c& (0+255),f,b
 11296  00492E  0100               	movlb	0	; () banked
 11297  004930  2B90               	incf	___altoft@exp& (0+255),f,b
 11298  004932                     l4475:
 11299                           
 11300                           ; BSR set to: 0
 11301  004932  0E00               	movlw	0
 11302  004934  0100               	movlb	0	; () banked
 11303  004936  1588               	andwf	___altoft@c& (0+255),w,b
 11304  004938  0100               	movlb	0	; () banked
 11305  00493A  6F8C               	movwf	??___altoft& (0+255),b
 11306  00493C  0E00               	movlw	0
 11307  00493E  0100               	movlb	0	; () banked
 11308  004940  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 11309  004942  0100               	movlb	0	; () banked
 11310  004944  6F8D               	movwf	(??___altoft+1)& (0+255),b
 11311  004946  0E00               	movlw	0
 11312  004948  0100               	movlb	0	; () banked
 11313  00494A  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 11314  00494C  0100               	movlb	0	; () banked
 11315  00494E  6F8E               	movwf	(??___altoft+2)& (0+255),b
 11316  004950  0EFF               	movlw	255
 11317  004952  0100               	movlb	0	; () banked
 11318  004954  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 11319  004956  0100               	movlb	0	; () banked
 11320  004958  6F8F               	movwf	(??___altoft+3)& (0+255),b
 11321  00495A  0100               	movlb	0	; () banked
 11322  00495C  518C               	movf	??___altoft& (0+255),w,b
 11323  00495E  0100               	movlb	0	; () banked
 11324  004960  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 11325  004962  0100               	movlb	0	; () banked
 11326  004964  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 11327  004966  0100               	movlb	0	; () banked
 11328  004968  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 11329  00496A  A4D8               	btfss	status,2,c
 11330  00496C  D7DA               	goto	l4473
 11331                           
 11332                           ; BSR set to: 0
 11333                           
 11334                           ; BSR set to: 0
 11335  00496E  C088  F080         	movff	___altoft@c,___ftpack@arg
 11336  004972  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
 11337  004976  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
 11338  00497A  C090  F083         	movff	___altoft@exp,___ftpack@exp
 11339  00497E  C091  F084         	movff	___altoft@sign,___ftpack@sign
 11340  004982  ECEC  F01E         	call	___ftpack	;wreg free
 11341  004986  C080  F088         	movff	?___ftpack,?___altoft
 11342  00498A  C081  F089         	movff	?___ftpack+1,?___altoft+1
 11343  00498E  C082  F08A         	movff	?___ftpack+2,?___altoft+2
 11344  004992  0012               	return	
 11345  004994                     __end_of___altoft:
 11346                           	opt stack 0
 11347                           tblptru	equ	0xFF8
 11348                           tblptrh	equ	0xFF7
 11349                           tblptrl	equ	0xFF6
 11350                           tablat	equ	0xFF5
 11351                           prodh	equ	0xFF4
 11352                           prodl	equ	0xFF3
 11353                           intcon	equ	0xFF2
 11354                           postinc0	equ	0xFEE
 11355                           wreg	equ	0xFE8
 11356                           postdec1	equ	0xFE5
 11357                           fsr1l	equ	0xFE1
 11358                           indf2	equ	0xFDF
 11359                           postinc2	equ	0xFDE
 11360                           postdec2	equ	0xFDD
 11361                           fsr2h	equ	0xFDA
 11362                           fsr2l	equ	0xFD9
 11363                           status	equ	0xFD8
 11364                           
 11365 ;; *************** function ___ftpack *****************
 11366 ;; Defined at:
 11367 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11368 ;; Parameters:    Size  Location     Type
 11369 ;;  arg             3    0[BANK0 ] unsigned um
 11370 ;;  exp             1    3[BANK0 ] unsigned char 
 11371 ;;  sign            1    4[BANK0 ] unsigned char 
 11372 ;; Auto vars:     Size  Location     Type
 11373 ;;		None
 11374 ;; Return value:  Size  Location     Type
 11375 ;;                  3    0[BANK0 ] float 
 11376 ;; Registers used:
 11377 ;;		wreg, status,2, status,0
 11378 ;; Tracked objects:
 11379 ;;		On entry : 0/0
 11380 ;;		On exit  : 0/0
 11381 ;;		Unchanged: 0/0
 11382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11383 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11385 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11386 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11387 ;;Total ram usage:        8 bytes
 11388 ;; Hardware stack levels used:    1
 11389 ;; Hardware stack levels required when called:    6
 11390 ;; This function calls:
 11391 ;;		Nothing
 11392 ;; This function is called by:
 11393 ;;		___altoft
 11394 ;;		___awtoft
 11395 ;;		___ftadd
 11396 ;;		___ftdiv
 11397 ;;		___ftmul
 11398 ;;		___lltoft
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           
 11402                           	psect	text36
 11403  003DD8                     __ptext36:
 11404                           	opt stack 0
 11405  003DD8                     ___ftpack:
 11406                           	opt stack 20
 11407                           
 11408                           ;incstack = 0
 11409  003DD8  0100               	movlb	0	; () banked
 11410  003DDA  5183               	movf	___ftpack@exp& (0+255),w,b
 11411  003DDC  0100               	movlb	0	; () banked
 11412  003DDE  B4D8               	btfsc	status,2,c
 11413  003DE0  D008               	goto	l4407
 11414                           
 11415                           ; BSR set to: 0
 11416  003DE2  0100               	movlb	0	; () banked
 11417  003DE4  5180               	movf	___ftpack@arg& (0+255),w,b
 11418  003DE6  0100               	movlb	0	; () banked
 11419  003DE8  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11420  003DEA  0100               	movlb	0	; () banked
 11421  003DEC  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11422  003DEE  A4D8               	btfss	status,2,c
 11423  003DF0  D011               	goto	l4413
 11424  003DF2                     l4407:
 11425                           
 11426                           ; BSR set to: 0
 11427  003DF2  0E00               	movlw	0
 11428  003DF4  0100               	movlb	0	; () banked
 11429  003DF6  6F80               	movwf	?___ftpack& (0+255),b
 11430  003DF8  0E00               	movlw	0
 11431  003DFA  0100               	movlb	0	; () banked
 11432  003DFC  6F81               	movwf	(?___ftpack+1)& (0+255),b
 11433  003DFE  0E00               	movlw	0
 11434  003E00  0100               	movlb	0	; () banked
 11435  003E02  6F82               	movwf	(?___ftpack+2)& (0+255),b
 11436                           
 11437                           ; BSR set to: 0
 11438  003E04  0012               	return	
 11439  003E06                     l4411:
 11440                           
 11441                           ; BSR set to: 0
 11442  003E06  0100               	movlb	0	; () banked
 11443  003E08  2B83               	incf	___ftpack@exp& (0+255),f,b
 11444  003E0A  0100               	movlb	0	; () banked
 11445  003E0C  90D8               	bcf	status,0,c
 11446  003E0E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11447  003E10  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11448  003E12  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11449  003E14                     l4413:
 11450                           
 11451                           ; BSR set to: 0
 11452  003E14  0E00               	movlw	0
 11453  003E16  0100               	movlb	0	; () banked
 11454  003E18  1580               	andwf	___ftpack@arg& (0+255),w,b
 11455  003E1A  0100               	movlb	0	; () banked
 11456  003E1C  6F85               	movwf	??___ftpack& (0+255),b
 11457  003E1E  0E00               	movlw	0
 11458  003E20  0100               	movlb	0	; () banked
 11459  003E22  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11460  003E24  0100               	movlb	0	; () banked
 11461  003E26  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11462  003E28  0EFE               	movlw	254
 11463  003E2A  0100               	movlb	0	; () banked
 11464  003E2C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11465  003E2E  0100               	movlb	0	; () banked
 11466  003E30  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11467  003E32  0100               	movlb	0	; () banked
 11468  003E34  5185               	movf	??___ftpack& (0+255),w,b
 11469  003E36  0100               	movlb	0	; () banked
 11470  003E38  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11471  003E3A  0100               	movlb	0	; () banked
 11472  003E3C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11473  003E3E  B4D8               	btfsc	status,2,c
 11474  003E40  D011               	goto	l4419
 11475  003E42  D7E1               	goto	l4411
 11476  003E44                     l4415:
 11477                           
 11478                           ; BSR set to: 0
 11479  003E44  0100               	movlb	0	; () banked
 11480  003E46  2B83               	incf	___ftpack@exp& (0+255),f,b
 11481                           
 11482                           ; BSR set to: 0
 11483  003E48  0E01               	movlw	1
 11484  003E4A  0100               	movlb	0	; () banked
 11485  003E4C  2780               	addwf	___ftpack@arg& (0+255),f,b
 11486  003E4E  0E00               	movlw	0
 11487  003E50  0100               	movlb	0	; () banked
 11488  003E52  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11489  003E54  0E00               	movlw	0
 11490  003E56  0100               	movlb	0	; () banked
 11491  003E58  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11492  003E5A  0100               	movlb	0	; () banked
 11493  003E5C  90D8               	bcf	status,0,c
 11494  003E5E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11495  003E60  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11496  003E62  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11497  003E64                     l4419:
 11498                           
 11499                           ; BSR set to: 0
 11500  003E64  0E00               	movlw	0
 11501  003E66  0100               	movlb	0	; () banked
 11502  003E68  1580               	andwf	___ftpack@arg& (0+255),w,b
 11503  003E6A  0100               	movlb	0	; () banked
 11504  003E6C  6F85               	movwf	??___ftpack& (0+255),b
 11505  003E6E  0E00               	movlw	0
 11506  003E70  0100               	movlb	0	; () banked
 11507  003E72  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11508  003E74  0100               	movlb	0	; () banked
 11509  003E76  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11510  003E78  0EFF               	movlw	255
 11511  003E7A  0100               	movlb	0	; () banked
 11512  003E7C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11513  003E7E  0100               	movlb	0	; () banked
 11514  003E80  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11515  003E82  0100               	movlb	0	; () banked
 11516  003E84  5185               	movf	??___ftpack& (0+255),w,b
 11517  003E86  0100               	movlb	0	; () banked
 11518  003E88  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11519  003E8A  0100               	movlb	0	; () banked
 11520  003E8C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11521  003E8E  B4D8               	btfsc	status,2,c
 11522  003E90  D008               	goto	l4423
 11523  003E92  D7D8               	goto	l4415
 11524  003E94                     l4421:
 11525                           
 11526                           ; BSR set to: 0
 11527  003E94  0100               	movlb	0	; () banked
 11528  003E96  0783               	decf	___ftpack@exp& (0+255),f,b
 11529  003E98  0100               	movlb	0	; () banked
 11530  003E9A  90D8               	bcf	status,0,c
 11531  003E9C  3780               	rlcf	___ftpack@arg& (0+255),f,b
 11532  003E9E  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11533  003EA0  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11534  003EA2                     l4423:
 11535                           
 11536                           ; BSR set to: 0
 11537  003EA2  0100               	movlb	0	; () banked
 11538  003EA4  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11539  003EA6  D004               	goto	l1028
 11540                           
 11541                           ; BSR set to: 0
 11542  003EA8  0E02               	movlw	2
 11543  003EAA  0100               	movlb	0	; () banked
 11544  003EAC  6183               	cpfslt	___ftpack@exp& (0+255),b
 11545  003EAE  D7F2               	goto	l4421
 11546  003EB0                     l1028:
 11547                           
 11548                           ; BSR set to: 0
 11549  003EB0  0100               	movlb	0	; () banked
 11550  003EB2  B183               	btfsc	___ftpack@exp& (0+255),0,b
 11551  003EB4  D002               	goto	l4429
 11552                           
 11553                           ; BSR set to: 0
 11554  003EB6  0100               	movlb	0	; () banked
 11555  003EB8  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11556  003EBA                     l4429:
 11557                           
 11558                           ; BSR set to: 0
 11559  003EBA  0100               	movlb	0	; () banked
 11560  003EBC  90D8               	bcf	status,0,c
 11561  003EBE  3383               	rrcf	___ftpack@exp& (0+255),f,b
 11562  003EC0  0100               	movlb	0	; () banked
 11563  003EC2  5183               	movf	___ftpack@exp& (0+255),w,b
 11564  003EC4  0100               	movlb	0	; () banked
 11565  003EC6  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11566                           
 11567                           ; BSR set to: 0
 11568  003EC8  0100               	movlb	0	; () banked
 11569  003ECA  5184               	movf	___ftpack@sign& (0+255),w,b
 11570  003ECC  0100               	movlb	0	; () banked
 11571  003ECE  B4D8               	btfsc	status,2,c
 11572  003ED0  D002               	goto	l4435
 11573                           
 11574                           ; BSR set to: 0
 11575  003ED2  0100               	movlb	0	; () banked
 11576  003ED4  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11577  003ED6                     l4435:
 11578                           
 11579                           ; BSR set to: 0
 11580  003ED6  C080  F080         	movff	___ftpack@arg,?___ftpack
 11581  003EDA  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 11582  003EDE  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 11583  003EE2  0012               	return	
 11584  003EE4                     __end_of___ftpack:
 11585                           	opt stack 0
 11586                           tblptru	equ	0xFF8
 11587                           tblptrh	equ	0xFF7
 11588                           tblptrl	equ	0xFF6
 11589                           tablat	equ	0xFF5
 11590                           prodh	equ	0xFF4
 11591                           prodl	equ	0xFF3
 11592                           intcon	equ	0xFF2
 11593                           postinc0	equ	0xFEE
 11594                           wreg	equ	0xFE8
 11595                           postdec1	equ	0xFE5
 11596                           fsr1l	equ	0xFE1
 11597                           indf2	equ	0xFDF
 11598                           postinc2	equ	0xFDE
 11599                           postdec2	equ	0xFDD
 11600                           fsr2h	equ	0xFDA
 11601                           fsr2l	equ	0xFD9
 11602                           status	equ	0xFD8
 11603                           
 11604 ;; *************** function _initTimer *****************
 11605 ;; Defined at:
 11606 ;;		line 52 in file "timer.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;  timer           2    0[BANK0 ] int 
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;		None
 11611 ;; Return value:  Size  Location     Type
 11612 ;;                  1    wreg      void 
 11613 ;; Registers used:
 11614 ;;		wreg, status,2, status,0
 11615 ;; Tracked objects:
 11616 ;;		On entry : 0/0
 11617 ;;		On exit  : 0/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11620 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11622 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11623 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11624 ;;Total ram usage:        4 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; Hardware stack levels required when called:    6
 11627 ;; This function calls:
 11628 ;;		Nothing
 11629 ;; This function is called by:
 11630 ;;		_main
 11631 ;;		_initServo
 11632 ;;		_testFrequency
 11633 ;; This function uses a non-reentrant model
 11634 ;;
 11635                           
 11636                           	psect	text37
 11637  004F2E                     __ptext37:
 11638                           	opt stack 0
 11639  004F2E                     _initTimer:
 11640                           	opt stack 24
 11641                           
 11642                           ;timer.c: 53: switch(timer){
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;incstack = 0
 11646  004F2E  D00F               	goto	l5335
 11647  004F30                     l5317:
 11648                           
 11649                           ;timer.c: 55: T0CON = 0;
 11650  004F30  0E00               	movlw	0
 11651  004F32  6ED5               	movwf	4053,c	;volatile
 11652                           
 11653                           ;timer.c: 56: T0CON |= 1<<3;
 11654  004F34  86D5               	bsf	4053,3,c	;volatile
 11655                           
 11656                           ;timer.c: 58: TMR0IE = 1;
 11657  004F36  8AF2               	bsf	intcon,5,c	;volatile
 11658                           
 11659                           ;timer.c: 59: break;
 11660  004F38  D01E               	goto	l399
 11661  004F3A                     l5323:
 11662                           
 11663                           ;timer.c: 61: T1CON = 0;
 11664  004F3A  0E00               	movlw	0
 11665  004F3C  6ECD               	movwf	4045,c	;volatile
 11666                           
 11667                           ;timer.c: 63: T1CON |= 0b11<<4;
 11668  004F3E  0E30               	movlw	48
 11669  004F40  12CD               	iorwf	4045,f,c	;volatile
 11670                           
 11671                           ;timer.c: 64: TMR1IE = 1;
 11672  004F42  809D               	bsf	3997,0,c	;volatile
 11673                           
 11674                           ;timer.c: 65: break;
 11675  004F44  D018               	goto	l399
 11676  004F46                     l5329:
 11677                           
 11678                           ;timer.c: 67: T3CON = 0;
 11679  004F46  0E00               	movlw	0
 11680  004F48  6EB1               	movwf	4017,c	;volatile
 11681                           
 11682                           ;timer.c: 68: TMR3IE = 1;
 11683  004F4A  82A0               	bsf	4000,1,c	;volatile
 11684                           
 11685                           ;timer.c: 70: }
 11686                           
 11687                           ;timer.c: 69: break;
 11688  004F4C  D014               	goto	l399
 11689  004F4E                     l5335:
 11690  004F4E  C080  F082         	movff	initTimer@timer,??_initTimer
 11691  004F52  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
 11692                           
 11693                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11694                           ; Switch size 1, requested type "space"
 11695                           ; Number of cases is 1, Range of values is 0 to 0
 11696                           ; switch strategies available:
 11697                           ; Name         Instructions Cycles
 11698                           ; simple_byte            4     3 (average)
 11699                           ;	Chosen strategy is simple_byte
 11700  004F56  0100               	movlb	0	; () banked
 11701  004F58  5183               	movf	(??_initTimer+1)& (0+255),w,b
 11702  004F5A  0A00               	xorlw	0	; case 0
 11703  004F5C  A4D8               	btfss	status,2,c
 11704  004F5E  D00B               	goto	l399
 11705                           
 11706                           ; BSR set to: 0
 11707                           ; Switch size 1, requested type "space"
 11708                           ; Number of cases is 3, Range of values is 0 to 3
 11709                           ; switch strategies available:
 11710                           ; Name         Instructions Cycles
 11711                           ; simple_byte           10     6 (average)
 11712                           ;	Chosen strategy is simple_byte
 11713  004F60  0100               	movlb	0	; () banked
 11714  004F62  5182               	movf	??_initTimer& (0+255),w,b
 11715  004F64  0A00               	xorlw	0	; case 0
 11716  004F66  B4D8               	btfsc	status,2,c
 11717  004F68  D7E3               	goto	l5317
 11718  004F6A  0A01               	xorlw	1	; case 1
 11719  004F6C  B4D8               	btfsc	status,2,c
 11720  004F6E  D7E5               	goto	l5323
 11721  004F70  0A02               	xorlw	2	; case 3
 11722  004F72  B4D8               	btfsc	status,2,c
 11723  004F74  D7E8               	goto	l5329
 11724  004F76                     l399:
 11725                           
 11726                           ;timer.c: 71: PEIE = 1;
 11727  004F76  8CF2               	bsf	intcon,6,c	;volatile
 11728                           
 11729                           ;timer.c: 72: (INTCONbits.GIE = 1);
 11730  004F78  8EF2               	bsf	intcon,7,c	;volatile
 11731  004F7A  0012               	return		;funcret
 11732  004F7C                     __end_of_initTimer:
 11733                           	opt stack 0
 11734                           tblptru	equ	0xFF8
 11735                           tblptrh	equ	0xFF7
 11736                           tblptrl	equ	0xFF6
 11737                           tablat	equ	0xFF5
 11738                           prodh	equ	0xFF4
 11739                           prodl	equ	0xFF3
 11740                           intcon	equ	0xFF2
 11741                           postinc0	equ	0xFEE
 11742                           wreg	equ	0xFE8
 11743                           postdec1	equ	0xFE5
 11744                           fsr1l	equ	0xFE1
 11745                           indf2	equ	0xFDF
 11746                           postinc2	equ	0xFDE
 11747                           postdec2	equ	0xFDD
 11748                           fsr2h	equ	0xFDA
 11749                           fsr2l	equ	0xFD9
 11750                           status	equ	0xFD8
 11751                           
 11752 ;; *************** function _initLCD *****************
 11753 ;; Defined at:
 11754 ;;		line 15 in file "lcd.c"
 11755 ;; Parameters:    Size  Location     Type
 11756 ;;		None
 11757 ;; Auto vars:     Size  Location     Type
 11758 ;;		None
 11759 ;; Return value:  Size  Location     Type
 11760 ;;                  1    wreg      void 
 11761 ;; Registers used:
 11762 ;;		wreg, status,2, status,0, cstack
 11763 ;; Tracked objects:
 11764 ;;		On entry : 0/0
 11765 ;;		On exit  : 0/0
 11766 ;;		Unchanged: 0/0
 11767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11772 ;;Total ram usage:        1 bytes
 11773 ;; Hardware stack levels used:    1
 11774 ;; Hardware stack levels required when called:    8
 11775 ;; This function calls:
 11776 ;;		_lcdInst
 11777 ;; This function is called by:
 11778 ;;		_main
 11779 ;; This function uses a non-reentrant model
 11780 ;;
 11781                           
 11782                           	psect	text38
 11783  005014                     __ptext38:
 11784                           	opt stack 0
 11785  005014                     _initLCD:
 11786                           	opt stack 22
 11787                           
 11788                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 11789                           
 11790                           ;incstack = 0
 11791  005014  0E31               	movlw	49
 11792  005016  0100               	movlb	0	; () banked
 11793  005018  6F84               	movwf	??_initLCD& (0+255),b
 11794  00501A  0EB2               	movlw	178
 11795  00501C                     u7937:
 11796  00501C  2EE8               	decfsz	wreg,f,c
 11797  00501E  D7FE               	bra	u7937
 11798  005020  2F84               	decfsz	??_initLCD& (0+255),f,b
 11799  005022  D7FC               	bra	u7937
 11800  005024  F000               	nop	
 11801                           
 11802                           ;lcd.c: 18: lcdInst(0b00110011);
 11803  005026  0E33               	movlw	51
 11804  005028  EC50  F029         	call	_lcdInst
 11805                           
 11806                           ;lcd.c: 19: lcdInst(0b00110010);
 11807  00502C  0E32               	movlw	50
 11808  00502E  EC50  F029         	call	_lcdInst
 11809                           
 11810                           ;lcd.c: 20: lcdInst(0b00101000);
 11811  005032  0E28               	movlw	40
 11812  005034  EC50  F029         	call	_lcdInst
 11813                           
 11814                           ;lcd.c: 21: lcdInst(0b00001111);
 11815  005038  0E0F               	movlw	15
 11816  00503A  EC50  F029         	call	_lcdInst
 11817                           
 11818                           ;lcd.c: 22: lcdInst(0b00000110);
 11819  00503E  0E06               	movlw	6
 11820  005040  EC50  F029         	call	_lcdInst
 11821                           
 11822                           ;lcd.c: 23: lcdInst(0b00000001);
 11823  005044  0E01               	movlw	1
 11824  005046  EC50  F029         	call	_lcdInst
 11825                           
 11826                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 11827  00504A  0E31               	movlw	49
 11828  00504C  0100               	movlb	0	; () banked
 11829  00504E  6F84               	movwf	??_initLCD& (0+255),b
 11830  005050  0EB2               	movlw	178
 11831  005052                     u7947:
 11832  005052  2EE8               	decfsz	wreg,f,c
 11833  005054  D7FE               	bra	u7947
 11834  005056  2F84               	decfsz	??_initLCD& (0+255),f,b
 11835  005058  D7FC               	bra	u7947
 11836  00505A  F000               	nop	
 11837  00505C  0012               	return		;funcret
 11838  00505E                     __end_of_initLCD:
 11839                           	opt stack 0
 11840                           tblptru	equ	0xFF8
 11841                           tblptrh	equ	0xFF7
 11842                           tblptrl	equ	0xFF6
 11843                           tablat	equ	0xFF5
 11844                           prodh	equ	0xFF4
 11845                           prodl	equ	0xFF3
 11846                           intcon	equ	0xFF2
 11847                           postinc0	equ	0xFEE
 11848                           wreg	equ	0xFE8
 11849                           postdec1	equ	0xFE5
 11850                           fsr1l	equ	0xFE1
 11851                           indf2	equ	0xFDF
 11852                           postinc2	equ	0xFDE
 11853                           postdec2	equ	0xFDD
 11854                           fsr2h	equ	0xFDA
 11855                           fsr2l	equ	0xFD9
 11856                           status	equ	0xFD8
 11857                           
 11858 ;; *************** function _lcdInst *****************
 11859 ;; Defined at:
 11860 ;;		line 27 in file "lcd.c"
 11861 ;; Parameters:    Size  Location     Type
 11862 ;;  data            1    wreg     unsigned char 
 11863 ;; Auto vars:     Size  Location     Type
 11864 ;;  data            1    3[BANK0 ] unsigned char 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;                  1    wreg      void 
 11867 ;; Registers used:
 11868 ;;		wreg, status,2, status,0, cstack
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/0
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11878 ;;Total ram usage:        2 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; Hardware stack levels required when called:    7
 11881 ;; This function calls:
 11882 ;;		_lcdNibble
 11883 ;; This function is called by:
 11884 ;;		_initLCD
 11885 ;;		_lcdHome
 11886 ;;		_lcdClear
 11887 ;;		_lcdNewline
 11888 ;; This function uses a non-reentrant model
 11889 ;;
 11890                           
 11891                           	psect	text39
 11892  0052A0                     __ptext39:
 11893                           	opt stack 0
 11894  0052A0                     _lcdInst:
 11895                           	opt stack 19
 11896                           
 11897                           ;incstack = 0
 11898                           ;lcdInst@data stored from wreg
 11899  0052A0  0100               	movlb	0	; () banked
 11900  0052A2  6F83               	movwf	lcdInst@data& (0+255),b
 11901                           
 11902                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 11903  0052A4  948C               	bcf	3980,2,c	;volatile
 11904                           
 11905                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 11906  0052A6  0E74               	movlw	116
 11907  0052A8                     u7957:
 11908  0052A8  2EE8               	decfsz	wreg,f,c
 11909  0052AA  D7FE               	bra	u7957
 11910  0052AC  D000               	nop2	
 11911                           
 11912                           ;lcd.c: 30: lcdNibble(data);
 11913  0052AE  0100               	movlb	0	; () banked
 11914  0052B0  5183               	movf	lcdInst@data& (0+255),w,b
 11915  0052B2  EC67  F026         	call	_lcdNibble
 11916                           
 11917                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 11918  0052B6  0E04               	movlw	4
 11919  0052B8  0100               	movlb	0	; () banked
 11920  0052BA  6F82               	movwf	??_lcdInst& (0+255),b
 11921  0052BC  0E3D               	movlw	61
 11922  0052BE                     u7967:
 11923  0052BE  2EE8               	decfsz	wreg,f,c
 11924  0052C0  D7FE               	bra	u7967
 11925  0052C2  2F82               	decfsz	??_lcdInst& (0+255),f,b
 11926  0052C4  D7FC               	bra	u7967
 11927  0052C6  D000               	nop2	
 11928  0052C8  0012               	return		;funcret
 11929  0052CA                     __end_of_lcdInst:
 11930                           	opt stack 0
 11931                           tblptru	equ	0xFF8
 11932                           tblptrh	equ	0xFF7
 11933                           tblptrl	equ	0xFF6
 11934                           tablat	equ	0xFF5
 11935                           prodh	equ	0xFF4
 11936                           prodl	equ	0xFF3
 11937                           intcon	equ	0xFF2
 11938                           postinc0	equ	0xFEE
 11939                           wreg	equ	0xFE8
 11940                           postdec1	equ	0xFE5
 11941                           fsr1l	equ	0xFE1
 11942                           indf2	equ	0xFDF
 11943                           postinc2	equ	0xFDE
 11944                           postdec2	equ	0xFDD
 11945                           fsr2h	equ	0xFDA
 11946                           fsr2l	equ	0xFD9
 11947                           status	equ	0xFD8
 11948                           
 11949 ;; *************** function _lcdNibble *****************
 11950 ;; Defined at:
 11951 ;;		line 46 in file "lcd.c"
 11952 ;; Parameters:    Size  Location     Type
 11953 ;;  data            1    wreg     unsigned char 
 11954 ;; Auto vars:     Size  Location     Type
 11955 ;;  data            1    1[BANK0 ] unsigned char 
 11956 ;;  temp            1    0[BANK0 ] unsigned char 
 11957 ;; Return value:  Size  Location     Type
 11958 ;;                  1    wreg      void 
 11959 ;; Registers used:
 11960 ;;		wreg, status,2, status,0
 11961 ;; Tracked objects:
 11962 ;;		On entry : 0/0
 11963 ;;		On exit  : 0/0
 11964 ;;		Unchanged: 0/0
 11965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11967 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;Total ram usage:        2 bytes
 11971 ;; Hardware stack levels used:    1
 11972 ;; Hardware stack levels required when called:    6
 11973 ;; This function calls:
 11974 ;;		Nothing
 11975 ;; This function is called by:
 11976 ;;		_lcdInst
 11977 ;;		_putch
 11978 ;; This function uses a non-reentrant model
 11979 ;;
 11980                           
 11981                           	psect	text40
 11982  004CCE                     __ptext40:
 11983                           	opt stack 0
 11984  004CCE                     _lcdNibble:
 11985                           	opt stack 21
 11986                           
 11987                           ;incstack = 0
 11988                           ;lcdNibble@data stored from wreg
 11989  004CCE  0100               	movlb	0	; () banked
 11990  004CD0  6F81               	movwf	lcdNibble@data& (0+255),b
 11991                           
 11992                           ;lcd.c: 48: char temp = data & 0xF0;
 11993  004CD2  0100               	movlb	0	; () banked
 11994  004CD4  5181               	movf	lcdNibble@data& (0+255),w,b
 11995  004CD6  0BF0               	andlw	240
 11996  004CD8  0100               	movlb	0	; () banked
 11997  004CDA  6F80               	movwf	lcdNibble@temp& (0+255),b
 11998                           
 11999                           ;lcd.c: 49: LATD = LATD & 0x0F;
 12000  004CDC  508C               	movf	3980,w,c	;volatile
 12001  004CDE  0B0F               	andlw	15
 12002  004CE0  6E8C               	movwf	3980,c	;volatile
 12003                           
 12004                           ;lcd.c: 50: LATD = temp | LATD;
 12005  004CE2  0100               	movlb	0	; () banked
 12006  004CE4  5180               	movf	lcdNibble@temp& (0+255),w,b
 12007  004CE6  108C               	iorwf	3980,w,c	;volatile
 12008  004CE8  6E8C               	movwf	3980,c	;volatile
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 12012  004CEA  968C               	bcf	3980,3,c	;volatile
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12016  004CEC  0ED6               	movlw	214
 12017  004CEE                     u7977:
 12018  004CEE  D000               	nop2	
 12019  004CF0  D000               	nop2	
 12020  004CF2  2EE8               	decfsz	wreg,f,c
 12021  004CF4  D7FC               	bra	u7977
 12022  004CF6  D000               	nop2	
 12023                           
 12024                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 12025  004CF8  868C               	bsf	3980,3,c	;volatile
 12026                           
 12027                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12028  004CFA  0ED6               	movlw	214
 12029  004CFC                     u7987:
 12030  004CFC  D000               	nop2	
 12031  004CFE  D000               	nop2	
 12032  004D00  2EE8               	decfsz	wreg,f,c
 12033  004D02  D7FC               	bra	u7987
 12034  004D04  D000               	nop2	
 12035                           
 12036                           ;lcd.c: 58: data = data << 4;
 12037  004D06  0100               	movlb	0	; () banked
 12038  004D08  3981               	swapf	lcdNibble@data& (0+255),w,b
 12039  004D0A  0BF0               	andlw	240
 12040  004D0C  0100               	movlb	0	; () banked
 12041  004D0E  6F81               	movwf	lcdNibble@data& (0+255),b
 12042                           
 12043                           ;lcd.c: 60: temp = data & 0xF0;
 12044  004D10  0100               	movlb	0	; () banked
 12045  004D12  5181               	movf	lcdNibble@data& (0+255),w,b
 12046  004D14  0BF0               	andlw	240
 12047  004D16  0100               	movlb	0	; () banked
 12048  004D18  6F80               	movwf	lcdNibble@temp& (0+255),b
 12049                           
 12050                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12051  004D1A  508C               	movf	3980,w,c	;volatile
 12052  004D1C  0B0F               	andlw	15
 12053  004D1E  6E8C               	movwf	3980,c	;volatile
 12054                           
 12055                           ;lcd.c: 62: LATD = temp | LATD;
 12056  004D20  0100               	movlb	0	; () banked
 12057  004D22  5180               	movf	lcdNibble@temp& (0+255),w,b
 12058  004D24  108C               	iorwf	3980,w,c	;volatile
 12059  004D26  6E8C               	movwf	3980,c	;volatile
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12063  004D28  968C               	bcf	3980,3,c	;volatile
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12067  004D2A  0ED6               	movlw	214
 12068  004D2C                     u7997:
 12069  004D2C  D000               	nop2	
 12070  004D2E  D000               	nop2	
 12071  004D30  2EE8               	decfsz	wreg,f,c
 12072  004D32  D7FC               	bra	u7997
 12073  004D34  D000               	nop2	
 12074                           
 12075                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12076  004D36  868C               	bsf	3980,3,c	;volatile
 12077                           
 12078                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12079  004D38  0ED6               	movlw	214
 12080  004D3A                     u8007:
 12081  004D3A  D000               	nop2	
 12082  004D3C  D000               	nop2	
 12083  004D3E  2EE8               	decfsz	wreg,f,c
 12084  004D40  D7FC               	bra	u8007
 12085  004D42  D000               	nop2	
 12086  004D44  0012               	return		;funcret
 12087  004D46                     __end_of_lcdNibble:
 12088                           	opt stack 0
 12089                           tblptru	equ	0xFF8
 12090                           tblptrh	equ	0xFF7
 12091                           tblptrl	equ	0xFF6
 12092                           tablat	equ	0xFF5
 12093                           prodh	equ	0xFF4
 12094                           prodl	equ	0xFF3
 12095                           intcon	equ	0xFF2
 12096                           postinc0	equ	0xFEE
 12097                           wreg	equ	0xFE8
 12098                           postdec1	equ	0xFE5
 12099                           fsr1l	equ	0xFE1
 12100                           indf2	equ	0xFDF
 12101                           postinc2	equ	0xFDE
 12102                           postdec2	equ	0xFDD
 12103                           fsr2h	equ	0xFDA
 12104                           fsr2l	equ	0xFD9
 12105                           status	equ	0xFD8
 12106                           
 12107 ;; *************** function ___almod *****************
 12108 ;; Defined at:
 12109 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12110 ;; Parameters:    Size  Location     Type
 12111 ;;  dividend        4   14[BANK0 ] long 
 12112 ;;  divisor         4   18[BANK0 ] long 
 12113 ;; Auto vars:     Size  Location     Type
 12114 ;;  sign            1   23[BANK0 ] unsigned char 
 12115 ;;  counter         1   22[BANK0 ] unsigned char 
 12116 ;; Return value:  Size  Location     Type
 12117 ;;                  4   14[BANK0 ] long 
 12118 ;; Registers used:
 12119 ;;		wreg, status,2, status,0
 12120 ;; Tracked objects:
 12121 ;;		On entry : 0/0
 12122 ;;		On exit  : 0/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12125 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12126 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;Total ram usage:       10 bytes
 12130 ;; Hardware stack levels used:    1
 12131 ;; Hardware stack levels required when called:    6
 12132 ;; This function calls:
 12133 ;;		Nothing
 12134 ;; This function is called by:
 12135 ;;		_main
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139                           	psect	text41
 12140  0042D6                     __ptext41:
 12141                           	opt stack 0
 12142  0042D6                     ___almod:
 12143                           	opt stack 24
 12144                           
 12145                           ;incstack = 0
 12146  0042D6  0E00               	movlw	0
 12147  0042D8  0100               	movlb	0	; () banked
 12148  0042DA  6F97               	movwf	___almod@sign& (0+255),b
 12149                           
 12150                           ; BSR set to: 0
 12151  0042DC  0100               	movlb	0	; () banked
 12152  0042DE  AF91               	btfss	(___almod@dividend+3)& (0+255),7,b
 12153  0042E0  D00C               	goto	l6327
 12154                           
 12155                           ; BSR set to: 0
 12156  0042E2  0100               	movlb	0	; () banked
 12157  0042E4  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 12158  0042E6  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 12159  0042E8  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 12160  0042EA  6D8E               	negf	___almod@dividend& (0+255),b
 12161  0042EC  0E00               	movlw	0
 12162  0042EE  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12163  0042F0  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12164  0042F2  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12165                           
 12166                           ; BSR set to: 0
 12167  0042F4  0E01               	movlw	1
 12168  0042F6  0100               	movlb	0	; () banked
 12169  0042F8  6F97               	movwf	___almod@sign& (0+255),b
 12170  0042FA                     l6327:
 12171                           
 12172                           ; BSR set to: 0
 12173  0042FA  0100               	movlb	0	; () banked
 12174  0042FC  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12175  0042FE  D009               	goto	l6331
 12176                           
 12177                           ; BSR set to: 0
 12178  004300  0100               	movlb	0	; () banked
 12179  004302  1F95               	comf	(___almod@divisor+3)& (0+255),f,b
 12180  004304  1F94               	comf	(___almod@divisor+2)& (0+255),f,b
 12181  004306  1F93               	comf	(___almod@divisor+1)& (0+255),f,b
 12182  004308  6D92               	negf	___almod@divisor& (0+255),b
 12183  00430A  0E00               	movlw	0
 12184  00430C  2393               	addwfc	(___almod@divisor+1)& (0+255),f,b
 12185  00430E  2394               	addwfc	(___almod@divisor+2)& (0+255),f,b
 12186  004310  2395               	addwfc	(___almod@divisor+3)& (0+255),f,b
 12187  004312                     l6331:
 12188                           
 12189                           ; BSR set to: 0
 12190  004312  0100               	movlb	0	; () banked
 12191  004314  5192               	movf	___almod@divisor& (0+255),w,b
 12192  004316  0100               	movlb	0	; () banked
 12193  004318  1193               	iorwf	(___almod@divisor+1)& (0+255),w,b
 12194  00431A  0100               	movlb	0	; () banked
 12195  00431C  1194               	iorwf	(___almod@divisor+2)& (0+255),w,b
 12196  00431E  0100               	movlb	0	; () banked
 12197  004320  1195               	iorwf	(___almod@divisor+3)& (0+255),w,b
 12198  004322  B4D8               	btfsc	status,2,c
 12199  004324  D03A               	goto	l6347
 12200                           
 12201                           ; BSR set to: 0
 12202  004326  0E01               	movlw	1
 12203  004328  0100               	movlb	0	; () banked
 12204  00432A  6F96               	movwf	___almod@counter& (0+255),b
 12205  00432C  D008               	goto	l6337
 12206  00432E                     l6335:
 12207                           
 12208                           ; BSR set to: 0
 12209  00432E  0100               	movlb	0	; () banked
 12210  004330  90D8               	bcf	status,0,c
 12211  004332  3792               	rlcf	___almod@divisor& (0+255),f,b
 12212  004334  3793               	rlcf	(___almod@divisor+1)& (0+255),f,b
 12213  004336  3794               	rlcf	(___almod@divisor+2)& (0+255),f,b
 12214  004338  3795               	rlcf	(___almod@divisor+3)& (0+255),f,b
 12215  00433A  0100               	movlb	0	; () banked
 12216  00433C  2B96               	incf	___almod@counter& (0+255),f,b
 12217  00433E                     l6337:
 12218                           
 12219                           ; BSR set to: 0
 12220  00433E  0100               	movlb	0	; () banked
 12221  004340  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12222  004342  D7F5               	goto	l6335
 12223  004344                     l6339:
 12224                           
 12225                           ; BSR set to: 0
 12226  004344  0100               	movlb	0	; () banked
 12227  004346  5192               	movf	___almod@divisor& (0+255),w,b
 12228  004348  0100               	movlb	0	; () banked
 12229  00434A  5D8E               	subwf	___almod@dividend& (0+255),w,b
 12230  00434C  0100               	movlb	0	; () banked
 12231  00434E  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12232  004350  0100               	movlb	0	; () banked
 12233  004352  598F               	subwfb	(___almod@dividend+1)& (0+255),w,b
 12234  004354  0100               	movlb	0	; () banked
 12235  004356  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12236  004358  0100               	movlb	0	; () banked
 12237  00435A  5990               	subwfb	(___almod@dividend+2)& (0+255),w,b
 12238  00435C  0100               	movlb	0	; () banked
 12239  00435E  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12240  004360  0100               	movlb	0	; () banked
 12241  004362  5991               	subwfb	(___almod@dividend+3)& (0+255),w,b
 12242  004364  A0D8               	btfss	status,0,c
 12243  004366  D010               	goto	l6343
 12244                           
 12245                           ; BSR set to: 0
 12246  004368  0100               	movlb	0	; () banked
 12247  00436A  5192               	movf	___almod@divisor& (0+255),w,b
 12248  00436C  0100               	movlb	0	; () banked
 12249  00436E  5F8E               	subwf	___almod@dividend& (0+255),f,b
 12250  004370  0100               	movlb	0	; () banked
 12251  004372  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12252  004374  0100               	movlb	0	; () banked
 12253  004376  5B8F               	subwfb	(___almod@dividend+1)& (0+255),f,b
 12254  004378  0100               	movlb	0	; () banked
 12255  00437A  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12256  00437C  0100               	movlb	0	; () banked
 12257  00437E  5B90               	subwfb	(___almod@dividend+2)& (0+255),f,b
 12258  004380  0100               	movlb	0	; () banked
 12259  004382  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12260  004384  0100               	movlb	0	; () banked
 12261  004386  5B91               	subwfb	(___almod@dividend+3)& (0+255),f,b
 12262  004388                     l6343:
 12263                           
 12264                           ; BSR set to: 0
 12265  004388  0100               	movlb	0	; () banked
 12266  00438A  90D8               	bcf	status,0,c
 12267  00438C  3395               	rrcf	(___almod@divisor+3)& (0+255),f,b
 12268  00438E  3394               	rrcf	(___almod@divisor+2)& (0+255),f,b
 12269  004390  3393               	rrcf	(___almod@divisor+1)& (0+255),f,b
 12270  004392  3392               	rrcf	___almod@divisor& (0+255),f,b
 12271                           
 12272                           ; BSR set to: 0
 12273  004394  0100               	movlb	0	; () banked
 12274  004396  2F96               	decfsz	___almod@counter& (0+255),f,b
 12275  004398  D7D5               	goto	l6339
 12276  00439A                     l6347:
 12277                           
 12278                           ; BSR set to: 0
 12279  00439A  0100               	movlb	0	; () banked
 12280  00439C  5197               	movf	___almod@sign& (0+255),w,b
 12281  00439E  0100               	movlb	0	; () banked
 12282  0043A0  B4D8               	btfsc	status,2,c
 12283  0043A2  D009               	goto	l6351
 12284                           
 12285                           ; BSR set to: 0
 12286  0043A4  0100               	movlb	0	; () banked
 12287  0043A6  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 12288  0043A8  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 12289  0043AA  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 12290  0043AC  6D8E               	negf	___almod@dividend& (0+255),b
 12291  0043AE  0E00               	movlw	0
 12292  0043B0  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12293  0043B2  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12294  0043B4  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12295  0043B6                     l6351:
 12296                           
 12297                           ; BSR set to: 0
 12298  0043B6  C08E  F08E         	movff	___almod@dividend,?___almod
 12299  0043BA  C08F  F08F         	movff	___almod@dividend+1,?___almod+1
 12300  0043BE  C090  F090         	movff	___almod@dividend+2,?___almod+2
 12301  0043C2  C091  F091         	movff	___almod@dividend+3,?___almod+3
 12302  0043C6  0012               	return	
 12303  0043C8                     __end_of___almod:
 12304                           	opt stack 0
 12305                           tblptru	equ	0xFF8
 12306                           tblptrh	equ	0xFF7
 12307                           tblptrl	equ	0xFF6
 12308                           tablat	equ	0xFF5
 12309                           prodh	equ	0xFF4
 12310                           prodl	equ	0xFF3
 12311                           intcon	equ	0xFF2
 12312                           postinc0	equ	0xFEE
 12313                           wreg	equ	0xFE8
 12314                           postdec1	equ	0xFE5
 12315                           fsr1l	equ	0xFE1
 12316                           indf2	equ	0xFDF
 12317                           postinc2	equ	0xFDE
 12318                           postdec2	equ	0xFDD
 12319                           fsr2h	equ	0xFDA
 12320                           fsr2l	equ	0xFD9
 12321                           status	equ	0xFD8
 12322                           
 12323 ;; *************** function ___aldiv *****************
 12324 ;; Defined at:
 12325 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;  dividend        4    0[BANK0 ] long 
 12328 ;;  divisor         4    4[BANK0 ] long 
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;  quotient        4   10[BANK0 ] long 
 12331 ;;  sign            1    9[BANK0 ] unsigned char 
 12332 ;;  counter         1    8[BANK0 ] unsigned char 
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  4    0[BANK0 ] long 
 12335 ;; Registers used:
 12336 ;;		wreg, status,2, status,0
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12342 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12343 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12345 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;Total ram usage:       14 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    6
 12349 ;; This function calls:
 12350 ;;		Nothing
 12351 ;; This function is called by:
 12352 ;;		_main
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           	psect	text42
 12357  003CBE                     __ptext42:
 12358                           	opt stack 0
 12359  003CBE                     ___aldiv:
 12360                           	opt stack 24
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;incstack = 0
 12364  003CBE  0E00               	movlw	0
 12365  003CC0  0100               	movlb	0	; () banked
 12366  003CC2  6F89               	movwf	___aldiv@sign& (0+255),b
 12367                           
 12368                           ; BSR set to: 0
 12369  003CC4  0100               	movlb	0	; () banked
 12370  003CC6  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12371  003CC8  D00C               	goto	l6283
 12372                           
 12373                           ; BSR set to: 0
 12374  003CCA  0100               	movlb	0	; () banked
 12375  003CCC  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
 12376  003CCE  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
 12377  003CD0  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
 12378  003CD2  6D84               	negf	___aldiv@divisor& (0+255),b
 12379  003CD4  0E00               	movlw	0
 12380  003CD6  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 12381  003CD8  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 12382  003CDA  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 12383                           
 12384                           ; BSR set to: 0
 12385  003CDC  0E01               	movlw	1
 12386  003CDE  0100               	movlb	0	; () banked
 12387  003CE0  6F89               	movwf	___aldiv@sign& (0+255),b
 12388  003CE2                     l6283:
 12389                           
 12390                           ; BSR set to: 0
 12391  003CE2  0100               	movlb	0	; () banked
 12392  003CE4  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 12393  003CE6  D00C               	goto	l6289
 12394                           
 12395                           ; BSR set to: 0
 12396  003CE8  0100               	movlb	0	; () banked
 12397  003CEA  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
 12398  003CEC  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
 12399  003CEE  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
 12400  003CF0  6D80               	negf	___aldiv@dividend& (0+255),b
 12401  003CF2  0E00               	movlw	0
 12402  003CF4  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 12403  003CF6  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 12404  003CF8  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 12405                           
 12406                           ; BSR set to: 0
 12407  003CFA  0E01               	movlw	1
 12408  003CFC  0100               	movlb	0	; () banked
 12409  003CFE  1B89               	xorwf	___aldiv@sign& (0+255),f,b
 12410  003D00                     l6289:
 12411                           
 12412                           ; BSR set to: 0
 12413  003D00  0E00               	movlw	0
 12414  003D02  0100               	movlb	0	; () banked
 12415  003D04  6F8A               	movwf	___aldiv@quotient& (0+255),b
 12416  003D06  0E00               	movlw	0
 12417  003D08  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
 12418  003D0A  0E00               	movlw	0
 12419  003D0C  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
 12420  003D0E  0E00               	movlw	0
 12421  003D10  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
 12422                           
 12423                           ; BSR set to: 0
 12424  003D12  0100               	movlb	0	; () banked
 12425  003D14  5184               	movf	___aldiv@divisor& (0+255),w,b
 12426  003D16  0100               	movlb	0	; () banked
 12427  003D18  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 12428  003D1A  0100               	movlb	0	; () banked
 12429  003D1C  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 12430  003D1E  0100               	movlb	0	; () banked
 12431  003D20  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 12432  003D22  B4D8               	btfsc	status,2,c
 12433  003D24  D042               	goto	l6311
 12434                           
 12435                           ; BSR set to: 0
 12436  003D26  0E01               	movlw	1
 12437  003D28  0100               	movlb	0	; () banked
 12438  003D2A  6F88               	movwf	___aldiv@counter& (0+255),b
 12439  003D2C  D008               	goto	l6297
 12440  003D2E                     l6295:
 12441                           
 12442                           ; BSR set to: 0
 12443  003D2E  0100               	movlb	0	; () banked
 12444  003D30  90D8               	bcf	status,0,c
 12445  003D32  3784               	rlcf	___aldiv@divisor& (0+255),f,b
 12446  003D34  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 12447  003D36  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 12448  003D38  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 12449  003D3A  0100               	movlb	0	; () banked
 12450  003D3C  2B88               	incf	___aldiv@counter& (0+255),f,b
 12451  003D3E                     l6297:
 12452                           
 12453                           ; BSR set to: 0
 12454  003D3E  0100               	movlb	0	; () banked
 12455  003D40  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12456  003D42  D7F5               	goto	l6295
 12457  003D44                     l6299:
 12458                           
 12459                           ; BSR set to: 0
 12460  003D44  0100               	movlb	0	; () banked
 12461  003D46  90D8               	bcf	status,0,c
 12462  003D48  378A               	rlcf	___aldiv@quotient& (0+255),f,b
 12463  003D4A  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 12464  003D4C  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 12465  003D4E  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 12466                           
 12467                           ; BSR set to: 0
 12468  003D50  0100               	movlb	0	; () banked
 12469  003D52  5184               	movf	___aldiv@divisor& (0+255),w,b
 12470  003D54  0100               	movlb	0	; () banked
 12471  003D56  5D80               	subwf	___aldiv@dividend& (0+255),w,b
 12472  003D58  0100               	movlb	0	; () banked
 12473  003D5A  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12474  003D5C  0100               	movlb	0	; () banked
 12475  003D5E  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 12476  003D60  0100               	movlb	0	; () banked
 12477  003D62  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12478  003D64  0100               	movlb	0	; () banked
 12479  003D66  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 12480  003D68  0100               	movlb	0	; () banked
 12481  003D6A  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12482  003D6C  0100               	movlb	0	; () banked
 12483  003D6E  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 12484  003D70  A0D8               	btfss	status,0,c
 12485  003D72  D012               	goto	l6307
 12486                           
 12487                           ; BSR set to: 0
 12488  003D74  0100               	movlb	0	; () banked
 12489  003D76  5184               	movf	___aldiv@divisor& (0+255),w,b
 12490  003D78  0100               	movlb	0	; () banked
 12491  003D7A  5F80               	subwf	___aldiv@dividend& (0+255),f,b
 12492  003D7C  0100               	movlb	0	; () banked
 12493  003D7E  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12494  003D80  0100               	movlb	0	; () banked
 12495  003D82  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 12496  003D84  0100               	movlb	0	; () banked
 12497  003D86  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12498  003D88  0100               	movlb	0	; () banked
 12499  003D8A  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 12500  003D8C  0100               	movlb	0	; () banked
 12501  003D8E  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12502  003D90  0100               	movlb	0	; () banked
 12503  003D92  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 12504                           
 12505                           ; BSR set to: 0
 12506  003D94  0100               	movlb	0	; () banked
 12507  003D96  818A               	bsf	___aldiv@quotient& (0+255),0,b
 12508  003D98                     l6307:
 12509                           
 12510                           ; BSR set to: 0
 12511  003D98  0100               	movlb	0	; () banked
 12512  003D9A  90D8               	bcf	status,0,c
 12513  003D9C  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 12514  003D9E  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 12515  003DA0  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 12516  003DA2  3384               	rrcf	___aldiv@divisor& (0+255),f,b
 12517                           
 12518                           ; BSR set to: 0
 12519  003DA4  0100               	movlb	0	; () banked
 12520  003DA6  2F88               	decfsz	___aldiv@counter& (0+255),f,b
 12521  003DA8  D7CD               	goto	l6299
 12522  003DAA                     l6311:
 12523                           
 12524                           ; BSR set to: 0
 12525  003DAA  0100               	movlb	0	; () banked
 12526  003DAC  5189               	movf	___aldiv@sign& (0+255),w,b
 12527  003DAE  0100               	movlb	0	; () banked
 12528  003DB0  B4D8               	btfsc	status,2,c
 12529  003DB2  D009               	goto	l6315
 12530                           
 12531                           ; BSR set to: 0
 12532  003DB4  0100               	movlb	0	; () banked
 12533  003DB6  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 12534  003DB8  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 12535  003DBA  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 12536  003DBC  6D8A               	negf	___aldiv@quotient& (0+255),b
 12537  003DBE  0E00               	movlw	0
 12538  003DC0  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 12539  003DC2  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 12540  003DC4  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 12541  003DC6                     l6315:
 12542                           
 12543                           ; BSR set to: 0
 12544  003DC6  C08A  F080         	movff	___aldiv@quotient,?___aldiv
 12545  003DCA  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
 12546  003DCE  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
 12547  003DD2  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
 12548  003DD6  0012               	return	
 12549  003DD8                     __end_of___aldiv:
 12550                           	opt stack 0
 12551                           tblptru	equ	0xFF8
 12552                           tblptrh	equ	0xFF7
 12553                           tblptrl	equ	0xFF6
 12554                           tablat	equ	0xFF5
 12555                           prodh	equ	0xFF4
 12556                           prodl	equ	0xFF3
 12557                           intcon	equ	0xFF2
 12558                           postinc0	equ	0xFEE
 12559                           wreg	equ	0xFE8
 12560                           postdec1	equ	0xFE5
 12561                           fsr1l	equ	0xFE1
 12562                           indf2	equ	0xFDF
 12563                           postinc2	equ	0xFDE
 12564                           postdec2	equ	0xFDD
 12565                           fsr2h	equ	0xFDA
 12566                           fsr2l	equ	0xFD9
 12567                           status	equ	0xFD8
 12568                           
 12569 ;; *************** function _service *****************
 12570 ;; Defined at:
 12571 ;;		line 266 in file "main.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;		None
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;  key             1  121[COMRAM] unsigned char 
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  1    wreg      void 
 12578 ;; Registers used:
 12579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;Total ram usage:       19 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    5
 12592 ;; This function calls:
 12593 ;;		_servoInterruptService
 12594 ;;		i2_lcdClear
 12595 ;;		i2_printf
 12596 ;;		i2_startTimer
 12597 ;; This function is called by:
 12598 ;;		Interrupt level 2
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           	psect	intcode
 12603  000008                     __pintcode:
 12604                           	opt stack 0
 12605  000008                     _service:
 12606                           	opt stack 19
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;incstack = 0
 12610  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12611  00000A  EDFD  F01B         	call	int_func,f	;refresh shadow registers
 12612                           tblptru	equ	0xFF8
 12613                           tblptrh	equ	0xFF7
 12614                           tblptrl	equ	0xFF6
 12615                           tablat	equ	0xFF5
 12616                           prodh	equ	0xFF4
 12617                           prodl	equ	0xFF3
 12618                           intcon	equ	0xFF2
 12619                           postinc0	equ	0xFEE
 12620                           wreg	equ	0xFE8
 12621                           postdec1	equ	0xFE5
 12622                           fsr1l	equ	0xFE1
 12623                           indf2	equ	0xFDF
 12624                           postinc2	equ	0xFDE
 12625                           postdec2	equ	0xFDD
 12626                           fsr2h	equ	0xFDA
 12627                           fsr2l	equ	0xFD9
 12628                           status	equ	0xFD8
 12629                           
 12630                           	psect	intcode_body
 12631  0037FA                     __pintcode_body:
 12632                           	opt stack 19
 12633  0037FA                     int_func:
 12634                           	opt stack 19
 12635  0037FA  0006               	pop		; remove dummy address from shadow register refresh
 12636  0037FC  CFFA F06C          	movff	pclath,??_service+4
 12637  003800  CFFB F06D          	movff	pclatu,??_service+5
 12638  003804  CFE9 F06E          	movff	fsr0l,??_service+6
 12639  003808  CFEA F06F          	movff	fsr0h,??_service+7
 12640  00380C  CFE1 F070          	movff	fsr1l,??_service+8
 12641  003810  CFE2 F071          	movff	fsr1h,??_service+9
 12642  003814  CFD9 F072          	movff	fsr2l,??_service+10
 12643  003818  CFDA F073          	movff	fsr2h,??_service+11
 12644  00381C  CFF3 F074          	movff	prodl,??_service+12
 12645  003820  CFF4 F075          	movff	prodh,??_service+13
 12646  003824  CFF6 F076          	movff	tblptrl,??_service+14
 12647  003828  CFF7 F077          	movff	tblptrh,??_service+15
 12648  00382C  CFF8 F078          	movff	tblptru,??_service+16
 12649  003830  CFF5 F079          	movff	tablat,??_service+17
 12650                           
 12651                           ;main.c: 268: servoInterruptService();
 12652  003834  EC72  F01F         	call	_servoInterruptService	;wreg free
 12653                           
 12654                           ;main.c: 270: if(TMR1IF){
 12655  003838  A09E               	btfss	3998,0,c	;volatile
 12656  00383A  D024               	goto	i2l6737
 12657                           
 12658                           ;main.c: 271: startTimer(1,0xffff - period);
 12659  00383C  0E00               	movlw	0
 12660  00383E  6E08               	movwf	i2startTimer@timer+1,c
 12661  003840  0E01               	movlw	1
 12662  003842  6E07               	movwf	i2startTimer@timer,c
 12663  003844  0EFF               	movlw	255
 12664  003846  6E68               	movwf	??_service& (0+255),c
 12665  003848  0EFF               	movlw	255
 12666  00384A  6E69               	movwf	(??_service+1)& (0+255),c
 12667  00384C  C15C  F06A         	movff	_period,??_service+2
 12668  003850  C15D  F06B         	movff	_period+1,??_service+3
 12669  003854  1E6A               	comf	??_service+2,f,c
 12670  003856  1E6B               	comf	??_service+3,f,c
 12671  003858  4A6A               	infsnz	??_service+2,f,c
 12672  00385A  2A6B               	incf	??_service+3,f,c
 12673  00385C  5068               	movf	??_service,w,c
 12674  00385E  266A               	addwf	??_service+2,f,c
 12675  003860  5069               	movf	??_service+1,w,c
 12676  003862  226B               	addwfc	??_service+3,f,c
 12677  003864  C06A  F009         	movff	??_service+2,i2startTimer@val
 12678  003868  C06B  F00A         	movff	??_service+3,i2startTimer@val+1
 12679  00386C  6A0B               	clrf	i2startTimer@val+2,c
 12680  00386E  6A0C               	clrf	i2startTimer@val+3,c
 12681  003870  ECE4  F027         	call	i2_startTimer	;wreg free
 12682                           
 12683                           ;main.c: 272: time+=1;
 12684  003874  0E01               	movlw	1
 12685  003876  0101               	movlb	1	; () banked
 12686  003878  279A               	addwf	_time& (0+255),f,b
 12687  00387A  0E00               	movlw	0
 12688  00387C  239B               	addwfc	(_time+1)& (0+255),f,b
 12689  00387E  239C               	addwfc	(_time+2)& (0+255),f,b
 12690  003880  239D               	addwfc	(_time+3)& (0+255),f,b
 12691                           
 12692                           ; BSR set to: 1
 12693                           ;main.c: 273: TMR1IF = 0;
 12694  003882  909E               	bcf	3998,0,c	;volatile
 12695  003884                     i2l6737:
 12696                           
 12697                           ;main.c: 274: }
 12698                           ;main.c: 277: if(INT0IF){ INT0IF = 0;
 12699  003884  A2F2               	btfss	intcon,1,c	;volatile
 12700  003886  D006               	goto	i2l6743
 12701  003888  92F2               	bcf	intcon,1,c	;volatile
 12702                           
 12703                           ;main.c: 278: batteryDetected = 1;
 12704  00388A  0E00               	movlw	0
 12705  00388C  0101               	movlb	1	; () banked
 12706  00388E  6F9F               	movwf	(_batteryDetected+1)& (0+255),b
 12707  003890  0E01               	movlw	1
 12708  003892  6F9E               	movwf	_batteryDetected& (0+255),b
 12709  003894                     i2l6743:
 12710                           
 12711                           ;main.c: 279: }
 12712                           ;main.c: 282: if(INT1IF && INT1IE){INT1IF = 0;
 12713  003894  B0F0               	btfsc	intcon3,0,c	;volatile
 12714  003896  A6F0               	btfss	intcon3,3,c	;volatile
 12715  003898  D02F               	goto	i2l167
 12716  00389A  90F0               	bcf	intcon3,0,c	;volatile
 12717                           
 12718                           ;main.c: 285: char key = (PORTB & 0xF0) >> 4;
 12719  00389C  3881               	swapf	3969,w,c	;volatile
 12720  00389E  0B0F               	andlw	15
 12721  0038A0  0B0F               	andlw	15
 12722  0038A2  6E7A               	movwf	service@key,c
 12723                           
 12724                           ;main.c: 286: if(key == 0)time = 0;
 12725  0038A4  507A               	movf	service@key,w,c
 12726  0038A6  A4D8               	btfss	status,2,c
 12727  0038A8  D00A               	goto	i2l6755
 12728  0038AA  0E00               	movlw	0
 12729  0038AC  0101               	movlb	1	; () banked
 12730  0038AE  6F9A               	movwf	_time& (0+255),b
 12731  0038B0  0E00               	movlw	0
 12732  0038B2  6F9B               	movwf	(_time+1)& (0+255),b
 12733  0038B4  0E00               	movlw	0
 12734  0038B6  6F9C               	movwf	(_time+2)& (0+255),b
 12735  0038B8  0E00               	movlw	0
 12736  0038BA  6F9D               	movwf	(_time+3)& (0+255),b
 12737  0038BC  D011               	goto	i2l6763
 12738  0038BE                     i2l6755:
 12739                           
 12740                           ;main.c: 287: else if(key == 1)period+=100;
 12741  0038BE  047A               	decf	service@key,w,c
 12742  0038C0  A4D8               	btfss	status,2,c
 12743  0038C2  D005               	goto	i2l6759
 12744  0038C4  0E64               	movlw	100
 12745  0038C6  0101               	movlb	1	; () banked
 12746  0038C8  275C               	addwf	_period& (0+255),f,b
 12747  0038CA  0E00               	movlw	0
 12748  0038CC  D008               	goto	L7
 12749  0038CE                     i2l6759:
 12750                           
 12751                           ;main.c: 288: else if(key == 2)period-=100;
 12752  0038CE  0E02               	movlw	2
 12753  0038D0  187A               	xorwf	service@key,w,c
 12754  0038D2  A4D8               	btfss	status,2,c
 12755  0038D4  D005               	goto	i2l6763
 12756  0038D6  0101               	movlb	1	; () banked
 12757  0038D8  0E9C               	movlw	156
 12758  0038DA  275C               	addwf	_period& (0+255),f,b
 12759  0038DC  0EFF               	movlw	255
 12760  0038DE                     L7:
 12761  0038DE  235D               	addwfc	(_period+1)& (0+255),f,b
 12762  0038E0                     i2l6763:
 12763                           
 12764                           ;main.c: 289: lcdClear();
 12765  0038E0  ECDF  F029         	call	i2_lcdClear	;wreg free
 12766                           
 12767                           ;main.c: 290: printf("period %ld",period);
 12768  0038E4  0EE3               	movlw	low STR_4
 12769  0038E6  6E40               	movwf	i2printf@f,c
 12770  0038E8  0EFF               	movlw	high STR_4
 12771  0038EA  6E41               	movwf	i2printf@f+1,c
 12772  0038EC  C15C  F042         	movff	_period,?i2_printf+2
 12773  0038F0  C15D  F043         	movff	_period+1,?i2_printf+3
 12774  0038F4  EC65  F006         	call	i2_printf	;wreg free
 12775  0038F8                     i2l167:
 12776  0038F8  C079  FFF5         	movff	??_service+17,tablat
 12777  0038FC  C078  FFF8         	movff	??_service+16,tblptru
 12778  003900  C077  FFF7         	movff	??_service+15,tblptrh
 12779  003904  C076  FFF6         	movff	??_service+14,tblptrl
 12780  003908  C075  FFF4         	movff	??_service+13,prodh
 12781  00390C  C074  FFF3         	movff	??_service+12,prodl
 12782  003910  C073  FFDA         	movff	??_service+11,fsr2h
 12783  003914  C072  FFD9         	movff	??_service+10,fsr2l
 12784  003918  C071  FFE2         	movff	??_service+9,fsr1h
 12785  00391C  C070  FFE1         	movff	??_service+8,fsr1l
 12786  003920  C06F  FFEA         	movff	??_service+7,fsr0h
 12787  003924  C06E  FFE9         	movff	??_service+6,fsr0l
 12788  003928  C06D  FFFB         	movff	??_service+5,pclatu
 12789  00392C  C06C  FFFA         	movff	??_service+4,pclath
 12790  003930  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12791  003932  0011               	retfie		f
 12792  003934                     __end_of_service:
 12793                           	opt stack 0
 12794                           pclatu	equ	0xFFB
 12795                           pclath	equ	0xFFA
 12796                           tblptru	equ	0xFF8
 12797                           tblptrh	equ	0xFF7
 12798                           tblptrl	equ	0xFF6
 12799                           tablat	equ	0xFF5
 12800                           prodh	equ	0xFF4
 12801                           prodl	equ	0xFF3
 12802                           intcon	equ	0xFF2
 12803                           intcon3	equ	0xFF0
 12804                           postinc0	equ	0xFEE
 12805                           fsr0h	equ	0xFEA
 12806                           fsr0l	equ	0xFE9
 12807                           wreg	equ	0xFE8
 12808                           postdec1	equ	0xFE5
 12809                           fsr1h	equ	0xFE2
 12810                           fsr1l	equ	0xFE1
 12811                           indf2	equ	0xFDF
 12812                           postinc2	equ	0xFDE
 12813                           postdec2	equ	0xFDD
 12814                           fsr2h	equ	0xFDA
 12815                           fsr2l	equ	0xFD9
 12816                           status	equ	0xFD8
 12817                           
 12818 ;; *************** function i2_printf *****************
 12819 ;; Defined at:
 12820 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;  f               2   63[COMRAM] PTR const unsigned char 
 12823 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
 12824 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
 12825 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
 12826 ;;		 -> STR_5(8), STR_4(11), STR_3(15), STR_2(17), 
 12827 ;;		 -> STR_1(8), 
 12828 ;; Auto vars:     Size  Location     Type
 12829 ;;  printf          4   91[COMRAM] unsigned long 
 12830 ;;  printf          4   85[COMRAM] struct .
 12831 ;;  printf          3   95[COMRAM] struct .
 12832 ;;  printf          2  100[COMRAM] unsigned short 
 12833 ;;  printf          2   98[COMRAM] int 
 12834 ;;  printf          2   89[COMRAM] int 
 12835 ;;  printf          2   83[COMRAM] int 
 12836 ;;  printf          2   81[COMRAM] PTR void [1]
 12837 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12838 ;;  printf          2   79[COMRAM] unsigned int 
 12839 ;;  printf          2   77[COMRAM] PTR const unsigned char 
 12840 ;;		 -> printf@c(1), 
 12841 ;;  printf          1  102[COMRAM] char 
 12842 ;;  printf          1   76[COMRAM] unsigned char 
 12843 ;;  printf          1    0        unsigned char 
 12844 ;; Return value:  Size  Location     Type
 12845 ;;                  2   63[COMRAM] int 
 12846 ;; Registers used:
 12847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12848 ;; Tracked objects:
 12849 ;;		On entry : 0/0
 12850 ;;		On exit  : 0/0
 12851 ;;		Unchanged: 0/0
 12852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12853 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12855 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12856 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12857 ;;Total ram usage:       40 bytes
 12858 ;; Hardware stack levels used:    1
 12859 ;; Hardware stack levels required when called:    4
 12860 ;; This function calls:
 12861 ;;		i2___awdiv
 12862 ;;		i2___ftadd
 12863 ;;		i2___ftge
 12864 ;;		i2___ftmul
 12865 ;;		i2___ftneg
 12866 ;;		i2___ftsub
 12867 ;;		i2___fttol
 12868 ;;		i2___lldiv
 12869 ;;		i2___llmod
 12870 ;;		i2___lltoft
 12871 ;;		i2___wmul
 12872 ;;		i2__div_to_l_
 12873 ;;		i2__tdiv_to_l_
 12874 ;;		i2_fround
 12875 ;;		i2_isdigit
 12876 ;;		i2_putch
 12877 ;;		i2_scale
 12878 ;; This function is called by:
 12879 ;;		_service
 12880 ;; This function uses a non-reentrant model
 12881 ;;
 12882                           
 12883                           	psect	text44
 12884  000CCA                     __ptext44:
 12885                           	opt stack 0
 12886  000CCA                     i2_printf:
 12887                           	opt stack 19
 12888                           
 12889                           ;doprnt.c: 466: va_list ap;
 12890                           ;doprnt.c: 499: signed char c;
 12891                           ;doprnt.c: 501: int width;
 12892                           ;doprnt.c: 504: int prec;
 12893                           ;doprnt.c: 508: unsigned short flag;
 12894                           ;doprnt.c: 515: char d;
 12895                           ;doprnt.c: 516: double fval;
 12896                           ;doprnt.c: 517: int exp;
 12897                           ;doprnt.c: 523: union {
 12898                           ;doprnt.c: 524: unsigned long vd;
 12899                           ;doprnt.c: 525: double integ;
 12900                           ;doprnt.c: 526: } tmpval;
 12901                           ;doprnt.c: 528: unsigned long val;
 12902                           ;doprnt.c: 529: unsigned len;
 12903                           ;doprnt.c: 530: const char * cp;
 12904                           ;doprnt.c: 533: *ap = __va_start();
 12905                           
 12906                           ;incstack = 0
 12907  000CCA  0E42               	movlw	low (?i2_printf+2)
 12908  000CCC  6E52               	movwf	i2printf@ap,c
 12909  000CCE  0E00               	movlw	high (?i2_printf+2)
 12910  000CD0  6E53               	movwf	i2printf@ap+1,c
 12911                           
 12912                           ;doprnt.c: 536: while(c = *f++) {
 12913  000CD2  EF9B  F00B         	goto	i2l6681
 12914  000CD6                     i2l6359:
 12915                           
 12916                           ;doprnt.c: 538: if(c != '%')
 12917  000CD6  0E25               	movlw	37
 12918  000CD8  1867               	xorwf	i2printf@c,w,c
 12919  000CDA  B4D8               	btfsc	status,2,c
 12920  000CDC  D005               	goto	i2l6363
 12921                           
 12922                           ;doprnt.c: 540: {
 12923                           ;doprnt.c: 541: (putch(c) );
 12924  000CDE  5067               	movf	i2printf@c,w,c
 12925  000CE0  EC9E  F029         	call	i2_putch
 12926                           
 12927                           ;doprnt.c: 542: continue;
 12928  000CE4  EF9B  F00B         	goto	i2l6681
 12929  000CE8                     i2l6363:
 12930                           
 12931                           ;doprnt.c: 543: }
 12932                           ;doprnt.c: 546: width = 0;
 12933  000CE8  0E00               	movlw	0
 12934  000CEA  6E64               	movwf	i2printf@width+1,c
 12935  000CEC  0E00               	movlw	0
 12936  000CEE  6E63               	movwf	i2printf@width,c
 12937                           
 12938                           ;doprnt.c: 548: flag = 0;
 12939  000CF0  0E00               	movlw	0
 12940  000CF2  6E66               	movwf	i2printf@flag+1,c
 12941  000CF4  0E00               	movlw	0
 12942  000CF6  6E65               	movwf	i2printf@flag,c
 12943                           
 12944                           ;doprnt.c: 551: switch(*f) {
 12945                           
 12946                           ;doprnt.c: 550: for(;;) {
 12947  000CF8  D003               	goto	i2l6369
 12948  000CFA                     i2l6365:
 12949                           
 12950                           ;doprnt.c: 580: flag |= 0x04;
 12951  000CFA  8465               	bsf	i2printf@flag,2,c
 12952                           
 12953                           ;doprnt.c: 581: f++;
 12954  000CFC  4A40               	infsnz	i2printf@f,f,c
 12955  000CFE  2A41               	incf	i2printf@f+1,f,c
 12956  000D00                     i2l6369:
 12957  000D00  C040  FFF6         	movff	i2printf@f,tblptrl
 12958  000D04  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12959  000D08                     	if	0	;tblptru may be non-zero
 12960  000D08                     	endif
 12961  000D08                     	if	0	;tblptru may be non-zero
 12962  000D08                     	endif
 12963  000D08  0008               	tblrd		*
 12964  000D0A  50F5               	movf	tablat,w,c
 12965                           
 12966                           ; Switch size 1, requested type "space"
 12967                           ; Number of cases is 1, Range of values is 48 to 48
 12968                           ; switch strategies available:
 12969                           ; Name         Instructions Cycles
 12970                           ; simple_byte            4     3 (average)
 12971                           ;	Chosen strategy is simple_byte
 12972  000D0C  0A30               	xorlw	48	; case 48
 12973  000D0E  B4D8               	btfsc	status,2,c
 12974  000D10  D7F4               	goto	i2l6365
 12975                           
 12976                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12977                           
 12978                           ;doprnt.c: 586: }
 12979                           
 12980                           ;doprnt.c: 585: break;
 12981  000D12  C040  FFF6         	movff	i2printf@f,tblptrl
 12982  000D16  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12983  000D1A                     	if	0	;tblptru may be non-zero
 12984  000D1A                     	endif
 12985  000D1A                     	if	0	;tblptru may be non-zero
 12986  000D1A                     	endif
 12987  000D1A  0008               	tblrd		*
 12988  000D1C  50F5               	movf	tablat,w,c
 12989  000D1E  ECC0  F029         	call	i2_isdigit
 12990  000D22  A0D8               	btfss	status,0,c
 12991  000D24  D07B               	goto	i2l6415
 12992                           
 12993                           ;doprnt.c: 598: width = 0;
 12994  000D26  0E00               	movlw	0
 12995  000D28  6E64               	movwf	i2printf@width+1,c
 12996  000D2A  0E00               	movlw	0
 12997  000D2C  6E63               	movwf	i2printf@width,c
 12998  000D2E                     i2l6375:
 12999                           
 13000                           ;doprnt.c: 600: width *= 10;
 13001  000D2E  C063  F00F         	movff	i2printf@width,i2___wmul@multiplier
 13002  000D32  C064  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 13003  000D36  0E00               	movlw	0
 13004  000D38  6E12               	movwf	i2___wmul@multiplicand+1,c
 13005  000D3A  0E0A               	movlw	10
 13006  000D3C  6E11               	movwf	i2___wmul@multiplicand,c
 13007  000D3E  EC79  F029         	call	i2___wmul	;wreg free
 13008  000D42  C00F  F063         	movff	?i2___wmul,i2printf@width
 13009  000D46  C010  F064         	movff	?i2___wmul+1,i2printf@width+1
 13010                           
 13011                           ;doprnt.c: 601: width += *f++ - '0';
 13012  000D4A  0ED0               	movlw	208
 13013  000D4C  6E44               	movwf	??i2_printf& (0+255),c
 13014  000D4E  0EFF               	movlw	255
 13015  000D50  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13016  000D52  C040  FFF6         	movff	i2printf@f,tblptrl
 13017  000D56  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13018  000D5A                     	if	0	;tblptru may be non-zero
 13019  000D5A                     	endif
 13020  000D5A                     	if	0	;tblptru may be non-zero
 13021  000D5A                     	endif
 13022  000D5A  0008               	tblrd		*
 13023  000D5C  50F5               	movf	tablat,w,c
 13024  000D5E  6E46               	movwf	(??i2_printf+2)& (0+255),c
 13025  000D60  6A47               	clrf	(??i2_printf+3)& (0+255),c
 13026  000D62  5044               	movf	??i2_printf,w,c
 13027  000D64  2646               	addwf	??i2_printf+2,f,c
 13028  000D66  5045               	movf	??i2_printf+1,w,c
 13029  000D68  2247               	addwfc	??i2_printf+3,f,c
 13030  000D6A  5046               	movf	??i2_printf+2,w,c
 13031  000D6C  2663               	addwf	i2printf@width,f,c
 13032  000D6E  5047               	movf	??i2_printf+3,w,c
 13033  000D70  2264               	addwfc	i2printf@width+1,f,c
 13034  000D72  4A40               	infsnz	i2printf@f,f,c
 13035  000D74  2A41               	incf	i2printf@f+1,f,c
 13036                           
 13037                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13038  000D76  C040  FFF6         	movff	i2printf@f,tblptrl
 13039  000D7A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13040  000D7E                     	if	0	;tblptru may be non-zero
 13041  000D7E                     	endif
 13042  000D7E                     	if	0	;tblptru may be non-zero
 13043  000D7E                     	endif
 13044  000D7E  0008               	tblrd		*
 13045  000D80  50F5               	movf	tablat,w,c
 13046  000D82  ECC0  F029         	call	i2_isdigit
 13047  000D86  A0D8               	btfss	status,0,c
 13048  000D88  D049               	goto	i2l6415
 13049  000D8A  D7D1               	goto	i2l6375
 13050  000D8C                     i2l6383:
 13051                           
 13052                           ;doprnt.c: 643: flag |= 0x10;
 13053  000D8C  8865               	bsf	i2printf@flag,4,c
 13054                           
 13055                           ;doprnt.c: 644: goto loop;
 13056  000D8E  D046               	goto	i2l6415
 13057  000D90                     i2l6385:
 13058                           
 13059                           ;doprnt.c: 663: flag |= 0x400;
 13060  000D90  8466               	bsf	i2printf@flag+1,2,c
 13061                           
 13062                           ;doprnt.c: 698: case 'i':
 13063                           ;doprnt.c: 699: break;
 13064                           
 13065                           ;doprnt.c: 697: case 'd':
 13066                           
 13067                           ;doprnt.c: 664: break;
 13068  000D92  D064               	goto	i2l6417
 13069  000D94                     i2l6387:
 13070                           
 13071                           ;doprnt.c: 721: flag |= 0x80;
 13072  000D94  8E65               	bsf	i2printf@flag,7,c
 13073                           
 13074                           ;doprnt.c: 723: break;
 13075  000D96  D062               	goto	i2l6417
 13076  000D98                     i2l6389:
 13077                           
 13078                           ;doprnt.c: 757: if(width > len)
 13079  000D98  5063               	movf	i2printf@width,w,c
 13080  000D9A  5C50               	subwf	i2printf@len,w,c
 13081  000D9C  5064               	movf	i2printf@width+1,w,c
 13082  000D9E  5851               	subwfb	i2printf@len+1,w,c
 13083  000DA0  B0D8               	btfsc	status,0,c
 13084  000DA2  D005               	goto	i2l6393
 13085                           
 13086                           ;doprnt.c: 758: width -= len;
 13087  000DA4  5050               	movf	i2printf@len,w,c
 13088  000DA6  5E63               	subwf	i2printf@width,f,c
 13089  000DA8  5051               	movf	i2printf@len+1,w,c
 13090  000DAA  5A64               	subwfb	i2printf@width+1,f,c
 13091  000DAC  D008               	goto	i2l6397
 13092  000DAE                     i2l6393:
 13093                           
 13094                           ;doprnt.c: 759: else
 13095                           ;doprnt.c: 760: width = 0;
 13096  000DAE  0E00               	movlw	0
 13097  000DB0  6E64               	movwf	i2printf@width+1,c
 13098  000DB2  0E00               	movlw	0
 13099  000DB4  6E63               	movwf	i2printf@width,c
 13100                           
 13101                           ;doprnt.c: 764: while(width--)
 13102  000DB6  D003               	goto	i2l6397
 13103  000DB8                     i2l6395:
 13104                           
 13105                           ;doprnt.c: 765: (putch(' ') );
 13106  000DB8  0E20               	movlw	32
 13107  000DBA  EC9E  F029         	call	i2_putch
 13108  000DBE                     i2l6397:
 13109  000DBE  0663               	decf	i2printf@width,f,c
 13110  000DC0  A0D8               	btfss	status,0,c
 13111  000DC2  0664               	decf	i2printf@width+1,f,c
 13112  000DC4  2863               	incf	i2printf@width,w,c
 13113  000DC6  E1F8               	bnz	i2l6395
 13114  000DC8  2864               	incf	i2printf@width+1,w,c
 13115  000DCA  B4D8               	btfsc	status,2,c
 13116  000DCC  D00A               	goto	i2l6403
 13117  000DCE  D7F4               	goto	i2l6395
 13118  000DD0                     i2l6399:
 13119                           
 13120                           ;doprnt.c: 768: (putch(*cp++) );
 13121  000DD0  C04E  FFD9         	movff	i2printf@cp,fsr2l
 13122  000DD4  C04F  FFDA         	movff	i2printf@cp+1,fsr2h
 13123  000DD8  50DF               	movf	indf2,w,c
 13124  000DDA  EC9E  F029         	call	i2_putch
 13125  000DDE  4A4E               	infsnz	i2printf@cp,f,c
 13126  000DE0  2A4F               	incf	i2printf@cp+1,f,c
 13127  000DE2                     i2l6403:
 13128  000DE2  0650               	decf	i2printf@len,f,c
 13129  000DE4  A0D8               	btfss	status,0,c
 13130  000DE6  0651               	decf	i2printf@len+1,f,c
 13131  000DE8  2850               	incf	i2printf@len,w,c
 13132  000DEA  E1F2               	bnz	i2l6399
 13133  000DEC  2851               	incf	i2printf@len+1,w,c
 13134  000DEE  B4D8               	btfsc	status,2,c
 13135  000DF0  EF9B  F00B         	goto	i2l6681
 13136  000DF4  D7ED               	goto	i2l6399
 13137  000DF6                     i2l6405:
 13138                           
 13139                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 13140  000DF6  C052  FFD9         	movff	i2printf@ap,fsr2l
 13141  000DFA  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13142  000DFE  50DF               	movf	indf2,w,c
 13143  000E00  6E67               	movwf	i2printf@c,c
 13144  000E02  0E02               	movlw	2
 13145  000E04  2652               	addwf	i2printf@ap,f,c
 13146  000E06  0E00               	movlw	0
 13147  000E08  2253               	addwfc	i2printf@ap+1,f,c
 13148  000E0A                     i2l6409:
 13149                           
 13150                           ;doprnt.c: 805: cp = (char *)&c;
 13151  000E0A  0E67               	movlw	low i2printf@c
 13152  000E0C  6E4E               	movwf	i2printf@cp,c
 13153  000E0E  0E00               	movlw	high i2printf@c
 13154  000E10  6E4F               	movwf	i2printf@cp+1,c
 13155                           
 13156                           ;doprnt.c: 806: len = 1;
 13157  000E12  0E00               	movlw	0
 13158  000E14  6E51               	movwf	i2printf@len+1,c
 13159  000E16  0E01               	movlw	1
 13160  000E18  6E50               	movwf	i2printf@len,c
 13161                           
 13162                           ;doprnt.c: 807: goto dostring;
 13163  000E1A  D7BE               	goto	i2l6389
 13164  000E1C                     i2l6415:
 13165  000E1C  C040  FFF6         	movff	i2printf@f,tblptrl
 13166  000E20  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13167  000E24  4A40               	infsnz	i2printf@f,f,c
 13168  000E26  2A41               	incf	i2printf@f+1,f,c
 13169  000E28                     	if	0	;tblptru may be non-zero
 13170  000E28                     	endif
 13171  000E28                     	if	0	;tblptru may be non-zero
 13172  000E28                     	endif
 13173  000E28  0008               	tblrd		*
 13174  000E2A  CFF5 F067          	movff	tablat,i2printf@c
 13175  000E2E  5067               	movf	i2printf@c,w,c
 13176                           
 13177                           ; Switch size 1, requested type "space"
 13178                           ; Number of cases is 7, Range of values is 0 to 120
 13179                           ; switch strategies available:
 13180                           ; Name         Instructions Cycles
 13181                           ; simple_byte           22    12 (average)
 13182                           ;	Chosen strategy is simple_byte
 13183  000E30  0A00               	xorlw	0	; case 0
 13184  000E32  B4D8               	btfsc	status,2,c
 13185  000E34  0012               	return	
 13186  000E36  0A63               	xorlw	99	; case 99
 13187  000E38  B4D8               	btfsc	status,2,c
 13188  000E3A  D7DD               	goto	i2l6405
 13189  000E3C  0A07               	xorlw	7	; case 100
 13190  000E3E  B4D8               	btfsc	status,2,c
 13191  000E40  D00D               	goto	i2l6417
 13192  000E42  0A02               	xorlw	2	; case 102
 13193  000E44  B4D8               	btfsc	status,2,c
 13194  000E46  D7A4               	goto	i2l6385
 13195  000E48  0A0F               	xorlw	15	; case 105
 13196  000E4A  B4D8               	btfsc	status,2,c
 13197  000E4C  D007               	goto	i2l6417
 13198  000E4E  0A05               	xorlw	5	; case 108
 13199  000E50  B4D8               	btfsc	status,2,c
 13200  000E52  D79C               	goto	i2l6383
 13201  000E54  0A14               	xorlw	20	; case 120
 13202  000E56  B4D8               	btfsc	status,2,c
 13203  000E58  D79D               	goto	i2l6387
 13204  000E5A  D7D7               	goto	i2l6409
 13205  000E5C                     i2l6417:
 13206                           
 13207                           ;doprnt.c: 825: if(flag & (0x700)) {
 13208  000E5C  0E07               	movlw	7
 13209  000E5E  1466               	andwf	i2printf@flag+1,w,c
 13210  000E60  B4D8               	btfsc	status,2,c
 13211  000E62  D2EC               	goto	i2l700
 13212                           
 13213                           ;doprnt.c: 829: prec = 6;
 13214  000E64  0E00               	movlw	0
 13215  000E66  6E55               	movwf	i2printf@prec+1,c
 13216  000E68  0E06               	movlw	6
 13217  000E6A  6E54               	movwf	i2printf@prec,c
 13218                           
 13219                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13220  000E6C  C052  FFD9         	movff	i2printf@ap,fsr2l
 13221  000E70  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13222  000E74  CFDE F060          	movff	postinc2,i2printf@fval
 13223  000E78  CFDE F061          	movff	postinc2,i2printf@fval+1
 13224  000E7C  CFDD F062          	movff	postdec2,i2printf@fval+2
 13225  000E80  0E03               	movlw	3
 13226  000E82  2652               	addwf	i2printf@ap,f,c
 13227  000E84  0E00               	movlw	0
 13228  000E86  2253               	addwfc	i2printf@ap+1,f,c
 13229                           
 13230                           ;doprnt.c: 831: if(fval < 0.0) {
 13231  000E88  AE62               	btfss	i2printf@fval+2,7,c
 13232  000E8A  D010               	goto	i2l6431
 13233                           
 13234                           ;doprnt.c: 832: fval = -fval;
 13235  000E8C  C060  F001         	movff	i2printf@fval,i2___ftneg@f1
 13236  000E90  C061  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 13237  000E94  C062  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 13238  000E98  EC8C  F029         	call	i2___ftneg	;wreg free
 13239  000E9C  C001  F060         	movff	?i2___ftneg,i2printf@fval
 13240  000EA0  C002  F061         	movff	?i2___ftneg+1,i2printf@fval+1
 13241  000EA4  C003  F062         	movff	?i2___ftneg+2,i2printf@fval+2
 13242                           
 13243                           ;doprnt.c: 833: flag |= 0x03;
 13244  000EA8  0E03               	movlw	3
 13245  000EAA  1265               	iorwf	i2printf@flag,f,c
 13246  000EAC                     i2l6431:
 13247                           
 13248                           ;doprnt.c: 834: }
 13249                           ;doprnt.c: 835: exp = 0;
 13250  000EAC  0E00               	movlw	0
 13251  000EAE  6E5B               	movwf	i2printf@exp+1,c
 13252  000EB0  0E00               	movlw	0
 13253  000EB2  6E5A               	movwf	i2printf@exp,c
 13254                           
 13255                           ;doprnt.c: 836: if( fval!=0) {
 13256  000EB4  5060               	movf	i2printf@fval,w,c
 13257  000EB6  1061               	iorwf	i2printf@fval+1,w,c
 13258  000EB8  1062               	iorwf	i2printf@fval+2,w,c
 13259  000EBA  B4D8               	btfsc	status,2,c
 13260  000EBC  D083               	goto	i2l6459
 13261                           
 13262                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13263  000EBE  0E82               	movlw	130
 13264  000EC0  6E44               	movwf	??i2_printf& (0+255),c
 13265  000EC2  0EFF               	movlw	255
 13266  000EC4  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13267  000EC6  C060  F046         	movff	i2printf@fval,??i2_printf+2
 13268  000ECA  C061  F047         	movff	i2printf@fval+1,??i2_printf+3
 13269  000ECE  C062  F048         	movff	i2printf@fval+2,??i2_printf+4
 13270  000ED2  C063  F049         	movff	i2printf@fval+3,??i2_printf+5
 13271  000ED6  0E10               	movlw	16
 13272  000ED8  D005               	goto	i2u704_40
 13273  000EDA                     i2u704_45:
 13274  000EDA  90D8               	bcf	status,0,c
 13275  000EDC  3249               	rrcf	??i2_printf+5,f,c
 13276  000EDE  3248               	rrcf	??i2_printf+4,f,c
 13277  000EE0  3247               	rrcf	??i2_printf+3,f,c
 13278  000EE2  3246               	rrcf	??i2_printf+2,f,c
 13279  000EE4                     i2u704_40:
 13280  000EE4  2EE8               	decfsz	wreg,f,c
 13281  000EE6  D7F9               	goto	i2u704_45
 13282  000EE8  5046               	movf	??i2_printf+2,w,c
 13283  000EEA  2444               	addwf	??i2_printf,w,c
 13284  000EEC  6E5A               	movwf	i2printf@exp,c
 13285  000EEE  0E00               	movlw	0
 13286  000EF0  2045               	addwfc	??i2_printf+1,w,c
 13287  000EF2  6E5B               	movwf	i2printf@exp+1,c
 13288                           
 13289                           ;doprnt.c: 838: exp--;
 13290  000EF4  065A               	decf	i2printf@exp,f,c
 13291  000EF6  A0D8               	btfss	status,0,c
 13292  000EF8  065B               	decf	i2printf@exp+1,f,c
 13293                           
 13294                           ;doprnt.c: 839: exp *= 3;
 13295  000EFA  C05A  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 13296  000EFE  C05B  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 13297  000F02  0E00               	movlw	0
 13298  000F04  6E12               	movwf	i2___wmul@multiplicand+1,c
 13299  000F06  0E03               	movlw	3
 13300  000F08  6E11               	movwf	i2___wmul@multiplicand,c
 13301  000F0A  EC79  F029         	call	i2___wmul	;wreg free
 13302  000F0E  C00F  F05A         	movff	?i2___wmul,i2printf@exp
 13303  000F12  C010  F05B         	movff	?i2___wmul+1,i2printf@exp+1
 13304                           
 13305                           ;doprnt.c: 840: exp /= 10;
 13306  000F16  C05A  F007         	movff	i2printf@exp,i2___awdiv@dividend
 13307  000F1A  C05B  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 13308  000F1E  0E00               	movlw	0
 13309  000F20  6E0A               	movwf	i2___awdiv@divisor+1,c
 13310  000F22  0E0A               	movlw	10
 13311  000F24  6E09               	movwf	i2___awdiv@divisor,c
 13312  000F26  ECA6  F025         	call	i2___awdiv	;wreg free
 13313  000F2A  C007  F05A         	movff	?i2___awdiv,i2printf@exp
 13314  000F2E  C008  F05B         	movff	?i2___awdiv+1,i2printf@exp+1
 13315                           
 13316                           ;doprnt.c: 841: if(exp < 0)
 13317  000F32  AE5B               	btfss	i2printf@exp+1,7,c
 13318  000F34  D003               	goto	i2l6447
 13319                           
 13320                           ;doprnt.c: 842: exp--;
 13321  000F36  065A               	decf	i2printf@exp,f,c
 13322  000F38  A0D8               	btfss	status,0,c
 13323  000F3A  065B               	decf	i2printf@exp+1,f,c
 13324  000F3C                     i2l6447:
 13325                           
 13326                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13327  000F3C  505A               	movf	i2printf@exp,w,c
 13328  000F3E  0800               	sublw	0
 13329  000F40  EC00  F00E         	call	i2_scale
 13330  000F44  C024  F056         	movff	?i2_scale,i2printf@tmpval
 13331  000F48  C025  F057         	movff	?i2_scale+1,i2printf@tmpval+1
 13332  000F4C  C026  F058         	movff	?i2_scale+2,i2printf@tmpval+2
 13333                           
 13334                           ;doprnt.c: 847: tmpval.integ *= fval;
 13335  000F50  C056  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 13336  000F54  C057  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 13337  000F58  C058  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 13338  000F5C  C060  F018         	movff	i2printf@fval,i2___ftmul@f2
 13339  000F60  C061  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13340  000F64  C062  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13341  000F68  EC77  F020         	call	i2___ftmul	;wreg free
 13342  000F6C  C015  F056         	movff	?i2___ftmul,i2printf@tmpval
 13343  000F70  C016  F057         	movff	?i2___ftmul+1,i2printf@tmpval+1
 13344  000F74  C017  F058         	movff	?i2___ftmul+2,i2printf@tmpval+2
 13345                           
 13346                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13347  000F78  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13348  000F7C  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13349  000F80  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13350  000F84  0E00               	movlw	0
 13351  000F86  6E04               	movwf	i2___ftge@ff2,c
 13352  000F88  0E80               	movlw	128
 13353  000F8A  6E05               	movwf	i2___ftge@ff2+1,c
 13354  000F8C  0E3F               	movlw	63
 13355  000F8E  6E06               	movwf	i2___ftge@ff2+2,c
 13356  000F90  EC17  F025         	call	i2___ftge	;wreg free
 13357  000F94  B0D8               	btfsc	status,0,c
 13358  000F96  D004               	goto	i2l6455
 13359                           
 13360                           ;doprnt.c: 849: exp--;
 13361  000F98  065A               	decf	i2printf@exp,f,c
 13362  000F9A  A0D8               	btfss	status,0,c
 13363  000F9C  065B               	decf	i2printf@exp+1,f,c
 13364  000F9E  D012               	goto	i2l6459
 13365  000FA0                     i2l6455:
 13366                           
 13367                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13368  000FA0  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13369  000FA4  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13370  000FA8  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13371  000FAC  0E00               	movlw	0
 13372  000FAE  6E04               	movwf	i2___ftge@ff2,c
 13373  000FB0  0E20               	movlw	32
 13374  000FB2  6E05               	movwf	i2___ftge@ff2+1,c
 13375  000FB4  0E41               	movlw	65
 13376  000FB6  6E06               	movwf	i2___ftge@ff2+2,c
 13377  000FB8  EC17  F025         	call	i2___ftge	;wreg free
 13378  000FBC  A0D8               	btfss	status,0,c
 13379  000FBE  D002               	goto	i2l6459
 13380                           
 13381                           ;doprnt.c: 851: exp++;
 13382  000FC0  4A5A               	infsnz	i2printf@exp,f,c
 13383  000FC2  2A5B               	incf	i2printf@exp+1,f,c
 13384  000FC4                     i2l6459:
 13385                           
 13386                           ;doprnt.c: 852: }
 13387                           ;doprnt.c: 1112: if(prec <= 12)
 13388  000FC4  BE55               	btfsc	i2printf@prec+1,7,c
 13389  000FC6  D006               	goto	i2l6461
 13390  000FC8  5055               	movf	i2printf@prec+1,w,c
 13391  000FCA  E11B               	bnz	i2l6463
 13392  000FCC  0E0D               	movlw	13
 13393  000FCE  5C54               	subwf	i2printf@prec,w,c
 13394  000FD0  B0D8               	btfsc	status,0,c
 13395  000FD2  D017               	goto	i2l6463
 13396  000FD4                     i2l6461:
 13397                           
 13398                           ;doprnt.c: 1113: fval += fround(prec);
 13399  000FD4  C060  F02E         	movff	i2printf@fval,i2___ftadd@f1
 13400  000FD8  C061  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 13401  000FDC  C062  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 13402  000FE0  5054               	movf	i2printf@prec,w,c
 13403  000FE2  ECC7  F015         	call	i2_fround
 13404  000FE6  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 13405  000FEA  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 13406  000FEE  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 13407  000FF2  ECEA  F016         	call	i2___ftadd	;wreg free
 13408  000FF6  C02E  F060         	movff	?i2___ftadd,i2printf@fval
 13409  000FFA  C02F  F061         	movff	?i2___ftadd+1,i2printf@fval+1
 13410  000FFE  C030  F062         	movff	?i2___ftadd+2,i2printf@fval+2
 13411  001002                     i2l6463:
 13412                           
 13413                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13414  001002  BE5B               	btfsc	i2printf@exp+1,7,c
 13415  001004  D006               	goto	i2l6465
 13416  001006  505B               	movf	i2printf@exp+1,w,c
 13417  001008  E11E               	bnz	i2l6471
 13418  00100A  0E0A               	movlw	10
 13419  00100C  5C5A               	subwf	i2printf@exp,w,c
 13420  00100E  B0D8               	btfsc	status,0,c
 13421  001010  D01A               	goto	i2l6471
 13422  001012                     i2l6465:
 13423  001012  5060               	movf	i2printf@fval,w,c
 13424  001014  1061               	iorwf	i2printf@fval+1,w,c
 13425  001016  1062               	iorwf	i2printf@fval+2,w,c
 13426  001018  B4D8               	btfsc	status,2,c
 13427  00101A  D051               	goto	i2l6485
 13428  00101C  C060  F02B         	movff	i2printf@fval,i2___fttol@f1
 13429  001020  C061  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 13430  001024  C062  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 13431  001028  ECF1  F020         	call	i2___fttol	;wreg free
 13432  00102C  502B               	movf	?i2___fttol,w,c
 13433  00102E  102C               	iorwf	?i2___fttol+1,w,c
 13434  001030  102D               	iorwf	?i2___fttol+2,w,c
 13435  001032  102E               	iorwf	?i2___fttol+3,w,c
 13436  001034  B4D8               	btfsc	status,2,c
 13437  001036  BE5B               	btfsc	i2printf@exp+1,7,c
 13438  001038  D042               	goto	i2l6485
 13439  00103A  505B               	movf	i2printf@exp+1,w,c
 13440  00103C  E104               	bnz	i2l6471
 13441  00103E  0E02               	movlw	2
 13442  001040  5C5A               	subwf	i2printf@exp,w,c
 13443  001042  A0D8               	btfss	status,0,c
 13444  001044  D03C               	goto	i2l6485
 13445  001046                     i2l6471:
 13446                           
 13447                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13448  001046  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13449  00104A  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13450  00104E  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13451  001052  0E70               	movlw	112
 13452  001054  6E04               	movwf	i2___ftge@ff2,c
 13453  001056  0E89               	movlw	137
 13454  001058  6E05               	movwf	i2___ftge@ff2+1,c
 13455  00105A  0E40               	movlw	64
 13456  00105C  6E06               	movwf	i2___ftge@ff2+2,c
 13457  00105E  EC17  F025         	call	i2___ftge	;wreg free
 13458  001062  B0D8               	btfsc	status,0,c
 13459  001064  D002               	goto	i2l6475
 13460                           
 13461                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13462  001066  0EF7               	movlw	247
 13463  001068  D001               	goto	L8
 13464  00106A                     i2l6475:
 13465                           
 13466                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13467  00106A  0EF8               	movlw	248
 13468  00106C                     L8:
 13469  00106C  265A               	addwf	i2printf@exp,f,c
 13470  00106E  0EFF               	movlw	255
 13471  001070  225B               	addwfc	i2printf@exp+1,f,c
 13472                           
 13473                           ;doprnt.c: 1124: }
 13474                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13475  001072  505A               	movf	i2printf@exp,w,c
 13476  001074  EC00  F00E         	call	i2_scale
 13477  001078  C024  F056         	movff	?i2_scale,i2printf@tmpval
 13478  00107C  C025  F057         	movff	?i2_scale+1,i2printf@tmpval+1
 13479  001080  C026  F058         	movff	?i2_scale+2,i2printf@tmpval+2
 13480                           
 13481                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13482  001084  C060  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 13483  001088  C061  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 13484  00108C  C062  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 13485  001090  C056  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 13486  001094  C057  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 13487  001098  C058  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 13488  00109C  EC9A  F01C         	call	i2__tdiv_to_l_	;wreg free
 13489  0010A0  C001  F05C         	movff	?i2__tdiv_to_l_,i2printf@val
 13490  0010A4  C002  F05D         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 13491  0010A8  C003  F05E         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 13492  0010AC  C004  F05F         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 13493                           
 13494                           ;doprnt.c: 1129: fval = 0.0;
 13495  0010B0  0E00               	movlw	0
 13496  0010B2  6E60               	movwf	i2printf@fval,c
 13497  0010B4  0E00               	movlw	0
 13498  0010B6  6E61               	movwf	i2printf@fval+1,c
 13499  0010B8  0E00               	movlw	0
 13500  0010BA  6E62               	movwf	i2printf@fval+2,c
 13501                           
 13502                           ;doprnt.c: 1130: } else {
 13503  0010BC  D032               	goto	i2l6489
 13504  0010BE                     i2l6485:
 13505                           
 13506                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13507  0010BE  C060  F02B         	movff	i2printf@fval,i2___fttol@f1
 13508  0010C2  C061  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 13509  0010C6  C062  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 13510  0010CA  ECF1  F020         	call	i2___fttol	;wreg free
 13511  0010CE  C02B  F05C         	movff	?i2___fttol,i2printf@val
 13512  0010D2  C02C  F05D         	movff	?i2___fttol+1,i2printf@val+1
 13513  0010D6  C02D  F05E         	movff	?i2___fttol+2,i2printf@val+2
 13514  0010DA  C02E  F05F         	movff	?i2___fttol+3,i2printf@val+3
 13515                           
 13516                           ;doprnt.c: 1132: fval -= (double)val;
 13517  0010DE  C060  F03A         	movff	i2printf@fval,i2___ftsub@f1
 13518  0010E2  C061  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 13519  0010E6  C062  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 13520  0010EA  C05C  F009         	movff	i2printf@val,i2___lltoft@c
 13521  0010EE  C05D  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 13522  0010F2  C05E  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 13523  0010F6  C05F  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 13524  0010FA  EC41  F027         	call	i2___lltoft	;wreg free
 13525  0010FE  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 13526  001102  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 13527  001106  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 13528  00110A  EC95  F028         	call	i2___ftsub	;wreg free
 13529  00110E  C03A  F060         	movff	?i2___ftsub,i2printf@fval
 13530  001112  C03B  F061         	movff	?i2___ftsub+1,i2printf@fval+1
 13531  001116  C03C  F062         	movff	?i2___ftsub+2,i2printf@fval+2
 13532                           
 13533                           ;doprnt.c: 1133: exp = 0;
 13534  00111A  0E00               	movlw	0
 13535  00111C  6E5B               	movwf	i2printf@exp+1,c
 13536  00111E  0E00               	movlw	0
 13537  001120  6E5A               	movwf	i2printf@exp,c
 13538  001122                     i2l6489:
 13539                           
 13540                           ;doprnt.c: 1134: }
 13541                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13542  001122  0E01               	movlw	1
 13543  001124  6E67               	movwf	i2printf@c,c
 13544  001126                     i2l6491:
 13545  001126  0E0A               	movlw	10
 13546  001128  1867               	xorwf	i2printf@c,w,c
 13547  00112A  B4D8               	btfsc	status,2,c
 13548  00112C  D018               	goto	i2l6503
 13549                           
 13550                           ;doprnt.c: 1137: if(val < dpowers[c])
 13551  00112E  5067               	movf	i2printf@c,w,c
 13552  001130  0D04               	mullw	4
 13553  001132  0E31               	movlw	low _dpowers
 13554  001134  24F3               	addwf	prodl,w,c
 13555  001136  6EF6               	movwf	tblptrl,c
 13556  001138  0EFE               	movlw	high _dpowers
 13557  00113A  20F4               	addwfc	prodh,w,c
 13558  00113C  6EF7               	movwf	tblptrh,c
 13559  00113E                     	if	0	;There are less than 3 active tblptr bytes
 13560  00113E                     	endif
 13561  00113E  0009               	tblrd		*+
 13562  001140  50F5               	movf	tablat,w,c
 13563  001142  5C5C               	subwf	i2printf@val,w,c
 13564  001144  0009               	tblrd		*+
 13565  001146  50F5               	movf	tablat,w,c
 13566  001148  585D               	subwfb	i2printf@val+1,w,c
 13567  00114A  0009               	tblrd		*+
 13568  00114C  50F5               	movf	tablat,w,c
 13569  00114E  585E               	subwfb	i2printf@val+2,w,c
 13570  001150  0009               	tblrd		*+
 13571  001152  50F5               	movf	tablat,w,c
 13572  001154  585F               	subwfb	i2printf@val+3,w,c
 13573  001156  A0D8               	btfss	status,0,c
 13574  001158  D002               	goto	i2l6503
 13575                           
 13576                           ;doprnt.c: 1138: break;
 13577  00115A  2A67               	incf	i2printf@c,f,c
 13578  00115C  D7E4               	goto	i2l6491
 13579  00115E                     i2l6503:
 13580                           
 13581                           ;doprnt.c: 1142: width -= prec + c + exp;
 13582  00115E  C067  F044         	movff	i2printf@c,??i2_printf
 13583  001162  6A45               	clrf	(??i2_printf+1)& (0+255),c
 13584  001164  BE44               	btfsc	??i2_printf& (0+255),7,c
 13585  001166  0645               	decf	(??i2_printf+1)& (0+255),f,c
 13586  001168  5054               	movf	i2printf@prec,w,c
 13587  00116A  2644               	addwf	??i2_printf,f,c
 13588  00116C  5055               	movf	i2printf@prec+1,w,c
 13589  00116E  2245               	addwfc	??i2_printf+1,f,c
 13590  001170  505A               	movf	i2printf@exp,w,c
 13591  001172  2644               	addwf	??i2_printf,f,c
 13592  001174  505B               	movf	i2printf@exp+1,w,c
 13593  001176  2245               	addwfc	??i2_printf+1,f,c
 13594  001178  5044               	movf	??i2_printf,w,c
 13595  00117A  5E63               	subwf	i2printf@width,f,c
 13596  00117C  5045               	movf	??i2_printf+1,w,c
 13597  00117E  5A64               	subwfb	i2printf@width+1,f,c
 13598                           
 13599                           ;doprnt.c: 1143: if(
 13600                           ;doprnt.c: 1147: prec)
 13601  001180  5054               	movf	i2printf@prec,w,c
 13602  001182  1055               	iorwf	i2printf@prec+1,w,c
 13603  001184  B4D8               	btfsc	status,2,c
 13604  001186  D003               	goto	i2l6507
 13605                           
 13606                           ;doprnt.c: 1148: width--;
 13607  001188  0663               	decf	i2printf@width,f,c
 13608  00118A  A0D8               	btfss	status,0,c
 13609  00118C  0664               	decf	i2printf@width+1,f,c
 13610  00118E                     i2l6507:
 13611                           
 13612                           ;doprnt.c: 1149: if(flag & 0x03)
 13613  00118E  0E03               	movlw	3
 13614  001190  1465               	andwf	i2printf@flag,w,c
 13615  001192  6E44               	movwf	??i2_printf& (0+255),c
 13616  001194  0E00               	movlw	0
 13617  001196  1466               	andwf	i2printf@flag+1,w,c
 13618  001198  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13619  00119A  5044               	movf	??i2_printf,w,c
 13620  00119C  1045               	iorwf	??i2_printf+1,w,c
 13621  00119E  B4D8               	btfsc	status,2,c
 13622  0011A0  D003               	goto	i2l6511
 13623                           
 13624                           ;doprnt.c: 1150: width--;
 13625  0011A2  0663               	decf	i2printf@width,f,c
 13626  0011A4  A0D8               	btfss	status,0,c
 13627  0011A6  0664               	decf	i2printf@width+1,f,c
 13628  0011A8                     i2l6511:
 13629                           
 13630                           ;doprnt.c: 1153: if(flag & 0x04) {
 13631  0011A8  A465               	btfss	i2printf@flag,2,c
 13632  0011AA  D022               	goto	i2l6527
 13633                           
 13634                           ;doprnt.c: 1157: if(flag & 0x03)
 13635  0011AC  0E03               	movlw	3
 13636  0011AE  1465               	andwf	i2printf@flag,w,c
 13637  0011B0  6E44               	movwf	??i2_printf& (0+255),c
 13638  0011B2  0E00               	movlw	0
 13639  0011B4  1466               	andwf	i2printf@flag+1,w,c
 13640  0011B6  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13641  0011B8  5044               	movf	??i2_printf,w,c
 13642  0011BA  1045               	iorwf	??i2_printf+1,w,c
 13643  0011BC  B4D8               	btfsc	status,2,c
 13644  0011BE  D00A               	goto	i2l6521
 13645                           
 13646                           ;doprnt.c: 1159: (putch('-') );
 13647  0011C0  0E2D               	movlw	45
 13648  0011C2  EC9E  F029         	call	i2_putch
 13649                           
 13650                           ;doprnt.c: 1168: while(width > 0) {
 13651  0011C6  D006               	goto	i2l6521
 13652  0011C8                     i2l6517:
 13653                           
 13654                           ;doprnt.c: 1169: (putch('0') );
 13655  0011C8  0E30               	movlw	48
 13656  0011CA  EC9E  F029         	call	i2_putch
 13657                           
 13658                           ;doprnt.c: 1170: width--;
 13659  0011CE  0663               	decf	i2printf@width,f,c
 13660  0011D0  A0D8               	btfss	status,0,c
 13661  0011D2  0664               	decf	i2printf@width+1,f,c
 13662  0011D4                     i2l6521:
 13663  0011D4  BE64               	btfsc	i2printf@width+1,7,c
 13664  0011D6  D065               	goto	i2l6539
 13665  0011D8  5064               	movf	i2printf@width+1,w,c
 13666  0011DA  E1F6               	bnz	i2l6517
 13667  0011DC  0463               	decf	i2printf@width,w,c
 13668  0011DE  A0D8               	btfss	status,0,c
 13669  0011E0  D060               	goto	i2l6539
 13670  0011E2  D7F2               	goto	i2l6517
 13671  0011E4                     i2l6523:
 13672                           
 13673                           ;doprnt.c: 1181: (putch(' ') );
 13674  0011E4  0E20               	movlw	32
 13675  0011E6  EC9E  F029         	call	i2_putch
 13676                           
 13677                           ;doprnt.c: 1182: width--;
 13678  0011EA  0663               	decf	i2printf@width,f,c
 13679  0011EC  A0D8               	btfss	status,0,c
 13680  0011EE  0664               	decf	i2printf@width+1,f,c
 13681  0011F0                     i2l6527:
 13682  0011F0  BE64               	btfsc	i2printf@width+1,7,c
 13683  0011F2  D005               	goto	i2l6529
 13684  0011F4  5064               	movf	i2printf@width+1,w,c
 13685  0011F6  E1F6               	bnz	i2l6523
 13686  0011F8  0463               	decf	i2printf@width,w,c
 13687  0011FA  B0D8               	btfsc	status,0,c
 13688  0011FC  D7F3               	goto	i2l6523
 13689  0011FE                     i2l6529:
 13690                           
 13691                           ;doprnt.c: 1183: }
 13692                           ;doprnt.c: 1188: if(flag & 0x03)
 13693  0011FE  0E03               	movlw	3
 13694  001200  1465               	andwf	i2printf@flag,w,c
 13695  001202  6E44               	movwf	??i2_printf& (0+255),c
 13696  001204  0E00               	movlw	0
 13697  001206  1466               	andwf	i2printf@flag+1,w,c
 13698  001208  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13699  00120A  5044               	movf	??i2_printf,w,c
 13700  00120C  1045               	iorwf	??i2_printf+1,w,c
 13701  00120E  B4D8               	btfsc	status,2,c
 13702  001210  D048               	goto	i2l6539
 13703                           
 13704                           ;doprnt.c: 1190: (putch('-') );
 13705  001212  0E2D               	movlw	45
 13706  001214  EC9E  F029         	call	i2_putch
 13707                           
 13708                           ;doprnt.c: 1195: }
 13709                           ;doprnt.c: 1196: while(c--) {
 13710  001218  D044               	goto	i2l6539
 13711  00121A                     i2l6533:
 13712                           
 13713                           ;doprnt.c: 1200: {
 13714                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 13715  00121A  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 13716  00121E  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13717  001222  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13718  001226  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13719  00122A  5067               	movf	i2printf@c,w,c
 13720  00122C  0D04               	mullw	4
 13721  00122E  0E31               	movlw	low _dpowers
 13722  001230  24F3               	addwf	prodl,w,c
 13723  001232  6EF6               	movwf	tblptrl,c
 13724  001234  0EFE               	movlw	high _dpowers
 13725  001236  20F4               	addwfc	prodh,w,c
 13726  001238  6EF7               	movwf	tblptrh,c
 13727  00123A                     	if	0	;There are less than 3 active tblptr bytes
 13728  00123A                     	endif
 13729  00123A  0009               	tblrd		*+
 13730  00123C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13731  001240  0009               	tblrd		*+
 13732  001242  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13733  001246  0009               	tblrd		*+
 13734  001248  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13735  00124C  000A               	tblrd		*-
 13736  00124E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13737  001252  ECE8  F025         	call	i2___lldiv	;wreg free
 13738  001256  C001  F056         	movff	?i2___lldiv,i2printf@tmpval
 13739  00125A  C002  F057         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13740  00125E  C003  F058         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13741  001262  C004  F059         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13742                           
 13743                           ;doprnt.c: 1202: tmpval.vd %= 10;
 13744  001266  C056  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13745  00126A  C057  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13746  00126E  C058  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13747  001272  C059  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13748  001276  0E0A               	movlw	10
 13749  001278  6E12               	movwf	i2___llmod@divisor,c
 13750  00127A  0E00               	movlw	0
 13751  00127C  6E13               	movwf	i2___llmod@divisor+1,c
 13752  00127E  0E00               	movlw	0
 13753  001280  6E14               	movwf	i2___llmod@divisor+2,c
 13754  001282  0E00               	movlw	0
 13755  001284  6E15               	movwf	i2___llmod@divisor+3,c
 13756  001286  ECDB  F026         	call	i2___llmod	;wreg free
 13757  00128A  C00E  F056         	movff	?i2___llmod,i2printf@tmpval
 13758  00128E  C00F  F057         	movff	?i2___llmod+1,i2printf@tmpval+1
 13759  001292  C010  F058         	movff	?i2___llmod+2,i2printf@tmpval+2
 13760  001296  C011  F059         	movff	?i2___llmod+3,i2printf@tmpval+3
 13761                           
 13762                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 13763  00129A  5056               	movf	i2printf@tmpval,w,c
 13764  00129C  0F30               	addlw	48
 13765  00129E  EC9E  F029         	call	i2_putch
 13766  0012A2                     i2l6539:
 13767  0012A2  0667               	decf	i2printf@c,f,c
 13768  0012A4  2867               	incf	i2printf@c,w,c
 13769  0012A6  B4D8               	btfsc	status,2,c
 13770  0012A8  D007               	goto	i2l6545
 13771  0012AA  D7B7               	goto	i2l6533
 13772  0012AC                     i2l6541:
 13773                           
 13774                           ;doprnt.c: 1208: (putch('0') );
 13775  0012AC  0E30               	movlw	48
 13776  0012AE  EC9E  F029         	call	i2_putch
 13777                           
 13778                           ;doprnt.c: 1209: exp--;
 13779  0012B2  065A               	decf	i2printf@exp,f,c
 13780  0012B4  A0D8               	btfss	status,0,c
 13781  0012B6  065B               	decf	i2printf@exp+1,f,c
 13782  0012B8                     i2l6545:
 13783  0012B8  BE5B               	btfsc	i2printf@exp+1,7,c
 13784  0012BA  D005               	goto	i2l6547
 13785  0012BC  505B               	movf	i2printf@exp+1,w,c
 13786  0012BE  E1F6               	bnz	i2l6541
 13787  0012C0  045A               	decf	i2printf@exp,w,c
 13788  0012C2  B0D8               	btfsc	status,0,c
 13789  0012C4  D7F3               	goto	i2l6541
 13790  0012C6                     i2l6547:
 13791                           
 13792                           ;doprnt.c: 1210: }
 13793                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 13794  0012C6  BE55               	btfsc	i2printf@prec+1,7,c
 13795  0012C8  D009               	goto	i2l739
 13796  0012CA  5055               	movf	i2printf@prec+1,w,c
 13797  0012CC  E104               	bnz	i2u726_40
 13798  0012CE  0E09               	movlw	9
 13799  0012D0  5C54               	subwf	i2printf@prec,w,c
 13800  0012D2  A0D8               	btfss	status,0,c
 13801  0012D4  D003               	goto	i2l739
 13802  0012D6                     i2u726_40:
 13803                           
 13804                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 13805  0012D6  0E08               	movlw	8
 13806  0012D8  6E67               	movwf	i2printf@c,c
 13807  0012DA  D002               	goto	i2l6551
 13808  0012DC                     i2l739:
 13809                           
 13810                           ;doprnt.c: 1213: else
 13811                           ;doprnt.c: 1214: c = prec;
 13812  0012DC  C054  F067         	movff	i2printf@prec,i2printf@c
 13813  0012E0                     i2l6551:
 13814                           
 13815                           ;doprnt.c: 1215: prec -= c;
 13816  0012E0  5067               	movf	i2printf@c,w,c
 13817  0012E2  5E54               	subwf	i2printf@prec,f,c
 13818  0012E4  0E00               	movlw	0
 13819  0012E6  BE67               	btfsc	i2printf@c,7,c
 13820  0012E8  0EFF               	movlw	255
 13821  0012EA  5A55               	subwfb	i2printf@prec+1,f,c
 13822                           
 13823                           ;doprnt.c: 1219: if(c)
 13824  0012EC  5067               	movf	i2printf@c,w,c
 13825  0012EE  B4D8               	btfsc	status,2,c
 13826  0012F0  D003               	goto	i2l6557
 13827                           
 13828                           ;doprnt.c: 1221: (putch('.') );
 13829  0012F2  0E2E               	movlw	46
 13830  0012F4  EC9E  F029         	call	i2_putch
 13831  0012F8                     i2l6557:
 13832                           
 13833                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13834  0012F8  5067               	movf	i2printf@c,w,c
 13835  0012FA  EC00  F00E         	call	i2_scale
 13836  0012FE  C024  F04A         	movff	?i2_scale,i2_printf$1534
 13837  001302  C025  F04B         	movff	?i2_scale+1,i2_printf$1534+1
 13838  001306  C026  F04C         	movff	?i2_scale+2,i2_printf$1534+2
 13839                           
 13840                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13841  00130A  C060  F018         	movff	i2printf@fval,i2___ftmul@f2
 13842  00130E  C061  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13843  001312  C062  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13844  001316  C04A  F015         	movff	i2_printf$1534,i2___ftmul@f1
 13845  00131A  C04B  F016         	movff	i2_printf$1534+1,i2___ftmul@f1+1
 13846  00131E  C04C  F017         	movff	i2_printf$1534+2,i2___ftmul@f1+2
 13847  001322  EC77  F020         	call	i2___ftmul	;wreg free
 13848  001326  C015  F02B         	movff	?i2___ftmul,i2___fttol@f1
 13849  00132A  C016  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 13850  00132E  C017  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 13851  001332  ECF1  F020         	call	i2___fttol	;wreg free
 13852  001336  C02B  F05C         	movff	?i2___fttol,i2printf@val
 13853  00133A  C02C  F05D         	movff	?i2___fttol+1,i2printf@val+1
 13854  00133E  C02D  F05E         	movff	?i2___fttol+2,i2printf@val+2
 13855  001342  C02E  F05F         	movff	?i2___fttol+3,i2printf@val+3
 13856                           
 13857                           ;doprnt.c: 1228: while(c--) {
 13858  001346  D06A               	goto	i2l6567
 13859  001348                     i2l6561:
 13860                           
 13861                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 13862  001348  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 13863  00134C  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13864  001350  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13865  001354  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13866  001358  5067               	movf	i2printf@c,w,c
 13867  00135A  0D04               	mullw	4
 13868  00135C  0E31               	movlw	low _dpowers
 13869  00135E  24F3               	addwf	prodl,w,c
 13870  001360  6EF6               	movwf	tblptrl,c
 13871  001362  0EFE               	movlw	high _dpowers
 13872  001364  20F4               	addwfc	prodh,w,c
 13873  001366  6EF7               	movwf	tblptrh,c
 13874  001368                     	if	0	;There are less than 3 active tblptr bytes
 13875  001368                     	endif
 13876  001368  0009               	tblrd		*+
 13877  00136A  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13878  00136E  0009               	tblrd		*+
 13879  001370  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13880  001374  0009               	tblrd		*+
 13881  001376  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13882  00137A  000A               	tblrd		*-
 13883  00137C  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13884  001380  ECE8  F025         	call	i2___lldiv	;wreg free
 13885  001384  C001  F056         	movff	?i2___lldiv,i2printf@tmpval
 13886  001388  C002  F057         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13887  00138C  C003  F058         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13888  001390  C004  F059         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13889                           
 13890                           ;doprnt.c: 1230: tmpval.vd %= 10;
 13891  001394  C056  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13892  001398  C057  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13893  00139C  C058  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13894  0013A0  C059  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13895  0013A4  0E0A               	movlw	10
 13896  0013A6  6E12               	movwf	i2___llmod@divisor,c
 13897  0013A8  0E00               	movlw	0
 13898  0013AA  6E13               	movwf	i2___llmod@divisor+1,c
 13899  0013AC  0E00               	movlw	0
 13900  0013AE  6E14               	movwf	i2___llmod@divisor+2,c
 13901  0013B0  0E00               	movlw	0
 13902  0013B2  6E15               	movwf	i2___llmod@divisor+3,c
 13903  0013B4  ECDB  F026         	call	i2___llmod	;wreg free
 13904  0013B8  C00E  F056         	movff	?i2___llmod,i2printf@tmpval
 13905  0013BC  C00F  F057         	movff	?i2___llmod+1,i2printf@tmpval+1
 13906  0013C0  C010  F058         	movff	?i2___llmod+2,i2printf@tmpval+2
 13907  0013C4  C011  F059         	movff	?i2___llmod+3,i2printf@tmpval+3
 13908                           
 13909                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 13910  0013C8  5056               	movf	i2printf@tmpval,w,c
 13911  0013CA  0F30               	addlw	48
 13912  0013CC  EC9E  F029         	call	i2_putch
 13913                           
 13914                           ;doprnt.c: 1232: val %= dpowers[c];
 13915  0013D0  C05C  F00E         	movff	i2printf@val,i2___llmod@dividend
 13916  0013D4  C05D  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 13917  0013D8  C05E  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 13918  0013DC  C05F  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 13919  0013E0  5067               	movf	i2printf@c,w,c
 13920  0013E2  0D04               	mullw	4
 13921  0013E4  0E31               	movlw	low _dpowers
 13922  0013E6  24F3               	addwf	prodl,w,c
 13923  0013E8  6EF6               	movwf	tblptrl,c
 13924  0013EA  0EFE               	movlw	high _dpowers
 13925  0013EC  20F4               	addwfc	prodh,w,c
 13926  0013EE  6EF7               	movwf	tblptrh,c
 13927  0013F0                     	if	0	;There are less than 3 active tblptr bytes
 13928  0013F0                     	endif
 13929  0013F0  0009               	tblrd		*+
 13930  0013F2  CFF5 F012          	movff	tablat,i2___llmod@divisor
 13931  0013F6  0009               	tblrd		*+
 13932  0013F8  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 13933  0013FC  0009               	tblrd		*+
 13934  0013FE  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 13935  001402  000A               	tblrd		*-
 13936  001404  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 13937  001408  ECDB  F026         	call	i2___llmod	;wreg free
 13938  00140C  C00E  F05C         	movff	?i2___llmod,i2printf@val
 13939  001410  C00F  F05D         	movff	?i2___llmod+1,i2printf@val+1
 13940  001414  C010  F05E         	movff	?i2___llmod+2,i2printf@val+2
 13941  001418  C011  F05F         	movff	?i2___llmod+3,i2printf@val+3
 13942  00141C                     i2l6567:
 13943  00141C  0667               	decf	i2printf@c,f,c
 13944  00141E  2867               	incf	i2printf@c,w,c
 13945  001420  B4D8               	btfsc	status,2,c
 13946  001422  D007               	goto	i2l6573
 13947  001424  D791               	goto	i2l6561
 13948  001426                     i2l6569:
 13949                           
 13950                           ;doprnt.c: 1236: (putch('0') );
 13951  001426  0E30               	movlw	48
 13952  001428  EC9E  F029         	call	i2_putch
 13953                           
 13954                           ;doprnt.c: 1237: prec--;
 13955  00142C  0654               	decf	i2printf@prec,f,c
 13956  00142E  A0D8               	btfss	status,0,c
 13957  001430  0655               	decf	i2printf@prec+1,f,c
 13958  001432                     i2l6573:
 13959  001432  5054               	movf	i2printf@prec,w,c
 13960  001434  1055               	iorwf	i2printf@prec+1,w,c
 13961  001436  B4D8               	btfsc	status,2,c
 13962  001438  D17E               	goto	i2l6681
 13963  00143A  D7F5               	goto	i2l6569
 13964  00143C                     i2l700:
 13965                           
 13966                           ;doprnt.c: 1246: }
 13967                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13968  00143C  BE65               	btfsc	i2printf@flag,7,c
 13969  00143E  D02E               	goto	i2l748
 13970                           
 13971                           ;doprnt.c: 1253: {
 13972                           ;doprnt.c: 1255: if(flag & 0x10)
 13973  001440  A865               	btfss	i2printf@flag,4,c
 13974  001442  D00E               	goto	i2l6581
 13975                           
 13976                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 13977  001444  C052  FFD9         	movff	i2printf@ap,fsr2l
 13978  001448  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13979  00144C  CFDE F05C          	movff	postinc2,i2printf@val
 13980  001450  CFDE F05D          	movff	postinc2,i2printf@val+1
 13981  001454  CFDE F05E          	movff	postinc2,i2printf@val+2
 13982  001458  CFDE F05F          	movff	postinc2,i2printf@val+3
 13983  00145C  0E04               	movlw	4
 13984  00145E  D00E               	goto	L9
 13985  001460                     i2l6581:
 13986                           
 13987                           ;doprnt.c: 1257: else
 13988                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 13989  001460  C052  FFD9         	movff	i2printf@ap,fsr2l
 13990  001464  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13991  001468  CFDE F05C          	movff	postinc2,i2printf@val
 13992  00146C  CFDD F05D          	movff	postdec2,i2printf@val+1
 13993  001470  0E00               	movlw	0
 13994  001472  BE5D               	btfsc	i2printf@val+1,7,c
 13995  001474  0EFF               	movlw	-1
 13996  001476  6E5E               	movwf	i2printf@val+2,c
 13997  001478  6E5F               	movwf	i2printf@val+3,c
 13998  00147A  0E02               	movlw	2
 13999  00147C                     L9:
 14000  00147C  2652               	addwf	i2printf@ap,f,c
 14001  00147E  0E00               	movlw	0
 14002  001480  2253               	addwfc	i2printf@ap+1,f,c
 14003                           
 14004                           ;doprnt.c: 1261: if((long)val < 0) {
 14005  001482  AE5F               	btfss	i2printf@val+3,7,c
 14006  001484  D06A               	goto	i2l6629
 14007                           
 14008                           ;doprnt.c: 1262: flag |= 0x03;
 14009  001486  0E03               	movlw	3
 14010  001488  1265               	iorwf	i2printf@flag,f,c
 14011                           
 14012                           ;doprnt.c: 1263: val = -val;
 14013  00148A  1E5F               	comf	i2printf@val+3,f,c
 14014  00148C  1E5E               	comf	i2printf@val+2,f,c
 14015  00148E  1E5D               	comf	i2printf@val+1,f,c
 14016  001490  6C5C               	negf	i2printf@val,c
 14017  001492  0E00               	movlw	0
 14018  001494  225D               	addwfc	i2printf@val+1,f,c
 14019  001496  225E               	addwfc	i2printf@val+2,f,c
 14020  001498  225F               	addwfc	i2printf@val+3,f,c
 14021                           
 14022                           ;doprnt.c: 1264: }
 14023                           ;doprnt.c: 1266: }
 14024  00149A  D05F               	goto	i2l6629
 14025  00149C                     i2l748:
 14026                           
 14027                           ;doprnt.c: 1268: else
 14028                           ;doprnt.c: 1273: {
 14029                           ;doprnt.c: 1281: if(flag & 0x10)
 14030  00149C  A865               	btfss	i2printf@flag,4,c
 14031  00149E  D00E               	goto	i2l6595
 14032                           
 14033                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 14034  0014A0  C052  FFD9         	movff	i2printf@ap,fsr2l
 14035  0014A4  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14036  0014A8  CFDE F05C          	movff	postinc2,i2printf@val
 14037  0014AC  CFDE F05D          	movff	postinc2,i2printf@val+1
 14038  0014B0  CFDE F05E          	movff	postinc2,i2printf@val+2
 14039  0014B4  CFDE F05F          	movff	postinc2,i2printf@val+3
 14040  0014B8  0E04               	movlw	4
 14041  0014BA  D00F               	goto	L10
 14042  0014BC                     i2l6595:
 14043                           
 14044                           ;doprnt.c: 1283: else
 14045                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14046  0014BC  C052  FFD9         	movff	i2printf@ap,fsr2l
 14047  0014C0  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14048  0014C4  CFDE F044          	movff	postinc2,??i2_printf
 14049  0014C8  CFDD F045          	movff	postdec2,??i2_printf+1
 14050  0014CC  C044  F05C         	movff	??i2_printf,i2printf@val
 14051  0014D0  C045  F05D         	movff	??i2_printf+1,i2printf@val+1
 14052  0014D4  6A5E               	clrf	i2printf@val+2,c
 14053  0014D6  6A5F               	clrf	i2printf@val+3,c
 14054  0014D8  0E02               	movlw	2
 14055  0014DA                     L10:
 14056  0014DA  2652               	addwf	i2printf@ap,f,c
 14057  0014DC  0E00               	movlw	0
 14058  0014DE  2253               	addwfc	i2printf@ap+1,f,c
 14059                           
 14060                           ;doprnt.c: 1287: }
 14061                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14062  0014E0  D03C               	goto	i2l6629
 14063  0014E2                     i2l6599:
 14064                           
 14065                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14066  0014E2  0E01               	movlw	1
 14067  0014E4  6E67               	movwf	i2printf@c,c
 14068  0014E6                     i2l6601:
 14069  0014E6  0E0A               	movlw	10
 14070  0014E8  1867               	xorwf	i2printf@c,w,c
 14071  0014EA  B4D8               	btfsc	status,2,c
 14072  0014EC  D03E               	goto	i2l6631
 14073                           
 14074                           ;doprnt.c: 1306: if(val < dpowers[c])
 14075  0014EE  5067               	movf	i2printf@c,w,c
 14076  0014F0  0D04               	mullw	4
 14077  0014F2  0E31               	movlw	low _dpowers
 14078  0014F4  24F3               	addwf	prodl,w,c
 14079  0014F6  6EF6               	movwf	tblptrl,c
 14080  0014F8  0EFE               	movlw	high _dpowers
 14081  0014FA  20F4               	addwfc	prodh,w,c
 14082  0014FC  6EF7               	movwf	tblptrh,c
 14083  0014FE                     	if	0	;There are less than 3 active tblptr bytes
 14084  0014FE                     	endif
 14085  0014FE  0009               	tblrd		*+
 14086  001500  50F5               	movf	tablat,w,c
 14087  001502  5C5C               	subwf	i2printf@val,w,c
 14088  001504  0009               	tblrd		*+
 14089  001506  50F5               	movf	tablat,w,c
 14090  001508  585D               	subwfb	i2printf@val+1,w,c
 14091  00150A  0009               	tblrd		*+
 14092  00150C  50F5               	movf	tablat,w,c
 14093  00150E  585E               	subwfb	i2printf@val+2,w,c
 14094  001510  0009               	tblrd		*+
 14095  001512  50F5               	movf	tablat,w,c
 14096  001514  585F               	subwfb	i2printf@val+3,w,c
 14097  001516  A0D8               	btfss	status,0,c
 14098  001518  D028               	goto	i2l6631
 14099                           
 14100                           ;doprnt.c: 1307: break;
 14101  00151A  2A67               	incf	i2printf@c,f,c
 14102  00151C  D7E4               	goto	i2l6601
 14103  00151E                     i2l6613:
 14104                           
 14105                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14106  00151E  0E01               	movlw	1
 14107  001520  6E67               	movwf	i2printf@c,c
 14108  001522                     i2l6615:
 14109  001522  0E08               	movlw	8
 14110  001524  1867               	xorwf	i2printf@c,w,c
 14111  001526  B4D8               	btfsc	status,2,c
 14112  001528  D020               	goto	i2l6631
 14113                           
 14114                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14115  00152A  5067               	movf	i2printf@c,w,c
 14116  00152C  0D04               	mullw	4
 14117  00152E  0EA7               	movlw	low _hexpowers
 14118  001530  24F3               	addwf	prodl,w,c
 14119  001532  6EF6               	movwf	tblptrl,c
 14120  001534  0EFE               	movlw	high _hexpowers
 14121  001536  20F4               	addwfc	prodh,w,c
 14122  001538  6EF7               	movwf	tblptrh,c
 14123  00153A                     	if	0	;There are less than 3 active tblptr bytes
 14124  00153A                     	endif
 14125  00153A  0009               	tblrd		*+
 14126  00153C  50F5               	movf	tablat,w,c
 14127  00153E  5C5C               	subwf	i2printf@val,w,c
 14128  001540  0009               	tblrd		*+
 14129  001542  50F5               	movf	tablat,w,c
 14130  001544  585D               	subwfb	i2printf@val+1,w,c
 14131  001546  0009               	tblrd		*+
 14132  001548  50F5               	movf	tablat,w,c
 14133  00154A  585E               	subwfb	i2printf@val+2,w,c
 14134  00154C  0009               	tblrd		*+
 14135  00154E  50F5               	movf	tablat,w,c
 14136  001550  585F               	subwfb	i2printf@val+3,w,c
 14137  001552  A0D8               	btfss	status,0,c
 14138  001554  D00A               	goto	i2l6631
 14139                           
 14140                           ;doprnt.c: 1318: break;
 14141  001556  2A67               	incf	i2printf@c,f,c
 14142  001558  D7E4               	goto	i2l6615
 14143  00155A                     i2l6629:
 14144  00155A  5065               	movf	i2printf@flag,w,c
 14145  00155C  0B80               	andlw	128
 14146                           
 14147                           ; Switch size 1, requested type "space"
 14148                           ; Number of cases is 2, Range of values is 0 to 128
 14149                           ; switch strategies available:
 14150                           ; Name         Instructions Cycles
 14151                           ; simple_byte            7     4 (average)
 14152                           ;	Chosen strategy is simple_byte
 14153  00155E  0A00               	xorlw	0	; case 0
 14154  001560  B4D8               	btfsc	status,2,c
 14155  001562  D7BF               	goto	i2l6599
 14156  001564  0A80               	xorlw	128	; case 128
 14157  001566  B4D8               	btfsc	status,2,c
 14158  001568  D7DA               	goto	i2l6613
 14159  00156A                     i2l6631:
 14160                           
 14161                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14162  00156A  5063               	movf	i2printf@width,w,c
 14163  00156C  1064               	iorwf	i2printf@width+1,w,c
 14164  00156E  B4D8               	btfsc	status,2,c
 14165  001570  D00D               	goto	i2l6637
 14166  001572  0E03               	movlw	3
 14167  001574  1465               	andwf	i2printf@flag,w,c
 14168  001576  6E44               	movwf	??i2_printf& (0+255),c
 14169  001578  0E00               	movlw	0
 14170  00157A  1466               	andwf	i2printf@flag+1,w,c
 14171  00157C  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14172  00157E  5044               	movf	??i2_printf,w,c
 14173  001580  1045               	iorwf	??i2_printf+1,w,c
 14174  001582  B4D8               	btfsc	status,2,c
 14175  001584  D003               	goto	i2l6637
 14176                           
 14177                           ;doprnt.c: 1346: width--;
 14178  001586  0663               	decf	i2printf@width,f,c
 14179  001588  A0D8               	btfss	status,0,c
 14180  00158A  0664               	decf	i2printf@width+1,f,c
 14181  00158C                     i2l6637:
 14182                           
 14183                           ;doprnt.c: 1381: if(width > c)
 14184  00158C  0E80               	movlw	128
 14185  00158E  BE67               	btfsc	i2printf@c,7,c
 14186  001590  0E7F               	movlw	127
 14187  001592  6E44               	movwf	??i2_printf& (0+255),c
 14188  001594  5063               	movf	i2printf@width,w,c
 14189  001596  5C67               	subwf	i2printf@c,w,c
 14190  001598  5064               	movf	i2printf@width+1,w,c
 14191  00159A  0A80               	xorlw	128
 14192  00159C  5844               	subwfb	??i2_printf& (0+255),w,c
 14193  00159E  B0D8               	btfsc	status,0,c
 14194  0015A0  D007               	goto	i2l6641
 14195                           
 14196                           ;doprnt.c: 1382: width -= c;
 14197  0015A2  5067               	movf	i2printf@c,w,c
 14198  0015A4  5E63               	subwf	i2printf@width,f,c
 14199  0015A6  0E00               	movlw	0
 14200  0015A8  BE67               	btfsc	i2printf@c,7,c
 14201  0015AA  0EFF               	movlw	255
 14202  0015AC  5A64               	subwfb	i2printf@width+1,f,c
 14203  0015AE  D004               	goto	i2l6643
 14204  0015B0                     i2l6641:
 14205                           
 14206                           ;doprnt.c: 1383: else
 14207                           ;doprnt.c: 1384: width = 0;
 14208  0015B0  0E00               	movlw	0
 14209  0015B2  6E64               	movwf	i2printf@width+1,c
 14210  0015B4  0E00               	movlw	0
 14211  0015B6  6E63               	movwf	i2printf@width,c
 14212  0015B8                     i2l6643:
 14213                           
 14214                           ;doprnt.c: 1387: if(flag & 0x04) {
 14215  0015B8  A465               	btfss	i2printf@flag,2,c
 14216  0015BA  D018               	goto	i2l6655
 14217                           
 14218                           ;doprnt.c: 1392: if(flag & 0x03)
 14219  0015BC  0E03               	movlw	3
 14220  0015BE  1465               	andwf	i2printf@flag,w,c
 14221  0015C0  6E44               	movwf	??i2_printf& (0+255),c
 14222  0015C2  0E00               	movlw	0
 14223  0015C4  1466               	andwf	i2printf@flag+1,w,c
 14224  0015C6  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14225  0015C8  5044               	movf	??i2_printf,w,c
 14226  0015CA  1045               	iorwf	??i2_printf+1,w,c
 14227  0015CC  B4D8               	btfsc	status,2,c
 14228  0015CE  D003               	goto	i2l6649
 14229                           
 14230                           ;doprnt.c: 1393: (putch('-') );
 14231  0015D0  0E2D               	movlw	45
 14232  0015D2  EC9E  F029         	call	i2_putch
 14233  0015D6                     i2l6649:
 14234                           
 14235                           ;doprnt.c: 1415: if(width)
 14236  0015D6  5063               	movf	i2printf@width,w,c
 14237  0015D8  1064               	iorwf	i2printf@width+1,w,c
 14238  0015DA  B4D8               	btfsc	status,2,c
 14239  0015DC  D022               	goto	i2l6665
 14240                           
 14241                           ;doprnt.c: 1417: (putch('0') );
 14242                           
 14243                           ;doprnt.c: 1416: do
 14244  0015DE  0E30               	movlw	48
 14245  0015E0  EC9E  F029         	call	i2_putch
 14246                           
 14247                           ;doprnt.c: 1418: while(--width);
 14248  0015E4  0663               	decf	i2printf@width,f,c
 14249  0015E6  A0D8               	btfss	status,0,c
 14250  0015E8  0664               	decf	i2printf@width+1,f,c
 14251  0015EA  D7F5               	goto	i2l6649
 14252  0015EC                     i2l6655:
 14253                           
 14254                           ;doprnt.c: 1422: {
 14255                           ;doprnt.c: 1424: if(width
 14256                           ;doprnt.c: 1428: )
 14257  0015EC  5063               	movf	i2printf@width,w,c
 14258  0015EE  1064               	iorwf	i2printf@width+1,w,c
 14259  0015F0  B4D8               	btfsc	status,2,c
 14260  0015F2  D00A               	goto	i2l6661
 14261  0015F4                     i2l6657:
 14262                           
 14263                           ;doprnt.c: 1430: (putch(' ') );
 14264  0015F4  0E20               	movlw	32
 14265  0015F6  EC9E  F029         	call	i2_putch
 14266                           
 14267                           ;doprnt.c: 1431: while(--width);
 14268  0015FA  0663               	decf	i2printf@width,f,c
 14269  0015FC  A0D8               	btfss	status,0,c
 14270  0015FE  0664               	decf	i2printf@width+1,f,c
 14271  001600  5063               	movf	i2printf@width,w,c
 14272  001602  1064               	iorwf	i2printf@width+1,w,c
 14273  001604  A4D8               	btfss	status,2,c
 14274  001606  D7F6               	goto	i2l6657
 14275  001608                     i2l6661:
 14276                           
 14277                           ;doprnt.c: 1438: if(flag & 0x03)
 14278  001608  0E03               	movlw	3
 14279  00160A  1465               	andwf	i2printf@flag,w,c
 14280  00160C  6E44               	movwf	??i2_printf& (0+255),c
 14281  00160E  0E00               	movlw	0
 14282  001610  1466               	andwf	i2printf@flag+1,w,c
 14283  001612  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14284  001614  5044               	movf	??i2_printf,w,c
 14285  001616  1045               	iorwf	??i2_printf+1,w,c
 14286  001618  B4D8               	btfsc	status,2,c
 14287  00161A  D003               	goto	i2l6665
 14288                           
 14289                           ;doprnt.c: 1439: (putch('-') );
 14290  00161C  0E2D               	movlw	45
 14291  00161E  EC9E  F029         	call	i2_putch
 14292  001622                     i2l6665:
 14293                           
 14294                           ;doprnt.c: 1469: }
 14295                           ;doprnt.c: 1472: prec = c;
 14296  001622  5067               	movf	i2printf@c,w,c
 14297  001624  6E54               	movwf	i2printf@prec,c
 14298  001626  6A55               	clrf	i2printf@prec+1,c
 14299  001628  BE54               	btfsc	i2printf@prec,7,c
 14300  00162A  0655               	decf	i2printf@prec+1,f,c
 14301                           
 14302                           ;doprnt.c: 1474: while(prec--) {
 14303  00162C  D07C               	goto	i2l6679
 14304  00162E                     i2l6667:
 14305                           
 14306                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14307  00162E  C054  F044         	movff	i2printf@prec,??i2_printf
 14308  001632  C055  F045         	movff	i2printf@prec+1,??i2_printf+1
 14309  001636  90D8               	bcf	status,0,c
 14310  001638  3644               	rlcf	??i2_printf,f,c
 14311  00163A  3645               	rlcf	??i2_printf+1,f,c
 14312  00163C  90D8               	bcf	status,0,c
 14313  00163E  3644               	rlcf	??i2_printf,f,c
 14314  001640  3645               	rlcf	??i2_printf+1,f,c
 14315  001642  0E31               	movlw	low _dpowers
 14316  001644  2444               	addwf	??i2_printf,w,c
 14317  001646  6EF6               	movwf	tblptrl,c
 14318  001648  0EFE               	movlw	high _dpowers
 14319  00164A  2045               	addwfc	??i2_printf+1,w,c
 14320  00164C  6EF7               	movwf	tblptrh,c
 14321  00164E                     	if	0	;There are less than 3 active tblptr bytes
 14322  00164E                     	endif
 14323  00164E  0009               	tblrd		*+
 14324  001650  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14325  001654  0009               	tblrd		*+
 14326  001656  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14327  00165A  0009               	tblrd		*+
 14328  00165C  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14329  001660  000A               	tblrd		*-
 14330  001662  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14331  001666  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 14332  00166A  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14333  00166E  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14334  001672  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14335  001676  ECE8  F025         	call	i2___lldiv	;wreg free
 14336  00167A  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 14337  00167E  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 14338  001682  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 14339  001686  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 14340  00168A  0E0A               	movlw	10
 14341  00168C  6E12               	movwf	i2___llmod@divisor,c
 14342  00168E  0E00               	movlw	0
 14343  001690  6E13               	movwf	i2___llmod@divisor+1,c
 14344  001692  0E00               	movlw	0
 14345  001694  6E14               	movwf	i2___llmod@divisor+2,c
 14346  001696  0E00               	movlw	0
 14347  001698  6E15               	movwf	i2___llmod@divisor+3,c
 14348  00169A  ECDB  F026         	call	i2___llmod	;wreg free
 14349  00169E  500E               	movf	?i2___llmod,w,c
 14350  0016A0  0F30               	addlw	48
 14351  0016A2  6E67               	movwf	i2printf@c,c
 14352                           
 14353                           ;doprnt.c: 1491: break;
 14354  0016A4  D03D               	goto	i2l6677
 14355  0016A6                     i2l6669:
 14356                           
 14357                           ;doprnt.c: 1499: {
 14358                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14359  0016A6  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 14360  0016AA  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14361  0016AE  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14362  0016B2  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14363  0016B6  C054  F044         	movff	i2printf@prec,??i2_printf
 14364  0016BA  C055  F045         	movff	i2printf@prec+1,??i2_printf+1
 14365  0016BE  90D8               	bcf	status,0,c
 14366  0016C0  3644               	rlcf	??i2_printf,f,c
 14367  0016C2  3645               	rlcf	??i2_printf+1,f,c
 14368  0016C4  90D8               	bcf	status,0,c
 14369  0016C6  3644               	rlcf	??i2_printf,f,c
 14370  0016C8  3645               	rlcf	??i2_printf+1,f,c
 14371  0016CA  0EA7               	movlw	low _hexpowers
 14372  0016CC  2444               	addwf	??i2_printf,w,c
 14373  0016CE  6EF6               	movwf	tblptrl,c
 14374  0016D0  0EFE               	movlw	high _hexpowers
 14375  0016D2  2045               	addwfc	??i2_printf+1,w,c
 14376  0016D4  6EF7               	movwf	tblptrh,c
 14377  0016D6                     	if	0	;There are less than 3 active tblptr bytes
 14378  0016D6                     	endif
 14379  0016D6  0009               	tblrd		*+
 14380  0016D8  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14381  0016DC  0009               	tblrd		*+
 14382  0016DE  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14383  0016E2  0009               	tblrd		*+
 14384  0016E4  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14385  0016E8  000A               	tblrd		*-
 14386  0016EA  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14387  0016EE  ECE8  F025         	call	i2___lldiv	;wreg free
 14388  0016F2  5001               	movf	?i2___lldiv,w,c
 14389  0016F4  0B0F               	andlw	15
 14390  0016F6  6E4D               	movwf	i2printf@idx,c
 14391                           
 14392                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14393  0016F8  504D               	movf	i2printf@idx,w,c
 14394  0016FA  0D01               	mullw	1
 14395  0016FC  0E4C               	movlw	low STR_18
 14396  0016FE  24F3               	addwf	prodl,w,c
 14397  001700  6EF6               	movwf	tblptrl,c
 14398  001702  0EFF               	movlw	high STR_18
 14399  001704  20F4               	addwfc	prodh,w,c
 14400  001706  6EF7               	movwf	tblptrh,c
 14401  001708                     	if	0	;There are less than 3 active tblptr bytes
 14402  001708                     	endif
 14403  001708  0008               	tblrd		*
 14404  00170A  CFF5 F067          	movff	tablat,i2printf@c
 14405                           
 14406                           ;doprnt.c: 1523: }
 14407                           
 14408                           ;doprnt.c: 1508: }
 14409                           ;doprnt.c: 1510: break;
 14410  00170E  D008               	goto	i2l6677
 14411  001710                     i2l6675:
 14412  001710  5065               	movf	i2printf@flag,w,c
 14413  001712  0B80               	andlw	128
 14414                           
 14415                           ; Switch size 1, requested type "space"
 14416                           ; Number of cases is 2, Range of values is 0 to 128
 14417                           ; switch strategies available:
 14418                           ; Name         Instructions Cycles
 14419                           ; simple_byte            7     4 (average)
 14420                           ;	Chosen strategy is simple_byte
 14421  001714  0A00               	xorlw	0	; case 0
 14422  001716  B4D8               	btfsc	status,2,c
 14423  001718  D78A               	goto	i2l6667
 14424  00171A  0A80               	xorlw	128	; case 128
 14425  00171C  B4D8               	btfsc	status,2,c
 14426  00171E  D7C3               	goto	i2l6669
 14427  001720                     i2l6677:
 14428                           
 14429                           ;doprnt.c: 1524: (putch(c) );
 14430  001720  5067               	movf	i2printf@c,w,c
 14431  001722  EC9E  F029         	call	i2_putch
 14432  001726                     i2l6679:
 14433  001726  0654               	decf	i2printf@prec,f,c
 14434  001728  A0D8               	btfss	status,0,c
 14435  00172A  0655               	decf	i2printf@prec+1,f,c
 14436  00172C  2854               	incf	i2printf@prec,w,c
 14437  00172E  E1F0               	bnz	i2l6675
 14438  001730  2855               	incf	i2printf@prec+1,w,c
 14439  001732  A4D8               	btfss	status,2,c
 14440  001734  D7ED               	goto	i2l6675
 14441  001736                     i2l6681:
 14442  001736  C040  FFF6         	movff	i2printf@f,tblptrl
 14443  00173A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14444  00173E  4A40               	infsnz	i2printf@f,f,c
 14445  001740  2A41               	incf	i2printf@f+1,f,c
 14446  001742                     	if	0	;tblptru may be non-zero
 14447  001742                     	endif
 14448  001742                     	if	0	;tblptru may be non-zero
 14449  001742                     	endif
 14450  001742  0008               	tblrd		*
 14451  001744  CFF5 F067          	movff	tablat,i2printf@c
 14452  001748  5067               	movf	i2printf@c,w,c
 14453  00174A  B4D8               	btfsc	status,2,c
 14454  00174C  0012               	return	
 14455  00174E  EF6B  F006         	goto	i2l6359
 14456  001752                     __end_ofi2_printf:
 14457                           	opt stack 0
 14458                           pclatu	equ	0xFFB
 14459                           pclath	equ	0xFFA
 14460                           tblptru	equ	0xFF8
 14461                           tblptrh	equ	0xFF7
 14462                           tblptrl	equ	0xFF6
 14463                           tablat	equ	0xFF5
 14464                           prodh	equ	0xFF4
 14465                           prodl	equ	0xFF3
 14466                           intcon	equ	0xFF2
 14467                           intcon3	equ	0xFF0
 14468                           postinc0	equ	0xFEE
 14469                           fsr0h	equ	0xFEA
 14470                           fsr0l	equ	0xFE9
 14471                           wreg	equ	0xFE8
 14472                           postdec1	equ	0xFE5
 14473                           fsr1h	equ	0xFE2
 14474                           fsr1l	equ	0xFE1
 14475                           indf2	equ	0xFDF
 14476                           postinc2	equ	0xFDE
 14477                           postdec2	equ	0xFDD
 14478                           fsr2h	equ	0xFDA
 14479                           fsr2l	equ	0xFD9
 14480                           status	equ	0xFD8
 14481                           
 14482 ;; *************** function i2_scale *****************
 14483 ;; Defined at:
 14484 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14485 ;; Parameters:    Size  Location     Type
 14486 ;;  scl             1    wreg     char 
 14487 ;; Auto vars:     Size  Location     Type
 14488 ;;  scl             1   41[COMRAM] char 
 14489 ;; Return value:  Size  Location     Type
 14490 ;;                  3   35[COMRAM] char 
 14491 ;; Registers used:
 14492 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14493 ;; Tracked objects:
 14494 ;;		On entry : 0/0
 14495 ;;		On exit  : 0/0
 14496 ;;		Unchanged: 0/0
 14497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14498 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14501 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14502 ;;Total ram usage:        7 bytes
 14503 ;; Hardware stack levels used:    1
 14504 ;; Hardware stack levels required when called:    2
 14505 ;; This function calls:
 14506 ;;		i2___awdiv
 14507 ;;		i2___awmod
 14508 ;;		i2___ftmul
 14509 ;;		i2___wmul
 14510 ;; This function is called by:
 14511 ;;		i2_printf
 14512 ;; This function uses a non-reentrant model
 14513 ;;
 14514                           
 14515                           	psect	text45
 14516  001C00                     __ptext45:
 14517                           	opt stack 0
 14518  001C00                     i2_scale:
 14519                           	opt stack 20
 14520                           
 14521                           ;incstack = 0
 14522                           ;i2scale@scl stored from wreg
 14523  001C00  6E2A               	movwf	i2scale@scl,c
 14524                           
 14525                           ;doprnt.c: 428: if(scl < 0) {
 14526  001C02  AE2A               	btfss	i2scale@scl,7,c
 14527  001C04  D0FB               	goto	i2l5883
 14528                           
 14529                           ;doprnt.c: 429: scl = -scl;
 14530  001C06  6C2A               	negf	i2scale@scl,c
 14531                           
 14532                           ;doprnt.c: 430: if(scl>=110)
 14533  001C08  502A               	movf	i2scale@scl,w,c
 14534  001C0A  0A80               	xorlw	128
 14535  001C0C  0F12               	addlw	-238
 14536  001C0E  A0D8               	btfss	status,0,c
 14537  001C10  D091               	goto	i2l5873
 14538                           
 14539                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14540  001C12  0E00               	movlw	0
 14541  001C14  6E12               	movwf	i2___wmul@multiplicand+1,c
 14542  001C16  0E03               	movlw	3
 14543  001C18  6E11               	movwf	i2___wmul@multiplicand,c
 14544  001C1A  0E00               	movlw	0
 14545  001C1C  6E0A               	movwf	i2___awdiv@divisor+1,c
 14546  001C1E  0E0A               	movlw	10
 14547  001C20  6E09               	movwf	i2___awdiv@divisor,c
 14548  001C22  0E00               	movlw	0
 14549  001C24  6E04               	movwf	i2___awmod@divisor+1,c
 14550  001C26  0E64               	movlw	100
 14551  001C28  6E03               	movwf	i2___awmod@divisor,c
 14552  001C2A  502A               	movf	i2scale@scl,w,c
 14553  001C2C  6E01               	movwf	i2___awmod@dividend,c
 14554  001C2E  6A02               	clrf	i2___awmod@dividend+1,c
 14555  001C30  BE01               	btfsc	i2___awmod@dividend,7,c
 14556  001C32  0602               	decf	i2___awmod@dividend+1,f,c
 14557  001C34  ECA3  F026         	call	i2___awmod	;wreg free
 14558  001C38  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14559  001C3C  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14560  001C40  ECA6  F025         	call	i2___awdiv	;wreg free
 14561  001C44  0E09               	movlw	9
 14562  001C46  2407               	addwf	?i2___awdiv,w,c
 14563  001C48  6E0F               	movwf	i2___wmul@multiplier,c
 14564  001C4A  0E00               	movlw	0
 14565  001C4C  2008               	addwfc	?i2___awdiv+1,w,c
 14566  001C4E  6E10               	movwf	i2___wmul@multiplier+1,c
 14567  001C50  EC79  F029         	call	i2___wmul	;wreg free
 14568  001C54  0E59               	movlw	low __npowers_
 14569  001C56  240F               	addwf	?i2___wmul,w,c
 14570  001C58  6EF6               	movwf	tblptrl,c
 14571  001C5A  0EFE               	movlw	high __npowers_
 14572  001C5C  2010               	addwfc	?i2___wmul+1,w,c
 14573  001C5E  6EF7               	movwf	tblptrh,c
 14574  001C60                     	if	0	;There are less than 3 active tblptr bytes
 14575  001C60                     	endif
 14576  001C60  0009               	tblrd		*+
 14577  001C62  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14578  001C66  0009               	tblrd		*+
 14579  001C68  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14580  001C6C  000A               	tblrd		*-
 14581  001C6E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14582  001C72  0E00               	movlw	0
 14583  001C74  6E0A               	movwf	i2___awdiv@divisor+1,c
 14584  001C76  0E64               	movlw	100
 14585  001C78  6E09               	movwf	i2___awdiv@divisor,c
 14586  001C7A  502A               	movf	i2scale@scl,w,c
 14587  001C7C  6E07               	movwf	i2___awdiv@dividend,c
 14588  001C7E  6A08               	clrf	i2___awdiv@dividend+1,c
 14589  001C80  BE07               	btfsc	i2___awdiv@dividend,7,c
 14590  001C82  0608               	decf	i2___awdiv@dividend+1,f,c
 14591  001C84  ECA6  F025         	call	i2___awdiv	;wreg free
 14592  001C88  0E12               	movlw	18
 14593  001C8A  2407               	addwf	?i2___awdiv,w,c
 14594  001C8C  6E0F               	movwf	i2___wmul@multiplier,c
 14595  001C8E  0E00               	movlw	0
 14596  001C90  2008               	addwfc	?i2___awdiv+1,w,c
 14597  001C92  6E10               	movwf	i2___wmul@multiplier+1,c
 14598  001C94  0E00               	movlw	0
 14599  001C96  6E12               	movwf	i2___wmul@multiplicand+1,c
 14600  001C98  0E03               	movlw	3
 14601  001C9A  6E11               	movwf	i2___wmul@multiplicand,c
 14602  001C9C  EC79  F029         	call	i2___wmul	;wreg free
 14603  001CA0  0E59               	movlw	low __npowers_
 14604  001CA2  240F               	addwf	?i2___wmul,w,c
 14605  001CA4  6EF6               	movwf	tblptrl,c
 14606  001CA6  0EFE               	movlw	high __npowers_
 14607  001CA8  2010               	addwfc	?i2___wmul+1,w,c
 14608  001CAA  6EF7               	movwf	tblptrh,c
 14609  001CAC                     	if	0	;There are less than 3 active tblptr bytes
 14610  001CAC                     	endif
 14611  001CAC  0009               	tblrd		*+
 14612  001CAE  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14613  001CB2  0009               	tblrd		*+
 14614  001CB4  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14615  001CB8  000A               	tblrd		*-
 14616  001CBA  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14617  001CBE  EC77  F020         	call	i2___ftmul	;wreg free
 14618  001CC2  C015  F027         	movff	?i2___ftmul,i2_scale$1533
 14619  001CC6  C016  F028         	movff	?i2___ftmul+1,i2_scale$1533+1
 14620  001CCA  C017  F029         	movff	?i2___ftmul+2,i2_scale$1533+2
 14621                           
 14622                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14623  001CCE  C027  F015         	movff	i2_scale$1533,i2___ftmul@f1
 14624  001CD2  C028  F016         	movff	i2_scale$1533+1,i2___ftmul@f1+1
 14625  001CD6  C029  F017         	movff	i2_scale$1533+2,i2___ftmul@f1+2
 14626  001CDA  0E00               	movlw	0
 14627  001CDC  6E12               	movwf	i2___wmul@multiplicand+1,c
 14628  001CDE  0E03               	movlw	3
 14629  001CE0  6E11               	movwf	i2___wmul@multiplicand,c
 14630  001CE2  0E00               	movlw	0
 14631  001CE4  6E04               	movwf	i2___awmod@divisor+1,c
 14632  001CE6  0E0A               	movlw	10
 14633  001CE8  6E03               	movwf	i2___awmod@divisor,c
 14634  001CEA  502A               	movf	i2scale@scl,w,c
 14635  001CEC  6E01               	movwf	i2___awmod@dividend,c
 14636  001CEE  6A02               	clrf	i2___awmod@dividend+1,c
 14637  001CF0  BE01               	btfsc	i2___awmod@dividend,7,c
 14638  001CF2  0602               	decf	i2___awmod@dividend+1,f,c
 14639  001CF4  ECA3  F026         	call	i2___awmod	;wreg free
 14640  001CF8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14641  001CFC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14642  001D00  EC79  F029         	call	i2___wmul	;wreg free
 14643  001D04  0E59               	movlw	low __npowers_
 14644  001D06  240F               	addwf	?i2___wmul,w,c
 14645  001D08  6EF6               	movwf	tblptrl,c
 14646  001D0A  0EFE               	movlw	high __npowers_
 14647  001D0C  2010               	addwfc	?i2___wmul+1,w,c
 14648  001D0E  6EF7               	movwf	tblptrh,c
 14649  001D10                     	if	0	;There are less than 3 active tblptr bytes
 14650  001D10                     	endif
 14651  001D10  0009               	tblrd		*+
 14652  001D12  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14653  001D16  0009               	tblrd		*+
 14654  001D18  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14655  001D1C  000A               	tblrd		*-
 14656  001D1E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14657  001D22  EC77  F020         	call	i2___ftmul	;wreg free
 14658  001D26  C015  F024         	movff	?i2___ftmul,?i2_scale
 14659  001D2A  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14660  001D2E  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14661  001D32  0012               	return	
 14662  001D34                     i2l5873:
 14663                           
 14664                           ;doprnt.c: 432: else if(scl > 10)
 14665  001D34  502A               	movf	i2scale@scl,w,c
 14666  001D36  0A80               	xorlw	128
 14667  001D38  0F75               	addlw	-139
 14668  001D3A  A0D8               	btfss	status,0,c
 14669  001D3C  D04D               	goto	i2l5879
 14670                           
 14671                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 14672  001D3E  0E00               	movlw	0
 14673  001D40  6E0A               	movwf	i2___awdiv@divisor+1,c
 14674  001D42  0E0A               	movlw	10
 14675  001D44  6E09               	movwf	i2___awdiv@divisor,c
 14676  001D46  502A               	movf	i2scale@scl,w,c
 14677  001D48  6E07               	movwf	i2___awdiv@dividend,c
 14678  001D4A  6A08               	clrf	i2___awdiv@dividend+1,c
 14679  001D4C  BE07               	btfsc	i2___awdiv@dividend,7,c
 14680  001D4E  0608               	decf	i2___awdiv@dividend+1,f,c
 14681  001D50  ECA6  F025         	call	i2___awdiv	;wreg free
 14682  001D54  0E09               	movlw	9
 14683  001D56  2407               	addwf	?i2___awdiv,w,c
 14684  001D58  6E0F               	movwf	i2___wmul@multiplier,c
 14685  001D5A  0E00               	movlw	0
 14686  001D5C  2008               	addwfc	?i2___awdiv+1,w,c
 14687  001D5E  6E10               	movwf	i2___wmul@multiplier+1,c
 14688  001D60  0E00               	movlw	0
 14689  001D62  6E12               	movwf	i2___wmul@multiplicand+1,c
 14690  001D64  0E03               	movlw	3
 14691  001D66  6E11               	movwf	i2___wmul@multiplicand,c
 14692  001D68  EC79  F029         	call	i2___wmul	;wreg free
 14693  001D6C  0E59               	movlw	low __npowers_
 14694  001D6E  240F               	addwf	?i2___wmul,w,c
 14695  001D70  6EF6               	movwf	tblptrl,c
 14696  001D72  0EFE               	movlw	high __npowers_
 14697  001D74  2010               	addwfc	?i2___wmul+1,w,c
 14698  001D76  6EF7               	movwf	tblptrh,c
 14699  001D78                     	if	0	;There are less than 3 active tblptr bytes
 14700  001D78                     	endif
 14701  001D78  0009               	tblrd		*+
 14702  001D7A  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14703  001D7E  0009               	tblrd		*+
 14704  001D80  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14705  001D84  000A               	tblrd		*-
 14706  001D86  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14707  001D8A  0E00               	movlw	0
 14708  001D8C  6E12               	movwf	i2___wmul@multiplicand+1,c
 14709  001D8E  0E03               	movlw	3
 14710  001D90  6E11               	movwf	i2___wmul@multiplicand,c
 14711  001D92  0E00               	movlw	0
 14712  001D94  6E04               	movwf	i2___awmod@divisor+1,c
 14713  001D96  0E0A               	movlw	10
 14714  001D98  6E03               	movwf	i2___awmod@divisor,c
 14715  001D9A  502A               	movf	i2scale@scl,w,c
 14716  001D9C  6E01               	movwf	i2___awmod@dividend,c
 14717  001D9E  6A02               	clrf	i2___awmod@dividend+1,c
 14718  001DA0  BE01               	btfsc	i2___awmod@dividend,7,c
 14719  001DA2  0602               	decf	i2___awmod@dividend+1,f,c
 14720  001DA4  ECA3  F026         	call	i2___awmod	;wreg free
 14721  001DA8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14722  001DAC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14723  001DB0  EC79  F029         	call	i2___wmul	;wreg free
 14724  001DB4  0E59               	movlw	low __npowers_
 14725  001DB6  240F               	addwf	?i2___wmul,w,c
 14726  001DB8  6EF6               	movwf	tblptrl,c
 14727  001DBA  0EFE               	movlw	high __npowers_
 14728  001DBC  2010               	addwfc	?i2___wmul+1,w,c
 14729  001DBE  6EF7               	movwf	tblptrh,c
 14730  001DC0                     	if	0	;There are less than 3 active tblptr bytes
 14731  001DC0                     	endif
 14732  001DC0  0009               	tblrd		*+
 14733  001DC2  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14734  001DC6  0009               	tblrd		*+
 14735  001DC8  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14736  001DCC  000A               	tblrd		*-
 14737  001DCE  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14738  001DD2  EC77  F020         	call	i2___ftmul	;wreg free
 14739  001DD6  D7A7               	goto	L11
 14740  001DD8                     i2l5879:
 14741                           
 14742                           ;doprnt.c: 434: return _npowers_[scl];
 14743  001DD8  502A               	movf	i2scale@scl,w,c
 14744  001DDA  0D03               	mullw	3
 14745  001DDC  0E59               	movlw	low __npowers_
 14746  001DDE  24F3               	addwf	prodl,w,c
 14747  001DE0  6EF6               	movwf	tblptrl,c
 14748  001DE2  0EFE               	movlw	high __npowers_
 14749  001DE4  20F4               	addwfc	prodh,w,c
 14750  001DE6  6EF7               	movwf	tblptrh,c
 14751  001DE8                     	if	0	;There are less than 3 active tblptr bytes
 14752  001DE8                     	endif
 14753  001DE8  0009               	tblrd		*+
 14754  001DEA  CFF5 F024          	movff	tablat,?i2_scale
 14755  001DEE  0009               	tblrd		*+
 14756  001DF0  CFF5 F025          	movff	tablat,?i2_scale+1
 14757  001DF4  000A               	tblrd		*-
 14758  001DF6  CFF5 F026          	movff	tablat,?i2_scale+2
 14759  001DFA  0012               	return	
 14760  001DFC                     i2l5883:
 14761                           
 14762                           ;doprnt.c: 435: }
 14763                           ;doprnt.c: 436: if(scl>=110)
 14764  001DFC  502A               	movf	i2scale@scl,w,c
 14765  001DFE  0A80               	xorlw	128
 14766  001E00  0F12               	addlw	-238
 14767  001E02  A0D8               	btfss	status,0,c
 14768  001E04  D091               	goto	i2l5891
 14769                           
 14770                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14771  001E06  0E00               	movlw	0
 14772  001E08  6E12               	movwf	i2___wmul@multiplicand+1,c
 14773  001E0A  0E03               	movlw	3
 14774  001E0C  6E11               	movwf	i2___wmul@multiplicand,c
 14775  001E0E  0E00               	movlw	0
 14776  001E10  6E0A               	movwf	i2___awdiv@divisor+1,c
 14777  001E12  0E0A               	movlw	10
 14778  001E14  6E09               	movwf	i2___awdiv@divisor,c
 14779  001E16  0E00               	movlw	0
 14780  001E18  6E04               	movwf	i2___awmod@divisor+1,c
 14781  001E1A  0E64               	movlw	100
 14782  001E1C  6E03               	movwf	i2___awmod@divisor,c
 14783  001E1E  502A               	movf	i2scale@scl,w,c
 14784  001E20  6E01               	movwf	i2___awmod@dividend,c
 14785  001E22  6A02               	clrf	i2___awmod@dividend+1,c
 14786  001E24  BE01               	btfsc	i2___awmod@dividend,7,c
 14787  001E26  0602               	decf	i2___awmod@dividend+1,f,c
 14788  001E28  ECA3  F026         	call	i2___awmod	;wreg free
 14789  001E2C  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14790  001E30  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14791  001E34  ECA6  F025         	call	i2___awdiv	;wreg free
 14792  001E38  0E09               	movlw	9
 14793  001E3A  2407               	addwf	?i2___awdiv,w,c
 14794  001E3C  6E0F               	movwf	i2___wmul@multiplier,c
 14795  001E3E  0E00               	movlw	0
 14796  001E40  2008               	addwfc	?i2___awdiv+1,w,c
 14797  001E42  6E10               	movwf	i2___wmul@multiplier+1,c
 14798  001E44  EC79  F029         	call	i2___wmul	;wreg free
 14799  001E48  0E80               	movlw	low __powers_
 14800  001E4A  240F               	addwf	?i2___wmul,w,c
 14801  001E4C  6EF6               	movwf	tblptrl,c
 14802  001E4E  0EFE               	movlw	high __powers_
 14803  001E50  2010               	addwfc	?i2___wmul+1,w,c
 14804  001E52  6EF7               	movwf	tblptrh,c
 14805  001E54                     	if	0	;There are less than 3 active tblptr bytes
 14806  001E54                     	endif
 14807  001E54  0009               	tblrd		*+
 14808  001E56  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14809  001E5A  0009               	tblrd		*+
 14810  001E5C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14811  001E60  000A               	tblrd		*-
 14812  001E62  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14813  001E66  0E00               	movlw	0
 14814  001E68  6E0A               	movwf	i2___awdiv@divisor+1,c
 14815  001E6A  0E64               	movlw	100
 14816  001E6C  6E09               	movwf	i2___awdiv@divisor,c
 14817  001E6E  502A               	movf	i2scale@scl,w,c
 14818  001E70  6E07               	movwf	i2___awdiv@dividend,c
 14819  001E72  6A08               	clrf	i2___awdiv@dividend+1,c
 14820  001E74  BE07               	btfsc	i2___awdiv@dividend,7,c
 14821  001E76  0608               	decf	i2___awdiv@dividend+1,f,c
 14822  001E78  ECA6  F025         	call	i2___awdiv	;wreg free
 14823  001E7C  0E12               	movlw	18
 14824  001E7E  2407               	addwf	?i2___awdiv,w,c
 14825  001E80  6E0F               	movwf	i2___wmul@multiplier,c
 14826  001E82  0E00               	movlw	0
 14827  001E84  2008               	addwfc	?i2___awdiv+1,w,c
 14828  001E86  6E10               	movwf	i2___wmul@multiplier+1,c
 14829  001E88  0E00               	movlw	0
 14830  001E8A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14831  001E8C  0E03               	movlw	3
 14832  001E8E  6E11               	movwf	i2___wmul@multiplicand,c
 14833  001E90  EC79  F029         	call	i2___wmul	;wreg free
 14834  001E94  0E80               	movlw	low __powers_
 14835  001E96  240F               	addwf	?i2___wmul,w,c
 14836  001E98  6EF6               	movwf	tblptrl,c
 14837  001E9A  0EFE               	movlw	high __powers_
 14838  001E9C  2010               	addwfc	?i2___wmul+1,w,c
 14839  001E9E  6EF7               	movwf	tblptrh,c
 14840  001EA0                     	if	0	;There are less than 3 active tblptr bytes
 14841  001EA0                     	endif
 14842  001EA0  0009               	tblrd		*+
 14843  001EA2  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14844  001EA6  0009               	tblrd		*+
 14845  001EA8  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14846  001EAC  000A               	tblrd		*-
 14847  001EAE  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14848  001EB2  EC77  F020         	call	i2___ftmul	;wreg free
 14849  001EB6  C015  F027         	movff	?i2___ftmul,i2_scale$1533
 14850  001EBA  C016  F028         	movff	?i2___ftmul+1,i2_scale$1533+1
 14851  001EBE  C017  F029         	movff	?i2___ftmul+2,i2_scale$1533+2
 14852                           
 14853                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14854  001EC2  C027  F015         	movff	i2_scale$1533,i2___ftmul@f1
 14855  001EC6  C028  F016         	movff	i2_scale$1533+1,i2___ftmul@f1+1
 14856  001ECA  C029  F017         	movff	i2_scale$1533+2,i2___ftmul@f1+2
 14857  001ECE  0E00               	movlw	0
 14858  001ED0  6E12               	movwf	i2___wmul@multiplicand+1,c
 14859  001ED2  0E03               	movlw	3
 14860  001ED4  6E11               	movwf	i2___wmul@multiplicand,c
 14861  001ED6  0E00               	movlw	0
 14862  001ED8  6E04               	movwf	i2___awmod@divisor+1,c
 14863  001EDA  0E0A               	movlw	10
 14864  001EDC  6E03               	movwf	i2___awmod@divisor,c
 14865  001EDE  502A               	movf	i2scale@scl,w,c
 14866  001EE0  6E01               	movwf	i2___awmod@dividend,c
 14867  001EE2  6A02               	clrf	i2___awmod@dividend+1,c
 14868  001EE4  BE01               	btfsc	i2___awmod@dividend,7,c
 14869  001EE6  0602               	decf	i2___awmod@dividend+1,f,c
 14870  001EE8  ECA3  F026         	call	i2___awmod	;wreg free
 14871  001EEC  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14872  001EF0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14873  001EF4  EC79  F029         	call	i2___wmul	;wreg free
 14874  001EF8  0E80               	movlw	low __powers_
 14875  001EFA  240F               	addwf	?i2___wmul,w,c
 14876  001EFC  6EF6               	movwf	tblptrl,c
 14877  001EFE  0EFE               	movlw	high __powers_
 14878  001F00  2010               	addwfc	?i2___wmul+1,w,c
 14879  001F02  6EF7               	movwf	tblptrh,c
 14880  001F04                     	if	0	;There are less than 3 active tblptr bytes
 14881  001F04                     	endif
 14882  001F04  0009               	tblrd		*+
 14883  001F06  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14884  001F0A  0009               	tblrd		*+
 14885  001F0C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14886  001F10  000A               	tblrd		*-
 14887  001F12  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14888  001F16  EC77  F020         	call	i2___ftmul	;wreg free
 14889  001F1A  C015  F024         	movff	?i2___ftmul,?i2_scale
 14890  001F1E  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14891  001F22  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14892  001F26  0012               	return	
 14893  001F28                     i2l5891:
 14894                           
 14895                           ;doprnt.c: 438: else if(scl > 10)
 14896  001F28  502A               	movf	i2scale@scl,w,c
 14897  001F2A  0A80               	xorlw	128
 14898  001F2C  0F75               	addlw	-139
 14899  001F2E  A0D8               	btfss	status,0,c
 14900  001F30  D04D               	goto	i2l5897
 14901                           
 14902                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 14903  001F32  0E00               	movlw	0
 14904  001F34  6E0A               	movwf	i2___awdiv@divisor+1,c
 14905  001F36  0E0A               	movlw	10
 14906  001F38  6E09               	movwf	i2___awdiv@divisor,c
 14907  001F3A  502A               	movf	i2scale@scl,w,c
 14908  001F3C  6E07               	movwf	i2___awdiv@dividend,c
 14909  001F3E  6A08               	clrf	i2___awdiv@dividend+1,c
 14910  001F40  BE07               	btfsc	i2___awdiv@dividend,7,c
 14911  001F42  0608               	decf	i2___awdiv@dividend+1,f,c
 14912  001F44  ECA6  F025         	call	i2___awdiv	;wreg free
 14913  001F48  0E09               	movlw	9
 14914  001F4A  2407               	addwf	?i2___awdiv,w,c
 14915  001F4C  6E0F               	movwf	i2___wmul@multiplier,c
 14916  001F4E  0E00               	movlw	0
 14917  001F50  2008               	addwfc	?i2___awdiv+1,w,c
 14918  001F52  6E10               	movwf	i2___wmul@multiplier+1,c
 14919  001F54  0E00               	movlw	0
 14920  001F56  6E12               	movwf	i2___wmul@multiplicand+1,c
 14921  001F58  0E03               	movlw	3
 14922  001F5A  6E11               	movwf	i2___wmul@multiplicand,c
 14923  001F5C  EC79  F029         	call	i2___wmul	;wreg free
 14924  001F60  0E80               	movlw	low __powers_
 14925  001F62  240F               	addwf	?i2___wmul,w,c
 14926  001F64  6EF6               	movwf	tblptrl,c
 14927  001F66  0EFE               	movlw	high __powers_
 14928  001F68  2010               	addwfc	?i2___wmul+1,w,c
 14929  001F6A  6EF7               	movwf	tblptrh,c
 14930  001F6C                     	if	0	;There are less than 3 active tblptr bytes
 14931  001F6C                     	endif
 14932  001F6C  0009               	tblrd		*+
 14933  001F6E  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14934  001F72  0009               	tblrd		*+
 14935  001F74  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14936  001F78  000A               	tblrd		*-
 14937  001F7A  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14938  001F7E  0E00               	movlw	0
 14939  001F80  6E12               	movwf	i2___wmul@multiplicand+1,c
 14940  001F82  0E03               	movlw	3
 14941  001F84  6E11               	movwf	i2___wmul@multiplicand,c
 14942  001F86  0E00               	movlw	0
 14943  001F88  6E04               	movwf	i2___awmod@divisor+1,c
 14944  001F8A  0E0A               	movlw	10
 14945  001F8C  6E03               	movwf	i2___awmod@divisor,c
 14946  001F8E  502A               	movf	i2scale@scl,w,c
 14947  001F90  6E01               	movwf	i2___awmod@dividend,c
 14948  001F92  6A02               	clrf	i2___awmod@dividend+1,c
 14949  001F94  BE01               	btfsc	i2___awmod@dividend,7,c
 14950  001F96  0602               	decf	i2___awmod@dividend+1,f,c
 14951  001F98  ECA3  F026         	call	i2___awmod	;wreg free
 14952  001F9C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14953  001FA0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14954  001FA4  EC79  F029         	call	i2___wmul	;wreg free
 14955  001FA8  0E80               	movlw	low __powers_
 14956  001FAA  240F               	addwf	?i2___wmul,w,c
 14957  001FAC  6EF6               	movwf	tblptrl,c
 14958  001FAE  0EFE               	movlw	high __powers_
 14959  001FB0  2010               	addwfc	?i2___wmul+1,w,c
 14960  001FB2  6EF7               	movwf	tblptrh,c
 14961  001FB4                     	if	0	;There are less than 3 active tblptr bytes
 14962  001FB4                     	endif
 14963  001FB4  0009               	tblrd		*+
 14964  001FB6  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14965  001FBA  0009               	tblrd		*+
 14966  001FBC  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14967  001FC0  000A               	tblrd		*-
 14968  001FC2  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14969  001FC6  EC77  F020         	call	i2___ftmul	;wreg free
 14970  001FCA  D7A7               	goto	L12
 14971  001FCC                     i2l5897:
 14972                           
 14973                           ;doprnt.c: 440: return _powers_[scl];
 14974  001FCC  502A               	movf	i2scale@scl,w,c
 14975  001FCE  0D03               	mullw	3
 14976  001FD0  0E80               	movlw	low __powers_
 14977  001FD2  24F3               	addwf	prodl,w,c
 14978  001FD4  6EF6               	movwf	tblptrl,c
 14979  001FD6  0EFE               	movlw	high __powers_
 14980  001FD8  20F4               	addwfc	prodh,w,c
 14981  001FDA  6EF7               	movwf	tblptrh,c
 14982  001FDC                     	if	0	;There are less than 3 active tblptr bytes
 14983  001FDC                     	endif
 14984  001FDC  0009               	tblrd		*+
 14985  001FDE  CFF5 F024          	movff	tablat,?i2_scale
 14986  001FE2  0009               	tblrd		*+
 14987  001FE4  CFF5 F025          	movff	tablat,?i2_scale+1
 14988  001FE8  000A               	tblrd		*-
 14989  001FEA  CFF5 F026          	movff	tablat,?i2_scale+2
 14990  001FEE  0012               	return	
 14991  001FF0                     __end_ofi2_scale:
 14992                           	opt stack 0
 14993                           pclatu	equ	0xFFB
 14994                           pclath	equ	0xFFA
 14995                           tblptru	equ	0xFF8
 14996                           tblptrh	equ	0xFF7
 14997                           tblptrl	equ	0xFF6
 14998                           tablat	equ	0xFF5
 14999                           prodh	equ	0xFF4
 15000                           prodl	equ	0xFF3
 15001                           intcon	equ	0xFF2
 15002                           intcon3	equ	0xFF0
 15003                           postinc0	equ	0xFEE
 15004                           fsr0h	equ	0xFEA
 15005                           fsr0l	equ	0xFE9
 15006                           wreg	equ	0xFE8
 15007                           postdec1	equ	0xFE5
 15008                           fsr1h	equ	0xFE2
 15009                           fsr1l	equ	0xFE1
 15010                           indf2	equ	0xFDF
 15011                           postinc2	equ	0xFDE
 15012                           postdec2	equ	0xFDD
 15013                           fsr2h	equ	0xFDA
 15014                           fsr2l	equ	0xFD9
 15015                           status	equ	0xFD8
 15016                           
 15017 ;; *************** function i2_putch *****************
 15018 ;; Defined at:
 15019 ;;		line 35 in file "lcd.c"
 15020 ;; Parameters:    Size  Location     Type
 15021 ;;  data            1    wreg     unsigned char 
 15022 ;; Auto vars:     Size  Location     Type
 15023 ;;  data            1    4[COMRAM] unsigned char 
 15024 ;; Return value:  Size  Location     Type
 15025 ;;                  1    wreg      void 
 15026 ;; Registers used:
 15027 ;;		wreg, status,2, status,0, cstack
 15028 ;; Tracked objects:
 15029 ;;		On entry : 0/0
 15030 ;;		On exit  : 0/0
 15031 ;;		Unchanged: 0/0
 15032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15037 ;;Total ram usage:        1 bytes
 15038 ;; Hardware stack levels used:    1
 15039 ;; Hardware stack levels required when called:    3
 15040 ;; This function calls:
 15041 ;;		i2_lcdNewline
 15042 ;;		i2_lcdNibble
 15043 ;; This function is called by:
 15044 ;;		i2_printf
 15045 ;; This function uses a non-reentrant model
 15046 ;;
 15047                           
 15048                           	psect	text46
 15049  00533C                     __ptext46:
 15050                           	opt stack 0
 15051  00533C                     i2_putch:
 15052                           	opt stack 19
 15053                           
 15054                           ;incstack = 0
 15055                           ;i2putch@data stored from wreg
 15056  00533C  6E05               	movwf	i2putch@data,c
 15057                           
 15058                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 15059  00533E  0E0A               	movlw	10
 15060  005340  1805               	xorwf	i2putch@data,w,c
 15061  005342  A4D8               	btfss	status,2,c
 15062  005344  D003               	goto	i2l191
 15063  005346  ECDB  F029         	call	i2_lcdNewline	;wreg free
 15064  00534A  0012               	return	
 15065  00534C                     i2l191:
 15066                           
 15067                           ;lcd.c: 37: else
 15068                           ;lcd.c: 38: {
 15069                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 15070  00534C  848C               	bsf	3980,2,c	;volatile
 15071                           
 15072                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
 15073  00534E  0E74               	movlw	116
 15074  005350                     i2u801_47:
 15075  005350  2EE8               	decfsz	wreg,f,c
 15076  005352  D7FE               	bra	i2u801_47
 15077  005354  D000               	nop2	
 15078                           
 15079                           ;lcd.c: 41: lcdNibble(data);
 15080  005356  5005               	movf	i2putch@data,w,c
 15081  005358  EC0E  F027         	call	i2_lcdNibble
 15082  00535C  0012               	return	
 15083  00535E                     __end_ofi2_putch:
 15084                           	opt stack 0
 15085                           pclatu	equ	0xFFB
 15086                           pclath	equ	0xFFA
 15087                           tblptru	equ	0xFF8
 15088                           tblptrh	equ	0xFF7
 15089                           tblptrl	equ	0xFF6
 15090                           tablat	equ	0xFF5
 15091                           prodh	equ	0xFF4
 15092                           prodl	equ	0xFF3
 15093                           intcon	equ	0xFF2
 15094                           intcon3	equ	0xFF0
 15095                           postinc0	equ	0xFEE
 15096                           fsr0h	equ	0xFEA
 15097                           fsr0l	equ	0xFE9
 15098                           wreg	equ	0xFE8
 15099                           postdec1	equ	0xFE5
 15100                           fsr1h	equ	0xFE2
 15101                           fsr1l	equ	0xFE1
 15102                           indf2	equ	0xFDF
 15103                           postinc2	equ	0xFDE
 15104                           postdec2	equ	0xFDD
 15105                           fsr2h	equ	0xFDA
 15106                           fsr2l	equ	0xFD9
 15107                           status	equ	0xFD8
 15108                           
 15109 ;; *************** function i2_lcdNewline *****************
 15110 ;; Defined at:
 15111 ;;		line 78 in file "lcd.c"
 15112 ;; Parameters:    Size  Location     Type
 15113 ;;		None
 15114 ;; Auto vars:     Size  Location     Type
 15115 ;;		None
 15116 ;; Return value:  Size  Location     Type
 15117 ;;                  1    wreg      void 
 15118 ;; Registers used:
 15119 ;;		wreg, status,2, status,0, cstack
 15120 ;; Tracked objects:
 15121 ;;		On entry : 0/0
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15129 ;;Total ram usage:        0 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    2
 15132 ;; This function calls:
 15133 ;;		i2_lcdInst
 15134 ;; This function is called by:
 15135 ;;		i2_putch
 15136 ;; This function uses a non-reentrant model
 15137 ;;
 15138                           
 15139                           	psect	text47
 15140  0053B6                     __ptext47:
 15141                           	opt stack 0
 15142  0053B6                     i2_lcdNewline:
 15143                           	opt stack 19
 15144                           
 15145                           ;lcd.c: 79: lcdInst(0b11000000);
 15146                           
 15147                           ;incstack = 0
 15148  0053B6  0EC0               	movlw	192
 15149  0053B8  ECAF  F029         	call	i2_lcdInst
 15150  0053BC  0012               	return		;funcret
 15151  0053BE                     __end_ofi2_lcdNewline:
 15152                           	opt stack 0
 15153                           pclatu	equ	0xFFB
 15154                           pclath	equ	0xFFA
 15155                           tblptru	equ	0xFF8
 15156                           tblptrh	equ	0xFF7
 15157                           tblptrl	equ	0xFF6
 15158                           tablat	equ	0xFF5
 15159                           prodh	equ	0xFF4
 15160                           prodl	equ	0xFF3
 15161                           intcon	equ	0xFF2
 15162                           intcon3	equ	0xFF0
 15163                           postinc0	equ	0xFEE
 15164                           fsr0h	equ	0xFEA
 15165                           fsr0l	equ	0xFE9
 15166                           wreg	equ	0xFE8
 15167                           postdec1	equ	0xFE5
 15168                           fsr1h	equ	0xFE2
 15169                           fsr1l	equ	0xFE1
 15170                           indf2	equ	0xFDF
 15171                           postinc2	equ	0xFDE
 15172                           postdec2	equ	0xFDD
 15173                           fsr2h	equ	0xFDA
 15174                           fsr2l	equ	0xFD9
 15175                           status	equ	0xFD8
 15176                           
 15177 ;; *************** function i2_isdigit *****************
 15178 ;; Defined at:
 15179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15180 ;; Parameters:    Size  Location     Type
 15181 ;;  c               1    wreg     unsigned char 
 15182 ;; Auto vars:     Size  Location     Type
 15183 ;;  c               1    2[COMRAM] unsigned char 
 15184 ;; Return value:  Size  Location     Type
 15185 ;;		None               void
 15186 ;; Registers used:
 15187 ;;		wreg, status,2, status,0
 15188 ;; Tracked objects:
 15189 ;;		On entry : 0/0
 15190 ;;		On exit  : 0/0
 15191 ;;		Unchanged: 0/0
 15192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15194 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15196 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;Total ram usage:        3 bytes
 15198 ;; Hardware stack levels used:    1
 15199 ;; This function calls:
 15200 ;;		Nothing
 15201 ;; This function is called by:
 15202 ;;		i2_printf
 15203 ;; This function uses a non-reentrant model
 15204 ;;
 15205                           
 15206                           	psect	text48
 15207  005380                     __ptext48:
 15208                           	opt stack 0
 15209  005380                     i2_isdigit:
 15210                           	opt stack 22
 15211                           
 15212                           ;incstack = 0
 15213                           ;i2isdigit@c stored from wreg
 15214  005380  6E03               	movwf	i2isdigit@c,c
 15215  005382  0E00               	movlw	0
 15216  005384  6E02               	movwf	i2_isdigit$962,c
 15217  005386  0E3A               	movlw	58
 15218  005388  6003               	cpfslt	i2isdigit@c,c
 15219  00538A  D005               	goto	i2l6101
 15220  00538C  0E2F               	movlw	47
 15221  00538E  6403               	cpfsgt	i2isdigit@c,c
 15222  005390  D002               	goto	i2l6101
 15223  005392  0E01               	movlw	1
 15224  005394  6E02               	movwf	i2_isdigit$962,c
 15225  005396                     i2l6101:
 15226  005396  C002  F001         	movff	i2_isdigit$962,??i2_isdigit
 15227  00539A  3001               	rrcf	??i2_isdigit,w,c
 15228  00539C  0012               	return	
 15229  00539E                     __end_ofi2_isdigit:
 15230                           	opt stack 0
 15231                           pclatu	equ	0xFFB
 15232                           pclath	equ	0xFFA
 15233                           tblptru	equ	0xFF8
 15234                           tblptrh	equ	0xFF7
 15235                           tblptrl	equ	0xFF6
 15236                           tablat	equ	0xFF5
 15237                           prodh	equ	0xFF4
 15238                           prodl	equ	0xFF3
 15239                           intcon	equ	0xFF2
 15240                           intcon3	equ	0xFF0
 15241                           postinc0	equ	0xFEE
 15242                           fsr0h	equ	0xFEA
 15243                           fsr0l	equ	0xFE9
 15244                           wreg	equ	0xFE8
 15245                           postdec1	equ	0xFE5
 15246                           fsr1h	equ	0xFE2
 15247                           fsr1l	equ	0xFE1
 15248                           indf2	equ	0xFDF
 15249                           postinc2	equ	0xFDE
 15250                           postdec2	equ	0xFDD
 15251                           fsr2h	equ	0xFDA
 15252                           fsr2l	equ	0xFD9
 15253                           status	equ	0xFD8
 15254                           
 15255 ;; *************** function i2_fround *****************
 15256 ;; Defined at:
 15257 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15258 ;; Parameters:    Size  Location     Type
 15259 ;;  prec            1    wreg     unsigned char 
 15260 ;; Auto vars:     Size  Location     Type
 15261 ;;  prec            1   44[COMRAM] unsigned char 
 15262 ;; Return value:  Size  Location     Type
 15263 ;;                  3   35[COMRAM] unsigned char 
 15264 ;; Registers used:
 15265 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15266 ;; Tracked objects:
 15267 ;;		On entry : 0/0
 15268 ;;		On exit  : 0/0
 15269 ;;		Unchanged: 0/0
 15270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15271 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15272 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15274 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15275 ;;Total ram usage:       10 bytes
 15276 ;; Hardware stack levels used:    1
 15277 ;; Hardware stack levels required when called:    2
 15278 ;; This function calls:
 15279 ;;		i2___awdiv
 15280 ;;		i2___awmod
 15281 ;;		i2___ftmul
 15282 ;;		i2___wmul
 15283 ;; This function is called by:
 15284 ;;		i2_printf
 15285 ;; This function uses a non-reentrant model
 15286 ;;
 15287                           
 15288                           	psect	text49
 15289  002B8E                     __ptext49:
 15290                           	opt stack 0
 15291  002B8E                     i2_fround:
 15292                           	opt stack 20
 15293                           
 15294                           ;incstack = 0
 15295                           ;i2fround@prec stored from wreg
 15296  002B8E  6E2D               	movwf	i2fround@prec,c
 15297                           
 15298                           ;doprnt.c: 413: if(prec>=110)
 15299  002B90  0E6D               	movlw	109
 15300  002B92  642D               	cpfsgt	i2fround@prec,c
 15301  002B94  D09F               	goto	i2l5851
 15302                           
 15303                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15304  002B96  0E00               	movlw	0
 15305  002B98  6E12               	movwf	i2___wmul@multiplicand+1,c
 15306  002B9A  0E03               	movlw	3
 15307  002B9C  6E11               	movwf	i2___wmul@multiplicand,c
 15308  002B9E  0E00               	movlw	0
 15309  002BA0  6E0A               	movwf	i2___awdiv@divisor+1,c
 15310  002BA2  0E0A               	movlw	10
 15311  002BA4  6E09               	movwf	i2___awdiv@divisor,c
 15312  002BA6  0E00               	movlw	0
 15313  002BA8  6E04               	movwf	i2___awmod@divisor+1,c
 15314  002BAA  0E64               	movlw	100
 15315  002BAC  6E03               	movwf	i2___awmod@divisor,c
 15316  002BAE  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15317  002BB2  6A02               	clrf	i2___awmod@dividend+1,c
 15318  002BB4  ECA3  F026         	call	i2___awmod	;wreg free
 15319  002BB8  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 15320  002BBC  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 15321  002BC0  ECA6  F025         	call	i2___awdiv	;wreg free
 15322  002BC4  0E09               	movlw	9
 15323  002BC6  2407               	addwf	?i2___awdiv,w,c
 15324  002BC8  6E0F               	movwf	i2___wmul@multiplier,c
 15325  002BCA  0E00               	movlw	0
 15326  002BCC  2008               	addwfc	?i2___awdiv+1,w,c
 15327  002BCE  6E10               	movwf	i2___wmul@multiplier+1,c
 15328  002BD0  EC79  F029         	call	i2___wmul	;wreg free
 15329  002BD4  0E59               	movlw	low __npowers_
 15330  002BD6  240F               	addwf	?i2___wmul,w,c
 15331  002BD8  6EF6               	movwf	tblptrl,c
 15332  002BDA  0EFE               	movlw	high __npowers_
 15333  002BDC  2010               	addwfc	?i2___wmul+1,w,c
 15334  002BDE  6EF7               	movwf	tblptrh,c
 15335  002BE0                     	if	0	;There are less than 3 active tblptr bytes
 15336  002BE0                     	endif
 15337  002BE0  0009               	tblrd		*+
 15338  002BE2  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15339  002BE6  0009               	tblrd		*+
 15340  002BE8  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15341  002BEC  000A               	tblrd		*-
 15342  002BEE  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15343  002BF2  0E00               	movlw	0
 15344  002BF4  6E0A               	movwf	i2___awdiv@divisor+1,c
 15345  002BF6  0E64               	movlw	100
 15346  002BF8  6E09               	movwf	i2___awdiv@divisor,c
 15347  002BFA  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15348  002BFE  6A08               	clrf	i2___awdiv@dividend+1,c
 15349  002C00  ECA6  F025         	call	i2___awdiv	;wreg free
 15350  002C04  0E12               	movlw	18
 15351  002C06  2407               	addwf	?i2___awdiv,w,c
 15352  002C08  6E0F               	movwf	i2___wmul@multiplier,c
 15353  002C0A  0E00               	movlw	0
 15354  002C0C  2008               	addwfc	?i2___awdiv+1,w,c
 15355  002C0E  6E10               	movwf	i2___wmul@multiplier+1,c
 15356  002C10  0E00               	movlw	0
 15357  002C12  6E12               	movwf	i2___wmul@multiplicand+1,c
 15358  002C14  0E03               	movlw	3
 15359  002C16  6E11               	movwf	i2___wmul@multiplicand,c
 15360  002C18  EC79  F029         	call	i2___wmul	;wreg free
 15361  002C1C  0E59               	movlw	low __npowers_
 15362  002C1E  240F               	addwf	?i2___wmul,w,c
 15363  002C20  6EF6               	movwf	tblptrl,c
 15364  002C22  0EFE               	movlw	high __npowers_
 15365  002C24  2010               	addwfc	?i2___wmul+1,w,c
 15366  002C26  6EF7               	movwf	tblptrh,c
 15367  002C28                     	if	0	;There are less than 3 active tblptr bytes
 15368  002C28                     	endif
 15369  002C28  0009               	tblrd		*+
 15370  002C2A  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15371  002C2E  0009               	tblrd		*+
 15372  002C30  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15373  002C34  000A               	tblrd		*-
 15374  002C36  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15375  002C3A  EC77  F020         	call	i2___ftmul	;wreg free
 15376  002C3E  C015  F02A         	movff	?i2___ftmul,i2_fround$1531
 15377  002C42  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1531+1
 15378  002C46  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1531+2
 15379                           
 15380                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15381  002C4A  0E00               	movlw	0
 15382  002C4C  6E12               	movwf	i2___wmul@multiplicand+1,c
 15383  002C4E  0E03               	movlw	3
 15384  002C50  6E11               	movwf	i2___wmul@multiplicand,c
 15385  002C52  0E00               	movlw	0
 15386  002C54  6E04               	movwf	i2___awmod@divisor+1,c
 15387  002C56  0E0A               	movlw	10
 15388  002C58  6E03               	movwf	i2___awmod@divisor,c
 15389  002C5A  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15390  002C5E  6A02               	clrf	i2___awmod@dividend+1,c
 15391  002C60  ECA3  F026         	call	i2___awmod	;wreg free
 15392  002C64  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15393  002C68  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15394  002C6C  EC79  F029         	call	i2___wmul	;wreg free
 15395  002C70  0E59               	movlw	low __npowers_
 15396  002C72  240F               	addwf	?i2___wmul,w,c
 15397  002C74  6EF6               	movwf	tblptrl,c
 15398  002C76  0EFE               	movlw	high __npowers_
 15399  002C78  2010               	addwfc	?i2___wmul+1,w,c
 15400  002C7A  6EF7               	movwf	tblptrh,c
 15401  002C7C                     	if	0	;There are less than 3 active tblptr bytes
 15402  002C7C                     	endif
 15403  002C7C  0009               	tblrd		*+
 15404  002C7E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15405  002C82  0009               	tblrd		*+
 15406  002C84  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15407  002C88  000A               	tblrd		*-
 15408  002C8A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15409  002C8E  C02A  F015         	movff	i2_fround$1531,i2___ftmul@f1
 15410  002C92  C02B  F016         	movff	i2_fround$1531+1,i2___ftmul@f1+1
 15411  002C96  C02C  F017         	movff	i2_fround$1531+2,i2___ftmul@f1+2
 15412  002C9A  EC77  F020         	call	i2___ftmul	;wreg free
 15413  002C9E  C015  F027         	movff	?i2___ftmul,i2_fround$1532
 15414  002CA2  C016  F028         	movff	?i2___ftmul+1,i2_fround$1532+1
 15415  002CA6  C017  F029         	movff	?i2___ftmul+2,i2_fround$1532+2
 15416                           
 15417                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15418  002CAA  C027  F015         	movff	i2_fround$1532,i2___ftmul@f1
 15419  002CAE  C028  F016         	movff	i2_fround$1532+1,i2___ftmul@f1+1
 15420  002CB2  C029  F017         	movff	i2_fround$1532+2,i2___ftmul@f1+2
 15421  002CB6  0E00               	movlw	0
 15422  002CB8  6E18               	movwf	i2___ftmul@f2,c
 15423  002CBA  0E00               	movlw	0
 15424  002CBC  6E19               	movwf	i2___ftmul@f2+1,c
 15425  002CBE  0E3F               	movlw	63
 15426  002CC0  6E1A               	movwf	i2___ftmul@f2+2,c
 15427  002CC2  EC77  F020         	call	i2___ftmul	;wreg free
 15428  002CC6  C015  F024         	movff	?i2___ftmul,?i2_fround
 15429  002CCA  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15430  002CCE  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15431  002CD2  0012               	return	
 15432  002CD4                     i2l5851:
 15433                           
 15434                           ;doprnt.c: 415: else if(prec > 10)
 15435  002CD4  0E0A               	movlw	10
 15436  002CD6  642D               	cpfsgt	i2fround@prec,c
 15437  002CD8  D05D               	goto	i2l5859
 15438                           
 15439                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15440  002CDA  0E00               	movlw	0
 15441  002CDC  6E12               	movwf	i2___wmul@multiplicand+1,c
 15442  002CDE  0E03               	movlw	3
 15443  002CE0  6E11               	movwf	i2___wmul@multiplicand,c
 15444  002CE2  0E00               	movlw	0
 15445  002CE4  6E04               	movwf	i2___awmod@divisor+1,c
 15446  002CE6  0E0A               	movlw	10
 15447  002CE8  6E03               	movwf	i2___awmod@divisor,c
 15448  002CEA  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15449  002CEE  6A02               	clrf	i2___awmod@dividend+1,c
 15450  002CF0  ECA3  F026         	call	i2___awmod	;wreg free
 15451  002CF4  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15452  002CF8  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15453  002CFC  EC79  F029         	call	i2___wmul	;wreg free
 15454  002D00  0E59               	movlw	low __npowers_
 15455  002D02  240F               	addwf	?i2___wmul,w,c
 15456  002D04  6EF6               	movwf	tblptrl,c
 15457  002D06  0EFE               	movlw	high __npowers_
 15458  002D08  2010               	addwfc	?i2___wmul+1,w,c
 15459  002D0A  6EF7               	movwf	tblptrh,c
 15460  002D0C                     	if	0	;There are less than 3 active tblptr bytes
 15461  002D0C                     	endif
 15462  002D0C  0009               	tblrd		*+
 15463  002D0E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15464  002D12  0009               	tblrd		*+
 15465  002D14  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15466  002D18  000A               	tblrd		*-
 15467  002D1A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15468  002D1E  0E00               	movlw	0
 15469  002D20  6E0A               	movwf	i2___awdiv@divisor+1,c
 15470  002D22  0E0A               	movlw	10
 15471  002D24  6E09               	movwf	i2___awdiv@divisor,c
 15472  002D26  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15473  002D2A  6A08               	clrf	i2___awdiv@dividend+1,c
 15474  002D2C  ECA6  F025         	call	i2___awdiv	;wreg free
 15475  002D30  0E09               	movlw	9
 15476  002D32  2407               	addwf	?i2___awdiv,w,c
 15477  002D34  6E0F               	movwf	i2___wmul@multiplier,c
 15478  002D36  0E00               	movlw	0
 15479  002D38  2008               	addwfc	?i2___awdiv+1,w,c
 15480  002D3A  6E10               	movwf	i2___wmul@multiplier+1,c
 15481  002D3C  0E00               	movlw	0
 15482  002D3E  6E12               	movwf	i2___wmul@multiplicand+1,c
 15483  002D40  0E03               	movlw	3
 15484  002D42  6E11               	movwf	i2___wmul@multiplicand,c
 15485  002D44  EC79  F029         	call	i2___wmul	;wreg free
 15486  002D48  0E59               	movlw	low __npowers_
 15487  002D4A  240F               	addwf	?i2___wmul,w,c
 15488  002D4C  6EF6               	movwf	tblptrl,c
 15489  002D4E  0EFE               	movlw	high __npowers_
 15490  002D50  2010               	addwfc	?i2___wmul+1,w,c
 15491  002D52  6EF7               	movwf	tblptrh,c
 15492  002D54                     	if	0	;There are less than 3 active tblptr bytes
 15493  002D54                     	endif
 15494  002D54  0009               	tblrd		*+
 15495  002D56  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15496  002D5A  0009               	tblrd		*+
 15497  002D5C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15498  002D60  000A               	tblrd		*-
 15499  002D62  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15500  002D66  EC77  F020         	call	i2___ftmul	;wreg free
 15501  002D6A  C015  F02A         	movff	?i2___ftmul,i2_fround$1531
 15502  002D6E  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1531+1
 15503  002D72  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1531+2
 15504                           
 15505                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15506  002D76  C02A  F015         	movff	i2_fround$1531,i2___ftmul@f1
 15507  002D7A  C02B  F016         	movff	i2_fround$1531+1,i2___ftmul@f1+1
 15508  002D7E  C02C  F017         	movff	i2_fround$1531+2,i2___ftmul@f1+2
 15509  002D82  0E00               	movlw	0
 15510  002D84  6E18               	movwf	i2___ftmul@f2,c
 15511  002D86  0E00               	movlw	0
 15512  002D88  6E19               	movwf	i2___ftmul@f2+1,c
 15513  002D8A  0E3F               	movlw	63
 15514  002D8C  6E1A               	movwf	i2___ftmul@f2+2,c
 15515  002D8E  EC77  F020         	call	i2___ftmul	;wreg free
 15516  002D92  D799               	goto	L13
 15517  002D94                     i2l5859:
 15518                           
 15519                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15520  002D94  502D               	movf	i2fround@prec,w,c
 15521  002D96  0D03               	mullw	3
 15522  002D98  0E59               	movlw	low __npowers_
 15523  002D9A  24F3               	addwf	prodl,w,c
 15524  002D9C  6EF6               	movwf	tblptrl,c
 15525  002D9E  0EFE               	movlw	high __npowers_
 15526  002DA0  20F4               	addwfc	prodh,w,c
 15527  002DA2  6EF7               	movwf	tblptrh,c
 15528  002DA4                     	if	0	;There are less than 3 active tblptr bytes
 15529  002DA4                     	endif
 15530  002DA4  0009               	tblrd		*+
 15531  002DA6  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15532  002DAA  0009               	tblrd		*+
 15533  002DAC  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15534  002DB0  000A               	tblrd		*-
 15535  002DB2  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15536  002DB6  0E00               	movlw	0
 15537  002DB8  6E18               	movwf	i2___ftmul@f2,c
 15538  002DBA  0E00               	movlw	0
 15539  002DBC  6E19               	movwf	i2___ftmul@f2+1,c
 15540  002DBE  0E3F               	movlw	63
 15541  002DC0  6E1A               	movwf	i2___ftmul@f2+2,c
 15542  002DC2  EC77  F020         	call	i2___ftmul	;wreg free
 15543  002DC6  C015  F024         	movff	?i2___ftmul,?i2_fround
 15544  002DCA  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15545  002DCE  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15546  002DD2  0012               	return	
 15547  002DD4                     __end_ofi2_fround:
 15548                           	opt stack 0
 15549                           pclatu	equ	0xFFB
 15550                           pclath	equ	0xFFA
 15551                           tblptru	equ	0xFF8
 15552                           tblptrh	equ	0xFF7
 15553                           tblptrl	equ	0xFF6
 15554                           tablat	equ	0xFF5
 15555                           prodh	equ	0xFF4
 15556                           prodl	equ	0xFF3
 15557                           intcon	equ	0xFF2
 15558                           intcon3	equ	0xFF0
 15559                           postinc0	equ	0xFEE
 15560                           fsr0h	equ	0xFEA
 15561                           fsr0l	equ	0xFE9
 15562                           wreg	equ	0xFE8
 15563                           postdec1	equ	0xFE5
 15564                           fsr1h	equ	0xFE2
 15565                           fsr1l	equ	0xFE1
 15566                           indf2	equ	0xFDF
 15567                           postinc2	equ	0xFDE
 15568                           postdec2	equ	0xFDD
 15569                           fsr2h	equ	0xFDA
 15570                           fsr2l	equ	0xFD9
 15571                           status	equ	0xFD8
 15572                           
 15573 ;; *************** function i2___wmul *****************
 15574 ;; Defined at:
 15575 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15576 ;; Parameters:    Size  Location     Type
 15577 ;;  multiplier      2   14[COMRAM] unsigned int 
 15578 ;;  multiplicand    2   16[COMRAM] unsigned int 
 15579 ;; Auto vars:     Size  Location     Type
 15580 ;;  __wmul          2   18[COMRAM] unsigned int 
 15581 ;; Return value:  Size  Location     Type
 15582 ;;                  2   14[COMRAM] unsigned int 
 15583 ;; Registers used:
 15584 ;;		wreg, status,2, status,0, prodl, prodh
 15585 ;; Tracked objects:
 15586 ;;		On entry : 0/0
 15587 ;;		On exit  : 0/0
 15588 ;;		Unchanged: 0/0
 15589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15590 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15593 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15594 ;;Total ram usage:        6 bytes
 15595 ;; Hardware stack levels used:    1
 15596 ;; This function calls:
 15597 ;;		Nothing
 15598 ;; This function is called by:
 15599 ;;		i2_fround
 15600 ;;		i2_scale
 15601 ;;		i2_printf
 15602 ;; This function uses a non-reentrant model
 15603 ;;
 15604                           
 15605                           	psect	text50
 15606  0052F2                     __ptext50:
 15607                           	opt stack 0
 15608  0052F2                     i2___wmul:
 15609                           	opt stack 21
 15610                           
 15611                           ;incstack = 0
 15612  0052F2  500F               	movf	i2___wmul@multiplier,w,c
 15613  0052F4  0211               	mulwf	i2___wmul@multiplicand,c
 15614  0052F6  CFF3 F013          	movff	prodl,i2___wmul@product
 15615  0052FA  CFF4 F014          	movff	prodh,i2___wmul@product+1
 15616  0052FE  500F               	movf	i2___wmul@multiplier,w,c
 15617  005300  0212               	mulwf	i2___wmul@multiplicand+1,c
 15618  005302  50F3               	movf	prodl,w,c
 15619  005304  2614               	addwf	i2___wmul@product+1,f,c
 15620  005306  5010               	movf	i2___wmul@multiplier+1,w,c
 15621  005308  0211               	mulwf	i2___wmul@multiplicand,c
 15622  00530A  50F3               	movf	prodl,w,c
 15623  00530C  2614               	addwf	i2___wmul@product+1,f,c
 15624  00530E  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 15625  005312  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 15626  005316  0012               	return	
 15627  005318                     __end_ofi2___wmul:
 15628                           	opt stack 0
 15629                           pclatu	equ	0xFFB
 15630                           pclath	equ	0xFFA
 15631                           tblptru	equ	0xFF8
 15632                           tblptrh	equ	0xFF7
 15633                           tblptrl	equ	0xFF6
 15634                           tablat	equ	0xFF5
 15635                           prodh	equ	0xFF4
 15636                           prodl	equ	0xFF3
 15637                           intcon	equ	0xFF2
 15638                           intcon3	equ	0xFF0
 15639                           postinc0	equ	0xFEE
 15640                           fsr0h	equ	0xFEA
 15641                           fsr0l	equ	0xFE9
 15642                           wreg	equ	0xFE8
 15643                           postdec1	equ	0xFE5
 15644                           fsr1h	equ	0xFE2
 15645                           fsr1l	equ	0xFE1
 15646                           indf2	equ	0xFDF
 15647                           postinc2	equ	0xFDE
 15648                           postdec2	equ	0xFDD
 15649                           fsr2h	equ	0xFDA
 15650                           fsr2l	equ	0xFD9
 15651                           status	equ	0xFD8
 15652                           
 15653 ;; *************** function i2___ftmul *****************
 15654 ;; Defined at:
 15655 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;  f1              3   20[COMRAM] float 
 15658 ;;  f2              3   23[COMRAM] float 
 15659 ;; Auto vars:     Size  Location     Type
 15660 ;;  __ftmul         3   30[COMRAM] unsigned um
 15661 ;;  __ftmul         1   34[COMRAM] unsigned char 
 15662 ;;  __ftmul         1   33[COMRAM] unsigned char 
 15663 ;;  __ftmul         1   29[COMRAM] unsigned char 
 15664 ;; Return value:  Size  Location     Type
 15665 ;;                  3   20[COMRAM] float 
 15666 ;; Registers used:
 15667 ;;		wreg, status,2, status,0, cstack
 15668 ;; Tracked objects:
 15669 ;;		On entry : 0/0
 15670 ;;		On exit  : 0/0
 15671 ;;		Unchanged: 0/0
 15672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15673 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15674 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15675 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15676 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15677 ;;Total ram usage:       15 bytes
 15678 ;; Hardware stack levels used:    1
 15679 ;; Hardware stack levels required when called:    1
 15680 ;; This function calls:
 15681 ;;		i2___ftpack
 15682 ;; This function is called by:
 15683 ;;		i2_fround
 15684 ;;		i2_scale
 15685 ;;		i2_printf
 15686 ;; This function uses a non-reentrant model
 15687 ;;
 15688                           
 15689                           	psect	text51
 15690  0040EE                     __ptext51:
 15691                           	opt stack 0
 15692  0040EE                     i2___ftmul:
 15693                           	opt stack 20
 15694                           
 15695                           ;incstack = 0
 15696  0040EE  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 15697  0040F2  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 15698  0040F4  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 15699  0040F6  3416               	rlcf	i2___ftmul@f1+1,w,c
 15700  0040F8  361B               	rlcf	??i2___ftmul& (0+255),f,c
 15701  0040FA  E301               	bnc	u545_41
 15702  0040FC  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15703  0040FE                     u545_41:
 15704  0040FE  501B               	movf	??i2___ftmul,w,c
 15705  004100  6E1E               	movwf	i2___ftmul@exp,c
 15706  004102  501E               	movf	i2___ftmul@exp,w,c
 15707  004104  A4D8               	btfss	status,2,c
 15708  004106  D007               	goto	i2l5273
 15709  004108  0E00               	movlw	0
 15710  00410A  6E15               	movwf	?i2___ftmul,c
 15711  00410C  0E00               	movlw	0
 15712  00410E  6E16               	movwf	?i2___ftmul+1,c
 15713  004110  0E00               	movlw	0
 15714  004112  6E17               	movwf	?i2___ftmul+2,c
 15715  004114  0012               	return	
 15716  004116                     i2l5273:
 15717  004116  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 15718  00411A  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 15719  00411C  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 15720  00411E  3419               	rlcf	i2___ftmul@f2+1,w,c
 15721  004120  361B               	rlcf	??i2___ftmul& (0+255),f,c
 15722  004122  E301               	bnc	u547_41
 15723  004124  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15724  004126                     u547_41:
 15725  004126  501B               	movf	??i2___ftmul,w,c
 15726  004128  6E23               	movwf	i2___ftmul@sign,c
 15727  00412A  5023               	movf	i2___ftmul@sign,w,c
 15728  00412C  A4D8               	btfss	status,2,c
 15729  00412E  D007               	goto	i2l5279
 15730  004130  0E00               	movlw	0
 15731  004132  6E15               	movwf	?i2___ftmul,c
 15732  004134  0E00               	movlw	0
 15733  004136  6E16               	movwf	?i2___ftmul+1,c
 15734  004138  0E00               	movlw	0
 15735  00413A  6E17               	movwf	?i2___ftmul+2,c
 15736  00413C  0012               	return	
 15737  00413E                     i2l5279:
 15738  00413E  5023               	movf	i2___ftmul@sign,w,c
 15739  004140  0F7B               	addlw	123
 15740  004142  261E               	addwf	i2___ftmul@exp,f,c
 15741  004144  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 15742  004148  501A               	movf	i2___ftmul@f2+2,w,c
 15743  00414A  1A23               	xorwf	i2___ftmul@sign,f,c
 15744  00414C  0E80               	movlw	128
 15745  00414E  1623               	andwf	i2___ftmul@sign,f,c
 15746  004150  8E16               	bsf	i2___ftmul@f1+1,7,c
 15747  004152  8E19               	bsf	i2___ftmul@f2+1,7,c
 15748  004154  0EFF               	movlw	255
 15749  004156  1618               	andwf	i2___ftmul@f2,f,c
 15750  004158  0EFF               	movlw	255
 15751  00415A  1619               	andwf	i2___ftmul@f2+1,f,c
 15752  00415C  0E00               	movlw	0
 15753  00415E  161A               	andwf	i2___ftmul@f2+2,f,c
 15754  004160  0E00               	movlw	0
 15755  004162  6E1F               	movwf	i2___ftmul@f3_as_product,c
 15756  004164  0E00               	movlw	0
 15757  004166  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 15758  004168  0E00               	movlw	0
 15759  00416A  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 15760  00416C  0E07               	movlw	7
 15761  00416E  6E22               	movwf	i2___ftmul@cntr,c
 15762  004170                     i2l5293:
 15763  004170  A015               	btfss	i2___ftmul@f1,0,c
 15764  004172  D006               	goto	i2l5297
 15765  004174  5018               	movf	i2___ftmul@f2,w,c
 15766  004176  261F               	addwf	i2___ftmul@f3_as_product,f,c
 15767  004178  5019               	movf	i2___ftmul@f2+1,w,c
 15768  00417A  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15769  00417C  501A               	movf	i2___ftmul@f2+2,w,c
 15770  00417E  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15771  004180                     i2l5297:
 15772  004180  90D8               	bcf	status,0,c
 15773  004182  3217               	rrcf	i2___ftmul@f1+2,f,c
 15774  004184  3216               	rrcf	i2___ftmul@f1+1,f,c
 15775  004186  3215               	rrcf	i2___ftmul@f1,f,c
 15776  004188  90D8               	bcf	status,0,c
 15777  00418A  3618               	rlcf	i2___ftmul@f2,f,c
 15778  00418C  3619               	rlcf	i2___ftmul@f2+1,f,c
 15779  00418E  361A               	rlcf	i2___ftmul@f2+2,f,c
 15780  004190  2E22               	decfsz	i2___ftmul@cntr,f,c
 15781  004192  D7EE               	goto	i2l5293
 15782  004194  0E09               	movlw	9
 15783  004196  6E22               	movwf	i2___ftmul@cntr,c
 15784  004198                     i2l5303:
 15785  004198  A015               	btfss	i2___ftmul@f1,0,c
 15786  00419A  D006               	goto	i2l5307
 15787  00419C  5018               	movf	i2___ftmul@f2,w,c
 15788  00419E  261F               	addwf	i2___ftmul@f3_as_product,f,c
 15789  0041A0  5019               	movf	i2___ftmul@f2+1,w,c
 15790  0041A2  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15791  0041A4  501A               	movf	i2___ftmul@f2+2,w,c
 15792  0041A6  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15793  0041A8                     i2l5307:
 15794  0041A8  90D8               	bcf	status,0,c
 15795  0041AA  3217               	rrcf	i2___ftmul@f1+2,f,c
 15796  0041AC  3216               	rrcf	i2___ftmul@f1+1,f,c
 15797  0041AE  3215               	rrcf	i2___ftmul@f1,f,c
 15798  0041B0  90D8               	bcf	status,0,c
 15799  0041B2  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 15800  0041B4  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 15801  0041B6  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 15802  0041B8  2E22               	decfsz	i2___ftmul@cntr,f,c
 15803  0041BA  D7EE               	goto	i2l5303
 15804  0041BC  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 15805  0041C0  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 15806  0041C4  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 15807  0041C8  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 15808  0041CC  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 15809  0041D0  ECD3  F023         	call	i2___ftpack	;wreg free
 15810  0041D4  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 15811  0041D8  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 15812  0041DC  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 15813  0041E0  0012               	return	
 15814  0041E2                     __end_ofi2___ftmul:
 15815                           	opt stack 0
 15816                           pclatu	equ	0xFFB
 15817                           pclath	equ	0xFFA
 15818                           tblptru	equ	0xFF8
 15819                           tblptrh	equ	0xFF7
 15820                           tblptrl	equ	0xFF6
 15821                           tablat	equ	0xFF5
 15822                           prodh	equ	0xFF4
 15823                           prodl	equ	0xFF3
 15824                           intcon	equ	0xFF2
 15825                           intcon3	equ	0xFF0
 15826                           postinc0	equ	0xFEE
 15827                           fsr0h	equ	0xFEA
 15828                           fsr0l	equ	0xFE9
 15829                           wreg	equ	0xFE8
 15830                           postdec1	equ	0xFE5
 15831                           fsr1h	equ	0xFE2
 15832                           fsr1l	equ	0xFE1
 15833                           indf2	equ	0xFDF
 15834                           postinc2	equ	0xFDE
 15835                           postdec2	equ	0xFDD
 15836                           fsr2h	equ	0xFDA
 15837                           fsr2l	equ	0xFD9
 15838                           status	equ	0xFD8
 15839                           
 15840 ;; *************** function i2___awdiv *****************
 15841 ;; Defined at:
 15842 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 15843 ;; Parameters:    Size  Location     Type
 15844 ;;  dividend        2    6[COMRAM] int 
 15845 ;;  divisor         2    8[COMRAM] int 
 15846 ;; Auto vars:     Size  Location     Type
 15847 ;;  __awdiv         2   12[COMRAM] int 
 15848 ;;  __awdiv         1   11[COMRAM] unsigned char 
 15849 ;;  __awdiv         1   10[COMRAM] unsigned char 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  2    6[COMRAM] int 
 15852 ;; Registers used:
 15853 ;;		wreg, status,2, status,0
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15859 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;Total ram usage:        8 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; This function calls:
 15866 ;;		Nothing
 15867 ;; This function is called by:
 15868 ;;		i2_fround
 15869 ;;		i2_scale
 15870 ;;		i2_printf
 15871 ;; This function uses a non-reentrant model
 15872 ;;
 15873                           
 15874                           	psect	text52
 15875  004B4C                     __ptext52:
 15876                           	opt stack 0
 15877  004B4C                     i2___awdiv:
 15878                           	opt stack 21
 15879                           
 15880                           ;incstack = 0
 15881  004B4C  0E00               	movlw	0
 15882  004B4E  6E0C               	movwf	i2___awdiv@sign,c
 15883  004B50  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 15884  004B52  D006               	goto	i2l5125
 15885  004B54  6C09               	negf	i2___awdiv@divisor,c
 15886  004B56  1E0A               	comf	i2___awdiv@divisor+1,f,c
 15887  004B58  B0D8               	btfsc	status,0,c
 15888  004B5A  2A0A               	incf	i2___awdiv@divisor+1,f,c
 15889  004B5C  0E01               	movlw	1
 15890  004B5E  6E0C               	movwf	i2___awdiv@sign,c
 15891  004B60                     i2l5125:
 15892  004B60  AE08               	btfss	i2___awdiv@dividend+1,7,c
 15893  004B62  D006               	goto	i2l5131
 15894  004B64  6C07               	negf	i2___awdiv@dividend,c
 15895  004B66  1E08               	comf	i2___awdiv@dividend+1,f,c
 15896  004B68  B0D8               	btfsc	status,0,c
 15897  004B6A  2A08               	incf	i2___awdiv@dividend+1,f,c
 15898  004B6C  0E01               	movlw	1
 15899  004B6E  1A0C               	xorwf	i2___awdiv@sign,f,c
 15900  004B70                     i2l5131:
 15901  004B70  0E00               	movlw	0
 15902  004B72  6E0E               	movwf	i2___awdiv@quotient+1,c
 15903  004B74  0E00               	movlw	0
 15904  004B76  6E0D               	movwf	i2___awdiv@quotient,c
 15905  004B78  5009               	movf	i2___awdiv@divisor,w,c
 15906  004B7A  100A               	iorwf	i2___awdiv@divisor+1,w,c
 15907  004B7C  B4D8               	btfsc	status,2,c
 15908  004B7E  D01C               	goto	i2l5153
 15909  004B80  0E01               	movlw	1
 15910  004B82  6E0B               	movwf	i2___awdiv@counter,c
 15911  004B84  D004               	goto	i2l5139
 15912  004B86                     i2l5137:
 15913  004B86  90D8               	bcf	status,0,c
 15914  004B88  3609               	rlcf	i2___awdiv@divisor,f,c
 15915  004B8A  360A               	rlcf	i2___awdiv@divisor+1,f,c
 15916  004B8C  2A0B               	incf	i2___awdiv@counter,f,c
 15917  004B8E                     i2l5139:
 15918  004B8E  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 15919  004B90  D7FA               	goto	i2l5137
 15920  004B92                     i2l5141:
 15921  004B92  90D8               	bcf	status,0,c
 15922  004B94  360D               	rlcf	i2___awdiv@quotient,f,c
 15923  004B96  360E               	rlcf	i2___awdiv@quotient+1,f,c
 15924  004B98  5009               	movf	i2___awdiv@divisor,w,c
 15925  004B9A  5C07               	subwf	i2___awdiv@dividend,w,c
 15926  004B9C  500A               	movf	i2___awdiv@divisor+1,w,c
 15927  004B9E  5808               	subwfb	i2___awdiv@dividend+1,w,c
 15928  004BA0  A0D8               	btfss	status,0,c
 15929  004BA2  D005               	goto	i2l5149
 15930  004BA4  5009               	movf	i2___awdiv@divisor,w,c
 15931  004BA6  5E07               	subwf	i2___awdiv@dividend,f,c
 15932  004BA8  500A               	movf	i2___awdiv@divisor+1,w,c
 15933  004BAA  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 15934  004BAC  800D               	bsf	i2___awdiv@quotient,0,c
 15935  004BAE                     i2l5149:
 15936  004BAE  90D8               	bcf	status,0,c
 15937  004BB0  320A               	rrcf	i2___awdiv@divisor+1,f,c
 15938  004BB2  3209               	rrcf	i2___awdiv@divisor,f,c
 15939  004BB4  2E0B               	decfsz	i2___awdiv@counter,f,c
 15940  004BB6  D7ED               	goto	i2l5141
 15941  004BB8                     i2l5153:
 15942  004BB8  500C               	movf	i2___awdiv@sign,w,c
 15943  004BBA  B4D8               	btfsc	status,2,c
 15944  004BBC  D004               	goto	i2l5157
 15945  004BBE  6C0D               	negf	i2___awdiv@quotient,c
 15946  004BC0  1E0E               	comf	i2___awdiv@quotient+1,f,c
 15947  004BC2  B0D8               	btfsc	status,0,c
 15948  004BC4  2A0E               	incf	i2___awdiv@quotient+1,f,c
 15949  004BC6                     i2l5157:
 15950  004BC6  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 15951  004BCA  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 15952  004BCE  0012               	return	
 15953  004BD0                     __end_ofi2___awdiv:
 15954                           	opt stack 0
 15955                           pclatu	equ	0xFFB
 15956                           pclath	equ	0xFFA
 15957                           tblptru	equ	0xFF8
 15958                           tblptrh	equ	0xFF7
 15959                           tblptrl	equ	0xFF6
 15960                           tablat	equ	0xFF5
 15961                           prodh	equ	0xFF4
 15962                           prodl	equ	0xFF3
 15963                           intcon	equ	0xFF2
 15964                           intcon3	equ	0xFF0
 15965                           postinc0	equ	0xFEE
 15966                           fsr0h	equ	0xFEA
 15967                           fsr0l	equ	0xFE9
 15968                           wreg	equ	0xFE8
 15969                           postdec1	equ	0xFE5
 15970                           fsr1h	equ	0xFE2
 15971                           fsr1l	equ	0xFE1
 15972                           indf2	equ	0xFDF
 15973                           postinc2	equ	0xFDE
 15974                           postdec2	equ	0xFDD
 15975                           fsr2h	equ	0xFDA
 15976                           fsr2l	equ	0xFD9
 15977                           status	equ	0xFD8
 15978                           
 15979 ;; *************** function i2__tdiv_to_l_ *****************
 15980 ;; Defined at:
 15981 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 15982 ;; Parameters:    Size  Location     Type
 15983 ;;  f1              3    0[COMRAM] float 
 15984 ;;  f2              3    3[COMRAM] float 
 15985 ;; Auto vars:     Size  Location     Type
 15986 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 15987 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 15988 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 15989 ;; Return value:  Size  Location     Type
 15990 ;;                  4    0[COMRAM] unsigned long 
 15991 ;; Registers used:
 15992 ;;		wreg, status,2, status,0
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15998 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15999 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16000 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16001 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16002 ;;Total ram usage:       15 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; This function calls:
 16005 ;;		Nothing
 16006 ;; This function is called by:
 16007 ;;		i2_printf
 16008 ;; This function uses a non-reentrant model
 16009 ;;
 16010                           
 16011                           	psect	text53
 16012  003934                     __ptext53:
 16013                           	opt stack 0
 16014  003934                     i2__tdiv_to_l_:
 16015                           	opt stack 22
 16016                           
 16017                           ;incstack = 0
 16018  003934  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 16019  003938  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 16020  00393A  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 16021  00393C  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 16022  00393E  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 16023  003940  E301               	bnc	u646_41
 16024  003942  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 16025  003944                     u646_41:
 16026  003944  5007               	movf	??i2__tdiv_to_l_,w,c
 16027  003946  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 16028  003948  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 16029  00394A  A4D8               	btfss	status,2,c
 16030  00394C  D009               	goto	i2l5967
 16031  00394E  0E00               	movlw	0
 16032  003950  6E01               	movwf	?i2__tdiv_to_l_,c
 16033  003952  0E00               	movlw	0
 16034  003954  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16035  003956  0E00               	movlw	0
 16036  003958  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16037  00395A  0E00               	movlw	0
 16038  00395C  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16039  00395E  0012               	return	
 16040  003960                     i2l5967:
 16041  003960  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 16042  003964  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 16043  003966  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 16044  003968  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 16045  00396A  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 16046  00396C  E301               	bnc	u648_41
 16047  00396E  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 16048  003970                     u648_41:
 16049  003970  5007               	movf	??i2__tdiv_to_l_,w,c
 16050  003972  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 16051  003974  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 16052  003976  A4D8               	btfss	status,2,c
 16053  003978  D009               	goto	i2l5973
 16054  00397A  0E00               	movlw	0
 16055  00397C  6E01               	movwf	?i2__tdiv_to_l_,c
 16056  00397E  0E00               	movlw	0
 16057  003980  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16058  003982  0E00               	movlw	0
 16059  003984  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16060  003986  0E00               	movlw	0
 16061  003988  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16062  00398A  0012               	return	
 16063  00398C                     i2l5973:
 16064  00398C  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 16065  00398E  0EFF               	movlw	255
 16066  003990  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 16067  003992  0EFF               	movlw	255
 16068  003994  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 16069  003996  0E00               	movlw	0
 16070  003998  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 16071  00399A  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 16072  00399C  0EFF               	movlw	255
 16073  00399E  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 16074  0039A0  0EFF               	movlw	255
 16075  0039A2  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 16076  0039A4  0E00               	movlw	0
 16077  0039A6  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 16078  0039A8  0E00               	movlw	0
 16079  0039AA  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 16080  0039AC  0E00               	movlw	0
 16081  0039AE  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 16082  0039B0  0E00               	movlw	0
 16083  0039B2  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 16084  0039B4  0E00               	movlw	0
 16085  0039B6  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 16086  0039B8  0E7F               	movlw	127
 16087  0039BA  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 16088  0039BC  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 16089  0039BE  0F98               	addlw	152
 16090  0039C0  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 16091  0039C2  0E18               	movlw	24
 16092  0039C4  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 16093  0039C6                     i2l1093:
 16094  0039C6  90D8               	bcf	status,0,c
 16095  0039C8  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 16096  0039CA  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 16097  0039CC  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 16098  0039CE  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 16099  0039D0  5004               	movf	i2__tdiv_to_l_@f2,w,c
 16100  0039D2  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 16101  0039D4  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 16102  0039D6  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 16103  0039D8  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 16104  0039DA  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 16105  0039DC  A0D8               	btfss	status,0,c
 16106  0039DE  D007               	goto	i2l1094
 16107  0039E0  5004               	movf	i2__tdiv_to_l_@f2,w,c
 16108  0039E2  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 16109  0039E4  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 16110  0039E6  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 16111  0039E8  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 16112  0039EA  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 16113  0039EC  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 16114  0039EE                     i2l1094:
 16115  0039EE  90D8               	bcf	status,0,c
 16116  0039F0  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 16117  0039F2  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 16118  0039F4  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 16119  0039F6  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 16120  0039F8  D7E6               	goto	i2l1093
 16121  0039FA  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 16122  0039FC  D016               	goto	i2l6007
 16123  0039FE  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 16124  003A00  0A80               	xorlw	128
 16125  003A02  0F97               	addlw	151
 16126  003A04  B0D8               	btfsc	status,0,c
 16127  003A06  D009               	goto	i2l6003
 16128  003A08  0E00               	movlw	0
 16129  003A0A  6E01               	movwf	?i2__tdiv_to_l_,c
 16130  003A0C  0E00               	movlw	0
 16131  003A0E  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16132  003A10  0E00               	movlw	0
 16133  003A12  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16134  003A14  0E00               	movlw	0
 16135  003A16  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16136  003A18  0012               	return	
 16137  003A1A                     i2l6003:
 16138  003A1A  90D8               	bcf	status,0,c
 16139  003A1C  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 16140  003A1E  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 16141  003A20  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 16142  003A22  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 16143  003A24  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 16144  003A26  D7F9               	goto	i2l6003
 16145  003A28  D015               	goto	i2l1100
 16146  003A2A                     i2l6007:
 16147  003A2A  0E17               	movlw	23
 16148  003A2C  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 16149  003A2E  D00F               	goto	i2l6015
 16150  003A30  0E00               	movlw	0
 16151  003A32  6E01               	movwf	?i2__tdiv_to_l_,c
 16152  003A34  0E00               	movlw	0
 16153  003A36  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16154  003A38  0E00               	movlw	0
 16155  003A3A  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16156  003A3C  0E00               	movlw	0
 16157  003A3E  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16158  003A40  0012               	return	
 16159  003A42                     i2l6013:
 16160  003A42  90D8               	bcf	status,0,c
 16161  003A44  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 16162  003A46  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 16163  003A48  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 16164  003A4A  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 16165  003A4C  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 16166  003A4E                     i2l6015:
 16167  003A4E  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 16168  003A50  A4D8               	btfss	status,2,c
 16169  003A52  D7F7               	goto	i2l6013
 16170  003A54                     i2l1100:
 16171  003A54  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 16172  003A58  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 16173  003A5C  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 16174  003A60  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 16175  003A64  0012               	return		;funcret
 16176  003A66                     __end_ofi2__tdiv_to_l_:
 16177                           	opt stack 0
 16178                           pclatu	equ	0xFFB
 16179                           pclath	equ	0xFFA
 16180                           tblptru	equ	0xFF8
 16181                           tblptrh	equ	0xFF7
 16182                           tblptrl	equ	0xFF6
 16183                           tablat	equ	0xFF5
 16184                           prodh	equ	0xFF4
 16185                           prodl	equ	0xFF3
 16186                           intcon	equ	0xFF2
 16187                           intcon3	equ	0xFF0
 16188                           postinc0	equ	0xFEE
 16189                           fsr0h	equ	0xFEA
 16190                           fsr0l	equ	0xFE9
 16191                           wreg	equ	0xFE8
 16192                           postdec1	equ	0xFE5
 16193                           fsr1h	equ	0xFE2
 16194                           fsr1l	equ	0xFE1
 16195                           indf2	equ	0xFDF
 16196                           postinc2	equ	0xFDE
 16197                           postdec2	equ	0xFDD
 16198                           fsr2h	equ	0xFDA
 16199                           fsr2l	equ	0xFD9
 16200                           status	equ	0xFD8
 16201                           
 16202 ;; *************** function i2__div_to_l_ *****************
 16203 ;; Defined at:
 16204 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 16205 ;; Parameters:    Size  Location     Type
 16206 ;;  f1              3    0[COMRAM] unsigned long 
 16207 ;;  f2              3    3[COMRAM] unsigned long 
 16208 ;; Auto vars:     Size  Location     Type
 16209 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 16210 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 16211 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 16212 ;; Return value:  Size  Location     Type
 16213 ;;                  4    0[COMRAM] unsigned long 
 16214 ;; Registers used:
 16215 ;;		wreg, status,2, status,0
 16216 ;; Tracked objects:
 16217 ;;		On entry : 0/0
 16218 ;;		On exit  : 0/0
 16219 ;;		Unchanged: 0/0
 16220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16221 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16222 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16224 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16225 ;;Total ram usage:       12 bytes
 16226 ;; Hardware stack levels used:    1
 16227 ;; This function calls:
 16228 ;;		Nothing
 16229 ;; This function is called by:
 16230 ;;		i2_printf
 16231 ;; This function uses a non-reentrant model
 16232 ;;
 16233                           
 16234                           	psect	text54
 16235  003B96                     __ptext54:
 16236                           	opt stack 0
 16237  003B96                     i2__div_to_l_:
 16238                           	opt stack 22
 16239                           
 16240                           ;incstack = 0
 16241  003B96  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 16242  003B98  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 16243  003B9A  6E0C               	movwf	i2__div_to_l_@exp1,c
 16244  003B9C  500C               	movf	i2__div_to_l_@exp1,w,c
 16245  003B9E  A4D8               	btfss	status,2,c
 16246  003BA0  D009               	goto	i2l5907
 16247  003BA2  0E00               	movlw	0
 16248  003BA4  6E01               	movwf	?i2__div_to_l_,c
 16249  003BA6  0E00               	movlw	0
 16250  003BA8  6E02               	movwf	?i2__div_to_l_+1,c
 16251  003BAA  0E00               	movlw	0
 16252  003BAC  6E03               	movwf	?i2__div_to_l_+2,c
 16253  003BAE  0E00               	movlw	0
 16254  003BB0  6E04               	movwf	?i2__div_to_l_+3,c
 16255  003BB2  0012               	return	
 16256  003BB4                     i2l5907:
 16257  003BB4  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 16258  003BB6  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 16259  003BB8  6E0B               	movwf	i2__div_to_l_@cntr,c
 16260  003BBA  500B               	movf	i2__div_to_l_@cntr,w,c
 16261  003BBC  A4D8               	btfss	status,2,c
 16262  003BBE  D009               	goto	i2l5913
 16263  003BC0  0E00               	movlw	0
 16264  003BC2  6E01               	movwf	?i2__div_to_l_,c
 16265  003BC4  0E00               	movlw	0
 16266  003BC6  6E02               	movwf	?i2__div_to_l_+1,c
 16267  003BC8  0E00               	movlw	0
 16268  003BCA  6E03               	movwf	?i2__div_to_l_+2,c
 16269  003BCC  0E00               	movlw	0
 16270  003BCE  6E04               	movwf	?i2__div_to_l_+3,c
 16271  003BD0  0012               	return	
 16272  003BD2                     i2l5913:
 16273  003BD2  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 16274  003BD4  0EFF               	movlw	255
 16275  003BD6  1601               	andwf	i2__div_to_l_@f1,f,c
 16276  003BD8  0EFF               	movlw	255
 16277  003BDA  1602               	andwf	i2__div_to_l_@f1+1,f,c
 16278  003BDC  0EFF               	movlw	255
 16279  003BDE  1603               	andwf	i2__div_to_l_@f1+2,f,c
 16280  003BE0  0E00               	movlw	0
 16281  003BE2  1604               	andwf	i2__div_to_l_@f1+3,f,c
 16282  003BE4  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 16283  003BE6  0EFF               	movlw	255
 16284  003BE8  1604               	andwf	i2__div_to_l_@f2,f,c
 16285  003BEA  0EFF               	movlw	255
 16286  003BEC  1605               	andwf	i2__div_to_l_@f2+1,f,c
 16287  003BEE  0EFF               	movlw	255
 16288  003BF0  1606               	andwf	i2__div_to_l_@f2+2,f,c
 16289  003BF2  0E00               	movlw	0
 16290  003BF4  1607               	andwf	i2__div_to_l_@f2+3,f,c
 16291  003BF6  0E00               	movlw	0
 16292  003BF8  6E07               	movwf	i2__div_to_l_@quot,c
 16293  003BFA  0E00               	movlw	0
 16294  003BFC  6E08               	movwf	i2__div_to_l_@quot+1,c
 16295  003BFE  0E00               	movlw	0
 16296  003C00  6E09               	movwf	i2__div_to_l_@quot+2,c
 16297  003C02  0E00               	movlw	0
 16298  003C04  6E0A               	movwf	i2__div_to_l_@quot+3,c
 16299  003C06  0E7F               	movlw	127
 16300  003C08  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 16301  003C0A  500B               	movf	i2__div_to_l_@cntr,w,c
 16302  003C0C  0FA0               	addlw	160
 16303  003C0E  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 16304  003C10  0E20               	movlw	32
 16305  003C12  6E0B               	movwf	i2__div_to_l_@cntr,c
 16306  003C14                     i2l5927:
 16307  003C14  90D8               	bcf	status,0,c
 16308  003C16  3607               	rlcf	i2__div_to_l_@quot,f,c
 16309  003C18  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 16310  003C1A  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 16311  003C1C  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 16312  003C1E  5004               	movf	i2__div_to_l_@f2,w,c
 16313  003C20  5C01               	subwf	i2__div_to_l_@f1,w,c
 16314  003C22  5005               	movf	i2__div_to_l_@f2+1,w,c
 16315  003C24  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 16316  003C26  5006               	movf	i2__div_to_l_@f2+2,w,c
 16317  003C28  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 16318  003C2A  5007               	movf	i2__div_to_l_@f2+3,w,c
 16319  003C2C  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 16320  003C2E  A0D8               	btfss	status,0,c
 16321  003C30  D009               	goto	i2l5935
 16322  003C32  5004               	movf	i2__div_to_l_@f2,w,c
 16323  003C34  5E01               	subwf	i2__div_to_l_@f1,f,c
 16324  003C36  5005               	movf	i2__div_to_l_@f2+1,w,c
 16325  003C38  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 16326  003C3A  5006               	movf	i2__div_to_l_@f2+2,w,c
 16327  003C3C  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 16328  003C3E  5007               	movf	i2__div_to_l_@f2+3,w,c
 16329  003C40  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 16330  003C42  8007               	bsf	i2__div_to_l_@quot,0,c
 16331  003C44                     i2l5935:
 16332  003C44  90D8               	bcf	status,0,c
 16333  003C46  3601               	rlcf	i2__div_to_l_@f1,f,c
 16334  003C48  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 16335  003C4A  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 16336  003C4C  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 16337  003C4E  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 16338  003C50  D7E1               	goto	i2l5927
 16339  003C52  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 16340  003C54  D016               	goto	i2l5951
 16341  003C56  500C               	movf	i2__div_to_l_@exp1,w,c
 16342  003C58  0A80               	xorlw	128
 16343  003C5A  0F9F               	addlw	159
 16344  003C5C  B0D8               	btfsc	status,0,c
 16345  003C5E  D009               	goto	i2l5947
 16346  003C60  0E00               	movlw	0
 16347  003C62  6E01               	movwf	?i2__div_to_l_,c
 16348  003C64  0E00               	movlw	0
 16349  003C66  6E02               	movwf	?i2__div_to_l_+1,c
 16350  003C68  0E00               	movlw	0
 16351  003C6A  6E03               	movwf	?i2__div_to_l_+2,c
 16352  003C6C  0E00               	movlw	0
 16353  003C6E  6E04               	movwf	?i2__div_to_l_+3,c
 16354  003C70  0012               	return	
 16355  003C72                     i2l5947:
 16356  003C72  90D8               	bcf	status,0,c
 16357  003C74  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 16358  003C76  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 16359  003C78  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 16360  003C7A  3207               	rrcf	i2__div_to_l_@quot,f,c
 16361  003C7C  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 16362  003C7E  D7F9               	goto	i2l5947
 16363  003C80  D015               	goto	i2l996
 16364  003C82                     i2l5951:
 16365  003C82  0E1F               	movlw	31
 16366  003C84  640C               	cpfsgt	i2__div_to_l_@exp1,c
 16367  003C86  D00F               	goto	i2l5959
 16368  003C88  0E00               	movlw	0
 16369  003C8A  6E01               	movwf	?i2__div_to_l_,c
 16370  003C8C  0E00               	movlw	0
 16371  003C8E  6E02               	movwf	?i2__div_to_l_+1,c
 16372  003C90  0E00               	movlw	0
 16373  003C92  6E03               	movwf	?i2__div_to_l_+2,c
 16374  003C94  0E00               	movlw	0
 16375  003C96  6E04               	movwf	?i2__div_to_l_+3,c
 16376  003C98  0012               	return	
 16377  003C9A                     i2l5957:
 16378  003C9A  90D8               	bcf	status,0,c
 16379  003C9C  3607               	rlcf	i2__div_to_l_@quot,f,c
 16380  003C9E  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 16381  003CA0  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 16382  003CA2  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 16383  003CA4  060C               	decf	i2__div_to_l_@exp1,f,c
 16384  003CA6                     i2l5959:
 16385  003CA6  500C               	movf	i2__div_to_l_@exp1,w,c
 16386  003CA8  A4D8               	btfss	status,2,c
 16387  003CAA  D7F7               	goto	i2l5957
 16388  003CAC                     i2l996:
 16389  003CAC  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 16390  003CB0  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 16391  003CB4  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 16392  003CB8  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 16393  003CBC  0012               	return		;funcret
 16394  003CBE                     __end_ofi2__div_to_l_:
 16395                           	opt stack 0
 16396                           pclatu	equ	0xFFB
 16397                           pclath	equ	0xFFA
 16398                           tblptru	equ	0xFF8
 16399                           tblptrh	equ	0xFF7
 16400                           tblptrl	equ	0xFF6
 16401                           tablat	equ	0xFF5
 16402                           prodh	equ	0xFF4
 16403                           prodl	equ	0xFF3
 16404                           intcon	equ	0xFF2
 16405                           intcon3	equ	0xFF0
 16406                           postinc0	equ	0xFEE
 16407                           fsr0h	equ	0xFEA
 16408                           fsr0l	equ	0xFE9
 16409                           wreg	equ	0xFE8
 16410                           postdec1	equ	0xFE5
 16411                           fsr1h	equ	0xFE2
 16412                           fsr1l	equ	0xFE1
 16413                           indf2	equ	0xFDF
 16414                           postinc2	equ	0xFDE
 16415                           postdec2	equ	0xFDD
 16416                           fsr2h	equ	0xFDA
 16417                           fsr2l	equ	0xFD9
 16418                           status	equ	0xFD8
 16419                           
 16420 ;; *************** function i2___lltoft *****************
 16421 ;; Defined at:
 16422 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 16423 ;; Parameters:    Size  Location     Type
 16424 ;;  c               4    8[COMRAM] unsigned long 
 16425 ;; Auto vars:     Size  Location     Type
 16426 ;;  __lltoft        1   16[COMRAM] unsigned char 
 16427 ;; Return value:  Size  Location     Type
 16428 ;;                  3    8[COMRAM] float 
 16429 ;; Registers used:
 16430 ;;		wreg, status,2, status,0, cstack
 16431 ;; Tracked objects:
 16432 ;;		On entry : 0/0
 16433 ;;		On exit  : 0/0
 16434 ;;		Unchanged: 0/0
 16435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16438 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16439 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16440 ;;Total ram usage:        9 bytes
 16441 ;; Hardware stack levels used:    1
 16442 ;; Hardware stack levels required when called:    1
 16443 ;; This function calls:
 16444 ;;		i2___ftpack
 16445 ;; This function is called by:
 16446 ;;		i2_printf
 16447 ;; This function uses a non-reentrant model
 16448 ;;
 16449                           
 16450                           	psect	text55
 16451  004E82                     __ptext55:
 16452                           	opt stack 0
 16453  004E82                     i2___lltoft:
 16454                           	opt stack 21
 16455                           
 16456                           ;incstack = 0
 16457  004E82  0E8E               	movlw	142
 16458  004E84  6E11               	movwf	i2___lltoft@exp,c
 16459  004E86  D006               	goto	i2l6147
 16460  004E88                     i2l6145:
 16461  004E88  90D8               	bcf	status,0,c
 16462  004E8A  320C               	rrcf	i2___lltoft@c+3,f,c
 16463  004E8C  320B               	rrcf	i2___lltoft@c+2,f,c
 16464  004E8E  320A               	rrcf	i2___lltoft@c+1,f,c
 16465  004E90  3209               	rrcf	i2___lltoft@c,f,c
 16466  004E92  2A11               	incf	i2___lltoft@exp,f,c
 16467  004E94                     i2l6147:
 16468  004E94  0E00               	movlw	0
 16469  004E96  1409               	andwf	i2___lltoft@c,w,c
 16470  004E98  6E0D               	movwf	??i2___lltoft& (0+255),c
 16471  004E9A  0E00               	movlw	0
 16472  004E9C  140A               	andwf	i2___lltoft@c+1,w,c
 16473  004E9E  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 16474  004EA0  0E00               	movlw	0
 16475  004EA2  140B               	andwf	i2___lltoft@c+2,w,c
 16476  004EA4  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 16477  004EA6  0EFF               	movlw	255
 16478  004EA8  140C               	andwf	i2___lltoft@c+3,w,c
 16479  004EAA  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 16480  004EAC  500D               	movf	??i2___lltoft,w,c
 16481  004EAE  100E               	iorwf	??i2___lltoft+1,w,c
 16482  004EB0  100F               	iorwf	??i2___lltoft+2,w,c
 16483  004EB2  1010               	iorwf	??i2___lltoft+3,w,c
 16484  004EB4  A4D8               	btfss	status,2,c
 16485  004EB6  D7E8               	goto	i2l6145
 16486  004EB8  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 16487  004EBC  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 16488  004EC0  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 16489  004EC4  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 16490  004EC8  0E00               	movlw	0
 16491  004ECA  6E05               	movwf	i2___ftpack@sign,c
 16492  004ECC  ECD3  F023         	call	i2___ftpack	;wreg free
 16493  004ED0  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 16494  004ED4  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 16495  004ED8  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 16496  004EDC  0012               	return	
 16497  004EDE                     __end_ofi2___lltoft:
 16498                           	opt stack 0
 16499                           pclatu	equ	0xFFB
 16500                           pclath	equ	0xFFA
 16501                           tblptru	equ	0xFF8
 16502                           tblptrh	equ	0xFF7
 16503                           tblptrl	equ	0xFF6
 16504                           tablat	equ	0xFF5
 16505                           prodh	equ	0xFF4
 16506                           prodl	equ	0xFF3
 16507                           intcon	equ	0xFF2
 16508                           intcon3	equ	0xFF0
 16509                           postinc0	equ	0xFEE
 16510                           fsr0h	equ	0xFEA
 16511                           fsr0l	equ	0xFE9
 16512                           wreg	equ	0xFE8
 16513                           postdec1	equ	0xFE5
 16514                           fsr1h	equ	0xFE2
 16515                           fsr1l	equ	0xFE1
 16516                           indf2	equ	0xFDF
 16517                           postinc2	equ	0xFDE
 16518                           postdec2	equ	0xFDD
 16519                           fsr2h	equ	0xFDA
 16520                           fsr2l	equ	0xFD9
 16521                           status	equ	0xFD8
 16522                           
 16523 ;; *************** function i2___llmod *****************
 16524 ;; Defined at:
 16525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 16526 ;; Parameters:    Size  Location     Type
 16527 ;;  dividend        4   13[COMRAM] unsigned long 
 16528 ;;  divisor         4   17[COMRAM] unsigned long 
 16529 ;; Auto vars:     Size  Location     Type
 16530 ;;  __llmod         1   21[COMRAM] unsigned char 
 16531 ;; Return value:  Size  Location     Type
 16532 ;;                  4   13[COMRAM] unsigned long 
 16533 ;; Registers used:
 16534 ;;		wreg, status,2, status,0
 16535 ;; Tracked objects:
 16536 ;;		On entry : 0/0
 16537 ;;		On exit  : 0/0
 16538 ;;		Unchanged: 0/0
 16539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16540 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16543 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16544 ;;Total ram usage:        9 bytes
 16545 ;; Hardware stack levels used:    1
 16546 ;; This function calls:
 16547 ;;		Nothing
 16548 ;; This function is called by:
 16549 ;;		i2_printf
 16550 ;; This function uses a non-reentrant model
 16551 ;;
 16552                           
 16553                           	psect	text56
 16554  004DB6                     __ptext56:
 16555                           	opt stack 0
 16556  004DB6                     i2___llmod:
 16557                           	opt stack 22
 16558                           
 16559                           ;incstack = 0
 16560  004DB6  5012               	movf	i2___llmod@divisor,w,c
 16561  004DB8  1013               	iorwf	i2___llmod@divisor+1,w,c
 16562  004DBA  1014               	iorwf	i2___llmod@divisor+2,w,c
 16563  004DBC  1015               	iorwf	i2___llmod@divisor+3,w,c
 16564  004DBE  B4D8               	btfsc	status,2,c
 16565  004DC0  D024               	goto	i2l1185
 16566  004DC2  0E01               	movlw	1
 16567  004DC4  6E16               	movwf	i2___llmod@counter,c
 16568  004DC6  D006               	goto	i2l6133
 16569  004DC8                     i2l6131:
 16570  004DC8  90D8               	bcf	status,0,c
 16571  004DCA  3612               	rlcf	i2___llmod@divisor,f,c
 16572  004DCC  3613               	rlcf	i2___llmod@divisor+1,f,c
 16573  004DCE  3614               	rlcf	i2___llmod@divisor+2,f,c
 16574  004DD0  3615               	rlcf	i2___llmod@divisor+3,f,c
 16575  004DD2  2A16               	incf	i2___llmod@counter,f,c
 16576  004DD4                     i2l6133:
 16577  004DD4  AE15               	btfss	i2___llmod@divisor+3,7,c
 16578  004DD6  D7F8               	goto	i2l6131
 16579  004DD8                     i2l6135:
 16580  004DD8  5012               	movf	i2___llmod@divisor,w,c
 16581  004DDA  5C0E               	subwf	i2___llmod@dividend,w,c
 16582  004DDC  5013               	movf	i2___llmod@divisor+1,w,c
 16583  004DDE  580F               	subwfb	i2___llmod@dividend+1,w,c
 16584  004DE0  5014               	movf	i2___llmod@divisor+2,w,c
 16585  004DE2  5810               	subwfb	i2___llmod@dividend+2,w,c
 16586  004DE4  5015               	movf	i2___llmod@divisor+3,w,c
 16587  004DE6  5811               	subwfb	i2___llmod@dividend+3,w,c
 16588  004DE8  A0D8               	btfss	status,0,c
 16589  004DEA  D008               	goto	i2l6139
 16590  004DEC  5012               	movf	i2___llmod@divisor,w,c
 16591  004DEE  5E0E               	subwf	i2___llmod@dividend,f,c
 16592  004DF0  5013               	movf	i2___llmod@divisor+1,w,c
 16593  004DF2  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 16594  004DF4  5014               	movf	i2___llmod@divisor+2,w,c
 16595  004DF6  5A10               	subwfb	i2___llmod@dividend+2,f,c
 16596  004DF8  5015               	movf	i2___llmod@divisor+3,w,c
 16597  004DFA  5A11               	subwfb	i2___llmod@dividend+3,f,c
 16598  004DFC                     i2l6139:
 16599  004DFC  90D8               	bcf	status,0,c
 16600  004DFE  3215               	rrcf	i2___llmod@divisor+3,f,c
 16601  004E00  3214               	rrcf	i2___llmod@divisor+2,f,c
 16602  004E02  3213               	rrcf	i2___llmod@divisor+1,f,c
 16603  004E04  3212               	rrcf	i2___llmod@divisor,f,c
 16604  004E06  2E16               	decfsz	i2___llmod@counter,f,c
 16605  004E08  D7E7               	goto	i2l6135
 16606  004E0A                     i2l1185:
 16607  004E0A  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 16608  004E0E  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 16609  004E12  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 16610  004E16  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 16611  004E1A  0012               	return		;funcret
 16612  004E1C                     __end_ofi2___llmod:
 16613                           	opt stack 0
 16614                           pclatu	equ	0xFFB
 16615                           pclath	equ	0xFFA
 16616                           tblptru	equ	0xFF8
 16617                           tblptrh	equ	0xFF7
 16618                           tblptrl	equ	0xFF6
 16619                           tablat	equ	0xFF5
 16620                           prodh	equ	0xFF4
 16621                           prodl	equ	0xFF3
 16622                           intcon	equ	0xFF2
 16623                           intcon3	equ	0xFF0
 16624                           postinc0	equ	0xFEE
 16625                           fsr0h	equ	0xFEA
 16626                           fsr0l	equ	0xFE9
 16627                           wreg	equ	0xFE8
 16628                           postdec1	equ	0xFE5
 16629                           fsr1h	equ	0xFE2
 16630                           fsr1l	equ	0xFE1
 16631                           indf2	equ	0xFDF
 16632                           postinc2	equ	0xFDE
 16633                           postdec2	equ	0xFDD
 16634                           fsr2h	equ	0xFDA
 16635                           fsr2l	equ	0xFD9
 16636                           status	equ	0xFD8
 16637                           
 16638 ;; *************** function i2___lldiv *****************
 16639 ;; Defined at:
 16640 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 16641 ;; Parameters:    Size  Location     Type
 16642 ;;  dividend        4    0[COMRAM] unsigned long 
 16643 ;;  divisor         4    4[COMRAM] unsigned long 
 16644 ;; Auto vars:     Size  Location     Type
 16645 ;;  __lldiv         4    8[COMRAM] unsigned long 
 16646 ;;  __lldiv         1   12[COMRAM] unsigned char 
 16647 ;; Return value:  Size  Location     Type
 16648 ;;                  4    0[COMRAM] unsigned long 
 16649 ;; Registers used:
 16650 ;;		wreg, status,2, status,0
 16651 ;; Tracked objects:
 16652 ;;		On entry : 0/0
 16653 ;;		On exit  : 0/0
 16654 ;;		Unchanged: 0/0
 16655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16656 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16657 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16659 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16660 ;;Total ram usage:       13 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; This function calls:
 16663 ;;		Nothing
 16664 ;; This function is called by:
 16665 ;;		i2_printf
 16666 ;; This function uses a non-reentrant model
 16667 ;;
 16668                           
 16669                           	psect	text57
 16670  004BD0                     __ptext57:
 16671                           	opt stack 0
 16672  004BD0                     i2___lldiv:
 16673                           	opt stack 22
 16674                           
 16675                           ;incstack = 0
 16676  004BD0  0E00               	movlw	0
 16677  004BD2  6E09               	movwf	i2___lldiv@quotient,c
 16678  004BD4  0E00               	movlw	0
 16679  004BD6  6E0A               	movwf	i2___lldiv@quotient+1,c
 16680  004BD8  0E00               	movlw	0
 16681  004BDA  6E0B               	movwf	i2___lldiv@quotient+2,c
 16682  004BDC  0E00               	movlw	0
 16683  004BDE  6E0C               	movwf	i2___lldiv@quotient+3,c
 16684  004BE0  5005               	movf	i2___lldiv@divisor,w,c
 16685  004BE2  1006               	iorwf	i2___lldiv@divisor+1,w,c
 16686  004BE4  1007               	iorwf	i2___lldiv@divisor+2,w,c
 16687  004BE6  1008               	iorwf	i2___lldiv@divisor+3,w,c
 16688  004BE8  B4D8               	btfsc	status,2,c
 16689  004BEA  D02A               	goto	i2l1175
 16690  004BEC  0E01               	movlw	1
 16691  004BEE  6E0D               	movwf	i2___lldiv@counter,c
 16692  004BF0  D006               	goto	i2l6113
 16693  004BF2                     i2l6111:
 16694  004BF2  90D8               	bcf	status,0,c
 16695  004BF4  3605               	rlcf	i2___lldiv@divisor,f,c
 16696  004BF6  3606               	rlcf	i2___lldiv@divisor+1,f,c
 16697  004BF8  3607               	rlcf	i2___lldiv@divisor+2,f,c
 16698  004BFA  3608               	rlcf	i2___lldiv@divisor+3,f,c
 16699  004BFC  2A0D               	incf	i2___lldiv@counter,f,c
 16700  004BFE                     i2l6113:
 16701  004BFE  AE08               	btfss	i2___lldiv@divisor+3,7,c
 16702  004C00  D7F8               	goto	i2l6111
 16703  004C02                     i2l6115:
 16704  004C02  90D8               	bcf	status,0,c
 16705  004C04  3609               	rlcf	i2___lldiv@quotient,f,c
 16706  004C06  360A               	rlcf	i2___lldiv@quotient+1,f,c
 16707  004C08  360B               	rlcf	i2___lldiv@quotient+2,f,c
 16708  004C0A  360C               	rlcf	i2___lldiv@quotient+3,f,c
 16709  004C0C  5005               	movf	i2___lldiv@divisor,w,c
 16710  004C0E  5C01               	subwf	i2___lldiv@dividend,w,c
 16711  004C10  5006               	movf	i2___lldiv@divisor+1,w,c
 16712  004C12  5802               	subwfb	i2___lldiv@dividend+1,w,c
 16713  004C14  5007               	movf	i2___lldiv@divisor+2,w,c
 16714  004C16  5803               	subwfb	i2___lldiv@dividend+2,w,c
 16715  004C18  5008               	movf	i2___lldiv@divisor+3,w,c
 16716  004C1A  5804               	subwfb	i2___lldiv@dividend+3,w,c
 16717  004C1C  A0D8               	btfss	status,0,c
 16718  004C1E  D009               	goto	i2l6123
 16719  004C20  5005               	movf	i2___lldiv@divisor,w,c
 16720  004C22  5E01               	subwf	i2___lldiv@dividend,f,c
 16721  004C24  5006               	movf	i2___lldiv@divisor+1,w,c
 16722  004C26  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 16723  004C28  5007               	movf	i2___lldiv@divisor+2,w,c
 16724  004C2A  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 16725  004C2C  5008               	movf	i2___lldiv@divisor+3,w,c
 16726  004C2E  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 16727  004C30  8009               	bsf	i2___lldiv@quotient,0,c
 16728  004C32                     i2l6123:
 16729  004C32  90D8               	bcf	status,0,c
 16730  004C34  3208               	rrcf	i2___lldiv@divisor+3,f,c
 16731  004C36  3207               	rrcf	i2___lldiv@divisor+2,f,c
 16732  004C38  3206               	rrcf	i2___lldiv@divisor+1,f,c
 16733  004C3A  3205               	rrcf	i2___lldiv@divisor,f,c
 16734  004C3C  2E0D               	decfsz	i2___lldiv@counter,f,c
 16735  004C3E  D7E1               	goto	i2l6115
 16736  004C40                     i2l1175:
 16737  004C40  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 16738  004C44  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 16739  004C48  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 16740  004C4C  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 16741  004C50  0012               	return		;funcret
 16742  004C52                     __end_ofi2___lldiv:
 16743                           	opt stack 0
 16744                           pclatu	equ	0xFFB
 16745                           pclath	equ	0xFFA
 16746                           tblptru	equ	0xFF8
 16747                           tblptrh	equ	0xFF7
 16748                           tblptrl	equ	0xFF6
 16749                           tablat	equ	0xFF5
 16750                           prodh	equ	0xFF4
 16751                           prodl	equ	0xFF3
 16752                           intcon	equ	0xFF2
 16753                           intcon3	equ	0xFF0
 16754                           postinc0	equ	0xFEE
 16755                           fsr0h	equ	0xFEA
 16756                           fsr0l	equ	0xFE9
 16757                           wreg	equ	0xFE8
 16758                           postdec1	equ	0xFE5
 16759                           fsr1h	equ	0xFE2
 16760                           fsr1l	equ	0xFE1
 16761                           indf2	equ	0xFDF
 16762                           postinc2	equ	0xFDE
 16763                           postdec2	equ	0xFDD
 16764                           fsr2h	equ	0xFDA
 16765                           fsr2l	equ	0xFD9
 16766                           status	equ	0xFD8
 16767                           
 16768 ;; *************** function i2___fttol *****************
 16769 ;; Defined at:
 16770 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 16771 ;; Parameters:    Size  Location     Type
 16772 ;;  f1              3   42[COMRAM] float 
 16773 ;; Auto vars:     Size  Location     Type
 16774 ;;  __fttol         4   52[COMRAM] unsigned long 
 16775 ;;  __fttol         1   56[COMRAM] unsigned char 
 16776 ;;  __fttol         1   51[COMRAM] unsigned char 
 16777 ;; Return value:  Size  Location     Type
 16778 ;;                  4   42[COMRAM] long 
 16779 ;; Registers used:
 16780 ;;		wreg, status,2, status,0
 16781 ;; Tracked objects:
 16782 ;;		On entry : 0/0
 16783 ;;		On exit  : 0/0
 16784 ;;		Unchanged: 0/0
 16785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16786 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16787 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16788 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16789 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16790 ;;Total ram usage:       15 bytes
 16791 ;; Hardware stack levels used:    1
 16792 ;; This function calls:
 16793 ;;		Nothing
 16794 ;; This function is called by:
 16795 ;;		i2_printf
 16796 ;; This function uses a non-reentrant model
 16797 ;;
 16798                           
 16799                           	psect	text58
 16800  0041E2                     __ptext58:
 16801                           	opt stack 0
 16802  0041E2                     i2___fttol:
 16803                           	opt stack 22
 16804                           
 16805                           ;incstack = 0
 16806  0041E2  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 16807  0041E6  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 16808  0041E8  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 16809  0041EA  342C               	rlcf	i2___fttol@f1+1,w,c
 16810  0041EC  362F               	rlcf	??i2___fttol& (0+255),f,c
 16811  0041EE  E301               	bnc	u660_41
 16812  0041F0  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 16813  0041F2                     u660_41:
 16814  0041F2  502F               	movf	??i2___fttol,w,c
 16815  0041F4  6E39               	movwf	i2___fttol@exp1,c
 16816  0041F6  5039               	movf	i2___fttol@exp1,w,c
 16817  0041F8  A4D8               	btfss	status,2,c
 16818  0041FA  D009               	goto	i2l6053
 16819  0041FC  0E00               	movlw	0
 16820  0041FE  6E2B               	movwf	?i2___fttol,c
 16821  004200  0E00               	movlw	0
 16822  004202  6E2C               	movwf	?i2___fttol+1,c
 16823  004204  0E00               	movlw	0
 16824  004206  6E2D               	movwf	?i2___fttol+2,c
 16825  004208  0E00               	movlw	0
 16826  00420A  6E2E               	movwf	?i2___fttol+3,c
 16827  00420C  0012               	return	
 16828  00420E                     i2l6053:
 16829  00420E  0E17               	movlw	23
 16830  004210  6E2F               	movwf	??i2___fttol& (0+255),c
 16831  004212  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 16832  004216  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 16833  00421A  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 16834  00421E  282F               	incf	??i2___fttol,w,c
 16835  004220  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 16836  004222  D004               	goto	i2u662_40
 16837  004224                     i2u662_45:
 16838  004224  90D8               	bcf	status,0,c
 16839  004226  3232               	rrcf	??i2___fttol+3,f,c
 16840  004228  3231               	rrcf	??i2___fttol+2,f,c
 16841  00422A  3230               	rrcf	??i2___fttol+1,f,c
 16842  00422C                     i2u662_40:
 16843  00422C  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 16844  00422E  D7FA               	goto	i2u662_45
 16845  004230  5030               	movf	??i2___fttol+1,w,c
 16846  004232  6E34               	movwf	i2___fttol@sign1,c
 16847  004234  8E2C               	bsf	i2___fttol@f1+1,7,c
 16848  004236  0EFF               	movlw	255
 16849  004238  162B               	andwf	i2___fttol@f1,f,c
 16850  00423A  0EFF               	movlw	255
 16851  00423C  162C               	andwf	i2___fttol@f1+1,f,c
 16852  00423E  0E00               	movlw	0
 16853  004240  162D               	andwf	i2___fttol@f1+2,f,c
 16854  004242  502B               	movf	i2___fttol@f1,w,c
 16855  004244  6E35               	movwf	i2___fttol@lval,c
 16856  004246  502C               	movf	i2___fttol@f1+1,w,c
 16857  004248  6E36               	movwf	i2___fttol@lval+1,c
 16858  00424A  502D               	movf	i2___fttol@f1+2,w,c
 16859  00424C  6E37               	movwf	i2___fttol@lval+2,c
 16860  00424E  6A38               	clrf	i2___fttol@lval+3,c
 16861  004250  0E8E               	movlw	142
 16862  004252  5E39               	subwf	i2___fttol@exp1,f,c
 16863  004254  AE39               	btfss	i2___fttol@exp1,7,c
 16864  004256  D016               	goto	i2l6075
 16865  004258  5039               	movf	i2___fttol@exp1,w,c
 16866  00425A  0A80               	xorlw	128
 16867  00425C  0F8F               	addlw	143
 16868  00425E  B0D8               	btfsc	status,0,c
 16869  004260  D009               	goto	i2l6071
 16870  004262  0E00               	movlw	0
 16871  004264  6E2B               	movwf	?i2___fttol,c
 16872  004266  0E00               	movlw	0
 16873  004268  6E2C               	movwf	?i2___fttol+1,c
 16874  00426A  0E00               	movlw	0
 16875  00426C  6E2D               	movwf	?i2___fttol+2,c
 16876  00426E  0E00               	movlw	0
 16877  004270  6E2E               	movwf	?i2___fttol+3,c
 16878  004272  0012               	return	
 16879  004274                     i2l6071:
 16880  004274  90D8               	bcf	status,0,c
 16881  004276  3238               	rrcf	i2___fttol@lval+3,f,c
 16882  004278  3237               	rrcf	i2___fttol@lval+2,f,c
 16883  00427A  3236               	rrcf	i2___fttol@lval+1,f,c
 16884  00427C  3235               	rrcf	i2___fttol@lval,f,c
 16885  00427E  3E39               	incfsz	i2___fttol@exp1,f,c
 16886  004280  D7F9               	goto	i2l6071
 16887  004282  D015               	goto	i2l6085
 16888  004284                     i2l6075:
 16889  004284  0E17               	movlw	23
 16890  004286  6439               	cpfsgt	i2___fttol@exp1,c
 16891  004288  D00F               	goto	i2l6083
 16892  00428A  0E00               	movlw	0
 16893  00428C  6E2B               	movwf	?i2___fttol,c
 16894  00428E  0E00               	movlw	0
 16895  004290  6E2C               	movwf	?i2___fttol+1,c
 16896  004292  0E00               	movlw	0
 16897  004294  6E2D               	movwf	?i2___fttol+2,c
 16898  004296  0E00               	movlw	0
 16899  004298  6E2E               	movwf	?i2___fttol+3,c
 16900  00429A  0012               	return	
 16901  00429C                     i2l6081:
 16902  00429C  90D8               	bcf	status,0,c
 16903  00429E  3635               	rlcf	i2___fttol@lval,f,c
 16904  0042A0  3636               	rlcf	i2___fttol@lval+1,f,c
 16905  0042A2  3637               	rlcf	i2___fttol@lval+2,f,c
 16906  0042A4  3638               	rlcf	i2___fttol@lval+3,f,c
 16907  0042A6  0639               	decf	i2___fttol@exp1,f,c
 16908  0042A8                     i2l6083:
 16909  0042A8  5039               	movf	i2___fttol@exp1,w,c
 16910  0042AA  A4D8               	btfss	status,2,c
 16911  0042AC  D7F7               	goto	i2l6081
 16912  0042AE                     i2l6085:
 16913  0042AE  5034               	movf	i2___fttol@sign1,w,c
 16914  0042B0  B4D8               	btfsc	status,2,c
 16915  0042B2  D008               	goto	i2l6089
 16916  0042B4  1E38               	comf	i2___fttol@lval+3,f,c
 16917  0042B6  1E37               	comf	i2___fttol@lval+2,f,c
 16918  0042B8  1E36               	comf	i2___fttol@lval+1,f,c
 16919  0042BA  6C35               	negf	i2___fttol@lval,c
 16920  0042BC  0E00               	movlw	0
 16921  0042BE  2236               	addwfc	i2___fttol@lval+1,f,c
 16922  0042C0  2237               	addwfc	i2___fttol@lval+2,f,c
 16923  0042C2  2238               	addwfc	i2___fttol@lval+3,f,c
 16924  0042C4                     i2l6089:
 16925  0042C4  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 16926  0042C8  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 16927  0042CC  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 16928  0042D0  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 16929  0042D4  0012               	return	
 16930  0042D6                     __end_ofi2___fttol:
 16931                           	opt stack 0
 16932                           pclatu	equ	0xFFB
 16933                           pclath	equ	0xFFA
 16934                           tblptru	equ	0xFF8
 16935                           tblptrh	equ	0xFF7
 16936                           tblptrl	equ	0xFF6
 16937                           tablat	equ	0xFF5
 16938                           prodh	equ	0xFF4
 16939                           prodl	equ	0xFF3
 16940                           intcon	equ	0xFF2
 16941                           intcon3	equ	0xFF0
 16942                           postinc0	equ	0xFEE
 16943                           fsr0h	equ	0xFEA
 16944                           fsr0l	equ	0xFE9
 16945                           wreg	equ	0xFE8
 16946                           postdec1	equ	0xFE5
 16947                           fsr1h	equ	0xFE2
 16948                           fsr1l	equ	0xFE1
 16949                           indf2	equ	0xFDF
 16950                           postinc2	equ	0xFDE
 16951                           postdec2	equ	0xFDD
 16952                           fsr2h	equ	0xFDA
 16953                           fsr2l	equ	0xFD9
 16954                           status	equ	0xFD8
 16955                           
 16956 ;; *************** function i2___ftsub *****************
 16957 ;; Defined at:
 16958 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 16959 ;; Parameters:    Size  Location     Type
 16960 ;;  f1              3   57[COMRAM] float 
 16961 ;;  f2              3   60[COMRAM] float 
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;		None
 16964 ;; Return value:  Size  Location     Type
 16965 ;;                  3   57[COMRAM] float 
 16966 ;; Registers used:
 16967 ;;		wreg, status,2, status,0, cstack
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16973 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16977 ;;Total ram usage:        6 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; Hardware stack levels required when called:    2
 16980 ;; This function calls:
 16981 ;;		i2___ftadd
 16982 ;; This function is called by:
 16983 ;;		i2_printf
 16984 ;; This function uses a non-reentrant model
 16985 ;;
 16986                           
 16987                           	psect	text59
 16988  00512A                     __ptext59:
 16989                           	opt stack 0
 16990  00512A                     i2___ftsub:
 16991                           	opt stack 20
 16992                           
 16993                           ;incstack = 0
 16994  00512A  503D               	movf	i2___ftsub@f2,w,c
 16995  00512C  103E               	iorwf	i2___ftsub@f2+1,w,c
 16996  00512E  103F               	iorwf	i2___ftsub@f2+2,w,c
 16997  005130  B4D8               	btfsc	status,2,c
 16998  005132  D006               	goto	i2l6043
 16999  005134  0E00               	movlw	0
 17000  005136  1A3D               	xorwf	i2___ftsub@f2,f,c
 17001  005138  0E00               	movlw	0
 17002  00513A  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 17003  00513C  0E80               	movlw	128
 17004  00513E  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 17005  005140                     i2l6043:
 17006  005140  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 17007  005144  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 17008  005148  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 17009  00514C  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 17010  005150  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 17011  005154  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 17012  005158  ECEA  F016         	call	i2___ftadd	;wreg free
 17013  00515C  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 17014  005160  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 17015  005164  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 17016  005168  0012               	return	
 17017  00516A                     __end_ofi2___ftsub:
 17018                           	opt stack 0
 17019                           pclatu	equ	0xFFB
 17020                           pclath	equ	0xFFA
 17021                           tblptru	equ	0xFF8
 17022                           tblptrh	equ	0xFF7
 17023                           tblptrl	equ	0xFF6
 17024                           tablat	equ	0xFF5
 17025                           prodh	equ	0xFF4
 17026                           prodl	equ	0xFF3
 17027                           intcon	equ	0xFF2
 17028                           intcon3	equ	0xFF0
 17029                           postinc0	equ	0xFEE
 17030                           fsr0h	equ	0xFEA
 17031                           fsr0l	equ	0xFE9
 17032                           wreg	equ	0xFE8
 17033                           postdec1	equ	0xFE5
 17034                           fsr1h	equ	0xFE2
 17035                           fsr1l	equ	0xFE1
 17036                           indf2	equ	0xFDF
 17037                           postinc2	equ	0xFDE
 17038                           postdec2	equ	0xFDD
 17039                           fsr2h	equ	0xFDA
 17040                           fsr2l	equ	0xFD9
 17041                           status	equ	0xFD8
 17042                           
 17043 ;; *************** function i2___ftadd *****************
 17044 ;; Defined at:
 17045 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 17046 ;; Parameters:    Size  Location     Type
 17047 ;;  f1              3   45[COMRAM] float 
 17048 ;;  f2              3   48[COMRAM] float 
 17049 ;; Auto vars:     Size  Location     Type
 17050 ;;  __ftadd         1   56[COMRAM] unsigned char 
 17051 ;;  __ftadd         1   55[COMRAM] unsigned char 
 17052 ;;  __ftadd         1   54[COMRAM] unsigned char 
 17053 ;; Return value:  Size  Location     Type
 17054 ;;                  3   45[COMRAM] float 
 17055 ;; Registers used:
 17056 ;;		wreg, status,2, status,0, cstack
 17057 ;; Tracked objects:
 17058 ;;		On entry : 0/0
 17059 ;;		On exit  : 0/0
 17060 ;;		Unchanged: 0/0
 17061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17062 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17063 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17064 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17065 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17066 ;;Total ram usage:       12 bytes
 17067 ;; Hardware stack levels used:    1
 17068 ;; Hardware stack levels required when called:    1
 17069 ;; This function calls:
 17070 ;;		i2___ftpack
 17071 ;; This function is called by:
 17072 ;;		i2_printf
 17073 ;;		i2___ftsub
 17074 ;; This function uses a non-reentrant model
 17075 ;;
 17076                           
 17077                           	psect	text60
 17078  002DD4                     __ptext60:
 17079                           	opt stack 0
 17080  002DD4                     i2___ftadd:
 17081                           	opt stack 20
 17082                           
 17083                           ;incstack = 0
 17084  002DD4  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 17085  002DD8  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 17086  002DDA  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 17087  002DDC  342F               	rlcf	i2___ftadd@f1+1,w,c
 17088  002DDE  3634               	rlcf	??i2___ftadd& (0+255),f,c
 17089  002DE0  E301               	bnc	u524_41
 17090  002DE2  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 17091  002DE4                     u524_41:
 17092  002DE4  5034               	movf	??i2___ftadd,w,c
 17093  002DE6  6E39               	movwf	i2___ftadd@exp1,c
 17094  002DE8  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 17095  002DEC  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 17096  002DEE  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 17097  002DF0  3432               	rlcf	i2___ftadd@f2+1,w,c
 17098  002DF2  3634               	rlcf	??i2___ftadd& (0+255),f,c
 17099  002DF4  E301               	bnc	u525_41
 17100  002DF6  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 17101  002DF8                     u525_41:
 17102  002DF8  5034               	movf	??i2___ftadd,w,c
 17103  002DFA  6E38               	movwf	i2___ftadd@exp2,c
 17104  002DFC  5039               	movf	i2___ftadd@exp1,w,c
 17105  002DFE  B4D8               	btfsc	status,2,c
 17106  002E00  D00B               	goto	i2l1051
 17107  002E02  5038               	movf	i2___ftadd@exp2,w,c
 17108  002E04  5C39               	subwf	i2___ftadd@exp1,w,c
 17109  002E06  B0D8               	btfsc	status,0,c
 17110  002E08  D00E               	goto	i2l5205
 17111  002E0A  5039               	movf	i2___ftadd@exp1,w,c
 17112  002E0C  0800               	sublw	0
 17113  002E0E  2438               	addwf	i2___ftadd@exp2,w,c
 17114  002E10  6E34               	movwf	??i2___ftadd& (0+255),c
 17115  002E12  0E18               	movlw	24
 17116  002E14  6434               	cpfsgt	??i2___ftadd,c
 17117  002E16  D007               	goto	i2l5205
 17118  002E18                     i2l1051:
 17119  002E18  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 17120  002E1C  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 17121  002E20  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 17122  002E24  0012               	return	
 17123  002E26                     i2l5205:
 17124  002E26  5038               	movf	i2___ftadd@exp2,w,c
 17125  002E28  B4D8               	btfsc	status,2,c
 17126  002E2A  D00B               	goto	i2l1055
 17127  002E2C  5039               	movf	i2___ftadd@exp1,w,c
 17128  002E2E  5C38               	subwf	i2___ftadd@exp2,w,c
 17129  002E30  B0D8               	btfsc	status,0,c
 17130  002E32  D00E               	goto	i2l5211
 17131  002E34  5038               	movf	i2___ftadd@exp2,w,c
 17132  002E36  0800               	sublw	0
 17133  002E38  2439               	addwf	i2___ftadd@exp1,w,c
 17134  002E3A  6E34               	movwf	??i2___ftadd& (0+255),c
 17135  002E3C  0E18               	movlw	24
 17136  002E3E  6434               	cpfsgt	??i2___ftadd,c
 17137  002E40  D007               	goto	i2l5211
 17138  002E42                     i2l1055:
 17139  002E42  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 17140  002E46  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 17141  002E4A  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 17142  002E4E  0012               	return	
 17143  002E50                     i2l5211:
 17144  002E50  0E06               	movlw	6
 17145  002E52  6E37               	movwf	i2___ftadd@sign,c
 17146  002E54  BE30               	btfsc	i2___ftadd@f1+2,7,c
 17147  002E56  8E37               	bsf	i2___ftadd@sign,7,c
 17148  002E58  BE33               	btfsc	i2___ftadd@f2+2,7,c
 17149  002E5A  8C37               	bsf	i2___ftadd@sign,6,c
 17150  002E5C  8E2F               	bsf	i2___ftadd@f1+1,7,c
 17151  002E5E  0EFF               	movlw	255
 17152  002E60  162E               	andwf	i2___ftadd@f1,f,c
 17153  002E62  0EFF               	movlw	255
 17154  002E64  162F               	andwf	i2___ftadd@f1+1,f,c
 17155  002E66  0E00               	movlw	0
 17156  002E68  1630               	andwf	i2___ftadd@f1+2,f,c
 17157  002E6A  8E32               	bsf	i2___ftadd@f2+1,7,c
 17158  002E6C  0EFF               	movlw	255
 17159  002E6E  1631               	andwf	i2___ftadd@f2,f,c
 17160  002E70  0EFF               	movlw	255
 17161  002E72  1632               	andwf	i2___ftadd@f2+1,f,c
 17162  002E74  0E00               	movlw	0
 17163  002E76  1633               	andwf	i2___ftadd@f2+2,f,c
 17164  002E78  5038               	movf	i2___ftadd@exp2,w,c
 17165  002E7A  5C39               	subwf	i2___ftadd@exp1,w,c
 17166  002E7C  B0D8               	btfsc	status,0,c
 17167  002E7E  D01B               	goto	i2l5237
 17168  002E80                     i2l5227:
 17169  002E80  90D8               	bcf	status,0,c
 17170  002E82  3631               	rlcf	i2___ftadd@f2,f,c
 17171  002E84  3632               	rlcf	i2___ftadd@f2+1,f,c
 17172  002E86  3633               	rlcf	i2___ftadd@f2+2,f,c
 17173  002E88  0638               	decf	i2___ftadd@exp2,f,c
 17174  002E8A  5039               	movf	i2___ftadd@exp1,w,c
 17175  002E8C  1838               	xorwf	i2___ftadd@exp2,w,c
 17176  002E8E  B4D8               	btfsc	status,2,c
 17177  002E90  D00D               	goto	i2l5235
 17178  002E92  0637               	decf	i2___ftadd@sign,f,c
 17179  002E94  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 17180  002E98  0E07               	movlw	7
 17181  002E9A  1634               	andwf	??i2___ftadd,f,c
 17182  002E9C  B4D8               	btfsc	status,2,c
 17183  002E9E  D006               	goto	i2l5235
 17184  002EA0  D7EF               	goto	i2l5227
 17185  002EA2                     i2l5233:
 17186  002EA2  90D8               	bcf	status,0,c
 17187  002EA4  3230               	rrcf	i2___ftadd@f1+2,f,c
 17188  002EA6  322F               	rrcf	i2___ftadd@f1+1,f,c
 17189  002EA8  322E               	rrcf	i2___ftadd@f1,f,c
 17190  002EAA  2A39               	incf	i2___ftadd@exp1,f,c
 17191  002EAC                     i2l5235:
 17192  002EAC  5038               	movf	i2___ftadd@exp2,w,c
 17193  002EAE  1839               	xorwf	i2___ftadd@exp1,w,c
 17194  002EB0  B4D8               	btfsc	status,2,c
 17195  002EB2  D01F               	goto	i2l1066
 17196  002EB4  D7F6               	goto	i2l5233
 17197  002EB6                     i2l5237:
 17198  002EB6  5039               	movf	i2___ftadd@exp1,w,c
 17199  002EB8  5C38               	subwf	i2___ftadd@exp2,w,c
 17200  002EBA  B0D8               	btfsc	status,0,c
 17201  002EBC  D01A               	goto	i2l1066
 17202  002EBE                     i2l5239:
 17203  002EBE  90D8               	bcf	status,0,c
 17204  002EC0  362E               	rlcf	i2___ftadd@f1,f,c
 17205  002EC2  362F               	rlcf	i2___ftadd@f1+1,f,c
 17206  002EC4  3630               	rlcf	i2___ftadd@f1+2,f,c
 17207  002EC6  0639               	decf	i2___ftadd@exp1,f,c
 17208  002EC8  5039               	movf	i2___ftadd@exp1,w,c
 17209  002ECA  1838               	xorwf	i2___ftadd@exp2,w,c
 17210  002ECC  B4D8               	btfsc	status,2,c
 17211  002ECE  D00D               	goto	i2l5247
 17212  002ED0  0637               	decf	i2___ftadd@sign,f,c
 17213  002ED2  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 17214  002ED6  0E07               	movlw	7
 17215  002ED8  1634               	andwf	??i2___ftadd,f,c
 17216  002EDA  B4D8               	btfsc	status,2,c
 17217  002EDC  D006               	goto	i2l5247
 17218  002EDE  D7EF               	goto	i2l5239
 17219  002EE0                     i2l5245:
 17220  002EE0  90D8               	bcf	status,0,c
 17221  002EE2  3233               	rrcf	i2___ftadd@f2+2,f,c
 17222  002EE4  3232               	rrcf	i2___ftadd@f2+1,f,c
 17223  002EE6  3231               	rrcf	i2___ftadd@f2,f,c
 17224  002EE8  2A38               	incf	i2___ftadd@exp2,f,c
 17225  002EEA                     i2l5247:
 17226  002EEA  5038               	movf	i2___ftadd@exp2,w,c
 17227  002EEC  1839               	xorwf	i2___ftadd@exp1,w,c
 17228  002EEE  A4D8               	btfss	status,2,c
 17229  002EF0  D7F7               	goto	i2l5245
 17230  002EF2                     i2l1066:
 17231  002EF2  AE37               	btfss	i2___ftadd@sign,7,c
 17232  002EF4  D00C               	goto	i2l1075
 17233  002EF6  0EFF               	movlw	255
 17234  002EF8  1A2E               	xorwf	i2___ftadd@f1,f,c
 17235  002EFA  0EFF               	movlw	255
 17236  002EFC  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 17237  002EFE  0EFF               	movlw	255
 17238  002F00  1A30               	xorwf	i2___ftadd@f1+2,f,c
 17239  002F02  0E01               	movlw	1
 17240  002F04  262E               	addwf	i2___ftadd@f1,f,c
 17241  002F06  0E00               	movlw	0
 17242  002F08  222F               	addwfc	i2___ftadd@f1+1,f,c
 17243  002F0A  0E00               	movlw	0
 17244  002F0C  2230               	addwfc	i2___ftadd@f1+2,f,c
 17245  002F0E                     i2l1075:
 17246  002F0E  AC37               	btfss	i2___ftadd@sign,6,c
 17247  002F10  D00C               	goto	i2l5253
 17248  002F12  0EFF               	movlw	255
 17249  002F14  1A31               	xorwf	i2___ftadd@f2,f,c
 17250  002F16  0EFF               	movlw	255
 17251  002F18  1A32               	xorwf	i2___ftadd@f2+1,f,c
 17252  002F1A  0EFF               	movlw	255
 17253  002F1C  1A33               	xorwf	i2___ftadd@f2+2,f,c
 17254  002F1E  0E01               	movlw	1
 17255  002F20  2631               	addwf	i2___ftadd@f2,f,c
 17256  002F22  0E00               	movlw	0
 17257  002F24  2232               	addwfc	i2___ftadd@f2+1,f,c
 17258  002F26  0E00               	movlw	0
 17259  002F28  2233               	addwfc	i2___ftadd@f2+2,f,c
 17260  002F2A                     i2l5253:
 17261  002F2A  0E00               	movlw	0
 17262  002F2C  6E37               	movwf	i2___ftadd@sign,c
 17263  002F2E  502E               	movf	i2___ftadd@f1,w,c
 17264  002F30  2631               	addwf	i2___ftadd@f2,f,c
 17265  002F32  502F               	movf	i2___ftadd@f1+1,w,c
 17266  002F34  2232               	addwfc	i2___ftadd@f2+1,f,c
 17267  002F36  5030               	movf	i2___ftadd@f1+2,w,c
 17268  002F38  2233               	addwfc	i2___ftadd@f2+2,f,c
 17269  002F3A  AE33               	btfss	i2___ftadd@f2+2,7,c
 17270  002F3C  D00E               	goto	i2l5263
 17271  002F3E  0EFF               	movlw	255
 17272  002F40  1A31               	xorwf	i2___ftadd@f2,f,c
 17273  002F42  0EFF               	movlw	255
 17274  002F44  1A32               	xorwf	i2___ftadd@f2+1,f,c
 17275  002F46  0EFF               	movlw	255
 17276  002F48  1A33               	xorwf	i2___ftadd@f2+2,f,c
 17277  002F4A  0E01               	movlw	1
 17278  002F4C  2631               	addwf	i2___ftadd@f2,f,c
 17279  002F4E  0E00               	movlw	0
 17280  002F50  2232               	addwfc	i2___ftadd@f2+1,f,c
 17281  002F52  0E00               	movlw	0
 17282  002F54  2233               	addwfc	i2___ftadd@f2+2,f,c
 17283  002F56  0E01               	movlw	1
 17284  002F58  6E37               	movwf	i2___ftadd@sign,c
 17285  002F5A                     i2l5263:
 17286  002F5A  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 17287  002F5E  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 17288  002F62  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 17289  002F66  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 17290  002F6A  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 17291  002F6E  ECD3  F023         	call	i2___ftpack	;wreg free
 17292  002F72  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 17293  002F76  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 17294  002F7A  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 17295  002F7E  0012               	return	
 17296  002F80                     __end_ofi2___ftadd:
 17297                           	opt stack 0
 17298                           pclatu	equ	0xFFB
 17299                           pclath	equ	0xFFA
 17300                           tblptru	equ	0xFF8
 17301                           tblptrh	equ	0xFF7
 17302                           tblptrl	equ	0xFF6
 17303                           tablat	equ	0xFF5
 17304                           prodh	equ	0xFF4
 17305                           prodl	equ	0xFF3
 17306                           intcon	equ	0xFF2
 17307                           intcon3	equ	0xFF0
 17308                           postinc0	equ	0xFEE
 17309                           fsr0h	equ	0xFEA
 17310                           fsr0l	equ	0xFE9
 17311                           wreg	equ	0xFE8
 17312                           postdec1	equ	0xFE5
 17313                           fsr1h	equ	0xFE2
 17314                           fsr1l	equ	0xFE1
 17315                           indf2	equ	0xFDF
 17316                           postinc2	equ	0xFDE
 17317                           postdec2	equ	0xFDD
 17318                           fsr2h	equ	0xFDA
 17319                           fsr2l	equ	0xFD9
 17320                           status	equ	0xFD8
 17321                           
 17322 ;; *************** function i2___ftpack *****************
 17323 ;; Defined at:
 17324 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 17325 ;; Parameters:    Size  Location     Type
 17326 ;;  arg             3    0[COMRAM] unsigned um
 17327 ;;  exp             1    3[COMRAM] unsigned char 
 17328 ;;  sign            1    4[COMRAM] unsigned char 
 17329 ;; Auto vars:     Size  Location     Type
 17330 ;;		None
 17331 ;; Return value:  Size  Location     Type
 17332 ;;                  3    0[COMRAM] float 
 17333 ;; Registers used:
 17334 ;;		wreg, status,2, status,0
 17335 ;; Tracked objects:
 17336 ;;		On entry : 0/0
 17337 ;;		On exit  : 0/0
 17338 ;;		Unchanged: 0/0
 17339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17340 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17342 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17343 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17344 ;;Total ram usage:        8 bytes
 17345 ;; Hardware stack levels used:    1
 17346 ;; This function calls:
 17347 ;;		Nothing
 17348 ;; This function is called by:
 17349 ;;		i2___ftadd
 17350 ;;		i2___ftmul
 17351 ;;		i2___lltoft
 17352 ;; This function uses a non-reentrant model
 17353 ;;
 17354                           
 17355                           	psect	text61
 17356  0047A6                     __ptext61:
 17357                           	opt stack 0
 17358  0047A6                     i2___ftpack:
 17359                           	opt stack 20
 17360                           
 17361                           ;incstack = 0
 17362  0047A6  5004               	movf	i2___ftpack@exp,w,c
 17363  0047A8  B4D8               	btfsc	status,2,c
 17364  0047AA  D005               	goto	i2l4795
 17365  0047AC  5001               	movf	i2___ftpack@arg,w,c
 17366  0047AE  1002               	iorwf	i2___ftpack@arg+1,w,c
 17367  0047B0  1003               	iorwf	i2___ftpack@arg+2,w,c
 17368  0047B2  A4D8               	btfss	status,2,c
 17369  0047B4  D00C               	goto	i2l4801
 17370  0047B6                     i2l4795:
 17371  0047B6  0E00               	movlw	0
 17372  0047B8  6E01               	movwf	?i2___ftpack,c
 17373  0047BA  0E00               	movlw	0
 17374  0047BC  6E02               	movwf	?i2___ftpack+1,c
 17375  0047BE  0E00               	movlw	0
 17376  0047C0  6E03               	movwf	?i2___ftpack+2,c
 17377  0047C2  0012               	return	
 17378  0047C4                     i2l4799:
 17379  0047C4  2A04               	incf	i2___ftpack@exp,f,c
 17380  0047C6  90D8               	bcf	status,0,c
 17381  0047C8  3203               	rrcf	i2___ftpack@arg+2,f,c
 17382  0047CA  3202               	rrcf	i2___ftpack@arg+1,f,c
 17383  0047CC  3201               	rrcf	i2___ftpack@arg,f,c
 17384  0047CE                     i2l4801:
 17385  0047CE  0E00               	movlw	0
 17386  0047D0  1401               	andwf	i2___ftpack@arg,w,c
 17387  0047D2  6E06               	movwf	??i2___ftpack& (0+255),c
 17388  0047D4  0E00               	movlw	0
 17389  0047D6  1402               	andwf	i2___ftpack@arg+1,w,c
 17390  0047D8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 17391  0047DA  0EFE               	movlw	254
 17392  0047DC  1403               	andwf	i2___ftpack@arg+2,w,c
 17393  0047DE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 17394  0047E0  5006               	movf	??i2___ftpack,w,c
 17395  0047E2  1007               	iorwf	??i2___ftpack+1,w,c
 17396  0047E4  1008               	iorwf	??i2___ftpack+2,w,c
 17397  0047E6  B4D8               	btfsc	status,2,c
 17398  0047E8  D00C               	goto	i2l4807
 17399  0047EA  D7EC               	goto	i2l4799
 17400  0047EC                     i2l4803:
 17401  0047EC  2A04               	incf	i2___ftpack@exp,f,c
 17402  0047EE  0E01               	movlw	1
 17403  0047F0  2601               	addwf	i2___ftpack@arg,f,c
 17404  0047F2  0E00               	movlw	0
 17405  0047F4  2202               	addwfc	i2___ftpack@arg+1,f,c
 17406  0047F6  0E00               	movlw	0
 17407  0047F8  2203               	addwfc	i2___ftpack@arg+2,f,c
 17408  0047FA  90D8               	bcf	status,0,c
 17409  0047FC  3203               	rrcf	i2___ftpack@arg+2,f,c
 17410  0047FE  3202               	rrcf	i2___ftpack@arg+1,f,c
 17411  004800  3201               	rrcf	i2___ftpack@arg,f,c
 17412  004802                     i2l4807:
 17413  004802  0E00               	movlw	0
 17414  004804  1401               	andwf	i2___ftpack@arg,w,c
 17415  004806  6E06               	movwf	??i2___ftpack& (0+255),c
 17416  004808  0E00               	movlw	0
 17417  00480A  1402               	andwf	i2___ftpack@arg+1,w,c
 17418  00480C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 17419  00480E  0EFF               	movlw	255
 17420  004810  1403               	andwf	i2___ftpack@arg+2,w,c
 17421  004812  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 17422  004814  5006               	movf	??i2___ftpack,w,c
 17423  004816  1007               	iorwf	??i2___ftpack+1,w,c
 17424  004818  1008               	iorwf	??i2___ftpack+2,w,c
 17425  00481A  B4D8               	btfsc	status,2,c
 17426  00481C  D006               	goto	i2l4811
 17427  00481E  D7E6               	goto	i2l4803
 17428  004820                     i2l4809:
 17429  004820  0604               	decf	i2___ftpack@exp,f,c
 17430  004822  90D8               	bcf	status,0,c
 17431  004824  3601               	rlcf	i2___ftpack@arg,f,c
 17432  004826  3602               	rlcf	i2___ftpack@arg+1,f,c
 17433  004828  3603               	rlcf	i2___ftpack@arg+2,f,c
 17434  00482A                     i2l4811:
 17435  00482A  BE02               	btfsc	i2___ftpack@arg+1,7,c
 17436  00482C  D003               	goto	i2l1028
 17437  00482E  0E02               	movlw	2
 17438  004830  6004               	cpfslt	i2___ftpack@exp,c
 17439  004832  D7F6               	goto	i2l4809
 17440  004834                     i2l1028:
 17441  004834  A004               	btfss	i2___ftpack@exp,0,c
 17442  004836  9E02               	bcf	i2___ftpack@arg+1,7,c
 17443  004838  90D8               	bcf	status,0,c
 17444  00483A  3204               	rrcf	i2___ftpack@exp,f,c
 17445  00483C  5004               	movf	i2___ftpack@exp,w,c
 17446  00483E  1203               	iorwf	i2___ftpack@arg+2,f,c
 17447  004840  5005               	movf	i2___ftpack@sign,w,c
 17448  004842  A4D8               	btfss	status,2,c
 17449  004844  8E03               	bsf	i2___ftpack@arg+2,7,c
 17450  004846  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 17451  00484A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 17452  00484E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 17453  004852  0012               	return	
 17454  004854                     __end_ofi2___ftpack:
 17455                           	opt stack 0
 17456                           pclatu	equ	0xFFB
 17457                           pclath	equ	0xFFA
 17458                           tblptru	equ	0xFF8
 17459                           tblptrh	equ	0xFF7
 17460                           tblptrl	equ	0xFF6
 17461                           tablat	equ	0xFF5
 17462                           prodh	equ	0xFF4
 17463                           prodl	equ	0xFF3
 17464                           intcon	equ	0xFF2
 17465                           intcon3	equ	0xFF0
 17466                           postinc0	equ	0xFEE
 17467                           fsr0h	equ	0xFEA
 17468                           fsr0l	equ	0xFE9
 17469                           wreg	equ	0xFE8
 17470                           postdec1	equ	0xFE5
 17471                           fsr1h	equ	0xFE2
 17472                           fsr1l	equ	0xFE1
 17473                           indf2	equ	0xFDF
 17474                           postinc2	equ	0xFDE
 17475                           postdec2	equ	0xFDD
 17476                           fsr2h	equ	0xFDA
 17477                           fsr2l	equ	0xFD9
 17478                           status	equ	0xFD8
 17479                           
 17480 ;; *************** function i2___ftneg *****************
 17481 ;; Defined at:
 17482 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 17483 ;; Parameters:    Size  Location     Type
 17484 ;;  f1              3    0[COMRAM] float 
 17485 ;; Auto vars:     Size  Location     Type
 17486 ;;		None
 17487 ;; Return value:  Size  Location     Type
 17488 ;;                  3    0[COMRAM] float 
 17489 ;; Registers used:
 17490 ;;		wreg, status,2, status,0
 17491 ;; Tracked objects:
 17492 ;;		On entry : 0/0
 17493 ;;		On exit  : 0/0
 17494 ;;		Unchanged: 0/0
 17495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17496 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17499 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17500 ;;Total ram usage:        3 bytes
 17501 ;; Hardware stack levels used:    1
 17502 ;; This function calls:
 17503 ;;		Nothing
 17504 ;; This function is called by:
 17505 ;;		i2_printf
 17506 ;; This function uses a non-reentrant model
 17507 ;;
 17508                           
 17509                           	psect	text62
 17510  005318                     __ptext62:
 17511                           	opt stack 0
 17512  005318                     i2___ftneg:
 17513                           	opt stack 22
 17514                           
 17515                           ;incstack = 0
 17516  005318  5001               	movf	i2___ftneg@f1,w,c
 17517  00531A  1002               	iorwf	i2___ftneg@f1+1,w,c
 17518  00531C  1003               	iorwf	i2___ftneg@f1+2,w,c
 17519  00531E  B4D8               	btfsc	status,2,c
 17520  005320  D006               	goto	i2l1125
 17521  005322  0E00               	movlw	0
 17522  005324  1A01               	xorwf	i2___ftneg@f1,f,c
 17523  005326  0E00               	movlw	0
 17524  005328  1A02               	xorwf	i2___ftneg@f1+1,f,c
 17525  00532A  0E80               	movlw	128
 17526  00532C  1A03               	xorwf	i2___ftneg@f1+2,f,c
 17527  00532E                     i2l1125:
 17528  00532E  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 17529  005332  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 17530  005336  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 17531  00533A  0012               	return		;funcret
 17532  00533C                     __end_ofi2___ftneg:
 17533                           	opt stack 0
 17534                           pclatu	equ	0xFFB
 17535                           pclath	equ	0xFFA
 17536                           tblptru	equ	0xFF8
 17537                           tblptrh	equ	0xFF7
 17538                           tblptrl	equ	0xFF6
 17539                           tablat	equ	0xFF5
 17540                           prodh	equ	0xFF4
 17541                           prodl	equ	0xFF3
 17542                           intcon	equ	0xFF2
 17543                           intcon3	equ	0xFF0
 17544                           postinc0	equ	0xFEE
 17545                           fsr0h	equ	0xFEA
 17546                           fsr0l	equ	0xFE9
 17547                           wreg	equ	0xFE8
 17548                           postdec1	equ	0xFE5
 17549                           fsr1h	equ	0xFE2
 17550                           fsr1l	equ	0xFE1
 17551                           indf2	equ	0xFDF
 17552                           postinc2	equ	0xFDE
 17553                           postdec2	equ	0xFDD
 17554                           fsr2h	equ	0xFDA
 17555                           fsr2l	equ	0xFD9
 17556                           status	equ	0xFD8
 17557                           
 17558 ;; *************** function i2___ftge *****************
 17559 ;; Defined at:
 17560 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 17561 ;; Parameters:    Size  Location     Type
 17562 ;;  ff1             3    0[COMRAM] float 
 17563 ;;  ff2             3    3[COMRAM] float 
 17564 ;; Auto vars:     Size  Location     Type
 17565 ;;		None
 17566 ;; Return value:  Size  Location     Type
 17567 ;;		None               void
 17568 ;; Registers used:
 17569 ;;		wreg, status,2, status,0
 17570 ;; Tracked objects:
 17571 ;;		On entry : 0/0
 17572 ;;		On exit  : 0/0
 17573 ;;		Unchanged: 0/0
 17574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17575 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17577 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17578 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17579 ;;Total ram usage:        9 bytes
 17580 ;; Hardware stack levels used:    1
 17581 ;; This function calls:
 17582 ;;		Nothing
 17583 ;; This function is called by:
 17584 ;;		i2_printf
 17585 ;; This function uses a non-reentrant model
 17586 ;;
 17587                           
 17588                           	psect	text63
 17589  004A2E                     __ptext63:
 17590                           	opt stack 0
 17591  004A2E                     i2___ftge:
 17592                           	opt stack 22
 17593                           
 17594                           ;incstack = 0
 17595  004A2E  AE03               	btfss	i2___ftge@ff1+2,7,c
 17596  004A30  D016               	goto	i2l6021
 17597  004A32  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 17598  004A36  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 17599  004A3A  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 17600  004A3E  1E07               	comf	??i2___ftge,f,c
 17601  004A40  1E08               	comf	??i2___ftge+1,f,c
 17602  004A42  1E09               	comf	??i2___ftge+2,f,c
 17603  004A44  2A07               	incf	??i2___ftge,f,c
 17604  004A46  0E00               	movlw	0
 17605  004A48  2208               	addwfc	??i2___ftge+1,f,c
 17606  004A4A  2209               	addwfc	??i2___ftge+2,f,c
 17607  004A4C  0E00               	movlw	0
 17608  004A4E  2407               	addwf	??i2___ftge,w,c
 17609  004A50  6E01               	movwf	i2___ftge@ff1,c
 17610  004A52  0E00               	movlw	0
 17611  004A54  2008               	addwfc	??i2___ftge+1,w,c
 17612  004A56  6E02               	movwf	i2___ftge@ff1+1,c
 17613  004A58  0E80               	movlw	128
 17614  004A5A  2009               	addwfc	??i2___ftge+2,w,c
 17615  004A5C  6E03               	movwf	i2___ftge@ff1+2,c
 17616  004A5E                     i2l6021:
 17617  004A5E  AE06               	btfss	i2___ftge@ff2+2,7,c
 17618  004A60  D016               	goto	i2l6025
 17619  004A62  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 17620  004A66  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 17621  004A6A  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 17622  004A6E  1E07               	comf	??i2___ftge,f,c
 17623  004A70  1E08               	comf	??i2___ftge+1,f,c
 17624  004A72  1E09               	comf	??i2___ftge+2,f,c
 17625  004A74  2A07               	incf	??i2___ftge,f,c
 17626  004A76  0E00               	movlw	0
 17627  004A78  2208               	addwfc	??i2___ftge+1,f,c
 17628  004A7A  2209               	addwfc	??i2___ftge+2,f,c
 17629  004A7C  0E00               	movlw	0
 17630  004A7E  2407               	addwf	??i2___ftge,w,c
 17631  004A80  6E04               	movwf	i2___ftge@ff2,c
 17632  004A82  0E00               	movlw	0
 17633  004A84  2008               	addwfc	??i2___ftge+1,w,c
 17634  004A86  6E05               	movwf	i2___ftge@ff2+1,c
 17635  004A88  0E80               	movlw	128
 17636  004A8A  2009               	addwfc	??i2___ftge+2,w,c
 17637  004A8C  6E06               	movwf	i2___ftge@ff2+2,c
 17638  004A8E                     i2l6025:
 17639  004A8E  0E00               	movlw	0
 17640  004A90  1A01               	xorwf	i2___ftge@ff1,f,c
 17641  004A92  0E00               	movlw	0
 17642  004A94  1A02               	xorwf	i2___ftge@ff1+1,f,c
 17643  004A96  0E80               	movlw	128
 17644  004A98  1A03               	xorwf	i2___ftge@ff1+2,f,c
 17645  004A9A  0E00               	movlw	0
 17646  004A9C  1A04               	xorwf	i2___ftge@ff2,f,c
 17647  004A9E  0E00               	movlw	0
 17648  004AA0  1A05               	xorwf	i2___ftge@ff2+1,f,c
 17649  004AA2  0E80               	movlw	128
 17650  004AA4  1A06               	xorwf	i2___ftge@ff2+2,f,c
 17651  004AA6  5004               	movf	i2___ftge@ff2,w,c
 17652  004AA8  5C01               	subwf	i2___ftge@ff1,w,c
 17653  004AAA  5005               	movf	i2___ftge@ff2+1,w,c
 17654  004AAC  5802               	subwfb	i2___ftge@ff1+1,w,c
 17655  004AAE  5006               	movf	i2___ftge@ff2+2,w,c
 17656  004AB0  5803               	subwfb	i2___ftge@ff1+2,w,c
 17657  004AB2  B0D8               	btfsc	status,0,c
 17658  004AB4  D002               	goto	i2l6031
 17659  004AB6  90D8               	bcf	status,0,c
 17660  004AB8  0012               	return	
 17661  004ABA                     i2l6031:
 17662  004ABA  80D8               	bsf	status,0,c
 17663  004ABC  0012               	return	
 17664  004ABE                     __end_ofi2___ftge:
 17665                           	opt stack 0
 17666                           pclatu	equ	0xFFB
 17667                           pclath	equ	0xFFA
 17668                           tblptru	equ	0xFF8
 17669                           tblptrh	equ	0xFF7
 17670                           tblptrl	equ	0xFF6
 17671                           tablat	equ	0xFF5
 17672                           prodh	equ	0xFF4
 17673                           prodl	equ	0xFF3
 17674                           intcon	equ	0xFF2
 17675                           intcon3	equ	0xFF0
 17676                           postinc0	equ	0xFEE
 17677                           fsr0h	equ	0xFEA
 17678                           fsr0l	equ	0xFE9
 17679                           wreg	equ	0xFE8
 17680                           postdec1	equ	0xFE5
 17681                           fsr1h	equ	0xFE2
 17682                           fsr1l	equ	0xFE1
 17683                           indf2	equ	0xFDF
 17684                           postinc2	equ	0xFDE
 17685                           postdec2	equ	0xFDD
 17686                           fsr2h	equ	0xFDA
 17687                           fsr2l	equ	0xFD9
 17688                           status	equ	0xFD8
 17689                           
 17690 ;; *************** function i2_lcdClear *****************
 17691 ;; Defined at:
 17692 ;;		line 74 in file "lcd.c"
 17693 ;; Parameters:    Size  Location     Type
 17694 ;;		None
 17695 ;; Auto vars:     Size  Location     Type
 17696 ;;		None
 17697 ;; Return value:  Size  Location     Type
 17698 ;;                  1    wreg      void 
 17699 ;; Registers used:
 17700 ;;		wreg, status,2, status,0, cstack
 17701 ;; Tracked objects:
 17702 ;;		On entry : 0/0
 17703 ;;		On exit  : 0/0
 17704 ;;		Unchanged: 0/0
 17705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17710 ;;Total ram usage:        0 bytes
 17711 ;; Hardware stack levels used:    1
 17712 ;; Hardware stack levels required when called:    2
 17713 ;; This function calls:
 17714 ;;		i2_lcdInst
 17715 ;; This function is called by:
 17716 ;;		_service
 17717 ;; This function uses a non-reentrant model
 17718 ;;
 17719                           
 17720                           	psect	text64
 17721  0053BE                     __ptext64:
 17722                           	opt stack 0
 17723  0053BE                     i2_lcdClear:
 17724                           	opt stack 21
 17725                           
 17726                           ;lcd.c: 75: lcdInst(0b00000001);
 17727                           
 17728                           ;incstack = 0
 17729  0053BE  0E01               	movlw	1
 17730  0053C0  ECAF  F029         	call	i2_lcdInst
 17731  0053C4  0012               	return		;funcret
 17732  0053C6                     __end_ofi2_lcdClear:
 17733                           	opt stack 0
 17734                           pclatu	equ	0xFFB
 17735                           pclath	equ	0xFFA
 17736                           tblptru	equ	0xFF8
 17737                           tblptrh	equ	0xFF7
 17738                           tblptrl	equ	0xFF6
 17739                           tablat	equ	0xFF5
 17740                           prodh	equ	0xFF4
 17741                           prodl	equ	0xFF3
 17742                           intcon	equ	0xFF2
 17743                           intcon3	equ	0xFF0
 17744                           postinc0	equ	0xFEE
 17745                           fsr0h	equ	0xFEA
 17746                           fsr0l	equ	0xFE9
 17747                           wreg	equ	0xFE8
 17748                           postdec1	equ	0xFE5
 17749                           fsr1h	equ	0xFE2
 17750                           fsr1l	equ	0xFE1
 17751                           indf2	equ	0xFDF
 17752                           postinc2	equ	0xFDE
 17753                           postdec2	equ	0xFDD
 17754                           fsr2h	equ	0xFDA
 17755                           fsr2l	equ	0xFD9
 17756                           status	equ	0xFD8
 17757                           
 17758 ;; *************** function i2_lcdInst *****************
 17759 ;; Defined at:
 17760 ;;		line 27 in file "lcd.c"
 17761 ;; Parameters:    Size  Location     Type
 17762 ;;  data            1    wreg     unsigned char 
 17763 ;; Auto vars:     Size  Location     Type
 17764 ;;  data            1    3[COMRAM] unsigned char 
 17765 ;; Return value:  Size  Location     Type
 17766 ;;                  1    wreg      void 
 17767 ;; Registers used:
 17768 ;;		wreg, status,2, status,0, cstack
 17769 ;; Tracked objects:
 17770 ;;		On entry : 0/0
 17771 ;;		On exit  : 0/0
 17772 ;;		Unchanged: 0/0
 17773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17777 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17778 ;;Total ram usage:        2 bytes
 17779 ;; Hardware stack levels used:    1
 17780 ;; Hardware stack levels required when called:    1
 17781 ;; This function calls:
 17782 ;;		i2_lcdNibble
 17783 ;; This function is called by:
 17784 ;;		i2_lcdClear
 17785 ;;		i2_lcdNewline
 17786 ;; This function uses a non-reentrant model
 17787 ;;
 17788                           
 17789                           	psect	text65
 17790  00535E                     __ptext65:
 17791                           	opt stack 0
 17792  00535E                     i2_lcdInst:
 17793                           	opt stack 19
 17794                           
 17795                           ;incstack = 0
 17796                           ;i2lcdInst@data stored from wreg
 17797  00535E  6E04               	movwf	i2lcdInst@data,c
 17798                           
 17799                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 17800  005360  948C               	bcf	3980,2,c	;volatile
 17801                           
 17802                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 17803  005362  0E74               	movlw	116
 17804  005364                     i2u802_47:
 17805  005364  2EE8               	decfsz	wreg,f,c
 17806  005366  D7FE               	bra	i2u802_47
 17807  005368  D000               	nop2	
 17808                           
 17809                           ;lcd.c: 30: lcdNibble(data);
 17810  00536A  5004               	movf	i2lcdInst@data,w,c
 17811  00536C  EC0E  F027         	call	i2_lcdNibble
 17812                           
 17813                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 17814  005370  0E04               	movlw	4
 17815  005372  6E03               	movwf	??i2_lcdInst& (0+255),c
 17816  005374  0E3E               	movlw	62
 17817  005376                     i2u803_47:
 17818  005376  2EE8               	decfsz	wreg,f,c
 17819  005378  D7FE               	bra	i2u803_47
 17820  00537A  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 17821  00537C  D7FC               	bra	i2u803_47
 17822  00537E  0012               	return		;funcret
 17823  005380                     __end_ofi2_lcdInst:
 17824                           	opt stack 0
 17825                           pclatu	equ	0xFFB
 17826                           pclath	equ	0xFFA
 17827                           tblptru	equ	0xFF8
 17828                           tblptrh	equ	0xFF7
 17829                           tblptrl	equ	0xFF6
 17830                           tablat	equ	0xFF5
 17831                           prodh	equ	0xFF4
 17832                           prodl	equ	0xFF3
 17833                           intcon	equ	0xFF2
 17834                           intcon3	equ	0xFF0
 17835                           postinc0	equ	0xFEE
 17836                           fsr0h	equ	0xFEA
 17837                           fsr0l	equ	0xFE9
 17838                           wreg	equ	0xFE8
 17839                           postdec1	equ	0xFE5
 17840                           fsr1h	equ	0xFE2
 17841                           fsr1l	equ	0xFE1
 17842                           indf2	equ	0xFDF
 17843                           postinc2	equ	0xFDE
 17844                           postdec2	equ	0xFDD
 17845                           fsr2h	equ	0xFDA
 17846                           fsr2l	equ	0xFD9
 17847                           status	equ	0xFD8
 17848                           
 17849 ;; *************** function i2_lcdNibble *****************
 17850 ;; Defined at:
 17851 ;;		line 46 in file "lcd.c"
 17852 ;; Parameters:    Size  Location     Type
 17853 ;;  data            1    wreg     unsigned char 
 17854 ;; Auto vars:     Size  Location     Type
 17855 ;;  data            1    1[COMRAM] unsigned char 
 17856 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 17857 ;; Return value:  Size  Location     Type
 17858 ;;                  1    wreg      void 
 17859 ;; Registers used:
 17860 ;;		wreg, status,2, status,0
 17861 ;; Tracked objects:
 17862 ;;		On entry : 0/0
 17863 ;;		On exit  : 0/0
 17864 ;;		Unchanged: 0/0
 17865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17870 ;;Total ram usage:        2 bytes
 17871 ;; Hardware stack levels used:    1
 17872 ;; This function calls:
 17873 ;;		Nothing
 17874 ;; This function is called by:
 17875 ;;		i2_lcdInst
 17876 ;;		i2_putch
 17877 ;; This function uses a non-reentrant model
 17878 ;;
 17879                           
 17880                           	psect	text66
 17881  004E1C                     __ptext66:
 17882                           	opt stack 0
 17883  004E1C                     i2_lcdNibble:
 17884                           	opt stack 21
 17885                           
 17886                           ;incstack = 0
 17887                           ;i2lcdNibble@data stored from wreg
 17888  004E1C  6E02               	movwf	i2lcdNibble@data,c
 17889                           
 17890                           ;lcd.c: 48: char temp = data & 0xF0;
 17891  004E1E  5002               	movf	i2lcdNibble@data,w,c
 17892  004E20  0BF0               	andlw	240
 17893  004E22  6E01               	movwf	i2lcdNibble@temp,c
 17894                           
 17895                           ;lcd.c: 49: LATD = LATD & 0x0F;
 17896  004E24  508C               	movf	3980,w,c	;volatile
 17897  004E26  0B0F               	andlw	15
 17898  004E28  6E8C               	movwf	3980,c	;volatile
 17899                           
 17900                           ;lcd.c: 50: LATD = temp | LATD;
 17901  004E2A  5001               	movf	i2lcdNibble@temp,w,c
 17902  004E2C  108C               	iorwf	3980,w,c	;volatile
 17903  004E2E  6E8C               	movwf	3980,c	;volatile
 17904                           
 17905                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 17906  004E30  968C               	bcf	3980,3,c	;volatile
 17907                           
 17908                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17909  004E32  0ED6               	movlw	214
 17910  004E34                     i2u804_47:
 17911  004E34  D000               	nop2	
 17912  004E36  D000               	nop2	
 17913  004E38  2EE8               	decfsz	wreg,f,c
 17914  004E3A  D7FC               	bra	i2u804_47
 17915  004E3C  D000               	nop2	
 17916                           
 17917                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 17918  004E3E  868C               	bsf	3980,3,c	;volatile
 17919                           
 17920                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17921  004E40  0ED6               	movlw	214
 17922  004E42                     i2u805_47:
 17923  004E42  D000               	nop2	
 17924  004E44  D000               	nop2	
 17925  004E46  2EE8               	decfsz	wreg,f,c
 17926  004E48  D7FC               	bra	i2u805_47
 17927  004E4A  D000               	nop2	
 17928                           
 17929                           ;lcd.c: 58: data = data << 4;
 17930  004E4C  3802               	swapf	i2lcdNibble@data,w,c
 17931  004E4E  0BF0               	andlw	240
 17932  004E50  6E02               	movwf	i2lcdNibble@data,c
 17933                           
 17934                           ;lcd.c: 60: temp = data & 0xF0;
 17935  004E52  5002               	movf	i2lcdNibble@data,w,c
 17936  004E54  0BF0               	andlw	240
 17937  004E56  6E01               	movwf	i2lcdNibble@temp,c
 17938                           
 17939                           ;lcd.c: 61: LATD = LATD & 0x0F;
 17940  004E58  508C               	movf	3980,w,c	;volatile
 17941  004E5A  0B0F               	andlw	15
 17942  004E5C  6E8C               	movwf	3980,c	;volatile
 17943                           
 17944                           ;lcd.c: 62: LATD = temp | LATD;
 17945  004E5E  5001               	movf	i2lcdNibble@temp,w,c
 17946  004E60  108C               	iorwf	3980,w,c	;volatile
 17947  004E62  6E8C               	movwf	3980,c	;volatile
 17948                           
 17949                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 17950  004E64  968C               	bcf	3980,3,c	;volatile
 17951                           
 17952                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17953  004E66  0ED6               	movlw	214
 17954  004E68                     i2u806_47:
 17955  004E68  D000               	nop2	
 17956  004E6A  D000               	nop2	
 17957  004E6C  2EE8               	decfsz	wreg,f,c
 17958  004E6E  D7FC               	bra	i2u806_47
 17959  004E70  D000               	nop2	
 17960                           
 17961                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 17962  004E72  868C               	bsf	3980,3,c	;volatile
 17963                           
 17964                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17965  004E74  0ED6               	movlw	214
 17966  004E76                     i2u807_47:
 17967  004E76  D000               	nop2	
 17968  004E78  D000               	nop2	
 17969  004E7A  2EE8               	decfsz	wreg,f,c
 17970  004E7C  D7FC               	bra	i2u807_47
 17971  004E7E  D000               	nop2	
 17972  004E80  0012               	return		;funcret
 17973  004E82                     __end_ofi2_lcdNibble:
 17974                           	opt stack 0
 17975                           pclatu	equ	0xFFB
 17976                           pclath	equ	0xFFA
 17977                           tblptru	equ	0xFF8
 17978                           tblptrh	equ	0xFF7
 17979                           tblptrl	equ	0xFF6
 17980                           tablat	equ	0xFF5
 17981                           prodh	equ	0xFF4
 17982                           prodl	equ	0xFF3
 17983                           intcon	equ	0xFF2
 17984                           intcon3	equ	0xFF0
 17985                           postinc0	equ	0xFEE
 17986                           fsr0h	equ	0xFEA
 17987                           fsr0l	equ	0xFE9
 17988                           wreg	equ	0xFE8
 17989                           postdec1	equ	0xFE5
 17990                           fsr1h	equ	0xFE2
 17991                           fsr1l	equ	0xFE1
 17992                           indf2	equ	0xFDF
 17993                           postinc2	equ	0xFDE
 17994                           postdec2	equ	0xFDD
 17995                           fsr2h	equ	0xFDA
 17996                           fsr2l	equ	0xFD9
 17997                           status	equ	0xFD8
 17998                           
 17999 ;; *************** function _servoInterruptService *****************
 18000 ;; Defined at:
 18001 ;;		line 52 in file "servo.c"
 18002 ;; Parameters:    Size  Location     Type
 18003 ;;		None
 18004 ;; Auto vars:     Size  Location     Type
 18005 ;;		None
 18006 ;; Return value:  Size  Location     Type
 18007 ;;                  1    wreg      void 
 18008 ;; Registers used:
 18009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18010 ;; Tracked objects:
 18011 ;;		On entry : 0/0
 18012 ;;		On exit  : 0/0
 18013 ;;		Unchanged: 0/0
 18014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18017 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18018 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18019 ;;Total ram usage:        4 bytes
 18020 ;; Hardware stack levels used:    1
 18021 ;; Hardware stack levels required when called:    1
 18022 ;; This function calls:
 18023 ;;		i2___awmod
 18024 ;;		i2_digitalWrite
 18025 ;;		i2_startTimer
 18026 ;; This function is called by:
 18027 ;;		_service
 18028 ;; This function uses a non-reentrant model
 18029 ;;
 18030                           
 18031                           	psect	text67
 18032  003EE4                     __ptext67:
 18033                           	opt stack 0
 18034  003EE4                     _servoInterruptService:
 18035                           	opt stack 22
 18036                           
 18037                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 18038                           
 18039                           ;incstack = 0
 18040  003EE4  A4F2               	btfss	intcon,2,c	;volatile
 18041  003EE6  0012               	return	
 18042  003EE8  94F2               	bcf	intcon,2,c	;volatile
 18043                           
 18044                           ;servo.c: 55: digitalWrite(servos[curr],0);
 18045  003EEA  90D8               	bcf	status,0,c
 18046  003EEC  347B               	rlcf	_curr,w,c
 18047  003EEE  6ED9               	movwf	fsr2l,c
 18048  003EF0  347C               	rlcf	_curr+1,w,c
 18049  003EF2  6EDA               	movwf	fsr2h,c
 18050  003EF4  0E8E               	movlw	low _servos
 18051  003EF6  26D9               	addwf	fsr2l,f,c
 18052  003EF8  0E01               	movlw	high _servos
 18053  003EFA  22DA               	addwfc	fsr2h,f,c
 18054  003EFC  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 18055  003F00  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 18056  003F04  0E00               	movlw	0
 18057  003F06  6E0A               	movwf	i2digitalWrite@val+1,c
 18058  003F08  0E00               	movlw	0
 18059  003F0A  6E09               	movwf	i2digitalWrite@val,c
 18060  003F0C  ECB2  F022         	call	i2_digitalWrite	;wreg free
 18061                           
 18062                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 18063  003F10  0E01               	movlw	1
 18064  003F12  247B               	addwf	_curr,w,c
 18065  003F14  6E01               	movwf	i2___awmod@dividend,c
 18066  003F16  0E00               	movlw	0
 18067  003F18  207C               	addwfc	_curr+1,w,c
 18068  003F1A  6E02               	movwf	i2___awmod@dividend+1,c
 18069  003F1C  0E01               	movlw	1
 18070  003F1E  0100               	movlb	0	; () banked
 18071  003F20  25FE               	addwf	_n& (0+255),w,b
 18072  003F22  6E03               	movwf	i2___awmod@divisor,c
 18073  003F24  0E00               	movlw	0
 18074  003F26  0100               	movlb	0	; () banked
 18075  003F28  21FF               	addwfc	(_n+1)& (0+255),w,b
 18076  003F2A  6E04               	movwf	i2___awmod@divisor+1,c
 18077  003F2C  ECA3  F026         	call	i2___awmod	;wreg free
 18078  003F30  90D8               	bcf	status,0,c
 18079  003F32  3601               	rlcf	?i2___awmod,f,c
 18080  003F34  3602               	rlcf	?i2___awmod+1,f,c
 18081  003F36  0E8E               	movlw	low _servos
 18082  003F38  2401               	addwf	?i2___awmod,w,c
 18083  003F3A  6ED9               	movwf	fsr2l,c
 18084  003F3C  0E01               	movlw	high _servos
 18085  003F3E  2002               	addwfc	?i2___awmod+1,w,c
 18086  003F40  6EDA               	movwf	fsr2h,c
 18087  003F42  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 18088  003F46  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 18089  003F4A  0E00               	movlw	0
 18090  003F4C  6E0A               	movwf	i2digitalWrite@val+1,c
 18091  003F4E  0E01               	movlw	1
 18092  003F50  6E09               	movwf	i2digitalWrite@val,c
 18093  003F52  ECB2  F022         	call	i2_digitalWrite	;wreg free
 18094                           
 18095                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 18096  003F56  0E00               	movlw	0
 18097  003F58  6E08               	movwf	i2startTimer@timer+1,c
 18098  003F5A  0E00               	movlw	0
 18099  003F5C  6E07               	movwf	i2startTimer@timer,c
 18100  003F5E  0EFF               	movlw	255
 18101  003F60  6E10               	movwf	??_servoInterruptService& (0+255),c
 18102  003F62  0EFF               	movlw	255
 18103  003F64  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 18104  003F66  0E01               	movlw	1
 18105  003F68  247B               	addwf	_curr,w,c
 18106  003F6A  6E01               	movwf	i2___awmod@dividend,c
 18107  003F6C  0E00               	movlw	0
 18108  003F6E  207C               	addwfc	_curr+1,w,c
 18109  003F70  6E02               	movwf	i2___awmod@dividend+1,c
 18110  003F72  0E01               	movlw	1
 18111  003F74  0100               	movlb	0	; () banked
 18112  003F76  25FE               	addwf	_n& (0+255),w,b
 18113  003F78  6E03               	movwf	i2___awmod@divisor,c
 18114  003F7A  0E00               	movlw	0
 18115  003F7C  0100               	movlb	0	; () banked
 18116  003F7E  21FF               	addwfc	(_n+1)& (0+255),w,b
 18117  003F80  6E04               	movwf	i2___awmod@divisor+1,c
 18118  003F82  ECA3  F026         	call	i2___awmod	;wreg free
 18119  003F86  90D8               	bcf	status,0,c
 18120  003F88  3601               	rlcf	?i2___awmod,f,c
 18121  003F8A  3602               	rlcf	?i2___awmod+1,f,c
 18122  003F8C  0E86               	movlw	low _pulse
 18123  003F8E  2401               	addwf	?i2___awmod,w,c
 18124  003F90  6ED9               	movwf	fsr2l,c
 18125  003F92  0E01               	movlw	high _pulse
 18126  003F94  2002               	addwfc	?i2___awmod+1,w,c
 18127  003F96  6EDA               	movwf	fsr2h,c
 18128  003F98  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 18129  003F9C  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 18130  003FA0  1E12               	comf	??_servoInterruptService+2,f,c
 18131  003FA2  1E13               	comf	??_servoInterruptService+3,f,c
 18132  003FA4  4A12               	infsnz	??_servoInterruptService+2,f,c
 18133  003FA6  2A13               	incf	??_servoInterruptService+3,f,c
 18134  003FA8  5010               	movf	??_servoInterruptService,w,c
 18135  003FAA  2612               	addwf	??_servoInterruptService+2,f,c
 18136  003FAC  5011               	movf	??_servoInterruptService+1,w,c
 18137  003FAE  2213               	addwfc	??_servoInterruptService+3,f,c
 18138  003FB0  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 18139  003FB4  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 18140  003FB8  6A0B               	clrf	i2startTimer@val+2,c
 18141  003FBA  6A0C               	clrf	i2startTimer@val+3,c
 18142  003FBC  ECE4  F027         	call	i2_startTimer	;wreg free
 18143                           
 18144                           ;servo.c: 59: curr = (curr+1)%(n+1);
 18145  003FC0  0E01               	movlw	1
 18146  003FC2  247B               	addwf	_curr,w,c
 18147  003FC4  6E01               	movwf	i2___awmod@dividend,c
 18148  003FC6  0E00               	movlw	0
 18149  003FC8  207C               	addwfc	_curr+1,w,c
 18150  003FCA  6E02               	movwf	i2___awmod@dividend+1,c
 18151  003FCC  0E01               	movlw	1
 18152  003FCE  0100               	movlb	0	; () banked
 18153  003FD0  25FE               	addwf	_n& (0+255),w,b
 18154  003FD2  6E03               	movwf	i2___awmod@divisor,c
 18155  003FD4  0E00               	movlw	0
 18156  003FD6  0100               	movlb	0	; () banked
 18157  003FD8  21FF               	addwfc	(_n+1)& (0+255),w,b
 18158  003FDA  6E04               	movwf	i2___awmod@divisor+1,c
 18159  003FDC  ECA3  F026         	call	i2___awmod	;wreg free
 18160  003FE0  C001  F07B         	movff	?i2___awmod,_curr
 18161  003FE4  C002  F07C         	movff	?i2___awmod+1,_curr+1
 18162  003FE8  0012               	return	
 18163  003FEA                     __end_of_servoInterruptService:
 18164                           	opt stack 0
 18165                           pclatu	equ	0xFFB
 18166                           pclath	equ	0xFFA
 18167                           tblptru	equ	0xFF8
 18168                           tblptrh	equ	0xFF7
 18169                           tblptrl	equ	0xFF6
 18170                           tablat	equ	0xFF5
 18171                           prodh	equ	0xFF4
 18172                           prodl	equ	0xFF3
 18173                           intcon	equ	0xFF2
 18174                           intcon3	equ	0xFF0
 18175                           postinc0	equ	0xFEE
 18176                           fsr0h	equ	0xFEA
 18177                           fsr0l	equ	0xFE9
 18178                           wreg	equ	0xFE8
 18179                           postdec1	equ	0xFE5
 18180                           fsr1h	equ	0xFE2
 18181                           fsr1l	equ	0xFE1
 18182                           indf2	equ	0xFDF
 18183                           postinc2	equ	0xFDE
 18184                           postdec2	equ	0xFDD
 18185                           fsr2h	equ	0xFDA
 18186                           fsr2l	equ	0xFD9
 18187                           status	equ	0xFD8
 18188                           
 18189 ;; *************** function i2_startTimer *****************
 18190 ;; Defined at:
 18191 ;;		line 76 in file "timer.c"
 18192 ;; Parameters:    Size  Location     Type
 18193 ;;  timer           2    6[COMRAM] int 
 18194 ;;  val             4    8[COMRAM] long 
 18195 ;; Auto vars:     Size  Location     Type
 18196 ;;		None
 18197 ;; Return value:  Size  Location     Type
 18198 ;;                  1    wreg      void 
 18199 ;; Registers used:
 18200 ;;		wreg, status,2, status,0
 18201 ;; Tracked objects:
 18202 ;;		On entry : 0/0
 18203 ;;		On exit  : 0/0
 18204 ;;		Unchanged: 0/0
 18205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18206 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18209 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18210 ;;Total ram usage:        8 bytes
 18211 ;; Hardware stack levels used:    1
 18212 ;; This function calls:
 18213 ;;		Nothing
 18214 ;; This function is called by:
 18215 ;;		_service
 18216 ;;		_servoInterruptService
 18217 ;; This function uses a non-reentrant model
 18218 ;;
 18219                           
 18220                           	psect	text68
 18221  004FC8                     __ptext68:
 18222                           	opt stack 0
 18223  004FC8                     i2_startTimer:
 18224                           	opt stack 23
 18225                           
 18226                           ;timer.c: 77: switch(timer){
 18227                           
 18228                           ;incstack = 0
 18229  004FC8  D012               	goto	i2l5835
 18230  004FCA                     i2l406:
 18231                           
 18232                           ;timer.c: 79: TMR0H = val>>8;
 18233  004FCA  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 18234                           
 18235                           ;timer.c: 80: TMR0L = val;
 18236  004FCE  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 18237                           
 18238                           ;timer.c: 81: T0CON |= 1<<7;
 18239  004FD2  8ED5               	bsf	4053,7,c	;volatile
 18240                           
 18241                           ;timer.c: 82: break;
 18242  004FD4  0012               	return	
 18243  004FD6                     i2l408:
 18244                           
 18245                           ;timer.c: 84: TMR1H = val>>8;
 18246  004FD6  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 18247                           
 18248                           ;timer.c: 85: TMR1L = val;
 18249  004FDA  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 18250                           
 18251                           ;timer.c: 86: T1CON |= 1<<0;
 18252  004FDE  80CD               	bsf	4045,0,c	;volatile
 18253                           
 18254                           ;timer.c: 87: break;
 18255  004FE0  0012               	return	
 18256  004FE2                     i2l409:
 18257                           
 18258                           ;timer.c: 89: TMR3H = val>>8;
 18259  004FE2  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 18260                           
 18261                           ;timer.c: 90: TMR3L = val;
 18262  004FE6  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 18263                           
 18264                           ;timer.c: 91: T3CON |= 1<<0;
 18265  004FEA  80B1               	bsf	4017,0,c	;volatile
 18266                           
 18267                           ;timer.c: 92: }
 18268  004FEC  0012               	return	
 18269  004FEE                     i2l5835:
 18270  004FEE  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 18271  004FF2  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 18272                           
 18273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18274                           ; Switch size 1, requested type "space"
 18275                           ; Number of cases is 1, Range of values is 0 to 0
 18276                           ; switch strategies available:
 18277                           ; Name         Instructions Cycles
 18278                           ; simple_byte            4     3 (average)
 18279                           ;	Chosen strategy is simple_byte
 18280  004FF6  500E               	movf	??i2_startTimer+1,w,c
 18281  004FF8  0A00               	xorlw	0	; case 0
 18282  004FFA  A4D8               	btfss	status,2,c
 18283  004FFC  0012               	return	
 18284                           
 18285                           ; Switch size 1, requested type "space"
 18286                           ; Number of cases is 3, Range of values is 0 to 3
 18287                           ; switch strategies available:
 18288                           ; Name         Instructions Cycles
 18289                           ; simple_byte           10     6 (average)
 18290                           ;	Chosen strategy is simple_byte
 18291  004FFE  500D               	movf	??i2_startTimer,w,c
 18292  005000  0A00               	xorlw	0	; case 0
 18293  005002  B4D8               	btfsc	status,2,c
 18294  005004  D7E2               	goto	i2l406
 18295  005006  0A01               	xorlw	1	; case 1
 18296  005008  B4D8               	btfsc	status,2,c
 18297  00500A  D7E5               	goto	i2l408
 18298  00500C  0A02               	xorlw	2	; case 3
 18299  00500E  A4D8               	btfss	status,2,c
 18300  005010  0012               	return	
 18301  005012  D7E7               	goto	i2l409
 18302  005014                     __end_ofi2_startTimer:
 18303                           	opt stack 0
 18304                           pclatu	equ	0xFFB
 18305                           pclath	equ	0xFFA
 18306                           tblptru	equ	0xFF8
 18307                           tblptrh	equ	0xFF7
 18308                           tblptrl	equ	0xFF6
 18309                           tablat	equ	0xFF5
 18310                           prodh	equ	0xFF4
 18311                           prodl	equ	0xFF3
 18312                           intcon	equ	0xFF2
 18313                           intcon3	equ	0xFF0
 18314                           postinc0	equ	0xFEE
 18315                           fsr0h	equ	0xFEA
 18316                           fsr0l	equ	0xFE9
 18317                           wreg	equ	0xFE8
 18318                           postdec1	equ	0xFE5
 18319                           fsr1h	equ	0xFE2
 18320                           fsr1l	equ	0xFE1
 18321                           indf2	equ	0xFDF
 18322                           postinc2	equ	0xFDE
 18323                           postdec2	equ	0xFDD
 18324                           fsr2h	equ	0xFDA
 18325                           fsr2l	equ	0xFD9
 18326                           status	equ	0xFD8
 18327                           
 18328 ;; *************** function i2_digitalWrite *****************
 18329 ;; Defined at:
 18330 ;;		line 53 in file "iopin.c"
 18331 ;; Parameters:    Size  Location     Type
 18332 ;;  pin             2    6[COMRAM] PTR int 
 18333 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 18334 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 18335 ;;  val             2    8[COMRAM] int 
 18336 ;; Auto vars:     Size  Location     Type
 18337 ;;  digitalWrite    2   13[COMRAM] int 
 18338 ;; Return value:  Size  Location     Type
 18339 ;;                  1    wreg      void 
 18340 ;; Registers used:
 18341 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18342 ;; Tracked objects:
 18343 ;;		On entry : 0/0
 18344 ;;		On exit  : 0/0
 18345 ;;		Unchanged: 0/0
 18346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18348 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18349 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18350 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18351 ;;Total ram usage:        9 bytes
 18352 ;; Hardware stack levels used:    1
 18353 ;; This function calls:
 18354 ;;		Nothing
 18355 ;; This function is called by:
 18356 ;;		_servoInterruptService
 18357 ;; This function uses a non-reentrant model
 18358 ;;
 18359                           
 18360                           	psect	text69
 18361  004564                     __ptext69:
 18362                           	opt stack 0
 18363  004564                     i2_digitalWrite:
 18364                           	opt stack 22
 18365                           
 18366                           ;iopin.c: 54: if(pin){
 18367                           
 18368                           ;incstack = 0
 18369  004564  5007               	movf	i2digitalWrite@pin,w,c
 18370  004566  1008               	iorwf	i2digitalWrite@pin+1,w,c
 18371  004568  B4D8               	btfsc	status,2,c
 18372  00456A  0012               	return	
 18373                           
 18374                           ;iopin.c: 55: int p = 1 << pin[1];
 18375  00456C  EE20 F002          	lfsr	2,2
 18376  004570  5007               	movf	i2digitalWrite@pin,w,c
 18377  004572  26D9               	addwf	fsr2l,f,c
 18378  004574  5008               	movf	i2digitalWrite@pin+1,w,c
 18379  004576  22DA               	addwfc	fsr2h,f,c
 18380  004578  50DF               	movf	indf2,w,c
 18381  00457A  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 18382  00457C  0E01               	movlw	1
 18383  00457E  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 18384  004580  0E00               	movlw	0
 18385  004582  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 18386  004584  2A0B               	incf	??i2_digitalWrite,f,c
 18387  004586  D003               	goto	i2u626_44
 18388  004588                     i2u626_45:
 18389  004588  90D8               	bcf	status,0,c
 18390  00458A  360C               	rlcf	??i2_digitalWrite+1,f,c
 18391  00458C  360D               	rlcf	??i2_digitalWrite+2,f,c
 18392  00458E                     i2u626_44:
 18393  00458E  2E0B               	decfsz	??i2_digitalWrite,f,c
 18394  004590  D7FB               	goto	i2u626_45
 18395  004592  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 18396  004596  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 18397                           
 18398                           ;iopin.c: 56: if(val == 0){
 18399  00459A  5009               	movf	i2digitalWrite@val,w,c
 18400  00459C  100A               	iorwf	i2digitalWrite@val+1,w,c
 18401  00459E  A4D8               	btfss	status,2,c
 18402  0045A0  D02B               	goto	i2l5821
 18403                           
 18404                           ;iopin.c: 57: p ^= 0xff;
 18405  0045A2  0EFF               	movlw	255
 18406  0045A4  1A0E               	xorwf	i2digitalWrite@p,f,c
 18407                           
 18408                           ;iopin.c: 58: }
 18409                           ;iopin.c: 60: switch(pin[0]){
 18410  0045A6  D028               	goto	i2l5821
 18411  0045A8                     i2l5797:
 18412  0045A8  0409               	decf	i2digitalWrite@val,w,c
 18413  0045AA  100A               	iorwf	i2digitalWrite@val+1,w,c
 18414  0045AC  A4D8               	btfss	status,2,c
 18415  0045AE  D003               	goto	i2l5801
 18416  0045B0  500E               	movf	i2digitalWrite@p,w,c
 18417  0045B2  1289               	iorwf	3977,f,c	;volatile
 18418  0045B4  0012               	return	
 18419  0045B6                     i2l5801:
 18420                           
 18421                           ;iopin.c: 62: else LATA &= p;
 18422  0045B6  500E               	movf	i2digitalWrite@p,w,c
 18423  0045B8  1689               	andwf	3977,f,c	;volatile
 18424                           
 18425                           ;iopin.c: 63: break;
 18426  0045BA  0012               	return	
 18427  0045BC                     i2l5803:
 18428  0045BC  0409               	decf	i2digitalWrite@val,w,c
 18429  0045BE  100A               	iorwf	i2digitalWrite@val+1,w,c
 18430  0045C0  A4D8               	btfss	status,2,c
 18431  0045C2  D003               	goto	i2l5807
 18432  0045C4  500E               	movf	i2digitalWrite@p,w,c
 18433  0045C6  128A               	iorwf	3978,f,c	;volatile
 18434  0045C8  0012               	return	
 18435  0045CA                     i2l5807:
 18436                           
 18437                           ;iopin.c: 65: else LATB &= p;
 18438  0045CA  500E               	movf	i2digitalWrite@p,w,c
 18439  0045CC  168A               	andwf	3978,f,c	;volatile
 18440                           
 18441                           ;iopin.c: 66: break;
 18442  0045CE  0012               	return	
 18443  0045D0                     i2l5809:
 18444  0045D0  0409               	decf	i2digitalWrite@val,w,c
 18445  0045D2  100A               	iorwf	i2digitalWrite@val+1,w,c
 18446  0045D4  A4D8               	btfss	status,2,c
 18447  0045D6  D003               	goto	i2l5813
 18448  0045D8  500E               	movf	i2digitalWrite@p,w,c
 18449  0045DA  128B               	iorwf	3979,f,c	;volatile
 18450  0045DC  0012               	return	
 18451  0045DE                     i2l5813:
 18452                           
 18453                           ;iopin.c: 68: else LATC &= p;
 18454  0045DE  500E               	movf	i2digitalWrite@p,w,c
 18455  0045E0  168B               	andwf	3979,f,c	;volatile
 18456                           
 18457                           ;iopin.c: 69: break;
 18458  0045E2  0012               	return	
 18459  0045E4                     i2l5815:
 18460  0045E4  0409               	decf	i2digitalWrite@val,w,c
 18461  0045E6  100A               	iorwf	i2digitalWrite@val+1,w,c
 18462  0045E8  A4D8               	btfss	status,2,c
 18463  0045EA  D003               	goto	i2l5819
 18464  0045EC  500E               	movf	i2digitalWrite@p,w,c
 18465  0045EE  128C               	iorwf	3980,f,c	;volatile
 18466  0045F0  0012               	return	
 18467  0045F2                     i2l5819:
 18468                           
 18469                           ;iopin.c: 71: else LATD &= p;
 18470  0045F2  500E               	movf	i2digitalWrite@p,w,c
 18471  0045F4  168C               	andwf	3980,f,c	;volatile
 18472                           
 18473                           ;iopin.c: 72: }
 18474  0045F6  0012               	return	
 18475  0045F8                     i2l5821:
 18476  0045F8  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 18477  0045FC  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 18478  004600  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 18479  004604  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 18480                           
 18481                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18482                           ; Switch size 1, requested type "space"
 18483                           ; Number of cases is 1, Range of values is 0 to 0
 18484                           ; switch strategies available:
 18485                           ; Name         Instructions Cycles
 18486                           ; simple_byte            4     3 (average)
 18487                           ;	Chosen strategy is simple_byte
 18488  004608  500C               	movf	??i2_digitalWrite+1,w,c
 18489  00460A  0A00               	xorlw	0	; case 0
 18490  00460C  A4D8               	btfss	status,2,c
 18491  00460E  0012               	return	
 18492                           
 18493                           ; Switch size 1, requested type "space"
 18494                           ; Number of cases is 4, Range of values is 0 to 3
 18495                           ; switch strategies available:
 18496                           ; Name         Instructions Cycles
 18497                           ; simple_byte           13     7 (average)
 18498                           ;	Chosen strategy is simple_byte
 18499  004610  500B               	movf	??i2_digitalWrite,w,c
 18500  004612  0A00               	xorlw	0	; case 0
 18501  004614  B4D8               	btfsc	status,2,c
 18502  004616  D7C8               	goto	i2l5797
 18503  004618  0A01               	xorlw	1	; case 1
 18504  00461A  B4D8               	btfsc	status,2,c
 18505  00461C  D7CF               	goto	i2l5803
 18506  00461E  0A03               	xorlw	3	; case 2
 18507  004620  B4D8               	btfsc	status,2,c
 18508  004622  D7D6               	goto	i2l5809
 18509  004624  0A01               	xorlw	1	; case 3
 18510  004626  A4D8               	btfss	status,2,c
 18511  004628  0012               	return	
 18512  00462A  D7DC               	goto	i2l5815
 18513  00462C                     __end_ofi2_digitalWrite:
 18514                           	opt stack 0
 18515                           pclatu	equ	0xFFB
 18516                           pclath	equ	0xFFA
 18517                           tblptru	equ	0xFF8
 18518                           tblptrh	equ	0xFF7
 18519                           tblptrl	equ	0xFF6
 18520                           tablat	equ	0xFF5
 18521                           prodh	equ	0xFF4
 18522                           prodl	equ	0xFF3
 18523                           intcon	equ	0xFF2
 18524                           intcon3	equ	0xFF0
 18525                           postinc0	equ	0xFEE
 18526                           fsr0h	equ	0xFEA
 18527                           fsr0l	equ	0xFE9
 18528                           wreg	equ	0xFE8
 18529                           postdec1	equ	0xFE5
 18530                           fsr1h	equ	0xFE2
 18531                           fsr1l	equ	0xFE1
 18532                           indf2	equ	0xFDF
 18533                           postinc2	equ	0xFDE
 18534                           postdec2	equ	0xFDD
 18535                           fsr2h	equ	0xFDA
 18536                           fsr2l	equ	0xFD9
 18537                           status	equ	0xFD8
 18538                           
 18539 ;; *************** function i2___awmod *****************
 18540 ;; Defined at:
 18541 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 18542 ;; Parameters:    Size  Location     Type
 18543 ;;  dividend        2    0[COMRAM] int 
 18544 ;;  divisor         2    2[COMRAM] int 
 18545 ;; Auto vars:     Size  Location     Type
 18546 ;;  __awmod         1    5[COMRAM] unsigned char 
 18547 ;;  __awmod         1    4[COMRAM] unsigned char 
 18548 ;; Return value:  Size  Location     Type
 18549 ;;                  2    0[COMRAM] int 
 18550 ;; Registers used:
 18551 ;;		wreg, status,2, status,0
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18560 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18561 ;;Total ram usage:        6 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; This function calls:
 18564 ;;		Nothing
 18565 ;; This function is called by:
 18566 ;;		_servoInterruptService
 18567 ;;		i2_fround
 18568 ;;		i2_scale
 18569 ;; This function uses a non-reentrant model
 18570 ;;
 18571                           
 18572                           	psect	text70
 18573  004D46                     __ptext70:
 18574                           	opt stack 0
 18575  004D46                     i2___awmod:
 18576                           	opt stack 21
 18577                           
 18578                           ;incstack = 0
 18579  004D46  0E00               	movlw	0
 18580  004D48  6E06               	movwf	i2___awmod@sign,c
 18581  004D4A  AE02               	btfss	i2___awmod@dividend+1,7,c
 18582  004D4C  D006               	goto	i2l5169
 18583  004D4E  6C01               	negf	i2___awmod@dividend,c
 18584  004D50  1E02               	comf	i2___awmod@dividend+1,f,c
 18585  004D52  B0D8               	btfsc	status,0,c
 18586  004D54  2A02               	incf	i2___awmod@dividend+1,f,c
 18587  004D56  0E01               	movlw	1
 18588  004D58  6E06               	movwf	i2___awmod@sign,c
 18589  004D5A                     i2l5169:
 18590  004D5A  AE04               	btfss	i2___awmod@divisor+1,7,c
 18591  004D5C  D004               	goto	i2l5173
 18592  004D5E  6C03               	negf	i2___awmod@divisor,c
 18593  004D60  1E04               	comf	i2___awmod@divisor+1,f,c
 18594  004D62  B0D8               	btfsc	status,0,c
 18595  004D64  2A04               	incf	i2___awmod@divisor+1,f,c
 18596  004D66                     i2l5173:
 18597  004D66  5003               	movf	i2___awmod@divisor,w,c
 18598  004D68  1004               	iorwf	i2___awmod@divisor+1,w,c
 18599  004D6A  B4D8               	btfsc	status,2,c
 18600  004D6C  D018               	goto	i2l5189
 18601  004D6E  0E01               	movlw	1
 18602  004D70  6E05               	movwf	i2___awmod@counter,c
 18603  004D72  D004               	goto	i2l5179
 18604  004D74                     i2l5177:
 18605  004D74  90D8               	bcf	status,0,c
 18606  004D76  3603               	rlcf	i2___awmod@divisor,f,c
 18607  004D78  3604               	rlcf	i2___awmod@divisor+1,f,c
 18608  004D7A  2A05               	incf	i2___awmod@counter,f,c
 18609  004D7C                     i2l5179:
 18610  004D7C  AE04               	btfss	i2___awmod@divisor+1,7,c
 18611  004D7E  D7FA               	goto	i2l5177
 18612  004D80                     i2l5181:
 18613  004D80  5003               	movf	i2___awmod@divisor,w,c
 18614  004D82  5C01               	subwf	i2___awmod@dividend,w,c
 18615  004D84  5004               	movf	i2___awmod@divisor+1,w,c
 18616  004D86  5802               	subwfb	i2___awmod@dividend+1,w,c
 18617  004D88  A0D8               	btfss	status,0,c
 18618  004D8A  D004               	goto	i2l5185
 18619  004D8C  5003               	movf	i2___awmod@divisor,w,c
 18620  004D8E  5E01               	subwf	i2___awmod@dividend,f,c
 18621  004D90  5004               	movf	i2___awmod@divisor+1,w,c
 18622  004D92  5A02               	subwfb	i2___awmod@dividend+1,f,c
 18623  004D94                     i2l5185:
 18624  004D94  90D8               	bcf	status,0,c
 18625  004D96  3204               	rrcf	i2___awmod@divisor+1,f,c
 18626  004D98  3203               	rrcf	i2___awmod@divisor,f,c
 18627  004D9A  2E05               	decfsz	i2___awmod@counter,f,c
 18628  004D9C  D7F1               	goto	i2l5181
 18629  004D9E                     i2l5189:
 18630  004D9E  5006               	movf	i2___awmod@sign,w,c
 18631  004DA0  B4D8               	btfsc	status,2,c
 18632  004DA2  D004               	goto	i2l5193
 18633  004DA4  6C01               	negf	i2___awmod@dividend,c
 18634  004DA6  1E02               	comf	i2___awmod@dividend+1,f,c
 18635  004DA8  B0D8               	btfsc	status,0,c
 18636  004DAA  2A02               	incf	i2___awmod@dividend+1,f,c
 18637  004DAC                     i2l5193:
 18638  004DAC  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 18639  004DB0  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 18640  004DB4  0012               	return	
 18641  004DB6                     __end_ofi2___awmod:
 18642                           	opt stack 0
 18643                           pclatu	equ	0xFFB
 18644                           pclath	equ	0xFFA
 18645                           tblptru	equ	0xFF8
 18646                           tblptrh	equ	0xFF7
 18647                           tblptrl	equ	0xFF6
 18648                           tablat	equ	0xFF5
 18649                           prodh	equ	0xFF4
 18650                           prodl	equ	0xFF3
 18651                           intcon	equ	0xFF2
 18652                           intcon3	equ	0xFF0
 18653                           postinc0	equ	0xFEE
 18654                           fsr0h	equ	0xFEA
 18655                           fsr0l	equ	0xFE9
 18656                           wreg	equ	0xFE8
 18657                           postdec1	equ	0xFE5
 18658                           fsr1h	equ	0xFE2
 18659                           fsr1l	equ	0xFE1
 18660                           indf2	equ	0xFDF
 18661                           postinc2	equ	0xFDE
 18662                           postdec2	equ	0xFDD
 18663                           fsr2h	equ	0xFDA
 18664                           fsr2l	equ	0xFD9
 18665                           status	equ	0xFD8
 18666                           pclatu	equ	0xFFB
 18667                           pclath	equ	0xFFA
 18668                           tblptru	equ	0xFF8
 18669                           tblptrh	equ	0xFF7
 18670                           tblptrl	equ	0xFF6
 18671                           tablat	equ	0xFF5
 18672                           prodh	equ	0xFF4
 18673                           prodl	equ	0xFF3
 18674                           intcon	equ	0xFF2
 18675                           intcon3	equ	0xFF0
 18676                           postinc0	equ	0xFEE
 18677                           fsr0h	equ	0xFEA
 18678                           fsr0l	equ	0xFE9
 18679                           wreg	equ	0xFE8
 18680                           postdec1	equ	0xFE5
 18681                           fsr1h	equ	0xFE2
 18682                           fsr1l	equ	0xFE1
 18683                           indf2	equ	0xFDF
 18684                           postinc2	equ	0xFDE
 18685                           postdec2	equ	0xFDD
 18686                           fsr2h	equ	0xFDA
 18687                           fsr2l	equ	0xFD9
 18688                           status	equ	0xFD8
 18689                           
 18690                           	psect	rparam
 18691  0000                     pclatu	equ	0xFFB
 18692                           pclath	equ	0xFFA
 18693                           tblptru	equ	0xFF8
 18694                           tblptrh	equ	0xFF7
 18695                           tblptrl	equ	0xFF6
 18696                           tablat	equ	0xFF5
 18697                           prodh	equ	0xFF4
 18698                           prodl	equ	0xFF3
 18699                           intcon	equ	0xFF2
 18700                           intcon3	equ	0xFF0
 18701                           postinc0	equ	0xFEE
 18702                           fsr0h	equ	0xFEA
 18703                           fsr0l	equ	0xFE9
 18704                           wreg	equ	0xFE8
 18705                           postdec1	equ	0xFE5
 18706                           fsr1h	equ	0xFE2
 18707                           fsr1l	equ	0xFE1
 18708                           indf2	equ	0xFDF
 18709                           postinc2	equ	0xFDE
 18710                           postdec2	equ	0xFDD
 18711                           fsr2h	equ	0xFDA
 18712                           fsr2l	equ	0xFD9
 18713                           status	equ	0xFD8
 18714                           
 18715                           	psect	temp
 18716  00007E                     btemp:
 18717                           	opt stack 0
 18718  00007E                     	ds	1
 18719  0000                     int$flags	set	btemp
 18720                           pclatu	equ	0xFFB
 18721                           pclath	equ	0xFFA
 18722                           tblptru	equ	0xFF8
 18723                           tblptrh	equ	0xFF7
 18724                           tblptrl	equ	0xFF6
 18725                           tablat	equ	0xFF5
 18726                           prodh	equ	0xFF4
 18727                           prodl	equ	0xFF3
 18728                           intcon	equ	0xFF2
 18729                           intcon3	equ	0xFF0
 18730                           postinc0	equ	0xFEE
 18731                           fsr0h	equ	0xFEA
 18732                           fsr0l	equ	0xFE9
 18733                           wreg	equ	0xFE8
 18734                           postdec1	equ	0xFE5
 18735                           fsr1h	equ	0xFE2
 18736                           fsr1l	equ	0xFE1
 18737                           indf2	equ	0xFDF
 18738                           postinc2	equ	0xFDE
 18739                           postdec2	equ	0xFDD
 18740                           fsr2h	equ	0xFDA
 18741                           fsr2l	equ	0xFD9
 18742                           status	equ	0xFD8


Data Sizes:
    Strings     287
    Constant    174
    Data        61
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    122     125
    BANK0           128    126     128
    BANK1           256     73     164
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_17(CODE[17]), STR_16(CODE[18]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[18]), 
		 -> STR_5(CODE[8]), STR_4(CODE[11]), STR_3(CODE[15]), STR_2(CODE[17]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderDir(BANK1[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2_scale
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_setAngle
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  153260
                                             46 BANK1     27    27      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0   80682
                                            118 BANK0      2     2      0
                                             30 BANK1     16    16      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   49215
                                             85 BANK0     16     6     10
                                              0 BANK1     30    30      0
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11138
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10940
                                             48 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2641
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1676
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3899
                                             70 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1274
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     302
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   19357
                                            118 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18003
                                            108 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   16949
                                             85 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             70 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             33 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2914
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             58 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2367
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2606
                                              8 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             14 BANK0     10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _service                                             19    19      0   23753
                                            103 COMRAM    19    19      0
              _servoInterruptService
                         i2_lcdClear
                           i2_printf
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            41    37      4   21657
                                             63 COMRAM    40    36      4
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (9) i2_scale                                             13    10      3    4789
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2_fround                                            16    13      3    4591
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4    1041
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftmul                                          15     9      6    1519
                                             20 COMRAM    15     9      6
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) i2___lltoft                                           9     5      4     560
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
                            i2_scale (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1528
                                             57 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1409
                                             45 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) i2_lcdClear                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _servoInterruptService                                4     4      0    1636
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (8) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2_digitalWrite                                       9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     920
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_lcdClear
     i2_lcdInst
       i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___ftpack
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_scale (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_isdigit
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     49      A4       7       64.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7E      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A1      34        0.0%
DATA                 0      0     1A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 26 13:24:27 2017

                  ___altoft@exp 0090                               _n 00FE               main@cylinderStart 0143  
          main@cylinderBackward 0141                   ___altoft@sign 0091                     _sortBattery 1FF0  
                  ___awdiv@sign 008B             ___wmul@multiplicand 0090                     __CFG_BORV$3 000000  
                    i2___ftpack 47A6                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
              _redirectingServo 0182                    ___ftadd@exp1 00C5                    ___ftadd@exp2 00C4  
                    i2___lltoft 4E82             main@cylinderForward 013F                    ___ftadd@sign 00C3  
                           l122 264C                             l123 2654                             l300 3B8E  
                           l230 525A                             l118 2468                             l145 22C2  
                           l129 2678                             l227 524C                             l325 50F6  
                           l406 4EE0                             l191 52DE                             l408 4EEC  
                           l409 4EF8                             l700 0902                             l399 4F76  
                           l739 0782                             l748 0970                             l996 3294  
                  __CFG_CPB$OFF 000000                             _PEN 007E2A                    __CFG_CPD$OFF 000000  
                           _SEN 007E28                    ___awmod@sign 0085                             wreg 000FE8  
                    i2_lcdClear 53BE                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 009B  
                  ___ftdiv@sign 00A0                    __CFG_WDT$OFF 000000                            l1100 310C  
                          l1051 298E                            l1028 3EB0                            l1125 523E  
                          l1055 29C8                            l1057 29F0                            l1066 2AC6  
                          l1075 2AF0                            l1093 3048                            l1086 3680  
                          l1094 308C                            l1175 4794                            l1185 4A1C  
                          l5101 4C5A                            l5021 325E                            l5005 3212  
                          l5103 4C6A                            l5017 324A                            l4411 3E06  
                          l5043 44DC                            l5035 4F9E                            l5027 327A  
                          l4421 3E94                            l4413 3E14                            l4501 29E6  
                          l5053 4560                            l5029 328A                            l4423 3EA2  
                          l4415 3E44                            l4407 3DF2                            l4511 2A28  
                          l5047 451C                            l5071 472E                            l4521 2A72  
                          l5323 4F3A                            l4435 3ED6                            l4419 3E64  
                          l4531 2ABA                            l4523 2A7E                            l4603 3446  
                          l5067 4718                            l5091 49C6                            l5403 0038  
                          l5317 4F30                            l4429 3EBA                            l4517 2A56  
                          l5069 4728                            l4701 4880                            l5501 03C4  
                          l5405 004E                            l6311 3DAA                            l5335 4F4E  
                          l4519 2A64                            l4623 34CE                            l5079 4782  
                          l5095 4A0A                            l5087 49B0                            l5511 0454  
                          l5503 03F4                            l5423 0100                            l5415 0088  
                          l6231 226A                            l5329 4F46                            l4473 4922  
                          l4537 2B1A                            l4529 2AAC                            l4633 350C  
                          l4609 3480                            l5089 49C0                            l4721 48EC  
                          l4713 48CA                            l4705 4894                            l5601 07FC  
                          l5505 040A                            l5433 0138                            l5425 0106  
                          l5409 0058                            l6241 22CC                            l6315 3DC6  
                          l6307 3D98                            l6331 4312                            l4475 4932  
                          l4547 2B68                            l4563 35DE                            l4627 34EC  
                          l5371 4062                            l4707 48A0                            l5531 054C  
                          l5515 0482                            l5443 0176                            l5435 0144  
                          l5427 010C                            l6235 2296                            l6243 22F4  
                          l6219 2186                            l4733 50C0                            l4557 35A4  
                          l4637 352A                            l5349 4F04                            l5381 4092  
                          l5365 4046                            l4653 4648                            l4709 48A6  
                          l4717 48D8                            l5701 0B4A                            l5621 092A  
                          l5613 08F4                            l5525 04E0                            l5445 0190  
                          l5437 014A                            l5429 0112                            l6351 43B6  
                          l6343 4388                            l6335 432E                            l6327 42FA  
                          l4495 29D6                            l4583 363E                            l4743 36F0  
                          l5383 409A                            l5375 4076                            l4911 5296  
                          l5607 08D8                            l5551 060A                            l5543 0592  
                          l5471 025E                            l5439 0162                            l5455 01C0  
                          l6337 433E                            l4489 299C                            l4761 3782  
                          l5377 407E                            l5369 405A                            l4921 2FBA  
                          l4665 467C                            l4681 46CC                            l5705 0B70  
                          l5641 09C2                            l5609 08E6                            l5561 0646  
                          l5529 0546                            l5449 01A8                            l5457 0204  
                          l5721 0CAA                            l6283 3CE2                            l6339 4344  
                          l6347 439A                            l4771 37B2                            l5387 40AE  
                          l4667 4688                            l4659 465E                            l5707 0B80  
                          l5715 0C7A                            l5635 0992                            l5563 065C  
                          l5547 05E2                            l4773 37C2                            l4765 3796  
                          l5733 3AE0                            l5725 3A68                            l5389 40B6  
                          l4685 46E0                            l4677 46BE                            l4669 468E  
                          l4861 28DE                            l4853 27FA                            l5709 0C04  
                          l5717 0C8C                            l5653 0A08                            l5581 0742  
                          l5573 06A6                            l5557 0638                            l6295 3D2E  
                          l4775 37CC                            l5751 43DE                            l5743 3B58  
                          l4927 2FF4                            l5719 0C94                            l5655 0A0E  
                          l5671 0A66                            l5639 09BC                            l5591 0786  
                          l5567 066A                            l5495 0380                            l5487 0310  
                          l5399 0022                            l6297 3D3E                            l6289 3D00  
                          l5737 3B1C                            l5729 3AA4                            l4961 30D6  
                          l4697 4870                            l4881 198A                            l5681 0AD2  
                          l5585 0750                            l5569 067E                            l6721 265C  
                          l6299 3D44                            l4779 37E8                            l5755 4434  
                          l4875 18C4                            l5683 0ADC                            l5587 0764  
                          l5579 0734                            l5499 03AE                            l6707 24A4  
                          l4957 30C2                            l4893 1B14                            l4885 19B0  
                          l5677 0A9A                            l5669 0A54                            l5597 07AA  
                          l5759 445C                            l4983 316A                            l4967 30F2  
                          l5695 0B24                            l4977 3144                            l4969 3102  
                          l5697 0B30                            l5689 0B08                            l4899 1BDA  
                          l4997 31BE                            _EEIF 007D0C           __size_ofi2__div_to_l_ 0128  
                          STR_1 FFF6                            STR_2 FFC3                            STR_3 FFD4  
                          STR_4 FFE3                            STR_5 FFEE                            STR_6 FF04  
                          STR_7 FFB2                            STR_8 FEF2                            STR_9 FF7F  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                            u4131 293C  
                          u4141 295A                            u4411 345C                    printf@tmpval 010C  
                          u4341 3580                            u4600 3716                            u4361 35BA  
                          _PEIE 007F96                            u4605 370C                            u4391 3422  
                          u6154 3A8C                            u6155 3A86                            u6164 3AC8  
                          u5524 4024                            _RCEN 007E2B                            u4581 36CC  
                          u6165 3AC2                            u5525 401C                            u6174 3B04  
                          u8007 4D3A                            u6175 3AFE                            u6184 3B40  
                          u6185 3B3A                            u4841 2F96                            u4861 2FD0  
                          u5670 02A4                            u7530 262A                            u5675 0298  
                          u7540 262C                            u5890 077A                            u7907 231A  
                          u7917 234E                            u7927 52E2                            u7937 501C  
                          u7947 5052                            u7867 2552                            u7957 52A8  
                          u7877 2032                            u7967 52BE                            u7887 2066  
                          u7977 4CEE                            u7897 21A8                            u7987 4CFC  
                          u7997 4D2C                            _RSEN 007E29                            _main 23AA  
                          _curr 007B                    ___ftpack@arg 0080                            _keys FEC7  
                  ___ftpack@exp 0083                            _time 019A                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 007E                    i2___ftadd@f1 002E                    i2___ftadd@f2 0031  
                  i2___ftge@ff1 0001                    i2___ftge@ff2 0004                            prodh 000FF4  
                          prodl 000FF3                            start 000E                   __CFG_IESO$OFF 000000  
               __end_ofi2_scale 1FF0                    i2___ftneg@f1 0001                 __end_ofi2_putch 535E  
                 __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00AE                    i2___ftmul@f1 0015  
                  i2___ftmul@f2 0018                    ___param_bank 000000                    ___ftmul@sign 00AF  
                  i2___ftsub@f1 003A                    i2___ftsub@f2 003D                    i2___fttol@f1 002B  
                   i2_lcdNibble 4E1C                    ___fttol@exp1 00D4                    i2___lltoft@c 0009  
                  ___fttol@lval 00D0            __end_ofi2_startTimer 5014            __end_of_angleToPulse 340C  
               __end_of___aldiv 3DD8                 __end_of___almod 43C8                           ?_main 0001  
                         _ACKEN 007E2C                           _ACKDT 007E2D                 __end_of___awdiv 46EA  
                         _EEADR 000FA9                 __end_of___ftadd 2B8E                           STR_10 FF16  
                         STR_11 FF6E                           STR_12 FEDF                           STR_13 FF90  
                         STR_14 FF28                           STR_15 FF5D                           STR_16 FF3A  
                         STR_17 FFA1                           STR_18 FF4C                 __end_of___awmod 48F6  
               __end_of___ftdiv 36B6         ??_servoInterruptService 0010                 __end_of___ftneg 524C  
               __end_of___lldiv 47A6                 __end_of___ftmul 356A                           _T0CON 000FD5  
               ___awdiv@divisor 0088                           _T1CON 000FCD                 __end_of___llmod 4A2E  
               __end_of___ftsub 4FC8                 __end_of___fttol 37FA                           _T3CON 000FB1  
                         i2l406 4FCA                           i2l191 534C                           i2l167 38F8  
                         i2l408 4FD6                           i2l409 4FE2                           i2l700 143C  
                         i2l739 12DC                           i2l748 149C                 ___awdiv@counter 008A  
                         i2l996 3CAC                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                    i2__div_to_l_ 3B96  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                 __end_of_lcdHome 53B6                    ___lltoft@exp 0090  
                 _conveyorServo 016A                 __end_of_lcdInst 52CA                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000           __size_ofi2_lcdNewline 0008                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 505E  
                __CFG_EBTRB$OFF 000000                      i2isdigit@c 0003                   ___awtoft@sign 008B  
                         _angle 0152                 __end_of_dpowers FE59                      i2scale@scl 002A  
                         _count 01A0                           _scale 1752                 __end_of_isdigit 52A0  
                 ___ftpack@sign 0084                           _pulse 0186                           _putch 52CA  
                  main@prevTime 013B                           pclath 000FFA                           tablat 000FF5  
              __end_ofi2___ftge 4ABE                 __end_of_service 3934                __end_ofi2___wmul 5318  
                         status 000FD8                __end_ofi2_fround 2DD4              __size_ofi2___awdiv 0084  
            __size_ofi2___ftadd 01AC              __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000  
                 i2printf@width 0063              __size_ofi2___ftneg 0024              __size_ofi2___lldiv 0082  
            __size_ofi2___ftmul 00F4              __size_ofi2___llmod 0066              __size_ofi2___ftsub 0040  
            __size_ofi2___fttol 00F4                __end_ofi2_printf 1752            __end_of_digitalWrite 40EE  
               __initialization 505E               i2___lldiv@divisor 0005              __size_ofi2_lcdInst 0022  
                  __end_of_main 267A               i2___lldiv@counter 000D                    __end_of_keys FED8  
                 i2___ftmul@exp 001E                      i2printf@ap 0052                      i2printf@cp 004E  
            __size_ofi2_isdigit 001E                     ?i2___ftpack 0001                    i2_lcdNewline 53B6  
                   ?i2___lltoft 0009                          ??_main 012E                   ___fttol@sign1 00CF  
                 __activetblptr 000002            __size_of_digitalRead 0130            __size_of__tdiv_to_l_ 019E  
               i2digitalWrite@p 000E                     ?i2_lcdClear 0001                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                __end_of___altoft 4994  
              ___llmod@dividend 008D                          ?_scale 00B0                          _ADRESH 000FC4  
                        _EEADRH 000FAA                          _ADRESL 000FC3                          _EEDATA 000FA8  
                        _EECON1 000FA6                          _EECON2 000FA7                ___awdiv@dividend 0086  
               i2lcdNibble@data 0002                __end_of___awtoft 50E8                          ?_putch 0001  
              __end_of___ftpack 3EE4                 i2lcdNibble@temp 0001                __end_of___lltoft 4CCE  
                        _INT0IE 007F94                          _INT0IF 007F91                          _INT1IE 007F83  
                        _INT1IF 007F80                    sortBattery@V 012B                          i2l1100 3A54  
                        i2l1051 2E18                          i2l1028 4834                          i2l1125 532E  
                        i2l1055 2E42                          i2l1066 2EF2                          i2l1075 2F0E  
                        i2l1093 39C6                          i2l1094 39EE                          i2l1175 4C40  
                        i2l1185 4E0A                          i2l5211 2E50                          i2l6003 3A1A  
                        i2l5131 4B70                          i2l6021 4A5E                          i2l5205 2E26  
                        i2l6013 3A42                          i2l5141 4B92                          i2l5125 4B60  
                        i2l6101 5396                          i2l6031 4ABA                          i2l6111 4BF2  
                        i2l6015 3A4E                          i2l6007 3A2A                          i2l5303 4198  
                        i2l6025 4A8E                          i2l5233 2EA2                          i2l6113 4BFE  
                        i2l5137 4B86                          i2l5153 4BB8                          i2l5235 2EAC  
                        i2l5227 2E80                          i2l6043 5140                          i2l6123 4C32  
                        i2l6115 4C02                          i2l6131 4DC8                          i2l5139 4B8E  
                        i2l5307 41A8                          i2l5181 4D80                          i2l5173 4D66  
                        i2l5253 2F2A                          i2l5245 2EE0                          i2l5237 2EB6  
                        i2l6053 420E                          i2l6133 4DD4                          i2l5157 4BC6  
                        i2l5149 4BAE                          i2l5263 2F5A                          i2l5247 2EEA  
                        i2l5239 2EBE                          i2l6071 4274                          i2l6135 4DD8  
                        i2l5193 4DAC                          i2l5185 4D94                          i2l5177 4D74  
                        i2l5169 4D5A                          i2l4801 47CE                          i2l6081 429C  
                        i2l6145 4E88                          i2l5273 4116                          i2l5179 4D7C  
                        i2l4811 482A                          i2l4803 47EC                          i2l6083 42A8  
                        i2l6075 4284                          i2l6139 4DFC                          i2l6147 4E94  
                        i2l6403 0DE2                          i2l5189 4D9E                          i2l6085 42AE  
                        i2l5293 4170                          i2l6405 0DF6                          i2l4807 4802  
                        i2l5279 413E                          i2l6511 11A8                          i2l6503 115E  
                        i2l6431 0EAC                          i2l6415 0E1C                          i2l5801 45B6  
                        i2l4809 4820                          i2l6089 42C4                          i2l5297 4180  
                        i2l6601 14E6                          i2l6521 11D4                          i2l6409 0E0A  
                        i2l6417 0E5C                          i2l5803 45BC                          i2l6523 11E4  
                        i2l6507 118E                          i2l6363 0CE8                          i2l5813 45DE  
                        i2l5821 45F8                          i2l6613 151E                          i2l6541 12AC  
                        i2l6533 121A                          i2l6517 11C8                          i2l6461 0FD4  
                        i2l6365 0CFA                          i2l5815 45E4                          i2l5807 45CA  
                        i2l6615 1522                          i2l6631 156A                          i2l6551 12E0  
                        i2l6527 11F0                          i2l6471 1046                          i2l6463 1002  
                        i2l6455 0FA0                          i2l6447 0F3C                          i2l6383 0D8C  
                        i2l6375 0D2E                          i2l6359 0CD6                          i2l5809 45D0  
                        i2l5913 3BD2                          i2l6641 15B0                          i2l6561 1348  
                        i2l6545 12B8                          i2l6529 11FE                          i2l6465 1012  
                        i2l6393 0DAE                          i2l6385 0D90                          i2l6369 0D00  
                        i2l5819 45F2                          i2l5835 4FEE                          i2l4795 47B6  
                        i2l5907 3BB4                          i2l5851 2CD4                          i2l6643 15B8  
                        i2l6547 12C6                          i2l6539 12A2                          i2l6491 1126  
                        i2l6475 106A                          i2l6459 0FC4                          i2l6395 0DB8  
                        i2l6387 0D94                          i2l6661 1608                          i2l6637 158C  
                        i2l6629 155A                          i2l6581 1460                          i2l6573 1432  
                        i2l6557 12F8                          i2l6485 10BE                          i2l6397 0DBE  
                        i2l6389 0D98                          i2l4799 47C4                          i2l5951 3C82  
                        i2l5935 3C44                          i2l5927 3C14                          i2l6655 15EC  
                        i2l6567 141C                          i2l6399 0DD0                          i2l6743 3894  
                        i2l5873 1D34                          i2l6657 15F4                          i2l6665 1622  
                        i2l6649 15D6                          i2l6569 1426                          i2l6489 1122  
                        i2l6681 1736                          i2l6737 3884                          i2l5947 3C72  
                        i2l5859 2D94                          i2l5891 1F28                          i2l5883 1DFC  
                        i2l6667 162E                          i2l6675 1710                          i2l6595 14BC  
                        i2l6763 38E0                          i2l6755 38BE                          i2l5797 45A8  
                        i2l5957 3C9A                          i2l5973 398C                          i2l6669 16A6  
                        i2l6677 1720                          i2l5959 3CA6                          i2l5967 3960  
                        i2l5879 1DD8                          i2l6679 1726                          i2l6599 14E2  
                        i2l6759 38CE                          i2l5897 1FCC                       ??i2_scale 0027  
                        u524_41 2DE4                          u525_41 2DF8                          u545_41 40FE  
                        u547_41 4126                          u660_41 41F2                          u646_41 3944  
                        u648_41 3970                          _TMR0IE 007F95                          _TMR0IF 007F92  
                     ??i2_putch 0005                          _TMR1IE 007CE8                          _TMR1IF 007CF0  
                        _TMR3IE 007D01                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9          __size_ofi2__tdiv_to_l_ 0132  
             _angleToPulse$1335 00E5                __end_of_lcdClear 53AE                  __CFG_XINST$OFF 000000  
                  i2_scale$1533 0027                __end_of__powers_ FEA7                          ___ftge 449C  
                     ??___aldiv 0088                       ??___almod 0096                          ___wmul 51E6  
                     ??___awdiv 008A                       ??___ftadd 00C0                  __CFG_STVREN$ON 000000  
                     ??___awmod 0084                       ??___ftdiv 0098                       ??___ftneg 0083  
                     ??___lldiv 0088                       ??___ftmul 00A7                       ??___llmod 0095  
                     ??___ftsub 00CC                       ??___fttol 00CA                          _fround 267A  
                        clear_0 5084                ___awdiv@quotient 008C                          _period 015C  
               ___awmod@divisor 0082                       ??_lcdHome 0084                 ___awmod@counter 0084  
                        _servos 018E                       ??_lcdInst 0082                          _printf 0012  
              __end_of_pinSetup 51A8                __end_of_setAngle 449C                  i2___awdiv@sign 000C  
             analogRead@channel 0080           ___ftmul@f3_as_product 00AB                       ??_initLCD 0084  
                     ??_isdigit 0080               __end_ofi2___awdiv 4BD0               __end_ofi2___ftadd 2F80  
             __end_ofi2___awmod 4DB6                  i2___ftadd@exp1 0039                  i2___ftadd@exp2 0038  
             __end_ofi2___ftneg 533C               __end_ofi2___lldiv 4C52               __end_ofi2___ftmul 41E2  
                 setAngle@angle 00EE               __end_ofi2___llmod 4E1C               __end_ofi2___ftsub 516A  
             __end_ofi2___fttol 42D6                  i2___ftadd@sign 0037                    __mediumconst FE30  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                 setAngle@motor 00EC                       ??_service 0068                  i2___awmod@sign 0006  
             __end_ofi2_lcdInst 5380               __end_ofi2_isdigit 539E                      __accesstop 0080  
       __end_of__initialization 5096                      ___altoft@c 0088                      ___ftadd@f1 00BA  
                    ___ftadd@f2 00BD             __size_ofi2___ftpack 00AE                  i2printf@tmpval 0056  
                    ___ftge@ff1 0080                      ___ftge@ff2 0083             __size_ofi2___lltoft 005C  
                 ___rparam_used 000001                      ___ftdiv@f1 0092                      ___ftdiv@f2 0095  
                    ___ftdiv@f3 009C                      ___ftneg@f1 0080                      ___awtoft@c 0088  
                i2___ftpack@arg 0001           __size_ofi2_startTimer 004C              i2__tdiv_to_l_@exp1 000F  
             i2___llmod@divisor 0012                  i2___ftpack@exp 0004              i2__tdiv_to_l_@cntr 000E  
             i2___llmod@counter 0016              i2__tdiv_to_l_@quot 000A                      ___ftmul@f1 00A1  
                    ___ftmul@f2 00A4                      ___ftsub@f1 00C6                      ___ftsub@f2 00C9  
                    ___fttol@f1 00C6            __end_of_happynewyear FEDF                  __pcstackCOMRAM 0001  
            i2___lldiv@dividend 0001           __size_of_angleToPulse 0166             __size_ofi2_lcdClear 0008  
                  __pidataBANK1 51A8                      ___lltoft@c 0088                   _cylinderMotor 0172  
                i2___ftmul@cntr 0022                   __end_of_scale 1C00                    ?_sortBattery 0001  
                i2___ftmul@sign 0023                   __end_of_putch 52F2                     i2printf@idx 004D  
                   i2printf@len 0050                     i2printf@exp 005A                     i2printf@val 005C  
                i2___fttol@exp1 0039                  i2___fttol@lval 0035                       ?i2___ftge 0001  
                     ?i2___wmul 000F                   i2__tdiv_to_l_ 3934              __size_of_lcdNibble 0078  
                    __div_to_l_ 311E                     i2putch@data 0005                       ?i2_fround 0024  
                     ?i2_printf 0040                 __div_to_l_@exp1 008B                 __div_to_l_@cntr 008A  
                       ??_scale 00B3                  i2___lltoft@exp 0011                 __div_to_l_@quot 0086  
                       ??_putch 0084              i2___lldiv@quotient 0009                    i2_startTimer 4FC8  
                    __pbssBANK0 00FE                      __pbssBANK1 0186                i2__tdiv_to_l_@f1 0001  
              i2__tdiv_to_l_@f2 0004                    _angleToPulse 32A6           __size_of_digitalWrite 0104  
            __size_of_initTimer 004E              __size_of_initServo 008E                      _analogRead 50E8  
                 __div_to_l_@f1 0080                   __div_to_l_@f2 0083                         ?___ftge 0080  
                  ?i2_lcdNibble 0001                         ?___wmul 008E           sortBattery@resolution 0124  
                     ?___altoft 0088                         ?_fround 00B0                      _lcdNewline 539E  
                     ?___awtoft 0088                       ?___ftpack 0080                         ?_printf 00D5  
                     ?___lltoft 0088                  ?i2__tdiv_to_l_ 0001                      ??i2___ftge 0007  
                    ??i2___wmul 0013  __size_of_servoInterruptService 0106   __end_of_servoInterruptService 3FEA  
                    ??i2_fround 0027               i2startTimer@timer 0007                       ?_lcdClear 0001  
              angleToPulse@a000 00E8                      ??i2_printf 0044                angleToPulse@a180 00E1  
                  _digitalWrite 3FEA                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7         __size_ofi2_digitalWrite 00C8                         i2_scale 1C00  
                       _V_LIM_C 014F                _nothingImportant 0154                         i2_putch 533C  
                     ?_pinSetup 0001                       ?_setAngle 00EC               __end_of_lcdNibble 4D46  
             __end_of__npowers_ FE80                         __Hparam 0000                      _scale$1338 00B3  
                       __Lparam 0000                         ___aldiv 3CBE                         ___almod 42D6  
               __size_of___ftge 00C8                         ___awdiv 462C                         ___ftadd 2926  
                       ___awmod 4854                      _readKeypad 524C                         ___ftdiv 356A  
                       ___ftneg 521C                         ___lldiv 46EA                 __size_of___wmul 0036  
                       ___ftmul 340C                         ___llmod 4994                         ___ftsub 4F7C  
                       ___fttol 36B6                      ??___altoft 008C                         __pcinit 505E  
                  ??i2___ftpack 0006                      ??___awtoft 008B                      ??___ftpack 0085  
               __size_of_fround 02AC         i2___ftmul@f3_as_product 001F                         __ramtop 1000  
                       _lcdHome 53AE                    ??i2___lltoft 000D                         _lcdInst 52A0  
                    ??___lltoft 008C                         __ptext0 23AA                         __ptext1 1FF0  
                       __ptext2 524C                         __ptext3 0012                         __ptext4 1752  
                       __ptext5 52CA                         __ptext6 539E                         __ptext7 5276  
                       __ptext8 267A                         __ptext9 51E6                 __size_of_printf 0CB8  
                       _padPin1 0176                         _padPin2 017A                         _padPin3 0196  
                 i2_fround$1531 002A                   i2_fround$1532 0027                   startTimer@val 0082  
                       _initLCD 5014               __end_of_hexpowers FEC7                     ?__div_to_l_ 0080  
                       _lastKey 007D               __end_of_initTimer 4F7C               __end_of_initServo 4B4C  
                 i2_isdigit$962 0002                         _dpowers FE31                    i2fround@prec 002D  
                       _isdigit 5276                ___awmod@dividend 0080                ___aldiv@dividend 0080  
                  ??i2_lcdClear 0005                      ??_lcdClear 0084                         _service 0008  
                __pintcode_body 37FA            end_of_initialization 5096                   __Lmediumconst FE30  
                       int_func 37FA             i2___wmul@multiplier 000F                  digitalRead@pin 0080  
                   ?_analogRead 0080              __end_ofi2___ftpack 4854                      ??_pinSetup 0080  
                    ??_setAngle 00F0              __end_ofi2___lltoft 4EDE                 ___lldiv@divisor 0084  
               ___lldiv@counter 008C                  setAngle@period 00F2                         printf@c 011D  
                       printf@f 00D5                ___aldiv@quotient 008A                         postdec1 000FE5  
                       postdec2 000FDD                 _batteryDetected 019E                         postinc0 000FEE  
                       postinc2 000FDE              __end_ofi2_lcdClear 53C6                  __tdiv_to_l_@f1 0080  
                __tdiv_to_l_@f2 0083                 ??i2__tdiv_to_l_ 0007                   ??_digitalRead 0082  
                   ?_lcdNewline 0001                   ??__tdiv_to_l_ 0086                       _PORTBbits 000F81  
          __size_of_sortBattery 03BA             _redirectAngle_OTHER 0164                    _happynewyear FED8  
            angleToPulse@offset 00DD              sortBattery@V_float 011E                       i2___awdiv 4B4C  
                     i2___ftadd 2DD4                       i2___awmod 4D46                       i2___ftneg 5318  
                     i2___lldiv 4BD0                       i2___ftmul 40EE                       i2___llmod 4DB6  
                     i2___ftsub 512A                       i2___fttol 41E2                      _startTimer 4EDE  
                     i2_lcdInst 535E                     ___ftdiv@exp 009F                     printf@width 0116  
            i2___llmod@dividend 000E              i2___awdiv@dividend 0007                 i2___ftpack@sign 0005  
                     i2_isdigit 5380             __size_of__div_to_l_ 0188                     ___ftmul@exp 00AA  
                   ?_readKeypad 0001                  __end_of___ftge 4564                  __end_of___wmul 521C  
          __size_ofi2_lcdNibble 0066                   i2lcdInst@data 0004                  __end_of_fround 2926  
              i2___wmul@product 0013                  __end_of_printf 0CCA                   i2_printf$1534 004A  
                  i2printf@flag 0065                    i2printf@fval 0060             __size_of_analogRead 0042  
                  i2printf@prec 0054             start_initialization 505E               __size_ofi2___ftge 0090  
           __end_of_digitalRead 3B96              i2___awdiv@quotient 000D               __size_ofi2___wmul 0026  
           __end_of__tdiv_to_l_ 311E                  initServo@angle 00F8                       i2printf@c 0067  
                     i2printf@f 0040                  initTimer@timer 0080                 i2___fttol@sign1 0034  
                initServo@motor 00F6               __size_ofi2_fround 0246                      ?i2___awdiv 0007  
                    ?i2___ftadd 002E                      ?i2___awmod 0001                      ?i2___ftneg 0001  
                    ?i2___lldiv 0001                      ?i2___ftmul 0015                      ?i2___llmod 000E  
                    ?i2___ftsub 003A                      ?i2___fttol 002B               __size_ofi2_printf 0A88  
                i2_digitalWrite 4564                      ?i2_lcdInst 0001             __size_of_lcdNewline 0008  
               ___llmod@divisor 0091                 ___llmod@counter 0095                      ?i2_isdigit 0001  
                      ??___ftge 0086                        ??___wmul 0092                     __pdataBANK1 0149  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 00B3                        ??_printf 00DF  
             __size_of___altoft 009E                      fround@prec 00B9                   ?i2__div_to_l_ 0001  
             __size_of___awtoft 0044               __size_of___ftpack 010C               __size_of___lltoft 007C  
                   __pbssCOMRAM 007B                   __pcstackBANK0 0080                   __pcstackBANK1 0100  
        __end_ofi2_digitalWrite 462C          sortBattery@targetAngle 0127                     ?_startTimer 0080  
             __size_of_lcdClear 0008             __size_of_readKeypad 002A                        ?i2_scale 0024  
                      ?i2_putch 0001               i2digitalWrite@pin 0007               i2digitalWrite@val 0009  
             __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003E               __size_of_setAngle 00D4  
                     __pintcode 0008                   __pmediumconst FE30                       _lcdNibble 4CCE  
                      ?___aldiv 0080                        ?___almod 008E                        ?___awdiv 0086  
                      ?___ftadd 00BA                        ?___awmod 0080                        ?___ftdiv 0092  
                      ?___ftneg 0080                        ?___lldiv 0080                        ?___ftmul 00A1  
                      ?___llmod 008D                        ?___ftsub 00C6                       __npowers_ FE59  
                      ?___fttol 00C6                   ?i2_lcdNewline 0001                     _digitalRead 3A66  
              ___almod@dividend 008E                        ?_lcdHome 0001                        ?_lcdInst 0001  
                   __tdiv_to_l_ 2F80                  ??i2__div_to_l_ 0007                    ??__div_to_l_ 0086  
                      ?_initLCD 0001                 startTimer@timer 0080                        ?_isdigit 0001  
                      ?_service 0001                       _hexpowers FEA7                       _initTimer 4F2E  
                     _initServo 4ABE                 ?i2_digitalWrite 0007           _servoInterruptService 3EE4  
                   ??i2___awdiv 000B                     ??i2___ftadd 0034                     ??i2___awmod 0005  
                   ??i2___ftneg 0004                     ??i2___lldiv 0009                     ??i2___ftmul 001B  
                __size_of_scale 04AE                     ??i2___llmod 0016                     ??i2___ftsub 0040  
                   ??i2___fttol 002F                  __size_of_putch 0028                        _AA_float 0166  
               ___aldiv@divisor 0084                     ??i2_lcdInst 0003                 ___aldiv@counter 0088  
                sortBattery@Vcc 0121                  ___wmul@product 0092                        _LATDbits 000F8C  
                  ??_analogRead 0084                     ??i2_isdigit 0001              __end_of__div_to_l_ 32A6  
                      i2u704_40 0EE4                        i2u704_45 0EDA                        i2u801_47 5350  
                      i2u626_44 458E                        i2u626_45 4588                        i2u802_47 5364  
                      i2u803_47 5376                        i2u804_47 4E34                        i2u805_47 4E42  
                      i2u662_40 422C                        i2u726_40 12D6                        i2u662_45 4224  
                      i2u806_47 4E68                        i2u807_47 4E76                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001                  _padAngle_CLOSE 0156                 i2__div_to_l_@f1 0001  
               i2__div_to_l_@f2 0004                   digitalWrite@p 0087                  ??i2_lcdNewline 0005  
                    service@key 007A                    ??_lcdNewline 0084             __size_of_startTimer 0050  
             angleToPulse@angle 00D5                 main@cylinderDur 0145               ___wmul@multiplier 008E  
                      i2___ftge 4A2E                        i2___wmul 52F2                   lcdNibble@data 0081  
                    printf@flag 011B                   lcdNibble@temp 0080                      printf@fval 0118  
                    printf@prec 010A               i2___awdiv@divisor 0009                        i2_fround 2B8E  
            __end_of_analogRead 512A                        _V_LIM_AA 014C                        _V_LIM_9V 0149  
             i2___awdiv@counter 000B                        i2_printf 0CCA                      ?_initTimer 0080  
                    ?_initServo 00F6               sortBattery@signal 0129                       copy_data0 5072  
            i2___awmod@dividend 0001                __size_ofi2_scale 03F0                __size_ofi2_putch 0022  
            __end_of_lcdNewline 53A6                   readKeypad@key 0080                        __Hrparam 0000  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080  
                 ??_sortBattery 00F6                __size_of___aldiv 011A                __size_of___almod 00F2  
              __size_of___awdiv 00BE                __size_of___ftadd 0268                __size_of___awmod 00A2  
              __size_of___ftdiv 014C                __size_of___ftneg 0030           i2___wmul@multiplicand 0011  
              __size_of___lldiv 00BC                        ___altoft 48F6                __size_of___ftmul 015E  
              __size_of___llmod 009A                __size_of___ftsub 004C                __size_of___fttol 0144  
                      ___awtoft 50A4                        ___ftpack 3DD8                     _fround$1336 00B6  
                   _fround$1337 00B3                     _cylinderDir 016E                        ___lltoft 4C52  
         __end_ofi2__tdiv_to_l_ 3A66                     _isdigit$962 0081                __size_of_lcdHome 0008  
              __size_of_lcdInst 002A                       setAngle@i 00F4                __size_of_initLCD 004A  
              __size_of_isdigit 002A          ?_servoInterruptService 0001                        _lcdClear 53A6  
                      __ptext10 4854                        __ptext11 462C                        __ptext20 53A6  
                      __ptext12 2F80                        __ptext21 3FEA                        __ptext13 311E  
                      __ptext30 36B6                        __ptext22 3A66                        __ptext14 4C52  
                      __ptext31 340C                        __ptext23 50E8                        __ptext15 4994  
                      __ptext40 4CCE                        __ptext32 356A                        __ptext24 516A  
                      __ptext16 46EA                        __ptext41 42D6                        __ptext33 2926  
                      __ptext25 53AE                        __ptext17 4F7C                        __ptext50 52F2  
                      __ptext42 3CBE                        __ptext34 50A4                        __ptext26 4ABE  
                      __ptext18 521C                        __ptext51 40EE                        __ptext35 48F6  
                      __ptext27 4EDE                        __ptext19 449C                        __ptext60 2DD4  
                      __ptext52 4B4C                        __ptext44 0CCA                        __ptext36 3DD8  
                      __ptext28 43C8                        __ptext61 47A6                        __ptext53 3934  
                      __ptext45 1C00                        __ptext37 4F2E                        __ptext29 32A6  
                      __ptext70 4D46                        __ptext62 5318                        __ptext54 3B96  
                      __ptext46 533C                        __ptext38 5014                        __ptext63 4A2E  
                      __ptext55 4E82                        __ptext47 53B6                        __ptext39 52A0  
                      __ptext64 53BE                        __ptext56 4DB6                        __ptext48 5380  
                      __ptext65 535E                        __ptext57 4BD0                        __ptext49 2B8E  
                      __ptext66 4E1C                        __ptext58 41E2                        __ptext67 3EE4  
                      __ptext59 512A                        __ptext68 4FC8                        __ptext69 4564  
                      __powers_ FE80                __size_of_service 392C                 i2startTimer@val 0009  
               ___almod@divisor 0092                   ?i2_startTimer 0007                        _padServo 017E  
               ___almod@counter 0096              __end_of_readKeypad 5276                   ?_angleToPulse 00D5  
                 __size_of_main 02D0            __end_ofi2__div_to_l_ 3CBE                        _pinSetup 516A  
                      _setAngle 43C8                        _prevTime 01A2                   ??i2_lcdNibble 0001  
                   ??_lcdNibble 0080                   _padAngle_OPEN 015A                        int$flags 007E  
                     printf@idx 0105                       printf@len 0106                       printf@exp 0110  
                     printf@val 0112                        main@prev 0147               i2___awmod@divisor 0003  
                     putch@data 0084               i2___awmod@counter 0005             __end_of_sortBattery 23AA  
                    _INTCONbits 000FF2                   ?_digitalWrite 0080                     ??_initTimer 0082  
                   ??_initServo 00FA                        isdigit@c 0082                        scale@scl 00B6  
                ??i2_startTimer 000D                    ??_startTimer 0086                        intlevel2 0000  
              __tdiv_to_l_@exp1 008E                __tdiv_to_l_@cntr 008D                  ??_angleToPulse 00D9  
          __end_ofi2_lcdNewline 53BE                __tdiv_to_l_@quot 0089                ___lldiv@dividend 0080  
              _redirectAngle_AA 0160                _redirectAngle_9V 015E                        printf@ap 0108  
                      printf@cp 0103                     lcdInst@data 0083                    ?_digitalRead 0080  
                  ?__tdiv_to_l_ 0080              __end_of_startTimer 4F2E                     _printf$1339 0100  
           __end_ofi2_lcdNibble 4E82                ??i2_digitalWrite 000B                ___lldiv@quotient 0088  
                ??_digitalWrite 0084                    ___aldiv@sign 0089                 _redirectAngle_C 0162  
              _padAngle_NEUTRAL 0158                 digitalWrite@pin 0080                 digitalWrite@val 0082  
             i2__div_to_l_@exp1 000C               i2__div_to_l_@cntr 000B                    ___almod@sign 0097  
             i2__div_to_l_@quot 0007  
