

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 13 14:51:26 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    90  0000                     
    91                           ; Version 1.40
    92                           ; Generated 01/12/2016 GMT
    93                           ; 
    94                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F4620 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     
   126                           	psect	idataCOMRAM
   127  003F76                     __pidataCOMRAM:
   128                           	opt stack 0
   129                           
   130                           ;initializer for _redirectAngle_C
   131  003F76  0050               	dw	80
   132                           
   133                           	psect	idataBANK1
   134  003D4A                     __pidataBANK1:
   135                           	opt stack 0
   136                           
   137                           ;initializer for _conveyorServo
   138  003D4A  0000               	dw	0
   139  003D4C  0002               	dw	2
   140  003D4E  0001               	dw	1
   141                           
   142                           ;initializer for _padServo
   143  003D50  0001               	dw	1
   144  003D52  0002               	dw	2
   145  003D54  0002               	dw	2
   146                           
   147                           ;initializer for _redirectingServo
   148  003D56  0003               	dw	3
   149  003D58  0002               	dw	2
   150  003D5A  0003               	dw	3
   151                           
   152                           ;initializer for _AA_float
   153  003D5C  0000               	dw	0
   154  003D5E  0003               	dw	3
   155                           
   156                           ;initializer for _cylinderMotor
   157  003D60  0002               	dw	2
   158  003D62  0000               	dw	0
   159                           
   160                           ;initializer for _padPin1
   161  003D64  0000               	dw	0
   162  003D66  0001               	dw	1
   163                           
   164                           ;initializer for _padPin2
   165  003D68  0000               	dw	0
   166  003D6A  0002               	dw	2
   167                           
   168                           ;initializer for _padAngle_CLOSE
   169  003D6C  0046               	dw	70
   170                           
   171                           ;initializer for _padAngle_NEUTRAL
   172  003D6E  005A               	dw	90
   173                           
   174                           ;initializer for _padAngle_OPEN
   175  003D70  00B4               	dw	180
   176                           
   177                           ;initializer for _redirectAngle_9V
   178  003D72  0064               	dw	100
   179                           
   180                           ;initializer for _redirectAngle_AA
   181  003D74  003C               	dw	60
   182                           
   183                           ;initializer for _redirectAngle_OTHER
   184  003D76  0078               	dw	120
   185                           
   186                           	psect	mediumconst
   187  00FDC0                     __pmediumconst:
   188                           	opt stack 0
   189  00FDC0  00                 	db	0
   190  00FDC1                     _dpowers:
   191                           	opt stack 0
   192  00FDC1  0001               	dw	1
   193  00FDC3  0000               	dw	0
   194  00FDC5  000A               	dw	10
   195  00FDC7  0000               	dw	0
   196  00FDC9  0064               	dw	100
   197  00FDCB  0000               	dw	0
   198  00FDCD  03E8               	dw	1000
   199  00FDCF  0000               	dw	0
   200  00FDD1  2710               	dw	10000
   201  00FDD3  0000               	dw	0
   202  00FDD5  86A0               	dw	34464
   203  00FDD7  0001               	dw	1
   204  00FDD9  4240               	dw	16960
   205  00FDDB  000F               	dw	15
   206  00FDDD  9680               	dw	38528
   207  00FDDF  0098               	dw	152
   208  00FDE1  E100               	dw	57600
   209  00FDE3  05F5               	dw	1525
   210  00FDE5  CA00               	dw	51712
   211  00FDE7  3B9A               	dw	15258
   212  00FDE9                     __end_of_dpowers:
   213                           	opt stack 0
   214  00FDE9                     __npowers_:
   215                           	opt stack 0
   216  00FDE9  00                 	db	0
   217  00FDEA  80                 	db	128
   218  00FDEB  3F                 	db	63
   219  00FDEC  CD                 	db	205
   220  00FDED  CC                 	db	204
   221  00FDEE  3D                 	db	61
   222  00FDEF  D7                 	db	215
   223  00FDF0  23                 	db	35
   224  00FDF1  3C                 	db	60
   225  00FDF2  12                 	db	18
   226  00FDF3  83                 	db	131
   227  00FDF4  3A                 	db	58
   228  00FDF5  B7                 	db	183
   229  00FDF6  D1                 	db	209
   230  00FDF7  38                 	db	56
   231  00FDF8  C6                 	db	198
   232  00FDF9  27                 	db	39
   233  00FDFA  37                 	db	55
   234  00FDFB  38                 	db	56
   235  00FDFC  86                 	db	134
   236  00FDFD  35                 	db	53
   237  00FDFE  C0                 	db	192
   238  00FDFF  D6                 	db	214
   239  00FE00  33                 	db	51
   240  00FE01  CC                 	db	204
   241  00FE02  2B                 	db	43
   242  00FE03  32                 	db	50
   243  00FE04  70                 	db	112
   244  00FE05  89                 	db	137
   245  00FE06  30                 	db	48
   246  00FE07  E7                 	db	231
   247  00FE08  DB                 	db	219
   248  00FE09  2E                 	db	46
   249  00FE0A  E5                 	db	229
   250  00FE0B  3C                 	db	60
   251  00FE0C  1E                 	db	30
   252  00FE0D  42                 	db	66
   253  00FE0E  A2                 	db	162
   254  00FE0F  0D                 	db	13
   255  00FE10                     __end_of__npowers_:
   256                           	opt stack 0
   257  00FE10                     __powers_:
   258                           	opt stack 0
   259  00FE10  00                 	db	0
   260  00FE11  80                 	db	128
   261  00FE12  3F                 	db	63
   262  00FE13  00                 	db	0
   263  00FE14  20                 	db	32
   264  00FE15  41                 	db	65
   265  00FE16  00                 	db	0
   266  00FE17  C8                 	db	200
   267  00FE18  42                 	db	66
   268  00FE19  00                 	db	0
   269  00FE1A  7A                 	db	122
   270  00FE1B  44                 	db	68
   271  00FE1C  40                 	db	64
   272  00FE1D  1C                 	db	28
   273  00FE1E  46                 	db	70
   274  00FE1F  50                 	db	80
   275  00FE20  C3                 	db	195
   276  00FE21  47                 	db	71
   277  00FE22  24                 	db	36
   278  00FE23  74                 	db	116
   279  00FE24  49                 	db	73
   280  00FE25  97                 	db	151
   281  00FE26  18                 	db	24
   282  00FE27  4B                 	db	75
   283  00FE28  BC                 	db	188
   284  00FE29  BE                 	db	190
   285  00FE2A  4C                 	db	76
   286  00FE2B  6B                 	db	107
   287  00FE2C  6E                 	db	110
   288  00FE2D  4E                 	db	78
   289  00FE2E  03                 	db	3
   290  00FE2F  15                 	db	21
   291  00FE30  50                 	db	80
   292  00FE31  79                 	db	121
   293  00FE32  AD                 	db	173
   294  00FE33  60                 	db	96
   295  00FE34  F3                 	db	243
   296  00FE35  49                 	db	73
   297  00FE36  71                 	db	113
   298  00FE37                     __end_of__powers_:
   299                           	opt stack 0
   300  00FE37                     _hexpowers:
   301                           	opt stack 0
   302  00FE37  0001               	dw	1
   303  00FE39  0000               	dw	0
   304  00FE3B  0010               	dw	16
   305  00FE3D  0000               	dw	0
   306  00FE3F  0100               	dw	256
   307  00FE41  0000               	dw	0
   308  00FE43  1000               	dw	4096
   309  00FE45  0000               	dw	0
   310  00FE47  0000               	dw	0
   311  00FE49  0001               	dw	1
   312  00FE4B  0000               	dw	0
   313  00FE4D  0010               	dw	16
   314  00FE4F  0000               	dw	0
   315  00FE51  0100               	dw	256
   316  00FE53  0000               	dw	0
   317  00FE55  1000               	dw	4096
   318  00FE57                     __end_of_hexpowers:
   319                           	opt stack 0
   320  00FE57                     _keys:
   321                           	opt stack 0
   322  00FE57  31                 	db	49
   323  00FE58  32                 	db	50
   324  00FE59  33                 	db	51
   325  00FE5A  41                 	db	65
   326  00FE5B  34                 	db	52
   327  00FE5C  35                 	db	53
   328  00FE5D  36                 	db	54
   329  00FE5E  42                 	db	66
   330  00FE5F  37                 	db	55
   331  00FE60  38                 	db	56
   332  00FE61  39                 	db	57
   333  00FE62  43                 	db	67
   334  00FE63  2A                 	db	42
   335  00FE64  30                 	db	48
   336  00FE65  23                 	db	35
   337  00FE66  44                 	db	68
   338  00FE67  00                 	db	0
   339  00FE68                     __end_of_keys:
   340                           	opt stack 0
   341  00FE68                     _happynewyear:
   342                           	opt stack 0
   343  00FE68  45                 	db	69
   344  00FE69  59                 	db	89
   345  00FE6A  23                 	db	35
   346  00FE6B  07                 	db	7
   347  00FE6C  31                 	db	49
   348  00FE6D  12                 	db	18
   349  00FE6E  16                 	db	22
   350  00FE6F                     __end_of_happynewyear:
   351                           	opt stack 0
   352  0000                     _ADCON0	set	4034
   353  0000                     _ADCON1	set	4033
   354  0000                     _ADCON2	set	4032
   355  0000                     _ADRESH	set	4036
   356  0000                     _ADRESL	set	4035
   357  0000                     _EEADR	set	4009
   358  0000                     _EEADRH	set	4010
   359  0000                     _EECON1	set	4006
   360  0000                     _EECON2	set	4007
   361  0000                     _EEDATA	set	4008
   362  0000                     _INTCONbits	set	4082
   363  0000                     _LATA	set	3977
   364  0000                     _LATB	set	3978
   365  0000                     _LATC	set	3979
   366  0000                     _LATD	set	3980
   367  0000                     _LATDbits	set	3980
   368  0000                     _LATE	set	3981
   369  0000                     _PORTA	set	3968
   370  0000                     _PORTB	set	3969
   371  0000                     _PORTBbits	set	3969
   372  0000                     _PORTC	set	3970
   373  0000                     _PORTD	set	3971
   374  0000                     _SSPADD	set	4040
   375  0000                     _SSPBUF	set	4041
   376  0000                     _SSPCON1	set	4038
   377  0000                     _SSPCON2	set	4037
   378  0000                     _SSPSTAT	set	4039
   379  0000                     _T0CON	set	4053
   380  0000                     _T1CON	set	4045
   381  0000                     _T2CON	set	4042
   382  0000                     _T3CON	set	4017
   383  0000                     _TMR0H	set	4055
   384  0000                     _TMR0L	set	4054
   385  0000                     _TMR1H	set	4047
   386  0000                     _TMR1L	set	4046
   387  0000                     _TMR3H	set	4019
   388  0000                     _TMR3L	set	4018
   389  0000                     _TRISA	set	3986
   390  0000                     _TRISB	set	3987
   391  0000                     _TRISC	set	3988
   392  0000                     _TRISD	set	3989
   393  0000                     _TRISE	set	3990
   394  0000                     _ACKDT	set	32301
   395  0000                     _ACKEN	set	32300
   396  0000                     _EEIF	set	32012
   397  0000                     _INT0IE	set	32660
   398  0000                     _INT0IF	set	32657
   399  0000                     _INT1IF	set	32640
   400  0000                     _PEIE	set	32662
   401  0000                     _PEN	set	32298
   402  0000                     _RCEN	set	32299
   403  0000                     _RSEN	set	32297
   404  0000                     _SEN	set	32296
   405  0000                     _TMR0IE	set	32661
   406  0000                     _TMR0IF	set	32658
   407  0000                     _TMR1IE	set	31976
   408  0000                     _TMR1IF	set	31984
   409  0000                     _TMR2IF	set	31985
   410  0000                     _TMR3IE	set	32001
   411  0000                     _TMR3IF	set	32009
   412  0000                     _TRISC3	set	31907
   413  0000                     _TRISC4	set	31908
   414  00FE6F                     STR_9:
   415  00FE6F  63                 	db	99	;'c'
   416  00FE70  6F                 	db	111	;'o'
   417  00FE71  6E                 	db	110	;'n'
   418  00FE72  76                 	db	118	;'v'
   419  00FE73  65                 	db	101	;'e'
   420  00FE74  79                 	db	121	;'y'
   421  00FE75  6F                 	db	111	;'o'
   422  00FE76  72                 	db	114	;'r'
   423  00FE77  20                 	db	32
   424  00FE78  26                 	db	38
   425  00FE79  20                 	db	32
   426  00FE7A  63                 	db	99	;'c'
   427  00FE7B  79                 	db	121	;'y'
   428  00FE7C  6C                 	db	108	;'l'
   429  00FE7D  69                 	db	105	;'i'
   430  00FE7E  6E                 	db	110	;'n'
   431  00FE7F  64                 	db	100	;'d'
   432  00FE80  65                 	db	101	;'e'
   433  00FE81  72                 	db	114	;'r'
   434  00FE82  20                 	db	32
   435  00FE83  6F                 	db	111	;'o'
   436  00FE84  6E                 	db	110	;'n'
   437  00FE85  3F                 	db	63	;'?'
   438  00FE86  00                 	db	0
   439  00FE87                     STR_6:
   440  00FE87  73                 	db	115	;'s'
   441  00FE88  65                 	db	101	;'e'
   442  00FE89  74                 	db	116	;'t'
   443  00FE8A  20                 	db	32
   444  00FE8B  72                 	db	114	;'r'
   445  00FE8C  65                 	db	101	;'e'
   446  00FE8D  64                 	db	100	;'d'
   447  00FE8E  69                 	db	105	;'i'
   448  00FE8F  72                 	db	114	;'r'
   449  00FE90  65                 	db	101	;'e'
   450  00FE91  63                 	db	99	;'c'
   451  00FE92  74                 	db	116	;'t'
   452  00FE93  20                 	db	32
   453  00FE94  61                 	db	97	;'a'
   454  00FE95  6E                 	db	110	;'n'
   455  00FE96  67                 	db	103	;'g'
   456  00FE97  6C                 	db	108	;'l'
   457  00FE98  65                 	db	101	;'e'
   458  00FE99  3F                 	db	63	;'?'
   459  00FE9A  00                 	db	0
   460  00FE9B                     STR_3:
   461  00FE9B  69                 	db	105	;'i'
   462  00FE9C  6E                 	db	110	;'n'
   463  00FE9D  74                 	db	116	;'t'
   464  00FE9E  65                 	db	101	;'e'
   465  00FE9F  72                 	db	114	;'r'
   466  00FEA0  72                 	db	114	;'r'
   467  00FEA1  75                 	db	117	;'u'
   468  00FEA2  70                 	db	112	;'p'
   469  00FEA3  74                 	db	116	;'t'
   470  00FEA4  21                 	db	33
   471  00FEA5  21                 	db	33
   472  00FEA6  21                 	db	33
   473  00FEA7  0A                 	db	10
   474  00FEA8  63                 	db	99	;'c'
   475  00FEA9  6C                 	db	108	;'l'
   476  00FEAA  6F                 	db	111	;'o'
   477  00FEAB  73                 	db	115	;'s'
   478  00FEAC  65                 	db	101	;'e'
   479  00FEAD  3F                 	db	63	;'?'
   480  00FEAE  00                 	db	0
   481  00FEAF                     STR_1:
   482  00FEAF  20                 	db	32
   483  00FEB0  25                 	db	37
   484  00FEB1  30                 	db	48	;'0'
   485  00FEB2  32                 	db	50	;'2'
   486  00FEB3  78                 	db	120	;'x'
   487  00FEB4  20                 	db	32
   488  00FEB5  3A                 	db	58	;':'
   489  00FEB6  20                 	db	32
   490  00FEB7  25                 	db	37
   491  00FEB8  30                 	db	48	;'0'
   492  00FEB9  32                 	db	50	;'2'
   493  00FEBA  78                 	db	120	;'x'
   494  00FEBB  20                 	db	32
   495  00FEBC  3A                 	db	58	;':'
   496  00FEBD  20                 	db	32
   497  00FEBE  25                 	db	37
   498  00FEBF  30                 	db	48	;'0'
   499  00FEC0  32                 	db	50	;'2'
   500  00FEC1  78                 	db	120	;'x'
   501  00FEC2  00                 	db	0
   502  00FEC3                     STR_18:
   503  00FEC3  25                 	db	37
   504  00FEC4  63                 	db	99	;'c'
   505  00FEC5  29                 	db	41
   506  00FEC6  20                 	db	32
   507  00FEC7  74                 	db	116	;'t'
   508  00FEC8  69                 	db	105	;'i'
   509  00FEC9  6D                 	db	109	;'m'
   510  00FECA  65                 	db	101	;'e'
   511  00FECB  20                 	db	32
   512  00FECC  20                 	db	32
   513  00FECD  3C                 	db	60	;'<'
   514  00FECE  41                 	db	65	;'A'
   515  00FECF  20                 	db	32
   516  00FED0  20                 	db	32
   517  00FED1  20                 	db	32
   518  00FED2  20                 	db	32
   519  00FED3  20                 	db	32
   520  00FED4  0A                 	db	10
   521  00FED5  00                 	db	0
   522  00FED6                     STR_14:
   523  00FED6  73                 	db	115	;'s'
   524  00FED7  74                 	db	116	;'t'
   525  00FED8  61                 	db	97	;'a'
   526  00FED9  72                 	db	114	;'r'
   527  00FEDA  74                 	db	116	;'t'
   528  00FEDB  20                 	db	32
   529  00FEDC  20                 	db	32
   530  00FEDD  20                 	db	32
   531  00FEDE  3C                 	db	60	;'<'
   532  00FEDF  42                 	db	66	;'B'
   533  00FEE0  20                 	db	32
   534  00FEE1  20                 	db	32
   535  00FEE2  20                 	db	32
   536  00FEE3  20                 	db	32
   537  00FEE4  20                 	db	32
   538  00FEE5  20                 	db	32
   539  00FEE6  0A                 	db	10
   540  00FEE7  00                 	db	0
   541  00FEE8                     STR_12:
   542  00FEE8  20                 	db	32
   543  00FEE9  20                 	db	32
   544  00FEEA  68                 	db	104	;'h'
   545  00FEEB  68                 	db	104	;'h'
   546  00FEEC  3A                 	db	58	;':'
   547  00FEED  6D                 	db	109	;'m'
   548  00FEEE  6D                 	db	109	;'m'
   549  00FEEF  3A                 	db	58	;':'
   550  00FEF0  73                 	db	115	;'s'
   551  00FEF1  73                 	db	115	;'s'
   552  00FEF2  20                 	db	32
   553  00FEF3  20                 	db	32
   554  00FEF4  20                 	db	32
   555  00FEF5  20                 	db	32
   556  00FEF6  20                 	db	32
   557  00FEF7  20                 	db	32
   558  00FEF8  0A                 	db	10
   559  00FEF9  00                 	db	0
   560  00FEFA                     STR_16:
   561  00FEFA  73                 	db	115	;'s'
   562  00FEFB  65                 	db	101	;'e'
   563  00FEFC  6C                 	db	108	;'l'
   564  00FEFD  65                 	db	101	;'e'
   565  00FEFE  63                 	db	99	;'c'
   566  00FEFF  74                 	db	116	;'t'
   567  00FF00  20                 	db	32
   568  00FF01  72                 	db	114	;'r'
   569  00FF02  75                 	db	117	;'u'
   570  00FF03  6E                 	db	110	;'n'
   571  00FF04  3A                 	db	58	;':'
   572  00FF05  20                 	db	32
   573  00FF06  20                 	db	32
   574  00FF07  20                 	db	32
   575  00FF08  20                 	db	32
   576  00FF09  20                 	db	32
   577  00FF0A  0A                 	db	10
   578  00FF0B  00                 	db	0
   579  00FF0C                     STR_20:
   580  00FF0C  74                 	db	116	;'t'
   581  00FF0D  69                 	db	105	;'i'
   582  00FF0E  6D                 	db	109	;'m'
   583  00FF0F  65                 	db	101	;'e'
   584  00FF10  3A                 	db	58	;':'
   585  00FF11  20                 	db	32
   586  00FF12  6E                 	db	110	;'n'
   587  00FF13  6E                 	db	110	;'n'
   588  00FF14  6E                 	db	110	;'n'
   589  00FF15  20                 	db	32
   590  00FF16  73                 	db	115	;'s'
   591  00FF17  65                 	db	101	;'e'
   592  00FF18  63                 	db	99	;'c'
   593  00FF19  20                 	db	32
   594  00FF1A  20                 	db	32
   595  00FF1B  20                 	db	32
   596  00FF1C  0A                 	db	10
   597  00FF1D  00                 	db	0
   598  00FF1E                     STR_22:
   599  00FF1E  5B                 	db	91	;'['
   600  00FF1F  41                 	db	65	;'A'
   601  00FF20  41                 	db	65	;'A'
   602  00FF21  2C                 	db	44
   603  00FF22  39                 	db	57	;'9'
   604  00FF23  56                 	db	86	;'V'
   605  00FF24  2C                 	db	44
   606  00FF25  43                 	db	67	;'C'
   607  00FF26  2C                 	db	44
   608  00FF27  6F                 	db	111	;'o'
   609  00FF28  74                 	db	116	;'t'
   610  00FF29  68                 	db	104	;'h'
   611  00FF2A  65                 	db	101	;'e'
   612  00FF2B  72                 	db	114	;'r'
   613  00FF2C  5D                 	db	93	;']'
   614  00FF2D  20                 	db	32
   615  00FF2E  0A                 	db	10
   616  00FF2F  00                 	db	0
   617  00FF30                     STR_24:
   618  00FF30  30                 	db	48	;'0'
   619  00FF31  31                 	db	49	;'1'
   620  00FF32  32                 	db	50	;'2'
   621  00FF33  33                 	db	51	;'3'
   622  00FF34  34                 	db	52	;'4'
   623  00FF35  35                 	db	53	;'5'
   624  00FF36  36                 	db	54	;'6'
   625  00FF37  37                 	db	55	;'7'
   626  00FF38  38                 	db	56	;'8'
   627  00FF39  39                 	db	57	;'9'
   628  00FF3A  61                 	db	97	;'a'
   629  00FF3B  62                 	db	98	;'b'
   630  00FF3C  63                 	db	99	;'c'
   631  00FF3D  64                 	db	100	;'d'
   632  00FF3E  65                 	db	101	;'e'
   633  00FF3F  66                 	db	102	;'f'
   634  00FF40  00                 	db	0
   635  00FF41                     STR_21:
   636  00FF41  20                 	db	32
   637  00FF42  20                 	db	32
   638  00FF43  20                 	db	32
   639  00FF44  20                 	db	32
   640  00FF45  20                 	db	32
   641  00FF46  20                 	db	32
   642  00FF47  20                 	db	32
   643  00FF48  20                 	db	32
   644  00FF49  20                 	db	32
   645  00FF4A  20                 	db	32
   646  00FF4B  20                 	db	32
   647  00FF4C  20                 	db	32
   648  00FF4D  20                 	db	32
   649  00FF4E  20                 	db	32
   650  00FF4F  2A                 	db	42
   651  00FF50  3E                 	db	62	;'>'
   652  00FF51  00                 	db	0
   653  00FF52                     STR_17:
   654  00FF52  5B                 	db	91	;'['
   655  00FF53  31                 	db	49	;'1'
   656  00FF54  2C                 	db	44
   657  00FF55  32                 	db	50	;'2'
   658  00FF56  2C                 	db	44
   659  00FF57  33                 	db	51	;'3'
   660  00FF58  2C                 	db	44
   661  00FF59  34                 	db	52	;'4'
   662  00FF5A  5D                 	db	93	;']'
   663  00FF5B  20                 	db	32
   664  00FF5C  20                 	db	32
   665  00FF5D  20                 	db	32
   666  00FF5E  20                 	db	32
   667  00FF5F  20                 	db	32
   668  00FF60  2A                 	db	42
   669  00FF61  3E                 	db	62	;'>'
   670  00FF62  00                 	db	0
   671  00FF63                     STR_15:
   672  00FF63  68                 	db	104	;'h'
   673  00FF64  69                 	db	105	;'i'
   674  00FF65  73                 	db	115	;'s'
   675  00FF66  74                 	db	116	;'t'
   676  00FF67  6F                 	db	111	;'o'
   677  00FF68  72                 	db	114	;'r'
   678  00FF69  79                 	db	121	;'y'
   679  00FF6A  20                 	db	32
   680  00FF6B  3C                 	db	60	;'<'
   681  00FF6C  43                 	db	67	;'C'
   682  00FF6D  20                 	db	32
   683  00FF6E  20                 	db	32
   684  00FF6F  20                 	db	32
   685  00FF70  20                 	db	32
   686  00FF71  2A                 	db	42
   687  00FF72  3E                 	db	62	;'>'
   688  00FF73  00                 	db	0
   689  00FF74                     STR_19:
   690  00FF74  20                 	db	32
   691  00FF75  20                 	db	32
   692  00FF76  20                 	db	32
   693  00FF77  73                 	db	115	;'s'
   694  00FF78  74                 	db	116	;'t'
   695  00FF79  61                 	db	97	;'a'
   696  00FF7A  74                 	db	116	;'t'
   697  00FF7B  73                 	db	115	;'s'
   698  00FF7C  20                 	db	32
   699  00FF7D  3C                 	db	60	;'<'
   700  00FF7E  42                 	db	66	;'B'
   701  00FF7F  20                 	db	32
   702  00FF80  20                 	db	32
   703  00FF81  20                 	db	32
   704  00FF82  2A                 	db	42
   705  00FF83  3E                 	db	62	;'>'
   706  00FF84  00                 	db	0
   707  00FF85                     STR_23:
   708  00FF85  5B                 	db	91	;'['
   709  00FF86  6E                 	db	110	;'n'
   710  00FF87  6E                 	db	110	;'n'
   711  00FF88  2C                 	db	44
   712  00FF89  6E                 	db	110	;'n'
   713  00FF8A  2C                 	db	44
   714  00FF8B  6E                 	db	110	;'n'
   715  00FF8C  2C                 	db	44
   716  00FF8D  6E                 	db	110	;'n'
   717  00FF8E  6E                 	db	110	;'n'
   718  00FF8F  5D                 	db	93	;']'
   719  00FF90  20                 	db	32
   720  00FF91  20                 	db	32
   721  00FF92  20                 	db	32
   722  00FF93  2A                 	db	42
   723  00FF94  3E                 	db	62	;'>'
   724  00FF95  00                 	db	0
   725  00FF96                     STR_13:
   726  00FF96  20                 	db	32
   727  00FF97  20                 	db	32
   728  00FF98  6D                 	db	109	;'m'
   729  00FF99  6D                 	db	109	;'m'
   730  00FF9A  3A                 	db	58	;':'
   731  00FF9B  64                 	db	100	;'d'
   732  00FF9C  64                 	db	100	;'d'
   733  00FF9D  3A                 	db	58	;':'
   734  00FF9E  79                 	db	121	;'y'
   735  00FF9F  79                 	db	121	;'y'
   736  00FFA0  20                 	db	32
   737  00FFA1  20                 	db	32
   738  00FFA2  20                 	db	32
   739  00FFA3  20                 	db	32
   740  00FFA4  41                 	db	65	;'A'
   741  00FFA5  3E                 	db	62	;'>'
   742  00FFA6  00                 	db	0
   743  00FFA7                     STR_7:
   744  00FFA7  72                 	db	114	;'r'
   745  00FFA8  65                 	db	101	;'e'
   746  00FFA9  6C                 	db	108	;'l'
   747  00FFAA  65                 	db	101	;'e'
   748  00FFAB  61                 	db	97	;'a'
   749  00FFAC  73                 	db	115	;'s'
   750  00FFAD  65                 	db	101	;'e'
   751  00FFAE  20                 	db	32
   752  00FFAF  62                 	db	98	;'b'
   753  00FFB0  61                 	db	97	;'a'
   754  00FFB1  74                 	db	116	;'t'
   755  00FFB2  74                 	db	116	;'t'
   756  00FFB3  65                 	db	101	;'e'
   757  00FFB4  72                 	db	114	;'r'
   758  00FFB5  79                 	db	121	;'y'
   759  00FFB6  3F                 	db	63	;'?'
   760  00FFB7  00                 	db	0
   761  00FFB8                     STR_5:
   762  00FFB8  74                 	db	116	;'t'
   763  00FFB9  61                 	db	97	;'a'
   764  00FFBA  72                 	db	114	;'r'
   765  00FFBB  67                 	db	103	;'g'
   766  00FFBC  65                 	db	101	;'e'
   767  00FFBD  74                 	db	116	;'t'
   768  00FFBE  3A                 	db	58	;':'
   769  00FFBF  20                 	db	32
   770  00FFC0  25                 	db	37
   771  00FFC1  64                 	db	100	;'d'
   772  00FFC2  0A                 	db	10
   773  00FFC3  56                 	db	86	;'V'
   774  00FFC4  3A                 	db	58	;':'
   775  00FFC5  20                 	db	32
   776  00FFC6  25                 	db	37
   777  00FFC7  66                 	db	102	;'f'
   778  00FFC8  00                 	db	0
   779  00FFC9                     STR_8:
   780  00FFC9  72                 	db	114	;'r'
   781  00FFCA  65                 	db	101	;'e'
   782  00FFCB  73                 	db	115	;'s'
   783  00FFCC  65                 	db	101	;'e'
   784  00FFCD  74                 	db	116	;'t'
   785  00FFCE  20                 	db	32
   786  00FFCF  74                 	db	116	;'t'
   787  00FFD0  68                 	db	104	;'h'
   788  00FFD1  65                 	db	101	;'e'
   789  00FFD2  20                 	db	32
   790  00FFD3  70                 	db	112	;'p'
   791  00FFD4  61                 	db	97	;'a'
   792  00FFD5  64                 	db	100	;'d'
   793  00FFD6  3F                 	db	63	;'?'
   794  00FFD7  00                 	db	0
   795  00FFD8                     STR_4:
   796  00FFD8  72                 	db	114	;'r'
   797  00FFD9  65                 	db	101	;'e'
   798  00FFDA  61                 	db	97	;'a'
   799  00FFDB  64                 	db	100	;'d'
   800  00FFDC  20                 	db	32
   801  00FFDD  76                 	db	118	;'v'
   802  00FFDE  6F                 	db	111	;'o'
   803  00FFDF  6C                 	db	108	;'l'
   804  00FFE0  74                 	db	116	;'t'
   805  00FFE1  61                 	db	97	;'a'
   806  00FFE2  67                 	db	103	;'g'
   807  00FFE3  65                 	db	101	;'e'
   808  00FFE4  3F                 	db	63	;'?'
   809  00FFE5  00                 	db	0
   810  00FFE6  5B                 	db	91	;'['
   811  00FFE7  25                 	db	37
   812  00FFE8  78                 	db	120	;'x'
   813  00FFE9  20                 	db	32
   814  00FFEA  25                 	db	37
   815  00FFEB  78                 	db	120	;'x'
   816  00FFEC  5D                 	db	93	;']'
   817  00FFED  0A                 	db	10
   818  00FFEE  00                 	db	0
   819  00FFEF  74                 	db	116	;'t'
   820  00FFF0  31                 	db	49	;'1'
   821  00FFF1  3A                 	db	58	;':'
   822  00FFF2  20                 	db	32
   823  00FFF3  25                 	db	37
   824  00FFF4  78                 	db	120	;'x'
   825  00FFF5  20                 	db	32
   826  00FFF6  00                 	db	0
   827  00FFF7                     STR_2:
   828  00FFF7  72                 	db	114	;'r'
   829  00FFF8  75                 	db	117	;'u'
   830  00FFF9  6E                 	db	110	;'n'
   831  00FFFA  6E                 	db	110	;'n'
   832  00FFFB  69                 	db	105	;'i'
   833  00FFFC  6E                 	db	110	;'n'
   834  00FFFD  67                 	db	103	;'g'
   835  00FFFE  00                 	db	0
   836                           
   837                           ; #config settings
   838  00FFFF  00                 	db	0	; dummy byte at the end
   839  0000                     
   840                           	psect	cinit
   841  00399E                     __pcinit:
   842                           	opt stack 0
   843  00399E                     start_initialization:
   844                           	opt stack 0
   845  00399E                     __initialization:
   846                           	opt stack 0
   847                           
   848                           ; Initialize objects allocated to BANK1 (46 bytes)
   849                           ; load TBLPTR registers with __pidataBANK1
   850  00399E  0E4A               	movlw	low __pidataBANK1
   851  0039A0  6EF6               	movwf	tblptrl,c
   852  0039A2  0E3D               	movlw	high __pidataBANK1
   853  0039A4  6EF7               	movwf	tblptrh,c
   854  0039A6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   855  0039A8  6EF8               	movwf	tblptru,c
   856  0039AA  EE01  F061         	lfsr	0,__pdataBANK1
   857  0039AE  EE10 F02E          	lfsr	1,46
   858  0039B2                     copy_data0:
   859  0039B2  0009               	tblrd		*+
   860  0039B4  CFF5 FFEE          	movff	tablat,postinc0
   861  0039B8  50E5               	movf	postdec1,w,c
   862  0039BA  50E1               	movf	fsr1l,w,c
   863  0039BC  E1FA               	bnz	copy_data0
   864                           
   865                           ; Initialize objects allocated to COMRAM (2 bytes)
   866                           ; load TBLPTR registers with __pidataCOMRAM
   867  0039BE  0E76               	movlw	low __pidataCOMRAM
   868  0039C0  6EF6               	movwf	tblptrl,c
   869  0039C2  0E3F               	movlw	high __pidataCOMRAM
   870  0039C4  6EF7               	movwf	tblptrh,c
   871  0039C6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   872  0039C8  6EF8               	movwf	tblptru,c
   873  0039CA  0009               	tblrd		*+	;fetch initializer
   874  0039CC  CFF5 F076          	movff	tablat,__pdataCOMRAM
   875  0039D0  0009               	tblrd		*+	;fetch initializer
   876  0039D2  CFF5 F077          	movff	tablat,__pdataCOMRAM+1
   877                           
   878                           ; Clear objects allocated to BANK1 (47 bytes)
   879  0039D6  EE01  F032         	lfsr	0,__pbssBANK1
   880  0039DA  0E2F               	movlw	47
   881  0039DC                     clear_0:
   882  0039DC  6AEE               	clrf	postinc0,c
   883  0039DE  06E8               	decf	wreg,f,c
   884  0039E0  E1FD               	bnz	clear_0
   885  0039E2                     end_of_initialization:
   886                           	opt stack 0
   887  0039E2                     __end_of__initialization:
   888                           	opt stack 0
   889  0039E2  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   890  0039E4  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   891  0039E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   892  0039E8  6EF8               	movwf	tblptru,c
   893  0039EA  0100               	movlb	0
   894  0039EC  EFA2  F019         	goto	_main	;jump to C main() function
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1l	equ	0xFE1
   903                           
   904                           	psect	dataCOMRAM
   905  000076                     __pdataCOMRAM:
   906                           	opt stack 0
   907  000076                     _redirectAngle_C:
   908                           	opt stack 0
   909  000076                     	ds	2
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           postinc0	equ	0xFEE
   915                           wreg	equ	0xFE8
   916                           postdec1	equ	0xFE5
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK1
   920  000132                     __pbssBANK1:
   921                           	opt stack 0
   922  000132                     _pulse:
   923                           	opt stack 0
   924  000132                     	ds	16
   925  000142                     _pin:
   926                           	opt stack 0
   927  000142                     	ds	8
   928  00014A                     _port:
   929                           	opt stack 0
   930  00014A                     	ds	8
   931  000152                     _padPin3:
   932                           	opt stack 0
   933  000152                     	ds	4
   934  000156                     _V_LIM_9V:
   935                           	opt stack 0
   936  000156                     	ds	3
   937  000159                     _V_LIM_AA:
   938                           	opt stack 0
   939  000159                     	ds	3
   940  00015C                     _V_LIM_C:
   941                           	opt stack 0
   942  00015C                     	ds	3
   943  00015F                     _switchFlag:
   944                           	opt stack 0
   945  00015F                     	ds	2
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1l	equ	0xFE1
   954                           
   955                           	psect	dataBANK1
   956  000161                     __pdataBANK1:
   957                           	opt stack 0
   958  000161                     _conveyorServo:
   959                           	opt stack 0
   960  000161                     	ds	6
   961  000167                     _padServo:
   962                           	opt stack 0
   963  000167                     	ds	6
   964  00016D                     _redirectingServo:
   965                           	opt stack 0
   966  00016D                     	ds	6
   967  000173                     _AA_float:
   968                           	opt stack 0
   969  000173                     	ds	4
   970  000177                     _cylinderMotor:
   971                           	opt stack 0
   972  000177                     	ds	4
   973  00017B                     _padPin1:
   974                           	opt stack 0
   975  00017B                     	ds	4
   976  00017F                     _padPin2:
   977                           	opt stack 0
   978  00017F                     	ds	4
   979  000183                     _padAngle_CLOSE:
   980                           	opt stack 0
   981  000183                     	ds	2
   982  000185                     _padAngle_NEUTRAL:
   983                           	opt stack 0
   984  000185                     	ds	2
   985  000187                     _padAngle_OPEN:
   986                           	opt stack 0
   987  000187                     	ds	2
   988  000189                     _redirectAngle_9V:
   989                           	opt stack 0
   990  000189                     	ds	2
   991  00018B                     _redirectAngle_AA:
   992                           	opt stack 0
   993  00018B                     	ds	2
   994  00018D                     _redirectAngle_OTHER:
   995                           	opt stack 0
   996  00018D                     	ds	2
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006                           	psect	cstackBANK1
  1007  000100                     __pcstackBANK1:
  1008                           	opt stack 0
  1009  000100                     _printf$1340:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x0
  1013  000100                     	ds	3
  1014  000103                     printf@cp:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x3
  1018  000103                     	ds	2
  1019  000105                     printf@idx:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x5
  1023  000105                     	ds	1
  1024  000106                     printf@len:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x6
  1028  000106                     	ds	2
  1029  000108                     printf@ap:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x8
  1033  000108                     	ds	2
  1034  00010A                     printf@prec:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0xA
  1038  00010A                     	ds	2
  1039  00010C                     printf@tmpval:
  1040                           	opt stack 0
  1041                           
  1042                           ; 4 bytes @ 0xC
  1043  00010C                     	ds	4
  1044  000110                     printf@exp:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x10
  1048  000110                     	ds	2
  1049  000112                     printf@val:
  1050                           	opt stack 0
  1051                           
  1052                           ; 4 bytes @ 0x12
  1053  000112                     	ds	4
  1054  000116                     printf@flag:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x16
  1058  000116                     	ds	2
  1059  000118                     printf@fval:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x18
  1063  000118                     	ds	3
  1064  00011B                     printf@width:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x1B
  1068  00011B                     	ds	2
  1069  00011D                     printf@c:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x1D
  1073  00011D                     	ds	1
  1074  00011E                     sortBattery@V_float:
  1075                           	opt stack 0
  1076                           
  1077                           ; 3 bytes @ 0x1E
  1078  00011E                     	ds	3
  1079  000121                     sortBattery@Vcc:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x21
  1083  000121                     	ds	3
  1084  000124                     sortBattery@resolution:
  1085                           	opt stack 0
  1086                           
  1087                           ; 3 bytes @ 0x24
  1088  000124                     	ds	3
  1089  000127                     sortBattery@targetAngle:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x27
  1093  000127                     	ds	2
  1094  000129                     sortBattery@signal:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x29
  1098  000129                     	ds	2
  1099  00012B                     sortBattery@V:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x2B
  1103  00012B                     	ds	3
  1104  00012E                     ??_main:
  1105                           
  1106                           ; 1 bytes @ 0x2E
  1107  00012E                     	ds	2
  1108  000130                     main@t:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x30
  1112  000130                     	ds	2
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postdec1	equ	0xFE5
  1120                           fsr1l	equ	0xFE1
  1121                           
  1122                           	psect	cstackBANK0
  1123  000080                     __pcstackBANK0:
  1124                           	opt stack 0
  1125  000080                     ??_isdigit:
  1126  000080                     ??_I2C_Master_Wait:
  1127  000080                     ?_digitalRead:
  1128                           	opt stack 0
  1129  000080                     ?___awmod:
  1130                           	opt stack 0
  1131  000080                     ?___ftpack:
  1132                           	opt stack 0
  1133  000080                     ?___ftneg:
  1134                           	opt stack 0
  1135  000080                     ?_analogRead:
  1136                           	opt stack 0
  1137  000080                     ?__tdiv_to_l_:
  1138                           	opt stack 0
  1139  000080                     ?__div_to_l_:
  1140                           	opt stack 0
  1141  000080                     ?___lldiv:
  1142                           	opt stack 0
  1143  000080                     lcdNibble@temp:
  1144                           	opt stack 0
  1145  000080                     readKeypad@key:
  1146                           	opt stack 0
  1147  000080                     digitalRead@port:
  1148                           	opt stack 0
  1149  000080                     digitalWrite@port:
  1150                           	opt stack 0
  1151  000080                     analogRead@channel:
  1152                           	opt stack 0
  1153  000080                     initTimer@timer:
  1154                           	opt stack 0
  1155  000080                     startTimer@timer:
  1156                           	opt stack 0
  1157  000080                     stopServo@timer:
  1158                           	opt stack 0
  1159  000080                     ___awmod@dividend:
  1160                           	opt stack 0
  1161  000080                     __div_to_l_@f1:
  1162                           	opt stack 0
  1163  000080                     ___ftpack@arg:
  1164                           	opt stack 0
  1165  000080                     __tdiv_to_l_@f1:
  1166                           	opt stack 0
  1167  000080                     ___ftge@ff1:
  1168                           	opt stack 0
  1169  000080                     ___ftneg@f1:
  1170                           	opt stack 0
  1171  000080                     ___lldiv@dividend:
  1172                           	opt stack 0
  1173                           
  1174                           ; 4 bytes @ 0x0
  1175  000080                     	ds	1
  1176  000081                     lcdNibble@data:
  1177                           	opt stack 0
  1178  000081                     I2C_Master_Read@a:
  1179                           	opt stack 0
  1180  000081                     _isdigit$973:
  1181                           	opt stack 0
  1182  000081                     I2C_Master_Write@d:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x1
  1186  000081                     	ds	1
  1187  000082                     ??_stopServo:
  1188  000082                     ??_lcdInst:
  1189  000082                     ??_initTimer:
  1190  000082                     I2C_Master_Read@temp:
  1191                           	opt stack 0
  1192  000082                     isdigit@c:
  1193                           	opt stack 0
  1194  000082                     digitalRead@pin:
  1195                           	opt stack 0
  1196  000082                     digitalWrite@pin:
  1197                           	opt stack 0
  1198  000082                     ___awmod@divisor:
  1199                           	opt stack 0
  1200  000082                     startTimer@val:
  1201                           	opt stack 0
  1202                           
  1203                           ; 4 bytes @ 0x2
  1204  000082                     	ds	1
  1205  000083                     ?_getTime:
  1206                           	opt stack 0
  1207  000083                     lcdInst@data:
  1208                           	opt stack 0
  1209  000083                     ___ftpack@exp:
  1210                           	opt stack 0
  1211  000083                     __div_to_l_@f2:
  1212                           	opt stack 0
  1213  000083                     __tdiv_to_l_@f2:
  1214                           	opt stack 0
  1215  000083                     ___ftge@ff2:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x3
  1219  000083                     	ds	1
  1220  000084                     ??_initLCD:
  1221  000084                     ??_digitalRead:
  1222  000084                     ??_analogRead:
  1223  000084                     putch@data:
  1224                           	opt stack 0
  1225  000084                     ___awmod@counter:
  1226                           	opt stack 0
  1227  000084                     ___ftpack@sign:
  1228                           	opt stack 0
  1229  000084                     digitalWrite@val:
  1230                           	opt stack 0
  1231  000084                     ___lldiv@divisor:
  1232                           	opt stack 0
  1233                           
  1234                           ; 4 bytes @ 0x4
  1235  000084                     	ds	1
  1236  000085                     ??_getTime:
  1237  000085                     ??___ftpack:
  1238  000085                     ___awmod@sign:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0x5
  1242  000085                     	ds	1
  1243  000086                     ??_digitalWrite:
  1244  000086                     ??__tdiv_to_l_:
  1245  000086                     ??_startTimer:
  1246  000086                     ??___ftge:
  1247  000086                     ?___awdiv:
  1248                           	opt stack 0
  1249  000086                     ___awdiv@dividend:
  1250                           	opt stack 0
  1251  000086                     __div_to_l_@quot:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x6
  1255  000086                     	ds	1
  1256  000087                     getTime@time:
  1257                           	opt stack 0
  1258                           
  1259                           ; 14 bytes @ 0x7
  1260  000087                     	ds	1
  1261  000088                     ?___altoft:
  1262                           	opt stack 0
  1263  000088                     ?___awtoft:
  1264                           	opt stack 0
  1265  000088                     ?___lltoft:
  1266                           	opt stack 0
  1267  000088                     ___awdiv@divisor:
  1268                           	opt stack 0
  1269  000088                     ___awtoft@c:
  1270                           	opt stack 0
  1271  000088                     ___altoft@c:
  1272                           	opt stack 0
  1273  000088                     ___lldiv@quotient:
  1274                           	opt stack 0
  1275  000088                     ___lltoft@c:
  1276                           	opt stack 0
  1277                           
  1278                           ; 4 bytes @ 0x8
  1279  000088                     	ds	1
  1280  000089                     __tdiv_to_l_@quot:
  1281                           	opt stack 0
  1282                           
  1283                           ; 4 bytes @ 0x9
  1284  000089                     	ds	1
  1285  00008A                     ___awdiv@counter:
  1286                           	opt stack 0
  1287  00008A                     __div_to_l_@cntr:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0xA
  1291  00008A                     	ds	1
  1292  00008B                     ___awdiv@sign:
  1293                           	opt stack 0
  1294  00008B                     ___awtoft@sign:
  1295                           	opt stack 0
  1296  00008B                     __div_to_l_@exp1:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0xB
  1300  00008B                     	ds	1
  1301  00008C                     ??___altoft:
  1302  00008C                     ??___lltoft:
  1303  00008C                     ___lldiv@counter:
  1304                           	opt stack 0
  1305  00008C                     ___awdiv@quotient:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0xC
  1309  00008C                     	ds	1
  1310  00008D                     ?___llmod:
  1311                           	opt stack 0
  1312  00008D                     __tdiv_to_l_@cntr:
  1313                           	opt stack 0
  1314  00008D                     I2C_Master_Init@c:
  1315                           	opt stack 0
  1316  00008D                     ___llmod@dividend:
  1317                           	opt stack 0
  1318                           
  1319                           ; 4 bytes @ 0xD
  1320  00008D                     	ds	1
  1321  00008E                     ?___wmul:
  1322                           	opt stack 0
  1323  00008E                     __tdiv_to_l_@exp1:
  1324                           	opt stack 0
  1325  00008E                     ___wmul@multiplier:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0xE
  1329  00008E                     	ds	2
  1330  000090                     ___altoft@exp:
  1331                           	opt stack 0
  1332  000090                     ___lltoft@exp:
  1333                           	opt stack 0
  1334  000090                     ___wmul@multiplicand:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x10
  1338  000090                     	ds	1
  1339  000091                     ??_I2C_Master_Init:
  1340  000091                     ___altoft@sign:
  1341                           	opt stack 0
  1342  000091                     ___llmod@divisor:
  1343                           	opt stack 0
  1344                           
  1345                           ; 4 bytes @ 0x11
  1346  000091                     	ds	1
  1347  000092                     ?___ftdiv:
  1348                           	opt stack 0
  1349  000092                     ___wmul@product:
  1350                           	opt stack 0
  1351  000092                     ___ftdiv@f1:
  1352                           	opt stack 0
  1353                           
  1354                           ; 3 bytes @ 0x12
  1355  000092                     	ds	3
  1356  000095                     getTime@i:
  1357                           	opt stack 0
  1358  000095                     ___llmod@counter:
  1359                           	opt stack 0
  1360  000095                     ___ftdiv@f2:
  1361                           	opt stack 0
  1362                           
  1363                           ; 3 bytes @ 0x15
  1364  000095                     	ds	3
  1365  000098                     ??___ftdiv:
  1366                           
  1367                           ; 1 bytes @ 0x18
  1368  000098                     	ds	3
  1369  00009B                     ___ftdiv@cntr:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x1B
  1373  00009B                     	ds	1
  1374  00009C                     ___ftdiv@f3:
  1375                           	opt stack 0
  1376                           
  1377                           ; 3 bytes @ 0x1C
  1378  00009C                     	ds	3
  1379  00009F                     ___ftdiv@exp:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x1F
  1383  00009F                     	ds	1
  1384  0000A0                     ___ftdiv@sign:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x20
  1388  0000A0                     	ds	1
  1389  0000A1                     ?___ftmul:
  1390                           	opt stack 0
  1391  0000A1                     ___ftmul@f1:
  1392                           	opt stack 0
  1393                           
  1394                           ; 3 bytes @ 0x21
  1395  0000A1                     	ds	3
  1396  0000A4                     ___ftmul@f2:
  1397                           	opt stack 0
  1398                           
  1399                           ; 3 bytes @ 0x24
  1400  0000A4                     	ds	3
  1401  0000A7                     ??___ftmul:
  1402                           
  1403                           ; 1 bytes @ 0x27
  1404  0000A7                     	ds	3
  1405  0000AA                     ___ftmul@exp:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x2A
  1409  0000AA                     	ds	1
  1410  0000AB                     ___ftmul@f3_as_product:
  1411                           	opt stack 0
  1412                           
  1413                           ; 3 bytes @ 0x2B
  1414  0000AB                     	ds	3
  1415  0000AE                     ___ftmul@cntr:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x2E
  1419  0000AE                     	ds	1
  1420  0000AF                     ___ftmul@sign:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x2F
  1424  0000AF                     	ds	1
  1425  0000B0                     ?_fround:
  1426                           	opt stack 0
  1427  0000B0                     ?_scale:
  1428                           	opt stack 0
  1429                           
  1430                           ; 3 bytes @ 0x30
  1431  0000B0                     	ds	3
  1432  0000B3                     _fround$1338:
  1433                           	opt stack 0
  1434  0000B3                     _scale$1339:
  1435                           	opt stack 0
  1436                           
  1437                           ; 3 bytes @ 0x33
  1438  0000B3                     	ds	3
  1439  0000B6                     scale@scl:
  1440                           	opt stack 0
  1441  0000B6                     _fround$1337:
  1442                           	opt stack 0
  1443                           
  1444                           ; 3 bytes @ 0x36
  1445  0000B6                     	ds	3
  1446  0000B9                     fround@prec:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x39
  1450  0000B9                     	ds	1
  1451  0000BA                     ?___ftadd:
  1452                           	opt stack 0
  1453  0000BA                     ___ftadd@f1:
  1454                           	opt stack 0
  1455                           
  1456                           ; 3 bytes @ 0x3A
  1457  0000BA                     	ds	3
  1458  0000BD                     ___ftadd@f2:
  1459                           	opt stack 0
  1460                           
  1461                           ; 3 bytes @ 0x3D
  1462  0000BD                     	ds	3
  1463  0000C0                     ??___ftadd:
  1464                           
  1465                           ; 1 bytes @ 0x40
  1466  0000C0                     	ds	3
  1467  0000C3                     ___ftadd@sign:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x43
  1471  0000C3                     	ds	1
  1472  0000C4                     ___ftadd@exp2:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x44
  1476  0000C4                     	ds	1
  1477  0000C5                     ___ftadd@exp1:
  1478                           	opt stack 0
  1479                           
  1480                           ; 1 bytes @ 0x45
  1481  0000C5                     	ds	1
  1482  0000C6                     ?___ftsub:
  1483                           	opt stack 0
  1484  0000C6                     ?___fttol:
  1485                           	opt stack 0
  1486  0000C6                     ___ftsub@f1:
  1487                           	opt stack 0
  1488  0000C6                     ___fttol@f1:
  1489                           	opt stack 0
  1490                           
  1491                           ; 3 bytes @ 0x46
  1492  0000C6                     	ds	3
  1493  0000C9                     ___ftsub@f2:
  1494                           	opt stack 0
  1495                           
  1496                           ; 3 bytes @ 0x49
  1497  0000C9                     	ds	1
  1498  0000CA                     ??___fttol:
  1499                           
  1500                           ; 1 bytes @ 0x4A
  1501  0000CA                     	ds	2
  1502  0000CC                     
  1503                           ; 1 bytes @ 0x4C
  1504  0000CC                     	ds	3
  1505  0000CF                     ___fttol@sign1:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x4F
  1509  0000CF                     	ds	1
  1510  0000D0                     ___fttol@lval:
  1511                           	opt stack 0
  1512                           
  1513                           ; 4 bytes @ 0x50
  1514  0000D0                     	ds	4
  1515  0000D4                     ___fttol@exp1:
  1516                           	opt stack 0
  1517                           
  1518                           ; 1 bytes @ 0x54
  1519  0000D4                     	ds	1
  1520  0000D5                     ?_printf:
  1521                           	opt stack 0
  1522  0000D5                     ?_angleToPulse:
  1523                           	opt stack 0
  1524  0000D5                     angleToPulse@angle:
  1525                           	opt stack 0
  1526  0000D5                     printf@f:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x55
  1530  0000D5                     	ds	4
  1531  0000D9                     ??_angleToPulse:
  1532                           
  1533                           ; 1 bytes @ 0x59
  1534  0000D9                     	ds	4
  1535  0000DD                     ??_printf:
  1536  0000DD                     angleToPulse@offset:
  1537                           	opt stack 0
  1538                           
  1539                           ; 4 bytes @ 0x5D
  1540  0000DD                     	ds	4
  1541  0000E1                     angleToPulse@a180:
  1542                           	opt stack 0
  1543                           
  1544                           ; 4 bytes @ 0x61
  1545  0000E1                     	ds	2
  1546  0000E3                     runMenu@key:
  1547                           	opt stack 0
  1548  0000E3                     pause@message:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x63
  1552  0000E3                     	ds	1
  1553  0000E4                     showInterface@key:
  1554                           	opt stack 0
  1555                           
  1556                           ; 1 bytes @ 0x64
  1557  0000E4                     	ds	1
  1558  0000E5                     _angleToPulse$1336:
  1559                           	opt stack 0
  1560                           
  1561                           ; 3 bytes @ 0x65
  1562  0000E5                     	ds	3
  1563  0000E8                     angleToPulse@a000:
  1564                           	opt stack 0
  1565                           
  1566                           ; 4 bytes @ 0x68
  1567  0000E8                     	ds	4
  1568  0000EC                     setAngle@timer:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x6C
  1572  0000EC                     	ds	2
  1573  0000EE                     setAngle@angle:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x6E
  1577  0000EE                     	ds	2
  1578  0000F0                     ??_setAngle:
  1579                           
  1580                           ; 1 bytes @ 0x70
  1581  0000F0                     	ds	6
  1582  0000F6                     initServo@timer:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x76
  1586  0000F6                     	ds	2
  1587  0000F8                     initServo@po:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x78
  1591  0000F8                     	ds	2
  1592  0000FA                     initServo@pi:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x7A
  1596  0000FA                     	ds	2
  1597  0000FC                     initServo@angle:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x7C
  1601  0000FC                     	ds	2
  1602  0000FE                     ??_sortBattery:
  1603                           
  1604                           ; 1 bytes @ 0x7E
  1605  0000FE                     	ds	2
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1l	equ	0xFE1
  1614                           
  1615                           	psect	cstackCOMRAM
  1616  000001                     __pcstackCOMRAM:
  1617                           	opt stack 0
  1618  000001                     ?i2_digitalRead:
  1619                           	opt stack 0
  1620  000001                     ?i2___ftpack:
  1621                           	opt stack 0
  1622  000001                     i2digitalRead@port:
  1623                           	opt stack 0
  1624  000001                     i2digitalWrite@port:
  1625                           	opt stack 0
  1626  000001                     i2startTimer@timer:
  1627                           	opt stack 0
  1628  000001                     i2___ftpack@arg:
  1629                           	opt stack 0
  1630                           
  1631                           ; 3 bytes @ 0x0
  1632  000001                     	ds	2
  1633  000003                     i2digitalRead@pin:
  1634                           	opt stack 0
  1635  000003                     i2digitalWrite@pin:
  1636                           	opt stack 0
  1637  000003                     i2startTimer@val:
  1638                           	opt stack 0
  1639                           
  1640                           ; 4 bytes @ 0x2
  1641  000003                     	ds	1
  1642  000004                     i2___ftpack@exp:
  1643                           	opt stack 0
  1644                           
  1645                           ; 1 bytes @ 0x3
  1646  000004                     	ds	1
  1647  000005                     ??i2_digitalRead:
  1648  000005                     i2___ftpack@sign:
  1649                           	opt stack 0
  1650  000005                     i2digitalWrite@val:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x4
  1654  000005                     	ds	1
  1655  000006                     ??i2___ftpack:
  1656                           
  1657                           ; 1 bytes @ 0x5
  1658  000006                     	ds	1
  1659  000007                     ??i2_digitalWrite:
  1660  000007                     ??i2_startTimer:
  1661                           
  1662                           ; 1 bytes @ 0x6
  1663  000007                     	ds	2
  1664  000009                     ?i2___altoft:
  1665                           	opt stack 0
  1666  000009                     ?i2___awtoft:
  1667                           	opt stack 0
  1668  000009                     i2___awtoft@c:
  1669                           	opt stack 0
  1670  000009                     i2___altoft@c:
  1671                           	opt stack 0
  1672                           
  1673                           ; 4 bytes @ 0x8
  1674  000009                     	ds	1
  1675  00000A                     ??_servoInterruptService:
  1676                           
  1677                           ; 1 bytes @ 0x9
  1678  00000A                     	ds	2
  1679  00000C                     i2___awtoft@sign:
  1680                           	opt stack 0
  1681  00000C                     servoInterruptService@flags:
  1682                           	opt stack 0
  1683                           
  1684                           ; 8 bytes @ 0xB
  1685  00000C                     	ds	1
  1686  00000D                     ??i2___altoft:
  1687  00000D                     ?i2___ftdiv:
  1688                           	opt stack 0
  1689  00000D                     i2___ftdiv@f1:
  1690                           	opt stack 0
  1691                           
  1692                           ; 3 bytes @ 0xC
  1693  00000D                     	ds	3
  1694  000010                     i2___ftdiv@f2:
  1695                           	opt stack 0
  1696                           
  1697                           ; 3 bytes @ 0xF
  1698  000010                     	ds	1
  1699  000011                     i2___altoft@exp:
  1700                           	opt stack 0
  1701                           
  1702                           ; 1 bytes @ 0x10
  1703  000011                     	ds	1
  1704  000012                     i2___altoft@sign:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x11
  1708  000012                     	ds	1
  1709  000013                     ??i2___ftdiv:
  1710                           
  1711                           ; 1 bytes @ 0x12
  1712  000013                     	ds	1
  1713  000014                     servoInterruptService@i:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x13
  1717  000014                     	ds	2
  1718  000016                     i2___ftdiv@cntr:
  1719                           	opt stack 0
  1720                           
  1721                           ; 1 bytes @ 0x15
  1722  000016                     	ds	1
  1723  000017                     i2___ftdiv@f3:
  1724                           	opt stack 0
  1725                           
  1726                           ; 3 bytes @ 0x16
  1727  000017                     	ds	3
  1728  00001A                     i2___ftdiv@exp:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x19
  1732  00001A                     	ds	1
  1733  00001B                     i2___ftdiv@sign:
  1734                           	opt stack 0
  1735                           
  1736                           ; 1 bytes @ 0x1A
  1737  00001B                     	ds	1
  1738  00001C                     ?i2___ftmul:
  1739                           	opt stack 0
  1740  00001C                     i2___ftmul@f1:
  1741                           	opt stack 0
  1742                           
  1743                           ; 3 bytes @ 0x1B
  1744  00001C                     	ds	3
  1745  00001F                     i2___ftmul@f2:
  1746                           	opt stack 0
  1747                           
  1748                           ; 3 bytes @ 0x1E
  1749  00001F                     	ds	3
  1750  000022                     ??i2___ftmul:
  1751                           
  1752                           ; 1 bytes @ 0x21
  1753  000022                     	ds	3
  1754  000025                     i2___ftmul@exp:
  1755                           	opt stack 0
  1756                           
  1757                           ; 1 bytes @ 0x24
  1758  000025                     	ds	1
  1759  000026                     i2___ftmul@f3_as_product:
  1760                           	opt stack 0
  1761                           
  1762                           ; 3 bytes @ 0x25
  1763  000026                     	ds	3
  1764  000029                     i2___ftmul@cntr:
  1765                           	opt stack 0
  1766                           
  1767                           ; 1 bytes @ 0x28
  1768  000029                     	ds	1
  1769  00002A                     i2___ftmul@sign:
  1770                           	opt stack 0
  1771                           
  1772                           ; 1 bytes @ 0x29
  1773  00002A                     	ds	1
  1774  00002B                     ?i2___ftadd:
  1775                           	opt stack 0
  1776  00002B                     i2___ftadd@f1:
  1777                           	opt stack 0
  1778                           
  1779                           ; 3 bytes @ 0x2A
  1780  00002B                     	ds	3
  1781  00002E                     i2___ftadd@f2:
  1782                           	opt stack 0
  1783                           
  1784                           ; 3 bytes @ 0x2D
  1785  00002E                     	ds	3
  1786  000031                     ??i2___ftadd:
  1787                           
  1788                           ; 1 bytes @ 0x30
  1789  000031                     	ds	3
  1790  000034                     i2___ftadd@sign:
  1791                           	opt stack 0
  1792                           
  1793                           ; 1 bytes @ 0x33
  1794  000034                     	ds	1
  1795  000035                     i2___ftadd@exp2:
  1796                           	opt stack 0
  1797                           
  1798                           ; 1 bytes @ 0x34
  1799  000035                     	ds	1
  1800  000036                     i2___ftadd@exp1:
  1801                           	opt stack 0
  1802                           
  1803                           ; 1 bytes @ 0x35
  1804  000036                     	ds	1
  1805  000037                     ?i2___fttol:
  1806                           	opt stack 0
  1807  000037                     i2___fttol@f1:
  1808                           	opt stack 0
  1809                           
  1810                           ; 3 bytes @ 0x36
  1811  000037                     	ds	4
  1812  00003B                     ??i2___fttol:
  1813                           
  1814                           ; 1 bytes @ 0x3A
  1815  00003B                     	ds	5
  1816  000040                     i2___fttol@sign1:
  1817                           	opt stack 0
  1818                           
  1819                           ; 1 bytes @ 0x3F
  1820  000040                     	ds	1
  1821  000041                     i2___fttol@lval:
  1822                           	opt stack 0
  1823                           
  1824                           ; 4 bytes @ 0x40
  1825  000041                     	ds	4
  1826  000045                     i2___fttol@exp1:
  1827                           	opt stack 0
  1828                           
  1829                           ; 1 bytes @ 0x44
  1830  000045                     	ds	1
  1831  000046                     ?i2_angleToPulse:
  1832                           	opt stack 0
  1833  000046                     i2angleToPulse@angle:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x45
  1837  000046                     	ds	4
  1838  00004A                     ??i2_angleToPulse:
  1839                           
  1840                           ; 1 bytes @ 0x49
  1841  00004A                     	ds	4
  1842  00004E                     i2angleToPulse@offset:
  1843                           	opt stack 0
  1844                           
  1845                           ; 4 bytes @ 0x4D
  1846  00004E                     	ds	4
  1847  000052                     i2angleToPulse@a180:
  1848                           	opt stack 0
  1849                           
  1850                           ; 4 bytes @ 0x51
  1851  000052                     	ds	4
  1852  000056                     i2_angleToPulse$1432:
  1853                           	opt stack 0
  1854                           
  1855                           ; 3 bytes @ 0x55
  1856  000056                     	ds	3
  1857  000059                     i2angleToPulse@a000:
  1858                           	opt stack 0
  1859                           
  1860                           ; 4 bytes @ 0x58
  1861  000059                     	ds	4
  1862  00005D                     i2setAngle@timer:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x5C
  1866  00005D                     	ds	2
  1867  00005F                     i2setAngle@angle:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x5E
  1871  00005F                     	ds	2
  1872  000061                     ??i2_setAngle:
  1873                           
  1874                           ; 1 bytes @ 0x60
  1875  000061                     	ds	6
  1876  000067                     ??_service:
  1877                           
  1878                           ; 1 bytes @ 0x66
  1879  000067                     	ds	14
  1880  000075                     service@key:
  1881                           	opt stack 0
  1882                           
  1883                           ; 1 bytes @ 0x74
  1884  000075                     	ds	1
  1885                           tblptru	equ	0xFF8
  1886                           tblptrh	equ	0xFF7
  1887                           tblptrl	equ	0xFF6
  1888                           tablat	equ	0xFF5
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           
  1894 ;;
  1895 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1896 ;;
  1897 ;; *************** function _main *****************
  1898 ;; Defined at:
  1899 ;;		line 58 in file "main.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  t               2   48[BANK1 ] PTR int 
  1904 ;;		 -> getTime@time(14), 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;Total ram usage:        4 bytes
  1919 ;; Hardware stack levels required when called:   12
  1920 ;; This function calls:
  1921 ;;		_getTime
  1922 ;;		_initLCD
  1923 ;;		_initRTC
  1924 ;;		_initServo
  1925 ;;		_lcdClear
  1926 ;;		_pinSetup
  1927 ;;		_printf
  1928 ;;		_showInterface
  1929 ;;		_sortBattery
  1930 ;; This function is called by:
  1931 ;;		Startup code after reset
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text0
  1936  003344                     __ptext0:
  1937                           	opt stack 0
  1938  003344                     _main:
  1939                           	opt stack 19
  1940                           
  1941                           ;main.c: 59: pinSetup();
  1942                           
  1943                           ;incstack = 0
  1944  003344  EC1E  F01E         	call	_pinSetup	;wreg free
  1945                           
  1946                           ;main.c: 60: initLCD();
  1947  003348  ECB6  F01D         	call	_initLCD	;wreg free
  1948                           
  1949                           ;main.c: 61: initRTC();
  1950  00334C  EC85  F01F         	call	_initRTC	;wreg free
  1951  003350                     l5504:
  1952                           
  1953                           ;main.c: 65: int* t = getTime();
  1954  003350  ECE1  F01A         	call	_getTime	;wreg free
  1955  003354  C083  F130         	movff	?_getTime,main@t
  1956  003358  C084  F131         	movff	?_getTime+1,main@t+1
  1957                           
  1958                           ;main.c: 66: lcdClear();
  1959  00335C  ECAF  F01F         	call	_lcdClear	;wreg free
  1960                           
  1961                           ;main.c: 67: printf(" %02x : %02x : %02x",t[2],t[1],t[0]);
  1962  003360  0EAF               	movlw	low STR_1
  1963  003362  0100               	movlb	0	; () banked
  1964  003364  6FD5               	movwf	printf@f& (0+255),b
  1965  003366  0EFE               	movlw	high STR_1
  1966  003368  0100               	movlb	0	; () banked
  1967  00336A  6FD6               	movwf	(printf@f+1)& (0+255),b
  1968  00336C  0101               	movlb	1	; () banked
  1969  00336E  EE20 F004          	lfsr	2,4
  1970  003372  5130               	movf	main@t& (0+255),w,b
  1971  003374  26D9               	addwf	fsr2l,f,c
  1972  003376  5131               	movf	(main@t+1)& (0+255),w,b
  1973  003378  22DA               	addwfc	fsr2h,f,c
  1974  00337A  CFDE F0D7          	movff	postinc2,?_printf+2
  1975  00337E  CFDD F0D8          	movff	postdec2,?_printf+3
  1976  003382  0101               	movlb	1	; () banked
  1977  003384  EE20 F002          	lfsr	2,2
  1978  003388  5130               	movf	main@t& (0+255),w,b
  1979  00338A  26D9               	addwf	fsr2l,f,c
  1980  00338C  5131               	movf	(main@t+1)& (0+255),w,b
  1981  00338E  22DA               	addwfc	fsr2h,f,c
  1982  003390  CFDE F0D9          	movff	postinc2,?_printf+4
  1983  003394  CFDD F0DA          	movff	postdec2,?_printf+5
  1984  003398  C130  FFD9         	movff	main@t,fsr2l
  1985  00339C  C131  FFDA         	movff	main@t+1,fsr2h
  1986  0033A0  CFDE F0DB          	movff	postinc2,?_printf+6
  1987  0033A4  CFDD F0DC          	movff	postdec2,?_printf+7
  1988  0033A8  EC09  F000         	call	_printf	;wreg free
  1989                           
  1990                           ;main.c: 68: _delay((unsigned long)((100)*(10000000/4000.0)));
  1991  0033AC  0E02               	movlw	2
  1992  0033AE  0101               	movlb	1	; () banked
  1993  0033B0  6F2F               	movwf	(??_main+1)& (0+255),b
  1994  0033B2  0E45               	movlw	69
  1995  0033B4  0101               	movlb	1	; () banked
  1996  0033B6  6F2E               	movwf	??_main& (0+255),b
  1997  0033B8  0EA9               	movlw	169
  1998  0033BA                     u5887:
  1999  0033BA  2EE8               	decfsz	wreg,f,c
  2000  0033BC  D7FE               	bra	u5887
  2001  0033BE  2F2E               	decfsz	??_main& (0+255),f,b
  2002  0033C0  D7FC               	bra	u5887
  2003  0033C2  2F2F               	decfsz	(??_main+1)& (0+255),f,b
  2004  0033C4  D7FA               	bra	u5887
  2005  0033C6  D000               	nop2	
  2006  0033C8  D7C3               	goto	l5504
  2007  0033CA                     l5526:
  2008  0033CA  0101               	movlb	1	; () banked
  2009  0033CC  515F               	movf	_switchFlag& (0+255),w,b
  2010  0033CE  0101               	movlb	1	; () banked
  2011  0033D0  1160               	iorwf	(_switchFlag+1)& (0+255),w,b
  2012  0033D2  B4D8               	btfsc	status,2,c
  2013  0033D4  D7FA               	goto	l5526
  2014                           
  2015                           ; BSR set to: 1
  2016                           ;main.c: 88: }
  2017                           ;main.c: 90: sortBattery();
  2018                           
  2019                           ; BSR set to: 1
  2020  0033D6  EC94  F008         	call	_sortBattery	;wreg free
  2021                           
  2022                           ;main.c: 93: switchFlag = 0;
  2023  0033DA  0E00               	movlw	0
  2024  0033DC  0101               	movlb	1	; () banked
  2025  0033DE  6F60               	movwf	(_switchFlag+1)& (0+255),b
  2026  0033E0  0E00               	movlw	0
  2027  0033E2  6F5F               	movwf	_switchFlag& (0+255),b
  2028                           
  2029                           ; BSR set to: 1
  2030  0033E4  D7F2               	goto	l5526
  2031  0033E6                     l123:
  2032  0033E6  D7FF               	goto	l123
  2033  0033E8                     __end_of_main:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           postinc0	equ	0xFEE
  2040                           wreg	equ	0xFE8
  2041                           postdec1	equ	0xFE5
  2042                           fsr1l	equ	0xFE1
  2043                           postinc2	equ	0xFDE
  2044                           postdec2	equ	0xFDD
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _sortBattery *****************
  2050 ;; Defined at:
  2051 ;;		line 103 in file "main.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  V_float         3   30[BANK1 ] float 
  2056 ;;  V               3   43[BANK1 ] float 
  2057 ;;  resolution      3   36[BANK1 ] float 
  2058 ;;  Vcc             3   33[BANK1 ] float 
  2059 ;;  signal          2   41[BANK1 ] int 
  2060 ;;  targetAngle     2   39[BANK1 ] int 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Totals:         0       2      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;Total ram usage:       18 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:   11
  2077 ;; This function calls:
  2078 ;;		___altoft
  2079 ;;		___ftdiv
  2080 ;;		___ftge
  2081 ;;		___ftmul
  2082 ;;		_analogRead
  2083 ;;		_digitalRead
  2084 ;;		_digitalWrite
  2085 ;;		_initServo
  2086 ;;		_lcdClear
  2087 ;;		_pause
  2088 ;;		_printf
  2089 ;;		_setAngle
  2090 ;;		_stopServo
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text1
  2097  001128                     __ptext1:
  2098                           	opt stack 0
  2099  001128                     _sortBattery:
  2100                           	opt stack 19
  2101                           
  2102                           ;main.c: 106: stopServo(conveyorServo[0]);
  2103                           
  2104                           ;incstack = 0
  2105  001128  C161  F080         	movff	_conveyorServo,stopServo@timer
  2106  00112C  C162  F081         	movff	_conveyorServo+1,stopServo@timer+1
  2107  001130  EC6C  F01D         	call	_stopServo	;wreg free
  2108                           
  2109                           ;main.c: 107: digitalWrite(cylinderMotor[0], cylinderMotor[1], 0);
  2110  001134  C177  F080         	movff	_cylinderMotor,digitalWrite@port
  2111  001138  C178  F081         	movff	_cylinderMotor+1,digitalWrite@port+1
  2112  00113C  C179  F082         	movff	_cylinderMotor+2,digitalWrite@pin
  2113  001140  C17A  F083         	movff	_cylinderMotor+3,digitalWrite@pin+1
  2114  001144  0E00               	movlw	0
  2115  001146  0100               	movlb	0	; () banked
  2116  001148  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  2117  00114A  0E00               	movlw	0
  2118  00114C  6F84               	movwf	digitalWrite@val& (0+255),b
  2119  00114E  EC0B  F017         	call	_digitalWrite	;wreg free
  2120                           
  2121                           ;main.c: 113: pause("interrupt!!!\nclose?");
  2122  001152  0E9B               	movlw	low STR_3
  2123  001154  0100               	movlb	0	; () banked
  2124  001156  6FE3               	movwf	pause@message& (0+255),b
  2125  001158  0EFE               	movlw	high STR_3
  2126  00115A  0100               	movlb	0	; () banked
  2127  00115C  6FE4               	movwf	(pause@message+1)& (0+255),b
  2128  00115E  EC91  F01F         	call	_pause	;wreg free
  2129                           
  2130                           ;main.c: 114: setAngle(padServo[0], padAngle_CLOSE);
  2131  001162  C167  F0EC         	movff	_padServo,setAngle@timer
  2132  001166  C168  F0ED         	movff	_padServo+1,setAngle@timer+1
  2133  00116A  C183  F0EE         	movff	_padAngle_CLOSE,setAngle@angle
  2134  00116E  C184  F0EF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  2135  001172  EC2D  F01B         	call	_setAngle	;wreg free
  2136                           
  2137                           ;main.c: 117: pause("read voltage?");
  2138  001176  0ED8               	movlw	low STR_4
  2139  001178  0100               	movlb	0	; () banked
  2140  00117A  6FE3               	movwf	pause@message& (0+255),b
  2141  00117C  0EFF               	movlw	high STR_4
  2142  00117E  0100               	movlb	0	; () banked
  2143  001180  6FE4               	movwf	(pause@message+1)& (0+255),b
  2144  001182  EC91  F01F         	call	_pause	;wreg free
  2145                           
  2146                           ;main.c: 118: float Vcc = 4.8;
  2147  001186  0E9A               	movlw	154
  2148  001188  0101               	movlb	1	; () banked
  2149  00118A  6F21               	movwf	sortBattery@Vcc& (0+255),b
  2150  00118C  0E99               	movlw	153
  2151  00118E  0101               	movlb	1	; () banked
  2152  001190  6F22               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2153  001192  0E40               	movlw	64
  2154  001194  0101               	movlb	1	; () banked
  2155  001196  6F23               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2156                           
  2157                           ; BSR set to: 1
  2158                           ;main.c: 119: float resolution = (1<<10) - 1;
  2159  001198  0EC0               	movlw	192
  2160  00119A  0101               	movlb	1	; () banked
  2161  00119C  6F24               	movwf	sortBattery@resolution& (0+255),b
  2162  00119E  0E7F               	movlw	127
  2163  0011A0  0101               	movlb	1	; () banked
  2164  0011A2  6F25               	movwf	(sortBattery@resolution+1)& (0+255),b
  2165  0011A4  0E44               	movlw	68
  2166  0011A6  0101               	movlb	1	; () banked
  2167  0011A8  6F26               	movwf	(sortBattery@resolution+2)& (0+255),b
  2168                           
  2169                           ; BSR set to: 1
  2170                           ;main.c: 121: int targetAngle;
  2171                           ;main.c: 122: int signal = digitalRead(padPin1[0],padPin1[1])<<1;
  2172  0011AA  C17B  F080         	movff	_padPin1,digitalRead@port
  2173  0011AE  C17C  F081         	movff	_padPin1+1,digitalRead@port+1
  2174  0011B2  C17D  F082         	movff	_padPin1+2,digitalRead@pin
  2175  0011B6  C17E  F083         	movff	_padPin1+3,digitalRead@pin+1
  2176  0011BA  EC24  F016         	call	_digitalRead	;wreg free
  2177  0011BE  90D8               	bcf	status,0,c
  2178  0011C0  0100               	movlb	0	; () banked
  2179  0011C2  3580               	rlcf	?_digitalRead& (0+255),w,b
  2180  0011C4  0101               	movlb	1	; () banked
  2181  0011C6  6F29               	movwf	sortBattery@signal& (0+255),b
  2182  0011C8  0100               	movlb	0	; () banked
  2183  0011CA  3581               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2184  0011CC  0101               	movlb	1	; () banked
  2185  0011CE  6F2A               	movwf	(sortBattery@signal+1)& (0+255),b
  2186                           
  2187                           ; BSR set to: 1
  2188                           ;main.c: 123: signal |= digitalRead(padPin2[0],padPin2[1]);
  2189  0011D0  C17F  F080         	movff	_padPin2,digitalRead@port
  2190  0011D4  C180  F081         	movff	_padPin2+1,digitalRead@port+1
  2191  0011D8  C181  F082         	movff	_padPin2+2,digitalRead@pin
  2192  0011DC  C182  F083         	movff	_padPin2+3,digitalRead@pin+1
  2193  0011E0  EC24  F016         	call	_digitalRead	;wreg free
  2194  0011E4  0100               	movlb	0	; () banked
  2195  0011E6  5180               	movf	?_digitalRead& (0+255),w,b
  2196  0011E8  0101               	movlb	1	; () banked
  2197  0011EA  1329               	iorwf	sortBattery@signal& (0+255),f,b
  2198  0011EC  0100               	movlb	0	; () banked
  2199  0011EE  5181               	movf	(?_digitalRead+1)& (0+255),w,b
  2200  0011F0  0101               	movlb	1	; () banked
  2201  0011F2  132A               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2202                           
  2203                           ; BSR set to: 1
  2204                           ;main.c: 125: digitalWrite(AA_float[0], AA_float[1], 1);
  2205  0011F4  C173  F080         	movff	_AA_float,digitalWrite@port
  2206  0011F8  C174  F081         	movff	_AA_float+1,digitalWrite@port+1
  2207  0011FC  C175  F082         	movff	_AA_float+2,digitalWrite@pin
  2208  001200  C176  F083         	movff	_AA_float+3,digitalWrite@pin+1
  2209  001204  0E00               	movlw	0
  2210  001206  0100               	movlb	0	; () banked
  2211  001208  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  2212  00120A  0E01               	movlw	1
  2213  00120C  6F84               	movwf	digitalWrite@val& (0+255),b
  2214  00120E  EC0B  F017         	call	_digitalWrite	;wreg free
  2215                           
  2216                           ;main.c: 126: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2217  001212  C124  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2218  001216  C125  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2219  00121A  C126  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2220  00121E  C154  F080         	movff	_padPin3+2,analogRead@channel
  2221  001222  C155  F081         	movff	_padPin3+3,analogRead@channel+1
  2222  001226  ECFD  F01D         	call	_analogRead	;wreg free
  2223  00122A  C080  F088         	movff	?_analogRead,___altoft@c
  2224  00122E  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2225  001232  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2226  001236  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2227  00123A  EC45  F01A         	call	___altoft	;wreg free
  2228  00123E  C088  F092         	movff	?___altoft,___ftdiv@f1
  2229  001242  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2230  001246  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2231  00124A  ECA2  F011         	call	___ftdiv	;wreg free
  2232  00124E  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2233  001252  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2234  001256  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2235  00125A  C121  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2236  00125E  C122  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2237  001262  C123  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2238  001266  ECF3  F010         	call	___ftmul	;wreg free
  2239  00126A  C0A1  F12B         	movff	?___ftmul,sortBattery@V
  2240  00126E  C0A2  F12C         	movff	?___ftmul+1,sortBattery@V+1
  2241  001272  C0A3  F12D         	movff	?___ftmul+2,sortBattery@V+2
  2242                           
  2243                           ;main.c: 128: lcdClear();
  2244  001276  ECAF  F01F         	call	_lcdClear	;wreg free
  2245                           
  2246                           ;main.c: 129: printf("target: %d\nV: %f",signal,V);
  2247  00127A  0EB8               	movlw	low STR_5
  2248  00127C  0100               	movlb	0	; () banked
  2249  00127E  6FD5               	movwf	printf@f& (0+255),b
  2250  001280  0EFF               	movlw	high STR_5
  2251  001282  0100               	movlb	0	; () banked
  2252  001284  6FD6               	movwf	(printf@f+1)& (0+255),b
  2253  001286  C129  F0D7         	movff	sortBattery@signal,?_printf+2
  2254  00128A  C12A  F0D8         	movff	sortBattery@signal+1,?_printf+3
  2255  00128E  C12B  F0D9         	movff	sortBattery@V,?_printf+4
  2256  001292  C12C  F0DA         	movff	sortBattery@V+1,?_printf+5
  2257  001296  C12D  F0DB         	movff	sortBattery@V+2,?_printf+6
  2258  00129A  EC09  F000         	call	_printf	;wreg free
  2259                           
  2260                           ;main.c: 132: pause("set redirect angle?");
  2261  00129E  0E87               	movlw	low STR_6
  2262  0012A0  0100               	movlb	0	; () banked
  2263  0012A2  6FE3               	movwf	pause@message& (0+255),b
  2264  0012A4  0EFE               	movlw	high STR_6
  2265  0012A6  0100               	movlb	0	; () banked
  2266  0012A8  6FE4               	movwf	(pause@message+1)& (0+255),b
  2267  0012AA  EC91  F01F         	call	_pause	;wreg free
  2268                           
  2269                           ;main.c: 133: switch(signal){
  2270  0012AE  D09E               	goto	l5454
  2271  0012B0                     l5432:
  2272                           
  2273                           ;main.c: 136: digitalWrite(AA_float[0], AA_float[1], 0);
  2274  0012B0  C173  F080         	movff	_AA_float,digitalWrite@port
  2275  0012B4  C174  F081         	movff	_AA_float+1,digitalWrite@port+1
  2276  0012B8  C175  F082         	movff	_AA_float+2,digitalWrite@pin
  2277  0012BC  C176  F083         	movff	_AA_float+3,digitalWrite@pin+1
  2278  0012C0  0E00               	movlw	0
  2279  0012C2  0100               	movlb	0	; () banked
  2280  0012C4  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  2281  0012C6  0E00               	movlw	0
  2282  0012C8  6F84               	movwf	digitalWrite@val& (0+255),b
  2283  0012CA  EC0B  F017         	call	_digitalWrite	;wreg free
  2284                           
  2285                           ;main.c: 137: _delay((unsigned long)((1)*(10000000/4000.0)));
  2286  0012CE  0E04               	movlw	4
  2287  0012D0  0100               	movlb	0	; () banked
  2288  0012D2  6FFE               	movwf	??_sortBattery& (0+255),b
  2289  0012D4  0E3D               	movlw	61
  2290  0012D6                     u5897:
  2291  0012D6  2EE8               	decfsz	wreg,f,c
  2292  0012D8  D7FE               	bra	u5897
  2293  0012DA  2FFE               	decfsz	??_sortBattery& (0+255),f,b
  2294  0012DC  D7FC               	bra	u5897
  2295  0012DE  D000               	nop2	
  2296                           
  2297                           ;main.c: 138: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2298  0012E0  C124  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2299  0012E4  C125  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2300  0012E8  C126  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2301  0012EC  C154  F080         	movff	_padPin3+2,analogRead@channel
  2302  0012F0  C155  F081         	movff	_padPin3+3,analogRead@channel+1
  2303  0012F4  ECFD  F01D         	call	_analogRead	;wreg free
  2304  0012F8  C080  F088         	movff	?_analogRead,___altoft@c
  2305  0012FC  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2306  001300  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2307  001304  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2308  001308  EC45  F01A         	call	___altoft	;wreg free
  2309  00130C  C088  F092         	movff	?___altoft,___ftdiv@f1
  2310  001310  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2311  001314  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2312  001318  ECA2  F011         	call	___ftdiv	;wreg free
  2313  00131C  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2314  001320  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2315  001324  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2316  001328  C121  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2317  00132C  C122  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2318  001330  C123  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2319  001334  ECF3  F010         	call	___ftmul	;wreg free
  2320  001338  C0A1  F11E         	movff	?___ftmul,sortBattery@V_float
  2321  00133C  C0A2  F11F         	movff	?___ftmul+1,sortBattery@V_float+1
  2322  001340  C0A3  F120         	movff	?___ftmul+2,sortBattery@V_float+2
  2323                           
  2324                           ;main.c: 139: if(V_float < 0.1){
  2325  001344  C11E  F080         	movff	sortBattery@V_float,___ftge@ff1
  2326  001348  C11F  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2327  00134C  C120  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2328  001350  0ECD               	movlw	205
  2329  001352  0100               	movlb	0	; () banked
  2330  001354  6F83               	movwf	___ftge@ff2& (0+255),b
  2331  001356  0ECC               	movlw	204
  2332  001358  0100               	movlb	0	; () banked
  2333  00135A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2334  00135C  0E3D               	movlw	61
  2335  00135E  0100               	movlb	0	; () banked
  2336  001360  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2337  001362  EC7B  F017         	call	___ftge	;wreg free
  2338  001366  0100               	movlb	0	; () banked
  2339  001368  B0D8               	btfsc	status,0,c
  2340  00136A  D00F               	goto	l5444
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 140: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2344  00136C  C159  F080         	movff	_V_LIM_AA,___ftge@ff1
  2345  001370  C15A  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2346  001374  C15B  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2347  001378  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2348  00137C  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2349  001380  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2350  001384  EC7B  F017         	call	___ftge	;wreg free
  2351  001388  D024               	goto	L6
  2352  00138A                     l5444:
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;main.c: 146: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2356  00138A  C156  F080         	movff	_V_LIM_9V,___ftge@ff1
  2357  00138E  C157  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2358  001392  C158  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2359  001396  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2360  00139A  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2361  00139E  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2362  0013A2  EC7B  F017         	call	___ftge	;wreg free
  2363  0013A6  0100               	movlb	0	; () banked
  2364  0013A8  B0D8               	btfsc	status,0,c
  2365  0013AA  D01B               	goto	l141
  2366                           
  2367                           ; BSR set to: 0
  2368  0013AC  C189  F127         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2369  0013B0  C18A  F128         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2370  0013B4  D02F               	goto	l5456
  2371  0013B6                     l5448:
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 150: if(V > V_LIM_C) targetAngle = redirectAngle_AA;
  2375  0013B6  C15C  F080         	movff	_V_LIM_C,___ftge@ff1
  2376  0013BA  C15D  F081         	movff	_V_LIM_C+1,___ftge@ff1+1
  2377  0013BE  C15E  F082         	movff	_V_LIM_C+2,___ftge@ff1+2
  2378  0013C2  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2379  0013C6  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2380  0013CA  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2381  0013CE  EC7B  F017         	call	___ftge	;wreg free
  2382  0013D2                     L6:
  2383  0013D2  0100               	movlb	0	; () banked
  2384  0013D4  B0D8               	btfsc	status,0,c
  2385  0013D6  D005               	goto	l141
  2386                           
  2387                           ; BSR set to: 0
  2388  0013D8  C18B  F127         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2389  0013DC  C18C  F128         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2390  0013E0  D019               	goto	l5456
  2391  0013E2                     l141:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;main.c: 151: else targetAngle = redirectAngle_OTHER;
  2395  0013E2  C18D  F127         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2396  0013E6  C18E  F128         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;main.c: 153: }
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;main.c: 152: break;
  2403  0013EA  D014               	goto	l5456
  2404  0013EC                     l5454:
  2405  0013EC  C129  F0FE         	movff	sortBattery@signal,??_sortBattery
  2406  0013F0  C12A  F0FF         	movff	sortBattery@signal+1,??_sortBattery+1
  2407                           
  2408                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2409                           ; Switch size 1, requested type "space"
  2410                           ; Number of cases is 1, Range of values is 0 to 0
  2411                           ; switch strategies available:
  2412                           ; Name         Instructions Cycles
  2413                           ; simple_byte            4     3 (average)
  2414                           ;	Chosen strategy is simple_byte
  2415  0013F4  0100               	movlb	0	; () banked
  2416  0013F6  51FF               	movf	(??_sortBattery+1)& (0+255),w,b
  2417  0013F8  0A00               	xorlw	0	; case 0
  2418  0013FA  A4D8               	btfss	status,2,c
  2419  0013FC  D00B               	goto	l5456
  2420                           
  2421                           ; BSR set to: 0
  2422                           ; Switch size 1, requested type "space"
  2423                           ; Number of cases is 3, Range of values is 0 to 2
  2424                           ; switch strategies available:
  2425                           ; Name         Instructions Cycles
  2426                           ; simple_byte           10     6 (average)
  2427                           ;	Chosen strategy is simple_byte
  2428  0013FE  0100               	movlb	0	; () banked
  2429  001400  51FE               	movf	??_sortBattery& (0+255),w,b
  2430  001402  0A00               	xorlw	0	; case 0
  2431  001404  B4D8               	btfsc	status,2,c
  2432  001406  D754               	goto	l5432
  2433  001408  0A01               	xorlw	1	; case 1
  2434  00140A  B4D8               	btfsc	status,2,c
  2435  00140C  D7BE               	goto	l5444
  2436  00140E  0A03               	xorlw	3	; case 2
  2437  001410  B4D8               	btfsc	status,2,c
  2438  001412  D7D1               	goto	l5448
  2439  001414                     l5456:
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;main.c: 155: setAngle(redirectingServo[0], targetAngle);
  2443  001414  C16D  F0EC         	movff	_redirectingServo,setAngle@timer
  2444  001418  C16E  F0ED         	movff	_redirectingServo+1,setAngle@timer+1
  2445  00141C  C127  F0EE         	movff	sortBattery@targetAngle,setAngle@angle
  2446  001420  C128  F0EF         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2447  001424  EC2D  F01B         	call	_setAngle	;wreg free
  2448                           
  2449                           ;main.c: 158: pause("release battery?");
  2450  001428  0EA7               	movlw	low STR_7
  2451  00142A  0100               	movlb	0	; () banked
  2452  00142C  6FE3               	movwf	pause@message& (0+255),b
  2453  00142E  0EFF               	movlw	high STR_7
  2454  001430  0100               	movlb	0	; () banked
  2455  001432  6FE4               	movwf	(pause@message+1)& (0+255),b
  2456  001434  EC91  F01F         	call	_pause	;wreg free
  2457                           
  2458                           ;main.c: 159: setAngle(padServo[0], padAngle_OPEN);
  2459  001438  C167  F0EC         	movff	_padServo,setAngle@timer
  2460  00143C  C168  F0ED         	movff	_padServo+1,setAngle@timer+1
  2461  001440  C187  F0EE         	movff	_padAngle_OPEN,setAngle@angle
  2462  001444  C188  F0EF         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2463  001448  EC2D  F01B         	call	_setAngle	;wreg free
  2464                           
  2465                           ;main.c: 163: pause("reset the pad?");
  2466  00144C  0EC9               	movlw	low STR_8
  2467  00144E  0100               	movlb	0	; () banked
  2468  001450  6FE3               	movwf	pause@message& (0+255),b
  2469  001452  0EFF               	movlw	high STR_8
  2470  001454  0100               	movlb	0	; () banked
  2471  001456  6FE4               	movwf	(pause@message+1)& (0+255),b
  2472  001458  EC91  F01F         	call	_pause	;wreg free
  2473                           
  2474                           ;main.c: 164: setAngle(padServo[0], padAngle_NEUTRAL);
  2475  00145C  C167  F0EC         	movff	_padServo,setAngle@timer
  2476  001460  C168  F0ED         	movff	_padServo+1,setAngle@timer+1
  2477  001464  C185  F0EE         	movff	_padAngle_NEUTRAL,setAngle@angle
  2478  001468  C186  F0EF         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2479  00146C  EC2D  F01B         	call	_setAngle	;wreg free
  2480                           
  2481                           ;main.c: 167: pause("conveyor & cylinder on?");
  2482  001470  0E6F               	movlw	low STR_9
  2483  001472  0100               	movlb	0	; () banked
  2484  001474  6FE3               	movwf	pause@message& (0+255),b
  2485  001476  0EFE               	movlw	high STR_9
  2486  001478  0100               	movlb	0	; () banked
  2487  00147A  6FE4               	movwf	(pause@message+1)& (0+255),b
  2488  00147C  EC91  F01F         	call	_pause	;wreg free
  2489                           
  2490                           ;main.c: 168: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  2491  001480  C161  F0F6         	movff	_conveyorServo,initServo@timer
  2492  001484  C162  F0F7         	movff	_conveyorServo+1,initServo@timer+1
  2493  001488  C163  F0F8         	movff	_conveyorServo+2,initServo@po
  2494  00148C  C164  F0F9         	movff	_conveyorServo+3,initServo@po+1
  2495  001490  C165  F0FA         	movff	_conveyorServo+4,initServo@pi
  2496  001494  C166  F0FB         	movff	_conveyorServo+5,initServo@pi+1
  2497  001498  0E00               	movlw	0
  2498  00149A  0100               	movlb	0	; () banked
  2499  00149C  6FFD               	movwf	(initServo@angle+1)& (0+255),b
  2500  00149E  0E5A               	movlw	90
  2501  0014A0  6FFC               	movwf	initServo@angle& (0+255),b
  2502  0014A2  EC77  F01B         	call	_initServo	;wreg free
  2503                           
  2504                           ;main.c: 169: digitalWrite(cylinderMotor[0], cylinderMotor[1], 1);
  2505  0014A6  C177  F080         	movff	_cylinderMotor,digitalWrite@port
  2506  0014AA  C178  F081         	movff	_cylinderMotor+1,digitalWrite@port+1
  2507  0014AE  C179  F082         	movff	_cylinderMotor+2,digitalWrite@pin
  2508  0014B2  C17A  F083         	movff	_cylinderMotor+3,digitalWrite@pin+1
  2509  0014B6  0E00               	movlw	0
  2510  0014B8  0100               	movlb	0	; () banked
  2511  0014BA  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  2512  0014BC  0E01               	movlw	1
  2513  0014BE  6F84               	movwf	digitalWrite@val& (0+255),b
  2514  0014C0  EC0B  F017         	call	_digitalWrite	;wreg free
  2515  0014C4                     l143:
  2516  0014C4  D7FF               	goto	l143
  2517  0014C6                     __end_of_sortBattery:
  2518                           	opt stack 0
  2519                           tblptru	equ	0xFF8
  2520                           tblptrh	equ	0xFF7
  2521                           tblptrl	equ	0xFF6
  2522                           tablat	equ	0xFF5
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           postdec1	equ	0xFE5
  2526                           fsr1l	equ	0xFE1
  2527                           postinc2	equ	0xFDE
  2528                           postdec2	equ	0xFDD
  2529                           fsr2h	equ	0xFDA
  2530                           fsr2l	equ	0xFD9
  2531                           status	equ	0xFD8
  2532                           
  2533 ;; *************** function _stopServo *****************
  2534 ;; Defined at:
  2535 ;;		line 26 in file "servo.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;  timer           2    0[BANK0 ] int 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2, status,0
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;Total ram usage:        4 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    5
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		_sortBattery
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text2
  2564  003AD8                     __ptext2:
  2565                           	opt stack 0
  2566  003AD8                     _stopServo:
  2567                           	opt stack 24
  2568                           
  2569                           ;servo.c: 27: switch(timer){
  2570                           
  2571                           ;incstack = 0
  2572  003AD8  D00C               	goto	l5052
  2573  003ADA                     l5042:
  2574  003ADA  0E00               	movlw	0
  2575  003ADC  6ED5               	movwf	4053,c	;volatile
  2576  003ADE  0012               	return	
  2577  003AE0                     l5044:
  2578  003AE0  0E00               	movlw	0
  2579  003AE2  6ECD               	movwf	4045,c	;volatile
  2580  003AE4  0012               	return	
  2581  003AE6                     l5046:
  2582  003AE6  0E00               	movlw	0
  2583  003AE8  6ECA               	movwf	4042,c	;volatile
  2584  003AEA  0012               	return	
  2585  003AEC                     l5048:
  2586  003AEC  0E00               	movlw	0
  2587  003AEE  6EB1               	movwf	4017,c	;volatile
  2588                           
  2589                           ;servo.c: 32: }
  2590  003AF0  0012               	return	
  2591  003AF2                     l5052:
  2592  003AF2  C080  F082         	movff	stopServo@timer,??_stopServo
  2593  003AF6  C081  F083         	movff	stopServo@timer+1,??_stopServo+1
  2594                           
  2595                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2596                           ; Switch size 1, requested type "space"
  2597                           ; Number of cases is 1, Range of values is 0 to 0
  2598                           ; switch strategies available:
  2599                           ; Name         Instructions Cycles
  2600                           ; simple_byte            4     3 (average)
  2601                           ;	Chosen strategy is simple_byte
  2602  003AFA  0100               	movlb	0	; () banked
  2603  003AFC  5183               	movf	(??_stopServo+1)& (0+255),w,b
  2604  003AFE  0A00               	xorlw	0	; case 0
  2605  003B00  A4D8               	btfss	status,2,c
  2606  003B02  0012               	return	
  2607                           
  2608                           ; BSR set to: 0
  2609                           ; Switch size 1, requested type "space"
  2610                           ; Number of cases is 4, Range of values is 0 to 3
  2611                           ; switch strategies available:
  2612                           ; Name         Instructions Cycles
  2613                           ; simple_byte           13     7 (average)
  2614                           ;	Chosen strategy is simple_byte
  2615  003B04  0100               	movlb	0	; () banked
  2616  003B06  5182               	movf	??_stopServo& (0+255),w,b
  2617  003B08  0A00               	xorlw	0	; case 0
  2618  003B0A  B4D8               	btfsc	status,2,c
  2619  003B0C  D7E6               	goto	l5042
  2620  003B0E  0A01               	xorlw	1	; case 1
  2621  003B10  B4D8               	btfsc	status,2,c
  2622  003B12  D7E6               	goto	l5044
  2623  003B14  0A03               	xorlw	3	; case 2
  2624  003B16  B4D8               	btfsc	status,2,c
  2625  003B18  D7E6               	goto	l5046
  2626  003B1A  0A01               	xorlw	1	; case 3
  2627  003B1C  A4D8               	btfss	status,2,c
  2628  003B1E  0012               	return	
  2629  003B20  D7E5               	goto	l5048
  2630  003B22                     __end_of_stopServo:
  2631                           	opt stack 0
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           postinc0	equ	0xFEE
  2637                           wreg	equ	0xFE8
  2638                           postdec1	equ	0xFE5
  2639                           fsr1l	equ	0xFE1
  2640                           postinc2	equ	0xFDE
  2641                           postdec2	equ	0xFDD
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _pause *****************
  2647 ;; Defined at:
  2648 ;;		line 230 in file "main.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  message         2   99[BANK0 ] PTR unsigned char 
  2651 ;;		 -> STR_9(24), STR_8(15), STR_7(17), STR_6(20), 
  2652 ;;		 -> STR_4(14), STR_3(20), 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;Total ram usage:        2 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:   10
  2671 ;; This function calls:
  2672 ;;		_lcdClear
  2673 ;;		_printf
  2674 ;;		_readKeypad
  2675 ;; This function is called by:
  2676 ;;		_sortBattery
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text3
  2681  003F22                     __ptext3:
  2682                           	opt stack 0
  2683  003F22                     _pause:
  2684                           	opt stack 19
  2685                           
  2686                           ;main.c: 231: lcdClear();
  2687                           
  2688                           ;incstack = 0
  2689  003F22  ECAF  F01F         	call	_lcdClear	;wreg free
  2690                           
  2691                           ;main.c: 232: printf(message);
  2692  003F26  C0E3  F0D5         	movff	pause@message,printf@f
  2693  003F2A  C0E4  F0D6         	movff	pause@message+1,printf@f+1
  2694  003F2E  EC09  F000         	call	_printf	;wreg free
  2695                           
  2696                           ;main.c: 233: readKeypad();
  2697  003F32  ECD3  F01E         	call	_readKeypad	;wreg free
  2698  003F36  0012               	return		;funcret
  2699  003F38                     __end_of_pause:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           postinc0	equ	0xFEE
  2706                           wreg	equ	0xFE8
  2707                           postdec1	equ	0xFE5
  2708                           fsr1l	equ	0xFE1
  2709                           postinc2	equ	0xFDE
  2710                           postdec2	equ	0xFDD
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _initServo *****************
  2716 ;; Defined at:
  2717 ;;		line 17 in file "servo.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  timer           2  118[BANK0 ] int 
  2720 ;;  po              2  120[BANK0 ] int 
  2721 ;;  pi              2  122[BANK0 ] int 
  2722 ;;  angle           2  124[BANK0 ] int 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;		None
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2734 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;Total ram usage:        8 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    9
  2741 ;; This function calls:
  2742 ;;		_initTimer
  2743 ;;		_setAngle
  2744 ;;		_startTimer
  2745 ;; This function is called by:
  2746 ;;		_main
  2747 ;;		_sortBattery
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text4
  2752  0036EE                     __ptext4:
  2753                           	opt stack 0
  2754  0036EE                     _initServo:
  2755                           	opt stack 20
  2756                           
  2757                           ;servo.c: 18: port[timer] = po;
  2758                           
  2759                           ;incstack = 0
  2760  0036EE  90D8               	bcf	status,0,c
  2761  0036F0  0100               	movlb	0	; () banked
  2762  0036F2  35F6               	rlcf	initServo@timer& (0+255),w,b
  2763  0036F4  6ED9               	movwf	fsr2l,c
  2764  0036F6  0100               	movlb	0	; () banked
  2765  0036F8  35F7               	rlcf	(initServo@timer+1)& (0+255),w,b
  2766  0036FA  6EDA               	movwf	fsr2h,c
  2767  0036FC  0E4A               	movlw	low _port
  2768  0036FE  26D9               	addwf	fsr2l,f,c
  2769  003700  0E01               	movlw	high _port
  2770  003702  22DA               	addwfc	fsr2h,f,c
  2771  003704  C0F8  FFDE         	movff	initServo@po,postinc2
  2772  003708  C0F9  FFDD         	movff	initServo@po+1,postdec2
  2773                           
  2774                           ;servo.c: 19: pin[timer] = pi;
  2775  00370C  90D8               	bcf	status,0,c
  2776  00370E  0100               	movlb	0	; () banked
  2777  003710  35F6               	rlcf	initServo@timer& (0+255),w,b
  2778  003712  6ED9               	movwf	fsr2l,c
  2779  003714  0100               	movlb	0	; () banked
  2780  003716  35F7               	rlcf	(initServo@timer+1)& (0+255),w,b
  2781  003718  6EDA               	movwf	fsr2h,c
  2782  00371A  0E42               	movlw	low _pin
  2783  00371C  26D9               	addwf	fsr2l,f,c
  2784  00371E  0E01               	movlw	high _pin
  2785  003720  22DA               	addwfc	fsr2h,f,c
  2786  003722  C0FA  FFDE         	movff	initServo@pi,postinc2
  2787  003726  C0FB  FFDD         	movff	initServo@pi+1,postdec2
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;servo.c: 20: setAngle(timer, angle);
  2791  00372A  C0F6  F0EC         	movff	initServo@timer,setAngle@timer
  2792  00372E  C0F7  F0ED         	movff	initServo@timer+1,setAngle@timer+1
  2793  003732  C0FC  F0EE         	movff	initServo@angle,setAngle@angle
  2794  003736  C0FD  F0EF         	movff	initServo@angle+1,setAngle@angle+1
  2795  00373A  EC2D  F01B         	call	_setAngle	;wreg free
  2796                           
  2797                           ;servo.c: 22: initTimer(timer);
  2798  00373E  C0F6  F080         	movff	initServo@timer,initTimer@timer
  2799  003742  C0F7  F081         	movff	initServo@timer+1,initTimer@timer+1
  2800  003746  EC91  F01D         	call	_initTimer	;wreg free
  2801                           
  2802                           ;servo.c: 23: startTimer(timer,0);
  2803  00374A  C0F6  F080         	movff	initServo@timer,startTimer@timer
  2804  00374E  C0F7  F081         	movff	initServo@timer+1,startTimer@timer+1
  2805  003752  0E00               	movlw	0
  2806  003754  0100               	movlb	0	; () banked
  2807  003756  6F82               	movwf	startTimer@val& (0+255),b
  2808  003758  0E00               	movlw	0
  2809  00375A  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2810  00375C  0E00               	movlw	0
  2811  00375E  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2812  003760  0E00               	movlw	0
  2813  003762  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2814  003764  ECF8  F01C         	call	_startTimer	;wreg free
  2815  003768  0012               	return		;funcret
  2816  00376A                     __end_of_initServo:
  2817                           	opt stack 0
  2818                           tblptru	equ	0xFF8
  2819                           tblptrh	equ	0xFF7
  2820                           tblptrl	equ	0xFF6
  2821                           tablat	equ	0xFF5
  2822                           postinc0	equ	0xFEE
  2823                           wreg	equ	0xFE8
  2824                           postdec1	equ	0xFE5
  2825                           fsr1l	equ	0xFE1
  2826                           postinc2	equ	0xFDE
  2827                           postdec2	equ	0xFDD
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _startTimer *****************
  2833 ;; Defined at:
  2834 ;;		line 75 in file "timer.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  timer           2    0[BANK0 ] int 
  2837 ;;  val             4    2[BANK0 ] long 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, status,2, status,0
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2849 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;Total ram usage:        8 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    5
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_initServo
  2860 ;;		_testFrequency
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text5
  2865  0039F0                     __ptext5:
  2866                           	opt stack 0
  2867  0039F0                     _startTimer:
  2868                           	opt stack 23
  2869                           
  2870                           ;timer.c: 76: switch(timer){
  2871                           
  2872                           ;incstack = 0
  2873  0039F0  D012               	goto	l4782
  2874  0039F2                     l390:
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;timer.c: 78: TMR0H = val>>8;
  2878  0039F2  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  2879                           
  2880                           ;timer.c: 79: TMR0L = val;
  2881  0039F6  C082  FFD6         	movff	startTimer@val,4054	;volatile
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;timer.c: 80: T0CON |= 1<<7;
  2885  0039FA  8ED5               	bsf	4053,7,c	;volatile
  2886                           
  2887                           ;timer.c: 81: break;
  2888  0039FC  0012               	return	
  2889  0039FE                     l392:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;timer.c: 83: TMR1H = val>>8;
  2893  0039FE  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  2894                           
  2895                           ;timer.c: 84: TMR1L = val;
  2896  003A02  C082  FFCE         	movff	startTimer@val,4046	;volatile
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;timer.c: 85: T1CON |= 1<<0;
  2900  003A06  80CD               	bsf	4045,0,c	;volatile
  2901                           
  2902                           ;timer.c: 86: break;
  2903  003A08  0012               	return	
  2904  003A0A                     l393:
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;timer.c: 88: TMR3H = val>>8;
  2908  003A0A  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  2909                           
  2910                           ;timer.c: 89: TMR3L = val;
  2911  003A0E  C082  FFB2         	movff	startTimer@val,4018	;volatile
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;timer.c: 90: T3CON |= 1<<0;
  2915  003A12  80B1               	bsf	4017,0,c	;volatile
  2916                           
  2917                           ;timer.c: 91: }
  2918  003A14  0012               	return	
  2919  003A16                     l4782:
  2920  003A16  C080  F086         	movff	startTimer@timer,??_startTimer
  2921  003A1A  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  2922                           
  2923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2924                           ; Switch size 1, requested type "space"
  2925                           ; Number of cases is 1, Range of values is 0 to 0
  2926                           ; switch strategies available:
  2927                           ; Name         Instructions Cycles
  2928                           ; simple_byte            4     3 (average)
  2929                           ;	Chosen strategy is simple_byte
  2930  003A1E  0100               	movlb	0	; () banked
  2931  003A20  5187               	movf	(??_startTimer+1)& (0+255),w,b
  2932  003A22  0A00               	xorlw	0	; case 0
  2933  003A24  A4D8               	btfss	status,2,c
  2934  003A26  0012               	return	
  2935                           
  2936                           ; BSR set to: 0
  2937                           ; Switch size 1, requested type "space"
  2938                           ; Number of cases is 3, Range of values is 0 to 3
  2939                           ; switch strategies available:
  2940                           ; Name         Instructions Cycles
  2941                           ; simple_byte           10     6 (average)
  2942                           ;	Chosen strategy is simple_byte
  2943  003A28  0100               	movlb	0	; () banked
  2944  003A2A  5186               	movf	??_startTimer& (0+255),w,b
  2945  003A2C  0A00               	xorlw	0	; case 0
  2946  003A2E  B4D8               	btfsc	status,2,c
  2947  003A30  D7E0               	goto	l390
  2948  003A32  0A01               	xorlw	1	; case 1
  2949  003A34  B4D8               	btfsc	status,2,c
  2950  003A36  D7E3               	goto	l392
  2951  003A38  0A02               	xorlw	2	; case 3
  2952  003A3A  A4D8               	btfss	status,2,c
  2953  003A3C  0012               	return	
  2954  003A3E  D7E5               	goto	l393
  2955  003A40                     __end_of_startTimer:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           postdec1	equ	0xFE5
  2964                           fsr1l	equ	0xFE1
  2965                           postinc2	equ	0xFDE
  2966                           postdec2	equ	0xFDD
  2967                           fsr2h	equ	0xFDA
  2968                           fsr2l	equ	0xFD9
  2969                           status	equ	0xFD8
  2970                           
  2971 ;; *************** function _setAngle *****************
  2972 ;; Defined at:
  2973 ;;		line 43 in file "servo.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  timer           2  108[BANK0 ] int 
  2976 ;;  angle           2  110[BANK0 ] int 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2988 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;Total ram usage:       10 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    8
  2995 ;; This function calls:
  2996 ;;		_angleToPulse
  2997 ;; This function is called by:
  2998 ;;		_sortBattery
  2999 ;;		_initServo
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text6
  3004  00365A                     __ptext6:
  3005                           	opt stack 0
  3006  00365A                     _setAngle:
  3007                           	opt stack 21
  3008                           
  3009                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;incstack = 0
  3013  00365A  C0EE  F0D5         	movff	setAngle@angle,angleToPulse@angle
  3014  00365E  C0EF  F0D6         	movff	setAngle@angle+1,angleToPulse@angle+1
  3015  003662  EC40  F010         	call	_angleToPulse	;wreg free
  3016  003666  0100               	movlb	0	; () banked
  3017  003668  1FD5               	comf	?_angleToPulse& (0+255),f,b
  3018  00366A  0100               	movlb	0	; () banked
  3019  00366C  1FD6               	comf	(?_angleToPulse+1)& (0+255),f,b
  3020  00366E  0100               	movlb	0	; () banked
  3021  003670  1FD7               	comf	(?_angleToPulse+2)& (0+255),f,b
  3022  003672  0100               	movlb	0	; () banked
  3023  003674  1FD8               	comf	(?_angleToPulse+3)& (0+255),f,b
  3024  003676  0100               	movlb	0	; () banked
  3025  003678  2BD5               	incf	?_angleToPulse& (0+255),f,b
  3026  00367A  0E00               	movlw	0
  3027  00367C  0100               	movlb	0	; () banked
  3028  00367E  23D6               	addwfc	(?_angleToPulse+1)& (0+255),f,b
  3029  003680  0100               	movlb	0	; () banked
  3030  003682  23D7               	addwfc	(?_angleToPulse+2)& (0+255),f,b
  3031  003684  0100               	movlb	0	; () banked
  3032  003686  23D8               	addwfc	(?_angleToPulse+3)& (0+255),f,b
  3033  003688  0EFF               	movlw	255
  3034  00368A  0100               	movlb	0	; () banked
  3035  00368C  25D5               	addwf	?_angleToPulse& (0+255),w,b
  3036  00368E  0100               	movlb	0	; () banked
  3037  003690  6FF0               	movwf	??_setAngle& (0+255),b
  3038  003692  0EFF               	movlw	255
  3039  003694  0100               	movlb	0	; () banked
  3040  003696  21D6               	addwfc	(?_angleToPulse+1)& (0+255),w,b
  3041  003698  0100               	movlb	0	; () banked
  3042  00369A  6FF1               	movwf	(??_setAngle+1)& (0+255),b
  3043  00369C  0E00               	movlw	0
  3044  00369E  0100               	movlb	0	; () banked
  3045  0036A0  21D7               	addwfc	(?_angleToPulse+2)& (0+255),w,b
  3046  0036A2  0100               	movlb	0	; () banked
  3047  0036A4  6FF2               	movwf	(??_setAngle+2)& (0+255),b
  3048  0036A6  0E00               	movlw	0
  3049  0036A8  0100               	movlb	0	; () banked
  3050  0036AA  21D8               	addwfc	(?_angleToPulse+3)& (0+255),w,b
  3051  0036AC  0100               	movlb	0	; () banked
  3052  0036AE  6FF3               	movwf	(??_setAngle+3)& (0+255),b
  3053  0036B0  0E32               	movlw	low _pulse
  3054  0036B2  0100               	movlb	0	; () banked
  3055  0036B4  6FF4               	movwf	(??_setAngle+4)& (0+255),b
  3056  0036B6  0E01               	movlw	high _pulse
  3057  0036B8  0100               	movlb	0	; () banked
  3058  0036BA  6FF5               	movwf	(??_setAngle+5)& (0+255),b
  3059  0036BC  90D8               	bcf	status,0,c
  3060  0036BE  0100               	movlb	0	; () banked
  3061  0036C0  35EC               	rlcf	setAngle@timer& (0+255),w,b
  3062  0036C2  6ED9               	movwf	fsr2l,c
  3063  0036C4  0100               	movlb	0	; () banked
  3064  0036C6  35ED               	rlcf	(setAngle@timer+1)& (0+255),w,b
  3065  0036C8  6EDA               	movwf	fsr2h,c
  3066  0036CA  90D8               	bcf	status,0,c
  3067  0036CC  36D9               	rlcf	fsr2l,f,c
  3068  0036CE  36DA               	rlcf	fsr2h,f,c
  3069  0036D0  0100               	movlb	0	; () banked
  3070  0036D2  51F4               	movf	(??_setAngle+4)& (0+255),w,b
  3071  0036D4  26D9               	addwf	fsr2l,f,c
  3072  0036D6  0100               	movlb	0	; () banked
  3073  0036D8  51F5               	movf	(??_setAngle+5)& (0+255),w,b
  3074  0036DA  22DA               	addwfc	fsr2h,f,c
  3075  0036DC  C0F0  FFDE         	movff	??_setAngle,postinc2
  3076  0036E0  C0F1  FFDE         	movff	??_setAngle+1,postinc2
  3077  0036E4  C0F2  FFDE         	movff	??_setAngle+2,postinc2
  3078  0036E8  C0F3  FFDE         	movff	??_setAngle+3,postinc2
  3079                           
  3080                           ; BSR set to: 0
  3081  0036EC  0012               	return		;funcret
  3082  0036EE                     __end_of_setAngle:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1l	equ	0xFE1
  3092                           postinc2	equ	0xFDE
  3093                           postdec2	equ	0xFDD
  3094                           fsr2h	equ	0xFDA
  3095                           fsr2l	equ	0xFD9
  3096                           status	equ	0xFD8
  3097                           
  3098 ;; *************** function _angleToPulse *****************
  3099 ;; Defined at:
  3100 ;;		line 35 in file "servo.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;  angle           2   85[BANK0 ] int 
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;  a000            4  104[BANK0 ] long 
  3105 ;;  a180            4   97[BANK0 ] long 
  3106 ;;  offset          4   93[BANK0 ] long 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  4   85[BANK0 ] long 
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0, cstack
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;Total ram usage:       23 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    7
  3123 ;; This function calls:
  3124 ;;		___altoft
  3125 ;;		___awtoft
  3126 ;;		___ftadd
  3127 ;;		___ftdiv
  3128 ;;		___ftmul
  3129 ;;		___fttol
  3130 ;; This function is called by:
  3131 ;;		_setAngle
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text7
  3136  002080                     __ptext7:
  3137                           	opt stack 0
  3138  002080                     _angleToPulse:
  3139                           	opt stack 21
  3140                           
  3141                           ;servo.c: 36: long offset = 0;
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;incstack = 0
  3145  002080  0E00               	movlw	0
  3146  002082  0100               	movlb	0	; () banked
  3147  002084  6FDD               	movwf	angleToPulse@offset& (0+255),b
  3148  002086  0E00               	movlw	0
  3149  002088  6FDE               	movwf	(angleToPulse@offset+1)& (0+255),b
  3150  00208A  0E00               	movlw	0
  3151  00208C  6FDF               	movwf	(angleToPulse@offset+2)& (0+255),b
  3152  00208E  0E00               	movlw	0
  3153  002090  6FE0               	movwf	(angleToPulse@offset+3)& (0+255),b
  3154                           
  3155                           ;servo.c: 37: long a000 = 1250;
  3156  002092  0EE2               	movlw	226
  3157  002094  0100               	movlb	0	; () banked
  3158  002096  6FE8               	movwf	angleToPulse@a000& (0+255),b
  3159  002098  0E04               	movlw	4
  3160  00209A  6FE9               	movwf	(angleToPulse@a000+1)& (0+255),b
  3161  00209C  0E00               	movlw	0
  3162  00209E  6FEA               	movwf	(angleToPulse@a000+2)& (0+255),b
  3163  0020A0  0E00               	movlw	0
  3164  0020A2  6FEB               	movwf	(angleToPulse@a000+3)& (0+255),b
  3165                           
  3166                           ;servo.c: 38: long a180 = 6250;
  3167  0020A4  0E6A               	movlw	106
  3168  0020A6  0100               	movlb	0	; () banked
  3169  0020A8  6FE1               	movwf	angleToPulse@a180& (0+255),b
  3170  0020AA  0E18               	movlw	24
  3171  0020AC  6FE2               	movwf	(angleToPulse@a180+1)& (0+255),b
  3172  0020AE  0E00               	movlw	0
  3173  0020B0  6FE3               	movwf	(angleToPulse@a180+2)& (0+255),b
  3174  0020B2  0E00               	movlw	0
  3175  0020B4  6FE4               	movwf	(angleToPulse@a180+3)& (0+255),b
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  3179  0020B6  C0E8  F0D9         	movff	angleToPulse@a000,??_angleToPulse
  3180  0020BA  C0E9  F0DA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  3181  0020BE  C0EA  F0DB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  3182  0020C2  C0EB  F0DC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  3183  0020C6  0100               	movlb	0	; () banked
  3184  0020C8  1FD9               	comf	??_angleToPulse& (0+255),f,b
  3185  0020CA  1FDA               	comf	(??_angleToPulse+1)& (0+255),f,b
  3186  0020CC  1FDB               	comf	(??_angleToPulse+2)& (0+255),f,b
  3187  0020CE  1FDC               	comf	(??_angleToPulse+3)& (0+255),f,b
  3188  0020D0  2BD9               	incf	??_angleToPulse& (0+255),f,b
  3189  0020D2  0E00               	movlw	0
  3190  0020D4  23DA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  3191  0020D6  23DB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  3192  0020D8  23DC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  3193  0020DA  0100               	movlb	0	; () banked
  3194  0020DC  51E1               	movf	angleToPulse@a180& (0+255),w,b
  3195  0020DE  0100               	movlb	0	; () banked
  3196  0020E0  25D9               	addwf	??_angleToPulse& (0+255),w,b
  3197  0020E2  0100               	movlb	0	; () banked
  3198  0020E4  6F88               	movwf	___altoft@c& (0+255),b
  3199  0020E6  0100               	movlb	0	; () banked
  3200  0020E8  51E2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  3201  0020EA  0100               	movlb	0	; () banked
  3202  0020EC  21DA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  3203  0020EE  0100               	movlb	0	; () banked
  3204  0020F0  6F89               	movwf	(___altoft@c+1)& (0+255),b
  3205  0020F2  0100               	movlb	0	; () banked
  3206  0020F4  51E3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  3207  0020F6  0100               	movlb	0	; () banked
  3208  0020F8  21DB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  3209  0020FA  0100               	movlb	0	; () banked
  3210  0020FC  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  3211  0020FE  0100               	movlb	0	; () banked
  3212  002100  51E4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  3213  002102  0100               	movlb	0	; () banked
  3214  002104  21DC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  3215  002106  0100               	movlb	0	; () banked
  3216  002108  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  3217  00210A  EC45  F01A         	call	___altoft	;wreg free
  3218  00210E  C088  F0A4         	movff	?___altoft,___ftmul@f2
  3219  002112  C089  F0A5         	movff	?___altoft+1,___ftmul@f2+1
  3220  002116  C08A  F0A6         	movff	?___altoft+2,___ftmul@f2+2
  3221  00211A  0E00               	movlw	0
  3222  00211C  0100               	movlb	0	; () banked
  3223  00211E  6F95               	movwf	___ftdiv@f2& (0+255),b
  3224  002120  0E34               	movlw	52
  3225  002122  0100               	movlb	0	; () banked
  3226  002124  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
  3227  002126  0E43               	movlw	67
  3228  002128  0100               	movlb	0	; () banked
  3229  00212A  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
  3230  00212C  C0D5  F088         	movff	angleToPulse@angle,___awtoft@c
  3231  002130  C0D6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  3232  002134  ECDB  F01D         	call	___awtoft	;wreg free
  3233  002138  C088  F092         	movff	?___awtoft,___ftdiv@f1
  3234  00213C  C089  F093         	movff	?___awtoft+1,___ftdiv@f1+1
  3235  002140  C08A  F094         	movff	?___awtoft+2,___ftdiv@f1+2
  3236  002144  ECA2  F011         	call	___ftdiv	;wreg free
  3237  002148  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  3238  00214C  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  3239  002150  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  3240  002154  ECF3  F010         	call	___ftmul	;wreg free
  3241  002158  C0A1  F0BD         	movff	?___ftmul,___ftadd@f2
  3242  00215C  C0A2  F0BE         	movff	?___ftmul+1,___ftadd@f2+1
  3243  002160  C0A3  F0BF         	movff	?___ftmul+2,___ftadd@f2+2
  3244  002164  C0E8  F088         	movff	angleToPulse@a000,___altoft@c
  3245  002168  C0E9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  3246  00216C  C0EA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  3247  002170  C0EB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  3248  002174  EC45  F01A         	call	___altoft	;wreg free
  3249  002178  C088  F0BA         	movff	?___altoft,___ftadd@f1
  3250  00217C  C089  F0BB         	movff	?___altoft+1,___ftadd@f1+1
  3251  002180  C08A  F0BC         	movff	?___altoft+2,___ftadd@f1+2
  3252  002184  ECB9  F00B         	call	___ftadd	;wreg free
  3253  002188  C0BA  F0E5         	movff	?___ftadd,_angleToPulse$1336
  3254  00218C  C0BB  F0E6         	movff	?___ftadd+1,_angleToPulse$1336+1
  3255  002190  C0BC  F0E7         	movff	?___ftadd+2,_angleToPulse$1336+2
  3256                           
  3257                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  3258  002194  C0DD  F088         	movff	angleToPulse@offset,___altoft@c
  3259  002198  C0DE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  3260  00219C  C0DF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  3261  0021A0  C0E0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  3262  0021A4  EC45  F01A         	call	___altoft	;wreg free
  3263  0021A8  C088  F0BD         	movff	?___altoft,___ftadd@f2
  3264  0021AC  C089  F0BE         	movff	?___altoft+1,___ftadd@f2+1
  3265  0021B0  C08A  F0BF         	movff	?___altoft+2,___ftadd@f2+2
  3266  0021B4  C0E5  F0BA         	movff	_angleToPulse$1336,___ftadd@f1
  3267  0021B8  C0E6  F0BB         	movff	_angleToPulse$1336+1,___ftadd@f1+1
  3268  0021BC  C0E7  F0BC         	movff	_angleToPulse$1336+2,___ftadd@f1+2
  3269  0021C0  ECB9  F00B         	call	___ftadd	;wreg free
  3270  0021C4  C0BA  F0C6         	movff	?___ftadd,___fttol@f1
  3271  0021C8  C0BB  F0C7         	movff	?___ftadd+1,___fttol@f1+1
  3272  0021CC  C0BC  F0C8         	movff	?___ftadd+2,___fttol@f1+2
  3273  0021D0  EC48  F012         	call	___fttol	;wreg free
  3274  0021D4  C0C6  F0D5         	movff	?___fttol,?_angleToPulse
  3275  0021D8  C0C7  F0D6         	movff	?___fttol+1,?_angleToPulse+1
  3276  0021DC  C0C8  F0D7         	movff	?___fttol+2,?_angleToPulse+2
  3277  0021E0  C0C9  F0D8         	movff	?___fttol+3,?_angleToPulse+3
  3278  0021E4  0012               	return	
  3279  0021E6                     __end_of_angleToPulse:
  3280                           	opt stack 0
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           postinc0	equ	0xFEE
  3286                           wreg	equ	0xFE8
  3287                           postdec1	equ	0xFE5
  3288                           fsr1l	equ	0xFE1
  3289                           postinc2	equ	0xFDE
  3290                           postdec2	equ	0xFDD
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function ___ftdiv *****************
  3296 ;; Defined at:
  3297 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  f1              3   18[BANK0 ] float 
  3300 ;;  f2              3   21[BANK0 ] float 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  f3              3   28[BANK0 ] float 
  3303 ;;  sign            1   32[BANK0 ] unsigned char 
  3304 ;;  exp             1   31[BANK0 ] unsigned char 
  3305 ;;  cntr            1   27[BANK0 ] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  3   18[BANK0 ] float 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3315 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;Total ram usage:       15 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    6
  3322 ;; This function calls:
  3323 ;;		___ftpack
  3324 ;; This function is called by:
  3325 ;;		_sortBattery
  3326 ;;		_angleToPulse
  3327 ;;		_testFrequency
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           	psect	text8
  3332  002344                     __ptext8:
  3333                           	opt stack 0
  3334  002344                     ___ftdiv:
  3335                           	opt stack 21
  3336                           
  3337                           ;incstack = 0
  3338  002344  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
  3339  002348  0100               	movlb	0	; () banked
  3340  00234A  6B99               	clrf	(??___ftdiv+1)& (0+255),b
  3341  00234C  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
  3342  00234E  0100               	movlb	0	; () banked
  3343  002350  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3344  002352  0100               	movlb	0	; () banked
  3345  002354  3798               	rlcf	??___ftdiv& (0+255),f,b
  3346  002356  E301               	bnc	u3311
  3347  002358  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
  3348  00235A                     u3311:
  3349  00235A  0100               	movlb	0	; () banked
  3350  00235C  5198               	movf	??___ftdiv& (0+255),w,b
  3351  00235E  0100               	movlb	0	; () banked
  3352  002360  6F9F               	movwf	___ftdiv@exp& (0+255),b
  3353  002362  0100               	movlb	0	; () banked
  3354  002364  519F               	movf	___ftdiv@exp& (0+255),w,b
  3355  002366  A4D8               	btfss	status,2,c
  3356  002368  D00A               	goto	l3880
  3357                           
  3358                           ; BSR set to: 0
  3359  00236A  0E00               	movlw	0
  3360  00236C  0100               	movlb	0	; () banked
  3361  00236E  6F92               	movwf	?___ftdiv& (0+255),b
  3362  002370  0E00               	movlw	0
  3363  002372  0100               	movlb	0	; () banked
  3364  002374  6F93               	movwf	(?___ftdiv+1)& (0+255),b
  3365  002376  0E00               	movlw	0
  3366  002378  0100               	movlb	0	; () banked
  3367  00237A  6F94               	movwf	(?___ftdiv+2)& (0+255),b
  3368                           
  3369                           ; BSR set to: 0
  3370  00237C  0012               	return	
  3371  00237E                     l3880:
  3372                           
  3373                           ; BSR set to: 0
  3374  00237E  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
  3375  002382  0100               	movlb	0	; () banked
  3376  002384  6B99               	clrf	(??___ftdiv+1)& (0+255),b
  3377  002386  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
  3378  002388  0100               	movlb	0	; () banked
  3379  00238A  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3380  00238C  0100               	movlb	0	; () banked
  3381  00238E  3798               	rlcf	??___ftdiv& (0+255),f,b
  3382  002390  E301               	bnc	u3331
  3383  002392  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
  3384  002394                     u3331:
  3385  002394  0100               	movlb	0	; () banked
  3386  002396  5198               	movf	??___ftdiv& (0+255),w,b
  3387  002398  0100               	movlb	0	; () banked
  3388  00239A  6FA0               	movwf	___ftdiv@sign& (0+255),b
  3389  00239C  0100               	movlb	0	; () banked
  3390  00239E  51A0               	movf	___ftdiv@sign& (0+255),w,b
  3391  0023A0  A4D8               	btfss	status,2,c
  3392  0023A2  D00A               	goto	l3886
  3393                           
  3394                           ; BSR set to: 0
  3395  0023A4  0E00               	movlw	0
  3396  0023A6  0100               	movlb	0	; () banked
  3397  0023A8  6F92               	movwf	?___ftdiv& (0+255),b
  3398  0023AA  0E00               	movlw	0
  3399  0023AC  0100               	movlb	0	; () banked
  3400  0023AE  6F93               	movwf	(?___ftdiv+1)& (0+255),b
  3401  0023B0  0E00               	movlw	0
  3402  0023B2  0100               	movlb	0	; () banked
  3403  0023B4  6F94               	movwf	(?___ftdiv+2)& (0+255),b
  3404                           
  3405                           ; BSR set to: 0
  3406  0023B6  0012               	return	
  3407  0023B8                     l3886:
  3408                           
  3409                           ; BSR set to: 0
  3410  0023B8  0E00               	movlw	0
  3411  0023BA  0100               	movlb	0	; () banked
  3412  0023BC  6F9C               	movwf	___ftdiv@f3& (0+255),b
  3413  0023BE  0E00               	movlw	0
  3414  0023C0  0100               	movlb	0	; () banked
  3415  0023C2  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
  3416  0023C4  0E00               	movlw	0
  3417  0023C6  0100               	movlb	0	; () banked
  3418  0023C8  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
  3419                           
  3420                           ; BSR set to: 0
  3421  0023CA  0100               	movlb	0	; () banked
  3422  0023CC  51A0               	movf	___ftdiv@sign& (0+255),w,b
  3423  0023CE  0F89               	addlw	137
  3424  0023D0  0100               	movlb	0	; () banked
  3425  0023D2  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
  3426                           
  3427                           ; BSR set to: 0
  3428  0023D4  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
  3429                           
  3430                           ; BSR set to: 0
  3431  0023D8  0100               	movlb	0	; () banked
  3432  0023DA  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3433  0023DC  0100               	movlb	0	; () banked
  3434  0023DE  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
  3435                           
  3436                           ; BSR set to: 0
  3437  0023E0  0E80               	movlw	128
  3438  0023E2  0100               	movlb	0	; () banked
  3439  0023E4  17A0               	andwf	___ftdiv@sign& (0+255),f,b
  3440                           
  3441                           ; BSR set to: 0
  3442  0023E6  0100               	movlb	0	; () banked
  3443  0023E8  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3444                           
  3445                           ; BSR set to: 0
  3446  0023EA  0EFF               	movlw	255
  3447  0023EC  0100               	movlb	0	; () banked
  3448  0023EE  1792               	andwf	___ftdiv@f1& (0+255),f,b
  3449  0023F0  0EFF               	movlw	255
  3450  0023F2  0100               	movlb	0	; () banked
  3451  0023F4  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3452  0023F6  0E00               	movlw	0
  3453  0023F8  0100               	movlb	0	; () banked
  3454  0023FA  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3455                           
  3456                           ; BSR set to: 0
  3457  0023FC  0100               	movlb	0	; () banked
  3458  0023FE  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3459                           
  3460                           ; BSR set to: 0
  3461  002400  0EFF               	movlw	255
  3462  002402  0100               	movlb	0	; () banked
  3463  002404  1795               	andwf	___ftdiv@f2& (0+255),f,b
  3464  002406  0EFF               	movlw	255
  3465  002408  0100               	movlb	0	; () banked
  3466  00240A  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3467  00240C  0E00               	movlw	0
  3468  00240E  0100               	movlb	0	; () banked
  3469  002410  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3470                           
  3471                           ; BSR set to: 0
  3472  002412  0E18               	movlw	24
  3473  002414  0100               	movlb	0	; () banked
  3474  002416  6F9B               	movwf	___ftdiv@cntr& (0+255),b
  3475  002418                     l3906:
  3476                           
  3477                           ; BSR set to: 0
  3478  002418  0100               	movlb	0	; () banked
  3479  00241A  90D8               	bcf	status,0,c
  3480  00241C  379C               	rlcf	___ftdiv@f3& (0+255),f,b
  3481  00241E  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3482  002420  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3483                           
  3484                           ; BSR set to: 0
  3485  002422  0100               	movlb	0	; () banked
  3486  002424  5195               	movf	___ftdiv@f2& (0+255),w,b
  3487  002426  0100               	movlb	0	; () banked
  3488  002428  5D92               	subwf	___ftdiv@f1& (0+255),w,b
  3489  00242A  0100               	movlb	0	; () banked
  3490  00242C  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3491  00242E  0100               	movlb	0	; () banked
  3492  002430  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3493  002432  0100               	movlb	0	; () banked
  3494  002434  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3495  002436  0100               	movlb	0	; () banked
  3496  002438  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3497  00243A  A0D8               	btfss	status,0,c
  3498  00243C  D00E               	goto	l1091
  3499                           
  3500                           ; BSR set to: 0
  3501  00243E  0100               	movlb	0	; () banked
  3502  002440  5195               	movf	___ftdiv@f2& (0+255),w,b
  3503  002442  0100               	movlb	0	; () banked
  3504  002444  5F92               	subwf	___ftdiv@f1& (0+255),f,b
  3505  002446  0100               	movlb	0	; () banked
  3506  002448  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3507  00244A  0100               	movlb	0	; () banked
  3508  00244C  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3509  00244E  0100               	movlb	0	; () banked
  3510  002450  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3511  002452  0100               	movlb	0	; () banked
  3512  002454  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3513                           
  3514                           ; BSR set to: 0
  3515  002456  0100               	movlb	0	; () banked
  3516  002458  819C               	bsf	___ftdiv@f3& (0+255),0,b
  3517  00245A                     l1091:
  3518                           
  3519                           ; BSR set to: 0
  3520  00245A  0100               	movlb	0	; () banked
  3521  00245C  90D8               	bcf	status,0,c
  3522  00245E  3792               	rlcf	___ftdiv@f1& (0+255),f,b
  3523  002460  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3524  002462  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3525                           
  3526                           ; BSR set to: 0
  3527  002464  0100               	movlb	0	; () banked
  3528  002466  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
  3529  002468  D7D7               	goto	l3906
  3530                           
  3531                           ; BSR set to: 0
  3532                           
  3533                           ; BSR set to: 0
  3534  00246A  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
  3535  00246E  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3536  002472  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3537  002476  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
  3538  00247A  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
  3539  00247E  EC28  F014         	call	___ftpack	;wreg free
  3540  002482  C080  F092         	movff	?___ftpack,?___ftdiv
  3541  002486  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
  3542  00248A  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
  3543  00248E  0012               	return	
  3544  002490                     __end_of___ftdiv:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postdec1	equ	0xFE5
  3553                           fsr1l	equ	0xFE1
  3554                           postinc2	equ	0xFDE
  3555                           postdec2	equ	0xFDD
  3556                           fsr2h	equ	0xFDA
  3557                           fsr2l	equ	0xFD9
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function ___awtoft *****************
  3561 ;; Defined at:
  3562 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  c               2    8[BANK0 ] int 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  sign            1   11[BANK0 ] unsigned char 
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  3    8[BANK0 ] float 
  3569 ;; Registers used:
  3570 ;;		wreg, status,2, status,0, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3576 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;Total ram usage:        4 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    6
  3583 ;; This function calls:
  3584 ;;		___ftpack
  3585 ;; This function is called by:
  3586 ;;		_angleToPulse
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text9
  3591  003BB6                     __ptext9:
  3592                           	opt stack 0
  3593  003BB6                     ___awtoft:
  3594                           	opt stack 21
  3595                           
  3596                           ;incstack = 0
  3597  003BB6  0E00               	movlw	0
  3598  003BB8  0100               	movlb	0	; () banked
  3599  003BBA  6F8B               	movwf	___awtoft@sign& (0+255),b
  3600                           
  3601                           ; BSR set to: 0
  3602  003BBC  0100               	movlb	0	; () banked
  3603  003BBE  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
  3604  003BC0  D008               	goto	l4056
  3605                           
  3606                           ; BSR set to: 0
  3607  003BC2  0100               	movlb	0	; () banked
  3608  003BC4  6D88               	negf	___awtoft@c& (0+255),b
  3609  003BC6  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
  3610  003BC8  B0D8               	btfsc	status,0,c
  3611  003BCA  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
  3612                           
  3613                           ; BSR set to: 0
  3614  003BCC  0E01               	movlw	1
  3615  003BCE  0100               	movlb	0	; () banked
  3616  003BD0  6F8B               	movwf	___awtoft@sign& (0+255),b
  3617  003BD2                     l4056:
  3618                           
  3619                           ; BSR set to: 0
  3620  003BD2  C088  F080         	movff	___awtoft@c,___ftpack@arg
  3621  003BD6  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  3622  003BDA  0100               	movlb	0	; () banked
  3623  003BDC  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  3624  003BDE  0E8E               	movlw	142
  3625  003BE0  0100               	movlb	0	; () banked
  3626  003BE2  6F83               	movwf	___ftpack@exp& (0+255),b
  3627  003BE4  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
  3628  003BE8  EC28  F014         	call	___ftpack	;wreg free
  3629  003BEC  C080  F088         	movff	?___ftpack,?___awtoft
  3630  003BF0  C081  F089         	movff	?___ftpack+1,?___awtoft+1
  3631  003BF4  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
  3632  003BF8  0012               	return	
  3633  003BFA                     __end_of___awtoft:
  3634                           	opt stack 0
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           postinc0	equ	0xFEE
  3640                           wreg	equ	0xFE8
  3641                           postdec1	equ	0xFE5
  3642                           fsr1l	equ	0xFE1
  3643                           postinc2	equ	0xFDE
  3644                           postdec2	equ	0xFDD
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function ___altoft *****************
  3650 ;; Defined at:
  3651 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  c               4    8[BANK0 ] long 
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;  sign            1   17[BANK0 ] unsigned char 
  3656 ;;  exp             1   16[BANK0 ] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  3    8[BANK0 ] float 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3666 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;Total ram usage:       10 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    6
  3673 ;; This function calls:
  3674 ;;		___ftpack
  3675 ;; This function is called by:
  3676 ;;		_sortBattery
  3677 ;;		_angleToPulse
  3678 ;;		_testFrequency
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text10
  3683  00348A                     __ptext10:
  3684                           	opt stack 0
  3685  00348A                     ___altoft:
  3686                           	opt stack 21
  3687                           
  3688                           ;incstack = 0
  3689  00348A  0E00               	movlw	0
  3690  00348C  0100               	movlb	0	; () banked
  3691  00348E  6F91               	movwf	___altoft@sign& (0+255),b
  3692  003490  0E8E               	movlw	142
  3693  003492  0100               	movlb	0	; () banked
  3694  003494  6F90               	movwf	___altoft@exp& (0+255),b
  3695                           
  3696                           ; BSR set to: 0
  3697  003496  0100               	movlb	0	; () banked
  3698  003498  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
  3699  00349A  D015               	goto	l3798
  3700                           
  3701                           ; BSR set to: 0
  3702  00349C  0100               	movlb	0	; () banked
  3703  00349E  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
  3704  0034A0  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
  3705  0034A2  1F89               	comf	(___altoft@c+1)& (0+255),f,b
  3706  0034A4  6D88               	negf	___altoft@c& (0+255),b
  3707  0034A6  0E00               	movlw	0
  3708  0034A8  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
  3709  0034AA  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
  3710  0034AC  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
  3711                           
  3712                           ; BSR set to: 0
  3713  0034AE  0E01               	movlw	1
  3714  0034B0  0100               	movlb	0	; () banked
  3715  0034B2  6F91               	movwf	___altoft@sign& (0+255),b
  3716                           
  3717                           ; BSR set to: 0
  3718  0034B4  D008               	goto	l3798
  3719  0034B6                     l3796:
  3720                           
  3721                           ; BSR set to: 0
  3722  0034B6  0100               	movlb	0	; () banked
  3723  0034B8  90D8               	bcf	status,0,c
  3724  0034BA  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
  3725  0034BC  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
  3726  0034BE  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
  3727  0034C0  3388               	rrcf	___altoft@c& (0+255),f,b
  3728  0034C2  0100               	movlb	0	; () banked
  3729  0034C4  2B90               	incf	___altoft@exp& (0+255),f,b
  3730  0034C6                     l3798:
  3731                           
  3732                           ; BSR set to: 0
  3733  0034C6  0E00               	movlw	0
  3734  0034C8  0100               	movlb	0	; () banked
  3735  0034CA  1588               	andwf	___altoft@c& (0+255),w,b
  3736  0034CC  0100               	movlb	0	; () banked
  3737  0034CE  6F8C               	movwf	??___altoft& (0+255),b
  3738  0034D0  0E00               	movlw	0
  3739  0034D2  0100               	movlb	0	; () banked
  3740  0034D4  1589               	andwf	(___altoft@c+1)& (0+255),w,b
  3741  0034D6  0100               	movlb	0	; () banked
  3742  0034D8  6F8D               	movwf	(??___altoft+1)& (0+255),b
  3743  0034DA  0E00               	movlw	0
  3744  0034DC  0100               	movlb	0	; () banked
  3745  0034DE  158A               	andwf	(___altoft@c+2)& (0+255),w,b
  3746  0034E0  0100               	movlb	0	; () banked
  3747  0034E2  6F8E               	movwf	(??___altoft+2)& (0+255),b
  3748  0034E4  0EFF               	movlw	255
  3749  0034E6  0100               	movlb	0	; () banked
  3750  0034E8  158B               	andwf	(___altoft@c+3)& (0+255),w,b
  3751  0034EA  0100               	movlb	0	; () banked
  3752  0034EC  6F8F               	movwf	(??___altoft+3)& (0+255),b
  3753  0034EE  0100               	movlb	0	; () banked
  3754  0034F0  518C               	movf	??___altoft& (0+255),w,b
  3755  0034F2  0100               	movlb	0	; () banked
  3756  0034F4  118D               	iorwf	(??___altoft+1)& (0+255),w,b
  3757  0034F6  0100               	movlb	0	; () banked
  3758  0034F8  118E               	iorwf	(??___altoft+2)& (0+255),w,b
  3759  0034FA  0100               	movlb	0	; () banked
  3760  0034FC  118F               	iorwf	(??___altoft+3)& (0+255),w,b
  3761  0034FE  A4D8               	btfss	status,2,c
  3762  003500  D7DA               	goto	l3796
  3763                           
  3764                           ; BSR set to: 0
  3765                           
  3766                           ; BSR set to: 0
  3767  003502  C088  F080         	movff	___altoft@c,___ftpack@arg
  3768  003506  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
  3769  00350A  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
  3770  00350E  C090  F083         	movff	___altoft@exp,___ftpack@exp
  3771  003512  C091  F084         	movff	___altoft@sign,___ftpack@sign
  3772  003516  EC28  F014         	call	___ftpack	;wreg free
  3773  00351A  C080  F088         	movff	?___ftpack,?___altoft
  3774  00351E  C081  F089         	movff	?___ftpack+1,?___altoft+1
  3775  003522  C082  F08A         	movff	?___ftpack+2,?___altoft+2
  3776  003526  0012               	return	
  3777  003528                     __end_of___altoft:
  3778                           	opt stack 0
  3779                           tblptru	equ	0xFF8
  3780                           tblptrh	equ	0xFF7
  3781                           tblptrl	equ	0xFF6
  3782                           tablat	equ	0xFF5
  3783                           postinc0	equ	0xFEE
  3784                           wreg	equ	0xFE8
  3785                           postdec1	equ	0xFE5
  3786                           fsr1l	equ	0xFE1
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _initTimer *****************
  3794 ;; Defined at:
  3795 ;;		line 52 in file "timer.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  timer           2    0[BANK0 ] int 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3809 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;Total ram usage:        4 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    5
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_initServo
  3820 ;;		_testFrequency
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           	psect	text11
  3825  003B22                     __ptext11:
  3826                           	opt stack 0
  3827  003B22                     _initTimer:
  3828                           	opt stack 23
  3829                           
  3830                           ;timer.c: 53: switch(timer){
  3831                           
  3832                           ;incstack = 0
  3833  003B22  D00D               	goto	l4768
  3834  003B24                     l4752:
  3835                           
  3836                           ;timer.c: 55: T0CON = 0;
  3837  003B24  0E00               	movlw	0
  3838  003B26  6ED5               	movwf	4053,c	;volatile
  3839                           
  3840                           ;timer.c: 56: T0CON |= 1<<3;
  3841  003B28  86D5               	bsf	4053,3,c	;volatile
  3842                           
  3843                           ;timer.c: 58: TMR0IE = 1;
  3844  003B2A  8AF2               	bsf	intcon,5,c	;volatile
  3845                           
  3846                           ;timer.c: 59: break;
  3847  003B2C  D01C               	goto	l383
  3848  003B2E                     l4758:
  3849                           
  3850                           ;timer.c: 61: T1CON = 0;
  3851  003B2E  0E00               	movlw	0
  3852  003B30  6ECD               	movwf	4045,c	;volatile
  3853                           
  3854                           ;timer.c: 63: TMR1IE = 1;
  3855  003B32  809D               	bsf	3997,0,c	;volatile
  3856                           
  3857                           ;timer.c: 64: break;
  3858  003B34  D018               	goto	l383
  3859  003B36                     l4762:
  3860                           
  3861                           ;timer.c: 66: T3CON = 0;
  3862  003B36  0E00               	movlw	0
  3863  003B38  6EB1               	movwf	4017,c	;volatile
  3864                           
  3865                           ;timer.c: 67: TMR3IE = 1;
  3866  003B3A  82A0               	bsf	4000,1,c	;volatile
  3867                           
  3868                           ;timer.c: 69: }
  3869                           
  3870                           ;timer.c: 68: break;
  3871  003B3C  D014               	goto	l383
  3872  003B3E                     l4768:
  3873  003B3E  C080  F082         	movff	initTimer@timer,??_initTimer
  3874  003B42  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
  3875                           
  3876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3877                           ; Switch size 1, requested type "space"
  3878                           ; Number of cases is 1, Range of values is 0 to 0
  3879                           ; switch strategies available:
  3880                           ; Name         Instructions Cycles
  3881                           ; simple_byte            4     3 (average)
  3882                           ;	Chosen strategy is simple_byte
  3883  003B46  0100               	movlb	0	; () banked
  3884  003B48  5183               	movf	(??_initTimer+1)& (0+255),w,b
  3885  003B4A  0A00               	xorlw	0	; case 0
  3886  003B4C  A4D8               	btfss	status,2,c
  3887  003B4E  D00B               	goto	l383
  3888                           
  3889                           ; BSR set to: 0
  3890                           ; Switch size 1, requested type "space"
  3891                           ; Number of cases is 3, Range of values is 0 to 3
  3892                           ; switch strategies available:
  3893                           ; Name         Instructions Cycles
  3894                           ; simple_byte           10     6 (average)
  3895                           ;	Chosen strategy is simple_byte
  3896  003B50  0100               	movlb	0	; () banked
  3897  003B52  5182               	movf	??_initTimer& (0+255),w,b
  3898  003B54  0A00               	xorlw	0	; case 0
  3899  003B56  B4D8               	btfsc	status,2,c
  3900  003B58  D7E5               	goto	l4752
  3901  003B5A  0A01               	xorlw	1	; case 1
  3902  003B5C  B4D8               	btfsc	status,2,c
  3903  003B5E  D7E7               	goto	l4758
  3904  003B60  0A02               	xorlw	2	; case 3
  3905  003B62  B4D8               	btfsc	status,2,c
  3906  003B64  D7E8               	goto	l4762
  3907  003B66                     l383:
  3908                           
  3909                           ;timer.c: 70: PEIE = 1;
  3910  003B66  8CF2               	bsf	intcon,6,c	;volatile
  3911                           
  3912                           ;timer.c: 71: (INTCONbits.GIE = 1);
  3913  003B68  8EF2               	bsf	intcon,7,c	;volatile
  3914  003B6A  0012               	return		;funcret
  3915  003B6C                     __end_of_initTimer:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           intcon	equ	0xFF2
  3922                           postinc0	equ	0xFEE
  3923                           wreg	equ	0xFE8
  3924                           postdec1	equ	0xFE5
  3925                           fsr1l	equ	0xFE1
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _digitalWrite *****************
  3933 ;; Defined at:
  3934 ;;		line 53 in file "iopin.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  port            2    0[BANK0 ] int 
  3937 ;;  pin             2    2[BANK0 ] int 
  3938 ;;  val             2    4[BANK0 ] int 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2, status,0
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3950 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;Total ram usage:        9 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    5
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_sortBattery
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text12
  3965  002E16                     __ptext12:
  3966                           	opt stack 0
  3967  002E16                     _digitalWrite:
  3968                           	opt stack 24
  3969                           
  3970                           ;iopin.c: 54: pin = 1 << pin;
  3971                           
  3972                           ;incstack = 0
  3973  002E16  C082  F086         	movff	digitalWrite@pin,??_digitalWrite
  3974  002E1A  0E01               	movlw	1
  3975  002E1C  0100               	movlb	0	; () banked
  3976  002E1E  6F87               	movwf	(??_digitalWrite+1)& (0+255),b
  3977  002E20  0E00               	movlw	0
  3978  002E22  0100               	movlb	0	; () banked
  3979  002E24  6F88               	movwf	(??_digitalWrite+2)& (0+255),b
  3980  002E26  0100               	movlb	0	; () banked
  3981  002E28  2B86               	incf	??_digitalWrite& (0+255),f,b
  3982  002E2A  D004               	goto	u5114
  3983  002E2C                     u5115:
  3984  002E2C  90D8               	bcf	status,0,c
  3985  002E2E  0100               	movlb	0	; () banked
  3986  002E30  3787               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  3987  002E32  3788               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  3988  002E34                     u5114:
  3989  002E34  0100               	movlb	0	; () banked
  3990  002E36  2F86               	decfsz	??_digitalWrite& (0+255),f,b
  3991  002E38  D7F9               	goto	u5115
  3992  002E3A  C087  F082         	movff	??_digitalWrite+1,digitalWrite@pin
  3993  002E3E  C088  F083         	movff	??_digitalWrite+2,digitalWrite@pin+1
  3994                           
  3995                           ;iopin.c: 55: if(val == 0){
  3996  002E42  0100               	movlb	0	; () banked
  3997  002E44  5184               	movf	digitalWrite@val& (0+255),w,b
  3998  002E46  0100               	movlb	0	; () banked
  3999  002E48  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4000  002E4A  A4D8               	btfss	status,2,c
  4001  002E4C  D03C               	goto	l5086
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;iopin.c: 56: pin ^= 0xff;
  4005  002E4E  0EFF               	movlw	255
  4006  002E50  0100               	movlb	0	; () banked
  4007  002E52  1B82               	xorwf	digitalWrite@pin& (0+255),f,b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;iopin.c: 57: }
  4011                           ;iopin.c: 59: switch(port){
  4012  002E54  D038               	goto	l5086
  4013  002E56                     l5062:
  4014                           
  4015                           ; BSR set to: 0
  4016  002E56  0100               	movlb	0	; () banked
  4017  002E58  0584               	decf	digitalWrite@val& (0+255),w,b
  4018  002E5A  0100               	movlb	0	; () banked
  4019  002E5C  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4020  002E5E  A4D8               	btfss	status,2,c
  4021  002E60  D004               	goto	l5066
  4022                           
  4023                           ; BSR set to: 0
  4024  002E62  0100               	movlb	0	; () banked
  4025  002E64  5182               	movf	digitalWrite@pin& (0+255),w,b
  4026  002E66  1289               	iorwf	3977,f,c	;volatile
  4027  002E68  0012               	return	
  4028  002E6A                     l5066:
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;iopin.c: 61: else LATA &= pin;
  4032  002E6A  0100               	movlb	0	; () banked
  4033  002E6C  5182               	movf	digitalWrite@pin& (0+255),w,b
  4034  002E6E  1689               	andwf	3977,f,c	;volatile
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;iopin.c: 62: break;
  4038  002E70  0012               	return	
  4039  002E72                     l5068:
  4040                           
  4041                           ; BSR set to: 0
  4042  002E72  0100               	movlb	0	; () banked
  4043  002E74  0584               	decf	digitalWrite@val& (0+255),w,b
  4044  002E76  0100               	movlb	0	; () banked
  4045  002E78  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4046  002E7A  A4D8               	btfss	status,2,c
  4047  002E7C  D004               	goto	l5072
  4048                           
  4049                           ; BSR set to: 0
  4050  002E7E  0100               	movlb	0	; () banked
  4051  002E80  5182               	movf	digitalWrite@pin& (0+255),w,b
  4052  002E82  128A               	iorwf	3978,f,c	;volatile
  4053  002E84  0012               	return	
  4054  002E86                     l5072:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;iopin.c: 64: else LATB &= pin;
  4058  002E86  0100               	movlb	0	; () banked
  4059  002E88  5182               	movf	digitalWrite@pin& (0+255),w,b
  4060  002E8A  168A               	andwf	3978,f,c	;volatile
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;iopin.c: 65: break;
  4064  002E8C  0012               	return	
  4065  002E8E                     l5074:
  4066                           
  4067                           ; BSR set to: 0
  4068  002E8E  0100               	movlb	0	; () banked
  4069  002E90  0584               	decf	digitalWrite@val& (0+255),w,b
  4070  002E92  0100               	movlb	0	; () banked
  4071  002E94  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4072  002E96  A4D8               	btfss	status,2,c
  4073  002E98  D004               	goto	l5078
  4074                           
  4075                           ; BSR set to: 0
  4076  002E9A  0100               	movlb	0	; () banked
  4077  002E9C  5182               	movf	digitalWrite@pin& (0+255),w,b
  4078  002E9E  128B               	iorwf	3979,f,c	;volatile
  4079  002EA0  0012               	return	
  4080  002EA2                     l5078:
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;iopin.c: 67: else LATC &= pin;
  4084  002EA2  0100               	movlb	0	; () banked
  4085  002EA4  5182               	movf	digitalWrite@pin& (0+255),w,b
  4086  002EA6  168B               	andwf	3979,f,c	;volatile
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;iopin.c: 68: break;
  4090  002EA8  0012               	return	
  4091  002EAA                     l5080:
  4092                           
  4093                           ; BSR set to: 0
  4094  002EAA  0100               	movlb	0	; () banked
  4095  002EAC  0584               	decf	digitalWrite@val& (0+255),w,b
  4096  002EAE  0100               	movlb	0	; () banked
  4097  002EB0  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4098  002EB2  A4D8               	btfss	status,2,c
  4099  002EB4  D004               	goto	l5084
  4100                           
  4101                           ; BSR set to: 0
  4102  002EB6  0100               	movlb	0	; () banked
  4103  002EB8  5182               	movf	digitalWrite@pin& (0+255),w,b
  4104  002EBA  128C               	iorwf	3980,f,c	;volatile
  4105  002EBC  0012               	return	
  4106  002EBE                     l5084:
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;iopin.c: 70: else LATD &= pin;
  4110  002EBE  0100               	movlb	0	; () banked
  4111  002EC0  5182               	movf	digitalWrite@pin& (0+255),w,b
  4112  002EC2  168C               	andwf	3980,f,c	;volatile
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;iopin.c: 71: }
  4116  002EC4  0012               	return	
  4117  002EC6                     l5086:
  4118                           
  4119                           ; BSR set to: 0
  4120  002EC6  C080  F086         	movff	digitalWrite@port,??_digitalWrite
  4121  002ECA  C081  F087         	movff	digitalWrite@port+1,??_digitalWrite+1
  4122                           
  4123                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4124                           ; Switch size 1, requested type "space"
  4125                           ; Number of cases is 1, Range of values is 0 to 0
  4126                           ; switch strategies available:
  4127                           ; Name         Instructions Cycles
  4128                           ; simple_byte            4     3 (average)
  4129                           ;	Chosen strategy is simple_byte
  4130  002ECE  0100               	movlb	0	; () banked
  4131  002ED0  5187               	movf	(??_digitalWrite+1)& (0+255),w,b
  4132  002ED2  0A00               	xorlw	0	; case 0
  4133  002ED4  A4D8               	btfss	status,2,c
  4134  002ED6  0012               	return	
  4135                           
  4136                           ; BSR set to: 0
  4137                           ; Switch size 1, requested type "space"
  4138                           ; Number of cases is 4, Range of values is 0 to 3
  4139                           ; switch strategies available:
  4140                           ; Name         Instructions Cycles
  4141                           ; simple_byte           13     7 (average)
  4142                           ;	Chosen strategy is simple_byte
  4143  002ED8  0100               	movlb	0	; () banked
  4144  002EDA  5186               	movf	??_digitalWrite& (0+255),w,b
  4145  002EDC  0A00               	xorlw	0	; case 0
  4146  002EDE  B4D8               	btfsc	status,2,c
  4147  002EE0  D7BA               	goto	l5062
  4148  002EE2  0A01               	xorlw	1	; case 1
  4149  002EE4  B4D8               	btfsc	status,2,c
  4150  002EE6  D7C5               	goto	l5068
  4151  002EE8  0A03               	xorlw	3	; case 2
  4152  002EEA  B4D8               	btfsc	status,2,c
  4153  002EEC  D7D0               	goto	l5074
  4154  002EEE  0A01               	xorlw	1	; case 3
  4155  002EF0  A4D8               	btfss	status,2,c
  4156  002EF2  0012               	return	
  4157  002EF4  D7DA               	goto	l5080
  4158  002EF6                     __end_of_digitalWrite:
  4159                           	opt stack 0
  4160                           tblptru	equ	0xFF8
  4161                           tblptrh	equ	0xFF7
  4162                           tblptrl	equ	0xFF6
  4163                           tablat	equ	0xFF5
  4164                           intcon	equ	0xFF2
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           postdec1	equ	0xFE5
  4168                           fsr1l	equ	0xFE1
  4169                           postinc2	equ	0xFDE
  4170                           postdec2	equ	0xFDD
  4171                           fsr2h	equ	0xFDA
  4172                           fsr2l	equ	0xFD9
  4173                           status	equ	0xFD8
  4174                           
  4175 ;; *************** function _digitalRead *****************
  4176 ;; Defined at:
  4177 ;;		line 43 in file "iopin.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  port            2    0[BANK0 ] int 
  4180 ;;  pin             2    2[BANK0 ] int 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  2    0[BANK0 ] int 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4192 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;Total ram usage:        6 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    5
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_sortBattery
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text13
  4207  002C48                     __ptext13:
  4208                           	opt stack 0
  4209  002C48                     _digitalRead:
  4210                           	opt stack 24
  4211                           
  4212                           ;iopin.c: 44: switch(port){
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;incstack = 0
  4216  002C48  D058               	goto	l5118
  4217  002C4A                     l5100:
  4218  002C4A  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4219  002C4E  CF80 F085          	movff	3968,??_digitalRead+1	;volatile
  4220  002C52  0100               	movlb	0	; () banked
  4221  002C54  2B84               	incf	??_digitalRead& (0+255),f,b
  4222  002C56  D003               	goto	u5174
  4223  002C58                     u5175:
  4224  002C58  0100               	movlb	0	; () banked
  4225  002C5A  90D8               	bcf	status,0,c
  4226  002C5C  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4227  002C5E                     u5174:
  4228  002C5E  0100               	movlb	0	; () banked
  4229  002C60  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4230  002C62  D7FA               	goto	u5175
  4231  002C64  0E01               	movlw	1
  4232  002C66  0100               	movlb	0	; () banked
  4233  002C68  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4234  002C6A  0100               	movlb	0	; () banked
  4235  002C6C  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4236  002C6E  0100               	movlb	0	; () banked
  4237  002C70  6F80               	movwf	?_digitalRead& (0+255),b
  4238  002C72  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4239                           
  4240                           ; BSR set to: 0
  4241  002C74  0012               	return	
  4242  002C76                     l5104:
  4243                           
  4244                           ; BSR set to: 0
  4245  002C76  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4246  002C7A  CF81 F085          	movff	3969,??_digitalRead+1	;volatile
  4247  002C7E  0100               	movlb	0	; () banked
  4248  002C80  2B84               	incf	??_digitalRead& (0+255),f,b
  4249  002C82  D003               	goto	u5184
  4250  002C84                     u5185:
  4251  002C84  0100               	movlb	0	; () banked
  4252  002C86  90D8               	bcf	status,0,c
  4253  002C88  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4254  002C8A                     u5184:
  4255  002C8A  0100               	movlb	0	; () banked
  4256  002C8C  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4257  002C8E  D7FA               	goto	u5185
  4258  002C90  0E01               	movlw	1
  4259  002C92  0100               	movlb	0	; () banked
  4260  002C94  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4261  002C96  0100               	movlb	0	; () banked
  4262  002C98  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4263  002C9A  0100               	movlb	0	; () banked
  4264  002C9C  6F80               	movwf	?_digitalRead& (0+255),b
  4265  002C9E  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4266                           
  4267                           ; BSR set to: 0
  4268  002CA0  0012               	return	
  4269  002CA2                     l5108:
  4270                           
  4271                           ; BSR set to: 0
  4272  002CA2  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4273  002CA6  CF82 F085          	movff	3970,??_digitalRead+1	;volatile
  4274  002CAA  0100               	movlb	0	; () banked
  4275  002CAC  2B84               	incf	??_digitalRead& (0+255),f,b
  4276  002CAE  D003               	goto	u5194
  4277  002CB0                     u5195:
  4278  002CB0  0100               	movlb	0	; () banked
  4279  002CB2  90D8               	bcf	status,0,c
  4280  002CB4  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4281  002CB6                     u5194:
  4282  002CB6  0100               	movlb	0	; () banked
  4283  002CB8  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4284  002CBA  D7FA               	goto	u5195
  4285  002CBC  0E01               	movlw	1
  4286  002CBE  0100               	movlb	0	; () banked
  4287  002CC0  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4288  002CC2  0100               	movlb	0	; () banked
  4289  002CC4  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4290  002CC6  0100               	movlb	0	; () banked
  4291  002CC8  6F80               	movwf	?_digitalRead& (0+255),b
  4292  002CCA  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4293                           
  4294                           ; BSR set to: 0
  4295  002CCC  0012               	return	
  4296  002CCE                     l5112:
  4297                           
  4298                           ; BSR set to: 0
  4299  002CCE  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4300  002CD2  CF83 F085          	movff	3971,??_digitalRead+1	;volatile
  4301  002CD6  0100               	movlb	0	; () banked
  4302  002CD8  2B84               	incf	??_digitalRead& (0+255),f,b
  4303  002CDA  D003               	goto	u5204
  4304  002CDC                     u5205:
  4305  002CDC  0100               	movlb	0	; () banked
  4306  002CDE  90D8               	bcf	status,0,c
  4307  002CE0  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4308  002CE2                     u5204:
  4309  002CE2  0100               	movlb	0	; () banked
  4310  002CE4  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4311  002CE6  D7FA               	goto	u5205
  4312  002CE8  0E01               	movlw	1
  4313  002CEA  0100               	movlb	0	; () banked
  4314  002CEC  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4315  002CEE  0100               	movlb	0	; () banked
  4316  002CF0  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4317  002CF2  0100               	movlb	0	; () banked
  4318  002CF4  6F80               	movwf	?_digitalRead& (0+255),b
  4319  002CF6  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4320                           
  4321                           ; BSR set to: 0
  4322  002CF8  0012               	return	
  4323  002CFA                     l5118:
  4324  002CFA  C080  F084         	movff	digitalRead@port,??_digitalRead
  4325  002CFE  C081  F085         	movff	digitalRead@port+1,??_digitalRead+1
  4326                           
  4327                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4328                           ; Switch size 1, requested type "space"
  4329                           ; Number of cases is 1, Range of values is 0 to 0
  4330                           ; switch strategies available:
  4331                           ; Name         Instructions Cycles
  4332                           ; simple_byte            4     3 (average)
  4333                           ;	Chosen strategy is simple_byte
  4334  002D02  0100               	movlb	0	; () banked
  4335  002D04  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4336  002D06  0A00               	xorlw	0	; case 0
  4337  002D08  A4D8               	btfss	status,2,c
  4338  002D0A  D00E               	goto	l285
  4339                           
  4340                           ; BSR set to: 0
  4341                           ; Switch size 1, requested type "space"
  4342                           ; Number of cases is 4, Range of values is 0 to 3
  4343                           ; switch strategies available:
  4344                           ; Name         Instructions Cycles
  4345                           ; simple_byte           13     7 (average)
  4346                           ;	Chosen strategy is simple_byte
  4347  002D0C  0100               	movlb	0	; () banked
  4348  002D0E  5184               	movf	??_digitalRead& (0+255),w,b
  4349  002D10  0A00               	xorlw	0	; case 0
  4350  002D12  B4D8               	btfsc	status,2,c
  4351  002D14  D79A               	goto	l5100
  4352  002D16  0A01               	xorlw	1	; case 1
  4353  002D18  B4D8               	btfsc	status,2,c
  4354  002D1A  D7AD               	goto	l5104
  4355  002D1C  0A03               	xorlw	3	; case 2
  4356  002D1E  B4D8               	btfsc	status,2,c
  4357  002D20  D7C0               	goto	l5108
  4358  002D22  0A01               	xorlw	1	; case 3
  4359  002D24  B4D8               	btfsc	status,2,c
  4360  002D26  D7D3               	goto	l5112
  4361  002D28                     l285:
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;iopin.c: 50: return -1;
  4365  002D28  0100               	movlb	0	; () banked
  4366  002D2A  6980               	setf	?_digitalRead& (0+255),b
  4367  002D2C  6981               	setf	(?_digitalRead+1)& (0+255),b
  4368                           
  4369                           ; BSR set to: 0
  4370  002D2E  0012               	return		;funcret
  4371  002D30                     __end_of_digitalRead:
  4372                           	opt stack 0
  4373                           tblptru	equ	0xFF8
  4374                           tblptrh	equ	0xFF7
  4375                           tblptrl	equ	0xFF6
  4376                           tablat	equ	0xFF5
  4377                           intcon	equ	0xFF2
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           postdec1	equ	0xFE5
  4381                           fsr1l	equ	0xFE1
  4382                           postinc2	equ	0xFDE
  4383                           postdec2	equ	0xFDD
  4384                           fsr2h	equ	0xFDA
  4385                           fsr2l	equ	0xFD9
  4386                           status	equ	0xFD8
  4387                           
  4388 ;; *************** function _analogRead *****************
  4389 ;; Defined at:
  4390 ;;		line 88 in file "iopin.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  channel         2    0[BANK0 ] int 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;		None
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  4    0[BANK0 ] long 
  4397 ;; Registers used:
  4398 ;;		wreg, status,2, status,0
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4404 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;Total ram usage:        6 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    5
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_sortBattery
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text14
  4419  003BFA                     __ptext14:
  4420                           	opt stack 0
  4421  003BFA                     _analogRead:
  4422                           	opt stack 24
  4423                           
  4424                           ;iopin.c: 89: ADCON0 = channel<<2;
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;incstack = 0
  4428  003BFA  0100               	movlb	0	; () banked
  4429  003BFC  4580               	rlncf	analogRead@channel& (0+255),w,b
  4430  003BFE  46E8               	rlncf	wreg,f,c
  4431  003C00  0BFC               	andlw	252
  4432  003C02  6EC2               	movwf	4034,c	;volatile
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;iopin.c: 90: ADCON0 |= 1<<0;
  4436  003C04  80C2               	bsf	4034,0,c	;volatile
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;iopin.c: 91: ADCON0 |= 1<<1;
  4440  003C06  82C2               	bsf	4034,1,c	;volatile
  4441  003C08                     l309:
  4442  003C08  B2C2               	btfsc	4034,1,c	;volatile
  4443  003C0A  D7FE               	goto	l309
  4444                           
  4445                           ;iopin.c: 95: return (ADRESH<<8) + ADRESL;
  4446  003C0C  50C3               	movf	4035,w,c	;volatile
  4447  003C0E  CFC4 F084          	movff	4036,??_analogRead	;volatile
  4448  003C12  0100               	movlb	0	; () banked
  4449  003C14  6B85               	clrf	(??_analogRead+1)& (0+255),b
  4450  003C16  C084  F085         	movff	??_analogRead,??_analogRead+1
  4451  003C1A  0100               	movlb	0	; () banked
  4452  003C1C  6B84               	clrf	??_analogRead& (0+255),b
  4453  003C1E  0100               	movlb	0	; () banked
  4454  003C20  2784               	addwf	??_analogRead& (0+255),f,b
  4455  003C22  0E00               	movlw	0
  4456  003C24  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  4457  003C26  C084  F080         	movff	??_analogRead,?_analogRead
  4458  003C2A  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  4459  003C2E  0100               	movlb	0	; () banked
  4460  003C30  0E00               	movlw	0
  4461  003C32  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  4462  003C34  0EFF               	movlw	-1
  4463  003C36  6F82               	movwf	(?_analogRead+2)& (0+255),b
  4464  003C38  6F83               	movwf	(?_analogRead+3)& (0+255),b
  4465  003C3A  0012               	return	
  4466  003C3C                     __end_of_analogRead:
  4467                           	opt stack 0
  4468                           tblptru	equ	0xFF8
  4469                           tblptrh	equ	0xFF7
  4470                           tblptrl	equ	0xFF6
  4471                           tablat	equ	0xFF5
  4472                           intcon	equ	0xFF2
  4473                           postinc0	equ	0xFEE
  4474                           wreg	equ	0xFE8
  4475                           postdec1	equ	0xFE5
  4476                           fsr1l	equ	0xFE1
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _showInterface *****************
  4484 ;; Defined at:
  4485 ;;		line 14 in file "interface.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;  key             1  100[BANK0 ] unsigned char 
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;Total ram usage:        1 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:   11
  4506 ;; This function calls:
  4507 ;;		_dateTime
  4508 ;;		_mainMenu
  4509 ;;		_readKeypad
  4510 ;;		_runMenu
  4511 ;;		_runSelect
  4512 ;;		_runStats
  4513 ;;		_runTime
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text15
  4520  00295C                     __ptext15:
  4521                           	opt stack 0
  4522  00295C                     _showInterface:
  4523                           	opt stack 19
  4524  00295C                     
  4525                           ;interface.c: 17: dateTime();
  4526  00295C  EC72  F01F         	call	_dateTime	;wreg free
  4527  002960                     l5340:
  4528  002960  ECD3  F01E         	call	_readKeypad	;wreg free
  4529  002964  0A41               	xorlw	65
  4530  002966  A4D8               	btfss	status,2,c
  4531  002968  D7FB               	goto	l5340
  4532  00296A                     l5342:
  4533                           
  4534                           ;interface.c: 22: mainMenu();
  4535  00296A  EC5F  F01F         	call	_mainMenu	;wreg free
  4536  00296E                     l5344:
  4537  00296E  ECD3  F01E         	call	_readKeypad	;wreg free
  4538  002972  0100               	movlb	0	; () banked
  4539  002974  6FE4               	movwf	showInterface@key& (0+255),b
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;interface.c: 26: while(key != 'B' && key != 'C' && key != '*');
  4543  002976  0E42               	movlw	66
  4544  002978  0100               	movlb	0	; () banked
  4545  00297A  19E4               	xorwf	showInterface@key& (0+255),w,b
  4546  00297C  B4D8               	btfsc	status,2,c
  4547  00297E  D00A               	goto	l5352
  4548                           
  4549                           ; BSR set to: 0
  4550  002980  0E43               	movlw	67
  4551  002982  0100               	movlb	0	; () banked
  4552  002984  19E4               	xorwf	showInterface@key& (0+255),w,b
  4553  002986  B4D8               	btfsc	status,2,c
  4554  002988  D005               	goto	l5352
  4555                           
  4556                           ; BSR set to: 0
  4557  00298A  0E2A               	movlw	42
  4558  00298C  0100               	movlb	0	; () banked
  4559  00298E  19E4               	xorwf	showInterface@key& (0+255),w,b
  4560  002990  A4D8               	btfss	status,2,c
  4561  002992  D7ED               	goto	l5344
  4562  002994                     l5352:
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;interface.c: 28: if(key == 'C'){
  4566  002994  0E43               	movlw	67
  4567  002996  0100               	movlb	0	; () banked
  4568  002998  19E4               	xorwf	showInterface@key& (0+255),w,b
  4569  00299A  A4D8               	btfss	status,2,c
  4570  00299C  D056               	goto	l5396
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;interface.c: 30: runSelect();
  4574  00299E  EC4C  F01F         	call	_runSelect	;wreg free
  4575  0029A2                     l5356:
  4576  0029A2  ECD3  F01E         	call	_readKeypad	;wreg free
  4577  0029A6  0100               	movlb	0	; () banked
  4578  0029A8  6FE4               	movwf	showInterface@key& (0+255),b
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;interface.c: 36: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  4582  0029AA  0E31               	movlw	49
  4583  0029AC  0100               	movlb	0	; () banked
  4584  0029AE  19E4               	xorwf	showInterface@key& (0+255),w,b
  4585  0029B0  B4D8               	btfsc	status,2,c
  4586  0029B2  D014               	goto	l5368
  4587                           
  4588                           ; BSR set to: 0
  4589  0029B4  0E32               	movlw	50
  4590  0029B6  0100               	movlb	0	; () banked
  4591  0029B8  19E4               	xorwf	showInterface@key& (0+255),w,b
  4592  0029BA  B4D8               	btfsc	status,2,c
  4593  0029BC  D00F               	goto	l5368
  4594                           
  4595                           ; BSR set to: 0
  4596  0029BE  0E33               	movlw	51
  4597  0029C0  0100               	movlb	0	; () banked
  4598  0029C2  19E4               	xorwf	showInterface@key& (0+255),w,b
  4599  0029C4  B4D8               	btfsc	status,2,c
  4600  0029C6  D00A               	goto	l5368
  4601                           
  4602                           ; BSR set to: 0
  4603  0029C8  0E34               	movlw	52
  4604  0029CA  0100               	movlb	0	; () banked
  4605  0029CC  19E4               	xorwf	showInterface@key& (0+255),w,b
  4606  0029CE  B4D8               	btfsc	status,2,c
  4607  0029D0  D005               	goto	l5368
  4608                           
  4609                           ; BSR set to: 0
  4610  0029D2  0E2A               	movlw	42
  4611  0029D4  0100               	movlb	0	; () banked
  4612  0029D6  19E4               	xorwf	showInterface@key& (0+255),w,b
  4613  0029D8  A4D8               	btfss	status,2,c
  4614  0029DA  D7E3               	goto	l5356
  4615  0029DC                     l5368:
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;interface.c: 38: if(key == '*')continue;
  4619  0029DC  0E2A               	movlw	42
  4620  0029DE  0100               	movlb	0	; () banked
  4621  0029E0  19E4               	xorwf	showInterface@key& (0+255),w,b
  4622  0029E2  B4D8               	btfsc	status,2,c
  4623  0029E4  D7C2               	goto	l5342
  4624  0029E6                     l5372:
  4625                           
  4626                           ;interface.c: 44: runMenu(key);
  4627  0029E6  0100               	movlb	0	; () banked
  4628  0029E8  51E4               	movf	showInterface@key& (0+255),w,b
  4629  0029EA  EC74  F01E         	call	_runMenu
  4630  0029EE                     l5374:
  4631  0029EE  ECD3  F01E         	call	_readKeypad	;wreg free
  4632  0029F2  0100               	movlb	0	; () banked
  4633  0029F4  6FE4               	movwf	showInterface@key& (0+255),b
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;interface.c: 48: while(key != 'A' && key != 'B' && key != '*');
  4637  0029F6  0E41               	movlw	65
  4638  0029F8  0100               	movlb	0	; () banked
  4639  0029FA  19E4               	xorwf	showInterface@key& (0+255),w,b
  4640  0029FC  B4D8               	btfsc	status,2,c
  4641  0029FE  D00A               	goto	l5382
  4642                           
  4643                           ; BSR set to: 0
  4644  002A00  0E42               	movlw	66
  4645  002A02  0100               	movlb	0	; () banked
  4646  002A04  19E4               	xorwf	showInterface@key& (0+255),w,b
  4647  002A06  B4D8               	btfsc	status,2,c
  4648  002A08  D005               	goto	l5382
  4649                           
  4650                           ; BSR set to: 0
  4651  002A0A  0E2A               	movlw	42
  4652  002A0C  0100               	movlb	0	; () banked
  4653  002A0E  19E4               	xorwf	showInterface@key& (0+255),w,b
  4654  002A10  A4D8               	btfss	status,2,c
  4655  002A12  D7ED               	goto	l5374
  4656  002A14                     l5382:
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;interface.c: 50: if(key == 'A'){
  4660  002A14  0E41               	movlw	65
  4661  002A16  0100               	movlb	0	; () banked
  4662  002A18  19E4               	xorwf	showInterface@key& (0+255),w,b
  4663  002A1A  A4D8               	btfss	status,2,c
  4664  002A1C  D003               	goto	l5386
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;interface.c: 52: runTime();
  4668  002A1E  EC26  F01F         	call	_runTime	;wreg free
  4669                           
  4670                           ;interface.c: 54: }
  4671  002A22  D00D               	goto	l5394
  4672  002A24                     l5386:
  4673                           
  4674                           ;interface.c: 55: else if(key == 'B'){
  4675  002A24  0E42               	movlw	66
  4676  002A26  0100               	movlb	0	; () banked
  4677  002A28  19E4               	xorwf	showInterface@key& (0+255),w,b
  4678  002A2A  A4D8               	btfss	status,2,c
  4679  002A2C  D003               	goto	l5390
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;interface.c: 57: runStats();
  4683  002A2E  EC39  F01F         	call	_runStats	;wreg free
  4684                           
  4685                           ;interface.c: 59: }
  4686  002A32  D005               	goto	l5394
  4687  002A34                     l5390:
  4688                           
  4689                           ;interface.c: 60: else if(key == '*')break;
  4690  002A34  0E2A               	movlw	42
  4691  002A36  0100               	movlb	0	; () banked
  4692  002A38  19E4               	xorwf	showInterface@key& (0+255),w,b
  4693  002A3A  B4D8               	btfsc	status,2,c
  4694  002A3C  D796               	goto	l5342
  4695  002A3E                     l5394:
  4696  002A3E  ECD3  F01E         	call	_readKeypad	;wreg free
  4697  002A42  0A2A               	xorlw	42
  4698  002A44  B4D8               	btfsc	status,2,c
  4699  002A46  D7CF               	goto	l5372
  4700  002A48  D7FA               	goto	l5394
  4701  002A4A                     l5396:
  4702                           
  4703                           ;interface.c: 66: else if(key == 'B'){
  4704  002A4A  0E42               	movlw	66
  4705  002A4C  0100               	movlb	0	; () banked
  4706  002A4E  19E4               	xorwf	showInterface@key& (0+255),w,b
  4707  002A50  B4D8               	btfsc	status,2,c
  4708  002A52  0012               	return	
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;interface.c: 69: else if(key == '*')
  4712                           
  4713                           ; BSR set to: 0
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;interface.c: 68: }
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;interface.c: 67: return;
  4720  002A54  0E2A               	movlw	42
  4721  002A56  0100               	movlb	0	; () banked
  4722  002A58  19E4               	xorwf	showInterface@key& (0+255),w,b
  4723  002A5A  B4D8               	btfsc	status,2,c
  4724  002A5C  D77F               	goto	l5338
  4725  002A5E  D785               	goto	l5342
  4726  002A60                     __end_of_showInterface:
  4727                           	opt stack 0
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           intcon	equ	0xFF2
  4733                           postinc0	equ	0xFEE
  4734                           wreg	equ	0xFE8
  4735                           postdec1	equ	0xFE5
  4736                           fsr1l	equ	0xFE1
  4737                           postinc2	equ	0xFDE
  4738                           postdec2	equ	0xFDD
  4739                           fsr2h	equ	0xFDA
  4740                           fsr2l	equ	0xFD9
  4741                           status	equ	0xFD8
  4742                           
  4743 ;; *************** function _runTime *****************
  4744 ;; Defined at:
  4745 ;;		line 99 in file "interface.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;		None
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;		None
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      void 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;Total ram usage:        0 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:   10
  4766 ;; This function calls:
  4767 ;;		_lcdClear
  4768 ;;		_printf
  4769 ;; This function is called by:
  4770 ;;		_showInterface
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text16
  4775  003E4C                     __ptext16:
  4776                           	opt stack 0
  4777  003E4C                     _runTime:
  4778                           	opt stack 19
  4779                           
  4780                           ;interface.c: 100: lcdClear();
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;incstack = 0
  4784  003E4C  ECAF  F01F         	call	_lcdClear	;wreg free
  4785                           
  4786                           ;interface.c: 101: printf("time: nnn sec   \n");
  4787  003E50  0E0C               	movlw	low STR_20
  4788  003E52  0100               	movlb	0	; () banked
  4789  003E54  6FD5               	movwf	printf@f& (0+255),b
  4790  003E56  0EFF               	movlw	high STR_20
  4791  003E58  0100               	movlb	0	; () banked
  4792  003E5A  6FD6               	movwf	(printf@f+1)& (0+255),b
  4793  003E5C  EC09  F000         	call	_printf	;wreg free
  4794                           
  4795                           ;interface.c: 102: printf("              *>");
  4796  003E60  0E41               	movlw	low STR_21
  4797  003E62  0100               	movlb	0	; () banked
  4798  003E64  6FD5               	movwf	printf@f& (0+255),b
  4799  003E66  0EFF               	movlw	high STR_21
  4800  003E68  0100               	movlb	0	; () banked
  4801  003E6A  6FD6               	movwf	(printf@f+1)& (0+255),b
  4802  003E6C  EC09  F000         	call	_printf	;wreg free
  4803  003E70  0012               	return		;funcret
  4804  003E72                     __end_of_runTime:
  4805                           	opt stack 0
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           intcon	equ	0xFF2
  4811                           postinc0	equ	0xFEE
  4812                           wreg	equ	0xFE8
  4813                           postdec1	equ	0xFE5
  4814                           fsr1l	equ	0xFE1
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           fsr2h	equ	0xFDA
  4818                           fsr2l	equ	0xFD9
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function _runStats *****************
  4822 ;; Defined at:
  4823 ;;		line 105 in file "interface.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;Total ram usage:        0 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:   10
  4844 ;; This function calls:
  4845 ;;		_lcdClear
  4846 ;;		_printf
  4847 ;; This function is called by:
  4848 ;;		_showInterface
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           	psect	text17
  4853  003E72                     __ptext17:
  4854                           	opt stack 0
  4855  003E72                     _runStats:
  4856                           	opt stack 19
  4857                           
  4858                           ;interface.c: 106: lcdClear();
  4859                           
  4860                           ;incstack = 0
  4861  003E72  ECAF  F01F         	call	_lcdClear	;wreg free
  4862                           
  4863                           ;interface.c: 107: printf("[AA,9V,C,other] \n");
  4864  003E76  0E1E               	movlw	low STR_22
  4865  003E78  0100               	movlb	0	; () banked
  4866  003E7A  6FD5               	movwf	printf@f& (0+255),b
  4867  003E7C  0EFF               	movlw	high STR_22
  4868  003E7E  0100               	movlb	0	; () banked
  4869  003E80  6FD6               	movwf	(printf@f+1)& (0+255),b
  4870  003E82  EC09  F000         	call	_printf	;wreg free
  4871                           
  4872                           ;interface.c: 108: printf("[nn,n,n,nn]   *>");
  4873  003E86  0E85               	movlw	low STR_23
  4874  003E88  0100               	movlb	0	; () banked
  4875  003E8A  6FD5               	movwf	printf@f& (0+255),b
  4876  003E8C  0EFF               	movlw	high STR_23
  4877  003E8E  0100               	movlb	0	; () banked
  4878  003E90  6FD6               	movwf	(printf@f+1)& (0+255),b
  4879  003E92  EC09  F000         	call	_printf	;wreg free
  4880  003E96  0012               	return		;funcret
  4881  003E98                     __end_of_runStats:
  4882                           	opt stack 0
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           intcon	equ	0xFF2
  4888                           postinc0	equ	0xFEE
  4889                           wreg	equ	0xFE8
  4890                           postdec1	equ	0xFE5
  4891                           fsr1l	equ	0xFE1
  4892                           postinc2	equ	0xFDE
  4893                           postdec2	equ	0xFDD
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8
  4897                           
  4898 ;; *************** function _runSelect *****************
  4899 ;; Defined at:
  4900 ;;		line 87 in file "interface.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:   10
  4921 ;; This function calls:
  4922 ;;		_lcdClear
  4923 ;;		_printf
  4924 ;; This function is called by:
  4925 ;;		_showInterface
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text18
  4930  003E98                     __ptext18:
  4931                           	opt stack 0
  4932  003E98                     _runSelect:
  4933                           	opt stack 19
  4934                           
  4935                           ;interface.c: 88: lcdClear();
  4936                           
  4937                           ;incstack = 0
  4938  003E98  ECAF  F01F         	call	_lcdClear	;wreg free
  4939                           
  4940                           ;interface.c: 89: printf("select run:     \n");
  4941  003E9C  0EFA               	movlw	low STR_16
  4942  003E9E  0100               	movlb	0	; () banked
  4943  003EA0  6FD5               	movwf	printf@f& (0+255),b
  4944  003EA2  0EFE               	movlw	high STR_16
  4945  003EA4  0100               	movlb	0	; () banked
  4946  003EA6  6FD6               	movwf	(printf@f+1)& (0+255),b
  4947  003EA8  EC09  F000         	call	_printf	;wreg free
  4948                           
  4949                           ;interface.c: 90: printf("[1,2,3,4]     *>");
  4950  003EAC  0E52               	movlw	low STR_17
  4951  003EAE  0100               	movlb	0	; () banked
  4952  003EB0  6FD5               	movwf	printf@f& (0+255),b
  4953  003EB2  0EFF               	movlw	high STR_17
  4954  003EB4  0100               	movlb	0	; () banked
  4955  003EB6  6FD6               	movwf	(printf@f+1)& (0+255),b
  4956  003EB8  EC09  F000         	call	_printf	;wreg free
  4957  003EBC  0012               	return		;funcret
  4958  003EBE                     __end_of_runSelect:
  4959                           	opt stack 0
  4960                           tblptru	equ	0xFF8
  4961                           tblptrh	equ	0xFF7
  4962                           tblptrl	equ	0xFF6
  4963                           tablat	equ	0xFF5
  4964                           intcon	equ	0xFF2
  4965                           postinc0	equ	0xFEE
  4966                           wreg	equ	0xFE8
  4967                           postdec1	equ	0xFE5
  4968                           fsr1l	equ	0xFE1
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function _runMenu *****************
  4976 ;; Defined at:
  4977 ;;		line 93 in file "interface.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  key             1    wreg     unsigned char 
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  key             1   99[BANK0 ] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      void 
  4984 ;; Registers used:
  4985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;Total ram usage:        1 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:   10
  4998 ;; This function calls:
  4999 ;;		_lcdClear
  5000 ;;		_printf
  5001 ;; This function is called by:
  5002 ;;		_showInterface
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text19
  5007  003CE8                     __ptext19:
  5008                           	opt stack 0
  5009  003CE8                     _runMenu:
  5010                           	opt stack 19
  5011                           
  5012                           ;incstack = 0
  5013                           ;runMenu@key stored from wreg
  5014  003CE8  0100               	movlb	0	; () banked
  5015  003CEA  6FE3               	movwf	runMenu@key& (0+255),b
  5016                           
  5017                           ;interface.c: 94: lcdClear();
  5018  003CEC  ECAF  F01F         	call	_lcdClear	;wreg free
  5019                           
  5020                           ;interface.c: 95: printf("%c) time  <A     \n",key);
  5021  003CF0  0EC3               	movlw	low STR_18
  5022  003CF2  0100               	movlb	0	; () banked
  5023  003CF4  6FD5               	movwf	printf@f& (0+255),b
  5024  003CF6  0EFE               	movlw	high STR_18
  5025  003CF8  0100               	movlb	0	; () banked
  5026  003CFA  6FD6               	movwf	(printf@f+1)& (0+255),b
  5027  003CFC  C0E3  F0D7         	movff	runMenu@key,?_printf+2
  5028  003D00  0100               	movlb	0	; () banked
  5029  003D02  6BD8               	clrf	(?_printf+3)& (0+255),b
  5030  003D04  EC09  F000         	call	_printf	;wreg free
  5031                           
  5032                           ;interface.c: 96: printf( "   stats <B   *>");
  5033  003D08  0E74               	movlw	low STR_19
  5034  003D0A  0100               	movlb	0	; () banked
  5035  003D0C  6FD5               	movwf	printf@f& (0+255),b
  5036  003D0E  0EFF               	movlw	high STR_19
  5037  003D10  0100               	movlb	0	; () banked
  5038  003D12  6FD6               	movwf	(printf@f+1)& (0+255),b
  5039  003D14  EC09  F000         	call	_printf	;wreg free
  5040  003D18  0012               	return		;funcret
  5041  003D1A                     __end_of_runMenu:
  5042                           	opt stack 0
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           intcon	equ	0xFF2
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           postdec1	equ	0xFE5
  5051                           fsr1l	equ	0xFE1
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           fsr2h	equ	0xFDA
  5055                           fsr2l	equ	0xFD9
  5056                           status	equ	0xFD8
  5057                           
  5058 ;; *************** function _readKeypad *****************
  5059 ;; Defined at:
  5060 ;;		line 35 in file "keypad.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;  key             1    0[BANK0 ] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      unsigned char 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;Total ram usage:        1 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    5
  5081 ;; This function calls:
  5082 ;;		Nothing
  5083 ;; This function is called by:
  5084 ;;		_pause
  5085 ;;		_showInterface
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           	psect	text20
  5090  003DA6                     __ptext20:
  5091                           	opt stack 0
  5092  003DA6                     _readKeypad:
  5093                           	opt stack 23
  5094  003DA6                     l218:
  5095  003DA6  A281               	btfss	3969,1,c	;volatile
  5096  003DA8  D7FE               	goto	l218
  5097                           
  5098                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  5099  003DAA  3881               	swapf	3969,w,c	;volatile
  5100  003DAC  0B0F               	andlw	15
  5101  003DAE  0B0F               	andlw	15
  5102  003DB0  0100               	movlb	0	; () banked
  5103  003DB2  6F80               	movwf	readKeypad@key& (0+255),b
  5104  003DB4                     l221:
  5105  003DB4  B281               	btfsc	3969,1,c	;volatile
  5106  003DB6  D7FE               	goto	l221
  5107                           
  5108                           ;keypad.c: 39: return keys[key];
  5109  003DB8  0100               	movlb	0	; () banked
  5110  003DBA  5180               	movf	readKeypad@key& (0+255),w,b
  5111  003DBC  0D01               	mullw	1
  5112  003DBE  0E57               	movlw	low _keys
  5113  003DC0  24F3               	addwf	prodl,w,c
  5114  003DC2  6EF6               	movwf	tblptrl,c
  5115  003DC4  0EFE               	movlw	high _keys
  5116  003DC6  20F4               	addwfc	prodh,w,c
  5117  003DC8  6EF7               	movwf	tblptrh,c
  5118  003DCA                     	if	0	;There are less than 3 active tblptr bytes
  5119  003DCA                     	endif
  5120  003DCA  0008               	tblrd		*
  5121  003DCC  50F5               	movf	tablat,w,c
  5122  003DCE  0012               	return	
  5123  003DD0                     __end_of_readKeypad:
  5124                           	opt stack 0
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           prodh	equ	0xFF4
  5130                           prodl	equ	0xFF3
  5131                           intcon	equ	0xFF2
  5132                           postinc0	equ	0xFEE
  5133                           wreg	equ	0xFE8
  5134                           postdec1	equ	0xFE5
  5135                           fsr1l	equ	0xFE1
  5136                           postinc2	equ	0xFDE
  5137                           postdec2	equ	0xFDD
  5138                           fsr2h	equ	0xFDA
  5139                           fsr2l	equ	0xFD9
  5140                           status	equ	0xFD8
  5141                           
  5142 ;; *************** function _mainMenu *****************
  5143 ;; Defined at:
  5144 ;;		line 81 in file "interface.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;		None
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;		None
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  1    wreg      void 
  5151 ;; Registers used:
  5152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;Total ram usage:        0 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:   10
  5165 ;; This function calls:
  5166 ;;		_lcdClear
  5167 ;;		_printf
  5168 ;; This function is called by:
  5169 ;;		_showInterface
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text21
  5174  003EBE                     __ptext21:
  5175                           	opt stack 0
  5176  003EBE                     _mainMenu:
  5177                           	opt stack 19
  5178                           
  5179                           ;interface.c: 82: lcdClear();
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;incstack = 0
  5183  003EBE  ECAF  F01F         	call	_lcdClear	;wreg free
  5184                           
  5185                           ;interface.c: 83: printf("start   <B      \n");
  5186  003EC2  0ED6               	movlw	low STR_14
  5187  003EC4  0100               	movlb	0	; () banked
  5188  003EC6  6FD5               	movwf	printf@f& (0+255),b
  5189  003EC8  0EFE               	movlw	high STR_14
  5190  003ECA  0100               	movlb	0	; () banked
  5191  003ECC  6FD6               	movwf	(printf@f+1)& (0+255),b
  5192  003ECE  EC09  F000         	call	_printf	;wreg free
  5193                           
  5194                           ;interface.c: 84: printf("history <C    *>");
  5195  003ED2  0E63               	movlw	low STR_15
  5196  003ED4  0100               	movlb	0	; () banked
  5197  003ED6  6FD5               	movwf	printf@f& (0+255),b
  5198  003ED8  0EFF               	movlw	high STR_15
  5199  003EDA  0100               	movlb	0	; () banked
  5200  003EDC  6FD6               	movwf	(printf@f+1)& (0+255),b
  5201  003EDE  EC09  F000         	call	_printf	;wreg free
  5202  003EE2  0012               	return		;funcret
  5203  003EE4                     __end_of_mainMenu:
  5204                           	opt stack 0
  5205                           tblptru	equ	0xFF8
  5206                           tblptrh	equ	0xFF7
  5207                           tblptrl	equ	0xFF6
  5208                           tablat	equ	0xFF5
  5209                           prodh	equ	0xFF4
  5210                           prodl	equ	0xFF3
  5211                           intcon	equ	0xFF2
  5212                           postinc0	equ	0xFEE
  5213                           wreg	equ	0xFE8
  5214                           postdec1	equ	0xFE5
  5215                           fsr1l	equ	0xFE1
  5216                           postinc2	equ	0xFDE
  5217                           postdec2	equ	0xFDD
  5218                           fsr2h	equ	0xFDA
  5219                           fsr2l	equ	0xFD9
  5220                           status	equ	0xFD8
  5221                           
  5222 ;; *************** function _dateTime *****************
  5223 ;; Defined at:
  5224 ;;		line 75 in file "interface.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;		None
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;		None
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;Total ram usage:        0 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:   10
  5245 ;; This function calls:
  5246 ;;		_lcdClear
  5247 ;;		_printf
  5248 ;; This function is called by:
  5249 ;;		_showInterface
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text22
  5254  003EE4                     __ptext22:
  5255                           	opt stack 0
  5256  003EE4                     _dateTime:
  5257                           	opt stack 19
  5258                           
  5259                           ;interface.c: 76: lcdClear();
  5260                           
  5261                           ;incstack = 0
  5262  003EE4  ECAF  F01F         	call	_lcdClear	;wreg free
  5263                           
  5264                           ;interface.c: 77: printf("  hh:mm:ss      \n");
  5265  003EE8  0EE8               	movlw	low STR_12
  5266  003EEA  0100               	movlb	0	; () banked
  5267  003EEC  6FD5               	movwf	printf@f& (0+255),b
  5268  003EEE  0EFE               	movlw	high STR_12
  5269  003EF0  0100               	movlb	0	; () banked
  5270  003EF2  6FD6               	movwf	(printf@f+1)& (0+255),b
  5271  003EF4  EC09  F000         	call	_printf	;wreg free
  5272                           
  5273                           ;interface.c: 78: printf("  mm:dd:yy    A>");
  5274  003EF8  0E96               	movlw	low STR_13
  5275  003EFA  0100               	movlb	0	; () banked
  5276  003EFC  6FD5               	movwf	printf@f& (0+255),b
  5277  003EFE  0EFF               	movlw	high STR_13
  5278  003F00  0100               	movlb	0	; () banked
  5279  003F02  6FD6               	movwf	(printf@f+1)& (0+255),b
  5280  003F04  EC09  F000         	call	_printf	;wreg free
  5281  003F08  0012               	return		;funcret
  5282  003F0A                     __end_of_dateTime:
  5283                           	opt stack 0
  5284                           tblptru	equ	0xFF8
  5285                           tblptrh	equ	0xFF7
  5286                           tblptrl	equ	0xFF6
  5287                           tablat	equ	0xFF5
  5288                           prodh	equ	0xFF4
  5289                           prodl	equ	0xFF3
  5290                           intcon	equ	0xFF2
  5291                           postinc0	equ	0xFEE
  5292                           wreg	equ	0xFE8
  5293                           postdec1	equ	0xFE5
  5294                           fsr1l	equ	0xFE1
  5295                           postinc2	equ	0xFDE
  5296                           postdec2	equ	0xFDD
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301 ;; *************** function _printf *****************
  5302 ;; Defined at:
  5303 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  f               2   85[BANK0 ] PTR const unsigned char 
  5306 ;;		 -> STR_23(17), STR_22(18), STR_21(17), STR_20(18), 
  5307 ;;		 -> STR_19(17), STR_18(19), STR_17(17), STR_16(18), 
  5308 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  5309 ;;		 -> STR_11(9), STR_10(8), STR_9(24), STR_8(15), 
  5310 ;;		 -> STR_7(17), STR_6(20), STR_5(17), STR_4(14), 
  5311 ;;		 -> STR_3(20), STR_2(8), STR_1(20), 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  idx             1    5[BANK1 ] unsigned char 
  5314 ;;  val             4   18[BANK1 ] unsigned long 
  5315 ;;  tmpval          4   12[BANK1 ] struct .
  5316 ;;  fval            3   24[BANK1 ] struct .
  5317 ;;  width           2   27[BANK1 ] int 
  5318 ;;  flag            2   22[BANK1 ] unsigned short 
  5319 ;;  exp             2   16[BANK1 ] int 
  5320 ;;  prec            2   10[BANK1 ] int 
  5321 ;;  ap              2    8[BANK1 ] PTR void [1]
  5322 ;;		 -> ?_printf(2), 
  5323 ;;  len             2    6[BANK1 ] unsigned int 
  5324 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
  5325 ;;		 -> printf@c(1), 
  5326 ;;  c               1   29[BANK1 ] char 
  5327 ;;  d               1    0        unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  2   85[BANK0 ] int 
  5330 ;; Registers used:
  5331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5337 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Totals:         0      14      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;Total ram usage:       44 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    9
  5344 ;; This function calls:
  5345 ;;		___awdiv
  5346 ;;		___ftadd
  5347 ;;		___ftge
  5348 ;;		___ftmul
  5349 ;;		___ftneg
  5350 ;;		___ftsub
  5351 ;;		___fttol
  5352 ;;		___lldiv
  5353 ;;		___llmod
  5354 ;;		___lltoft
  5355 ;;		___wmul
  5356 ;;		__div_to_l_
  5357 ;;		__tdiv_to_l_
  5358 ;;		_fround
  5359 ;;		_isdigit
  5360 ;;		_putch
  5361 ;;		_scale
  5362 ;; This function is called by:
  5363 ;;		_main
  5364 ;;		_sortBattery
  5365 ;;		_pause
  5366 ;;		_dateTime
  5367 ;;		_mainMenu
  5368 ;;		_runSelect
  5369 ;;		_runMenu
  5370 ;;		_runTime
  5371 ;;		_runStats
  5372 ;;		_testFrequency
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text23
  5377  000012                     __ptext23:
  5378                           	opt stack 0
  5379  000012                     _printf:
  5380                           	opt stack 20
  5381                           
  5382                           ;doprnt.c: 466: va_list ap;
  5383                           ;doprnt.c: 499: signed char c;
  5384                           ;doprnt.c: 501: int width;
  5385                           ;doprnt.c: 504: int prec;
  5386                           ;doprnt.c: 508: unsigned short flag;
  5387                           ;doprnt.c: 515: char d;
  5388                           ;doprnt.c: 516: double fval;
  5389                           ;doprnt.c: 517: int exp;
  5390                           ;doprnt.c: 523: union {
  5391                           ;doprnt.c: 524: unsigned long vd;
  5392                           ;doprnt.c: 525: double integ;
  5393                           ;doprnt.c: 526: } tmpval;
  5394                           ;doprnt.c: 528: unsigned long val;
  5395                           ;doprnt.c: 529: unsigned len;
  5396                           ;doprnt.c: 530: const char * cp;
  5397                           ;doprnt.c: 533: *ap = __va_start();
  5398                           
  5399                           ;incstack = 0
  5400  000012  0ED7               	movlw	low (?_printf+2)
  5401  000014  0101               	movlb	1	; () banked
  5402  000016  6F08               	movwf	printf@ap& (0+255),b
  5403  000018  0E00               	movlw	high (?_printf+2)
  5404  00001A  0101               	movlb	1	; () banked
  5405  00001C  6F09               	movwf	(printf@ap+1)& (0+255),b
  5406                           
  5407                           ;doprnt.c: 536: while(c = *f++) {
  5408  00001E  EF2D  F006         	goto	l4738
  5409  000022                     l4428:
  5410                           
  5411                           ; BSR set to: 1
  5412                           ;doprnt.c: 538: if(c != '%')
  5413  000022  0E25               	movlw	37
  5414  000024  0101               	movlb	1	; () banked
  5415  000026  191D               	xorwf	printf@c& (0+255),w,b
  5416  000028  B4D8               	btfsc	status,2,c
  5417  00002A  D006               	goto	l4432
  5418                           
  5419                           ; BSR set to: 1
  5420                           ;doprnt.c: 540: {
  5421                           ;doprnt.c: 541: (putch(c) );
  5422  00002C  0101               	movlb	1	; () banked
  5423  00002E  511D               	movf	printf@c& (0+255),w,b
  5424  000030  EC12  F01F         	call	_putch
  5425                           
  5426                           ;doprnt.c: 542: continue;
  5427  000034  EF2D  F006         	goto	l4738
  5428  000038                     l4432:
  5429                           
  5430                           ;doprnt.c: 543: }
  5431                           ;doprnt.c: 546: width = 0;
  5432  000038  0E00               	movlw	0
  5433  00003A  0101               	movlb	1	; () banked
  5434  00003C  6F1C               	movwf	(printf@width+1)& (0+255),b
  5435  00003E  0E00               	movlw	0
  5436  000040  6F1B               	movwf	printf@width& (0+255),b
  5437                           
  5438                           ;doprnt.c: 548: flag = 0;
  5439  000042  0E00               	movlw	0
  5440  000044  0101               	movlb	1	; () banked
  5441  000046  6F17               	movwf	(printf@flag+1)& (0+255),b
  5442  000048  0E00               	movlw	0
  5443  00004A  6F16               	movwf	printf@flag& (0+255),b
  5444                           
  5445                           ; BSR set to: 1
  5446                           ;doprnt.c: 551: switch(*f) {
  5447                           
  5448                           ;doprnt.c: 550: for(;;) {
  5449  00004C  D005               	goto	l4438
  5450  00004E                     l4434:
  5451                           
  5452                           ;doprnt.c: 580: flag |= 0x04;
  5453  00004E  0101               	movlb	1	; () banked
  5454  000050  8516               	bsf	printf@flag& (0+255),2,b
  5455                           
  5456                           ;doprnt.c: 581: f++;
  5457  000052  0100               	movlb	0	; () banked
  5458  000054  4BD5               	infsnz	printf@f& (0+255),f,b
  5459  000056  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5460  000058                     l4438:
  5461  000058  C0D5  FFF6         	movff	printf@f,tblptrl
  5462  00005C  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5463  000060                     	if	0	;tblptru may be non-zero
  5464  000060                     	endif
  5465  000060                     	if	0	;tblptru may be non-zero
  5466  000060                     	endif
  5467  000060  0008               	tblrd		*
  5468  000062  50F5               	movf	tablat,w,c
  5469                           
  5470                           ; Switch size 1, requested type "space"
  5471                           ; Number of cases is 1, Range of values is 48 to 48
  5472                           ; switch strategies available:
  5473                           ; Name         Instructions Cycles
  5474                           ; simple_byte            4     3 (average)
  5475                           ;	Chosen strategy is simple_byte
  5476  000064  0A30               	xorlw	48	; case 48
  5477  000066  B4D8               	btfsc	status,2,c
  5478  000068  D7F2               	goto	l4434
  5479                           
  5480                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5481                           
  5482                           ;doprnt.c: 586: }
  5483                           
  5484                           ;doprnt.c: 585: break;
  5485  00006A  C0D5  FFF6         	movff	printf@f,tblptrl
  5486  00006E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5487  000072                     	if	0	;tblptru may be non-zero
  5488  000072                     	endif
  5489  000072                     	if	0	;tblptru may be non-zero
  5490  000072                     	endif
  5491  000072  0008               	tblrd		*
  5492  000074  50F5               	movf	tablat,w,c
  5493  000076  ECE8  F01E         	call	_isdigit
  5494  00007A  A0D8               	btfss	status,0,c
  5495  00007C  D09E               	goto	l4482
  5496                           
  5497                           ;doprnt.c: 598: width = 0;
  5498  00007E  0E00               	movlw	0
  5499  000080  0101               	movlb	1	; () banked
  5500  000082  6F1C               	movwf	(printf@width+1)& (0+255),b
  5501  000084  0E00               	movlw	0
  5502  000086  6F1B               	movwf	printf@width& (0+255),b
  5503  000088                     l4444:
  5504                           
  5505                           ;doprnt.c: 600: width *= 10;
  5506  000088  C11B  F08E         	movff	printf@width,___wmul@multiplier
  5507  00008C  C11C  F08F         	movff	printf@width+1,___wmul@multiplier+1
  5508  000090  0E00               	movlw	0
  5509  000092  0100               	movlb	0	; () banked
  5510  000094  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5511  000096  0E0A               	movlw	10
  5512  000098  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5513  00009A  EC59  F01E         	call	___wmul	;wreg free
  5514  00009E  C08E  F11B         	movff	?___wmul,printf@width
  5515  0000A2  C08F  F11C         	movff	?___wmul+1,printf@width+1
  5516                           
  5517                           ;doprnt.c: 601: width += *f++ - '0';
  5518  0000A6  0ED0               	movlw	208
  5519  0000A8  0100               	movlb	0	; () banked
  5520  0000AA  6FDD               	movwf	??_printf& (0+255),b
  5521  0000AC  0EFF               	movlw	255
  5522  0000AE  0100               	movlb	0	; () banked
  5523  0000B0  6FDE               	movwf	(??_printf+1)& (0+255),b
  5524  0000B2  C0D5  FFF6         	movff	printf@f,tblptrl
  5525  0000B6  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5526  0000BA                     	if	0	;tblptru may be non-zero
  5527  0000BA                     	endif
  5528  0000BA                     	if	0	;tblptru may be non-zero
  5529  0000BA                     	endif
  5530  0000BA  0008               	tblrd		*
  5531  0000BC  50F5               	movf	tablat,w,c
  5532  0000BE  0100               	movlb	0	; () banked
  5533  0000C0  6FDF               	movwf	(??_printf+2)& (0+255),b
  5534  0000C2  6BE0               	clrf	(??_printf+3)& (0+255),b
  5535  0000C4  0100               	movlb	0	; () banked
  5536  0000C6  51DD               	movf	??_printf& (0+255),w,b
  5537  0000C8  0100               	movlb	0	; () banked
  5538  0000CA  27DF               	addwf	(??_printf+2)& (0+255),f,b
  5539  0000CC  0100               	movlb	0	; () banked
  5540  0000CE  51DE               	movf	(??_printf+1)& (0+255),w,b
  5541  0000D0  0100               	movlb	0	; () banked
  5542  0000D2  23E0               	addwfc	(??_printf+3)& (0+255),f,b
  5543  0000D4  0100               	movlb	0	; () banked
  5544  0000D6  51DF               	movf	(??_printf+2)& (0+255),w,b
  5545  0000D8  0101               	movlb	1	; () banked
  5546  0000DA  271B               	addwf	printf@width& (0+255),f,b
  5547  0000DC  0100               	movlb	0	; () banked
  5548  0000DE  51E0               	movf	(??_printf+3)& (0+255),w,b
  5549  0000E0  0101               	movlb	1	; () banked
  5550  0000E2  231C               	addwfc	(printf@width+1)& (0+255),f,b
  5551                           
  5552                           ; BSR set to: 1
  5553  0000E4  0100               	movlb	0	; () banked
  5554  0000E6  4BD5               	infsnz	printf@f& (0+255),f,b
  5555  0000E8  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5559  0000EA  C0D5  FFF6         	movff	printf@f,tblptrl
  5560  0000EE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5561  0000F2                     	if	0	;tblptru may be non-zero
  5562  0000F2                     	endif
  5563  0000F2                     	if	0	;tblptru may be non-zero
  5564  0000F2                     	endif
  5565  0000F2  0008               	tblrd		*
  5566  0000F4  50F5               	movf	tablat,w,c
  5567  0000F6  ECE8  F01E         	call	_isdigit
  5568  0000FA  A0D8               	btfss	status,0,c
  5569  0000FC  D05E               	goto	l4482
  5570  0000FE  D7C4               	goto	l4444
  5571  000100                     l4452:
  5572                           
  5573                           ;doprnt.c: 663: flag |= 0x400;
  5574  000100  0101               	movlb	1	; () banked
  5575  000102  8517               	bsf	(printf@flag+1)& (0+255),2,b
  5576                           
  5577                           ; BSR set to: 1
  5578                           ;doprnt.c: 698: case 'i':
  5579                           ;doprnt.c: 699: break;
  5580                           
  5581                           ; BSR set to: 1
  5582                           
  5583                           ;doprnt.c: 697: case 'd':
  5584                           
  5585                           ;doprnt.c: 664: break;
  5586  000104  D079               	goto	l4484
  5587  000106                     l4454:
  5588                           
  5589                           ; BSR set to: 1
  5590                           ;doprnt.c: 721: flag |= 0x80;
  5591  000106  0101               	movlb	1	; () banked
  5592  000108  8F16               	bsf	printf@flag& (0+255),7,b
  5593                           
  5594                           ;doprnt.c: 723: break;
  5595  00010A  D076               	goto	l4484
  5596  00010C                     l4456:
  5597                           
  5598                           ; BSR set to: 1
  5599                           ;doprnt.c: 757: if(width > len)
  5600  00010C  0101               	movlb	1	; () banked
  5601  00010E  511B               	movf	printf@width& (0+255),w,b
  5602  000110  0101               	movlb	1	; () banked
  5603  000112  5D06               	subwf	printf@len& (0+255),w,b
  5604  000114  0101               	movlb	1	; () banked
  5605  000116  511C               	movf	(printf@width+1)& (0+255),w,b
  5606  000118  0101               	movlb	1	; () banked
  5607  00011A  5907               	subwfb	(printf@len+1)& (0+255),w,b
  5608  00011C  B0D8               	btfsc	status,0,c
  5609  00011E  D009               	goto	l4460
  5610                           
  5611                           ; BSR set to: 1
  5612                           ;doprnt.c: 758: width -= len;
  5613  000120  0101               	movlb	1	; () banked
  5614  000122  5106               	movf	printf@len& (0+255),w,b
  5615  000124  0101               	movlb	1	; () banked
  5616  000126  5F1B               	subwf	printf@width& (0+255),f,b
  5617  000128  0101               	movlb	1	; () banked
  5618  00012A  5107               	movf	(printf@len+1)& (0+255),w,b
  5619  00012C  0101               	movlb	1	; () banked
  5620  00012E  5B1C               	subwfb	(printf@width+1)& (0+255),f,b
  5621  000130  D009               	goto	l4464
  5622  000132                     l4460:
  5623                           
  5624                           ; BSR set to: 1
  5625                           ;doprnt.c: 759: else
  5626                           ;doprnt.c: 760: width = 0;
  5627  000132  0E00               	movlw	0
  5628  000134  0101               	movlb	1	; () banked
  5629  000136  6F1C               	movwf	(printf@width+1)& (0+255),b
  5630  000138  0E00               	movlw	0
  5631  00013A  6F1B               	movwf	printf@width& (0+255),b
  5632                           
  5633                           ; BSR set to: 1
  5634                           ;doprnt.c: 764: while(width--)
  5635  00013C  D003               	goto	l4464
  5636  00013E                     l4462:
  5637                           
  5638                           ; BSR set to: 1
  5639                           ;doprnt.c: 765: (putch(' ') );
  5640  00013E  0E20               	movlw	32
  5641  000140  EC12  F01F         	call	_putch
  5642  000144                     l4464:
  5643  000144  0101               	movlb	1	; () banked
  5644  000146  071B               	decf	printf@width& (0+255),f,b
  5645  000148  A0D8               	btfss	status,0,c
  5646  00014A  071C               	decf	(printf@width+1)& (0+255),f,b
  5647  00014C  0101               	movlb	1	; () banked
  5648  00014E  291B               	incf	printf@width& (0+255),w,b
  5649  000150  E1F6               	bnz	l4462
  5650  000152  0101               	movlb	1	; () banked
  5651  000154  291C               	incf	(printf@width+1)& (0+255),w,b
  5652  000156  B4D8               	btfsc	status,2,c
  5653  000158  D00B               	goto	l4470
  5654  00015A  D7F1               	goto	l4462
  5655  00015C                     l4466:
  5656                           
  5657                           ; BSR set to: 1
  5658                           ;doprnt.c: 768: (putch(*cp++) );
  5659  00015C  C103  FFD9         	movff	printf@cp,fsr2l
  5660  000160  C104  FFDA         	movff	printf@cp+1,fsr2h
  5661  000164  50DF               	movf	indf2,w,c
  5662  000166  EC12  F01F         	call	_putch
  5663  00016A  0101               	movlb	1	; () banked
  5664  00016C  4B03               	infsnz	printf@cp& (0+255),f,b
  5665  00016E  2B04               	incf	(printf@cp+1)& (0+255),f,b
  5666  000170                     l4470:
  5667                           
  5668                           ; BSR set to: 1
  5669  000170  0101               	movlb	1	; () banked
  5670  000172  0706               	decf	printf@len& (0+255),f,b
  5671  000174  A0D8               	btfss	status,0,c
  5672  000176  0707               	decf	(printf@len+1)& (0+255),f,b
  5673  000178  0101               	movlb	1	; () banked
  5674  00017A  2906               	incf	printf@len& (0+255),w,b
  5675  00017C  E1EF               	bnz	l4466
  5676  00017E  0101               	movlb	1	; () banked
  5677  000180  2907               	incf	(printf@len+1)& (0+255),w,b
  5678  000182  B4D8               	btfsc	status,2,c
  5679  000184  EF2D  F006         	goto	l4738
  5680  000188  D7E9               	goto	l4466
  5681  00018A                     l4472:
  5682                           
  5683                           ; BSR set to: 1
  5684                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5685  00018A  C108  FFD9         	movff	printf@ap,fsr2l
  5686  00018E  C109  FFDA         	movff	printf@ap+1,fsr2h
  5687  000192  50DF               	movf	indf2,w,c
  5688  000194  0101               	movlb	1	; () banked
  5689  000196  6F1D               	movwf	printf@c& (0+255),b
  5690                           
  5691                           ; BSR set to: 1
  5692  000198  0E02               	movlw	2
  5693  00019A  0101               	movlb	1	; () banked
  5694  00019C  2708               	addwf	printf@ap& (0+255),f,b
  5695  00019E  0E00               	movlw	0
  5696  0001A0  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  5697  0001A2                     l4476:
  5698                           
  5699                           ; BSR set to: 1
  5700                           ;doprnt.c: 805: cp = (char *)&c;
  5701  0001A2  0E1D               	movlw	low printf@c
  5702  0001A4  0101               	movlb	1	; () banked
  5703  0001A6  6F03               	movwf	printf@cp& (0+255),b
  5704  0001A8  0E01               	movlw	high printf@c
  5705  0001AA  0101               	movlb	1	; () banked
  5706  0001AC  6F04               	movwf	(printf@cp+1)& (0+255),b
  5707                           
  5708                           ; BSR set to: 1
  5709                           ;doprnt.c: 806: len = 1;
  5710  0001AE  0E00               	movlw	0
  5711  0001B0  0101               	movlb	1	; () banked
  5712  0001B2  6F07               	movwf	(printf@len+1)& (0+255),b
  5713  0001B4  0E01               	movlw	1
  5714  0001B6  6F06               	movwf	printf@len& (0+255),b
  5715                           
  5716                           ;doprnt.c: 807: goto dostring;
  5717  0001B8  D7A9               	goto	l4456
  5718  0001BA                     l4482:
  5719  0001BA  C0D5  FFF6         	movff	printf@f,tblptrl
  5720  0001BE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5721  0001C2  0100               	movlb	0	; () banked
  5722  0001C4  4BD5               	infsnz	printf@f& (0+255),f,b
  5723  0001C6  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5724  0001C8                     	if	0	;tblptru may be non-zero
  5725  0001C8                     	endif
  5726  0001C8                     	if	0	;tblptru may be non-zero
  5727  0001C8                     	endif
  5728  0001C8  0008               	tblrd		*
  5729  0001CA  CFF5 F11D          	movff	tablat,printf@c
  5730  0001CE  0101               	movlb	1	; () banked
  5731  0001D0  511D               	movf	printf@c& (0+255),w,b
  5732                           
  5733                           ; Switch size 1, requested type "space"
  5734                           ; Number of cases is 6, Range of values is 0 to 120
  5735                           ; switch strategies available:
  5736                           ; Name         Instructions Cycles
  5737                           ; simple_byte           19    10 (average)
  5738                           ;	Chosen strategy is simple_byte
  5739  0001D2  0A00               	xorlw	0	; case 0
  5740  0001D4  B4D8               	btfsc	status,2,c
  5741  0001D6  0012               	return	
  5742  0001D8  0A63               	xorlw	99	; case 99
  5743  0001DA  B4D8               	btfsc	status,2,c
  5744  0001DC  D7D6               	goto	l4472
  5745  0001DE  0A07               	xorlw	7	; case 100
  5746  0001E0  B4D8               	btfsc	status,2,c
  5747  0001E2  D00A               	goto	l4484
  5748  0001E4  0A02               	xorlw	2	; case 102
  5749  0001E6  B4D8               	btfsc	status,2,c
  5750  0001E8  D78B               	goto	l4452
  5751  0001EA  0A0F               	xorlw	15	; case 105
  5752  0001EC  B4D8               	btfsc	status,2,c
  5753  0001EE  D004               	goto	l4484
  5754  0001F0  0A11               	xorlw	17	; case 120
  5755  0001F2  B4D8               	btfsc	status,2,c
  5756  0001F4  D788               	goto	l4454
  5757  0001F6  D7D5               	goto	l4476
  5758  0001F8                     l4484:
  5759                           
  5760                           ; BSR set to: 1
  5761                           ;doprnt.c: 825: if(flag & (0x700)) {
  5762  0001F8  0E07               	movlw	7
  5763  0001FA  0101               	movlb	1	; () banked
  5764  0001FC  1517               	andwf	(printf@flag+1)& (0+255),w,b
  5765  0001FE  B4D8               	btfsc	status,2,c
  5766  000200  D37A               	goto	l709
  5767                           
  5768                           ; BSR set to: 1
  5769                           ;doprnt.c: 829: prec = 6;
  5770  000202  0E00               	movlw	0
  5771  000204  0101               	movlb	1	; () banked
  5772  000206  6F0B               	movwf	(printf@prec+1)& (0+255),b
  5773  000208  0E06               	movlw	6
  5774  00020A  6F0A               	movwf	printf@prec& (0+255),b
  5775                           
  5776                           ; BSR set to: 1
  5777                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5778  00020C  C108  FFD9         	movff	printf@ap,fsr2l
  5779  000210  C109  FFDA         	movff	printf@ap+1,fsr2h
  5780  000214  CFDE F118          	movff	postinc2,printf@fval
  5781  000218  CFDE F119          	movff	postinc2,printf@fval+1
  5782  00021C  CFDD F11A          	movff	postdec2,printf@fval+2
  5783                           
  5784                           ; BSR set to: 1
  5785  000220  0E03               	movlw	3
  5786  000222  0101               	movlb	1	; () banked
  5787  000224  2708               	addwf	printf@ap& (0+255),f,b
  5788  000226  0E00               	movlw	0
  5789  000228  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  5790                           
  5791                           ; BSR set to: 1
  5792                           ;doprnt.c: 831: if(fval < 0.0) {
  5793  00022A  0101               	movlb	1	; () banked
  5794  00022C  AF1A               	btfss	(printf@fval+2)& (0+255),7,b
  5795  00022E  D011               	goto	l4498
  5796                           
  5797                           ; BSR set to: 1
  5798                           ;doprnt.c: 832: fval = -fval;
  5799  000230  C118  F080         	movff	printf@fval,___ftneg@f1
  5800  000234  C119  F081         	movff	printf@fval+1,___ftneg@f1+1
  5801  000238  C11A  F082         	movff	printf@fval+2,___ftneg@f1+2
  5802  00023C  EC8D  F01E         	call	___ftneg	;wreg free
  5803  000240  C080  F118         	movff	?___ftneg,printf@fval
  5804  000244  C081  F119         	movff	?___ftneg+1,printf@fval+1
  5805  000248  C082  F11A         	movff	?___ftneg+2,printf@fval+2
  5806                           
  5807                           ;doprnt.c: 833: flag |= 0x03;
  5808  00024C  0E03               	movlw	3
  5809  00024E  0101               	movlb	1	; () banked
  5810  000250  1316               	iorwf	printf@flag& (0+255),f,b
  5811  000252                     l4498:
  5812                           
  5813                           ; BSR set to: 1
  5814                           ;doprnt.c: 834: }
  5815                           ;doprnt.c: 835: exp = 0;
  5816  000252  0E00               	movlw	0
  5817  000254  0101               	movlb	1	; () banked
  5818  000256  6F11               	movwf	(printf@exp+1)& (0+255),b
  5819  000258  0E00               	movlw	0
  5820  00025A  6F10               	movwf	printf@exp& (0+255),b
  5821                           
  5822                           ; BSR set to: 1
  5823                           ;doprnt.c: 836: if( fval!=0) {
  5824  00025C  0101               	movlb	1	; () banked
  5825  00025E  5118               	movf	printf@fval& (0+255),w,b
  5826  000260  0101               	movlb	1	; () banked
  5827  000262  1119               	iorwf	(printf@fval+1)& (0+255),w,b
  5828  000264  0101               	movlb	1	; () banked
  5829  000266  111A               	iorwf	(printf@fval+2)& (0+255),w,b
  5830  000268  B4D8               	btfsc	status,2,c
  5831  00026A  D09B               	goto	l4526
  5832                           
  5833                           ; BSR set to: 1
  5834                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5835  00026C  0E82               	movlw	130
  5836  00026E  0100               	movlb	0	; () banked
  5837  000270  6FDD               	movwf	??_printf& (0+255),b
  5838  000272  0EFF               	movlw	255
  5839  000274  0100               	movlb	0	; () banked
  5840  000276  6FDE               	movwf	(??_printf+1)& (0+255),b
  5841  000278  C118  F0DF         	movff	printf@fval,??_printf+2
  5842  00027C  C119  F0E0         	movff	printf@fval+1,??_printf+3
  5843  000280  C11A  F0E1         	movff	printf@fval+2,??_printf+4
  5844  000284  C11B  F0E2         	movff	printf@fval+3,??_printf+5
  5845  000288  0E10               	movlw	16
  5846  00028A  D006               	goto	u4180
  5847  00028C                     u4185:
  5848  00028C  0100               	movlb	0	; () banked
  5849  00028E  90D8               	bcf	status,0,c
  5850  000290  33E2               	rrcf	(??_printf+5)& (0+255),f,b
  5851  000292  33E1               	rrcf	(??_printf+4)& (0+255),f,b
  5852  000294  33E0               	rrcf	(??_printf+3)& (0+255),f,b
  5853  000296  33DF               	rrcf	(??_printf+2)& (0+255),f,b
  5854  000298                     u4180:
  5855  000298  2EE8               	decfsz	wreg,f,c
  5856  00029A  D7F8               	goto	u4185
  5857  00029C  0100               	movlb	0	; () banked
  5858  00029E  51DF               	movf	(??_printf+2)& (0+255),w,b
  5859  0002A0  0100               	movlb	0	; () banked
  5860  0002A2  25DD               	addwf	??_printf& (0+255),w,b
  5861  0002A4  0101               	movlb	1	; () banked
  5862  0002A6  6F10               	movwf	printf@exp& (0+255),b
  5863  0002A8  0E00               	movlw	0
  5864  0002AA  0100               	movlb	0	; () banked
  5865  0002AC  21DE               	addwfc	(??_printf+1)& (0+255),w,b
  5866  0002AE  0101               	movlb	1	; () banked
  5867  0002B0  6F11               	movwf	(printf@exp+1)& (0+255),b
  5868                           
  5869                           ; BSR set to: 1
  5870                           ;doprnt.c: 838: exp--;
  5871  0002B2  0101               	movlb	1	; () banked
  5872  0002B4  0710               	decf	printf@exp& (0+255),f,b
  5873  0002B6  A0D8               	btfss	status,0,c
  5874  0002B8  0711               	decf	(printf@exp+1)& (0+255),f,b
  5875                           
  5876                           ; BSR set to: 1
  5877                           ;doprnt.c: 839: exp *= 3;
  5878  0002BA  C110  F08E         	movff	printf@exp,___wmul@multiplier
  5879  0002BE  C111  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  5880  0002C2  0E00               	movlw	0
  5881  0002C4  0100               	movlb	0	; () banked
  5882  0002C6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5883  0002C8  0E03               	movlw	3
  5884  0002CA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5885  0002CC  EC59  F01E         	call	___wmul	;wreg free
  5886  0002D0  C08E  F110         	movff	?___wmul,printf@exp
  5887  0002D4  C08F  F111         	movff	?___wmul+1,printf@exp+1
  5888                           
  5889                           ;doprnt.c: 840: exp /= 10;
  5890  0002D8  C110  F086         	movff	printf@exp,___awdiv@dividend
  5891  0002DC  C111  F087         	movff	printf@exp+1,___awdiv@dividend+1
  5892  0002E0  0E00               	movlw	0
  5893  0002E2  0100               	movlb	0	; () banked
  5894  0002E4  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5895  0002E6  0E0A               	movlw	10
  5896  0002E8  6F88               	movwf	___awdiv@divisor& (0+255),b
  5897  0002EA  ECDF  F017         	call	___awdiv	;wreg free
  5898  0002EE  C086  F110         	movff	?___awdiv,printf@exp
  5899  0002F2  C087  F111         	movff	?___awdiv+1,printf@exp+1
  5900                           
  5901                           ;doprnt.c: 841: if(exp < 0)
  5902  0002F6  0101               	movlb	1	; () banked
  5903  0002F8  AF11               	btfss	(printf@exp+1)& (0+255),7,b
  5904  0002FA  D004               	goto	l4514
  5905                           
  5906                           ; BSR set to: 1
  5907                           ;doprnt.c: 842: exp--;
  5908  0002FC  0101               	movlb	1	; () banked
  5909  0002FE  0710               	decf	printf@exp& (0+255),f,b
  5910  000300  A0D8               	btfss	status,0,c
  5911  000302  0711               	decf	(printf@exp+1)& (0+255),f,b
  5912  000304                     l4514:
  5913                           
  5914                           ; BSR set to: 1
  5915                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5916  000304  0101               	movlb	1	; () banked
  5917  000306  5110               	movf	printf@exp& (0+255),w,b
  5918  000308  0800               	sublw	0
  5919  00030A  EC3D  F006         	call	_scale
  5920  00030E  C0B0  F10C         	movff	?_scale,printf@tmpval
  5921  000312  C0B1  F10D         	movff	?_scale+1,printf@tmpval+1
  5922  000316  C0B2  F10E         	movff	?_scale+2,printf@tmpval+2
  5923                           
  5924                           ;doprnt.c: 847: tmpval.integ *= fval;
  5925  00031A  C10C  F0A1         	movff	printf@tmpval,___ftmul@f1
  5926  00031E  C10D  F0A2         	movff	printf@tmpval+1,___ftmul@f1+1
  5927  000322  C10E  F0A3         	movff	printf@tmpval+2,___ftmul@f1+2
  5928  000326  C118  F0A4         	movff	printf@fval,___ftmul@f2
  5929  00032A  C119  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  5930  00032E  C11A  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  5931  000332  ECF3  F010         	call	___ftmul	;wreg free
  5932  000336  C0A1  F10C         	movff	?___ftmul,printf@tmpval
  5933  00033A  C0A2  F10D         	movff	?___ftmul+1,printf@tmpval+1
  5934  00033E  C0A3  F10E         	movff	?___ftmul+2,printf@tmpval+2
  5935                           
  5936                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5937  000342  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  5938  000346  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5939  00034A  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5940  00034E  0E00               	movlw	0
  5941  000350  0100               	movlb	0	; () banked
  5942  000352  6F83               	movwf	___ftge@ff2& (0+255),b
  5943  000354  0E80               	movlw	128
  5944  000356  0100               	movlb	0	; () banked
  5945  000358  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5946  00035A  0E3F               	movlw	63
  5947  00035C  0100               	movlb	0	; () banked
  5948  00035E  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5949  000360  EC7B  F017         	call	___ftge	;wreg free
  5950  000364  0100               	movlb	0	; () banked
  5951  000366  B0D8               	btfsc	status,0,c
  5952  000368  D005               	goto	l4522
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;doprnt.c: 849: exp--;
  5956  00036A  0101               	movlb	1	; () banked
  5957  00036C  0710               	decf	printf@exp& (0+255),f,b
  5958  00036E  A0D8               	btfss	status,0,c
  5959  000370  0711               	decf	(printf@exp+1)& (0+255),f,b
  5960  000372  D017               	goto	l4526
  5961  000374                     l4522:
  5962                           
  5963                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5964  000374  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  5965  000378  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5966  00037C  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5967  000380  0E00               	movlw	0
  5968  000382  0100               	movlb	0	; () banked
  5969  000384  6F83               	movwf	___ftge@ff2& (0+255),b
  5970  000386  0E20               	movlw	32
  5971  000388  0100               	movlb	0	; () banked
  5972  00038A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5973  00038C  0E41               	movlw	65
  5974  00038E  0100               	movlb	0	; () banked
  5975  000390  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5976  000392  EC7B  F017         	call	___ftge	;wreg free
  5977  000396  0100               	movlb	0	; () banked
  5978  000398  A0D8               	btfss	status,0,c
  5979  00039A  D003               	goto	l4526
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;doprnt.c: 851: exp++;
  5983  00039C  0101               	movlb	1	; () banked
  5984  00039E  4B10               	infsnz	printf@exp& (0+255),f,b
  5985  0003A0  2B11               	incf	(printf@exp+1)& (0+255),f,b
  5986  0003A2                     l4526:
  5987                           
  5988                           ;doprnt.c: 852: }
  5989                           ;doprnt.c: 1112: if(prec <= 12)
  5990  0003A2  0101               	movlb	1	; () banked
  5991  0003A4  BF0B               	btfsc	(printf@prec+1)& (0+255),7,b
  5992  0003A6  D008               	goto	l4528
  5993  0003A8  0101               	movlb	1	; () banked
  5994  0003AA  510B               	movf	(printf@prec+1)& (0+255),w,b
  5995  0003AC  E11D               	bnz	l4530
  5996  0003AE  0E0D               	movlw	13
  5997  0003B0  0101               	movlb	1	; () banked
  5998  0003B2  5D0A               	subwf	printf@prec& (0+255),w,b
  5999  0003B4  B0D8               	btfsc	status,0,c
  6000  0003B6  D018               	goto	l4530
  6001  0003B8                     l4528:
  6002                           
  6003                           ; BSR set to: 1
  6004                           ;doprnt.c: 1113: fval += fround(prec);
  6005  0003B8  C118  F0BA         	movff	printf@fval,___ftadd@f1
  6006  0003BC  C119  F0BB         	movff	printf@fval+1,___ftadd@f1+1
  6007  0003C0  C11A  F0BC         	movff	printf@fval+2,___ftadd@f1+2
  6008  0003C4  0101               	movlb	1	; () banked
  6009  0003C6  510A               	movf	printf@prec& (0+255),w,b
  6010  0003C8  EC63  F00A         	call	_fround
  6011  0003CC  C0B0  F0BD         	movff	?_fround,___ftadd@f2
  6012  0003D0  C0B1  F0BE         	movff	?_fround+1,___ftadd@f2+1
  6013  0003D4  C0B2  F0BF         	movff	?_fround+2,___ftadd@f2+2
  6014  0003D8  ECB9  F00B         	call	___ftadd	;wreg free
  6015  0003DC  C0BA  F118         	movff	?___ftadd,printf@fval
  6016  0003E0  C0BB  F119         	movff	?___ftadd+1,printf@fval+1
  6017  0003E4  C0BC  F11A         	movff	?___ftadd+2,printf@fval+2
  6018  0003E8                     l4530:
  6019                           
  6020                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6021  0003E8  0101               	movlb	1	; () banked
  6022  0003EA  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  6023  0003EC  D008               	goto	l4532
  6024  0003EE  0101               	movlb	1	; () banked
  6025  0003F0  5111               	movf	(printf@exp+1)& (0+255),w,b
  6026  0003F2  E12A               	bnz	l4538
  6027  0003F4  0E0A               	movlw	10
  6028  0003F6  0101               	movlb	1	; () banked
  6029  0003F8  5D10               	subwf	printf@exp& (0+255),w,b
  6030  0003FA  B0D8               	btfsc	status,0,c
  6031  0003FC  D025               	goto	l4538
  6032  0003FE                     l4532:
  6033                           
  6034                           ; BSR set to: 1
  6035  0003FE  0101               	movlb	1	; () banked
  6036  000400  5118               	movf	printf@fval& (0+255),w,b
  6037  000402  0101               	movlb	1	; () banked
  6038  000404  1119               	iorwf	(printf@fval+1)& (0+255),w,b
  6039  000406  0101               	movlb	1	; () banked
  6040  000408  111A               	iorwf	(printf@fval+2)& (0+255),w,b
  6041  00040A  B4D8               	btfsc	status,2,c
  6042  00040C  D063               	goto	l4552
  6043                           
  6044                           ; BSR set to: 1
  6045  00040E  C118  F0C6         	movff	printf@fval,___fttol@f1
  6046  000412  C119  F0C7         	movff	printf@fval+1,___fttol@f1+1
  6047  000416  C11A  F0C8         	movff	printf@fval+2,___fttol@f1+2
  6048  00041A  EC48  F012         	call	___fttol	;wreg free
  6049  00041E  0100               	movlb	0	; () banked
  6050  000420  51C6               	movf	?___fttol& (0+255),w,b
  6051  000422  0100               	movlb	0	; () banked
  6052  000424  11C7               	iorwf	(?___fttol+1)& (0+255),w,b
  6053  000426  0100               	movlb	0	; () banked
  6054  000428  11C8               	iorwf	(?___fttol+2)& (0+255),w,b
  6055  00042A  0100               	movlb	0	; () banked
  6056  00042C  11C9               	iorwf	(?___fttol+3)& (0+255),w,b
  6057  00042E  A4D8               	btfss	status,2,c
  6058  000430  D051               	goto	l4552
  6059                           
  6060                           ; BSR set to: 0
  6061  000432  0101               	movlb	1	; () banked
  6062  000434  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  6063  000436  D04E               	goto	l4552
  6064  000438  0101               	movlb	1	; () banked
  6065  00043A  5111               	movf	(printf@exp+1)& (0+255),w,b
  6066  00043C  E105               	bnz	l4538
  6067  00043E  0E02               	movlw	2
  6068  000440  0101               	movlb	1	; () banked
  6069  000442  5D10               	subwf	printf@exp& (0+255),w,b
  6070  000444  A0D8               	btfss	status,0,c
  6071  000446  D046               	goto	l4552
  6072  000448                     l4538:
  6073                           
  6074                           ; BSR set to: 1
  6075                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6076  000448  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  6077  00044C  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  6078  000450  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  6079  000454  0E70               	movlw	112
  6080  000456  0100               	movlb	0	; () banked
  6081  000458  6F83               	movwf	___ftge@ff2& (0+255),b
  6082  00045A  0E89               	movlw	137
  6083  00045C  0100               	movlb	0	; () banked
  6084  00045E  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  6085  000460  0E40               	movlw	64
  6086  000462  0100               	movlb	0	; () banked
  6087  000464  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  6088  000466  EC7B  F017         	call	___ftge	;wreg free
  6089  00046A  0100               	movlb	0	; () banked
  6090  00046C  B0D8               	btfsc	status,0,c
  6091  00046E  D003               	goto	l4542
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6095  000470  0101               	movlb	1	; () banked
  6096  000472  0EF7               	movlw	247
  6097  000474  D002               	goto	L1
  6098  000476                     l4542:
  6099                           
  6100                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6101  000476  0101               	movlb	1	; () banked
  6102  000478  0EF8               	movlw	248
  6103  00047A                     L1:
  6104  00047A  2710               	addwf	printf@exp& (0+255),f,b
  6105  00047C  0EFF               	movlw	255
  6106  00047E  2311               	addwfc	(printf@exp+1)& (0+255),f,b
  6107                           
  6108                           ; BSR set to: 1
  6109                           ;doprnt.c: 1124: }
  6110                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6111                           
  6112                           ; BSR set to: 1
  6113  000480  0101               	movlb	1	; () banked
  6114  000482  5110               	movf	printf@exp& (0+255),w,b
  6115  000484  EC3D  F006         	call	_scale
  6116  000488  C0B0  F10C         	movff	?_scale,printf@tmpval
  6117  00048C  C0B1  F10D         	movff	?_scale+1,printf@tmpval+1
  6118  000490  C0B2  F10E         	movff	?_scale+2,printf@tmpval+2
  6119                           
  6120                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6121  000494  C118  F080         	movff	printf@fval,__tdiv_to_l_@f1
  6122  000498  C119  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6123  00049C  C11A  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6124  0004A0  C10C  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  6125  0004A4  C10D  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6126  0004A8  C10E  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6127  0004AC  ECAD  F00E         	call	__tdiv_to_l_	;wreg free
  6128  0004B0  C080  F112         	movff	?__tdiv_to_l_,printf@val
  6129  0004B4  C081  F113         	movff	?__tdiv_to_l_+1,printf@val+1
  6130  0004B8  C082  F114         	movff	?__tdiv_to_l_+2,printf@val+2
  6131  0004BC  C083  F115         	movff	?__tdiv_to_l_+3,printf@val+3
  6132                           
  6133                           ;doprnt.c: 1129: fval = 0.0;
  6134  0004C0  0E00               	movlw	0
  6135  0004C2  0101               	movlb	1	; () banked
  6136  0004C4  6F18               	movwf	printf@fval& (0+255),b
  6137  0004C6  0E00               	movlw	0
  6138  0004C8  0101               	movlb	1	; () banked
  6139  0004CA  6F19               	movwf	(printf@fval+1)& (0+255),b
  6140  0004CC  0E00               	movlw	0
  6141  0004CE  0101               	movlb	1	; () banked
  6142  0004D0  6F1A               	movwf	(printf@fval+2)& (0+255),b
  6143                           
  6144                           ;doprnt.c: 1130: } else {
  6145  0004D2  D033               	goto	l4556
  6146  0004D4                     l4552:
  6147                           
  6148                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6149  0004D4  C118  F0C6         	movff	printf@fval,___fttol@f1
  6150  0004D8  C119  F0C7         	movff	printf@fval+1,___fttol@f1+1
  6151  0004DC  C11A  F0C8         	movff	printf@fval+2,___fttol@f1+2
  6152  0004E0  EC48  F012         	call	___fttol	;wreg free
  6153  0004E4  C0C6  F112         	movff	?___fttol,printf@val
  6154  0004E8  C0C7  F113         	movff	?___fttol+1,printf@val+1
  6155  0004EC  C0C8  F114         	movff	?___fttol+2,printf@val+2
  6156  0004F0  C0C9  F115         	movff	?___fttol+3,printf@val+3
  6157                           
  6158                           ;doprnt.c: 1132: fval -= (double)val;
  6159  0004F4  C118  F0C6         	movff	printf@fval,___ftsub@f1
  6160  0004F8  C119  F0C7         	movff	printf@fval+1,___ftsub@f1+1
  6161  0004FC  C11A  F0C8         	movff	printf@fval+2,___ftsub@f1+2
  6162  000500  C112  F088         	movff	printf@val,___lltoft@c
  6163  000504  C113  F089         	movff	printf@val+1,___lltoft@c+1
  6164  000508  C114  F08A         	movff	printf@val+2,___lltoft@c+2
  6165  00050C  C115  F08B         	movff	printf@val+3,___lltoft@c+3
  6166  000510  ECB5  F01B         	call	___lltoft	;wreg free
  6167  000514  C088  F0C9         	movff	?___lltoft,___ftsub@f2
  6168  000518  C089  F0CA         	movff	?___lltoft+1,___ftsub@f2+1
  6169  00051C  C08A  F0CB         	movff	?___lltoft+2,___ftsub@f2+2
  6170  000520  EC20  F01D         	call	___ftsub	;wreg free
  6171  000524  C0C6  F118         	movff	?___ftsub,printf@fval
  6172  000528  C0C7  F119         	movff	?___ftsub+1,printf@fval+1
  6173  00052C  C0C8  F11A         	movff	?___ftsub+2,printf@fval+2
  6174                           
  6175                           ;doprnt.c: 1133: exp = 0;
  6176  000530  0E00               	movlw	0
  6177  000532  0101               	movlb	1	; () banked
  6178  000534  6F11               	movwf	(printf@exp+1)& (0+255),b
  6179  000536  0E00               	movlw	0
  6180  000538  6F10               	movwf	printf@exp& (0+255),b
  6181  00053A                     l4556:
  6182                           
  6183                           ; BSR set to: 1
  6184                           ;doprnt.c: 1134: }
  6185                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6186  00053A  0E01               	movlw	1
  6187  00053C  0101               	movlb	1	; () banked
  6188  00053E  6F1D               	movwf	printf@c& (0+255),b
  6189  000540                     l4558:
  6190                           
  6191                           ; BSR set to: 1
  6192  000540  0E0A               	movlw	10
  6193  000542  0101               	movlb	1	; () banked
  6194  000544  191D               	xorwf	printf@c& (0+255),w,b
  6195  000546  B4D8               	btfsc	status,2,c
  6196  000548  D01E               	goto	l4570
  6197                           
  6198                           ; BSR set to: 1
  6199                           ;doprnt.c: 1137: if(val < dpowers[c])
  6200                           
  6201                           ; BSR set to: 1
  6202                           
  6203                           ; BSR set to: 1
  6204  00054A  0101               	movlb	1	; () banked
  6205  00054C  511D               	movf	printf@c& (0+255),w,b
  6206  00054E  0D04               	mullw	4
  6207  000550  0EC1               	movlw	low _dpowers
  6208  000552  24F3               	addwf	prodl,w,c
  6209  000554  6EF6               	movwf	tblptrl,c
  6210  000556  0EFD               	movlw	high _dpowers
  6211  000558  20F4               	addwfc	prodh,w,c
  6212  00055A  6EF7               	movwf	tblptrh,c
  6213  00055C                     	if	0	;There are less than 3 active tblptr bytes
  6214  00055C                     	endif
  6215  00055C  0009               	tblrd		*+
  6216  00055E  50F5               	movf	tablat,w,c
  6217  000560  0101               	movlb	1	; () banked
  6218  000562  5D12               	subwf	printf@val& (0+255),w,b
  6219  000564  0009               	tblrd		*+
  6220  000566  50F5               	movf	tablat,w,c
  6221  000568  0101               	movlb	1	; () banked
  6222  00056A  5913               	subwfb	(printf@val+1)& (0+255),w,b
  6223  00056C  0009               	tblrd		*+
  6224  00056E  50F5               	movf	tablat,w,c
  6225  000570  0101               	movlb	1	; () banked
  6226  000572  5914               	subwfb	(printf@val+2)& (0+255),w,b
  6227  000574  0009               	tblrd		*+
  6228  000576  50F5               	movf	tablat,w,c
  6229  000578  0101               	movlb	1	; () banked
  6230  00057A  5915               	subwfb	(printf@val+3)& (0+255),w,b
  6231  00057C  A0D8               	btfss	status,0,c
  6232  00057E  D003               	goto	l4570
  6233                           
  6234                           ; BSR set to: 1
  6235                           
  6236                           ; BSR set to: 1
  6237                           
  6238                           ; BSR set to: 1
  6239                           ;doprnt.c: 1138: break;
  6240  000580  0101               	movlb	1	; () banked
  6241  000582  2B1D               	incf	printf@c& (0+255),f,b
  6242  000584  D7DD               	goto	l4558
  6243  000586                     l4570:
  6244                           
  6245                           ; BSR set to: 1
  6246                           ;doprnt.c: 1142: width -= prec + c + exp;
  6247  000586  C11D  F0DD         	movff	printf@c,??_printf
  6248  00058A  0100               	movlb	0	; () banked
  6249  00058C  6BDE               	clrf	(??_printf+1)& (0+255),b
  6250  00058E  BFDD               	btfsc	??_printf& (0+255),7,b
  6251  000590  07DE               	decf	(??_printf+1)& (0+255),f,b
  6252  000592  0101               	movlb	1	; () banked
  6253  000594  510A               	movf	printf@prec& (0+255),w,b
  6254  000596  0100               	movlb	0	; () banked
  6255  000598  27DD               	addwf	??_printf& (0+255),f,b
  6256  00059A  0101               	movlb	1	; () banked
  6257  00059C  510B               	movf	(printf@prec+1)& (0+255),w,b
  6258  00059E  0100               	movlb	0	; () banked
  6259  0005A0  23DE               	addwfc	(??_printf+1)& (0+255),f,b
  6260  0005A2  0101               	movlb	1	; () banked
  6261  0005A4  5110               	movf	printf@exp& (0+255),w,b
  6262  0005A6  0100               	movlb	0	; () banked
  6263  0005A8  27DD               	addwf	??_printf& (0+255),f,b
  6264  0005AA  0101               	movlb	1	; () banked
  6265  0005AC  5111               	movf	(printf@exp+1)& (0+255),w,b
  6266  0005AE  0100               	movlb	0	; () banked
  6267  0005B0  23DE               	addwfc	(??_printf+1)& (0+255),f,b
  6268  0005B2  0100               	movlb	0	; () banked
  6269  0005B4  51DD               	movf	??_printf& (0+255),w,b
  6270  0005B6  0101               	movlb	1	; () banked
  6271  0005B8  5F1B               	subwf	printf@width& (0+255),f,b
  6272  0005BA  0100               	movlb	0	; () banked
  6273  0005BC  51DE               	movf	(??_printf+1)& (0+255),w,b
  6274  0005BE  0101               	movlb	1	; () banked
  6275  0005C0  5B1C               	subwfb	(printf@width+1)& (0+255),f,b
  6276                           
  6277                           ;doprnt.c: 1143: if(
  6278                           ;doprnt.c: 1147: prec)
  6279  0005C2  0101               	movlb	1	; () banked
  6280  0005C4  510A               	movf	printf@prec& (0+255),w,b
  6281  0005C6  0101               	movlb	1	; () banked
  6282  0005C8  110B               	iorwf	(printf@prec+1)& (0+255),w,b
  6283  0005CA  B4D8               	btfsc	status,2,c
  6284  0005CC  D004               	goto	l4574
  6285                           
  6286                           ; BSR set to: 1
  6287                           ;doprnt.c: 1148: width--;
  6288  0005CE  0101               	movlb	1	; () banked
  6289  0005D0  071B               	decf	printf@width& (0+255),f,b
  6290  0005D2  A0D8               	btfss	status,0,c
  6291  0005D4  071C               	decf	(printf@width+1)& (0+255),f,b
  6292  0005D6                     l4574:
  6293                           
  6294                           ; BSR set to: 1
  6295                           ;doprnt.c: 1149: if(flag & 0x03)
  6296  0005D6  0E03               	movlw	3
  6297  0005D8  0101               	movlb	1	; () banked
  6298  0005DA  1516               	andwf	printf@flag& (0+255),w,b
  6299  0005DC  0100               	movlb	0	; () banked
  6300  0005DE  6FDD               	movwf	??_printf& (0+255),b
  6301  0005E0  0E00               	movlw	0
  6302  0005E2  0101               	movlb	1	; () banked
  6303  0005E4  1517               	andwf	(printf@flag+1)& (0+255),w,b
  6304  0005E6  0100               	movlb	0	; () banked
  6305  0005E8  6FDE               	movwf	(??_printf+1)& (0+255),b
  6306  0005EA  0100               	movlb	0	; () banked
  6307  0005EC  51DD               	movf	??_printf& (0+255),w,b
  6308  0005EE  0100               	movlb	0	; () banked
  6309  0005F0  11DE               	iorwf	(??_printf+1)& (0+255),w,b
  6310  0005F2  B4D8               	btfsc	status,2,c
  6311  0005F4  D004               	goto	l4578
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;doprnt.c: 1150: width--;
  6315  0005F6  0101               	movlb	1	; () banked
  6316  0005F8  071B               	decf	printf@width& (0+255),f,b
  6317  0005FA  A0D8               	btfss	status,0,c
  6318  0005FC  071C               	decf	(printf@width+1)& (0+255),f,b
  6319  0005FE                     l4578:
  6320                           
  6321                           ;doprnt.c: 1153: if(flag & 0x04) {
  6322  0005FE  0101               	movlb	1	; () banked
  6323  000600  A516               	btfss	printf@flag& (0+255),2,b
  6324  000602  D02D               	goto	l4594
  6325                           
  6326                           ; BSR set to: 1
  6327                           ;doprnt.c: 1157: if(flag & 0x03)
  6328  000604  0E03               	movlw	3
  6329  000606  0101               	movlb	1	; () banked
  6330  000608  1516               	andwf	printf@flag& (0+255),w,b
  6331  00060A  0100               	movlb	0	; () banked
  6332  00060C  6FDD               	movwf	??_printf& (0+255),b
  6333  00060E  0E00               	movlw	0
  6334  000610  0101               	movlb	1	; () banked
  6335  000612  1517               	andwf	(printf@flag+1)& (0+255),w,b
  6336  000614  0100               	movlb	0	; () banked
  6337  000616  6FDE               	movwf	(??_printf+1)& (0+255),b
  6338  000618  0100               	movlb	0	; () banked
  6339  00061A  51DD               	movf	??_printf& (0+255),w,b
  6340  00061C  0100               	movlb	0	; () banked
  6341  00061E  11DE               	iorwf	(??_printf+1)& (0+255),w,b
  6342  000620  B4D8               	btfsc	status,2,c
  6343  000622  D00B               	goto	l4588
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;doprnt.c: 1159: (putch('-') );
  6347  000624  0E2D               	movlw	45
  6348  000626  EC12  F01F         	call	_putch
  6349                           
  6350                           ;doprnt.c: 1168: while(width > 0) {
  6351  00062A  D007               	goto	l4588
  6352  00062C                     l4584:
  6353                           
  6354                           ;doprnt.c: 1169: (putch('0') );
  6355  00062C  0E30               	movlw	48
  6356  00062E  EC12  F01F         	call	_putch
  6357                           
  6358                           ;doprnt.c: 1170: width--;
  6359  000632  0101               	movlb	1	; () banked
  6360  000634  071B               	decf	printf@width& (0+255),f,b
  6361  000636  A0D8               	btfss	status,0,c
  6362  000638  071C               	decf	(printf@width+1)& (0+255),f,b
  6363  00063A                     l4588:
  6364  00063A  0101               	movlb	1	; () banked
  6365  00063C  BF1C               	btfsc	(printf@width+1)& (0+255),7,b
  6366  00063E  D074               	goto	l4606
  6367  000640  0101               	movlb	1	; () banked
  6368  000642  511C               	movf	(printf@width+1)& (0+255),w,b
  6369  000644  E1F3               	bnz	l4584
  6370  000646  0101               	movlb	1	; () banked
  6371  000648  051B               	decf	printf@width& (0+255),w,b
  6372  00064A  A0D8               	btfss	status,0,c
  6373  00064C  D06D               	goto	l4606
  6374  00064E  D7EE               	goto	l4584
  6375  000650                     l4590:
  6376                           
  6377                           ; BSR set to: 1
  6378                           ;doprnt.c: 1181: (putch(' ') );
  6379  000650  0E20               	movlw	32
  6380  000652  EC12  F01F         	call	_putch
  6381                           
  6382                           ;doprnt.c: 1182: width--;
  6383  000656  0101               	movlb	1	; () banked
  6384  000658  071B               	decf	printf@width& (0+255),f,b
  6385  00065A  A0D8               	btfss	status,0,c
  6386  00065C  071C               	decf	(printf@width+1)& (0+255),f,b
  6387  00065E                     l4594:
  6388                           
  6389                           ; BSR set to: 1
  6390  00065E  0101               	movlb	1	; () banked
  6391  000660  BF1C               	btfsc	(printf@width+1)& (0+255),7,b
  6392  000662  D007               	goto	l4596
  6393  000664  0101               	movlb	1	; () banked
  6394  000666  511C               	movf	(printf@width+1)& (0+255),w,b
  6395  000668  E1F3               	bnz	l4590
  6396  00066A  0101               	movlb	1	; () banked
  6397  00066C  051B               	decf	printf@width& (0+255),w,b
  6398  00066E  B0D8               	btfsc	status,0,c
  6399  000670  D7EF               	goto	l4590
  6400  000672                     l4596:
  6401                           
  6402                           ; BSR set to: 1
  6403                           ;doprnt.c: 1183: }
  6404                           ;doprnt.c: 1188: if(flag & 0x03)
  6405  000672  0E03               	movlw	3
  6406  000674  0101               	movlb	1	; () banked
  6407  000676  1516               	andwf	printf@flag& (0+255),w,b
  6408  000678  0100               	movlb	0	; () banked
  6409  00067A  6FDD               	movwf	??_printf& (0+255),b
  6410  00067C  0E00               	movlw	0
  6411  00067E  0101               	movlb	1	; () banked
  6412  000680  1517               	andwf	(printf@flag+1)& (0+255),w,b
  6413  000682  0100               	movlb	0	; () banked
  6414  000684  6FDE               	movwf	(??_printf+1)& (0+255),b
  6415  000686  0100               	movlb	0	; () banked
  6416  000688  51DD               	movf	??_printf& (0+255),w,b
  6417  00068A  0100               	movlb	0	; () banked
  6418  00068C  11DE               	iorwf	(??_printf+1)& (0+255),w,b
  6419  00068E  B4D8               	btfsc	status,2,c
  6420  000690  D04B               	goto	l4606
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;doprnt.c: 1190: (putch('-') );
  6424  000692  0E2D               	movlw	45
  6425  000694  EC12  F01F         	call	_putch
  6426                           
  6427                           ;doprnt.c: 1195: }
  6428                           ;doprnt.c: 1196: while(c--) {
  6429  000698  D047               	goto	l4606
  6430  00069A                     l4600:
  6431                           
  6432                           ;doprnt.c: 1200: {
  6433                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6434  00069A  C112  F080         	movff	printf@val,___lldiv@dividend
  6435  00069E  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  6436  0006A2  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  6437  0006A6  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  6438  0006AA  0101               	movlb	1	; () banked
  6439  0006AC  511D               	movf	printf@c& (0+255),w,b
  6440  0006AE  0D04               	mullw	4
  6441  0006B0  0EC1               	movlw	low _dpowers
  6442  0006B2  24F3               	addwf	prodl,w,c
  6443  0006B4  6EF6               	movwf	tblptrl,c
  6444  0006B6  0EFD               	movlw	high _dpowers
  6445  0006B8  20F4               	addwfc	prodh,w,c
  6446  0006BA  6EF7               	movwf	tblptrh,c
  6447  0006BC                     	if	0	;There are less than 3 active tblptr bytes
  6448  0006BC                     	endif
  6449  0006BC  0009               	tblrd		*+
  6450  0006BE  CFF5 F084          	movff	tablat,___lldiv@divisor
  6451  0006C2  0009               	tblrd		*+
  6452  0006C4  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6453  0006C8  0009               	tblrd		*+
  6454  0006CA  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6455  0006CE  000A               	tblrd		*-
  6456  0006D0  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6457  0006D4  EC3E  F018         	call	___lldiv	;wreg free
  6458  0006D8  C080  F10C         	movff	?___lldiv,printf@tmpval
  6459  0006DC  C081  F10D         	movff	?___lldiv+1,printf@tmpval+1
  6460  0006E0  C082  F10E         	movff	?___lldiv+2,printf@tmpval+2
  6461  0006E4  C083  F10F         	movff	?___lldiv+3,printf@tmpval+3
  6462                           
  6463                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6464  0006E8  C10C  F08D         	movff	printf@tmpval,___llmod@dividend
  6465  0006EC  C10D  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  6466  0006F0  C10E  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  6467  0006F4  C10F  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  6468  0006F8  0E0A               	movlw	10
  6469  0006FA  0100               	movlb	0	; () banked
  6470  0006FC  6F91               	movwf	___llmod@divisor& (0+255),b
  6471  0006FE  0E00               	movlw	0
  6472  000700  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  6473  000702  0E00               	movlw	0
  6474  000704  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  6475  000706  0E00               	movlw	0
  6476  000708  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  6477  00070A  EC94  F01A         	call	___llmod	;wreg free
  6478  00070E  C08D  F10C         	movff	?___llmod,printf@tmpval
  6479  000712  C08E  F10D         	movff	?___llmod+1,printf@tmpval+1
  6480  000716  C08F  F10E         	movff	?___llmod+2,printf@tmpval+2
  6481  00071A  C090  F10F         	movff	?___llmod+3,printf@tmpval+3
  6482                           
  6483                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6484  00071E  0101               	movlb	1	; () banked
  6485  000720  510C               	movf	printf@tmpval& (0+255),w,b
  6486  000722  0F30               	addlw	48
  6487  000724  EC12  F01F         	call	_putch
  6488  000728                     l4606:
  6489  000728  0101               	movlb	1	; () banked
  6490  00072A  071D               	decf	printf@c& (0+255),f,b
  6491  00072C  0101               	movlb	1	; () banked
  6492  00072E  291D               	incf	printf@c& (0+255),w,b
  6493  000730  B4D8               	btfsc	status,2,c
  6494  000732  D008               	goto	l4612
  6495  000734  D7B2               	goto	l4600
  6496  000736                     l4608:
  6497                           
  6498                           ; BSR set to: 1
  6499                           ;doprnt.c: 1208: (putch('0') );
  6500  000736  0E30               	movlw	48
  6501  000738  EC12  F01F         	call	_putch
  6502                           
  6503                           ;doprnt.c: 1209: exp--;
  6504  00073C  0101               	movlb	1	; () banked
  6505  00073E  0710               	decf	printf@exp& (0+255),f,b
  6506  000740  A0D8               	btfss	status,0,c
  6507  000742  0711               	decf	(printf@exp+1)& (0+255),f,b
  6508  000744                     l4612:
  6509                           
  6510                           ; BSR set to: 1
  6511  000744  0101               	movlb	1	; () banked
  6512  000746  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  6513  000748  D007               	goto	l4614
  6514  00074A  0101               	movlb	1	; () banked
  6515  00074C  5111               	movf	(printf@exp+1)& (0+255),w,b
  6516  00074E  E1F3               	bnz	l4608
  6517  000750  0101               	movlb	1	; () banked
  6518  000752  0510               	decf	printf@exp& (0+255),w,b
  6519  000754  B0D8               	btfsc	status,0,c
  6520  000756  D7EF               	goto	l4608
  6521  000758                     l4614:
  6522                           
  6523                           ; BSR set to: 1
  6524                           ;doprnt.c: 1210: }
  6525                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6526  000758  0101               	movlb	1	; () banked
  6527  00075A  BF0B               	btfsc	(printf@prec+1)& (0+255),7,b
  6528  00075C  D00C               	goto	l748
  6529  00075E  0101               	movlb	1	; () banked
  6530  000760  510B               	movf	(printf@prec+1)& (0+255),w,b
  6531  000762  E105               	bnz	u4400
  6532  000764  0E09               	movlw	9
  6533  000766  0101               	movlb	1	; () banked
  6534  000768  5D0A               	subwf	printf@prec& (0+255),w,b
  6535  00076A  A0D8               	btfss	status,0,c
  6536  00076C  D004               	goto	l748
  6537  00076E                     u4400:
  6538                           
  6539                           ; BSR set to: 1
  6540                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6541  00076E  0E08               	movlw	8
  6542  000770  0101               	movlb	1	; () banked
  6543  000772  6F1D               	movwf	printf@c& (0+255),b
  6544  000774  D002               	goto	l4618
  6545  000776                     l748:
  6546                           
  6547                           ; BSR set to: 1
  6548                           ;doprnt.c: 1213: else
  6549                           ;doprnt.c: 1214: c = prec;
  6550  000776  C10A  F11D         	movff	printf@prec,printf@c
  6551  00077A                     l4618:
  6552                           
  6553                           ; BSR set to: 1
  6554                           ;doprnt.c: 1215: prec -= c;
  6555  00077A  0101               	movlb	1	; () banked
  6556  00077C  511D               	movf	printf@c& (0+255),w,b
  6557  00077E  0101               	movlb	1	; () banked
  6558  000780  5F0A               	subwf	printf@prec& (0+255),f,b
  6559  000782  0E00               	movlw	0
  6560  000784  0101               	movlb	1	; () banked
  6561  000786  BF1D               	btfsc	printf@c& (0+255),7,b
  6562  000788  0EFF               	movlw	255
  6563  00078A  0101               	movlb	1	; () banked
  6564  00078C  5B0B               	subwfb	(printf@prec+1)& (0+255),f,b
  6565                           
  6566                           ; BSR set to: 1
  6567                           ;doprnt.c: 1219: if(c)
  6568  00078E  0101               	movlb	1	; () banked
  6569  000790  511D               	movf	printf@c& (0+255),w,b
  6570  000792  0101               	movlb	1	; () banked
  6571  000794  B4D8               	btfsc	status,2,c
  6572  000796  D003               	goto	l4624
  6573                           
  6574                           ; BSR set to: 1
  6575                           ;doprnt.c: 1221: (putch('.') );
  6576  000798  0E2E               	movlw	46
  6577  00079A  EC12  F01F         	call	_putch
  6578  00079E                     l4624:
  6579                           
  6580                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6581  00079E  0101               	movlb	1	; () banked
  6582  0007A0  511D               	movf	printf@c& (0+255),w,b
  6583  0007A2  EC3D  F006         	call	_scale
  6584  0007A6  C0B0  F100         	movff	?_scale,_printf$1340
  6585  0007AA  C0B1  F101         	movff	?_scale+1,_printf$1340+1
  6586  0007AE  C0B2  F102         	movff	?_scale+2,_printf$1340+2
  6587                           
  6588                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6589  0007B2  C118  F0A4         	movff	printf@fval,___ftmul@f2
  6590  0007B6  C119  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  6591  0007BA  C11A  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  6592  0007BE  C100  F0A1         	movff	_printf$1340,___ftmul@f1
  6593  0007C2  C101  F0A2         	movff	_printf$1340+1,___ftmul@f1+1
  6594  0007C6  C102  F0A3         	movff	_printf$1340+2,___ftmul@f1+2
  6595  0007CA  ECF3  F010         	call	___ftmul	;wreg free
  6596  0007CE  C0A1  F0C6         	movff	?___ftmul,___fttol@f1
  6597  0007D2  C0A2  F0C7         	movff	?___ftmul+1,___fttol@f1+1
  6598  0007D6  C0A3  F0C8         	movff	?___ftmul+2,___fttol@f1+2
  6599  0007DA  EC48  F012         	call	___fttol	;wreg free
  6600  0007DE  C0C6  F112         	movff	?___fttol,printf@val
  6601  0007E2  C0C7  F113         	movff	?___fttol+1,printf@val+1
  6602  0007E6  C0C8  F114         	movff	?___fttol+2,printf@val+2
  6603  0007EA  C0C9  F115         	movff	?___fttol+3,printf@val+3
  6604                           
  6605                           ;doprnt.c: 1228: while(c--) {
  6606  0007EE  D06E               	goto	l4634
  6607  0007F0                     l4628:
  6608                           
  6609                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6610  0007F0  C112  F080         	movff	printf@val,___lldiv@dividend
  6611  0007F4  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  6612  0007F8  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  6613  0007FC  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  6614  000800  0101               	movlb	1	; () banked
  6615  000802  511D               	movf	printf@c& (0+255),w,b
  6616  000804  0D04               	mullw	4
  6617  000806  0EC1               	movlw	low _dpowers
  6618  000808  24F3               	addwf	prodl,w,c
  6619  00080A  6EF6               	movwf	tblptrl,c
  6620  00080C  0EFD               	movlw	high _dpowers
  6621  00080E  20F4               	addwfc	prodh,w,c
  6622  000810  6EF7               	movwf	tblptrh,c
  6623  000812                     	if	0	;There are less than 3 active tblptr bytes
  6624  000812                     	endif
  6625  000812  0009               	tblrd		*+
  6626  000814  CFF5 F084          	movff	tablat,___lldiv@divisor
  6627  000818  0009               	tblrd		*+
  6628  00081A  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6629  00081E  0009               	tblrd		*+
  6630  000820  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6631  000824  000A               	tblrd		*-
  6632  000826  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6633  00082A  EC3E  F018         	call	___lldiv	;wreg free
  6634  00082E  C080  F10C         	movff	?___lldiv,printf@tmpval
  6635  000832  C081  F10D         	movff	?___lldiv+1,printf@tmpval+1
  6636  000836  C082  F10E         	movff	?___lldiv+2,printf@tmpval+2
  6637  00083A  C083  F10F         	movff	?___lldiv+3,printf@tmpval+3
  6638                           
  6639                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6640  00083E  C10C  F08D         	movff	printf@tmpval,___llmod@dividend
  6641  000842  C10D  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  6642  000846  C10E  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  6643  00084A  C10F  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  6644  00084E  0E0A               	movlw	10
  6645  000850  0100               	movlb	0	; () banked
  6646  000852  6F91               	movwf	___llmod@divisor& (0+255),b
  6647  000854  0E00               	movlw	0
  6648  000856  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  6649  000858  0E00               	movlw	0
  6650  00085A  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  6651  00085C  0E00               	movlw	0
  6652  00085E  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  6653  000860  EC94  F01A         	call	___llmod	;wreg free
  6654  000864  C08D  F10C         	movff	?___llmod,printf@tmpval
  6655  000868  C08E  F10D         	movff	?___llmod+1,printf@tmpval+1
  6656  00086C  C08F  F10E         	movff	?___llmod+2,printf@tmpval+2
  6657  000870  C090  F10F         	movff	?___llmod+3,printf@tmpval+3
  6658                           
  6659                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6660  000874  0101               	movlb	1	; () banked
  6661  000876  510C               	movf	printf@tmpval& (0+255),w,b
  6662  000878  0F30               	addlw	48
  6663  00087A  EC12  F01F         	call	_putch
  6664                           
  6665                           ;doprnt.c: 1232: val %= dpowers[c];
  6666  00087E  C112  F08D         	movff	printf@val,___llmod@dividend
  6667  000882  C113  F08E         	movff	printf@val+1,___llmod@dividend+1
  6668  000886  C114  F08F         	movff	printf@val+2,___llmod@dividend+2
  6669  00088A  C115  F090         	movff	printf@val+3,___llmod@dividend+3
  6670  00088E  0101               	movlb	1	; () banked
  6671  000890  511D               	movf	printf@c& (0+255),w,b
  6672  000892  0D04               	mullw	4
  6673  000894  0EC1               	movlw	low _dpowers
  6674  000896  24F3               	addwf	prodl,w,c
  6675  000898  6EF6               	movwf	tblptrl,c
  6676  00089A  0EFD               	movlw	high _dpowers
  6677  00089C  20F4               	addwfc	prodh,w,c
  6678  00089E  6EF7               	movwf	tblptrh,c
  6679  0008A0                     	if	0	;There are less than 3 active tblptr bytes
  6680  0008A0                     	endif
  6681  0008A0  0009               	tblrd		*+
  6682  0008A2  CFF5 F091          	movff	tablat,___llmod@divisor
  6683  0008A6  0009               	tblrd		*+
  6684  0008A8  CFF5 F092          	movff	tablat,___llmod@divisor+1
  6685  0008AC  0009               	tblrd		*+
  6686  0008AE  CFF5 F093          	movff	tablat,___llmod@divisor+2
  6687  0008B2  000A               	tblrd		*-
  6688  0008B4  CFF5 F094          	movff	tablat,___llmod@divisor+3
  6689  0008B8  EC94  F01A         	call	___llmod	;wreg free
  6690  0008BC  C08D  F112         	movff	?___llmod,printf@val
  6691  0008C0  C08E  F113         	movff	?___llmod+1,printf@val+1
  6692  0008C4  C08F  F114         	movff	?___llmod+2,printf@val+2
  6693  0008C8  C090  F115         	movff	?___llmod+3,printf@val+3
  6694  0008CC                     l4634:
  6695  0008CC  0101               	movlb	1	; () banked
  6696  0008CE  071D               	decf	printf@c& (0+255),f,b
  6697  0008D0  0101               	movlb	1	; () banked
  6698  0008D2  291D               	incf	printf@c& (0+255),w,b
  6699  0008D4  B4D8               	btfsc	status,2,c
  6700  0008D6  D008               	goto	l4640
  6701  0008D8  D78B               	goto	l4628
  6702  0008DA                     l4636:
  6703                           
  6704                           ; BSR set to: 1
  6705                           ;doprnt.c: 1236: (putch('0') );
  6706  0008DA  0E30               	movlw	48
  6707  0008DC  EC12  F01F         	call	_putch
  6708                           
  6709                           ;doprnt.c: 1237: prec--;
  6710  0008E0  0101               	movlb	1	; () banked
  6711  0008E2  070A               	decf	printf@prec& (0+255),f,b
  6712  0008E4  A0D8               	btfss	status,0,c
  6713  0008E6  070B               	decf	(printf@prec+1)& (0+255),f,b
  6714  0008E8                     l4640:
  6715                           
  6716                           ; BSR set to: 1
  6717  0008E8  0101               	movlb	1	; () banked
  6718  0008EA  510A               	movf	printf@prec& (0+255),w,b
  6719  0008EC  0101               	movlb	1	; () banked
  6720  0008EE  110B               	iorwf	(printf@prec+1)& (0+255),w,b
  6721  0008F0  B4D8               	btfsc	status,2,c
  6722  0008F2  D1B3               	goto	l4738
  6723  0008F4  D7F2               	goto	l4636
  6724  0008F6                     l709:
  6725                           
  6726                           ; BSR set to: 1
  6727                           ;doprnt.c: 1246: }
  6728                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6729  0008F6  0101               	movlb	1	; () banked
  6730  0008F8  BF16               	btfsc	printf@flag& (0+255),7,b
  6731  0008FA  D023               	goto	l4652
  6732                           
  6733                           ; BSR set to: 1
  6734                           ;doprnt.c: 1253: {
  6735                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6736  0008FC  C108  FFD9         	movff	printf@ap,fsr2l
  6737  000900  C109  FFDA         	movff	printf@ap+1,fsr2h
  6738  000904  CFDE F112          	movff	postinc2,printf@val
  6739  000908  CFDD F113          	movff	postdec2,printf@val+1
  6740  00090C  0101               	movlb	1	; () banked
  6741  00090E  0E00               	movlw	0
  6742  000910  BF13               	btfsc	(printf@val+1)& (0+255),7,b
  6743  000912  0EFF               	movlw	-1
  6744  000914  6F14               	movwf	(printf@val+2)& (0+255),b
  6745  000916  6F15               	movwf	(printf@val+3)& (0+255),b
  6746                           
  6747                           ; BSR set to: 1
  6748  000918  0E02               	movlw	2
  6749  00091A  0101               	movlb	1	; () banked
  6750  00091C  2708               	addwf	printf@ap& (0+255),f,b
  6751  00091E  0E00               	movlw	0
  6752  000920  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  6753                           
  6754                           ; BSR set to: 1
  6755                           ;doprnt.c: 1261: if((long)val < 0) {
  6756  000922  0101               	movlb	1	; () banked
  6757  000924  AF15               	btfss	(printf@val+3)& (0+255),7,b
  6758  000926  D06E               	goto	l4686
  6759                           
  6760                           ; BSR set to: 1
  6761                           ;doprnt.c: 1262: flag |= 0x03;
  6762  000928  0E03               	movlw	3
  6763  00092A  0101               	movlb	1	; () banked
  6764  00092C  1316               	iorwf	printf@flag& (0+255),f,b
  6765                           
  6766                           ; BSR set to: 1
  6767                           ;doprnt.c: 1263: val = -val;
  6768  00092E  0101               	movlb	1	; () banked
  6769  000930  1F15               	comf	(printf@val+3)& (0+255),f,b
  6770  000932  1F14               	comf	(printf@val+2)& (0+255),f,b
  6771  000934  1F13               	comf	(printf@val+1)& (0+255),f,b
  6772  000936  6D12               	negf	printf@val& (0+255),b
  6773  000938  0E00               	movlw	0
  6774  00093A  2313               	addwfc	(printf@val+1)& (0+255),f,b
  6775  00093C  2314               	addwfc	(printf@val+2)& (0+255),f,b
  6776  00093E  2315               	addwfc	(printf@val+3)& (0+255),f,b
  6777                           
  6778                           ; BSR set to: 1
  6779                           ;doprnt.c: 1264: }
  6780                           ;doprnt.c: 1266: }
  6781  000940  D061               	goto	l4686
  6782  000942                     l4652:
  6783                           
  6784                           ; BSR set to: 1
  6785                           ;doprnt.c: 1268: else
  6786                           ;doprnt.c: 1273: {
  6787                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6788  000942  C108  FFD9         	movff	printf@ap,fsr2l
  6789  000946  C109  FFDA         	movff	printf@ap+1,fsr2h
  6790  00094A  CFDE F0DD          	movff	postinc2,??_printf
  6791  00094E  CFDD F0DE          	movff	postdec2,??_printf+1
  6792  000952  C0DD  F112         	movff	??_printf,printf@val
  6793  000956  C0DE  F113         	movff	??_printf+1,printf@val+1
  6794  00095A  0101               	movlb	1	; () banked
  6795  00095C  6B14               	clrf	(printf@val+2)& (0+255),b
  6796  00095E  6B15               	clrf	(printf@val+3)& (0+255),b
  6797                           
  6798                           ; BSR set to: 1
  6799  000960  0E02               	movlw	2
  6800  000962  0101               	movlb	1	; () banked
  6801  000964  2708               	addwf	printf@ap& (0+255),f,b
  6802  000966  0E00               	movlw	0
  6803  000968  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  6804                           
  6805                           ; BSR set to: 1
  6806                           ;doprnt.c: 1287: }
  6807                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6808  00096A  D04C               	goto	l4686
  6809  00096C                     l4656:
  6810                           
  6811                           ; BSR set to: 1
  6812                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6813  00096C  0E01               	movlw	1
  6814  00096E  0101               	movlb	1	; () banked
  6815  000970  6F1D               	movwf	printf@c& (0+255),b
  6816  000972                     l4658:
  6817                           
  6818                           ; BSR set to: 1
  6819  000972  0E0A               	movlw	10
  6820  000974  0101               	movlb	1	; () banked
  6821  000976  191D               	xorwf	printf@c& (0+255),w,b
  6822  000978  B4D8               	btfsc	status,2,c
  6823  00097A  D04D               	goto	l4688
  6824                           
  6825                           ; BSR set to: 1
  6826                           ;doprnt.c: 1306: if(val < dpowers[c])
  6827                           
  6828                           ; BSR set to: 1
  6829                           
  6830                           ; BSR set to: 1
  6831  00097C  0101               	movlb	1	; () banked
  6832  00097E  511D               	movf	printf@c& (0+255),w,b
  6833  000980  0D04               	mullw	4
  6834  000982  0EC1               	movlw	low _dpowers
  6835  000984  24F3               	addwf	prodl,w,c
  6836  000986  6EF6               	movwf	tblptrl,c
  6837  000988  0EFD               	movlw	high _dpowers
  6838  00098A  20F4               	addwfc	prodh,w,c
  6839  00098C  6EF7               	movwf	tblptrh,c
  6840  00098E                     	if	0	;There are less than 3 active tblptr bytes
  6841  00098E                     	endif
  6842  00098E  0009               	tblrd		*+
  6843  000990  50F5               	movf	tablat,w,c
  6844  000992  0101               	movlb	1	; () banked
  6845  000994  5D12               	subwf	printf@val& (0+255),w,b
  6846  000996  0009               	tblrd		*+
  6847  000998  50F5               	movf	tablat,w,c
  6848  00099A  0101               	movlb	1	; () banked
  6849  00099C  5913               	subwfb	(printf@val+1)& (0+255),w,b
  6850  00099E  0009               	tblrd		*+
  6851  0009A0  50F5               	movf	tablat,w,c
  6852  0009A2  0101               	movlb	1	; () banked
  6853  0009A4  5914               	subwfb	(printf@val+2)& (0+255),w,b
  6854  0009A6  0009               	tblrd		*+
  6855  0009A8  50F5               	movf	tablat,w,c
  6856  0009AA  0101               	movlb	1	; () banked
  6857  0009AC  5915               	subwfb	(printf@val+3)& (0+255),w,b
  6858  0009AE  A0D8               	btfss	status,0,c
  6859  0009B0  D032               	goto	l4688
  6860                           
  6861                           ; BSR set to: 1
  6862                           
  6863                           ; BSR set to: 1
  6864                           
  6865                           ; BSR set to: 1
  6866                           ;doprnt.c: 1307: break;
  6867  0009B2  0101               	movlb	1	; () banked
  6868  0009B4  2B1D               	incf	printf@c& (0+255),f,b
  6869  0009B6  D7DD               	goto	l4658
  6870  0009B8                     l4670:
  6871                           
  6872                           ; BSR set to: 1
  6873                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6874  0009B8  0E01               	movlw	1
  6875  0009BA  0101               	movlb	1	; () banked
  6876  0009BC  6F1D               	movwf	printf@c& (0+255),b
  6877  0009BE                     l4672:
  6878                           
  6879                           ; BSR set to: 1
  6880  0009BE  0E08               	movlw	8
  6881  0009C0  0101               	movlb	1	; () banked
  6882  0009C2  191D               	xorwf	printf@c& (0+255),w,b
  6883  0009C4  B4D8               	btfsc	status,2,c
  6884  0009C6  D027               	goto	l4688
  6885                           
  6886                           ; BSR set to: 1
  6887                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6888                           
  6889                           ; BSR set to: 1
  6890                           
  6891                           ; BSR set to: 1
  6892  0009C8  0101               	movlb	1	; () banked
  6893  0009CA  511D               	movf	printf@c& (0+255),w,b
  6894  0009CC  0D04               	mullw	4
  6895  0009CE  0E37               	movlw	low _hexpowers
  6896  0009D0  24F3               	addwf	prodl,w,c
  6897  0009D2  6EF6               	movwf	tblptrl,c
  6898  0009D4  0EFE               	movlw	high _hexpowers
  6899  0009D6  20F4               	addwfc	prodh,w,c
  6900  0009D8  6EF7               	movwf	tblptrh,c
  6901  0009DA                     	if	0	;There are less than 3 active tblptr bytes
  6902  0009DA                     	endif
  6903  0009DA  0009               	tblrd		*+
  6904  0009DC  50F5               	movf	tablat,w,c
  6905  0009DE  0101               	movlb	1	; () banked
  6906  0009E0  5D12               	subwf	printf@val& (0+255),w,b
  6907  0009E2  0009               	tblrd		*+
  6908  0009E4  50F5               	movf	tablat,w,c
  6909  0009E6  0101               	movlb	1	; () banked
  6910  0009E8  5913               	subwfb	(printf@val+1)& (0+255),w,b
  6911  0009EA  0009               	tblrd		*+
  6912  0009EC  50F5               	movf	tablat,w,c
  6913  0009EE  0101               	movlb	1	; () banked
  6914  0009F0  5914               	subwfb	(printf@val+2)& (0+255),w,b
  6915  0009F2  0009               	tblrd		*+
  6916  0009F4  50F5               	movf	tablat,w,c
  6917  0009F6  0101               	movlb	1	; () banked
  6918  0009F8  5915               	subwfb	(printf@val+3)& (0+255),w,b
  6919  0009FA  A0D8               	btfss	status,0,c
  6920  0009FC  D00C               	goto	l4688
  6921                           
  6922                           ; BSR set to: 1
  6923                           
  6924                           ; BSR set to: 1
  6925                           
  6926                           ; BSR set to: 1
  6927                           ;doprnt.c: 1318: break;
  6928  0009FE  0101               	movlb	1	; () banked
  6929  000A00  2B1D               	incf	printf@c& (0+255),f,b
  6930  000A02  D7DD               	goto	l4672
  6931  000A04                     l4686:
  6932                           
  6933                           ; BSR set to: 1
  6934  000A04  0101               	movlb	1	; () banked
  6935  000A06  5116               	movf	printf@flag& (0+255),w,b
  6936  000A08  0B80               	andlw	128
  6937                           
  6938                           ; Switch size 1, requested type "space"
  6939                           ; Number of cases is 2, Range of values is 0 to 128
  6940                           ; switch strategies available:
  6941                           ; Name         Instructions Cycles
  6942                           ; simple_byte            7     4 (average)
  6943                           ;	Chosen strategy is simple_byte
  6944  000A0A  0A00               	xorlw	0	; case 0
  6945  000A0C  B4D8               	btfsc	status,2,c
  6946  000A0E  D7AE               	goto	l4656
  6947  000A10  0A80               	xorlw	128	; case 128
  6948  000A12  B4D8               	btfsc	status,2,c
  6949  000A14  D7D1               	goto	l4670
  6950  000A16                     l4688:
  6951                           
  6952                           ; BSR set to: 1
  6953                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6954  000A16  0101               	movlb	1	; () banked
  6955  000A18  511B               	movf	printf@width& (0+255),w,b
  6956  000A1A  0101               	movlb	1	; () banked
  6957  000A1C  111C               	iorwf	(printf@width+1)& (0+255),w,b
  6958  000A1E  B4D8               	btfsc	status,2,c
  6959  000A20  D014               	goto	l4694
  6960                           
  6961                           ; BSR set to: 1
  6962  000A22  0E03               	movlw	3
  6963  000A24  0101               	movlb	1	; () banked
  6964  000A26  1516               	andwf	printf@flag& (0+255),w,b
  6965  000A28  0100               	movlb	0	; () banked
  6966  000A2A  6FDD               	movwf	??_printf& (0+255),b
  6967  000A2C  0E00               	movlw	0
  6968  000A2E  0101               	movlb	1	; () banked
  6969  000A30  1517               	andwf	(printf@flag+1)& (0+255),w,b
  6970  000A32  0100               	movlb	0	; () banked
  6971  000A34  6FDE               	movwf	(??_printf+1)& (0+255),b
  6972  000A36  0100               	movlb	0	; () banked
  6973  000A38  51DD               	movf	??_printf& (0+255),w,b
  6974  000A3A  0100               	movlb	0	; () banked
  6975  000A3C  11DE               	iorwf	(??_printf+1)& (0+255),w,b
  6976  000A3E  B4D8               	btfsc	status,2,c
  6977  000A40  D004               	goto	l4694
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;doprnt.c: 1346: width--;
  6981  000A42  0101               	movlb	1	; () banked
  6982  000A44  071B               	decf	printf@width& (0+255),f,b
  6983  000A46  A0D8               	btfss	status,0,c
  6984  000A48  071C               	decf	(printf@width+1)& (0+255),f,b
  6985  000A4A                     l4694:
  6986                           
  6987                           ;doprnt.c: 1381: if(width > c)
  6988  000A4A  0E80               	movlw	128
  6989  000A4C  0101               	movlb	1	; () banked
  6990  000A4E  BF1D               	btfsc	printf@c& (0+255),7,b
  6991  000A50  0E7F               	movlw	127
  6992  000A52  0100               	movlb	0	; () banked
  6993  000A54  6FDD               	movwf	??_printf& (0+255),b
  6994  000A56  0101               	movlb	1	; () banked
  6995  000A58  511B               	movf	printf@width& (0+255),w,b
  6996  000A5A  0101               	movlb	1	; () banked
  6997  000A5C  5D1D               	subwf	printf@c& (0+255),w,b
  6998  000A5E  0101               	movlb	1	; () banked
  6999  000A60  511C               	movf	(printf@width+1)& (0+255),w,b
  7000  000A62  0A80               	xorlw	128
  7001  000A64  0100               	movlb	0	; () banked
  7002  000A66  59DD               	subwfb	??_printf& (0+255),w,b
  7003  000A68  B0D8               	btfsc	status,0,c
  7004  000A6A  D00B               	goto	l4698
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;doprnt.c: 1382: width -= c;
  7008  000A6C  0101               	movlb	1	; () banked
  7009  000A6E  511D               	movf	printf@c& (0+255),w,b
  7010  000A70  0101               	movlb	1	; () banked
  7011  000A72  5F1B               	subwf	printf@width& (0+255),f,b
  7012  000A74  0E00               	movlw	0
  7013  000A76  0101               	movlb	1	; () banked
  7014  000A78  BF1D               	btfsc	printf@c& (0+255),7,b
  7015  000A7A  0EFF               	movlw	255
  7016  000A7C  0101               	movlb	1	; () banked
  7017  000A7E  5B1C               	subwfb	(printf@width+1)& (0+255),f,b
  7018  000A80  D005               	goto	l4700
  7019  000A82                     l4698:
  7020                           
  7021                           ;doprnt.c: 1383: else
  7022                           ;doprnt.c: 1384: width = 0;
  7023  000A82  0E00               	movlw	0
  7024  000A84  0101               	movlb	1	; () banked
  7025  000A86  6F1C               	movwf	(printf@width+1)& (0+255),b
  7026  000A88  0E00               	movlw	0
  7027  000A8A  6F1B               	movwf	printf@width& (0+255),b
  7028  000A8C                     l4700:
  7029                           
  7030                           ; BSR set to: 1
  7031                           ;doprnt.c: 1387: if(flag & 0x04) {
  7032  000A8C  0101               	movlb	1	; () banked
  7033  000A8E  A516               	btfss	printf@flag& (0+255),2,b
  7034  000A90  D021               	goto	l4712
  7035                           
  7036                           ; BSR set to: 1
  7037                           ;doprnt.c: 1392: if(flag & 0x03)
  7038  000A92  0E03               	movlw	3
  7039  000A94  0101               	movlb	1	; () banked
  7040  000A96  1516               	andwf	printf@flag& (0+255),w,b
  7041  000A98  0100               	movlb	0	; () banked
  7042  000A9A  6FDD               	movwf	??_printf& (0+255),b
  7043  000A9C  0E00               	movlw	0
  7044  000A9E  0101               	movlb	1	; () banked
  7045  000AA0  1517               	andwf	(printf@flag+1)& (0+255),w,b
  7046  000AA2  0100               	movlb	0	; () banked
  7047  000AA4  6FDE               	movwf	(??_printf+1)& (0+255),b
  7048  000AA6  0100               	movlb	0	; () banked
  7049  000AA8  51DD               	movf	??_printf& (0+255),w,b
  7050  000AAA  0100               	movlb	0	; () banked
  7051  000AAC  11DE               	iorwf	(??_printf+1)& (0+255),w,b
  7052  000AAE  B4D8               	btfsc	status,2,c
  7053  000AB0  D003               	goto	l4706
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;doprnt.c: 1393: (putch('-') );
  7057  000AB2  0E2D               	movlw	45
  7058  000AB4  EC12  F01F         	call	_putch
  7059  000AB8                     l4706:
  7060                           
  7061                           ;doprnt.c: 1415: if(width)
  7062  000AB8  0101               	movlb	1	; () banked
  7063  000ABA  511B               	movf	printf@width& (0+255),w,b
  7064  000ABC  0101               	movlb	1	; () banked
  7065  000ABE  111C               	iorwf	(printf@width+1)& (0+255),w,b
  7066  000AC0  B4D8               	btfsc	status,2,c
  7067  000AC2  D02E               	goto	l4722
  7068                           
  7069                           ; BSR set to: 1
  7070                           ;doprnt.c: 1417: (putch('0') );
  7071                           
  7072                           ; BSR set to: 1
  7073                           
  7074                           ;doprnt.c: 1416: do
  7075  000AC4  0E30               	movlw	48
  7076  000AC6  EC12  F01F         	call	_putch
  7077                           
  7078                           ;doprnt.c: 1418: while(--width);
  7079  000ACA  0101               	movlb	1	; () banked
  7080  000ACC  071B               	decf	printf@width& (0+255),f,b
  7081  000ACE  A0D8               	btfss	status,0,c
  7082  000AD0  071C               	decf	(printf@width+1)& (0+255),f,b
  7083  000AD2  D7F2               	goto	l4706
  7084  000AD4                     l4712:
  7085                           
  7086                           ; BSR set to: 1
  7087                           ;doprnt.c: 1422: {
  7088                           ;doprnt.c: 1424: if(width
  7089                           ;doprnt.c: 1428: )
  7090  000AD4  0101               	movlb	1	; () banked
  7091  000AD6  511B               	movf	printf@width& (0+255),w,b
  7092  000AD8  0101               	movlb	1	; () banked
  7093  000ADA  111C               	iorwf	(printf@width+1)& (0+255),w,b
  7094  000ADC  B4D8               	btfsc	status,2,c
  7095  000ADE  D00D               	goto	l4718
  7096  000AE0                     l4714:
  7097                           
  7098                           ; BSR set to: 1
  7099                           ;doprnt.c: 1430: (putch(' ') );
  7100  000AE0  0E20               	movlw	32
  7101  000AE2  EC12  F01F         	call	_putch
  7102                           
  7103                           ;doprnt.c: 1431: while(--width);
  7104  000AE6  0101               	movlb	1	; () banked
  7105  000AE8  071B               	decf	printf@width& (0+255),f,b
  7106  000AEA  A0D8               	btfss	status,0,c
  7107  000AEC  071C               	decf	(printf@width+1)& (0+255),f,b
  7108  000AEE  0101               	movlb	1	; () banked
  7109  000AF0  511B               	movf	printf@width& (0+255),w,b
  7110  000AF2  0101               	movlb	1	; () banked
  7111  000AF4  111C               	iorwf	(printf@width+1)& (0+255),w,b
  7112  000AF6  A4D8               	btfss	status,2,c
  7113  000AF8  D7F3               	goto	l4714
  7114  000AFA                     l4718:
  7115                           
  7116                           ; BSR set to: 1
  7117                           ;doprnt.c: 1438: if(flag & 0x03)
  7118  000AFA  0E03               	movlw	3
  7119  000AFC  0101               	movlb	1	; () banked
  7120  000AFE  1516               	andwf	printf@flag& (0+255),w,b
  7121  000B00  0100               	movlb	0	; () banked
  7122  000B02  6FDD               	movwf	??_printf& (0+255),b
  7123  000B04  0E00               	movlw	0
  7124  000B06  0101               	movlb	1	; () banked
  7125  000B08  1517               	andwf	(printf@flag+1)& (0+255),w,b
  7126  000B0A  0100               	movlb	0	; () banked
  7127  000B0C  6FDE               	movwf	(??_printf+1)& (0+255),b
  7128  000B0E  0100               	movlb	0	; () banked
  7129  000B10  51DD               	movf	??_printf& (0+255),w,b
  7130  000B12  0100               	movlb	0	; () banked
  7131  000B14  11DE               	iorwf	(??_printf+1)& (0+255),w,b
  7132  000B16  B4D8               	btfsc	status,2,c
  7133  000B18  D003               	goto	l4722
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;doprnt.c: 1439: (putch('-') );
  7137  000B1A  0E2D               	movlw	45
  7138  000B1C  EC12  F01F         	call	_putch
  7139  000B20                     l4722:
  7140                           
  7141                           ;doprnt.c: 1469: }
  7142                           ;doprnt.c: 1472: prec = c;
  7143  000B20  0101               	movlb	1	; () banked
  7144  000B22  511D               	movf	printf@c& (0+255),w,b
  7145  000B24  0101               	movlb	1	; () banked
  7146  000B26  6F0A               	movwf	printf@prec& (0+255),b
  7147  000B28  6B0B               	clrf	(printf@prec+1)& (0+255),b
  7148  000B2A  BF0A               	btfsc	printf@prec& (0+255),7,b
  7149  000B2C  070B               	decf	(printf@prec+1)& (0+255),f,b
  7150                           
  7151                           ;doprnt.c: 1474: while(prec--) {
  7152  000B2E  D08A               	goto	l4736
  7153  000B30                     l4724:
  7154                           
  7155                           ; BSR set to: 1
  7156                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7157  000B30  C10A  F0DD         	movff	printf@prec,??_printf
  7158  000B34  C10B  F0DE         	movff	printf@prec+1,??_printf+1
  7159  000B38  0100               	movlb	0	; () banked
  7160  000B3A  90D8               	bcf	status,0,c
  7161  000B3C  37DD               	rlcf	??_printf& (0+255),f,b
  7162  000B3E  37DE               	rlcf	(??_printf+1)& (0+255),f,b
  7163  000B40  0100               	movlb	0	; () banked
  7164  000B42  90D8               	bcf	status,0,c
  7165  000B44  37DD               	rlcf	??_printf& (0+255),f,b
  7166  000B46  37DE               	rlcf	(??_printf+1)& (0+255),f,b
  7167  000B48  0EC1               	movlw	low _dpowers
  7168  000B4A  0100               	movlb	0	; () banked
  7169  000B4C  25DD               	addwf	??_printf& (0+255),w,b
  7170  000B4E  6EF6               	movwf	tblptrl,c
  7171  000B50  0EFD               	movlw	high _dpowers
  7172  000B52  21DE               	addwfc	(??_printf+1)& (0+255),w,b
  7173  000B54  6EF7               	movwf	tblptrh,c
  7174  000B56                     	if	0	;There are less than 3 active tblptr bytes
  7175  000B56                     	endif
  7176  000B56  0009               	tblrd		*+
  7177  000B58  CFF5 F084          	movff	tablat,___lldiv@divisor
  7178  000B5C  0009               	tblrd		*+
  7179  000B5E  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  7180  000B62  0009               	tblrd		*+
  7181  000B64  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  7182  000B68  000A               	tblrd		*-
  7183  000B6A  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  7184  000B6E  C112  F080         	movff	printf@val,___lldiv@dividend
  7185  000B72  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  7186  000B76  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  7187  000B7A  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  7188  000B7E  EC3E  F018         	call	___lldiv	;wreg free
  7189  000B82  C080  F08D         	movff	?___lldiv,___llmod@dividend
  7190  000B86  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  7191  000B8A  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  7192  000B8E  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  7193  000B92  0E0A               	movlw	10
  7194  000B94  0100               	movlb	0	; () banked
  7195  000B96  6F91               	movwf	___llmod@divisor& (0+255),b
  7196  000B98  0E00               	movlw	0
  7197  000B9A  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  7198  000B9C  0E00               	movlw	0
  7199  000B9E  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  7200  000BA0  0E00               	movlw	0
  7201  000BA2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  7202  000BA4  EC94  F01A         	call	___llmod	;wreg free
  7203  000BA8  0100               	movlb	0	; () banked
  7204  000BAA  518D               	movf	?___llmod& (0+255),w,b
  7205  000BAC  0F30               	addlw	48
  7206  000BAE  0101               	movlb	1	; () banked
  7207  000BB0  6F1D               	movwf	printf@c& (0+255),b
  7208                           
  7209                           ;doprnt.c: 1491: break;
  7210  000BB2  D044               	goto	l4734
  7211  000BB4                     l4726:
  7212                           
  7213                           ; BSR set to: 1
  7214                           ;doprnt.c: 1499: {
  7215                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7216  000BB4  C112  F080         	movff	printf@val,___lldiv@dividend
  7217  000BB8  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  7218  000BBC  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  7219  000BC0  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  7220  000BC4  C10A  F0DD         	movff	printf@prec,??_printf
  7221  000BC8  C10B  F0DE         	movff	printf@prec+1,??_printf+1
  7222  000BCC  0100               	movlb	0	; () banked
  7223  000BCE  90D8               	bcf	status,0,c
  7224  000BD0  37DD               	rlcf	??_printf& (0+255),f,b
  7225  000BD2  37DE               	rlcf	(??_printf+1)& (0+255),f,b
  7226  000BD4  0100               	movlb	0	; () banked
  7227  000BD6  90D8               	bcf	status,0,c
  7228  000BD8  37DD               	rlcf	??_printf& (0+255),f,b
  7229  000BDA  37DE               	rlcf	(??_printf+1)& (0+255),f,b
  7230  000BDC  0E37               	movlw	low _hexpowers
  7231  000BDE  0100               	movlb	0	; () banked
  7232  000BE0  25DD               	addwf	??_printf& (0+255),w,b
  7233  000BE2  6EF6               	movwf	tblptrl,c
  7234  000BE4  0EFE               	movlw	high _hexpowers
  7235  000BE6  21DE               	addwfc	(??_printf+1)& (0+255),w,b
  7236  000BE8  6EF7               	movwf	tblptrh,c
  7237  000BEA                     	if	0	;There are less than 3 active tblptr bytes
  7238  000BEA                     	endif
  7239  000BEA  0009               	tblrd		*+
  7240  000BEC  CFF5 F084          	movff	tablat,___lldiv@divisor
  7241  000BF0  0009               	tblrd		*+
  7242  000BF2  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  7243  000BF6  0009               	tblrd		*+
  7244  000BF8  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  7245  000BFC  000A               	tblrd		*-
  7246  000BFE  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  7247  000C02  EC3E  F018         	call	___lldiv	;wreg free
  7248  000C06  0100               	movlb	0	; () banked
  7249  000C08  5180               	movf	?___lldiv& (0+255),w,b
  7250  000C0A  0B0F               	andlw	15
  7251  000C0C  0101               	movlb	1	; () banked
  7252  000C0E  6F05               	movwf	printf@idx& (0+255),b
  7253                           
  7254                           ; BSR set to: 1
  7255                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7256  000C10  0101               	movlb	1	; () banked
  7257  000C12  5105               	movf	printf@idx& (0+255),w,b
  7258  000C14  0D01               	mullw	1
  7259  000C16  0E30               	movlw	low STR_24
  7260  000C18  24F3               	addwf	prodl,w,c
  7261  000C1A  6EF6               	movwf	tblptrl,c
  7262  000C1C  0EFF               	movlw	high STR_24
  7263  000C1E  20F4               	addwfc	prodh,w,c
  7264  000C20  6EF7               	movwf	tblptrh,c
  7265  000C22                     	if	0	;There are less than 3 active tblptr bytes
  7266  000C22                     	endif
  7267  000C22  0008               	tblrd		*
  7268  000C24  CFF5 F11D          	movff	tablat,printf@c
  7269                           
  7270                           ; BSR set to: 1
  7271                           ;doprnt.c: 1523: }
  7272                           
  7273                           ;doprnt.c: 1508: }
  7274                           ;doprnt.c: 1510: break;
  7275  000C28  D009               	goto	l4734
  7276  000C2A                     l4732:
  7277                           
  7278                           ; BSR set to: 1
  7279  000C2A  0101               	movlb	1	; () banked
  7280  000C2C  5116               	movf	printf@flag& (0+255),w,b
  7281  000C2E  0B80               	andlw	128
  7282                           
  7283                           ; Switch size 1, requested type "space"
  7284                           ; Number of cases is 2, Range of values is 0 to 128
  7285                           ; switch strategies available:
  7286                           ; Name         Instructions Cycles
  7287                           ; simple_byte            7     4 (average)
  7288                           ;	Chosen strategy is simple_byte
  7289  000C30  0A00               	xorlw	0	; case 0
  7290  000C32  B4D8               	btfsc	status,2,c
  7291  000C34  D77D               	goto	l4724
  7292  000C36  0A80               	xorlw	128	; case 128
  7293  000C38  B4D8               	btfsc	status,2,c
  7294  000C3A  D7BC               	goto	l4726
  7295  000C3C                     l4734:
  7296                           
  7297                           ; BSR set to: 1
  7298                           ;doprnt.c: 1524: (putch(c) );
  7299  000C3C  0101               	movlb	1	; () banked
  7300  000C3E  511D               	movf	printf@c& (0+255),w,b
  7301  000C40  EC12  F01F         	call	_putch
  7302  000C44                     l4736:
  7303  000C44  0101               	movlb	1	; () banked
  7304  000C46  070A               	decf	printf@prec& (0+255),f,b
  7305  000C48  A0D8               	btfss	status,0,c
  7306  000C4A  070B               	decf	(printf@prec+1)& (0+255),f,b
  7307  000C4C  0101               	movlb	1	; () banked
  7308  000C4E  290A               	incf	printf@prec& (0+255),w,b
  7309  000C50  E1EC               	bnz	l4732
  7310  000C52  0101               	movlb	1	; () banked
  7311  000C54  290B               	incf	(printf@prec+1)& (0+255),w,b
  7312  000C56  A4D8               	btfss	status,2,c
  7313  000C58  D7E8               	goto	l4732
  7314  000C5A                     l4738:
  7315  000C5A  C0D5  FFF6         	movff	printf@f,tblptrl
  7316  000C5E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  7317  000C62  0100               	movlb	0	; () banked
  7318  000C64  4BD5               	infsnz	printf@f& (0+255),f,b
  7319  000C66  2BD6               	incf	(printf@f+1)& (0+255),f,b
  7320  000C68                     	if	0	;tblptru may be non-zero
  7321  000C68                     	endif
  7322  000C68                     	if	0	;tblptru may be non-zero
  7323  000C68                     	endif
  7324  000C68  0008               	tblrd		*
  7325  000C6A  CFF5 F11D          	movff	tablat,printf@c
  7326  000C6E  0101               	movlb	1	; () banked
  7327  000C70  511D               	movf	printf@c& (0+255),w,b
  7328  000C72  B4D8               	btfsc	status,2,c
  7329  000C74  0012               	return	
  7330  000C76  EF11  F000         	goto	l4428
  7331  000C7A                     __end_of_printf:
  7332                           	opt stack 0
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           prodh	equ	0xFF4
  7338                           prodl	equ	0xFF3
  7339                           intcon	equ	0xFF2
  7340                           postinc0	equ	0xFEE
  7341                           wreg	equ	0xFE8
  7342                           postdec1	equ	0xFE5
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function _scale *****************
  7352 ;; Defined at:
  7353 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;  scl             1    wreg     char 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  scl             1   54[BANK0 ] char 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  3   48[BANK0 ] char 
  7360 ;; Registers used:
  7361 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7367 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;Total ram usage:        7 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    7
  7374 ;; This function calls:
  7375 ;;		___awdiv
  7376 ;;		___awmod
  7377 ;;		___ftmul
  7378 ;;		___wmul
  7379 ;; This function is called by:
  7380 ;;		_printf
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text24
  7385  000C7A                     __ptext24:
  7386                           	opt stack 0
  7387  000C7A                     _scale:
  7388                           	opt stack 21
  7389                           
  7390                           ;incstack = 0
  7391                           ;scale@scl stored from wreg
  7392  000C7A  0100               	movlb	0	; () banked
  7393  000C7C  6FB6               	movwf	scale@scl& (0+255),b
  7394                           
  7395                           ;doprnt.c: 428: if(scl < 0) {
  7396  000C7E  0100               	movlb	0	; () banked
  7397  000C80  AFB6               	btfss	scale@scl& (0+255),7,b
  7398  000C82  D12A               	goto	l4164
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;doprnt.c: 429: scl = -scl;
  7402  000C84  0100               	movlb	0	; () banked
  7403  000C86  6DB6               	negf	scale@scl& (0+255),b
  7404                           
  7405                           ;doprnt.c: 430: if(scl>=110)
  7406  000C88  0100               	movlb	0	; () banked
  7407  000C8A  51B6               	movf	scale@scl& (0+255),w,b
  7408  000C8C  0A80               	xorlw	128
  7409  000C8E  0F12               	addlw	-238
  7410  000C90  A0D8               	btfss	status,0,c
  7411  000C92  D0AC               	goto	l4154
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7415  000C94  0E00               	movlw	0
  7416  000C96  0100               	movlb	0	; () banked
  7417  000C98  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7418  000C9A  0E03               	movlw	3
  7419  000C9C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7420  000C9E  0E00               	movlw	0
  7421  000CA0  0100               	movlb	0	; () banked
  7422  000CA2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7423  000CA4  0E0A               	movlw	10
  7424  000CA6  6F88               	movwf	___awdiv@divisor& (0+255),b
  7425  000CA8  0E00               	movlw	0
  7426  000CAA  0100               	movlb	0	; () banked
  7427  000CAC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7428  000CAE  0E64               	movlw	100
  7429  000CB0  6F82               	movwf	___awmod@divisor& (0+255),b
  7430  000CB2  0100               	movlb	0	; () banked
  7431  000CB4  51B6               	movf	scale@scl& (0+255),w,b
  7432  000CB6  0100               	movlb	0	; () banked
  7433  000CB8  6F80               	movwf	___awmod@dividend& (0+255),b
  7434  000CBA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7435  000CBC  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7436  000CBE  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7437  000CC0  ECF4  F019         	call	___awmod	;wreg free
  7438  000CC4  C080  F086         	movff	?___awmod,___awdiv@dividend
  7439  000CC8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7440  000CCC  ECDF  F017         	call	___awdiv	;wreg free
  7441  000CD0  0E09               	movlw	9
  7442  000CD2  0100               	movlb	0	; () banked
  7443  000CD4  2586               	addwf	?___awdiv& (0+255),w,b
  7444  000CD6  0100               	movlb	0	; () banked
  7445  000CD8  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7446  000CDA  0E00               	movlw	0
  7447  000CDC  0100               	movlb	0	; () banked
  7448  000CDE  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7449  000CE0  0100               	movlb	0	; () banked
  7450  000CE2  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7451  000CE4  EC59  F01E         	call	___wmul	;wreg free
  7452  000CE8  0EE9               	movlw	low __npowers_
  7453  000CEA  0100               	movlb	0	; () banked
  7454  000CEC  258E               	addwf	?___wmul& (0+255),w,b
  7455  000CEE  6EF6               	movwf	tblptrl,c
  7456  000CF0  0EFD               	movlw	high __npowers_
  7457  000CF2  0100               	movlb	0	; () banked
  7458  000CF4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7459  000CF6  6EF7               	movwf	tblptrh,c
  7460  000CF8                     	if	0	;There are less than 3 active tblptr bytes
  7461  000CF8                     	endif
  7462  000CF8  0009               	tblrd		*+
  7463  000CFA  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7464  000CFE  0009               	tblrd		*+
  7465  000D00  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7466  000D04  000A               	tblrd		*-
  7467  000D06  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7468  000D0A  0E00               	movlw	0
  7469  000D0C  0100               	movlb	0	; () banked
  7470  000D0E  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7471  000D10  0E64               	movlw	100
  7472  000D12  6F88               	movwf	___awdiv@divisor& (0+255),b
  7473  000D14  0100               	movlb	0	; () banked
  7474  000D16  51B6               	movf	scale@scl& (0+255),w,b
  7475  000D18  0100               	movlb	0	; () banked
  7476  000D1A  6F86               	movwf	___awdiv@dividend& (0+255),b
  7477  000D1C  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7478  000D1E  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7479  000D20  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7480  000D22  ECDF  F017         	call	___awdiv	;wreg free
  7481  000D26  0E12               	movlw	18
  7482  000D28  0100               	movlb	0	; () banked
  7483  000D2A  2586               	addwf	?___awdiv& (0+255),w,b
  7484  000D2C  0100               	movlb	0	; () banked
  7485  000D2E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7486  000D30  0E00               	movlw	0
  7487  000D32  0100               	movlb	0	; () banked
  7488  000D34  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7489  000D36  0100               	movlb	0	; () banked
  7490  000D38  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7491  000D3A  0E00               	movlw	0
  7492  000D3C  0100               	movlb	0	; () banked
  7493  000D3E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7494  000D40  0E03               	movlw	3
  7495  000D42  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7496  000D44  EC59  F01E         	call	___wmul	;wreg free
  7497  000D48  0EE9               	movlw	low __npowers_
  7498  000D4A  0100               	movlb	0	; () banked
  7499  000D4C  258E               	addwf	?___wmul& (0+255),w,b
  7500  000D4E  6EF6               	movwf	tblptrl,c
  7501  000D50  0EFD               	movlw	high __npowers_
  7502  000D52  0100               	movlb	0	; () banked
  7503  000D54  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7504  000D56  6EF7               	movwf	tblptrh,c
  7505  000D58                     	if	0	;There are less than 3 active tblptr bytes
  7506  000D58                     	endif
  7507  000D58  0009               	tblrd		*+
  7508  000D5A  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7509  000D5E  0009               	tblrd		*+
  7510  000D60  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7511  000D64  000A               	tblrd		*-
  7512  000D66  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7513  000D6A  ECF3  F010         	call	___ftmul	;wreg free
  7514  000D6E  C0A1  F0B3         	movff	?___ftmul,_scale$1339
  7515  000D72  C0A2  F0B4         	movff	?___ftmul+1,_scale$1339+1
  7516  000D76  C0A3  F0B5         	movff	?___ftmul+2,_scale$1339+2
  7517                           
  7518                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7519  000D7A  C0B3  F0A1         	movff	_scale$1339,___ftmul@f1
  7520  000D7E  C0B4  F0A2         	movff	_scale$1339+1,___ftmul@f1+1
  7521  000D82  C0B5  F0A3         	movff	_scale$1339+2,___ftmul@f1+2
  7522  000D86  0E00               	movlw	0
  7523  000D88  0100               	movlb	0	; () banked
  7524  000D8A  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7525  000D8C  0E03               	movlw	3
  7526  000D8E  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7527  000D90  0E00               	movlw	0
  7528  000D92  0100               	movlb	0	; () banked
  7529  000D94  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7530  000D96  0E0A               	movlw	10
  7531  000D98  6F82               	movwf	___awmod@divisor& (0+255),b
  7532  000D9A  0100               	movlb	0	; () banked
  7533  000D9C  51B6               	movf	scale@scl& (0+255),w,b
  7534  000D9E  0100               	movlb	0	; () banked
  7535  000DA0  6F80               	movwf	___awmod@dividend& (0+255),b
  7536  000DA2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7537  000DA4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7538  000DA6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7539  000DA8  ECF4  F019         	call	___awmod	;wreg free
  7540  000DAC  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7541  000DB0  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7542  000DB4  EC59  F01E         	call	___wmul	;wreg free
  7543  000DB8  0EE9               	movlw	low __npowers_
  7544  000DBA  0100               	movlb	0	; () banked
  7545  000DBC  258E               	addwf	?___wmul& (0+255),w,b
  7546  000DBE  6EF6               	movwf	tblptrl,c
  7547  000DC0  0EFD               	movlw	high __npowers_
  7548  000DC2  0100               	movlb	0	; () banked
  7549  000DC4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7550  000DC6  6EF7               	movwf	tblptrh,c
  7551  000DC8                     	if	0	;There are less than 3 active tblptr bytes
  7552  000DC8                     	endif
  7553  000DC8  0009               	tblrd		*+
  7554  000DCA  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7555  000DCE  0009               	tblrd		*+
  7556  000DD0  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7557  000DD4  000A               	tblrd		*-
  7558  000DD6  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7559  000DDA  ECF3  F010         	call	___ftmul	;wreg free
  7560  000DDE  C0A1  F0B0         	movff	?___ftmul,?_scale
  7561  000DE2  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  7562  000DE6  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  7563  000DEA  0012               	return	
  7564  000DEC                     l4154:
  7565                           
  7566                           ;doprnt.c: 432: else if(scl > 10)
  7567  000DEC  0100               	movlb	0	; () banked
  7568  000DEE  51B6               	movf	scale@scl& (0+255),w,b
  7569  000DF0  0A80               	xorlw	128
  7570  000DF2  0F75               	addlw	-139
  7571  000DF4  A0D8               	btfss	status,0,c
  7572  000DF6  D05D               	goto	l4160
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7576  000DF8  0E00               	movlw	0
  7577  000DFA  0100               	movlb	0	; () banked
  7578  000DFC  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7579  000DFE  0E0A               	movlw	10
  7580  000E00  6F88               	movwf	___awdiv@divisor& (0+255),b
  7581  000E02  0100               	movlb	0	; () banked
  7582  000E04  51B6               	movf	scale@scl& (0+255),w,b
  7583  000E06  0100               	movlb	0	; () banked
  7584  000E08  6F86               	movwf	___awdiv@dividend& (0+255),b
  7585  000E0A  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7586  000E0C  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7587  000E0E  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7588  000E10  ECDF  F017         	call	___awdiv	;wreg free
  7589  000E14  0E09               	movlw	9
  7590  000E16  0100               	movlb	0	; () banked
  7591  000E18  2586               	addwf	?___awdiv& (0+255),w,b
  7592  000E1A  0100               	movlb	0	; () banked
  7593  000E1C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7594  000E1E  0E00               	movlw	0
  7595  000E20  0100               	movlb	0	; () banked
  7596  000E22  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7597  000E24  0100               	movlb	0	; () banked
  7598  000E26  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7599  000E28  0E00               	movlw	0
  7600  000E2A  0100               	movlb	0	; () banked
  7601  000E2C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7602  000E2E  0E03               	movlw	3
  7603  000E30  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7604  000E32  EC59  F01E         	call	___wmul	;wreg free
  7605  000E36  0EE9               	movlw	low __npowers_
  7606  000E38  0100               	movlb	0	; () banked
  7607  000E3A  258E               	addwf	?___wmul& (0+255),w,b
  7608  000E3C  6EF6               	movwf	tblptrl,c
  7609  000E3E  0EFD               	movlw	high __npowers_
  7610  000E40  0100               	movlb	0	; () banked
  7611  000E42  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7612  000E44  6EF7               	movwf	tblptrh,c
  7613  000E46                     	if	0	;There are less than 3 active tblptr bytes
  7614  000E46                     	endif
  7615  000E46  0009               	tblrd		*+
  7616  000E48  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7617  000E4C  0009               	tblrd		*+
  7618  000E4E  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7619  000E52  000A               	tblrd		*-
  7620  000E54  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7621  000E58  0E00               	movlw	0
  7622  000E5A  0100               	movlb	0	; () banked
  7623  000E5C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7624  000E5E  0E03               	movlw	3
  7625  000E60  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7626  000E62  0E00               	movlw	0
  7627  000E64  0100               	movlb	0	; () banked
  7628  000E66  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7629  000E68  0E0A               	movlw	10
  7630  000E6A  6F82               	movwf	___awmod@divisor& (0+255),b
  7631  000E6C  0100               	movlb	0	; () banked
  7632  000E6E  51B6               	movf	scale@scl& (0+255),w,b
  7633  000E70  0100               	movlb	0	; () banked
  7634  000E72  6F80               	movwf	___awmod@dividend& (0+255),b
  7635  000E74  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7636  000E76  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7637  000E78  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7638  000E7A  ECF4  F019         	call	___awmod	;wreg free
  7639  000E7E  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7640  000E82  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7641  000E86  EC59  F01E         	call	___wmul	;wreg free
  7642  000E8A  0EE9               	movlw	low __npowers_
  7643  000E8C  0100               	movlb	0	; () banked
  7644  000E8E  258E               	addwf	?___wmul& (0+255),w,b
  7645  000E90  6EF6               	movwf	tblptrl,c
  7646  000E92  0EFD               	movlw	high __npowers_
  7647  000E94  0100               	movlb	0	; () banked
  7648  000E96  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7649  000E98  6EF7               	movwf	tblptrh,c
  7650  000E9A                     	if	0	;There are less than 3 active tblptr bytes
  7651  000E9A                     	endif
  7652  000E9A  0009               	tblrd		*+
  7653  000E9C  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7654  000EA0  0009               	tblrd		*+
  7655  000EA2  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7656  000EA6  000A               	tblrd		*-
  7657  000EA8  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7658  000EAC  ECF3  F010         	call	___ftmul	;wreg free
  7659  000EB0  D796               	goto	L2
  7660  000EB2                     l4160:
  7661                           
  7662                           ;doprnt.c: 434: return _npowers_[scl];
  7663  000EB2  0100               	movlb	0	; () banked
  7664  000EB4  51B6               	movf	scale@scl& (0+255),w,b
  7665  000EB6  0D03               	mullw	3
  7666  000EB8  0EE9               	movlw	low __npowers_
  7667  000EBA  24F3               	addwf	prodl,w,c
  7668  000EBC  6EF6               	movwf	tblptrl,c
  7669  000EBE  0EFD               	movlw	high __npowers_
  7670  000EC0  20F4               	addwfc	prodh,w,c
  7671  000EC2  6EF7               	movwf	tblptrh,c
  7672  000EC4                     	if	0	;There are less than 3 active tblptr bytes
  7673  000EC4                     	endif
  7674  000EC4  0009               	tblrd		*+
  7675  000EC6  CFF5 F0B0          	movff	tablat,?_scale
  7676  000ECA  0009               	tblrd		*+
  7677  000ECC  CFF5 F0B1          	movff	tablat,?_scale+1
  7678  000ED0  000A               	tblrd		*-
  7679  000ED2  CFF5 F0B2          	movff	tablat,?_scale+2
  7680                           
  7681                           ; BSR set to: 0
  7682  000ED6  0012               	return	
  7683  000ED8                     l4164:
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;doprnt.c: 435: }
  7687                           ;doprnt.c: 436: if(scl>=110)
  7688  000ED8  0100               	movlb	0	; () banked
  7689  000EDA  51B6               	movf	scale@scl& (0+255),w,b
  7690  000EDC  0A80               	xorlw	128
  7691  000EDE  0F12               	addlw	-238
  7692  000EE0  A0D8               	btfss	status,0,c
  7693  000EE2  D0AC               	goto	l4172
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7697  000EE4  0E00               	movlw	0
  7698  000EE6  0100               	movlb	0	; () banked
  7699  000EE8  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7700  000EEA  0E03               	movlw	3
  7701  000EEC  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7702  000EEE  0E00               	movlw	0
  7703  000EF0  0100               	movlb	0	; () banked
  7704  000EF2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7705  000EF4  0E0A               	movlw	10
  7706  000EF6  6F88               	movwf	___awdiv@divisor& (0+255),b
  7707  000EF8  0E00               	movlw	0
  7708  000EFA  0100               	movlb	0	; () banked
  7709  000EFC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7710  000EFE  0E64               	movlw	100
  7711  000F00  6F82               	movwf	___awmod@divisor& (0+255),b
  7712  000F02  0100               	movlb	0	; () banked
  7713  000F04  51B6               	movf	scale@scl& (0+255),w,b
  7714  000F06  0100               	movlb	0	; () banked
  7715  000F08  6F80               	movwf	___awmod@dividend& (0+255),b
  7716  000F0A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7717  000F0C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7718  000F0E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7719  000F10  ECF4  F019         	call	___awmod	;wreg free
  7720  000F14  C080  F086         	movff	?___awmod,___awdiv@dividend
  7721  000F18  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7722  000F1C  ECDF  F017         	call	___awdiv	;wreg free
  7723  000F20  0E09               	movlw	9
  7724  000F22  0100               	movlb	0	; () banked
  7725  000F24  2586               	addwf	?___awdiv& (0+255),w,b
  7726  000F26  0100               	movlb	0	; () banked
  7727  000F28  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7728  000F2A  0E00               	movlw	0
  7729  000F2C  0100               	movlb	0	; () banked
  7730  000F2E  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7731  000F30  0100               	movlb	0	; () banked
  7732  000F32  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7733  000F34  EC59  F01E         	call	___wmul	;wreg free
  7734  000F38  0E10               	movlw	low __powers_
  7735  000F3A  0100               	movlb	0	; () banked
  7736  000F3C  258E               	addwf	?___wmul& (0+255),w,b
  7737  000F3E  6EF6               	movwf	tblptrl,c
  7738  000F40  0EFE               	movlw	high __powers_
  7739  000F42  0100               	movlb	0	; () banked
  7740  000F44  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7741  000F46  6EF7               	movwf	tblptrh,c
  7742  000F48                     	if	0	;There are less than 3 active tblptr bytes
  7743  000F48                     	endif
  7744  000F48  0009               	tblrd		*+
  7745  000F4A  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7746  000F4E  0009               	tblrd		*+
  7747  000F50  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7748  000F54  000A               	tblrd		*-
  7749  000F56  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7750  000F5A  0E00               	movlw	0
  7751  000F5C  0100               	movlb	0	; () banked
  7752  000F5E  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7753  000F60  0E64               	movlw	100
  7754  000F62  6F88               	movwf	___awdiv@divisor& (0+255),b
  7755  000F64  0100               	movlb	0	; () banked
  7756  000F66  51B6               	movf	scale@scl& (0+255),w,b
  7757  000F68  0100               	movlb	0	; () banked
  7758  000F6A  6F86               	movwf	___awdiv@dividend& (0+255),b
  7759  000F6C  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7760  000F6E  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7761  000F70  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7762  000F72  ECDF  F017         	call	___awdiv	;wreg free
  7763  000F76  0E12               	movlw	18
  7764  000F78  0100               	movlb	0	; () banked
  7765  000F7A  2586               	addwf	?___awdiv& (0+255),w,b
  7766  000F7C  0100               	movlb	0	; () banked
  7767  000F7E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7768  000F80  0E00               	movlw	0
  7769  000F82  0100               	movlb	0	; () banked
  7770  000F84  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7771  000F86  0100               	movlb	0	; () banked
  7772  000F88  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7773  000F8A  0E00               	movlw	0
  7774  000F8C  0100               	movlb	0	; () banked
  7775  000F8E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7776  000F90  0E03               	movlw	3
  7777  000F92  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7778  000F94  EC59  F01E         	call	___wmul	;wreg free
  7779  000F98  0E10               	movlw	low __powers_
  7780  000F9A  0100               	movlb	0	; () banked
  7781  000F9C  258E               	addwf	?___wmul& (0+255),w,b
  7782  000F9E  6EF6               	movwf	tblptrl,c
  7783  000FA0  0EFE               	movlw	high __powers_
  7784  000FA2  0100               	movlb	0	; () banked
  7785  000FA4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7786  000FA6  6EF7               	movwf	tblptrh,c
  7787  000FA8                     	if	0	;There are less than 3 active tblptr bytes
  7788  000FA8                     	endif
  7789  000FA8  0009               	tblrd		*+
  7790  000FAA  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7791  000FAE  0009               	tblrd		*+
  7792  000FB0  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7793  000FB4  000A               	tblrd		*-
  7794  000FB6  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7795  000FBA  ECF3  F010         	call	___ftmul	;wreg free
  7796  000FBE  C0A1  F0B3         	movff	?___ftmul,_scale$1339
  7797  000FC2  C0A2  F0B4         	movff	?___ftmul+1,_scale$1339+1
  7798  000FC6  C0A3  F0B5         	movff	?___ftmul+2,_scale$1339+2
  7799                           
  7800                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7801  000FCA  C0B3  F0A1         	movff	_scale$1339,___ftmul@f1
  7802  000FCE  C0B4  F0A2         	movff	_scale$1339+1,___ftmul@f1+1
  7803  000FD2  C0B5  F0A3         	movff	_scale$1339+2,___ftmul@f1+2
  7804  000FD6  0E00               	movlw	0
  7805  000FD8  0100               	movlb	0	; () banked
  7806  000FDA  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7807  000FDC  0E03               	movlw	3
  7808  000FDE  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7809  000FE0  0E00               	movlw	0
  7810  000FE2  0100               	movlb	0	; () banked
  7811  000FE4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7812  000FE6  0E0A               	movlw	10
  7813  000FE8  6F82               	movwf	___awmod@divisor& (0+255),b
  7814  000FEA  0100               	movlb	0	; () banked
  7815  000FEC  51B6               	movf	scale@scl& (0+255),w,b
  7816  000FEE  0100               	movlb	0	; () banked
  7817  000FF0  6F80               	movwf	___awmod@dividend& (0+255),b
  7818  000FF2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7819  000FF4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7820  000FF6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7821  000FF8  ECF4  F019         	call	___awmod	;wreg free
  7822  000FFC  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7823  001000  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7824  001004  EC59  F01E         	call	___wmul	;wreg free
  7825  001008  0E10               	movlw	low __powers_
  7826  00100A  0100               	movlb	0	; () banked
  7827  00100C  258E               	addwf	?___wmul& (0+255),w,b
  7828  00100E  6EF6               	movwf	tblptrl,c
  7829  001010  0EFE               	movlw	high __powers_
  7830  001012  0100               	movlb	0	; () banked
  7831  001014  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7832  001016  6EF7               	movwf	tblptrh,c
  7833  001018                     	if	0	;There are less than 3 active tblptr bytes
  7834  001018                     	endif
  7835  001018  0009               	tblrd		*+
  7836  00101A  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7837  00101E  0009               	tblrd		*+
  7838  001020  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7839  001024  000A               	tblrd		*-
  7840  001026  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7841  00102A  ECF3  F010         	call	___ftmul	;wreg free
  7842  00102E  C0A1  F0B0         	movff	?___ftmul,?_scale
  7843  001032  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  7844  001036  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  7845  00103A  0012               	return	
  7846  00103C                     l4172:
  7847                           
  7848                           ;doprnt.c: 438: else if(scl > 10)
  7849  00103C  0100               	movlb	0	; () banked
  7850  00103E  51B6               	movf	scale@scl& (0+255),w,b
  7851  001040  0A80               	xorlw	128
  7852  001042  0F75               	addlw	-139
  7853  001044  A0D8               	btfss	status,0,c
  7854  001046  D05D               	goto	l4178
  7855                           
  7856                           ; BSR set to: 0
  7857                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7858  001048  0E00               	movlw	0
  7859  00104A  0100               	movlb	0	; () banked
  7860  00104C  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7861  00104E  0E0A               	movlw	10
  7862  001050  6F88               	movwf	___awdiv@divisor& (0+255),b
  7863  001052  0100               	movlb	0	; () banked
  7864  001054  51B6               	movf	scale@scl& (0+255),w,b
  7865  001056  0100               	movlb	0	; () banked
  7866  001058  6F86               	movwf	___awdiv@dividend& (0+255),b
  7867  00105A  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7868  00105C  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7869  00105E  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7870  001060  ECDF  F017         	call	___awdiv	;wreg free
  7871  001064  0E09               	movlw	9
  7872  001066  0100               	movlb	0	; () banked
  7873  001068  2586               	addwf	?___awdiv& (0+255),w,b
  7874  00106A  0100               	movlb	0	; () banked
  7875  00106C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7876  00106E  0E00               	movlw	0
  7877  001070  0100               	movlb	0	; () banked
  7878  001072  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7879  001074  0100               	movlb	0	; () banked
  7880  001076  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7881  001078  0E00               	movlw	0
  7882  00107A  0100               	movlb	0	; () banked
  7883  00107C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7884  00107E  0E03               	movlw	3
  7885  001080  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7886  001082  EC59  F01E         	call	___wmul	;wreg free
  7887  001086  0E10               	movlw	low __powers_
  7888  001088  0100               	movlb	0	; () banked
  7889  00108A  258E               	addwf	?___wmul& (0+255),w,b
  7890  00108C  6EF6               	movwf	tblptrl,c
  7891  00108E  0EFE               	movlw	high __powers_
  7892  001090  0100               	movlb	0	; () banked
  7893  001092  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7894  001094  6EF7               	movwf	tblptrh,c
  7895  001096                     	if	0	;There are less than 3 active tblptr bytes
  7896  001096                     	endif
  7897  001096  0009               	tblrd		*+
  7898  001098  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7899  00109C  0009               	tblrd		*+
  7900  00109E  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7901  0010A2  000A               	tblrd		*-
  7902  0010A4  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7903  0010A8  0E00               	movlw	0
  7904  0010AA  0100               	movlb	0	; () banked
  7905  0010AC  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7906  0010AE  0E03               	movlw	3
  7907  0010B0  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7908  0010B2  0E00               	movlw	0
  7909  0010B4  0100               	movlb	0	; () banked
  7910  0010B6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7911  0010B8  0E0A               	movlw	10
  7912  0010BA  6F82               	movwf	___awmod@divisor& (0+255),b
  7913  0010BC  0100               	movlb	0	; () banked
  7914  0010BE  51B6               	movf	scale@scl& (0+255),w,b
  7915  0010C0  0100               	movlb	0	; () banked
  7916  0010C2  6F80               	movwf	___awmod@dividend& (0+255),b
  7917  0010C4  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7918  0010C6  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7919  0010C8  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7920  0010CA  ECF4  F019         	call	___awmod	;wreg free
  7921  0010CE  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7922  0010D2  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7923  0010D6  EC59  F01E         	call	___wmul	;wreg free
  7924  0010DA  0E10               	movlw	low __powers_
  7925  0010DC  0100               	movlb	0	; () banked
  7926  0010DE  258E               	addwf	?___wmul& (0+255),w,b
  7927  0010E0  6EF6               	movwf	tblptrl,c
  7928  0010E2  0EFE               	movlw	high __powers_
  7929  0010E4  0100               	movlb	0	; () banked
  7930  0010E6  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7931  0010E8  6EF7               	movwf	tblptrh,c
  7932  0010EA                     	if	0	;There are less than 3 active tblptr bytes
  7933  0010EA                     	endif
  7934  0010EA  0009               	tblrd		*+
  7935  0010EC  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7936  0010F0  0009               	tblrd		*+
  7937  0010F2  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7938  0010F6  000A               	tblrd		*-
  7939  0010F8  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7940  0010FC  ECF3  F010         	call	___ftmul	;wreg free
  7941  001100  D796               	goto	L3
  7942  001102                     l4178:
  7943                           
  7944                           ;doprnt.c: 440: return _powers_[scl];
  7945  001102  0100               	movlb	0	; () banked
  7946  001104  51B6               	movf	scale@scl& (0+255),w,b
  7947  001106  0D03               	mullw	3
  7948  001108  0E10               	movlw	low __powers_
  7949  00110A  24F3               	addwf	prodl,w,c
  7950  00110C  6EF6               	movwf	tblptrl,c
  7951  00110E  0EFE               	movlw	high __powers_
  7952  001110  20F4               	addwfc	prodh,w,c
  7953  001112  6EF7               	movwf	tblptrh,c
  7954  001114                     	if	0	;There are less than 3 active tblptr bytes
  7955  001114                     	endif
  7956  001114  0009               	tblrd		*+
  7957  001116  CFF5 F0B0          	movff	tablat,?_scale
  7958  00111A  0009               	tblrd		*+
  7959  00111C  CFF5 F0B1          	movff	tablat,?_scale+1
  7960  001120  000A               	tblrd		*-
  7961  001122  CFF5 F0B2          	movff	tablat,?_scale+2
  7962  001126  0012               	return	
  7963  001128                     __end_of_scale:
  7964                           	opt stack 0
  7965                           tblptru	equ	0xFF8
  7966                           tblptrh	equ	0xFF7
  7967                           tblptrl	equ	0xFF6
  7968                           tablat	equ	0xFF5
  7969                           prodh	equ	0xFF4
  7970                           prodl	equ	0xFF3
  7971                           intcon	equ	0xFF2
  7972                           postinc0	equ	0xFEE
  7973                           wreg	equ	0xFE8
  7974                           postdec1	equ	0xFE5
  7975                           fsr1l	equ	0xFE1
  7976                           indf2	equ	0xFDF
  7977                           postinc2	equ	0xFDE
  7978                           postdec2	equ	0xFDD
  7979                           fsr2h	equ	0xFDA
  7980                           fsr2l	equ	0xFD9
  7981                           status	equ	0xFD8
  7982                           
  7983 ;; *************** function _putch *****************
  7984 ;; Defined at:
  7985 ;;		line 35 in file "lcd.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  data            1    wreg     unsigned char 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;  data            1    4[BANK0 ] unsigned char 
  7990 ;; Return value:  Size  Location     Type
  7991 ;;                  1    wreg      void 
  7992 ;; Registers used:
  7993 ;;		wreg, status,2, status,0, cstack
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;Total ram usage:        1 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; Hardware stack levels required when called:    8
  8006 ;; This function calls:
  8007 ;;		_lcdNewline
  8008 ;;		_lcdNibble
  8009 ;; This function is called by:
  8010 ;;		_printf
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text25
  8015  003E24                     __ptext25:
  8016                           	opt stack 0
  8017  003E24                     _putch:
  8018                           	opt stack 20
  8019                           
  8020                           ;incstack = 0
  8021                           ;putch@data stored from wreg
  8022  003E24  0100               	movlb	0	; () banked
  8023  003E26  6F84               	movwf	putch@data& (0+255),b
  8024                           
  8025                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  8026  003E28  0E0A               	movlw	10
  8027  003E2A  0100               	movlb	0	; () banked
  8028  003E2C  1984               	xorwf	putch@data& (0+255),w,b
  8029  003E2E  A4D8               	btfss	status,2,c
  8030  003E30  D003               	goto	l184
  8031                           
  8032                           ; BSR set to: 0
  8033  003E32  ECAB  F01F         	call	_lcdNewline	;wreg free
  8034  003E36  0012               	return	
  8035  003E38                     l184:
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;lcd.c: 37: else
  8039                           ;lcd.c: 38: {
  8040                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  8041  003E38  848C               	bsf	3980,2,c	;volatile
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  8045  003E3A  0E74               	movlw	116
  8046  003E3C                     u5907:
  8047  003E3C  2EE8               	decfsz	wreg,f,c
  8048  003E3E  D7FE               	bra	u5907
  8049  003E40  D000               	nop2	
  8050                           
  8051                           ;lcd.c: 41: lcdNibble(data);
  8052  003E42  0100               	movlb	0	; () banked
  8053  003E44  5184               	movf	putch@data& (0+255),w,b
  8054  003E46  ECF3  F01B         	call	_lcdNibble
  8055  003E4A  0012               	return	
  8056  003E4C                     __end_of_putch:
  8057                           	opt stack 0
  8058                           tblptru	equ	0xFF8
  8059                           tblptrh	equ	0xFF7
  8060                           tblptrl	equ	0xFF6
  8061                           tablat	equ	0xFF5
  8062                           prodh	equ	0xFF4
  8063                           prodl	equ	0xFF3
  8064                           intcon	equ	0xFF2
  8065                           postinc0	equ	0xFEE
  8066                           wreg	equ	0xFE8
  8067                           postdec1	equ	0xFE5
  8068                           fsr1l	equ	0xFE1
  8069                           indf2	equ	0xFDF
  8070                           postinc2	equ	0xFDE
  8071                           postdec2	equ	0xFDD
  8072                           fsr2h	equ	0xFDA
  8073                           fsr2l	equ	0xFD9
  8074                           status	equ	0xFD8
  8075                           
  8076 ;; *************** function _lcdNewline *****************
  8077 ;; Defined at:
  8078 ;;		line 78 in file "lcd.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;		None
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;		None
  8083 ;; Return value:  Size  Location     Type
  8084 ;;                  1    wreg      void 
  8085 ;; Registers used:
  8086 ;;		wreg, status,2, status,0, cstack
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;Total ram usage:        0 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    7
  8099 ;; This function calls:
  8100 ;;		_lcdInst
  8101 ;; This function is called by:
  8102 ;;		_putch
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text26
  8107  003F56                     __ptext26:
  8108                           	opt stack 0
  8109  003F56                     _lcdNewline:
  8110                           	opt stack 20
  8111                           
  8112                           ;lcd.c: 79: lcdInst(0b11000000);
  8113                           
  8114                           ;incstack = 0
  8115  003F56  0EC0               	movlw	192
  8116  003F58  ECFD  F01E         	call	_lcdInst
  8117  003F5C  0012               	return		;funcret
  8118  003F5E                     __end_of_lcdNewline:
  8119                           	opt stack 0
  8120                           tblptru	equ	0xFF8
  8121                           tblptrh	equ	0xFF7
  8122                           tblptrl	equ	0xFF6
  8123                           tablat	equ	0xFF5
  8124                           prodh	equ	0xFF4
  8125                           prodl	equ	0xFF3
  8126                           intcon	equ	0xFF2
  8127                           postinc0	equ	0xFEE
  8128                           wreg	equ	0xFE8
  8129                           postdec1	equ	0xFE5
  8130                           fsr1l	equ	0xFE1
  8131                           indf2	equ	0xFDF
  8132                           postinc2	equ	0xFDE
  8133                           postdec2	equ	0xFDD
  8134                           fsr2h	equ	0xFDA
  8135                           fsr2l	equ	0xFD9
  8136                           status	equ	0xFD8
  8137                           
  8138 ;; *************** function _isdigit *****************
  8139 ;; Defined at:
  8140 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;  c               1    wreg     unsigned char 
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  c               1    2[BANK0 ] unsigned char 
  8145 ;; Return value:  Size  Location     Type
  8146 ;;		None               void
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8157 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;Total ram usage:        3 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    5
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_printf
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text27
  8169  003DD0                     __ptext27:
  8170                           	opt stack 0
  8171  003DD0                     _isdigit:
  8172                           	opt stack 23
  8173                           
  8174                           ;incstack = 0
  8175                           ;isdigit@c stored from wreg
  8176  003DD0  0100               	movlb	0	; () banked
  8177  003DD2  6F82               	movwf	isdigit@c& (0+255),b
  8178  003DD4  0E00               	movlw	0
  8179  003DD6  0100               	movlb	0	; () banked
  8180  003DD8  6F81               	movwf	_isdigit$973& (0+255),b
  8181                           
  8182                           ; BSR set to: 0
  8183  003DDA  0E3A               	movlw	58
  8184  003DDC  0100               	movlb	0	; () banked
  8185  003DDE  6182               	cpfslt	isdigit@c& (0+255),b
  8186  003DE0  D007               	goto	l4190
  8187                           
  8188                           ; BSR set to: 0
  8189  003DE2  0E2F               	movlw	47
  8190  003DE4  0100               	movlb	0	; () banked
  8191  003DE6  6582               	cpfsgt	isdigit@c& (0+255),b
  8192  003DE8  D003               	goto	l4190
  8193                           
  8194                           ; BSR set to: 0
  8195  003DEA  0E01               	movlw	1
  8196  003DEC  0100               	movlb	0	; () banked
  8197  003DEE  6F81               	movwf	_isdigit$973& (0+255),b
  8198  003DF0                     l4190:
  8199                           
  8200                           ; BSR set to: 0
  8201  003DF0  C081  F080         	movff	_isdigit$973,??_isdigit
  8202  003DF4  0100               	movlb	0	; () banked
  8203  003DF6  3180               	rrcf	??_isdigit& (0+255),w,b
  8204  003DF8  0012               	return	
  8205  003DFA                     __end_of_isdigit:
  8206                           	opt stack 0
  8207                           tblptru	equ	0xFF8
  8208                           tblptrh	equ	0xFF7
  8209                           tblptrl	equ	0xFF6
  8210                           tablat	equ	0xFF5
  8211                           prodh	equ	0xFF4
  8212                           prodl	equ	0xFF3
  8213                           intcon	equ	0xFF2
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           postdec1	equ	0xFE5
  8217                           fsr1l	equ	0xFE1
  8218                           indf2	equ	0xFDF
  8219                           postinc2	equ	0xFDE
  8220                           postdec2	equ	0xFDD
  8221                           fsr2h	equ	0xFDA
  8222                           fsr2l	equ	0xFD9
  8223                           status	equ	0xFD8
  8224                           
  8225 ;; *************** function _fround *****************
  8226 ;; Defined at:
  8227 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  prec            1    wreg     unsigned char 
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;  prec            1   57[BANK0 ] unsigned char 
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  3   48[BANK0 ] unsigned char 
  8234 ;; Registers used:
  8235 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8241 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;Total ram usage:       10 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:    7
  8248 ;; This function calls:
  8249 ;;		___awdiv
  8250 ;;		___awmod
  8251 ;;		___ftmul
  8252 ;;		___wmul
  8253 ;; This function is called by:
  8254 ;;		_printf
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           	psect	text28
  8259  0014C6                     __ptext28:
  8260                           	opt stack 0
  8261  0014C6                     _fround:
  8262                           	opt stack 21
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;incstack = 0
  8266                           ;fround@prec stored from wreg
  8267  0014C6  0100               	movlb	0	; () banked
  8268  0014C8  6FB9               	movwf	fround@prec& (0+255),b
  8269                           
  8270                           ;doprnt.c: 413: if(prec>=110)
  8271  0014CA  0E6D               	movlw	109
  8272  0014CC  0100               	movlb	0	; () banked
  8273  0014CE  65B9               	cpfsgt	fround@prec& (0+255),b
  8274  0014D0  D0BA               	goto	l4132
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8278  0014D2  0E00               	movlw	0
  8279  0014D4  0100               	movlb	0	; () banked
  8280  0014D6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8281  0014D8  0E03               	movlw	3
  8282  0014DA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8283  0014DC  0E00               	movlw	0
  8284  0014DE  0100               	movlb	0	; () banked
  8285  0014E0  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8286  0014E2  0E0A               	movlw	10
  8287  0014E4  6F88               	movwf	___awdiv@divisor& (0+255),b
  8288  0014E6  0E00               	movlw	0
  8289  0014E8  0100               	movlb	0	; () banked
  8290  0014EA  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8291  0014EC  0E64               	movlw	100
  8292  0014EE  6F82               	movwf	___awmod@divisor& (0+255),b
  8293  0014F0  C0B9  F080         	movff	fround@prec,___awmod@dividend
  8294  0014F4  0100               	movlb	0	; () banked
  8295  0014F6  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  8296  0014F8  ECF4  F019         	call	___awmod	;wreg free
  8297  0014FC  C080  F086         	movff	?___awmod,___awdiv@dividend
  8298  001500  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8299  001504  ECDF  F017         	call	___awdiv	;wreg free
  8300  001508  0E09               	movlw	9
  8301  00150A  0100               	movlb	0	; () banked
  8302  00150C  2586               	addwf	?___awdiv& (0+255),w,b
  8303  00150E  0100               	movlb	0	; () banked
  8304  001510  6F8E               	movwf	___wmul@multiplier& (0+255),b
  8305  001512  0E00               	movlw	0
  8306  001514  0100               	movlb	0	; () banked
  8307  001516  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  8308  001518  0100               	movlb	0	; () banked
  8309  00151A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8310  00151C  EC59  F01E         	call	___wmul	;wreg free
  8311  001520  0EE9               	movlw	low __npowers_
  8312  001522  0100               	movlb	0	; () banked
  8313  001524  258E               	addwf	?___wmul& (0+255),w,b
  8314  001526  6EF6               	movwf	tblptrl,c
  8315  001528  0EFD               	movlw	high __npowers_
  8316  00152A  0100               	movlb	0	; () banked
  8317  00152C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8318  00152E  6EF7               	movwf	tblptrh,c
  8319  001530                     	if	0	;There are less than 3 active tblptr bytes
  8320  001530                     	endif
  8321  001530  0009               	tblrd		*+
  8322  001532  CFF5 F0A4          	movff	tablat,___ftmul@f2
  8323  001536  0009               	tblrd		*+
  8324  001538  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  8325  00153C  000A               	tblrd		*-
  8326  00153E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  8327  001542  0E00               	movlw	0
  8328  001544  0100               	movlb	0	; () banked
  8329  001546  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8330  001548  0E64               	movlw	100
  8331  00154A  6F88               	movwf	___awdiv@divisor& (0+255),b
  8332  00154C  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  8333  001550  0100               	movlb	0	; () banked
  8334  001552  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  8335  001554  ECDF  F017         	call	___awdiv	;wreg free
  8336  001558  0E12               	movlw	18
  8337  00155A  0100               	movlb	0	; () banked
  8338  00155C  2586               	addwf	?___awdiv& (0+255),w,b
  8339  00155E  0100               	movlb	0	; () banked
  8340  001560  6F8E               	movwf	___wmul@multiplier& (0+255),b
  8341  001562  0E00               	movlw	0
  8342  001564  0100               	movlb	0	; () banked
  8343  001566  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  8344  001568  0100               	movlb	0	; () banked
  8345  00156A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8346  00156C  0E00               	movlw	0
  8347  00156E  0100               	movlb	0	; () banked
  8348  001570  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8349  001572  0E03               	movlw	3
  8350  001574  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8351  001576  EC59  F01E         	call	___wmul	;wreg free
  8352  00157A  0EE9               	movlw	low __npowers_
  8353  00157C  0100               	movlb	0	; () banked
  8354  00157E  258E               	addwf	?___wmul& (0+255),w,b
  8355  001580  6EF6               	movwf	tblptrl,c
  8356  001582  0EFD               	movlw	high __npowers_
  8357  001584  0100               	movlb	0	; () banked
  8358  001586  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8359  001588  6EF7               	movwf	tblptrh,c
  8360  00158A                     	if	0	;There are less than 3 active tblptr bytes
  8361  00158A                     	endif
  8362  00158A  0009               	tblrd		*+
  8363  00158C  CFF5 F0A1          	movff	tablat,___ftmul@f1
  8364  001590  0009               	tblrd		*+
  8365  001592  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  8366  001596  000A               	tblrd		*-
  8367  001598  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  8368  00159C  ECF3  F010         	call	___ftmul	;wreg free
  8369  0015A0  C0A1  F0B6         	movff	?___ftmul,_fround$1337
  8370  0015A4  C0A2  F0B7         	movff	?___ftmul+1,_fround$1337+1
  8371  0015A8  C0A3  F0B8         	movff	?___ftmul+2,_fround$1337+2
  8372                           
  8373                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8374  0015AC  0E00               	movlw	0
  8375  0015AE  0100               	movlb	0	; () banked
  8376  0015B0  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8377  0015B2  0E03               	movlw	3
  8378  0015B4  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8379  0015B6  0E00               	movlw	0
  8380  0015B8  0100               	movlb	0	; () banked
  8381  0015BA  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8382  0015BC  0E0A               	movlw	10
  8383  0015BE  6F82               	movwf	___awmod@divisor& (0+255),b
  8384  0015C0  C0B9  F080         	movff	fround@prec,___awmod@dividend
  8385  0015C4  0100               	movlb	0	; () banked
  8386  0015C6  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  8387  0015C8  ECF4  F019         	call	___awmod	;wreg free
  8388  0015CC  C080  F08E         	movff	?___awmod,___wmul@multiplier
  8389  0015D0  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  8390  0015D4  EC59  F01E         	call	___wmul	;wreg free
  8391  0015D8  0EE9               	movlw	low __npowers_
  8392  0015DA  0100               	movlb	0	; () banked
  8393  0015DC  258E               	addwf	?___wmul& (0+255),w,b
  8394  0015DE  6EF6               	movwf	tblptrl,c
  8395  0015E0  0EFD               	movlw	high __npowers_
  8396  0015E2  0100               	movlb	0	; () banked
  8397  0015E4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8398  0015E6  6EF7               	movwf	tblptrh,c
  8399  0015E8                     	if	0	;There are less than 3 active tblptr bytes
  8400  0015E8                     	endif
  8401  0015E8  0009               	tblrd		*+
  8402  0015EA  CFF5 F0A4          	movff	tablat,___ftmul@f2
  8403  0015EE  0009               	tblrd		*+
  8404  0015F0  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  8405  0015F4  000A               	tblrd		*-
  8406  0015F6  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  8407  0015FA  C0B6  F0A1         	movff	_fround$1337,___ftmul@f1
  8408  0015FE  C0B7  F0A2         	movff	_fround$1337+1,___ftmul@f1+1
  8409  001602  C0B8  F0A3         	movff	_fround$1337+2,___ftmul@f1+2
  8410  001606  ECF3  F010         	call	___ftmul	;wreg free
  8411  00160A  C0A1  F0B3         	movff	?___ftmul,_fround$1338
  8412  00160E  C0A2  F0B4         	movff	?___ftmul+1,_fround$1338+1
  8413  001612  C0A3  F0B5         	movff	?___ftmul+2,_fround$1338+2
  8414                           
  8415                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8416  001616  C0B3  F0A1         	movff	_fround$1338,___ftmul@f1
  8417  00161A  C0B4  F0A2         	movff	_fround$1338+1,___ftmul@f1+1
  8418  00161E  C0B5  F0A3         	movff	_fround$1338+2,___ftmul@f1+2
  8419  001622  0E00               	movlw	0
  8420  001624  0100               	movlb	0	; () banked
  8421  001626  6FA4               	movwf	___ftmul@f2& (0+255),b
  8422  001628  0E00               	movlw	0
  8423  00162A  0100               	movlb	0	; () banked
  8424  00162C  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  8425  00162E  0E3F               	movlw	63
  8426  001630  0100               	movlb	0	; () banked
  8427  001632  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  8428  001634  ECF3  F010         	call	___ftmul	;wreg free
  8429  001638  C0A1  F0B0         	movff	?___ftmul,?_fround
  8430  00163C  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  8431  001640  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  8432  001644  0012               	return	
  8433  001646                     l4132:
  8434                           
  8435                           ;doprnt.c: 415: else if(prec > 10)
  8436  001646  0E0A               	movlw	10
  8437  001648  0100               	movlb	0	; () banked
  8438  00164A  65B9               	cpfsgt	fround@prec& (0+255),b
  8439  00164C  D06E               	goto	l4140
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8443  00164E  0E00               	movlw	0
  8444  001650  0100               	movlb	0	; () banked
  8445  001652  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8446  001654  0E03               	movlw	3
  8447  001656  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8448  001658  0E00               	movlw	0
  8449  00165A  0100               	movlb	0	; () banked
  8450  00165C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8451  00165E  0E0A               	movlw	10
  8452  001660  6F82               	movwf	___awmod@divisor& (0+255),b
  8453  001662  C0B9  F080         	movff	fround@prec,___awmod@dividend
  8454  001666  0100               	movlb	0	; () banked
  8455  001668  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  8456  00166A  ECF4  F019         	call	___awmod	;wreg free
  8457  00166E  C080  F08E         	movff	?___awmod,___wmul@multiplier
  8458  001672  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  8459  001676  EC59  F01E         	call	___wmul	;wreg free
  8460  00167A  0EE9               	movlw	low __npowers_
  8461  00167C  0100               	movlb	0	; () banked
  8462  00167E  258E               	addwf	?___wmul& (0+255),w,b
  8463  001680  6EF6               	movwf	tblptrl,c
  8464  001682  0EFD               	movlw	high __npowers_
  8465  001684  0100               	movlb	0	; () banked
  8466  001686  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8467  001688  6EF7               	movwf	tblptrh,c
  8468  00168A                     	if	0	;There are less than 3 active tblptr bytes
  8469  00168A                     	endif
  8470  00168A  0009               	tblrd		*+
  8471  00168C  CFF5 F0A4          	movff	tablat,___ftmul@f2
  8472  001690  0009               	tblrd		*+
  8473  001692  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  8474  001696  000A               	tblrd		*-
  8475  001698  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  8476  00169C  0E00               	movlw	0
  8477  00169E  0100               	movlb	0	; () banked
  8478  0016A0  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8479  0016A2  0E0A               	movlw	10
  8480  0016A4  6F88               	movwf	___awdiv@divisor& (0+255),b
  8481  0016A6  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  8482  0016AA  0100               	movlb	0	; () banked
  8483  0016AC  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  8484  0016AE  ECDF  F017         	call	___awdiv	;wreg free
  8485  0016B2  0E09               	movlw	9
  8486  0016B4  0100               	movlb	0	; () banked
  8487  0016B6  2586               	addwf	?___awdiv& (0+255),w,b
  8488  0016B8  0100               	movlb	0	; () banked
  8489  0016BA  6F8E               	movwf	___wmul@multiplier& (0+255),b
  8490  0016BC  0E00               	movlw	0
  8491  0016BE  0100               	movlb	0	; () banked
  8492  0016C0  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  8493  0016C2  0100               	movlb	0	; () banked
  8494  0016C4  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8495  0016C6  0E00               	movlw	0
  8496  0016C8  0100               	movlb	0	; () banked
  8497  0016CA  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8498  0016CC  0E03               	movlw	3
  8499  0016CE  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8500  0016D0  EC59  F01E         	call	___wmul	;wreg free
  8501  0016D4  0EE9               	movlw	low __npowers_
  8502  0016D6  0100               	movlb	0	; () banked
  8503  0016D8  258E               	addwf	?___wmul& (0+255),w,b
  8504  0016DA  6EF6               	movwf	tblptrl,c
  8505  0016DC  0EFD               	movlw	high __npowers_
  8506  0016DE  0100               	movlb	0	; () banked
  8507  0016E0  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8508  0016E2  6EF7               	movwf	tblptrh,c
  8509  0016E4                     	if	0	;There are less than 3 active tblptr bytes
  8510  0016E4                     	endif
  8511  0016E4  0009               	tblrd		*+
  8512  0016E6  CFF5 F0A1          	movff	tablat,___ftmul@f1
  8513  0016EA  0009               	tblrd		*+
  8514  0016EC  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  8515  0016F0  000A               	tblrd		*-
  8516  0016F2  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  8517  0016F6  ECF3  F010         	call	___ftmul	;wreg free
  8518  0016FA  C0A1  F0B6         	movff	?___ftmul,_fround$1337
  8519  0016FE  C0A2  F0B7         	movff	?___ftmul+1,_fround$1337+1
  8520  001702  C0A3  F0B8         	movff	?___ftmul+2,_fround$1337+2
  8521                           
  8522                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8523  001706  C0B6  F0A1         	movff	_fround$1337,___ftmul@f1
  8524  00170A  C0B7  F0A2         	movff	_fround$1337+1,___ftmul@f1+1
  8525  00170E  C0B8  F0A3         	movff	_fround$1337+2,___ftmul@f1+2
  8526  001712  0E00               	movlw	0
  8527  001714  0100               	movlb	0	; () banked
  8528  001716  6FA4               	movwf	___ftmul@f2& (0+255),b
  8529  001718  0E00               	movlw	0
  8530  00171A  0100               	movlb	0	; () banked
  8531  00171C  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  8532  00171E  0E3F               	movlw	63
  8533  001720  0100               	movlb	0	; () banked
  8534  001722  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  8535  001724  ECF3  F010         	call	___ftmul	;wreg free
  8536  001728  D787               	goto	L4
  8537  00172A                     l4140:
  8538                           
  8539                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8540  00172A  0100               	movlb	0	; () banked
  8541  00172C  51B9               	movf	fround@prec& (0+255),w,b
  8542  00172E  0D03               	mullw	3
  8543  001730  0EE9               	movlw	low __npowers_
  8544  001732  24F3               	addwf	prodl,w,c
  8545  001734  6EF6               	movwf	tblptrl,c
  8546  001736  0EFD               	movlw	high __npowers_
  8547  001738  20F4               	addwfc	prodh,w,c
  8548  00173A  6EF7               	movwf	tblptrh,c
  8549  00173C                     	if	0	;There are less than 3 active tblptr bytes
  8550  00173C                     	endif
  8551  00173C  0009               	tblrd		*+
  8552  00173E  CFF5 F0A1          	movff	tablat,___ftmul@f1
  8553  001742  0009               	tblrd		*+
  8554  001744  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  8555  001748  000A               	tblrd		*-
  8556  00174A  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  8557  00174E  0E00               	movlw	0
  8558  001750  0100               	movlb	0	; () banked
  8559  001752  6FA4               	movwf	___ftmul@f2& (0+255),b
  8560  001754  0E00               	movlw	0
  8561  001756  0100               	movlb	0	; () banked
  8562  001758  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  8563  00175A  0E3F               	movlw	63
  8564  00175C  0100               	movlb	0	; () banked
  8565  00175E  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  8566  001760  ECF3  F010         	call	___ftmul	;wreg free
  8567  001764  C0A1  F0B0         	movff	?___ftmul,?_fround
  8568  001768  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  8569  00176C  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  8570  001770  0012               	return	
  8571  001772                     __end_of_fround:
  8572                           	opt stack 0
  8573                           tblptru	equ	0xFF8
  8574                           tblptrh	equ	0xFF7
  8575                           tblptrl	equ	0xFF6
  8576                           tablat	equ	0xFF5
  8577                           prodh	equ	0xFF4
  8578                           prodl	equ	0xFF3
  8579                           intcon	equ	0xFF2
  8580                           postinc0	equ	0xFEE
  8581                           wreg	equ	0xFE8
  8582                           postdec1	equ	0xFE5
  8583                           fsr1l	equ	0xFE1
  8584                           indf2	equ	0xFDF
  8585                           postinc2	equ	0xFDE
  8586                           postdec2	equ	0xFDD
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function ___wmul *****************
  8592 ;; Defined at:
  8593 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  multiplier      2   14[BANK0 ] unsigned int 
  8596 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  product         2   18[BANK0 ] unsigned int 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  2   14[BANK0 ] unsigned int 
  8601 ;; Registers used:
  8602 ;;		wreg, status,2, status,0, prodl, prodh
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8608 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8611 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8612 ;;Total ram usage:        6 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    5
  8615 ;; This function calls:
  8616 ;;		Nothing
  8617 ;; This function is called by:
  8618 ;;		_fround
  8619 ;;		_scale
  8620 ;;		_printf
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           	psect	text29
  8625  003CB2                     __ptext29:
  8626                           	opt stack 0
  8627  003CB2                     ___wmul:
  8628                           	opt stack 22
  8629                           
  8630                           ;incstack = 0
  8631  003CB2  0100               	movlb	0	; () banked
  8632  003CB4  518E               	movf	___wmul@multiplier& (0+255),w,b
  8633  003CB6  0100               	movlb	0	; () banked
  8634  003CB8  0390               	mulwf	___wmul@multiplicand& (0+255),b
  8635  003CBA  CFF3 F092          	movff	prodl,___wmul@product
  8636  003CBE  CFF4 F093          	movff	prodh,___wmul@product+1
  8637  003CC2  0100               	movlb	0	; () banked
  8638  003CC4  518E               	movf	___wmul@multiplier& (0+255),w,b
  8639  003CC6  0100               	movlb	0	; () banked
  8640  003CC8  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8641  003CCA  50F3               	movf	prodl,w,c
  8642  003CCC  0100               	movlb	0	; () banked
  8643  003CCE  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  8644  003CD0  0100               	movlb	0	; () banked
  8645  003CD2  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8646  003CD4  0100               	movlb	0	; () banked
  8647  003CD6  0390               	mulwf	___wmul@multiplicand& (0+255),b
  8648  003CD8  50F3               	movf	prodl,w,c
  8649  003CDA  0100               	movlb	0	; () banked
  8650  003CDC  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  8651                           
  8652                           ; BSR set to: 0
  8653  003CDE  C092  F08E         	movff	___wmul@product,?___wmul
  8654  003CE2  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  8655  003CE6  0012               	return	
  8656  003CE8                     __end_of___wmul:
  8657                           	opt stack 0
  8658                           tblptru	equ	0xFF8
  8659                           tblptrh	equ	0xFF7
  8660                           tblptrl	equ	0xFF6
  8661                           tablat	equ	0xFF5
  8662                           prodh	equ	0xFF4
  8663                           prodl	equ	0xFF3
  8664                           intcon	equ	0xFF2
  8665                           postinc0	equ	0xFEE
  8666                           wreg	equ	0xFE8
  8667                           postdec1	equ	0xFE5
  8668                           fsr1l	equ	0xFE1
  8669                           indf2	equ	0xFDF
  8670                           postinc2	equ	0xFDE
  8671                           postdec2	equ	0xFDD
  8672                           fsr2h	equ	0xFDA
  8673                           fsr2l	equ	0xFD9
  8674                           status	equ	0xFD8
  8675                           
  8676 ;; *************** function ___ftmul *****************
  8677 ;; Defined at:
  8678 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;  f1              3   33[BANK0 ] float 
  8681 ;;  f2              3   36[BANK0 ] float 
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
  8684 ;;  sign            1   47[BANK0 ] unsigned char 
  8685 ;;  cntr            1   46[BANK0 ] unsigned char 
  8686 ;;  exp             1   42[BANK0 ] unsigned char 
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  3   33[BANK0 ] float 
  8689 ;; Registers used:
  8690 ;;		wreg, status,2, status,0, cstack
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8696 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;Total ram usage:       15 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    6
  8703 ;; This function calls:
  8704 ;;		___ftpack
  8705 ;; This function is called by:
  8706 ;;		_sortBattery
  8707 ;;		_angleToPulse
  8708 ;;		_fround
  8709 ;;		_scale
  8710 ;;		_printf
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           	psect	text30
  8715  0021E6                     __ptext30:
  8716                           	opt stack 0
  8717  0021E6                     ___ftmul:
  8718                           	opt stack 21
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;incstack = 0
  8722  0021E6  C0A3  F0A7         	movff	___ftmul@f1+2,??___ftmul
  8723  0021EA  0100               	movlb	0	; () banked
  8724  0021EC  6BA8               	clrf	(??___ftmul+1)& (0+255),b
  8725  0021EE  6BA9               	clrf	(??___ftmul+2)& (0+255),b
  8726  0021F0  0100               	movlb	0	; () banked
  8727  0021F2  35A2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8728  0021F4  0100               	movlb	0	; () banked
  8729  0021F6  37A7               	rlcf	??___ftmul& (0+255),f,b
  8730  0021F8  E301               	bnc	u3361
  8731  0021FA  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
  8732  0021FC                     u3361:
  8733  0021FC  0100               	movlb	0	; () banked
  8734  0021FE  51A7               	movf	??___ftmul& (0+255),w,b
  8735  002200  0100               	movlb	0	; () banked
  8736  002202  6FAA               	movwf	___ftmul@exp& (0+255),b
  8737  002204  0100               	movlb	0	; () banked
  8738  002206  51AA               	movf	___ftmul@exp& (0+255),w,b
  8739  002208  A4D8               	btfss	status,2,c
  8740  00220A  D00A               	goto	l3926
  8741                           
  8742                           ; BSR set to: 0
  8743  00220C  0E00               	movlw	0
  8744  00220E  0100               	movlb	0	; () banked
  8745  002210  6FA1               	movwf	?___ftmul& (0+255),b
  8746  002212  0E00               	movlw	0
  8747  002214  0100               	movlb	0	; () banked
  8748  002216  6FA2               	movwf	(?___ftmul+1)& (0+255),b
  8749  002218  0E00               	movlw	0
  8750  00221A  0100               	movlb	0	; () banked
  8751  00221C  6FA3               	movwf	(?___ftmul+2)& (0+255),b
  8752                           
  8753                           ; BSR set to: 0
  8754  00221E  0012               	return	
  8755  002220                     l3926:
  8756                           
  8757                           ; BSR set to: 0
  8758  002220  C0A6  F0A7         	movff	___ftmul@f2+2,??___ftmul
  8759  002224  0100               	movlb	0	; () banked
  8760  002226  6BA8               	clrf	(??___ftmul+1)& (0+255),b
  8761  002228  6BA9               	clrf	(??___ftmul+2)& (0+255),b
  8762  00222A  0100               	movlb	0	; () banked
  8763  00222C  35A5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8764  00222E  0100               	movlb	0	; () banked
  8765  002230  37A7               	rlcf	??___ftmul& (0+255),f,b
  8766  002232  E301               	bnc	u3381
  8767  002234  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
  8768  002236                     u3381:
  8769  002236  0100               	movlb	0	; () banked
  8770  002238  51A7               	movf	??___ftmul& (0+255),w,b
  8771  00223A  0100               	movlb	0	; () banked
  8772  00223C  6FAF               	movwf	___ftmul@sign& (0+255),b
  8773  00223E  0100               	movlb	0	; () banked
  8774  002240  51AF               	movf	___ftmul@sign& (0+255),w,b
  8775  002242  A4D8               	btfss	status,2,c
  8776  002244  D00A               	goto	l3932
  8777                           
  8778                           ; BSR set to: 0
  8779  002246  0E00               	movlw	0
  8780  002248  0100               	movlb	0	; () banked
  8781  00224A  6FA1               	movwf	?___ftmul& (0+255),b
  8782  00224C  0E00               	movlw	0
  8783  00224E  0100               	movlb	0	; () banked
  8784  002250  6FA2               	movwf	(?___ftmul+1)& (0+255),b
  8785  002252  0E00               	movlw	0
  8786  002254  0100               	movlb	0	; () banked
  8787  002256  6FA3               	movwf	(?___ftmul+2)& (0+255),b
  8788                           
  8789                           ; BSR set to: 0
  8790  002258  0012               	return	
  8791  00225A                     l3932:
  8792                           
  8793                           ; BSR set to: 0
  8794  00225A  0100               	movlb	0	; () banked
  8795  00225C  51AF               	movf	___ftmul@sign& (0+255),w,b
  8796  00225E  0F7B               	addlw	123
  8797  002260  0100               	movlb	0	; () banked
  8798  002262  27AA               	addwf	___ftmul@exp& (0+255),f,b
  8799                           
  8800                           ; BSR set to: 0
  8801  002264  C0A3  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
  8802  002268  0100               	movlb	0	; () banked
  8803  00226A  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
  8804  00226C  0100               	movlb	0	; () banked
  8805  00226E  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
  8806  002270  0E80               	movlw	128
  8807  002272  0100               	movlb	0	; () banked
  8808  002274  17AF               	andwf	___ftmul@sign& (0+255),f,b
  8809                           
  8810                           ; BSR set to: 0
  8811  002276  0100               	movlb	0	; () banked
  8812  002278  8FA2               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8813                           
  8814                           ; BSR set to: 0
  8815  00227A  0100               	movlb	0	; () banked
  8816  00227C  8FA5               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8817                           
  8818                           ; BSR set to: 0
  8819  00227E  0EFF               	movlw	255
  8820  002280  0100               	movlb	0	; () banked
  8821  002282  17A4               	andwf	___ftmul@f2& (0+255),f,b
  8822  002284  0EFF               	movlw	255
  8823  002286  0100               	movlb	0	; () banked
  8824  002288  17A5               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8825  00228A  0E00               	movlw	0
  8826  00228C  0100               	movlb	0	; () banked
  8827  00228E  17A6               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8828                           
  8829                           ; BSR set to: 0
  8830  002290  0E00               	movlw	0
  8831  002292  0100               	movlb	0	; () banked
  8832  002294  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
  8833  002296  0E00               	movlw	0
  8834  002298  0100               	movlb	0	; () banked
  8835  00229A  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8836  00229C  0E00               	movlw	0
  8837  00229E  0100               	movlb	0	; () banked
  8838  0022A0  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8839                           
  8840                           ; BSR set to: 0
  8841  0022A2  0E07               	movlw	7
  8842  0022A4  0100               	movlb	0	; () banked
  8843  0022A6  6FAE               	movwf	___ftmul@cntr& (0+255),b
  8844  0022A8                     l3946:
  8845                           
  8846                           ; BSR set to: 0
  8847  0022A8  0100               	movlb	0	; () banked
  8848  0022AA  A1A1               	btfss	___ftmul@f1& (0+255),0,b
  8849  0022AC  D00C               	goto	l3950
  8850                           
  8851                           ; BSR set to: 0
  8852  0022AE  0100               	movlb	0	; () banked
  8853  0022B0  51A4               	movf	___ftmul@f2& (0+255),w,b
  8854  0022B2  0100               	movlb	0	; () banked
  8855  0022B4  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8856  0022B6  0100               	movlb	0	; () banked
  8857  0022B8  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
  8858  0022BA  0100               	movlb	0	; () banked
  8859  0022BC  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8860  0022BE  0100               	movlb	0	; () banked
  8861  0022C0  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
  8862  0022C2  0100               	movlb	0	; () banked
  8863  0022C4  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8864  0022C6                     l3950:
  8865                           
  8866                           ; BSR set to: 0
  8867  0022C6  0100               	movlb	0	; () banked
  8868  0022C8  90D8               	bcf	status,0,c
  8869  0022CA  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8870  0022CC  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8871  0022CE  33A1               	rrcf	___ftmul@f1& (0+255),f,b
  8872  0022D0  0100               	movlb	0	; () banked
  8873  0022D2  90D8               	bcf	status,0,c
  8874  0022D4  37A4               	rlcf	___ftmul@f2& (0+255),f,b
  8875  0022D6  37A5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8876  0022D8  37A6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8877                           
  8878                           ; BSR set to: 0
  8879  0022DA  0100               	movlb	0	; () banked
  8880  0022DC  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
  8881  0022DE  D7E4               	goto	l3946
  8882                           
  8883                           ; BSR set to: 0
  8884                           
  8885                           ; BSR set to: 0
  8886  0022E0  0E09               	movlw	9
  8887  0022E2  0100               	movlb	0	; () banked
  8888  0022E4  6FAE               	movwf	___ftmul@cntr& (0+255),b
  8889  0022E6                     l3956:
  8890                           
  8891                           ; BSR set to: 0
  8892  0022E6  0100               	movlb	0	; () banked
  8893  0022E8  A1A1               	btfss	___ftmul@f1& (0+255),0,b
  8894  0022EA  D00C               	goto	l3960
  8895                           
  8896                           ; BSR set to: 0
  8897  0022EC  0100               	movlb	0	; () banked
  8898  0022EE  51A4               	movf	___ftmul@f2& (0+255),w,b
  8899  0022F0  0100               	movlb	0	; () banked
  8900  0022F2  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8901  0022F4  0100               	movlb	0	; () banked
  8902  0022F6  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
  8903  0022F8  0100               	movlb	0	; () banked
  8904  0022FA  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8905  0022FC  0100               	movlb	0	; () banked
  8906  0022FE  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
  8907  002300  0100               	movlb	0	; () banked
  8908  002302  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8909  002304                     l3960:
  8910                           
  8911                           ; BSR set to: 0
  8912  002304  0100               	movlb	0	; () banked
  8913  002306  90D8               	bcf	status,0,c
  8914  002308  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8915  00230A  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8916  00230C  33A1               	rrcf	___ftmul@f1& (0+255),f,b
  8917  00230E  0100               	movlb	0	; () banked
  8918  002310  90D8               	bcf	status,0,c
  8919  002312  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8920  002314  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8921  002316  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8922                           
  8923                           ; BSR set to: 0
  8924  002318  0100               	movlb	0	; () banked
  8925  00231A  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
  8926  00231C  D7E4               	goto	l3956
  8927                           
  8928                           ; BSR set to: 0
  8929                           
  8930                           ; BSR set to: 0
  8931  00231E  C0AB  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  8932  002322  C0AC  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8933  002326  C0AD  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8934  00232A  C0AA  F083         	movff	___ftmul@exp,___ftpack@exp
  8935  00232E  C0AF  F084         	movff	___ftmul@sign,___ftpack@sign
  8936  002332  EC28  F014         	call	___ftpack	;wreg free
  8937  002336  C080  F0A1         	movff	?___ftpack,?___ftmul
  8938  00233A  C081  F0A2         	movff	?___ftpack+1,?___ftmul+1
  8939  00233E  C082  F0A3         	movff	?___ftpack+2,?___ftmul+2
  8940  002342  0012               	return	
  8941  002344                     __end_of___ftmul:
  8942                           	opt stack 0
  8943                           tblptru	equ	0xFF8
  8944                           tblptrh	equ	0xFF7
  8945                           tblptrl	equ	0xFF6
  8946                           tablat	equ	0xFF5
  8947                           prodh	equ	0xFF4
  8948                           prodl	equ	0xFF3
  8949                           intcon	equ	0xFF2
  8950                           postinc0	equ	0xFEE
  8951                           wreg	equ	0xFE8
  8952                           postdec1	equ	0xFE5
  8953                           fsr1l	equ	0xFE1
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           postdec2	equ	0xFDD
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           
  8961 ;; *************** function ___awmod *****************
  8962 ;; Defined at:
  8963 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;  dividend        2    0[BANK0 ] int 
  8966 ;;  divisor         2    2[BANK0 ] int 
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;  sign            1    5[BANK0 ] unsigned char 
  8969 ;;  counter         1    4[BANK0 ] unsigned char 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  2    0[BANK0 ] int 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8979 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;Total ram usage:        6 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    5
  8986 ;; This function calls:
  8987 ;;		Nothing
  8988 ;; This function is called by:
  8989 ;;		_fround
  8990 ;;		_scale
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           	psect	text31
  8995  0033E8                     __ptext31:
  8996                           	opt stack 0
  8997  0033E8                     ___awmod:
  8998                           	opt stack 22
  8999                           
  9000                           ;incstack = 0
  9001  0033E8  0E00               	movlw	0
  9002  0033EA  0100               	movlb	0	; () banked
  9003  0033EC  6F85               	movwf	___awmod@sign& (0+255),b
  9004                           
  9005                           ; BSR set to: 0
  9006  0033EE  0100               	movlb	0	; () banked
  9007  0033F0  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9008  0033F2  D008               	goto	l4020
  9009                           
  9010                           ; BSR set to: 0
  9011  0033F4  0100               	movlb	0	; () banked
  9012  0033F6  6D80               	negf	___awmod@dividend& (0+255),b
  9013  0033F8  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9014  0033FA  B0D8               	btfsc	status,0,c
  9015  0033FC  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9016                           
  9017                           ; BSR set to: 0
  9018  0033FE  0E01               	movlw	1
  9019  003400  0100               	movlb	0	; () banked
  9020  003402  6F85               	movwf	___awmod@sign& (0+255),b
  9021  003404                     l4020:
  9022                           
  9023                           ; BSR set to: 0
  9024  003404  0100               	movlb	0	; () banked
  9025  003406  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9026  003408  D005               	goto	l4024
  9027                           
  9028                           ; BSR set to: 0
  9029  00340A  0100               	movlb	0	; () banked
  9030  00340C  6D82               	negf	___awmod@divisor& (0+255),b
  9031  00340E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9032  003410  B0D8               	btfsc	status,0,c
  9033  003412  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9034  003414                     l4024:
  9035                           
  9036                           ; BSR set to: 0
  9037  003414  0100               	movlb	0	; () banked
  9038  003416  5182               	movf	___awmod@divisor& (0+255),w,b
  9039  003418  0100               	movlb	0	; () banked
  9040  00341A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9041  00341C  B4D8               	btfsc	status,2,c
  9042  00341E  D026               	goto	l4040
  9043                           
  9044                           ; BSR set to: 0
  9045  003420  0E01               	movlw	1
  9046  003422  0100               	movlb	0	; () banked
  9047  003424  6F84               	movwf	___awmod@counter& (0+255),b
  9048  003426  D006               	goto	l4030
  9049  003428                     l4028:
  9050                           
  9051                           ; BSR set to: 0
  9052  003428  0100               	movlb	0	; () banked
  9053  00342A  90D8               	bcf	status,0,c
  9054  00342C  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9055  00342E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9056  003430  0100               	movlb	0	; () banked
  9057  003432  2B84               	incf	___awmod@counter& (0+255),f,b
  9058  003434                     l4030:
  9059                           
  9060                           ; BSR set to: 0
  9061  003434  0100               	movlb	0	; () banked
  9062  003436  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9063  003438  D7F7               	goto	l4028
  9064  00343A                     l4032:
  9065                           
  9066                           ; BSR set to: 0
  9067  00343A  0100               	movlb	0	; () banked
  9068  00343C  5182               	movf	___awmod@divisor& (0+255),w,b
  9069  00343E  0100               	movlb	0	; () banked
  9070  003440  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9071  003442  0100               	movlb	0	; () banked
  9072  003444  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9073  003446  0100               	movlb	0	; () banked
  9074  003448  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9075  00344A  A0D8               	btfss	status,0,c
  9076  00344C  D008               	goto	l4036
  9077                           
  9078                           ; BSR set to: 0
  9079  00344E  0100               	movlb	0	; () banked
  9080  003450  5182               	movf	___awmod@divisor& (0+255),w,b
  9081  003452  0100               	movlb	0	; () banked
  9082  003454  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9083  003456  0100               	movlb	0	; () banked
  9084  003458  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9085  00345A  0100               	movlb	0	; () banked
  9086  00345C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9087  00345E                     l4036:
  9088                           
  9089                           ; BSR set to: 0
  9090  00345E  0100               	movlb	0	; () banked
  9091  003460  90D8               	bcf	status,0,c
  9092  003462  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9093  003464  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9094                           
  9095                           ; BSR set to: 0
  9096  003466  0100               	movlb	0	; () banked
  9097  003468  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9098  00346A  D7E7               	goto	l4032
  9099  00346C                     l4040:
  9100                           
  9101                           ; BSR set to: 0
  9102  00346C  0100               	movlb	0	; () banked
  9103  00346E  5185               	movf	___awmod@sign& (0+255),w,b
  9104  003470  0100               	movlb	0	; () banked
  9105  003472  B4D8               	btfsc	status,2,c
  9106  003474  D005               	goto	l4044
  9107                           
  9108                           ; BSR set to: 0
  9109  003476  0100               	movlb	0	; () banked
  9110  003478  6D80               	negf	___awmod@dividend& (0+255),b
  9111  00347A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9112  00347C  B0D8               	btfsc	status,0,c
  9113  00347E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9114  003480                     l4044:
  9115                           
  9116                           ; BSR set to: 0
  9117  003480  C080  F080         	movff	___awmod@dividend,?___awmod
  9118  003484  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9119  003488  0012               	return	
  9120  00348A                     __end_of___awmod:
  9121                           	opt stack 0
  9122                           tblptru	equ	0xFF8
  9123                           tblptrh	equ	0xFF7
  9124                           tblptrl	equ	0xFF6
  9125                           tablat	equ	0xFF5
  9126                           prodh	equ	0xFF4
  9127                           prodl	equ	0xFF3
  9128                           intcon	equ	0xFF2
  9129                           postinc0	equ	0xFEE
  9130                           wreg	equ	0xFE8
  9131                           postdec1	equ	0xFE5
  9132                           fsr1l	equ	0xFE1
  9133                           indf2	equ	0xFDF
  9134                           postinc2	equ	0xFDE
  9135                           postdec2	equ	0xFDD
  9136                           fsr2h	equ	0xFDA
  9137                           fsr2l	equ	0xFD9
  9138                           status	equ	0xFD8
  9139                           
  9140 ;; *************** function ___awdiv *****************
  9141 ;; Defined at:
  9142 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  dividend        2    6[BANK0 ] int 
  9145 ;;  divisor         2    8[BANK0 ] int 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  quotient        2   12[BANK0 ] int 
  9148 ;;  sign            1   11[BANK0 ] unsigned char 
  9149 ;;  counter         1   10[BANK0 ] unsigned char 
  9150 ;; Return value:  Size  Location     Type
  9151 ;;                  2    6[BANK0 ] int 
  9152 ;; Registers used:
  9153 ;;		wreg, status,2, status,0
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9159 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9160 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;Total ram usage:        8 bytes
  9164 ;; Hardware stack levels used:    1
  9165 ;; Hardware stack levels required when called:    5
  9166 ;; This function calls:
  9167 ;;		Nothing
  9168 ;; This function is called by:
  9169 ;;		_fround
  9170 ;;		_scale
  9171 ;;		_printf
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text32
  9176  002FBE                     __ptext32:
  9177                           	opt stack 0
  9178  002FBE                     ___awdiv:
  9179                           	opt stack 22
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;incstack = 0
  9183  002FBE  0E00               	movlw	0
  9184  002FC0  0100               	movlb	0	; () banked
  9185  002FC2  6F8B               	movwf	___awdiv@sign& (0+255),b
  9186                           
  9187                           ; BSR set to: 0
  9188  002FC4  0100               	movlb	0	; () banked
  9189  002FC6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9190  002FC8  D008               	goto	l3976
  9191                           
  9192                           ; BSR set to: 0
  9193  002FCA  0100               	movlb	0	; () banked
  9194  002FCC  6D88               	negf	___awdiv@divisor& (0+255),b
  9195  002FCE  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9196  002FD0  B0D8               	btfsc	status,0,c
  9197  002FD2  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9198                           
  9199                           ; BSR set to: 0
  9200  002FD4  0E01               	movlw	1
  9201  002FD6  0100               	movlb	0	; () banked
  9202  002FD8  6F8B               	movwf	___awdiv@sign& (0+255),b
  9203  002FDA                     l3976:
  9204                           
  9205                           ; BSR set to: 0
  9206  002FDA  0100               	movlb	0	; () banked
  9207  002FDC  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9208  002FDE  D008               	goto	l3982
  9209                           
  9210                           ; BSR set to: 0
  9211  002FE0  0100               	movlb	0	; () banked
  9212  002FE2  6D86               	negf	___awdiv@dividend& (0+255),b
  9213  002FE4  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9214  002FE6  B0D8               	btfsc	status,0,c
  9215  002FE8  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9216                           
  9217                           ; BSR set to: 0
  9218  002FEA  0E01               	movlw	1
  9219  002FEC  0100               	movlb	0	; () banked
  9220  002FEE  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9221  002FF0                     l3982:
  9222                           
  9223                           ; BSR set to: 0
  9224  002FF0  0E00               	movlw	0
  9225  002FF2  0100               	movlb	0	; () banked
  9226  002FF4  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9227  002FF6  0E00               	movlw	0
  9228  002FF8  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9229                           
  9230                           ; BSR set to: 0
  9231  002FFA  0100               	movlb	0	; () banked
  9232  002FFC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9233  002FFE  0100               	movlb	0	; () banked
  9234  003000  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9235  003002  B4D8               	btfsc	status,2,c
  9236  003004  D02C               	goto	l4004
  9237                           
  9238                           ; BSR set to: 0
  9239  003006  0E01               	movlw	1
  9240  003008  0100               	movlb	0	; () banked
  9241  00300A  6F8A               	movwf	___awdiv@counter& (0+255),b
  9242  00300C  D006               	goto	l3990
  9243  00300E                     l3988:
  9244                           
  9245                           ; BSR set to: 0
  9246  00300E  0100               	movlb	0	; () banked
  9247  003010  90D8               	bcf	status,0,c
  9248  003012  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9249  003014  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9250  003016  0100               	movlb	0	; () banked
  9251  003018  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9252  00301A                     l3990:
  9253                           
  9254                           ; BSR set to: 0
  9255  00301A  0100               	movlb	0	; () banked
  9256  00301C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9257  00301E  D7F7               	goto	l3988
  9258  003020                     l3992:
  9259                           
  9260                           ; BSR set to: 0
  9261  003020  0100               	movlb	0	; () banked
  9262  003022  90D8               	bcf	status,0,c
  9263  003024  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9264  003026  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9265                           
  9266                           ; BSR set to: 0
  9267  003028  0100               	movlb	0	; () banked
  9268  00302A  5188               	movf	___awdiv@divisor& (0+255),w,b
  9269  00302C  0100               	movlb	0	; () banked
  9270  00302E  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9271  003030  0100               	movlb	0	; () banked
  9272  003032  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9273  003034  0100               	movlb	0	; () banked
  9274  003036  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9275  003038  A0D8               	btfss	status,0,c
  9276  00303A  D00A               	goto	l4000
  9277                           
  9278                           ; BSR set to: 0
  9279  00303C  0100               	movlb	0	; () banked
  9280  00303E  5188               	movf	___awdiv@divisor& (0+255),w,b
  9281  003040  0100               	movlb	0	; () banked
  9282  003042  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9283  003044  0100               	movlb	0	; () banked
  9284  003046  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9285  003048  0100               	movlb	0	; () banked
  9286  00304A  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9287                           
  9288                           ; BSR set to: 0
  9289  00304C  0100               	movlb	0	; () banked
  9290  00304E  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9291  003050                     l4000:
  9292                           
  9293                           ; BSR set to: 0
  9294  003050  0100               	movlb	0	; () banked
  9295  003052  90D8               	bcf	status,0,c
  9296  003054  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9297  003056  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9298                           
  9299                           ; BSR set to: 0
  9300  003058  0100               	movlb	0	; () banked
  9301  00305A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9302  00305C  D7E1               	goto	l3992
  9303  00305E                     l4004:
  9304                           
  9305                           ; BSR set to: 0
  9306  00305E  0100               	movlb	0	; () banked
  9307  003060  518B               	movf	___awdiv@sign& (0+255),w,b
  9308  003062  0100               	movlb	0	; () banked
  9309  003064  B4D8               	btfsc	status,2,c
  9310  003066  D005               	goto	l4008
  9311                           
  9312                           ; BSR set to: 0
  9313  003068  0100               	movlb	0	; () banked
  9314  00306A  6D8C               	negf	___awdiv@quotient& (0+255),b
  9315  00306C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9316  00306E  B0D8               	btfsc	status,0,c
  9317  003070  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9318  003072                     l4008:
  9319                           
  9320                           ; BSR set to: 0
  9321  003072  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9322  003076  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9323  00307A  0012               	return	
  9324  00307C                     __end_of___awdiv:
  9325                           	opt stack 0
  9326                           tblptru	equ	0xFF8
  9327                           tblptrh	equ	0xFF7
  9328                           tblptrl	equ	0xFF6
  9329                           tablat	equ	0xFF5
  9330                           prodh	equ	0xFF4
  9331                           prodl	equ	0xFF3
  9332                           intcon	equ	0xFF2
  9333                           postinc0	equ	0xFEE
  9334                           wreg	equ	0xFE8
  9335                           postdec1	equ	0xFE5
  9336                           fsr1l	equ	0xFE1
  9337                           indf2	equ	0xFDF
  9338                           postinc2	equ	0xFDE
  9339                           postdec2	equ	0xFDD
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function __tdiv_to_l_ *****************
  9345 ;; Defined at:
  9346 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  f1              3    0[BANK0 ] float 
  9349 ;;  f2              3    3[BANK0 ] float 
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;  quot            4    9[BANK0 ] unsigned long 
  9352 ;;  exp1            1   14[BANK0 ] unsigned char 
  9353 ;;  cntr            1   13[BANK0 ] unsigned char 
  9354 ;; Return value:  Size  Location     Type
  9355 ;;                  4    0[BANK0 ] unsigned long 
  9356 ;; Registers used:
  9357 ;;		wreg, status,2, status,0
  9358 ;; Tracked objects:
  9359 ;;		On entry : 0/0
  9360 ;;		On exit  : 0/0
  9361 ;;		Unchanged: 0/0
  9362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9363 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;Total ram usage:       15 bytes
  9368 ;; Hardware stack levels used:    1
  9369 ;; Hardware stack levels required when called:    5
  9370 ;; This function calls:
  9371 ;;		Nothing
  9372 ;; This function is called by:
  9373 ;;		_printf
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377                           	psect	text33
  9378  001D5A                     __ptext33:
  9379                           	opt stack 0
  9380  001D5A                     __tdiv_to_l_:
  9381                           	opt stack 23
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;incstack = 0
  9385  001D5A  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9386  001D5E  0100               	movlb	0	; () banked
  9387  001D60  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  9388  001D62  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  9389  001D64  0100               	movlb	0	; () banked
  9390  001D66  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  9391  001D68  0100               	movlb	0	; () banked
  9392  001D6A  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  9393  001D6C  E301               	bnc	u3731
  9394  001D6E  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  9395  001D70                     u3731:
  9396  001D70  0100               	movlb	0	; () banked
  9397  001D72  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  9398  001D74  0100               	movlb	0	; () banked
  9399  001D76  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  9400  001D78  0100               	movlb	0	; () banked
  9401  001D7A  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  9402  001D7C  A4D8               	btfss	status,2,c
  9403  001D7E  D00A               	goto	l4200
  9404                           
  9405                           ; BSR set to: 0
  9406  001D80  0E00               	movlw	0
  9407  001D82  0100               	movlb	0	; () banked
  9408  001D84  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  9409  001D86  0E00               	movlw	0
  9410  001D88  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9411  001D8A  0E00               	movlw	0
  9412  001D8C  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9413  001D8E  0E00               	movlw	0
  9414  001D90  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9415                           
  9416                           ; BSR set to: 0
  9417  001D92  0012               	return	
  9418  001D94                     l4200:
  9419                           
  9420                           ; BSR set to: 0
  9421  001D94  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9422  001D98  0100               	movlb	0	; () banked
  9423  001D9A  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  9424  001D9C  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  9425  001D9E  0100               	movlb	0	; () banked
  9426  001DA0  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  9427  001DA2  0100               	movlb	0	; () banked
  9428  001DA4  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  9429  001DA6  E301               	bnc	u3751
  9430  001DA8  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  9431  001DAA                     u3751:
  9432  001DAA  0100               	movlb	0	; () banked
  9433  001DAC  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  9434  001DAE  0100               	movlb	0	; () banked
  9435  001DB0  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  9436  001DB2  0100               	movlb	0	; () banked
  9437  001DB4  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  9438  001DB6  A4D8               	btfss	status,2,c
  9439  001DB8  D00A               	goto	l4206
  9440                           
  9441                           ; BSR set to: 0
  9442  001DBA  0E00               	movlw	0
  9443  001DBC  0100               	movlb	0	; () banked
  9444  001DBE  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  9445  001DC0  0E00               	movlw	0
  9446  001DC2  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9447  001DC4  0E00               	movlw	0
  9448  001DC6  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9449  001DC8  0E00               	movlw	0
  9450  001DCA  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9451                           
  9452                           ; BSR set to: 0
  9453  001DCC  0012               	return	
  9454  001DCE                     l4206:
  9455                           
  9456                           ; BSR set to: 0
  9457  001DCE  0100               	movlb	0	; () banked
  9458  001DD0  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  9459                           
  9460                           ; BSR set to: 0
  9461  001DD2  0EFF               	movlw	255
  9462  001DD4  0100               	movlb	0	; () banked
  9463  001DD6  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  9464  001DD8  0EFF               	movlw	255
  9465  001DDA  0100               	movlb	0	; () banked
  9466  001DDC  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  9467  001DDE  0E00               	movlw	0
  9468  001DE0  0100               	movlb	0	; () banked
  9469  001DE2  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  9470  001DE4  0100               	movlb	0	; () banked
  9471  001DE6  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  9472                           
  9473                           ; BSR set to: 0
  9474  001DE8  0EFF               	movlw	255
  9475  001DEA  0100               	movlb	0	; () banked
  9476  001DEC  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  9477  001DEE  0EFF               	movlw	255
  9478  001DF0  0100               	movlb	0	; () banked
  9479  001DF2  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  9480  001DF4  0E00               	movlw	0
  9481  001DF6  0100               	movlb	0	; () banked
  9482  001DF8  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  9483                           
  9484                           ; BSR set to: 0
  9485  001DFA  0E00               	movlw	0
  9486  001DFC  0100               	movlb	0	; () banked
  9487  001DFE  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  9488  001E00  0E00               	movlw	0
  9489  001E02  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  9490  001E04  0E00               	movlw	0
  9491  001E06  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  9492  001E08  0E00               	movlw	0
  9493  001E0A  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  9494                           
  9495                           ; BSR set to: 0
  9496  001E0C  0E7F               	movlw	127
  9497  001E0E  0100               	movlb	0	; () banked
  9498  001E10  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  9499                           
  9500                           ; BSR set to: 0
  9501  001E12  0100               	movlb	0	; () banked
  9502  001E14  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  9503  001E16  0F98               	addlw	152
  9504  001E18  0100               	movlb	0	; () banked
  9505  001E1A  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  9506                           
  9507                           ; BSR set to: 0
  9508  001E1C  0E18               	movlw	24
  9509  001E1E  0100               	movlb	0	; () banked
  9510  001E20  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  9511  001E22                     l1098:
  9512                           
  9513                           ; BSR set to: 0
  9514  001E22  0100               	movlb	0	; () banked
  9515  001E24  90D8               	bcf	status,0,c
  9516  001E26  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  9517  001E28  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9518  001E2A  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9519  001E2C  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9520                           
  9521                           ; BSR set to: 0
  9522  001E2E  0100               	movlb	0	; () banked
  9523  001E30  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  9524  001E32  0100               	movlb	0	; () banked
  9525  001E34  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  9526  001E36  0100               	movlb	0	; () banked
  9527  001E38  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  9528  001E3A  0100               	movlb	0	; () banked
  9529  001E3C  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  9530  001E3E  0100               	movlb	0	; () banked
  9531  001E40  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  9532  001E42  0100               	movlb	0	; () banked
  9533  001E44  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  9534  001E46  A0D8               	btfss	status,0,c
  9535  001E48  D00E               	goto	l1099
  9536                           
  9537                           ; BSR set to: 0
  9538  001E4A  0100               	movlb	0	; () banked
  9539  001E4C  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  9540  001E4E  0100               	movlb	0	; () banked
  9541  001E50  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  9542  001E52  0100               	movlb	0	; () banked
  9543  001E54  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  9544  001E56  0100               	movlb	0	; () banked
  9545  001E58  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  9546  001E5A  0100               	movlb	0	; () banked
  9547  001E5C  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  9548  001E5E  0100               	movlb	0	; () banked
  9549  001E60  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  9550                           
  9551                           ; BSR set to: 0
  9552  001E62  0100               	movlb	0	; () banked
  9553  001E64  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  9554  001E66                     l1099:
  9555                           
  9556                           ; BSR set to: 0
  9557  001E66  0100               	movlb	0	; () banked
  9558  001E68  90D8               	bcf	status,0,c
  9559  001E6A  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  9560  001E6C  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  9561  001E6E  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  9562                           
  9563                           ; BSR set to: 0
  9564  001E70  0100               	movlb	0	; () banked
  9565  001E72  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  9566  001E74  D7D6               	goto	l1098
  9567                           
  9568                           ; BSR set to: 0
  9569                           
  9570                           ; BSR set to: 0
  9571  001E76  0100               	movlb	0	; () banked
  9572  001E78  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  9573  001E7A  D01A               	goto	l4240
  9574                           
  9575                           ; BSR set to: 0
  9576  001E7C  0100               	movlb	0	; () banked
  9577  001E7E  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  9578  001E80  0A80               	xorlw	128
  9579  001E82  0F97               	addlw	151
  9580  001E84  B0D8               	btfsc	status,0,c
  9581  001E86  D00A               	goto	l4236
  9582                           
  9583                           ; BSR set to: 0
  9584  001E88  0E00               	movlw	0
  9585  001E8A  0100               	movlb	0	; () banked
  9586  001E8C  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  9587  001E8E  0E00               	movlw	0
  9588  001E90  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9589  001E92  0E00               	movlw	0
  9590  001E94  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9591  001E96  0E00               	movlw	0
  9592  001E98  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9593                           
  9594                           ; BSR set to: 0
  9595  001E9A  0012               	return	
  9596  001E9C                     l4236:
  9597                           
  9598                           ; BSR set to: 0
  9599  001E9C  0100               	movlb	0	; () banked
  9600  001E9E  90D8               	bcf	status,0,c
  9601  001EA0  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9602  001EA2  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9603  001EA4  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9604  001EA6  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  9605                           
  9606                           ; BSR set to: 0
  9607  001EA8  0100               	movlb	0	; () banked
  9608  001EAA  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  9609  001EAC  D7F7               	goto	l4236
  9610                           
  9611                           ; BSR set to: 0
  9612  001EAE  D01B               	goto	l1105
  9613  001EB0                     l4240:
  9614                           
  9615                           ; BSR set to: 0
  9616  001EB0  0E17               	movlw	23
  9617  001EB2  0100               	movlb	0	; () banked
  9618  001EB4  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  9619  001EB6  D012               	goto	l4248
  9620                           
  9621                           ; BSR set to: 0
  9622  001EB8  0E00               	movlw	0
  9623  001EBA  0100               	movlb	0	; () banked
  9624  001EBC  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  9625  001EBE  0E00               	movlw	0
  9626  001EC0  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9627  001EC2  0E00               	movlw	0
  9628  001EC4  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9629  001EC6  0E00               	movlw	0
  9630  001EC8  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9631                           
  9632                           ; BSR set to: 0
  9633  001ECA  0012               	return	
  9634  001ECC                     l4246:
  9635                           
  9636                           ; BSR set to: 0
  9637  001ECC  0100               	movlb	0	; () banked
  9638  001ECE  90D8               	bcf	status,0,c
  9639  001ED0  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  9640  001ED2  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9641  001ED4  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9642  001ED6  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9643  001ED8  0100               	movlb	0	; () banked
  9644  001EDA  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  9645  001EDC                     l4248:
  9646                           
  9647                           ; BSR set to: 0
  9648  001EDC  0100               	movlb	0	; () banked
  9649  001EDE  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  9650  001EE0  0100               	movlb	0	; () banked
  9651  001EE2  A4D8               	btfss	status,2,c
  9652  001EE4  D7F3               	goto	l4246
  9653  001EE6                     l1105:
  9654                           
  9655                           ; BSR set to: 0
  9656  001EE6  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9657  001EEA  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9658  001EEE  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9659  001EF2  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9660                           
  9661                           ; BSR set to: 0
  9662  001EF6  0012               	return		;funcret
  9663  001EF8                     __end_of__tdiv_to_l_:
  9664                           	opt stack 0
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           intcon	equ	0xFF2
  9672                           postinc0	equ	0xFEE
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           fsr1l	equ	0xFE1
  9676                           indf2	equ	0xFDF
  9677                           postinc2	equ	0xFDE
  9678                           postdec2	equ	0xFDD
  9679                           fsr2h	equ	0xFDA
  9680                           fsr2l	equ	0xFD9
  9681                           status	equ	0xFD8
  9682                           
  9683 ;; *************** function __div_to_l_ *****************
  9684 ;; Defined at:
  9685 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;  f1              3    0[BANK0 ] unsigned long 
  9688 ;;  f2              3    3[BANK0 ] unsigned long 
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;  quot            4    6[BANK0 ] unsigned long 
  9691 ;;  exp1            1   11[BANK0 ] unsigned char 
  9692 ;;  cntr            1   10[BANK0 ] unsigned char 
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  4    0[BANK0 ] unsigned long 
  9695 ;; Registers used:
  9696 ;;		wreg, status,2, status,0
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9702 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;Total ram usage:       12 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    5
  9709 ;; This function calls:
  9710 ;;		Nothing
  9711 ;; This function is called by:
  9712 ;;		_printf
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           	psect	text34
  9717  001EF8                     __ptext34:
  9718                           	opt stack 0
  9719  001EF8                     __div_to_l_:
  9720                           	opt stack 23
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;incstack = 0
  9724  001EF8  0100               	movlb	0	; () banked
  9725  001EFA  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  9726  001EFC  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  9727  001EFE  0100               	movlb	0	; () banked
  9728  001F00  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  9729  001F02  0100               	movlb	0	; () banked
  9730  001F04  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  9731  001F06  A4D8               	btfss	status,2,c
  9732  001F08  D00A               	goto	l4256
  9733                           
  9734                           ; BSR set to: 0
  9735  001F0A  0E00               	movlw	0
  9736  001F0C  0100               	movlb	0	; () banked
  9737  001F0E  6F80               	movwf	?__div_to_l_& (0+255),b
  9738  001F10  0E00               	movlw	0
  9739  001F12  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9740  001F14  0E00               	movlw	0
  9741  001F16  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9742  001F18  0E00               	movlw	0
  9743  001F1A  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9744                           
  9745                           ; BSR set to: 0
  9746  001F1C  0012               	return	
  9747  001F1E                     l4256:
  9748                           
  9749                           ; BSR set to: 0
  9750  001F1E  0100               	movlb	0	; () banked
  9751  001F20  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  9752  001F22  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  9753  001F24  0100               	movlb	0	; () banked
  9754  001F26  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  9755  001F28  0100               	movlb	0	; () banked
  9756  001F2A  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  9757  001F2C  A4D8               	btfss	status,2,c
  9758  001F2E  D00A               	goto	l4262
  9759                           
  9760                           ; BSR set to: 0
  9761  001F30  0E00               	movlw	0
  9762  001F32  0100               	movlb	0	; () banked
  9763  001F34  6F80               	movwf	?__div_to_l_& (0+255),b
  9764  001F36  0E00               	movlw	0
  9765  001F38  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9766  001F3A  0E00               	movlw	0
  9767  001F3C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9768  001F3E  0E00               	movlw	0
  9769  001F40  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9770                           
  9771                           ; BSR set to: 0
  9772  001F42  0012               	return	
  9773  001F44                     l4262:
  9774                           
  9775                           ; BSR set to: 0
  9776  001F44  0100               	movlb	0	; () banked
  9777  001F46  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  9778                           
  9779                           ; BSR set to: 0
  9780  001F48  0EFF               	movlw	255
  9781  001F4A  0100               	movlb	0	; () banked
  9782  001F4C  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  9783  001F4E  0EFF               	movlw	255
  9784  001F50  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  9785  001F52  0EFF               	movlw	255
  9786  001F54  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  9787  001F56  0E00               	movlw	0
  9788  001F58  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  9789                           
  9790                           ; BSR set to: 0
  9791  001F5A  0100               	movlb	0	; () banked
  9792  001F5C  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  9793  001F5E  0EFF               	movlw	255
  9794  001F60  0100               	movlb	0	; () banked
  9795  001F62  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  9796  001F64  0EFF               	movlw	255
  9797  001F66  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  9798  001F68  0EFF               	movlw	255
  9799  001F6A  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  9800  001F6C  0E00               	movlw	0
  9801  001F6E  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  9802                           
  9803                           ; BSR set to: 0
  9804  001F70  0E00               	movlw	0
  9805  001F72  0100               	movlb	0	; () banked
  9806  001F74  6F86               	movwf	__div_to_l_@quot& (0+255),b
  9807  001F76  0E00               	movlw	0
  9808  001F78  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  9809  001F7A  0E00               	movlw	0
  9810  001F7C  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  9811  001F7E  0E00               	movlw	0
  9812  001F80  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  9813                           
  9814                           ; BSR set to: 0
  9815  001F82  0E7F               	movlw	127
  9816  001F84  0100               	movlb	0	; () banked
  9817  001F86  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  9818                           
  9819                           ; BSR set to: 0
  9820  001F88  0100               	movlb	0	; () banked
  9821  001F8A  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  9822  001F8C  0FA0               	addlw	160
  9823  001F8E  0100               	movlb	0	; () banked
  9824  001F90  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  9825                           
  9826                           ; BSR set to: 0
  9827  001F92  0E20               	movlw	32
  9828  001F94  0100               	movlb	0	; () banked
  9829  001F96  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  9830  001F98                     l4276:
  9831                           
  9832                           ; BSR set to: 0
  9833  001F98  0100               	movlb	0	; () banked
  9834  001F9A  90D8               	bcf	status,0,c
  9835  001F9C  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  9836  001F9E  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9837  001FA0  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9838  001FA2  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9839                           
  9840                           ; BSR set to: 0
  9841  001FA4  0100               	movlb	0	; () banked
  9842  001FA6  5183               	movf	__div_to_l_@f2& (0+255),w,b
  9843  001FA8  0100               	movlb	0	; () banked
  9844  001FAA  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  9845  001FAC  0100               	movlb	0	; () banked
  9846  001FAE  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9847  001FB0  0100               	movlb	0	; () banked
  9848  001FB2  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  9849  001FB4  0100               	movlb	0	; () banked
  9850  001FB6  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9851  001FB8  0100               	movlb	0	; () banked
  9852  001FBA  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  9853  001FBC  0100               	movlb	0	; () banked
  9854  001FBE  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9855  001FC0  0100               	movlb	0	; () banked
  9856  001FC2  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  9857  001FC4  A0D8               	btfss	status,0,c
  9858  001FC6  D012               	goto	l4284
  9859                           
  9860                           ; BSR set to: 0
  9861  001FC8  0100               	movlb	0	; () banked
  9862  001FCA  5183               	movf	__div_to_l_@f2& (0+255),w,b
  9863  001FCC  0100               	movlb	0	; () banked
  9864  001FCE  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  9865  001FD0  0100               	movlb	0	; () banked
  9866  001FD2  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9867  001FD4  0100               	movlb	0	; () banked
  9868  001FD6  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  9869  001FD8  0100               	movlb	0	; () banked
  9870  001FDA  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9871  001FDC  0100               	movlb	0	; () banked
  9872  001FDE  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  9873  001FE0  0100               	movlb	0	; () banked
  9874  001FE2  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9875  001FE4  0100               	movlb	0	; () banked
  9876  001FE6  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  9877                           
  9878                           ; BSR set to: 0
  9879  001FE8  0100               	movlb	0	; () banked
  9880  001FEA  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  9881  001FEC                     l4284:
  9882                           
  9883                           ; BSR set to: 0
  9884  001FEC  0100               	movlb	0	; () banked
  9885  001FEE  90D8               	bcf	status,0,c
  9886  001FF0  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  9887  001FF2  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  9888  001FF4  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  9889  001FF6  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  9890                           
  9891                           ; BSR set to: 0
  9892  001FF8  0100               	movlb	0	; () banked
  9893  001FFA  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  9894  001FFC  D7CD               	goto	l4276
  9895                           
  9896                           ; BSR set to: 0
  9897                           
  9898                           ; BSR set to: 0
  9899  001FFE  0100               	movlb	0	; () banked
  9900  002000  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  9901  002002  D01A               	goto	l4300
  9902                           
  9903                           ; BSR set to: 0
  9904  002004  0100               	movlb	0	; () banked
  9905  002006  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  9906  002008  0A80               	xorlw	128
  9907  00200A  0F9F               	addlw	159
  9908  00200C  B0D8               	btfsc	status,0,c
  9909  00200E  D00A               	goto	l4296
  9910                           
  9911                           ; BSR set to: 0
  9912  002010  0E00               	movlw	0
  9913  002012  0100               	movlb	0	; () banked
  9914  002014  6F80               	movwf	?__div_to_l_& (0+255),b
  9915  002016  0E00               	movlw	0
  9916  002018  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9917  00201A  0E00               	movlw	0
  9918  00201C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9919  00201E  0E00               	movlw	0
  9920  002020  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9921                           
  9922                           ; BSR set to: 0
  9923  002022  0012               	return	
  9924  002024                     l4296:
  9925                           
  9926                           ; BSR set to: 0
  9927  002024  0100               	movlb	0	; () banked
  9928  002026  90D8               	bcf	status,0,c
  9929  002028  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9930  00202A  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9931  00202C  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9932  00202E  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  9933                           
  9934                           ; BSR set to: 0
  9935  002030  0100               	movlb	0	; () banked
  9936  002032  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9937  002034  D7F7               	goto	l4296
  9938                           
  9939                           ; BSR set to: 0
  9940  002036  D01B               	goto	l1001
  9941  002038                     l4300:
  9942                           
  9943                           ; BSR set to: 0
  9944  002038  0E1F               	movlw	31
  9945  00203A  0100               	movlb	0	; () banked
  9946  00203C  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9947  00203E  D012               	goto	l4308
  9948                           
  9949                           ; BSR set to: 0
  9950  002040  0E00               	movlw	0
  9951  002042  0100               	movlb	0	; () banked
  9952  002044  6F80               	movwf	?__div_to_l_& (0+255),b
  9953  002046  0E00               	movlw	0
  9954  002048  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9955  00204A  0E00               	movlw	0
  9956  00204C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9957  00204E  0E00               	movlw	0
  9958  002050  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9959                           
  9960                           ; BSR set to: 0
  9961  002052  0012               	return	
  9962  002054                     l4306:
  9963                           
  9964                           ; BSR set to: 0
  9965  002054  0100               	movlb	0	; () banked
  9966  002056  90D8               	bcf	status,0,c
  9967  002058  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  9968  00205A  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9969  00205C  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9970  00205E  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9971  002060  0100               	movlb	0	; () banked
  9972  002062  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  9973  002064                     l4308:
  9974                           
  9975                           ; BSR set to: 0
  9976  002064  0100               	movlb	0	; () banked
  9977  002066  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  9978  002068  0100               	movlb	0	; () banked
  9979  00206A  A4D8               	btfss	status,2,c
  9980  00206C  D7F3               	goto	l4306
  9981  00206E                     l1001:
  9982                           
  9983                           ; BSR set to: 0
  9984  00206E  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  9985  002072  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9986  002076  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9987  00207A  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9988                           
  9989                           ; BSR set to: 0
  9990  00207E  0012               	return		;funcret
  9991  002080                     __end_of__div_to_l_:
  9992                           	opt stack 0
  9993                           tblptru	equ	0xFF8
  9994                           tblptrh	equ	0xFF7
  9995                           tblptrl	equ	0xFF6
  9996                           tablat	equ	0xFF5
  9997                           prodh	equ	0xFF4
  9998                           prodl	equ	0xFF3
  9999                           intcon	equ	0xFF2
 10000                           postinc0	equ	0xFEE
 10001                           wreg	equ	0xFE8
 10002                           postdec1	equ	0xFE5
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function ___lltoft *****************
 10012 ;; Defined at:
 10013 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;  c               4    8[BANK0 ] unsigned long 
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;  exp             1   16[BANK0 ] unsigned char 
 10018 ;; Return value:  Size  Location     Type
 10019 ;;                  3    8[BANK0 ] float 
 10020 ;; Registers used:
 10021 ;;		wreg, status,2, status,0, cstack
 10022 ;; Tracked objects:
 10023 ;;		On entry : 0/0
 10024 ;;		On exit  : 0/0
 10025 ;;		Unchanged: 0/0
 10026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10027 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10029 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10030 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10031 ;;Total ram usage:        9 bytes
 10032 ;; Hardware stack levels used:    1
 10033 ;; Hardware stack levels required when called:    6
 10034 ;; This function calls:
 10035 ;;		___ftpack
 10036 ;; This function is called by:
 10037 ;;		_printf
 10038 ;; This function uses a non-reentrant model
 10039 ;;
 10040                           
 10041                           	psect	text35
 10042  00376A                     __ptext35:
 10043                           	opt stack 0
 10044  00376A                     ___lltoft:
 10045                           	opt stack 22
 10046                           
 10047                           ; BSR set to: 0
 10048                           ;incstack = 0
 10049  00376A  0E8E               	movlw	142
 10050  00376C  0100               	movlb	0	; () banked
 10051  00376E  6F90               	movwf	___lltoft@exp& (0+255),b
 10052  003770  D008               	goto	l4382
 10053  003772                     l4380:
 10054                           
 10055                           ; BSR set to: 0
 10056  003772  0100               	movlb	0	; () banked
 10057  003774  90D8               	bcf	status,0,c
 10058  003776  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 10059  003778  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 10060  00377A  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
 10061  00377C  3388               	rrcf	___lltoft@c& (0+255),f,b
 10062  00377E  0100               	movlb	0	; () banked
 10063  003780  2B90               	incf	___lltoft@exp& (0+255),f,b
 10064  003782                     l4382:
 10065                           
 10066                           ; BSR set to: 0
 10067  003782  0E00               	movlw	0
 10068  003784  0100               	movlb	0	; () banked
 10069  003786  1588               	andwf	___lltoft@c& (0+255),w,b
 10070  003788  0100               	movlb	0	; () banked
 10071  00378A  6F8C               	movwf	??___lltoft& (0+255),b
 10072  00378C  0E00               	movlw	0
 10073  00378E  0100               	movlb	0	; () banked
 10074  003790  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
 10075  003792  0100               	movlb	0	; () banked
 10076  003794  6F8D               	movwf	(??___lltoft+1)& (0+255),b
 10077  003796  0E00               	movlw	0
 10078  003798  0100               	movlb	0	; () banked
 10079  00379A  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
 10080  00379C  0100               	movlb	0	; () banked
 10081  00379E  6F8E               	movwf	(??___lltoft+2)& (0+255),b
 10082  0037A0  0EFF               	movlw	255
 10083  0037A2  0100               	movlb	0	; () banked
 10084  0037A4  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
 10085  0037A6  0100               	movlb	0	; () banked
 10086  0037A8  6F8F               	movwf	(??___lltoft+3)& (0+255),b
 10087  0037AA  0100               	movlb	0	; () banked
 10088  0037AC  518C               	movf	??___lltoft& (0+255),w,b
 10089  0037AE  0100               	movlb	0	; () banked
 10090  0037B0  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
 10091  0037B2  0100               	movlb	0	; () banked
 10092  0037B4  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
 10093  0037B6  0100               	movlb	0	; () banked
 10094  0037B8  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
 10095  0037BA  A4D8               	btfss	status,2,c
 10096  0037BC  D7DA               	goto	l4380
 10097                           
 10098                           ; BSR set to: 0
 10099                           
 10100                           ; BSR set to: 0
 10101  0037BE  C088  F080         	movff	___lltoft@c,___ftpack@arg
 10102  0037C2  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
 10103  0037C6  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
 10104  0037CA  C090  F083         	movff	___lltoft@exp,___ftpack@exp
 10105  0037CE  0E00               	movlw	0
 10106  0037D0  0100               	movlb	0	; () banked
 10107  0037D2  6F84               	movwf	___ftpack@sign& (0+255),b
 10108  0037D4  EC28  F014         	call	___ftpack	;wreg free
 10109  0037D8  C080  F088         	movff	?___ftpack,?___lltoft
 10110  0037DC  C081  F089         	movff	?___ftpack+1,?___lltoft+1
 10111  0037E0  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
 10112  0037E4  0012               	return	
 10113  0037E6                     __end_of___lltoft:
 10114                           	opt stack 0
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           postinc0	equ	0xFEE
 10123                           wreg	equ	0xFE8
 10124                           postdec1	equ	0xFE5
 10125                           fsr1l	equ	0xFE1
 10126                           indf2	equ	0xFDF
 10127                           postinc2	equ	0xFDE
 10128                           postdec2	equ	0xFDD
 10129                           fsr2h	equ	0xFDA
 10130                           fsr2l	equ	0xFD9
 10131                           status	equ	0xFD8
 10132                           
 10133 ;; *************** function ___llmod *****************
 10134 ;; Defined at:
 10135 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;  dividend        4   13[BANK0 ] unsigned long 
 10138 ;;  divisor         4   17[BANK0 ] unsigned long 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  counter         1   21[BANK0 ] unsigned char 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  4   13[BANK0 ] unsigned long 
 10143 ;; Registers used:
 10144 ;;		wreg, status,2, status,0
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10150 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;Total ram usage:        9 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    5
 10157 ;; This function calls:
 10158 ;;		Nothing
 10159 ;; This function is called by:
 10160 ;;		_printf
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           	psect	text36
 10165  003528                     __ptext36:
 10166                           	opt stack 0
 10167  003528                     ___llmod:
 10168                           	opt stack 23
 10169                           
 10170                           ;incstack = 0
 10171  003528  0100               	movlb	0	; () banked
 10172  00352A  5191               	movf	___llmod@divisor& (0+255),w,b
 10173  00352C  0100               	movlb	0	; () banked
 10174  00352E  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 10175  003530  0100               	movlb	0	; () banked
 10176  003532  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 10177  003534  0100               	movlb	0	; () banked
 10178  003536  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 10179  003538  B4D8               	btfsc	status,2,c
 10180  00353A  D03A               	goto	l1190
 10181                           
 10182                           ; BSR set to: 0
 10183  00353C  0E01               	movlw	1
 10184  00353E  0100               	movlb	0	; () banked
 10185  003540  6F95               	movwf	___llmod@counter& (0+255),b
 10186  003542  D008               	goto	l4368
 10187  003544                     l4366:
 10188                           
 10189                           ; BSR set to: 0
 10190  003544  0100               	movlb	0	; () banked
 10191  003546  90D8               	bcf	status,0,c
 10192  003548  3791               	rlcf	___llmod@divisor& (0+255),f,b
 10193  00354A  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 10194  00354C  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 10195  00354E  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 10196  003550  0100               	movlb	0	; () banked
 10197  003552  2B95               	incf	___llmod@counter& (0+255),f,b
 10198  003554                     l4368:
 10199                           
 10200                           ; BSR set to: 0
 10201  003554  0100               	movlb	0	; () banked
 10202  003556  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
 10203  003558  D7F5               	goto	l4366
 10204  00355A                     l4370:
 10205                           
 10206                           ; BSR set to: 0
 10207  00355A  0100               	movlb	0	; () banked
 10208  00355C  5191               	movf	___llmod@divisor& (0+255),w,b
 10209  00355E  0100               	movlb	0	; () banked
 10210  003560  5D8D               	subwf	___llmod@dividend& (0+255),w,b
 10211  003562  0100               	movlb	0	; () banked
 10212  003564  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
 10213  003566  0100               	movlb	0	; () banked
 10214  003568  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 10215  00356A  0100               	movlb	0	; () banked
 10216  00356C  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
 10217  00356E  0100               	movlb	0	; () banked
 10218  003570  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 10219  003572  0100               	movlb	0	; () banked
 10220  003574  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
 10221  003576  0100               	movlb	0	; () banked
 10222  003578  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 10223  00357A  A0D8               	btfss	status,0,c
 10224  00357C  D010               	goto	l4374
 10225                           
 10226                           ; BSR set to: 0
 10227  00357E  0100               	movlb	0	; () banked
 10228  003580  5191               	movf	___llmod@divisor& (0+255),w,b
 10229  003582  0100               	movlb	0	; () banked
 10230  003584  5F8D               	subwf	___llmod@dividend& (0+255),f,b
 10231  003586  0100               	movlb	0	; () banked
 10232  003588  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
 10233  00358A  0100               	movlb	0	; () banked
 10234  00358C  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 10235  00358E  0100               	movlb	0	; () banked
 10236  003590  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
 10237  003592  0100               	movlb	0	; () banked
 10238  003594  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 10239  003596  0100               	movlb	0	; () banked
 10240  003598  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
 10241  00359A  0100               	movlb	0	; () banked
 10242  00359C  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 10243  00359E                     l4374:
 10244                           
 10245                           ; BSR set to: 0
 10246  00359E  0100               	movlb	0	; () banked
 10247  0035A0  90D8               	bcf	status,0,c
 10248  0035A2  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 10249  0035A4  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 10250  0035A6  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 10251  0035A8  3391               	rrcf	___llmod@divisor& (0+255),f,b
 10252                           
 10253                           ; BSR set to: 0
 10254  0035AA  0100               	movlb	0	; () banked
 10255  0035AC  2F95               	decfsz	___llmod@counter& (0+255),f,b
 10256  0035AE  D7D5               	goto	l4370
 10257  0035B0                     l1190:
 10258                           
 10259                           ; BSR set to: 0
 10260  0035B0  C08D  F08D         	movff	___llmod@dividend,?___llmod
 10261  0035B4  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
 10262  0035B8  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
 10263  0035BC  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
 10264                           
 10265                           ; BSR set to: 0
 10266  0035C0  0012               	return		;funcret
 10267  0035C2                     __end_of___llmod:
 10268                           	opt stack 0
 10269                           tblptru	equ	0xFF8
 10270                           tblptrh	equ	0xFF7
 10271                           tblptrl	equ	0xFF6
 10272                           tablat	equ	0xFF5
 10273                           prodh	equ	0xFF4
 10274                           prodl	equ	0xFF3
 10275                           intcon	equ	0xFF2
 10276                           postinc0	equ	0xFEE
 10277                           wreg	equ	0xFE8
 10278                           postdec1	equ	0xFE5
 10279                           fsr1l	equ	0xFE1
 10280                           indf2	equ	0xFDF
 10281                           postinc2	equ	0xFDE
 10282                           postdec2	equ	0xFDD
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function ___fttol *****************
 10288 ;; Defined at:
 10289 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;  f1              3   70[BANK0 ] float 
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;  lval            4   80[BANK0 ] unsigned long 
 10294 ;;  exp1            1   84[BANK0 ] unsigned char 
 10295 ;;  sign1           1   79[BANK0 ] unsigned char 
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  4   70[BANK0 ] long 
 10298 ;; Registers used:
 10299 ;;		wreg, status,2, status,0
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10305 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;Total ram usage:       15 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    5
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		_angleToPulse
 10316 ;;		_printf
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           	psect	text37
 10321  002490                     __ptext37:
 10322                           	opt stack 0
 10323  002490                     ___fttol:
 10324                           	opt stack 22
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;incstack = 0
 10328  002490  C0C8  F0CA         	movff	___fttol@f1+2,??___fttol
 10329  002494  0100               	movlb	0	; () banked
 10330  002496  6BCB               	clrf	(??___fttol+1)& (0+255),b
 10331  002498  6BCC               	clrf	(??___fttol+2)& (0+255),b
 10332  00249A  0100               	movlb	0	; () banked
 10333  00249C  35C7               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10334  00249E  0100               	movlb	0	; () banked
 10335  0024A0  37CA               	rlcf	??___fttol& (0+255),f,b
 10336  0024A2  E301               	bnc	u3551
 10337  0024A4  81CB               	bsf	(??___fttol+1)& (0+255),0,b
 10338  0024A6                     u3551:
 10339  0024A6  0100               	movlb	0	; () banked
 10340  0024A8  51CA               	movf	??___fttol& (0+255),w,b
 10341  0024AA  0100               	movlb	0	; () banked
 10342  0024AC  6FD4               	movwf	___fttol@exp1& (0+255),b
 10343  0024AE  0100               	movlb	0	; () banked
 10344  0024B0  51D4               	movf	___fttol@exp1& (0+255),w,b
 10345  0024B2  A4D8               	btfss	status,2,c
 10346  0024B4  D00A               	goto	l4066
 10347                           
 10348                           ; BSR set to: 0
 10349  0024B6  0E00               	movlw	0
 10350  0024B8  0100               	movlb	0	; () banked
 10351  0024BA  6FC6               	movwf	?___fttol& (0+255),b
 10352  0024BC  0E00               	movlw	0
 10353  0024BE  6FC7               	movwf	(?___fttol+1)& (0+255),b
 10354  0024C0  0E00               	movlw	0
 10355  0024C2  6FC8               	movwf	(?___fttol+2)& (0+255),b
 10356  0024C4  0E00               	movlw	0
 10357  0024C6  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10358                           
 10359                           ; BSR set to: 0
 10360  0024C8  0012               	return	
 10361  0024CA                     l4066:
 10362                           
 10363                           ; BSR set to: 0
 10364  0024CA  0E17               	movlw	23
 10365  0024CC  0100               	movlb	0	; () banked
 10366  0024CE  6FCA               	movwf	??___fttol& (0+255),b
 10367  0024D0  C0C6  F0CB         	movff	___fttol@f1,??___fttol+1
 10368  0024D4  C0C7  F0CC         	movff	___fttol@f1+1,??___fttol+2
 10369  0024D8  C0C8  F0CD         	movff	___fttol@f1+2,??___fttol+3
 10370  0024DC  0100               	movlb	0	; () banked
 10371  0024DE  29CA               	incf	??___fttol& (0+255),w,b
 10372  0024E0  0100               	movlb	0	; () banked
 10373  0024E2  6FCE               	movwf	(??___fttol+4)& (0+255),b
 10374  0024E4  D005               	goto	u3570
 10375  0024E6                     u3575:
 10376  0024E6  0100               	movlb	0	; () banked
 10377  0024E8  90D8               	bcf	status,0,c
 10378  0024EA  33CD               	rrcf	(??___fttol+3)& (0+255),f,b
 10379  0024EC  33CC               	rrcf	(??___fttol+2)& (0+255),f,b
 10380  0024EE  33CB               	rrcf	(??___fttol+1)& (0+255),f,b
 10381  0024F0                     u3570:
 10382  0024F0  0100               	movlb	0	; () banked
 10383  0024F2  2FCE               	decfsz	(??___fttol+4)& (0+255),f,b
 10384  0024F4  D7F8               	goto	u3575
 10385  0024F6  0100               	movlb	0	; () banked
 10386  0024F8  51CB               	movf	(??___fttol+1)& (0+255),w,b
 10387  0024FA  0100               	movlb	0	; () banked
 10388  0024FC  6FCF               	movwf	___fttol@sign1& (0+255),b
 10389                           
 10390                           ; BSR set to: 0
 10391  0024FE  0100               	movlb	0	; () banked
 10392  002500  8FC7               	bsf	(___fttol@f1+1)& (0+255),7,b
 10393                           
 10394                           ; BSR set to: 0
 10395  002502  0EFF               	movlw	255
 10396  002504  0100               	movlb	0	; () banked
 10397  002506  17C6               	andwf	___fttol@f1& (0+255),f,b
 10398  002508  0EFF               	movlw	255
 10399  00250A  0100               	movlb	0	; () banked
 10400  00250C  17C7               	andwf	(___fttol@f1+1)& (0+255),f,b
 10401  00250E  0E00               	movlw	0
 10402  002510  0100               	movlb	0	; () banked
 10403  002512  17C8               	andwf	(___fttol@f1+2)& (0+255),f,b
 10404                           
 10405                           ; BSR set to: 0
 10406  002514  0100               	movlb	0	; () banked
 10407  002516  51C6               	movf	___fttol@f1& (0+255),w,b
 10408  002518  0100               	movlb	0	; () banked
 10409  00251A  6FD0               	movwf	___fttol@lval& (0+255),b
 10410  00251C  0100               	movlb	0	; () banked
 10411  00251E  51C7               	movf	(___fttol@f1+1)& (0+255),w,b
 10412  002520  0100               	movlb	0	; () banked
 10413  002522  6FD1               	movwf	(___fttol@lval+1)& (0+255),b
 10414  002524  0100               	movlb	0	; () banked
 10415  002526  51C8               	movf	(___fttol@f1+2)& (0+255),w,b
 10416  002528  0100               	movlb	0	; () banked
 10417  00252A  6FD2               	movwf	(___fttol@lval+2)& (0+255),b
 10418  00252C  0100               	movlb	0	; () banked
 10419  00252E  6BD3               	clrf	(___fttol@lval+3)& (0+255),b
 10420                           
 10421                           ; BSR set to: 0
 10422  002530  0E8E               	movlw	142
 10423  002532  0100               	movlb	0	; () banked
 10424  002534  5FD4               	subwf	___fttol@exp1& (0+255),f,b
 10425                           
 10426                           ; BSR set to: 0
 10427  002536  0100               	movlb	0	; () banked
 10428  002538  AFD4               	btfss	___fttol@exp1& (0+255),7,b
 10429  00253A  D01A               	goto	l4088
 10430                           
 10431                           ; BSR set to: 0
 10432  00253C  0100               	movlb	0	; () banked
 10433  00253E  51D4               	movf	___fttol@exp1& (0+255),w,b
 10434  002540  0A80               	xorlw	128
 10435  002542  0F8F               	addlw	143
 10436  002544  B0D8               	btfsc	status,0,c
 10437  002546  D00A               	goto	l4084
 10438                           
 10439                           ; BSR set to: 0
 10440  002548  0E00               	movlw	0
 10441  00254A  0100               	movlb	0	; () banked
 10442  00254C  6FC6               	movwf	?___fttol& (0+255),b
 10443  00254E  0E00               	movlw	0
 10444  002550  6FC7               	movwf	(?___fttol+1)& (0+255),b
 10445  002552  0E00               	movlw	0
 10446  002554  6FC8               	movwf	(?___fttol+2)& (0+255),b
 10447  002556  0E00               	movlw	0
 10448  002558  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10449                           
 10450                           ; BSR set to: 0
 10451  00255A  0012               	return	
 10452  00255C                     l4084:
 10453                           
 10454                           ; BSR set to: 0
 10455  00255C  0100               	movlb	0	; () banked
 10456  00255E  90D8               	bcf	status,0,c
 10457  002560  33D3               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10458  002562  33D2               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10459  002564  33D1               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10460  002566  33D0               	rrcf	___fttol@lval& (0+255),f,b
 10461                           
 10462                           ; BSR set to: 0
 10463  002568  0100               	movlb	0	; () banked
 10464  00256A  3FD4               	incfsz	___fttol@exp1& (0+255),f,b
 10465  00256C  D7F7               	goto	l4084
 10466                           
 10467                           ; BSR set to: 0
 10468  00256E  D01B               	goto	l4098
 10469  002570                     l4088:
 10470                           
 10471                           ; BSR set to: 0
 10472  002570  0E17               	movlw	23
 10473  002572  0100               	movlb	0	; () banked
 10474  002574  65D4               	cpfsgt	___fttol@exp1& (0+255),b
 10475  002576  D012               	goto	l4096
 10476                           
 10477                           ; BSR set to: 0
 10478  002578  0E00               	movlw	0
 10479  00257A  0100               	movlb	0	; () banked
 10480  00257C  6FC6               	movwf	?___fttol& (0+255),b
 10481  00257E  0E00               	movlw	0
 10482  002580  6FC7               	movwf	(?___fttol+1)& (0+255),b
 10483  002582  0E00               	movlw	0
 10484  002584  6FC8               	movwf	(?___fttol+2)& (0+255),b
 10485  002586  0E00               	movlw	0
 10486  002588  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10487                           
 10488                           ; BSR set to: 0
 10489  00258A  0012               	return	
 10490  00258C                     l4094:
 10491                           
 10492                           ; BSR set to: 0
 10493  00258C  0100               	movlb	0	; () banked
 10494  00258E  90D8               	bcf	status,0,c
 10495  002590  37D0               	rlcf	___fttol@lval& (0+255),f,b
 10496  002592  37D1               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10497  002594  37D2               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10498  002596  37D3               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10499  002598  0100               	movlb	0	; () banked
 10500  00259A  07D4               	decf	___fttol@exp1& (0+255),f,b
 10501  00259C                     l4096:
 10502                           
 10503                           ; BSR set to: 0
 10504  00259C  0100               	movlb	0	; () banked
 10505  00259E  51D4               	movf	___fttol@exp1& (0+255),w,b
 10506  0025A0  0100               	movlb	0	; () banked
 10507  0025A2  A4D8               	btfss	status,2,c
 10508  0025A4  D7F3               	goto	l4094
 10509  0025A6                     l4098:
 10510                           
 10511                           ; BSR set to: 0
 10512  0025A6  0100               	movlb	0	; () banked
 10513  0025A8  51CF               	movf	___fttol@sign1& (0+255),w,b
 10514  0025AA  0100               	movlb	0	; () banked
 10515  0025AC  B4D8               	btfsc	status,2,c
 10516  0025AE  D009               	goto	l4102
 10517                           
 10518                           ; BSR set to: 0
 10519  0025B0  0100               	movlb	0	; () banked
 10520  0025B2  1FD3               	comf	(___fttol@lval+3)& (0+255),f,b
 10521  0025B4  1FD2               	comf	(___fttol@lval+2)& (0+255),f,b
 10522  0025B6  1FD1               	comf	(___fttol@lval+1)& (0+255),f,b
 10523  0025B8  6DD0               	negf	___fttol@lval& (0+255),b
 10524  0025BA  0E00               	movlw	0
 10525  0025BC  23D1               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10526  0025BE  23D2               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10527  0025C0  23D3               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10528  0025C2                     l4102:
 10529                           
 10530                           ; BSR set to: 0
 10531  0025C2  C0D0  F0C6         	movff	___fttol@lval,?___fttol
 10532  0025C6  C0D1  F0C7         	movff	___fttol@lval+1,?___fttol+1
 10533  0025CA  C0D2  F0C8         	movff	___fttol@lval+2,?___fttol+2
 10534  0025CE  C0D3  F0C9         	movff	___fttol@lval+3,?___fttol+3
 10535  0025D2  0012               	return	
 10536  0025D4                     __end_of___fttol:
 10537                           	opt stack 0
 10538                           tblptru	equ	0xFF8
 10539                           tblptrh	equ	0xFF7
 10540                           tblptrl	equ	0xFF6
 10541                           tablat	equ	0xFF5
 10542                           prodh	equ	0xFF4
 10543                           prodl	equ	0xFF3
 10544                           intcon	equ	0xFF2
 10545                           postinc0	equ	0xFEE
 10546                           wreg	equ	0xFE8
 10547                           postdec1	equ	0xFE5
 10548                           fsr1l	equ	0xFE1
 10549                           indf2	equ	0xFDF
 10550                           postinc2	equ	0xFDE
 10551                           postdec2	equ	0xFDD
 10552                           fsr2h	equ	0xFDA
 10553                           fsr2l	equ	0xFD9
 10554                           status	equ	0xFD8
 10555                           
 10556 ;; *************** function ___ftsub *****************
 10557 ;; Defined at:
 10558 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;  f1              3   70[BANK0 ] float 
 10561 ;;  f2              3   73[BANK0 ] float 
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;		None
 10564 ;; Return value:  Size  Location     Type
 10565 ;;                  3   70[BANK0 ] float 
 10566 ;; Registers used:
 10567 ;;		wreg, status,2, status,0, cstack
 10568 ;; Tracked objects:
 10569 ;;		On entry : 0/0
 10570 ;;		On exit  : 0/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10573 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;Total ram usage:        6 bytes
 10578 ;; Hardware stack levels used:    1
 10579 ;; Hardware stack levels required when called:    7
 10580 ;; This function calls:
 10581 ;;		___ftadd
 10582 ;; This function is called by:
 10583 ;;		_printf
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           	psect	text38
 10588  003A40                     __ptext38:
 10589                           	opt stack 0
 10590  003A40                     ___ftsub:
 10591                           	opt stack 21
 10592                           
 10593                           ; BSR set to: 0
 10594                           ;incstack = 0
 10595  003A40  0100               	movlb	0	; () banked
 10596  003A42  51C9               	movf	___ftsub@f2& (0+255),w,b
 10597  003A44  0100               	movlb	0	; () banked
 10598  003A46  11CA               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10599  003A48  0100               	movlb	0	; () banked
 10600  003A4A  11CB               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10601  003A4C  B4D8               	btfsc	status,2,c
 10602  003A4E  D009               	goto	l4314
 10603                           
 10604                           ; BSR set to: 0
 10605  003A50  0E00               	movlw	0
 10606  003A52  0100               	movlb	0	; () banked
 10607  003A54  1BC9               	xorwf	___ftsub@f2& (0+255),f,b
 10608  003A56  0E00               	movlw	0
 10609  003A58  0100               	movlb	0	; () banked
 10610  003A5A  1BCA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10611  003A5C  0E80               	movlw	128
 10612  003A5E  0100               	movlb	0	; () banked
 10613  003A60  1BCB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10614  003A62                     l4314:
 10615                           
 10616                           ; BSR set to: 0
 10617  003A62  C0C6  F0BA         	movff	___ftsub@f1,___ftadd@f1
 10618  003A66  C0C7  F0BB         	movff	___ftsub@f1+1,___ftadd@f1+1
 10619  003A6A  C0C8  F0BC         	movff	___ftsub@f1+2,___ftadd@f1+2
 10620  003A6E  C0C9  F0BD         	movff	___ftsub@f2,___ftadd@f2
 10621  003A72  C0CA  F0BE         	movff	___ftsub@f2+1,___ftadd@f2+1
 10622  003A76  C0CB  F0BF         	movff	___ftsub@f2+2,___ftadd@f2+2
 10623  003A7A  ECB9  F00B         	call	___ftadd	;wreg free
 10624  003A7E  C0BA  F0C6         	movff	?___ftadd,?___ftsub
 10625  003A82  C0BB  F0C7         	movff	?___ftadd+1,?___ftsub+1
 10626  003A86  C0BC  F0C8         	movff	?___ftadd+2,?___ftsub+2
 10627  003A8A  0012               	return	
 10628  003A8C                     __end_of___ftsub:
 10629                           	opt stack 0
 10630                           tblptru	equ	0xFF8
 10631                           tblptrh	equ	0xFF7
 10632                           tblptrl	equ	0xFF6
 10633                           tablat	equ	0xFF5
 10634                           prodh	equ	0xFF4
 10635                           prodl	equ	0xFF3
 10636                           intcon	equ	0xFF2
 10637                           postinc0	equ	0xFEE
 10638                           wreg	equ	0xFE8
 10639                           postdec1	equ	0xFE5
 10640                           fsr1l	equ	0xFE1
 10641                           indf2	equ	0xFDF
 10642                           postinc2	equ	0xFDE
 10643                           postdec2	equ	0xFDD
 10644                           fsr2h	equ	0xFDA
 10645                           fsr2l	equ	0xFD9
 10646                           status	equ	0xFD8
 10647                           
 10648 ;; *************** function ___ftadd *****************
 10649 ;; Defined at:
 10650 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;  f1              3   58[BANK0 ] float 
 10653 ;;  f2              3   61[BANK0 ] float 
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;  exp1            1   69[BANK0 ] unsigned char 
 10656 ;;  exp2            1   68[BANK0 ] unsigned char 
 10657 ;;  sign            1   67[BANK0 ] unsigned char 
 10658 ;; Return value:  Size  Location     Type
 10659 ;;                  3   58[BANK0 ] float 
 10660 ;; Registers used:
 10661 ;;		wreg, status,2, status,0, cstack
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10667 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;Total ram usage:       12 bytes
 10672 ;; Hardware stack levels used:    1
 10673 ;; Hardware stack levels required when called:    6
 10674 ;; This function calls:
 10675 ;;		___ftpack
 10676 ;; This function is called by:
 10677 ;;		_angleToPulse
 10678 ;;		_printf
 10679 ;;		___ftsub
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           	psect	text39
 10684  001772                     __ptext39:
 10685                           	opt stack 0
 10686  001772                     ___ftadd:
 10687                           	opt stack 21
 10688                           
 10689                           ;incstack = 0
 10690  001772  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
 10691  001776  0100               	movlb	0	; () banked
 10692  001778  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10693  00177A  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10694  00177C  0100               	movlb	0	; () banked
 10695  00177E  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10696  001780  0100               	movlb	0	; () banked
 10697  001782  37C0               	rlcf	??___ftadd& (0+255),f,b
 10698  001784  E301               	bnc	u3101
 10699  001786  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10700  001788                     u3101:
 10701  001788  0100               	movlb	0	; () banked
 10702  00178A  51C0               	movf	??___ftadd& (0+255),w,b
 10703  00178C  0100               	movlb	0	; () banked
 10704  00178E  6FC5               	movwf	___ftadd@exp1& (0+255),b
 10705  001790  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
 10706  001794  0100               	movlb	0	; () banked
 10707  001796  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10708  001798  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10709  00179A  0100               	movlb	0	; () banked
 10710  00179C  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10711  00179E  0100               	movlb	0	; () banked
 10712  0017A0  37C0               	rlcf	??___ftadd& (0+255),f,b
 10713  0017A2  E301               	bnc	u3111
 10714  0017A4  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10715  0017A6                     u3111:
 10716  0017A6  0100               	movlb	0	; () banked
 10717  0017A8  51C0               	movf	??___ftadd& (0+255),w,b
 10718  0017AA  0100               	movlb	0	; () banked
 10719  0017AC  6FC4               	movwf	___ftadd@exp2& (0+255),b
 10720                           
 10721                           ; BSR set to: 0
 10722  0017AE  0100               	movlb	0	; () banked
 10723  0017B0  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10724  0017B2  0100               	movlb	0	; () banked
 10725  0017B4  B4D8               	btfsc	status,2,c
 10726  0017B6  D011               	goto	l1056
 10727                           
 10728                           ; BSR set to: 0
 10729  0017B8  0100               	movlb	0	; () banked
 10730  0017BA  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10731  0017BC  0100               	movlb	0	; () banked
 10732  0017BE  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10733  0017C0  B0D8               	btfsc	status,0,c
 10734  0017C2  D012               	goto	l3812
 10735                           
 10736                           ; BSR set to: 0
 10737  0017C4  0100               	movlb	0	; () banked
 10738  0017C6  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10739  0017C8  0800               	sublw	0
 10740  0017CA  0100               	movlb	0	; () banked
 10741  0017CC  25C4               	addwf	___ftadd@exp2& (0+255),w,b
 10742  0017CE  0100               	movlb	0	; () banked
 10743  0017D0  6FC0               	movwf	??___ftadd& (0+255),b
 10744  0017D2  0E18               	movlw	24
 10745  0017D4  0100               	movlb	0	; () banked
 10746  0017D6  65C0               	cpfsgt	??___ftadd& (0+255),b
 10747  0017D8  D007               	goto	l3812
 10748  0017DA                     l1056:
 10749                           
 10750                           ; BSR set to: 0
 10751  0017DA  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
 10752  0017DE  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
 10753  0017E2  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
 10754  0017E6  0012               	return	
 10755  0017E8                     l3812:
 10756                           
 10757                           ; BSR set to: 0
 10758  0017E8  0100               	movlb	0	; () banked
 10759  0017EA  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10760  0017EC  0100               	movlb	0	; () banked
 10761  0017EE  B4D8               	btfsc	status,2,c
 10762  0017F0  D011               	goto	l1060
 10763                           
 10764                           ; BSR set to: 0
 10765  0017F2  0100               	movlb	0	; () banked
 10766  0017F4  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10767  0017F6  0100               	movlb	0	; () banked
 10768  0017F8  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10769  0017FA  B0D8               	btfsc	status,0,c
 10770  0017FC  D012               	goto	l3818
 10771                           
 10772                           ; BSR set to: 0
 10773  0017FE  0100               	movlb	0	; () banked
 10774  001800  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10775  001802  0800               	sublw	0
 10776  001804  0100               	movlb	0	; () banked
 10777  001806  25C5               	addwf	___ftadd@exp1& (0+255),w,b
 10778  001808  0100               	movlb	0	; () banked
 10779  00180A  6FC0               	movwf	??___ftadd& (0+255),b
 10780  00180C  0E18               	movlw	24
 10781  00180E  0100               	movlb	0	; () banked
 10782  001810  65C0               	cpfsgt	??___ftadd& (0+255),b
 10783  001812  D007               	goto	l3818
 10784  001814                     l1060:
 10785                           
 10786                           ; BSR set to: 0
 10787  001814  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
 10788  001818  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
 10789  00181C  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
 10790  001820  0012               	return	
 10791  001822                     l3818:
 10792                           
 10793                           ; BSR set to: 0
 10794  001822  0E06               	movlw	6
 10795  001824  0100               	movlb	0	; () banked
 10796  001826  6FC3               	movwf	___ftadd@sign& (0+255),b
 10797                           
 10798                           ; BSR set to: 0
 10799  001828  0100               	movlb	0	; () banked
 10800  00182A  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10801  00182C  D002               	goto	l3824
 10802                           
 10803                           ; BSR set to: 0
 10804  00182E  0100               	movlb	0	; () banked
 10805  001830  8FC3               	bsf	___ftadd@sign& (0+255),7,b
 10806  001832                     l3824:
 10807                           
 10808                           ; BSR set to: 0
 10809  001832  0100               	movlb	0	; () banked
 10810  001834  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10811  001836  D002               	goto	l1062
 10812                           
 10813                           ; BSR set to: 0
 10814  001838  0100               	movlb	0	; () banked
 10815  00183A  8DC3               	bsf	___ftadd@sign& (0+255),6,b
 10816  00183C                     l1062:
 10817                           
 10818                           ; BSR set to: 0
 10819  00183C  0100               	movlb	0	; () banked
 10820  00183E  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10821                           
 10822                           ; BSR set to: 0
 10823  001840  0EFF               	movlw	255
 10824  001842  0100               	movlb	0	; () banked
 10825  001844  17BA               	andwf	___ftadd@f1& (0+255),f,b
 10826  001846  0EFF               	movlw	255
 10827  001848  0100               	movlb	0	; () banked
 10828  00184A  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10829  00184C  0E00               	movlw	0
 10830  00184E  0100               	movlb	0	; () banked
 10831  001850  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10832  001852  0100               	movlb	0	; () banked
 10833  001854  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10834                           
 10835                           ; BSR set to: 0
 10836  001856  0EFF               	movlw	255
 10837  001858  0100               	movlb	0	; () banked
 10838  00185A  17BD               	andwf	___ftadd@f2& (0+255),f,b
 10839  00185C  0EFF               	movlw	255
 10840  00185E  0100               	movlb	0	; () banked
 10841  001860  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10842  001862  0E00               	movlw	0
 10843  001864  0100               	movlb	0	; () banked
 10844  001866  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10845                           
 10846                           ; BSR set to: 0
 10847  001868  0100               	movlb	0	; () banked
 10848  00186A  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10849  00186C  0100               	movlb	0	; () banked
 10850  00186E  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10851  001870  B0D8               	btfsc	status,0,c
 10852  001872  D025               	goto	l3844
 10853  001874                     l3834:
 10854                           
 10855                           ; BSR set to: 0
 10856  001874  0100               	movlb	0	; () banked
 10857  001876  90D8               	bcf	status,0,c
 10858  001878  37BD               	rlcf	___ftadd@f2& (0+255),f,b
 10859  00187A  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10860  00187C  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10861  00187E  0100               	movlb	0	; () banked
 10862  001880  07C4               	decf	___ftadd@exp2& (0+255),f,b
 10863                           
 10864                           ; BSR set to: 0
 10865  001882  0100               	movlb	0	; () banked
 10866  001884  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10867  001886  0100               	movlb	0	; () banked
 10868  001888  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10869  00188A  B4D8               	btfsc	status,2,c
 10870  00188C  D011               	goto	l3842
 10871                           
 10872                           ; BSR set to: 0
 10873  00188E  0100               	movlb	0	; () banked
 10874  001890  07C3               	decf	___ftadd@sign& (0+255),f,b
 10875  001892  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10876  001896  0E07               	movlw	7
 10877  001898  0100               	movlb	0	; () banked
 10878  00189A  17C0               	andwf	??___ftadd& (0+255),f,b
 10879  00189C  B4D8               	btfsc	status,2,c
 10880  00189E  D008               	goto	l3842
 10881  0018A0  D7E9               	goto	l3834
 10882  0018A2                     l3840:
 10883                           
 10884                           ; BSR set to: 0
 10885  0018A2  0100               	movlb	0	; () banked
 10886  0018A4  90D8               	bcf	status,0,c
 10887  0018A6  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10888  0018A8  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10889  0018AA  33BA               	rrcf	___ftadd@f1& (0+255),f,b
 10890  0018AC  0100               	movlb	0	; () banked
 10891  0018AE  2BC5               	incf	___ftadd@exp1& (0+255),f,b
 10892  0018B0                     l3842:
 10893                           
 10894                           ; BSR set to: 0
 10895  0018B0  0100               	movlb	0	; () banked
 10896  0018B2  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10897  0018B4  0100               	movlb	0	; () banked
 10898  0018B6  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10899  0018B8  B4D8               	btfsc	status,2,c
 10900  0018BA  D02B               	goto	l1071
 10901  0018BC  D7F2               	goto	l3840
 10902  0018BE                     l3844:
 10903                           
 10904                           ; BSR set to: 0
 10905  0018BE  0100               	movlb	0	; () banked
 10906  0018C0  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10907  0018C2  0100               	movlb	0	; () banked
 10908  0018C4  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10909  0018C6  B0D8               	btfsc	status,0,c
 10910  0018C8  D024               	goto	l1071
 10911  0018CA                     l3846:
 10912                           
 10913                           ; BSR set to: 0
 10914  0018CA  0100               	movlb	0	; () banked
 10915  0018CC  90D8               	bcf	status,0,c
 10916  0018CE  37BA               	rlcf	___ftadd@f1& (0+255),f,b
 10917  0018D0  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10918  0018D2  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10919  0018D4  0100               	movlb	0	; () banked
 10920  0018D6  07C5               	decf	___ftadd@exp1& (0+255),f,b
 10921                           
 10922                           ; BSR set to: 0
 10923  0018D8  0100               	movlb	0	; () banked
 10924  0018DA  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10925  0018DC  0100               	movlb	0	; () banked
 10926  0018DE  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10927  0018E0  B4D8               	btfsc	status,2,c
 10928  0018E2  D011               	goto	l3854
 10929                           
 10930                           ; BSR set to: 0
 10931  0018E4  0100               	movlb	0	; () banked
 10932  0018E6  07C3               	decf	___ftadd@sign& (0+255),f,b
 10933  0018E8  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10934  0018EC  0E07               	movlw	7
 10935  0018EE  0100               	movlb	0	; () banked
 10936  0018F0  17C0               	andwf	??___ftadd& (0+255),f,b
 10937  0018F2  B4D8               	btfsc	status,2,c
 10938  0018F4  D008               	goto	l3854
 10939  0018F6  D7E9               	goto	l3846
 10940  0018F8                     l3852:
 10941                           
 10942                           ; BSR set to: 0
 10943  0018F8  0100               	movlb	0	; () banked
 10944  0018FA  90D8               	bcf	status,0,c
 10945  0018FC  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10946  0018FE  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10947  001900  33BD               	rrcf	___ftadd@f2& (0+255),f,b
 10948  001902  0100               	movlb	0	; () banked
 10949  001904  2BC4               	incf	___ftadd@exp2& (0+255),f,b
 10950  001906                     l3854:
 10951                           
 10952                           ; BSR set to: 0
 10953  001906  0100               	movlb	0	; () banked
 10954  001908  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10955  00190A  0100               	movlb	0	; () banked
 10956  00190C  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10957  00190E  A4D8               	btfss	status,2,c
 10958  001910  D7F3               	goto	l3852
 10959  001912                     l1071:
 10960                           
 10961                           ; BSR set to: 0
 10962  001912  0100               	movlb	0	; () banked
 10963  001914  AFC3               	btfss	___ftadd@sign& (0+255),7,b
 10964  001916  D012               	goto	l1080
 10965                           
 10966                           ; BSR set to: 0
 10967  001918  0EFF               	movlw	255
 10968  00191A  0100               	movlb	0	; () banked
 10969  00191C  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
 10970  00191E  0EFF               	movlw	255
 10971  001920  0100               	movlb	0	; () banked
 10972  001922  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10973  001924  0EFF               	movlw	255
 10974  001926  0100               	movlb	0	; () banked
 10975  001928  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10976  00192A  0E01               	movlw	1
 10977  00192C  0100               	movlb	0	; () banked
 10978  00192E  27BA               	addwf	___ftadd@f1& (0+255),f,b
 10979  001930  0E00               	movlw	0
 10980  001932  0100               	movlb	0	; () banked
 10981  001934  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10982  001936  0E00               	movlw	0
 10983  001938  0100               	movlb	0	; () banked
 10984  00193A  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10985  00193C                     l1080:
 10986                           
 10987                           ; BSR set to: 0
 10988  00193C  0100               	movlb	0	; () banked
 10989  00193E  ADC3               	btfss	___ftadd@sign& (0+255),6,b
 10990  001940  D012               	goto	l3860
 10991                           
 10992                           ; BSR set to: 0
 10993  001942  0EFF               	movlw	255
 10994  001944  0100               	movlb	0	; () banked
 10995  001946  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 10996  001948  0EFF               	movlw	255
 10997  00194A  0100               	movlb	0	; () banked
 10998  00194C  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10999  00194E  0EFF               	movlw	255
 11000  001950  0100               	movlb	0	; () banked
 11001  001952  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11002  001954  0E01               	movlw	1
 11003  001956  0100               	movlb	0	; () banked
 11004  001958  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11005  00195A  0E00               	movlw	0
 11006  00195C  0100               	movlb	0	; () banked
 11007  00195E  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11008  001960  0E00               	movlw	0
 11009  001962  0100               	movlb	0	; () banked
 11010  001964  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11011  001966                     l3860:
 11012                           
 11013                           ; BSR set to: 0
 11014  001966  0E00               	movlw	0
 11015  001968  0100               	movlb	0	; () banked
 11016  00196A  6FC3               	movwf	___ftadd@sign& (0+255),b
 11017                           
 11018                           ; BSR set to: 0
 11019  00196C  0100               	movlb	0	; () banked
 11020  00196E  51BA               	movf	___ftadd@f1& (0+255),w,b
 11021  001970  0100               	movlb	0	; () banked
 11022  001972  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11023  001974  0100               	movlb	0	; () banked
 11024  001976  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
 11025  001978  0100               	movlb	0	; () banked
 11026  00197A  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11027  00197C  0100               	movlb	0	; () banked
 11028  00197E  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
 11029  001980  0100               	movlb	0	; () banked
 11030  001982  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11031                           
 11032                           ; BSR set to: 0
 11033  001984  0100               	movlb	0	; () banked
 11034  001986  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11035  001988  D015               	goto	l3870
 11036                           
 11037                           ; BSR set to: 0
 11038  00198A  0EFF               	movlw	255
 11039  00198C  0100               	movlb	0	; () banked
 11040  00198E  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 11041  001990  0EFF               	movlw	255
 11042  001992  0100               	movlb	0	; () banked
 11043  001994  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11044  001996  0EFF               	movlw	255
 11045  001998  0100               	movlb	0	; () banked
 11046  00199A  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11047  00199C  0E01               	movlw	1
 11048  00199E  0100               	movlb	0	; () banked
 11049  0019A0  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11050  0019A2  0E00               	movlw	0
 11051  0019A4  0100               	movlb	0	; () banked
 11052  0019A6  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11053  0019A8  0E00               	movlw	0
 11054  0019AA  0100               	movlb	0	; () banked
 11055  0019AC  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11056                           
 11057                           ; BSR set to: 0
 11058  0019AE  0E01               	movlw	1
 11059  0019B0  0100               	movlb	0	; () banked
 11060  0019B2  6FC3               	movwf	___ftadd@sign& (0+255),b
 11061  0019B4                     l3870:
 11062                           
 11063                           ; BSR set to: 0
 11064  0019B4  C0BD  F080         	movff	___ftadd@f2,___ftpack@arg
 11065  0019B8  C0BE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 11066  0019BC  C0BF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 11067  0019C0  C0C5  F083         	movff	___ftadd@exp1,___ftpack@exp
 11068  0019C4  C0C3  F084         	movff	___ftadd@sign,___ftpack@sign
 11069  0019C8  EC28  F014         	call	___ftpack	;wreg free
 11070  0019CC  C080  F0BA         	movff	?___ftpack,?___ftadd
 11071  0019D0  C081  F0BB         	movff	?___ftpack+1,?___ftadd+1
 11072  0019D4  C082  F0BC         	movff	?___ftpack+2,?___ftadd+2
 11073  0019D8  0012               	return	
 11074  0019DA                     __end_of___ftadd:
 11075                           	opt stack 0
 11076                           tblptru	equ	0xFF8
 11077                           tblptrh	equ	0xFF7
 11078                           tblptrl	equ	0xFF6
 11079                           tablat	equ	0xFF5
 11080                           prodh	equ	0xFF4
 11081                           prodl	equ	0xFF3
 11082                           intcon	equ	0xFF2
 11083                           postinc0	equ	0xFEE
 11084                           wreg	equ	0xFE8
 11085                           postdec1	equ	0xFE5
 11086                           fsr1l	equ	0xFE1
 11087                           indf2	equ	0xFDF
 11088                           postinc2	equ	0xFDE
 11089                           postdec2	equ	0xFDD
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function ___ftpack *****************
 11095 ;; Defined at:
 11096 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;  arg             3    0[BANK0 ] unsigned um
 11099 ;;  exp             1    3[BANK0 ] unsigned char 
 11100 ;;  sign            1    4[BANK0 ] unsigned char 
 11101 ;; Auto vars:     Size  Location     Type
 11102 ;;		None
 11103 ;; Return value:  Size  Location     Type
 11104 ;;                  3    0[BANK0 ] float 
 11105 ;; Registers used:
 11106 ;;		wreg, status,2, status,0
 11107 ;; Tracked objects:
 11108 ;;		On entry : 0/0
 11109 ;;		On exit  : 0/0
 11110 ;;		Unchanged: 0/0
 11111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11112 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;Total ram usage:        8 bytes
 11117 ;; Hardware stack levels used:    1
 11118 ;; Hardware stack levels required when called:    5
 11119 ;; This function calls:
 11120 ;;		Nothing
 11121 ;; This function is called by:
 11122 ;;		___altoft
 11123 ;;		___awtoft
 11124 ;;		___ftadd
 11125 ;;		___ftdiv
 11126 ;;		___ftmul
 11127 ;;		___lltoft
 11128 ;; This function uses a non-reentrant model
 11129 ;;
 11130                           
 11131                           	psect	text40
 11132  002850                     __ptext40:
 11133                           	opt stack 0
 11134  002850                     ___ftpack:
 11135                           	opt stack 21
 11136                           
 11137                           ;incstack = 0
 11138  002850  0100               	movlb	0	; () banked
 11139  002852  5183               	movf	___ftpack@exp& (0+255),w,b
 11140  002854  0100               	movlb	0	; () banked
 11141  002856  B4D8               	btfsc	status,2,c
 11142  002858  D008               	goto	l3748
 11143                           
 11144                           ; BSR set to: 0
 11145  00285A  0100               	movlb	0	; () banked
 11146  00285C  5180               	movf	___ftpack@arg& (0+255),w,b
 11147  00285E  0100               	movlb	0	; () banked
 11148  002860  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11149  002862  0100               	movlb	0	; () banked
 11150  002864  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11151  002866  A4D8               	btfss	status,2,c
 11152  002868  D011               	goto	l3754
 11153  00286A                     l3748:
 11154                           
 11155                           ; BSR set to: 0
 11156  00286A  0E00               	movlw	0
 11157  00286C  0100               	movlb	0	; () banked
 11158  00286E  6F80               	movwf	?___ftpack& (0+255),b
 11159  002870  0E00               	movlw	0
 11160  002872  0100               	movlb	0	; () banked
 11161  002874  6F81               	movwf	(?___ftpack+1)& (0+255),b
 11162  002876  0E00               	movlw	0
 11163  002878  0100               	movlb	0	; () banked
 11164  00287A  6F82               	movwf	(?___ftpack+2)& (0+255),b
 11165                           
 11166                           ; BSR set to: 0
 11167  00287C  0012               	return	
 11168  00287E                     l3752:
 11169                           
 11170                           ; BSR set to: 0
 11171  00287E  0100               	movlb	0	; () banked
 11172  002880  2B83               	incf	___ftpack@exp& (0+255),f,b
 11173  002882  0100               	movlb	0	; () banked
 11174  002884  90D8               	bcf	status,0,c
 11175  002886  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11176  002888  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11177  00288A  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11178  00288C                     l3754:
 11179                           
 11180                           ; BSR set to: 0
 11181  00288C  0E00               	movlw	0
 11182  00288E  0100               	movlb	0	; () banked
 11183  002890  1580               	andwf	___ftpack@arg& (0+255),w,b
 11184  002892  0100               	movlb	0	; () banked
 11185  002894  6F85               	movwf	??___ftpack& (0+255),b
 11186  002896  0E00               	movlw	0
 11187  002898  0100               	movlb	0	; () banked
 11188  00289A  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11189  00289C  0100               	movlb	0	; () banked
 11190  00289E  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11191  0028A0  0EFE               	movlw	254
 11192  0028A2  0100               	movlb	0	; () banked
 11193  0028A4  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11194  0028A6  0100               	movlb	0	; () banked
 11195  0028A8  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11196  0028AA  0100               	movlb	0	; () banked
 11197  0028AC  5185               	movf	??___ftpack& (0+255),w,b
 11198  0028AE  0100               	movlb	0	; () banked
 11199  0028B0  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11200  0028B2  0100               	movlb	0	; () banked
 11201  0028B4  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11202  0028B6  B4D8               	btfsc	status,2,c
 11203  0028B8  D011               	goto	l3760
 11204  0028BA  D7E1               	goto	l3752
 11205  0028BC                     l3756:
 11206                           
 11207                           ; BSR set to: 0
 11208  0028BC  0100               	movlb	0	; () banked
 11209  0028BE  2B83               	incf	___ftpack@exp& (0+255),f,b
 11210                           
 11211                           ; BSR set to: 0
 11212  0028C0  0E01               	movlw	1
 11213  0028C2  0100               	movlb	0	; () banked
 11214  0028C4  2780               	addwf	___ftpack@arg& (0+255),f,b
 11215  0028C6  0E00               	movlw	0
 11216  0028C8  0100               	movlb	0	; () banked
 11217  0028CA  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11218  0028CC  0E00               	movlw	0
 11219  0028CE  0100               	movlb	0	; () banked
 11220  0028D0  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11221  0028D2  0100               	movlb	0	; () banked
 11222  0028D4  90D8               	bcf	status,0,c
 11223  0028D6  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11224  0028D8  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11225  0028DA  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11226  0028DC                     l3760:
 11227                           
 11228                           ; BSR set to: 0
 11229  0028DC  0E00               	movlw	0
 11230  0028DE  0100               	movlb	0	; () banked
 11231  0028E0  1580               	andwf	___ftpack@arg& (0+255),w,b
 11232  0028E2  0100               	movlb	0	; () banked
 11233  0028E4  6F85               	movwf	??___ftpack& (0+255),b
 11234  0028E6  0E00               	movlw	0
 11235  0028E8  0100               	movlb	0	; () banked
 11236  0028EA  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11237  0028EC  0100               	movlb	0	; () banked
 11238  0028EE  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11239  0028F0  0EFF               	movlw	255
 11240  0028F2  0100               	movlb	0	; () banked
 11241  0028F4  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11242  0028F6  0100               	movlb	0	; () banked
 11243  0028F8  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11244  0028FA  0100               	movlb	0	; () banked
 11245  0028FC  5185               	movf	??___ftpack& (0+255),w,b
 11246  0028FE  0100               	movlb	0	; () banked
 11247  002900  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11248  002902  0100               	movlb	0	; () banked
 11249  002904  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11250  002906  B4D8               	btfsc	status,2,c
 11251  002908  D008               	goto	l3764
 11252  00290A  D7D8               	goto	l3756
 11253  00290C                     l3762:
 11254                           
 11255                           ; BSR set to: 0
 11256  00290C  0100               	movlb	0	; () banked
 11257  00290E  0783               	decf	___ftpack@exp& (0+255),f,b
 11258  002910  0100               	movlb	0	; () banked
 11259  002912  90D8               	bcf	status,0,c
 11260  002914  3780               	rlcf	___ftpack@arg& (0+255),f,b
 11261  002916  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11262  002918  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11263  00291A                     l3764:
 11264                           
 11265                           ; BSR set to: 0
 11266  00291A  0100               	movlb	0	; () banked
 11267  00291C  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11268  00291E  D004               	goto	l1033
 11269                           
 11270                           ; BSR set to: 0
 11271  002920  0E02               	movlw	2
 11272  002922  0100               	movlb	0	; () banked
 11273  002924  6183               	cpfslt	___ftpack@exp& (0+255),b
 11274  002926  D7F2               	goto	l3762
 11275  002928                     l1033:
 11276                           
 11277                           ; BSR set to: 0
 11278  002928  0100               	movlb	0	; () banked
 11279  00292A  B183               	btfsc	___ftpack@exp& (0+255),0,b
 11280  00292C  D002               	goto	l3770
 11281                           
 11282                           ; BSR set to: 0
 11283  00292E  0100               	movlb	0	; () banked
 11284  002930  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11285  002932                     l3770:
 11286                           
 11287                           ; BSR set to: 0
 11288  002932  0100               	movlb	0	; () banked
 11289  002934  90D8               	bcf	status,0,c
 11290  002936  3383               	rrcf	___ftpack@exp& (0+255),f,b
 11291  002938  0100               	movlb	0	; () banked
 11292  00293A  5183               	movf	___ftpack@exp& (0+255),w,b
 11293  00293C  0100               	movlb	0	; () banked
 11294  00293E  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11295                           
 11296                           ; BSR set to: 0
 11297  002940  0100               	movlb	0	; () banked
 11298  002942  5184               	movf	___ftpack@sign& (0+255),w,b
 11299  002944  0100               	movlb	0	; () banked
 11300  002946  B4D8               	btfsc	status,2,c
 11301  002948  D002               	goto	l3776
 11302                           
 11303                           ; BSR set to: 0
 11304  00294A  0100               	movlb	0	; () banked
 11305  00294C  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11306  00294E                     l3776:
 11307                           
 11308                           ; BSR set to: 0
 11309  00294E  C080  F080         	movff	___ftpack@arg,?___ftpack
 11310  002952  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 11311  002956  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 11312  00295A  0012               	return	
 11313  00295C                     __end_of___ftpack:
 11314                           	opt stack 0
 11315                           tblptru	equ	0xFF8
 11316                           tblptrh	equ	0xFF7
 11317                           tblptrl	equ	0xFF6
 11318                           tablat	equ	0xFF5
 11319                           prodh	equ	0xFF4
 11320                           prodl	equ	0xFF3
 11321                           intcon	equ	0xFF2
 11322                           postinc0	equ	0xFEE
 11323                           wreg	equ	0xFE8
 11324                           postdec1	equ	0xFE5
 11325                           fsr1l	equ	0xFE1
 11326                           indf2	equ	0xFDF
 11327                           postinc2	equ	0xFDE
 11328                           postdec2	equ	0xFDD
 11329                           fsr2h	equ	0xFDA
 11330                           fsr2l	equ	0xFD9
 11331                           status	equ	0xFD8
 11332                           
 11333 ;; *************** function ___ftneg *****************
 11334 ;; Defined at:
 11335 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 11336 ;; Parameters:    Size  Location     Type
 11337 ;;  f1              3    0[BANK0 ] float 
 11338 ;; Auto vars:     Size  Location     Type
 11339 ;;		None
 11340 ;; Return value:  Size  Location     Type
 11341 ;;                  3    0[BANK0 ] float 
 11342 ;; Registers used:
 11343 ;;		wreg, status,2, status,0
 11344 ;; Tracked objects:
 11345 ;;		On entry : 0/0
 11346 ;;		On exit  : 0/0
 11347 ;;		Unchanged: 0/0
 11348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11349 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;Total ram usage:        3 bytes
 11354 ;; Hardware stack levels used:    1
 11355 ;; Hardware stack levels required when called:    5
 11356 ;; This function calls:
 11357 ;;		Nothing
 11358 ;; This function is called by:
 11359 ;;		_printf
 11360 ;; This function uses a non-reentrant model
 11361 ;;
 11362                           
 11363                           	psect	text41
 11364  003D1A                     __ptext41:
 11365                           	opt stack 0
 11366  003D1A                     ___ftneg:
 11367                           	opt stack 23
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;incstack = 0
 11371  003D1A  0100               	movlb	0	; () banked
 11372  003D1C  5180               	movf	___ftneg@f1& (0+255),w,b
 11373  003D1E  0100               	movlb	0	; () banked
 11374  003D20  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11375  003D22  0100               	movlb	0	; () banked
 11376  003D24  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11377  003D26  B4D8               	btfsc	status,2,c
 11378  003D28  D009               	goto	l1130
 11379                           
 11380                           ; BSR set to: 0
 11381  003D2A  0E00               	movlw	0
 11382  003D2C  0100               	movlb	0	; () banked
 11383  003D2E  1B80               	xorwf	___ftneg@f1& (0+255),f,b
 11384  003D30  0E00               	movlw	0
 11385  003D32  0100               	movlb	0	; () banked
 11386  003D34  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11387  003D36  0E80               	movlw	128
 11388  003D38  0100               	movlb	0	; () banked
 11389  003D3A  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11390  003D3C                     l1130:
 11391                           
 11392                           ; BSR set to: 0
 11393  003D3C  C080  F080         	movff	___ftneg@f1,?___ftneg
 11394  003D40  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
 11395  003D44  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
 11396                           
 11397                           ; BSR set to: 0
 11398  003D48  0012               	return		;funcret
 11399  003D4A                     __end_of___ftneg:
 11400                           	opt stack 0
 11401                           tblptru	equ	0xFF8
 11402                           tblptrh	equ	0xFF7
 11403                           tblptrl	equ	0xFF6
 11404                           tablat	equ	0xFF5
 11405                           prodh	equ	0xFF4
 11406                           prodl	equ	0xFF3
 11407                           intcon	equ	0xFF2
 11408                           postinc0	equ	0xFEE
 11409                           wreg	equ	0xFE8
 11410                           postdec1	equ	0xFE5
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           fsr2h	equ	0xFDA
 11416                           fsr2l	equ	0xFD9
 11417                           status	equ	0xFD8
 11418                           
 11419 ;; *************** function ___ftge *****************
 11420 ;; Defined at:
 11421 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;  ff1             3    0[BANK0 ] float 
 11424 ;;  ff2             3    3[BANK0 ] float 
 11425 ;; Auto vars:     Size  Location     Type
 11426 ;;		None
 11427 ;; Return value:  Size  Location     Type
 11428 ;;		None               void
 11429 ;; Registers used:
 11430 ;;		wreg, status,2, status,0
 11431 ;; Tracked objects:
 11432 ;;		On entry : 0/0
 11433 ;;		On exit  : 0/0
 11434 ;;		Unchanged: 0/0
 11435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11436 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11440 ;;Total ram usage:        9 bytes
 11441 ;; Hardware stack levels used:    1
 11442 ;; Hardware stack levels required when called:    5
 11443 ;; This function calls:
 11444 ;;		Nothing
 11445 ;; This function is called by:
 11446 ;;		_sortBattery
 11447 ;;		_printf
 11448 ;; This function uses a non-reentrant model
 11449 ;;
 11450                           
 11451                           	psect	text42
 11452  002EF6                     __ptext42:
 11453                           	opt stack 0
 11454  002EF6                     ___ftge:
 11455                           	opt stack 23
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;incstack = 0
 11459  002EF6  0100               	movlb	0	; () banked
 11460  002EF8  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11461  002EFA  D01D               	goto	l4322
 11462                           
 11463                           ; BSR set to: 0
 11464  002EFC  C080  F086         	movff	___ftge@ff1,??___ftge
 11465  002F00  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
 11466  002F04  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
 11467  002F08  0100               	movlb	0	; () banked
 11468  002F0A  1F86               	comf	??___ftge& (0+255),f,b
 11469  002F0C  1F87               	comf	(??___ftge+1)& (0+255),f,b
 11470  002F0E  1F88               	comf	(??___ftge+2)& (0+255),f,b
 11471  002F10  2B86               	incf	??___ftge& (0+255),f,b
 11472  002F12  0E00               	movlw	0
 11473  002F14  2387               	addwfc	(??___ftge+1)& (0+255),f,b
 11474  002F16  2388               	addwfc	(??___ftge+2)& (0+255),f,b
 11475  002F18  0E00               	movlw	0
 11476  002F1A  0100               	movlb	0	; () banked
 11477  002F1C  2586               	addwf	??___ftge& (0+255),w,b
 11478  002F1E  0100               	movlb	0	; () banked
 11479  002F20  6F80               	movwf	___ftge@ff1& (0+255),b
 11480  002F22  0E00               	movlw	0
 11481  002F24  0100               	movlb	0	; () banked
 11482  002F26  2187               	addwfc	(??___ftge+1)& (0+255),w,b
 11483  002F28  0100               	movlb	0	; () banked
 11484  002F2A  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
 11485  002F2C  0E80               	movlw	128
 11486  002F2E  0100               	movlb	0	; () banked
 11487  002F30  2188               	addwfc	(??___ftge+2)& (0+255),w,b
 11488  002F32  0100               	movlb	0	; () banked
 11489  002F34  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
 11490  002F36                     l4322:
 11491                           
 11492                           ; BSR set to: 0
 11493  002F36  0100               	movlb	0	; () banked
 11494  002F38  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11495  002F3A  D01D               	goto	l4326
 11496                           
 11497                           ; BSR set to: 0
 11498  002F3C  C083  F086         	movff	___ftge@ff2,??___ftge
 11499  002F40  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
 11500  002F44  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
 11501  002F48  0100               	movlb	0	; () banked
 11502  002F4A  1F86               	comf	??___ftge& (0+255),f,b
 11503  002F4C  1F87               	comf	(??___ftge+1)& (0+255),f,b
 11504  002F4E  1F88               	comf	(??___ftge+2)& (0+255),f,b
 11505  002F50  2B86               	incf	??___ftge& (0+255),f,b
 11506  002F52  0E00               	movlw	0
 11507  002F54  2387               	addwfc	(??___ftge+1)& (0+255),f,b
 11508  002F56  2388               	addwfc	(??___ftge+2)& (0+255),f,b
 11509  002F58  0E00               	movlw	0
 11510  002F5A  0100               	movlb	0	; () banked
 11511  002F5C  2586               	addwf	??___ftge& (0+255),w,b
 11512  002F5E  0100               	movlb	0	; () banked
 11513  002F60  6F83               	movwf	___ftge@ff2& (0+255),b
 11514  002F62  0E00               	movlw	0
 11515  002F64  0100               	movlb	0	; () banked
 11516  002F66  2187               	addwfc	(??___ftge+1)& (0+255),w,b
 11517  002F68  0100               	movlb	0	; () banked
 11518  002F6A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
 11519  002F6C  0E80               	movlw	128
 11520  002F6E  0100               	movlb	0	; () banked
 11521  002F70  2188               	addwfc	(??___ftge+2)& (0+255),w,b
 11522  002F72  0100               	movlb	0	; () banked
 11523  002F74  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
 11524  002F76                     l4326:
 11525                           
 11526                           ; BSR set to: 0
 11527  002F76  0E00               	movlw	0
 11528  002F78  0100               	movlb	0	; () banked
 11529  002F7A  1B80               	xorwf	___ftge@ff1& (0+255),f,b
 11530  002F7C  0E00               	movlw	0
 11531  002F7E  0100               	movlb	0	; () banked
 11532  002F80  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11533  002F82  0E80               	movlw	128
 11534  002F84  0100               	movlb	0	; () banked
 11535  002F86  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11536                           
 11537                           ; BSR set to: 0
 11538  002F88  0E00               	movlw	0
 11539  002F8A  0100               	movlb	0	; () banked
 11540  002F8C  1B83               	xorwf	___ftge@ff2& (0+255),f,b
 11541  002F8E  0E00               	movlw	0
 11542  002F90  0100               	movlb	0	; () banked
 11543  002F92  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11544  002F94  0E80               	movlw	128
 11545  002F96  0100               	movlb	0	; () banked
 11546  002F98  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11547  002F9A  0100               	movlb	0	; () banked
 11548  002F9C  5183               	movf	___ftge@ff2& (0+255),w,b
 11549  002F9E  0100               	movlb	0	; () banked
 11550  002FA0  5D80               	subwf	___ftge@ff1& (0+255),w,b
 11551  002FA2  0100               	movlb	0	; () banked
 11552  002FA4  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
 11553  002FA6  0100               	movlb	0	; () banked
 11554  002FA8  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11555  002FAA  0100               	movlb	0	; () banked
 11556  002FAC  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
 11557  002FAE  0100               	movlb	0	; () banked
 11558  002FB0  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11559  002FB2  B0D8               	btfsc	status,0,c
 11560  002FB4  D002               	goto	l4332
 11561                           
 11562                           ; BSR set to: 0
 11563  002FB6  90D8               	bcf	status,0,c
 11564  002FB8  0012               	return	
 11565  002FBA                     l4332:
 11566                           
 11567                           ; BSR set to: 0
 11568  002FBA  80D8               	bsf	status,0,c
 11569                           
 11570                           ; BSR set to: 0
 11571  002FBC  0012               	return	
 11572  002FBE                     __end_of___ftge:
 11573                           	opt stack 0
 11574                           tblptru	equ	0xFF8
 11575                           tblptrh	equ	0xFF7
 11576                           tblptrl	equ	0xFF6
 11577                           tablat	equ	0xFF5
 11578                           prodh	equ	0xFF4
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           postinc0	equ	0xFEE
 11582                           wreg	equ	0xFE8
 11583                           postdec1	equ	0xFE5
 11584                           fsr1l	equ	0xFE1
 11585                           indf2	equ	0xFDF
 11586                           postinc2	equ	0xFDE
 11587                           postdec2	equ	0xFDD
 11588                           fsr2h	equ	0xFDA
 11589                           fsr2l	equ	0xFD9
 11590                           status	equ	0xFD8
 11591                           
 11592 ;; *************** function _lcdClear *****************
 11593 ;; Defined at:
 11594 ;;		line 74 in file "lcd.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;		None
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;		None
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  1    wreg      void 
 11601 ;; Registers used:
 11602 ;;		wreg, status,2, status,0, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;Total ram usage:        0 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:    7
 11615 ;; This function calls:
 11616 ;;		_lcdInst
 11617 ;; This function is called by:
 11618 ;;		_main
 11619 ;;		_sortBattery
 11620 ;;		_pause
 11621 ;;		_dateTime
 11622 ;;		_mainMenu
 11623 ;;		_runSelect
 11624 ;;		_runMenu
 11625 ;;		_runTime
 11626 ;;		_runStats
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           	psect	text43
 11631  003F5E                     __ptext43:
 11632                           	opt stack 0
 11633  003F5E                     _lcdClear:
 11634                           	opt stack 21
 11635                           
 11636                           ;lcd.c: 75: lcdInst(0b00000001);
 11637                           
 11638                           ; BSR set to: 0
 11639                           ;incstack = 0
 11640  003F5E  0E01               	movlw	1
 11641  003F60  ECFD  F01E         	call	_lcdInst
 11642  003F64  0012               	return		;funcret
 11643  003F66                     __end_of_lcdClear:
 11644                           	opt stack 0
 11645                           tblptru	equ	0xFF8
 11646                           tblptrh	equ	0xFF7
 11647                           tblptrl	equ	0xFF6
 11648                           tablat	equ	0xFF5
 11649                           prodh	equ	0xFF4
 11650                           prodl	equ	0xFF3
 11651                           intcon	equ	0xFF2
 11652                           postinc0	equ	0xFEE
 11653                           wreg	equ	0xFE8
 11654                           postdec1	equ	0xFE5
 11655                           fsr1l	equ	0xFE1
 11656                           indf2	equ	0xFDF
 11657                           postinc2	equ	0xFDE
 11658                           postdec2	equ	0xFDD
 11659                           fsr2h	equ	0xFDA
 11660                           fsr2l	equ	0xFD9
 11661                           status	equ	0xFD8
 11662                           
 11663 ;; *************** function _pinSetup *****************
 11664 ;; Defined at:
 11665 ;;		line 174 in file "main.c"
 11666 ;; Parameters:    Size  Location     Type
 11667 ;;		None
 11668 ;; Auto vars:     Size  Location     Type
 11669 ;;		None
 11670 ;; Return value:  Size  Location     Type
 11671 ;;                  1    wreg      void 
 11672 ;; Registers used:
 11673 ;;		wreg, status,2, status,0
 11674 ;; Tracked objects:
 11675 ;;		On entry : 0/0
 11676 ;;		On exit  : 0/0
 11677 ;;		Unchanged: 0/0
 11678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11683 ;;Total ram usage:        0 bytes
 11684 ;; Hardware stack levels used:    1
 11685 ;; Hardware stack levels required when called:    5
 11686 ;; This function calls:
 11687 ;;		Nothing
 11688 ;; This function is called by:
 11689 ;;		_main
 11690 ;; This function uses a non-reentrant model
 11691 ;;
 11692                           
 11693                           	psect	text44
 11694  003C3C                     __ptext44:
 11695                           	opt stack 0
 11696  003C3C                     _pinSetup:
 11697                           	opt stack 25
 11698                           
 11699                           ;main.c: 180: TRISA = 0xFF;
 11700                           
 11701                           ;incstack = 0
 11702  003C3C  6892               	setf	3986,c	;volatile
 11703                           
 11704                           ;main.c: 181: TRISB = 0xFF;
 11705  003C3E  6893               	setf	3987,c	;volatile
 11706                           
 11707                           ;main.c: 182: TRISC = 0x00;
 11708  003C40  0E00               	movlw	0
 11709  003C42  6E94               	movwf	3988,c	;volatile
 11710                           
 11711                           ;main.c: 183: TRISD = 0x00;
 11712  003C44  0E00               	movlw	0
 11713  003C46  6E95               	movwf	3989,c	;volatile
 11714                           
 11715                           ;main.c: 184: TRISE = 0x00;
 11716  003C48  0E00               	movlw	0
 11717  003C4A  6E96               	movwf	3990,c	;volatile
 11718                           
 11719                           ;main.c: 186: LATA = 0x00;
 11720  003C4C  0E00               	movlw	0
 11721  003C4E  6E89               	movwf	3977,c	;volatile
 11722                           
 11723                           ;main.c: 187: LATB = 0x00;
 11724  003C50  0E00               	movlw	0
 11725  003C52  6E8A               	movwf	3978,c	;volatile
 11726                           
 11727                           ;main.c: 188: LATC = 0x00;
 11728  003C54  0E00               	movlw	0
 11729  003C56  6E8B               	movwf	3979,c	;volatile
 11730                           
 11731                           ;main.c: 189: LATD = 0x00;
 11732  003C58  0E00               	movlw	0
 11733  003C5A  6E8C               	movwf	3980,c	;volatile
 11734                           
 11735                           ;main.c: 190: LATE = 0x00;
 11736  003C5C  0E00               	movlw	0
 11737  003C5E  6E8D               	movwf	3981,c	;volatile
 11738                           
 11739                           ;main.c: 192: ADCON0 = 0x00;
 11740  003C60  0E00               	movlw	0
 11741  003C62  6EC2               	movwf	4034,c	;volatile
 11742                           
 11743                           ;main.c: 193: ADCON1 |= 0x0E;
 11744  003C64  0E0E               	movlw	14
 11745  003C66  12C1               	iorwf	4033,f,c	;volatile
 11746                           
 11747                           ;main.c: 197: ADCON2 = 0;
 11748  003C68  0E00               	movlw	0
 11749  003C6A  6EC0               	movwf	4032,c	;volatile
 11750                           
 11751                           ;main.c: 198: ADCON2 |= 0b010;
 11752  003C6C  82C0               	bsf	4032,1,c	;volatile
 11753                           
 11754                           ;main.c: 199: ADCON2 |= 0b110<<3;
 11755  003C6E  0E30               	movlw	48
 11756  003C70  12C0               	iorwf	4032,f,c	;volatile
 11757                           
 11758                           ;main.c: 200: ADCON2 |= 1<<7;
 11759  003C72  8EC0               	bsf	4032,7,c	;volatile
 11760                           
 11761                           ;main.c: 204: INT0IE = 1;
 11762  003C74  88F2               	bsf	intcon,4,c	;volatile
 11763                           
 11764                           ;main.c: 205: (INTCONbits.GIE = 1);
 11765  003C76  8EF2               	bsf	intcon,7,c	;volatile
 11766  003C78  0012               	return		;funcret
 11767  003C7A                     __end_of_pinSetup:
 11768                           	opt stack 0
 11769                           tblptru	equ	0xFF8
 11770                           tblptrh	equ	0xFF7
 11771                           tblptrl	equ	0xFF6
 11772                           tablat	equ	0xFF5
 11773                           prodh	equ	0xFF4
 11774                           prodl	equ	0xFF3
 11775                           intcon	equ	0xFF2
 11776                           postinc0	equ	0xFEE
 11777                           wreg	equ	0xFE8
 11778                           postdec1	equ	0xFE5
 11779                           fsr1l	equ	0xFE1
 11780                           indf2	equ	0xFDF
 11781                           postinc2	equ	0xFDE
 11782                           postdec2	equ	0xFDD
 11783                           fsr2h	equ	0xFDA
 11784                           fsr2l	equ	0xFD9
 11785                           status	equ	0xFD8
 11786                           
 11787 ;; *************** function _initRTC *****************
 11788 ;; Defined at:
 11789 ;;		line 19 in file "RTC.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;		None
 11792 ;; Auto vars:     Size  Location     Type
 11793 ;;		None
 11794 ;; Return value:  Size  Location     Type
 11795 ;;                  1    wreg      void 
 11796 ;; Registers used:
 11797 ;;		wreg, status,2, status,0, cstack
 11798 ;; Tracked objects:
 11799 ;;		On entry : 0/0
 11800 ;;		On exit  : 0/0
 11801 ;;		Unchanged: 0/0
 11802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11807 ;;Total ram usage:        0 bytes
 11808 ;; Hardware stack levels used:    1
 11809 ;; Hardware stack levels required when called:    7
 11810 ;; This function calls:
 11811 ;;		_I2C_Master_Init
 11812 ;; This function is called by:
 11813 ;;		_main
 11814 ;; This function uses a non-reentrant model
 11815 ;;
 11816                           
 11817                           	psect	text45
 11818  003F0A                     __ptext45:
 11819                           	opt stack 0
 11820  003F0A                     _initRTC:
 11821                           	opt stack 23
 11822                           
 11823                           ;RTC.c: 20: I2C_Master_Init(10000);
 11824                           
 11825                           ;incstack = 0
 11826  003F0A  0E10               	movlw	16
 11827  003F0C  0100               	movlb	0	; () banked
 11828  003F0E  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
 11829  003F10  0E27               	movlw	39
 11830  003F12  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
 11831  003F14  0E00               	movlw	0
 11832  003F16  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
 11833  003F18  0E00               	movlw	0
 11834  003F1A  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
 11835  003F1C  EC9F  F01C         	call	_I2C_Master_Init	;wreg free
 11836  003F20  0012               	return		;funcret
 11837  003F22                     __end_of_initRTC:
 11838                           	opt stack 0
 11839                           tblptru	equ	0xFF8
 11840                           tblptrh	equ	0xFF7
 11841                           tblptrl	equ	0xFF6
 11842                           tablat	equ	0xFF5
 11843                           prodh	equ	0xFF4
 11844                           prodl	equ	0xFF3
 11845                           intcon	equ	0xFF2
 11846                           postinc0	equ	0xFEE
 11847                           wreg	equ	0xFE8
 11848                           postdec1	equ	0xFE5
 11849                           fsr1l	equ	0xFE1
 11850                           indf2	equ	0xFDF
 11851                           postinc2	equ	0xFDE
 11852                           postdec2	equ	0xFDD
 11853                           fsr2h	equ	0xFDA
 11854                           fsr2l	equ	0xFD9
 11855                           status	equ	0xFD8
 11856                           
 11857 ;; *************** function _I2C_Master_Init *****************
 11858 ;; Defined at:
 11859 ;;		line 13 in file "I2C.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;  c               4   13[BANK0 ] const unsigned long 
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;		None
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      void 
 11866 ;; Registers used:
 11867 ;;		wreg, status,2, status,0, cstack
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11873 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11875 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11877 ;;Total ram usage:        8 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    6
 11880 ;; This function calls:
 11881 ;;		___lldiv
 11882 ;; This function is called by:
 11883 ;;		_initRTC
 11884 ;;		_testFrequency
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           	psect	text46
 11889  00393E                     __ptext46:
 11890                           	opt stack 0
 11891  00393E                     _I2C_Master_Init:
 11892                           	opt stack 23
 11893                           
 11894                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 11895                           
 11896                           ;incstack = 0
 11897  00393E  0E00               	movlw	0
 11898  003940  6EC7               	movwf	4039,c	;volatile
 11899                           
 11900                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 11901  003942  0E28               	movlw	40
 11902  003944  6EC6               	movwf	4038,c	;volatile
 11903                           
 11904                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 11905  003946  0E00               	movlw	0
 11906  003948  6EC5               	movwf	4037,c	;volatile
 11907                           
 11908                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 11909  00394A  0E80               	movlw	128
 11910  00394C  0100               	movlb	0	; () banked
 11911  00394E  6F80               	movwf	___lldiv@dividend& (0+255),b
 11912  003950  0E96               	movlw	150
 11913  003952  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 11914  003954  0E98               	movlw	152
 11915  003956  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 11916  003958  0E00               	movlw	0
 11917  00395A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 11918  00395C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 11919  003960  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 11920  003964  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 11921  003968  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 11922  00396C  0E02               	movlw	2
 11923  00396E                     u5225:
 11924  00396E  90D8               	bcf	status,0,c
 11925  003970  0100               	movlb	0	; () banked
 11926  003972  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 11927  003974  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 11928  003976  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 11929  003978  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 11930  00397A  2EE8               	decfsz	wreg,f,c
 11931  00397C  D7F8               	goto	u5225
 11932  00397E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 11933  003982  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11934  003986  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11935  00398A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11936  00398E  EC3E  F018         	call	___lldiv	;wreg free
 11937  003992  0100               	movlb	0	; () banked
 11938  003994  0580               	decf	?___lldiv& (0+255),w,b
 11939  003996  6EC8               	movwf	4040,c	;volatile
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;I2C.c: 20: TRISC3 = 1;
 11943  003998  8694               	bsf	3988,3,c	;volatile
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;I2C.c: 21: TRISC4 = 1;
 11947  00399A  8894               	bsf	3988,4,c	;volatile
 11948                           
 11949                           ; BSR set to: 0
 11950  00399C  0012               	return		;funcret
 11951  00399E                     __end_of_I2C_Master_Init:
 11952                           	opt stack 0
 11953                           tblptru	equ	0xFF8
 11954                           tblptrh	equ	0xFF7
 11955                           tblptrl	equ	0xFF6
 11956                           tablat	equ	0xFF5
 11957                           prodh	equ	0xFF4
 11958                           prodl	equ	0xFF3
 11959                           intcon	equ	0xFF2
 11960                           postinc0	equ	0xFEE
 11961                           wreg	equ	0xFE8
 11962                           postdec1	equ	0xFE5
 11963                           fsr1l	equ	0xFE1
 11964                           indf2	equ	0xFDF
 11965                           postinc2	equ	0xFDE
 11966                           postdec2	equ	0xFDD
 11967                           fsr2h	equ	0xFDA
 11968                           fsr2l	equ	0xFD9
 11969                           status	equ	0xFD8
 11970                           
 11971 ;; *************** function ___lldiv *****************
 11972 ;; Defined at:
 11973 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;  dividend        4    0[BANK0 ] unsigned long 
 11976 ;;  divisor         4    4[BANK0 ] unsigned long 
 11977 ;; Auto vars:     Size  Location     Type
 11978 ;;  quotient        4    8[BANK0 ] unsigned long 
 11979 ;;  counter         1   12[BANK0 ] unsigned char 
 11980 ;; Return value:  Size  Location     Type
 11981 ;;                  4    0[BANK0 ] unsigned long 
 11982 ;; Registers used:
 11983 ;;		wreg, status,2, status,0
 11984 ;; Tracked objects:
 11985 ;;		On entry : 0/0
 11986 ;;		On exit  : 0/0
 11987 ;;		Unchanged: 0/0
 11988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11989 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11990 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11992 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;Total ram usage:       13 bytes
 11994 ;; Hardware stack levels used:    1
 11995 ;; Hardware stack levels required when called:    5
 11996 ;; This function calls:
 11997 ;;		Nothing
 11998 ;; This function is called by:
 11999 ;;		_I2C_Master_Init
 12000 ;;		_printf
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           	psect	text47
 12005  00307C                     __ptext47:
 12006                           	opt stack 0
 12007  00307C                     ___lldiv:
 12008                           	opt stack 23
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;incstack = 0
 12012  00307C  0E00               	movlw	0
 12013  00307E  0100               	movlb	0	; () banked
 12014  003080  6F88               	movwf	___lldiv@quotient& (0+255),b
 12015  003082  0E00               	movlw	0
 12016  003084  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 12017  003086  0E00               	movlw	0
 12018  003088  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 12019  00308A  0E00               	movlw	0
 12020  00308C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 12021                           
 12022                           ; BSR set to: 0
 12023  00308E  0100               	movlb	0	; () banked
 12024  003090  5184               	movf	___lldiv@divisor& (0+255),w,b
 12025  003092  0100               	movlb	0	; () banked
 12026  003094  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12027  003096  0100               	movlb	0	; () banked
 12028  003098  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12029  00309A  0100               	movlb	0	; () banked
 12030  00309C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12031  00309E  B4D8               	btfsc	status,2,c
 12032  0030A0  D042               	goto	l1180
 12033                           
 12034                           ; BSR set to: 0
 12035  0030A2  0E01               	movlw	1
 12036  0030A4  0100               	movlb	0	; () banked
 12037  0030A6  6F8C               	movwf	___lldiv@counter& (0+255),b
 12038  0030A8  D008               	goto	l4348
 12039  0030AA                     l4346:
 12040                           
 12041                           ; BSR set to: 0
 12042  0030AA  0100               	movlb	0	; () banked
 12043  0030AC  90D8               	bcf	status,0,c
 12044  0030AE  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 12045  0030B0  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12046  0030B2  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12047  0030B4  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12048  0030B6  0100               	movlb	0	; () banked
 12049  0030B8  2B8C               	incf	___lldiv@counter& (0+255),f,b
 12050  0030BA                     l4348:
 12051                           
 12052                           ; BSR set to: 0
 12053  0030BA  0100               	movlb	0	; () banked
 12054  0030BC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12055  0030BE  D7F5               	goto	l4346
 12056  0030C0                     l4350:
 12057                           
 12058                           ; BSR set to: 0
 12059  0030C0  0100               	movlb	0	; () banked
 12060  0030C2  90D8               	bcf	status,0,c
 12061  0030C4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 12062  0030C6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12063  0030C8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12064  0030CA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12065                           
 12066                           ; BSR set to: 0
 12067  0030CC  0100               	movlb	0	; () banked
 12068  0030CE  5184               	movf	___lldiv@divisor& (0+255),w,b
 12069  0030D0  0100               	movlb	0	; () banked
 12070  0030D2  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 12071  0030D4  0100               	movlb	0	; () banked
 12072  0030D6  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12073  0030D8  0100               	movlb	0	; () banked
 12074  0030DA  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12075  0030DC  0100               	movlb	0	; () banked
 12076  0030DE  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12077  0030E0  0100               	movlb	0	; () banked
 12078  0030E2  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12079  0030E4  0100               	movlb	0	; () banked
 12080  0030E6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12081  0030E8  0100               	movlb	0	; () banked
 12082  0030EA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12083  0030EC  A0D8               	btfss	status,0,c
 12084  0030EE  D012               	goto	l4358
 12085                           
 12086                           ; BSR set to: 0
 12087  0030F0  0100               	movlb	0	; () banked
 12088  0030F2  5184               	movf	___lldiv@divisor& (0+255),w,b
 12089  0030F4  0100               	movlb	0	; () banked
 12090  0030F6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 12091  0030F8  0100               	movlb	0	; () banked
 12092  0030FA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12093  0030FC  0100               	movlb	0	; () banked
 12094  0030FE  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12095  003100  0100               	movlb	0	; () banked
 12096  003102  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12097  003104  0100               	movlb	0	; () banked
 12098  003106  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12099  003108  0100               	movlb	0	; () banked
 12100  00310A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12101  00310C  0100               	movlb	0	; () banked
 12102  00310E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12103                           
 12104                           ; BSR set to: 0
 12105  003110  0100               	movlb	0	; () banked
 12106  003112  8188               	bsf	___lldiv@quotient& (0+255),0,b
 12107  003114                     l4358:
 12108                           
 12109                           ; BSR set to: 0
 12110  003114  0100               	movlb	0	; () banked
 12111  003116  90D8               	bcf	status,0,c
 12112  003118  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12113  00311A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12114  00311C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12115  00311E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 12116                           
 12117                           ; BSR set to: 0
 12118  003120  0100               	movlb	0	; () banked
 12119  003122  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 12120  003124  D7CD               	goto	l4350
 12121  003126                     l1180:
 12122                           
 12123                           ; BSR set to: 0
 12124  003126  C088  F080         	movff	___lldiv@quotient,?___lldiv
 12125  00312A  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 12126  00312E  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 12127  003132  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 12128                           
 12129                           ; BSR set to: 0
 12130  003136  0012               	return		;funcret
 12131  003138                     __end_of___lldiv:
 12132                           	opt stack 0
 12133                           tblptru	equ	0xFF8
 12134                           tblptrh	equ	0xFF7
 12135                           tblptrl	equ	0xFF6
 12136                           tablat	equ	0xFF5
 12137                           prodh	equ	0xFF4
 12138                           prodl	equ	0xFF3
 12139                           intcon	equ	0xFF2
 12140                           postinc0	equ	0xFEE
 12141                           wreg	equ	0xFE8
 12142                           postdec1	equ	0xFE5
 12143                           fsr1l	equ	0xFE1
 12144                           indf2	equ	0xFDF
 12145                           postinc2	equ	0xFDE
 12146                           postdec2	equ	0xFDD
 12147                           fsr2h	equ	0xFDA
 12148                           fsr2l	equ	0xFD9
 12149                           status	equ	0xFD8
 12150                           
 12151 ;; *************** function _initLCD *****************
 12152 ;; Defined at:
 12153 ;;		line 15 in file "lcd.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;		None
 12156 ;; Auto vars:     Size  Location     Type
 12157 ;;		None
 12158 ;; Return value:  Size  Location     Type
 12159 ;;                  1    wreg      void 
 12160 ;; Registers used:
 12161 ;;		wreg, status,2, status,0, cstack
 12162 ;; Tracked objects:
 12163 ;;		On entry : 0/0
 12164 ;;		On exit  : 0/0
 12165 ;;		Unchanged: 0/0
 12166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12171 ;;Total ram usage:        1 bytes
 12172 ;; Hardware stack levels used:    1
 12173 ;; Hardware stack levels required when called:    7
 12174 ;; This function calls:
 12175 ;;		_lcdInst
 12176 ;; This function is called by:
 12177 ;;		_main
 12178 ;; This function uses a non-reentrant model
 12179 ;;
 12180                           
 12181                           	psect	text48
 12182  003B6C                     __ptext48:
 12183                           	opt stack 0
 12184  003B6C                     _initLCD:
 12185                           	opt stack 23
 12186                           
 12187                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 12188                           
 12189                           ; BSR set to: 0
 12190                           ;incstack = 0
 12191  003B6C  0E31               	movlw	49
 12192  003B6E  0100               	movlb	0	; () banked
 12193  003B70  6F84               	movwf	??_initLCD& (0+255),b
 12194  003B72  0EB2               	movlw	178
 12195  003B74                     u5917:
 12196  003B74  2EE8               	decfsz	wreg,f,c
 12197  003B76  D7FE               	bra	u5917
 12198  003B78  2F84               	decfsz	??_initLCD& (0+255),f,b
 12199  003B7A  D7FC               	bra	u5917
 12200  003B7C  F000               	nop	
 12201                           
 12202                           ;lcd.c: 18: lcdInst(0b00110011);
 12203  003B7E  0E33               	movlw	51
 12204  003B80  ECFD  F01E         	call	_lcdInst
 12205                           
 12206                           ;lcd.c: 19: lcdInst(0b00110010);
 12207  003B84  0E32               	movlw	50
 12208  003B86  ECFD  F01E         	call	_lcdInst
 12209                           
 12210                           ;lcd.c: 20: lcdInst(0b00101000);
 12211  003B8A  0E28               	movlw	40
 12212  003B8C  ECFD  F01E         	call	_lcdInst
 12213                           
 12214                           ;lcd.c: 21: lcdInst(0b00001111);
 12215  003B90  0E0F               	movlw	15
 12216  003B92  ECFD  F01E         	call	_lcdInst
 12217                           
 12218                           ;lcd.c: 22: lcdInst(0b00000110);
 12219  003B96  0E06               	movlw	6
 12220  003B98  ECFD  F01E         	call	_lcdInst
 12221                           
 12222                           ;lcd.c: 23: lcdInst(0b00000001);
 12223  003B9C  0E01               	movlw	1
 12224  003B9E  ECFD  F01E         	call	_lcdInst
 12225                           
 12226                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 12227  003BA2  0E31               	movlw	49
 12228  003BA4  0100               	movlb	0	; () banked
 12229  003BA6  6F84               	movwf	??_initLCD& (0+255),b
 12230  003BA8  0EB2               	movlw	178
 12231  003BAA                     u5927:
 12232  003BAA  2EE8               	decfsz	wreg,f,c
 12233  003BAC  D7FE               	bra	u5927
 12234  003BAE  2F84               	decfsz	??_initLCD& (0+255),f,b
 12235  003BB0  D7FC               	bra	u5927
 12236  003BB2  F000               	nop	
 12237  003BB4  0012               	return		;funcret
 12238  003BB6                     __end_of_initLCD:
 12239                           	opt stack 0
 12240                           tblptru	equ	0xFF8
 12241                           tblptrh	equ	0xFF7
 12242                           tblptrl	equ	0xFF6
 12243                           tablat	equ	0xFF5
 12244                           prodh	equ	0xFF4
 12245                           prodl	equ	0xFF3
 12246                           intcon	equ	0xFF2
 12247                           postinc0	equ	0xFEE
 12248                           wreg	equ	0xFE8
 12249                           postdec1	equ	0xFE5
 12250                           fsr1l	equ	0xFE1
 12251                           indf2	equ	0xFDF
 12252                           postinc2	equ	0xFDE
 12253                           postdec2	equ	0xFDD
 12254                           fsr2h	equ	0xFDA
 12255                           fsr2l	equ	0xFD9
 12256                           status	equ	0xFD8
 12257                           
 12258 ;; *************** function _lcdInst *****************
 12259 ;; Defined at:
 12260 ;;		line 27 in file "lcd.c"
 12261 ;; Parameters:    Size  Location     Type
 12262 ;;  data            1    wreg     unsigned char 
 12263 ;; Auto vars:     Size  Location     Type
 12264 ;;  data            1    3[BANK0 ] unsigned char 
 12265 ;; Return value:  Size  Location     Type
 12266 ;;                  1    wreg      void 
 12267 ;; Registers used:
 12268 ;;		wreg, status,2, status,0, cstack
 12269 ;; Tracked objects:
 12270 ;;		On entry : 0/0
 12271 ;;		On exit  : 0/0
 12272 ;;		Unchanged: 0/0
 12273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12277 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12278 ;;Total ram usage:        2 bytes
 12279 ;; Hardware stack levels used:    1
 12280 ;; Hardware stack levels required when called:    6
 12281 ;; This function calls:
 12282 ;;		_lcdNibble
 12283 ;; This function is called by:
 12284 ;;		_initLCD
 12285 ;;		_lcdClear
 12286 ;;		_lcdNewline
 12287 ;;		_lcdHome
 12288 ;; This function uses a non-reentrant model
 12289 ;;
 12290                           
 12291                           	psect	text49
 12292  003DFA                     __ptext49:
 12293                           	opt stack 0
 12294  003DFA                     _lcdInst:
 12295                           	opt stack 20
 12296                           
 12297                           ;incstack = 0
 12298                           ;lcdInst@data stored from wreg
 12299  003DFA  0100               	movlb	0	; () banked
 12300  003DFC  6F83               	movwf	lcdInst@data& (0+255),b
 12301                           
 12302                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 12303  003DFE  948C               	bcf	3980,2,c	;volatile
 12304                           
 12305                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 12306  003E00  0E74               	movlw	116
 12307  003E02                     u5937:
 12308  003E02  2EE8               	decfsz	wreg,f,c
 12309  003E04  D7FE               	bra	u5937
 12310  003E06  D000               	nop2	
 12311                           
 12312                           ;lcd.c: 30: lcdNibble(data);
 12313  003E08  0100               	movlb	0	; () banked
 12314  003E0A  5183               	movf	lcdInst@data& (0+255),w,b
 12315  003E0C  ECF3  F01B         	call	_lcdNibble
 12316                           
 12317                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 12318  003E10  0E04               	movlw	4
 12319  003E12  0100               	movlb	0	; () banked
 12320  003E14  6F82               	movwf	??_lcdInst& (0+255),b
 12321  003E16  0E3D               	movlw	61
 12322  003E18                     u5947:
 12323  003E18  2EE8               	decfsz	wreg,f,c
 12324  003E1A  D7FE               	bra	u5947
 12325  003E1C  2F82               	decfsz	??_lcdInst& (0+255),f,b
 12326  003E1E  D7FC               	bra	u5947
 12327  003E20  D000               	nop2	
 12328  003E22  0012               	return		;funcret
 12329  003E24                     __end_of_lcdInst:
 12330                           	opt stack 0
 12331                           tblptru	equ	0xFF8
 12332                           tblptrh	equ	0xFF7
 12333                           tblptrl	equ	0xFF6
 12334                           tablat	equ	0xFF5
 12335                           prodh	equ	0xFF4
 12336                           prodl	equ	0xFF3
 12337                           intcon	equ	0xFF2
 12338                           postinc0	equ	0xFEE
 12339                           wreg	equ	0xFE8
 12340                           postdec1	equ	0xFE5
 12341                           fsr1l	equ	0xFE1
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349 ;; *************** function _lcdNibble *****************
 12350 ;; Defined at:
 12351 ;;		line 46 in file "lcd.c"
 12352 ;; Parameters:    Size  Location     Type
 12353 ;;  data            1    wreg     unsigned char 
 12354 ;; Auto vars:     Size  Location     Type
 12355 ;;  data            1    1[BANK0 ] unsigned char 
 12356 ;;  temp            1    0[BANK0 ] unsigned char 
 12357 ;; Return value:  Size  Location     Type
 12358 ;;                  1    wreg      void 
 12359 ;; Registers used:
 12360 ;;		wreg, status,2, status,0
 12361 ;; Tracked objects:
 12362 ;;		On entry : 0/0
 12363 ;;		On exit  : 0/0
 12364 ;;		Unchanged: 0/0
 12365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12367 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;Total ram usage:        2 bytes
 12371 ;; Hardware stack levels used:    1
 12372 ;; Hardware stack levels required when called:    5
 12373 ;; This function calls:
 12374 ;;		Nothing
 12375 ;; This function is called by:
 12376 ;;		_lcdInst
 12377 ;;		_putch
 12378 ;; This function uses a non-reentrant model
 12379 ;;
 12380                           
 12381                           	psect	text50
 12382  0037E6                     __ptext50:
 12383                           	opt stack 0
 12384  0037E6                     _lcdNibble:
 12385                           	opt stack 22
 12386                           
 12387                           ;incstack = 0
 12388                           ;lcdNibble@data stored from wreg
 12389  0037E6  0100               	movlb	0	; () banked
 12390  0037E8  6F81               	movwf	lcdNibble@data& (0+255),b
 12391                           
 12392                           ;lcd.c: 48: char temp = data & 0xF0;
 12393  0037EA  0100               	movlb	0	; () banked
 12394  0037EC  5181               	movf	lcdNibble@data& (0+255),w,b
 12395  0037EE  0BF0               	andlw	240
 12396  0037F0  0100               	movlb	0	; () banked
 12397  0037F2  6F80               	movwf	lcdNibble@temp& (0+255),b
 12398                           
 12399                           ;lcd.c: 49: LATD = LATD & 0x0F;
 12400  0037F4  508C               	movf	3980,w,c	;volatile
 12401  0037F6  0B0F               	andlw	15
 12402  0037F8  6E8C               	movwf	3980,c	;volatile
 12403                           
 12404                           ;lcd.c: 50: LATD = temp | LATD;
 12405  0037FA  0100               	movlb	0	; () banked
 12406  0037FC  5180               	movf	lcdNibble@temp& (0+255),w,b
 12407  0037FE  108C               	iorwf	3980,w,c	;volatile
 12408  003800  6E8C               	movwf	3980,c	;volatile
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 12412  003802  968C               	bcf	3980,3,c	;volatile
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12416  003804  0ED6               	movlw	214
 12417  003806                     u5957:
 12418  003806  D000               	nop2	
 12419  003808  D000               	nop2	
 12420  00380A  2EE8               	decfsz	wreg,f,c
 12421  00380C  D7FC               	bra	u5957
 12422  00380E  D000               	nop2	
 12423                           
 12424                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 12425  003810  868C               	bsf	3980,3,c	;volatile
 12426                           
 12427                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12428  003812  0ED6               	movlw	214
 12429  003814                     u5967:
 12430  003814  D000               	nop2	
 12431  003816  D000               	nop2	
 12432  003818  2EE8               	decfsz	wreg,f,c
 12433  00381A  D7FC               	bra	u5967
 12434  00381C  D000               	nop2	
 12435                           
 12436                           ;lcd.c: 58: data = data << 4;
 12437  00381E  0100               	movlb	0	; () banked
 12438  003820  3981               	swapf	lcdNibble@data& (0+255),w,b
 12439  003822  0BF0               	andlw	240
 12440  003824  0100               	movlb	0	; () banked
 12441  003826  6F81               	movwf	lcdNibble@data& (0+255),b
 12442                           
 12443                           ;lcd.c: 60: temp = data & 0xF0;
 12444  003828  0100               	movlb	0	; () banked
 12445  00382A  5181               	movf	lcdNibble@data& (0+255),w,b
 12446  00382C  0BF0               	andlw	240
 12447  00382E  0100               	movlb	0	; () banked
 12448  003830  6F80               	movwf	lcdNibble@temp& (0+255),b
 12449                           
 12450                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12451  003832  508C               	movf	3980,w,c	;volatile
 12452  003834  0B0F               	andlw	15
 12453  003836  6E8C               	movwf	3980,c	;volatile
 12454                           
 12455                           ;lcd.c: 62: LATD = temp | LATD;
 12456  003838  0100               	movlb	0	; () banked
 12457  00383A  5180               	movf	lcdNibble@temp& (0+255),w,b
 12458  00383C  108C               	iorwf	3980,w,c	;volatile
 12459  00383E  6E8C               	movwf	3980,c	;volatile
 12460                           
 12461                           ; BSR set to: 0
 12462                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12463  003840  968C               	bcf	3980,3,c	;volatile
 12464                           
 12465                           ; BSR set to: 0
 12466                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12467  003842  0ED6               	movlw	214
 12468  003844                     u5977:
 12469  003844  D000               	nop2	
 12470  003846  D000               	nop2	
 12471  003848  2EE8               	decfsz	wreg,f,c
 12472  00384A  D7FC               	bra	u5977
 12473  00384C  D000               	nop2	
 12474                           
 12475                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12476  00384E  868C               	bsf	3980,3,c	;volatile
 12477                           
 12478                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12479  003850  0ED6               	movlw	214
 12480  003852                     u5987:
 12481  003852  D000               	nop2	
 12482  003854  D000               	nop2	
 12483  003856  2EE8               	decfsz	wreg,f,c
 12484  003858  D7FC               	bra	u5987
 12485  00385A  D000               	nop2	
 12486  00385C  0012               	return		;funcret
 12487  00385E                     __end_of_lcdNibble:
 12488                           	opt stack 0
 12489                           tblptru	equ	0xFF8
 12490                           tblptrh	equ	0xFF7
 12491                           tblptrl	equ	0xFF6
 12492                           tablat	equ	0xFF5
 12493                           prodh	equ	0xFF4
 12494                           prodl	equ	0xFF3
 12495                           intcon	equ	0xFF2
 12496                           postinc0	equ	0xFEE
 12497                           wreg	equ	0xFE8
 12498                           postdec1	equ	0xFE5
 12499                           fsr1l	equ	0xFE1
 12500                           indf2	equ	0xFDF
 12501                           postinc2	equ	0xFDE
 12502                           postdec2	equ	0xFDD
 12503                           fsr2h	equ	0xFDA
 12504                           fsr2l	equ	0xFD9
 12505                           status	equ	0xFD8
 12506                           
 12507 ;; *************** function _getTime *****************
 12508 ;; Defined at:
 12509 ;;		line 23 in file "RTC.c"
 12510 ;; Parameters:    Size  Location     Type
 12511 ;;		None
 12512 ;; Auto vars:     Size  Location     Type
 12513 ;;  i               1   21[BANK0 ] unsigned char 
 12514 ;;  time           14    7[BANK0 ] int [7]
 12515 ;; Return value:  Size  Location     Type
 12516 ;;                  2    3[BANK0 ] PTR int 
 12517 ;; Registers used:
 12518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12524 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12525 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12527 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12528 ;;Total ram usage:       19 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    7
 12531 ;; This function calls:
 12532 ;;		_I2C_Master_Read
 12533 ;;		_I2C_Master_Start
 12534 ;;		_I2C_Master_Stop
 12535 ;;		_I2C_Master_Write
 12536 ;; This function is called by:
 12537 ;;		_main
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           	psect	text51
 12542  0035C2                     __ptext51:
 12543                           	opt stack 0
 12544  0035C2                     _getTime:
 12545                           	opt stack 23
 12546                           
 12547                           ;RTC.c: 24: int time[7];
 12548                           ;RTC.c: 29: I2C_Master_Start();
 12549                           
 12550                           ;incstack = 0
 12551  0035C2  ECB7  F01F         	call	_I2C_Master_Start	;wreg free
 12552                           
 12553                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
 12554  0035C6  0E00               	movlw	0
 12555  0035C8  0100               	movlb	0	; () banked
 12556  0035CA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 12557  0035CC  0ED0               	movlw	208
 12558  0035CE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 12559  0035D0  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
 12560                           
 12561                           ;RTC.c: 31: I2C_Master_Write(0x00);
 12562  0035D4  0E00               	movlw	0
 12563  0035D6  0100               	movlb	0	; () banked
 12564  0035D8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 12565  0035DA  0E00               	movlw	0
 12566  0035DC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 12567  0035DE  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
 12568                           
 12569                           ;RTC.c: 32: I2C_Master_Stop();
 12570  0035E2  ECB3  F01F         	call	_I2C_Master_Stop	;wreg free
 12571                           
 12572                           ;RTC.c: 35: I2C_Master_Start();
 12573  0035E6  ECB7  F01F         	call	_I2C_Master_Start	;wreg free
 12574                           
 12575                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
 12576  0035EA  0E00               	movlw	0
 12577  0035EC  0100               	movlb	0	; () banked
 12578  0035EE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 12579  0035F0  0ED1               	movlw	209
 12580  0035F2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 12581  0035F4  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
 12582                           
 12583                           ;RTC.c: 37: for(unsigned char i=0;i<0x06;i++){
 12584  0035F8  0E00               	movlw	0
 12585  0035FA  0100               	movlb	0	; () banked
 12586  0035FC  6F95               	movwf	getTime@i& (0+255),b
 12587  0035FE                     l5322:
 12588                           
 12589                           ; BSR set to: 0
 12590  0035FE  0E05               	movlw	5
 12591  003600  0100               	movlb	0	; () banked
 12592  003602  6595               	cpfsgt	getTime@i& (0+255),b
 12593  003604  D001               	goto	l5326
 12594  003606  D016               	goto	l5332
 12595  003608                     l5326:
 12596                           
 12597                           ; BSR set to: 0
 12598                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
 12599  003608  0E01               	movlw	1
 12600  00360A  ECBC  F01E         	call	_I2C_Master_Read
 12601  00360E  0100               	movlb	0	; () banked
 12602  003610  6F85               	movwf	??_getTime& (0+255),b
 12603  003612  6B86               	clrf	(??_getTime+1)& (0+255),b
 12604  003614  0100               	movlb	0	; () banked
 12605  003616  5195               	movf	getTime@i& (0+255),w,b
 12606  003618  0D02               	mullw	2
 12607  00361A  0E87               	movlw	low getTime@time
 12608  00361C  24F3               	addwf	prodl,w,c
 12609  00361E  6ED9               	movwf	fsr2l,c
 12610  003620  0E00               	movlw	high getTime@time
 12611  003622  20F4               	addwfc	prodh,w,c
 12612  003624  6EDA               	movwf	fsr2h,c
 12613  003626  C085  FFDE         	movff	??_getTime,postinc2
 12614  00362A  C086  FFDD         	movff	??_getTime+1,postdec2
 12615                           
 12616                           ; BSR set to: 0
 12617  00362E  0100               	movlb	0	; () banked
 12618  003630  2B95               	incf	getTime@i& (0+255),f,b
 12619  003632  D7E5               	goto	l5322
 12620  003634                     l5332:
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;RTC.c: 39: }
 12624                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
 12625  003634  0E00               	movlw	0
 12626  003636  ECBC  F01E         	call	_I2C_Master_Read
 12627  00363A  0100               	movlb	0	; () banked
 12628  00363C  6F85               	movwf	??_getTime& (0+255),b
 12629  00363E  0100               	movlb	0	; () banked
 12630  003640  5185               	movf	??_getTime& (0+255),w,b
 12631  003642  0100               	movlb	0	; () banked
 12632  003644  6F93               	movwf	(getTime@time+12)& (0+255),b
 12633  003646  6B94               	clrf	(getTime@time+13)& (0+255),b
 12634                           
 12635                           ;RTC.c: 41: I2C_Master_Stop();
 12636  003648  ECB3  F01F         	call	_I2C_Master_Stop	;wreg free
 12637                           
 12638                           ;RTC.c: 45: return time;
 12639  00364C  0E87               	movlw	low getTime@time
 12640  00364E  0100               	movlb	0	; () banked
 12641  003650  6F83               	movwf	?_getTime& (0+255),b
 12642  003652  0E00               	movlw	high getTime@time
 12643  003654  0100               	movlb	0	; () banked
 12644  003656  6F84               	movwf	(?_getTime+1)& (0+255),b
 12645  003658  0012               	return	
 12646  00365A                     __end_of_getTime:
 12647                           	opt stack 0
 12648                           tblptru	equ	0xFF8
 12649                           tblptrh	equ	0xFF7
 12650                           tblptrl	equ	0xFF6
 12651                           tablat	equ	0xFF5
 12652                           prodh	equ	0xFF4
 12653                           prodl	equ	0xFF3
 12654                           intcon	equ	0xFF2
 12655                           postinc0	equ	0xFEE
 12656                           wreg	equ	0xFE8
 12657                           postdec1	equ	0xFE5
 12658                           fsr1l	equ	0xFE1
 12659                           indf2	equ	0xFDF
 12660                           postinc2	equ	0xFDE
 12661                           postdec2	equ	0xFDD
 12662                           fsr2h	equ	0xFDA
 12663                           fsr2l	equ	0xFD9
 12664                           status	equ	0xFD8
 12665                           
 12666 ;; *************** function _I2C_Master_Write *****************
 12667 ;; Defined at:
 12668 ;;		line 47 in file "I2C.c"
 12669 ;; Parameters:    Size  Location     Type
 12670 ;;  d               2    1[BANK0 ] unsigned int 
 12671 ;; Auto vars:     Size  Location     Type
 12672 ;;		None
 12673 ;; Return value:  Size  Location     Type
 12674 ;;                  1    wreg      void 
 12675 ;; Registers used:
 12676 ;;		wreg, status,2, status,0, cstack
 12677 ;; Tracked objects:
 12678 ;;		On entry : 0/0
 12679 ;;		On exit  : 0/0
 12680 ;;		Unchanged: 0/0
 12681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12682 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12686 ;;Total ram usage:        2 bytes
 12687 ;; Hardware stack levels used:    1
 12688 ;; Hardware stack levels required when called:    6
 12689 ;; This function calls:
 12690 ;;		_I2C_Master_Wait
 12691 ;; This function is called by:
 12692 ;;		_getTime
 12693 ;;		_testFrequency
 12694 ;;		_setTime
 12695 ;; This function uses a non-reentrant model
 12696 ;;
 12697                           
 12698                           	psect	text52
 12699  003F4C                     __ptext52:
 12700                           	opt stack 0
 12701  003F4C                     _I2C_Master_Write:
 12702                           	opt stack 23
 12703                           
 12704                           ;I2C.c: 49: I2C_Master_Wait();
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;incstack = 0
 12708  003F4C  EC9C  F01F         	call	_I2C_Master_Wait	;wreg free
 12709                           
 12710                           ;I2C.c: 50: SSPBUF = d;
 12711  003F50  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 12712  003F54  0012               	return		;funcret
 12713  003F56                     __end_of_I2C_Master_Write:
 12714                           	opt stack 0
 12715                           tblptru	equ	0xFF8
 12716                           tblptrh	equ	0xFF7
 12717                           tblptrl	equ	0xFF6
 12718                           tablat	equ	0xFF5
 12719                           prodh	equ	0xFF4
 12720                           prodl	equ	0xFF3
 12721                           intcon	equ	0xFF2
 12722                           postinc0	equ	0xFEE
 12723                           wreg	equ	0xFE8
 12724                           postdec1	equ	0xFE5
 12725                           fsr1l	equ	0xFE1
 12726                           indf2	equ	0xFDF
 12727                           postinc2	equ	0xFDE
 12728                           postdec2	equ	0xFDD
 12729                           fsr2h	equ	0xFDA
 12730                           fsr2l	equ	0xFD9
 12731                           status	equ	0xFD8
 12732                           
 12733 ;; *************** function _I2C_Master_Stop *****************
 12734 ;; Defined at:
 12735 ;;		line 41 in file "I2C.c"
 12736 ;; Parameters:    Size  Location     Type
 12737 ;;		None
 12738 ;; Auto vars:     Size  Location     Type
 12739 ;;		None
 12740 ;; Return value:  Size  Location     Type
 12741 ;;                  2  374[None  ] int 
 12742 ;; Registers used:
 12743 ;;		wreg, status,2, status,0, cstack
 12744 ;; Tracked objects:
 12745 ;;		On entry : 0/0
 12746 ;;		On exit  : 0/0
 12747 ;;		Unchanged: 0/0
 12748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12753 ;;Total ram usage:        0 bytes
 12754 ;; Hardware stack levels used:    1
 12755 ;; Hardware stack levels required when called:    6
 12756 ;; This function calls:
 12757 ;;		_I2C_Master_Wait
 12758 ;; This function is called by:
 12759 ;;		_getTime
 12760 ;;		_testFrequency
 12761 ;;		_setTime
 12762 ;; This function uses a non-reentrant model
 12763 ;;
 12764                           
 12765                           	psect	text53
 12766  003F66                     __ptext53:
 12767                           	opt stack 0
 12768  003F66                     _I2C_Master_Stop:
 12769                           	opt stack 23
 12770                           
 12771                           ;I2C.c: 43: I2C_Master_Wait();
 12772                           
 12773                           ;incstack = 0
 12774  003F66  EC9C  F01F         	call	_I2C_Master_Wait	;wreg free
 12775                           
 12776                           ;I2C.c: 44: PEN = 1;
 12777  003F6A  84C5               	bsf	4037,2,c	;volatile
 12778  003F6C  0012               	return		;funcret
 12779  003F6E                     __end_of_I2C_Master_Stop:
 12780                           	opt stack 0
 12781                           tblptru	equ	0xFF8
 12782                           tblptrh	equ	0xFF7
 12783                           tblptrl	equ	0xFF6
 12784                           tablat	equ	0xFF5
 12785                           prodh	equ	0xFF4
 12786                           prodl	equ	0xFF3
 12787                           intcon	equ	0xFF2
 12788                           postinc0	equ	0xFEE
 12789                           wreg	equ	0xFE8
 12790                           postdec1	equ	0xFE5
 12791                           fsr1l	equ	0xFE1
 12792                           indf2	equ	0xFDF
 12793                           postinc2	equ	0xFDE
 12794                           postdec2	equ	0xFDD
 12795                           fsr2h	equ	0xFDA
 12796                           fsr2l	equ	0xFD9
 12797                           status	equ	0xFD8
 12798                           
 12799 ;; *************** function _I2C_Master_Start *****************
 12800 ;; Defined at:
 12801 ;;		line 29 in file "I2C.c"
 12802 ;; Parameters:    Size  Location     Type
 12803 ;;		None
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;		None
 12806 ;; Return value:  Size  Location     Type
 12807 ;;                  2  370[None  ] int 
 12808 ;; Registers used:
 12809 ;;		wreg, status,2, status,0, cstack
 12810 ;; Tracked objects:
 12811 ;;		On entry : 0/0
 12812 ;;		On exit  : 0/0
 12813 ;;		Unchanged: 0/0
 12814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;Total ram usage:        0 bytes
 12820 ;; Hardware stack levels used:    1
 12821 ;; Hardware stack levels required when called:    6
 12822 ;; This function calls:
 12823 ;;		_I2C_Master_Wait
 12824 ;; This function is called by:
 12825 ;;		_getTime
 12826 ;;		_testFrequency
 12827 ;;		_setTime
 12828 ;; This function uses a non-reentrant model
 12829 ;;
 12830                           
 12831                           	psect	text54
 12832  003F6E                     __ptext54:
 12833                           	opt stack 0
 12834  003F6E                     _I2C_Master_Start:
 12835                           	opt stack 23
 12836                           
 12837                           ;I2C.c: 31: I2C_Master_Wait();
 12838                           
 12839                           ;incstack = 0
 12840  003F6E  EC9C  F01F         	call	_I2C_Master_Wait	;wreg free
 12841                           
 12842                           ;I2C.c: 32: SEN = 1;
 12843  003F72  80C5               	bsf	4037,0,c	;volatile
 12844  003F74  0012               	return		;funcret
 12845  003F76                     __end_of_I2C_Master_Start:
 12846                           	opt stack 0
 12847                           tblptru	equ	0xFF8
 12848                           tblptrh	equ	0xFF7
 12849                           tblptrl	equ	0xFF6
 12850                           tablat	equ	0xFF5
 12851                           prodh	equ	0xFF4
 12852                           prodl	equ	0xFF3
 12853                           intcon	equ	0xFF2
 12854                           postinc0	equ	0xFEE
 12855                           wreg	equ	0xFE8
 12856                           postdec1	equ	0xFE5
 12857                           fsr1l	equ	0xFE1
 12858                           indf2	equ	0xFDF
 12859                           postinc2	equ	0xFDE
 12860                           postdec2	equ	0xFDD
 12861                           fsr2h	equ	0xFDA
 12862                           fsr2l	equ	0xFD9
 12863                           status	equ	0xFD8
 12864                           
 12865 ;; *************** function _I2C_Master_Read *****************
 12866 ;; Defined at:
 12867 ;;		line 53 in file "I2C.c"
 12868 ;; Parameters:    Size  Location     Type
 12869 ;;  a               1    wreg     unsigned char 
 12870 ;; Auto vars:     Size  Location     Type
 12871 ;;  a               1    1[BANK0 ] unsigned char 
 12872 ;;  temp            1    2[BANK0 ] unsigned char 
 12873 ;; Return value:  Size  Location     Type
 12874 ;;                  1    wreg      unsigned char 
 12875 ;; Registers used:
 12876 ;;		wreg, status,2, status,0, cstack
 12877 ;; Tracked objects:
 12878 ;;		On entry : 0/0
 12879 ;;		On exit  : 0/0
 12880 ;;		Unchanged: 0/0
 12881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12883 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12886 ;;Total ram usage:        2 bytes
 12887 ;; Hardware stack levels used:    1
 12888 ;; Hardware stack levels required when called:    6
 12889 ;; This function calls:
 12890 ;;		_I2C_Master_Wait
 12891 ;; This function is called by:
 12892 ;;		_getTime
 12893 ;;		_testFrequency
 12894 ;; This function uses a non-reentrant model
 12895 ;;
 12896                           
 12897                           	psect	text55
 12898  003D78                     __ptext55:
 12899                           	opt stack 0
 12900  003D78                     _I2C_Master_Read:
 12901                           	opt stack 23
 12902                           
 12903                           ;incstack = 0
 12904                           ;I2C_Master_Read@a stored from wreg
 12905  003D78  0100               	movlb	0	; () banked
 12906  003D7A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 12907                           
 12908                           ;I2C.c: 55: unsigned char temp;
 12909                           ;I2C.c: 56: I2C_Master_Wait();
 12910  003D7C  EC9C  F01F         	call	_I2C_Master_Wait	;wreg free
 12911                           
 12912                           ;I2C.c: 57: RCEN = 1;
 12913  003D80  86C5               	bsf	4037,3,c	;volatile
 12914                           
 12915                           ;I2C.c: 58: I2C_Master_Wait();
 12916  003D82  EC9C  F01F         	call	_I2C_Master_Wait	;wreg free
 12917                           
 12918                           ;I2C.c: 59: temp = SSPBUF;
 12919  003D86  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 12920                           
 12921                           ;I2C.c: 60: I2C_Master_Wait();
 12922  003D8A  EC9C  F01F         	call	_I2C_Master_Wait	;wreg free
 12923                           
 12924                           ;I2C.c: 61: ACKDT = (a)?0:1;
 12925  003D8E  0100               	movlb	0	; () banked
 12926  003D90  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 12927  003D92  0100               	movlb	0	; () banked
 12928  003D94  A4D8               	btfss	status,2,c
 12929  003D96  D002               	goto	u5230
 12930  003D98  8AC5               	bsf	4037,5,c	;volatile
 12931  003D9A  D001               	goto	l5162
 12932  003D9C                     u5230:
 12933  003D9C  9AC5               	bcf	4037,5,c	;volatile
 12934  003D9E                     l5162:
 12935                           
 12936                           ;I2C.c: 62: ACKEN = 1;
 12937  003D9E  88C5               	bsf	4037,4,c	;volatile
 12938                           
 12939                           ;I2C.c: 63: return temp;
 12940  003DA0  0100               	movlb	0	; () banked
 12941  003DA2  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 12942  003DA4  0012               	return	
 12943  003DA6                     __end_of_I2C_Master_Read:
 12944                           	opt stack 0
 12945                           tblptru	equ	0xFF8
 12946                           tblptrh	equ	0xFF7
 12947                           tblptrl	equ	0xFF6
 12948                           tablat	equ	0xFF5
 12949                           prodh	equ	0xFF4
 12950                           prodl	equ	0xFF3
 12951                           intcon	equ	0xFF2
 12952                           postinc0	equ	0xFEE
 12953                           wreg	equ	0xFE8
 12954                           postdec1	equ	0xFE5
 12955                           fsr1l	equ	0xFE1
 12956                           indf2	equ	0xFDF
 12957                           postinc2	equ	0xFDE
 12958                           postdec2	equ	0xFDD
 12959                           fsr2h	equ	0xFDA
 12960                           fsr2l	equ	0xFD9
 12961                           status	equ	0xFD8
 12962                           
 12963 ;; *************** function _I2C_Master_Wait *****************
 12964 ;; Defined at:
 12965 ;;		line 24 in file "I2C.c"
 12966 ;; Parameters:    Size  Location     Type
 12967 ;;		None
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;		None
 12970 ;; Return value:  Size  Location     Type
 12971 ;;                  1    wreg      void 
 12972 ;; Registers used:
 12973 ;;		wreg, status,2, status,0
 12974 ;; Tracked objects:
 12975 ;;		On entry : 0/0
 12976 ;;		On exit  : 0/0
 12977 ;;		Unchanged: 0/0
 12978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12982 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12983 ;;Total ram usage:        1 bytes
 12984 ;; Hardware stack levels used:    1
 12985 ;; Hardware stack levels required when called:    5
 12986 ;; This function calls:
 12987 ;;		Nothing
 12988 ;; This function is called by:
 12989 ;;		_I2C_Master_Start
 12990 ;;		_I2C_Master_Stop
 12991 ;;		_I2C_Master_Write
 12992 ;;		_I2C_Master_Read
 12993 ;;		_I2C_Master_RepeatedStart
 12994 ;; This function uses a non-reentrant model
 12995 ;;
 12996                           
 12997                           	psect	text56
 12998  003F38                     __ptext56:
 12999                           	opt stack 0
 13000  003F38                     _I2C_Master_Wait:
 13001                           	opt stack 23
 13002  003F38                     l447:
 13003  003F38  B4C7               	btfsc	4039,2,c	;volatile
 13004  003F3A  D7FE               	goto	l447
 13005  003F3C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 13006  003F40  0E1F               	movlw	31
 13007  003F42  0100               	movlb	0	; () banked
 13008  003F44  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 13009  003F46  B4D8               	btfsc	status,2,c
 13010  003F48  0012               	return	
 13011  003F4A  D7F6               	goto	l447
 13012  003F4C                     __end_of_I2C_Master_Wait:
 13013                           	opt stack 0
 13014                           tblptru	equ	0xFF8
 13015                           tblptrh	equ	0xFF7
 13016                           tblptrl	equ	0xFF6
 13017                           tablat	equ	0xFF5
 13018                           prodh	equ	0xFF4
 13019                           prodl	equ	0xFF3
 13020                           intcon	equ	0xFF2
 13021                           postinc0	equ	0xFEE
 13022                           wreg	equ	0xFE8
 13023                           postdec1	equ	0xFE5
 13024                           fsr1l	equ	0xFE1
 13025                           indf2	equ	0xFDF
 13026                           postinc2	equ	0xFDE
 13027                           postdec2	equ	0xFDD
 13028                           fsr2h	equ	0xFDA
 13029                           fsr2l	equ	0xFD9
 13030                           status	equ	0xFD8
 13031                           
 13032 ;; *************** function _service *****************
 13033 ;; Defined at:
 13034 ;;		line 208 in file "main.c"
 13035 ;; Parameters:    Size  Location     Type
 13036 ;;		None
 13037 ;; Auto vars:     Size  Location     Type
 13038 ;;  key             1  116[COMRAM] unsigned char 
 13039 ;; Return value:  Size  Location     Type
 13040 ;;                  1    wreg      void 
 13041 ;; Registers used:
 13042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13043 ;; Tracked objects:
 13044 ;;		On entry : 0/0
 13045 ;;		On exit  : 0/0
 13046 ;;		Unchanged: 0/0
 13047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13049 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13050 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13051 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13052 ;;Total ram usage:       15 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; Hardware stack levels required when called:    4
 13055 ;; This function calls:
 13056 ;;		_servoInterruptService
 13057 ;;		i2_setAngle
 13058 ;; This function is called by:
 13059 ;;		Interrupt level 2
 13060 ;; This function uses a non-reentrant model
 13061 ;;
 13062                           
 13063                           	psect	intcode
 13064  000008                     __pintcode:
 13065                           	opt stack 0
 13066  000008                     _service:
 13067                           	opt stack 19
 13068                           
 13069                           ; BSR set to: 0
 13070                           ;incstack = 0
 13071  000008  8278               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13072  00000A  ED8A  F013         	call	int_func,f	;refresh shadow registers
 13073                           tblptru	equ	0xFF8
 13074                           tblptrh	equ	0xFF7
 13075                           tblptrl	equ	0xFF6
 13076                           tablat	equ	0xFF5
 13077                           prodh	equ	0xFF4
 13078                           prodl	equ	0xFF3
 13079                           intcon	equ	0xFF2
 13080                           postinc0	equ	0xFEE
 13081                           wreg	equ	0xFE8
 13082                           postdec1	equ	0xFE5
 13083                           fsr1l	equ	0xFE1
 13084                           indf2	equ	0xFDF
 13085                           postinc2	equ	0xFDE
 13086                           postdec2	equ	0xFDD
 13087                           fsr2h	equ	0xFDA
 13088                           fsr2l	equ	0xFD9
 13089                           status	equ	0xFD8
 13090                           
 13091                           	psect	intcode_body
 13092  002714                     __pintcode_body:
 13093                           	opt stack 19
 13094  002714                     int_func:
 13095                           	opt stack 19
 13096  002714  0006               	pop		; remove dummy address from shadow register refresh
 13097  002716  CFFA F067          	movff	pclath,??_service
 13098  00271A  CFFB F068          	movff	pclatu,??_service+1
 13099  00271E  CFE9 F069          	movff	fsr0l,??_service+2
 13100  002722  CFEA F06A          	movff	fsr0h,??_service+3
 13101  002726  CFE1 F06B          	movff	fsr1l,??_service+4
 13102  00272A  CFE2 F06C          	movff	fsr1h,??_service+5
 13103  00272E  CFD9 F06D          	movff	fsr2l,??_service+6
 13104  002732  CFDA F06E          	movff	fsr2h,??_service+7
 13105  002736  CFF3 F06F          	movff	prodl,??_service+8
 13106  00273A  CFF4 F070          	movff	prodh,??_service+9
 13107  00273E  CFF6 F071          	movff	tblptrl,??_service+10
 13108  002742  CFF7 F072          	movff	tblptrh,??_service+11
 13109  002746  CFF8 F073          	movff	tblptru,??_service+12
 13110  00274A  CFF5 F074          	movff	tablat,??_service+13
 13111                           
 13112                           ;main.c: 210: servoInterruptService();
 13113  00274E  ECED  F00C         	call	_servoInterruptService	;wreg free
 13114                           
 13115                           ;main.c: 213: if(INT0IF){ INT0IF = 0;
 13116  002752  A2F2               	btfss	intcon,1,c	;volatile
 13117  002754  D006               	goto	i2l5540
 13118  002756  92F2               	bcf	intcon,1,c	;volatile
 13119                           
 13120                           ;main.c: 214: switchFlag = 1;
 13121  002758  0E00               	movlw	0
 13122  00275A  0101               	movlb	1	; () banked
 13123  00275C  6F60               	movwf	(_switchFlag+1)& (0+255),b
 13124  00275E  0E01               	movlw	1
 13125  002760  6F5F               	movwf	_switchFlag& (0+255),b
 13126  002762                     i2l5540:
 13127                           
 13128                           ;main.c: 215: }
 13129                           ;main.c: 218: if(INT1IF){INT1IF = 0;
 13130  002762  A0F0               	btfss	intcon3,0,c	;volatile
 13131  002764  D057               	goto	i2l160
 13132  002766  90F0               	bcf	intcon3,0,c	;volatile
 13133                           
 13134                           ;main.c: 219: char key = (PORTB & 0xF0) >> 4;
 13135  002768  3881               	swapf	3969,w,c	;volatile
 13136  00276A  0B0F               	andlw	15
 13137  00276C  0B0F               	andlw	15
 13138  00276E  6E75               	movwf	service@key,c
 13139                           
 13140                           ;main.c: 220: if(key == 0)setAngle(0,30);
 13141  002770  5075               	movf	service@key,w,c
 13142  002772  A4D8               	btfss	status,2,c
 13143  002774  D00A               	goto	i2l5550
 13144  002776  0E00               	movlw	0
 13145  002778  6E5E               	movwf	i2setAngle@timer+1,c
 13146  00277A  0E00               	movlw	0
 13147  00277C  6E5D               	movwf	i2setAngle@timer,c
 13148  00277E  0E00               	movlw	0
 13149  002780  6E60               	movwf	i2setAngle@angle+1,c
 13150  002782  0E1E               	movlw	30
 13151  002784  6E5F               	movwf	i2setAngle@angle,c
 13152  002786  EC6B  F01C         	call	i2_setAngle	;wreg free
 13153  00278A                     i2l5550:
 13154                           
 13155                           ;main.c: 221: if(key == 1)setAngle(0,90);
 13156  00278A  0475               	decf	service@key,w,c
 13157  00278C  A4D8               	btfss	status,2,c
 13158  00278E  D00A               	goto	i2l5554
 13159  002790  0E00               	movlw	0
 13160  002792  6E5E               	movwf	i2setAngle@timer+1,c
 13161  002794  0E00               	movlw	0
 13162  002796  6E5D               	movwf	i2setAngle@timer,c
 13163  002798  0E00               	movlw	0
 13164  00279A  6E60               	movwf	i2setAngle@angle+1,c
 13165  00279C  0E5A               	movlw	90
 13166  00279E  6E5F               	movwf	i2setAngle@angle,c
 13167  0027A0  EC6B  F01C         	call	i2_setAngle	;wreg free
 13168  0027A4                     i2l5554:
 13169                           
 13170                           ;main.c: 222: if(key == 2)setAngle(0,135);
 13171  0027A4  0E02               	movlw	2
 13172  0027A6  1875               	xorwf	service@key,w,c
 13173  0027A8  A4D8               	btfss	status,2,c
 13174  0027AA  D00A               	goto	i2l5558
 13175  0027AC  0E00               	movlw	0
 13176  0027AE  6E5E               	movwf	i2setAngle@timer+1,c
 13177  0027B0  0E00               	movlw	0
 13178  0027B2  6E5D               	movwf	i2setAngle@timer,c
 13179  0027B4  0E00               	movlw	0
 13180  0027B6  6E60               	movwf	i2setAngle@angle+1,c
 13181  0027B8  0E87               	movlw	135
 13182  0027BA  6E5F               	movwf	i2setAngle@angle,c
 13183  0027BC  EC6B  F01C         	call	i2_setAngle	;wreg free
 13184  0027C0                     i2l5558:
 13185                           
 13186                           ;main.c: 224: if(key == 4)setAngle(3,80);
 13187  0027C0  0E04               	movlw	4
 13188  0027C2  1875               	xorwf	service@key,w,c
 13189  0027C4  A4D8               	btfss	status,2,c
 13190  0027C6  D00A               	goto	i2l5562
 13191  0027C8  0E00               	movlw	0
 13192  0027CA  6E5E               	movwf	i2setAngle@timer+1,c
 13193  0027CC  0E03               	movlw	3
 13194  0027CE  6E5D               	movwf	i2setAngle@timer,c
 13195  0027D0  0E00               	movlw	0
 13196  0027D2  6E60               	movwf	i2setAngle@angle+1,c
 13197  0027D4  0E50               	movlw	80
 13198  0027D6  6E5F               	movwf	i2setAngle@angle,c
 13199  0027D8  EC6B  F01C         	call	i2_setAngle	;wreg free
 13200  0027DC                     i2l5562:
 13201                           
 13202                           ;main.c: 225: if(key == 5)setAngle(3,90);
 13203  0027DC  0E05               	movlw	5
 13204  0027DE  1875               	xorwf	service@key,w,c
 13205  0027E0  A4D8               	btfss	status,2,c
 13206  0027E2  D00A               	goto	i2l5566
 13207  0027E4  0E00               	movlw	0
 13208  0027E6  6E5E               	movwf	i2setAngle@timer+1,c
 13209  0027E8  0E03               	movlw	3
 13210  0027EA  6E5D               	movwf	i2setAngle@timer,c
 13211  0027EC  0E00               	movlw	0
 13212  0027EE  6E60               	movwf	i2setAngle@angle+1,c
 13213  0027F0  0E5A               	movlw	90
 13214  0027F2  6E5F               	movwf	i2setAngle@angle,c
 13215  0027F4  EC6B  F01C         	call	i2_setAngle	;wreg free
 13216  0027F8                     i2l5566:
 13217                           
 13218                           ;main.c: 226: if(key == 6)setAngle(3,100);
 13219  0027F8  0E06               	movlw	6
 13220  0027FA  1875               	xorwf	service@key,w,c
 13221  0027FC  A4D8               	btfss	status,2,c
 13222  0027FE  D00A               	goto	i2l160
 13223  002800  0E00               	movlw	0
 13224  002802  6E5E               	movwf	i2setAngle@timer+1,c
 13225  002804  0E03               	movlw	3
 13226  002806  6E5D               	movwf	i2setAngle@timer,c
 13227  002808  0E00               	movlw	0
 13228  00280A  6E60               	movwf	i2setAngle@angle+1,c
 13229  00280C  0E64               	movlw	100
 13230  00280E  6E5F               	movwf	i2setAngle@angle,c
 13231  002810  EC6B  F01C         	call	i2_setAngle	;wreg free
 13232  002814                     i2l160:
 13233  002814  C074  FFF5         	movff	??_service+13,tablat
 13234  002818  C073  FFF8         	movff	??_service+12,tblptru
 13235  00281C  C072  FFF7         	movff	??_service+11,tblptrh
 13236  002820  C071  FFF6         	movff	??_service+10,tblptrl
 13237  002824  C070  FFF4         	movff	??_service+9,prodh
 13238  002828  C06F  FFF3         	movff	??_service+8,prodl
 13239  00282C  C06E  FFDA         	movff	??_service+7,fsr2h
 13240  002830  C06D  FFD9         	movff	??_service+6,fsr2l
 13241  002834  C06C  FFE2         	movff	??_service+5,fsr1h
 13242  002838  C06B  FFE1         	movff	??_service+4,fsr1l
 13243  00283C  C06A  FFEA         	movff	??_service+3,fsr0h
 13244  002840  C069  FFE9         	movff	??_service+2,fsr0l
 13245  002844  C068  FFFB         	movff	??_service+1,pclatu
 13246  002848  C067  FFFA         	movff	??_service,pclath
 13247  00284C  9278               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13248  00284E  0011               	retfie		f
 13249  002850                     __end_of_service:
 13250                           	opt stack 0
 13251                           pclatu	equ	0xFFB
 13252                           pclath	equ	0xFFA
 13253                           tblptru	equ	0xFF8
 13254                           tblptrh	equ	0xFF7
 13255                           tblptrl	equ	0xFF6
 13256                           tablat	equ	0xFF5
 13257                           prodh	equ	0xFF4
 13258                           prodl	equ	0xFF3
 13259                           intcon	equ	0xFF2
 13260                           intcon3	equ	0xFF0
 13261                           postinc0	equ	0xFEE
 13262                           fsr0h	equ	0xFEA
 13263                           fsr0l	equ	0xFE9
 13264                           wreg	equ	0xFE8
 13265                           postdec1	equ	0xFE5
 13266                           fsr1h	equ	0xFE2
 13267                           fsr1l	equ	0xFE1
 13268                           indf2	equ	0xFDF
 13269                           postinc2	equ	0xFDE
 13270                           postdec2	equ	0xFDD
 13271                           fsr2h	equ	0xFDA
 13272                           fsr2l	equ	0xFD9
 13273                           status	equ	0xFD8
 13274                           
 13275 ;; *************** function i2_setAngle *****************
 13276 ;; Defined at:
 13277 ;;		line 43 in file "servo.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;  timer           2   92[COMRAM] int 
 13280 ;;  angle           2   94[COMRAM] int 
 13281 ;; Auto vars:     Size  Location     Type
 13282 ;;		None
 13283 ;; Return value:  Size  Location     Type
 13284 ;;                  1    wreg      void 
 13285 ;; Registers used:
 13286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13287 ;; Tracked objects:
 13288 ;;		On entry : 0/0
 13289 ;;		On exit  : 0/0
 13290 ;;		Unchanged: 0/0
 13291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13292 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13294 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13295 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13296 ;;Total ram usage:       10 bytes
 13297 ;; Hardware stack levels used:    1
 13298 ;; Hardware stack levels required when called:    3
 13299 ;; This function calls:
 13300 ;;		i2_angleToPulse
 13301 ;; This function is called by:
 13302 ;;		_service
 13303 ;; This function uses a non-reentrant model
 13304 ;;
 13305                           
 13306                           	psect	text58
 13307  0038D6                     __ptext58:
 13308                           	opt stack 0
 13309  0038D6                     i2_setAngle:
 13310                           	opt stack 19
 13311                           
 13312                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
 13313                           
 13314                           ;incstack = 0
 13315  0038D6  C05F  F046         	movff	i2setAngle@angle,i2angleToPulse@angle
 13316  0038DA  C060  F047         	movff	i2setAngle@angle+1,i2angleToPulse@angle+1
 13317  0038DE  ECEA  F012         	call	i2_angleToPulse	;wreg free
 13318  0038E2  1E46               	comf	?i2_angleToPulse,f,c
 13319  0038E4  1E47               	comf	?i2_angleToPulse+1,f,c
 13320  0038E6  1E48               	comf	?i2_angleToPulse+2,f,c
 13321  0038E8  1E49               	comf	?i2_angleToPulse+3,f,c
 13322  0038EA  2A46               	incf	?i2_angleToPulse,f,c
 13323  0038EC  0E00               	movlw	0
 13324  0038EE  2247               	addwfc	?i2_angleToPulse+1,f,c
 13325  0038F0  2248               	addwfc	?i2_angleToPulse+2,f,c
 13326  0038F2  2249               	addwfc	?i2_angleToPulse+3,f,c
 13327  0038F4  0EFF               	movlw	255
 13328  0038F6  2446               	addwf	?i2_angleToPulse,w,c
 13329  0038F8  6E61               	movwf	??i2_setAngle& (0+255),c
 13330  0038FA  0EFF               	movlw	255
 13331  0038FC  2047               	addwfc	?i2_angleToPulse+1,w,c
 13332  0038FE  6E62               	movwf	(??i2_setAngle+1)& (0+255),c
 13333  003900  0E00               	movlw	0
 13334  003902  2048               	addwfc	?i2_angleToPulse+2,w,c
 13335  003904  6E63               	movwf	(??i2_setAngle+2)& (0+255),c
 13336  003906  0E00               	movlw	0
 13337  003908  2049               	addwfc	?i2_angleToPulse+3,w,c
 13338  00390A  6E64               	movwf	(??i2_setAngle+3)& (0+255),c
 13339  00390C  0E32               	movlw	low _pulse
 13340  00390E  6E65               	movwf	(??i2_setAngle+4)& (0+255),c
 13341  003910  0E01               	movlw	high _pulse
 13342  003912  6E66               	movwf	(??i2_setAngle+5)& (0+255),c
 13343  003914  90D8               	bcf	status,0,c
 13344  003916  345D               	rlcf	i2setAngle@timer,w,c
 13345  003918  6ED9               	movwf	fsr2l,c
 13346  00391A  345E               	rlcf	i2setAngle@timer+1,w,c
 13347  00391C  6EDA               	movwf	fsr2h,c
 13348  00391E  90D8               	bcf	status,0,c
 13349  003920  36D9               	rlcf	fsr2l,f,c
 13350  003922  36DA               	rlcf	fsr2h,f,c
 13351  003924  5065               	movf	??i2_setAngle+4,w,c
 13352  003926  26D9               	addwf	fsr2l,f,c
 13353  003928  5066               	movf	??i2_setAngle+5,w,c
 13354  00392A  22DA               	addwfc	fsr2h,f,c
 13355  00392C  C061  FFDE         	movff	??i2_setAngle,postinc2
 13356  003930  C062  FFDE         	movff	??i2_setAngle+1,postinc2
 13357  003934  C063  FFDE         	movff	??i2_setAngle+2,postinc2
 13358  003938  C064  FFDE         	movff	??i2_setAngle+3,postinc2
 13359  00393C  0012               	return		;funcret
 13360  00393E                     __end_ofi2_setAngle:
 13361                           	opt stack 0
 13362                           pclatu	equ	0xFFB
 13363                           pclath	equ	0xFFA
 13364                           tblptru	equ	0xFF8
 13365                           tblptrh	equ	0xFF7
 13366                           tblptrl	equ	0xFF6
 13367                           tablat	equ	0xFF5
 13368                           prodh	equ	0xFF4
 13369                           prodl	equ	0xFF3
 13370                           intcon	equ	0xFF2
 13371                           intcon3	equ	0xFF0
 13372                           postinc0	equ	0xFEE
 13373                           fsr0h	equ	0xFEA
 13374                           fsr0l	equ	0xFE9
 13375                           wreg	equ	0xFE8
 13376                           postdec1	equ	0xFE5
 13377                           fsr1h	equ	0xFE2
 13378                           fsr1l	equ	0xFE1
 13379                           indf2	equ	0xFDF
 13380                           postinc2	equ	0xFDE
 13381                           postdec2	equ	0xFDD
 13382                           fsr2h	equ	0xFDA
 13383                           fsr2l	equ	0xFD9
 13384                           status	equ	0xFD8
 13385                           
 13386 ;; *************** function i2_angleToPulse *****************
 13387 ;; Defined at:
 13388 ;;		line 35 in file "servo.c"
 13389 ;; Parameters:    Size  Location     Type
 13390 ;;  angle           2   69[COMRAM] int 
 13391 ;; Auto vars:     Size  Location     Type
 13392 ;;  angleToPulse    4   88[COMRAM] long 
 13393 ;;  angleToPulse    4   81[COMRAM] long 
 13394 ;;  angleToPulse    4   77[COMRAM] long 
 13395 ;; Return value:  Size  Location     Type
 13396 ;;                  4   69[COMRAM] long 
 13397 ;; Registers used:
 13398 ;;		wreg, status,2, status,0, cstack
 13399 ;; Tracked objects:
 13400 ;;		On entry : 0/0
 13401 ;;		On exit  : 0/0
 13402 ;;		Unchanged: 0/0
 13403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13404 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13405 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13406 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13407 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13408 ;;Total ram usage:       23 bytes
 13409 ;; Hardware stack levels used:    1
 13410 ;; Hardware stack levels required when called:    2
 13411 ;; This function calls:
 13412 ;;		i2___altoft
 13413 ;;		i2___awtoft
 13414 ;;		i2___ftadd
 13415 ;;		i2___ftdiv
 13416 ;;		i2___ftmul
 13417 ;;		i2___fttol
 13418 ;; This function is called by:
 13419 ;;		i2_setAngle
 13420 ;; This function uses a non-reentrant model
 13421 ;;
 13422                           
 13423                           	psect	text59
 13424  0025D4                     __ptext59:
 13425                           	opt stack 0
 13426  0025D4                     i2_angleToPulse:
 13427                           	opt stack 19
 13428                           
 13429                           ;servo.c: 36: long offset = 0;
 13430                           
 13431                           ;incstack = 0
 13432  0025D4  0E00               	movlw	0
 13433  0025D6  6E4E               	movwf	i2angleToPulse@offset,c
 13434  0025D8  0E00               	movlw	0
 13435  0025DA  6E4F               	movwf	i2angleToPulse@offset+1,c
 13436  0025DC  0E00               	movlw	0
 13437  0025DE  6E50               	movwf	i2angleToPulse@offset+2,c
 13438  0025E0  0E00               	movlw	0
 13439  0025E2  6E51               	movwf	i2angleToPulse@offset+3,c
 13440                           
 13441                           ;servo.c: 37: long a000 = 1250;
 13442  0025E4  0EE2               	movlw	226
 13443  0025E6  6E59               	movwf	i2angleToPulse@a000,c
 13444  0025E8  0E04               	movlw	4
 13445  0025EA  6E5A               	movwf	i2angleToPulse@a000+1,c
 13446  0025EC  0E00               	movlw	0
 13447  0025EE  6E5B               	movwf	i2angleToPulse@a000+2,c
 13448  0025F0  0E00               	movlw	0
 13449  0025F2  6E5C               	movwf	i2angleToPulse@a000+3,c
 13450                           
 13451                           ;servo.c: 38: long a180 = 6250;
 13452  0025F4  0E6A               	movlw	106
 13453  0025F6  6E52               	movwf	i2angleToPulse@a180,c
 13454  0025F8  0E18               	movlw	24
 13455  0025FA  6E53               	movwf	i2angleToPulse@a180+1,c
 13456  0025FC  0E00               	movlw	0
 13457  0025FE  6E54               	movwf	i2angleToPulse@a180+2,c
 13458  002600  0E00               	movlw	0
 13459  002602  6E55               	movwf	i2angleToPulse@a180+3,c
 13460                           
 13461                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
 13462  002604  C059  F04A         	movff	i2angleToPulse@a000,??i2_angleToPulse
 13463  002608  C05A  F04B         	movff	i2angleToPulse@a000+1,??i2_angleToPulse+1
 13464  00260C  C05B  F04C         	movff	i2angleToPulse@a000+2,??i2_angleToPulse+2
 13465  002610  C05C  F04D         	movff	i2angleToPulse@a000+3,??i2_angleToPulse+3
 13466  002614  1E4A               	comf	??i2_angleToPulse,f,c
 13467  002616  1E4B               	comf	??i2_angleToPulse+1,f,c
 13468  002618  1E4C               	comf	??i2_angleToPulse+2,f,c
 13469  00261A  1E4D               	comf	??i2_angleToPulse+3,f,c
 13470  00261C  2A4A               	incf	??i2_angleToPulse,f,c
 13471  00261E  0E00               	movlw	0
 13472  002620  224B               	addwfc	??i2_angleToPulse+1,f,c
 13473  002622  224C               	addwfc	??i2_angleToPulse+2,f,c
 13474  002624  224D               	addwfc	??i2_angleToPulse+3,f,c
 13475  002626  5052               	movf	i2angleToPulse@a180,w,c
 13476  002628  244A               	addwf	??i2_angleToPulse,w,c
 13477  00262A  6E09               	movwf	i2___altoft@c,c
 13478  00262C  5053               	movf	i2angleToPulse@a180+1,w,c
 13479  00262E  204B               	addwfc	??i2_angleToPulse+1,w,c
 13480  002630  6E0A               	movwf	i2___altoft@c+1,c
 13481  002632  5054               	movf	i2angleToPulse@a180+2,w,c
 13482  002634  204C               	addwfc	??i2_angleToPulse+2,w,c
 13483  002636  6E0B               	movwf	i2___altoft@c+2,c
 13484  002638  5055               	movf	i2angleToPulse@a180+3,w,c
 13485  00263A  204D               	addwfc	??i2_angleToPulse+3,w,c
 13486  00263C  6E0C               	movwf	i2___altoft@c+3,c
 13487  00263E  EC2F  F01C         	call	i2___altoft	;wreg free
 13488  002642  C009  F01F         	movff	?i2___altoft,i2___ftmul@f2
 13489  002646  C00A  F020         	movff	?i2___altoft+1,i2___ftmul@f2+1
 13490  00264A  C00B  F021         	movff	?i2___altoft+2,i2___ftmul@f2+2
 13491  00264E  0E00               	movlw	0
 13492  002650  6E10               	movwf	i2___ftdiv@f2,c
 13493  002652  0E34               	movlw	52
 13494  002654  6E11               	movwf	i2___ftdiv@f2+1,c
 13495  002656  0E43               	movlw	67
 13496  002658  6E12               	movwf	i2___ftdiv@f2+2,c
 13497  00265A  C046  F009         	movff	i2angleToPulse@angle,i2___awtoft@c
 13498  00265E  C047  F00A         	movff	i2angleToPulse@angle+1,i2___awtoft@c+1
 13499  002662  EC3D  F01E         	call	i2___awtoft	;wreg free
 13500  002666  C009  F00D         	movff	?i2___awtoft,i2___ftdiv@f1
 13501  00266A  C00A  F00E         	movff	?i2___awtoft+1,i2___ftdiv@f1+1
 13502  00266E  C00B  F00F         	movff	?i2___awtoft+2,i2___ftdiv@f1+2
 13503  002672  EC98  F016         	call	i2___ftdiv	;wreg free
 13504  002676  C00D  F01C         	movff	?i2___ftdiv,i2___ftmul@f1
 13505  00267A  C00E  F01D         	movff	?i2___ftdiv+1,i2___ftmul@f1+1
 13506  00267E  C00F  F01E         	movff	?i2___ftdiv+2,i2___ftmul@f1+2
 13507  002682  ECAA  F015         	call	i2___ftmul	;wreg free
 13508  002686  C01C  F02E         	movff	?i2___ftmul,i2___ftadd@f2
 13509  00268A  C01D  F02F         	movff	?i2___ftmul+1,i2___ftadd@f2+1
 13510  00268E  C01E  F030         	movff	?i2___ftmul+2,i2___ftadd@f2+2
 13511  002692  C059  F009         	movff	i2angleToPulse@a000,i2___altoft@c
 13512  002696  C05A  F00A         	movff	i2angleToPulse@a000+1,i2___altoft@c+1
 13513  00269A  C05B  F00B         	movff	i2angleToPulse@a000+2,i2___altoft@c+2
 13514  00269E  C05C  F00C         	movff	i2angleToPulse@a000+3,i2___altoft@c+3
 13515  0026A2  EC2F  F01C         	call	i2___altoft	;wreg free
 13516  0026A6  C009  F02B         	movff	?i2___altoft,i2___ftadd@f1
 13517  0026AA  C00A  F02C         	movff	?i2___altoft+1,i2___ftadd@f1+1
 13518  0026AE  C00B  F02D         	movff	?i2___altoft+2,i2___ftadd@f1+2
 13519  0026B2  ECD7  F00D         	call	i2___ftadd	;wreg free
 13520  0026B6  C02B  F056         	movff	?i2___ftadd,i2_angleToPulse$1432
 13521  0026BA  C02C  F057         	movff	?i2___ftadd+1,i2_angleToPulse$1432+1
 13522  0026BE  C02D  F058         	movff	?i2___ftadd+2,i2_angleToPulse$1432+2
 13523                           
 13524                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
 13525  0026C2  C04E  F009         	movff	i2angleToPulse@offset,i2___altoft@c
 13526  0026C6  C04F  F00A         	movff	i2angleToPulse@offset+1,i2___altoft@c+1
 13527  0026CA  C050  F00B         	movff	i2angleToPulse@offset+2,i2___altoft@c+2
 13528  0026CE  C051  F00C         	movff	i2angleToPulse@offset+3,i2___altoft@c+3
 13529  0026D2  EC2F  F01C         	call	i2___altoft	;wreg free
 13530  0026D6  C009  F02E         	movff	?i2___altoft,i2___ftadd@f2
 13531  0026DA  C00A  F02F         	movff	?i2___altoft+1,i2___ftadd@f2+1
 13532  0026DE  C00B  F030         	movff	?i2___altoft+2,i2___ftadd@f2+2
 13533  0026E2  C056  F02B         	movff	i2_angleToPulse$1432,i2___ftadd@f1
 13534  0026E6  C057  F02C         	movff	i2_angleToPulse$1432+1,i2___ftadd@f1+1
 13535  0026EA  C058  F02D         	movff	i2_angleToPulse$1432+2,i2___ftadd@f1+2
 13536  0026EE  ECD7  F00D         	call	i2___ftadd	;wreg free
 13537  0026F2  C02B  F037         	movff	?i2___ftadd,i2___fttol@f1
 13538  0026F6  C02C  F038         	movff	?i2___ftadd+1,i2___fttol@f1+1
 13539  0026FA  C02D  F039         	movff	?i2___ftadd+2,i2___fttol@f1+2
 13540  0026FE  EC30  F015         	call	i2___fttol	;wreg free
 13541  002702  C037  F046         	movff	?i2___fttol,?i2_angleToPulse
 13542  002706  C038  F047         	movff	?i2___fttol+1,?i2_angleToPulse+1
 13543  00270A  C039  F048         	movff	?i2___fttol+2,?i2_angleToPulse+2
 13544  00270E  C03A  F049         	movff	?i2___fttol+3,?i2_angleToPulse+3
 13545  002712  0012               	return	
 13546  002714                     __end_ofi2_angleToPulse:
 13547                           	opt stack 0
 13548                           pclatu	equ	0xFFB
 13549                           pclath	equ	0xFFA
 13550                           tblptru	equ	0xFF8
 13551                           tblptrh	equ	0xFF7
 13552                           tblptrl	equ	0xFF6
 13553                           tablat	equ	0xFF5
 13554                           prodh	equ	0xFF4
 13555                           prodl	equ	0xFF3
 13556                           intcon	equ	0xFF2
 13557                           intcon3	equ	0xFF0
 13558                           postinc0	equ	0xFEE
 13559                           fsr0h	equ	0xFEA
 13560                           fsr0l	equ	0xFE9
 13561                           wreg	equ	0xFE8
 13562                           postdec1	equ	0xFE5
 13563                           fsr1h	equ	0xFE2
 13564                           fsr1l	equ	0xFE1
 13565                           indf2	equ	0xFDF
 13566                           postinc2	equ	0xFDE
 13567                           postdec2	equ	0xFDD
 13568                           fsr2h	equ	0xFDA
 13569                           fsr2l	equ	0xFD9
 13570                           status	equ	0xFD8
 13571                           
 13572 ;; *************** function i2___fttol *****************
 13573 ;; Defined at:
 13574 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 13575 ;; Parameters:    Size  Location     Type
 13576 ;;  f1              3   54[COMRAM] float 
 13577 ;; Auto vars:     Size  Location     Type
 13578 ;;  __fttol         4   64[COMRAM] unsigned long 
 13579 ;;  __fttol         1   68[COMRAM] unsigned char 
 13580 ;;  __fttol         1   63[COMRAM] unsigned char 
 13581 ;; Return value:  Size  Location     Type
 13582 ;;                  4   54[COMRAM] long 
 13583 ;; Registers used:
 13584 ;;		wreg, status,2, status,0
 13585 ;; Tracked objects:
 13586 ;;		On entry : 0/0
 13587 ;;		On exit  : 0/0
 13588 ;;		Unchanged: 0/0
 13589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13590 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13591 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13592 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13593 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13594 ;;Total ram usage:       15 bytes
 13595 ;; Hardware stack levels used:    1
 13596 ;; This function calls:
 13597 ;;		Nothing
 13598 ;; This function is called by:
 13599 ;;		i2_angleToPulse
 13600 ;; This function uses a non-reentrant model
 13601 ;;
 13602                           
 13603                           	psect	text60
 13604  002A60                     __ptext60:
 13605                           	opt stack 0
 13606  002A60                     i2___fttol:
 13607                           	opt stack 20
 13608                           
 13609                           ;incstack = 0
 13610  002A60  C039  F03B         	movff	i2___fttol@f1+2,??i2___fttol
 13611  002A64  6A3C               	clrf	(??i2___fttol+1)& (0+255),c
 13612  002A66  6A3D               	clrf	(??i2___fttol+2)& (0+255),c
 13613  002A68  3438               	rlcf	i2___fttol@f1+1,w,c
 13614  002A6A  363B               	rlcf	??i2___fttol& (0+255),f,c
 13615  002A6C  E301               	bnc	u503_41
 13616  002A6E  803C               	bsf	(??i2___fttol+1)& (0+255),0,c
 13617  002A70                     u503_41:
 13618  002A70  503B               	movf	??i2___fttol,w,c
 13619  002A72  6E45               	movwf	i2___fttol@exp1,c
 13620  002A74  5045               	movf	i2___fttol@exp1,w,c
 13621  002A76  A4D8               	btfss	status,2,c
 13622  002A78  D009               	goto	i2l4992
 13623  002A7A  0E00               	movlw	0
 13624  002A7C  6E37               	movwf	?i2___fttol,c
 13625  002A7E  0E00               	movlw	0
 13626  002A80  6E38               	movwf	?i2___fttol+1,c
 13627  002A82  0E00               	movlw	0
 13628  002A84  6E39               	movwf	?i2___fttol+2,c
 13629  002A86  0E00               	movlw	0
 13630  002A88  6E3A               	movwf	?i2___fttol+3,c
 13631  002A8A  0012               	return	
 13632  002A8C                     i2l4992:
 13633  002A8C  0E17               	movlw	23
 13634  002A8E  6E3B               	movwf	??i2___fttol& (0+255),c
 13635  002A90  C037  F03C         	movff	i2___fttol@f1,??i2___fttol+1
 13636  002A94  C038  F03D         	movff	i2___fttol@f1+1,??i2___fttol+2
 13637  002A98  C039  F03E         	movff	i2___fttol@f1+2,??i2___fttol+3
 13638  002A9C  283B               	incf	??i2___fttol,w,c
 13639  002A9E  6E3F               	movwf	(??i2___fttol+4)& (0+255),c
 13640  002AA0  D004               	goto	i2u505_40
 13641  002AA2                     i2u505_45:
 13642  002AA2  90D8               	bcf	status,0,c
 13643  002AA4  323E               	rrcf	??i2___fttol+3,f,c
 13644  002AA6  323D               	rrcf	??i2___fttol+2,f,c
 13645  002AA8  323C               	rrcf	??i2___fttol+1,f,c
 13646  002AAA                     i2u505_40:
 13647  002AAA  2E3F               	decfsz	(??i2___fttol+4)& (0+255),f,c
 13648  002AAC  D7FA               	goto	i2u505_45
 13649  002AAE  503C               	movf	??i2___fttol+1,w,c
 13650  002AB0  6E40               	movwf	i2___fttol@sign1,c
 13651  002AB2  8E38               	bsf	i2___fttol@f1+1,7,c
 13652  002AB4  0EFF               	movlw	255
 13653  002AB6  1637               	andwf	i2___fttol@f1,f,c
 13654  002AB8  0EFF               	movlw	255
 13655  002ABA  1638               	andwf	i2___fttol@f1+1,f,c
 13656  002ABC  0E00               	movlw	0
 13657  002ABE  1639               	andwf	i2___fttol@f1+2,f,c
 13658  002AC0  5037               	movf	i2___fttol@f1,w,c
 13659  002AC2  6E41               	movwf	i2___fttol@lval,c
 13660  002AC4  5038               	movf	i2___fttol@f1+1,w,c
 13661  002AC6  6E42               	movwf	i2___fttol@lval+1,c
 13662  002AC8  5039               	movf	i2___fttol@f1+2,w,c
 13663  002ACA  6E43               	movwf	i2___fttol@lval+2,c
 13664  002ACC  6A44               	clrf	i2___fttol@lval+3,c
 13665  002ACE  0E8E               	movlw	142
 13666  002AD0  5E45               	subwf	i2___fttol@exp1,f,c
 13667  002AD2  AE45               	btfss	i2___fttol@exp1,7,c
 13668  002AD4  D016               	goto	i2l5014
 13669  002AD6  5045               	movf	i2___fttol@exp1,w,c
 13670  002AD8  0A80               	xorlw	128
 13671  002ADA  0F8F               	addlw	143
 13672  002ADC  B0D8               	btfsc	status,0,c
 13673  002ADE  D009               	goto	i2l5010
 13674  002AE0  0E00               	movlw	0
 13675  002AE2  6E37               	movwf	?i2___fttol,c
 13676  002AE4  0E00               	movlw	0
 13677  002AE6  6E38               	movwf	?i2___fttol+1,c
 13678  002AE8  0E00               	movlw	0
 13679  002AEA  6E39               	movwf	?i2___fttol+2,c
 13680  002AEC  0E00               	movlw	0
 13681  002AEE  6E3A               	movwf	?i2___fttol+3,c
 13682  002AF0  0012               	return	
 13683  002AF2                     i2l5010:
 13684  002AF2  90D8               	bcf	status,0,c
 13685  002AF4  3244               	rrcf	i2___fttol@lval+3,f,c
 13686  002AF6  3243               	rrcf	i2___fttol@lval+2,f,c
 13687  002AF8  3242               	rrcf	i2___fttol@lval+1,f,c
 13688  002AFA  3241               	rrcf	i2___fttol@lval,f,c
 13689  002AFC  3E45               	incfsz	i2___fttol@exp1,f,c
 13690  002AFE  D7F9               	goto	i2l5010
 13691  002B00  D015               	goto	i2l5024
 13692  002B02                     i2l5014:
 13693  002B02  0E17               	movlw	23
 13694  002B04  6445               	cpfsgt	i2___fttol@exp1,c
 13695  002B06  D00F               	goto	i2l5022
 13696  002B08  0E00               	movlw	0
 13697  002B0A  6E37               	movwf	?i2___fttol,c
 13698  002B0C  0E00               	movlw	0
 13699  002B0E  6E38               	movwf	?i2___fttol+1,c
 13700  002B10  0E00               	movlw	0
 13701  002B12  6E39               	movwf	?i2___fttol+2,c
 13702  002B14  0E00               	movlw	0
 13703  002B16  6E3A               	movwf	?i2___fttol+3,c
 13704  002B18  0012               	return	
 13705  002B1A                     i2l5020:
 13706  002B1A  90D8               	bcf	status,0,c
 13707  002B1C  3641               	rlcf	i2___fttol@lval,f,c
 13708  002B1E  3642               	rlcf	i2___fttol@lval+1,f,c
 13709  002B20  3643               	rlcf	i2___fttol@lval+2,f,c
 13710  002B22  3644               	rlcf	i2___fttol@lval+3,f,c
 13711  002B24  0645               	decf	i2___fttol@exp1,f,c
 13712  002B26                     i2l5022:
 13713  002B26  5045               	movf	i2___fttol@exp1,w,c
 13714  002B28  A4D8               	btfss	status,2,c
 13715  002B2A  D7F7               	goto	i2l5020
 13716  002B2C                     i2l5024:
 13717  002B2C  5040               	movf	i2___fttol@sign1,w,c
 13718  002B2E  B4D8               	btfsc	status,2,c
 13719  002B30  D008               	goto	i2l5028
 13720  002B32  1E44               	comf	i2___fttol@lval+3,f,c
 13721  002B34  1E43               	comf	i2___fttol@lval+2,f,c
 13722  002B36  1E42               	comf	i2___fttol@lval+1,f,c
 13723  002B38  6C41               	negf	i2___fttol@lval,c
 13724  002B3A  0E00               	movlw	0
 13725  002B3C  2242               	addwfc	i2___fttol@lval+1,f,c
 13726  002B3E  2243               	addwfc	i2___fttol@lval+2,f,c
 13727  002B40  2244               	addwfc	i2___fttol@lval+3,f,c
 13728  002B42                     i2l5028:
 13729  002B42  C041  F037         	movff	i2___fttol@lval,?i2___fttol
 13730  002B46  C042  F038         	movff	i2___fttol@lval+1,?i2___fttol+1
 13731  002B4A  C043  F039         	movff	i2___fttol@lval+2,?i2___fttol+2
 13732  002B4E  C044  F03A         	movff	i2___fttol@lval+3,?i2___fttol+3
 13733  002B52  0012               	return	
 13734  002B54                     __end_ofi2___fttol:
 13735                           	opt stack 0
 13736                           pclatu	equ	0xFFB
 13737                           pclath	equ	0xFFA
 13738                           tblptru	equ	0xFF8
 13739                           tblptrh	equ	0xFF7
 13740                           tblptrl	equ	0xFF6
 13741                           tablat	equ	0xFF5
 13742                           prodh	equ	0xFF4
 13743                           prodl	equ	0xFF3
 13744                           intcon	equ	0xFF2
 13745                           intcon3	equ	0xFF0
 13746                           postinc0	equ	0xFEE
 13747                           fsr0h	equ	0xFEA
 13748                           fsr0l	equ	0xFE9
 13749                           wreg	equ	0xFE8
 13750                           postdec1	equ	0xFE5
 13751                           fsr1h	equ	0xFE2
 13752                           fsr1l	equ	0xFE1
 13753                           indf2	equ	0xFDF
 13754                           postinc2	equ	0xFDE
 13755                           postdec2	equ	0xFDD
 13756                           fsr2h	equ	0xFDA
 13757                           fsr2l	equ	0xFD9
 13758                           status	equ	0xFD8
 13759                           
 13760 ;; *************** function i2___ftmul *****************
 13761 ;; Defined at:
 13762 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 13763 ;; Parameters:    Size  Location     Type
 13764 ;;  f1              3   27[COMRAM] float 
 13765 ;;  f2              3   30[COMRAM] float 
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;  __ftmul         3   37[COMRAM] unsigned um
 13768 ;;  __ftmul         1   41[COMRAM] unsigned char 
 13769 ;;  __ftmul         1   40[COMRAM] unsigned char 
 13770 ;;  __ftmul         1   36[COMRAM] unsigned char 
 13771 ;; Return value:  Size  Location     Type
 13772 ;;                  3   27[COMRAM] float 
 13773 ;; Registers used:
 13774 ;;		wreg, status,2, status,0, cstack
 13775 ;; Tracked objects:
 13776 ;;		On entry : 0/0
 13777 ;;		On exit  : 0/0
 13778 ;;		Unchanged: 0/0
 13779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13780 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13781 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13782 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13783 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13784 ;;Total ram usage:       15 bytes
 13785 ;; Hardware stack levels used:    1
 13786 ;; Hardware stack levels required when called:    1
 13787 ;; This function calls:
 13788 ;;		i2___ftpack
 13789 ;; This function is called by:
 13790 ;;		i2_angleToPulse
 13791 ;; This function uses a non-reentrant model
 13792 ;;
 13793                           
 13794                           	psect	text61
 13795  002B54                     __ptext61:
 13796                           	opt stack 0
 13797  002B54                     i2___ftmul:
 13798                           	opt stack 19
 13799                           
 13800                           ;incstack = 0
 13801  002B54  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
 13802  002B58  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 13803  002B5A  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 13804  002B5C  341D               	rlcf	i2___ftmul@f1+1,w,c
 13805  002B5E  3622               	rlcf	??i2___ftmul& (0+255),f,c
 13806  002B60  E301               	bnc	u497_41
 13807  002B62  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 13808  002B64                     u497_41:
 13809  002B64  5022               	movf	??i2___ftmul,w,c
 13810  002B66  6E25               	movwf	i2___ftmul@exp,c
 13811  002B68  5025               	movf	i2___ftmul@exp,w,c
 13812  002B6A  A4D8               	btfss	status,2,c
 13813  002B6C  D007               	goto	i2l4944
 13814  002B6E  0E00               	movlw	0
 13815  002B70  6E1C               	movwf	?i2___ftmul,c
 13816  002B72  0E00               	movlw	0
 13817  002B74  6E1D               	movwf	?i2___ftmul+1,c
 13818  002B76  0E00               	movlw	0
 13819  002B78  6E1E               	movwf	?i2___ftmul+2,c
 13820  002B7A  0012               	return	
 13821  002B7C                     i2l4944:
 13822  002B7C  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
 13823  002B80  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 13824  002B82  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 13825  002B84  3420               	rlcf	i2___ftmul@f2+1,w,c
 13826  002B86  3622               	rlcf	??i2___ftmul& (0+255),f,c
 13827  002B88  E301               	bnc	u499_41
 13828  002B8A  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 13829  002B8C                     u499_41:
 13830  002B8C  5022               	movf	??i2___ftmul,w,c
 13831  002B8E  6E2A               	movwf	i2___ftmul@sign,c
 13832  002B90  502A               	movf	i2___ftmul@sign,w,c
 13833  002B92  A4D8               	btfss	status,2,c
 13834  002B94  D007               	goto	i2l4950
 13835  002B96  0E00               	movlw	0
 13836  002B98  6E1C               	movwf	?i2___ftmul,c
 13837  002B9A  0E00               	movlw	0
 13838  002B9C  6E1D               	movwf	?i2___ftmul+1,c
 13839  002B9E  0E00               	movlw	0
 13840  002BA0  6E1E               	movwf	?i2___ftmul+2,c
 13841  002BA2  0012               	return	
 13842  002BA4                     i2l4950:
 13843  002BA4  502A               	movf	i2___ftmul@sign,w,c
 13844  002BA6  0F7B               	addlw	123
 13845  002BA8  2625               	addwf	i2___ftmul@exp,f,c
 13846  002BAA  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 13847  002BAE  5021               	movf	i2___ftmul@f2+2,w,c
 13848  002BB0  1A2A               	xorwf	i2___ftmul@sign,f,c
 13849  002BB2  0E80               	movlw	128
 13850  002BB4  162A               	andwf	i2___ftmul@sign,f,c
 13851  002BB6  8E1D               	bsf	i2___ftmul@f1+1,7,c
 13852  002BB8  8E20               	bsf	i2___ftmul@f2+1,7,c
 13853  002BBA  0EFF               	movlw	255
 13854  002BBC  161F               	andwf	i2___ftmul@f2,f,c
 13855  002BBE  0EFF               	movlw	255
 13856  002BC0  1620               	andwf	i2___ftmul@f2+1,f,c
 13857  002BC2  0E00               	movlw	0
 13858  002BC4  1621               	andwf	i2___ftmul@f2+2,f,c
 13859  002BC6  0E00               	movlw	0
 13860  002BC8  6E26               	movwf	i2___ftmul@f3_as_product,c
 13861  002BCA  0E00               	movlw	0
 13862  002BCC  6E27               	movwf	i2___ftmul@f3_as_product+1,c
 13863  002BCE  0E00               	movlw	0
 13864  002BD0  6E28               	movwf	i2___ftmul@f3_as_product+2,c
 13865  002BD2  0E07               	movlw	7
 13866  002BD4  6E29               	movwf	i2___ftmul@cntr,c
 13867  002BD6                     i2l4964:
 13868  002BD6  A01C               	btfss	i2___ftmul@f1,0,c
 13869  002BD8  D006               	goto	i2l4968
 13870  002BDA  501F               	movf	i2___ftmul@f2,w,c
 13871  002BDC  2626               	addwf	i2___ftmul@f3_as_product,f,c
 13872  002BDE  5020               	movf	i2___ftmul@f2+1,w,c
 13873  002BE0  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 13874  002BE2  5021               	movf	i2___ftmul@f2+2,w,c
 13875  002BE4  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 13876  002BE6                     i2l4968:
 13877  002BE6  90D8               	bcf	status,0,c
 13878  002BE8  321E               	rrcf	i2___ftmul@f1+2,f,c
 13879  002BEA  321D               	rrcf	i2___ftmul@f1+1,f,c
 13880  002BEC  321C               	rrcf	i2___ftmul@f1,f,c
 13881  002BEE  90D8               	bcf	status,0,c
 13882  002BF0  361F               	rlcf	i2___ftmul@f2,f,c
 13883  002BF2  3620               	rlcf	i2___ftmul@f2+1,f,c
 13884  002BF4  3621               	rlcf	i2___ftmul@f2+2,f,c
 13885  002BF6  2E29               	decfsz	i2___ftmul@cntr,f,c
 13886  002BF8  D7EE               	goto	i2l4964
 13887  002BFA  0E09               	movlw	9
 13888  002BFC  6E29               	movwf	i2___ftmul@cntr,c
 13889  002BFE                     i2l4974:
 13890  002BFE  A01C               	btfss	i2___ftmul@f1,0,c
 13891  002C00  D006               	goto	i2l4978
 13892  002C02  501F               	movf	i2___ftmul@f2,w,c
 13893  002C04  2626               	addwf	i2___ftmul@f3_as_product,f,c
 13894  002C06  5020               	movf	i2___ftmul@f2+1,w,c
 13895  002C08  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 13896  002C0A  5021               	movf	i2___ftmul@f2+2,w,c
 13897  002C0C  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 13898  002C0E                     i2l4978:
 13899  002C0E  90D8               	bcf	status,0,c
 13900  002C10  321E               	rrcf	i2___ftmul@f1+2,f,c
 13901  002C12  321D               	rrcf	i2___ftmul@f1+1,f,c
 13902  002C14  321C               	rrcf	i2___ftmul@f1,f,c
 13903  002C16  90D8               	bcf	status,0,c
 13904  002C18  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
 13905  002C1A  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
 13906  002C1C  3226               	rrcf	i2___ftmul@f3_as_product,f,c
 13907  002C1E  2E29               	decfsz	i2___ftmul@cntr,f,c
 13908  002C20  D7EE               	goto	i2l4974
 13909  002C22  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 13910  002C26  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 13911  002C2A  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 13912  002C2E  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 13913  002C32  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 13914  002C36  ECF5  F018         	call	i2___ftpack	;wreg free
 13915  002C3A  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
 13916  002C3E  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
 13917  002C42  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
 13918  002C46  0012               	return	
 13919  002C48                     __end_ofi2___ftmul:
 13920                           	opt stack 0
 13921                           pclatu	equ	0xFFB
 13922                           pclath	equ	0xFFA
 13923                           tblptru	equ	0xFF8
 13924                           tblptrh	equ	0xFF7
 13925                           tblptrl	equ	0xFF6
 13926                           tablat	equ	0xFF5
 13927                           prodh	equ	0xFF4
 13928                           prodl	equ	0xFF3
 13929                           intcon	equ	0xFF2
 13930                           intcon3	equ	0xFF0
 13931                           postinc0	equ	0xFEE
 13932                           fsr0h	equ	0xFEA
 13933                           fsr0l	equ	0xFE9
 13934                           wreg	equ	0xFE8
 13935                           postdec1	equ	0xFE5
 13936                           fsr1h	equ	0xFE2
 13937                           fsr1l	equ	0xFE1
 13938                           indf2	equ	0xFDF
 13939                           postinc2	equ	0xFDE
 13940                           postdec2	equ	0xFDD
 13941                           fsr2h	equ	0xFDA
 13942                           fsr2l	equ	0xFD9
 13943                           status	equ	0xFD8
 13944                           
 13945 ;; *************** function i2___ftdiv *****************
 13946 ;; Defined at:
 13947 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 13948 ;; Parameters:    Size  Location     Type
 13949 ;;  f1              3   12[COMRAM] float 
 13950 ;;  f2              3   15[COMRAM] float 
 13951 ;; Auto vars:     Size  Location     Type
 13952 ;;  __ftdiv         3   22[COMRAM] float 
 13953 ;;  __ftdiv         1   26[COMRAM] unsigned char 
 13954 ;;  __ftdiv         1   25[COMRAM] unsigned char 
 13955 ;;  __ftdiv         1   21[COMRAM] unsigned char 
 13956 ;; Return value:  Size  Location     Type
 13957 ;;                  3   12[COMRAM] float 
 13958 ;; Registers used:
 13959 ;;		wreg, status,2, status,0, cstack
 13960 ;; Tracked objects:
 13961 ;;		On entry : 0/0
 13962 ;;		On exit  : 0/0
 13963 ;;		Unchanged: 0/0
 13964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13965 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13966 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13967 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13968 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13969 ;;Total ram usage:       15 bytes
 13970 ;; Hardware stack levels used:    1
 13971 ;; Hardware stack levels required when called:    1
 13972 ;; This function calls:
 13973 ;;		i2___ftpack
 13974 ;; This function is called by:
 13975 ;;		i2_angleToPulse
 13976 ;; This function uses a non-reentrant model
 13977 ;;
 13978                           
 13979                           	psect	text62
 13980  002D30                     __ptext62:
 13981                           	opt stack 0
 13982  002D30                     i2___ftdiv:
 13983                           	opt stack 19
 13984                           
 13985                           ;incstack = 0
 13986  002D30  C00F  F013         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 13987  002D34  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
 13988  002D36  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
 13989  002D38  340E               	rlcf	i2___ftdiv@f1+1,w,c
 13990  002D3A  3613               	rlcf	??i2___ftdiv& (0+255),f,c
 13991  002D3C  E301               	bnc	u492_41
 13992  002D3E  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 13993  002D40                     u492_41:
 13994  002D40  5013               	movf	??i2___ftdiv,w,c
 13995  002D42  6E1A               	movwf	i2___ftdiv@exp,c
 13996  002D44  501A               	movf	i2___ftdiv@exp,w,c
 13997  002D46  A4D8               	btfss	status,2,c
 13998  002D48  D007               	goto	i2l4898
 13999  002D4A  0E00               	movlw	0
 14000  002D4C  6E0D               	movwf	?i2___ftdiv,c
 14001  002D4E  0E00               	movlw	0
 14002  002D50  6E0E               	movwf	?i2___ftdiv+1,c
 14003  002D52  0E00               	movlw	0
 14004  002D54  6E0F               	movwf	?i2___ftdiv+2,c
 14005  002D56  0012               	return	
 14006  002D58                     i2l4898:
 14007  002D58  C012  F013         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 14008  002D5C  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
 14009  002D5E  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
 14010  002D60  3411               	rlcf	i2___ftdiv@f2+1,w,c
 14011  002D62  3613               	rlcf	??i2___ftdiv& (0+255),f,c
 14012  002D64  E301               	bnc	u494_41
 14013  002D66  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 14014  002D68                     u494_41:
 14015  002D68  5013               	movf	??i2___ftdiv,w,c
 14016  002D6A  6E1B               	movwf	i2___ftdiv@sign,c
 14017  002D6C  501B               	movf	i2___ftdiv@sign,w,c
 14018  002D6E  A4D8               	btfss	status,2,c
 14019  002D70  D007               	goto	i2l4904
 14020  002D72  0E00               	movlw	0
 14021  002D74  6E0D               	movwf	?i2___ftdiv,c
 14022  002D76  0E00               	movlw	0
 14023  002D78  6E0E               	movwf	?i2___ftdiv+1,c
 14024  002D7A  0E00               	movlw	0
 14025  002D7C  6E0F               	movwf	?i2___ftdiv+2,c
 14026  002D7E  0012               	return	
 14027  002D80                     i2l4904:
 14028  002D80  0E00               	movlw	0
 14029  002D82  6E17               	movwf	i2___ftdiv@f3,c
 14030  002D84  0E00               	movlw	0
 14031  002D86  6E18               	movwf	i2___ftdiv@f3+1,c
 14032  002D88  0E00               	movlw	0
 14033  002D8A  6E19               	movwf	i2___ftdiv@f3+2,c
 14034  002D8C  501B               	movf	i2___ftdiv@sign,w,c
 14035  002D8E  0F89               	addlw	137
 14036  002D90  5E1A               	subwf	i2___ftdiv@exp,f,c
 14037  002D92  C00F  F01B         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 14038  002D96  5012               	movf	i2___ftdiv@f2+2,w,c
 14039  002D98  1A1B               	xorwf	i2___ftdiv@sign,f,c
 14040  002D9A  0E80               	movlw	128
 14041  002D9C  161B               	andwf	i2___ftdiv@sign,f,c
 14042  002D9E  8E0E               	bsf	i2___ftdiv@f1+1,7,c
 14043  002DA0  0EFF               	movlw	255
 14044  002DA2  160D               	andwf	i2___ftdiv@f1,f,c
 14045  002DA4  0EFF               	movlw	255
 14046  002DA6  160E               	andwf	i2___ftdiv@f1+1,f,c
 14047  002DA8  0E00               	movlw	0
 14048  002DAA  160F               	andwf	i2___ftdiv@f1+2,f,c
 14049  002DAC  8E11               	bsf	i2___ftdiv@f2+1,7,c
 14050  002DAE  0EFF               	movlw	255
 14051  002DB0  1610               	andwf	i2___ftdiv@f2,f,c
 14052  002DB2  0EFF               	movlw	255
 14053  002DB4  1611               	andwf	i2___ftdiv@f2+1,f,c
 14054  002DB6  0E00               	movlw	0
 14055  002DB8  1612               	andwf	i2___ftdiv@f2+2,f,c
 14056  002DBA  0E18               	movlw	24
 14057  002DBC  6E16               	movwf	i2___ftdiv@cntr,c
 14058  002DBE                     i2l4924:
 14059  002DBE  90D8               	bcf	status,0,c
 14060  002DC0  3617               	rlcf	i2___ftdiv@f3,f,c
 14061  002DC2  3618               	rlcf	i2___ftdiv@f3+1,f,c
 14062  002DC4  3619               	rlcf	i2___ftdiv@f3+2,f,c
 14063  002DC6  5010               	movf	i2___ftdiv@f2,w,c
 14064  002DC8  5C0D               	subwf	i2___ftdiv@f1,w,c
 14065  002DCA  5011               	movf	i2___ftdiv@f2+1,w,c
 14066  002DCC  580E               	subwfb	i2___ftdiv@f1+1,w,c
 14067  002DCE  5012               	movf	i2___ftdiv@f2+2,w,c
 14068  002DD0  580F               	subwfb	i2___ftdiv@f1+2,w,c
 14069  002DD2  A0D8               	btfss	status,0,c
 14070  002DD4  D007               	goto	i2l1091
 14071  002DD6  5010               	movf	i2___ftdiv@f2,w,c
 14072  002DD8  5E0D               	subwf	i2___ftdiv@f1,f,c
 14073  002DDA  5011               	movf	i2___ftdiv@f2+1,w,c
 14074  002DDC  5A0E               	subwfb	i2___ftdiv@f1+1,f,c
 14075  002DDE  5012               	movf	i2___ftdiv@f2+2,w,c
 14076  002DE0  5A0F               	subwfb	i2___ftdiv@f1+2,f,c
 14077  002DE2  8017               	bsf	i2___ftdiv@f3,0,c
 14078  002DE4                     i2l1091:
 14079  002DE4  90D8               	bcf	status,0,c
 14080  002DE6  360D               	rlcf	i2___ftdiv@f1,f,c
 14081  002DE8  360E               	rlcf	i2___ftdiv@f1+1,f,c
 14082  002DEA  360F               	rlcf	i2___ftdiv@f1+2,f,c
 14083  002DEC  2E16               	decfsz	i2___ftdiv@cntr,f,c
 14084  002DEE  D7E7               	goto	i2l4924
 14085  002DF0  C017  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 14086  002DF4  C018  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 14087  002DF8  C019  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 14088  002DFC  C01A  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 14089  002E00  C01B  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 14090  002E04  ECF5  F018         	call	i2___ftpack	;wreg free
 14091  002E08  C001  F00D         	movff	?i2___ftpack,?i2___ftdiv
 14092  002E0C  C002  F00E         	movff	?i2___ftpack+1,?i2___ftdiv+1
 14093  002E10  C003  F00F         	movff	?i2___ftpack+2,?i2___ftdiv+2
 14094  002E14  0012               	return	
 14095  002E16                     __end_ofi2___ftdiv:
 14096                           	opt stack 0
 14097                           pclatu	equ	0xFFB
 14098                           pclath	equ	0xFFA
 14099                           tblptru	equ	0xFF8
 14100                           tblptrh	equ	0xFF7
 14101                           tblptrl	equ	0xFF6
 14102                           tablat	equ	0xFF5
 14103                           prodh	equ	0xFF4
 14104                           prodl	equ	0xFF3
 14105                           intcon	equ	0xFF2
 14106                           intcon3	equ	0xFF0
 14107                           postinc0	equ	0xFEE
 14108                           fsr0h	equ	0xFEA
 14109                           fsr0l	equ	0xFE9
 14110                           wreg	equ	0xFE8
 14111                           postdec1	equ	0xFE5
 14112                           fsr1h	equ	0xFE2
 14113                           fsr1l	equ	0xFE1
 14114                           indf2	equ	0xFDF
 14115                           postinc2	equ	0xFDE
 14116                           postdec2	equ	0xFDD
 14117                           fsr2h	equ	0xFDA
 14118                           fsr2l	equ	0xFD9
 14119                           status	equ	0xFD8
 14120                           
 14121 ;; *************** function i2___ftadd *****************
 14122 ;; Defined at:
 14123 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 14124 ;; Parameters:    Size  Location     Type
 14125 ;;  f1              3   42[COMRAM] float 
 14126 ;;  f2              3   45[COMRAM] float 
 14127 ;; Auto vars:     Size  Location     Type
 14128 ;;  __ftadd         1   53[COMRAM] unsigned char 
 14129 ;;  __ftadd         1   52[COMRAM] unsigned char 
 14130 ;;  __ftadd         1   51[COMRAM] unsigned char 
 14131 ;; Return value:  Size  Location     Type
 14132 ;;                  3   42[COMRAM] float 
 14133 ;; Registers used:
 14134 ;;		wreg, status,2, status,0, cstack
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14140 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14141 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14142 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14143 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14144 ;;Total ram usage:       12 bytes
 14145 ;; Hardware stack levels used:    1
 14146 ;; Hardware stack levels required when called:    1
 14147 ;; This function calls:
 14148 ;;		i2___ftpack
 14149 ;; This function is called by:
 14150 ;;		i2_angleToPulse
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           	psect	text63
 14155  001BAE                     __ptext63:
 14156                           	opt stack 0
 14157  001BAE                     i2___ftadd:
 14158                           	opt stack 19
 14159                           
 14160                           ;incstack = 0
 14161  001BAE  C02D  F031         	movff	i2___ftadd@f1+2,??i2___ftadd
 14162  001BB2  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
 14163  001BB4  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
 14164  001BB6  342C               	rlcf	i2___ftadd@f1+1,w,c
 14165  001BB8  3631               	rlcf	??i2___ftadd& (0+255),f,c
 14166  001BBA  E301               	bnc	u471_41
 14167  001BBC  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
 14168  001BBE                     u471_41:
 14169  001BBE  5031               	movf	??i2___ftadd,w,c
 14170  001BC0  6E36               	movwf	i2___ftadd@exp1,c
 14171  001BC2  C030  F031         	movff	i2___ftadd@f2+2,??i2___ftadd
 14172  001BC6  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
 14173  001BC8  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
 14174  001BCA  342F               	rlcf	i2___ftadd@f2+1,w,c
 14175  001BCC  3631               	rlcf	??i2___ftadd& (0+255),f,c
 14176  001BCE  E301               	bnc	u472_41
 14177  001BD0  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
 14178  001BD2                     u472_41:
 14179  001BD2  5031               	movf	??i2___ftadd,w,c
 14180  001BD4  6E35               	movwf	i2___ftadd@exp2,c
 14181  001BD6  5036               	movf	i2___ftadd@exp1,w,c
 14182  001BD8  B4D8               	btfsc	status,2,c
 14183  001BDA  D00B               	goto	i2l1056
 14184  001BDC  5035               	movf	i2___ftadd@exp2,w,c
 14185  001BDE  5C36               	subwf	i2___ftadd@exp1,w,c
 14186  001BE0  B0D8               	btfsc	status,0,c
 14187  001BE2  D00E               	goto	i2l4830
 14188  001BE4  5036               	movf	i2___ftadd@exp1,w,c
 14189  001BE6  0800               	sublw	0
 14190  001BE8  2435               	addwf	i2___ftadd@exp2,w,c
 14191  001BEA  6E31               	movwf	??i2___ftadd& (0+255),c
 14192  001BEC  0E18               	movlw	24
 14193  001BEE  6431               	cpfsgt	??i2___ftadd,c
 14194  001BF0  D007               	goto	i2l4830
 14195  001BF2                     i2l1056:
 14196  001BF2  C02E  F02B         	movff	i2___ftadd@f2,?i2___ftadd
 14197  001BF6  C02F  F02C         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 14198  001BFA  C030  F02D         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 14199  001BFE  0012               	return	
 14200  001C00                     i2l4830:
 14201  001C00  5035               	movf	i2___ftadd@exp2,w,c
 14202  001C02  B4D8               	btfsc	status,2,c
 14203  001C04  D00B               	goto	i2l1060
 14204  001C06  5036               	movf	i2___ftadd@exp1,w,c
 14205  001C08  5C35               	subwf	i2___ftadd@exp2,w,c
 14206  001C0A  B0D8               	btfsc	status,0,c
 14207  001C0C  D00E               	goto	i2l4836
 14208  001C0E  5035               	movf	i2___ftadd@exp2,w,c
 14209  001C10  0800               	sublw	0
 14210  001C12  2436               	addwf	i2___ftadd@exp1,w,c
 14211  001C14  6E31               	movwf	??i2___ftadd& (0+255),c
 14212  001C16  0E18               	movlw	24
 14213  001C18  6431               	cpfsgt	??i2___ftadd,c
 14214  001C1A  D007               	goto	i2l4836
 14215  001C1C                     i2l1060:
 14216  001C1C  C02B  F02B         	movff	i2___ftadd@f1,?i2___ftadd
 14217  001C20  C02C  F02C         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 14218  001C24  C02D  F02D         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 14219  001C28  0012               	return	
 14220  001C2A                     i2l4836:
 14221  001C2A  0E06               	movlw	6
 14222  001C2C  6E34               	movwf	i2___ftadd@sign,c
 14223  001C2E  BE2D               	btfsc	i2___ftadd@f1+2,7,c
 14224  001C30  8E34               	bsf	i2___ftadd@sign,7,c
 14225  001C32  BE30               	btfsc	i2___ftadd@f2+2,7,c
 14226  001C34  8C34               	bsf	i2___ftadd@sign,6,c
 14227  001C36  8E2C               	bsf	i2___ftadd@f1+1,7,c
 14228  001C38  0EFF               	movlw	255
 14229  001C3A  162B               	andwf	i2___ftadd@f1,f,c
 14230  001C3C  0EFF               	movlw	255
 14231  001C3E  162C               	andwf	i2___ftadd@f1+1,f,c
 14232  001C40  0E00               	movlw	0
 14233  001C42  162D               	andwf	i2___ftadd@f1+2,f,c
 14234  001C44  8E2F               	bsf	i2___ftadd@f2+1,7,c
 14235  001C46  0EFF               	movlw	255
 14236  001C48  162E               	andwf	i2___ftadd@f2,f,c
 14237  001C4A  0EFF               	movlw	255
 14238  001C4C  162F               	andwf	i2___ftadd@f2+1,f,c
 14239  001C4E  0E00               	movlw	0
 14240  001C50  1630               	andwf	i2___ftadd@f2+2,f,c
 14241  001C52  5035               	movf	i2___ftadd@exp2,w,c
 14242  001C54  5C36               	subwf	i2___ftadd@exp1,w,c
 14243  001C56  B0D8               	btfsc	status,0,c
 14244  001C58  D01B               	goto	i2l4862
 14245  001C5A                     i2l4852:
 14246  001C5A  90D8               	bcf	status,0,c
 14247  001C5C  362E               	rlcf	i2___ftadd@f2,f,c
 14248  001C5E  362F               	rlcf	i2___ftadd@f2+1,f,c
 14249  001C60  3630               	rlcf	i2___ftadd@f2+2,f,c
 14250  001C62  0635               	decf	i2___ftadd@exp2,f,c
 14251  001C64  5036               	movf	i2___ftadd@exp1,w,c
 14252  001C66  1835               	xorwf	i2___ftadd@exp2,w,c
 14253  001C68  B4D8               	btfsc	status,2,c
 14254  001C6A  D00D               	goto	i2l4860
 14255  001C6C  0634               	decf	i2___ftadd@sign,f,c
 14256  001C6E  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
 14257  001C72  0E07               	movlw	7
 14258  001C74  1631               	andwf	??i2___ftadd,f,c
 14259  001C76  B4D8               	btfsc	status,2,c
 14260  001C78  D006               	goto	i2l4860
 14261  001C7A  D7EF               	goto	i2l4852
 14262  001C7C                     i2l4858:
 14263  001C7C  90D8               	bcf	status,0,c
 14264  001C7E  322D               	rrcf	i2___ftadd@f1+2,f,c
 14265  001C80  322C               	rrcf	i2___ftadd@f1+1,f,c
 14266  001C82  322B               	rrcf	i2___ftadd@f1,f,c
 14267  001C84  2A36               	incf	i2___ftadd@exp1,f,c
 14268  001C86                     i2l4860:
 14269  001C86  5035               	movf	i2___ftadd@exp2,w,c
 14270  001C88  1836               	xorwf	i2___ftadd@exp1,w,c
 14271  001C8A  B4D8               	btfsc	status,2,c
 14272  001C8C  D01F               	goto	i2l1071
 14273  001C8E  D7F6               	goto	i2l4858
 14274  001C90                     i2l4862:
 14275  001C90  5036               	movf	i2___ftadd@exp1,w,c
 14276  001C92  5C35               	subwf	i2___ftadd@exp2,w,c
 14277  001C94  B0D8               	btfsc	status,0,c
 14278  001C96  D01A               	goto	i2l1071
 14279  001C98                     i2l4864:
 14280  001C98  90D8               	bcf	status,0,c
 14281  001C9A  362B               	rlcf	i2___ftadd@f1,f,c
 14282  001C9C  362C               	rlcf	i2___ftadd@f1+1,f,c
 14283  001C9E  362D               	rlcf	i2___ftadd@f1+2,f,c
 14284  001CA0  0636               	decf	i2___ftadd@exp1,f,c
 14285  001CA2  5036               	movf	i2___ftadd@exp1,w,c
 14286  001CA4  1835               	xorwf	i2___ftadd@exp2,w,c
 14287  001CA6  B4D8               	btfsc	status,2,c
 14288  001CA8  D00D               	goto	i2l4872
 14289  001CAA  0634               	decf	i2___ftadd@sign,f,c
 14290  001CAC  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
 14291  001CB0  0E07               	movlw	7
 14292  001CB2  1631               	andwf	??i2___ftadd,f,c
 14293  001CB4  B4D8               	btfsc	status,2,c
 14294  001CB6  D006               	goto	i2l4872
 14295  001CB8  D7EF               	goto	i2l4864
 14296  001CBA                     i2l4870:
 14297  001CBA  90D8               	bcf	status,0,c
 14298  001CBC  3230               	rrcf	i2___ftadd@f2+2,f,c
 14299  001CBE  322F               	rrcf	i2___ftadd@f2+1,f,c
 14300  001CC0  322E               	rrcf	i2___ftadd@f2,f,c
 14301  001CC2  2A35               	incf	i2___ftadd@exp2,f,c
 14302  001CC4                     i2l4872:
 14303  001CC4  5035               	movf	i2___ftadd@exp2,w,c
 14304  001CC6  1836               	xorwf	i2___ftadd@exp1,w,c
 14305  001CC8  A4D8               	btfss	status,2,c
 14306  001CCA  D7F7               	goto	i2l4870
 14307  001CCC                     i2l1071:
 14308  001CCC  AE34               	btfss	i2___ftadd@sign,7,c
 14309  001CCE  D00C               	goto	i2l1080
 14310  001CD0  0EFF               	movlw	255
 14311  001CD2  1A2B               	xorwf	i2___ftadd@f1,f,c
 14312  001CD4  0EFF               	movlw	255
 14313  001CD6  1A2C               	xorwf	i2___ftadd@f1+1,f,c
 14314  001CD8  0EFF               	movlw	255
 14315  001CDA  1A2D               	xorwf	i2___ftadd@f1+2,f,c
 14316  001CDC  0E01               	movlw	1
 14317  001CDE  262B               	addwf	i2___ftadd@f1,f,c
 14318  001CE0  0E00               	movlw	0
 14319  001CE2  222C               	addwfc	i2___ftadd@f1+1,f,c
 14320  001CE4  0E00               	movlw	0
 14321  001CE6  222D               	addwfc	i2___ftadd@f1+2,f,c
 14322  001CE8                     i2l1080:
 14323  001CE8  AC34               	btfss	i2___ftadd@sign,6,c
 14324  001CEA  D00C               	goto	i2l4878
 14325  001CEC  0EFF               	movlw	255
 14326  001CEE  1A2E               	xorwf	i2___ftadd@f2,f,c
 14327  001CF0  0EFF               	movlw	255
 14328  001CF2  1A2F               	xorwf	i2___ftadd@f2+1,f,c
 14329  001CF4  0EFF               	movlw	255
 14330  001CF6  1A30               	xorwf	i2___ftadd@f2+2,f,c
 14331  001CF8  0E01               	movlw	1
 14332  001CFA  262E               	addwf	i2___ftadd@f2,f,c
 14333  001CFC  0E00               	movlw	0
 14334  001CFE  222F               	addwfc	i2___ftadd@f2+1,f,c
 14335  001D00  0E00               	movlw	0
 14336  001D02  2230               	addwfc	i2___ftadd@f2+2,f,c
 14337  001D04                     i2l4878:
 14338  001D04  0E00               	movlw	0
 14339  001D06  6E34               	movwf	i2___ftadd@sign,c
 14340  001D08  502B               	movf	i2___ftadd@f1,w,c
 14341  001D0A  262E               	addwf	i2___ftadd@f2,f,c
 14342  001D0C  502C               	movf	i2___ftadd@f1+1,w,c
 14343  001D0E  222F               	addwfc	i2___ftadd@f2+1,f,c
 14344  001D10  502D               	movf	i2___ftadd@f1+2,w,c
 14345  001D12  2230               	addwfc	i2___ftadd@f2+2,f,c
 14346  001D14  AE30               	btfss	i2___ftadd@f2+2,7,c
 14347  001D16  D00E               	goto	i2l4888
 14348  001D18  0EFF               	movlw	255
 14349  001D1A  1A2E               	xorwf	i2___ftadd@f2,f,c
 14350  001D1C  0EFF               	movlw	255
 14351  001D1E  1A2F               	xorwf	i2___ftadd@f2+1,f,c
 14352  001D20  0EFF               	movlw	255
 14353  001D22  1A30               	xorwf	i2___ftadd@f2+2,f,c
 14354  001D24  0E01               	movlw	1
 14355  001D26  262E               	addwf	i2___ftadd@f2,f,c
 14356  001D28  0E00               	movlw	0
 14357  001D2A  222F               	addwfc	i2___ftadd@f2+1,f,c
 14358  001D2C  0E00               	movlw	0
 14359  001D2E  2230               	addwfc	i2___ftadd@f2+2,f,c
 14360  001D30  0E01               	movlw	1
 14361  001D32  6E34               	movwf	i2___ftadd@sign,c
 14362  001D34                     i2l4888:
 14363  001D34  C02E  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 14364  001D38  C02F  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 14365  001D3C  C030  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 14366  001D40  C036  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 14367  001D44  C034  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 14368  001D48  ECF5  F018         	call	i2___ftpack	;wreg free
 14369  001D4C  C001  F02B         	movff	?i2___ftpack,?i2___ftadd
 14370  001D50  C002  F02C         	movff	?i2___ftpack+1,?i2___ftadd+1
 14371  001D54  C003  F02D         	movff	?i2___ftpack+2,?i2___ftadd+2
 14372  001D58  0012               	return	
 14373  001D5A                     __end_ofi2___ftadd:
 14374                           	opt stack 0
 14375                           pclatu	equ	0xFFB
 14376                           pclath	equ	0xFFA
 14377                           tblptru	equ	0xFF8
 14378                           tblptrh	equ	0xFF7
 14379                           tblptrl	equ	0xFF6
 14380                           tablat	equ	0xFF5
 14381                           prodh	equ	0xFF4
 14382                           prodl	equ	0xFF3
 14383                           intcon	equ	0xFF2
 14384                           intcon3	equ	0xFF0
 14385                           postinc0	equ	0xFEE
 14386                           fsr0h	equ	0xFEA
 14387                           fsr0l	equ	0xFE9
 14388                           wreg	equ	0xFE8
 14389                           postdec1	equ	0xFE5
 14390                           fsr1h	equ	0xFE2
 14391                           fsr1l	equ	0xFE1
 14392                           indf2	equ	0xFDF
 14393                           postinc2	equ	0xFDE
 14394                           postdec2	equ	0xFDD
 14395                           fsr2h	equ	0xFDA
 14396                           fsr2l	equ	0xFD9
 14397                           status	equ	0xFD8
 14398                           
 14399 ;; *************** function i2___awtoft *****************
 14400 ;; Defined at:
 14401 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 14402 ;; Parameters:    Size  Location     Type
 14403 ;;  c               2    8[COMRAM] int 
 14404 ;; Auto vars:     Size  Location     Type
 14405 ;;  __awtoft        1   11[COMRAM] unsigned char 
 14406 ;; Return value:  Size  Location     Type
 14407 ;;                  3    8[COMRAM] float 
 14408 ;; Registers used:
 14409 ;;		wreg, status,2, status,0, cstack
 14410 ;; Tracked objects:
 14411 ;;		On entry : 0/0
 14412 ;;		On exit  : 0/0
 14413 ;;		Unchanged: 0/0
 14414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14415 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14418 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14419 ;;Total ram usage:        4 bytes
 14420 ;; Hardware stack levels used:    1
 14421 ;; Hardware stack levels required when called:    1
 14422 ;; This function calls:
 14423 ;;		i2___ftpack
 14424 ;; This function is called by:
 14425 ;;		i2_angleToPulse
 14426 ;; This function uses a non-reentrant model
 14427 ;;
 14428                           
 14429                           	psect	text64
 14430  003C7A                     __ptext64:
 14431                           	opt stack 0
 14432  003C7A                     i2___awtoft:
 14433                           	opt stack 19
 14434                           
 14435                           ;incstack = 0
 14436  003C7A  0E00               	movlw	0
 14437  003C7C  6E0C               	movwf	i2___awtoft@sign,c
 14438  003C7E  AE0A               	btfss	i2___awtoft@c+1,7,c
 14439  003C80  D006               	goto	i2l4818
 14440  003C82  6C09               	negf	i2___awtoft@c,c
 14441  003C84  1E0A               	comf	i2___awtoft@c+1,f,c
 14442  003C86  B0D8               	btfsc	status,0,c
 14443  003C88  2A0A               	incf	i2___awtoft@c+1,f,c
 14444  003C8A  0E01               	movlw	1
 14445  003C8C  6E0C               	movwf	i2___awtoft@sign,c
 14446  003C8E                     i2l4818:
 14447  003C8E  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 14448  003C92  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 14449  003C96  6A03               	clrf	i2___ftpack@arg+2,c
 14450  003C98  0E8E               	movlw	142
 14451  003C9A  6E04               	movwf	i2___ftpack@exp,c
 14452  003C9C  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 14453  003CA0  ECF5  F018         	call	i2___ftpack	;wreg free
 14454  003CA4  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 14455  003CA8  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 14456  003CAC  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 14457  003CB0  0012               	return	
 14458  003CB2                     __end_ofi2___awtoft:
 14459                           	opt stack 0
 14460                           pclatu	equ	0xFFB
 14461                           pclath	equ	0xFFA
 14462                           tblptru	equ	0xFF8
 14463                           tblptrh	equ	0xFF7
 14464                           tblptrl	equ	0xFF6
 14465                           tablat	equ	0xFF5
 14466                           prodh	equ	0xFF4
 14467                           prodl	equ	0xFF3
 14468                           intcon	equ	0xFF2
 14469                           intcon3	equ	0xFF0
 14470                           postinc0	equ	0xFEE
 14471                           fsr0h	equ	0xFEA
 14472                           fsr0l	equ	0xFE9
 14473                           wreg	equ	0xFE8
 14474                           postdec1	equ	0xFE5
 14475                           fsr1h	equ	0xFE2
 14476                           fsr1l	equ	0xFE1
 14477                           indf2	equ	0xFDF
 14478                           postinc2	equ	0xFDE
 14479                           postdec2	equ	0xFDD
 14480                           fsr2h	equ	0xFDA
 14481                           fsr2l	equ	0xFD9
 14482                           status	equ	0xFD8
 14483                           
 14484 ;; *************** function i2___altoft *****************
 14485 ;; Defined at:
 14486 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 14487 ;; Parameters:    Size  Location     Type
 14488 ;;  c               4    8[COMRAM] long 
 14489 ;; Auto vars:     Size  Location     Type
 14490 ;;  __altoft        1   17[COMRAM] unsigned char 
 14491 ;;  __altoft        1   16[COMRAM] unsigned char 
 14492 ;; Return value:  Size  Location     Type
 14493 ;;                  3    8[COMRAM] float 
 14494 ;; Registers used:
 14495 ;;		wreg, status,2, status,0, cstack
 14496 ;; Tracked objects:
 14497 ;;		On entry : 0/0
 14498 ;;		On exit  : 0/0
 14499 ;;		Unchanged: 0/0
 14500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14503 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14504 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14505 ;;Total ram usage:       10 bytes
 14506 ;; Hardware stack levels used:    1
 14507 ;; Hardware stack levels required when called:    1
 14508 ;; This function calls:
 14509 ;;		i2___ftpack
 14510 ;; This function is called by:
 14511 ;;		i2_angleToPulse
 14512 ;; This function uses a non-reentrant model
 14513 ;;
 14514                           
 14515                           	psect	text65
 14516  00385E                     __ptext65:
 14517                           	opt stack 0
 14518  00385E                     i2___altoft:
 14519                           	opt stack 19
 14520                           
 14521                           ;incstack = 0
 14522  00385E  0E00               	movlw	0
 14523  003860  6E12               	movwf	i2___altoft@sign,c
 14524  003862  0E8E               	movlw	142
 14525  003864  6E11               	movwf	i2___altoft@exp,c
 14526  003866  AE0C               	btfss	i2___altoft@c+3,7,c
 14527  003868  D011               	goto	i2l4804
 14528  00386A  1E0C               	comf	i2___altoft@c+3,f,c
 14529  00386C  1E0B               	comf	i2___altoft@c+2,f,c
 14530  00386E  1E0A               	comf	i2___altoft@c+1,f,c
 14531  003870  6C09               	negf	i2___altoft@c,c
 14532  003872  0E00               	movlw	0
 14533  003874  220A               	addwfc	i2___altoft@c+1,f,c
 14534  003876  220B               	addwfc	i2___altoft@c+2,f,c
 14535  003878  220C               	addwfc	i2___altoft@c+3,f,c
 14536  00387A  0E01               	movlw	1
 14537  00387C  6E12               	movwf	i2___altoft@sign,c
 14538  00387E  D006               	goto	i2l4804
 14539  003880                     i2l4802:
 14540  003880  90D8               	bcf	status,0,c
 14541  003882  320C               	rrcf	i2___altoft@c+3,f,c
 14542  003884  320B               	rrcf	i2___altoft@c+2,f,c
 14543  003886  320A               	rrcf	i2___altoft@c+1,f,c
 14544  003888  3209               	rrcf	i2___altoft@c,f,c
 14545  00388A  2A11               	incf	i2___altoft@exp,f,c
 14546  00388C                     i2l4804:
 14547  00388C  0E00               	movlw	0
 14548  00388E  1409               	andwf	i2___altoft@c,w,c
 14549  003890  6E0D               	movwf	??i2___altoft& (0+255),c
 14550  003892  0E00               	movlw	0
 14551  003894  140A               	andwf	i2___altoft@c+1,w,c
 14552  003896  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 14553  003898  0E00               	movlw	0
 14554  00389A  140B               	andwf	i2___altoft@c+2,w,c
 14555  00389C  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 14556  00389E  0EFF               	movlw	255
 14557  0038A0  140C               	andwf	i2___altoft@c+3,w,c
 14558  0038A2  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 14559  0038A4  500D               	movf	??i2___altoft,w,c
 14560  0038A6  100E               	iorwf	??i2___altoft+1,w,c
 14561  0038A8  100F               	iorwf	??i2___altoft+2,w,c
 14562  0038AA  1010               	iorwf	??i2___altoft+3,w,c
 14563  0038AC  A4D8               	btfss	status,2,c
 14564  0038AE  D7E8               	goto	i2l4802
 14565  0038B0  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 14566  0038B4  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 14567  0038B8  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 14568  0038BC  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 14569  0038C0  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 14570  0038C4  ECF5  F018         	call	i2___ftpack	;wreg free
 14571  0038C8  C001  F009         	movff	?i2___ftpack,?i2___altoft
 14572  0038CC  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 14573  0038D0  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 14574  0038D4  0012               	return	
 14575  0038D6                     __end_ofi2___altoft:
 14576                           	opt stack 0
 14577                           pclatu	equ	0xFFB
 14578                           pclath	equ	0xFFA
 14579                           tblptru	equ	0xFF8
 14580                           tblptrh	equ	0xFF7
 14581                           tblptrl	equ	0xFF6
 14582                           tablat	equ	0xFF5
 14583                           prodh	equ	0xFF4
 14584                           prodl	equ	0xFF3
 14585                           intcon	equ	0xFF2
 14586                           intcon3	equ	0xFF0
 14587                           postinc0	equ	0xFEE
 14588                           fsr0h	equ	0xFEA
 14589                           fsr0l	equ	0xFE9
 14590                           wreg	equ	0xFE8
 14591                           postdec1	equ	0xFE5
 14592                           fsr1h	equ	0xFE2
 14593                           fsr1l	equ	0xFE1
 14594                           indf2	equ	0xFDF
 14595                           postinc2	equ	0xFDE
 14596                           postdec2	equ	0xFDD
 14597                           fsr2h	equ	0xFDA
 14598                           fsr2l	equ	0xFD9
 14599                           status	equ	0xFD8
 14600                           
 14601 ;; *************** function i2___ftpack *****************
 14602 ;; Defined at:
 14603 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 14604 ;; Parameters:    Size  Location     Type
 14605 ;;  arg             3    0[COMRAM] unsigned um
 14606 ;;  exp             1    3[COMRAM] unsigned char 
 14607 ;;  sign            1    4[COMRAM] unsigned char 
 14608 ;; Auto vars:     Size  Location     Type
 14609 ;;		None
 14610 ;; Return value:  Size  Location     Type
 14611 ;;                  3    0[COMRAM] float 
 14612 ;; Registers used:
 14613 ;;		wreg, status,2, status,0
 14614 ;; Tracked objects:
 14615 ;;		On entry : 0/0
 14616 ;;		On exit  : 0/0
 14617 ;;		Unchanged: 0/0
 14618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14619 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14621 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14622 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14623 ;;Total ram usage:        8 bytes
 14624 ;; Hardware stack levels used:    1
 14625 ;; This function calls:
 14626 ;;		Nothing
 14627 ;; This function is called by:
 14628 ;;		i2___altoft
 14629 ;;		i2___awtoft
 14630 ;;		i2___ftadd
 14631 ;;		i2___ftdiv
 14632 ;;		i2___ftmul
 14633 ;; This function uses a non-reentrant model
 14634 ;;
 14635                           
 14636                           	psect	text66
 14637  0031EA                     __ptext66:
 14638                           	opt stack 0
 14639  0031EA                     i2___ftpack:
 14640                           	opt stack 19
 14641                           
 14642                           ;incstack = 0
 14643  0031EA  5004               	movf	i2___ftpack@exp,w,c
 14644  0031EC  B4D8               	btfsc	status,2,c
 14645  0031EE  D005               	goto	i2l4392
 14646  0031F0  5001               	movf	i2___ftpack@arg,w,c
 14647  0031F2  1002               	iorwf	i2___ftpack@arg+1,w,c
 14648  0031F4  1003               	iorwf	i2___ftpack@arg+2,w,c
 14649  0031F6  A4D8               	btfss	status,2,c
 14650  0031F8  D00C               	goto	i2l4398
 14651  0031FA                     i2l4392:
 14652  0031FA  0E00               	movlw	0
 14653  0031FC  6E01               	movwf	?i2___ftpack,c
 14654  0031FE  0E00               	movlw	0
 14655  003200  6E02               	movwf	?i2___ftpack+1,c
 14656  003202  0E00               	movlw	0
 14657  003204  6E03               	movwf	?i2___ftpack+2,c
 14658  003206  0012               	return	
 14659  003208                     i2l4396:
 14660  003208  2A04               	incf	i2___ftpack@exp,f,c
 14661  00320A  90D8               	bcf	status,0,c
 14662  00320C  3203               	rrcf	i2___ftpack@arg+2,f,c
 14663  00320E  3202               	rrcf	i2___ftpack@arg+1,f,c
 14664  003210  3201               	rrcf	i2___ftpack@arg,f,c
 14665  003212                     i2l4398:
 14666  003212  0E00               	movlw	0
 14667  003214  1401               	andwf	i2___ftpack@arg,w,c
 14668  003216  6E06               	movwf	??i2___ftpack& (0+255),c
 14669  003218  0E00               	movlw	0
 14670  00321A  1402               	andwf	i2___ftpack@arg+1,w,c
 14671  00321C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 14672  00321E  0EFE               	movlw	254
 14673  003220  1403               	andwf	i2___ftpack@arg+2,w,c
 14674  003222  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 14675  003224  5006               	movf	??i2___ftpack,w,c
 14676  003226  1007               	iorwf	??i2___ftpack+1,w,c
 14677  003228  1008               	iorwf	??i2___ftpack+2,w,c
 14678  00322A  B4D8               	btfsc	status,2,c
 14679  00322C  D00C               	goto	i2l4404
 14680  00322E  D7EC               	goto	i2l4396
 14681  003230                     i2l4400:
 14682  003230  2A04               	incf	i2___ftpack@exp,f,c
 14683  003232  0E01               	movlw	1
 14684  003234  2601               	addwf	i2___ftpack@arg,f,c
 14685  003236  0E00               	movlw	0
 14686  003238  2202               	addwfc	i2___ftpack@arg+1,f,c
 14687  00323A  0E00               	movlw	0
 14688  00323C  2203               	addwfc	i2___ftpack@arg+2,f,c
 14689  00323E  90D8               	bcf	status,0,c
 14690  003240  3203               	rrcf	i2___ftpack@arg+2,f,c
 14691  003242  3202               	rrcf	i2___ftpack@arg+1,f,c
 14692  003244  3201               	rrcf	i2___ftpack@arg,f,c
 14693  003246                     i2l4404:
 14694  003246  0E00               	movlw	0
 14695  003248  1401               	andwf	i2___ftpack@arg,w,c
 14696  00324A  6E06               	movwf	??i2___ftpack& (0+255),c
 14697  00324C  0E00               	movlw	0
 14698  00324E  1402               	andwf	i2___ftpack@arg+1,w,c
 14699  003250  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 14700  003252  0EFF               	movlw	255
 14701  003254  1403               	andwf	i2___ftpack@arg+2,w,c
 14702  003256  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 14703  003258  5006               	movf	??i2___ftpack,w,c
 14704  00325A  1007               	iorwf	??i2___ftpack+1,w,c
 14705  00325C  1008               	iorwf	??i2___ftpack+2,w,c
 14706  00325E  B4D8               	btfsc	status,2,c
 14707  003260  D006               	goto	i2l4408
 14708  003262  D7E6               	goto	i2l4400
 14709  003264                     i2l4406:
 14710  003264  0604               	decf	i2___ftpack@exp,f,c
 14711  003266  90D8               	bcf	status,0,c
 14712  003268  3601               	rlcf	i2___ftpack@arg,f,c
 14713  00326A  3602               	rlcf	i2___ftpack@arg+1,f,c
 14714  00326C  3603               	rlcf	i2___ftpack@arg+2,f,c
 14715  00326E                     i2l4408:
 14716  00326E  BE02               	btfsc	i2___ftpack@arg+1,7,c
 14717  003270  D003               	goto	i2l1033
 14718  003272  0E02               	movlw	2
 14719  003274  6004               	cpfslt	i2___ftpack@exp,c
 14720  003276  D7F6               	goto	i2l4406
 14721  003278                     i2l1033:
 14722  003278  A004               	btfss	i2___ftpack@exp,0,c
 14723  00327A  9E02               	bcf	i2___ftpack@arg+1,7,c
 14724  00327C  90D8               	bcf	status,0,c
 14725  00327E  3204               	rrcf	i2___ftpack@exp,f,c
 14726  003280  5004               	movf	i2___ftpack@exp,w,c
 14727  003282  1203               	iorwf	i2___ftpack@arg+2,f,c
 14728  003284  5005               	movf	i2___ftpack@sign,w,c
 14729  003286  A4D8               	btfss	status,2,c
 14730  003288  8E03               	bsf	i2___ftpack@arg+2,7,c
 14731  00328A  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 14732  00328E  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 14733  003292  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 14734  003296  0012               	return	
 14735  003298                     __end_ofi2___ftpack:
 14736                           	opt stack 0
 14737                           pclatu	equ	0xFFB
 14738                           pclath	equ	0xFFA
 14739                           tblptru	equ	0xFF8
 14740                           tblptrh	equ	0xFF7
 14741                           tblptrl	equ	0xFF6
 14742                           tablat	equ	0xFF5
 14743                           prodh	equ	0xFF4
 14744                           prodl	equ	0xFF3
 14745                           intcon	equ	0xFF2
 14746                           intcon3	equ	0xFF0
 14747                           postinc0	equ	0xFEE
 14748                           fsr0h	equ	0xFEA
 14749                           fsr0l	equ	0xFE9
 14750                           wreg	equ	0xFE8
 14751                           postdec1	equ	0xFE5
 14752                           fsr1h	equ	0xFE2
 14753                           fsr1l	equ	0xFE1
 14754                           indf2	equ	0xFDF
 14755                           postinc2	equ	0xFDE
 14756                           postdec2	equ	0xFDD
 14757                           fsr2h	equ	0xFDA
 14758                           fsr2l	equ	0xFD9
 14759                           status	equ	0xFD8
 14760                           
 14761 ;; *************** function _servoInterruptService *****************
 14762 ;; Defined at:
 14763 ;;		line 47 in file "servo.c"
 14764 ;; Parameters:    Size  Location     Type
 14765 ;;		None
 14766 ;; Auto vars:     Size  Location     Type
 14767 ;;  i               2   19[COMRAM] int 
 14768 ;;  flags           8   11[COMRAM] int [4]
 14769 ;; Return value:  Size  Location     Type
 14770 ;;                  1    wreg      void 
 14771 ;; Registers used:
 14772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14773 ;; Tracked objects:
 14774 ;;		On entry : 0/0
 14775 ;;		On exit  : 0/0
 14776 ;;		Unchanged: 0/0
 14777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14779 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14781 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14782 ;;Total ram usage:       12 bytes
 14783 ;; Hardware stack levels used:    1
 14784 ;; Hardware stack levels required when called:    1
 14785 ;; This function calls:
 14786 ;;		i2_digitalRead
 14787 ;;		i2_digitalWrite
 14788 ;;		i2_startTimer
 14789 ;; This function is called by:
 14790 ;;		_service
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           	psect	text67
 14795  0019DA                     __ptext67:
 14796                           	opt stack 0
 14797  0019DA                     _servoInterruptService:
 14798                           	opt stack 21
 14799                           
 14800                           ;servo.c: 49: int flags[4];
 14801                           ;servo.c: 50: flags[0] = TMR0IF;
 14802                           
 14803                           ;incstack = 0
 14804  0019DA  A4F2               	btfss	intcon,2,c	;volatile
 14805  0019DC  D002               	goto	i2u561_40
 14806  0019DE  0E01               	movlw	1
 14807  0019E0  D001               	goto	i2u562_40
 14808  0019E2                     i2u561_40:
 14809  0019E2  0E00               	movlw	0
 14810  0019E4                     i2u562_40:
 14811  0019E4  6E0C               	movwf	servoInterruptService@flags,c
 14812  0019E6  6A0D               	clrf	servoInterruptService@flags+1,c
 14813                           
 14814                           ;servo.c: 51: flags[1] = TMR1IF;
 14815  0019E8  A09E               	btfss	3998,0,c	;volatile
 14816  0019EA  D002               	goto	i2u563_40
 14817  0019EC  0E01               	movlw	1
 14818  0019EE  D001               	goto	i2u564_40
 14819  0019F0                     i2u563_40:
 14820  0019F0  0E00               	movlw	0
 14821  0019F2                     i2u564_40:
 14822  0019F2  6E0E               	movwf	servoInterruptService@flags+2,c
 14823  0019F4  6A0F               	clrf	servoInterruptService@flags+3,c
 14824                           
 14825                           ;servo.c: 52: flags[2] = TMR2IF;
 14826  0019F6  A29E               	btfss	3998,1,c	;volatile
 14827  0019F8  D002               	goto	i2u565_40
 14828  0019FA  0E01               	movlw	1
 14829  0019FC  D001               	goto	i2u566_40
 14830  0019FE                     i2u565_40:
 14831  0019FE  0E00               	movlw	0
 14832  001A00                     i2u566_40:
 14833  001A00  6E10               	movwf	servoInterruptService@flags+4,c
 14834  001A02  6A11               	clrf	servoInterruptService@flags+5,c
 14835                           
 14836                           ;servo.c: 53: flags[3] = TMR3IF;
 14837  001A04  A2A1               	btfss	4001,1,c	;volatile
 14838  001A06  D002               	goto	i2u567_40
 14839  001A08  0E01               	movlw	1
 14840  001A0A  D001               	goto	i2u568_40
 14841  001A0C                     i2u567_40:
 14842  001A0C  0E00               	movlw	0
 14843  001A0E                     i2u568_40:
 14844  001A0E  6E12               	movwf	servoInterruptService@flags+6,c
 14845  001A10  6A13               	clrf	servoInterruptService@flags+7,c
 14846                           
 14847                           ;servo.c: 55: for(int i = 0; i < 4; i++){
 14848  001A12  0E00               	movlw	0
 14849  001A14  6E15               	movwf	servoInterruptService@i+1,c
 14850  001A16  0E00               	movlw	0
 14851  001A18  6E14               	movwf	servoInterruptService@i,c
 14852  001A1A  BE15               	btfsc	servoInterruptService@i+1,7,c
 14853  001A1C  D008               	goto	i2l5478
 14854  001A1E  5015               	movf	servoInterruptService@i+1,w,c
 14855  001A20  E105               	bnz	i2u569_40
 14856  001A22  0E04               	movlw	4
 14857  001A24  5C14               	subwf	servoInterruptService@i,w,c
 14858  001A26  B0D8               	btfsc	status,0,c
 14859  001A28  0012               	return	
 14860  001A2A  D001               	goto	i2l5478
 14861  001A2C                     i2u569_40:
 14862  001A2C  0012               	return	
 14863  001A2E                     i2l5478:
 14864                           
 14865                           ;servo.c: 56: if(flags[i]){
 14866  001A2E  90D8               	bcf	status,0,c
 14867  001A30  3414               	rlcf	servoInterruptService@i,w,c
 14868  001A32  6ED9               	movwf	fsr2l,c
 14869  001A34  3415               	rlcf	servoInterruptService@i+1,w,c
 14870  001A36  6EDA               	movwf	fsr2h,c
 14871  001A38  0E0C               	movlw	low servoInterruptService@flags
 14872  001A3A  26D9               	addwf	fsr2l,f,c
 14873  001A3C  0E00               	movlw	high servoInterruptService@flags
 14874  001A3E  22DA               	addwfc	fsr2h,f,c
 14875  001A40  50DE               	movf	postinc2,w,c
 14876  001A42  10DE               	iorwf	postinc2,w,c
 14877  001A44  B4D8               	btfsc	status,2,c
 14878  001A46  D0AB               	goto	i2l5492
 14879                           
 14880                           ;servo.c: 58: if(digitalRead(port[i],pin[i])){
 14881  001A48  90D8               	bcf	status,0,c
 14882  001A4A  3414               	rlcf	servoInterruptService@i,w,c
 14883  001A4C  6ED9               	movwf	fsr2l,c
 14884  001A4E  3415               	rlcf	servoInterruptService@i+1,w,c
 14885  001A50  6EDA               	movwf	fsr2h,c
 14886  001A52  0E4A               	movlw	low _port
 14887  001A54  26D9               	addwf	fsr2l,f,c
 14888  001A56  0E01               	movlw	high _port
 14889  001A58  22DA               	addwfc	fsr2h,f,c
 14890  001A5A  CFDE F001          	movff	postinc2,i2digitalRead@port
 14891  001A5E  CFDD F002          	movff	postdec2,i2digitalRead@port+1
 14892  001A62  90D8               	bcf	status,0,c
 14893  001A64  3414               	rlcf	servoInterruptService@i,w,c
 14894  001A66  6ED9               	movwf	fsr2l,c
 14895  001A68  3415               	rlcf	servoInterruptService@i+1,w,c
 14896  001A6A  6EDA               	movwf	fsr2h,c
 14897  001A6C  0E42               	movlw	low _pin
 14898  001A6E  26D9               	addwf	fsr2l,f,c
 14899  001A70  0E01               	movlw	high _pin
 14900  001A72  22DA               	addwfc	fsr2h,f,c
 14901  001A74  CFDE F003          	movff	postinc2,i2digitalRead@pin
 14902  001A78  CFDD F004          	movff	postdec2,i2digitalRead@pin+1
 14903  001A7C  EC9C  F018         	call	i2_digitalRead	;wreg free
 14904  001A80  5001               	movf	?i2_digitalRead,w,c
 14905  001A82  1002               	iorwf	?i2_digitalRead+1,w,c
 14906  001A84  B4D8               	btfsc	status,2,c
 14907  001A86  D02F               	goto	i2l5486
 14908                           
 14909                           ;servo.c: 59: startTimer(i,15535);
 14910  001A88  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 14911  001A8C  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 14912  001A90  0EAF               	movlw	175
 14913  001A92  6E03               	movwf	i2startTimer@val,c
 14914  001A94  0E3C               	movlw	60
 14915  001A96  6E04               	movwf	i2startTimer@val+1,c
 14916  001A98  0E00               	movlw	0
 14917  001A9A  6E05               	movwf	i2startTimer@val+2,c
 14918  001A9C  0E00               	movlw	0
 14919  001A9E  6E06               	movwf	i2startTimer@val+3,c
 14920  001AA0  EC46  F01D         	call	i2_startTimer	;wreg free
 14921                           
 14922                           ;servo.c: 60: digitalWrite(port[i],pin[i],0);
 14923  001AA4  90D8               	bcf	status,0,c
 14924  001AA6  3414               	rlcf	servoInterruptService@i,w,c
 14925  001AA8  6ED9               	movwf	fsr2l,c
 14926  001AAA  3415               	rlcf	servoInterruptService@i+1,w,c
 14927  001AAC  6EDA               	movwf	fsr2h,c
 14928  001AAE  0E4A               	movlw	low _port
 14929  001AB0  26D9               	addwf	fsr2l,f,c
 14930  001AB2  0E01               	movlw	high _port
 14931  001AB4  22DA               	addwfc	fsr2h,f,c
 14932  001AB6  CFDE F001          	movff	postinc2,i2digitalWrite@port
 14933  001ABA  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
 14934  001ABE  90D8               	bcf	status,0,c
 14935  001AC0  3414               	rlcf	servoInterruptService@i,w,c
 14936  001AC2  6ED9               	movwf	fsr2l,c
 14937  001AC4  3415               	rlcf	servoInterruptService@i+1,w,c
 14938  001AC6  6EDA               	movwf	fsr2h,c
 14939  001AC8  0E42               	movlw	low _pin
 14940  001ACA  26D9               	addwf	fsr2l,f,c
 14941  001ACC  0E01               	movlw	high _pin
 14942  001ACE  22DA               	addwfc	fsr2h,f,c
 14943  001AD0  CFDE F003          	movff	postinc2,i2digitalWrite@pin
 14944  001AD4  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
 14945  001AD8  0E00               	movlw	0
 14946  001ADA  6E06               	movwf	i2digitalWrite@val+1,c
 14947  001ADC  0E00               	movlw	0
 14948  001ADE  6E05               	movwf	i2digitalWrite@val,c
 14949  001AE0  EC4C  F019         	call	i2_digitalWrite	;wreg free
 14950                           
 14951                           ;servo.c: 61: }
 14952  001AE4  D047               	goto	i2l5490
 14953  001AE6                     i2l5486:
 14954                           
 14955                           ;servo.c: 62: else{
 14956                           ;servo.c: 63: startTimer(i, pulse[i]);
 14957  001AE6  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 14958  001AEA  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 14959  001AEE  0E32               	movlw	low _pulse
 14960  001AF0  6E0A               	movwf	??_servoInterruptService& (0+255),c
 14961  001AF2  0E01               	movlw	high _pulse
 14962  001AF4  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
 14963  001AF6  90D8               	bcf	status,0,c
 14964  001AF8  3414               	rlcf	servoInterruptService@i,w,c
 14965  001AFA  6ED9               	movwf	fsr2l,c
 14966  001AFC  3415               	rlcf	servoInterruptService@i+1,w,c
 14967  001AFE  6EDA               	movwf	fsr2h,c
 14968  001B00  90D8               	bcf	status,0,c
 14969  001B02  36D9               	rlcf	fsr2l,f,c
 14970  001B04  36DA               	rlcf	fsr2h,f,c
 14971  001B06  500A               	movf	??_servoInterruptService,w,c
 14972  001B08  26D9               	addwf	fsr2l,f,c
 14973  001B0A  500B               	movf	??_servoInterruptService+1,w,c
 14974  001B0C  22DA               	addwfc	fsr2h,f,c
 14975  001B0E  CFDE F003          	movff	postinc2,i2startTimer@val
 14976  001B12  CFDE F004          	movff	postinc2,i2startTimer@val+1
 14977  001B16  CFDE F005          	movff	postinc2,i2startTimer@val+2
 14978  001B1A  CFDE F006          	movff	postinc2,i2startTimer@val+3
 14979  001B1E  EC46  F01D         	call	i2_startTimer	;wreg free
 14980                           
 14981                           ;servo.c: 64: digitalWrite(port[i],pin[i],1);
 14982  001B22  90D8               	bcf	status,0,c
 14983  001B24  3414               	rlcf	servoInterruptService@i,w,c
 14984  001B26  6ED9               	movwf	fsr2l,c
 14985  001B28  3415               	rlcf	servoInterruptService@i+1,w,c
 14986  001B2A  6EDA               	movwf	fsr2h,c
 14987  001B2C  0E4A               	movlw	low _port
 14988  001B2E  26D9               	addwf	fsr2l,f,c
 14989  001B30  0E01               	movlw	high _port
 14990  001B32  22DA               	addwfc	fsr2h,f,c
 14991  001B34  CFDE F001          	movff	postinc2,i2digitalWrite@port
 14992  001B38  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
 14993  001B3C  90D8               	bcf	status,0,c
 14994  001B3E  3414               	rlcf	servoInterruptService@i,w,c
 14995  001B40  6ED9               	movwf	fsr2l,c
 14996  001B42  3415               	rlcf	servoInterruptService@i+1,w,c
 14997  001B44  6EDA               	movwf	fsr2h,c
 14998  001B46  0E42               	movlw	low _pin
 14999  001B48  26D9               	addwf	fsr2l,f,c
 15000  001B4A  0E01               	movlw	high _pin
 15001  001B4C  22DA               	addwfc	fsr2h,f,c
 15002  001B4E  CFDE F003          	movff	postinc2,i2digitalWrite@pin
 15003  001B52  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
 15004  001B56  0E00               	movlw	0
 15005  001B58  6E06               	movwf	i2digitalWrite@val+1,c
 15006  001B5A  0E01               	movlw	1
 15007  001B5C  6E05               	movwf	i2digitalWrite@val,c
 15008  001B5E  EC4C  F019         	call	i2_digitalWrite	;wreg free
 15009                           
 15010                           ;servo.c: 65: }
 15011                           ;servo.c: 68: switch(i){
 15012  001B62  D008               	goto	i2l5490
 15013  001B64                     i2l530:
 15014  001B64  94F2               	bcf	intcon,2,c	;volatile
 15015  001B66  D01B               	goto	i2l5492
 15016  001B68                     i2l532:
 15017  001B68  909E               	bcf	3998,0,c	;volatile
 15018  001B6A  D019               	goto	i2l5492
 15019  001B6C                     i2l533:
 15020  001B6C  929E               	bcf	3998,1,c	;volatile
 15021  001B6E  D017               	goto	i2l5492
 15022  001B70                     i2l534:
 15023  001B70  92A1               	bcf	4001,1,c	;volatile
 15024                           
 15025                           ;servo.c: 73: }
 15026  001B72  D015               	goto	i2l5492
 15027  001B74                     i2l5490:
 15028  001B74  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 15029  001B78  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 15030                           
 15031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15032                           ; Switch size 1, requested type "space"
 15033                           ; Number of cases is 1, Range of values is 0 to 0
 15034                           ; switch strategies available:
 15035                           ; Name         Instructions Cycles
 15036                           ; simple_byte            4     3 (average)
 15037                           ;	Chosen strategy is simple_byte
 15038  001B7C  500B               	movf	??_servoInterruptService+1,w,c
 15039  001B7E  0A00               	xorlw	0	; case 0
 15040  001B80  A4D8               	btfss	status,2,c
 15041  001B82  D00D               	goto	i2l5492
 15042                           
 15043                           ; Switch size 1, requested type "space"
 15044                           ; Number of cases is 4, Range of values is 0 to 3
 15045                           ; switch strategies available:
 15046                           ; Name         Instructions Cycles
 15047                           ; simple_byte           13     7 (average)
 15048                           ;	Chosen strategy is simple_byte
 15049  001B84  500A               	movf	??_servoInterruptService,w,c
 15050  001B86  0A00               	xorlw	0	; case 0
 15051  001B88  B4D8               	btfsc	status,2,c
 15052  001B8A  D7EC               	goto	i2l530
 15053  001B8C  0A01               	xorlw	1	; case 1
 15054  001B8E  B4D8               	btfsc	status,2,c
 15055  001B90  D7EB               	goto	i2l532
 15056  001B92  0A03               	xorlw	3	; case 2
 15057  001B94  B4D8               	btfsc	status,2,c
 15058  001B96  D7EA               	goto	i2l533
 15059  001B98  0A01               	xorlw	1	; case 3
 15060  001B9A  B4D8               	btfsc	status,2,c
 15061  001B9C  D7E9               	goto	i2l534
 15062  001B9E                     i2l5492:
 15063  001B9E  4A14               	infsnz	servoInterruptService@i,f,c
 15064  001BA0  2A15               	incf	servoInterruptService@i+1,f,c
 15065  001BA2  BE15               	btfsc	servoInterruptService@i+1,7,c
 15066  001BA4  D744               	goto	i2l5478
 15067  001BA6  5015               	movf	servoInterruptService@i+1,w,c
 15068  001BA8  E101               	bnz	i2l535
 15069  001BAA  D73B               	goto	L5
 15070  001BAC                     i2l535:
 15071  001BAC  0012               	return		;funcret
 15072  001BAE                     __end_of_servoInterruptService:
 15073                           	opt stack 0
 15074                           pclatu	equ	0xFFB
 15075                           pclath	equ	0xFFA
 15076                           tblptru	equ	0xFF8
 15077                           tblptrh	equ	0xFF7
 15078                           tblptrl	equ	0xFF6
 15079                           tablat	equ	0xFF5
 15080                           prodh	equ	0xFF4
 15081                           prodl	equ	0xFF3
 15082                           intcon	equ	0xFF2
 15083                           intcon3	equ	0xFF0
 15084                           postinc0	equ	0xFEE
 15085                           fsr0h	equ	0xFEA
 15086                           fsr0l	equ	0xFE9
 15087                           wreg	equ	0xFE8
 15088                           postdec1	equ	0xFE5
 15089                           fsr1h	equ	0xFE2
 15090                           fsr1l	equ	0xFE1
 15091                           indf2	equ	0xFDF
 15092                           postinc2	equ	0xFDE
 15093                           postdec2	equ	0xFDD
 15094                           fsr2h	equ	0xFDA
 15095                           fsr2l	equ	0xFD9
 15096                           status	equ	0xFD8
 15097                           
 15098 ;; *************** function i2_startTimer *****************
 15099 ;; Defined at:
 15100 ;;		line 75 in file "timer.c"
 15101 ;; Parameters:    Size  Location     Type
 15102 ;;  timer           2    0[COMRAM] int 
 15103 ;;  val             4    2[COMRAM] long 
 15104 ;; Auto vars:     Size  Location     Type
 15105 ;;		None
 15106 ;; Return value:  Size  Location     Type
 15107 ;;                  1    wreg      void 
 15108 ;; Registers used:
 15109 ;;		wreg, status,2, status,0
 15110 ;; Tracked objects:
 15111 ;;		On entry : 0/0
 15112 ;;		On exit  : 0/0
 15113 ;;		Unchanged: 0/0
 15114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15115 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15117 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15118 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15119 ;;Total ram usage:        8 bytes
 15120 ;; Hardware stack levels used:    1
 15121 ;; This function calls:
 15122 ;;		Nothing
 15123 ;; This function is called by:
 15124 ;;		_servoInterruptService
 15125 ;; This function uses a non-reentrant model
 15126 ;;
 15127                           
 15128                           	psect	text68
 15129  003A8C                     __ptext68:
 15130                           	opt stack 0
 15131  003A8C                     i2_startTimer:
 15132                           	opt stack 21
 15133                           
 15134                           ;timer.c: 76: switch(timer){
 15135                           
 15136                           ;incstack = 0
 15137  003A8C  D012               	goto	i2l5272
 15138  003A8E                     i2l390:
 15139                           
 15140                           ;timer.c: 78: TMR0H = val>>8;
 15141  003A8E  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 15142                           
 15143                           ;timer.c: 79: TMR0L = val;
 15144  003A92  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
 15145                           
 15146                           ;timer.c: 80: T0CON |= 1<<7;
 15147  003A96  8ED5               	bsf	4053,7,c	;volatile
 15148                           
 15149                           ;timer.c: 81: break;
 15150  003A98  0012               	return	
 15151  003A9A                     i2l392:
 15152                           
 15153                           ;timer.c: 83: TMR1H = val>>8;
 15154  003A9A  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 15155                           
 15156                           ;timer.c: 84: TMR1L = val;
 15157  003A9E  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
 15158                           
 15159                           ;timer.c: 85: T1CON |= 1<<0;
 15160  003AA2  80CD               	bsf	4045,0,c	;volatile
 15161                           
 15162                           ;timer.c: 86: break;
 15163  003AA4  0012               	return	
 15164  003AA6                     i2l393:
 15165                           
 15166                           ;timer.c: 88: TMR3H = val>>8;
 15167  003AA6  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 15168                           
 15169                           ;timer.c: 89: TMR3L = val;
 15170  003AAA  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
 15171                           
 15172                           ;timer.c: 90: T3CON |= 1<<0;
 15173  003AAE  80B1               	bsf	4017,0,c	;volatile
 15174                           
 15175                           ;timer.c: 91: }
 15176  003AB0  0012               	return	
 15177  003AB2                     i2l5272:
 15178  003AB2  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
 15179  003AB6  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
 15180                           
 15181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15182                           ; Switch size 1, requested type "space"
 15183                           ; Number of cases is 1, Range of values is 0 to 0
 15184                           ; switch strategies available:
 15185                           ; Name         Instructions Cycles
 15186                           ; simple_byte            4     3 (average)
 15187                           ;	Chosen strategy is simple_byte
 15188  003ABA  5008               	movf	??i2_startTimer+1,w,c
 15189  003ABC  0A00               	xorlw	0	; case 0
 15190  003ABE  A4D8               	btfss	status,2,c
 15191  003AC0  0012               	return	
 15192                           
 15193                           ; Switch size 1, requested type "space"
 15194                           ; Number of cases is 3, Range of values is 0 to 3
 15195                           ; switch strategies available:
 15196                           ; Name         Instructions Cycles
 15197                           ; simple_byte           10     6 (average)
 15198                           ;	Chosen strategy is simple_byte
 15199  003AC2  5007               	movf	??i2_startTimer,w,c
 15200  003AC4  0A00               	xorlw	0	; case 0
 15201  003AC6  B4D8               	btfsc	status,2,c
 15202  003AC8  D7E2               	goto	i2l390
 15203  003ACA  0A01               	xorlw	1	; case 1
 15204  003ACC  B4D8               	btfsc	status,2,c
 15205  003ACE  D7E5               	goto	i2l392
 15206  003AD0  0A02               	xorlw	2	; case 3
 15207  003AD2  A4D8               	btfss	status,2,c
 15208  003AD4  0012               	return	
 15209  003AD6  D7E7               	goto	i2l393
 15210  003AD8                     __end_ofi2_startTimer:
 15211                           	opt stack 0
 15212                           pclatu	equ	0xFFB
 15213                           pclath	equ	0xFFA
 15214                           tblptru	equ	0xFF8
 15215                           tblptrh	equ	0xFF7
 15216                           tblptrl	equ	0xFF6
 15217                           tablat	equ	0xFF5
 15218                           prodh	equ	0xFF4
 15219                           prodl	equ	0xFF3
 15220                           intcon	equ	0xFF2
 15221                           intcon3	equ	0xFF0
 15222                           postinc0	equ	0xFEE
 15223                           fsr0h	equ	0xFEA
 15224                           fsr0l	equ	0xFE9
 15225                           wreg	equ	0xFE8
 15226                           postdec1	equ	0xFE5
 15227                           fsr1h	equ	0xFE2
 15228                           fsr1l	equ	0xFE1
 15229                           indf2	equ	0xFDF
 15230                           postinc2	equ	0xFDE
 15231                           postdec2	equ	0xFDD
 15232                           fsr2h	equ	0xFDA
 15233                           fsr2l	equ	0xFD9
 15234                           status	equ	0xFD8
 15235                           
 15236 ;; *************** function i2_digitalWrite *****************
 15237 ;; Defined at:
 15238 ;;		line 53 in file "iopin.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;  port            2    0[COMRAM] int 
 15241 ;;  pin             2    2[COMRAM] int 
 15242 ;;  val             2    4[COMRAM] int 
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;		None
 15245 ;; Return value:  Size  Location     Type
 15246 ;;                  1    wreg      void 
 15247 ;; Registers used:
 15248 ;;		wreg, status,2, status,0
 15249 ;; Tracked objects:
 15250 ;;		On entry : 0/0
 15251 ;;		On exit  : 0/0
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15254 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15256 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15257 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15258 ;;Total ram usage:        9 bytes
 15259 ;; Hardware stack levels used:    1
 15260 ;; This function calls:
 15261 ;;		Nothing
 15262 ;; This function is called by:
 15263 ;;		_servoInterruptService
 15264 ;; This function uses a non-reentrant model
 15265 ;;
 15266                           
 15267                           	psect	text69
 15268  003298                     __ptext69:
 15269                           	opt stack 0
 15270  003298                     i2_digitalWrite:
 15271                           	opt stack 21
 15272                           
 15273                           ;iopin.c: 54: pin = 1 << pin;
 15274                           
 15275                           ;incstack = 0
 15276  003298  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
 15277  00329C  0E01               	movlw	1
 15278  00329E  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
 15279  0032A0  0E00               	movlw	0
 15280  0032A2  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
 15281  0032A4  2A07               	incf	??i2_digitalWrite,f,c
 15282  0032A6  D003               	goto	i2u529_44
 15283  0032A8                     i2u529_45:
 15284  0032A8  90D8               	bcf	status,0,c
 15285  0032AA  3608               	rlcf	??i2_digitalWrite+1,f,c
 15286  0032AC  3609               	rlcf	??i2_digitalWrite+2,f,c
 15287  0032AE                     i2u529_44:
 15288  0032AE  2E07               	decfsz	??i2_digitalWrite,f,c
 15289  0032B0  D7FB               	goto	i2u529_45
 15290  0032B2  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
 15291  0032B6  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
 15292                           
 15293                           ;iopin.c: 55: if(val == 0){
 15294  0032BA  5005               	movf	i2digitalWrite@val,w,c
 15295  0032BC  1006               	iorwf	i2digitalWrite@val+1,w,c
 15296  0032BE  A4D8               	btfss	status,2,c
 15297  0032C0  D02B               	goto	i2l5258
 15298                           
 15299                           ;iopin.c: 56: pin ^= 0xff;
 15300  0032C2  0EFF               	movlw	255
 15301  0032C4  1A03               	xorwf	i2digitalWrite@pin,f,c
 15302                           
 15303                           ;iopin.c: 57: }
 15304                           ;iopin.c: 59: switch(port){
 15305  0032C6  D028               	goto	i2l5258
 15306  0032C8                     i2l5234:
 15307  0032C8  0405               	decf	i2digitalWrite@val,w,c
 15308  0032CA  1006               	iorwf	i2digitalWrite@val+1,w,c
 15309  0032CC  A4D8               	btfss	status,2,c
 15310  0032CE  D003               	goto	i2l5238
 15311  0032D0  5003               	movf	i2digitalWrite@pin,w,c
 15312  0032D2  1289               	iorwf	3977,f,c	;volatile
 15313  0032D4  0012               	return	
 15314  0032D6                     i2l5238:
 15315                           
 15316                           ;iopin.c: 61: else LATA &= pin;
 15317  0032D6  5003               	movf	i2digitalWrite@pin,w,c
 15318  0032D8  1689               	andwf	3977,f,c	;volatile
 15319                           
 15320                           ;iopin.c: 62: break;
 15321  0032DA  0012               	return	
 15322  0032DC                     i2l5240:
 15323  0032DC  0405               	decf	i2digitalWrite@val,w,c
 15324  0032DE  1006               	iorwf	i2digitalWrite@val+1,w,c
 15325  0032E0  A4D8               	btfss	status,2,c
 15326  0032E2  D003               	goto	i2l5244
 15327  0032E4  5003               	movf	i2digitalWrite@pin,w,c
 15328  0032E6  128A               	iorwf	3978,f,c	;volatile
 15329  0032E8  0012               	return	
 15330  0032EA                     i2l5244:
 15331                           
 15332                           ;iopin.c: 64: else LATB &= pin;
 15333  0032EA  5003               	movf	i2digitalWrite@pin,w,c
 15334  0032EC  168A               	andwf	3978,f,c	;volatile
 15335                           
 15336                           ;iopin.c: 65: break;
 15337  0032EE  0012               	return	
 15338  0032F0                     i2l5246:
 15339  0032F0  0405               	decf	i2digitalWrite@val,w,c
 15340  0032F2  1006               	iorwf	i2digitalWrite@val+1,w,c
 15341  0032F4  A4D8               	btfss	status,2,c
 15342  0032F6  D003               	goto	i2l5250
 15343  0032F8  5003               	movf	i2digitalWrite@pin,w,c
 15344  0032FA  128B               	iorwf	3979,f,c	;volatile
 15345  0032FC  0012               	return	
 15346  0032FE                     i2l5250:
 15347                           
 15348                           ;iopin.c: 67: else LATC &= pin;
 15349  0032FE  5003               	movf	i2digitalWrite@pin,w,c
 15350  003300  168B               	andwf	3979,f,c	;volatile
 15351                           
 15352                           ;iopin.c: 68: break;
 15353  003302  0012               	return	
 15354  003304                     i2l5252:
 15355  003304  0405               	decf	i2digitalWrite@val,w,c
 15356  003306  1006               	iorwf	i2digitalWrite@val+1,w,c
 15357  003308  A4D8               	btfss	status,2,c
 15358  00330A  D003               	goto	i2l5256
 15359  00330C  5003               	movf	i2digitalWrite@pin,w,c
 15360  00330E  128C               	iorwf	3980,f,c	;volatile
 15361  003310  0012               	return	
 15362  003312                     i2l5256:
 15363                           
 15364                           ;iopin.c: 70: else LATD &= pin;
 15365  003312  5003               	movf	i2digitalWrite@pin,w,c
 15366  003314  168C               	andwf	3980,f,c	;volatile
 15367                           
 15368                           ;iopin.c: 71: }
 15369  003316  0012               	return	
 15370  003318                     i2l5258:
 15371  003318  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
 15372  00331C  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
 15373                           
 15374                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15375                           ; Switch size 1, requested type "space"
 15376                           ; Number of cases is 1, Range of values is 0 to 0
 15377                           ; switch strategies available:
 15378                           ; Name         Instructions Cycles
 15379                           ; simple_byte            4     3 (average)
 15380                           ;	Chosen strategy is simple_byte
 15381  003320  5008               	movf	??i2_digitalWrite+1,w,c
 15382  003322  0A00               	xorlw	0	; case 0
 15383  003324  A4D8               	btfss	status,2,c
 15384  003326  0012               	return	
 15385                           
 15386                           ; Switch size 1, requested type "space"
 15387                           ; Number of cases is 4, Range of values is 0 to 3
 15388                           ; switch strategies available:
 15389                           ; Name         Instructions Cycles
 15390                           ; simple_byte           13     7 (average)
 15391                           ;	Chosen strategy is simple_byte
 15392  003328  5007               	movf	??i2_digitalWrite,w,c
 15393  00332A  0A00               	xorlw	0	; case 0
 15394  00332C  B4D8               	btfsc	status,2,c
 15395  00332E  D7CC               	goto	i2l5234
 15396  003330  0A01               	xorlw	1	; case 1
 15397  003332  B4D8               	btfsc	status,2,c
 15398  003334  D7D3               	goto	i2l5240
 15399  003336  0A03               	xorlw	3	; case 2
 15400  003338  B4D8               	btfsc	status,2,c
 15401  00333A  D7DA               	goto	i2l5246
 15402  00333C  0A01               	xorlw	1	; case 3
 15403  00333E  A4D8               	btfss	status,2,c
 15404  003340  0012               	return	
 15405  003342  D7E0               	goto	i2l5252
 15406  003344                     __end_ofi2_digitalWrite:
 15407                           	opt stack 0
 15408                           pclatu	equ	0xFFB
 15409                           pclath	equ	0xFFA
 15410                           tblptru	equ	0xFF8
 15411                           tblptrh	equ	0xFF7
 15412                           tblptrl	equ	0xFF6
 15413                           tablat	equ	0xFF5
 15414                           prodh	equ	0xFF4
 15415                           prodl	equ	0xFF3
 15416                           intcon	equ	0xFF2
 15417                           intcon3	equ	0xFF0
 15418                           postinc0	equ	0xFEE
 15419                           fsr0h	equ	0xFEA
 15420                           fsr0l	equ	0xFE9
 15421                           wreg	equ	0xFE8
 15422                           postdec1	equ	0xFE5
 15423                           fsr1h	equ	0xFE2
 15424                           fsr1l	equ	0xFE1
 15425                           indf2	equ	0xFDF
 15426                           postinc2	equ	0xFDE
 15427                           postdec2	equ	0xFDD
 15428                           fsr2h	equ	0xFDA
 15429                           fsr2l	equ	0xFD9
 15430                           status	equ	0xFD8
 15431                           
 15432 ;; *************** function i2_digitalRead *****************
 15433 ;; Defined at:
 15434 ;;		line 43 in file "iopin.c"
 15435 ;; Parameters:    Size  Location     Type
 15436 ;;  port            2    0[COMRAM] int 
 15437 ;;  pin             2    2[COMRAM] int 
 15438 ;; Auto vars:     Size  Location     Type
 15439 ;;		None
 15440 ;; Return value:  Size  Location     Type
 15441 ;;                  2    0[COMRAM] int 
 15442 ;; Registers used:
 15443 ;;		wreg, status,2, status,0
 15444 ;; Tracked objects:
 15445 ;;		On entry : 0/0
 15446 ;;		On exit  : 0/0
 15447 ;;		Unchanged: 0/0
 15448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15449 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15451 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15452 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15453 ;;Total ram usage:        6 bytes
 15454 ;; Hardware stack levels used:    1
 15455 ;; This function calls:
 15456 ;;		Nothing
 15457 ;; This function is called by:
 15458 ;;		_servoInterruptService
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           	psect	text70
 15463  003138                     __ptext70:
 15464                           	opt stack 0
 15465  003138                     i2_digitalRead:
 15466                           	opt stack 21
 15467                           
 15468                           ;iopin.c: 44: switch(port){
 15469                           
 15470                           ;incstack = 0
 15471  003138  D040               	goto	i2l5224
 15472  00313A                     i2l5206:
 15473  00313A  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 15474  00313E  CF80 F006          	movff	3968,??i2_digitalRead+1	;volatile
 15475  003142  2A05               	incf	??i2_digitalRead,f,c
 15476  003144  D002               	goto	i2u525_44
 15477  003146                     i2u525_45:
 15478  003146  90D8               	bcf	status,0,c
 15479  003148  3206               	rrcf	??i2_digitalRead+1,f,c
 15480  00314A                     i2u525_44:
 15481  00314A  2E05               	decfsz	??i2_digitalRead,f,c
 15482  00314C  D7FC               	goto	i2u525_45
 15483  00314E  0E01               	movlw	1
 15484  003150  1606               	andwf	??i2_digitalRead+1,f,c
 15485  003152  5006               	movf	??i2_digitalRead+1,w,c
 15486  003154  6E01               	movwf	?i2_digitalRead,c
 15487  003156  6A02               	clrf	?i2_digitalRead+1,c
 15488  003158  0012               	return	
 15489  00315A                     i2l5210:
 15490  00315A  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 15491  00315E  CF81 F006          	movff	3969,??i2_digitalRead+1	;volatile
 15492  003162  2A05               	incf	??i2_digitalRead,f,c
 15493  003164  D002               	goto	i2u526_44
 15494  003166                     i2u526_45:
 15495  003166  90D8               	bcf	status,0,c
 15496  003168  3206               	rrcf	??i2_digitalRead+1,f,c
 15497  00316A                     i2u526_44:
 15498  00316A  2E05               	decfsz	??i2_digitalRead,f,c
 15499  00316C  D7FC               	goto	i2u526_45
 15500  00316E  0E01               	movlw	1
 15501  003170  1606               	andwf	??i2_digitalRead+1,f,c
 15502  003172  5006               	movf	??i2_digitalRead+1,w,c
 15503  003174  6E01               	movwf	?i2_digitalRead,c
 15504  003176  6A02               	clrf	?i2_digitalRead+1,c
 15505  003178  0012               	return	
 15506  00317A                     i2l5214:
 15507  00317A  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 15508  00317E  CF82 F006          	movff	3970,??i2_digitalRead+1	;volatile
 15509  003182  2A05               	incf	??i2_digitalRead,f,c
 15510  003184  D002               	goto	i2u527_44
 15511  003186                     i2u527_45:
 15512  003186  90D8               	bcf	status,0,c
 15513  003188  3206               	rrcf	??i2_digitalRead+1,f,c
 15514  00318A                     i2u527_44:
 15515  00318A  2E05               	decfsz	??i2_digitalRead,f,c
 15516  00318C  D7FC               	goto	i2u527_45
 15517  00318E  0E01               	movlw	1
 15518  003190  1606               	andwf	??i2_digitalRead+1,f,c
 15519  003192  5006               	movf	??i2_digitalRead+1,w,c
 15520  003194  6E01               	movwf	?i2_digitalRead,c
 15521  003196  6A02               	clrf	?i2_digitalRead+1,c
 15522  003198  0012               	return	
 15523  00319A                     i2l5218:
 15524  00319A  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 15525  00319E  CF83 F006          	movff	3971,??i2_digitalRead+1	;volatile
 15526  0031A2  2A05               	incf	??i2_digitalRead,f,c
 15527  0031A4  D002               	goto	i2u528_44
 15528  0031A6                     i2u528_45:
 15529  0031A6  90D8               	bcf	status,0,c
 15530  0031A8  3206               	rrcf	??i2_digitalRead+1,f,c
 15531  0031AA                     i2u528_44:
 15532  0031AA  2E05               	decfsz	??i2_digitalRead,f,c
 15533  0031AC  D7FC               	goto	i2u528_45
 15534  0031AE  0E01               	movlw	1
 15535  0031B0  1606               	andwf	??i2_digitalRead+1,f,c
 15536  0031B2  5006               	movf	??i2_digitalRead+1,w,c
 15537  0031B4  6E01               	movwf	?i2_digitalRead,c
 15538  0031B6  6A02               	clrf	?i2_digitalRead+1,c
 15539  0031B8  0012               	return	
 15540  0031BA                     i2l5224:
 15541  0031BA  C001  F005         	movff	i2digitalRead@port,??i2_digitalRead
 15542  0031BE  C002  F006         	movff	i2digitalRead@port+1,??i2_digitalRead+1
 15543                           
 15544                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15545                           ; Switch size 1, requested type "space"
 15546                           ; Number of cases is 1, Range of values is 0 to 0
 15547                           ; switch strategies available:
 15548                           ; Name         Instructions Cycles
 15549                           ; simple_byte            4     3 (average)
 15550                           ;	Chosen strategy is simple_byte
 15551  0031C2  5006               	movf	??i2_digitalRead+1,w,c
 15552  0031C4  0A00               	xorlw	0	; case 0
 15553  0031C6  A4D8               	btfss	status,2,c
 15554  0031C8  D00D               	goto	i2l285
 15555                           
 15556                           ; Switch size 1, requested type "space"
 15557                           ; Number of cases is 4, Range of values is 0 to 3
 15558                           ; switch strategies available:
 15559                           ; Name         Instructions Cycles
 15560                           ; simple_byte           13     7 (average)
 15561                           ;	Chosen strategy is simple_byte
 15562  0031CA  5005               	movf	??i2_digitalRead,w,c
 15563  0031CC  0A00               	xorlw	0	; case 0
 15564  0031CE  B4D8               	btfsc	status,2,c
 15565  0031D0  D7B4               	goto	i2l5206
 15566  0031D2  0A01               	xorlw	1	; case 1
 15567  0031D4  B4D8               	btfsc	status,2,c
 15568  0031D6  D7C1               	goto	i2l5210
 15569  0031D8  0A03               	xorlw	3	; case 2
 15570  0031DA  B4D8               	btfsc	status,2,c
 15571  0031DC  D7CE               	goto	i2l5214
 15572  0031DE  0A01               	xorlw	1	; case 3
 15573  0031E0  B4D8               	btfsc	status,2,c
 15574  0031E2  D7DB               	goto	i2l5218
 15575  0031E4                     i2l285:
 15576                           
 15577                           ;iopin.c: 50: return -1;
 15578  0031E4  6801               	setf	?i2_digitalRead,c
 15579  0031E6  6802               	setf	?i2_digitalRead+1,c
 15580  0031E8  0012               	return		;funcret
 15581  0031EA                     __end_ofi2_digitalRead:
 15582                           	opt stack 0
 15583                           pclatu	equ	0xFFB
 15584                           pclath	equ	0xFFA
 15585                           tblptru	equ	0xFF8
 15586                           tblptrh	equ	0xFF7
 15587                           tblptrl	equ	0xFF6
 15588                           tablat	equ	0xFF5
 15589                           prodh	equ	0xFF4
 15590                           prodl	equ	0xFF3
 15591                           intcon	equ	0xFF2
 15592                           intcon3	equ	0xFF0
 15593                           postinc0	equ	0xFEE
 15594                           fsr0h	equ	0xFEA
 15595                           fsr0l	equ	0xFE9
 15596                           wreg	equ	0xFE8
 15597                           postdec1	equ	0xFE5
 15598                           fsr1h	equ	0xFE2
 15599                           fsr1l	equ	0xFE1
 15600                           indf2	equ	0xFDF
 15601                           postinc2	equ	0xFDE
 15602                           postdec2	equ	0xFDD
 15603                           fsr2h	equ	0xFDA
 15604                           fsr2l	equ	0xFD9
 15605                           status	equ	0xFD8
 15606                           pclatu	equ	0xFFB
 15607                           pclath	equ	0xFFA
 15608                           tblptru	equ	0xFF8
 15609                           tblptrh	equ	0xFF7
 15610                           tblptrl	equ	0xFF6
 15611                           tablat	equ	0xFF5
 15612                           prodh	equ	0xFF4
 15613                           prodl	equ	0xFF3
 15614                           intcon	equ	0xFF2
 15615                           intcon3	equ	0xFF0
 15616                           postinc0	equ	0xFEE
 15617                           fsr0h	equ	0xFEA
 15618                           fsr0l	equ	0xFE9
 15619                           wreg	equ	0xFE8
 15620                           postdec1	equ	0xFE5
 15621                           fsr1h	equ	0xFE2
 15622                           fsr1l	equ	0xFE1
 15623                           indf2	equ	0xFDF
 15624                           postinc2	equ	0xFDE
 15625                           postdec2	equ	0xFDD
 15626                           fsr2h	equ	0xFDA
 15627                           fsr2l	equ	0xFD9
 15628                           status	equ	0xFD8
 15629                           
 15630                           	psect	rparam
 15631  0000                     pclatu	equ	0xFFB
 15632                           pclath	equ	0xFFA
 15633                           tblptru	equ	0xFF8
 15634                           tblptrh	equ	0xFF7
 15635                           tblptrl	equ	0xFF6
 15636                           tablat	equ	0xFF5
 15637                           prodh	equ	0xFF4
 15638                           prodl	equ	0xFF3
 15639                           intcon	equ	0xFF2
 15640                           intcon3	equ	0xFF0
 15641                           postinc0	equ	0xFEE
 15642                           fsr0h	equ	0xFEA
 15643                           fsr0l	equ	0xFE9
 15644                           wreg	equ	0xFE8
 15645                           postdec1	equ	0xFE5
 15646                           fsr1h	equ	0xFE2
 15647                           fsr1l	equ	0xFE1
 15648                           indf2	equ	0xFDF
 15649                           postinc2	equ	0xFDE
 15650                           postdec2	equ	0xFDD
 15651                           fsr2h	equ	0xFDA
 15652                           fsr2l	equ	0xFD9
 15653                           status	equ	0xFD8
 15654                           
 15655                           	psect	temp
 15656  000078                     btemp:
 15657                           	opt stack 0
 15658  000078                     	ds	1
 15659  0000                     int$flags	set	btemp
 15660                           pclatu	equ	0xFFB
 15661                           pclath	equ	0xFFA
 15662                           tblptru	equ	0xFF8
 15663                           tblptrh	equ	0xFF7
 15664                           tblptrl	equ	0xFF6
 15665                           tablat	equ	0xFF5
 15666                           prodh	equ	0xFF4
 15667                           prodl	equ	0xFF3
 15668                           intcon	equ	0xFF2
 15669                           intcon3	equ	0xFF0
 15670                           postinc0	equ	0xFEE
 15671                           fsr0h	equ	0xFEA
 15672                           fsr0l	equ	0xFE9
 15673                           wreg	equ	0xFE8
 15674                           postdec1	equ	0xFE5
 15675                           fsr1h	equ	0xFE2
 15676                           fsr1l	equ	0xFE1
 15677                           indf2	equ	0xFDF
 15678                           postinc2	equ	0xFDE
 15679                           postdec2	equ	0xFDD
 15680                           fsr2h	equ	0xFDA
 15681                           fsr2l	equ	0xFD9
 15682                           status	equ	0xFD8


Data Sizes:
    Strings     400
    Constant    174
    Data        48
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     119
    BANK0           128    128     128
    BANK1           256     50     143
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_23(CODE[17]), STR_22(CODE[18]), STR_21(CODE[17]), STR_20(CODE[18]), 
		 -> STR_19(CODE[17]), STR_18(CODE[19]), STR_17(CODE[17]), STR_16(CODE[18]), 
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[9]), STR_10(CODE[8]), STR_9(CODE[24]), STR_8(CODE[15]), 
		 -> STR_7(CODE[17]), STR_6(CODE[20]), STR_5(CODE[17]), STR_4(CODE[14]), 
		 -> STR_3(CODE[20]), STR_2(CODE[8]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    pause@message	PTR unsigned char  size(2) Largest target is 24
		 -> STR_9(CODE[24]), STR_8(CODE[15]), STR_7(CODE[17]), STR_6(CODE[20]), 
		 -> STR_4(CODE[14]), STR_3(CODE[20]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(BANK0[14]), 

    main@t	PTR int  size(2) Largest target is 14
		 -> getTime@time(BANK0[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_setAngle
    i2_setAngle->i2_angleToPulse
    i2_angleToPulse->i2___fttol
    i2___fttol->i2___ftadd
    i2___ftmul->i2___ftdiv
    i2___ftdiv->i2___awtoft
    i2___ftadd->i2___ftmul
    i2___awtoft->i2___ftpack
    i2___altoft->i2___ftpack
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_sortBattery
    _sortBattery->_initServo
    _pause->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___ftdiv->___altoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _pause->_printf
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  506096
                                             46 BANK1      4     4      0
                            _getTime
                            _initLCD
                            _initRTC
                          _initServo
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0  148333
                                            126 BANK0      2     2      0
                                             30 BANK1     16    16      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                          _initServo
                           _lcdClear
                              _pause
                             _printf
                           _setAngle
                          _stopServo
 ---------------------------------------------------------------------------------
 (2) _stopServo                                            4     2      2      86
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   48319
                                             99 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _initServo                                            8     0      8   20129
                                            118 BANK0      8     0      8
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           8     2      6     562
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18217
                                            108 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   17077
                                             85 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3042
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2303
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2670
                                              8 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _initTimer                                            4     2      2     150
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     3      6    1328
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          6     2      4     442
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  287806
                                            100 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   47890
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   47890
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   47890
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   47912
                                             99 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   47890
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   47890
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    37      8   47755
                                             85 BANK0     14     6      8
                                              0 BANK1     30    30      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   10604
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10406
                                             48 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2335
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             33 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             70 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3899
                                             70 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             58 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0     952
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     952
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getTime                                             19    17      2     784
                                              3 BANK0     19    17      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     598
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    7313
                                            102 COMRAM    15    15      0
              _servoInterruptService
                         i2_setAngle
 ---------------------------------------------------------------------------------
 (9) i2_setAngle                                          10     6      4    5888
                                             92 COMRAM    10     6      4
                     i2_angleToPulse
 ---------------------------------------------------------------------------------
 (10) i2_angleToPulse                                     23    19      4    5532
                                             69 COMRAM    23    19      4
                         i2___altoft
                         i2___awtoft
                          i2___ftadd
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     278
                                             54 COMRAM    15    11      4
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     999
                                             27 COMRAM    15     9      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6     953
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1565
                                             42 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___awtoft                                          4     1      3     738
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___altoft                                         10     6      4     837
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1292
                                              9 COMRAM    12    12      0
                      i2_digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalRead                                       6     2      4     162
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _getTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _initRTC
     _I2C_Master_Init
       ___lldiv
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _initServo
       _initTimer
       _setAngle
         _angleToPulse
           ___altoft
             ___ftpack
             _analogRead (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _startTimer
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _stopServo

 _service (ROOT)
   _servoInterruptService
     i2_digitalRead
     i2_digitalWrite
     i2_startTimer
   i2_setAngle
     i2_angleToPulse
       i2___altoft
         i2___ftpack
       i2___awtoft
         i2___ftpack
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___ftdiv
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___fttol
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             i2___altoft (ARG)
               i2___ftpack
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     32      8F       7       55.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     80      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      77       1       94.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     186      34        0.0%
DATA                 0      0     186       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 13 14:51:26 2017

                  ___altoft@exp 0090                   ___altoft@sign 0091                     _sortBattery 1128  
                  ___awdiv@sign 008B                      i2___altoft 385E             ___wmul@multiplicand 0090  
                   __CFG_BORV$3 000000                      i2___awtoft 3C7A                      i2___ftpack 31EA  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000                _redirectingServo 016D  
                  ___ftadd@exp1 00C5                    ___ftadd@exp2 00C4                    ___ftadd@sign 00C3  
                           l123 33E6                             l221 3DB4                             l141 13E2  
                           l143 14C4                             l218 3DA6                             l309 3C08  
                           l184 3E38                             l285 2D28                             l390 39F2  
                           l447 3F38                             l383 3B66                             l392 39FE  
                           l393 3A0A                             l709 08F6                             l748 0776  
               ??_showInterface 00E4                    __CFG_CPB$OFF 000000                             _PEN 007E2A  
                  __CFG_CPD$OFF 000000                             _SEN 007E28                             _pin 0142  
                  ___awmod@sign 0085                             prod 000FF3                             wreg 000FE8  
                  __CFG_LVP$OFF 000000                    ___ftdiv@cntr 009B                    ___ftdiv@sign 00A0  
                  __CFG_WDT$OFF 000000                            l1001 206E                            l1033 2928  
                          l1105 1EE6                            l1130 3D3C                            l1060 1814  
                          l1062 183C                            l1071 1912                            l1080 193C  
                          l1056 17DA                            l1091 245A                            l1180 3126  
                          l1190 35B0                            l4000 3050                            l1098 1E22  
                          l1099 1E66                            l4004 305E                            l4020 3404  
                          l4102 25C2                            l4030 3434                            l4200 1D94  
                          l4008 3072                            l4032 343A                            l4040 346C  
                          l4024 3414                            l4300 2038                            l4044 3480  
                          l4036 345E                            l4028 3428                            l4140 172A  
                          l4132 1646                            l5100 2C4A                            l4206 1DCE  
                          l4240 1EB0                            l4160 0EB2                            l5112 2CCE  
                          l5104 2C76                            l4056 3BD2                            l4322 2F36  
                          l4314 3A62                            l4066 24CA                            l4306 2054  
                          l4154 0DEC                            l5042 3ADA                            l4332 2FBA  
                          l4084 255C                            l4308 2064                            l4236 1E9C  
                          l4172 103C                            l4164 0ED8                            l5108 2CA2  
                          l5044 3AE0                            l5052 3AF2                            l4350 30C0  
                          l4326 2F76                            l4094 258C                            l4262 1F44  
                          l4246 1ECC                            l4190 3DF0                            l5118 2CFA  
                          l5062 2E56                            l5046 3AE6                            l4096 259C  
                          l4088 2570                            l4256 1F1E                            l4248 1EDC  
                          l4600 069A                            l4432 0038                            l5080 2EAA  
                          l5072 2E86                            l5048 3AEC                            l5162 3D9E  
                          l5322 35FE                            l4346 30AA                            l4098 25A6  
                          l4370 355A                            l4178 1102                            l4530 03E8  
                          l4522 0374                            l4514 0304                            l4434 004E  
                          l5074 2E8E                            l5066 2E6A                            l5332 3634  
                          l4348 30BA                            l3812 17E8                            l4380 3772  
                          l4284 1FEC                            l4276 1F98                            l4700 0A8C  
                          l4612 0744                            l4532 03FE                            l4460 0132  
                          l4452 0100                            l4444 0088                            l4428 0022  
                          l5340 2960                            l5084 2EBE                            l5068 2E72  
                          l5326 3608                            l4358 3114                            l4374 359E  
                          l4366 3544                            l4382 3782                            l4614 0758  
                          l4606 0728                            l4542 0476                            l4526 03A2  
                          l4470 0170                            l4462 013E                            l4454 0106  
                          l4438 0058                            l5342 296A                            l5078 2EA2  
                          l5086 2EC6                            l3760 28DC                            l3752 287E  
                          l3840 18A2                            l3824 1832                            l4368 3554  
                          l4296 2024                            l4712 0AD4                            l4640 08E8  
                          l4624 079E                            l4608 0736                            l4552 04D4  
                          l4528 03B8                            l4472 018A                            l4464 0144  
                          l4456 010C                            l5352 2994                            l5344 296E  
                          l5432 12B0                            l5504 3350                            l3770 2932  
                          l3762 290C                            l3754 288C                            l3842 18B0  
                          l3834 1874                            l3818 1822                            l4714 0AE0  
                          l4722 0B20                            l4706 0AB8                            l4634 08CC  
                          l4618 077A                            l4570 0586                            l4538 0448  
                          l4466 015C                            l4482 01BA                            l5338 295C  
                          l3906 2418                            l3764 291A                            l3756 28BC  
                          l3748 286A                            l3860 1966                            l3852 18F8  
                          l3844 18BE                            l3932 225A                            l4724 0B30  
                          l4732 0C2A                            l4652 0942                            l4636 08DA  
                          l4628 07F0                            l4556 053A                            l4476 01A2  
                          l4484 01F8                            l5372 29E6                            l5356 29A2  
                          l5444 138A                            l3870 19B4                            l3854 1906  
                          l3846 18CA                            l3950 22C6                            l3926 2220  
                          l4726 0BB4                            l4734 0C3C                            l4718 0AFA  
                          l4670 09B8                            l4590 0650                            l4574 05D6  
                          l4558 0540                            l5390 2A34                            l5382 2A14  
                          l5374 29EE                            l5454 13EC                            l5526 33CA  
                          l3776 294E                            l3960 2304                            l4736 0C44  
                          l4672 09BE                            l4656 096C                            l4584 062C  
                          l5368 29DC                            l4752 3B24                            l3880 237E  
                          l5448 13B6                            l5456 1414                            l3946 22A8  
                          l4658 0972                            l4594 065E                            l4578 05FE  
                          l4498 0252                            l4738 0C5A                            l5394 2A3E  
                          l5386 2A24                            l4762 3B36                            l3956 22E6  
                          l4596 0672                            l4588 063A                            l5396 2A4A  
                          l3796 34B6                            l3990 301A                            l3982 2FF0  
                          l4694 0A4A                            l4686 0A04                            l4758 3B2E  
                          l3798 34C6                            l3886 23B8                            l4782 3A16  
                          l3992 3020                            l3976 2FDA                            l4688 0A16  
                          l4768 3B3E                            l4698 0A82                            l3988 300E  
                          _EEIF 007D0C                            STR_1 FEAF                            STR_2 FFF7  
                          STR_3 FE9B                            STR_4 FFD8                            STR_5 FFB8  
                          STR_6 FE87                            STR_7 FFA7                            STR_8 FFC9  
                          STR_9 FE6F                            u3101 1788                            _LATA 000F89  
                          _LATB 000F8A                            u3111 17A6                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                            u3311 235A  
                          u3331 2394                            u4400 076E                            u3361 21FC  
                          u5114 2E34                            u5115 2E2C                    printf@tmpval 010C  
                          u4180 0298                            u5204 2CE2                            u3381 2236  
                          u5205 2CDC                            u5230 3D9C                            u3551 24A6  
                          u5225 396E                            u4185 028C                            u3570 24F0  
                          u3731 1D70                            _PEIE 007F96                            u5174 2C5E  
                          u3575 24E6                            u3751 1DAA                            u5175 2C58  
                          u5184 2C8A                            u5185 2C84                            u5194 2CB6  
                          u5195 2CB0                            _RCEN 007E2B                            u5907 3E3C  
                          u5917 3B74                            u5927 3BAA                            u5937 3E02  
                          u5947 3E18                            u5957 3806                            u5967 3814  
                          u5887 33BA                            u5977 3844                            u5897 12D6  
                          u5987 3852                            _RSEN 007E29                            _main 3344  
                  ___ftpack@arg 0080                    i2___altoft@c 0009                            _keys FE57  
                  ___ftpack@exp 0083                            _port 014A                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 0078                    i2___ftadd@f1 002B                    i2___ftadd@f2 002E  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                    i2_setAngle 38D6                   __CFG_IESO$OFF 000000                    i2___ftdiv@f1 000D  
                  i2___ftdiv@f2 0010                    i2___ftdiv@f3 0017                    i2___awtoft@c 0009  
                 __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00AE                    i2___ftmul@f1 001C  
                  i2___ftmul@f2 001F                    ___param_bank 000000                    ___ftmul@sign 00AF  
                  i2___fttol@f1 0037                    ___fttol@exp1 00D4                    ___fttol@lval 00D0  
          __end_ofi2_startTimer 3AD8                ?_I2C_Master_Init 008D                ?_I2C_Master_Read 0001  
              ?_I2C_Master_Wait 0001                ?_I2C_Master_Stop 0001            __end_of_angleToPulse 21E6  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 307C                           _EEADR 000FA9                 __end_of___ftadd 19DA  
                         STR_10 FFEF                           STR_11 FFE6                           STR_20 FF0C  
                         STR_12 FEE8                           STR_13 FF96                           STR_21 FF41  
                         STR_22 FF1E                           STR_14 FED6                           STR_23 FF85  
                         STR_15 FF63                           STR_24 FF30                           STR_16 FEFA  
                         STR_17 FF52                           STR_18 FEC3                           STR_19 FF74  
               __end_of___awmod 348A                 __end_of___ftdiv 2490         ??_servoInterruptService 000A  
               __end_of___ftneg 3D4A                 __end_of___lldiv 3138                 __end_of___ftmul 2344  
                         _T0CON 000FD5                 ___awdiv@divisor 0088                           _T1CON 000FCD  
               __end_of___llmod 35C2                 __end_of___ftsub 3A8C                 __end_of___fttol 25D4  
                         _T2CON 000FCA                           _T3CON 000FB1                           i2l160 2814  
                         i2l530 1B64                           i2l532 1B68                           i2l285 31E4  
                         i2l533 1B6C                           i2l390 3A8E                           i2l534 1B70  
                         i2l535 1BAC                           i2l392 3A9A                           i2l393 3AA6  
               ___awdiv@counter 008A                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                  ___lltoft@exp 0090                   _conveyorServo 0161                 __end_of_lcdInst 3E24  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000          servoInterruptService@i 0014  
               __end_of_getTime 365A                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_initLCD 3BB6                  __CFG_EBTRB$OFF 000000  
                 ___awtoft@sign 008B                 __end_of_initRTC 3F22                 __end_of_dpowers FDE9  
                         _scale 0C7A                 __end_of_isdigit 3DFA                           _pause 3F22  
                 ___ftpack@sign 0084                           _pulse 0132                           _putch 3E24  
                         main@t 0130                           pclath 000FFA                           tablat 000FF5  
               __end_of_service 2850                 __end_of_runMenu 3D1A                 __end_of_runTime 3E72  
                         status 000FD8                   i2___ftdiv@exp 001A              __size_ofi2___ftadd 01AC  
                __CFG_PBADEN$ON 000000              __size_ofi2___ftdiv 00E6              __size_ofi2___ftmul 00F4  
            __size_ofi2___fttol 00F4            __end_of_digitalWrite 2EF6                 __initialization 399E  
                  __end_of_main 33E8                    __end_of_keys FE68                   i2___ftmul@exp 0025  
                   ?i2___altoft 0009                     ?i2___awtoft 0009                     ?i2___ftpack 0001  
                        ??_main 012E                   ___fttol@sign1 00CF                   __activetblptr 000002  
          __size_of_digitalRead 00E8            __size_of__tdiv_to_l_ 019E               ?_I2C_Master_Start 0001  
             ?_I2C_Master_Write 0081              ??_I2C_Master_Start 0081                          _ADCON0 000FC2  
                        _ADCON1 000FC1              ??_I2C_Master_Write 0083                          _ADCON2 000FC0  
              __end_of___altoft 3528                ___llmod@dividend 008D                          ?_scale 00B0  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          ?_pause 00E3                          _EECON1 000FA6  
                        _EECON2 000FA7                ___awdiv@dividend 0086                __end_of___awtoft 3BFA  
                        ?_putch 0001                __end_of___ftpack 295C                __end_of___lltoft 37E6  
                        _INT0IE 007F94                          _INT0IF 007F91                          _INT1IF 007F80  
                  sortBattery@V 012B                          i2l1033 3278                          i2l1060 1C1C  
                        i2l1071 1CCC                          i2l1080 1CE8                          i2l1056 1BF2  
                        i2l1091 2DE4                          i2l5010 2AF2                          i2l5020 2B1A  
                        i2l5022 2B26                          i2l5014 2B02                          i2l4400 3230  
                        i2l5024 2B2C                          i2l5210 315A                          i2l4404 3246  
                        i2l5028 2B42                          i2l5214 317A                          i2l5206 313A  
                        i2l4406 3264                          i2l5224 31BA                          i2l5240 32DC  
                        i2l4408 326E                          i2l5218 319A                          i2l5250 32FE  
                        i2l5234 32C8                          i2l5252 3304                          i2l5244 32EA  
                        i2l5246 32F0                          i2l5238 32D6                          i2l5256 3312  
                        i2l5272 3AB2                          i2l4392 31FA                          i2l5258 3318  
                        i2l4802 3880                          i2l4396 3208                          i2l4804 388C  
                        i2l5540 2762                          i2l4398 3212                          i2l4830 1C00  
                        i2l5550 278A                          i2l4904 2D80                          i2l5490 1B74  
                        i2l4818 3C8E                          i2l5562 27DC                          i2l5554 27A4  
                        i2l5492 1B9E                          i2l4860 1C86                          i2l4852 1C5A  
                        i2l4836 1C2A                          i2l4924 2DBE                          i2l5486 1AE6  
                        i2l5478 1A2E                          i2l4870 1CBA                          i2l4862 1C90  
                        i2l4950 2BA4                          i2l5566 27F8                          i2l5558 27C0  
                        i2l4872 1CC4                          i2l4864 1C98                          i2l4944 2B7C  
                        i2l4858 1C7C                          i2l4964 2BD6                          i2l4878 1D04  
                        i2l4974 2BFE                          i2l4888 1D34                          i2l4968 2BE6  
                        i2l4992 2A8C                          i2l4898 2D58                          i2l4978 2C0E  
                        u503_41 2A70                          u471_41 1BBE                          u472_41 1BD2  
                        u492_41 2D40                          u494_41 2D68                          u497_41 2B64  
                        u499_41 2B8C                          _TMR0IE 007F95                          _TMR0IF 007F92  
                        _TMR1IE 007CE8                          _TMR1IF 007CF0                          _TMR2IF 007CF1  
                        _TMR3IE 007D01                          _TMR3IF 007D09                          _SSPADD 000FC8  
                        _TRISC3 007CA3                          _TRISC4 007CA4                          _SSPBUF 000FC9  
        __size_ofi2_digitalRead 00B2                __end_of_dateTime 3F0A                     ?i2_setAngle 005D  
              __end_of_lcdClear 3F66               _angleToPulse$1336 00E5                     initServo@pi 00FA  
                   initServo@po 00F8                  __CFG_XINST$OFF 000000                __end_of__powers_ FE37  
                        ___ftge 2EF6                __end_of_mainMenu 3EE4                          ___wmul 3CB2  
                     ??___awdiv 008A                       ??___ftadd 00C0                  __CFG_STVREN$ON 000000  
                     ??___awmod 0084                       ??___ftdiv 0098                       ??___ftneg 0083  
                     ??___lldiv 0088                       ??___ftmul 00A7                       ??___llmod 0095  
                     ??___ftsub 00CC                       ??___fttol 00CA                          _fround 14C6  
                i2___altoft@exp 0011                          clear_0 39DC                ___awdiv@quotient 008C  
               ___awmod@divisor 0082                 ___awmod@counter 0084                       ??_lcdInst 0082  
                        _printf 0012                       ??_getTime 0085                __end_of_pinSetup 3C7A  
              __end_of_setAngle 36EE               analogRead@channel 0080           ___ftmul@f3_as_product 00AB  
                     ??_initLCD 0084                       ??_initRTC 0095                    __pdataCOMRAM 0076  
                     ??_isdigit 0080               __end_ofi2___ftadd 1D5A               __end_ofi2___ftdiv 2E16  
                i2___ftadd@exp1 0036                  i2___ftadd@exp2 0035               __end_ofi2___ftmul 2C48  
                 setAngle@angle 00EE               __end_ofi2___fttol 2B54                  i2___ftadd@sign 0034  
                  __mediumconst FDC0                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                   setAngle@timer 00EC                       ??_service 0067  
                     ??_runMenu 00E3                __end_of_runStats 3E98                       ??_runTime 00E3  
                i2___ftdiv@cntr 0016                      __accesstop 0080         __end_of__initialization 39E2  
                    ___altoft@c 0088             __size_ofi2___altoft 0078                  i2___ftdiv@sign 001B  
                    ___ftadd@f1 00BA                      ___ftadd@f2 00BD             __size_ofi2___awtoft 0038  
           __size_ofi2___ftpack 00AE                      ___ftge@ff1 0080                      ___ftge@ff2 0083  
                 ___rparam_used 000001                      ___ftdiv@f1 0092                      ___ftdiv@f2 0095  
                    ___ftdiv@f3 009C                      ___ftneg@f1 0080                      ___awtoft@c 0088  
                i2___ftpack@arg 0001           __size_ofi2_startTimer 004C                  i2___ftpack@exp 0004  
                    ___ftmul@f1 00A1                      ___ftmul@f2 00A4                      ___ftsub@f1 00C6  
                    ___ftsub@f2 00C9                      ___fttol@f1 00C6            __end_of_happynewyear FE6F  
                __pcstackCOMRAM 0001           __size_of_angleToPulse 0166                    __pidataBANK1 3D4A  
                    ___lltoft@c 0088                   _cylinderMotor 0177                  i2___ftmul@cntr 0029  
                 __end_of_scale 1128                    ?_sortBattery 0001                   __end_of_pause 3F38  
                i2___ftmul@sign 002A                   __end_of_putch 3E4C                  i2___fttol@exp1 0045  
                i2___fttol@lval 0041                   i2_digitalRead 3138              __size_of_lcdNibble 0078  
                    __div_to_l_ 1EF8                i2digitalRead@pin 0003             __size_ofi2_setAngle 0068  
               __div_to_l_@exp1 008B                 __div_to_l_@cntr 008A                         ??_scale 00B3  
                       ??_pause 00E5                 __div_to_l_@quot 0086              i2digitalWrite@port 0001  
                       ??_putch 0084                    i2_startTimer 3A8C                      __pbssBANK1 0132  
                  _angleToPulse 2080           __size_of_digitalWrite 00E0              __size_of_initTimer 004A  
            __size_of_initServo 007C                      _analogRead 3BFA                   __div_to_l_@f1 0080  
                 __div_to_l_@f2 0083         __size_ofi2_angleToPulse 0140                         ?___ftge 0080  
                       ?___wmul 008E           sortBattery@resolution 0124                       ?___altoft 0088  
                       ?_fround 00B0                      _lcdNewline 3F56                       ?___awtoft 0088  
                     ?___ftpack 0080                  ?i2_digitalRead 0001                         ?_printf 00D5  
                     ?___lltoft 0088      servoInterruptService@flags 000C  __size_of_servoInterruptService 01D4  
 __end_of_servoInterruptService 1BAE           __end_of_showInterface 2A60                       ?_dateTime 0001  
                stopServo@timer 0080               i2startTimer@timer 0001                       ?_lcdClear 0001  
            __size_of_runSelect 0026                angleToPulse@a000 00E8                angleToPulse@a180 00E1  
                  _digitalWrite 2E16                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7                       ?_mainMenu 0001         __size_ofi2_digitalWrite 00AC  
            __size_of_stopServo 004A                         _V_LIM_C 015C                       ?_pinSetup 0001  
                     ?_setAngle 00EC               __end_of_lcdNibble 385E               __end_of__npowers_ FE10  
                       __Hparam 0000                      _scale$1339 00B3                         __Lparam 0000  
               __size_of___ftge 00C8                         ___awdiv 2FBE                         ___ftadd 1772  
                       ___awmod 33E8                      _readKeypad 3DA6                         ___ftdiv 2344  
                       ___ftneg 3D1A                         ___lldiv 307C                 __size_of___wmul 0036  
                       ___ftmul 21E6                         ___llmod 3528                         ___ftsub 3A40  
                       ___fttol 2490                       ?_runStats 0001                    ??i2___altoft 000D  
                    ??___altoft 008C                         __pcinit 399E                    ??i2___awtoft 000C  
                  ??i2___ftpack 0006                      ??___awtoft 008B                      ??___ftpack 0085  
               __size_of_fround 02AC         i2___ftmul@f3_as_product 0026                         __ramtop 1000  
                       _lcdInst 3DFA                      ??___lltoft 008C                         __ptext0 3344  
                       __ptext1 1128                         __ptext2 3AD8                         __ptext3 3F22  
                       _getTime 35C2                         __ptext4 36EE                         __ptext5 39F0  
                       __ptext6 365A                         __ptext7 2080                         __ptext8 2344  
                       __ptext9 3BB6                 __size_of_printf 0C68                         _padPin1 017B  
                       _padPin2 017F                         _padPin3 0152                   startTimer@val 0082  
                       _initLCD 3B6C               __end_of_hexpowers FE57                     ?__div_to_l_ 0080  
                       _initRTC 3F0A               __end_of_initTimer 3B6C               __end_of_initServo 376A  
                       _dpowers FDC1                         _isdigit 3DD0                ___awmod@dividend 0080  
                    ??_dateTime 00E3                 i2___altoft@sign 0012        __size_of_I2C_Master_Init 0060  
      __size_of_I2C_Master_Read 002E                      ??_lcdClear 0084        __size_of_I2C_Master_Wait 0014  
      __size_of_I2C_Master_Stop 0008                         _service 0008                         _runMenu 3CE8  
                       _runTime 3E4C                  __pintcode_body 2714            end_of_initialization 39E2  
                    ??_mainMenu 00E3             i2angleToPulse@angle 0046                   __Lmediumconst FDC0  
                       int_func 2714              __end_ofi2___altoft 38D6                  digitalRead@pin 0082  
                   ?_analogRead 0080              __end_ofi2___awtoft 3CB2              __end_ofi2___ftpack 3298  
                  ??i2_setAngle 0061                      ??_pinSetup 0080                      ??_setAngle 00F0  
     __size_of_I2C_Master_Start 0008       __size_of_I2C_Master_Write 000A                 ___lldiv@divisor 0084  
               ___lldiv@counter 008C               __end_of_runSelect 3EBE                         printf@c 011D  
                       printf@f 00D5                I2C_Master_Init@c 008D                I2C_Master_Read@a 0081  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                      ??_runStats 00E3                 ??i2_digitalRead 0005  
                __tdiv_to_l_@f1 0080                  __tdiv_to_l_@f2 0083                   ??_digitalRead 0084  
                   ?_lcdNewline 0001                   ??__tdiv_to_l_ 0086               __end_of_stopServo 3B22  
                     _PORTBbits 000F81            __size_of_sortBattery 039E                showInterface@key 00E4  
            __end_ofi2_setAngle 393E             _redirectAngle_OTHER 018D                    _happynewyear FE68  
            angleToPulse@offset 00DD              sortBattery@V_float 011E                       i2___ftadd 1BAE  
                     i2___ftdiv 2D30                       i2___ftmul 2B54                       i2___fttol 2A60  
                    _startTimer 39F0                     ___ftdiv@exp 009F                     printf@width 011B  
               i2___awtoft@sign 000C                 i2___ftpack@sign 0005             __size_of__div_to_l_ 0188  
                i2_angleToPulse 25D4                      _switchFlag 015F                     ___ftmul@exp 00AA  
                   ?_readKeypad 0001                  __end_of___ftge 2FBE                  __end_of___wmul 3CE8  
                 __pidataCOMRAM 3F76                  __end_of_fround 1772                  __end_of_printf 0C7A  
           __size_of_analogRead 0042             start_initialization 399E             __end_of_digitalRead 2D30  
           __end_of__tdiv_to_l_ 1EF8                  initServo@angle 00FC                  initTimer@timer 0080  
               i2___fttol@sign1 0040                  initServo@timer 00F6                      ?i2___ftadd 002B  
                    ?i2___ftdiv 000D                      ?i2___ftmul 001C                      ?i2___fttol 0037  
                i2_digitalWrite 3298               ??_I2C_Master_Init 0091               ??_I2C_Master_Read 0081  
             ??_I2C_Master_Wait 0080               i2digitalRead@port 0001               ??_I2C_Master_Stop 0081  
           __size_of_lcdNewline 0008          __end_ofi2_angleToPulse 2714                 ___llmod@divisor 0091  
               ___llmod@counter 0095                        ??___ftge 0086                        ??___wmul 0092  
                   __pdataBANK1 0161                    pause@message 00E3                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 00B3                        ??_printf 00DD               __size_of___altoft 009E  
                    fround@prec 00B9               __size_of___awtoft 0044               __size_of___ftpack 010C  
             __size_of___lltoft 007C                   __pcstackBANK0 0080                   __pcstackBANK1 0100  
        __end_ofi2_digitalWrite 3344          sortBattery@targetAngle 0127               __size_of_dateTime 0026  
                   ?_startTimer 0080               __size_of_lcdClear 0008             __size_of_readKeypad 002A  
               i2setAngle@angle 005F                 i2setAngle@timer 005D               __size_of_mainMenu 0026  
             i2digitalWrite@pin 0003               i2digitalWrite@val 0005                 ?i2_angleToPulse 0046  
              _I2C_Master_Start 3F6E                _I2C_Master_Write 3F4C               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 003E               __size_of_setAngle 0094                       __pintcode 0008  
                 __pmediumconst FDC0                       _lcdNibble 37E6                        ?___awdiv 0086  
                      ?___ftadd 00BA                        ?___awmod 0080                        ?___ftdiv 0092  
                      ?___ftneg 0080                        ?___lldiv 0080                        ?___ftmul 00A1  
                      ?___llmod 008D                        ?___ftsub 00C6                       __npowers_ FDE9  
                      ?___fttol 00C6                     _digitalRead 2C48                        ?_lcdInst 0001  
                   __tdiv_to_l_ 1D5A                        ?_getTime 0083               __size_of_runStats 0026  
                  ??__div_to_l_ 0086                        ?_initLCD 0001                        ?_initRTC 0001  
               startTimer@timer 0080                        ?_isdigit 0001                        ?_service 0001  
                     _hexpowers FE37                        ?_runMenu 0001                       _initTimer 3B22  
                     _initServo 36EE                        ?_runTime 0001                 ?i2_digitalWrite 0001  
         _servoInterruptService 19DA                     ??i2___ftadd 0031                     ??i2___ftdiv 0013  
                   ??i2___ftmul 0022                  __size_of_scale 04AE                     ??i2___fttol 003B  
                __size_of_pause 0016                  __size_of_putch 0028                        _AA_float 0173  
            i2angleToPulse@a000 0059              i2angleToPulse@a180 0052                  sortBattery@Vcc 0121  
                ___wmul@product 0092                        _LATDbits 000F8C                    ??_analogRead 0084  
                      i2u505_40 2AAA                        i2u505_45 2AA2              __end_of__div_to_l_ 2080  
                      i2u525_44 314A                        i2u525_45 3146                        i2u526_44 316A  
                      i2u526_45 3166                        i2u527_44 318A                        i2u527_45 3186  
                      i2u528_44 31AA                        i2u528_45 31A6                        i2u561_40 19E2  
                      i2u529_44 32AE                        i2u529_45 32A8                        i2u562_40 19E4  
                      i2u563_40 19F0                        i2u564_40 19F2                        i2u565_40 19FE  
                      i2u566_40 1A00                        i2u567_40 1A0C                        i2u568_40 1A0E  
                      i2u569_40 1A2C          __size_of_showInterface 0104                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001                  _padAngle_CLOSE 0183                      service@key 0075  
                  ??_lcdNewline 0084             __size_of_startTimer 0050                       _runSelect 3E98  
             angleToPulse@angle 00D5               ___wmul@multiplier 008E                   lcdNibble@data 0081  
                    printf@flag 0116                   lcdNibble@temp 0080                      printf@fval 0118  
                    printf@prec 010A                       _stopServo 3AD8              __end_of_analogRead 3C3C  
                      _V_LIM_AA 0159                        _V_LIM_9V 0156                      runMenu@key 00E3  
                    ?_initTimer 0080                      ?_initServo 00F6               sortBattery@signal 0129  
           I2C_Master_Read@temp 0082                       copy_data0 39B2              __end_of_lcdNewline 3F5E  
                 readKeypad@key 0080                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080                   ??_sortBattery 00FE  
              __size_of___awdiv 00BE                __size_of___ftadd 0268                __size_of___awmod 00A2  
              __size_of___ftdiv 014C                __size_of___ftneg 0030                __size_of___lldiv 00BC  
                      ___altoft 348A                __size_of___ftmul 015E                __size_of___llmod 009A  
              __size_of___ftsub 004C                __size_of___fttol 0144                      ?_runSelect 0001  
                      ___awtoft 3BB6                        ___ftpack 2850           __end_ofi2_digitalRead 31EA  
                   _fround$1337 00B6                     _fround$1338 00B3                        ___lltoft 376A  
                   _isdigit$973 0081                __size_of_lcdInst 002A                __size_of_getTime 0098  
               _I2C_Master_Init 393E                 _I2C_Master_Read 3D78                __size_of_initLCD 004A  
               _I2C_Master_Wait 3F38                __size_of_initRTC 0018                        _dateTime 3EE4  
                    ?_stopServo 0080                 _I2C_Master_Stop 3F66                __size_of_isdigit 002A  
        ?_servoInterruptService 0001                   _showInterface 295C                        _lcdClear 3F5E  
                      __ptext10 348A                        __ptext11 3B22                        __ptext20 3DA6  
                      __ptext12 2E16                        __ptext21 3EBE                        __ptext13 2C48  
                      __ptext30 21E6                        __ptext22 3EE4                        __ptext14 3BFA  
                      __ptext31 33E8                        __ptext23 0012                        __ptext15 295C  
                      __ptext40 2850                        __ptext32 2FBE                        __ptext24 0C7A  
                      __ptext16 3E4C                        __ptext41 3D1A                        __ptext33 1D5A  
                      __ptext25 3E24                        __ptext17 3E72                        __ptext50 37E6  
                      __ptext42 2EF6                        __ptext34 1EF8                        __ptext26 3F56  
                      __ptext18 3E98                        __ptext51 35C2                        __ptext43 3F5E  
                      __ptext35 376A                        __ptext27 3DD0                        __ptext19 3CE8  
                      __ptext60 2A60                        __ptext52 3F4C                        __ptext44 3C3C  
                      __ptext36 3528                        __ptext28 14C6                        __ptext61 2B54  
                      __ptext53 3F66                        __ptext45 3F0A                        __ptext37 2490  
                      __ptext29 3CB2                        __ptext70 3138                        __ptext62 2D30  
                      __ptext54 3F6E                        __ptext46 393E                        __ptext38 3A40  
                      __ptext63 1BAE                        __ptext55 3D78                        __ptext47 307C  
                      __ptext39 1772                        __ptext64 3C7A                        __ptext56 3F38  
                      __ptext48 3B6C                        __ptext65 385E                        __ptext49 3DFA  
                      __ptext66 31EA                        __ptext58 38D6                        __ptext67 19DA  
                      __ptext59 25D4                        __ptext68 3A8C                        __ptext69 3298  
                      __powers_ FE10                __size_of_service 2848                __size_of_runMenu 0032  
               i2startTimer@val 0003                __size_of_runTime 0026                   ?i2_startTimer 0001  
                      _mainMenu 3EBE                        _padServo 0167              __end_of_readKeypad 3DD0  
                 ?_angleToPulse 00D5                   __size_of_main 00A4                        _pinSetup 3C3C  
                      _setAngle 365A                     ??_lcdNibble 0080                        getTime@i 0095  
                 _padAngle_OPEN 0187                        int$flags 0078                        _runStats 3E72  
                     printf@idx 0105                       printf@len 0106                       printf@exp 0110  
                     printf@val 0112                       putch@data 0084        __end_of_I2C_Master_Start 3F76  
           i2_angleToPulse$1432 0056             __end_of_sortBattery 14C6        __end_of_I2C_Master_Write 3F56  
                    _INTCONbits 000FF2                  ?_showInterface 0001                   ?_digitalWrite 0080  
                   ??_initTimer 0082                     ??_initServo 00FE                        isdigit@c 0082  
          i2angleToPulse@offset 004E                        scale@scl 00B6                  ??i2_startTimer 0007  
              ??i2_angleToPulse 004A                    ??_startTimer 0086                 digitalRead@port 0080  
                      intlevel2 0000                __tdiv_to_l_@exp1 008E                __tdiv_to_l_@cntr 008D  
                ??_angleToPulse 00D9                __tdiv_to_l_@quot 0089                ___lldiv@dividend 0080  
              _redirectAngle_AA 018B                _redirectAngle_9V 0189                        printf@ap 0108  
                      printf@cp 0103         __end_of_I2C_Master_Init 399E         __end_of_I2C_Master_Read 3DA6  
       __end_of_I2C_Master_Wait 3F4C         __end_of_I2C_Master_Stop 3F6E                     lcdInst@data 0083  
                  ?_digitalRead 0080                     ??_runSelect 00E3                    ?__tdiv_to_l_ 0080  
            __end_of_startTimer 3A40                     _printf$1340 0100                ??i2_digitalWrite 0007  
              digitalWrite@port 0080                ___lldiv@quotient 0088               I2C_Master_Write@d 0081  
                   ??_stopServo 0082                  ??_digitalWrite 0086                 _redirectAngle_C 0076  
                   getTime@time 0087                _padAngle_NEUTRAL 0185                 digitalWrite@pin 0082  
               digitalWrite@val 0084  
