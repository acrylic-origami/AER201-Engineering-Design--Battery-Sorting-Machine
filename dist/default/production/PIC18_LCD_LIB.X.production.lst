

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 12 19:09:22 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 1.40
    64                           ; Generated 01/12/2016 GMT
    65                           ; 
    66                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F4620 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98                           	psect	idataBANK0
    99  001AD8                     __pidataBANK0:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _binAngle
   103  001AD8  003C               	dw	60
   104  001ADA  0050               	dw	80
   105  001ADC  0064               	dw	100
   106  001ADE  0078               	dw	120
   107                           
   108                           	psect	mediumconst
   109  00FE92                     __pmediumconst:
   110                           	opt stack 0
   111  00FE92  00                 	db	0
   112  00FE93                     _dpowers:
   113                           	opt stack 0
   114  00FE93  0001               	dw	1
   115  00FE95  0000               	dw	0
   116  00FE97  000A               	dw	10
   117  00FE99  0000               	dw	0
   118  00FE9B  0064               	dw	100
   119  00FE9D  0000               	dw	0
   120  00FE9F  03E8               	dw	1000
   121  00FEA1  0000               	dw	0
   122  00FEA3  2710               	dw	10000
   123  00FEA5  0000               	dw	0
   124  00FEA7  86A0               	dw	34464
   125  00FEA9  0001               	dw	1
   126  00FEAB  4240               	dw	16960
   127  00FEAD  000F               	dw	15
   128  00FEAF  9680               	dw	38528
   129  00FEB1  0098               	dw	152
   130  00FEB3  E100               	dw	57600
   131  00FEB5  05F5               	dw	1525
   132  00FEB7  CA00               	dw	51712
   133  00FEB9  3B9A               	dw	15258
   134  00FEBB                     __end_of_dpowers:
   135                           	opt stack 0
   136  00FEBB                     _hexpowers:
   137                           	opt stack 0
   138  00FEBB  0001               	dw	1
   139  00FEBD  0000               	dw	0
   140  00FEBF  0010               	dw	16
   141  00FEC1  0000               	dw	0
   142  00FEC3  0100               	dw	256
   143  00FEC5  0000               	dw	0
   144  00FEC7  1000               	dw	4096
   145  00FEC9  0000               	dw	0
   146  00FECB  0000               	dw	0
   147  00FECD  0001               	dw	1
   148  00FECF  0000               	dw	0
   149  00FED1  0010               	dw	16
   150  00FED3  0000               	dw	0
   151  00FED5  0100               	dw	256
   152  00FED7  0000               	dw	0
   153  00FED9  1000               	dw	4096
   154  00FEDB                     __end_of_hexpowers:
   155                           	opt stack 0
   156  00FEDB                     _keys:
   157                           	opt stack 0
   158  00FEDB  31                 	db	49
   159  00FEDC  32                 	db	50
   160  00FEDD  33                 	db	51
   161  00FEDE  41                 	db	65
   162  00FEDF  34                 	db	52
   163  00FEE0  35                 	db	53
   164  00FEE1  36                 	db	54
   165  00FEE2  42                 	db	66
   166  00FEE3  37                 	db	55
   167  00FEE4  38                 	db	56
   168  00FEE5  39                 	db	57
   169  00FEE6  43                 	db	67
   170  00FEE7  2A                 	db	42
   171  00FEE8  30                 	db	48
   172  00FEE9  23                 	db	35
   173  00FEEA  44                 	db	68
   174  00FEEB  00                 	db	0
   175  00FEEC                     __end_of_keys:
   176                           	opt stack 0
   177  00FEEC                     _happynewyear:
   178                           	opt stack 0
   179  00FEEC  45                 	db	69
   180  00FEED  59                 	db	89
   181  00FEEE  23                 	db	35
   182  00FEEF  07                 	db	7
   183  00FEF0  31                 	db	49
   184  00FEF1  12                 	db	18
   185  00FEF2  16                 	db	22
   186  00FEF3                     __end_of_happynewyear:
   187                           	opt stack 0
   188  0000                     _ADCON0	set	4034
   189  0000                     _ADCON1	set	4033
   190  0000                     _ADCON2	set	4032
   191  0000                     _ADRESH	set	4036
   192  0000                     _ADRESL	set	4035
   193  0000                     _EEADR	set	4009
   194  0000                     _EEADRH	set	4010
   195  0000                     _EECON1	set	4006
   196  0000                     _EECON2	set	4007
   197  0000                     _EEDATA	set	4008
   198  0000                     _INTCONbits	set	4082
   199  0000                     _LATA	set	3977
   200  0000                     _LATB	set	3978
   201  0000                     _LATC	set	3979
   202  0000                     _LATD	set	3980
   203  0000                     _LATDbits	set	3980
   204  0000                     _LATE	set	3981
   205  0000                     _PORTA	set	3968
   206  0000                     _PORTB	set	3969
   207  0000                     _PORTBbits	set	3969
   208  0000                     _PORTC	set	3970
   209  0000                     _PORTD	set	3971
   210  0000                     _SSPADD	set	4040
   211  0000                     _SSPBUF	set	4041
   212  0000                     _SSPCON1	set	4038
   213  0000                     _SSPCON2	set	4037
   214  0000                     _SSPSTAT	set	4039
   215  0000                     _T0CON	set	4053
   216  0000                     _T1CON	set	4045
   217  0000                     _T3CON	set	4017
   218  0000                     _TMR0H	set	4055
   219  0000                     _TMR0L	set	4054
   220  0000                     _TMR1H	set	4047
   221  0000                     _TMR1L	set	4046
   222  0000                     _TMR3H	set	4019
   223  0000                     _TMR3L	set	4018
   224  0000                     _TRISA	set	3986
   225  0000                     _TRISB	set	3987
   226  0000                     _TRISC	set	3988
   227  0000                     _TRISD	set	3989
   228  0000                     _TRISE	set	3990
   229  0000                     _ACKDT	set	32301
   230  0000                     _ACKEN	set	32300
   231  0000                     _EEIF	set	32012
   232  0000                     _INT0IF	set	32657
   233  0000                     _INT1IE	set	32643
   234  0000                     _INT1IF	set	32640
   235  0000                     _PEIE	set	32662
   236  0000                     _PEN	set	32298
   237  0000                     _RCEN	set	32299
   238  0000                     _RSEN	set	32297
   239  0000                     _SEN	set	32296
   240  0000                     _TMR0IE	set	32661
   241  0000                     _TMR0IF	set	32658
   242  0000                     _TMR1IE	set	31976
   243  0000                     _TMR1IF	set	31984
   244  0000                     _TMR2IF	set	31985
   245  0000                     _TMR3IE	set	32001
   246  0000                     _TMR3IF	set	32009
   247  0000                     _TRISC3	set	31907
   248  0000                     _TRISC4	set	31908
   249  00FEF3                     STR_12:
   250  00FEF3  25                 	db	37
   251  00FEF4  63                 	db	99	;'c'
   252  00FEF5  29                 	db	41
   253  00FEF6  20                 	db	32
   254  00FEF7  74                 	db	116	;'t'
   255  00FEF8  69                 	db	105	;'i'
   256  00FEF9  6D                 	db	109	;'m'
   257  00FEFA  65                 	db	101	;'e'
   258  00FEFB  20                 	db	32
   259  00FEFC  20                 	db	32
   260  00FEFD  3C                 	db	60	;'<'
   261  00FEFE  41                 	db	65	;'A'
   262  00FEFF  20                 	db	32
   263  00FF00  20                 	db	32
   264  00FF01  20                 	db	32
   265  00FF02  20                 	db	32
   266  00FF03  20                 	db	32
   267  00FF04  0A                 	db	10
   268  00FF05  00                 	db	0
   269  00FF06                     STR_8:
   270  00FF06  73                 	db	115	;'s'
   271  00FF07  74                 	db	116	;'t'
   272  00FF08  61                 	db	97	;'a'
   273  00FF09  72                 	db	114	;'r'
   274  00FF0A  74                 	db	116	;'t'
   275  00FF0B  20                 	db	32
   276  00FF0C  20                 	db	32
   277  00FF0D  20                 	db	32
   278  00FF0E  3C                 	db	60	;'<'
   279  00FF0F  42                 	db	66	;'B'
   280  00FF10  20                 	db	32
   281  00FF11  20                 	db	32
   282  00FF12  20                 	db	32
   283  00FF13  20                 	db	32
   284  00FF14  20                 	db	32
   285  00FF15  20                 	db	32
   286  00FF16  0A                 	db	10
   287  00FF17  00                 	db	0
   288  00FF18                     STR_6:
   289  00FF18  20                 	db	32
   290  00FF19  20                 	db	32
   291  00FF1A  68                 	db	104	;'h'
   292  00FF1B  68                 	db	104	;'h'
   293  00FF1C  3A                 	db	58	;':'
   294  00FF1D  6D                 	db	109	;'m'
   295  00FF1E  6D                 	db	109	;'m'
   296  00FF1F  3A                 	db	58	;':'
   297  00FF20  73                 	db	115	;'s'
   298  00FF21  73                 	db	115	;'s'
   299  00FF22  20                 	db	32
   300  00FF23  20                 	db	32
   301  00FF24  20                 	db	32
   302  00FF25  20                 	db	32
   303  00FF26  20                 	db	32
   304  00FF27  20                 	db	32
   305  00FF28  0A                 	db	10
   306  00FF29  00                 	db	0
   307  00FF2A                     STR_10:
   308  00FF2A  73                 	db	115	;'s'
   309  00FF2B  65                 	db	101	;'e'
   310  00FF2C  6C                 	db	108	;'l'
   311  00FF2D  65                 	db	101	;'e'
   312  00FF2E  63                 	db	99	;'c'
   313  00FF2F  74                 	db	116	;'t'
   314  00FF30  20                 	db	32
   315  00FF31  72                 	db	114	;'r'
   316  00FF32  75                 	db	117	;'u'
   317  00FF33  6E                 	db	110	;'n'
   318  00FF34  3A                 	db	58	;':'
   319  00FF35  20                 	db	32
   320  00FF36  20                 	db	32
   321  00FF37  20                 	db	32
   322  00FF38  20                 	db	32
   323  00FF39  20                 	db	32
   324  00FF3A  0A                 	db	10
   325  00FF3B  00                 	db	0
   326  00FF3C                     STR_14:
   327  00FF3C  74                 	db	116	;'t'
   328  00FF3D  69                 	db	105	;'i'
   329  00FF3E  6D                 	db	109	;'m'
   330  00FF3F  65                 	db	101	;'e'
   331  00FF40  3A                 	db	58	;':'
   332  00FF41  20                 	db	32
   333  00FF42  6E                 	db	110	;'n'
   334  00FF43  6E                 	db	110	;'n'
   335  00FF44  6E                 	db	110	;'n'
   336  00FF45  20                 	db	32
   337  00FF46  73                 	db	115	;'s'
   338  00FF47  65                 	db	101	;'e'
   339  00FF48  63                 	db	99	;'c'
   340  00FF49  20                 	db	32
   341  00FF4A  20                 	db	32
   342  00FF4B  20                 	db	32
   343  00FF4C  0A                 	db	10
   344  00FF4D  00                 	db	0
   345  00FF4E                     STR_16:
   346  00FF4E  5B                 	db	91	;'['
   347  00FF4F  41                 	db	65	;'A'
   348  00FF50  41                 	db	65	;'A'
   349  00FF51  2C                 	db	44
   350  00FF52  39                 	db	57	;'9'
   351  00FF53  56                 	db	86	;'V'
   352  00FF54  2C                 	db	44
   353  00FF55  43                 	db	67	;'C'
   354  00FF56  2C                 	db	44
   355  00FF57  6F                 	db	111	;'o'
   356  00FF58  74                 	db	116	;'t'
   357  00FF59  68                 	db	104	;'h'
   358  00FF5A  65                 	db	101	;'e'
   359  00FF5B  72                 	db	114	;'r'
   360  00FF5C  5D                 	db	93	;']'
   361  00FF5D  20                 	db	32
   362  00FF5E  0A                 	db	10
   363  00FF5F  00                 	db	0
   364  00FF60                     STR_18:
   365  00FF60  30                 	db	48	;'0'
   366  00FF61  31                 	db	49	;'1'
   367  00FF62  32                 	db	50	;'2'
   368  00FF63  33                 	db	51	;'3'
   369  00FF64  34                 	db	52	;'4'
   370  00FF65  35                 	db	53	;'5'
   371  00FF66  36                 	db	54	;'6'
   372  00FF67  37                 	db	55	;'7'
   373  00FF68  38                 	db	56	;'8'
   374  00FF69  39                 	db	57	;'9'
   375  00FF6A  61                 	db	97	;'a'
   376  00FF6B  62                 	db	98	;'b'
   377  00FF6C  63                 	db	99	;'c'
   378  00FF6D  64                 	db	100	;'d'
   379  00FF6E  65                 	db	101	;'e'
   380  00FF6F  66                 	db	102	;'f'
   381  00FF70  00                 	db	0
   382  00FF71                     STR_15:
   383  00FF71  20                 	db	32
   384  00FF72  20                 	db	32
   385  00FF73  20                 	db	32
   386  00FF74  20                 	db	32
   387  00FF75  20                 	db	32
   388  00FF76  20                 	db	32
   389  00FF77  20                 	db	32
   390  00FF78  20                 	db	32
   391  00FF79  20                 	db	32
   392  00FF7A  20                 	db	32
   393  00FF7B  20                 	db	32
   394  00FF7C  20                 	db	32
   395  00FF7D  20                 	db	32
   396  00FF7E  20                 	db	32
   397  00FF7F  2A                 	db	42
   398  00FF80  3E                 	db	62	;'>'
   399  00FF81  00                 	db	0
   400  00FF82                     STR_11:
   401  00FF82  5B                 	db	91	;'['
   402  00FF83  31                 	db	49	;'1'
   403  00FF84  2C                 	db	44
   404  00FF85  32                 	db	50	;'2'
   405  00FF86  2C                 	db	44
   406  00FF87  33                 	db	51	;'3'
   407  00FF88  2C                 	db	44
   408  00FF89  34                 	db	52	;'4'
   409  00FF8A  5D                 	db	93	;']'
   410  00FF8B  20                 	db	32
   411  00FF8C  20                 	db	32
   412  00FF8D  20                 	db	32
   413  00FF8E  20                 	db	32
   414  00FF8F  20                 	db	32
   415  00FF90  2A                 	db	42
   416  00FF91  3E                 	db	62	;'>'
   417  00FF92  00                 	db	0
   418  00FF93                     STR_9:
   419  00FF93  68                 	db	104	;'h'
   420  00FF94  69                 	db	105	;'i'
   421  00FF95  73                 	db	115	;'s'
   422  00FF96  74                 	db	116	;'t'
   423  00FF97  6F                 	db	111	;'o'
   424  00FF98  72                 	db	114	;'r'
   425  00FF99  79                 	db	121	;'y'
   426  00FF9A  20                 	db	32
   427  00FF9B  3C                 	db	60	;'<'
   428  00FF9C  43                 	db	67	;'C'
   429  00FF9D  20                 	db	32
   430  00FF9E  20                 	db	32
   431  00FF9F  20                 	db	32
   432  00FFA0  20                 	db	32
   433  00FFA1  2A                 	db	42
   434  00FFA2  3E                 	db	62	;'>'
   435  00FFA3  00                 	db	0
   436  00FFA4                     STR_13:
   437  00FFA4  20                 	db	32
   438  00FFA5  20                 	db	32
   439  00FFA6  20                 	db	32
   440  00FFA7  73                 	db	115	;'s'
   441  00FFA8  74                 	db	116	;'t'
   442  00FFA9  61                 	db	97	;'a'
   443  00FFAA  74                 	db	116	;'t'
   444  00FFAB  73                 	db	115	;'s'
   445  00FFAC  20                 	db	32
   446  00FFAD  3C                 	db	60	;'<'
   447  00FFAE  42                 	db	66	;'B'
   448  00FFAF  20                 	db	32
   449  00FFB0  20                 	db	32
   450  00FFB1  20                 	db	32
   451  00FFB2  2A                 	db	42
   452  00FFB3  3E                 	db	62	;'>'
   453  00FFB4  00                 	db	0
   454  00FFB5                     STR_17:
   455  00FFB5  5B                 	db	91	;'['
   456  00FFB6  6E                 	db	110	;'n'
   457  00FFB7  6E                 	db	110	;'n'
   458  00FFB8  2C                 	db	44
   459  00FFB9  6E                 	db	110	;'n'
   460  00FFBA  2C                 	db	44
   461  00FFBB  6E                 	db	110	;'n'
   462  00FFBC  2C                 	db	44
   463  00FFBD  6E                 	db	110	;'n'
   464  00FFBE  6E                 	db	110	;'n'
   465  00FFBF  5D                 	db	93	;']'
   466  00FFC0  20                 	db	32
   467  00FFC1  20                 	db	32
   468  00FFC2  20                 	db	32
   469  00FFC3  2A                 	db	42
   470  00FFC4  3E                 	db	62	;'>'
   471  00FFC5  00                 	db	0
   472  00FFC6                     STR_7:
   473  00FFC6  20                 	db	32
   474  00FFC7  20                 	db	32
   475  00FFC8  6D                 	db	109	;'m'
   476  00FFC9  6D                 	db	109	;'m'
   477  00FFCA  3A                 	db	58	;':'
   478  00FFCB  64                 	db	100	;'d'
   479  00FFCC  64                 	db	100	;'d'
   480  00FFCD  3A                 	db	58	;':'
   481  00FFCE  79                 	db	121	;'y'
   482  00FFCF  79                 	db	121	;'y'
   483  00FFD0  20                 	db	32
   484  00FFD1  20                 	db	32
   485  00FFD2  20                 	db	32
   486  00FFD3  20                 	db	32
   487  00FFD4  41                 	db	65	;'A'
   488  00FFD5  3E                 	db	62	;'>'
   489  00FFD6  00                 	db	0
   490  00FFD7  5B                 	db	91	;'['
   491  00FFD8  25                 	db	37
   492  00FFD9  78                 	db	120	;'x'
   493  00FFDA  20                 	db	32
   494  00FFDB  25                 	db	37
   495  00FFDC  78                 	db	120	;'x'
   496  00FFDD  5D                 	db	93	;']'
   497  00FFDE  0A                 	db	10
   498  00FFDF  00                 	db	0
   499  00FFE0                     STR_2:
   500  00FFE0  73                 	db	115	;'s'
   501  00FFE1  6F                 	db	111	;'o'
   502  00FFE2  72                 	db	114	;'r'
   503  00FFE3  74                 	db	116	;'t'
   504  00FFE4  69                 	db	105	;'i'
   505  00FFE5  6E                 	db	110	;'n'
   506  00FFE6  67                 	db	103	;'g'
   507  00FFE7  21                 	db	33
   508  00FFE8  00                 	db	0
   509  00FFE9                     STR_1:
   510  00FFE9  73                 	db	115	;'s'
   511  00FFEA  74                 	db	116	;'t'
   512  00FFEB  61                 	db	97	;'a'
   513  00FFEC  72                 	db	114	;'r'
   514  00FFED  74                 	db	116	;'t'
   515  00FFEE  69                 	db	105	;'i'
   516  00FFEF  6E                 	db	110	;'n'
   517  00FFF0  67                 	db	103	;'g'
   518  00FFF1  00                 	db	0
   519  00FFF2  74                 	db	116	;'t'
   520  00FFF3  31                 	db	49	;'1'
   521  00FFF4  3A                 	db	58	;':'
   522  00FFF5  20                 	db	32
   523  00FFF6  25                 	db	37
   524  00FFF7  78                 	db	120	;'x'
   525  00FFF8  20                 	db	32
   526  00FFF9  00                 	db	0
   527  00FFFA                     STR_5:
   528  00FFFA  25                 	db	37
   529  00FFFB  6C                 	db	108	;'l'
   530  00FFFC  64                 	db	100	;'d'
   531  00FFFD  00                 	db	0
   532                           
   533                           ; #config settings
   534  00FFFE  00                 	db	0	; dummy byte at the end
   535  0000                     
   536                           	psect	cinit
   537  001842                     __pcinit:
   538                           	opt stack 0
   539  001842                     start_initialization:
   540                           	opt stack 0
   541  001842                     __initialization:
   542                           	opt stack 0
   543                           
   544                           ; Initialize objects allocated to BANK0 (8 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  001842  0ED8               	movlw	low __pidataBANK0
   547  001844  6EF6               	movwf	tblptrl,c
   548  001846  0E1A               	movlw	high __pidataBANK0
   549  001848  6EF7               	movwf	tblptrh,c
   550  00184A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  00184C  6EF8               	movwf	tblptru,c
   552  00184E  EE00  F0C3         	lfsr	0,__pdataBANK0
   553  001852  EE10 F008          	lfsr	1,8
   554  001856                     copy_data0:
   555  001856  0009               	tblrd		*+
   556  001858  CFF5 FFEE          	movff	tablat,postinc0
   557  00185C  50E5               	movf	postdec1,w,c
   558  00185E  50E1               	movf	fsr1l,w,c
   559  001860  E1FA               	bnz	copy_data0
   560                           
   561                           ; Clear objects allocated to BANK0 (24 bytes)
   562  001862  EE00  F0AB         	lfsr	0,__pbssBANK0
   563  001866  0E18               	movlw	24
   564  001868                     clear_0:
   565  001868  6AEE               	clrf	postinc0,c
   566  00186A  06E8               	decf	wreg,f,c
   567  00186C  E1FD               	bnz	clear_0
   568                           
   569                           ; Clear objects allocated to COMRAM (8 bytes)
   570  00186E  EE00  F076         	lfsr	0,__pbssCOMRAM
   571  001872  0E08               	movlw	8
   572  001874                     clear_1:
   573  001874  6AEE               	clrf	postinc0,c
   574  001876  06E8               	decf	wreg,f,c
   575  001878  E1FD               	bnz	clear_1
   576  00187A                     end_of_initialization:
   577                           	opt stack 0
   578  00187A                     __end_of__initialization:
   579                           	opt stack 0
   580  00187A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   581  00187C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   582  00187E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   583  001880  6EF8               	movwf	tblptru,c
   584  001882  0100               	movlb	0
   585  001884  EFB0  F00B         	goto	_main	;jump to C main() function
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           postdec1	equ	0xFE5
   593                           fsr1l	equ	0xFE1
   594                           
   595                           	psect	bssCOMRAM
   596  000076                     __pbssCOMRAM:
   597                           	opt stack 0
   598  000076                     _port:
   599                           	opt stack 0
   600  000076                     	ds	8
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec1	equ	0xFE5
   608                           fsr1l	equ	0xFE1
   609                           
   610                           	psect	bssBANK0
   611  0000AB                     __pbssBANK0:
   612                           	opt stack 0
   613  0000AB                     _pulse:
   614                           	opt stack 0
   615  0000AB                     	ds	16
   616  0000BB                     _pin:
   617                           	opt stack 0
   618  0000BB                     	ds	8
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1l	equ	0xFE1
   627                           
   628                           	psect	dataBANK0
   629  0000C3                     __pdataBANK0:
   630                           	opt stack 0
   631  0000C3                     _binAngle:
   632                           	opt stack 0
   633  0000C3                     	ds	8
   634                           tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           postdec1	equ	0xFE5
   641                           fsr1l	equ	0xFE1
   642                           
   643                           	psect	cstackBANK0
   644  000080                     __pcstackBANK0:
   645                           	opt stack 0
   646  000080                     ?___lldiv:
   647                           	opt stack 0
   648  000080                     lcdNibble@temp:
   649                           	opt stack 0
   650  000080                     readKeypad@key:
   651                           	opt stack 0
   652  000080                     digitalWrite@port:
   653                           	opt stack 0
   654  000080                     ___lldiv@dividend:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x0
   658  000080                     	ds	1
   659  000081                     lcdNibble@data:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x1
   663  000081                     	ds	1
   664  000082                     ??_lcdInst:
   665  000082                     digitalWrite@pin:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x2
   669  000082                     	ds	1
   670  000083                     lcdInst@data:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x3
   674  000083                     	ds	1
   675  000084                     ??_initLCD:
   676  000084                     putch@data:
   677                           	opt stack 0
   678  000084                     digitalWrite@val:
   679                           	opt stack 0
   680  000084                     ___lldiv@divisor:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x4
   684  000084                     	ds	2
   685  000086                     ??_digitalWrite:
   686                           
   687                           ; 1 bytes @ 0x6
   688  000086                     	ds	2
   689  000088                     ___lldiv@quotient:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x8
   693  000088                     	ds	4
   694  00008C                     ___lldiv@counter:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0xC
   698  00008C                     	ds	1
   699  00008D                     ?___llmod:
   700                           	opt stack 0
   701  00008D                     I2C_Master_Init@c:
   702                           	opt stack 0
   703  00008D                     ___llmod@dividend:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0xD
   707  00008D                     	ds	4
   708  000091                     ??_I2C_Master_Init:
   709  000091                     ___llmod@divisor:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x11
   713  000091                     	ds	4
   714  000095                     ___llmod@counter:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x15
   718  000095                     	ds	1
   719  000096                     ?_printf:
   720                           	opt stack 0
   721  000096                     printf@f:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x16
   725  000096                     	ds	6
   726  00009C                     ??_printf:
   727                           
   728                           ; 1 bytes @ 0x1C
   729  00009C                     	ds	2
   730  00009E                     printf@idx:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x1E
   734  00009E                     	ds	1
   735  00009F                     printf@prec:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x1F
   739  00009F                     	ds	2
   740  0000A1                     printf@ap:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x21
   744  0000A1                     	ds	2
   745  0000A3                     printf@val:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x23
   749  0000A3                     	ds	4
   750  0000A7                     printf@flag:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x27
   754  0000A7                     	ds	1
   755  0000A8                     printf@c:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x28
   759  0000A8                     	ds	1
   760  0000A9                     runMenu@key:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x29
   764  0000A9                     	ds	1
   765  0000AA                     showInterface@key:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x2A
   769  0000AA                     	ds	1
   770  0000AB                     tblptru	equ	0xFF8
   771                           tblptrh	equ	0xFF7
   772                           tblptrl	equ	0xFF6
   773                           tablat	equ	0xFF5
   774                           postinc0	equ	0xFEE
   775                           wreg	equ	0xFE8
   776                           postdec1	equ	0xFE5
   777                           fsr1l	equ	0xFE1
   778                           
   779                           ; 1 bytes @ 0x2B
   780                           
   781                           	psect	cstackCOMRAM
   782  000001                     __pcstackCOMRAM:
   783                           	opt stack 0
   784  000001                     ?_digitalRead:
   785                           	opt stack 0
   786  000001                     ?___ftpack:
   787                           	opt stack 0
   788  000001                     ?i2___lldiv:
   789                           	opt stack 0
   790  000001                     i2lcdNibble@temp:
   791                           	opt stack 0
   792  000001                     digitalRead@port:
   793                           	opt stack 0
   794  000001                     startTimer@timer:
   795                           	opt stack 0
   796  000001                     i2digitalWrite@port:
   797                           	opt stack 0
   798  000001                     ___ftpack@arg:
   799                           	opt stack 0
   800  000001                     i2___lldiv@dividend:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0x0
   804  000001                     	ds	1
   805  000002                     i2lcdNibble@data:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x1
   809  000002                     	ds	1
   810  000003                     ??i2_lcdInst:
   811  000003                     digitalRead@pin:
   812                           	opt stack 0
   813  000003                     i2digitalWrite@pin:
   814                           	opt stack 0
   815  000003                     startTimer@val:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0x2
   819  000003                     	ds	1
   820  000004                     ___ftpack@exp:
   821                           	opt stack 0
   822  000004                     i2lcdInst@data:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x3
   826  000004                     	ds	1
   827  000005                     ??_digitalRead:
   828  000005                     ___ftpack@sign:
   829                           	opt stack 0
   830  000005                     i2putch@data:
   831                           	opt stack 0
   832  000005                     i2digitalWrite@val:
   833                           	opt stack 0
   834  000005                     i2___lldiv@divisor:
   835                           	opt stack 0
   836                           
   837                           ; 4 bytes @ 0x4
   838  000005                     	ds	1
   839  000006                     ??___ftpack:
   840                           
   841                           ; 1 bytes @ 0x5
   842  000006                     	ds	1
   843  000007                     ??_startTimer:
   844  000007                     ??i2_digitalWrite:
   845                           
   846                           ; 1 bytes @ 0x6
   847  000007                     	ds	2
   848  000009                     ?___altoft:
   849                           	opt stack 0
   850  000009                     ?___awtoft:
   851                           	opt stack 0
   852  000009                     ___awtoft@c:
   853                           	opt stack 0
   854  000009                     ___altoft@c:
   855                           	opt stack 0
   856  000009                     i2___lldiv@quotient:
   857                           	opt stack 0
   858                           
   859                           ; 4 bytes @ 0x8
   860  000009                     	ds	1
   861  00000A                     ??_servoInterruptService:
   862                           
   863                           ; 1 bytes @ 0x9
   864  00000A                     	ds	2
   865  00000C                     ___awtoft@sign:
   866                           	opt stack 0
   867  00000C                     servoInterruptService@flags:
   868                           	opt stack 0
   869                           
   870                           ; 8 bytes @ 0xB
   871  00000C                     	ds	1
   872  00000D                     ??___altoft:
   873  00000D                     ?___ftdiv:
   874                           	opt stack 0
   875  00000D                     i2___lldiv@counter:
   876                           	opt stack 0
   877  00000D                     ___ftdiv@f1:
   878                           	opt stack 0
   879                           
   880                           ; 3 bytes @ 0xC
   881  00000D                     	ds	1
   882  00000E                     ?i2___llmod:
   883                           	opt stack 0
   884  00000E                     i2___llmod@dividend:
   885                           	opt stack 0
   886                           
   887                           ; 4 bytes @ 0xD
   888  00000E                     	ds	2
   889  000010                     ___ftdiv@f2:
   890                           	opt stack 0
   891                           
   892                           ; 3 bytes @ 0xF
   893  000010                     	ds	1
   894  000011                     ___altoft@exp:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x10
   898  000011                     	ds	1
   899  000012                     ___altoft@sign:
   900                           	opt stack 0
   901  000012                     i2___llmod@divisor:
   902                           	opt stack 0
   903                           
   904                           ; 4 bytes @ 0x11
   905  000012                     	ds	1
   906  000013                     ??___ftdiv:
   907                           
   908                           ; 1 bytes @ 0x12
   909  000013                     	ds	1
   910  000014                     servoInterruptService@i:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x13
   914  000014                     	ds	2
   915  000016                     ___ftdiv@cntr:
   916                           	opt stack 0
   917  000016                     i2___llmod@counter:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x15
   921  000016                     	ds	1
   922  000017                     ?i2_printf:
   923                           	opt stack 0
   924  000017                     i2printf@f:
   925                           	opt stack 0
   926  000017                     ___ftdiv@f3:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x16
   930  000017                     	ds	3
   931  00001A                     ___ftdiv@exp:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x19
   935  00001A                     	ds	1
   936  00001B                     ___ftdiv@sign:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x1A
   940  00001B                     	ds	1
   941  00001C                     ?___ftmul:
   942                           	opt stack 0
   943  00001C                     ___ftmul@f1:
   944                           	opt stack 0
   945                           
   946                           ; 3 bytes @ 0x1B
   947  00001C                     	ds	1
   948  00001D                     ??i2_printf:
   949                           
   950                           ; 1 bytes @ 0x1C
   951  00001D                     	ds	2
   952  00001F                     i2printf@idx:
   953                           	opt stack 0
   954  00001F                     ___ftmul@f2:
   955                           	opt stack 0
   956                           
   957                           ; 3 bytes @ 0x1E
   958  00001F                     	ds	1
   959  000020                     i2printf@prec:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x1F
   963  000020                     	ds	2
   964  000022                     ??___ftmul:
   965  000022                     i2printf@ap:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x21
   969  000022                     	ds	2
   970  000024                     i2printf@val:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x23
   974  000024                     	ds	1
   975  000025                     ___ftmul@exp:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x24
   979  000025                     	ds	1
   980  000026                     ___ftmul@f3_as_product:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x25
   984  000026                     	ds	2
   985  000028                     i2printf@flag:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x27
   989  000028                     	ds	1
   990  000029                     ___ftmul@cntr:
   991                           	opt stack 0
   992  000029                     i2printf@c:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x28
   996  000029                     	ds	1
   997  00002A                     ___ftmul@sign:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x29
  1001  00002A                     	ds	1
  1002  00002B                     ?___ftadd:
  1003                           	opt stack 0
  1004  00002B                     ___ftadd@f1:
  1005                           	opt stack 0
  1006                           
  1007                           ; 3 bytes @ 0x2A
  1008  00002B                     	ds	3
  1009  00002E                     ___ftadd@f2:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x2D
  1013  00002E                     	ds	3
  1014  000031                     ??___ftadd:
  1015                           
  1016                           ; 1 bytes @ 0x30
  1017  000031                     	ds	3
  1018  000034                     ___ftadd@sign:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x33
  1022  000034                     	ds	1
  1023  000035                     ___ftadd@exp2:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x34
  1027  000035                     	ds	1
  1028  000036                     ___ftadd@exp1:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x35
  1032  000036                     	ds	1
  1033  000037                     ?___fttol:
  1034                           	opt stack 0
  1035  000037                     ___fttol@f1:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x36
  1039  000037                     	ds	4
  1040  00003B                     ??___fttol:
  1041                           
  1042                           ; 1 bytes @ 0x3A
  1043  00003B                     	ds	5
  1044  000040                     ___fttol@sign1:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x3F
  1048  000040                     	ds	1
  1049  000041                     ___fttol@lval:
  1050                           	opt stack 0
  1051                           
  1052                           ; 4 bytes @ 0x40
  1053  000041                     	ds	4
  1054  000045                     ___fttol@exp1:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x44
  1058  000045                     	ds	1
  1059  000046                     ?_angleToPulse:
  1060                           	opt stack 0
  1061  000046                     angleToPulse@angle:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x45
  1065  000046                     	ds	4
  1066  00004A                     ??_angleToPulse:
  1067                           
  1068                           ; 1 bytes @ 0x49
  1069  00004A                     	ds	4
  1070  00004E                     angleToPulse@offset:
  1071                           	opt stack 0
  1072                           
  1073                           ; 4 bytes @ 0x4D
  1074  00004E                     	ds	4
  1075  000052                     angleToPulse@a180:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x51
  1079  000052                     	ds	4
  1080  000056                     _angleToPulse$1198:
  1081                           	opt stack 0
  1082                           
  1083                           ; 3 bytes @ 0x55
  1084  000056                     	ds	3
  1085  000059                     angleToPulse@a000:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x58
  1089  000059                     	ds	4
  1090  00005D                     setAngle@timer:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x5C
  1094  00005D                     	ds	2
  1095  00005F                     setAngle@angle:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x5E
  1099  00005F                     	ds	2
  1100  000061                     ??_setAngle:
  1101                           
  1102                           ; 1 bytes @ 0x60
  1103  000061                     	ds	6
  1104  000067                     ??_service:
  1105                           
  1106                           ; 1 bytes @ 0x66
  1107  000067                     	ds	14
  1108  000075                     service@key:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x74
  1112  000075                     	ds	1
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postdec1	equ	0xFE5
  1120                           fsr1l	equ	0xFE1
  1121                           
  1122 ;;
  1123 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1124 ;;
  1125 ;; *************** function _main *****************
  1126 ;; Defined at:
  1127 ;;		line 28 in file "main.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;Total ram usage:        0 bytes
  1146 ;; Hardware stack levels required when called:   14
  1147 ;; This function calls:
  1148 ;;		_digitalWrite
  1149 ;;		_initLCD
  1150 ;;		_initRTC
  1151 ;;		_lcdClear
  1152 ;;		_pinSetup
  1153 ;;		_printf
  1154 ;;		_showInterface
  1155 ;; This function is called by:
  1156 ;;		Startup code after reset
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text0
  1161  001760                     __ptext0:
  1162                           	opt stack 0
  1163  001760                     _main:
  1164                           	opt stack 17
  1165                           
  1166                           ;main.c: 29: pinSetup();
  1167                           
  1168                           ;incstack = 0
  1169  001760  EC44  F00C         	call	_pinSetup	;wreg free
  1170                           
  1171                           ;main.c: 30: initLCD();
  1172  001764  ECFC  F00B         	call	_initLCD	;wreg free
  1173                           
  1174                           ;main.c: 31: initRTC();
  1175  001768  EC57  F00D         	call	_initRTC	;wreg free
  1176                           
  1177                           ;main.c: 34: (INTCONbits.GIE = 0);
  1178                           
  1179                           ;main.c: 33: while(1){
  1180  00176C  9EF2               	bcf	intcon,7,c	;volatile
  1181                           
  1182                           ;main.c: 35: showInterface();
  1183  00176E  EC92  F005         	call	_showInterface	;wreg free
  1184                           
  1185                           ;main.c: 36: (INTCONbits.GIE = 1);
  1186  001772  8EF2               	bsf	intcon,7,c	;volatile
  1187                           
  1188                           ;main.c: 44: lcdClear();
  1189  001774  EC74  F00D         	call	_lcdClear	;wreg free
  1190                           
  1191                           ;main.c: 45: printf("starting");
  1192  001778  0EE9               	movlw	low STR_1
  1193  00177A  0100               	movlb	0	; () banked
  1194  00177C  6F96               	movwf	printf@f& (0+255),b
  1195  00177E  0EFF               	movlw	high STR_1
  1196  001780  0100               	movlb	0	; () banked
  1197  001782  6F97               	movwf	(printf@f+1)& (0+255),b
  1198  001784  EC09  F000         	call	_printf	;wreg free
  1199                           
  1200                           ;main.c: 46: digitalWrite(2,0,1);
  1201  001788  0E00               	movlw	0
  1202  00178A  0100               	movlb	0	; () banked
  1203  00178C  6F81               	movwf	(digitalWrite@port+1)& (0+255),b
  1204  00178E  0E02               	movlw	2
  1205  001790  6F80               	movwf	digitalWrite@port& (0+255),b
  1206  001792  0E00               	movlw	0
  1207  001794  0100               	movlb	0	; () banked
  1208  001796  6F83               	movwf	(digitalWrite@pin+1)& (0+255),b
  1209  001798  0E00               	movlw	0
  1210  00179A  6F82               	movwf	digitalWrite@pin& (0+255),b
  1211  00179C  0E00               	movlw	0
  1212  00179E  0100               	movlb	0	; () banked
  1213  0017A0  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  1214  0017A2  0E01               	movlw	1
  1215  0017A4  6F84               	movwf	digitalWrite@val& (0+255),b
  1216  0017A6  ECEC  F007         	call	_digitalWrite	;wreg free
  1217  0017AA                     l74:
  1218  0017AA  D7FF               	goto	l74
  1219  0017AC                     __end_of_main:
  1220                           	opt stack 0
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           intcon	equ	0xFF2
  1226                           postinc0	equ	0xFEE
  1227                           wreg	equ	0xFE8
  1228                           postdec1	equ	0xFE5
  1229                           fsr1l	equ	0xFE1
  1230                           
  1231 ;; *************** function _showInterface *****************
  1232 ;; Defined at:
  1233 ;;		line 88 in file "main.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  key             1   42[BANK0 ] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;Total ram usage:        1 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:   13
  1254 ;; This function calls:
  1255 ;;		_dateTime
  1256 ;;		_mainMenu
  1257 ;;		_readKeypad
  1258 ;;		_runMenu
  1259 ;;		_runSelect
  1260 ;;		_runStats
  1261 ;;		_runTime
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text1
  1268  000B24                     __ptext1:
  1269                           	opt stack 0
  1270  000B24                     _showInterface:
  1271                           	opt stack 17
  1272  000B24                     
  1273                           ;main.c: 91: dateTime();
  1274  000B24  EC22  F00D         	call	_dateTime	;wreg free
  1275  000B28                     l3351:
  1276  000B28  EC98  F00C         	call	_readKeypad	;wreg free
  1277  000B2C  0A41               	xorlw	65
  1278  000B2E  A4D8               	btfss	status,2,c
  1279  000B30  D7FB               	goto	l3351
  1280  000B32                     l3353:
  1281                           
  1282                           ;main.c: 96: mainMenu();
  1283  000B32  EC0F  F00D         	call	_mainMenu	;wreg free
  1284  000B36                     l3355:
  1285  000B36  EC98  F00C         	call	_readKeypad	;wreg free
  1286  000B3A  0100               	movlb	0	; () banked
  1287  000B3C  6FAA               	movwf	showInterface@key& (0+255),b
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;main.c: 100: while(key != 'B' && key != 'C' && key != '*');
  1291  000B3E  0E42               	movlw	66
  1292  000B40  0100               	movlb	0	; () banked
  1293  000B42  19AA               	xorwf	showInterface@key& (0+255),w,b
  1294  000B44  B4D8               	btfsc	status,2,c
  1295  000B46  D00A               	goto	l3363
  1296                           
  1297                           ; BSR set to: 0
  1298  000B48  0E43               	movlw	67
  1299  000B4A  0100               	movlb	0	; () banked
  1300  000B4C  19AA               	xorwf	showInterface@key& (0+255),w,b
  1301  000B4E  B4D8               	btfsc	status,2,c
  1302  000B50  D005               	goto	l3363
  1303                           
  1304                           ; BSR set to: 0
  1305  000B52  0E2A               	movlw	42
  1306  000B54  0100               	movlb	0	; () banked
  1307  000B56  19AA               	xorwf	showInterface@key& (0+255),w,b
  1308  000B58  A4D8               	btfss	status,2,c
  1309  000B5A  D7ED               	goto	l3355
  1310  000B5C                     l3363:
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 102: if(key == 'C'){
  1314  000B5C  0E43               	movlw	67
  1315  000B5E  0100               	movlb	0	; () banked
  1316  000B60  19AA               	xorwf	showInterface@key& (0+255),w,b
  1317  000B62  A4D8               	btfss	status,2,c
  1318  000B64  D056               	goto	l3407
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;main.c: 104: runSelect();
  1322  000B66  ECFC  F00C         	call	_runSelect	;wreg free
  1323  000B6A                     l3367:
  1324  000B6A  EC98  F00C         	call	_readKeypad	;wreg free
  1325  000B6E  0100               	movlb	0	; () banked
  1326  000B70  6FAA               	movwf	showInterface@key& (0+255),b
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 110: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
  1330  000B72  0E31               	movlw	49
  1331  000B74  0100               	movlb	0	; () banked
  1332  000B76  19AA               	xorwf	showInterface@key& (0+255),w,b
  1333  000B78  B4D8               	btfsc	status,2,c
  1334  000B7A  D014               	goto	l3379
  1335                           
  1336                           ; BSR set to: 0
  1337  000B7C  0E32               	movlw	50
  1338  000B7E  0100               	movlb	0	; () banked
  1339  000B80  19AA               	xorwf	showInterface@key& (0+255),w,b
  1340  000B82  B4D8               	btfsc	status,2,c
  1341  000B84  D00F               	goto	l3379
  1342                           
  1343                           ; BSR set to: 0
  1344  000B86  0E33               	movlw	51
  1345  000B88  0100               	movlb	0	; () banked
  1346  000B8A  19AA               	xorwf	showInterface@key& (0+255),w,b
  1347  000B8C  B4D8               	btfsc	status,2,c
  1348  000B8E  D00A               	goto	l3379
  1349                           
  1350                           ; BSR set to: 0
  1351  000B90  0E34               	movlw	52
  1352  000B92  0100               	movlb	0	; () banked
  1353  000B94  19AA               	xorwf	showInterface@key& (0+255),w,b
  1354  000B96  B4D8               	btfsc	status,2,c
  1355  000B98  D005               	goto	l3379
  1356                           
  1357                           ; BSR set to: 0
  1358  000B9A  0E2A               	movlw	42
  1359  000B9C  0100               	movlb	0	; () banked
  1360  000B9E  19AA               	xorwf	showInterface@key& (0+255),w,b
  1361  000BA0  A4D8               	btfss	status,2,c
  1362  000BA2  D7E3               	goto	l3367
  1363  000BA4                     l3379:
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 112: if(key == '*')continue;
  1367  000BA4  0E2A               	movlw	42
  1368  000BA6  0100               	movlb	0	; () banked
  1369  000BA8  19AA               	xorwf	showInterface@key& (0+255),w,b
  1370  000BAA  B4D8               	btfsc	status,2,c
  1371  000BAC  D7C2               	goto	l3353
  1372  000BAE                     l3383:
  1373                           
  1374                           ;main.c: 118: runMenu(key);
  1375  000BAE  0100               	movlb	0	; () banked
  1376  000BB0  51AA               	movf	showInterface@key& (0+255),w,b
  1377  000BB2  EC7F  F00C         	call	_runMenu
  1378  000BB6                     l3385:
  1379  000BB6  EC98  F00C         	call	_readKeypad	;wreg free
  1380  000BBA  0100               	movlb	0	; () banked
  1381  000BBC  6FAA               	movwf	showInterface@key& (0+255),b
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;main.c: 122: while(key != 'A' && key != 'B' && key != '*');
  1385  000BBE  0E41               	movlw	65
  1386  000BC0  0100               	movlb	0	; () banked
  1387  000BC2  19AA               	xorwf	showInterface@key& (0+255),w,b
  1388  000BC4  B4D8               	btfsc	status,2,c
  1389  000BC6  D00A               	goto	l3393
  1390                           
  1391                           ; BSR set to: 0
  1392  000BC8  0E42               	movlw	66
  1393  000BCA  0100               	movlb	0	; () banked
  1394  000BCC  19AA               	xorwf	showInterface@key& (0+255),w,b
  1395  000BCE  B4D8               	btfsc	status,2,c
  1396  000BD0  D005               	goto	l3393
  1397                           
  1398                           ; BSR set to: 0
  1399  000BD2  0E2A               	movlw	42
  1400  000BD4  0100               	movlb	0	; () banked
  1401  000BD6  19AA               	xorwf	showInterface@key& (0+255),w,b
  1402  000BD8  A4D8               	btfss	status,2,c
  1403  000BDA  D7ED               	goto	l3385
  1404  000BDC                     l3393:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 124: if(key == 'A'){
  1408  000BDC  0E41               	movlw	65
  1409  000BDE  0100               	movlb	0	; () banked
  1410  000BE0  19AA               	xorwf	showInterface@key& (0+255),w,b
  1411  000BE2  A4D8               	btfss	status,2,c
  1412  000BE4  D003               	goto	l3397
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;main.c: 126: runTime();
  1416  000BE6  ECD6  F00C         	call	_runTime	;wreg free
  1417                           
  1418                           ;main.c: 128: }
  1419  000BEA  D00D               	goto	l3405
  1420  000BEC                     l3397:
  1421                           
  1422                           ;main.c: 129: else if(key == 'B'){
  1423  000BEC  0E42               	movlw	66
  1424  000BEE  0100               	movlb	0	; () banked
  1425  000BF0  19AA               	xorwf	showInterface@key& (0+255),w,b
  1426  000BF2  A4D8               	btfss	status,2,c
  1427  000BF4  D003               	goto	l3401
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;main.c: 131: runStats();
  1431  000BF6  ECE9  F00C         	call	_runStats	;wreg free
  1432                           
  1433                           ;main.c: 133: }
  1434  000BFA  D005               	goto	l3405
  1435  000BFC                     l3401:
  1436                           
  1437                           ;main.c: 134: else if(key == '*')break;
  1438  000BFC  0E2A               	movlw	42
  1439  000BFE  0100               	movlb	0	; () banked
  1440  000C00  19AA               	xorwf	showInterface@key& (0+255),w,b
  1441  000C02  B4D8               	btfsc	status,2,c
  1442  000C04  D796               	goto	l3353
  1443  000C06                     l3405:
  1444  000C06  EC98  F00C         	call	_readKeypad	;wreg free
  1445  000C0A  0A2A               	xorlw	42
  1446  000C0C  B4D8               	btfsc	status,2,c
  1447  000C0E  D7CF               	goto	l3383
  1448  000C10  D7FA               	goto	l3405
  1449  000C12                     l3407:
  1450                           
  1451                           ;main.c: 140: else if(key == 'B'){
  1452  000C12  0E42               	movlw	66
  1453  000C14  0100               	movlb	0	; () banked
  1454  000C16  19AA               	xorwf	showInterface@key& (0+255),w,b
  1455  000C18  B4D8               	btfsc	status,2,c
  1456  000C1A  0012               	return	
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;main.c: 143: else if(key == '*')
  1460                           
  1461                           ; BSR set to: 0
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;main.c: 142: }
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 141: return;
  1468  000C1C  0E2A               	movlw	42
  1469  000C1E  0100               	movlb	0	; () banked
  1470  000C20  19AA               	xorwf	showInterface@key& (0+255),w,b
  1471  000C22  B4D8               	btfsc	status,2,c
  1472  000C24  D77F               	goto	l3349
  1473  000C26  D785               	goto	l3353
  1474  000C28                     __end_of_showInterface:
  1475                           	opt stack 0
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           intcon	equ	0xFF2
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1l	equ	0xFE1
  1485                           status	equ	0xFD8
  1486                           
  1487 ;; *************** function _runTime *****************
  1488 ;; Defined at:
  1489 ;;		line 36 in file "interface.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;Total ram usage:        0 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:   12
  1510 ;; This function calls:
  1511 ;;		_lcdClear
  1512 ;;		_printf
  1513 ;; This function is called by:
  1514 ;;		_showInterface
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text2
  1519  0019AC                     __ptext2:
  1520                           	opt stack 0
  1521  0019AC                     _runTime:
  1522                           	opt stack 17
  1523                           
  1524                           ;interface.c: 37: lcdClear();
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;incstack = 0
  1528  0019AC  EC74  F00D         	call	_lcdClear	;wreg free
  1529                           
  1530                           ;interface.c: 38: printf("time: nnn sec   \n");
  1531  0019B0  0E3C               	movlw	low STR_14
  1532  0019B2  0100               	movlb	0	; () banked
  1533  0019B4  6F96               	movwf	printf@f& (0+255),b
  1534  0019B6  0EFF               	movlw	high STR_14
  1535  0019B8  0100               	movlb	0	; () banked
  1536  0019BA  6F97               	movwf	(printf@f+1)& (0+255),b
  1537  0019BC  EC09  F000         	call	_printf	;wreg free
  1538                           
  1539                           ;interface.c: 39: printf("              *>");
  1540  0019C0  0E71               	movlw	low STR_15
  1541  0019C2  0100               	movlb	0	; () banked
  1542  0019C4  6F96               	movwf	printf@f& (0+255),b
  1543  0019C6  0EFF               	movlw	high STR_15
  1544  0019C8  0100               	movlb	0	; () banked
  1545  0019CA  6F97               	movwf	(printf@f+1)& (0+255),b
  1546  0019CC  EC09  F000         	call	_printf	;wreg free
  1547  0019D0  0012               	return		;funcret
  1548  0019D2                     __end_of_runTime:
  1549                           	opt stack 0
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           intcon	equ	0xFF2
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postdec1	equ	0xFE5
  1558                           fsr1l	equ	0xFE1
  1559                           status	equ	0xFD8
  1560                           
  1561 ;; *************** function _runStats *****************
  1562 ;; Defined at:
  1563 ;;		line 42 in file "interface.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;		None
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;		None
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  1    wreg      void 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;Total ram usage:        0 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; Hardware stack levels required when called:   12
  1584 ;; This function calls:
  1585 ;;		_lcdClear
  1586 ;;		_printf
  1587 ;; This function is called by:
  1588 ;;		_showInterface
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           	psect	text3
  1593  0019D2                     __ptext3:
  1594                           	opt stack 0
  1595  0019D2                     _runStats:
  1596                           	opt stack 17
  1597                           
  1598                           ;interface.c: 43: lcdClear();
  1599                           
  1600                           ;incstack = 0
  1601  0019D2  EC74  F00D         	call	_lcdClear	;wreg free
  1602                           
  1603                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  1604  0019D6  0E4E               	movlw	low STR_16
  1605  0019D8  0100               	movlb	0	; () banked
  1606  0019DA  6F96               	movwf	printf@f& (0+255),b
  1607  0019DC  0EFF               	movlw	high STR_16
  1608  0019DE  0100               	movlb	0	; () banked
  1609  0019E0  6F97               	movwf	(printf@f+1)& (0+255),b
  1610  0019E2  EC09  F000         	call	_printf	;wreg free
  1611                           
  1612                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  1613  0019E6  0EB5               	movlw	low STR_17
  1614  0019E8  0100               	movlb	0	; () banked
  1615  0019EA  6F96               	movwf	printf@f& (0+255),b
  1616  0019EC  0EFF               	movlw	high STR_17
  1617  0019EE  0100               	movlb	0	; () banked
  1618  0019F0  6F97               	movwf	(printf@f+1)& (0+255),b
  1619  0019F2  EC09  F000         	call	_printf	;wreg free
  1620  0019F6  0012               	return		;funcret
  1621  0019F8                     __end_of_runStats:
  1622                           	opt stack 0
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           intcon	equ	0xFF2
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1l	equ	0xFE1
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _runSelect *****************
  1635 ;; Defined at:
  1636 ;;		line 24 in file "interface.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;		None
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;Total ram usage:        0 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:   12
  1657 ;; This function calls:
  1658 ;;		_lcdClear
  1659 ;;		_printf
  1660 ;; This function is called by:
  1661 ;;		_showInterface
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text4
  1666  0019F8                     __ptext4:
  1667                           	opt stack 0
  1668  0019F8                     _runSelect:
  1669                           	opt stack 17
  1670                           
  1671                           ;interface.c: 25: lcdClear();
  1672                           
  1673                           ;incstack = 0
  1674  0019F8  EC74  F00D         	call	_lcdClear	;wreg free
  1675                           
  1676                           ;interface.c: 26: printf("select run:     \n");
  1677  0019FC  0E2A               	movlw	low STR_10
  1678  0019FE  0100               	movlb	0	; () banked
  1679  001A00  6F96               	movwf	printf@f& (0+255),b
  1680  001A02  0EFF               	movlw	high STR_10
  1681  001A04  0100               	movlb	0	; () banked
  1682  001A06  6F97               	movwf	(printf@f+1)& (0+255),b
  1683  001A08  EC09  F000         	call	_printf	;wreg free
  1684                           
  1685                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  1686  001A0C  0E82               	movlw	low STR_11
  1687  001A0E  0100               	movlb	0	; () banked
  1688  001A10  6F96               	movwf	printf@f& (0+255),b
  1689  001A12  0EFF               	movlw	high STR_11
  1690  001A14  0100               	movlb	0	; () banked
  1691  001A16  6F97               	movwf	(printf@f+1)& (0+255),b
  1692  001A18  EC09  F000         	call	_printf	;wreg free
  1693  001A1C  0012               	return		;funcret
  1694  001A1E                     __end_of_runSelect:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           intcon	equ	0xFF2
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           fsr1l	equ	0xFE1
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function _runMenu *****************
  1708 ;; Defined at:
  1709 ;;		line 30 in file "interface.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  key             1    wreg     unsigned char 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  key             1   41[BANK0 ] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;Total ram usage:        1 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:   12
  1730 ;; This function calls:
  1731 ;;		_lcdClear
  1732 ;;		_printf
  1733 ;; This function is called by:
  1734 ;;		_showInterface
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text5
  1739  0018FE                     __ptext5:
  1740                           	opt stack 0
  1741  0018FE                     _runMenu:
  1742                           	opt stack 17
  1743                           
  1744                           ;incstack = 0
  1745                           ;runMenu@key stored from wreg
  1746  0018FE  0100               	movlb	0	; () banked
  1747  001900  6FA9               	movwf	runMenu@key& (0+255),b
  1748                           
  1749                           ;interface.c: 31: lcdClear();
  1750  001902  EC74  F00D         	call	_lcdClear	;wreg free
  1751                           
  1752                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  1753  001906  0EF3               	movlw	low STR_12
  1754  001908  0100               	movlb	0	; () banked
  1755  00190A  6F96               	movwf	printf@f& (0+255),b
  1756  00190C  0EFE               	movlw	high STR_12
  1757  00190E  0100               	movlb	0	; () banked
  1758  001910  6F97               	movwf	(printf@f+1)& (0+255),b
  1759  001912  C0A9  F098         	movff	runMenu@key,?_printf+2
  1760  001916  0100               	movlb	0	; () banked
  1761  001918  6B99               	clrf	(?_printf+3)& (0+255),b
  1762  00191A  EC09  F000         	call	_printf	;wreg free
  1763                           
  1764                           ;interface.c: 33: printf( "   stats <B   *>");
  1765  00191E  0EA4               	movlw	low STR_13
  1766  001920  0100               	movlb	0	; () banked
  1767  001922  6F96               	movwf	printf@f& (0+255),b
  1768  001924  0EFF               	movlw	high STR_13
  1769  001926  0100               	movlb	0	; () banked
  1770  001928  6F97               	movwf	(printf@f+1)& (0+255),b
  1771  00192A  EC09  F000         	call	_printf	;wreg free
  1772  00192E  0012               	return		;funcret
  1773  001930                     __end_of_runMenu:
  1774                           	opt stack 0
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           intcon	equ	0xFF2
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _readKeypad *****************
  1787 ;; Defined at:
  1788 ;;		line 35 in file "keypad.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  key             1    0[BANK0 ] unsigned char 
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      unsigned char 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;Total ram usage:        1 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    7
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		_showInterface
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           	psect	text6
  1817  001930                     __ptext6:
  1818                           	opt stack 0
  1819  001930                     _readKeypad:
  1820                           	opt stack 22
  1821  001930                     l191:
  1822  001930  A281               	btfss	3969,1,c	;volatile
  1823  001932  D7FE               	goto	l191
  1824                           
  1825                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  1826  001934  3881               	swapf	3969,w,c	;volatile
  1827  001936  0B0F               	andlw	15
  1828  001938  0B0F               	andlw	15
  1829  00193A  0100               	movlb	0	; () banked
  1830  00193C  6F80               	movwf	readKeypad@key& (0+255),b
  1831  00193E                     l194:
  1832  00193E  B281               	btfsc	3969,1,c	;volatile
  1833  001940  D7FE               	goto	l194
  1834                           
  1835                           ;keypad.c: 39: return keys[key];
  1836  001942  0100               	movlb	0	; () banked
  1837  001944  5180               	movf	readKeypad@key& (0+255),w,b
  1838  001946  0D01               	mullw	1
  1839  001948  0EDB               	movlw	low _keys
  1840  00194A  24F3               	addwf	prodl,w,c
  1841  00194C  6EF6               	movwf	tblptrl,c
  1842  00194E  0EFE               	movlw	high _keys
  1843  001950  20F4               	addwfc	prodh,w,c
  1844  001952  6EF7               	movwf	tblptrh,c
  1845  001954                     	if	0	;There are less than 3 active tblptr bytes
  1846  001954                     	endif
  1847  001954  0008               	tblrd		*
  1848  001956  50F5               	movf	tablat,w,c
  1849  001958  0012               	return	
  1850  00195A                     __end_of_readKeypad:
  1851                           	opt stack 0
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           prodh	equ	0xFF4
  1857                           prodl	equ	0xFF3
  1858                           intcon	equ	0xFF2
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           postdec1	equ	0xFE5
  1862                           fsr1l	equ	0xFE1
  1863                           status	equ	0xFD8
  1864                           
  1865 ;; *************** function _mainMenu *****************
  1866 ;; Defined at:
  1867 ;;		line 18 in file "interface.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:   12
  1888 ;; This function calls:
  1889 ;;		_lcdClear
  1890 ;;		_printf
  1891 ;; This function is called by:
  1892 ;;		_showInterface
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text7
  1897  001A1E                     __ptext7:
  1898                           	opt stack 0
  1899  001A1E                     _mainMenu:
  1900                           	opt stack 17
  1901                           
  1902                           ;interface.c: 19: lcdClear();
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;incstack = 0
  1906  001A1E  EC74  F00D         	call	_lcdClear	;wreg free
  1907                           
  1908                           ;interface.c: 20: printf("start   <B      \n");
  1909  001A22  0E06               	movlw	low STR_8
  1910  001A24  0100               	movlb	0	; () banked
  1911  001A26  6F96               	movwf	printf@f& (0+255),b
  1912  001A28  0EFF               	movlw	high STR_8
  1913  001A2A  0100               	movlb	0	; () banked
  1914  001A2C  6F97               	movwf	(printf@f+1)& (0+255),b
  1915  001A2E  EC09  F000         	call	_printf	;wreg free
  1916                           
  1917                           ;interface.c: 21: printf("history <C    *>");
  1918  001A32  0E93               	movlw	low STR_9
  1919  001A34  0100               	movlb	0	; () banked
  1920  001A36  6F96               	movwf	printf@f& (0+255),b
  1921  001A38  0EFF               	movlw	high STR_9
  1922  001A3A  0100               	movlb	0	; () banked
  1923  001A3C  6F97               	movwf	(printf@f+1)& (0+255),b
  1924  001A3E  EC09  F000         	call	_printf	;wreg free
  1925  001A42  0012               	return		;funcret
  1926  001A44                     __end_of_mainMenu:
  1927                           	opt stack 0
  1928                           tblptru	equ	0xFF8
  1929                           tblptrh	equ	0xFF7
  1930                           tblptrl	equ	0xFF6
  1931                           tablat	equ	0xFF5
  1932                           prodh	equ	0xFF4
  1933                           prodl	equ	0xFF3
  1934                           intcon	equ	0xFF2
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           postdec1	equ	0xFE5
  1938                           fsr1l	equ	0xFE1
  1939                           status	equ	0xFD8
  1940                           
  1941 ;; *************** function _dateTime *****************
  1942 ;; Defined at:
  1943 ;;		line 12 in file "interface.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;		None
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;		None
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;Total ram usage:        0 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:   12
  1964 ;; This function calls:
  1965 ;;		_lcdClear
  1966 ;;		_printf
  1967 ;; This function is called by:
  1968 ;;		_showInterface
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text8
  1973  001A44                     __ptext8:
  1974                           	opt stack 0
  1975  001A44                     _dateTime:
  1976                           	opt stack 17
  1977                           
  1978                           ;interface.c: 13: lcdClear();
  1979                           
  1980                           ;incstack = 0
  1981  001A44  EC74  F00D         	call	_lcdClear	;wreg free
  1982                           
  1983                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  1984  001A48  0E18               	movlw	low STR_6
  1985  001A4A  0100               	movlb	0	; () banked
  1986  001A4C  6F96               	movwf	printf@f& (0+255),b
  1987  001A4E  0EFF               	movlw	high STR_6
  1988  001A50  0100               	movlb	0	; () banked
  1989  001A52  6F97               	movwf	(printf@f+1)& (0+255),b
  1990  001A54  EC09  F000         	call	_printf	;wreg free
  1991                           
  1992                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  1993  001A58  0EC6               	movlw	low STR_7
  1994  001A5A  0100               	movlb	0	; () banked
  1995  001A5C  6F96               	movwf	printf@f& (0+255),b
  1996  001A5E  0EFF               	movlw	high STR_7
  1997  001A60  0100               	movlb	0	; () banked
  1998  001A62  6F97               	movwf	(printf@f+1)& (0+255),b
  1999  001A64  EC09  F000         	call	_printf	;wreg free
  2000  001A68  0012               	return		;funcret
  2001  001A6A                     __end_of_dateTime:
  2002                           	opt stack 0
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           prodh	equ	0xFF4
  2008                           prodl	equ	0xFF3
  2009                           intcon	equ	0xFF2
  2010                           postinc0	equ	0xFEE
  2011                           wreg	equ	0xFE8
  2012                           postdec1	equ	0xFE5
  2013                           fsr1l	equ	0xFE1
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function _printf *****************
  2017 ;; Defined at:
  2018 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  2021 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  2022 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  2023 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  2024 ;;		 -> STR_5(4), STR_4(9), STR_3(8), STR_2(9), 
  2025 ;;		 -> STR_1(9), 
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;  idx             1   30[BANK0 ] unsigned char 
  2028 ;;  val             4   35[BANK0 ] unsigned long 
  2029 ;;  tmpval          4    0        struct .
  2030 ;;  cp              3    0        PTR const unsigned char 
  2031 ;;  ap              2   33[BANK0 ] PTR void [1]
  2032 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2033 ;;  prec            2   31[BANK0 ] int 
  2034 ;;  len             2    0        unsigned int 
  2035 ;;  c               1   40[BANK0 ] char 
  2036 ;;  flag            1   39[BANK0 ] unsigned char 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  2   22[BANK0 ] int 
  2039 ;; Registers used:
  2040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2046 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2049 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;Total ram usage:       19 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:   11
  2053 ;; This function calls:
  2054 ;;		___lldiv
  2055 ;;		___llmod
  2056 ;;		_putch
  2057 ;; This function is called by:
  2058 ;;		_main
  2059 ;;		_dateTime
  2060 ;;		_mainMenu
  2061 ;;		_runSelect
  2062 ;;		_runMenu
  2063 ;;		_runTime
  2064 ;;		_runStats
  2065 ;;		_testFrequency
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text9
  2070  000012                     __ptext9:
  2071                           	opt stack 0
  2072  000012                     _printf:
  2073                           	opt stack 17
  2074                           
  2075                           ;doprnt.c: 466: va_list ap;
  2076                           ;doprnt.c: 499: signed char c;
  2077                           ;doprnt.c: 504: int prec;
  2078                           ;doprnt.c: 508: unsigned char flag;
  2079                           ;doprnt.c: 523: union {
  2080                           ;doprnt.c: 524: unsigned long vd;
  2081                           ;doprnt.c: 525: double integ;
  2082                           ;doprnt.c: 526: } tmpval;
  2083                           ;doprnt.c: 528: unsigned long val;
  2084                           ;doprnt.c: 529: unsigned len;
  2085                           ;doprnt.c: 530: const char * cp;
  2086                           ;doprnt.c: 533: *ap = __va_start();
  2087                           
  2088                           ;incstack = 0
  2089  000012  0E98               	movlw	low (?_printf+2)
  2090  000014  0100               	movlb	0	; () banked
  2091  000016  6FA1               	movwf	printf@ap& (0+255),b
  2092  000018  0E00               	movlw	high (?_printf+2)
  2093  00001A  0100               	movlb	0	; () banked
  2094  00001C  6FA2               	movwf	(printf@ap+1)& (0+255),b
  2095                           
  2096                           ;doprnt.c: 536: while(c = *f++) {
  2097  00001E  D19D               	goto	l2795
  2098  000020                     l2699:
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;doprnt.c: 538: if(c != '%')
  2102  000020  0E25               	movlw	37
  2103  000022  0100               	movlb	0	; () banked
  2104  000024  19A8               	xorwf	printf@c& (0+255),w,b
  2105  000026  B4D8               	btfsc	status,2,c
  2106  000028  D005               	goto	l2703
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;doprnt.c: 540: {
  2110                           ;doprnt.c: 541: (putch(c) );
  2111  00002A  0100               	movlb	0	; () banked
  2112  00002C  51A8               	movf	printf@c& (0+255),w,b
  2113  00002E  ECC2  F00C         	call	_putch
  2114                           
  2115                           ;doprnt.c: 542: continue;
  2116  000032  D193               	goto	l2795
  2117  000034                     l2703:
  2118                           
  2119                           ;doprnt.c: 543: }
  2120                           ;doprnt.c: 548: flag = 0;
  2121  000034  0E00               	movlw	0
  2122  000036  0100               	movlb	0	; () banked
  2123  000038  6FA7               	movwf	printf@flag& (0+255),b
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;doprnt.c: 635: switch(c = *f++) {
  2127                           
  2128                           ;doprnt.c: 633: loop:
  2129  00003A  D017               	goto	l2717
  2130  00003C                     l2705:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;doprnt.c: 643: flag |= 0x10;
  2134  00003C  0100               	movlb	0	; () banked
  2135  00003E  89A7               	bsf	printf@flag& (0+255),4,b
  2136                           
  2137                           ;doprnt.c: 644: goto loop;
  2138  000040  D014               	goto	l2717
  2139  000042                     l2707:
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;doprnt.c: 721: flag |= 0x80;
  2143  000042  0100               	movlb	0	; () banked
  2144  000044  8FA7               	bsf	printf@flag& (0+255),7,b
  2145                           
  2146                           ;doprnt.c: 723: break;
  2147  000046  D030               	goto	l565
  2148  000048                     l2709:
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2152  000048  C0A1  FFD9         	movff	printf@ap,fsr2l
  2153  00004C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2154  000050  50DF               	movf	indf2,w,c
  2155  000052  0100               	movlb	0	; () banked
  2156  000054  6FA8               	movwf	printf@c& (0+255),b
  2157                           
  2158                           ; BSR set to: 0
  2159  000056  0E02               	movlw	2
  2160  000058  0100               	movlb	0	; () banked
  2161  00005A  27A1               	addwf	printf@ap& (0+255),f,b
  2162  00005C  0E00               	movlw	0
  2163  00005E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2164  000060                     l2713:
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;doprnt.c: 809: (putch(c) );
  2168  000060  0100               	movlb	0	; () banked
  2169  000062  51A8               	movf	printf@c& (0+255),w,b
  2170  000064  ECC2  F00C         	call	_putch
  2171                           
  2172                           ;doprnt.c: 810: continue;
  2173  000068  D178               	goto	l2795
  2174  00006A                     l2717:
  2175  00006A  C096  FFF6         	movff	printf@f,tblptrl
  2176  00006E  C097  FFF7         	movff	printf@f+1,tblptrh
  2177  000072  0100               	movlb	0	; () banked
  2178  000074  4B96               	infsnz	printf@f& (0+255),f,b
  2179  000076  2B97               	incf	(printf@f+1)& (0+255),f,b
  2180  000078                     	if	0	;tblptru may be non-zero
  2181  000078                     	endif
  2182  000078                     	if	0	;tblptru may be non-zero
  2183  000078                     	endif
  2184  000078  0008               	tblrd		*
  2185  00007A  CFF5 F0A8          	movff	tablat,printf@c
  2186  00007E  0100               	movlb	0	; () banked
  2187  000080  51A8               	movf	printf@c& (0+255),w,b
  2188                           
  2189                           ; Switch size 1, requested type "space"
  2190                           ; Number of cases is 6, Range of values is 0 to 120
  2191                           ; switch strategies available:
  2192                           ; Name         Instructions Cycles
  2193                           ; simple_byte           19    10 (average)
  2194                           ;	Chosen strategy is simple_byte
  2195  000082  0A00               	xorlw	0	; case 0
  2196  000084  B4D8               	btfsc	status,2,c
  2197  000086  0012               	return	
  2198  000088  0A63               	xorlw	99	; case 99
  2199  00008A  B4D8               	btfsc	status,2,c
  2200  00008C  D7DD               	goto	l2709
  2201  00008E  0A07               	xorlw	7	; case 100
  2202  000090  B4D8               	btfsc	status,2,c
  2203  000092  D00A               	goto	l565
  2204  000094  0A0D               	xorlw	13	; case 105
  2205  000096  B4D8               	btfsc	status,2,c
  2206  000098  D007               	goto	l565
  2207  00009A  0A05               	xorlw	5	; case 108
  2208  00009C  B4D8               	btfsc	status,2,c
  2209  00009E  D7CE               	goto	l2705
  2210  0000A0  0A14               	xorlw	20	; case 120
  2211  0000A2  B4D8               	btfsc	status,2,c
  2212  0000A4  D7CE               	goto	l2707
  2213  0000A6  D7DC               	goto	l2713
  2214  0000A8                     l565:
  2215                           
  2216                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2217  0000A8  0100               	movlb	0	; () banked
  2218  0000AA  BFA7               	btfsc	printf@flag& (0+255),7,b
  2219  0000AC  D034               	goto	l569
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;doprnt.c: 1253: {
  2223                           ;doprnt.c: 1255: if(flag & 0x10)
  2224  0000AE  0100               	movlb	0	; () banked
  2225  0000B0  A9A7               	btfss	printf@flag& (0+255),4,b
  2226  0000B2  D00E               	goto	l2725
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2230  0000B4  C0A1  FFD9         	movff	printf@ap,fsr2l
  2231  0000B8  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2232  0000BC  CFDE F0A3          	movff	postinc2,printf@val
  2233  0000C0  CFDE F0A4          	movff	postinc2,printf@val+1
  2234  0000C4  CFDE F0A5          	movff	postinc2,printf@val+2
  2235  0000C8  CFDE F0A6          	movff	postinc2,printf@val+3
  2236                           
  2237                           ; BSR set to: 0
  2238  0000CC  0E04               	movlw	4
  2239  0000CE  D00F               	goto	L1
  2240  0000D0                     l2725:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;doprnt.c: 1257: else
  2244                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2245  0000D0  C0A1  FFD9         	movff	printf@ap,fsr2l
  2246  0000D4  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2247  0000D8  CFDE F0A3          	movff	postinc2,printf@val
  2248  0000DC  CFDD F0A4          	movff	postdec2,printf@val+1
  2249  0000E0  0100               	movlb	0	; () banked
  2250  0000E2  0E00               	movlw	0
  2251  0000E4  BFA4               	btfsc	(printf@val+1)& (0+255),7,b
  2252  0000E6  0EFF               	movlw	-1
  2253  0000E8  6FA5               	movwf	(printf@val+2)& (0+255),b
  2254  0000EA  6FA6               	movwf	(printf@val+3)& (0+255),b
  2255                           
  2256                           ; BSR set to: 0
  2257  0000EC  0E02               	movlw	2
  2258  0000EE                     L1:
  2259  0000EE  0100               	movlb	0	; () banked
  2260  0000F0  27A1               	addwf	printf@ap& (0+255),f,b
  2261  0000F2  0E00               	movlw	0
  2262  0000F4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;doprnt.c: 1261: if((long)val < 0) {
  2266                           
  2267                           ; BSR set to: 0
  2268  0000F6  0100               	movlb	0	; () banked
  2269  0000F8  AFA6               	btfss	(printf@val+3)& (0+255),7,b
  2270  0000FA  D07F               	goto	l2773
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;doprnt.c: 1262: flag |= 0x03;
  2274  0000FC  0E03               	movlw	3
  2275  0000FE  0100               	movlb	0	; () banked
  2276  000100  13A7               	iorwf	printf@flag& (0+255),f,b
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;doprnt.c: 1263: val = -val;
  2280  000102  0100               	movlb	0	; () banked
  2281  000104  1FA6               	comf	(printf@val+3)& (0+255),f,b
  2282  000106  1FA5               	comf	(printf@val+2)& (0+255),f,b
  2283  000108  1FA4               	comf	(printf@val+1)& (0+255),f,b
  2284  00010A  6DA3               	negf	printf@val& (0+255),b
  2285  00010C  0E00               	movlw	0
  2286  00010E  23A4               	addwfc	(printf@val+1)& (0+255),f,b
  2287  000110  23A5               	addwfc	(printf@val+2)& (0+255),f,b
  2288  000112  23A6               	addwfc	(printf@val+3)& (0+255),f,b
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;doprnt.c: 1264: }
  2292                           ;doprnt.c: 1266: }
  2293  000114  D072               	goto	l2773
  2294  000116                     l569:
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;doprnt.c: 1268: else
  2298                           ;doprnt.c: 1273: {
  2299                           ;doprnt.c: 1281: if(flag & 0x10)
  2300  000116  0100               	movlb	0	; () banked
  2301  000118  A9A7               	btfss	printf@flag& (0+255),4,b
  2302  00011A  D00E               	goto	l2739
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2306  00011C  C0A1  FFD9         	movff	printf@ap,fsr2l
  2307  000120  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2308  000124  CFDE F0A3          	movff	postinc2,printf@val
  2309  000128  CFDE F0A4          	movff	postinc2,printf@val+1
  2310  00012C  CFDE F0A5          	movff	postinc2,printf@val+2
  2311  000130  CFDE F0A6          	movff	postinc2,printf@val+3
  2312                           
  2313                           ; BSR set to: 0
  2314  000134  0E04               	movlw	4
  2315  000136  D010               	goto	L2
  2316  000138                     l2739:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 1283: else
  2320                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2321  000138  C0A1  FFD9         	movff	printf@ap,fsr2l
  2322  00013C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2323  000140  CFDE F09C          	movff	postinc2,??_printf
  2324  000144  CFDD F09D          	movff	postdec2,??_printf+1
  2325  000148  C09C  F0A3         	movff	??_printf,printf@val
  2326  00014C  C09D  F0A4         	movff	??_printf+1,printf@val+1
  2327  000150  0100               	movlb	0	; () banked
  2328  000152  6BA5               	clrf	(printf@val+2)& (0+255),b
  2329  000154  6BA6               	clrf	(printf@val+3)& (0+255),b
  2330                           
  2331                           ; BSR set to: 0
  2332  000156  0E02               	movlw	2
  2333  000158                     L2:
  2334  000158  0100               	movlb	0	; () banked
  2335  00015A  27A1               	addwf	printf@ap& (0+255),f,b
  2336  00015C  0E00               	movlw	0
  2337  00015E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;doprnt.c: 1287: }
  2341                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2342                           
  2343                           ; BSR set to: 0
  2344  000160  D04C               	goto	l2773
  2345  000162                     l2743:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2349  000162  0E01               	movlw	1
  2350  000164  0100               	movlb	0	; () banked
  2351  000166  6FA8               	movwf	printf@c& (0+255),b
  2352  000168                     l2745:
  2353                           
  2354                           ; BSR set to: 0
  2355  000168  0E0A               	movlw	10
  2356  00016A  0100               	movlb	0	; () banked
  2357  00016C  19A8               	xorwf	printf@c& (0+255),w,b
  2358  00016E  B4D8               	btfsc	status,2,c
  2359  000170  D04D               	goto	l2775
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;doprnt.c: 1306: if(val < dpowers[c])
  2363                           
  2364                           ; BSR set to: 0
  2365                           
  2366                           ; BSR set to: 0
  2367  000172  0100               	movlb	0	; () banked
  2368  000174  51A8               	movf	printf@c& (0+255),w,b
  2369  000176  0D04               	mullw	4
  2370  000178  0E93               	movlw	low _dpowers
  2371  00017A  24F3               	addwf	prodl,w,c
  2372  00017C  6EF6               	movwf	tblptrl,c
  2373  00017E  0EFE               	movlw	high _dpowers
  2374  000180  20F4               	addwfc	prodh,w,c
  2375  000182  6EF7               	movwf	tblptrh,c
  2376  000184                     	if	0	;There are less than 3 active tblptr bytes
  2377  000184                     	endif
  2378  000184  0009               	tblrd		*+
  2379  000186  50F5               	movf	tablat,w,c
  2380  000188  0100               	movlb	0	; () banked
  2381  00018A  5DA3               	subwf	printf@val& (0+255),w,b
  2382  00018C  0009               	tblrd		*+
  2383  00018E  50F5               	movf	tablat,w,c
  2384  000190  0100               	movlb	0	; () banked
  2385  000192  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  2386  000194  0009               	tblrd		*+
  2387  000196  50F5               	movf	tablat,w,c
  2388  000198  0100               	movlb	0	; () banked
  2389  00019A  59A5               	subwfb	(printf@val+2)& (0+255),w,b
  2390  00019C  0009               	tblrd		*+
  2391  00019E  50F5               	movf	tablat,w,c
  2392  0001A0  0100               	movlb	0	; () banked
  2393  0001A2  59A6               	subwfb	(printf@val+3)& (0+255),w,b
  2394  0001A4  A0D8               	btfss	status,0,c
  2395  0001A6  D032               	goto	l2775
  2396                           
  2397                           ; BSR set to: 0
  2398                           
  2399                           ; BSR set to: 0
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;doprnt.c: 1307: break;
  2403  0001A8  0100               	movlb	0	; () banked
  2404  0001AA  2BA8               	incf	printf@c& (0+255),f,b
  2405  0001AC  D7DD               	goto	l2745
  2406  0001AE                     l2757:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2410  0001AE  0E01               	movlw	1
  2411  0001B0  0100               	movlb	0	; () banked
  2412  0001B2  6FA8               	movwf	printf@c& (0+255),b
  2413  0001B4                     l2759:
  2414                           
  2415                           ; BSR set to: 0
  2416  0001B4  0E08               	movlw	8
  2417  0001B6  0100               	movlb	0	; () banked
  2418  0001B8  19A8               	xorwf	printf@c& (0+255),w,b
  2419  0001BA  B4D8               	btfsc	status,2,c
  2420  0001BC  D027               	goto	l2775
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2424                           
  2425                           ; BSR set to: 0
  2426                           
  2427                           ; BSR set to: 0
  2428  0001BE  0100               	movlb	0	; () banked
  2429  0001C0  51A8               	movf	printf@c& (0+255),w,b
  2430  0001C2  0D04               	mullw	4
  2431  0001C4  0EBB               	movlw	low _hexpowers
  2432  0001C6  24F3               	addwf	prodl,w,c
  2433  0001C8  6EF6               	movwf	tblptrl,c
  2434  0001CA  0EFE               	movlw	high _hexpowers
  2435  0001CC  20F4               	addwfc	prodh,w,c
  2436  0001CE  6EF7               	movwf	tblptrh,c
  2437  0001D0                     	if	0	;There are less than 3 active tblptr bytes
  2438  0001D0                     	endif
  2439  0001D0  0009               	tblrd		*+
  2440  0001D2  50F5               	movf	tablat,w,c
  2441  0001D4  0100               	movlb	0	; () banked
  2442  0001D6  5DA3               	subwf	printf@val& (0+255),w,b
  2443  0001D8  0009               	tblrd		*+
  2444  0001DA  50F5               	movf	tablat,w,c
  2445  0001DC  0100               	movlb	0	; () banked
  2446  0001DE  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  2447  0001E0  0009               	tblrd		*+
  2448  0001E2  50F5               	movf	tablat,w,c
  2449  0001E4  0100               	movlb	0	; () banked
  2450  0001E6  59A5               	subwfb	(printf@val+2)& (0+255),w,b
  2451  0001E8  0009               	tblrd		*+
  2452  0001EA  50F5               	movf	tablat,w,c
  2453  0001EC  0100               	movlb	0	; () banked
  2454  0001EE  59A6               	subwfb	(printf@val+3)& (0+255),w,b
  2455  0001F0  A0D8               	btfss	status,0,c
  2456  0001F2  D00C               	goto	l2775
  2457                           
  2458                           ; BSR set to: 0
  2459                           
  2460                           ; BSR set to: 0
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;doprnt.c: 1318: break;
  2464  0001F4  0100               	movlb	0	; () banked
  2465  0001F6  2BA8               	incf	printf@c& (0+255),f,b
  2466  0001F8  D7DD               	goto	l2759
  2467  0001FA                     l2773:
  2468                           
  2469                           ; BSR set to: 0
  2470  0001FA  0100               	movlb	0	; () banked
  2471  0001FC  51A7               	movf	printf@flag& (0+255),w,b
  2472  0001FE  0B80               	andlw	128
  2473                           
  2474                           ; Switch size 1, requested type "space"
  2475                           ; Number of cases is 2, Range of values is 0 to 128
  2476                           ; switch strategies available:
  2477                           ; Name         Instructions Cycles
  2478                           ; simple_byte            7     4 (average)
  2479                           ;	Chosen strategy is simple_byte
  2480  000200  0A00               	xorlw	0	; case 0
  2481  000202  B4D8               	btfsc	status,2,c
  2482  000204  D7AE               	goto	l2743
  2483  000206  0A80               	xorlw	128	; case 128
  2484  000208  B4D8               	btfsc	status,2,c
  2485  00020A  D7D1               	goto	l2757
  2486  00020C                     l2775:
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;doprnt.c: 1422: {
  2490                           ;doprnt.c: 1438: if(flag & 0x03)
  2491  00020C  C0A7  F09C         	movff	printf@flag,??_printf
  2492  000210  0E03               	movlw	3
  2493  000212  0100               	movlb	0	; () banked
  2494  000214  179C               	andwf	??_printf& (0+255),f,b
  2495  000216  B4D8               	btfsc	status,2,c
  2496  000218  D003               	goto	l2779
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;doprnt.c: 1439: (putch('-') );
  2500  00021A  0E2D               	movlw	45
  2501  00021C  ECC2  F00C         	call	_putch
  2502  000220                     l2779:
  2503                           
  2504                           ;doprnt.c: 1469: }
  2505                           ;doprnt.c: 1472: prec = c;
  2506  000220  0100               	movlb	0	; () banked
  2507  000222  51A8               	movf	printf@c& (0+255),w,b
  2508  000224  0100               	movlb	0	; () banked
  2509  000226  6F9F               	movwf	printf@prec& (0+255),b
  2510  000228  6BA0               	clrf	(printf@prec+1)& (0+255),b
  2511  00022A  BF9F               	btfsc	printf@prec& (0+255),7,b
  2512  00022C  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2513                           
  2514                           ;doprnt.c: 1474: while(prec--) {
  2515  00022E  D08A               	goto	l2793
  2516  000230                     l2781:
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2520  000230  C09F  F09C         	movff	printf@prec,??_printf
  2521  000234  C0A0  F09D         	movff	printf@prec+1,??_printf+1
  2522  000238  0100               	movlb	0	; () banked
  2523  00023A  90D8               	bcf	status,0,c
  2524  00023C  379C               	rlcf	??_printf& (0+255),f,b
  2525  00023E  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2526  000240  0100               	movlb	0	; () banked
  2527  000242  90D8               	bcf	status,0,c
  2528  000244  379C               	rlcf	??_printf& (0+255),f,b
  2529  000246  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2530  000248  0E93               	movlw	low _dpowers
  2531  00024A  0100               	movlb	0	; () banked
  2532  00024C  259C               	addwf	??_printf& (0+255),w,b
  2533  00024E  6EF6               	movwf	tblptrl,c
  2534  000250  0EFE               	movlw	high _dpowers
  2535  000252  219D               	addwfc	(??_printf+1)& (0+255),w,b
  2536  000254  6EF7               	movwf	tblptrh,c
  2537  000256                     	if	0	;There are less than 3 active tblptr bytes
  2538  000256                     	endif
  2539  000256  0009               	tblrd		*+
  2540  000258  CFF5 F084          	movff	tablat,___lldiv@divisor
  2541  00025C  0009               	tblrd		*+
  2542  00025E  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2543  000262  0009               	tblrd		*+
  2544  000264  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2545  000268  000A               	tblrd		*-
  2546  00026A  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2547  00026E  C0A3  F080         	movff	printf@val,___lldiv@dividend
  2548  000272  C0A4  F081         	movff	printf@val+1,___lldiv@dividend+1
  2549  000276  C0A5  F082         	movff	printf@val+2,___lldiv@dividend+2
  2550  00027A  C0A6  F083         	movff	printf@val+3,___lldiv@dividend+3
  2551  00027E  EC5C  F008         	call	___lldiv	;wreg free
  2552  000282  C080  F08D         	movff	?___lldiv,___llmod@dividend
  2553  000286  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  2554  00028A  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  2555  00028E  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  2556  000292  0E0A               	movlw	10
  2557  000294  0100               	movlb	0	; () banked
  2558  000296  6F91               	movwf	___llmod@divisor& (0+255),b
  2559  000298  0E00               	movlw	0
  2560  00029A  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  2561  00029C  0E00               	movlw	0
  2562  00029E  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  2563  0002A0  0E00               	movlw	0
  2564  0002A2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  2565  0002A4  EC14  F00A         	call	___llmod	;wreg free
  2566  0002A8  0100               	movlb	0	; () banked
  2567  0002AA  518D               	movf	?___llmod& (0+255),w,b
  2568  0002AC  0F30               	addlw	48
  2569  0002AE  0100               	movlb	0	; () banked
  2570  0002B0  6FA8               	movwf	printf@c& (0+255),b
  2571                           
  2572                           ;doprnt.c: 1491: break;
  2573  0002B2  D044               	goto	l2791
  2574  0002B4                     l2783:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;doprnt.c: 1499: {
  2578                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2579  0002B4  C0A3  F080         	movff	printf@val,___lldiv@dividend
  2580  0002B8  C0A4  F081         	movff	printf@val+1,___lldiv@dividend+1
  2581  0002BC  C0A5  F082         	movff	printf@val+2,___lldiv@dividend+2
  2582  0002C0  C0A6  F083         	movff	printf@val+3,___lldiv@dividend+3
  2583  0002C4  C09F  F09C         	movff	printf@prec,??_printf
  2584  0002C8  C0A0  F09D         	movff	printf@prec+1,??_printf+1
  2585  0002CC  0100               	movlb	0	; () banked
  2586  0002CE  90D8               	bcf	status,0,c
  2587  0002D0  379C               	rlcf	??_printf& (0+255),f,b
  2588  0002D2  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2589  0002D4  0100               	movlb	0	; () banked
  2590  0002D6  90D8               	bcf	status,0,c
  2591  0002D8  379C               	rlcf	??_printf& (0+255),f,b
  2592  0002DA  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2593  0002DC  0EBB               	movlw	low _hexpowers
  2594  0002DE  0100               	movlb	0	; () banked
  2595  0002E0  259C               	addwf	??_printf& (0+255),w,b
  2596  0002E2  6EF6               	movwf	tblptrl,c
  2597  0002E4  0EFE               	movlw	high _hexpowers
  2598  0002E6  219D               	addwfc	(??_printf+1)& (0+255),w,b
  2599  0002E8  6EF7               	movwf	tblptrh,c
  2600  0002EA                     	if	0	;There are less than 3 active tblptr bytes
  2601  0002EA                     	endif
  2602  0002EA  0009               	tblrd		*+
  2603  0002EC  CFF5 F084          	movff	tablat,___lldiv@divisor
  2604  0002F0  0009               	tblrd		*+
  2605  0002F2  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2606  0002F6  0009               	tblrd		*+
  2607  0002F8  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2608  0002FC  000A               	tblrd		*-
  2609  0002FE  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2610  000302  EC5C  F008         	call	___lldiv	;wreg free
  2611  000306  0100               	movlb	0	; () banked
  2612  000308  5180               	movf	?___lldiv& (0+255),w,b
  2613  00030A  0B0F               	andlw	15
  2614  00030C  0100               	movlb	0	; () banked
  2615  00030E  6F9E               	movwf	printf@idx& (0+255),b
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2619  000310  0100               	movlb	0	; () banked
  2620  000312  519E               	movf	printf@idx& (0+255),w,b
  2621  000314  0D01               	mullw	1
  2622  000316  0E60               	movlw	low STR_18
  2623  000318  24F3               	addwf	prodl,w,c
  2624  00031A  6EF6               	movwf	tblptrl,c
  2625  00031C  0EFF               	movlw	high STR_18
  2626  00031E  20F4               	addwfc	prodh,w,c
  2627  000320  6EF7               	movwf	tblptrh,c
  2628  000322                     	if	0	;There are less than 3 active tblptr bytes
  2629  000322                     	endif
  2630  000322  0008               	tblrd		*
  2631  000324  CFF5 F0A8          	movff	tablat,printf@c
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;doprnt.c: 1523: }
  2635                           
  2636                           ;doprnt.c: 1508: }
  2637                           ;doprnt.c: 1510: break;
  2638  000328  D009               	goto	l2791
  2639  00032A                     l2789:
  2640                           
  2641                           ; BSR set to: 0
  2642  00032A  0100               	movlb	0	; () banked
  2643  00032C  51A7               	movf	printf@flag& (0+255),w,b
  2644  00032E  0B80               	andlw	128
  2645                           
  2646                           ; Switch size 1, requested type "space"
  2647                           ; Number of cases is 2, Range of values is 0 to 128
  2648                           ; switch strategies available:
  2649                           ; Name         Instructions Cycles
  2650                           ; simple_byte            7     4 (average)
  2651                           ;	Chosen strategy is simple_byte
  2652  000330  0A00               	xorlw	0	; case 0
  2653  000332  B4D8               	btfsc	status,2,c
  2654  000334  D77D               	goto	l2781
  2655  000336  0A80               	xorlw	128	; case 128
  2656  000338  B4D8               	btfsc	status,2,c
  2657  00033A  D7BC               	goto	l2783
  2658  00033C                     l2791:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;doprnt.c: 1524: (putch(c) );
  2662  00033C  0100               	movlb	0	; () banked
  2663  00033E  51A8               	movf	printf@c& (0+255),w,b
  2664  000340  ECC2  F00C         	call	_putch
  2665  000344                     l2793:
  2666  000344  0100               	movlb	0	; () banked
  2667  000346  079F               	decf	printf@prec& (0+255),f,b
  2668  000348  A0D8               	btfss	status,0,c
  2669  00034A  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2670  00034C  0100               	movlb	0	; () banked
  2671  00034E  299F               	incf	printf@prec& (0+255),w,b
  2672  000350  E1EC               	bnz	l2789
  2673  000352  0100               	movlb	0	; () banked
  2674  000354  29A0               	incf	(printf@prec+1)& (0+255),w,b
  2675  000356  A4D8               	btfss	status,2,c
  2676  000358  D7E8               	goto	l2789
  2677  00035A                     l2795:
  2678  00035A  C096  FFF6         	movff	printf@f,tblptrl
  2679  00035E  C097  FFF7         	movff	printf@f+1,tblptrh
  2680  000362  0100               	movlb	0	; () banked
  2681  000364  4B96               	infsnz	printf@f& (0+255),f,b
  2682  000366  2B97               	incf	(printf@f+1)& (0+255),f,b
  2683  000368                     	if	0	;tblptru may be non-zero
  2684  000368                     	endif
  2685  000368                     	if	0	;tblptru may be non-zero
  2686  000368                     	endif
  2687  000368  0008               	tblrd		*
  2688  00036A  CFF5 F0A8          	movff	tablat,printf@c
  2689  00036E  0100               	movlb	0	; () banked
  2690  000370  51A8               	movf	printf@c& (0+255),w,b
  2691  000372  B4D8               	btfsc	status,2,c
  2692  000374  0012               	return	
  2693  000376  D654               	goto	l2699
  2694  000378                     __end_of_printf:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           tblptrh	equ	0xFF7
  2698                           tblptrl	equ	0xFF6
  2699                           tablat	equ	0xFF5
  2700                           prodh	equ	0xFF4
  2701                           prodl	equ	0xFF3
  2702                           intcon	equ	0xFF2
  2703                           postinc0	equ	0xFEE
  2704                           wreg	equ	0xFE8
  2705                           postdec1	equ	0xFE5
  2706                           fsr1l	equ	0xFE1
  2707                           indf2	equ	0xFDF
  2708                           postinc2	equ	0xFDE
  2709                           postdec2	equ	0xFDD
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _putch *****************
  2715 ;; Defined at:
  2716 ;;		line 35 in file "lcd.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  data            1    wreg     unsigned char 
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  data            1    4[BANK0 ] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      void 
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;Total ram usage:        1 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:   10
  2737 ;; This function calls:
  2738 ;;		_lcdNewline
  2739 ;;		_lcdNibble
  2740 ;; This function is called by:
  2741 ;;		_printf
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text10
  2746  001984                     __ptext10:
  2747                           	opt stack 0
  2748  001984                     _putch:
  2749                           	opt stack 17
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;incstack = 0
  2753                           ;putch@data stored from wreg
  2754  001984  0100               	movlb	0	; () banked
  2755  001986  6F84               	movwf	putch@data& (0+255),b
  2756                           
  2757                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  2758  001988  0E0A               	movlw	10
  2759  00198A  0100               	movlb	0	; () banked
  2760  00198C  1984               	xorwf	putch@data& (0+255),w,b
  2761  00198E  A4D8               	btfss	status,2,c
  2762  001990  D003               	goto	l157
  2763                           
  2764                           ; BSR set to: 0
  2765  001992  EC70  F00D         	call	_lcdNewline	;wreg free
  2766  001996  0012               	return	
  2767  001998                     l157:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;lcd.c: 37: else
  2771                           ;lcd.c: 38: {
  2772                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  2773  001998  848C               	bsf	3980,2,c	;volatile
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  2777  00199A  0E74               	movlw	116
  2778  00199C                     u3277:
  2779  00199C  2EE8               	decfsz	wreg,f,c
  2780  00199E  D7FE               	bra	u3277
  2781  0019A0  D000               	nop2	
  2782                           
  2783                           ;lcd.c: 41: lcdNibble(data);
  2784  0019A2  0100               	movlb	0	; () banked
  2785  0019A4  5184               	movf	putch@data& (0+255),w,b
  2786  0019A6  ECA2  F00A         	call	_lcdNibble
  2787  0019AA  0012               	return	
  2788  0019AC                     __end_of_putch:
  2789                           	opt stack 0
  2790                           tblptru	equ	0xFF8
  2791                           tblptrh	equ	0xFF7
  2792                           tblptrl	equ	0xFF6
  2793                           tablat	equ	0xFF5
  2794                           prodh	equ	0xFF4
  2795                           prodl	equ	0xFF3
  2796                           intcon	equ	0xFF2
  2797                           postinc0	equ	0xFEE
  2798                           wreg	equ	0xFE8
  2799                           postdec1	equ	0xFE5
  2800                           fsr1l	equ	0xFE1
  2801                           indf2	equ	0xFDF
  2802                           postinc2	equ	0xFDE
  2803                           postdec2	equ	0xFDD
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function _lcdNewline *****************
  2809 ;; Defined at:
  2810 ;;		line 78 in file "lcd.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;		None
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg, status,2, status,0, cstack
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;Total ram usage:        0 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:    9
  2831 ;; This function calls:
  2832 ;;		_lcdInst
  2833 ;; This function is called by:
  2834 ;;		_putch
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text11
  2839  001AE0                     __ptext11:
  2840                           	opt stack 0
  2841  001AE0                     _lcdNewline:
  2842                           	opt stack 17
  2843                           
  2844                           ;lcd.c: 79: lcdInst(0b11000000);
  2845                           
  2846                           ;incstack = 0
  2847  001AE0  0EC0               	movlw	192
  2848  001AE2  ECAD  F00C         	call	_lcdInst
  2849  001AE6  0012               	return		;funcret
  2850  001AE8                     __end_of_lcdNewline:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           intcon	equ	0xFF2
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           postdec1	equ	0xFE5
  2862                           fsr1l	equ	0xFE1
  2863                           indf2	equ	0xFDF
  2864                           postinc2	equ	0xFDE
  2865                           postdec2	equ	0xFDD
  2866                           fsr2h	equ	0xFDA
  2867                           fsr2l	equ	0xFD9
  2868                           status	equ	0xFD8
  2869                           
  2870 ;; *************** function ___llmod *****************
  2871 ;; Defined at:
  2872 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  dividend        4   13[BANK0 ] unsigned long 
  2875 ;;  divisor         4   17[BANK0 ] unsigned long 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  counter         1   21[BANK0 ] unsigned char 
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  4   13[BANK0 ] unsigned long 
  2880 ;; Registers used:
  2881 ;;		wreg, status,2, status,0
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2887 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;Total ram usage:        9 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    7
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_printf
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text12
  2902  001428                     __ptext12:
  2903                           	opt stack 0
  2904  001428                     ___llmod:
  2905                           	opt stack 20
  2906                           
  2907                           ;incstack = 0
  2908  001428  0100               	movlb	0	; () banked
  2909  00142A  5191               	movf	___llmod@divisor& (0+255),w,b
  2910  00142C  0100               	movlb	0	; () banked
  2911  00142E  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  2912  001430  0100               	movlb	0	; () banked
  2913  001432  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  2914  001434  0100               	movlb	0	; () banked
  2915  001436  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  2916  001438  B4D8               	btfsc	status,2,c
  2917  00143A  D03A               	goto	l955
  2918                           
  2919                           ; BSR set to: 0
  2920  00143C  0E01               	movlw	1
  2921  00143E  0100               	movlb	0	; () banked
  2922  001440  6F95               	movwf	___llmod@counter& (0+255),b
  2923  001442  D008               	goto	l2683
  2924  001444                     l2681:
  2925                           
  2926                           ; BSR set to: 0
  2927  001444  0100               	movlb	0	; () banked
  2928  001446  90D8               	bcf	status,0,c
  2929  001448  3791               	rlcf	___llmod@divisor& (0+255),f,b
  2930  00144A  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  2931  00144C  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  2932  00144E  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  2933  001450  0100               	movlb	0	; () banked
  2934  001452  2B95               	incf	___llmod@counter& (0+255),f,b
  2935  001454                     l2683:
  2936                           
  2937                           ; BSR set to: 0
  2938  001454  0100               	movlb	0	; () banked
  2939  001456  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  2940  001458  D7F5               	goto	l2681
  2941  00145A                     l2685:
  2942                           
  2943                           ; BSR set to: 0
  2944  00145A  0100               	movlb	0	; () banked
  2945  00145C  5191               	movf	___llmod@divisor& (0+255),w,b
  2946  00145E  0100               	movlb	0	; () banked
  2947  001460  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  2948  001462  0100               	movlb	0	; () banked
  2949  001464  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  2950  001466  0100               	movlb	0	; () banked
  2951  001468  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  2952  00146A  0100               	movlb	0	; () banked
  2953  00146C  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  2954  00146E  0100               	movlb	0	; () banked
  2955  001470  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2956  001472  0100               	movlb	0	; () banked
  2957  001474  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  2958  001476  0100               	movlb	0	; () banked
  2959  001478  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2960  00147A  A0D8               	btfss	status,0,c
  2961  00147C  D010               	goto	l2689
  2962                           
  2963                           ; BSR set to: 0
  2964  00147E  0100               	movlb	0	; () banked
  2965  001480  5191               	movf	___llmod@divisor& (0+255),w,b
  2966  001482  0100               	movlb	0	; () banked
  2967  001484  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  2968  001486  0100               	movlb	0	; () banked
  2969  001488  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  2970  00148A  0100               	movlb	0	; () banked
  2971  00148C  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2972  00148E  0100               	movlb	0	; () banked
  2973  001490  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  2974  001492  0100               	movlb	0	; () banked
  2975  001494  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2976  001496  0100               	movlb	0	; () banked
  2977  001498  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  2978  00149A  0100               	movlb	0	; () banked
  2979  00149C  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2980  00149E                     l2689:
  2981                           
  2982                           ; BSR set to: 0
  2983  00149E  0100               	movlb	0	; () banked
  2984  0014A0  90D8               	bcf	status,0,c
  2985  0014A2  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  2986  0014A4  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  2987  0014A6  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  2988  0014A8  3391               	rrcf	___llmod@divisor& (0+255),f,b
  2989                           
  2990                           ; BSR set to: 0
  2991  0014AA  0100               	movlb	0	; () banked
  2992  0014AC  2F95               	decfsz	___llmod@counter& (0+255),f,b
  2993  0014AE  D7D5               	goto	l2685
  2994  0014B0                     l955:
  2995                           
  2996                           ; BSR set to: 0
  2997  0014B0  C08D  F08D         	movff	___llmod@dividend,?___llmod
  2998  0014B4  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  2999  0014B8  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  3000  0014BC  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  3001                           
  3002                           ; BSR set to: 0
  3003  0014C0  0012               	return		;funcret
  3004  0014C2                     __end_of___llmod:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           prodh	equ	0xFF4
  3011                           prodl	equ	0xFF3
  3012                           intcon	equ	0xFF2
  3013                           postinc0	equ	0xFEE
  3014                           wreg	equ	0xFE8
  3015                           postdec1	equ	0xFE5
  3016                           fsr1l	equ	0xFE1
  3017                           indf2	equ	0xFDF
  3018                           postinc2	equ	0xFDE
  3019                           postdec2	equ	0xFDD
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _lcdClear *****************
  3025 ;; Defined at:
  3026 ;;		line 74 in file "lcd.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;Total ram usage:        0 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    9
  3047 ;; This function calls:
  3048 ;;		_lcdInst
  3049 ;; This function is called by:
  3050 ;;		_main
  3051 ;;		_dateTime
  3052 ;;		_mainMenu
  3053 ;;		_runSelect
  3054 ;;		_runMenu
  3055 ;;		_runTime
  3056 ;;		_runStats
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text13
  3061  001AE8                     __ptext13:
  3062                           	opt stack 0
  3063  001AE8                     _lcdClear:
  3064                           	opt stack 19
  3065                           
  3066                           ;lcd.c: 75: lcdInst(0b00000001);
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;incstack = 0
  3070  001AE8  0E01               	movlw	1
  3071  001AEA  ECAD  F00C         	call	_lcdInst
  3072  001AEE  0012               	return		;funcret
  3073  001AF0                     __end_of_lcdClear:
  3074                           	opt stack 0
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           intcon	equ	0xFF2
  3082                           postinc0	equ	0xFEE
  3083                           wreg	equ	0xFE8
  3084                           postdec1	equ	0xFE5
  3085                           fsr1l	equ	0xFE1
  3086                           indf2	equ	0xFDF
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _pinSetup *****************
  3094 ;; Defined at:
  3095 ;;		line 55 in file "main.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;		None
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;		None
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  1    wreg      void 
  3102 ;; Registers used:
  3103 ;;		wreg, status,2, status,0
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;Total ram usage:        0 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:    7
  3116 ;; This function calls:
  3117 ;;		Nothing
  3118 ;; This function is called by:
  3119 ;;		_main
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text14
  3124  001888                     __ptext14:
  3125                           	opt stack 0
  3126  001888                     _pinSetup:
  3127                           	opt stack 23
  3128                           
  3129                           ;main.c: 61: TRISA = 0xFF;
  3130                           
  3131                           ;incstack = 0
  3132  001888  6892               	setf	3986,c	;volatile
  3133                           
  3134                           ;main.c: 62: TRISB = 0xFF;
  3135  00188A  6893               	setf	3987,c	;volatile
  3136                           
  3137                           ;main.c: 63: TRISC = 0x00;
  3138  00188C  0E00               	movlw	0
  3139  00188E  6E94               	movwf	3988,c	;volatile
  3140                           
  3141                           ;main.c: 64: TRISD = 0x00;
  3142  001890  0E00               	movlw	0
  3143  001892  6E95               	movwf	3989,c	;volatile
  3144                           
  3145                           ;main.c: 65: TRISE = 0x00;
  3146  001894  0E00               	movlw	0
  3147  001896  6E96               	movwf	3990,c	;volatile
  3148                           
  3149                           ;main.c: 67: LATA = 0x00;
  3150  001898  0E00               	movlw	0
  3151  00189A  6E89               	movwf	3977,c	;volatile
  3152                           
  3153                           ;main.c: 68: LATB = 0x00;
  3154  00189C  0E00               	movlw	0
  3155  00189E  6E8A               	movwf	3978,c	;volatile
  3156                           
  3157                           ;main.c: 69: LATC = 0x00;
  3158  0018A0  0E00               	movlw	0
  3159  0018A2  6E8B               	movwf	3979,c	;volatile
  3160                           
  3161                           ;main.c: 70: LATD = 0x00;
  3162  0018A4  0E00               	movlw	0
  3163  0018A6  6E8C               	movwf	3980,c	;volatile
  3164                           
  3165                           ;main.c: 71: LATE = 0x00;
  3166  0018A8  0E00               	movlw	0
  3167  0018AA  6E8D               	movwf	3981,c	;volatile
  3168                           
  3169                           ;main.c: 73: ADCON0 = 0x00;
  3170  0018AC  0E00               	movlw	0
  3171  0018AE  6EC2               	movwf	4034,c	;volatile
  3172                           
  3173                           ;main.c: 74: ADCON1 |= 0x0A;
  3174  0018B0  0E0A               	movlw	10
  3175  0018B2  12C1               	iorwf	4033,f,c	;volatile
  3176                           
  3177                           ;main.c: 78: ADCON2 = 0;
  3178  0018B4  0E00               	movlw	0
  3179  0018B6  6EC0               	movwf	4032,c	;volatile
  3180                           
  3181                           ;main.c: 79: ADCON2 |= 0b010;
  3182  0018B8  82C0               	bsf	4032,1,c	;volatile
  3183                           
  3184                           ;main.c: 80: ADCON2 |= 0b110<<3;
  3185  0018BA  0E30               	movlw	48
  3186  0018BC  12C0               	iorwf	4032,f,c	;volatile
  3187                           
  3188                           ;main.c: 81: ADCON2 |= 1<<7;
  3189  0018BE  8EC0               	bsf	4032,7,c	;volatile
  3190                           
  3191                           ;main.c: 84: INT1IE = 1;
  3192  0018C0  86F0               	bsf	intcon3,3,c	;volatile
  3193                           
  3194                           ;main.c: 85: (INTCONbits.GIE = 1);
  3195  0018C2  8EF2               	bsf	intcon,7,c	;volatile
  3196  0018C4  0012               	return		;funcret
  3197  0018C6                     __end_of_pinSetup:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           prodh	equ	0xFF4
  3204                           prodl	equ	0xFF3
  3205                           intcon	equ	0xFF2
  3206                           intcon3	equ	0xFF0
  3207                           postinc0	equ	0xFEE
  3208                           wreg	equ	0xFE8
  3209                           postdec1	equ	0xFE5
  3210                           fsr1l	equ	0xFE1
  3211                           indf2	equ	0xFDF
  3212                           postinc2	equ	0xFDE
  3213                           postdec2	equ	0xFDD
  3214                           fsr2h	equ	0xFDA
  3215                           fsr2l	equ	0xFD9
  3216                           status	equ	0xFD8
  3217                           
  3218 ;; *************** function _initRTC *****************
  3219 ;; Defined at:
  3220 ;;		line 19 in file "RTC.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;		None
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;Total ram usage:        0 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    9
  3241 ;; This function calls:
  3242 ;;		_I2C_Master_Init
  3243 ;; This function is called by:
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text15
  3249  001AAE                     __ptext15:
  3250                           	opt stack 0
  3251  001AAE                     _initRTC:
  3252                           	opt stack 21
  3253                           
  3254                           ;RTC.c: 20: I2C_Master_Init(10000);
  3255                           
  3256                           ;incstack = 0
  3257  001AAE  0E10               	movlw	16
  3258  001AB0  0100               	movlb	0	; () banked
  3259  001AB2  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3260  001AB4  0E27               	movlw	39
  3261  001AB6  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3262  001AB8  0E00               	movlw	0
  3263  001ABA  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3264  001ABC  0E00               	movlw	0
  3265  001ABE  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3266  001AC0  EC80  F00B         	call	_I2C_Master_Init	;wreg free
  3267  001AC4  0012               	return		;funcret
  3268  001AC6                     __end_of_initRTC:
  3269                           	opt stack 0
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           intcon	equ	0xFF2
  3277                           intcon3	equ	0xFF0
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           postdec1	equ	0xFE5
  3281                           fsr1l	equ	0xFE1
  3282                           indf2	equ	0xFDF
  3283                           postinc2	equ	0xFDE
  3284                           postdec2	equ	0xFDD
  3285                           fsr2h	equ	0xFDA
  3286                           fsr2l	equ	0xFD9
  3287                           status	equ	0xFD8
  3288                           
  3289 ;; *************** function _I2C_Master_Init *****************
  3290 ;; Defined at:
  3291 ;;		line 13 in file "I2C.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;  c               4   13[BANK0 ] const unsigned long 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      void 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3305 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;Total ram usage:        8 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    8
  3312 ;; This function calls:
  3313 ;;		___lldiv
  3314 ;; This function is called by:
  3315 ;;		_initRTC
  3316 ;;		_testFrequency
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text16
  3321  001700                     __ptext16:
  3322                           	opt stack 0
  3323  001700                     _I2C_Master_Init:
  3324                           	opt stack 21
  3325                           
  3326                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3327                           
  3328                           ;incstack = 0
  3329  001700  0E00               	movlw	0
  3330  001702  6EC7               	movwf	4039,c	;volatile
  3331                           
  3332                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3333  001704  0E28               	movlw	40
  3334  001706  6EC6               	movwf	4038,c	;volatile
  3335                           
  3336                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3337  001708  0E00               	movlw	0
  3338  00170A  6EC5               	movwf	4037,c	;volatile
  3339                           
  3340                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3341  00170C  0E80               	movlw	128
  3342  00170E  0100               	movlb	0	; () banked
  3343  001710  6F80               	movwf	___lldiv@dividend& (0+255),b
  3344  001712  0E96               	movlw	150
  3345  001714  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3346  001716  0E98               	movlw	152
  3347  001718  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3348  00171A  0E00               	movlw	0
  3349  00171C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3350  00171E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3351  001722  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3352  001726  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3353  00172A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3354  00172E  0E02               	movlw	2
  3355  001730                     u2595:
  3356  001730  90D8               	bcf	status,0,c
  3357  001732  0100               	movlb	0	; () banked
  3358  001734  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3359  001736  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3360  001738  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3361  00173A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3362  00173C  2EE8               	decfsz	wreg,f,c
  3363  00173E  D7F8               	goto	u2595
  3364  001740  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3365  001744  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3366  001748  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3367  00174C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3368  001750  EC5C  F008         	call	___lldiv	;wreg free
  3369  001754  0100               	movlb	0	; () banked
  3370  001756  0580               	decf	?___lldiv& (0+255),w,b
  3371  001758  6EC8               	movwf	4040,c	;volatile
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;I2C.c: 20: TRISC3 = 1;
  3375  00175A  8694               	bsf	3988,3,c	;volatile
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;I2C.c: 21: TRISC4 = 1;
  3379  00175C  8894               	bsf	3988,4,c	;volatile
  3380                           
  3381                           ; BSR set to: 0
  3382  00175E  0012               	return		;funcret
  3383  001760                     __end_of_I2C_Master_Init:
  3384                           	opt stack 0
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           prodh	equ	0xFF4
  3390                           prodl	equ	0xFF3
  3391                           intcon	equ	0xFF2
  3392                           intcon3	equ	0xFF0
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postdec1	equ	0xFE5
  3396                           fsr1l	equ	0xFE1
  3397                           indf2	equ	0xFDF
  3398                           postinc2	equ	0xFDE
  3399                           postdec2	equ	0xFDD
  3400                           fsr2h	equ	0xFDA
  3401                           fsr2l	equ	0xFD9
  3402                           status	equ	0xFD8
  3403                           
  3404 ;; *************** function ___lldiv *****************
  3405 ;; Defined at:
  3406 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  dividend        4    0[BANK0 ] unsigned long 
  3409 ;;  divisor         4    4[BANK0 ] unsigned long 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  quotient        4    8[BANK0 ] unsigned long 
  3412 ;;  counter         1   12[BANK0 ] unsigned char 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  4    0[BANK0 ] unsigned long 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3422 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;Total ram usage:       13 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    7
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_I2C_Master_Init
  3433 ;;		_printf
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text17
  3438  0010B8                     __ptext17:
  3439                           	opt stack 0
  3440  0010B8                     ___lldiv:
  3441                           	opt stack 20
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;incstack = 0
  3445  0010B8  0E00               	movlw	0
  3446  0010BA  0100               	movlb	0	; () banked
  3447  0010BC  6F88               	movwf	___lldiv@quotient& (0+255),b
  3448  0010BE  0E00               	movlw	0
  3449  0010C0  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3450  0010C2  0E00               	movlw	0
  3451  0010C4  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3452  0010C6  0E00               	movlw	0
  3453  0010C8  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456  0010CA  0100               	movlb	0	; () banked
  3457  0010CC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3458  0010CE  0100               	movlb	0	; () banked
  3459  0010D0  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3460  0010D2  0100               	movlb	0	; () banked
  3461  0010D4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3462  0010D6  0100               	movlb	0	; () banked
  3463  0010D8  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3464  0010DA  B4D8               	btfsc	status,2,c
  3465  0010DC  D042               	goto	l945
  3466                           
  3467                           ; BSR set to: 0
  3468  0010DE  0E01               	movlw	1
  3469  0010E0  0100               	movlb	0	; () banked
  3470  0010E2  6F8C               	movwf	___lldiv@counter& (0+255),b
  3471  0010E4  D008               	goto	l2663
  3472  0010E6                     l2661:
  3473                           
  3474                           ; BSR set to: 0
  3475  0010E6  0100               	movlb	0	; () banked
  3476  0010E8  90D8               	bcf	status,0,c
  3477  0010EA  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3478  0010EC  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3479  0010EE  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3480  0010F0  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3481  0010F2  0100               	movlb	0	; () banked
  3482  0010F4  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3483  0010F6                     l2663:
  3484                           
  3485                           ; BSR set to: 0
  3486  0010F6  0100               	movlb	0	; () banked
  3487  0010F8  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3488  0010FA  D7F5               	goto	l2661
  3489  0010FC                     l2665:
  3490                           
  3491                           ; BSR set to: 0
  3492  0010FC  0100               	movlb	0	; () banked
  3493  0010FE  90D8               	bcf	status,0,c
  3494  001100  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3495  001102  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3496  001104  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3497  001106  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3498                           
  3499                           ; BSR set to: 0
  3500  001108  0100               	movlb	0	; () banked
  3501  00110A  5184               	movf	___lldiv@divisor& (0+255),w,b
  3502  00110C  0100               	movlb	0	; () banked
  3503  00110E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3504  001110  0100               	movlb	0	; () banked
  3505  001112  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3506  001114  0100               	movlb	0	; () banked
  3507  001116  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3508  001118  0100               	movlb	0	; () banked
  3509  00111A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3510  00111C  0100               	movlb	0	; () banked
  3511  00111E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3512  001120  0100               	movlb	0	; () banked
  3513  001122  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3514  001124  0100               	movlb	0	; () banked
  3515  001126  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3516  001128  A0D8               	btfss	status,0,c
  3517  00112A  D012               	goto	l2673
  3518                           
  3519                           ; BSR set to: 0
  3520  00112C  0100               	movlb	0	; () banked
  3521  00112E  5184               	movf	___lldiv@divisor& (0+255),w,b
  3522  001130  0100               	movlb	0	; () banked
  3523  001132  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3524  001134  0100               	movlb	0	; () banked
  3525  001136  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3526  001138  0100               	movlb	0	; () banked
  3527  00113A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3528  00113C  0100               	movlb	0	; () banked
  3529  00113E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3530  001140  0100               	movlb	0	; () banked
  3531  001142  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3532  001144  0100               	movlb	0	; () banked
  3533  001146  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3534  001148  0100               	movlb	0	; () banked
  3535  00114A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3536                           
  3537                           ; BSR set to: 0
  3538  00114C  0100               	movlb	0	; () banked
  3539  00114E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3540  001150                     l2673:
  3541                           
  3542                           ; BSR set to: 0
  3543  001150  0100               	movlb	0	; () banked
  3544  001152  90D8               	bcf	status,0,c
  3545  001154  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3546  001156  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3547  001158  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3548  00115A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3549                           
  3550                           ; BSR set to: 0
  3551  00115C  0100               	movlb	0	; () banked
  3552  00115E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3553  001160  D7CD               	goto	l2665
  3554  001162                     l945:
  3555                           
  3556                           ; BSR set to: 0
  3557  001162  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3558  001166  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3559  00116A  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3560  00116E  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3561                           
  3562                           ; BSR set to: 0
  3563  001172  0012               	return		;funcret
  3564  001174                     __end_of___lldiv:
  3565                           	opt stack 0
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           intcon	equ	0xFF2
  3573                           intcon3	equ	0xFF0
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1l	equ	0xFE1
  3578                           indf2	equ	0xFDF
  3579                           postinc2	equ	0xFDE
  3580                           postdec2	equ	0xFDD
  3581                           fsr2h	equ	0xFDA
  3582                           fsr2l	equ	0xFD9
  3583                           status	equ	0xFD8
  3584                           
  3585 ;; *************** function _initLCD *****************
  3586 ;; Defined at:
  3587 ;;		line 15 in file "lcd.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3605 ;;Total ram usage:        1 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    9
  3608 ;; This function calls:
  3609 ;;		_lcdInst
  3610 ;; This function is called by:
  3611 ;;		_main
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text18
  3616  0017F8                     __ptext18:
  3617                           	opt stack 0
  3618  0017F8                     _initLCD:
  3619                           	opt stack 21
  3620                           
  3621                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;incstack = 0
  3625  0017F8  0E31               	movlw	49
  3626  0017FA  0100               	movlb	0	; () banked
  3627  0017FC  6F84               	movwf	??_initLCD& (0+255),b
  3628  0017FE  0EB2               	movlw	178
  3629  001800                     u3287:
  3630  001800  2EE8               	decfsz	wreg,f,c
  3631  001802  D7FE               	bra	u3287
  3632  001804  2F84               	decfsz	??_initLCD& (0+255),f,b
  3633  001806  D7FC               	bra	u3287
  3634  001808  F000               	nop	
  3635                           
  3636                           ;lcd.c: 18: lcdInst(0b00110011);
  3637  00180A  0E33               	movlw	51
  3638  00180C  ECAD  F00C         	call	_lcdInst
  3639                           
  3640                           ;lcd.c: 19: lcdInst(0b00110010);
  3641  001810  0E32               	movlw	50
  3642  001812  ECAD  F00C         	call	_lcdInst
  3643                           
  3644                           ;lcd.c: 20: lcdInst(0b00101000);
  3645  001816  0E28               	movlw	40
  3646  001818  ECAD  F00C         	call	_lcdInst
  3647                           
  3648                           ;lcd.c: 21: lcdInst(0b00001111);
  3649  00181C  0E0F               	movlw	15
  3650  00181E  ECAD  F00C         	call	_lcdInst
  3651                           
  3652                           ;lcd.c: 22: lcdInst(0b00000110);
  3653  001822  0E06               	movlw	6
  3654  001824  ECAD  F00C         	call	_lcdInst
  3655                           
  3656                           ;lcd.c: 23: lcdInst(0b00000001);
  3657  001828  0E01               	movlw	1
  3658  00182A  ECAD  F00C         	call	_lcdInst
  3659                           
  3660                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  3661  00182E  0E31               	movlw	49
  3662  001830  0100               	movlb	0	; () banked
  3663  001832  6F84               	movwf	??_initLCD& (0+255),b
  3664  001834  0EB2               	movlw	178
  3665  001836                     u3297:
  3666  001836  2EE8               	decfsz	wreg,f,c
  3667  001838  D7FE               	bra	u3297
  3668  00183A  2F84               	decfsz	??_initLCD& (0+255),f,b
  3669  00183C  D7FC               	bra	u3297
  3670  00183E  F000               	nop	
  3671  001840  0012               	return		;funcret
  3672  001842                     __end_of_initLCD:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           intcon	equ	0xFF2
  3681                           intcon3	equ	0xFF0
  3682                           postinc0	equ	0xFEE
  3683                           wreg	equ	0xFE8
  3684                           postdec1	equ	0xFE5
  3685                           fsr1l	equ	0xFE1
  3686                           indf2	equ	0xFDF
  3687                           postinc2	equ	0xFDE
  3688                           postdec2	equ	0xFDD
  3689                           fsr2h	equ	0xFDA
  3690                           fsr2l	equ	0xFD9
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _lcdInst *****************
  3694 ;; Defined at:
  3695 ;;		line 27 in file "lcd.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  data            1    wreg     unsigned char 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  data            1    3[BANK0 ] unsigned char 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, status,2, status,0, cstack
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;Total ram usage:        2 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    8
  3716 ;; This function calls:
  3717 ;;		_lcdNibble
  3718 ;; This function is called by:
  3719 ;;		_initLCD
  3720 ;;		_lcdClear
  3721 ;;		_lcdNewline
  3722 ;;		_lcdHome
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text19
  3727  00195A                     __ptext19:
  3728                           	opt stack 0
  3729  00195A                     _lcdInst:
  3730                           	opt stack 17
  3731                           
  3732                           ;incstack = 0
  3733                           ;lcdInst@data stored from wreg
  3734  00195A  0100               	movlb	0	; () banked
  3735  00195C  6F83               	movwf	lcdInst@data& (0+255),b
  3736                           
  3737                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  3738  00195E  948C               	bcf	3980,2,c	;volatile
  3739                           
  3740                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3741  001960  0E74               	movlw	116
  3742  001962                     u3307:
  3743  001962  2EE8               	decfsz	wreg,f,c
  3744  001964  D7FE               	bra	u3307
  3745  001966  D000               	nop2	
  3746                           
  3747                           ;lcd.c: 30: lcdNibble(data);
  3748  001968  0100               	movlb	0	; () banked
  3749  00196A  5183               	movf	lcdInst@data& (0+255),w,b
  3750  00196C  ECA2  F00A         	call	_lcdNibble
  3751                           
  3752                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  3753  001970  0E04               	movlw	4
  3754  001972  0100               	movlb	0	; () banked
  3755  001974  6F82               	movwf	??_lcdInst& (0+255),b
  3756  001976  0E3D               	movlw	61
  3757  001978                     u3317:
  3758  001978  2EE8               	decfsz	wreg,f,c
  3759  00197A  D7FE               	bra	u3317
  3760  00197C  2F82               	decfsz	??_lcdInst& (0+255),f,b
  3761  00197E  D7FC               	bra	u3317
  3762  001980  D000               	nop2	
  3763  001982  0012               	return		;funcret
  3764  001984                     __end_of_lcdInst:
  3765                           	opt stack 0
  3766                           tblptru	equ	0xFF8
  3767                           tblptrh	equ	0xFF7
  3768                           tblptrl	equ	0xFF6
  3769                           tablat	equ	0xFF5
  3770                           prodh	equ	0xFF4
  3771                           prodl	equ	0xFF3
  3772                           intcon	equ	0xFF2
  3773                           intcon3	equ	0xFF0
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           postdec1	equ	0xFE5
  3777                           fsr1l	equ	0xFE1
  3778                           indf2	equ	0xFDF
  3779                           postinc2	equ	0xFDE
  3780                           postdec2	equ	0xFDD
  3781                           fsr2h	equ	0xFDA
  3782                           fsr2l	equ	0xFD9
  3783                           status	equ	0xFD8
  3784                           
  3785 ;; *************** function _lcdNibble *****************
  3786 ;; Defined at:
  3787 ;;		line 46 in file "lcd.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  data            1    wreg     unsigned char 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  data            1    1[BANK0 ] unsigned char 
  3792 ;;  temp            1    0[BANK0 ] unsigned char 
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  1    wreg      void 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2, status,0
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;Total ram usage:        2 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; Hardware stack levels required when called:    7
  3809 ;; This function calls:
  3810 ;;		Nothing
  3811 ;; This function is called by:
  3812 ;;		_lcdInst
  3813 ;;		_putch
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text20
  3818  001544                     __ptext20:
  3819                           	opt stack 0
  3820  001544                     _lcdNibble:
  3821                           	opt stack 19
  3822                           
  3823                           ;incstack = 0
  3824                           ;lcdNibble@data stored from wreg
  3825  001544  0100               	movlb	0	; () banked
  3826  001546  6F81               	movwf	lcdNibble@data& (0+255),b
  3827                           
  3828                           ;lcd.c: 48: char temp = data & 0xF0;
  3829  001548  0100               	movlb	0	; () banked
  3830  00154A  5181               	movf	lcdNibble@data& (0+255),w,b
  3831  00154C  0BF0               	andlw	240
  3832  00154E  0100               	movlb	0	; () banked
  3833  001550  6F80               	movwf	lcdNibble@temp& (0+255),b
  3834                           
  3835                           ;lcd.c: 49: LATD = LATD & 0x0F;
  3836  001552  508C               	movf	3980,w,c	;volatile
  3837  001554  0B0F               	andlw	15
  3838  001556  6E8C               	movwf	3980,c	;volatile
  3839                           
  3840                           ;lcd.c: 50: LATD = temp | LATD;
  3841  001558  0100               	movlb	0	; () banked
  3842  00155A  5180               	movf	lcdNibble@temp& (0+255),w,b
  3843  00155C  108C               	iorwf	3980,w,c	;volatile
  3844  00155E  6E8C               	movwf	3980,c	;volatile
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  3848  001560  968C               	bcf	3980,3,c	;volatile
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3852  001562  0ED6               	movlw	214
  3853  001564                     u3327:
  3854  001564  D000               	nop2	
  3855  001566  D000               	nop2	
  3856  001568  2EE8               	decfsz	wreg,f,c
  3857  00156A  D7FC               	bra	u3327
  3858  00156C  D000               	nop2	
  3859                           
  3860                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  3861  00156E  868C               	bsf	3980,3,c	;volatile
  3862                           
  3863                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3864  001570  0ED6               	movlw	214
  3865  001572                     u3337:
  3866  001572  D000               	nop2	
  3867  001574  D000               	nop2	
  3868  001576  2EE8               	decfsz	wreg,f,c
  3869  001578  D7FC               	bra	u3337
  3870  00157A  D000               	nop2	
  3871                           
  3872                           ;lcd.c: 58: data = data << 4;
  3873  00157C  0100               	movlb	0	; () banked
  3874  00157E  3981               	swapf	lcdNibble@data& (0+255),w,b
  3875  001580  0BF0               	andlw	240
  3876  001582  0100               	movlb	0	; () banked
  3877  001584  6F81               	movwf	lcdNibble@data& (0+255),b
  3878                           
  3879                           ;lcd.c: 60: temp = data & 0xF0;
  3880  001586  0100               	movlb	0	; () banked
  3881  001588  5181               	movf	lcdNibble@data& (0+255),w,b
  3882  00158A  0BF0               	andlw	240
  3883  00158C  0100               	movlb	0	; () banked
  3884  00158E  6F80               	movwf	lcdNibble@temp& (0+255),b
  3885                           
  3886                           ;lcd.c: 61: LATD = LATD & 0x0F;
  3887  001590  508C               	movf	3980,w,c	;volatile
  3888  001592  0B0F               	andlw	15
  3889  001594  6E8C               	movwf	3980,c	;volatile
  3890                           
  3891                           ;lcd.c: 62: LATD = temp | LATD;
  3892  001596  0100               	movlb	0	; () banked
  3893  001598  5180               	movf	lcdNibble@temp& (0+255),w,b
  3894  00159A  108C               	iorwf	3980,w,c	;volatile
  3895  00159C  6E8C               	movwf	3980,c	;volatile
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  3899  00159E  968C               	bcf	3980,3,c	;volatile
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3903  0015A0  0ED6               	movlw	214
  3904  0015A2                     u3347:
  3905  0015A2  D000               	nop2	
  3906  0015A4  D000               	nop2	
  3907  0015A6  2EE8               	decfsz	wreg,f,c
  3908  0015A8  D7FC               	bra	u3347
  3909  0015AA  D000               	nop2	
  3910                           
  3911                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  3912  0015AC  868C               	bsf	3980,3,c	;volatile
  3913                           
  3914                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3915  0015AE  0ED6               	movlw	214
  3916  0015B0                     u3357:
  3917  0015B0  D000               	nop2	
  3918  0015B2  D000               	nop2	
  3919  0015B4  2EE8               	decfsz	wreg,f,c
  3920  0015B6  D7FC               	bra	u3357
  3921  0015B8  D000               	nop2	
  3922  0015BA  0012               	return		;funcret
  3923  0015BC                     __end_of_lcdNibble:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon3	equ	0xFF0
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           postdec1	equ	0xFE5
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function _digitalWrite *****************
  3945 ;; Defined at:
  3946 ;;		line 53 in file "iopin.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  port            2    0[BANK0 ] int 
  3949 ;;  pin             2    2[BANK0 ] int 
  3950 ;;  val             2    4[BANK0 ] int 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;		None
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      void 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3962 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;Total ram usage:        9 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    7
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_main
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text21
  3977  000FD8                     __ptext21:
  3978                           	opt stack 0
  3979  000FD8                     _digitalWrite:
  3980                           	opt stack 23
  3981                           
  3982                           ;iopin.c: 54: pin = 1 << pin;
  3983                           
  3984                           ;incstack = 0
  3985  000FD8  C082  F086         	movff	digitalWrite@pin,??_digitalWrite
  3986  000FDC  0E01               	movlw	1
  3987  000FDE  0100               	movlb	0	; () banked
  3988  000FE0  6F87               	movwf	(??_digitalWrite+1)& (0+255),b
  3989  000FE2  0E00               	movlw	0
  3990  000FE4  0100               	movlb	0	; () banked
  3991  000FE6  6F88               	movwf	(??_digitalWrite+2)& (0+255),b
  3992  000FE8  0100               	movlb	0	; () banked
  3993  000FEA  2B86               	incf	??_digitalWrite& (0+255),f,b
  3994  000FEC  D004               	goto	u3004
  3995  000FEE                     u3005:
  3996  000FEE  90D8               	bcf	status,0,c
  3997  000FF0  0100               	movlb	0	; () banked
  3998  000FF2  3787               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  3999  000FF4  3788               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  4000  000FF6                     u3004:
  4001  000FF6  0100               	movlb	0	; () banked
  4002  000FF8  2F86               	decfsz	??_digitalWrite& (0+255),f,b
  4003  000FFA  D7F9               	goto	u3005
  4004  000FFC  C087  F082         	movff	??_digitalWrite+1,digitalWrite@pin
  4005  001000  C088  F083         	movff	??_digitalWrite+2,digitalWrite@pin+1
  4006                           
  4007                           ;iopin.c: 55: if(val == 0){
  4008  001004  0100               	movlb	0	; () banked
  4009  001006  5184               	movf	digitalWrite@val& (0+255),w,b
  4010  001008  0100               	movlb	0	; () banked
  4011  00100A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4012  00100C  A4D8               	btfss	status,2,c
  4013  00100E  D03C               	goto	l3445
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;iopin.c: 56: pin ^= 0xff;
  4017  001010  0EFF               	movlw	255
  4018  001012  0100               	movlb	0	; () banked
  4019  001014  1B82               	xorwf	digitalWrite@pin& (0+255),f,b
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;iopin.c: 57: }
  4023                           ;iopin.c: 59: switch(port){
  4024  001016  D038               	goto	l3445
  4025  001018                     l3421:
  4026                           
  4027                           ; BSR set to: 0
  4028  001018  0100               	movlb	0	; () banked
  4029  00101A  0584               	decf	digitalWrite@val& (0+255),w,b
  4030  00101C  0100               	movlb	0	; () banked
  4031  00101E  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4032  001020  A4D8               	btfss	status,2,c
  4033  001022  D004               	goto	l3425
  4034                           
  4035                           ; BSR set to: 0
  4036  001024  0100               	movlb	0	; () banked
  4037  001026  5182               	movf	digitalWrite@pin& (0+255),w,b
  4038  001028  1289               	iorwf	3977,f,c	;volatile
  4039  00102A  0012               	return	
  4040  00102C                     l3425:
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;iopin.c: 61: else LATA &= pin;
  4044  00102C  0100               	movlb	0	; () banked
  4045  00102E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4046  001030  1689               	andwf	3977,f,c	;volatile
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;iopin.c: 62: break;
  4050  001032  0012               	return	
  4051  001034                     l3427:
  4052                           
  4053                           ; BSR set to: 0
  4054  001034  0100               	movlb	0	; () banked
  4055  001036  0584               	decf	digitalWrite@val& (0+255),w,b
  4056  001038  0100               	movlb	0	; () banked
  4057  00103A  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4058  00103C  A4D8               	btfss	status,2,c
  4059  00103E  D004               	goto	l3431
  4060                           
  4061                           ; BSR set to: 0
  4062  001040  0100               	movlb	0	; () banked
  4063  001042  5182               	movf	digitalWrite@pin& (0+255),w,b
  4064  001044  128A               	iorwf	3978,f,c	;volatile
  4065  001046  0012               	return	
  4066  001048                     l3431:
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;iopin.c: 64: else LATB &= pin;
  4070  001048  0100               	movlb	0	; () banked
  4071  00104A  5182               	movf	digitalWrite@pin& (0+255),w,b
  4072  00104C  168A               	andwf	3978,f,c	;volatile
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;iopin.c: 65: break;
  4076  00104E  0012               	return	
  4077  001050                     l3433:
  4078                           
  4079                           ; BSR set to: 0
  4080  001050  0100               	movlb	0	; () banked
  4081  001052  0584               	decf	digitalWrite@val& (0+255),w,b
  4082  001054  0100               	movlb	0	; () banked
  4083  001056  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4084  001058  A4D8               	btfss	status,2,c
  4085  00105A  D004               	goto	l3437
  4086                           
  4087                           ; BSR set to: 0
  4088  00105C  0100               	movlb	0	; () banked
  4089  00105E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4090  001060  128B               	iorwf	3979,f,c	;volatile
  4091  001062  0012               	return	
  4092  001064                     l3437:
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;iopin.c: 67: else LATC &= pin;
  4096  001064  0100               	movlb	0	; () banked
  4097  001066  5182               	movf	digitalWrite@pin& (0+255),w,b
  4098  001068  168B               	andwf	3979,f,c	;volatile
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;iopin.c: 68: break;
  4102  00106A  0012               	return	
  4103  00106C                     l3439:
  4104                           
  4105                           ; BSR set to: 0
  4106  00106C  0100               	movlb	0	; () banked
  4107  00106E  0584               	decf	digitalWrite@val& (0+255),w,b
  4108  001070  0100               	movlb	0	; () banked
  4109  001072  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4110  001074  A4D8               	btfss	status,2,c
  4111  001076  D004               	goto	l3443
  4112                           
  4113                           ; BSR set to: 0
  4114  001078  0100               	movlb	0	; () banked
  4115  00107A  5182               	movf	digitalWrite@pin& (0+255),w,b
  4116  00107C  128C               	iorwf	3980,f,c	;volatile
  4117  00107E  0012               	return	
  4118  001080                     l3443:
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;iopin.c: 70: else LATD &= pin;
  4122  001080  0100               	movlb	0	; () banked
  4123  001082  5182               	movf	digitalWrite@pin& (0+255),w,b
  4124  001084  168C               	andwf	3980,f,c	;volatile
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;iopin.c: 71: }
  4128  001086  0012               	return	
  4129  001088                     l3445:
  4130                           
  4131                           ; BSR set to: 0
  4132  001088  C080  F086         	movff	digitalWrite@port,??_digitalWrite
  4133  00108C  C081  F087         	movff	digitalWrite@port+1,??_digitalWrite+1
  4134                           
  4135                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4136                           ; Switch size 1, requested type "space"
  4137                           ; Number of cases is 1, Range of values is 0 to 0
  4138                           ; switch strategies available:
  4139                           ; Name         Instructions Cycles
  4140                           ; simple_byte            4     3 (average)
  4141                           ;	Chosen strategy is simple_byte
  4142  001090  0100               	movlb	0	; () banked
  4143  001092  5187               	movf	(??_digitalWrite+1)& (0+255),w,b
  4144  001094  0A00               	xorlw	0	; case 0
  4145  001096  A4D8               	btfss	status,2,c
  4146  001098  0012               	return	
  4147                           
  4148                           ; BSR set to: 0
  4149                           ; Switch size 1, requested type "space"
  4150                           ; Number of cases is 4, Range of values is 0 to 3
  4151                           ; switch strategies available:
  4152                           ; Name         Instructions Cycles
  4153                           ; simple_byte           13     7 (average)
  4154                           ;	Chosen strategy is simple_byte
  4155  00109A  0100               	movlb	0	; () banked
  4156  00109C  5186               	movf	??_digitalWrite& (0+255),w,b
  4157  00109E  0A00               	xorlw	0	; case 0
  4158  0010A0  B4D8               	btfsc	status,2,c
  4159  0010A2  D7BA               	goto	l3421
  4160  0010A4  0A01               	xorlw	1	; case 1
  4161  0010A6  B4D8               	btfsc	status,2,c
  4162  0010A8  D7C5               	goto	l3427
  4163  0010AA  0A03               	xorlw	3	; case 2
  4164  0010AC  B4D8               	btfsc	status,2,c
  4165  0010AE  D7D0               	goto	l3433
  4166  0010B0  0A01               	xorlw	1	; case 3
  4167  0010B2  A4D8               	btfss	status,2,c
  4168  0010B4  0012               	return	
  4169  0010B6  D7DA               	goto	l3439
  4170  0010B8                     __end_of_digitalWrite:
  4171                           	opt stack 0
  4172                           tblptru	equ	0xFF8
  4173                           tblptrh	equ	0xFF7
  4174                           tblptrl	equ	0xFF6
  4175                           tablat	equ	0xFF5
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           intcon	equ	0xFF2
  4179                           intcon3	equ	0xFF0
  4180                           postinc0	equ	0xFEE
  4181                           wreg	equ	0xFE8
  4182                           postdec1	equ	0xFE5
  4183                           fsr1l	equ	0xFE1
  4184                           indf2	equ	0xFDF
  4185                           postinc2	equ	0xFDE
  4186                           postdec2	equ	0xFDD
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _service *****************
  4192 ;; Defined at:
  4193 ;;		line 151 in file "main.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  key             1  116[COMRAM] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:       15 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    6
  4214 ;; This function calls:
  4215 ;;		_servoInterruptService
  4216 ;;		_setAngle
  4217 ;;		_sortBatteryInterruptService
  4218 ;; This function is called by:
  4219 ;;		Interrupt level 2
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	intcode
  4224  000008                     __pintcode:
  4225                           	opt stack 0
  4226  000008                     _service:
  4227                           	opt stack 17
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;incstack = 0
  4231  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4232  00000A  ED7B  F007         	call	int_func,f	;refresh shadow registers
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           intcon3	equ	0xFF0
  4241                           postinc0	equ	0xFEE
  4242                           wreg	equ	0xFE8
  4243                           postdec1	equ	0xFE5
  4244                           fsr1l	equ	0xFE1
  4245                           indf2	equ	0xFDF
  4246                           postinc2	equ	0xFDE
  4247                           postdec2	equ	0xFDD
  4248                           fsr2h	equ	0xFDA
  4249                           fsr2l	equ	0xFD9
  4250                           status	equ	0xFD8
  4251                           
  4252                           	psect	intcode_body
  4253  000EF6                     __pintcode_body:
  4254                           	opt stack 17
  4255  000EF6                     int_func:
  4256                           	opt stack 17
  4257  000EF6  0006               	pop		; remove dummy address from shadow register refresh
  4258  000EF8  CFFA F067          	movff	pclath,??_service
  4259  000EFC  CFFB F068          	movff	pclatu,??_service+1
  4260  000F00  CFE9 F069          	movff	fsr0l,??_service+2
  4261  000F04  CFEA F06A          	movff	fsr0h,??_service+3
  4262  000F08  CFE1 F06B          	movff	fsr1l,??_service+4
  4263  000F0C  CFE2 F06C          	movff	fsr1h,??_service+5
  4264  000F10  CFD9 F06D          	movff	fsr2l,??_service+6
  4265  000F14  CFDA F06E          	movff	fsr2h,??_service+7
  4266  000F18  CFF3 F06F          	movff	prodl,??_service+8
  4267  000F1C  CFF4 F070          	movff	prodh,??_service+9
  4268  000F20  CFF6 F071          	movff	tblptrl,??_service+10
  4269  000F24  CFF7 F072          	movff	tblptrh,??_service+11
  4270  000F28  CFF8 F073          	movff	tblptru,??_service+12
  4271  000F2C  CFF5 F074          	movff	tablat,??_service+13
  4272                           
  4273                           ;main.c: 153: servoInterruptService();
  4274  000F30  EC32  F003         	call	_servoInterruptService	;wreg free
  4275                           
  4276                           ;main.c: 156: if(INT0IF){ INT0IF = 0;
  4277  000F34  A2F2               	btfss	intcon,1,c	;volatile
  4278  000F36  D003               	goto	i2l3533
  4279  000F38  92F2               	bcf	intcon,1,c	;volatile
  4280                           
  4281                           ;main.c: 157: sortBatteryInterruptService();
  4282  000F3A  EC63  F00D         	call	_sortBatteryInterruptService	;wreg free
  4283  000F3E                     i2l3533:
  4284                           
  4285                           ;main.c: 158: }
  4286                           ;main.c: 161: if(INT1IF){INT1IF = 0;
  4287  000F3E  A0F0               	btfss	intcon3,0,c	;volatile
  4288  000F40  D02D               	goto	i2l131
  4289  000F42  90F0               	bcf	intcon3,0,c	;volatile
  4290                           
  4291                           ;main.c: 162: char key = (PORTB & 0xF0) >> 4;
  4292  000F44  3881               	swapf	3969,w,c	;volatile
  4293  000F46  0B0F               	andlw	15
  4294  000F48  0B0F               	andlw	15
  4295  000F4A  6E75               	movwf	service@key,c
  4296                           
  4297                           ;main.c: 163: if(key == 0)setAngle(0,45);
  4298  000F4C  5075               	movf	service@key,w,c
  4299  000F4E  A4D8               	btfss	status,2,c
  4300  000F50  D00A               	goto	i2l3543
  4301  000F52  0E00               	movlw	0
  4302  000F54  6E5E               	movwf	setAngle@timer+1,c
  4303  000F56  0E00               	movlw	0
  4304  000F58  6E5D               	movwf	setAngle@timer,c
  4305  000F5A  0E00               	movlw	0
  4306  000F5C  6E60               	movwf	setAngle@angle+1,c
  4307  000F5E  0E2D               	movlw	45
  4308  000F60  6E5F               	movwf	setAngle@angle,c
  4309  000F62  ECC0  F009         	call	_setAngle	;wreg free
  4310  000F66                     i2l3543:
  4311                           
  4312                           ;main.c: 164: if(key == 1)setAngle(0,90);
  4313  000F66  0475               	decf	service@key,w,c
  4314  000F68  A4D8               	btfss	status,2,c
  4315  000F6A  D00A               	goto	i2l3547
  4316  000F6C  0E00               	movlw	0
  4317  000F6E  6E5E               	movwf	setAngle@timer+1,c
  4318  000F70  0E00               	movlw	0
  4319  000F72  6E5D               	movwf	setAngle@timer,c
  4320  000F74  0E00               	movlw	0
  4321  000F76  6E60               	movwf	setAngle@angle+1,c
  4322  000F78  0E5A               	movlw	90
  4323  000F7A  6E5F               	movwf	setAngle@angle,c
  4324  000F7C  ECC0  F009         	call	_setAngle	;wreg free
  4325  000F80                     i2l3547:
  4326                           
  4327                           ;main.c: 165: if(key == 2)setAngle(0,135);
  4328  000F80  0E02               	movlw	2
  4329  000F82  1875               	xorwf	service@key,w,c
  4330  000F84  A4D8               	btfss	status,2,c
  4331  000F86  D00A               	goto	i2l131
  4332  000F88  0E00               	movlw	0
  4333  000F8A  6E5E               	movwf	setAngle@timer+1,c
  4334  000F8C  0E00               	movlw	0
  4335  000F8E  6E5D               	movwf	setAngle@timer,c
  4336  000F90  0E00               	movlw	0
  4337  000F92  6E60               	movwf	setAngle@angle+1,c
  4338  000F94  0E87               	movlw	135
  4339  000F96  6E5F               	movwf	setAngle@angle,c
  4340  000F98  ECC0  F009         	call	_setAngle	;wreg free
  4341  000F9C                     i2l131:
  4342  000F9C  C074  FFF5         	movff	??_service+13,tablat
  4343  000FA0  C073  FFF8         	movff	??_service+12,tblptru
  4344  000FA4  C072  FFF7         	movff	??_service+11,tblptrh
  4345  000FA8  C071  FFF6         	movff	??_service+10,tblptrl
  4346  000FAC  C070  FFF4         	movff	??_service+9,prodh
  4347  000FB0  C06F  FFF3         	movff	??_service+8,prodl
  4348  000FB4  C06E  FFDA         	movff	??_service+7,fsr2h
  4349  000FB8  C06D  FFD9         	movff	??_service+6,fsr2l
  4350  000FBC  C06C  FFE2         	movff	??_service+5,fsr1h
  4351  000FC0  C06B  FFE1         	movff	??_service+4,fsr1l
  4352  000FC4  C06A  FFEA         	movff	??_service+3,fsr0h
  4353  000FC8  C069  FFE9         	movff	??_service+2,fsr0l
  4354  000FCC  C068  FFFB         	movff	??_service+1,pclatu
  4355  000FD0  C067  FFFA         	movff	??_service,pclath
  4356  000FD4  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4357  000FD6  0011               	retfie		f
  4358  000FD8                     __end_of_service:
  4359                           	opt stack 0
  4360                           pclatu	equ	0xFFB
  4361                           pclath	equ	0xFFA
  4362                           tblptru	equ	0xFF8
  4363                           tblptrh	equ	0xFF7
  4364                           tblptrl	equ	0xFF6
  4365                           tablat	equ	0xFF5
  4366                           prodh	equ	0xFF4
  4367                           prodl	equ	0xFF3
  4368                           intcon	equ	0xFF2
  4369                           intcon3	equ	0xFF0
  4370                           postinc0	equ	0xFEE
  4371                           fsr0h	equ	0xFEA
  4372                           fsr0l	equ	0xFE9
  4373                           wreg	equ	0xFE8
  4374                           postdec1	equ	0xFE5
  4375                           fsr1h	equ	0xFE2
  4376                           fsr1l	equ	0xFE1
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           postdec2	equ	0xFDD
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _sortBatteryInterruptService *****************
  4385 ;; Defined at:
  4386 ;;		line 172 in file "main.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      void 
  4393 ;; Registers used:
  4394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;Total ram usage:        0 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    5
  4407 ;; This function calls:
  4408 ;;		i2_lcdClear
  4409 ;;		i2_printf
  4410 ;; This function is called by:
  4411 ;;		_service
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text23
  4416  001AC6                     __ptext23:
  4417                           	opt stack 0
  4418  001AC6                     _sortBatteryInterruptService:
  4419                           	opt stack 17
  4420                           
  4421                           ;main.c: 174: lcdClear();
  4422                           
  4423                           ;incstack = 0
  4424  001AC6  EC7C  F00D         	call	i2_lcdClear	;wreg free
  4425                           
  4426                           ;main.c: 175: printf("sorting!");
  4427  001ACA  0EE0               	movlw	low STR_2
  4428  001ACC  6E17               	movwf	i2printf@f,c
  4429  001ACE  0EFF               	movlw	high STR_2
  4430  001AD0  6E18               	movwf	i2printf@f+1,c
  4431  001AD2  ECBC  F001         	call	i2_printf	;wreg free
  4432  001AD6  0012               	return		;funcret
  4433  001AD8                     __end_of_sortBatteryInterruptService:
  4434                           	opt stack 0
  4435                           pclatu	equ	0xFFB
  4436                           pclath	equ	0xFFA
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           prodh	equ	0xFF4
  4442                           prodl	equ	0xFF3
  4443                           intcon	equ	0xFF2
  4444                           intcon3	equ	0xFF0
  4445                           postinc0	equ	0xFEE
  4446                           fsr0h	equ	0xFEA
  4447                           fsr0l	equ	0xFE9
  4448                           wreg	equ	0xFE8
  4449                           postdec1	equ	0xFE5
  4450                           fsr1h	equ	0xFE2
  4451                           fsr1l	equ	0xFE1
  4452                           indf2	equ	0xFDF
  4453                           postinc2	equ	0xFDE
  4454                           postdec2	equ	0xFDD
  4455                           fsr2h	equ	0xFDA
  4456                           fsr2l	equ	0xFD9
  4457                           status	equ	0xFD8
  4458                           
  4459 ;; *************** function _setAngle *****************
  4460 ;; Defined at:
  4461 ;;		line 34 in file "servo.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;  timer           2   92[COMRAM] int 
  4464 ;;  angle           2   94[COMRAM] int 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4476 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;Total ram usage:       10 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    5
  4483 ;; This function calls:
  4484 ;;		_angleToPulse
  4485 ;;		i2_lcdClear
  4486 ;;		i2_printf
  4487 ;; This function is called by:
  4488 ;;		_service
  4489 ;;		_initServo
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text24
  4494  001380                     __ptext24:
  4495                           	opt stack 0
  4496  001380                     _setAngle:
  4497                           	opt stack 17
  4498                           
  4499                           ;servo.c: 35: pulse[timer] = 0xffff - angleToPulse(angle);
  4500                           
  4501                           ;incstack = 0
  4502  001380  C05F  F046         	movff	setAngle@angle,angleToPulse@angle
  4503  001384  C060  F047         	movff	setAngle@angle+1,angleToPulse@angle+1
  4504  001388  ECF2  F004         	call	_angleToPulse	;wreg free
  4505  00138C  1E46               	comf	?_angleToPulse,f,c
  4506  00138E  1E47               	comf	?_angleToPulse+1,f,c
  4507  001390  1E48               	comf	?_angleToPulse+2,f,c
  4508  001392  1E49               	comf	?_angleToPulse+3,f,c
  4509  001394  2A46               	incf	?_angleToPulse,f,c
  4510  001396  0E00               	movlw	0
  4511  001398  2247               	addwfc	?_angleToPulse+1,f,c
  4512  00139A  2248               	addwfc	?_angleToPulse+2,f,c
  4513  00139C  2249               	addwfc	?_angleToPulse+3,f,c
  4514  00139E  0EFF               	movlw	255
  4515  0013A0  2446               	addwf	?_angleToPulse,w,c
  4516  0013A2  6E61               	movwf	??_setAngle& (0+255),c
  4517  0013A4  0EFF               	movlw	255
  4518  0013A6  2047               	addwfc	?_angleToPulse+1,w,c
  4519  0013A8  6E62               	movwf	(??_setAngle+1)& (0+255),c
  4520  0013AA  0E00               	movlw	0
  4521  0013AC  2048               	addwfc	?_angleToPulse+2,w,c
  4522  0013AE  6E63               	movwf	(??_setAngle+2)& (0+255),c
  4523  0013B0  0E00               	movlw	0
  4524  0013B2  2049               	addwfc	?_angleToPulse+3,w,c
  4525  0013B4  6E64               	movwf	(??_setAngle+3)& (0+255),c
  4526  0013B6  0EAB               	movlw	low _pulse
  4527  0013B8  6E65               	movwf	(??_setAngle+4)& (0+255),c
  4528  0013BA  0E00               	movlw	high _pulse
  4529  0013BC  6E66               	movwf	(??_setAngle+5)& (0+255),c
  4530  0013BE  90D8               	bcf	status,0,c
  4531  0013C0  345D               	rlcf	setAngle@timer,w,c
  4532  0013C2  6ED9               	movwf	fsr2l,c
  4533  0013C4  345E               	rlcf	setAngle@timer+1,w,c
  4534  0013C6  6EDA               	movwf	fsr2h,c
  4535  0013C8  90D8               	bcf	status,0,c
  4536  0013CA  36D9               	rlcf	fsr2l,f,c
  4537  0013CC  36DA               	rlcf	fsr2h,f,c
  4538  0013CE  5065               	movf	??_setAngle+4,w,c
  4539  0013D0  26D9               	addwf	fsr2l,f,c
  4540  0013D2  5066               	movf	??_setAngle+5,w,c
  4541  0013D4  22DA               	addwfc	fsr2h,f,c
  4542  0013D6  C061  FFDE         	movff	??_setAngle,postinc2
  4543  0013DA  C062  FFDE         	movff	??_setAngle+1,postinc2
  4544  0013DE  C063  FFDE         	movff	??_setAngle+2,postinc2
  4545  0013E2  C064  FFDE         	movff	??_setAngle+3,postinc2
  4546                           
  4547                           ;servo.c: 36: lcdClear();
  4548  0013E6  EC7C  F00D         	call	i2_lcdClear	;wreg free
  4549                           
  4550                           ;servo.c: 37: printf("%ld",pulse[timer]);
  4551  0013EA  0EFA               	movlw	low STR_5
  4552  0013EC  6E17               	movwf	i2printf@f,c
  4553  0013EE  0EFF               	movlw	high STR_5
  4554  0013F0  6E18               	movwf	i2printf@f+1,c
  4555  0013F2  0EAB               	movlw	low _pulse
  4556  0013F4  6E61               	movwf	??_setAngle& (0+255),c
  4557  0013F6  0E00               	movlw	high _pulse
  4558  0013F8  6E62               	movwf	(??_setAngle+1)& (0+255),c
  4559  0013FA  90D8               	bcf	status,0,c
  4560  0013FC  345D               	rlcf	setAngle@timer,w,c
  4561  0013FE  6ED9               	movwf	fsr2l,c
  4562  001400  345E               	rlcf	setAngle@timer+1,w,c
  4563  001402  6EDA               	movwf	fsr2h,c
  4564  001404  90D8               	bcf	status,0,c
  4565  001406  36D9               	rlcf	fsr2l,f,c
  4566  001408  36DA               	rlcf	fsr2h,f,c
  4567  00140A  5061               	movf	??_setAngle,w,c
  4568  00140C  26D9               	addwf	fsr2l,f,c
  4569  00140E  5062               	movf	??_setAngle+1,w,c
  4570  001410  22DA               	addwfc	fsr2h,f,c
  4571  001412  CFDE F019          	movff	postinc2,?i2_printf+2
  4572  001416  CFDE F01A          	movff	postinc2,?i2_printf+3
  4573  00141A  CFDE F01B          	movff	postinc2,?i2_printf+4
  4574  00141E  CFDE F01C          	movff	postinc2,?i2_printf+5
  4575  001422  ECBC  F001         	call	i2_printf	;wreg free
  4576  001426  0012               	return		;funcret
  4577  001428                     __end_of_setAngle:
  4578                           	opt stack 0
  4579                           pclatu	equ	0xFFB
  4580                           pclath	equ	0xFFA
  4581                           tblptru	equ	0xFF8
  4582                           tblptrh	equ	0xFF7
  4583                           tblptrl	equ	0xFF6
  4584                           tablat	equ	0xFF5
  4585                           prodh	equ	0xFF4
  4586                           prodl	equ	0xFF3
  4587                           intcon	equ	0xFF2
  4588                           intcon3	equ	0xFF0
  4589                           postinc0	equ	0xFEE
  4590                           fsr0h	equ	0xFEA
  4591                           fsr0l	equ	0xFE9
  4592                           wreg	equ	0xFE8
  4593                           postdec1	equ	0xFE5
  4594                           fsr1h	equ	0xFE2
  4595                           fsr1l	equ	0xFE1
  4596                           indf2	equ	0xFDF
  4597                           postinc2	equ	0xFDE
  4598                           postdec2	equ	0xFDD
  4599                           fsr2h	equ	0xFDA
  4600                           fsr2l	equ	0xFD9
  4601                           status	equ	0xFD8
  4602                           
  4603 ;; *************** function i2_printf *****************
  4604 ;; Defined at:
  4605 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  f               2   22[COMRAM] PTR const unsigned char 
  4608 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  4609 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  4610 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  4611 ;;		 -> STR_5(4), STR_4(9), STR_3(8), STR_2(9), 
  4612 ;;		 -> STR_1(9), 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  printf          4   35[COMRAM] unsigned long 
  4615 ;;  printf          4    0        struct .
  4616 ;;  printf          3    0        PTR const unsigned char 
  4617 ;;  printf          2   33[COMRAM] PTR void [1]
  4618 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4619 ;;  printf          2   31[COMRAM] int 
  4620 ;;  printf          2    0        unsigned int 
  4621 ;;  printf          1   40[COMRAM] char 
  4622 ;;  printf          1   39[COMRAM] unsigned char 
  4623 ;;  printf          1   30[COMRAM] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  2   22[COMRAM] int 
  4626 ;; Registers used:
  4627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4633 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;Total ram usage:       19 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    4
  4640 ;; This function calls:
  4641 ;;		i2___lldiv
  4642 ;;		i2___llmod
  4643 ;;		i2_putch
  4644 ;; This function is called by:
  4645 ;;		_sortBatteryInterruptService
  4646 ;;		_setAngle
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text25
  4651  000378                     __ptext25:
  4652                           	opt stack 0
  4653  000378                     i2_printf:
  4654                           	opt stack 17
  4655                           
  4656                           ;doprnt.c: 466: va_list ap;
  4657                           ;doprnt.c: 499: signed char c;
  4658                           ;doprnt.c: 504: int prec;
  4659                           ;doprnt.c: 508: unsigned char flag;
  4660                           ;doprnt.c: 523: union {
  4661                           ;doprnt.c: 524: unsigned long vd;
  4662                           ;doprnt.c: 525: double integ;
  4663                           ;doprnt.c: 526: } tmpval;
  4664                           ;doprnt.c: 528: unsigned long val;
  4665                           ;doprnt.c: 529: unsigned len;
  4666                           ;doprnt.c: 530: const char * cp;
  4667                           ;doprnt.c: 533: *ap = __va_start();
  4668                           
  4669                           ;incstack = 0
  4670  000378  0E19               	movlw	low (?i2_printf+2)
  4671  00037A  6E22               	movwf	i2printf@ap,c
  4672  00037C  0E00               	movlw	high (?i2_printf+2)
  4673  00037E  6E23               	movwf	i2printf@ap+1,c
  4674                           
  4675                           ;doprnt.c: 536: while(c = *f++) {
  4676  000380  D164               	goto	i2l3315
  4677  000382                     i2l3219:
  4678                           
  4679                           ;doprnt.c: 538: if(c != '%')
  4680  000382  0E25               	movlw	37
  4681  000384  1829               	xorwf	i2printf@c,w,c
  4682  000386  B4D8               	btfsc	status,2,c
  4683  000388  D004               	goto	i2l3223
  4684                           
  4685                           ;doprnt.c: 540: {
  4686                           ;doprnt.c: 541: (putch(c) );
  4687  00038A  5029               	movf	i2printf@c,w,c
  4688  00038C  EC35  F00D         	call	i2_putch
  4689                           
  4690                           ;doprnt.c: 542: continue;
  4691  000390  D15C               	goto	i2l3315
  4692  000392                     i2l3223:
  4693                           
  4694                           ;doprnt.c: 543: }
  4695                           ;doprnt.c: 548: flag = 0;
  4696  000392  0E00               	movlw	0
  4697  000394  6E28               	movwf	i2printf@flag,c
  4698                           
  4699                           ;doprnt.c: 635: switch(c = *f++) {
  4700                           
  4701                           ;doprnt.c: 633: loop:
  4702  000396  D012               	goto	i2l3237
  4703  000398                     i2l3225:
  4704                           
  4705                           ;doprnt.c: 643: flag |= 0x10;
  4706  000398  8828               	bsf	i2printf@flag,4,c
  4707                           
  4708                           ;doprnt.c: 644: goto loop;
  4709  00039A  D010               	goto	i2l3237
  4710  00039C                     i2l3227:
  4711                           
  4712                           ;doprnt.c: 721: flag |= 0x80;
  4713  00039C  8E28               	bsf	i2printf@flag,7,c
  4714                           
  4715                           ;doprnt.c: 723: break;
  4716  00039E  D02B               	goto	i2l565
  4717  0003A0                     i2l3229:
  4718                           
  4719                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4720  0003A0  C022  FFD9         	movff	i2printf@ap,fsr2l
  4721  0003A4  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4722  0003A8  50DF               	movf	indf2,w,c
  4723  0003AA  6E29               	movwf	i2printf@c,c
  4724  0003AC  0E02               	movlw	2
  4725  0003AE  2622               	addwf	i2printf@ap,f,c
  4726  0003B0  0E00               	movlw	0
  4727  0003B2  2223               	addwfc	i2printf@ap+1,f,c
  4728  0003B4                     i2l3233:
  4729                           
  4730                           ;doprnt.c: 809: (putch(c) );
  4731  0003B4  5029               	movf	i2printf@c,w,c
  4732  0003B6  EC35  F00D         	call	i2_putch
  4733                           
  4734                           ;doprnt.c: 810: continue;
  4735  0003BA  D147               	goto	i2l3315
  4736  0003BC                     i2l3237:
  4737  0003BC  C017  FFF6         	movff	i2printf@f,tblptrl
  4738  0003C0  C018  FFF7         	movff	i2printf@f+1,tblptrh
  4739  0003C4  4A17               	infsnz	i2printf@f,f,c
  4740  0003C6  2A18               	incf	i2printf@f+1,f,c
  4741  0003C8                     	if	0	;tblptru may be non-zero
  4742  0003C8                     	endif
  4743  0003C8                     	if	0	;tblptru may be non-zero
  4744  0003C8                     	endif
  4745  0003C8  0008               	tblrd		*
  4746  0003CA  CFF5 F029          	movff	tablat,i2printf@c
  4747  0003CE  5029               	movf	i2printf@c,w,c
  4748                           
  4749                           ; Switch size 1, requested type "space"
  4750                           ; Number of cases is 6, Range of values is 0 to 120
  4751                           ; switch strategies available:
  4752                           ; Name         Instructions Cycles
  4753                           ; simple_byte           19    10 (average)
  4754                           ;	Chosen strategy is simple_byte
  4755  0003D0  0A00               	xorlw	0	; case 0
  4756  0003D2  B4D8               	btfsc	status,2,c
  4757  0003D4  0012               	return	
  4758  0003D6  0A63               	xorlw	99	; case 99
  4759  0003D8  B4D8               	btfsc	status,2,c
  4760  0003DA  D7E2               	goto	i2l3229
  4761  0003DC  0A07               	xorlw	7	; case 100
  4762  0003DE  B4D8               	btfsc	status,2,c
  4763  0003E0  D00A               	goto	i2l565
  4764  0003E2  0A0D               	xorlw	13	; case 105
  4765  0003E4  B4D8               	btfsc	status,2,c
  4766  0003E6  D007               	goto	i2l565
  4767  0003E8  0A05               	xorlw	5	; case 108
  4768  0003EA  B4D8               	btfsc	status,2,c
  4769  0003EC  D7D5               	goto	i2l3225
  4770  0003EE  0A14               	xorlw	20	; case 120
  4771  0003F0  B4D8               	btfsc	status,2,c
  4772  0003F2  D7D4               	goto	i2l3227
  4773  0003F4  D7DF               	goto	i2l3233
  4774  0003F6                     i2l565:
  4775                           
  4776                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4777  0003F6  BE28               	btfsc	i2printf@flag,7,c
  4778  0003F8  D02E               	goto	i2l569
  4779                           
  4780                           ;doprnt.c: 1253: {
  4781                           ;doprnt.c: 1255: if(flag & 0x10)
  4782  0003FA  A828               	btfss	i2printf@flag,4,c
  4783  0003FC  D00E               	goto	i2l3245
  4784                           
  4785                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4786  0003FE  C022  FFD9         	movff	i2printf@ap,fsr2l
  4787  000402  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4788  000406  CFDE F024          	movff	postinc2,i2printf@val
  4789  00040A  CFDE F025          	movff	postinc2,i2printf@val+1
  4790  00040E  CFDE F026          	movff	postinc2,i2printf@val+2
  4791  000412  CFDE F027          	movff	postinc2,i2printf@val+3
  4792  000416  0E04               	movlw	4
  4793  000418  D00E               	goto	L3
  4794  00041A                     i2l3245:
  4795                           
  4796                           ;doprnt.c: 1257: else
  4797                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4798  00041A  C022  FFD9         	movff	i2printf@ap,fsr2l
  4799  00041E  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4800  000422  CFDE F024          	movff	postinc2,i2printf@val
  4801  000426  CFDD F025          	movff	postdec2,i2printf@val+1
  4802  00042A  0E00               	movlw	0
  4803  00042C  BE25               	btfsc	i2printf@val+1,7,c
  4804  00042E  0EFF               	movlw	-1
  4805  000430  6E26               	movwf	i2printf@val+2,c
  4806  000432  6E27               	movwf	i2printf@val+3,c
  4807  000434  0E02               	movlw	2
  4808  000436                     L3:
  4809  000436  2622               	addwf	i2printf@ap,f,c
  4810  000438  0E00               	movlw	0
  4811  00043A  2223               	addwfc	i2printf@ap+1,f,c
  4812                           
  4813                           ;doprnt.c: 1261: if((long)val < 0) {
  4814  00043C  AE27               	btfss	i2printf@val+3,7,c
  4815  00043E  D06A               	goto	i2l3293
  4816                           
  4817                           ;doprnt.c: 1262: flag |= 0x03;
  4818  000440  0E03               	movlw	3
  4819  000442  1228               	iorwf	i2printf@flag,f,c
  4820                           
  4821                           ;doprnt.c: 1263: val = -val;
  4822  000444  1E27               	comf	i2printf@val+3,f,c
  4823  000446  1E26               	comf	i2printf@val+2,f,c
  4824  000448  1E25               	comf	i2printf@val+1,f,c
  4825  00044A  6C24               	negf	i2printf@val,c
  4826  00044C  0E00               	movlw	0
  4827  00044E  2225               	addwfc	i2printf@val+1,f,c
  4828  000450  2226               	addwfc	i2printf@val+2,f,c
  4829  000452  2227               	addwfc	i2printf@val+3,f,c
  4830                           
  4831                           ;doprnt.c: 1264: }
  4832                           ;doprnt.c: 1266: }
  4833  000454  D05F               	goto	i2l3293
  4834  000456                     i2l569:
  4835                           
  4836                           ;doprnt.c: 1268: else
  4837                           ;doprnt.c: 1273: {
  4838                           ;doprnt.c: 1281: if(flag & 0x10)
  4839  000456  A828               	btfss	i2printf@flag,4,c
  4840  000458  D00E               	goto	i2l3259
  4841                           
  4842                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4843  00045A  C022  FFD9         	movff	i2printf@ap,fsr2l
  4844  00045E  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4845  000462  CFDE F024          	movff	postinc2,i2printf@val
  4846  000466  CFDE F025          	movff	postinc2,i2printf@val+1
  4847  00046A  CFDE F026          	movff	postinc2,i2printf@val+2
  4848  00046E  CFDE F027          	movff	postinc2,i2printf@val+3
  4849  000472  0E04               	movlw	4
  4850  000474  D00F               	goto	L4
  4851  000476                     i2l3259:
  4852                           
  4853                           ;doprnt.c: 1283: else
  4854                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4855  000476  C022  FFD9         	movff	i2printf@ap,fsr2l
  4856  00047A  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4857  00047E  CFDE F01D          	movff	postinc2,??i2_printf
  4858  000482  CFDD F01E          	movff	postdec2,??i2_printf+1
  4859  000486  C01D  F024         	movff	??i2_printf,i2printf@val
  4860  00048A  C01E  F025         	movff	??i2_printf+1,i2printf@val+1
  4861  00048E  6A26               	clrf	i2printf@val+2,c
  4862  000490  6A27               	clrf	i2printf@val+3,c
  4863  000492  0E02               	movlw	2
  4864  000494                     L4:
  4865  000494  2622               	addwf	i2printf@ap,f,c
  4866  000496  0E00               	movlw	0
  4867  000498  2223               	addwfc	i2printf@ap+1,f,c
  4868                           
  4869                           ;doprnt.c: 1287: }
  4870                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4871  00049A  D03C               	goto	i2l3293
  4872  00049C                     i2l3263:
  4873                           
  4874                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4875  00049C  0E01               	movlw	1
  4876  00049E  6E29               	movwf	i2printf@c,c
  4877  0004A0                     i2l3265:
  4878  0004A0  0E0A               	movlw	10
  4879  0004A2  1829               	xorwf	i2printf@c,w,c
  4880  0004A4  B4D8               	btfsc	status,2,c
  4881  0004A6  D03E               	goto	i2l3295
  4882                           
  4883                           ;doprnt.c: 1306: if(val < dpowers[c])
  4884  0004A8  5029               	movf	i2printf@c,w,c
  4885  0004AA  0D04               	mullw	4
  4886  0004AC  0E93               	movlw	low _dpowers
  4887  0004AE  24F3               	addwf	prodl,w,c
  4888  0004B0  6EF6               	movwf	tblptrl,c
  4889  0004B2  0EFE               	movlw	high _dpowers
  4890  0004B4  20F4               	addwfc	prodh,w,c
  4891  0004B6  6EF7               	movwf	tblptrh,c
  4892  0004B8                     	if	0	;There are less than 3 active tblptr bytes
  4893  0004B8                     	endif
  4894  0004B8  0009               	tblrd		*+
  4895  0004BA  50F5               	movf	tablat,w,c
  4896  0004BC  5C24               	subwf	i2printf@val,w,c
  4897  0004BE  0009               	tblrd		*+
  4898  0004C0  50F5               	movf	tablat,w,c
  4899  0004C2  5825               	subwfb	i2printf@val+1,w,c
  4900  0004C4  0009               	tblrd		*+
  4901  0004C6  50F5               	movf	tablat,w,c
  4902  0004C8  5826               	subwfb	i2printf@val+2,w,c
  4903  0004CA  0009               	tblrd		*+
  4904  0004CC  50F5               	movf	tablat,w,c
  4905  0004CE  5827               	subwfb	i2printf@val+3,w,c
  4906  0004D0  A0D8               	btfss	status,0,c
  4907  0004D2  D028               	goto	i2l3295
  4908                           
  4909                           ;doprnt.c: 1307: break;
  4910  0004D4  2A29               	incf	i2printf@c,f,c
  4911  0004D6  D7E4               	goto	i2l3265
  4912  0004D8                     i2l3277:
  4913                           
  4914                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4915  0004D8  0E01               	movlw	1
  4916  0004DA  6E29               	movwf	i2printf@c,c
  4917  0004DC                     i2l3279:
  4918  0004DC  0E08               	movlw	8
  4919  0004DE  1829               	xorwf	i2printf@c,w,c
  4920  0004E0  B4D8               	btfsc	status,2,c
  4921  0004E2  D020               	goto	i2l3295
  4922                           
  4923                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4924  0004E4  5029               	movf	i2printf@c,w,c
  4925  0004E6  0D04               	mullw	4
  4926  0004E8  0EBB               	movlw	low _hexpowers
  4927  0004EA  24F3               	addwf	prodl,w,c
  4928  0004EC  6EF6               	movwf	tblptrl,c
  4929  0004EE  0EFE               	movlw	high _hexpowers
  4930  0004F0  20F4               	addwfc	prodh,w,c
  4931  0004F2  6EF7               	movwf	tblptrh,c
  4932  0004F4                     	if	0	;There are less than 3 active tblptr bytes
  4933  0004F4                     	endif
  4934  0004F4  0009               	tblrd		*+
  4935  0004F6  50F5               	movf	tablat,w,c
  4936  0004F8  5C24               	subwf	i2printf@val,w,c
  4937  0004FA  0009               	tblrd		*+
  4938  0004FC  50F5               	movf	tablat,w,c
  4939  0004FE  5825               	subwfb	i2printf@val+1,w,c
  4940  000500  0009               	tblrd		*+
  4941  000502  50F5               	movf	tablat,w,c
  4942  000504  5826               	subwfb	i2printf@val+2,w,c
  4943  000506  0009               	tblrd		*+
  4944  000508  50F5               	movf	tablat,w,c
  4945  00050A  5827               	subwfb	i2printf@val+3,w,c
  4946  00050C  A0D8               	btfss	status,0,c
  4947  00050E  D00A               	goto	i2l3295
  4948                           
  4949                           ;doprnt.c: 1318: break;
  4950  000510  2A29               	incf	i2printf@c,f,c
  4951  000512  D7E4               	goto	i2l3279
  4952  000514                     i2l3293:
  4953  000514  5028               	movf	i2printf@flag,w,c
  4954  000516  0B80               	andlw	128
  4955                           
  4956                           ; Switch size 1, requested type "space"
  4957                           ; Number of cases is 2, Range of values is 0 to 128
  4958                           ; switch strategies available:
  4959                           ; Name         Instructions Cycles
  4960                           ; simple_byte            7     4 (average)
  4961                           ;	Chosen strategy is simple_byte
  4962  000518  0A00               	xorlw	0	; case 0
  4963  00051A  B4D8               	btfsc	status,2,c
  4964  00051C  D7BF               	goto	i2l3263
  4965  00051E  0A80               	xorlw	128	; case 128
  4966  000520  B4D8               	btfsc	status,2,c
  4967  000522  D7DA               	goto	i2l3277
  4968  000524                     i2l3295:
  4969                           
  4970                           ;doprnt.c: 1422: {
  4971                           ;doprnt.c: 1438: if(flag & 0x03)
  4972  000524  C028  F01D         	movff	i2printf@flag,??i2_printf
  4973  000528  0E03               	movlw	3
  4974  00052A  161D               	andwf	??i2_printf,f,c
  4975  00052C  B4D8               	btfsc	status,2,c
  4976  00052E  D003               	goto	i2l3299
  4977                           
  4978                           ;doprnt.c: 1439: (putch('-') );
  4979  000530  0E2D               	movlw	45
  4980  000532  EC35  F00D         	call	i2_putch
  4981  000536                     i2l3299:
  4982                           
  4983                           ;doprnt.c: 1469: }
  4984                           ;doprnt.c: 1472: prec = c;
  4985  000536  5029               	movf	i2printf@c,w,c
  4986  000538  6E20               	movwf	i2printf@prec,c
  4987  00053A  6A21               	clrf	i2printf@prec+1,c
  4988  00053C  BE20               	btfsc	i2printf@prec,7,c
  4989  00053E  0621               	decf	i2printf@prec+1,f,c
  4990                           
  4991                           ;doprnt.c: 1474: while(prec--) {
  4992  000540  D07C               	goto	i2l3313
  4993  000542                     i2l3301:
  4994                           
  4995                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4996  000542  C020  F01D         	movff	i2printf@prec,??i2_printf
  4997  000546  C021  F01E         	movff	i2printf@prec+1,??i2_printf+1
  4998  00054A  90D8               	bcf	status,0,c
  4999  00054C  361D               	rlcf	??i2_printf,f,c
  5000  00054E  361E               	rlcf	??i2_printf+1,f,c
  5001  000550  90D8               	bcf	status,0,c
  5002  000552  361D               	rlcf	??i2_printf,f,c
  5003  000554  361E               	rlcf	??i2_printf+1,f,c
  5004  000556  0E93               	movlw	low _dpowers
  5005  000558  241D               	addwf	??i2_printf,w,c
  5006  00055A  6EF6               	movwf	tblptrl,c
  5007  00055C  0EFE               	movlw	high _dpowers
  5008  00055E  201E               	addwfc	??i2_printf+1,w,c
  5009  000560  6EF7               	movwf	tblptrh,c
  5010  000562                     	if	0	;There are less than 3 active tblptr bytes
  5011  000562                     	endif
  5012  000562  0009               	tblrd		*+
  5013  000564  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  5014  000568  0009               	tblrd		*+
  5015  00056A  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  5016  00056E  0009               	tblrd		*+
  5017  000570  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  5018  000574  000A               	tblrd		*-
  5019  000576  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  5020  00057A  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  5021  00057E  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  5022  000582  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  5023  000586  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  5024  00058A  EC61  F00A         	call	i2___lldiv	;wreg free
  5025  00058E  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  5026  000592  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  5027  000596  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  5028  00059A  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  5029  00059E  0E0A               	movlw	10
  5030  0005A0  6E12               	movwf	i2___llmod@divisor,c
  5031  0005A2  0E00               	movlw	0
  5032  0005A4  6E13               	movwf	i2___llmod@divisor+1,c
  5033  0005A6  0E00               	movlw	0
  5034  0005A8  6E14               	movwf	i2___llmod@divisor+2,c
  5035  0005AA  0E00               	movlw	0
  5036  0005AC  6E15               	movwf	i2___llmod@divisor+3,c
  5037  0005AE  EC1A  F00B         	call	i2___llmod	;wreg free
  5038  0005B2  500E               	movf	?i2___llmod,w,c
  5039  0005B4  0F30               	addlw	48
  5040  0005B6  6E29               	movwf	i2printf@c,c
  5041                           
  5042                           ;doprnt.c: 1491: break;
  5043  0005B8  D03D               	goto	i2l3311
  5044  0005BA                     i2l3303:
  5045                           
  5046                           ;doprnt.c: 1499: {
  5047                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5048  0005BA  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  5049  0005BE  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  5050  0005C2  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  5051  0005C6  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  5052  0005CA  C020  F01D         	movff	i2printf@prec,??i2_printf
  5053  0005CE  C021  F01E         	movff	i2printf@prec+1,??i2_printf+1
  5054  0005D2  90D8               	bcf	status,0,c
  5055  0005D4  361D               	rlcf	??i2_printf,f,c
  5056  0005D6  361E               	rlcf	??i2_printf+1,f,c
  5057  0005D8  90D8               	bcf	status,0,c
  5058  0005DA  361D               	rlcf	??i2_printf,f,c
  5059  0005DC  361E               	rlcf	??i2_printf+1,f,c
  5060  0005DE  0EBB               	movlw	low _hexpowers
  5061  0005E0  241D               	addwf	??i2_printf,w,c
  5062  0005E2  6EF6               	movwf	tblptrl,c
  5063  0005E4  0EFE               	movlw	high _hexpowers
  5064  0005E6  201E               	addwfc	??i2_printf+1,w,c
  5065  0005E8  6EF7               	movwf	tblptrh,c
  5066  0005EA                     	if	0	;There are less than 3 active tblptr bytes
  5067  0005EA                     	endif
  5068  0005EA  0009               	tblrd		*+
  5069  0005EC  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  5070  0005F0  0009               	tblrd		*+
  5071  0005F2  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  5072  0005F6  0009               	tblrd		*+
  5073  0005F8  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  5074  0005FC  000A               	tblrd		*-
  5075  0005FE  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  5076  000602  EC61  F00A         	call	i2___lldiv	;wreg free
  5077  000606  5001               	movf	?i2___lldiv,w,c
  5078  000608  0B0F               	andlw	15
  5079  00060A  6E1F               	movwf	i2printf@idx,c
  5080                           
  5081                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5082  00060C  501F               	movf	i2printf@idx,w,c
  5083  00060E  0D01               	mullw	1
  5084  000610  0E60               	movlw	low STR_18
  5085  000612  24F3               	addwf	prodl,w,c
  5086  000614  6EF6               	movwf	tblptrl,c
  5087  000616  0EFF               	movlw	high STR_18
  5088  000618  20F4               	addwfc	prodh,w,c
  5089  00061A  6EF7               	movwf	tblptrh,c
  5090  00061C                     	if	0	;There are less than 3 active tblptr bytes
  5091  00061C                     	endif
  5092  00061C  0008               	tblrd		*
  5093  00061E  CFF5 F029          	movff	tablat,i2printf@c
  5094                           
  5095                           ;doprnt.c: 1523: }
  5096                           
  5097                           ;doprnt.c: 1508: }
  5098                           ;doprnt.c: 1510: break;
  5099  000622  D008               	goto	i2l3311
  5100  000624                     i2l3309:
  5101  000624  5028               	movf	i2printf@flag,w,c
  5102  000626  0B80               	andlw	128
  5103                           
  5104                           ; Switch size 1, requested type "space"
  5105                           ; Number of cases is 2, Range of values is 0 to 128
  5106                           ; switch strategies available:
  5107                           ; Name         Instructions Cycles
  5108                           ; simple_byte            7     4 (average)
  5109                           ;	Chosen strategy is simple_byte
  5110  000628  0A00               	xorlw	0	; case 0
  5111  00062A  B4D8               	btfsc	status,2,c
  5112  00062C  D78A               	goto	i2l3301
  5113  00062E  0A80               	xorlw	128	; case 128
  5114  000630  B4D8               	btfsc	status,2,c
  5115  000632  D7C3               	goto	i2l3303
  5116  000634                     i2l3311:
  5117                           
  5118                           ;doprnt.c: 1524: (putch(c) );
  5119  000634  5029               	movf	i2printf@c,w,c
  5120  000636  EC35  F00D         	call	i2_putch
  5121  00063A                     i2l3313:
  5122  00063A  0620               	decf	i2printf@prec,f,c
  5123  00063C  A0D8               	btfss	status,0,c
  5124  00063E  0621               	decf	i2printf@prec+1,f,c
  5125  000640  2820               	incf	i2printf@prec,w,c
  5126  000642  E1F0               	bnz	i2l3309
  5127  000644  2821               	incf	i2printf@prec+1,w,c
  5128  000646  A4D8               	btfss	status,2,c
  5129  000648  D7ED               	goto	i2l3309
  5130  00064A                     i2l3315:
  5131  00064A  C017  FFF6         	movff	i2printf@f,tblptrl
  5132  00064E  C018  FFF7         	movff	i2printf@f+1,tblptrh
  5133  000652  4A17               	infsnz	i2printf@f,f,c
  5134  000654  2A18               	incf	i2printf@f+1,f,c
  5135  000656                     	if	0	;tblptru may be non-zero
  5136  000656                     	endif
  5137  000656                     	if	0	;tblptru may be non-zero
  5138  000656                     	endif
  5139  000656  0008               	tblrd		*
  5140  000658  CFF5 F029          	movff	tablat,i2printf@c
  5141  00065C  5029               	movf	i2printf@c,w,c
  5142  00065E  B4D8               	btfsc	status,2,c
  5143  000660  0012               	return	
  5144  000662  D68F               	goto	i2l3219
  5145  000664                     __end_ofi2_printf:
  5146                           	opt stack 0
  5147                           pclatu	equ	0xFFB
  5148                           pclath	equ	0xFFA
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           prodh	equ	0xFF4
  5154                           prodl	equ	0xFF3
  5155                           intcon	equ	0xFF2
  5156                           intcon3	equ	0xFF0
  5157                           postinc0	equ	0xFEE
  5158                           fsr0h	equ	0xFEA
  5159                           fsr0l	equ	0xFE9
  5160                           wreg	equ	0xFE8
  5161                           postdec1	equ	0xFE5
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function i2_putch *****************
  5172 ;; Defined at:
  5173 ;;		line 35 in file "lcd.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  data            1    wreg     unsigned char 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  data            1    4[COMRAM] unsigned char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;Total ram usage:        1 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    3
  5194 ;; This function calls:
  5195 ;;		i2_lcdNewline
  5196 ;;		i2_lcdNibble
  5197 ;; This function is called by:
  5198 ;;		i2_printf
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text26
  5203  001A6A                     __ptext26:
  5204                           	opt stack 0
  5205  001A6A                     i2_putch:
  5206                           	opt stack 17
  5207                           
  5208                           ;incstack = 0
  5209                           ;i2putch@data stored from wreg
  5210  001A6A  6E05               	movwf	i2putch@data,c
  5211                           
  5212                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5213  001A6C  0E0A               	movlw	10
  5214  001A6E  1805               	xorwf	i2putch@data,w,c
  5215  001A70  A4D8               	btfss	status,2,c
  5216  001A72  D003               	goto	i2l157
  5217  001A74  EC78  F00D         	call	i2_lcdNewline	;wreg free
  5218  001A78  0012               	return	
  5219  001A7A                     i2l157:
  5220                           
  5221                           ;lcd.c: 37: else
  5222                           ;lcd.c: 38: {
  5223                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5224  001A7A  848C               	bsf	3980,2,c	;volatile
  5225                           
  5226                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5227  001A7C  0E74               	movlw	116
  5228  001A7E                     i2u336_47:
  5229  001A7E  2EE8               	decfsz	wreg,f,c
  5230  001A80  D7FE               	bra	i2u336_47
  5231  001A82  D000               	nop2	
  5232                           
  5233                           ;lcd.c: 41: lcdNibble(data);
  5234  001A84  5005               	movf	i2putch@data,w,c
  5235  001A86  EC4D  F00B         	call	i2_lcdNibble
  5236  001A8A  0012               	return	
  5237  001A8C                     __end_ofi2_putch:
  5238                           	opt stack 0
  5239                           pclatu	equ	0xFFB
  5240                           pclath	equ	0xFFA
  5241                           tblptru	equ	0xFF8
  5242                           tblptrh	equ	0xFF7
  5243                           tblptrl	equ	0xFF6
  5244                           tablat	equ	0xFF5
  5245                           prodh	equ	0xFF4
  5246                           prodl	equ	0xFF3
  5247                           intcon	equ	0xFF2
  5248                           intcon3	equ	0xFF0
  5249                           postinc0	equ	0xFEE
  5250                           fsr0h	equ	0xFEA
  5251                           fsr0l	equ	0xFE9
  5252                           wreg	equ	0xFE8
  5253                           postdec1	equ	0xFE5
  5254                           fsr1h	equ	0xFE2
  5255                           fsr1l	equ	0xFE1
  5256                           indf2	equ	0xFDF
  5257                           postinc2	equ	0xFDE
  5258                           postdec2	equ	0xFDD
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function i2_lcdNewline *****************
  5264 ;; Defined at:
  5265 ;;		line 78 in file "lcd.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;		None
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      void 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;Total ram usage:        0 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    2
  5286 ;; This function calls:
  5287 ;;		i2_lcdInst
  5288 ;; This function is called by:
  5289 ;;		i2_putch
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text27
  5294  001AF0                     __ptext27:
  5295                           	opt stack 0
  5296  001AF0                     i2_lcdNewline:
  5297                           	opt stack 17
  5298                           
  5299                           ;lcd.c: 79: lcdInst(0b11000000);
  5300                           
  5301                           ;incstack = 0
  5302  001AF0  0EC0               	movlw	192
  5303  001AF2  EC46  F00D         	call	i2_lcdInst
  5304  001AF6  0012               	return		;funcret
  5305  001AF8                     __end_ofi2_lcdNewline:
  5306                           	opt stack 0
  5307                           pclatu	equ	0xFFB
  5308                           pclath	equ	0xFFA
  5309                           tblptru	equ	0xFF8
  5310                           tblptrh	equ	0xFF7
  5311                           tblptrl	equ	0xFF6
  5312                           tablat	equ	0xFF5
  5313                           prodh	equ	0xFF4
  5314                           prodl	equ	0xFF3
  5315                           intcon	equ	0xFF2
  5316                           intcon3	equ	0xFF0
  5317                           postinc0	equ	0xFEE
  5318                           fsr0h	equ	0xFEA
  5319                           fsr0l	equ	0xFE9
  5320                           wreg	equ	0xFE8
  5321                           postdec1	equ	0xFE5
  5322                           fsr1h	equ	0xFE2
  5323                           fsr1l	equ	0xFE1
  5324                           indf2	equ	0xFDF
  5325                           postinc2	equ	0xFDE
  5326                           postdec2	equ	0xFDD
  5327                           fsr2h	equ	0xFDA
  5328                           fsr2l	equ	0xFD9
  5329                           status	equ	0xFD8
  5330                           
  5331 ;; *************** function i2___llmod *****************
  5332 ;; Defined at:
  5333 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;  dividend        4   13[COMRAM] unsigned long 
  5336 ;;  divisor         4   17[COMRAM] unsigned long 
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  __llmod         1   21[COMRAM] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  4   13[COMRAM] unsigned long 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5348 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5351 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;Total ram usage:        9 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; This function calls:
  5355 ;;		Nothing
  5356 ;; This function is called by:
  5357 ;;		i2_printf
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text28
  5362  001634                     __ptext28:
  5363                           	opt stack 0
  5364  001634                     i2___llmod:
  5365                           	opt stack 20
  5366                           
  5367                           ;incstack = 0
  5368  001634  5012               	movf	i2___llmod@divisor,w,c
  5369  001636  1013               	iorwf	i2___llmod@divisor+1,w,c
  5370  001638  1014               	iorwf	i2___llmod@divisor+2,w,c
  5371  00163A  1015               	iorwf	i2___llmod@divisor+3,w,c
  5372  00163C  B4D8               	btfsc	status,2,c
  5373  00163E  D024               	goto	i2l955
  5374  001640  0E01               	movlw	1
  5375  001642  6E16               	movwf	i2___llmod@counter,c
  5376  001644  D006               	goto	i2l3071
  5377  001646                     i2l3069:
  5378  001646  90D8               	bcf	status,0,c
  5379  001648  3612               	rlcf	i2___llmod@divisor,f,c
  5380  00164A  3613               	rlcf	i2___llmod@divisor+1,f,c
  5381  00164C  3614               	rlcf	i2___llmod@divisor+2,f,c
  5382  00164E  3615               	rlcf	i2___llmod@divisor+3,f,c
  5383  001650  2A16               	incf	i2___llmod@counter,f,c
  5384  001652                     i2l3071:
  5385  001652  AE15               	btfss	i2___llmod@divisor+3,7,c
  5386  001654  D7F8               	goto	i2l3069
  5387  001656                     i2l3073:
  5388  001656  5012               	movf	i2___llmod@divisor,w,c
  5389  001658  5C0E               	subwf	i2___llmod@dividend,w,c
  5390  00165A  5013               	movf	i2___llmod@divisor+1,w,c
  5391  00165C  580F               	subwfb	i2___llmod@dividend+1,w,c
  5392  00165E  5014               	movf	i2___llmod@divisor+2,w,c
  5393  001660  5810               	subwfb	i2___llmod@dividend+2,w,c
  5394  001662  5015               	movf	i2___llmod@divisor+3,w,c
  5395  001664  5811               	subwfb	i2___llmod@dividend+3,w,c
  5396  001666  A0D8               	btfss	status,0,c
  5397  001668  D008               	goto	i2l3077
  5398  00166A  5012               	movf	i2___llmod@divisor,w,c
  5399  00166C  5E0E               	subwf	i2___llmod@dividend,f,c
  5400  00166E  5013               	movf	i2___llmod@divisor+1,w,c
  5401  001670  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  5402  001672  5014               	movf	i2___llmod@divisor+2,w,c
  5403  001674  5A10               	subwfb	i2___llmod@dividend+2,f,c
  5404  001676  5015               	movf	i2___llmod@divisor+3,w,c
  5405  001678  5A11               	subwfb	i2___llmod@dividend+3,f,c
  5406  00167A                     i2l3077:
  5407  00167A  90D8               	bcf	status,0,c
  5408  00167C  3215               	rrcf	i2___llmod@divisor+3,f,c
  5409  00167E  3214               	rrcf	i2___llmod@divisor+2,f,c
  5410  001680  3213               	rrcf	i2___llmod@divisor+1,f,c
  5411  001682  3212               	rrcf	i2___llmod@divisor,f,c
  5412  001684  2E16               	decfsz	i2___llmod@counter,f,c
  5413  001686  D7E7               	goto	i2l3073
  5414  001688                     i2l955:
  5415  001688  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  5416  00168C  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  5417  001690  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  5418  001694  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  5419  001698  0012               	return		;funcret
  5420  00169A                     __end_ofi2___llmod:
  5421                           	opt stack 0
  5422                           pclatu	equ	0xFFB
  5423                           pclath	equ	0xFFA
  5424                           tblptru	equ	0xFF8
  5425                           tblptrh	equ	0xFF7
  5426                           tblptrl	equ	0xFF6
  5427                           tablat	equ	0xFF5
  5428                           prodh	equ	0xFF4
  5429                           prodl	equ	0xFF3
  5430                           intcon	equ	0xFF2
  5431                           intcon3	equ	0xFF0
  5432                           postinc0	equ	0xFEE
  5433                           fsr0h	equ	0xFEA
  5434                           fsr0l	equ	0xFE9
  5435                           wreg	equ	0xFE8
  5436                           postdec1	equ	0xFE5
  5437                           fsr1h	equ	0xFE2
  5438                           fsr1l	equ	0xFE1
  5439                           indf2	equ	0xFDF
  5440                           postinc2	equ	0xFDE
  5441                           postdec2	equ	0xFDD
  5442                           fsr2h	equ	0xFDA
  5443                           fsr2l	equ	0xFD9
  5444                           status	equ	0xFD8
  5445                           
  5446 ;; *************** function i2___lldiv *****************
  5447 ;; Defined at:
  5448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;  dividend        4    0[COMRAM] unsigned long 
  5451 ;;  divisor         4    4[COMRAM] unsigned long 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  __lldiv         4    8[COMRAM] unsigned long 
  5454 ;;  __lldiv         1   12[COMRAM] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  4    0[COMRAM] unsigned long 
  5457 ;; Registers used:
  5458 ;;		wreg, status,2, status,0
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5464 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;Total ram usage:       13 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		i2_printf
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text29
  5478  0014C2                     __ptext29:
  5479                           	opt stack 0
  5480  0014C2                     i2___lldiv:
  5481                           	opt stack 20
  5482                           
  5483                           ;incstack = 0
  5484  0014C2  0E00               	movlw	0
  5485  0014C4  6E09               	movwf	i2___lldiv@quotient,c
  5486  0014C6  0E00               	movlw	0
  5487  0014C8  6E0A               	movwf	i2___lldiv@quotient+1,c
  5488  0014CA  0E00               	movlw	0
  5489  0014CC  6E0B               	movwf	i2___lldiv@quotient+2,c
  5490  0014CE  0E00               	movlw	0
  5491  0014D0  6E0C               	movwf	i2___lldiv@quotient+3,c
  5492  0014D2  5005               	movf	i2___lldiv@divisor,w,c
  5493  0014D4  1006               	iorwf	i2___lldiv@divisor+1,w,c
  5494  0014D6  1007               	iorwf	i2___lldiv@divisor+2,w,c
  5495  0014D8  1008               	iorwf	i2___lldiv@divisor+3,w,c
  5496  0014DA  B4D8               	btfsc	status,2,c
  5497  0014DC  D02A               	goto	i2l945
  5498  0014DE  0E01               	movlw	1
  5499  0014E0  6E0D               	movwf	i2___lldiv@counter,c
  5500  0014E2  D006               	goto	i2l3051
  5501  0014E4                     i2l3049:
  5502  0014E4  90D8               	bcf	status,0,c
  5503  0014E6  3605               	rlcf	i2___lldiv@divisor,f,c
  5504  0014E8  3606               	rlcf	i2___lldiv@divisor+1,f,c
  5505  0014EA  3607               	rlcf	i2___lldiv@divisor+2,f,c
  5506  0014EC  3608               	rlcf	i2___lldiv@divisor+3,f,c
  5507  0014EE  2A0D               	incf	i2___lldiv@counter,f,c
  5508  0014F0                     i2l3051:
  5509  0014F0  AE08               	btfss	i2___lldiv@divisor+3,7,c
  5510  0014F2  D7F8               	goto	i2l3049
  5511  0014F4                     i2l3053:
  5512  0014F4  90D8               	bcf	status,0,c
  5513  0014F6  3609               	rlcf	i2___lldiv@quotient,f,c
  5514  0014F8  360A               	rlcf	i2___lldiv@quotient+1,f,c
  5515  0014FA  360B               	rlcf	i2___lldiv@quotient+2,f,c
  5516  0014FC  360C               	rlcf	i2___lldiv@quotient+3,f,c
  5517  0014FE  5005               	movf	i2___lldiv@divisor,w,c
  5518  001500  5C01               	subwf	i2___lldiv@dividend,w,c
  5519  001502  5006               	movf	i2___lldiv@divisor+1,w,c
  5520  001504  5802               	subwfb	i2___lldiv@dividend+1,w,c
  5521  001506  5007               	movf	i2___lldiv@divisor+2,w,c
  5522  001508  5803               	subwfb	i2___lldiv@dividend+2,w,c
  5523  00150A  5008               	movf	i2___lldiv@divisor+3,w,c
  5524  00150C  5804               	subwfb	i2___lldiv@dividend+3,w,c
  5525  00150E  A0D8               	btfss	status,0,c
  5526  001510  D009               	goto	i2l3061
  5527  001512  5005               	movf	i2___lldiv@divisor,w,c
  5528  001514  5E01               	subwf	i2___lldiv@dividend,f,c
  5529  001516  5006               	movf	i2___lldiv@divisor+1,w,c
  5530  001518  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  5531  00151A  5007               	movf	i2___lldiv@divisor+2,w,c
  5532  00151C  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  5533  00151E  5008               	movf	i2___lldiv@divisor+3,w,c
  5534  001520  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  5535  001522  8009               	bsf	i2___lldiv@quotient,0,c
  5536  001524                     i2l3061:
  5537  001524  90D8               	bcf	status,0,c
  5538  001526  3208               	rrcf	i2___lldiv@divisor+3,f,c
  5539  001528  3207               	rrcf	i2___lldiv@divisor+2,f,c
  5540  00152A  3206               	rrcf	i2___lldiv@divisor+1,f,c
  5541  00152C  3205               	rrcf	i2___lldiv@divisor,f,c
  5542  00152E  2E0D               	decfsz	i2___lldiv@counter,f,c
  5543  001530  D7E1               	goto	i2l3053
  5544  001532                     i2l945:
  5545  001532  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  5546  001536  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  5547  00153A  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  5548  00153E  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  5549  001542  0012               	return		;funcret
  5550  001544                     __end_ofi2___lldiv:
  5551                           	opt stack 0
  5552                           pclatu	equ	0xFFB
  5553                           pclath	equ	0xFFA
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           intcon3	equ	0xFF0
  5562                           postinc0	equ	0xFEE
  5563                           fsr0h	equ	0xFEA
  5564                           fsr0l	equ	0xFE9
  5565                           wreg	equ	0xFE8
  5566                           postdec1	equ	0xFE5
  5567                           fsr1h	equ	0xFE2
  5568                           fsr1l	equ	0xFE1
  5569                           indf2	equ	0xFDF
  5570                           postinc2	equ	0xFDE
  5571                           postdec2	equ	0xFDD
  5572                           fsr2h	equ	0xFDA
  5573                           fsr2l	equ	0xFD9
  5574                           status	equ	0xFD8
  5575                           
  5576 ;; *************** function i2_lcdClear *****************
  5577 ;; Defined at:
  5578 ;;		line 74 in file "lcd.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;		None
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;Total ram usage:        0 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    2
  5599 ;; This function calls:
  5600 ;;		i2_lcdInst
  5601 ;; This function is called by:
  5602 ;;		_sortBatteryInterruptService
  5603 ;;		_setAngle
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text30
  5608  001AF8                     __ptext30:
  5609                           	opt stack 0
  5610  001AF8                     i2_lcdClear:
  5611                           	opt stack 19
  5612                           
  5613                           ;lcd.c: 75: lcdInst(0b00000001);
  5614                           
  5615                           ;incstack = 0
  5616  001AF8  0E01               	movlw	1
  5617  001AFA  EC46  F00D         	call	i2_lcdInst
  5618  001AFE  0012               	return		;funcret
  5619  001B00                     __end_ofi2_lcdClear:
  5620                           	opt stack 0
  5621                           pclatu	equ	0xFFB
  5622                           pclath	equ	0xFFA
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           intcon	equ	0xFF2
  5630                           intcon3	equ	0xFF0
  5631                           postinc0	equ	0xFEE
  5632                           fsr0h	equ	0xFEA
  5633                           fsr0l	equ	0xFE9
  5634                           wreg	equ	0xFE8
  5635                           postdec1	equ	0xFE5
  5636                           fsr1h	equ	0xFE2
  5637                           fsr1l	equ	0xFE1
  5638                           indf2	equ	0xFDF
  5639                           postinc2	equ	0xFDE
  5640                           postdec2	equ	0xFDD
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function i2_lcdInst *****************
  5646 ;; Defined at:
  5647 ;;		line 27 in file "lcd.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  data            1    wreg     unsigned char 
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;  data            1    3[COMRAM] unsigned char 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      void 
  5654 ;; Registers used:
  5655 ;;		wreg, status,2, status,0, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;Total ram usage:        2 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    1
  5668 ;; This function calls:
  5669 ;;		i2_lcdNibble
  5670 ;; This function is called by:
  5671 ;;		i2_lcdClear
  5672 ;;		i2_lcdNewline
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text31
  5677  001A8C                     __ptext31:
  5678                           	opt stack 0
  5679  001A8C                     i2_lcdInst:
  5680                           	opt stack 17
  5681                           
  5682                           ;incstack = 0
  5683                           ;i2lcdInst@data stored from wreg
  5684  001A8C  6E04               	movwf	i2lcdInst@data,c
  5685                           
  5686                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  5687  001A8E  948C               	bcf	3980,2,c	;volatile
  5688                           
  5689                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5690  001A90  0E74               	movlw	116
  5691  001A92                     i2u337_47:
  5692  001A92  2EE8               	decfsz	wreg,f,c
  5693  001A94  D7FE               	bra	i2u337_47
  5694  001A96  D000               	nop2	
  5695                           
  5696                           ;lcd.c: 30: lcdNibble(data);
  5697  001A98  5004               	movf	i2lcdInst@data,w,c
  5698  001A9A  EC4D  F00B         	call	i2_lcdNibble
  5699                           
  5700                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  5701  001A9E  0E04               	movlw	4
  5702  001AA0  6E03               	movwf	??i2_lcdInst& (0+255),c
  5703  001AA2  0E3E               	movlw	62
  5704  001AA4                     i2u338_47:
  5705  001AA4  2EE8               	decfsz	wreg,f,c
  5706  001AA6  D7FE               	bra	i2u338_47
  5707  001AA8  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
  5708  001AAA  D7FC               	bra	i2u338_47
  5709  001AAC  0012               	return		;funcret
  5710  001AAE                     __end_ofi2_lcdInst:
  5711                           	opt stack 0
  5712                           pclatu	equ	0xFFB
  5713                           pclath	equ	0xFFA
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           prodh	equ	0xFF4
  5719                           prodl	equ	0xFF3
  5720                           intcon	equ	0xFF2
  5721                           intcon3	equ	0xFF0
  5722                           postinc0	equ	0xFEE
  5723                           fsr0h	equ	0xFEA
  5724                           fsr0l	equ	0xFE9
  5725                           wreg	equ	0xFE8
  5726                           postdec1	equ	0xFE5
  5727                           fsr1h	equ	0xFE2
  5728                           fsr1l	equ	0xFE1
  5729                           indf2	equ	0xFDF
  5730                           postinc2	equ	0xFDE
  5731                           postdec2	equ	0xFDD
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function i2_lcdNibble *****************
  5737 ;; Defined at:
  5738 ;;		line 46 in file "lcd.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  data            1    wreg     unsigned char 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  data            1    1[COMRAM] unsigned char 
  5743 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  1    wreg      void 
  5746 ;; Registers used:
  5747 ;;		wreg, status,2, status,0
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;Total ram usage:        2 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; This function calls:
  5760 ;;		Nothing
  5761 ;; This function is called by:
  5762 ;;		i2_lcdInst
  5763 ;;		i2_putch
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text32
  5768  00169A                     __ptext32:
  5769                           	opt stack 0
  5770  00169A                     i2_lcdNibble:
  5771                           	opt stack 19
  5772                           
  5773                           ;incstack = 0
  5774                           ;i2lcdNibble@data stored from wreg
  5775  00169A  6E02               	movwf	i2lcdNibble@data,c
  5776                           
  5777                           ;lcd.c: 48: char temp = data & 0xF0;
  5778  00169C  5002               	movf	i2lcdNibble@data,w,c
  5779  00169E  0BF0               	andlw	240
  5780  0016A0  6E01               	movwf	i2lcdNibble@temp,c
  5781                           
  5782                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5783  0016A2  508C               	movf	3980,w,c	;volatile
  5784  0016A4  0B0F               	andlw	15
  5785  0016A6  6E8C               	movwf	3980,c	;volatile
  5786                           
  5787                           ;lcd.c: 50: LATD = temp | LATD;
  5788  0016A8  5001               	movf	i2lcdNibble@temp,w,c
  5789  0016AA  108C               	iorwf	3980,w,c	;volatile
  5790  0016AC  6E8C               	movwf	3980,c	;volatile
  5791                           
  5792                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5793  0016AE  968C               	bcf	3980,3,c	;volatile
  5794                           
  5795                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5796  0016B0  0ED6               	movlw	214
  5797  0016B2                     i2u339_47:
  5798  0016B2  D000               	nop2	
  5799  0016B4  D000               	nop2	
  5800  0016B6  2EE8               	decfsz	wreg,f,c
  5801  0016B8  D7FC               	bra	i2u339_47
  5802  0016BA  D000               	nop2	
  5803                           
  5804                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5805  0016BC  868C               	bsf	3980,3,c	;volatile
  5806                           
  5807                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5808  0016BE  0ED6               	movlw	214
  5809  0016C0                     i2u340_47:
  5810  0016C0  D000               	nop2	
  5811  0016C2  D000               	nop2	
  5812  0016C4  2EE8               	decfsz	wreg,f,c
  5813  0016C6  D7FC               	bra	i2u340_47
  5814  0016C8  D000               	nop2	
  5815                           
  5816                           ;lcd.c: 58: data = data << 4;
  5817  0016CA  3802               	swapf	i2lcdNibble@data,w,c
  5818  0016CC  0BF0               	andlw	240
  5819  0016CE  6E02               	movwf	i2lcdNibble@data,c
  5820                           
  5821                           ;lcd.c: 60: temp = data & 0xF0;
  5822  0016D0  5002               	movf	i2lcdNibble@data,w,c
  5823  0016D2  0BF0               	andlw	240
  5824  0016D4  6E01               	movwf	i2lcdNibble@temp,c
  5825                           
  5826                           ;lcd.c: 61: LATD = LATD & 0x0F;
  5827  0016D6  508C               	movf	3980,w,c	;volatile
  5828  0016D8  0B0F               	andlw	15
  5829  0016DA  6E8C               	movwf	3980,c	;volatile
  5830                           
  5831                           ;lcd.c: 62: LATD = temp | LATD;
  5832  0016DC  5001               	movf	i2lcdNibble@temp,w,c
  5833  0016DE  108C               	iorwf	3980,w,c	;volatile
  5834  0016E0  6E8C               	movwf	3980,c	;volatile
  5835                           
  5836                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  5837  0016E2  968C               	bcf	3980,3,c	;volatile
  5838                           
  5839                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5840  0016E4  0ED6               	movlw	214
  5841  0016E6                     i2u341_47:
  5842  0016E6  D000               	nop2	
  5843  0016E8  D000               	nop2	
  5844  0016EA  2EE8               	decfsz	wreg,f,c
  5845  0016EC  D7FC               	bra	i2u341_47
  5846  0016EE  D000               	nop2	
  5847                           
  5848                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  5849  0016F0  868C               	bsf	3980,3,c	;volatile
  5850                           
  5851                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5852  0016F2  0ED6               	movlw	214
  5853  0016F4                     i2u342_47:
  5854  0016F4  D000               	nop2	
  5855  0016F6  D000               	nop2	
  5856  0016F8  2EE8               	decfsz	wreg,f,c
  5857  0016FA  D7FC               	bra	i2u342_47
  5858  0016FC  D000               	nop2	
  5859  0016FE  0012               	return		;funcret
  5860  001700                     __end_ofi2_lcdNibble:
  5861                           	opt stack 0
  5862                           pclatu	equ	0xFFB
  5863                           pclath	equ	0xFFA
  5864                           tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           prodh	equ	0xFF4
  5869                           prodl	equ	0xFF3
  5870                           intcon	equ	0xFF2
  5871                           intcon3	equ	0xFF0
  5872                           postinc0	equ	0xFEE
  5873                           fsr0h	equ	0xFEA
  5874                           fsr0l	equ	0xFE9
  5875                           wreg	equ	0xFE8
  5876                           postdec1	equ	0xFE5
  5877                           fsr1h	equ	0xFE2
  5878                           fsr1l	equ	0xFE1
  5879                           indf2	equ	0xFDF
  5880                           postinc2	equ	0xFDE
  5881                           postdec2	equ	0xFDD
  5882                           fsr2h	equ	0xFDA
  5883                           fsr2l	equ	0xFD9
  5884                           status	equ	0xFD8
  5885                           
  5886 ;; *************** function _angleToPulse *****************
  5887 ;; Defined at:
  5888 ;;		line 26 in file "servo.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;  angle           2   69[COMRAM] int 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  a000            4   88[COMRAM] long 
  5893 ;;  a180            4   81[COMRAM] long 
  5894 ;;  offset          4   77[COMRAM] long 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  4   69[COMRAM] long 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:       23 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    2
  5911 ;; This function calls:
  5912 ;;		___altoft
  5913 ;;		___awtoft
  5914 ;;		___ftadd
  5915 ;;		___ftdiv
  5916 ;;		___ftmul
  5917 ;;		___fttol
  5918 ;; This function is called by:
  5919 ;;		_setAngle
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text33
  5924  0009E4                     __ptext33:
  5925                           	opt stack 0
  5926  0009E4                     _angleToPulse:
  5927                           	opt stack 19
  5928                           
  5929                           ;servo.c: 27: long offset = 0;
  5930                           
  5931                           ;incstack = 0
  5932  0009E4  0E00               	movlw	0
  5933  0009E6  6E4E               	movwf	angleToPulse@offset,c
  5934  0009E8  0E00               	movlw	0
  5935  0009EA  6E4F               	movwf	angleToPulse@offset+1,c
  5936  0009EC  0E00               	movlw	0
  5937  0009EE  6E50               	movwf	angleToPulse@offset+2,c
  5938  0009F0  0E00               	movlw	0
  5939  0009F2  6E51               	movwf	angleToPulse@offset+3,c
  5940                           
  5941                           ;servo.c: 28: long a000 = 1250;
  5942  0009F4  0EE2               	movlw	226
  5943  0009F6  6E59               	movwf	angleToPulse@a000,c
  5944  0009F8  0E04               	movlw	4
  5945  0009FA  6E5A               	movwf	angleToPulse@a000+1,c
  5946  0009FC  0E00               	movlw	0
  5947  0009FE  6E5B               	movwf	angleToPulse@a000+2,c
  5948  000A00  0E00               	movlw	0
  5949  000A02  6E5C               	movwf	angleToPulse@a000+3,c
  5950                           
  5951                           ;servo.c: 29: long a180 = 6250;
  5952  000A04  0E6A               	movlw	106
  5953  000A06  6E52               	movwf	angleToPulse@a180,c
  5954  000A08  0E18               	movlw	24
  5955  000A0A  6E53               	movwf	angleToPulse@a180+1,c
  5956  000A0C  0E00               	movlw	0
  5957  000A0E  6E54               	movwf	angleToPulse@a180+2,c
  5958  000A10  0E00               	movlw	0
  5959  000A12  6E55               	movwf	angleToPulse@a180+3,c
  5960                           
  5961                           ;servo.c: 31: return a000 + angle/180.0*(a180-a000) + offset;
  5962  000A14  C059  F04A         	movff	angleToPulse@a000,??_angleToPulse
  5963  000A18  C05A  F04B         	movff	angleToPulse@a000+1,??_angleToPulse+1
  5964  000A1C  C05B  F04C         	movff	angleToPulse@a000+2,??_angleToPulse+2
  5965  000A20  C05C  F04D         	movff	angleToPulse@a000+3,??_angleToPulse+3
  5966  000A24  1E4A               	comf	??_angleToPulse,f,c
  5967  000A26  1E4B               	comf	??_angleToPulse+1,f,c
  5968  000A28  1E4C               	comf	??_angleToPulse+2,f,c
  5969  000A2A  1E4D               	comf	??_angleToPulse+3,f,c
  5970  000A2C  2A4A               	incf	??_angleToPulse,f,c
  5971  000A2E  0E00               	movlw	0
  5972  000A30  224B               	addwfc	??_angleToPulse+1,f,c
  5973  000A32  224C               	addwfc	??_angleToPulse+2,f,c
  5974  000A34  224D               	addwfc	??_angleToPulse+3,f,c
  5975  000A36  5052               	movf	angleToPulse@a180,w,c
  5976  000A38  244A               	addwf	??_angleToPulse,w,c
  5977  000A3A  6E09               	movwf	___altoft@c,c
  5978  000A3C  5053               	movf	angleToPulse@a180+1,w,c
  5979  000A3E  204B               	addwfc	??_angleToPulse+1,w,c
  5980  000A40  6E0A               	movwf	___altoft@c+1,c
  5981  000A42  5054               	movf	angleToPulse@a180+2,w,c
  5982  000A44  204C               	addwfc	??_angleToPulse+2,w,c
  5983  000A46  6E0B               	movwf	___altoft@c+2,c
  5984  000A48  5055               	movf	angleToPulse@a180+3,w,c
  5985  000A4A  204D               	addwfc	??_angleToPulse+3,w,c
  5986  000A4C  6E0C               	movwf	___altoft@c+3,c
  5987  000A4E  ECDE  F00A         	call	___altoft	;wreg free
  5988  000A52  C009  F01F         	movff	?___altoft,___ftmul@f2
  5989  000A56  C00A  F020         	movff	?___altoft+1,___ftmul@f2+1
  5990  000A5A  C00B  F021         	movff	?___altoft+2,___ftmul@f2+2
  5991  000A5E  0E00               	movlw	0
  5992  000A60  6E10               	movwf	___ftdiv@f2,c
  5993  000A62  0E34               	movlw	52
  5994  000A64  6E11               	movwf	___ftdiv@f2+1,c
  5995  000A66  0E43               	movlw	67
  5996  000A68  6E12               	movwf	___ftdiv@f2+2,c
  5997  000A6A  C046  F009         	movff	angleToPulse@angle,___awtoft@c
  5998  000A6E  C047  F00A         	movff	angleToPulse@angle+1,___awtoft@c+1
  5999  000A72  EC63  F00C         	call	___awtoft	;wreg free
  6000  000A76  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  6001  000A7A  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  6002  000A7E  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  6003  000A82  EC08  F007         	call	___ftdiv	;wreg free
  6004  000A86  C00D  F01C         	movff	?___ftdiv,___ftmul@f1
  6005  000A8A  C00E  F01D         	movff	?___ftdiv+1,___ftmul@f1+1
  6006  000A8E  C00F  F01E         	movff	?___ftdiv+2,___ftmul@f1+2
  6007  000A92  EC8E  F006         	call	___ftmul	;wreg free
  6008  000A96  C01C  F02E         	movff	?___ftmul,___ftadd@f2
  6009  000A9A  C01D  F02F         	movff	?___ftmul+1,___ftadd@f2+1
  6010  000A9E  C01E  F030         	movff	?___ftmul+2,___ftadd@f2+2
  6011  000AA2  C059  F009         	movff	angleToPulse@a000,___altoft@c
  6012  000AA6  C05A  F00A         	movff	angleToPulse@a000+1,___altoft@c+1
  6013  000AAA  C05B  F00B         	movff	angleToPulse@a000+2,___altoft@c+2
  6014  000AAE  C05C  F00C         	movff	angleToPulse@a000+3,___altoft@c+3
  6015  000AB2  ECDE  F00A         	call	___altoft	;wreg free
  6016  000AB6  C009  F02B         	movff	?___altoft,___ftadd@f1
  6017  000ABA  C00A  F02C         	movff	?___altoft+1,___ftadd@f1+1
  6018  000ABE  C00B  F02D         	movff	?___altoft+2,___ftadd@f1+2
  6019  000AC2  EC1C  F004         	call	___ftadd	;wreg free
  6020  000AC6  C02B  F056         	movff	?___ftadd,_angleToPulse$1198
  6021  000ACA  C02C  F057         	movff	?___ftadd+1,_angleToPulse$1198+1
  6022  000ACE  C02D  F058         	movff	?___ftadd+2,_angleToPulse$1198+2
  6023                           
  6024                           ;servo.c: 31: return a000 + angle/180.0*(a180-a000) + offset;
  6025  000AD2  C04E  F009         	movff	angleToPulse@offset,___altoft@c
  6026  000AD6  C04F  F00A         	movff	angleToPulse@offset+1,___altoft@c+1
  6027  000ADA  C050  F00B         	movff	angleToPulse@offset+2,___altoft@c+2
  6028  000ADE  C051  F00C         	movff	angleToPulse@offset+3,___altoft@c+3
  6029  000AE2  ECDE  F00A         	call	___altoft	;wreg free
  6030  000AE6  C009  F02E         	movff	?___altoft,___ftadd@f2
  6031  000AEA  C00A  F02F         	movff	?___altoft+1,___ftadd@f2+1
  6032  000AEE  C00B  F030         	movff	?___altoft+2,___ftadd@f2+2
  6033  000AF2  C056  F02B         	movff	_angleToPulse$1198,___ftadd@f1
  6034  000AF6  C057  F02C         	movff	_angleToPulse$1198+1,___ftadd@f1+1
  6035  000AFA  C058  F02D         	movff	_angleToPulse$1198+2,___ftadd@f1+2
  6036  000AFE  EC1C  F004         	call	___ftadd	;wreg free
  6037  000B02  C02B  F037         	movff	?___ftadd,___fttol@f1
  6038  000B06  C02C  F038         	movff	?___ftadd+1,___fttol@f1+1
  6039  000B0A  C02D  F039         	movff	?___ftadd+2,___fttol@f1+2
  6040  000B0E  EC14  F006         	call	___fttol	;wreg free
  6041  000B12  C037  F046         	movff	?___fttol,?_angleToPulse
  6042  000B16  C038  F047         	movff	?___fttol+1,?_angleToPulse+1
  6043  000B1A  C039  F048         	movff	?___fttol+2,?_angleToPulse+2
  6044  000B1E  C03A  F049         	movff	?___fttol+3,?_angleToPulse+3
  6045  000B22  0012               	return	
  6046  000B24                     __end_of_angleToPulse:
  6047                           	opt stack 0
  6048                           pclatu	equ	0xFFB
  6049                           pclath	equ	0xFFA
  6050                           tblptru	equ	0xFF8
  6051                           tblptrh	equ	0xFF7
  6052                           tblptrl	equ	0xFF6
  6053                           tablat	equ	0xFF5
  6054                           prodh	equ	0xFF4
  6055                           prodl	equ	0xFF3
  6056                           intcon	equ	0xFF2
  6057                           intcon3	equ	0xFF0
  6058                           postinc0	equ	0xFEE
  6059                           fsr0h	equ	0xFEA
  6060                           fsr0l	equ	0xFE9
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1h	equ	0xFE2
  6064                           fsr1l	equ	0xFE1
  6065                           indf2	equ	0xFDF
  6066                           postinc2	equ	0xFDE
  6067                           postdec2	equ	0xFDD
  6068                           fsr2h	equ	0xFDA
  6069                           fsr2l	equ	0xFD9
  6070                           status	equ	0xFD8
  6071                           
  6072 ;; *************** function ___fttol *****************
  6073 ;; Defined at:
  6074 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  f1              3   54[COMRAM] float 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  lval            4   64[COMRAM] unsigned long 
  6079 ;;  exp1            1   68[COMRAM] unsigned char 
  6080 ;;  sign1           1   63[COMRAM] unsigned char 
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  4   54[COMRAM] long 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6092 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;Total ram usage:       15 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; This function calls:
  6097 ;;		Nothing
  6098 ;; This function is called by:
  6099 ;;		_angleToPulse
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text34
  6104  000C28                     __ptext34:
  6105                           	opt stack 0
  6106  000C28                     ___fttol:
  6107                           	opt stack 20
  6108                           
  6109                           ;incstack = 0
  6110  000C28  C039  F03B         	movff	___fttol@f1+2,??___fttol
  6111  000C2C  6A3C               	clrf	(??___fttol+1)& (0+255),c
  6112  000C2E  6A3D               	clrf	(??___fttol+2)& (0+255),c
  6113  000C30  3438               	rlcf	___fttol@f1+1,w,c
  6114  000C32  363B               	rlcf	??___fttol& (0+255),f,c
  6115  000C34  E301               	bnc	u238_41
  6116  000C36  803C               	bsf	(??___fttol+1)& (0+255),0,c
  6117  000C38                     u238_41:
  6118  000C38  503B               	movf	??___fttol,w,c
  6119  000C3A  6E45               	movwf	___fttol@exp1,c
  6120  000C3C  5045               	movf	___fttol@exp1,w,c
  6121  000C3E  A4D8               	btfss	status,2,c
  6122  000C40  D009               	goto	i2l2995
  6123  000C42  0E00               	movlw	0
  6124  000C44  6E37               	movwf	?___fttol,c
  6125  000C46  0E00               	movlw	0
  6126  000C48  6E38               	movwf	?___fttol+1,c
  6127  000C4A  0E00               	movlw	0
  6128  000C4C  6E39               	movwf	?___fttol+2,c
  6129  000C4E  0E00               	movlw	0
  6130  000C50  6E3A               	movwf	?___fttol+3,c
  6131  000C52  0012               	return	
  6132  000C54                     i2l2995:
  6133  000C54  0E17               	movlw	23
  6134  000C56  6E3B               	movwf	??___fttol& (0+255),c
  6135  000C58  C037  F03C         	movff	___fttol@f1,??___fttol+1
  6136  000C5C  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  6137  000C60  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  6138  000C64  283B               	incf	??___fttol,w,c
  6139  000C66  6E3F               	movwf	(??___fttol+4)& (0+255),c
  6140  000C68  D004               	goto	i2u240_40
  6141  000C6A                     i2u240_45:
  6142  000C6A  90D8               	bcf	status,0,c
  6143  000C6C  323E               	rrcf	??___fttol+3,f,c
  6144  000C6E  323D               	rrcf	??___fttol+2,f,c
  6145  000C70  323C               	rrcf	??___fttol+1,f,c
  6146  000C72                     i2u240_40:
  6147  000C72  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  6148  000C74  D7FA               	goto	i2u240_45
  6149  000C76  503C               	movf	??___fttol+1,w,c
  6150  000C78  6E40               	movwf	___fttol@sign1,c
  6151  000C7A  8E38               	bsf	___fttol@f1+1,7,c
  6152  000C7C  0EFF               	movlw	255
  6153  000C7E  1637               	andwf	___fttol@f1,f,c
  6154  000C80  0EFF               	movlw	255
  6155  000C82  1638               	andwf	___fttol@f1+1,f,c
  6156  000C84  0E00               	movlw	0
  6157  000C86  1639               	andwf	___fttol@f1+2,f,c
  6158  000C88  5037               	movf	___fttol@f1,w,c
  6159  000C8A  6E41               	movwf	___fttol@lval,c
  6160  000C8C  5038               	movf	___fttol@f1+1,w,c
  6161  000C8E  6E42               	movwf	___fttol@lval+1,c
  6162  000C90  5039               	movf	___fttol@f1+2,w,c
  6163  000C92  6E43               	movwf	___fttol@lval+2,c
  6164  000C94  6A44               	clrf	___fttol@lval+3,c
  6165  000C96  0E8E               	movlw	142
  6166  000C98  5E45               	subwf	___fttol@exp1,f,c
  6167  000C9A  AE45               	btfss	___fttol@exp1,7,c
  6168  000C9C  D016               	goto	i2l3017
  6169  000C9E  5045               	movf	___fttol@exp1,w,c
  6170  000CA0  0A80               	xorlw	128
  6171  000CA2  0F8F               	addlw	143
  6172  000CA4  B0D8               	btfsc	status,0,c
  6173  000CA6  D009               	goto	i2l3013
  6174  000CA8  0E00               	movlw	0
  6175  000CAA  6E37               	movwf	?___fttol,c
  6176  000CAC  0E00               	movlw	0
  6177  000CAE  6E38               	movwf	?___fttol+1,c
  6178  000CB0  0E00               	movlw	0
  6179  000CB2  6E39               	movwf	?___fttol+2,c
  6180  000CB4  0E00               	movlw	0
  6181  000CB6  6E3A               	movwf	?___fttol+3,c
  6182  000CB8  0012               	return	
  6183  000CBA                     i2l3013:
  6184  000CBA  90D8               	bcf	status,0,c
  6185  000CBC  3244               	rrcf	___fttol@lval+3,f,c
  6186  000CBE  3243               	rrcf	___fttol@lval+2,f,c
  6187  000CC0  3242               	rrcf	___fttol@lval+1,f,c
  6188  000CC2  3241               	rrcf	___fttol@lval,f,c
  6189  000CC4  3E45               	incfsz	___fttol@exp1,f,c
  6190  000CC6  D7F9               	goto	i2l3013
  6191  000CC8  D015               	goto	i2l3027
  6192  000CCA                     i2l3017:
  6193  000CCA  0E17               	movlw	23
  6194  000CCC  6445               	cpfsgt	___fttol@exp1,c
  6195  000CCE  D00F               	goto	i2l3025
  6196  000CD0  0E00               	movlw	0
  6197  000CD2  6E37               	movwf	?___fttol,c
  6198  000CD4  0E00               	movlw	0
  6199  000CD6  6E38               	movwf	?___fttol+1,c
  6200  000CD8  0E00               	movlw	0
  6201  000CDA  6E39               	movwf	?___fttol+2,c
  6202  000CDC  0E00               	movlw	0
  6203  000CDE  6E3A               	movwf	?___fttol+3,c
  6204  000CE0  0012               	return	
  6205  000CE2                     i2l3023:
  6206  000CE2  90D8               	bcf	status,0,c
  6207  000CE4  3641               	rlcf	___fttol@lval,f,c
  6208  000CE6  3642               	rlcf	___fttol@lval+1,f,c
  6209  000CE8  3643               	rlcf	___fttol@lval+2,f,c
  6210  000CEA  3644               	rlcf	___fttol@lval+3,f,c
  6211  000CEC  0645               	decf	___fttol@exp1,f,c
  6212  000CEE                     i2l3025:
  6213  000CEE  5045               	movf	___fttol@exp1,w,c
  6214  000CF0  A4D8               	btfss	status,2,c
  6215  000CF2  D7F7               	goto	i2l3023
  6216  000CF4                     i2l3027:
  6217  000CF4  5040               	movf	___fttol@sign1,w,c
  6218  000CF6  B4D8               	btfsc	status,2,c
  6219  000CF8  D008               	goto	i2l3031
  6220  000CFA  1E44               	comf	___fttol@lval+3,f,c
  6221  000CFC  1E43               	comf	___fttol@lval+2,f,c
  6222  000CFE  1E42               	comf	___fttol@lval+1,f,c
  6223  000D00  6C41               	negf	___fttol@lval,c
  6224  000D02  0E00               	movlw	0
  6225  000D04  2242               	addwfc	___fttol@lval+1,f,c
  6226  000D06  2243               	addwfc	___fttol@lval+2,f,c
  6227  000D08  2244               	addwfc	___fttol@lval+3,f,c
  6228  000D0A                     i2l3031:
  6229  000D0A  C041  F037         	movff	___fttol@lval,?___fttol
  6230  000D0E  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  6231  000D12  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  6232  000D16  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  6233  000D1A  0012               	return	
  6234  000D1C                     __end_of___fttol:
  6235                           	opt stack 0
  6236                           pclatu	equ	0xFFB
  6237                           pclath	equ	0xFFA
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           intcon	equ	0xFF2
  6245                           intcon3	equ	0xFF0
  6246                           postinc0	equ	0xFEE
  6247                           fsr0h	equ	0xFEA
  6248                           fsr0l	equ	0xFE9
  6249                           wreg	equ	0xFE8
  6250                           postdec1	equ	0xFE5
  6251                           fsr1h	equ	0xFE2
  6252                           fsr1l	equ	0xFE1
  6253                           indf2	equ	0xFDF
  6254                           postinc2	equ	0xFDE
  6255                           postdec2	equ	0xFDD
  6256                           fsr2h	equ	0xFDA
  6257                           fsr2l	equ	0xFD9
  6258                           status	equ	0xFD8
  6259                           
  6260 ;; *************** function ___ftmul *****************
  6261 ;; Defined at:
  6262 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;  f1              3   27[COMRAM] float 
  6265 ;;  f2              3   30[COMRAM] float 
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  6268 ;;  sign            1   41[COMRAM] unsigned char 
  6269 ;;  cntr            1   40[COMRAM] unsigned char 
  6270 ;;  exp             1   36[COMRAM] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  3   27[COMRAM] float 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6280 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;Total ram usage:       15 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    1
  6287 ;; This function calls:
  6288 ;;		___ftpack
  6289 ;; This function is called by:
  6290 ;;		_angleToPulse
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text35
  6295  000D1C                     __ptext35:
  6296                           	opt stack 0
  6297  000D1C                     ___ftmul:
  6298                           	opt stack 19
  6299                           
  6300                           ;incstack = 0
  6301  000D1C  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  6302  000D20  6A23               	clrf	(??___ftmul+1)& (0+255),c
  6303  000D22  6A24               	clrf	(??___ftmul+2)& (0+255),c
  6304  000D24  341D               	rlcf	___ftmul@f1+1,w,c
  6305  000D26  3622               	rlcf	??___ftmul& (0+255),f,c
  6306  000D28  E301               	bnc	u231_41
  6307  000D2A  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  6308  000D2C                     u231_41:
  6309  000D2C  5022               	movf	??___ftmul,w,c
  6310  000D2E  6E25               	movwf	___ftmul@exp,c
  6311  000D30  5025               	movf	___ftmul@exp,w,c
  6312  000D32  A4D8               	btfss	status,2,c
  6313  000D34  D007               	goto	i2l2935
  6314  000D36  0E00               	movlw	0
  6315  000D38  6E1C               	movwf	?___ftmul,c
  6316  000D3A  0E00               	movlw	0
  6317  000D3C  6E1D               	movwf	?___ftmul+1,c
  6318  000D3E  0E00               	movlw	0
  6319  000D40  6E1E               	movwf	?___ftmul+2,c
  6320  000D42  0012               	return	
  6321  000D44                     i2l2935:
  6322  000D44  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  6323  000D48  6A23               	clrf	(??___ftmul+1)& (0+255),c
  6324  000D4A  6A24               	clrf	(??___ftmul+2)& (0+255),c
  6325  000D4C  3420               	rlcf	___ftmul@f2+1,w,c
  6326  000D4E  3622               	rlcf	??___ftmul& (0+255),f,c
  6327  000D50  E301               	bnc	u233_41
  6328  000D52  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  6329  000D54                     u233_41:
  6330  000D54  5022               	movf	??___ftmul,w,c
  6331  000D56  6E2A               	movwf	___ftmul@sign,c
  6332  000D58  502A               	movf	___ftmul@sign,w,c
  6333  000D5A  A4D8               	btfss	status,2,c
  6334  000D5C  D007               	goto	i2l2941
  6335  000D5E  0E00               	movlw	0
  6336  000D60  6E1C               	movwf	?___ftmul,c
  6337  000D62  0E00               	movlw	0
  6338  000D64  6E1D               	movwf	?___ftmul+1,c
  6339  000D66  0E00               	movlw	0
  6340  000D68  6E1E               	movwf	?___ftmul+2,c
  6341  000D6A  0012               	return	
  6342  000D6C                     i2l2941:
  6343  000D6C  502A               	movf	___ftmul@sign,w,c
  6344  000D6E  0F7B               	addlw	123
  6345  000D70  2625               	addwf	___ftmul@exp,f,c
  6346  000D72  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  6347  000D76  5021               	movf	___ftmul@f2+2,w,c
  6348  000D78  1A2A               	xorwf	___ftmul@sign,f,c
  6349  000D7A  0E80               	movlw	128
  6350  000D7C  162A               	andwf	___ftmul@sign,f,c
  6351  000D7E  8E1D               	bsf	___ftmul@f1+1,7,c
  6352  000D80  8E20               	bsf	___ftmul@f2+1,7,c
  6353  000D82  0EFF               	movlw	255
  6354  000D84  161F               	andwf	___ftmul@f2,f,c
  6355  000D86  0EFF               	movlw	255
  6356  000D88  1620               	andwf	___ftmul@f2+1,f,c
  6357  000D8A  0E00               	movlw	0
  6358  000D8C  1621               	andwf	___ftmul@f2+2,f,c
  6359  000D8E  0E00               	movlw	0
  6360  000D90  6E26               	movwf	___ftmul@f3_as_product,c
  6361  000D92  0E00               	movlw	0
  6362  000D94  6E27               	movwf	___ftmul@f3_as_product+1,c
  6363  000D96  0E00               	movlw	0
  6364  000D98  6E28               	movwf	___ftmul@f3_as_product+2,c
  6365  000D9A  0E07               	movlw	7
  6366  000D9C  6E29               	movwf	___ftmul@cntr,c
  6367  000D9E                     i2l2955:
  6368  000D9E  A01C               	btfss	___ftmul@f1,0,c
  6369  000DA0  D006               	goto	i2l2959
  6370  000DA2  501F               	movf	___ftmul@f2,w,c
  6371  000DA4  2626               	addwf	___ftmul@f3_as_product,f,c
  6372  000DA6  5020               	movf	___ftmul@f2+1,w,c
  6373  000DA8  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6374  000DAA  5021               	movf	___ftmul@f2+2,w,c
  6375  000DAC  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6376  000DAE                     i2l2959:
  6377  000DAE  90D8               	bcf	status,0,c
  6378  000DB0  321E               	rrcf	___ftmul@f1+2,f,c
  6379  000DB2  321D               	rrcf	___ftmul@f1+1,f,c
  6380  000DB4  321C               	rrcf	___ftmul@f1,f,c
  6381  000DB6  90D8               	bcf	status,0,c
  6382  000DB8  361F               	rlcf	___ftmul@f2,f,c
  6383  000DBA  3620               	rlcf	___ftmul@f2+1,f,c
  6384  000DBC  3621               	rlcf	___ftmul@f2+2,f,c
  6385  000DBE  2E29               	decfsz	___ftmul@cntr,f,c
  6386  000DC0  D7EE               	goto	i2l2955
  6387  000DC2  0E09               	movlw	9
  6388  000DC4  6E29               	movwf	___ftmul@cntr,c
  6389  000DC6                     i2l2965:
  6390  000DC6  A01C               	btfss	___ftmul@f1,0,c
  6391  000DC8  D006               	goto	i2l2969
  6392  000DCA  501F               	movf	___ftmul@f2,w,c
  6393  000DCC  2626               	addwf	___ftmul@f3_as_product,f,c
  6394  000DCE  5020               	movf	___ftmul@f2+1,w,c
  6395  000DD0  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6396  000DD2  5021               	movf	___ftmul@f2+2,w,c
  6397  000DD4  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6398  000DD6                     i2l2969:
  6399  000DD6  90D8               	bcf	status,0,c
  6400  000DD8  321E               	rrcf	___ftmul@f1+2,f,c
  6401  000DDA  321D               	rrcf	___ftmul@f1+1,f,c
  6402  000DDC  321C               	rrcf	___ftmul@f1,f,c
  6403  000DDE  90D8               	bcf	status,0,c
  6404  000DE0  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  6405  000DE2  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  6406  000DE4  3226               	rrcf	___ftmul@f3_as_product,f,c
  6407  000DE6  2E29               	decfsz	___ftmul@cntr,f,c
  6408  000DE8  D7EE               	goto	i2l2965
  6409  000DEA  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6410  000DEE  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6411  000DF2  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6412  000DF6  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  6413  000DFA  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  6414  000DFE  EC13  F009         	call	___ftpack	;wreg free
  6415  000E02  C001  F01C         	movff	?___ftpack,?___ftmul
  6416  000E06  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  6417  000E0A  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  6418  000E0E  0012               	return	
  6419  000E10                     __end_of___ftmul:
  6420                           	opt stack 0
  6421                           pclatu	equ	0xFFB
  6422                           pclath	equ	0xFFA
  6423                           tblptru	equ	0xFF8
  6424                           tblptrh	equ	0xFF7
  6425                           tblptrl	equ	0xFF6
  6426                           tablat	equ	0xFF5
  6427                           prodh	equ	0xFF4
  6428                           prodl	equ	0xFF3
  6429                           intcon	equ	0xFF2
  6430                           intcon3	equ	0xFF0
  6431                           postinc0	equ	0xFEE
  6432                           fsr0h	equ	0xFEA
  6433                           fsr0l	equ	0xFE9
  6434                           wreg	equ	0xFE8
  6435                           postdec1	equ	0xFE5
  6436                           fsr1h	equ	0xFE2
  6437                           fsr1l	equ	0xFE1
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           postdec2	equ	0xFDD
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           
  6445 ;; *************** function ___ftdiv *****************
  6446 ;; Defined at:
  6447 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  f1              3   12[COMRAM] float 
  6450 ;;  f2              3   15[COMRAM] float 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  f3              3   22[COMRAM] float 
  6453 ;;  sign            1   26[COMRAM] unsigned char 
  6454 ;;  exp             1   25[COMRAM] unsigned char 
  6455 ;;  cntr            1   21[COMRAM] unsigned char 
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  3   12[COMRAM] float 
  6458 ;; Registers used:
  6459 ;;		wreg, status,2, status,0, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6465 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;Total ram usage:       15 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    1
  6472 ;; This function calls:
  6473 ;;		___ftpack
  6474 ;; This function is called by:
  6475 ;;		_angleToPulse
  6476 ;;		_testFrequency
  6477 ;; This function uses a non-reentrant model
  6478 ;;
  6479                           
  6480                           	psect	text36
  6481  000E10                     __ptext36:
  6482                           	opt stack 0
  6483  000E10                     ___ftdiv:
  6484                           	opt stack 19
  6485                           
  6486                           ;incstack = 0
  6487  000E10  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  6488  000E14  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6489  000E16  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6490  000E18  340E               	rlcf	___ftdiv@f1+1,w,c
  6491  000E1A  3613               	rlcf	??___ftdiv& (0+255),f,c
  6492  000E1C  E301               	bnc	u226_41
  6493  000E1E  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6494  000E20                     u226_41:
  6495  000E20  5013               	movf	??___ftdiv,w,c
  6496  000E22  6E1A               	movwf	___ftdiv@exp,c
  6497  000E24  501A               	movf	___ftdiv@exp,w,c
  6498  000E26  A4D8               	btfss	status,2,c
  6499  000E28  D007               	goto	i2l2889
  6500  000E2A  0E00               	movlw	0
  6501  000E2C  6E0D               	movwf	?___ftdiv,c
  6502  000E2E  0E00               	movlw	0
  6503  000E30  6E0E               	movwf	?___ftdiv+1,c
  6504  000E32  0E00               	movlw	0
  6505  000E34  6E0F               	movwf	?___ftdiv+2,c
  6506  000E36  0012               	return	
  6507  000E38                     i2l2889:
  6508  000E38  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  6509  000E3C  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6510  000E3E  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6511  000E40  3411               	rlcf	___ftdiv@f2+1,w,c
  6512  000E42  3613               	rlcf	??___ftdiv& (0+255),f,c
  6513  000E44  E301               	bnc	u228_41
  6514  000E46  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6515  000E48                     u228_41:
  6516  000E48  5013               	movf	??___ftdiv,w,c
  6517  000E4A  6E1B               	movwf	___ftdiv@sign,c
  6518  000E4C  501B               	movf	___ftdiv@sign,w,c
  6519  000E4E  A4D8               	btfss	status,2,c
  6520  000E50  D007               	goto	i2l2895
  6521  000E52  0E00               	movlw	0
  6522  000E54  6E0D               	movwf	?___ftdiv,c
  6523  000E56  0E00               	movlw	0
  6524  000E58  6E0E               	movwf	?___ftdiv+1,c
  6525  000E5A  0E00               	movlw	0
  6526  000E5C  6E0F               	movwf	?___ftdiv+2,c
  6527  000E5E  0012               	return	
  6528  000E60                     i2l2895:
  6529  000E60  0E00               	movlw	0
  6530  000E62  6E17               	movwf	___ftdiv@f3,c
  6531  000E64  0E00               	movlw	0
  6532  000E66  6E18               	movwf	___ftdiv@f3+1,c
  6533  000E68  0E00               	movlw	0
  6534  000E6A  6E19               	movwf	___ftdiv@f3+2,c
  6535  000E6C  501B               	movf	___ftdiv@sign,w,c
  6536  000E6E  0F89               	addlw	137
  6537  000E70  5E1A               	subwf	___ftdiv@exp,f,c
  6538  000E72  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  6539  000E76  5012               	movf	___ftdiv@f2+2,w,c
  6540  000E78  1A1B               	xorwf	___ftdiv@sign,f,c
  6541  000E7A  0E80               	movlw	128
  6542  000E7C  161B               	andwf	___ftdiv@sign,f,c
  6543  000E7E  8E0E               	bsf	___ftdiv@f1+1,7,c
  6544  000E80  0EFF               	movlw	255
  6545  000E82  160D               	andwf	___ftdiv@f1,f,c
  6546  000E84  0EFF               	movlw	255
  6547  000E86  160E               	andwf	___ftdiv@f1+1,f,c
  6548  000E88  0E00               	movlw	0
  6549  000E8A  160F               	andwf	___ftdiv@f1+2,f,c
  6550  000E8C  8E11               	bsf	___ftdiv@f2+1,7,c
  6551  000E8E  0EFF               	movlw	255
  6552  000E90  1610               	andwf	___ftdiv@f2,f,c
  6553  000E92  0EFF               	movlw	255
  6554  000E94  1611               	andwf	___ftdiv@f2+1,f,c
  6555  000E96  0E00               	movlw	0
  6556  000E98  1612               	andwf	___ftdiv@f2+2,f,c
  6557  000E9A  0E18               	movlw	24
  6558  000E9C  6E16               	movwf	___ftdiv@cntr,c
  6559  000E9E                     i2l2915:
  6560  000E9E  90D8               	bcf	status,0,c
  6561  000EA0  3617               	rlcf	___ftdiv@f3,f,c
  6562  000EA2  3618               	rlcf	___ftdiv@f3+1,f,c
  6563  000EA4  3619               	rlcf	___ftdiv@f3+2,f,c
  6564  000EA6  5010               	movf	___ftdiv@f2,w,c
  6565  000EA8  5C0D               	subwf	___ftdiv@f1,w,c
  6566  000EAA  5011               	movf	___ftdiv@f2+1,w,c
  6567  000EAC  580E               	subwfb	___ftdiv@f1+1,w,c
  6568  000EAE  5012               	movf	___ftdiv@f2+2,w,c
  6569  000EB0  580F               	subwfb	___ftdiv@f1+2,w,c
  6570  000EB2  A0D8               	btfss	status,0,c
  6571  000EB4  D007               	goto	i2l878
  6572  000EB6  5010               	movf	___ftdiv@f2,w,c
  6573  000EB8  5E0D               	subwf	___ftdiv@f1,f,c
  6574  000EBA  5011               	movf	___ftdiv@f2+1,w,c
  6575  000EBC  5A0E               	subwfb	___ftdiv@f1+1,f,c
  6576  000EBE  5012               	movf	___ftdiv@f2+2,w,c
  6577  000EC0  5A0F               	subwfb	___ftdiv@f1+2,f,c
  6578  000EC2  8017               	bsf	___ftdiv@f3,0,c
  6579  000EC4                     i2l878:
  6580  000EC4  90D8               	bcf	status,0,c
  6581  000EC6  360D               	rlcf	___ftdiv@f1,f,c
  6582  000EC8  360E               	rlcf	___ftdiv@f1+1,f,c
  6583  000ECA  360F               	rlcf	___ftdiv@f1+2,f,c
  6584  000ECC  2E16               	decfsz	___ftdiv@cntr,f,c
  6585  000ECE  D7E7               	goto	i2l2915
  6586  000ED0  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  6587  000ED4  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6588  000ED8  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6589  000EDC  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  6590  000EE0  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  6591  000EE4  EC13  F009         	call	___ftpack	;wreg free
  6592  000EE8  C001  F00D         	movff	?___ftpack,?___ftdiv
  6593  000EEC  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  6594  000EF0  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  6595  000EF4  0012               	return	
  6596  000EF6                     __end_of___ftdiv:
  6597                           	opt stack 0
  6598                           pclatu	equ	0xFFB
  6599                           pclath	equ	0xFFA
  6600                           tblptru	equ	0xFF8
  6601                           tblptrh	equ	0xFF7
  6602                           tblptrl	equ	0xFF6
  6603                           tablat	equ	0xFF5
  6604                           prodh	equ	0xFF4
  6605                           prodl	equ	0xFF3
  6606                           intcon	equ	0xFF2
  6607                           intcon3	equ	0xFF0
  6608                           postinc0	equ	0xFEE
  6609                           fsr0h	equ	0xFEA
  6610                           fsr0l	equ	0xFE9
  6611                           wreg	equ	0xFE8
  6612                           postdec1	equ	0xFE5
  6613                           fsr1h	equ	0xFE2
  6614                           fsr1l	equ	0xFE1
  6615                           indf2	equ	0xFDF
  6616                           postinc2	equ	0xFDE
  6617                           postdec2	equ	0xFDD
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           
  6622 ;; *************** function ___ftadd *****************
  6623 ;; Defined at:
  6624 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;  f1              3   42[COMRAM] float 
  6627 ;;  f2              3   45[COMRAM] float 
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  exp1            1   53[COMRAM] unsigned char 
  6630 ;;  exp2            1   52[COMRAM] unsigned char 
  6631 ;;  sign            1   51[COMRAM] unsigned char 
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  3   42[COMRAM] float 
  6634 ;; Registers used:
  6635 ;;		wreg, status,2, status,0, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6641 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;Total ram usage:       12 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:    1
  6648 ;; This function calls:
  6649 ;;		___ftpack
  6650 ;; This function is called by:
  6651 ;;		_angleToPulse
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           	psect	text37
  6656  000838                     __ptext37:
  6657                           	opt stack 0
  6658  000838                     ___ftadd:
  6659                           	opt stack 19
  6660                           
  6661                           ;incstack = 0
  6662  000838  C02D  F031         	movff	___ftadd@f1+2,??___ftadd
  6663  00083C  6A32               	clrf	(??___ftadd+1)& (0+255),c
  6664  00083E  6A33               	clrf	(??___ftadd+2)& (0+255),c
  6665  000840  342C               	rlcf	___ftadd@f1+1,w,c
  6666  000842  3631               	rlcf	??___ftadd& (0+255),f,c
  6667  000844  E301               	bnc	u205_41
  6668  000846  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  6669  000848                     u205_41:
  6670  000848  5031               	movf	??___ftadd,w,c
  6671  00084A  6E36               	movwf	___ftadd@exp1,c
  6672  00084C  C030  F031         	movff	___ftadd@f2+2,??___ftadd
  6673  000850  6A32               	clrf	(??___ftadd+1)& (0+255),c
  6674  000852  6A33               	clrf	(??___ftadd+2)& (0+255),c
  6675  000854  342F               	rlcf	___ftadd@f2+1,w,c
  6676  000856  3631               	rlcf	??___ftadd& (0+255),f,c
  6677  000858  E301               	bnc	u206_41
  6678  00085A  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  6679  00085C                     u206_41:
  6680  00085C  5031               	movf	??___ftadd,w,c
  6681  00085E  6E35               	movwf	___ftadd@exp2,c
  6682  000860  5036               	movf	___ftadd@exp1,w,c
  6683  000862  B4D8               	btfsc	status,2,c
  6684  000864  D00B               	goto	i2l843
  6685  000866  5035               	movf	___ftadd@exp2,w,c
  6686  000868  5C36               	subwf	___ftadd@exp1,w,c
  6687  00086A  B0D8               	btfsc	status,0,c
  6688  00086C  D00E               	goto	i2l2821
  6689  00086E  5036               	movf	___ftadd@exp1,w,c
  6690  000870  0800               	sublw	0
  6691  000872  2435               	addwf	___ftadd@exp2,w,c
  6692  000874  6E31               	movwf	??___ftadd& (0+255),c
  6693  000876  0E18               	movlw	24
  6694  000878  6431               	cpfsgt	??___ftadd,c
  6695  00087A  D007               	goto	i2l2821
  6696  00087C                     i2l843:
  6697  00087C  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  6698  000880  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  6699  000884  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  6700  000888  0012               	return	
  6701  00088A                     i2l2821:
  6702  00088A  5035               	movf	___ftadd@exp2,w,c
  6703  00088C  B4D8               	btfsc	status,2,c
  6704  00088E  D00B               	goto	i2l847
  6705  000890  5036               	movf	___ftadd@exp1,w,c
  6706  000892  5C35               	subwf	___ftadd@exp2,w,c
  6707  000894  B0D8               	btfsc	status,0,c
  6708  000896  D00E               	goto	i2l2827
  6709  000898  5035               	movf	___ftadd@exp2,w,c
  6710  00089A  0800               	sublw	0
  6711  00089C  2436               	addwf	___ftadd@exp1,w,c
  6712  00089E  6E31               	movwf	??___ftadd& (0+255),c
  6713  0008A0  0E18               	movlw	24
  6714  0008A2  6431               	cpfsgt	??___ftadd,c
  6715  0008A4  D007               	goto	i2l2827
  6716  0008A6                     i2l847:
  6717  0008A6  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  6718  0008AA  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  6719  0008AE  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  6720  0008B2  0012               	return	
  6721  0008B4                     i2l2827:
  6722  0008B4  0E06               	movlw	6
  6723  0008B6  6E34               	movwf	___ftadd@sign,c
  6724  0008B8  BE2D               	btfsc	___ftadd@f1+2,7,c
  6725  0008BA  8E34               	bsf	___ftadd@sign,7,c
  6726  0008BC  BE30               	btfsc	___ftadd@f2+2,7,c
  6727  0008BE  8C34               	bsf	___ftadd@sign,6,c
  6728  0008C0  8E2C               	bsf	___ftadd@f1+1,7,c
  6729  0008C2  0EFF               	movlw	255
  6730  0008C4  162B               	andwf	___ftadd@f1,f,c
  6731  0008C6  0EFF               	movlw	255
  6732  0008C8  162C               	andwf	___ftadd@f1+1,f,c
  6733  0008CA  0E00               	movlw	0
  6734  0008CC  162D               	andwf	___ftadd@f1+2,f,c
  6735  0008CE  8E2F               	bsf	___ftadd@f2+1,7,c
  6736  0008D0  0EFF               	movlw	255
  6737  0008D2  162E               	andwf	___ftadd@f2,f,c
  6738  0008D4  0EFF               	movlw	255
  6739  0008D6  162F               	andwf	___ftadd@f2+1,f,c
  6740  0008D8  0E00               	movlw	0
  6741  0008DA  1630               	andwf	___ftadd@f2+2,f,c
  6742  0008DC  5035               	movf	___ftadd@exp2,w,c
  6743  0008DE  5C36               	subwf	___ftadd@exp1,w,c
  6744  0008E0  B0D8               	btfsc	status,0,c
  6745  0008E2  D01B               	goto	i2l2853
  6746  0008E4                     i2l2843:
  6747  0008E4  90D8               	bcf	status,0,c
  6748  0008E6  362E               	rlcf	___ftadd@f2,f,c
  6749  0008E8  362F               	rlcf	___ftadd@f2+1,f,c
  6750  0008EA  3630               	rlcf	___ftadd@f2+2,f,c
  6751  0008EC  0635               	decf	___ftadd@exp2,f,c
  6752  0008EE  5036               	movf	___ftadd@exp1,w,c
  6753  0008F0  1835               	xorwf	___ftadd@exp2,w,c
  6754  0008F2  B4D8               	btfsc	status,2,c
  6755  0008F4  D00D               	goto	i2l2851
  6756  0008F6  0634               	decf	___ftadd@sign,f,c
  6757  0008F8  C034  F031         	movff	___ftadd@sign,??___ftadd
  6758  0008FC  0E07               	movlw	7
  6759  0008FE  1631               	andwf	??___ftadd,f,c
  6760  000900  B4D8               	btfsc	status,2,c
  6761  000902  D006               	goto	i2l2851
  6762  000904  D7EF               	goto	i2l2843
  6763  000906                     i2l2849:
  6764  000906  90D8               	bcf	status,0,c
  6765  000908  322D               	rrcf	___ftadd@f1+2,f,c
  6766  00090A  322C               	rrcf	___ftadd@f1+1,f,c
  6767  00090C  322B               	rrcf	___ftadd@f1,f,c
  6768  00090E  2A36               	incf	___ftadd@exp1,f,c
  6769  000910                     i2l2851:
  6770  000910  5035               	movf	___ftadd@exp2,w,c
  6771  000912  1836               	xorwf	___ftadd@exp1,w,c
  6772  000914  B4D8               	btfsc	status,2,c
  6773  000916  D01F               	goto	i2l858
  6774  000918  D7F6               	goto	i2l2849
  6775  00091A                     i2l2853:
  6776  00091A  5036               	movf	___ftadd@exp1,w,c
  6777  00091C  5C35               	subwf	___ftadd@exp2,w,c
  6778  00091E  B0D8               	btfsc	status,0,c
  6779  000920  D01A               	goto	i2l858
  6780  000922                     i2l2855:
  6781  000922  90D8               	bcf	status,0,c
  6782  000924  362B               	rlcf	___ftadd@f1,f,c
  6783  000926  362C               	rlcf	___ftadd@f1+1,f,c
  6784  000928  362D               	rlcf	___ftadd@f1+2,f,c
  6785  00092A  0636               	decf	___ftadd@exp1,f,c
  6786  00092C  5036               	movf	___ftadd@exp1,w,c
  6787  00092E  1835               	xorwf	___ftadd@exp2,w,c
  6788  000930  B4D8               	btfsc	status,2,c
  6789  000932  D00D               	goto	i2l2863
  6790  000934  0634               	decf	___ftadd@sign,f,c
  6791  000936  C034  F031         	movff	___ftadd@sign,??___ftadd
  6792  00093A  0E07               	movlw	7
  6793  00093C  1631               	andwf	??___ftadd,f,c
  6794  00093E  B4D8               	btfsc	status,2,c
  6795  000940  D006               	goto	i2l2863
  6796  000942  D7EF               	goto	i2l2855
  6797  000944                     i2l2861:
  6798  000944  90D8               	bcf	status,0,c
  6799  000946  3230               	rrcf	___ftadd@f2+2,f,c
  6800  000948  322F               	rrcf	___ftadd@f2+1,f,c
  6801  00094A  322E               	rrcf	___ftadd@f2,f,c
  6802  00094C  2A35               	incf	___ftadd@exp2,f,c
  6803  00094E                     i2l2863:
  6804  00094E  5035               	movf	___ftadd@exp2,w,c
  6805  000950  1836               	xorwf	___ftadd@exp1,w,c
  6806  000952  A4D8               	btfss	status,2,c
  6807  000954  D7F7               	goto	i2l2861
  6808  000956                     i2l858:
  6809  000956  AE34               	btfss	___ftadd@sign,7,c
  6810  000958  D00C               	goto	i2l867
  6811  00095A  0EFF               	movlw	255
  6812  00095C  1A2B               	xorwf	___ftadd@f1,f,c
  6813  00095E  0EFF               	movlw	255
  6814  000960  1A2C               	xorwf	___ftadd@f1+1,f,c
  6815  000962  0EFF               	movlw	255
  6816  000964  1A2D               	xorwf	___ftadd@f1+2,f,c
  6817  000966  0E01               	movlw	1
  6818  000968  262B               	addwf	___ftadd@f1,f,c
  6819  00096A  0E00               	movlw	0
  6820  00096C  222C               	addwfc	___ftadd@f1+1,f,c
  6821  00096E  0E00               	movlw	0
  6822  000970  222D               	addwfc	___ftadd@f1+2,f,c
  6823  000972                     i2l867:
  6824  000972  AC34               	btfss	___ftadd@sign,6,c
  6825  000974  D00C               	goto	i2l2869
  6826  000976  0EFF               	movlw	255
  6827  000978  1A2E               	xorwf	___ftadd@f2,f,c
  6828  00097A  0EFF               	movlw	255
  6829  00097C  1A2F               	xorwf	___ftadd@f2+1,f,c
  6830  00097E  0EFF               	movlw	255
  6831  000980  1A30               	xorwf	___ftadd@f2+2,f,c
  6832  000982  0E01               	movlw	1
  6833  000984  262E               	addwf	___ftadd@f2,f,c
  6834  000986  0E00               	movlw	0
  6835  000988  222F               	addwfc	___ftadd@f2+1,f,c
  6836  00098A  0E00               	movlw	0
  6837  00098C  2230               	addwfc	___ftadd@f2+2,f,c
  6838  00098E                     i2l2869:
  6839  00098E  0E00               	movlw	0
  6840  000990  6E34               	movwf	___ftadd@sign,c
  6841  000992  502B               	movf	___ftadd@f1,w,c
  6842  000994  262E               	addwf	___ftadd@f2,f,c
  6843  000996  502C               	movf	___ftadd@f1+1,w,c
  6844  000998  222F               	addwfc	___ftadd@f2+1,f,c
  6845  00099A  502D               	movf	___ftadd@f1+2,w,c
  6846  00099C  2230               	addwfc	___ftadd@f2+2,f,c
  6847  00099E  AE30               	btfss	___ftadd@f2+2,7,c
  6848  0009A0  D00E               	goto	i2l2879
  6849  0009A2  0EFF               	movlw	255
  6850  0009A4  1A2E               	xorwf	___ftadd@f2,f,c
  6851  0009A6  0EFF               	movlw	255
  6852  0009A8  1A2F               	xorwf	___ftadd@f2+1,f,c
  6853  0009AA  0EFF               	movlw	255
  6854  0009AC  1A30               	xorwf	___ftadd@f2+2,f,c
  6855  0009AE  0E01               	movlw	1
  6856  0009B0  262E               	addwf	___ftadd@f2,f,c
  6857  0009B2  0E00               	movlw	0
  6858  0009B4  222F               	addwfc	___ftadd@f2+1,f,c
  6859  0009B6  0E00               	movlw	0
  6860  0009B8  2230               	addwfc	___ftadd@f2+2,f,c
  6861  0009BA  0E01               	movlw	1
  6862  0009BC  6E34               	movwf	___ftadd@sign,c
  6863  0009BE                     i2l2879:
  6864  0009BE  C02E  F001         	movff	___ftadd@f2,___ftpack@arg
  6865  0009C2  C02F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6866  0009C6  C030  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6867  0009CA  C036  F004         	movff	___ftadd@exp1,___ftpack@exp
  6868  0009CE  C034  F005         	movff	___ftadd@sign,___ftpack@sign
  6869  0009D2  EC13  F009         	call	___ftpack	;wreg free
  6870  0009D6  C001  F02B         	movff	?___ftpack,?___ftadd
  6871  0009DA  C002  F02C         	movff	?___ftpack+1,?___ftadd+1
  6872  0009DE  C003  F02D         	movff	?___ftpack+2,?___ftadd+2
  6873  0009E2  0012               	return	
  6874  0009E4                     __end_of___ftadd:
  6875                           	opt stack 0
  6876                           pclatu	equ	0xFFB
  6877                           pclath	equ	0xFFA
  6878                           tblptru	equ	0xFF8
  6879                           tblptrh	equ	0xFF7
  6880                           tblptrl	equ	0xFF6
  6881                           tablat	equ	0xFF5
  6882                           prodh	equ	0xFF4
  6883                           prodl	equ	0xFF3
  6884                           intcon	equ	0xFF2
  6885                           intcon3	equ	0xFF0
  6886                           postinc0	equ	0xFEE
  6887                           fsr0h	equ	0xFEA
  6888                           fsr0l	equ	0xFE9
  6889                           wreg	equ	0xFE8
  6890                           postdec1	equ	0xFE5
  6891                           fsr1h	equ	0xFE2
  6892                           fsr1l	equ	0xFE1
  6893                           indf2	equ	0xFDF
  6894                           postinc2	equ	0xFDE
  6895                           postdec2	equ	0xFDD
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function ___awtoft *****************
  6901 ;; Defined at:
  6902 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  c               2    8[COMRAM] int 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  sign            1   11[COMRAM] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  3    8[COMRAM] float 
  6909 ;; Registers used:
  6910 ;;		wreg, status,2, status,0, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6916 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;Total ram usage:        4 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    1
  6923 ;; This function calls:
  6924 ;;		___ftpack
  6925 ;; This function is called by:
  6926 ;;		_angleToPulse
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text38
  6931  0018C6                     __ptext38:
  6932                           	opt stack 0
  6933  0018C6                     ___awtoft:
  6934                           	opt stack 19
  6935                           
  6936                           ;incstack = 0
  6937  0018C6  0E00               	movlw	0
  6938  0018C8  6E0C               	movwf	___awtoft@sign,c
  6939  0018CA  AE0A               	btfss	___awtoft@c+1,7,c
  6940  0018CC  D006               	goto	i2l2985
  6941  0018CE  6C09               	negf	___awtoft@c,c
  6942  0018D0  1E0A               	comf	___awtoft@c+1,f,c
  6943  0018D2  B0D8               	btfsc	status,0,c
  6944  0018D4  2A0A               	incf	___awtoft@c+1,f,c
  6945  0018D6  0E01               	movlw	1
  6946  0018D8  6E0C               	movwf	___awtoft@sign,c
  6947  0018DA                     i2l2985:
  6948  0018DA  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6949  0018DE  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6950  0018E2  6A03               	clrf	___ftpack@arg+2,c
  6951  0018E4  0E8E               	movlw	142
  6952  0018E6  6E04               	movwf	___ftpack@exp,c
  6953  0018E8  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6954  0018EC  EC13  F009         	call	___ftpack	;wreg free
  6955  0018F0  C001  F009         	movff	?___ftpack,?___awtoft
  6956  0018F4  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6957  0018F8  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6958  0018FC  0012               	return	
  6959  0018FE                     __end_of___awtoft:
  6960                           	opt stack 0
  6961                           pclatu	equ	0xFFB
  6962                           pclath	equ	0xFFA
  6963                           tblptru	equ	0xFF8
  6964                           tblptrh	equ	0xFF7
  6965                           tblptrl	equ	0xFF6
  6966                           tablat	equ	0xFF5
  6967                           prodh	equ	0xFF4
  6968                           prodl	equ	0xFF3
  6969                           intcon	equ	0xFF2
  6970                           intcon3	equ	0xFF0
  6971                           postinc0	equ	0xFEE
  6972                           fsr0h	equ	0xFEA
  6973                           fsr0l	equ	0xFE9
  6974                           wreg	equ	0xFE8
  6975                           postdec1	equ	0xFE5
  6976                           fsr1h	equ	0xFE2
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function ___altoft *****************
  6986 ;; Defined at:
  6987 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  c               4    8[COMRAM] long 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  sign            1   17[COMRAM] unsigned char 
  6992 ;;  exp             1   16[COMRAM] unsigned char 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  3    8[COMRAM] float 
  6995 ;; Registers used:
  6996 ;;		wreg, status,2, status,0, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;Total ram usage:       10 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    1
  7009 ;; This function calls:
  7010 ;;		___ftpack
  7011 ;; This function is called by:
  7012 ;;		_angleToPulse
  7013 ;;		_testFrequency
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text39
  7018  0015BC                     __ptext39:
  7019                           	opt stack 0
  7020  0015BC                     ___altoft:
  7021                           	opt stack 19
  7022                           
  7023                           ;incstack = 0
  7024  0015BC  0E00               	movlw	0
  7025  0015BE  6E12               	movwf	___altoft@sign,c
  7026  0015C0  0E8E               	movlw	142
  7027  0015C2  6E11               	movwf	___altoft@exp,c
  7028  0015C4  AE0C               	btfss	___altoft@c+3,7,c
  7029  0015C6  D011               	goto	i2l2807
  7030  0015C8  1E0C               	comf	___altoft@c+3,f,c
  7031  0015CA  1E0B               	comf	___altoft@c+2,f,c
  7032  0015CC  1E0A               	comf	___altoft@c+1,f,c
  7033  0015CE  6C09               	negf	___altoft@c,c
  7034  0015D0  0E00               	movlw	0
  7035  0015D2  220A               	addwfc	___altoft@c+1,f,c
  7036  0015D4  220B               	addwfc	___altoft@c+2,f,c
  7037  0015D6  220C               	addwfc	___altoft@c+3,f,c
  7038  0015D8  0E01               	movlw	1
  7039  0015DA  6E12               	movwf	___altoft@sign,c
  7040  0015DC  D006               	goto	i2l2807
  7041  0015DE                     i2l2805:
  7042  0015DE  90D8               	bcf	status,0,c
  7043  0015E0  320C               	rrcf	___altoft@c+3,f,c
  7044  0015E2  320B               	rrcf	___altoft@c+2,f,c
  7045  0015E4  320A               	rrcf	___altoft@c+1,f,c
  7046  0015E6  3209               	rrcf	___altoft@c,f,c
  7047  0015E8  2A11               	incf	___altoft@exp,f,c
  7048  0015EA                     i2l2807:
  7049  0015EA  0E00               	movlw	0
  7050  0015EC  1409               	andwf	___altoft@c,w,c
  7051  0015EE  6E0D               	movwf	??___altoft& (0+255),c
  7052  0015F0  0E00               	movlw	0
  7053  0015F2  140A               	andwf	___altoft@c+1,w,c
  7054  0015F4  6E0E               	movwf	(??___altoft+1)& (0+255),c
  7055  0015F6  0E00               	movlw	0
  7056  0015F8  140B               	andwf	___altoft@c+2,w,c
  7057  0015FA  6E0F               	movwf	(??___altoft+2)& (0+255),c
  7058  0015FC  0EFF               	movlw	255
  7059  0015FE  140C               	andwf	___altoft@c+3,w,c
  7060  001600  6E10               	movwf	(??___altoft+3)& (0+255),c
  7061  001602  500D               	movf	??___altoft,w,c
  7062  001604  100E               	iorwf	??___altoft+1,w,c
  7063  001606  100F               	iorwf	??___altoft+2,w,c
  7064  001608  1010               	iorwf	??___altoft+3,w,c
  7065  00160A  A4D8               	btfss	status,2,c
  7066  00160C  D7E8               	goto	i2l2805
  7067  00160E  C009  F001         	movff	___altoft@c,___ftpack@arg
  7068  001612  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  7069  001616  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  7070  00161A  C011  F004         	movff	___altoft@exp,___ftpack@exp
  7071  00161E  C012  F005         	movff	___altoft@sign,___ftpack@sign
  7072  001622  EC13  F009         	call	___ftpack	;wreg free
  7073  001626  C001  F009         	movff	?___ftpack,?___altoft
  7074  00162A  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  7075  00162E  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  7076  001632  0012               	return	
  7077  001634                     __end_of___altoft:
  7078                           	opt stack 0
  7079                           pclatu	equ	0xFFB
  7080                           pclath	equ	0xFFA
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           prodh	equ	0xFF4
  7086                           prodl	equ	0xFF3
  7087                           intcon	equ	0xFF2
  7088                           intcon3	equ	0xFF0
  7089                           postinc0	equ	0xFEE
  7090                           fsr0h	equ	0xFEA
  7091                           fsr0l	equ	0xFE9
  7092                           wreg	equ	0xFE8
  7093                           postdec1	equ	0xFE5
  7094                           fsr1h	equ	0xFE2
  7095                           fsr1l	equ	0xFE1
  7096                           indf2	equ	0xFDF
  7097                           postinc2	equ	0xFDE
  7098                           postdec2	equ	0xFDD
  7099                           fsr2h	equ	0xFDA
  7100                           fsr2l	equ	0xFD9
  7101                           status	equ	0xFD8
  7102                           
  7103 ;; *************** function ___ftpack *****************
  7104 ;; Defined at:
  7105 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  arg             3    0[COMRAM] unsigned um
  7108 ;;  exp             1    3[COMRAM] unsigned char 
  7109 ;;  sign            1    4[COMRAM] unsigned char 
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;		None
  7112 ;; Return value:  Size  Location     Type
  7113 ;;                  3    0[COMRAM] float 
  7114 ;; Registers used:
  7115 ;;		wreg, status,2, status,0
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7121 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;Total ram usage:        8 bytes
  7126 ;; Hardware stack levels used:    1
  7127 ;; This function calls:
  7128 ;;		Nothing
  7129 ;; This function is called by:
  7130 ;;		___altoft
  7131 ;;		___awtoft
  7132 ;;		___ftadd
  7133 ;;		___ftdiv
  7134 ;;		___ftmul
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text40
  7139  001226                     __ptext40:
  7140                           	opt stack 0
  7141  001226                     ___ftpack:
  7142                           	opt stack 19
  7143                           
  7144                           ;incstack = 0
  7145  001226  5004               	movf	___ftpack@exp,w,c
  7146  001228  B4D8               	btfsc	status,2,c
  7147  00122A  D005               	goto	i2l2623
  7148  00122C  5001               	movf	___ftpack@arg,w,c
  7149  00122E  1002               	iorwf	___ftpack@arg+1,w,c
  7150  001230  1003               	iorwf	___ftpack@arg+2,w,c
  7151  001232  A4D8               	btfss	status,2,c
  7152  001234  D00C               	goto	i2l2629
  7153  001236                     i2l2623:
  7154  001236  0E00               	movlw	0
  7155  001238  6E01               	movwf	?___ftpack,c
  7156  00123A  0E00               	movlw	0
  7157  00123C  6E02               	movwf	?___ftpack+1,c
  7158  00123E  0E00               	movlw	0
  7159  001240  6E03               	movwf	?___ftpack+2,c
  7160  001242  0012               	return	
  7161  001244                     i2l2627:
  7162  001244  2A04               	incf	___ftpack@exp,f,c
  7163  001246  90D8               	bcf	status,0,c
  7164  001248  3203               	rrcf	___ftpack@arg+2,f,c
  7165  00124A  3202               	rrcf	___ftpack@arg+1,f,c
  7166  00124C  3201               	rrcf	___ftpack@arg,f,c
  7167  00124E                     i2l2629:
  7168  00124E  0E00               	movlw	0
  7169  001250  1401               	andwf	___ftpack@arg,w,c
  7170  001252  6E06               	movwf	??___ftpack& (0+255),c
  7171  001254  0E00               	movlw	0
  7172  001256  1402               	andwf	___ftpack@arg+1,w,c
  7173  001258  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7174  00125A  0EFE               	movlw	254
  7175  00125C  1403               	andwf	___ftpack@arg+2,w,c
  7176  00125E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7177  001260  5006               	movf	??___ftpack,w,c
  7178  001262  1007               	iorwf	??___ftpack+1,w,c
  7179  001264  1008               	iorwf	??___ftpack+2,w,c
  7180  001266  B4D8               	btfsc	status,2,c
  7181  001268  D00C               	goto	i2l2635
  7182  00126A  D7EC               	goto	i2l2627
  7183  00126C                     i2l2631:
  7184  00126C  2A04               	incf	___ftpack@exp,f,c
  7185  00126E  0E01               	movlw	1
  7186  001270  2601               	addwf	___ftpack@arg,f,c
  7187  001272  0E00               	movlw	0
  7188  001274  2202               	addwfc	___ftpack@arg+1,f,c
  7189  001276  0E00               	movlw	0
  7190  001278  2203               	addwfc	___ftpack@arg+2,f,c
  7191  00127A  90D8               	bcf	status,0,c
  7192  00127C  3203               	rrcf	___ftpack@arg+2,f,c
  7193  00127E  3202               	rrcf	___ftpack@arg+1,f,c
  7194  001280  3201               	rrcf	___ftpack@arg,f,c
  7195  001282                     i2l2635:
  7196  001282  0E00               	movlw	0
  7197  001284  1401               	andwf	___ftpack@arg,w,c
  7198  001286  6E06               	movwf	??___ftpack& (0+255),c
  7199  001288  0E00               	movlw	0
  7200  00128A  1402               	andwf	___ftpack@arg+1,w,c
  7201  00128C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7202  00128E  0EFF               	movlw	255
  7203  001290  1403               	andwf	___ftpack@arg+2,w,c
  7204  001292  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7205  001294  5006               	movf	??___ftpack,w,c
  7206  001296  1007               	iorwf	??___ftpack+1,w,c
  7207  001298  1008               	iorwf	??___ftpack+2,w,c
  7208  00129A  B4D8               	btfsc	status,2,c
  7209  00129C  D006               	goto	i2l2639
  7210  00129E  D7E6               	goto	i2l2631
  7211  0012A0                     i2l2637:
  7212  0012A0  0604               	decf	___ftpack@exp,f,c
  7213  0012A2  90D8               	bcf	status,0,c
  7214  0012A4  3601               	rlcf	___ftpack@arg,f,c
  7215  0012A6  3602               	rlcf	___ftpack@arg+1,f,c
  7216  0012A8  3603               	rlcf	___ftpack@arg+2,f,c
  7217  0012AA                     i2l2639:
  7218  0012AA  BE02               	btfsc	___ftpack@arg+1,7,c
  7219  0012AC  D003               	goto	i2l820
  7220  0012AE  0E02               	movlw	2
  7221  0012B0  6004               	cpfslt	___ftpack@exp,c
  7222  0012B2  D7F6               	goto	i2l2637
  7223  0012B4                     i2l820:
  7224  0012B4  A004               	btfss	___ftpack@exp,0,c
  7225  0012B6  9E02               	bcf	___ftpack@arg+1,7,c
  7226  0012B8  90D8               	bcf	status,0,c
  7227  0012BA  3204               	rrcf	___ftpack@exp,f,c
  7228  0012BC  5004               	movf	___ftpack@exp,w,c
  7229  0012BE  1203               	iorwf	___ftpack@arg+2,f,c
  7230  0012C0  5005               	movf	___ftpack@sign,w,c
  7231  0012C2  A4D8               	btfss	status,2,c
  7232  0012C4  8E03               	bsf	___ftpack@arg+2,7,c
  7233  0012C6  C001  F001         	movff	___ftpack@arg,?___ftpack
  7234  0012CA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7235  0012CE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7236  0012D2  0012               	return	
  7237  0012D4                     __end_of___ftpack:
  7238                           	opt stack 0
  7239                           pclatu	equ	0xFFB
  7240                           pclath	equ	0xFFA
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           intcon	equ	0xFF2
  7248                           intcon3	equ	0xFF0
  7249                           postinc0	equ	0xFEE
  7250                           fsr0h	equ	0xFEA
  7251                           fsr0l	equ	0xFE9
  7252                           wreg	equ	0xFE8
  7253                           postdec1	equ	0xFE5
  7254                           fsr1h	equ	0xFE2
  7255                           fsr1l	equ	0xFE1
  7256                           indf2	equ	0xFDF
  7257                           postinc2	equ	0xFDE
  7258                           postdec2	equ	0xFDD
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263 ;; *************** function _servoInterruptService *****************
  7264 ;; Defined at:
  7265 ;;		line 40 in file "servo.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;		None
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  i               2   19[COMRAM] int 
  7270 ;;  flags           8   11[COMRAM] int [4]
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      void 
  7273 ;; Registers used:
  7274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;Total ram usage:       12 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    1
  7287 ;; This function calls:
  7288 ;;		_digitalRead
  7289 ;;		_startTimer
  7290 ;;		i2_digitalWrite
  7291 ;; This function is called by:
  7292 ;;		_service
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text41
  7297  000664                     __ptext41:
  7298                           	opt stack 0
  7299  000664                     _servoInterruptService:
  7300                           	opt stack 21
  7301                           
  7302                           ;servo.c: 42: int flags[4];
  7303                           ;servo.c: 43: flags[0] = TMR0IF;
  7304                           
  7305                           ;incstack = 0
  7306  000664  A4F2               	btfss	intcon,2,c	;volatile
  7307  000666  D002               	goto	i2u306_40
  7308  000668  0E01               	movlw	1
  7309  00066A  D001               	goto	i2u307_40
  7310  00066C                     i2u306_40:
  7311  00066C  0E00               	movlw	0
  7312  00066E                     i2u307_40:
  7313  00066E  6E0C               	movwf	servoInterruptService@flags,c
  7314  000670  6A0D               	clrf	servoInterruptService@flags+1,c
  7315                           
  7316                           ;servo.c: 44: flags[1] = TMR1IF;
  7317  000672  A09E               	btfss	3998,0,c	;volatile
  7318  000674  D002               	goto	i2u308_40
  7319  000676  0E01               	movlw	1
  7320  000678  D001               	goto	i2u309_40
  7321  00067A                     i2u308_40:
  7322  00067A  0E00               	movlw	0
  7323  00067C                     i2u309_40:
  7324  00067C  6E0E               	movwf	servoInterruptService@flags+2,c
  7325  00067E  6A0F               	clrf	servoInterruptService@flags+3,c
  7326                           
  7327                           ;servo.c: 45: flags[2] = TMR2IF;
  7328  000680  A29E               	btfss	3998,1,c	;volatile
  7329  000682  D002               	goto	i2u310_40
  7330  000684  0E01               	movlw	1
  7331  000686  D001               	goto	i2u311_40
  7332  000688                     i2u310_40:
  7333  000688  0E00               	movlw	0
  7334  00068A                     i2u311_40:
  7335  00068A  6E10               	movwf	servoInterruptService@flags+4,c
  7336  00068C  6A11               	clrf	servoInterruptService@flags+5,c
  7337                           
  7338                           ;servo.c: 46: flags[3] = TMR3IF;
  7339  00068E  A2A1               	btfss	4001,1,c	;volatile
  7340  000690  D002               	goto	i2u312_40
  7341  000692  0E01               	movlw	1
  7342  000694  D001               	goto	i2u313_40
  7343  000696                     i2u312_40:
  7344  000696  0E00               	movlw	0
  7345  000698                     i2u313_40:
  7346  000698  6E12               	movwf	servoInterruptService@flags+6,c
  7347  00069A  6A13               	clrf	servoInterruptService@flags+7,c
  7348                           
  7349                           ;servo.c: 48: for(int i = 0; i < 4; i++){
  7350  00069C  0E00               	movlw	0
  7351  00069E  6E15               	movwf	servoInterruptService@i+1,c
  7352  0006A0  0E00               	movlw	0
  7353  0006A2  6E14               	movwf	servoInterruptService@i,c
  7354  0006A4  BE15               	btfsc	servoInterruptService@i+1,7,c
  7355  0006A6  D008               	goto	i2l3457
  7356  0006A8  5015               	movf	servoInterruptService@i+1,w,c
  7357  0006AA  E105               	bnz	i2u314_40
  7358  0006AC  0E04               	movlw	4
  7359  0006AE  5C14               	subwf	servoInterruptService@i,w,c
  7360  0006B0  B0D8               	btfsc	status,0,c
  7361  0006B2  0012               	return	
  7362  0006B4  D001               	goto	i2l3457
  7363  0006B6                     i2u314_40:
  7364  0006B6  0012               	return	
  7365  0006B8                     i2l3457:
  7366                           
  7367                           ;servo.c: 49: if(flags[i]){
  7368  0006B8  90D8               	bcf	status,0,c
  7369  0006BA  3414               	rlcf	servoInterruptService@i,w,c
  7370  0006BC  6ED9               	movwf	fsr2l,c
  7371  0006BE  3415               	rlcf	servoInterruptService@i+1,w,c
  7372  0006C0  6EDA               	movwf	fsr2h,c
  7373  0006C2  0E0C               	movlw	low servoInterruptService@flags
  7374  0006C4  26D9               	addwf	fsr2l,f,c
  7375  0006C6  0E00               	movlw	high servoInterruptService@flags
  7376  0006C8  22DA               	addwfc	fsr2h,f,c
  7377  0006CA  50DE               	movf	postinc2,w,c
  7378  0006CC  10DE               	iorwf	postinc2,w,c
  7379  0006CE  B4D8               	btfsc	status,2,c
  7380  0006D0  D0AB               	goto	i2l3471
  7381                           
  7382                           ;servo.c: 51: if(digitalRead(port[i],pin[i])){
  7383  0006D2  90D8               	bcf	status,0,c
  7384  0006D4  3414               	rlcf	servoInterruptService@i,w,c
  7385  0006D6  6ED9               	movwf	fsr2l,c
  7386  0006D8  3415               	rlcf	servoInterruptService@i+1,w,c
  7387  0006DA  6EDA               	movwf	fsr2h,c
  7388  0006DC  0E76               	movlw	low _port
  7389  0006DE  26D9               	addwf	fsr2l,f,c
  7390  0006E0  0E00               	movlw	high _port
  7391  0006E2  22DA               	addwfc	fsr2h,f,c
  7392  0006E4  CFDE F001          	movff	postinc2,digitalRead@port
  7393  0006E8  CFDD F002          	movff	postdec2,digitalRead@port+1
  7394  0006EC  90D8               	bcf	status,0,c
  7395  0006EE  3414               	rlcf	servoInterruptService@i,w,c
  7396  0006F0  6ED9               	movwf	fsr2l,c
  7397  0006F2  3415               	rlcf	servoInterruptService@i+1,w,c
  7398  0006F4  6EDA               	movwf	fsr2h,c
  7399  0006F6  0EBB               	movlw	low _pin
  7400  0006F8  26D9               	addwf	fsr2l,f,c
  7401  0006FA  0E00               	movlw	high _pin
  7402  0006FC  22DA               	addwfc	fsr2h,f,c
  7403  0006FE  CFDE F003          	movff	postinc2,digitalRead@pin
  7404  000702  CFDD F004          	movff	postdec2,digitalRead@pin+1
  7405  000706  ECBA  F008         	call	_digitalRead	;wreg free
  7406  00070A  5001               	movf	?_digitalRead,w,c
  7407  00070C  1002               	iorwf	?_digitalRead+1,w,c
  7408  00070E  B4D8               	btfsc	status,2,c
  7409  000710  D02F               	goto	i2l3465
  7410                           
  7411                           ;servo.c: 52: startTimer(i,15535);
  7412  000712  C014  F001         	movff	servoInterruptService@i,startTimer@timer
  7413  000716  C015  F002         	movff	servoInterruptService@i+1,startTimer@timer+1
  7414  00071A  0EAF               	movlw	175
  7415  00071C  6E03               	movwf	startTimer@val,c
  7416  00071E  0E3C               	movlw	60
  7417  000720  6E04               	movwf	startTimer@val+1,c
  7418  000722  0E00               	movlw	0
  7419  000724  6E05               	movwf	startTimer@val+2,c
  7420  000726  0E00               	movlw	0
  7421  000728  6E06               	movwf	startTimer@val+3,c
  7422  00072A  ECD6  F00B         	call	_startTimer	;wreg free
  7423                           
  7424                           ;servo.c: 53: digitalWrite(port[i],pin[i],0);
  7425  00072E  90D8               	bcf	status,0,c
  7426  000730  3414               	rlcf	servoInterruptService@i,w,c
  7427  000732  6ED9               	movwf	fsr2l,c
  7428  000734  3415               	rlcf	servoInterruptService@i+1,w,c
  7429  000736  6EDA               	movwf	fsr2h,c
  7430  000738  0E76               	movlw	low _port
  7431  00073A  26D9               	addwf	fsr2l,f,c
  7432  00073C  0E00               	movlw	high _port
  7433  00073E  22DA               	addwfc	fsr2h,f,c
  7434  000740  CFDE F001          	movff	postinc2,i2digitalWrite@port
  7435  000744  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  7436  000748  90D8               	bcf	status,0,c
  7437  00074A  3414               	rlcf	servoInterruptService@i,w,c
  7438  00074C  6ED9               	movwf	fsr2l,c
  7439  00074E  3415               	rlcf	servoInterruptService@i+1,w,c
  7440  000750  6EDA               	movwf	fsr2h,c
  7441  000752  0EBB               	movlw	low _pin
  7442  000754  26D9               	addwf	fsr2l,f,c
  7443  000756  0E00               	movlw	high _pin
  7444  000758  22DA               	addwfc	fsr2h,f,c
  7445  00075A  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  7446  00075E  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  7447  000762  0E00               	movlw	0
  7448  000764  6E06               	movwf	i2digitalWrite@val+1,c
  7449  000766  0E00               	movlw	0
  7450  000768  6E05               	movwf	i2digitalWrite@val,c
  7451  00076A  EC6A  F009         	call	i2_digitalWrite	;wreg free
  7452                           
  7453                           ;servo.c: 54: }
  7454  00076E  D047               	goto	i2l3469
  7455  000770                     i2l3465:
  7456                           
  7457                           ;servo.c: 55: else{
  7458                           ;servo.c: 56: startTimer(i, pulse[i]);
  7459  000770  C014  F001         	movff	servoInterruptService@i,startTimer@timer
  7460  000774  C015  F002         	movff	servoInterruptService@i+1,startTimer@timer+1
  7461  000778  0EAB               	movlw	low _pulse
  7462  00077A  6E0A               	movwf	??_servoInterruptService& (0+255),c
  7463  00077C  0E00               	movlw	high _pulse
  7464  00077E  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  7465  000780  90D8               	bcf	status,0,c
  7466  000782  3414               	rlcf	servoInterruptService@i,w,c
  7467  000784  6ED9               	movwf	fsr2l,c
  7468  000786  3415               	rlcf	servoInterruptService@i+1,w,c
  7469  000788  6EDA               	movwf	fsr2h,c
  7470  00078A  90D8               	bcf	status,0,c
  7471  00078C  36D9               	rlcf	fsr2l,f,c
  7472  00078E  36DA               	rlcf	fsr2h,f,c
  7473  000790  500A               	movf	??_servoInterruptService,w,c
  7474  000792  26D9               	addwf	fsr2l,f,c
  7475  000794  500B               	movf	??_servoInterruptService+1,w,c
  7476  000796  22DA               	addwfc	fsr2h,f,c
  7477  000798  CFDE F003          	movff	postinc2,startTimer@val
  7478  00079C  CFDE F004          	movff	postinc2,startTimer@val+1
  7479  0007A0  CFDE F005          	movff	postinc2,startTimer@val+2
  7480  0007A4  CFDE F006          	movff	postinc2,startTimer@val+3
  7481  0007A8  ECD6  F00B         	call	_startTimer	;wreg free
  7482                           
  7483                           ;servo.c: 57: digitalWrite(port[i],pin[i],1);
  7484  0007AC  90D8               	bcf	status,0,c
  7485  0007AE  3414               	rlcf	servoInterruptService@i,w,c
  7486  0007B0  6ED9               	movwf	fsr2l,c
  7487  0007B2  3415               	rlcf	servoInterruptService@i+1,w,c
  7488  0007B4  6EDA               	movwf	fsr2h,c
  7489  0007B6  0E76               	movlw	low _port
  7490  0007B8  26D9               	addwf	fsr2l,f,c
  7491  0007BA  0E00               	movlw	high _port
  7492  0007BC  22DA               	addwfc	fsr2h,f,c
  7493  0007BE  CFDE F001          	movff	postinc2,i2digitalWrite@port
  7494  0007C2  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  7495  0007C6  90D8               	bcf	status,0,c
  7496  0007C8  3414               	rlcf	servoInterruptService@i,w,c
  7497  0007CA  6ED9               	movwf	fsr2l,c
  7498  0007CC  3415               	rlcf	servoInterruptService@i+1,w,c
  7499  0007CE  6EDA               	movwf	fsr2h,c
  7500  0007D0  0EBB               	movlw	low _pin
  7501  0007D2  26D9               	addwf	fsr2l,f,c
  7502  0007D4  0E00               	movlw	high _pin
  7503  0007D6  22DA               	addwfc	fsr2h,f,c
  7504  0007D8  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  7505  0007DC  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  7506  0007E0  0E00               	movlw	0
  7507  0007E2  6E06               	movwf	i2digitalWrite@val+1,c
  7508  0007E4  0E01               	movlw	1
  7509  0007E6  6E05               	movwf	i2digitalWrite@val,c
  7510  0007E8  EC6A  F009         	call	i2_digitalWrite	;wreg free
  7511                           
  7512                           ;servo.c: 58: }
  7513                           ;servo.c: 61: switch(i){
  7514  0007EC  D008               	goto	i2l3469
  7515  0007EE                     i2l490:
  7516  0007EE  94F2               	bcf	intcon,2,c	;volatile
  7517  0007F0  D01B               	goto	i2l3471
  7518  0007F2                     i2l492:
  7519  0007F2  909E               	bcf	3998,0,c	;volatile
  7520  0007F4  D019               	goto	i2l3471
  7521  0007F6                     i2l493:
  7522  0007F6  929E               	bcf	3998,1,c	;volatile
  7523  0007F8  D017               	goto	i2l3471
  7524  0007FA                     i2l494:
  7525  0007FA  92A1               	bcf	4001,1,c	;volatile
  7526                           
  7527                           ;servo.c: 66: }
  7528  0007FC  D015               	goto	i2l3471
  7529  0007FE                     i2l3469:
  7530  0007FE  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
  7531  000802  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
  7532                           
  7533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7534                           ; Switch size 1, requested type "space"
  7535                           ; Number of cases is 1, Range of values is 0 to 0
  7536                           ; switch strategies available:
  7537                           ; Name         Instructions Cycles
  7538                           ; simple_byte            4     3 (average)
  7539                           ;	Chosen strategy is simple_byte
  7540  000806  500B               	movf	??_servoInterruptService+1,w,c
  7541  000808  0A00               	xorlw	0	; case 0
  7542  00080A  A4D8               	btfss	status,2,c
  7543  00080C  D00D               	goto	i2l3471
  7544                           
  7545                           ; Switch size 1, requested type "space"
  7546                           ; Number of cases is 4, Range of values is 0 to 3
  7547                           ; switch strategies available:
  7548                           ; Name         Instructions Cycles
  7549                           ; simple_byte           13     7 (average)
  7550                           ;	Chosen strategy is simple_byte
  7551  00080E  500A               	movf	??_servoInterruptService,w,c
  7552  000810  0A00               	xorlw	0	; case 0
  7553  000812  B4D8               	btfsc	status,2,c
  7554  000814  D7EC               	goto	i2l490
  7555  000816  0A01               	xorlw	1	; case 1
  7556  000818  B4D8               	btfsc	status,2,c
  7557  00081A  D7EB               	goto	i2l492
  7558  00081C  0A03               	xorlw	3	; case 2
  7559  00081E  B4D8               	btfsc	status,2,c
  7560  000820  D7EA               	goto	i2l493
  7561  000822  0A01               	xorlw	1	; case 3
  7562  000824  B4D8               	btfsc	status,2,c
  7563  000826  D7E9               	goto	i2l494
  7564  000828                     i2l3471:
  7565  000828  4A14               	infsnz	servoInterruptService@i,f,c
  7566  00082A  2A15               	incf	servoInterruptService@i+1,f,c
  7567  00082C  BE15               	btfsc	servoInterruptService@i+1,7,c
  7568  00082E  D744               	goto	i2l3457
  7569  000830  5015               	movf	servoInterruptService@i+1,w,c
  7570  000832  E101               	bnz	i2l495
  7571  000834  D73B               	goto	L5
  7572  000836                     i2l495:
  7573  000836  0012               	return		;funcret
  7574  000838                     __end_of_servoInterruptService:
  7575                           	opt stack 0
  7576                           pclatu	equ	0xFFB
  7577                           pclath	equ	0xFFA
  7578                           tblptru	equ	0xFF8
  7579                           tblptrh	equ	0xFF7
  7580                           tblptrl	equ	0xFF6
  7581                           tablat	equ	0xFF5
  7582                           prodh	equ	0xFF4
  7583                           prodl	equ	0xFF3
  7584                           intcon	equ	0xFF2
  7585                           intcon3	equ	0xFF0
  7586                           postinc0	equ	0xFEE
  7587                           fsr0h	equ	0xFEA
  7588                           fsr0l	equ	0xFE9
  7589                           wreg	equ	0xFE8
  7590                           postdec1	equ	0xFE5
  7591                           fsr1h	equ	0xFE2
  7592                           fsr1l	equ	0xFE1
  7593                           indf2	equ	0xFDF
  7594                           postinc2	equ	0xFDE
  7595                           postdec2	equ	0xFDD
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8
  7599                           
  7600 ;; *************** function i2_digitalWrite *****************
  7601 ;; Defined at:
  7602 ;;		line 53 in file "iopin.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;  port            2    0[COMRAM] int 
  7605 ;;  pin             2    2[COMRAM] int 
  7606 ;;  val             2    4[COMRAM] int 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7618 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;Total ram usage:        9 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; This function calls:
  7625 ;;		Nothing
  7626 ;; This function is called by:
  7627 ;;		_servoInterruptService
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           	psect	text42
  7632  0012D4                     __ptext42:
  7633                           	opt stack 0
  7634  0012D4                     i2_digitalWrite:
  7635                           	opt stack 21
  7636                           
  7637                           ;iopin.c: 54: pin = 1 << pin;
  7638                           
  7639                           ;incstack = 0
  7640  0012D4  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
  7641  0012D8  0E01               	movlw	1
  7642  0012DA  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
  7643  0012DC  0E00               	movlw	0
  7644  0012DE  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
  7645  0012E0  2A07               	incf	??i2_digitalWrite,f,c
  7646  0012E2  D003               	goto	i2u260_44
  7647  0012E4                     i2u260_45:
  7648  0012E4  90D8               	bcf	status,0,c
  7649  0012E6  3608               	rlcf	??i2_digitalWrite+1,f,c
  7650  0012E8  3609               	rlcf	??i2_digitalWrite+2,f,c
  7651  0012EA                     i2u260_44:
  7652  0012EA  2E07               	decfsz	??i2_digitalWrite,f,c
  7653  0012EC  D7FB               	goto	i2u260_45
  7654  0012EE  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
  7655  0012F2  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
  7656                           
  7657                           ;iopin.c: 55: if(val == 0){
  7658  0012F6  5005               	movf	i2digitalWrite@val,w,c
  7659  0012F8  1006               	iorwf	i2digitalWrite@val+1,w,c
  7660  0012FA  A4D8               	btfss	status,2,c
  7661  0012FC  D02B               	goto	i2l3211
  7662                           
  7663                           ;iopin.c: 56: pin ^= 0xff;
  7664  0012FE  0EFF               	movlw	255
  7665  001300  1A03               	xorwf	i2digitalWrite@pin,f,c
  7666                           
  7667                           ;iopin.c: 57: }
  7668                           ;iopin.c: 59: switch(port){
  7669  001302  D028               	goto	i2l3211
  7670  001304                     i2l3187:
  7671  001304  0405               	decf	i2digitalWrite@val,w,c
  7672  001306  1006               	iorwf	i2digitalWrite@val+1,w,c
  7673  001308  A4D8               	btfss	status,2,c
  7674  00130A  D003               	goto	i2l3191
  7675  00130C  5003               	movf	i2digitalWrite@pin,w,c
  7676  00130E  1289               	iorwf	3977,f,c	;volatile
  7677  001310  0012               	return	
  7678  001312                     i2l3191:
  7679                           
  7680                           ;iopin.c: 61: else LATA &= pin;
  7681  001312  5003               	movf	i2digitalWrite@pin,w,c
  7682  001314  1689               	andwf	3977,f,c	;volatile
  7683                           
  7684                           ;iopin.c: 62: break;
  7685  001316  0012               	return	
  7686  001318                     i2l3193:
  7687  001318  0405               	decf	i2digitalWrite@val,w,c
  7688  00131A  1006               	iorwf	i2digitalWrite@val+1,w,c
  7689  00131C  A4D8               	btfss	status,2,c
  7690  00131E  D003               	goto	i2l3197
  7691  001320  5003               	movf	i2digitalWrite@pin,w,c
  7692  001322  128A               	iorwf	3978,f,c	;volatile
  7693  001324  0012               	return	
  7694  001326                     i2l3197:
  7695                           
  7696                           ;iopin.c: 64: else LATB &= pin;
  7697  001326  5003               	movf	i2digitalWrite@pin,w,c
  7698  001328  168A               	andwf	3978,f,c	;volatile
  7699                           
  7700                           ;iopin.c: 65: break;
  7701  00132A  0012               	return	
  7702  00132C                     i2l3199:
  7703  00132C  0405               	decf	i2digitalWrite@val,w,c
  7704  00132E  1006               	iorwf	i2digitalWrite@val+1,w,c
  7705  001330  A4D8               	btfss	status,2,c
  7706  001332  D003               	goto	i2l3203
  7707  001334  5003               	movf	i2digitalWrite@pin,w,c
  7708  001336  128B               	iorwf	3979,f,c	;volatile
  7709  001338  0012               	return	
  7710  00133A                     i2l3203:
  7711                           
  7712                           ;iopin.c: 67: else LATC &= pin;
  7713  00133A  5003               	movf	i2digitalWrite@pin,w,c
  7714  00133C  168B               	andwf	3979,f,c	;volatile
  7715                           
  7716                           ;iopin.c: 68: break;
  7717  00133E  0012               	return	
  7718  001340                     i2l3205:
  7719  001340  0405               	decf	i2digitalWrite@val,w,c
  7720  001342  1006               	iorwf	i2digitalWrite@val+1,w,c
  7721  001344  A4D8               	btfss	status,2,c
  7722  001346  D003               	goto	i2l3209
  7723  001348  5003               	movf	i2digitalWrite@pin,w,c
  7724  00134A  128C               	iorwf	3980,f,c	;volatile
  7725  00134C  0012               	return	
  7726  00134E                     i2l3209:
  7727                           
  7728                           ;iopin.c: 70: else LATD &= pin;
  7729  00134E  5003               	movf	i2digitalWrite@pin,w,c
  7730  001350  168C               	andwf	3980,f,c	;volatile
  7731                           
  7732                           ;iopin.c: 71: }
  7733  001352  0012               	return	
  7734  001354                     i2l3211:
  7735  001354  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
  7736  001358  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
  7737                           
  7738                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7739                           ; Switch size 1, requested type "space"
  7740                           ; Number of cases is 1, Range of values is 0 to 0
  7741                           ; switch strategies available:
  7742                           ; Name         Instructions Cycles
  7743                           ; simple_byte            4     3 (average)
  7744                           ;	Chosen strategy is simple_byte
  7745  00135C  5008               	movf	??i2_digitalWrite+1,w,c
  7746  00135E  0A00               	xorlw	0	; case 0
  7747  001360  A4D8               	btfss	status,2,c
  7748  001362  0012               	return	
  7749                           
  7750                           ; Switch size 1, requested type "space"
  7751                           ; Number of cases is 4, Range of values is 0 to 3
  7752                           ; switch strategies available:
  7753                           ; Name         Instructions Cycles
  7754                           ; simple_byte           13     7 (average)
  7755                           ;	Chosen strategy is simple_byte
  7756  001364  5007               	movf	??i2_digitalWrite,w,c
  7757  001366  0A00               	xorlw	0	; case 0
  7758  001368  B4D8               	btfsc	status,2,c
  7759  00136A  D7CC               	goto	i2l3187
  7760  00136C  0A01               	xorlw	1	; case 1
  7761  00136E  B4D8               	btfsc	status,2,c
  7762  001370  D7D3               	goto	i2l3193
  7763  001372  0A03               	xorlw	3	; case 2
  7764  001374  B4D8               	btfsc	status,2,c
  7765  001376  D7DA               	goto	i2l3199
  7766  001378  0A01               	xorlw	1	; case 3
  7767  00137A  A4D8               	btfss	status,2,c
  7768  00137C  0012               	return	
  7769  00137E  D7E0               	goto	i2l3205
  7770  001380                     __end_ofi2_digitalWrite:
  7771                           	opt stack 0
  7772                           pclatu	equ	0xFFB
  7773                           pclath	equ	0xFFA
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           intcon	equ	0xFF2
  7781                           intcon3	equ	0xFF0
  7782                           postinc0	equ	0xFEE
  7783                           fsr0h	equ	0xFEA
  7784                           fsr0l	equ	0xFE9
  7785                           wreg	equ	0xFE8
  7786                           postdec1	equ	0xFE5
  7787                           fsr1h	equ	0xFE2
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           
  7796 ;; *************** function _startTimer *****************
  7797 ;; Defined at:
  7798 ;;		line 75 in file "timer.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  timer           2    0[COMRAM] int 
  7801 ;;  val             4    2[COMRAM] long 
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;		None
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  1    wreg      void 
  7806 ;; Registers used:
  7807 ;;		wreg, status,2, status,0
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7813 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7815 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7817 ;;Total ram usage:        8 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_servoInterruptService
  7823 ;;		_testFrequency
  7824 ;;		_initServo
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           	psect	text43
  7829  0017AC                     __ptext43:
  7830                           	opt stack 0
  7831  0017AC                     _startTimer:
  7832                           	opt stack 21
  7833                           
  7834                           ;timer.c: 76: switch(timer){
  7835                           
  7836                           ;incstack = 0
  7837  0017AC  D012               	goto	i2l3159
  7838  0017AE                     i2l363:
  7839                           
  7840                           ;timer.c: 78: TMR0H = val>>8;
  7841  0017AE  C004  FFD7         	movff	startTimer@val+1,4055	;volatile
  7842                           
  7843                           ;timer.c: 79: TMR0L = val;
  7844  0017B2  C003  FFD6         	movff	startTimer@val,4054	;volatile
  7845                           
  7846                           ;timer.c: 80: T0CON |= 1<<7;
  7847  0017B6  8ED5               	bsf	4053,7,c	;volatile
  7848                           
  7849                           ;timer.c: 81: break;
  7850  0017B8  0012               	return	
  7851  0017BA                     i2l365:
  7852                           
  7853                           ;timer.c: 83: TMR1H = val>>8;
  7854  0017BA  C004  FFCF         	movff	startTimer@val+1,4047	;volatile
  7855                           
  7856                           ;timer.c: 84: TMR1L = val;
  7857  0017BE  C003  FFCE         	movff	startTimer@val,4046	;volatile
  7858                           
  7859                           ;timer.c: 85: T1CON |= 1<<0;
  7860  0017C2  80CD               	bsf	4045,0,c	;volatile
  7861                           
  7862                           ;timer.c: 86: break;
  7863  0017C4  0012               	return	
  7864  0017C6                     i2l366:
  7865                           
  7866                           ;timer.c: 88: TMR3H = val>>8;
  7867  0017C6  C004  FFB3         	movff	startTimer@val+1,4019	;volatile
  7868                           
  7869                           ;timer.c: 89: TMR3L = val;
  7870  0017CA  C003  FFB2         	movff	startTimer@val,4018	;volatile
  7871                           
  7872                           ;timer.c: 90: T3CON |= 1<<0;
  7873  0017CE  80B1               	bsf	4017,0,c	;volatile
  7874                           
  7875                           ;timer.c: 91: }
  7876  0017D0  0012               	return	
  7877  0017D2                     i2l3159:
  7878  0017D2  C001  F007         	movff	startTimer@timer,??_startTimer
  7879  0017D6  C002  F008         	movff	startTimer@timer+1,??_startTimer+1
  7880                           
  7881                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7882                           ; Switch size 1, requested type "space"
  7883                           ; Number of cases is 1, Range of values is 0 to 0
  7884                           ; switch strategies available:
  7885                           ; Name         Instructions Cycles
  7886                           ; simple_byte            4     3 (average)
  7887                           ;	Chosen strategy is simple_byte
  7888  0017DA  5008               	movf	??_startTimer+1,w,c
  7889  0017DC  0A00               	xorlw	0	; case 0
  7890  0017DE  A4D8               	btfss	status,2,c
  7891  0017E0  0012               	return	
  7892                           
  7893                           ; Switch size 1, requested type "space"
  7894                           ; Number of cases is 3, Range of values is 0 to 3
  7895                           ; switch strategies available:
  7896                           ; Name         Instructions Cycles
  7897                           ; simple_byte           10     6 (average)
  7898                           ;	Chosen strategy is simple_byte
  7899  0017E2  5007               	movf	??_startTimer,w,c
  7900  0017E4  0A00               	xorlw	0	; case 0
  7901  0017E6  B4D8               	btfsc	status,2,c
  7902  0017E8  D7E2               	goto	i2l363
  7903  0017EA  0A01               	xorlw	1	; case 1
  7904  0017EC  B4D8               	btfsc	status,2,c
  7905  0017EE  D7E5               	goto	i2l365
  7906  0017F0  0A02               	xorlw	2	; case 3
  7907  0017F2  A4D8               	btfss	status,2,c
  7908  0017F4  0012               	return	
  7909  0017F6  D7E7               	goto	i2l366
  7910  0017F8                     __end_of_startTimer:
  7911                           	opt stack 0
  7912                           pclatu	equ	0xFFB
  7913                           pclath	equ	0xFFA
  7914                           tblptru	equ	0xFF8
  7915                           tblptrh	equ	0xFF7
  7916                           tblptrl	equ	0xFF6
  7917                           tablat	equ	0xFF5
  7918                           prodh	equ	0xFF4
  7919                           prodl	equ	0xFF3
  7920                           intcon	equ	0xFF2
  7921                           intcon3	equ	0xFF0
  7922                           postinc0	equ	0xFEE
  7923                           fsr0h	equ	0xFEA
  7924                           fsr0l	equ	0xFE9
  7925                           wreg	equ	0xFE8
  7926                           postdec1	equ	0xFE5
  7927                           fsr1h	equ	0xFE2
  7928                           fsr1l	equ	0xFE1
  7929                           indf2	equ	0xFDF
  7930                           postinc2	equ	0xFDE
  7931                           postdec2	equ	0xFDD
  7932                           fsr2h	equ	0xFDA
  7933                           fsr2l	equ	0xFD9
  7934                           status	equ	0xFD8
  7935                           
  7936 ;; *************** function _digitalRead *****************
  7937 ;; Defined at:
  7938 ;;		line 43 in file "iopin.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;  port            2    0[COMRAM] int 
  7941 ;;  pin             2    2[COMRAM] int 
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;		None
  7944 ;; Return value:  Size  Location     Type
  7945 ;;                  2    0[COMRAM] int 
  7946 ;; Registers used:
  7947 ;;		wreg, status,2, status,0
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;Total ram usage:        6 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; This function calls:
  7960 ;;		Nothing
  7961 ;; This function is called by:
  7962 ;;		_servoInterruptService
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text44
  7967  001174                     __ptext44:
  7968                           	opt stack 0
  7969  001174                     _digitalRead:
  7970                           	opt stack 21
  7971                           
  7972                           ;iopin.c: 44: switch(port){
  7973                           
  7974                           ;incstack = 0
  7975  001174  D040               	goto	i2l3145
  7976  001176                     i2l3127:
  7977  001176  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7978  00117A  CF80 F006          	movff	3968,??_digitalRead+1	;volatile
  7979  00117E  2A05               	incf	??_digitalRead,f,c
  7980  001180  D002               	goto	i2u255_44
  7981  001182                     i2u255_45:
  7982  001182  90D8               	bcf	status,0,c
  7983  001184  3206               	rrcf	??_digitalRead+1,f,c
  7984  001186                     i2u255_44:
  7985  001186  2E05               	decfsz	??_digitalRead,f,c
  7986  001188  D7FC               	goto	i2u255_45
  7987  00118A  0E01               	movlw	1
  7988  00118C  1606               	andwf	??_digitalRead+1,f,c
  7989  00118E  5006               	movf	??_digitalRead+1,w,c
  7990  001190  6E01               	movwf	?_digitalRead,c
  7991  001192  6A02               	clrf	?_digitalRead+1,c
  7992  001194  0012               	return	
  7993  001196                     i2l3131:
  7994  001196  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7995  00119A  CF81 F006          	movff	3969,??_digitalRead+1	;volatile
  7996  00119E  2A05               	incf	??_digitalRead,f,c
  7997  0011A0  D002               	goto	i2u256_44
  7998  0011A2                     i2u256_45:
  7999  0011A2  90D8               	bcf	status,0,c
  8000  0011A4  3206               	rrcf	??_digitalRead+1,f,c
  8001  0011A6                     i2u256_44:
  8002  0011A6  2E05               	decfsz	??_digitalRead,f,c
  8003  0011A8  D7FC               	goto	i2u256_45
  8004  0011AA  0E01               	movlw	1
  8005  0011AC  1606               	andwf	??_digitalRead+1,f,c
  8006  0011AE  5006               	movf	??_digitalRead+1,w,c
  8007  0011B0  6E01               	movwf	?_digitalRead,c
  8008  0011B2  6A02               	clrf	?_digitalRead+1,c
  8009  0011B4  0012               	return	
  8010  0011B6                     i2l3135:
  8011  0011B6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8012  0011BA  CF82 F006          	movff	3970,??_digitalRead+1	;volatile
  8013  0011BE  2A05               	incf	??_digitalRead,f,c
  8014  0011C0  D002               	goto	i2u257_44
  8015  0011C2                     i2u257_45:
  8016  0011C2  90D8               	bcf	status,0,c
  8017  0011C4  3206               	rrcf	??_digitalRead+1,f,c
  8018  0011C6                     i2u257_44:
  8019  0011C6  2E05               	decfsz	??_digitalRead,f,c
  8020  0011C8  D7FC               	goto	i2u257_45
  8021  0011CA  0E01               	movlw	1
  8022  0011CC  1606               	andwf	??_digitalRead+1,f,c
  8023  0011CE  5006               	movf	??_digitalRead+1,w,c
  8024  0011D0  6E01               	movwf	?_digitalRead,c
  8025  0011D2  6A02               	clrf	?_digitalRead+1,c
  8026  0011D4  0012               	return	
  8027  0011D6                     i2l3139:
  8028  0011D6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  8029  0011DA  CF83 F006          	movff	3971,??_digitalRead+1	;volatile
  8030  0011DE  2A05               	incf	??_digitalRead,f,c
  8031  0011E0  D002               	goto	i2u258_44
  8032  0011E2                     i2u258_45:
  8033  0011E2  90D8               	bcf	status,0,c
  8034  0011E4  3206               	rrcf	??_digitalRead+1,f,c
  8035  0011E6                     i2u258_44:
  8036  0011E6  2E05               	decfsz	??_digitalRead,f,c
  8037  0011E8  D7FC               	goto	i2u258_45
  8038  0011EA  0E01               	movlw	1
  8039  0011EC  1606               	andwf	??_digitalRead+1,f,c
  8040  0011EE  5006               	movf	??_digitalRead+1,w,c
  8041  0011F0  6E01               	movwf	?_digitalRead,c
  8042  0011F2  6A02               	clrf	?_digitalRead+1,c
  8043  0011F4  0012               	return	
  8044  0011F6                     i2l3145:
  8045  0011F6  C001  F005         	movff	digitalRead@port,??_digitalRead
  8046  0011FA  C002  F006         	movff	digitalRead@port+1,??_digitalRead+1
  8047                           
  8048                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8049                           ; Switch size 1, requested type "space"
  8050                           ; Number of cases is 1, Range of values is 0 to 0
  8051                           ; switch strategies available:
  8052                           ; Name         Instructions Cycles
  8053                           ; simple_byte            4     3 (average)
  8054                           ;	Chosen strategy is simple_byte
  8055  0011FE  5006               	movf	??_digitalRead+1,w,c
  8056  001200  0A00               	xorlw	0	; case 0
  8057  001202  A4D8               	btfss	status,2,c
  8058  001204  D00D               	goto	i2l258
  8059                           
  8060                           ; Switch size 1, requested type "space"
  8061                           ; Number of cases is 4, Range of values is 0 to 3
  8062                           ; switch strategies available:
  8063                           ; Name         Instructions Cycles
  8064                           ; simple_byte           13     7 (average)
  8065                           ;	Chosen strategy is simple_byte
  8066  001206  5005               	movf	??_digitalRead,w,c
  8067  001208  0A00               	xorlw	0	; case 0
  8068  00120A  B4D8               	btfsc	status,2,c
  8069  00120C  D7B4               	goto	i2l3127
  8070  00120E  0A01               	xorlw	1	; case 1
  8071  001210  B4D8               	btfsc	status,2,c
  8072  001212  D7C1               	goto	i2l3131
  8073  001214  0A03               	xorlw	3	; case 2
  8074  001216  B4D8               	btfsc	status,2,c
  8075  001218  D7CE               	goto	i2l3135
  8076  00121A  0A01               	xorlw	1	; case 3
  8077  00121C  B4D8               	btfsc	status,2,c
  8078  00121E  D7DB               	goto	i2l3139
  8079  001220                     i2l258:
  8080                           
  8081                           ;iopin.c: 50: return -1;
  8082  001220  6801               	setf	?_digitalRead,c
  8083  001222  6802               	setf	?_digitalRead+1,c
  8084  001224  0012               	return		;funcret
  8085  001226                     __end_of_digitalRead:
  8086                           	opt stack 0
  8087                           pclatu	equ	0xFFB
  8088                           pclath	equ	0xFFA
  8089                           tblptru	equ	0xFF8
  8090                           tblptrh	equ	0xFF7
  8091                           tblptrl	equ	0xFF6
  8092                           tablat	equ	0xFF5
  8093                           prodh	equ	0xFF4
  8094                           prodl	equ	0xFF3
  8095                           intcon	equ	0xFF2
  8096                           intcon3	equ	0xFF0
  8097                           postinc0	equ	0xFEE
  8098                           fsr0h	equ	0xFEA
  8099                           fsr0l	equ	0xFE9
  8100                           wreg	equ	0xFE8
  8101                           postdec1	equ	0xFE5
  8102                           fsr1h	equ	0xFE2
  8103                           fsr1l	equ	0xFE1
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           pclatu	equ	0xFFB
  8111                           pclath	equ	0xFFA
  8112                           tblptru	equ	0xFF8
  8113                           tblptrh	equ	0xFF7
  8114                           tblptrl	equ	0xFF6
  8115                           tablat	equ	0xFF5
  8116                           prodh	equ	0xFF4
  8117                           prodl	equ	0xFF3
  8118                           intcon	equ	0xFF2
  8119                           intcon3	equ	0xFF0
  8120                           postinc0	equ	0xFEE
  8121                           fsr0h	equ	0xFEA
  8122                           fsr0l	equ	0xFE9
  8123                           wreg	equ	0xFE8
  8124                           postdec1	equ	0xFE5
  8125                           fsr1h	equ	0xFE2
  8126                           fsr1l	equ	0xFE1
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           postdec2	equ	0xFDD
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8
  8133                           
  8134                           	psect	rparam
  8135  0000                     pclatu	equ	0xFFB
  8136                           pclath	equ	0xFFA
  8137                           tblptru	equ	0xFF8
  8138                           tblptrh	equ	0xFF7
  8139                           tblptrl	equ	0xFF6
  8140                           tablat	equ	0xFF5
  8141                           prodh	equ	0xFF4
  8142                           prodl	equ	0xFF3
  8143                           intcon	equ	0xFF2
  8144                           intcon3	equ	0xFF0
  8145                           postinc0	equ	0xFEE
  8146                           fsr0h	equ	0xFEA
  8147                           fsr0l	equ	0xFE9
  8148                           wreg	equ	0xFE8
  8149                           postdec1	equ	0xFE5
  8150                           fsr1h	equ	0xFE2
  8151                           fsr1l	equ	0xFE1
  8152                           indf2	equ	0xFDF
  8153                           postinc2	equ	0xFDE
  8154                           postdec2	equ	0xFDD
  8155                           fsr2h	equ	0xFDA
  8156                           fsr2l	equ	0xFD9
  8157                           status	equ	0xFD8
  8158                           
  8159                           	psect	temp
  8160  00007E                     btemp:
  8161                           	opt stack 0
  8162  00007E                     	ds	1
  8163  0000                     int$flags	set	btemp
  8164                           pclatu	equ	0xFFB
  8165                           pclath	equ	0xFFA
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           intcon3	equ	0xFF0
  8174                           postinc0	equ	0xFEE
  8175                           fsr0h	equ	0xFEA
  8176                           fsr0l	equ	0xFE9
  8177                           wreg	equ	0xFE8
  8178                           postdec1	equ	0xFE5
  8179                           fsr1h	equ	0xFE2
  8180                           fsr1l	equ	0xFE1
  8181                           indf2	equ	0xFDF
  8182                           postinc2	equ	0xFDE
  8183                           postdec2	equ	0xFDD
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8


Data Sizes:
    Strings     267
    Constant    96
    Data        8
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     43      75
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_17(CODE[17]), STR_16(CODE[18]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[18]), 
		 -> STR_5(CODE[4]), STR_4(CODE[9]), STR_3(CODE[8]), STR_2(CODE[9]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->_setAngle
    _sortBatteryInterruptService->i2_printf
    _setAngle->_angleToPulse
    i2_printf->i2___llmod
    i2_lcdNewline->i2_lcdInst
    i2___llmod->i2___lldiv
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_showInterface
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___llmod
    _lcdNewline->_lcdInst
    ___llmod->___lldiv
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23539
                       _digitalWrite
                            _initLCD
                            _initRTC
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0   18886
                                             42 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0    3092
                                             41 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0    3070
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              28    22      6    2935
                                             22 BANK0     19    13      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     287
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0     696
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     696
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (6) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _digitalWrite                                         9     3      6     752
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0   19985
                                            102 COMRAM    15    15      0
              _servoInterruptService
                           _setAngle
        _sortBatteryInterruptService
 ---------------------------------------------------------------------------------
 (9) _sortBatteryInterruptService                          0     0      0    1730
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _setAngle                                            10     6      4   16412
                                             92 COMRAM    10     6      4
                       _angleToPulse
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           28    22      6    1595
                                             22 COMRAM    19    13      6
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2___llmod                                           9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lldiv                                          13     5      8     266
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2_lcdClear                                          0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (13) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) _angleToPulse                                       23    19      4   14104
                                             69 COMRAM    23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     316
                                             54 COMRAM    15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            15     9      6    2665
                                             27 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftdiv                                            15     9      6    2747
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            12     6      6    3409
                                             42 COMRAM    12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___awtoft                                            4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4    2503
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1776
                                              9 COMRAM    12    12      0
                        _digitalRead
                         _startTimer
                     i2_digitalWrite
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) _startTimer                                          8     2      6     666
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) _digitalRead                                         6     2      4     238
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initRTC
     _I2C_Master_Init
       ___lldiv
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble

 _service (ROOT)
   _servoInterruptService
     _digitalRead
     _startTimer
     i2_digitalWrite
   _setAngle
     _angleToPulse
       ___altoft
         ___ftpack
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble
   _sortBatteryInterruptService
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2B      4B       5       58.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C8      34        0.0%
DATA                 0      0      C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 12 19:09:22 2017

                        ___altoft@exp 0011                         ___altoft@sign 0012  
                                  l74 17AA                           __CFG_BORV$3 000000  
                        __CFG_CP0$OFF 000000                          __CFG_CP1$OFF 000000  
                        __CFG_CP2$OFF 000000                          __CFG_CP3$OFF 000000  
                         __CFG_OSC$HS 000000                          ___ftadd@exp1 0036  
                        ___ftadd@exp2 0035                          ___ftadd@sign 0034  
                                 l157 1998                                   l191 1930  
                                 l194 193E                                   l565 00A8  
                                 l569 0116                       ??_showInterface 00AA  
                                 l945 1162                                   l955 14B0  
                        __CFG_CPB$OFF 000000                                   _PEN 007E2A  
                        __CFG_CPD$OFF 000000                                   _SEN 007E28  
                                 _pin 00BB                                   wreg 000FE8  
                          i2_lcdClear 1AF8                          __CFG_LVP$OFF 000000  
                        ___ftdiv@cntr 0016                          ___ftdiv@sign 001B  
                        __CFG_WDT$OFF 000000                                  l3401 0BFC  
                                l3421 1018                                  l3405 0C06  
                                l3431 1048                                  l2703 0034  
                                l3407 0C12                                  l3351 0B28  
                                l3433 1050                                  l3425 102C  
                                l2713 0060                                  l2705 003C  
                                l3353 0B32                                  l3443 1080  
                                l3427 1034                                  l2707 0042  
                                l3363 0B5C                                  l3355 0B36  
                                l3437 1064                                  l3445 1088  
                                l2661 10E6                                  l2725 00D0  
                                l2709 0048                                  l2717 006A  
                                l3349 0B24                                  l3439 106C  
                                l2663 10F6                                  l2743 0162  
                                l3383 0BAE                                  l3367 0B6A  
                                l2673 1150                                  l2665 10FC  
                                l2681 1444                                  l2745 0168  
                                l3393 0BDC                                  l3385 0BB6  
                                l2683 1454                                  l2739 0138  
                                l3379 0BA4                                  l2685 145A  
                                l2781 0230                                  l2757 01AE  
                                l2773 01FA                                  l3397 0BEC  
                                l2783 02B4                                  l2791 033C  
                                l2759 01B4                                  l2775 020C  
                                l2689 149E                                  l2793 0344  
                                l2779 0220                                  l2699 0020  
                                l2795 035A                                  l2789 032A  
                                _EEIF 007D0C                                  STR_1 FFE9  
                                STR_2 FFE0                                  STR_3 FFF2  
                                STR_4 FFD7                                  STR_5 FFFA  
                                STR_6 FF18                                  STR_7 FFC6  
                                STR_8 FF06                                  STR_9 FF93  
                                u3004 0FF6                                  u3005 0FEE  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  _LATD 000F8C  
                                _LATE 000F8D                                  u3307 1962  
                                u3317 1978                                  u3327 1564  
                                u3337 1572                                  u3347 15A2  
                                u3357 15B0                                  u3277 199C  
                                u3287 1800                                  u3297 1836  
                                u2595 1730                                  _PEIE 007F96  
                                _RCEN 007E2B                                  _RSEN 007E29  
                                _main 1760                          ___ftpack@arg 0001  
                                _keys FEDB                          ___ftpack@exp 0004  
                                _port 0076                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 007E                                  prodh 000FF4  
                                prodl 000FF3                                  start 000E  
                       __CFG_IESO$OFF 000000                       __end_ofi2_putch 1A8C  
                       __CFG_MCLRE$ON 000000                          ___ftmul@cntr 0029  
                        ___param_bank 000000                          ___ftmul@sign 002A  
                         i2_lcdNibble 169A                          ___fttol@exp1 0045  
                        ___fttol@lval 0041                      ?_I2C_Master_Init 008D  
                __end_of_angleToPulse 0B24                                 ?_main 0001  
                               _ACKEN 007E2C                                 _ACKDT 007E2D  
                               _EEADR 000FA9                       __end_of___ftadd 09E4  
                               STR_10 FF2A                                 STR_11 FF82  
                               STR_12 FEF3                                 STR_13 FFA4  
                               STR_14 FF3C                                 STR_15 FF71  
                               STR_16 FF4E                                 STR_17 FFB5  
                               STR_18 FF60                       __end_of___ftdiv 0EF6  
             ??_servoInterruptService 000A                       __end_of___lldiv 1174  
                     __end_of___ftmul 0E10                                 _T0CON 000FD5  
                               _T1CON 000FCD                       __end_of___llmod 14C2  
                     __end_of___fttol 0D1C                                 _T3CON 000FB1  
                               i2l131 0F9C                                 i2l157 1A7A  
                               i2l258 1220                                 i2l363 17AE  
                               i2l365 17BA                                 i2l366 17C6  
                               i2l490 07EE                                 i2l492 07F2  
                               i2l820 12B4                                 i2l493 07F6  
                               i2l565 03F6                                 i2l494 07FA  
                               i2l495 0836                                 i2l569 0456  
                               i2l843 087C                                 i2l847 08A6  
                               i2l945 1532                                 i2l858 0956  
                               i2l867 0972                                 i2l955 1688  
                               i2l878 0EC4                                 _TMR0H 000FD7  
                               _TMR1H 000FCF                                 _TMR0L 000FD6  
                               _TMR3H 000FB3                                 _TMR1L 000FCE  
                               _TMR3L 000FB2                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _PORTD 000F83                                 _TRISA 000F92  
                               _TRISB 000F93                                 _TRISC 000F94  
                               _TRISD 000F95                                 _TRISE 000F96  
                       __CFG_PWRT$OFF 000000                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                       __CFG_WRT3$OFF 000000                       __end_of_lcdInst 1984  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
              servoInterruptService@i 0014                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
               __size_ofi2_lcdNewline 0008                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                         __CFG_WRTD$OFF 000000  
                     __end_of_initLCD 1842                        __CFG_EBTRB$OFF 000000  
                       ___awtoft@sign 000C                       __end_of_initRTC 1AC6  
                     __end_of_dpowers FEBB                         ___ftpack@sign 0005  
                               _pulse 00AB                                 _putch 1984  
                               pclath 000FFA                                 tablat 000FF5  
                     __end_of_service 0FD8                       __end_of_runMenu 1930  
                     __end_of_runTime 19D2                                 status 000FD8  
                      __CFG_PBADEN$ON 000000                    __size_ofi2___lldiv 0082  
                  __size_ofi2___llmod 0066                      __end_ofi2_printf 0664  
                __end_of_digitalWrite 10B8                       __initialization 1842  
                   i2___lldiv@divisor 0005                    __size_ofi2_lcdInst 0022  
                        __end_of_main 17AC                     i2___lldiv@counter 000D  
                        __end_of_keys FEEC                            i2printf@ap 0022  
                        i2_lcdNewline 1AF0                                ??_main 00AB  
                       ___fttol@sign1 0040                         __activetblptr 000002  
                __size_of_digitalRead 00B2                           ?i2_lcdClear 0001  
                              _ADCON0 000FC2                                _ADCON1 000FC1  
                              _ADCON2 000FC0                      __end_of___altoft 1634  
                    ___llmod@dividend 008D                                _ADRESH 000FC4  
                              _EEADRH 000FAA                                _ADRESL 000FC3  
                              _EEDATA 000FA8                                _EECON1 000FA6  
                              _EECON2 000FA7                       i2lcdNibble@data 0002  
                    __end_of___awtoft 18FE                                ?_putch 0001  
                    __end_of___ftpack 12D4                       i2lcdNibble@temp 0001  
                              _INT0IF 007F91                                _INT1IE 007F83  
                              _INT1IF 007F80                                i2l3013 0CBA  
                              i2l3031 0D0A                                i2l3023 0CE2  
                              i2l3025 0CEE                                i2l3017 0CCA  
                              i2l3131 1196                                i2l3203 133A  
                              i2l3211 1354                                i2l3027 0CF4  
                              i2l3051 14F0                                i2l3205 1340  
                              i2l3061 1524                                i2l3053 14F4  
                              i2l3301 0542                                i2l3135 11B6  
                              i2l3127 1176                                i2l3071 1652  
                              i2l3303 05BA                                i2l3311 0634  
                              i2l3223 0392                                i2l3145 11F6  
                              i2l3209 134E                                i2l3049 14E4  
                              i2l3073 1656                                i2l3313 063A  
                              i2l3233 03B4                                i2l3225 0398  
                              i2l3139 11D6                                i2l3227 039C  
                              i2l3219 0382                                i2l3315 064A  
                              u205_41 0848                                i2l3077 167A  
                              i2l3069 1646                                i2l3309 0624  
                              i2l3245 041A                                i2l3229 03A0  
                              i2l3237 03BC                                i2l3159 17D2  
                              i2l3191 1312                                i2l2631 126C  
                              i2l2623 1236                                i2l3263 049C  
                              i2l3193 1318                                i2l3265 04A0  
                              i2l3187 1304                                i2l2635 1282  
                              i2l2627 1244                                i2l3259 0476  
                              i2l3197 1326                                i2l2637 12A0  
                              i2l2629 124E                                i2l2805 15DE  
                              i2l2821 088A                                u206_41 085C  
                              i2l3277 04D8                                i2l3293 0514  
                              i2l3533 0F3E                                i2l3199 132C  
                              i2l3471 0828                                i2l2639 12AA  
                              i2l2807 15EA                                i2l3279 04DC  
                              i2l3295 0524                                i2l3543 0F66  
                              i2l3465 0770                                i2l3457 06B8  
                              i2l2851 0910                                i2l2843 08E4  
                              i2l2827 08B4                                i2l2915 0E9E  
                              i2l3299 0536                                i2l3547 0F80  
                              i2l3469 07FE                                i2l2861 0944  
                              i2l2853 091A                                i2l2941 0D6C  
                              u231_41 0D2C                                i2l2863 094E  
                              i2l2855 0922                                i2l2935 0D44  
                              i2l2849 0906                                i2l2955 0D9E  
                              i2l2869 098E                                i2l2965 0DC6  
                              i2l2879 09BE                                i2l2895 0E60  
                              i2l2959 0DAE                                i2l2985 18DA  
                              i2l2889 0E38                                i2l2969 0DD6  
                              i2l2995 0C54                                u233_41 0D54  
                              u226_41 0E20                                u228_41 0E48  
                              u238_41 0C38                                _TMR0IE 007F95  
                              _TMR0IF 007F92                             ??i2_putch 0005  
                              _TMR1IE 007CE8                                _TMR1IF 007CF0  
                              _TMR2IF 007CF1                                _TMR3IE 007D01  
                              _TMR3IF 007D09                                _SSPADD 000FC8  
                              _TRISC3 007CA3                                _TRISC4 007CA4  
                              _SSPBUF 000FC9                      __end_of_dateTime 1A6A  
                    __end_of_lcdClear 1AF0                     _angleToPulse$1198 0056  
                      __CFG_XINST$OFF 000000                      __end_of_mainMenu 1A44  
                           ??___ftadd 0031                        __CFG_STVREN$ON 000000  
                           ??___ftdiv 0013                             ??___lldiv 0088  
                           ??___ftmul 0022                             ??___llmod 0095  
                           ??___fttol 003B                                clear_0 1868  
                              clear_1 1874                             ??_lcdInst 0082  
                              _printf 0012                      __end_of_pinSetup 18C6  
                    __end_of_setAngle 1428                 ___ftmul@f3_as_product 0026  
                           ??_initLCD 0084                             ??_initRTC 0095  
                   __end_ofi2___lldiv 1544                         setAngle@angle 005F  
                   __end_ofi2___llmod 169A                          __mediumconst FE92  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                         setAngle@timer 005D  
                           ??_service 0067                             ??_runMenu 00A9  
                    __end_of_runStats 19F8                             ??_runTime 00A9  
                   __end_ofi2_lcdInst 1AAE                            __accesstop 0080  
             __end_of__initialization 187A                            ___altoft@c 0009  
                          ___ftadd@f1 002B                            ___ftadd@f2 002E  
                       ___rparam_used 000001                            ___ftdiv@f1 000D  
                          ___ftdiv@f2 0010                            ___ftdiv@f3 0017  
                          ___awtoft@c 0009                     i2___llmod@divisor 0012  
                   i2___llmod@counter 0016                            ___ftmul@f1 001C  
                          ___ftmul@f2 001F                            ___fttol@f1 0037  
                __end_of_happynewyear FEF3                        __pcstackCOMRAM 0001  
                  i2___lldiv@dividend 0001                 __size_of_angleToPulse 0140  
                 __size_ofi2_lcdClear 0008                          __pidataBANK0 1AD8  
                       __end_of_putch 19AC                           i2printf@idx 001F  
                         i2printf@val 0024                    __size_of_lcdNibble 0078  
                         i2putch@data 0005                             ?i2_printf 0017  
                  i2digitalWrite@port 0001                               ??_putch 0084  
                  i2___lldiv@quotient 0009                            __pbssBANK0 00AB  
                        _angleToPulse 09E4                 __size_of_digitalWrite 00E0  
                        ?i2_lcdNibble 0001                             ?___altoft 0009  
                          _lcdNewline 1AE0                             ?___awtoft 0009  
                           ?___ftpack 0001                               ?_printf 0096  
          servoInterruptService@flags 000C        __size_of_servoInterruptService 01D4  
       __end_of_servoInterruptService 0838                 __end_of_showInterface 0C28  
                           ?_dateTime 0001                             ?_lcdClear 0001  
                  __size_of_runSelect 0026                      angleToPulse@a000 0059  
                          ??i2_printf 001D                      angleToPulse@a180 0052  
                        _digitalWrite 0FD8                               _SSPCON1 000FC6  
                             _SSPCON2 000FC5                               _SSPSTAT 000FC7  
                           ?_mainMenu 0001               __size_ofi2_digitalWrite 00AC  
                             i2_putch 1A6A                             ?_pinSetup 0001  
                           ?_setAngle 005D                     __end_of_lcdNibble 15BC  
                             __Hparam 0000                               __Lparam 0000  
                             ___ftadd 0838                            _readKeypad 1930  
                             ___ftdiv 0E10                               ___lldiv 10B8  
                             ___ftmul 0D1C                               ___llmod 1428  
                             ___fttol 0C28                             ?_runStats 0001  
                          ??___altoft 000D                               __pcinit 1842  
                          ??___awtoft 000C                            ??___ftpack 0006  
                             __ramtop 1000                               _lcdInst 195A  
                             __ptext0 1760                               __ptext1 0B24  
                             __ptext2 19AC                               __ptext3 19D2  
                             __ptext4 19F8                               __ptext5 18FE  
                             __ptext6 1930                               __ptext7 1A1E  
                             __ptext8 1A44                               __ptext9 0012  
                     __size_of_printf 0366                         startTimer@val 0003  
                             _initLCD 17F8                     __end_of_hexpowers FEDB  
                             _initRTC 1AAE                               _dpowers FE93  
                          ??_dateTime 00A9                          ??i2_lcdClear 0005  
            __size_of_I2C_Master_Init 0060                            ??_lcdClear 0084  
                             _service 0008                               _runMenu 18FE  
                             _runTime 19AC                        __pintcode_body 0EF6  
                end_of_initialization 187A                            ??_mainMenu 00A9  
                       __Lmediumconst FE92                               int_func 0EF6  
                      digitalRead@pin 0003                            ??_pinSetup 0080  
                          ??_setAngle 0061                       ___lldiv@divisor 0084  
                     ___lldiv@counter 008C                     __end_of_runSelect 1A1E  
                             printf@c 00A8                               printf@f 0096  
                    I2C_Master_Init@c 008D                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                    __end_ofi2_lcdClear 1B00  
                          ??_runStats 00A9                         ??_digitalRead 0005  
                         ?_lcdNewline 0001                             _PORTBbits 000F81  
                    showInterface@key 00AA                          _happynewyear FEEC  
                  angleToPulse@offset 004E                             i2___lldiv 14C2  
                           i2___llmod 1634                            _startTimer 17AC  
        ?_sortBatteryInterruptService 0001                             i2_lcdInst 1A8C  
                         ___ftdiv@exp 001A                    i2___llmod@dividend 000E  
                         ___ftmul@exp 0025                           ?_readKeypad 0001  
                __size_ofi2_lcdNibble 0066                         i2lcdInst@data 0004  
                      __end_of_printf 0378                          i2printf@flag 0028  
                        i2printf@prec 0020                   start_initialization 1842  
                 __end_of_digitalRead 1226                             i2printf@c 0029  
                           i2printf@f 0017                            ?i2___lldiv 0001  
                          ?i2___llmod 000E                     __size_ofi2_printf 02EC  
                      i2_digitalWrite 12D4                     ??_I2C_Master_Init 0091  
                          ?i2_lcdInst 0001                   __size_of_lcdNewline 0008  
       ??_sortBatteryInterruptService 002A                       ___llmod@divisor 0091  
                     ___llmod@counter 0095                           __pdataBANK0 00C3  
                    __CFG_LPT1OSC$OFF 000000                              ??_printf 009C  
                   __size_of___altoft 0078                     __size_of___awtoft 0038  
                   __size_of___ftpack 00AE                           __pbssCOMRAM 0076  
                       __pcstackBANK0 0080                __end_ofi2_digitalWrite 1380  
                   __size_of_dateTime 0026                           ?_startTimer 0001  
                   __size_of_lcdClear 0008                   __size_of_readKeypad 002A  
                            ?i2_putch 0001                     __size_of_mainMenu 0026  
                   i2digitalWrite@pin 0003                     i2digitalWrite@val 0005  
                   __CFG_CCP2MX$PORTC 000000                     __size_of_pinSetup 003E  
                   __size_of_setAngle 00A8                             __pintcode 0008  
                       __pmediumconst FE92                             _lcdNibble 1544  
                            ?___ftadd 002B                              ?___ftdiv 000D  
                            ?___lldiv 0080                              ?___ftmul 001C  
                            ?___llmod 008D                              ?___fttol 0037  
__size_of_sortBatteryInterruptService 0012                         ?i2_lcdNewline 0001  
                         _digitalRead 1174                              ?_lcdInst 0001  
                   __size_of_runStats 0026                              ?_initLCD 0001  
                            ?_initRTC 0001                       startTimer@timer 0001  
                            ?_service 0001                             _hexpowers FEBB  
                            ?_runMenu 0001                              ?_runTime 0001  
                     ?i2_digitalWrite 0001                 _servoInterruptService 0664  
                         ??i2___lldiv 0009                           ??i2___llmod 0016  
                      __size_of_putch 0028                           ??i2_lcdInst 0003  
                            _LATDbits 000F8C                              i2u310_40 0688  
                            i2u311_40 068A                              i2u312_40 0696  
                            i2u240_40 0C72                              i2u240_45 0C6A  
                            i2u313_40 0698                              i2u314_40 06B6  
                            i2u306_40 066C                              i2u307_40 066E  
                            i2u308_40 067A                              i2u260_44 12EA  
                            i2u260_45 12E4                              i2u340_47 16C0  
                            i2u309_40 067C                              i2u341_47 16E6  
                            i2u342_47 16F4                              i2u255_44 1186  
                            i2u255_45 1182                              i2u256_44 11A6  
                            i2u256_45 11A2                              i2u336_47 1A7E  
                            i2u257_44 11C6                              i2u257_45 11C2  
                            i2u337_47 1A92                              i2u258_44 11E6  
                            i2u258_45 11E2                              i2u338_47 1AA4  
                            i2u339_47 16B2                __size_of_showInterface 0104  
                    __CFG_WDTPS$32768 000000                            ?_lcdNibble 0001  
                      ??i2_lcdNewline 0005                            service@key 0075  
                        ??_lcdNewline 0084                   __size_of_startTimer 004C  
                           _runSelect 19F8                     angleToPulse@angle 0046  
                       lcdNibble@data 0081                            printf@flag 00A7  
                       lcdNibble@temp 0080                            printf@prec 009F  
                          runMenu@key 00A9                              i2_printf 0378  
                           copy_data0 1856                      __size_ofi2_putch 0022  
                  __end_of_lcdNewline 1AE8                         readKeypad@key 0080  
                            __Hrparam 0000                              __Lrparam 0000  
                  __CFG_BOREN$SBORDIS 000000                          ??_readKeypad 0080  
                    __size_of___ftadd 01AC                      __size_of___ftdiv 00E6  
                    __size_of___lldiv 00BC                              ___altoft 15BC  
                    __size_of___ftmul 00F4                      __size_of___llmod 009A  
                    __size_of___fttol 00F4                            ?_runSelect 0001  
                            ___awtoft 18C6                              ___ftpack 1226  
                    __size_of_lcdInst 002A                              _binAngle 00C3  
                     _I2C_Master_Init 1700                      __size_of_initLCD 004A  
                    __size_of_initRTC 0018                              _dateTime 1A44  
              ?_servoInterruptService 0001                         _showInterface 0B24  
                            _lcdClear 1AE8                              __ptext10 1984  
                            __ptext11 1AE0                              __ptext20 1544  
                            __ptext12 1428                              __ptext21 0FD8  
                            __ptext13 1AE8                              __ptext30 1AF8  
                            __ptext14 1888                              __ptext31 1A8C  
                            __ptext23 1AC6                              __ptext15 1AAE  
                            __ptext40 1226                              __ptext32 169A  
                            __ptext24 1380                              __ptext16 1700  
                            __ptext41 0664                              __ptext33 09E4  
                            __ptext25 0378                              __ptext17 10B8  
                            __ptext42 12D4                              __ptext34 0C28  
                            __ptext26 1A6A                              __ptext18 17F8  
                            __ptext43 17AC                              __ptext35 0D1C  
                            __ptext27 1AF0                              __ptext19 195A  
                            __ptext44 1174                              __ptext36 0E10  
                            __ptext28 1634                              __ptext37 0838  
                            __ptext29 14C2                              __ptext38 18C6  
                            __ptext39 15BC                      __size_of_service 0FD0  
                    __size_of_runMenu 0032                      __size_of_runTime 0026  
                            _mainMenu 1A1E                    __end_of_readKeypad 195A  
                       ?_angleToPulse 0046                         __size_of_main 004C  
                            _pinSetup 1888                              _setAngle 1380  
                       ??i2_lcdNibble 0001                           ??_lcdNibble 0080  
                            int$flags 007E                              _runStats 19D2  
                           printf@idx 009E                             printf@val 00A3  
                           putch@data 0084                            _INTCONbits 000FF2  
                      ?_showInterface 0001                         ?_digitalWrite 0080  
                        ??_startTimer 0007                       digitalRead@port 0001  
                            intlevel2 0000                        ??_angleToPulse 004A  
                __end_ofi2_lcdNewline 1AF8                      ___lldiv@dividend 0080  
                            printf@ap 00A1               __end_of_I2C_Master_Init 1760  
                         lcdInst@data 0083                          ?_digitalRead 0001  
                         ??_runSelect 00A9                    __end_of_startTimer 17F8  
                 __end_ofi2_lcdNibble 1700                      ??i2_digitalWrite 0007  
                    digitalWrite@port 0080                      ___lldiv@quotient 0088  
                      ??_digitalWrite 0086   __end_of_sortBatteryInterruptService 1AD8  
         _sortBatteryInterruptService 1AC6                       digitalWrite@pin 0082  
                     digitalWrite@val 0084  
