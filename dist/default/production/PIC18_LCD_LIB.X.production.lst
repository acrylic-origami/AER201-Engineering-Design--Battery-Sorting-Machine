

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 10:51:38 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           ; Version 1.40
    95                           ; Generated 01/12/2016 GMT
    96                           ; 
    97                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F4620 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     
   129                           	psect	idataCOMRAM
   130  003E18                     __pidataCOMRAM:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _V_LIM_9V
   134  003E18  77                 	db	119
   135  003E19  EE                 	db	238
   136  003E1A  3F                 	db	63
   137                           
   138                           ;initializer for _angle
   139  003E1B  005A               	dw	90
   140                           
   141                           ;initializer for _padAngle_OPEN
   142  003E1D  00B4               	dw	180
   143                           
   144                           ;initializer for _redirectAngle_9V
   145  003E1F  0076               	dw	118
   146                           
   147                           ;initializer for _redirectAngle_C
   148  003E21  00A6               	dw	166
   149                           
   150                           ;initializer for _AA_float
   151  003E23  0002               	dw	2
   152  003E25  0005               	dw	5
   153                           
   154                           	psect	idataBANK0
   155  003E34                     __pidataBANK0:
   156                           	opt stack 0
   157                           
   158                           ;initializer for _V_LIM_AA
   159  003E34  C1                 	db	193
   160  003E35  4A                 	db	74
   161  003E36  3E                 	db	62
   162                           
   163                           ;initializer for _V_LIM_C
   164  003E37  A7                 	db	167
   165  003E38  A9                 	db	169
   166  003E39  3F                 	db	63
   167                           
   168                           ;initializer for _padAngle_CLOSE
   169  003E3A  0046               	dw	70
   170                           
   171                           ;initializer for _redirectAngle_OTHER
   172  003E3C  0099               	dw	153
   173                           
   174                           	psect	idataBANK1
   175  003D32                     __pidataBANK1:
   176                           	opt stack 0
   177                           
   178                           ;initializer for _cylinderDir
   179  003D32  0003               	dw	3
   180  003D34  0001               	dw	1
   181                           
   182                           ;initializer for _padAngle_NEUTRAL
   183  003D36  0082               	dw	130
   184                           
   185                           ;initializer for _redirectAngle_AA
   186  003D38  008A               	dw	138
   187                           
   188                           ;initializer for _stoppingTime
   189  003D3A  2710               	dw	10000
   190                           
   191                           ;initializer for _conveyorServo
   192  003D3C  0002               	dw	2
   193  003D3E  0002               	dw	2
   194                           
   195                           ;initializer for _cylinderMotor
   196  003D40  0002               	dw	2
   197  003D42  0000               	dw	0
   198                           
   199                           ;initializer for _padPin1
   200  003D44  0002               	dw	2
   201  003D46  0006               	dw	6
   202                           
   203                           ;initializer for _padPin2
   204  003D48  0002               	dw	2
   205  003D4A  0007               	dw	7
   206                           
   207                           ;initializer for _padServo
   208  003D4C  0002               	dw	2
   209  003D4E  0001               	dw	1
   210                           
   211                           ;initializer for _redirectingServo
   212  003D50  0003               	dw	3
   213  003D52  0000               	dw	0
   214                           
   215                           	psect	mediumconst
   216  00FDD8                     __pmediumconst:
   217                           	opt stack 0
   218  00FDD8  00                 	db	0
   219  00FDD9                     _dpowers:
   220                           	opt stack 0
   221  00FDD9  0001               	dw	1
   222  00FDDB  0000               	dw	0
   223  00FDDD  000A               	dw	10
   224  00FDDF  0000               	dw	0
   225  00FDE1  0064               	dw	100
   226  00FDE3  0000               	dw	0
   227  00FDE5  03E8               	dw	1000
   228  00FDE7  0000               	dw	0
   229  00FDE9  2710               	dw	10000
   230  00FDEB  0000               	dw	0
   231  00FDED  86A0               	dw	34464
   232  00FDEF  0001               	dw	1
   233  00FDF1  4240               	dw	16960
   234  00FDF3  000F               	dw	15
   235  00FDF5  9680               	dw	38528
   236  00FDF7  0098               	dw	152
   237  00FDF9  E100               	dw	57600
   238  00FDFB  05F5               	dw	1525
   239  00FDFD  CA00               	dw	51712
   240  00FDFF  3B9A               	dw	15258
   241  00FE01                     __end_of_dpowers:
   242                           	opt stack 0
   243  00FE01                     __npowers_:
   244                           	opt stack 0
   245  00FE01  00                 	db	0
   246  00FE02  80                 	db	128
   247  00FE03  3F                 	db	63
   248  00FE04  CD                 	db	205
   249  00FE05  CC                 	db	204
   250  00FE06  3D                 	db	61
   251  00FE07  D7                 	db	215
   252  00FE08  23                 	db	35
   253  00FE09  3C                 	db	60
   254  00FE0A  12                 	db	18
   255  00FE0B  83                 	db	131
   256  00FE0C  3A                 	db	58
   257  00FE0D  B7                 	db	183
   258  00FE0E  D1                 	db	209
   259  00FE0F  38                 	db	56
   260  00FE10  C6                 	db	198
   261  00FE11  27                 	db	39
   262  00FE12  37                 	db	55
   263  00FE13  38                 	db	56
   264  00FE14  86                 	db	134
   265  00FE15  35                 	db	53
   266  00FE16  C0                 	db	192
   267  00FE17  D6                 	db	214
   268  00FE18  33                 	db	51
   269  00FE19  CC                 	db	204
   270  00FE1A  2B                 	db	43
   271  00FE1B  32                 	db	50
   272  00FE1C  70                 	db	112
   273  00FE1D  89                 	db	137
   274  00FE1E  30                 	db	48
   275  00FE1F  E7                 	db	231
   276  00FE20  DB                 	db	219
   277  00FE21  2E                 	db	46
   278  00FE22  E5                 	db	229
   279  00FE23  3C                 	db	60
   280  00FE24  1E                 	db	30
   281  00FE25  42                 	db	66
   282  00FE26  A2                 	db	162
   283  00FE27  0D                 	db	13
   284  00FE28                     __end_of__npowers_:
   285                           	opt stack 0
   286  00FE28                     __powers_:
   287                           	opt stack 0
   288  00FE28  00                 	db	0
   289  00FE29  80                 	db	128
   290  00FE2A  3F                 	db	63
   291  00FE2B  00                 	db	0
   292  00FE2C  20                 	db	32
   293  00FE2D  41                 	db	65
   294  00FE2E  00                 	db	0
   295  00FE2F  C8                 	db	200
   296  00FE30  42                 	db	66
   297  00FE31  00                 	db	0
   298  00FE32  7A                 	db	122
   299  00FE33  44                 	db	68
   300  00FE34  40                 	db	64
   301  00FE35  1C                 	db	28
   302  00FE36  46                 	db	70
   303  00FE37  50                 	db	80
   304  00FE38  C3                 	db	195
   305  00FE39  47                 	db	71
   306  00FE3A  24                 	db	36
   307  00FE3B  74                 	db	116
   308  00FE3C  49                 	db	73
   309  00FE3D  97                 	db	151
   310  00FE3E  18                 	db	24
   311  00FE3F  4B                 	db	75
   312  00FE40  BC                 	db	188
   313  00FE41  BE                 	db	190
   314  00FE42  4C                 	db	76
   315  00FE43  6B                 	db	107
   316  00FE44  6E                 	db	110
   317  00FE45  4E                 	db	78
   318  00FE46  03                 	db	3
   319  00FE47  15                 	db	21
   320  00FE48  50                 	db	80
   321  00FE49  79                 	db	121
   322  00FE4A  AD                 	db	173
   323  00FE4B  60                 	db	96
   324  00FE4C  F3                 	db	243
   325  00FE4D  49                 	db	73
   326  00FE4E  71                 	db	113
   327  00FE4F                     __end_of__powers_:
   328                           	opt stack 0
   329  00FE4F                     _hexpowers:
   330                           	opt stack 0
   331  00FE4F  0001               	dw	1
   332  00FE51  0000               	dw	0
   333  00FE53  0010               	dw	16
   334  00FE55  0000               	dw	0
   335  00FE57  0100               	dw	256
   336  00FE59  0000               	dw	0
   337  00FE5B  1000               	dw	4096
   338  00FE5D  0000               	dw	0
   339  00FE5F  0000               	dw	0
   340  00FE61  0001               	dw	1
   341  00FE63  0000               	dw	0
   342  00FE65  0010               	dw	16
   343  00FE67  0000               	dw	0
   344  00FE69  0100               	dw	256
   345  00FE6B  0000               	dw	0
   346  00FE6D  1000               	dw	4096
   347  00FE6F                     __end_of_hexpowers:
   348                           	opt stack 0
   349  00FE6F                     _keys:
   350                           	opt stack 0
   351  00FE6F  31                 	db	49
   352  00FE70  32                 	db	50
   353  00FE71  33                 	db	51
   354  00FE72  41                 	db	65
   355  00FE73  34                 	db	52
   356  00FE74  35                 	db	53
   357  00FE75  36                 	db	54
   358  00FE76  42                 	db	66
   359  00FE77  37                 	db	55
   360  00FE78  38                 	db	56
   361  00FE79  39                 	db	57
   362  00FE7A  43                 	db	67
   363  00FE7B  2A                 	db	42
   364  00FE7C  30                 	db	48
   365  00FE7D  23                 	db	35
   366  00FE7E  44                 	db	68
   367  00FE7F  00                 	db	0
   368  00FE80                     __end_of_keys:
   369                           	opt stack 0
   370  00FE80                     _happynewyear:
   371                           	opt stack 0
   372  00FE80  00                 	db	0
   373  00FE81  00                 	db	0
   374  00FE82  00                 	db	0
   375  00FE83  01                 	db	1
   376  00FE84  08                 	db	8
   377  00FE85  04                 	db	4
   378  00FE86  17                 	db	23
   379  00FE87                     __end_of_happynewyear:
   380                           	opt stack 0
   381  0000                     _ADCON0	set	4034
   382  0000                     _ADCON1	set	4033
   383  0000                     _ADCON2	set	4032
   384  0000                     _ADRESH	set	4036
   385  0000                     _ADRESL	set	4035
   386  0000                     _EEADR	set	4009
   387  0000                     _EEADRH	set	4010
   388  0000                     _EECON1	set	4006
   389  0000                     _EECON2	set	4007
   390  0000                     _EEDATA	set	4008
   391  0000                     _INTCONbits	set	4082
   392  0000                     _LATA	set	3977
   393  0000                     _LATB	set	3978
   394  0000                     _LATC	set	3979
   395  0000                     _LATD	set	3980
   396  0000                     _LATDbits	set	3980
   397  0000                     _LATE	set	3981
   398  0000                     _PORTA	set	3968
   399  0000                     _PORTB	set	3969
   400  0000                     _PORTBbits	set	3969
   401  0000                     _PORTC	set	3970
   402  0000                     _PORTD	set	3971
   403  0000                     _SSPADD	set	4040
   404  0000                     _SSPBUF	set	4041
   405  0000                     _SSPCON1	set	4038
   406  0000                     _SSPCON2	set	4037
   407  0000                     _SSPSTAT	set	4039
   408  0000                     _T0CON	set	4053
   409  0000                     _T1CON	set	4045
   410  0000                     _T3CON	set	4017
   411  0000                     _TMR0H	set	4055
   412  0000                     _TMR0L	set	4054
   413  0000                     _TMR1H	set	4047
   414  0000                     _TMR1L	set	4046
   415  0000                     _TMR3H	set	4019
   416  0000                     _TMR3L	set	4018
   417  0000                     _TRISA	set	3986
   418  0000                     _TRISB	set	3987
   419  0000                     _TRISC	set	3988
   420  0000                     _TRISD	set	3989
   421  0000                     _TRISE	set	3990
   422  0000                     _ACKDT	set	32301
   423  0000                     _ACKEN	set	32300
   424  0000                     _EEIF	set	32012
   425  0000                     _INT0IE	set	32660
   426  0000                     _INT0IF	set	32657
   427  0000                     _INT1IE	set	32643
   428  0000                     _INT1IF	set	32640
   429  0000                     _PEIE	set	32662
   430  0000                     _PEN	set	32298
   431  0000                     _RCEN	set	32299
   432  0000                     _RSEN	set	32297
   433  0000                     _SEN	set	32296
   434  0000                     _TMR0IE	set	32661
   435  0000                     _TMR0IF	set	32658
   436  0000                     _TMR1IE	set	31976
   437  0000                     _TMR1IF	set	31984
   438  0000                     _TMR3IE	set	32001
   439  0000                     _TRISC3	set	31907
   440  0000                     _TRISC4	set	31908
   441  00FE87                     STR_10:
   442  00FE87  20                 	db	32
   443  00FE88  20                 	db	32
   444  00FE89  20                 	db	32
   445  00FE8A  25                 	db	37
   446  00FE8B  30                 	db	48	;'0'
   447  00FE8C  32                 	db	50	;'2'
   448  00FE8D  78                 	db	120	;'x'
   449  00FE8E  3A                 	db	58	;':'
   450  00FE8F  25                 	db	37
   451  00FE90  30                 	db	48	;'0'
   452  00FE91  32                 	db	50	;'2'
   453  00FE92  78                 	db	120	;'x'
   454  00FE93  3A                 	db	58	;':'
   455  00FE94  25                 	db	37
   456  00FE95  30                 	db	48	;'0'
   457  00FE96  32                 	db	50	;'2'
   458  00FE97  78                 	db	120	;'x'
   459  00FE98  20                 	db	32
   460  00FE99  20                 	db	32
   461  00FE9A  20                 	db	32
   462  00FE9B  41                 	db	65	;'A'
   463  00FE9C  3E                 	db	62	;'>'
   464  00FE9D  00                 	db	0
   465  00FE9E                     STR_9:
   466  00FE9E  20                 	db	32
   467  00FE9F  20                 	db	32
   468  00FEA0  32                 	db	50	;'2'
   469  00FEA1  30                 	db	48	;'0'
   470  00FEA2  25                 	db	37
   471  00FEA3  30                 	db	48	;'0'
   472  00FEA4  32                 	db	50	;'2'
   473  00FEA5  78                 	db	120	;'x'
   474  00FEA6  2F                 	db	47
   475  00FEA7  25                 	db	37
   476  00FEA8  30                 	db	48	;'0'
   477  00FEA9  32                 	db	50	;'2'
   478  00FEAA  78                 	db	120	;'x'
   479  00FEAB  2F                 	db	47
   480  00FEAC  25                 	db	37
   481  00FEAD  30                 	db	48	;'0'
   482  00FEAE  32                 	db	50	;'2'
   483  00FEAF  78                 	db	120	;'x'
   484  00FEB0  0A                 	db	10
   485  00FEB1  00                 	db	0
   486  00FEB2                     STR_15:
   487  00FEB2  25                 	db	37
   488  00FEB3  63                 	db	99	;'c'
   489  00FEB4  29                 	db	41
   490  00FEB5  20                 	db	32
   491  00FEB6  74                 	db	116	;'t'
   492  00FEB7  69                 	db	105	;'i'
   493  00FEB8  6D                 	db	109	;'m'
   494  00FEB9  65                 	db	101	;'e'
   495  00FEBA  20                 	db	32
   496  00FEBB  20                 	db	32
   497  00FEBC  3C                 	db	60	;'<'
   498  00FEBD  41                 	db	65	;'A'
   499  00FEBE  20                 	db	32
   500  00FEBF  20                 	db	32
   501  00FEC0  20                 	db	32
   502  00FEC1  20                 	db	32
   503  00FEC2  20                 	db	32
   504  00FEC3  0A                 	db	10
   505  00FEC4  00                 	db	0
   506  00FEC5                     STR_21:
   507  00FEC5  5B                 	db	91	;'['
   508  00FEC6  6E                 	db	110	;'n'
   509  00FEC7  61                 	db	97	;'a'
   510  00FEC8  2C                 	db	44
   511  00FEC9  6E                 	db	110	;'n'
   512  00FECA  61                 	db	97	;'a'
   513  00FECB  2C                 	db	44
   514  00FECC  6E                 	db	110	;'n'
   515  00FECD  61                 	db	97	;'a'
   516  00FECE  2C                 	db	44
   517  00FECF  6E                 	db	110	;'n'
   518  00FED0  61                 	db	97	;'a'
   519  00FED1  5D                 	db	93	;']'
   520  00FED2  20                 	db	32
   521  00FED3  20                 	db	32
   522  00FED4  20                 	db	32
   523  00FED5  2A                 	db	42
   524  00FED6  3E                 	db	62	;'>'
   525  00FED7  00                 	db	0
   526  00FED8                     STR_20:
   527  00FED8  5B                 	db	91	;'['
   528  00FED9  25                 	db	37
   529  00FEDA  64                 	db	100	;'d'
   530  00FEDB  2C                 	db	44
   531  00FEDC  25                 	db	37
   532  00FEDD  64                 	db	100	;'d'
   533  00FEDE  2C                 	db	44
   534  00FEDF  25                 	db	37
   535  00FEE0  64                 	db	100	;'d'
   536  00FEE1  2C                 	db	44
   537  00FEE2  25                 	db	37
   538  00FEE3  64                 	db	100	;'d'
   539  00FEE4  5D                 	db	93	;']'
   540  00FEE5  20                 	db	32
   541  00FEE6  20                 	db	32
   542  00FEE7  20                 	db	32
   543  00FEE8  2A                 	db	42
   544  00FEE9  3E                 	db	62	;'>'
   545  00FEEA  00                 	db	0
   546  00FEEB                     STR_11:
   547  00FEEB  73                 	db	115	;'s'
   548  00FEEC  74                 	db	116	;'t'
   549  00FEED  61                 	db	97	;'a'
   550  00FEEE  72                 	db	114	;'r'
   551  00FEEF  74                 	db	116	;'t'
   552  00FEF0  20                 	db	32
   553  00FEF1  20                 	db	32
   554  00FEF2  20                 	db	32
   555  00FEF3  3C                 	db	60	;'<'
   556  00FEF4  42                 	db	66	;'B'
   557  00FEF5  20                 	db	32
   558  00FEF6  20                 	db	32
   559  00FEF7  20                 	db	32
   560  00FEF8  20                 	db	32
   561  00FEF9  20                 	db	32
   562  00FEFA  20                 	db	32
   563  00FEFB  0A                 	db	10
   564  00FEFC  00                 	db	0
   565  00FEFD                     STR_13:
   566  00FEFD  73                 	db	115	;'s'
   567  00FEFE  65                 	db	101	;'e'
   568  00FEFF  6C                 	db	108	;'l'
   569  00FF00  65                 	db	101	;'e'
   570  00FF01  63                 	db	99	;'c'
   571  00FF02  74                 	db	116	;'t'
   572  00FF03  20                 	db	32
   573  00FF04  72                 	db	114	;'r'
   574  00FF05  75                 	db	117	;'u'
   575  00FF06  6E                 	db	110	;'n'
   576  00FF07  3A                 	db	58	;':'
   577  00FF08  20                 	db	32
   578  00FF09  20                 	db	32
   579  00FF0A  20                 	db	32
   580  00FF0B  20                 	db	32
   581  00FF0C  20                 	db	32
   582  00FF0D  0A                 	db	10
   583  00FF0E  00                 	db	0
   584  00FF0F                     STR_19:
   585  00FF0F  5B                 	db	91	;'['
   586  00FF10  41                 	db	65	;'A'
   587  00FF11  41                 	db	65	;'A'
   588  00FF12  2C                 	db	44
   589  00FF13  39                 	db	57	;'9'
   590  00FF14  56                 	db	86	;'V'
   591  00FF15  2C                 	db	44
   592  00FF16  43                 	db	67	;'C'
   593  00FF17  2C                 	db	44
   594  00FF18  6F                 	db	111	;'o'
   595  00FF19  74                 	db	116	;'t'
   596  00FF1A  68                 	db	104	;'h'
   597  00FF1B  65                 	db	101	;'e'
   598  00FF1C  72                 	db	114	;'r'
   599  00FF1D  5D                 	db	93	;']'
   600  00FF1E  20                 	db	32
   601  00FF1F  0A                 	db	10
   602  00FF20  00                 	db	0
   603  00FF21                     STR_24:
   604  00FF21  30                 	db	48	;'0'
   605  00FF22  31                 	db	49	;'1'
   606  00FF23  32                 	db	50	;'2'
   607  00FF24  33                 	db	51	;'3'
   608  00FF25  34                 	db	52	;'4'
   609  00FF26  35                 	db	53	;'5'
   610  00FF27  36                 	db	54	;'6'
   611  00FF28  37                 	db	55	;'7'
   612  00FF29  38                 	db	56	;'8'
   613  00FF2A  39                 	db	57	;'9'
   614  00FF2B  61                 	db	97	;'a'
   615  00FF2C  62                 	db	98	;'b'
   616  00FF2D  63                 	db	99	;'c'
   617  00FF2E  64                 	db	100	;'d'
   618  00FF2F  65                 	db	101	;'e'
   619  00FF30  66                 	db	102	;'f'
   620  00FF31  00                 	db	0
   621  00FF32                     STR_17:
   622  00FF32  74                 	db	116	;'t'
   623  00FF33  69                 	db	105	;'i'
   624  00FF34  6D                 	db	109	;'m'
   625  00FF35  65                 	db	101	;'e'
   626  00FF36  3A                 	db	58	;':'
   627  00FF37  20                 	db	32
   628  00FF38  25                 	db	37
   629  00FF39  64                 	db	100	;'d'
   630  00FF3A  20                 	db	32
   631  00FF3B  73                 	db	115	;'s'
   632  00FF3C  65                 	db	101	;'e'
   633  00FF3D  63                 	db	99	;'c'
   634  00FF3E  20                 	db	32
   635  00FF3F  20                 	db	32
   636  00FF40  20                 	db	32
   637  00FF41  0A                 	db	10
   638  00FF42  00                 	db	0
   639  00FF43                     STR_18:
   640  00FF43  20                 	db	32
   641  00FF44  20                 	db	32
   642  00FF45  20                 	db	32
   643  00FF46  20                 	db	32
   644  00FF47  20                 	db	32
   645  00FF48  20                 	db	32
   646  00FF49  20                 	db	32
   647  00FF4A  20                 	db	32
   648  00FF4B  20                 	db	32
   649  00FF4C  20                 	db	32
   650  00FF4D  20                 	db	32
   651  00FF4E  20                 	db	32
   652  00FF4F  20                 	db	32
   653  00FF50  20                 	db	32
   654  00FF51  2A                 	db	42
   655  00FF52  3E                 	db	62	;'>'
   656  00FF53  00                 	db	0
   657  00FF54                     STR_14:
   658  00FF54  5B                 	db	91	;'['
   659  00FF55  31                 	db	49	;'1'
   660  00FF56  2C                 	db	44
   661  00FF57  32                 	db	50	;'2'
   662  00FF58  2C                 	db	44
   663  00FF59  33                 	db	51	;'3'
   664  00FF5A  2C                 	db	44
   665  00FF5B  34                 	db	52	;'4'
   666  00FF5C  5D                 	db	93	;']'
   667  00FF5D  20                 	db	32
   668  00FF5E  20                 	db	32
   669  00FF5F  20                 	db	32
   670  00FF60  20                 	db	32
   671  00FF61  20                 	db	32
   672  00FF62  2A                 	db	42
   673  00FF63  3E                 	db	62	;'>'
   674  00FF64  00                 	db	0
   675  00FF65                     STR_12:
   676  00FF65  68                 	db	104	;'h'
   677  00FF66  69                 	db	105	;'i'
   678  00FF67  73                 	db	115	;'s'
   679  00FF68  74                 	db	116	;'t'
   680  00FF69  6F                 	db	111	;'o'
   681  00FF6A  72                 	db	114	;'r'
   682  00FF6B  79                 	db	121	;'y'
   683  00FF6C  20                 	db	32
   684  00FF6D  3C                 	db	60	;'<'
   685  00FF6E  43                 	db	67	;'C'
   686  00FF6F  20                 	db	32
   687  00FF70  20                 	db	32
   688  00FF71  20                 	db	32
   689  00FF72  20                 	db	32
   690  00FF73  2A                 	db	42
   691  00FF74  3E                 	db	62	;'>'
   692  00FF75  00                 	db	0
   693  00FF76                     STR_16:
   694  00FF76  20                 	db	32
   695  00FF77  20                 	db	32
   696  00FF78  20                 	db	32
   697  00FF79  73                 	db	115	;'s'
   698  00FF7A  74                 	db	116	;'t'
   699  00FF7B  61                 	db	97	;'a'
   700  00FF7C  74                 	db	116	;'t'
   701  00FF7D  73                 	db	115	;'s'
   702  00FF7E  20                 	db	32
   703  00FF7F  3C                 	db	60	;'<'
   704  00FF80  42                 	db	66	;'B'
   705  00FF81  20                 	db	32
   706  00FF82  20                 	db	32
   707  00FF83  20                 	db	32
   708  00FF84  2A                 	db	42
   709  00FF85  3E                 	db	62	;'>'
   710  00FF86  00                 	db	0
   711  00FF87                     STR_23:
   712  00FF87  20                 	db	32
   713  00FF88  20                 	db	32
   714  00FF89  61                 	db	97	;'a'
   715  00FF8A  76                 	db	118	;'v'
   716  00FF8B  61                 	db	97	;'a'
   717  00FF8C  69                 	db	105	;'i'
   718  00FF8D  6C                 	db	108	;'l'
   719  00FF8E  61                 	db	97	;'a'
   720  00FF8F  62                 	db	98	;'b'
   721  00FF90  6C                 	db	108	;'l'
   722  00FF91  65                 	db	101	;'e'
   723  00FF92  20                 	db	32
   724  00FF93  20                 	db	32
   725  00FF94  20                 	db	32
   726  00FF95  2A                 	db	42
   727  00FF96  3E                 	db	62	;'>'
   728  00FF97  00                 	db	0
   729  00FF98                     STR_3:
   730  00FF98  74                 	db	116	;'t'
   731  00FF99  69                 	db	105	;'i'
   732  00FF9A  6D                 	db	109	;'m'
   733  00FF9B  65                 	db	101	;'e'
   734  00FF9C  20                 	db	32
   735  00FF9D  25                 	db	37
   736  00FF9E  30                 	db	48	;'0'
   737  00FF9F  32                 	db	50	;'2'
   738  00FFA0  6C                 	db	108	;'l'
   739  00FFA1  64                 	db	100	;'d'
   740  00FFA2  3A                 	db	58	;':'
   741  00FFA3  25                 	db	37
   742  00FFA4  30                 	db	48	;'0'
   743  00FFA5  32                 	db	50	;'2'
   744  00FFA6  6C                 	db	108	;'l'
   745  00FFA7  64                 	db	100	;'d'
   746  00FFA8  00                 	db	0
   747  00FFA9                     STR_4:
   748  00FFA9  56                 	db	86	;'V'
   749  00FFAA  3A                 	db	58	;':'
   750  00FFAB  20                 	db	32
   751  00FFAC  25                 	db	37
   752  00FFAD  2E                 	db	46
   753  00FFAE  33                 	db	51	;'3'
   754  00FFAF  66                 	db	102	;'f'
   755  00FFB0  2C                 	db	44
   756  00FFB1  20                 	db	32
   757  00FFB2  4E                 	db	78	;'N'
   758  00FFB3  3A                 	db	58	;':'
   759  00FFB4  20                 	db	32
   760  00FFB5  25                 	db	37
   761  00FFB6  64                 	db	100	;'d'
   762  00FFB7  0A                 	db	10
   763  00FFB8  00                 	db	0
   764  00FFB9                     STR_22:
   765  00FFB9  20                 	db	32
   766  00FFBA  72                 	db	114	;'r'
   767  00FFBB  75                 	db	117	;'u'
   768  00FFBC  6E                 	db	110	;'n'
   769  00FFBD  20                 	db	32
   770  00FFBE  6E                 	db	110	;'n'
   771  00FFBF  6F                 	db	111	;'o'
   772  00FFC0  74                 	db	116	;'t'
   773  00FFC1  20                 	db	32
   774  00FFC2  0A                 	db	10
   775  00FFC3  00                 	db	0
   776  00FFC4                     STR_7:
   777  00FFC4  43                 	db	67	;'C'
   778  00FFC5  20                 	db	32
   779  00FFC6  20                 	db	32
   780  00FFC7  6C                 	db	108	;'l'
   781  00FFC8  69                 	db	105	;'i'
   782  00FFC9  6D                 	db	109	;'m'
   783  00FFCA  3A                 	db	58	;':'
   784  00FFCB  20                 	db	32
   785  00FFCC  25                 	db	37
   786  00FFCD  66                 	db	102	;'f'
   787  00FFCE  00                 	db	0
   788  00FFCF                     STR_5:
   789  00FFCF  41                 	db	65	;'A'
   790  00FFD0  41                 	db	65	;'A'
   791  00FFD1  20                 	db	32
   792  00FFD2  6C                 	db	108	;'l'
   793  00FFD3  69                 	db	105	;'i'
   794  00FFD4  6D                 	db	109	;'m'
   795  00FFD5  3A                 	db	58	;':'
   796  00FFD6  20                 	db	32
   797  00FFD7  25                 	db	37
   798  00FFD8  66                 	db	102	;'f'
   799  00FFD9  00                 	db	0
   800  00FFDA                     STR_6:
   801  00FFDA  39                 	db	57	;'9'
   802  00FFDB  56                 	db	86	;'V'
   803  00FFDC  20                 	db	32
   804  00FFDD  6C                 	db	108	;'l'
   805  00FFDE  69                 	db	105	;'i'
   806  00FFDF  6D                 	db	109	;'m'
   807  00FFE0  3A                 	db	58	;':'
   808  00FFE1  20                 	db	32
   809  00FFE2  25                 	db	37
   810  00FFE3  66                 	db	102	;'f'
   811  00FFE4  00                 	db	0
   812  00FFE5  25                 	db	37
   813  00FFE6  64                 	db	100	;'d'
   814  00FFE7  2C                 	db	44
   815  00FFE8  20                 	db	32
   816  00FFE9  25                 	db	37
   817  00FFEA  30                 	db	48	;'0'
   818  00FFEB  32                 	db	50	;'2'
   819  00FFEC  78                 	db	120	;'x'
   820  00FFED  00                 	db	0
   821  00FFEE  74                 	db	116	;'t'
   822  00FFEF  31                 	db	49	;'1'
   823  00FFF0  3A                 	db	58	;':'
   824  00FFF1  20                 	db	32
   825  00FFF2  25                 	db	37
   826  00FFF3  78                 	db	120	;'x'
   827  00FFF4  20                 	db	32
   828  00FFF5  00                 	db	0
   829  00FFF6                     STR_2:
   830  00FFF6  72                 	db	114	;'r'
   831  00FFF7  75                 	db	117	;'u'
   832  00FFF8  6E                 	db	110	;'n'
   833  00FFF9  6E                 	db	110	;'n'
   834  00FFFA  69                 	db	105	;'i'
   835  00FFFB  6E                 	db	110	;'n'
   836  00FFFC  67                 	db	103	;'g'
   837  00FFFD  00                 	db	0
   838                           
   839                           ; #config settings
   840  00FFFE  00                 	db	0	; dummy byte at the end
   841  0000                     
   842                           	psect	cinit
   843  00338A                     __pcinit:
   844                           	opt stack 0
   845  00338A                     start_initialization:
   846                           	opt stack 0
   847  00338A                     __initialization:
   848                           	opt stack 0
   849                           
   850                           ; Initialize objects allocated to BANK1 (34 bytes)
   851                           ; load TBLPTR registers with __pidataBANK1
   852  00338A  0E32               	movlw	low __pidataBANK1
   853  00338C  6EF6               	movwf	tblptrl,c
   854  00338E  0E3D               	movlw	high __pidataBANK1
   855  003390  6EF7               	movwf	tblptrh,c
   856  003392  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   857  003394  6EF8               	movwf	tblptru,c
   858  003396  EE01  F041         	lfsr	0,__pdataBANK1
   859  00339A  EE10 F022          	lfsr	1,34
   860  00339E                     copy_data0:
   861  00339E  0009               	tblrd		*+
   862  0033A0  CFF5 FFEE          	movff	tablat,postinc0
   863  0033A4  50E5               	movf	postdec1,w,c
   864  0033A6  50E1               	movf	fsr1l,w,c
   865  0033A8  E1FA               	bnz	copy_data0
   866                           
   867                           ; Initialize objects allocated to BANK0 (10 bytes)
   868                           ; load TBLPTR registers with __pidataBANK0
   869  0033AA  0E34               	movlw	low __pidataBANK0
   870  0033AC  6EF6               	movwf	tblptrl,c
   871  0033AE  0E3E               	movlw	high __pidataBANK0
   872  0033B0  6EF7               	movwf	tblptrh,c
   873  0033B2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   874  0033B4  6EF8               	movwf	tblptru,c
   875  0033B6  EE00  F0F1         	lfsr	0,__pdataBANK0
   876  0033BA  EE10 F00A          	lfsr	1,10
   877  0033BE                     copy_data1:
   878  0033BE  0009               	tblrd		*+
   879  0033C0  CFF5 FFEE          	movff	tablat,postinc0
   880  0033C4  50E5               	movf	postdec1,w,c
   881  0033C6  50E1               	movf	fsr1l,w,c
   882  0033C8  E1FA               	bnz	copy_data1
   883                           
   884                           ; Initialize objects allocated to COMRAM (15 bytes)
   885                           ; load TBLPTR registers with __pidataCOMRAM
   886  0033CA  0E18               	movlw	low __pidataCOMRAM
   887  0033CC  6EF6               	movwf	tblptrl,c
   888  0033CE  0E3E               	movlw	high __pidataCOMRAM
   889  0033D0  6EF7               	movwf	tblptrh,c
   890  0033D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   891  0033D4  6EF8               	movwf	tblptru,c
   892  0033D6  EE00  F04E         	lfsr	0,__pdataCOMRAM
   893  0033DA  EE10 F00F          	lfsr	1,15
   894  0033DE                     copy_data2:
   895  0033DE  0009               	tblrd		*+
   896  0033E0  CFF5 FFEE          	movff	tablat,postinc0
   897  0033E4  50E5               	movf	postdec1,w,c
   898  0033E6  50E1               	movf	fsr1l,w,c
   899  0033E8  E1FA               	bnz	copy_data2
   900                           
   901                           ; Clear objects allocated to BANK1 (24 bytes)
   902  0033EA  EE01  F063         	lfsr	0,__pbssBANK1
   903  0033EE  0E18               	movlw	24
   904  0033F0                     clear_0:
   905  0033F0  6AEE               	clrf	postinc0,c
   906  0033F2  06E8               	decf	wreg,f,c
   907  0033F4  E1FD               	bnz	clear_0
   908                           
   909                           ; Clear objects allocated to BANK0 (2 bytes)
   910  0033F6  0100               	movlb	0
   911  0033F8  6BFC               	clrf	(__pbssBANK0+1)& (0+255),b
   912  0033FA  6BFB               	clrf	__pbssBANK0& (0+255),b
   913                           
   914                           ; Clear objects allocated to COMRAM (19 bytes)
   915  0033FC  EE00  F03B         	lfsr	0,__pbssCOMRAM
   916  003400  0E13               	movlw	19
   917  003402                     clear_1:
   918  003402  6AEE               	clrf	postinc0,c
   919  003404  06E8               	decf	wreg,f,c
   920  003406  E1FD               	bnz	clear_1
   921  003408                     end_of_initialization:
   922                           	opt stack 0
   923  003408                     __end_of__initialization:
   924                           	opt stack 0
   925  003408  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   926  00340A  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   927  00340C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   928  00340E  6EF8               	movwf	tblptru,c
   929  003410  0100               	movlb	0
   930  003412  EFBE  F00B         	goto	_main	;jump to C main() function
   931                           tblptru	equ	0xFF8
   932                           tblptrh	equ	0xFF7
   933                           tblptrl	equ	0xFF6
   934                           tablat	equ	0xFF5
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           postdec1	equ	0xFE5
   938                           fsr1l	equ	0xFE1
   939                           
   940                           	psect	bssCOMRAM
   941  00003B                     __pbssCOMRAM:
   942                           	opt stack 0
   943  00003B                     _servos:
   944                           	opt stack 0
   945  00003B                     	ds	8
   946  000043                     _padPin3:
   947                           	opt stack 0
   948  000043                     	ds	4
   949  000047                     _count:
   950                           	opt stack 0
   951  000047                     	ds	2
   952  000049                     _curr:
   953                           	opt stack 0
   954  000049                     	ds	2
   955  00004B                     _prevTime:
   956                           	opt stack 0
   957  00004B                     	ds	2
   958  00004D                     _lastKey:
   959                           	opt stack 0
   960  00004D                     	ds	1
   961                           tblptru	equ	0xFF8
   962                           tblptrh	equ	0xFF7
   963                           tblptrl	equ	0xFF6
   964                           tablat	equ	0xFF5
   965                           postinc0	equ	0xFEE
   966                           wreg	equ	0xFE8
   967                           postdec1	equ	0xFE5
   968                           fsr1l	equ	0xFE1
   969                           
   970                           	psect	dataCOMRAM
   971  00004E                     __pdataCOMRAM:
   972                           	opt stack 0
   973  00004E                     _V_LIM_9V:
   974                           	opt stack 0
   975  00004E                     	ds	3
   976  000051                     _angle:
   977                           	opt stack 0
   978  000051                     	ds	2
   979  000053                     _padAngle_OPEN:
   980                           	opt stack 0
   981  000053                     	ds	2
   982  000055                     _redirectAngle_9V:
   983                           	opt stack 0
   984  000055                     	ds	2
   985  000057                     _redirectAngle_C:
   986                           	opt stack 0
   987  000057                     	ds	2
   988  000059                     _AA_float:
   989                           	opt stack 0
   990  000059                     	ds	4
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           postinc0	equ	0xFEE
   996                           wreg	equ	0xFE8
   997                           postdec1	equ	0xFE5
   998                           fsr1l	equ	0xFE1
   999                           
  1000                           	psect	bssBANK0
  1001  0000FB                     __pbssBANK0:
  1002                           	opt stack 0
  1003  0000FB                     _n:
  1004                           	opt stack 0
  1005  0000FB                     	ds	2
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postdec1	equ	0xFE5
  1013                           fsr1l	equ	0xFE1
  1014                           
  1015                           	psect	dataBANK0
  1016  0000F1                     __pdataBANK0:
  1017                           	opt stack 0
  1018  0000F1                     _V_LIM_AA:
  1019                           	opt stack 0
  1020  0000F1                     	ds	3
  1021  0000F4                     _V_LIM_C:
  1022                           	opt stack 0
  1023  0000F4                     	ds	3
  1024  0000F7                     _padAngle_CLOSE:
  1025                           	opt stack 0
  1026  0000F7                     	ds	2
  1027  0000F9                     _redirectAngle_OTHER:
  1028                           	opt stack 0
  1029  0000F9                     	ds	2
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	bssBANK1
  1040  000163                     __pbssBANK1:
  1041                           	opt stack 0
  1042  000163                     _pulse:
  1043                           	opt stack 0
  1044  000163                     	ds	8
  1045  00016B                     _time:
  1046                           	opt stack 0
  1047  00016B                     	ds	4
  1048  00016F                     _batteryDetected:
  1049                           	opt stack 0
  1050  00016F                     	ds	2
  1051  000171                     _n_9V:
  1052                           	opt stack 0
  1053  000171                     	ds	2
  1054  000173                     _n_AA:
  1055                           	opt stack 0
  1056  000173                     	ds	2
  1057  000175                     _n_C:
  1058                           	opt stack 0
  1059  000175                     	ds	2
  1060  000177                     _n_OTHER:
  1061                           	opt stack 0
  1062  000177                     	ds	2
  1063  000179                     _terminate:
  1064                           	opt stack 0
  1065  000179                     	ds	2
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           postdec1	equ	0xFE5
  1073                           fsr1l	equ	0xFE1
  1074                           
  1075                           	psect	dataBANK1
  1076  000141                     __pdataBANK1:
  1077                           	opt stack 0
  1078  000141                     _cylinderDir:
  1079                           	opt stack 0
  1080  000141                     	ds	4
  1081  000145                     _padAngle_NEUTRAL:
  1082                           	opt stack 0
  1083  000145                     	ds	2
  1084  000147                     _redirectAngle_AA:
  1085                           	opt stack 0
  1086  000147                     	ds	2
  1087  000149                     _stoppingTime:
  1088                           	opt stack 0
  1089  000149                     	ds	2
  1090  00014B                     _conveyorServo:
  1091                           	opt stack 0
  1092  00014B                     	ds	4
  1093  00014F                     _cylinderMotor:
  1094                           	opt stack 0
  1095  00014F                     	ds	4
  1096  000153                     _padPin1:
  1097                           	opt stack 0
  1098  000153                     	ds	4
  1099  000157                     _padPin2:
  1100                           	opt stack 0
  1101  000157                     	ds	4
  1102  00015B                     _padServo:
  1103                           	opt stack 0
  1104  00015B                     	ds	4
  1105  00015F                     _redirectingServo:
  1106                           	opt stack 0
  1107  00015F                     	ds	4
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           
  1117                           	psect	cstackBANK1
  1118  000100                     __pcstackBANK1:
  1119                           	opt stack 0
  1120  000100                     showDateTime@sec:
  1121                           	opt stack 0
  1122  000100                     showRunStats@n_AA:
  1123                           	opt stack 0
  1124  000100                     _sortBattery$1414:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x0
  1128  000100                     	ds	2
  1129  000102                     showDateTime@min:
  1130                           	opt stack 0
  1131  000102                     showRunStats@n_9V:
  1132                           	opt stack 0
  1133  000102                     sortBattery@V_float:
  1134                           	opt stack 0
  1135                           
  1136                           ; 3 bytes @ 0x2
  1137  000102                     	ds	2
  1138  000104                     showDateTime@hour:
  1139                           	opt stack 0
  1140  000104                     showRunStats@n_C:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x4
  1144  000104                     	ds	1
  1145  000105                     sortBattery@pos_v_counter:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x5
  1149  000105                     	ds	1
  1150  000106                     showDateTime@day:
  1151                           	opt stack 0
  1152  000106                     showRunStats@n_OTHER:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x6
  1156  000106                     	ds	1
  1157  000107                     sortBattery@signal:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x7
  1161  000107                     	ds	1
  1162  000108                     showDateTime@mon:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x8
  1166  000108                     	ds	1
  1167  000109                     sortBattery@Vcc:
  1168                           	opt stack 0
  1169                           
  1170                           ; 3 bytes @ 0x9
  1171  000109                     	ds	1
  1172  00010A                     showDateTime@year:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0xA
  1176  00010A                     	ds	2
  1177  00010C                     showDateTime@t:
  1178                           	opt stack 0
  1179  00010C                     sortBattery@resolution:
  1180                           	opt stack 0
  1181                           
  1182                           ; 3 bytes @ 0xC
  1183  00010C                     	ds	2
  1184  00010E                     showInterface@n:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0xE
  1188  00010E                     	ds	1
  1189  00010F                     sortBattery@V_max:
  1190                           	opt stack 0
  1191                           
  1192                           ; 3 bytes @ 0xF
  1193  00010F                     	ds	1
  1194  000110                     showInterface@run:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x10
  1198  000110                     	ds	2
  1199  000112                     showInterface@key:
  1200                           	opt stack 0
  1201  000112                     sortBattery@i_249:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x12
  1205  000112                     	ds	2
  1206  000114                     sortBattery@targetAngle:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x14
  1210  000114                     	ds	2
  1211  000116                     sortBattery@V:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0x16
  1215  000116                     	ds	3
  1216  000119                     sortBattery@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 3 bytes @ 0x19
  1220  000119                     	ds	3
  1221  00011C                     sortBattery@V_244:
  1222                           	opt stack 0
  1223                           
  1224                           ; 3 bytes @ 0x1C
  1225  00011C                     	ds	3
  1226  00011F                     ??_main:
  1227                           
  1228                           ; 1 bytes @ 0x1F
  1229  00011F                     	ds	10
  1230  000129                     main@cylinderStart:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x29
  1234  000129                     	ds	2
  1235  00012B                     main@cylinderDur:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x2B
  1239  00012B                     	ds	2
  1240  00012D                     main@cylinderForward:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x2D
  1244  00012D                     	ds	2
  1245  00012F                     main@cylinderBackward:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x2F
  1249  00012F                     	ds	2
  1250  000131                     main@lastBatteryTime:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x31
  1254  000131                     	ds	2
  1255  000133                     main@run:
  1256                           	opt stack 0
  1257                           
  1258                           ; 14 bytes @ 0x33
  1259  000133                     	ds	14
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           postdec1	equ	0xFE5
  1267                           fsr1l	equ	0xFE1
  1268                           
  1269                           	psect	cstackBANK0
  1270  000080                     __pcstackBANK0:
  1271                           	opt stack 0
  1272  000080                     ??___ftdiv:
  1273  000080                     ?_readPastRun:
  1274                           	opt stack 0
  1275  000080                     readPastRun@run:
  1276                           	opt stack 0
  1277  000080                     eepromWrite@data:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x0
  1281  000080                     	ds	2
  1282  000082                     eepromWrite@address:
  1283                           	opt stack 0
  1284  000082                     readPastRun@data:
  1285                           	opt stack 0
  1286                           
  1287                           ; 14 bytes @ 0x2
  1288  000082                     	ds	1
  1289  000083                     ___ftdiv@cntr:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x3
  1293  000083                     	ds	1
  1294  000084                     ___ftdiv@f3:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0x4
  1298  000084                     	ds	2
  1299  000086                     ??_eepromWrite:
  1300                           
  1301                           ; 1 bytes @ 0x6
  1302  000086                     	ds	1
  1303  000087                     ___ftdiv@exp:
  1304                           	opt stack 0
  1305  000087                     eepromWrite@ien:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x7
  1309  000087                     	ds	1
  1310  000088                     ___ftdiv@sign:
  1311                           	opt stack 0
  1312                           
  1313                           ; 1 bytes @ 0x8
  1314  000088                     	ds	1
  1315  000089                     ?___ftmul:
  1316                           	opt stack 0
  1317  000089                     saveNewRun@data:
  1318                           	opt stack 0
  1319  000089                     ___ftmul@f1:
  1320                           	opt stack 0
  1321                           
  1322                           ; 3 bytes @ 0x9
  1323  000089                     	ds	2
  1324  00008B                     saveNewRun@n:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0xB
  1328  00008B                     	ds	1
  1329  00008C                     ___ftmul@f2:
  1330                           	opt stack 0
  1331                           
  1332                           ; 3 bytes @ 0xC
  1333  00008C                     	ds	1
  1334  00008D                     saveNewRun@i:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0xD
  1338  00008D                     	ds	2
  1339  00008F                     ??___ftmul:
  1340                           
  1341                           ; 1 bytes @ 0xF
  1342  00008F                     	ds	1
  1343  000090                     readPastRun@i:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x10
  1347  000090                     	ds	2
  1348  000092                     ___ftmul@exp:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x12
  1352  000092                     	ds	1
  1353  000093                     ___ftmul@f3_as_product:
  1354                           	opt stack 0
  1355                           
  1356                           ; 3 bytes @ 0x13
  1357  000093                     	ds	3
  1358  000096                     ___ftmul@cntr:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x16
  1362  000096                     	ds	1
  1363  000097                     ___ftmul@sign:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x17
  1367  000097                     	ds	1
  1368  000098                     ?_fround:
  1369                           	opt stack 0
  1370  000098                     ?_scale:
  1371                           	opt stack 0
  1372                           
  1373                           ; 3 bytes @ 0x18
  1374  000098                     	ds	3
  1375  00009B                     _fround$1417:
  1376                           	opt stack 0
  1377  00009B                     _scale$1418:
  1378                           	opt stack 0
  1379                           
  1380                           ; 3 bytes @ 0x1B
  1381  00009B                     	ds	3
  1382  00009E                     scale@scl:
  1383                           	opt stack 0
  1384  00009E                     _fround$1416:
  1385                           	opt stack 0
  1386                           
  1387                           ; 3 bytes @ 0x1E
  1388  00009E                     	ds	3
  1389  0000A1                     fround@prec:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x21
  1393  0000A1                     	ds	1
  1394  0000A2                     ?___ftadd:
  1395                           	opt stack 0
  1396  0000A2                     ___ftadd@f1:
  1397                           	opt stack 0
  1398                           
  1399                           ; 3 bytes @ 0x22
  1400  0000A2                     	ds	3
  1401  0000A5                     ___ftadd@f2:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x25
  1405  0000A5                     	ds	3
  1406  0000A8                     ??___ftadd:
  1407                           
  1408                           ; 1 bytes @ 0x28
  1409  0000A8                     	ds	3
  1410  0000AB                     ___ftadd@sign:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x2B
  1414  0000AB                     	ds	1
  1415  0000AC                     ___ftadd@exp2:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x2C
  1419  0000AC                     	ds	1
  1420  0000AD                     ___ftadd@exp1:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x2D
  1424  0000AD                     	ds	1
  1425  0000AE                     ?___ftsub:
  1426                           	opt stack 0
  1427  0000AE                     ?___fttol:
  1428                           	opt stack 0
  1429  0000AE                     ___ftsub@f1:
  1430                           	opt stack 0
  1431  0000AE                     ___fttol@f1:
  1432                           	opt stack 0
  1433                           
  1434                           ; 3 bytes @ 0x2E
  1435  0000AE                     	ds	3
  1436  0000B1                     ___ftsub@f2:
  1437                           	opt stack 0
  1438                           
  1439                           ; 3 bytes @ 0x31
  1440  0000B1                     	ds	1
  1441  0000B2                     ??___fttol:
  1442                           
  1443                           ; 1 bytes @ 0x32
  1444  0000B2                     	ds	5
  1445  0000B7                     ___fttol@sign1:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x37
  1449  0000B7                     	ds	1
  1450  0000B8                     ___fttol@lval:
  1451                           	opt stack 0
  1452                           
  1453                           ; 4 bytes @ 0x38
  1454  0000B8                     	ds	4
  1455  0000BC                     ___fttol@exp1:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x3C
  1459  0000BC                     	ds	1
  1460  0000BD                     ?_printf:
  1461                           	opt stack 0
  1462  0000BD                     ?_angleToPulse:
  1463                           	opt stack 0
  1464  0000BD                     angleToPulse@angle:
  1465                           	opt stack 0
  1466  0000BD                     printf@f:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x3D
  1470  0000BD                     	ds	4
  1471  0000C1                     ??_angleToPulse:
  1472                           
  1473                           ; 1 bytes @ 0x41
  1474  0000C1                     	ds	4
  1475  0000C5                     angleToPulse@offset:
  1476                           	opt stack 0
  1477                           
  1478                           ; 4 bytes @ 0x45
  1479  0000C5                     	ds	2
  1480  0000C7                     ??_printf:
  1481                           
  1482                           ; 1 bytes @ 0x47
  1483  0000C7                     	ds	2
  1484  0000C9                     angleToPulse@a180:
  1485                           	opt stack 0
  1486                           
  1487                           ; 4 bytes @ 0x49
  1488  0000C9                     	ds	4
  1489  0000CD                     _angleToPulse$1415:
  1490                           	opt stack 0
  1491  0000CD                     _printf$1419:
  1492                           	opt stack 0
  1493                           
  1494                           ; 3 bytes @ 0x4D
  1495  0000CD                     	ds	3
  1496  0000D0                     printf@idx:
  1497                           	opt stack 0
  1498  0000D0                     angleToPulse@a000:
  1499                           	opt stack 0
  1500                           
  1501                           ; 4 bytes @ 0x50
  1502  0000D0                     	ds	1
  1503  0000D1                     printf@cp:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x51
  1507  0000D1                     	ds	2
  1508  0000D3                     printf@len:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x53
  1512  0000D3                     	ds	1
  1513  0000D4                     setAngle@motor:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x54
  1517  0000D4                     	ds	1
  1518  0000D5                     printf@ap:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x55
  1522  0000D5                     	ds	1
  1523  0000D6                     setAngle@angle:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x56
  1527  0000D6                     	ds	1
  1528  0000D7                     printf@tmpval:
  1529                           	opt stack 0
  1530                           
  1531                           ; 4 bytes @ 0x57
  1532  0000D7                     	ds	1
  1533  0000D8                     ??_setAngle:
  1534                           
  1535                           ; 1 bytes @ 0x58
  1536  0000D8                     	ds	2
  1537  0000DA                     setAngle@period:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x5A
  1541  0000DA                     	ds	1
  1542  0000DB                     printf@exp:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x5B
  1546  0000DB                     	ds	1
  1547  0000DC                     setAngle@i:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x5C
  1551  0000DC                     	ds	1
  1552  0000DD                     printf@fval:
  1553                           	opt stack 0
  1554                           
  1555                           ; 3 bytes @ 0x5D
  1556  0000DD                     	ds	1
  1557  0000DE                     initServo@motor:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x5E
  1561  0000DE                     	ds	2
  1562  0000E0                     initServo@angle:
  1563                           	opt stack 0
  1564  0000E0                     printf@val:
  1565                           	opt stack 0
  1566                           
  1567                           ; 4 bytes @ 0x60
  1568  0000E0                     	ds	2
  1569  0000E2                     ??_initServo:
  1570                           
  1571                           ; 1 bytes @ 0x62
  1572  0000E2                     	ds	2
  1573  0000E4                     printf@width:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x64
  1577  0000E4                     	ds	2
  1578  0000E6                     initServo@i:
  1579                           	opt stack 0
  1580  0000E6                     printf@flag:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x66
  1584  0000E6                     	ds	2
  1585  0000E8                     printf@prec:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x68
  1589  0000E8                     	ds	2
  1590  0000EA                     printf@c:
  1591                           	opt stack 0
  1592                           
  1593                           ; 1 bytes @ 0x6A
  1594  0000EA                     	ds	1
  1595  0000EB                     ??_sortBattery:
  1596  0000EB                     ??_showDateTime:
  1597  0000EB                     showMainMenu@k:
  1598                           	opt stack 0
  1599  0000EB                     showRunSelect@k:
  1600                           	opt stack 0
  1601  0000EB                     showRunMenu@key:
  1602                           	opt stack 0
  1603  0000EB                     showRunTime@run:
  1604                           	opt stack 0
  1605  0000EB                     showRunStats@run:
  1606                           	opt stack 0
  1607                           
  1608                           ; 2 bytes @ 0x6B
  1609  0000EB                     	ds	1
  1610  0000EC                     showRunMenu@k:
  1611                           	opt stack 0
  1612                           
  1613                           ; 1 bytes @ 0x6C
  1614  0000EC                     	ds	1
  1615  0000ED                     showRunTime@time:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x6D
  1619  0000ED                     	ds	2
  1620  0000EF                     ??_showInterface:
  1621                           
  1622                           ; 1 bytes @ 0x6F
  1623  0000EF                     	ds	2
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1l	equ	0xFE1
  1632                           
  1633                           	psect	cstackCOMRAM
  1634  000001                     __pcstackCOMRAM:
  1635                           	opt stack 0
  1636  000001                     ?i2___awmod:
  1637                           	opt stack 0
  1638  000001                     keyPressedInterruptService@key:
  1639                           	opt stack 0
  1640  000001                     i2___awmod@dividend:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x0
  1644  000001                     	ds	2
  1645  000003                     i2___awmod@divisor:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x2
  1649  000003                     	ds	2
  1650  000005                     i2___awmod@counter:
  1651                           	opt stack 0
  1652                           
  1653                           ; 1 bytes @ 0x4
  1654  000005                     	ds	1
  1655  000006                     i2___awmod@sign:
  1656                           	opt stack 0
  1657                           
  1658                           ; 1 bytes @ 0x5
  1659  000006                     	ds	1
  1660  000007                     i2digitalWrite@pin:
  1661                           	opt stack 0
  1662  000007                     i2startTimer@timer:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x6
  1666  000007                     	ds	2
  1667  000009                     i2digitalWrite@val:
  1668                           	opt stack 0
  1669  000009                     i2startTimer@val:
  1670                           	opt stack 0
  1671                           
  1672                           ; 4 bytes @ 0x8
  1673  000009                     	ds	2
  1674  00000B                     ??i2_digitalWrite:
  1675                           
  1676                           ; 1 bytes @ 0xA
  1677  00000B                     	ds	2
  1678  00000D                     ??i2_startTimer:
  1679                           
  1680                           ; 1 bytes @ 0xC
  1681  00000D                     	ds	1
  1682  00000E                     i2digitalWrite@p:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0xD
  1686  00000E                     	ds	2
  1687  000010                     ??_servoInterruptService:
  1688                           
  1689                           ; 1 bytes @ 0xF
  1690  000010                     	ds	4
  1691  000014                     ??_service:
  1692                           
  1693                           ; 1 bytes @ 0x13
  1694  000014                     	ds	14
  1695  000022                     service@key:
  1696                           	opt stack 0
  1697                           
  1698                           ; 1 bytes @ 0x21
  1699  000022                     	ds	1
  1700  000023                     ??_isdigit:
  1701  000023                     ??_I2C_Master_Wait:
  1702  000023                     ?_digitalRead:
  1703                           	opt stack 0
  1704  000023                     ?___awmod:
  1705                           	opt stack 0
  1706  000023                     ?___ftpack:
  1707                           	opt stack 0
  1708  000023                     ?___ftneg:
  1709                           	opt stack 0
  1710  000023                     ?_analogRead:
  1711                           	opt stack 0
  1712  000023                     ?__tdiv_to_l_:
  1713                           	opt stack 0
  1714  000023                     ?__div_to_l_:
  1715                           	opt stack 0
  1716  000023                     ?___aldiv:
  1717                           	opt stack 0
  1718  000023                     ?___lldiv:
  1719                           	opt stack 0
  1720  000023                     lcdNibble@temp:
  1721                           	opt stack 0
  1722  000023                     readKeypad@key:
  1723                           	opt stack 0
  1724  000023                     keyPressed@key:
  1725                           	opt stack 0
  1726  000023                     digitalRead@pin:
  1727                           	opt stack 0
  1728  000023                     digitalWrite@pin:
  1729                           	opt stack 0
  1730  000023                     analogRead@channel:
  1731                           	opt stack 0
  1732  000023                     initTimer@timer:
  1733                           	opt stack 0
  1734  000023                     startTimer@timer:
  1735                           	opt stack 0
  1736  000023                     ___awmod@dividend:
  1737                           	opt stack 0
  1738  000023                     __div_to_l_@f1:
  1739                           	opt stack 0
  1740  000023                     ___ftpack@arg:
  1741                           	opt stack 0
  1742  000023                     __tdiv_to_l_@f1:
  1743                           	opt stack 0
  1744  000023                     ___ftneg@f1:
  1745                           	opt stack 0
  1746  000023                     ___aldiv@dividend:
  1747                           	opt stack 0
  1748  000023                     ___lldiv@dividend:
  1749                           	opt stack 0
  1750                           
  1751                           ; 4 bytes @ 0x22
  1752  000023                     	ds	1
  1753  000024                     lcdNibble@data:
  1754                           	opt stack 0
  1755  000024                     I2C_Master_Read@a:
  1756                           	opt stack 0
  1757  000024                     _isdigit$1050:
  1758                           	opt stack 0
  1759  000024                     I2C_Master_Write@d:
  1760                           	opt stack 0
  1761                           
  1762                           ; 2 bytes @ 0x23
  1763  000024                     	ds	1
  1764  000025                     ??_initTimer:
  1765  000025                     ??_digitalRead:
  1766  000025                     ??_lcdInst:
  1767  000025                     I2C_Master_Read@temp:
  1768                           	opt stack 0
  1769  000025                     isdigit@c:
  1770                           	opt stack 0
  1771  000025                     digitalWrite@val:
  1772                           	opt stack 0
  1773  000025                     ___awmod@divisor:
  1774                           	opt stack 0
  1775  000025                     startTimer@val:
  1776                           	opt stack 0
  1777                           
  1778                           ; 4 bytes @ 0x24
  1779  000025                     	ds	1
  1780  000026                     ?_getTime:
  1781                           	opt stack 0
  1782  000026                     lcdInst@data:
  1783                           	opt stack 0
  1784  000026                     ___ftpack@exp:
  1785                           	opt stack 0
  1786  000026                     __div_to_l_@f2:
  1787                           	opt stack 0
  1788  000026                     __tdiv_to_l_@f2:
  1789                           	opt stack 0
  1790                           
  1791                           ; 3 bytes @ 0x25
  1792  000026                     	ds	1
  1793  000027                     ??_initLCD:
  1794  000027                     ??_digitalWrite:
  1795  000027                     ??_analogRead:
  1796  000027                     putch@data:
  1797                           	opt stack 0
  1798  000027                     ___awmod@counter:
  1799                           	opt stack 0
  1800  000027                     ___ftpack@sign:
  1801                           	opt stack 0
  1802  000027                     ___aldiv@divisor:
  1803                           	opt stack 0
  1804  000027                     ___lldiv@divisor:
  1805                           	opt stack 0
  1806                           
  1807                           ; 4 bytes @ 0x26
  1808  000027                     	ds	1
  1809  000028                     ??___ftpack:
  1810  000028                     ??_getTime:
  1811  000028                     ___awmod@sign:
  1812                           	opt stack 0
  1813                           
  1814                           ; 1 bytes @ 0x27
  1815  000028                     	ds	1
  1816  000029                     ??_startTimer:
  1817  000029                     ??__tdiv_to_l_:
  1818  000029                     ?___awdiv:
  1819                           	opt stack 0
  1820  000029                     ___awdiv@dividend:
  1821                           	opt stack 0
  1822  000029                     __div_to_l_@quot:
  1823                           	opt stack 0
  1824                           
  1825                           ; 4 bytes @ 0x28
  1826  000029                     	ds	1
  1827  00002A                     digitalWrite@p:
  1828                           	opt stack 0
  1829  00002A                     getTime@time:
  1830                           	opt stack 0
  1831                           
  1832                           ; 14 bytes @ 0x29
  1833  00002A                     	ds	1
  1834  00002B                     ?___altoft:
  1835                           	opt stack 0
  1836  00002B                     ?___awtoft:
  1837                           	opt stack 0
  1838  00002B                     ?___lltoft:
  1839                           	opt stack 0
  1840  00002B                     ___aldiv@counter:
  1841                           	opt stack 0
  1842  00002B                     ___awdiv@divisor:
  1843                           	opt stack 0
  1844  00002B                     ___awtoft@c:
  1845                           	opt stack 0
  1846  00002B                     ___altoft@c:
  1847                           	opt stack 0
  1848  00002B                     ___lldiv@quotient:
  1849                           	opt stack 0
  1850  00002B                     ___lltoft@c:
  1851                           	opt stack 0
  1852                           
  1853                           ; 4 bytes @ 0x2A
  1854  00002B                     	ds	1
  1855  00002C                     ___aldiv@sign:
  1856                           	opt stack 0
  1857  00002C                     __tdiv_to_l_@quot:
  1858                           	opt stack 0
  1859                           
  1860                           ; 4 bytes @ 0x2B
  1861  00002C                     	ds	1
  1862  00002D                     ___awdiv@counter:
  1863                           	opt stack 0
  1864  00002D                     __div_to_l_@cntr:
  1865                           	opt stack 0
  1866  00002D                     ___aldiv@quotient:
  1867                           	opt stack 0
  1868                           
  1869                           ; 4 bytes @ 0x2C
  1870  00002D                     	ds	1
  1871  00002E                     ___awdiv@sign:
  1872                           	opt stack 0
  1873  00002E                     ___awtoft@sign:
  1874                           	opt stack 0
  1875  00002E                     __div_to_l_@exp1:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x2D
  1879  00002E                     	ds	1
  1880  00002F                     ??___altoft:
  1881  00002F                     ??___lltoft:
  1882  00002F                     ___lldiv@counter:
  1883                           	opt stack 0
  1884  00002F                     ___awdiv@quotient:
  1885                           	opt stack 0
  1886  00002F                     ___ftge@ff1:
  1887                           	opt stack 0
  1888                           
  1889                           ; 3 bytes @ 0x2E
  1890  00002F                     	ds	1
  1891  000030                     ?___llmod:
  1892                           	opt stack 0
  1893  000030                     __tdiv_to_l_@cntr:
  1894                           	opt stack 0
  1895  000030                     I2C_Master_Init@c:
  1896                           	opt stack 0
  1897  000030                     ___llmod@dividend:
  1898                           	opt stack 0
  1899                           
  1900                           ; 4 bytes @ 0x2F
  1901  000030                     	ds	1
  1902  000031                     ?___wmul:
  1903                           	opt stack 0
  1904  000031                     ?___almod:
  1905                           	opt stack 0
  1906  000031                     __tdiv_to_l_@exp1:
  1907                           	opt stack 0
  1908  000031                     ___wmul@multiplier:
  1909                           	opt stack 0
  1910  000031                     ___almod@dividend:
  1911                           	opt stack 0
  1912                           
  1913                           ; 4 bytes @ 0x30
  1914  000031                     	ds	1
  1915  000032                     ___ftge@ff2:
  1916                           	opt stack 0
  1917                           
  1918                           ; 3 bytes @ 0x31
  1919  000032                     	ds	1
  1920  000033                     ___altoft@exp:
  1921                           	opt stack 0
  1922  000033                     ___lltoft@exp:
  1923                           	opt stack 0
  1924  000033                     ___wmul@multiplicand:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x32
  1928  000033                     	ds	1
  1929  000034                     ??_I2C_Master_Init:
  1930  000034                     ___altoft@sign:
  1931                           	opt stack 0
  1932  000034                     ___llmod@divisor:
  1933                           	opt stack 0
  1934                           
  1935                           ; 4 bytes @ 0x33
  1936  000034                     	ds	1
  1937  000035                     ??___ftge:
  1938  000035                     ?___ftdiv:
  1939                           	opt stack 0
  1940  000035                     ___wmul@product:
  1941                           	opt stack 0
  1942  000035                     ___ftdiv@f1:
  1943                           	opt stack 0
  1944  000035                     ___almod@divisor:
  1945                           	opt stack 0
  1946                           
  1947                           ; 4 bytes @ 0x34
  1948  000035                     	ds	2
  1949  000037                     ?_eepromRead:
  1950                           	opt stack 0
  1951  000037                     eepromRead@address:
  1952                           	opt stack 0
  1953                           
  1954                           ; 4 bytes @ 0x36
  1955  000037                     	ds	1
  1956  000038                     getTime@i:
  1957                           	opt stack 0
  1958  000038                     ___llmod@counter:
  1959                           	opt stack 0
  1960  000038                     ___ftdiv@f2:
  1961                           	opt stack 0
  1962                           
  1963                           ; 3 bytes @ 0x37
  1964  000038                     	ds	1
  1965  000039                     ___almod@counter:
  1966                           	opt stack 0
  1967                           
  1968                           ; 1 bytes @ 0x38
  1969  000039                     	ds	1
  1970  00003A                     ___almod@sign:
  1971                           	opt stack 0
  1972                           
  1973                           ; 1 bytes @ 0x39
  1974  00003A                     	ds	1
  1975  00003B                     tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           postdec1	equ	0xFE5
  1982                           fsr1l	equ	0xFE1
  1983                           
  1984                           ; 1 bytes @ 0x3A
  1985 ;;
  1986 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  1987 ;;
  1988 ;; *************** function _main *****************
  1989 ;; Defined at:
  1990 ;;		line 118 in file "main.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;		None
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;  lastBatteryT    2   49[BANK1 ] int 
  1995 ;;  cylinderBack    2   47[BANK1 ] int 
  1996 ;;  cylinderForw    2   45[BANK1 ] int 
  1997 ;;  cylinderDur     2   43[BANK1 ] int 
  1998 ;;  cylinderStar    2   41[BANK1 ] int 
  1999 ;;  run            14   51[BANK1 ] int [7]
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Totals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;Total ram usage:       34 bytes
  2014 ;; Hardware stack levels required when called:   10
  2015 ;; This function calls:
  2016 ;;		___aldiv
  2017 ;;		___almod
  2018 ;;		_digitalWrite
  2019 ;;		_initLCD
  2020 ;;		_initServo
  2021 ;;		_initTimer
  2022 ;;		_lcdClear
  2023 ;;		_lcdHome
  2024 ;;		_pinSetup
  2025 ;;		_printf
  2026 ;;		_saveNewRun
  2027 ;;		_showInterface
  2028 ;;		_showRunStats
  2029 ;;		_showRunTime
  2030 ;;		_sortBattery
  2031 ;;		_startTimer
  2032 ;; This function is called by:
  2033 ;;		Startup code after reset
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text0
  2038  00177C                     __ptext0:
  2039                           	opt stack 0
  2040  00177C                     _main:
  2041                           	opt stack 21
  2042                           
  2043                           ;main.c: 122: pinSetup();
  2044                           
  2045                           ;incstack = 0
  2046  00177C  ECDE  F01D         	call	_pinSetup	;wreg free
  2047                           
  2048                           ;main.c: 123: initLCD();
  2049  001780  ECBB  F01D         	call	_initLCD	;wreg free
  2050  001784                     l7592:
  2051                           
  2052                           ;main.c: 126: showInterface();
  2053  001784  EC8E  F016         	call	_showInterface	;wreg free
  2054                           
  2055                           ;main.c: 130: terminate = 0;
  2056  001788  0E00               	movlw	0
  2057  00178A  0101               	movlb	1	; () banked
  2058  00178C  6F7A               	movwf	(_terminate+1)& (0+255),b
  2059  00178E  0E00               	movlw	0
  2060  001790  6F79               	movwf	_terminate& (0+255),b
  2061                           
  2062                           ; BSR set to: 1
  2063                           ;main.c: 131: time = 0;
  2064  001792  0E00               	movlw	0
  2065  001794  0101               	movlb	1	; () banked
  2066  001796  6F6B               	movwf	_time& (0+255),b
  2067  001798  0E00               	movlw	0
  2068  00179A  6F6C               	movwf	(_time+1)& (0+255),b
  2069  00179C  0E00               	movlw	0
  2070  00179E  6F6D               	movwf	(_time+2)& (0+255),b
  2071  0017A0  0E00               	movlw	0
  2072  0017A2  6F6E               	movwf	(_time+3)& (0+255),b
  2073                           
  2074                           ; BSR set to: 1
  2075                           ;main.c: 132: initTimer(1);
  2076  0017A4  0E00               	movlw	0
  2077  0017A6  6E24               	movwf	initTimer@timer+1,c
  2078  0017A8  0E01               	movlw	1
  2079  0017AA  6E23               	movwf	initTimer@timer,c
  2080  0017AC  EC96  F01D         	call	_initTimer	;wreg free
  2081                           
  2082                           ;main.c: 133: startTimer(1,0);
  2083  0017B0  0E00               	movlw	0
  2084  0017B2  6E24               	movwf	startTimer@timer+1,c
  2085  0017B4  0E01               	movlw	1
  2086  0017B6  6E23               	movwf	startTimer@timer,c
  2087  0017B8  0E00               	movlw	0
  2088  0017BA  6E25               	movwf	startTimer@val,c
  2089  0017BC  0E00               	movlw	0
  2090  0017BE  6E26               	movwf	startTimer@val+1,c
  2091  0017C0  0E00               	movlw	0
  2092  0017C2  6E27               	movwf	startTimer@val+2,c
  2093  0017C4  0E00               	movlw	0
  2094  0017C6  6E28               	movwf	startTimer@val+3,c
  2095  0017C8  EC4A  F01D         	call	_startTimer	;wreg free
  2096                           
  2097                           ;main.c: 136: digitalWrite(cylinderMotor, 1);
  2098  0017CC  0E4F               	movlw	low _cylinderMotor
  2099  0017CE  6E23               	movwf	digitalWrite@pin,c
  2100  0017D0  0E01               	movlw	high _cylinderMotor
  2101  0017D2  6E24               	movwf	digitalWrite@pin+1,c
  2102  0017D4  0E00               	movlw	0
  2103  0017D6  6E26               	movwf	digitalWrite@val+1,c
  2104  0017D8  0E01               	movlw	1
  2105  0017DA  6E25               	movwf	digitalWrite@val,c
  2106  0017DC  EC5C  F017         	call	_digitalWrite	;wreg free
  2107                           
  2108                           ;main.c: 137: initServo(conveyorServo, 130);
  2109  0017E0  0E4B               	movlw	low _conveyorServo
  2110  0017E2  0100               	movlb	0	; () banked
  2111  0017E4  6FDE               	movwf	initServo@motor& (0+255),b
  2112  0017E6  0E01               	movlw	high _conveyorServo
  2113  0017E8  0100               	movlb	0	; () banked
  2114  0017EA  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2115  0017EC  0E00               	movlw	0
  2116  0017EE  0100               	movlb	0	; () banked
  2117  0017F0  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  2118  0017F2  0E82               	movlw	130
  2119  0017F4  6FE0               	movwf	initServo@angle& (0+255),b
  2120  0017F6  ECB3  F015         	call	_initServo	;wreg free
  2121                           
  2122                           ;main.c: 138: initServo(padServo, padAngle_NEUTRAL);
  2123  0017FA  0E5B               	movlw	low _padServo
  2124  0017FC  0100               	movlb	0	; () banked
  2125  0017FE  6FDE               	movwf	initServo@motor& (0+255),b
  2126  001800  0E01               	movlw	high _padServo
  2127  001802  0100               	movlb	0	; () banked
  2128  001804  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2129  001806  C145  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  2130  00180A  C146  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2131  00180E  ECB3  F015         	call	_initServo	;wreg free
  2132                           
  2133                           ;main.c: 139: initServo(redirectingServo, redirectAngle_AA);
  2134  001812  0E5F               	movlw	low _redirectingServo
  2135  001814  0100               	movlb	0	; () banked
  2136  001816  6FDE               	movwf	initServo@motor& (0+255),b
  2137  001818  0E01               	movlw	high _redirectingServo
  2138  00181A  0100               	movlb	0	; () banked
  2139  00181C  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2140  00181E  C147  F0E0         	movff	_redirectAngle_AA,initServo@angle
  2141  001822  C148  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  2142  001826  ECB3  F015         	call	_initServo	;wreg free
  2143  00182A                     l7610:
  2144                           
  2145                           ;main.c: 143: lcdClear();
  2146  00182A  EC28  F01F         	call	_lcdClear	;wreg free
  2147                           
  2148                           ;main.c: 144: printf("running");
  2149  00182E  0EF6               	movlw	low STR_2
  2150  001830  0100               	movlb	0	; () banked
  2151  001832  6FBD               	movwf	printf@f& (0+255),b
  2152  001834  0EFF               	movlw	high STR_2
  2153  001836  0100               	movlb	0	; () banked
  2154  001838  6FBE               	movwf	(printf@f+1)& (0+255),b
  2155  00183A  EC09  F000         	call	_printf	;wreg free
  2156                           
  2157                           ;main.c: 146: int lastBatteryTime = time;
  2158  00183E  C16B  F131         	movff	_time,main@lastBatteryTime
  2159  001842  C16C  F132         	movff	_time+1,main@lastBatteryTime+1
  2160                           
  2161                           ;main.c: 148: int cylinderStart = time;
  2162  001846  C16B  F129         	movff	_time,main@cylinderStart
  2163  00184A  C16C  F12A         	movff	_time+1,main@cylinderStart+1
  2164                           
  2165                           ;main.c: 149: int cylinderDur = 0;
  2166  00184E  0E00               	movlw	0
  2167  001850  0101               	movlb	1	; () banked
  2168  001852  6F2C               	movwf	(main@cylinderDur+1)& (0+255),b
  2169  001854  0E00               	movlw	0
  2170  001856  6F2B               	movwf	main@cylinderDur& (0+255),b
  2171                           
  2172                           ; BSR set to: 1
  2173                           ;main.c: 150: int cylinderForward = 70;
  2174  001858  0E00               	movlw	0
  2175  00185A  0101               	movlb	1	; () banked
  2176  00185C  6F2E               	movwf	(main@cylinderForward+1)& (0+255),b
  2177  00185E  0E46               	movlw	70
  2178  001860  6F2D               	movwf	main@cylinderForward& (0+255),b
  2179                           
  2180                           ; BSR set to: 1
  2181                           ;main.c: 151: int cylinderBackward = 30;
  2182  001862  0E00               	movlw	0
  2183  001864  0101               	movlb	1	; () banked
  2184  001866  6F30               	movwf	(main@cylinderBackward+1)& (0+255),b
  2185  001868  0E1E               	movlw	30
  2186  00186A  6F2F               	movwf	main@cylinderBackward& (0+255),b
  2187                           
  2188                           ;main.c: 153: while(!batteryDetected && !terminate){
  2189  00186C  D0A5               	goto	l7632
  2190  00186E                     l7622:
  2191                           
  2192                           ; BSR set to: 1
  2193                           ;main.c: 155: lcdHome();
  2194  00186E  EC34  F01F         	call	_lcdHome	;wreg free
  2195                           
  2196                           ;main.c: 156: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2197  001872  0E98               	movlw	low STR_3
  2198  001874  0100               	movlb	0	; () banked
  2199  001876  6FBD               	movwf	printf@f& (0+255),b
  2200  001878  0EFF               	movlw	high STR_3
  2201  00187A  0100               	movlb	0	; () banked
  2202  00187C  6FBE               	movwf	(printf@f+1)& (0+255),b
  2203  00187E  C16B  F023         	movff	_time,___aldiv@dividend
  2204  001882  C16C  F024         	movff	_time+1,___aldiv@dividend+1
  2205  001886  C16D  F025         	movff	_time+2,___aldiv@dividend+2
  2206  00188A  C16E  F026         	movff	_time+3,___aldiv@dividend+3
  2207  00188E  0E58               	movlw	88
  2208  001890  6E27               	movwf	___aldiv@divisor,c
  2209  001892  0E02               	movlw	2
  2210  001894  6E28               	movwf	___aldiv@divisor+1,c
  2211  001896  0E00               	movlw	0
  2212  001898  6E29               	movwf	___aldiv@divisor+2,c
  2213  00189A  0E00               	movlw	0
  2214  00189C  6E2A               	movwf	___aldiv@divisor+3,c
  2215  00189E  ECF6  F016         	call	___aldiv	;wreg free
  2216  0018A2  C023  F0BF         	movff	?___aldiv,?_printf+2
  2217  0018A6  C024  F0C0         	movff	?___aldiv+1,?_printf+3
  2218  0018AA  C025  F0C1         	movff	?___aldiv+2,?_printf+4
  2219  0018AE  C026  F0C2         	movff	?___aldiv+3,?_printf+5
  2220  0018B2  0E0A               	movlw	10
  2221  0018B4  6E27               	movwf	___aldiv@divisor,c
  2222  0018B6  0E00               	movlw	0
  2223  0018B8  6E28               	movwf	___aldiv@divisor+1,c
  2224  0018BA  0E00               	movlw	0
  2225  0018BC  6E29               	movwf	___aldiv@divisor+2,c
  2226  0018BE  0E00               	movlw	0
  2227  0018C0  6E2A               	movwf	___aldiv@divisor+3,c
  2228  0018C2  C16B  F023         	movff	_time,___aldiv@dividend
  2229  0018C6  C16C  F024         	movff	_time+1,___aldiv@dividend+1
  2230  0018CA  C16D  F025         	movff	_time+2,___aldiv@dividend+2
  2231  0018CE  C16E  F026         	movff	_time+3,___aldiv@dividend+3
  2232  0018D2  ECF6  F016         	call	___aldiv	;wreg free
  2233  0018D6  C023  F031         	movff	?___aldiv,___almod@dividend
  2234  0018DA  C024  F032         	movff	?___aldiv+1,___almod@dividend+1
  2235  0018DE  C025  F033         	movff	?___aldiv+2,___almod@dividend+2
  2236  0018E2  C026  F034         	movff	?___aldiv+3,___almod@dividend+3
  2237  0018E6  0E3C               	movlw	60
  2238  0018E8  6E35               	movwf	___almod@divisor,c
  2239  0018EA  0E00               	movlw	0
  2240  0018EC  6E36               	movwf	___almod@divisor+1,c
  2241  0018EE  0E00               	movlw	0
  2242  0018F0  6E37               	movwf	___almod@divisor+2,c
  2243  0018F2  0E00               	movlw	0
  2244  0018F4  6E38               	movwf	___almod@divisor+3,c
  2245  0018F6  ECDE  F018         	call	___almod	;wreg free
  2246  0018FA  C031  F0C3         	movff	?___almod,?_printf+6
  2247  0018FE  C032  F0C4         	movff	?___almod+1,?_printf+7
  2248  001902  C033  F0C5         	movff	?___almod+2,?_printf+8
  2249  001906  C034  F0C6         	movff	?___almod+3,?_printf+9
  2250  00190A  EC09  F000         	call	_printf	;wreg free
  2251                           
  2252                           ;main.c: 157: _delay((unsigned long)((77)*(10000000/4000.0)));
  2253  00190E  0EFA               	movlw	250
  2254  001910  0101               	movlb	1	; () banked
  2255  001912  6F1F               	movwf	??_main& (0+255),b
  2256  001914  0EFF               	movlw	255
  2257  001916                     u7987:
  2258  001916  2EE8               	decfsz	wreg,f,c
  2259  001918  D7FE               	bra	u7987
  2260  00191A  2F1F               	decfsz	??_main& (0+255),f,b
  2261  00191C  D7FC               	bra	u7987
  2262                           
  2263                           ;main.c: 169: if(time - lastBatteryTime > stoppingTime)
  2264  00191E  C131  F11F         	movff	main@lastBatteryTime,??_main
  2265  001922  C132  F120         	movff	main@lastBatteryTime+1,??_main+1
  2266  001926  0E00               	movlw	0
  2267  001928  0101               	movlb	1	; () banked
  2268  00192A  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2269  00192C  0EFF               	movlw	255
  2270  00192E  6F21               	movwf	(??_main+2)& (0+255),b
  2271  001930  6F22               	movwf	(??_main+3)& (0+255),b
  2272  001932  0101               	movlb	1	; () banked
  2273  001934  1F1F               	comf	??_main& (0+255),f,b
  2274  001936  1F20               	comf	(??_main+1)& (0+255),f,b
  2275  001938  1F21               	comf	(??_main+2)& (0+255),f,b
  2276  00193A  1F22               	comf	(??_main+3)& (0+255),f,b
  2277  00193C  2B1F               	incf	??_main& (0+255),f,b
  2278  00193E  0E00               	movlw	0
  2279  001940  2320               	addwfc	(??_main+1)& (0+255),f,b
  2280  001942  2321               	addwfc	(??_main+2)& (0+255),f,b
  2281  001944  2322               	addwfc	(??_main+3)& (0+255),f,b
  2282  001946  0101               	movlb	1	; () banked
  2283  001948  516B               	movf	_time& (0+255),w,b
  2284  00194A  0101               	movlb	1	; () banked
  2285  00194C  251F               	addwf	??_main& (0+255),w,b
  2286  00194E  0101               	movlb	1	; () banked
  2287  001950  6F23               	movwf	(??_main+4)& (0+255),b
  2288  001952  0101               	movlb	1	; () banked
  2289  001954  516C               	movf	(_time+1)& (0+255),w,b
  2290  001956  0101               	movlb	1	; () banked
  2291  001958  2120               	addwfc	(??_main+1)& (0+255),w,b
  2292  00195A  0101               	movlb	1	; () banked
  2293  00195C  6F24               	movwf	(??_main+5)& (0+255),b
  2294  00195E  0101               	movlb	1	; () banked
  2295  001960  516D               	movf	(_time+2)& (0+255),w,b
  2296  001962  0101               	movlb	1	; () banked
  2297  001964  2121               	addwfc	(??_main+2)& (0+255),w,b
  2298  001966  0101               	movlb	1	; () banked
  2299  001968  6F25               	movwf	(??_main+6)& (0+255),b
  2300  00196A  0101               	movlb	1	; () banked
  2301  00196C  516E               	movf	(_time+3)& (0+255),w,b
  2302  00196E  0101               	movlb	1	; () banked
  2303  001970  2122               	addwfc	(??_main+3)& (0+255),w,b
  2304  001972  0101               	movlb	1	; () banked
  2305  001974  6F26               	movwf	(??_main+7)& (0+255),b
  2306  001976  0E00               	movlw	0
  2307  001978  0101               	movlb	1	; () banked
  2308  00197A  BF4A               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2309  00197C  0EFF               	movlw	255
  2310  00197E  0101               	movlb	1	; () banked
  2311  001980  6F28               	movwf	(??_main+9)& (0+255),b
  2312  001982  0A80               	xorlw	128
  2313  001984  6F27               	movwf	(??_main+8)& (0+255),b
  2314  001986  0101               	movlb	1	; () banked
  2315  001988  5123               	movf	(??_main+4)& (0+255),w,b
  2316  00198A  0101               	movlb	1	; () banked
  2317  00198C  5D49               	subwf	_stoppingTime& (0+255),w,b
  2318  00198E  0101               	movlb	1	; () banked
  2319  001990  5124               	movf	(??_main+5)& (0+255),w,b
  2320  001992  0101               	movlb	1	; () banked
  2321  001994  594A               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2322  001996  0101               	movlb	1	; () banked
  2323  001998  5125               	movf	(??_main+6)& (0+255),w,b
  2324  00199A  0101               	movlb	1	; () banked
  2325  00199C  5928               	subwfb	(??_main+9)& (0+255),w,b
  2326  00199E  0101               	movlb	1	; () banked
  2327  0019A0  5126               	movf	(??_main+7)& (0+255),w,b
  2328  0019A2  0A80               	xorlw	128
  2329  0019A4  0101               	movlb	1	; () banked
  2330  0019A6  5927               	subwfb	(??_main+8)& (0+255),w,b
  2331  0019A8  B0D8               	btfsc	status,0,c
  2332  0019AA  D006               	goto	l7632
  2333                           
  2334                           ; BSR set to: 1
  2335                           ;main.c: 170: {
  2336                           ;main.c: 171: terminate = 1;
  2337  0019AC  0E00               	movlw	0
  2338  0019AE  0101               	movlb	1	; () banked
  2339  0019B0  6F7A               	movwf	(_terminate+1)& (0+255),b
  2340  0019B2  0E01               	movlw	1
  2341  0019B4  6F79               	movwf	_terminate& (0+255),b
  2342                           
  2343                           ;main.c: 172: break;
  2344  0019B6  D00C               	goto	l7636
  2345  0019B8                     l7632:
  2346                           
  2347                           ; BSR set to: 1
  2348  0019B8  0101               	movlb	1	; () banked
  2349  0019BA  516F               	movf	_batteryDetected& (0+255),w,b
  2350  0019BC  0101               	movlb	1	; () banked
  2351  0019BE  1170               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2352  0019C0  A4D8               	btfss	status,2,c
  2353  0019C2  D006               	goto	l7636
  2354                           
  2355                           ; BSR set to: 1
  2356  0019C4  0101               	movlb	1	; () banked
  2357  0019C6  5179               	movf	_terminate& (0+255),w,b
  2358  0019C8  0101               	movlb	1	; () banked
  2359  0019CA  117A               	iorwf	(_terminate+1)& (0+255),w,b
  2360  0019CC  B4D8               	btfsc	status,2,c
  2361  0019CE  D74F               	goto	l7622
  2362  0019D0                     l7636:
  2363                           
  2364                           ; BSR set to: 1
  2365                           ;main.c: 173: }
  2366                           ;main.c: 174: }
  2367                           ;main.c: 176: if(terminate)break;
  2368  0019D0  0101               	movlb	1	; () banked
  2369  0019D2  5179               	movf	_terminate& (0+255),w,b
  2370  0019D4  0101               	movlb	1	; () banked
  2371  0019D6  117A               	iorwf	(_terminate+1)& (0+255),w,b
  2372  0019D8  A4D8               	btfss	status,2,c
  2373  0019DA  D00C               	goto	l7646
  2374                           
  2375                           ; BSR set to: 1
  2376                           ;main.c: 178: sortBattery();
  2377                           
  2378                           ; BSR set to: 1
  2379                           
  2380                           ; BSR set to: 1
  2381  0019DC  EC05  F007         	call	_sortBattery	;wreg free
  2382                           
  2383                           ;main.c: 181: lastBatteryTime = time;
  2384  0019E0  C16B  F131         	movff	_time,main@lastBatteryTime
  2385  0019E4  C16C  F132         	movff	_time+1,main@lastBatteryTime+1
  2386                           
  2387                           ;main.c: 182: batteryDetected = 0;
  2388  0019E8  0E00               	movlw	0
  2389  0019EA  0101               	movlb	1	; () banked
  2390  0019EC  6F70               	movwf	(_batteryDetected+1)& (0+255),b
  2391  0019EE  0E00               	movlw	0
  2392  0019F0  6F6F               	movwf	_batteryDetected& (0+255),b
  2393                           
  2394                           ; BSR set to: 1
  2395  0019F2  D71B               	goto	l7610
  2396  0019F4                     l7646:
  2397                           
  2398                           ; BSR set to: 1
  2399                           ;main.c: 183: }
  2400                           ;main.c: 186: digitalWrite(cylinderMotor, 0);
  2401  0019F4  0E4F               	movlw	low _cylinderMotor
  2402  0019F6  6E23               	movwf	digitalWrite@pin,c
  2403  0019F8  0E01               	movlw	high _cylinderMotor
  2404  0019FA  6E24               	movwf	digitalWrite@pin+1,c
  2405  0019FC  0E00               	movlw	0
  2406  0019FE  6E26               	movwf	digitalWrite@val+1,c
  2407  001A00  0E00               	movlw	0
  2408  001A02  6E25               	movwf	digitalWrite@val,c
  2409  001A04  EC5C  F017         	call	_digitalWrite	;wreg free
  2410                           
  2411                           ;main.c: 189: int run[7];
  2412                           ;main.c: 190: run[0] = time>>8;
  2413  001A08  C16C  F133         	movff	_time+1,main@run
  2414  001A0C  C16D  F134         	movff	_time+2,main@run+1
  2415                           
  2416                           ;main.c: 191: run[1] = time;
  2417  001A10  C16B  F135         	movff	_time,main@run+2
  2418  001A14  C16C  F136         	movff	_time+1,main@run+3
  2419                           
  2420                           ;main.c: 192: run[2] = n_AA;
  2421  001A18  C173  F137         	movff	_n_AA,main@run+4
  2422  001A1C  C174  F138         	movff	_n_AA+1,main@run+5
  2423                           
  2424                           ;main.c: 193: run[3] = n_9V;
  2425  001A20  C171  F139         	movff	_n_9V,main@run+6
  2426  001A24  C172  F13A         	movff	_n_9V+1,main@run+7
  2427                           
  2428                           ;main.c: 194: run[4] = n_C;
  2429  001A28  C175  F13B         	movff	_n_C,main@run+8
  2430  001A2C  C176  F13C         	movff	_n_C+1,main@run+9
  2431                           
  2432                           ;main.c: 195: run[5] = n_OTHER;
  2433  001A30  C177  F13D         	movff	_n_OTHER,main@run+10
  2434  001A34  C178  F13E         	movff	_n_OTHER+1,main@run+11
  2435                           
  2436                           ;main.c: 197: saveNewRun(run);
  2437  001A38  0E33               	movlw	low main@run
  2438  001A3A  0100               	movlb	0	; () banked
  2439  001A3C  6F89               	movwf	saveNewRun@data& (0+255),b
  2440  001A3E  0E01               	movlw	high main@run
  2441  001A40  0100               	movlb	0	; () banked
  2442  001A42  6F8A               	movwf	(saveNewRun@data+1)& (0+255),b
  2443  001A44  EC42  F015         	call	_saveNewRun	;wreg free
  2444                           
  2445                           ;main.c: 198: showRunTime(run);
  2446  001A48  0E33               	movlw	low main@run
  2447  001A4A  0100               	movlb	0	; () banked
  2448  001A4C  6FEB               	movwf	showRunTime@run& (0+255),b
  2449  001A4E  0E01               	movlw	high main@run
  2450  001A50  0100               	movlb	0	; () banked
  2451  001A52  6FEC               	movwf	(showRunTime@run+1)& (0+255),b
  2452  001A54  EC7B  F01B         	call	_showRunTime	;wreg free
  2453                           
  2454                           ;main.c: 199: showRunStats(run);
  2455  001A58  0E33               	movlw	low main@run
  2456  001A5A  0100               	movlb	0	; () banked
  2457  001A5C  6FEB               	movwf	showRunStats@run& (0+255),b
  2458  001A5E  0E01               	movlw	high main@run
  2459  001A60  0100               	movlb	0	; () banked
  2460  001A62  6FEC               	movwf	(showRunStats@run+1)& (0+255),b
  2461  001A64  EC24  F018         	call	_showRunStats	;wreg free
  2462  001A68  D68D               	goto	l7592
  2463  001A6A                     l163:
  2464  001A6A  D7FF               	goto	l163
  2465  001A6C                     __end_of_main:
  2466                           	opt stack 0
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           postinc0	equ	0xFEE
  2472                           wreg	equ	0xFE8
  2473                           postdec1	equ	0xFE5
  2474                           fsr1l	equ	0xFE1
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _sortBattery *****************
  2478 ;; Defined at:
  2479 ;;		line 207 in file "main.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;		None
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  V               3   22[BANK1 ] float 
  2484 ;;  i               2   18[BANK1 ] int 
  2485 ;;  i               3   25[BANK1 ] float 
  2486 ;;  V               3   28[BANK1 ] float 
  2487 ;;  V_max           3   15[BANK1 ] float 
  2488 ;;  resolution      3   12[BANK1 ] float 
  2489 ;;  Vcc             3    9[BANK1 ] float 
  2490 ;;  V_float         3    2[BANK1 ] float 
  2491 ;;  targetAngle     2   20[BANK1 ] int 
  2492 ;;  signal          2    7[BANK1 ] int 
  2493 ;;  pos_v_counte    2    5[BANK1 ] int 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;Total ram usage:       33 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    8
  2510 ;; This function calls:
  2511 ;;		___altoft
  2512 ;;		___awtoft
  2513 ;;		___ftdiv
  2514 ;;		___ftge
  2515 ;;		___ftmul
  2516 ;;		___ftsub
  2517 ;;		___fttol
  2518 ;;		_analogRead
  2519 ;;		_digitalRead
  2520 ;;		_digitalWrite
  2521 ;;		_lcdClear
  2522 ;;		_printf
  2523 ;;		_readKeypad
  2524 ;;		_setAngle
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text1
  2531  000E0A                     __ptext1:
  2532                           	opt stack 0
  2533  000E0A                     _sortBattery:
  2534                           	opt stack 22
  2535                           
  2536                           ;main.c: 210: setAngle(conveyorServo, 90);
  2537                           
  2538                           ;incstack = 0
  2539  000E0A  0E4B               	movlw	low _conveyorServo
  2540  000E0C  0100               	movlb	0	; () banked
  2541  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2542  000E10  0E01               	movlw	high _conveyorServo
  2543  000E12  0100               	movlb	0	; () banked
  2544  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2545  000E16  0E00               	movlw	0
  2546  000E18  0100               	movlb	0	; () banked
  2547  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2548  000E1C  0E5A               	movlw	90
  2549  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2550  000E20  EC24  F016         	call	_setAngle	;wreg free
  2551                           
  2552                           ;main.c: 211: digitalWrite(cylinderMotor, 0);
  2553  000E24  0E4F               	movlw	low _cylinderMotor
  2554  000E26  6E23               	movwf	digitalWrite@pin,c
  2555  000E28  0E01               	movlw	high _cylinderMotor
  2556  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2557  000E2C  0E00               	movlw	0
  2558  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2559  000E30  0E00               	movlw	0
  2560  000E32  6E25               	movwf	digitalWrite@val,c
  2561  000E34  EC5C  F017         	call	_digitalWrite	;wreg free
  2562                           
  2563                           ;main.c: 214: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2564  000E38  0E0D               	movlw	13
  2565  000E3A  0100               	movlb	0	; () banked
  2566  000E3C  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2567  000E3E  0EAF               	movlw	175
  2568  000E40  0100               	movlb	0	; () banked
  2569  000E42  6FEB               	movwf	??_sortBattery& (0+255),b
  2570  000E44  0EB6               	movlw	182
  2571  000E46                     u7997:
  2572  000E46  2EE8               	decfsz	wreg,f,c
  2573  000E48  D7FE               	bra	u7997
  2574  000E4A  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2575  000E4C  D7FC               	bra	u7997
  2576  000E4E  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2577  000E50  D7FA               	bra	u7997
  2578  000E52  F000               	nop	
  2579                           
  2580                           ;main.c: 216: float Vcc = 5.00;
  2581  000E54  0E00               	movlw	0
  2582  000E56  0101               	movlb	1	; () banked
  2583  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2584  000E5A  0EA0               	movlw	160
  2585  000E5C  0101               	movlb	1	; () banked
  2586  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2587  000E60  0E40               	movlw	64
  2588  000E62  0101               	movlb	1	; () banked
  2589  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2590                           
  2591                           ; BSR set to: 1
  2592                           ;main.c: 217: float resolution = (1<<10) - 1;
  2593  000E66  0EC0               	movlw	192
  2594  000E68  0101               	movlb	1	; () banked
  2595  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2596  000E6C  0E7F               	movlw	127
  2597  000E6E  0101               	movlb	1	; () banked
  2598  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2599  000E72  0E44               	movlw	68
  2600  000E74  0101               	movlb	1	; () banked
  2601  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2602                           
  2603                           ; BSR set to: 1
  2604                           ;main.c: 218: float V_max = 0;
  2605  000E78  0E00               	movlw	0
  2606  000E7A  0101               	movlb	1	; () banked
  2607  000E7C  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2608  000E7E  0E00               	movlw	0
  2609  000E80  0101               	movlb	1	; () banked
  2610  000E82  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2611  000E84  0E00               	movlw	0
  2612  000E86  0101               	movlb	1	; () banked
  2613  000E88  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2614                           
  2615                           ; BSR set to: 1
  2616                           ;main.c: 219: float V_float = 0;
  2617  000E8A  0E00               	movlw	0
  2618  000E8C  0101               	movlb	1	; () banked
  2619  000E8E  6F02               	movwf	sortBattery@V_float& (0+255),b
  2620  000E90  0E00               	movlw	0
  2621  000E92  0101               	movlb	1	; () banked
  2622  000E94  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2623  000E96  0E00               	movlw	0
  2624  000E98  0101               	movlb	1	; () banked
  2625  000E9A  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2626                           
  2627                           ; BSR set to: 1
  2628                           ;main.c: 220: int pos_v_counter = 1;
  2629  000E9C  0E00               	movlw	0
  2630  000E9E  0101               	movlb	1	; () banked
  2631  000EA0  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2632  000EA2  0E01               	movlw	1
  2633  000EA4  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2634                           
  2635                           ; BSR set to: 1
  2636                           ;main.c: 221: int signal = 0;
  2637  000EA6  0E00               	movlw	0
  2638  000EA8  0101               	movlb	1	; () banked
  2639  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2640  000EAC  0E00               	movlw	0
  2641  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2642                           
  2643                           ; BSR set to: 1
  2644                           ;main.c: 225: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2645  000EB0  C145  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2646  000EB4  C146  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2647  000EB8  EC1A  F01E         	call	___awtoft	;wreg free
  2648  000EBC  C02B  F119         	movff	?___awtoft,sortBattery@i
  2649  000EC0  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2650  000EC4  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2651  000EC8  D0F6               	goto	l7494
  2652  000ECA                     l7468:
  2653                           
  2654                           ;main.c: 226: setAngle(padServo, i);
  2655  000ECA  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2656  000ECE  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2657  000ED2  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2658  000ED6  ECF5  F010         	call	___fttol	;wreg free
  2659  000EDA  C0AE  F100         	movff	?___fttol,_sortBattery$1414
  2660  000EDE  C0AF  F101         	movff	?___fttol+1,_sortBattery$1414+1
  2661                           
  2662                           ;main.c: 226: setAngle(padServo, i);
  2663  000EE2  0E5B               	movlw	low _padServo
  2664  000EE4  0100               	movlb	0	; () banked
  2665  000EE6  6FD4               	movwf	setAngle@motor& (0+255),b
  2666  000EE8  0E01               	movlw	high _padServo
  2667  000EEA  0100               	movlb	0	; () banked
  2668  000EEC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2669  000EEE  C100  F0D6         	movff	_sortBattery$1414,setAngle@angle
  2670  000EF2  C101  F0D7         	movff	_sortBattery$1414+1,setAngle@angle+1
  2671  000EF6  EC24  F016         	call	_setAngle	;wreg free
  2672                           
  2673                           ;main.c: 227: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2674  000EFA  0E53               	movlw	83
  2675  000EFC                     u8007:
  2676  000EFC  2EE8               	decfsz	wreg,f,c
  2677  000EFE  D7FE               	bra	u8007
  2678  000F00  F000               	nop	
  2679                           
  2680                           ;main.c: 228: digitalWrite(AA_float, 1);
  2681  000F02  0E59               	movlw	low _AA_float
  2682  000F04  6E23               	movwf	digitalWrite@pin,c
  2683  000F06  0E00               	movlw	high _AA_float
  2684  000F08  6E24               	movwf	digitalWrite@pin+1,c
  2685  000F0A  0E00               	movlw	0
  2686  000F0C  6E26               	movwf	digitalWrite@val+1,c
  2687  000F0E  0E01               	movlw	1
  2688  000F10  6E25               	movwf	digitalWrite@val,c
  2689  000F12  EC5C  F017         	call	_digitalWrite	;wreg free
  2690                           
  2691                           ;main.c: 229: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2692  000F16  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2693  000F1A  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2694  000F1E  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2695  000F22  C045  F023         	movff	_padPin3+2,analogRead@channel
  2696  000F26  C046  F024         	movff	_padPin3+3,analogRead@channel+1
  2697  000F2A  ECFE  F01D         	call	_analogRead	;wreg free
  2698  000F2E  C023  F02B         	movff	?_analogRead,___altoft@c
  2699  000F32  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2700  000F36  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2701  000F3A  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2702  000F3E  ECCF  F01A         	call	___altoft	;wreg free
  2703  000F42  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2704  000F46  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2705  000F4A  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2706  000F4E  ECC4  F012         	call	___ftdiv	;wreg free
  2707  000F52  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2708  000F56  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2709  000F5A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2710  000F5E  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2711  000F62  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2712  000F66  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2713  000F6A  EC9A  F00F         	call	___ftmul	;wreg free
  2714  000F6E  C089  F116         	movff	?___ftmul,sortBattery@V
  2715  000F72  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2716  000F76  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2717                           
  2718                           ;main.c: 231: if(V > 0.1)pos_v_counter++;
  2719  000F7A  0ECD               	movlw	205
  2720  000F7C  6E2F               	movwf	___ftge@ff1,c
  2721  000F7E  0ECC               	movlw	204
  2722  000F80  6E30               	movwf	___ftge@ff1+1,c
  2723  000F82  0E3D               	movlw	61
  2724  000F84  6E31               	movwf	___ftge@ff1+2,c
  2725  000F86  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2726  000F8A  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2727  000F8E  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2728  000F92  EC7D  F019         	call	___ftge	;wreg free
  2729  000F96  B0D8               	btfsc	status,0,c
  2730  000F98  D003               	goto	l7482
  2731  000F9A  0101               	movlb	1	; () banked
  2732  000F9C  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2733  000F9E  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2734  000FA0                     l7482:
  2735                           
  2736                           ;main.c: 233: if(V > V_max) {
  2737  000FA0  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2738  000FA4  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2739  000FA8  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2740  000FAC  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2741  000FB0  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2742  000FB4  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2743  000FB8  EC7D  F019         	call	___ftge	;wreg free
  2744  000FBC  B0D8               	btfsc	status,0,c
  2745  000FBE  D064               	goto	l7492
  2746                           
  2747                           ;main.c: 234: signal = digitalRead(padPin1)<<1;
  2748  000FC0  0E53               	movlw	low _padPin1
  2749  000FC2  6E23               	movwf	digitalRead@pin,c
  2750  000FC4  0E01               	movlw	high _padPin1
  2751  000FC6  6E24               	movwf	digitalRead@pin+1,c
  2752  000FC8  EC58  F014         	call	_digitalRead	;wreg free
  2753  000FCC  90D8               	bcf	status,0,c
  2754  000FCE  3423               	rlcf	?_digitalRead,w,c
  2755  000FD0  0101               	movlb	1	; () banked
  2756  000FD2  6F07               	movwf	sortBattery@signal& (0+255),b
  2757  000FD4  3424               	rlcf	?_digitalRead+1,w,c
  2758  000FD6  0101               	movlb	1	; () banked
  2759  000FD8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2760                           
  2761                           ;main.c: 235: signal |= digitalRead(padPin2)<<0;
  2762  000FDA  0E57               	movlw	low _padPin2
  2763  000FDC  6E23               	movwf	digitalRead@pin,c
  2764  000FDE  0E01               	movlw	high _padPin2
  2765  000FE0  6E24               	movwf	digitalRead@pin+1,c
  2766  000FE2  EC58  F014         	call	_digitalRead	;wreg free
  2767  000FE6  5023               	movf	?_digitalRead,w,c
  2768  000FE8  0101               	movlb	1	; () banked
  2769  000FEA  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2770  000FEC  5024               	movf	?_digitalRead+1,w,c
  2771  000FEE  0101               	movlb	1	; () banked
  2772  000FF0  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2773                           
  2774                           ; BSR set to: 1
  2775                           ;main.c: 237: V_max = V;
  2776  000FF2  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2777  000FF6  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2778  000FFA  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2779                           
  2780                           ;main.c: 240: digitalWrite(AA_float, 0);
  2781  000FFE  0E59               	movlw	low _AA_float
  2782  001000  6E23               	movwf	digitalWrite@pin,c
  2783  001002  0E00               	movlw	high _AA_float
  2784  001004  6E24               	movwf	digitalWrite@pin+1,c
  2785  001006  0E00               	movlw	0
  2786  001008  6E26               	movwf	digitalWrite@val+1,c
  2787  00100A  0E00               	movlw	0
  2788  00100C  6E25               	movwf	digitalWrite@val,c
  2789  00100E  EC5C  F017         	call	_digitalWrite	;wreg free
  2790                           
  2791                           ;main.c: 241: _delay((unsigned long)((1)*(10000000/4000.0)));
  2792  001012  0E04               	movlw	4
  2793  001014  0100               	movlb	0	; () banked
  2794  001016  6FEB               	movwf	??_sortBattery& (0+255),b
  2795  001018  0E3D               	movlw	61
  2796  00101A                     u8017:
  2797  00101A  2EE8               	decfsz	wreg,f,c
  2798  00101C  D7FE               	bra	u8017
  2799  00101E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2800  001020  D7FC               	bra	u8017
  2801  001022  D000               	nop2	
  2802                           
  2803                           ;main.c: 242: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2804  001024  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2805  001028  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2806  00102C  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2807  001030  C045  F023         	movff	_padPin3+2,analogRead@channel
  2808  001034  C046  F024         	movff	_padPin3+3,analogRead@channel+1
  2809  001038  ECFE  F01D         	call	_analogRead	;wreg free
  2810  00103C  C023  F02B         	movff	?_analogRead,___altoft@c
  2811  001040  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2812  001044  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2813  001048  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2814  00104C  ECCF  F01A         	call	___altoft	;wreg free
  2815  001050  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2816  001054  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2817  001058  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2818  00105C  ECC4  F012         	call	___ftdiv	;wreg free
  2819  001060  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2820  001064  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2821  001068  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2822  00106C  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2823  001070  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2824  001074  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2825  001078  EC9A  F00F         	call	___ftmul	;wreg free
  2826  00107C  C089  F102         	movff	?___ftmul,sortBattery@V_float
  2827  001080  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2828  001084  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2829  001088                     l7492:
  2830  001088  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  2831  00108C  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  2832  001090  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  2833  001094  0ECD               	movlw	205
  2834  001096  0100               	movlb	0	; () banked
  2835  001098  6FB1               	movwf	___ftsub@f2& (0+255),b
  2836  00109A  0ECC               	movlw	204
  2837  00109C  0100               	movlb	0	; () banked
  2838  00109E  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  2839  0010A0  0E3D               	movlw	61
  2840  0010A2  0100               	movlb	0	; () banked
  2841  0010A4  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  2842  0010A6  EC24  F01D         	call	___ftsub	;wreg free
  2843  0010AA  C0AE  F119         	movff	?___ftsub,sortBattery@i
  2844  0010AE  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2845  0010B2  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2846  0010B6                     l7494:
  2847  0010B6  C0F7  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  2848  0010BA  C0F8  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2849  0010BE  EC1A  F01E         	call	___awtoft	;wreg free
  2850  0010C2  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  2851  0010C6  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  2852  0010CA  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  2853  0010CE  C119  F032         	movff	sortBattery@i,___ftge@ff2
  2854  0010D2  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  2855  0010D6  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  2856  0010DA  EC7D  F019         	call	___ftge	;wreg free
  2857  0010DE  A0D8               	btfss	status,0,c
  2858  0010E0  D6F4               	goto	l7468
  2859                           
  2860                           ;main.c: 244: }
  2861                           ;main.c: 245: }
  2862                           ;main.c: 247: int targetAngle;
  2863                           ;main.c: 248: float V = V_max;
  2864  0010E2  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_244
  2865  0010E6  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_244+1
  2866  0010EA  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_244+2
  2867                           
  2868                           ;main.c: 250: lcdClear();
  2869  0010EE  EC28  F01F         	call	_lcdClear	;wreg free
  2870                           
  2871                           ;main.c: 251: printf("V: %.3f, N: %d\n",V,pos_v_counter);
  2872  0010F2  0EA9               	movlw	low STR_4
  2873  0010F4  0100               	movlb	0	; () banked
  2874  0010F6  6FBD               	movwf	printf@f& (0+255),b
  2875  0010F8  0EFF               	movlw	high STR_4
  2876  0010FA  0100               	movlb	0	; () banked
  2877  0010FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2878  0010FE  C11C  F0BF         	movff	sortBattery@V_244,?_printf+2
  2879  001102  C11D  F0C0         	movff	sortBattery@V_244+1,?_printf+3
  2880  001106  C11E  F0C1         	movff	sortBattery@V_244+2,?_printf+4
  2881  00110A  C105  F0C2         	movff	sortBattery@pos_v_counter,?_printf+5
  2882  00110E  C106  F0C3         	movff	sortBattery@pos_v_counter+1,?_printf+6
  2883  001112  EC09  F000         	call	_printf	;wreg free
  2884                           
  2885                           ;main.c: 256: switch(signal){
  2886  001116  D09A               	goto	l7534
  2887  001118                     l7500:
  2888                           
  2889                           ;main.c: 258: if(V_float < 0.1){
  2890  001118  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  2891  00111C  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2892  001120  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2893  001124  0ECD               	movlw	205
  2894  001126  6E32               	movwf	___ftge@ff2,c
  2895  001128  0ECC               	movlw	204
  2896  00112A  6E33               	movwf	___ftge@ff2+1,c
  2897  00112C  0E3D               	movlw	61
  2898  00112E  6E34               	movwf	___ftge@ff2+2,c
  2899  001130  EC7D  F019         	call	___ftge	;wreg free
  2900  001134  B0D8               	btfsc	status,0,c
  2901  001136  D02E               	goto	l7512
  2902                           
  2903                           ;main.c: 259: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2904  001138  C0F1  F02F         	movff	_V_LIM_AA,___ftge@ff1
  2905  00113C  C0F2  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2906  001140  C0F3  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2907  001144  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  2908  001148  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  2909  00114C  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  2910  001150  EC7D  F019         	call	___ftge	;wreg free
  2911  001154  B0D8               	btfsc	status,0,c
  2912  001156  D008               	goto	l177
  2913  001158  C147  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2914  00115C  C148  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2915  001160  0101               	movlb	1	; () banked
  2916  001162  4B73               	infsnz	_n_AA& (0+255),f,b
  2917  001164  2B74               	incf	(_n_AA+1)& (0+255),f,b
  2918  001166  D007               	goto	l7510
  2919  001168                     l177:
  2920                           
  2921                           ;main.c: 260: else { targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2922  001168  C0F9  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2923  00116C  C0FA  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2924  001170  0101               	movlb	1	; () banked
  2925  001172  4B77               	infsnz	_n_OTHER& (0+255),f,b
  2926  001174  2B78               	incf	(_n_OTHER+1)& (0+255),f,b
  2927  001176                     l7510:
  2928                           
  2929                           ; BSR set to: 1
  2930                           ;main.c: 261: printf("AA lim: %f",V_LIM_AA);
  2931  001176  0ECF               	movlw	low STR_5
  2932  001178  0100               	movlb	0	; () banked
  2933  00117A  6FBD               	movwf	printf@f& (0+255),b
  2934  00117C  0EFF               	movlw	high STR_5
  2935  00117E  0100               	movlb	0	; () banked
  2936  001180  6FBE               	movwf	(printf@f+1)& (0+255),b
  2937  001182  C0F1  F0BF         	movff	_V_LIM_AA,?_printf+2
  2938  001186  C0F2  F0C0         	movff	_V_LIM_AA+1,?_printf+3
  2939  00118A  C0F3  F0C1         	movff	_V_LIM_AA+2,?_printf+4
  2940  00118E  EC09  F000         	call	_printf	;wreg free
  2941                           
  2942                           ;main.c: 262: break;
  2943  001192  D070               	goto	l7536
  2944  001194                     l7512:
  2945                           
  2946                           ;main.c: 266: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2947  001194  C04E  F02F         	movff	_V_LIM_9V,___ftge@ff1
  2948  001198  C04F  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2949  00119C  C050  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2950  0011A0  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  2951  0011A4  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  2952  0011A8  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  2953  0011AC  EC7D  F019         	call	___ftge	;wreg free
  2954  0011B0  B0D8               	btfsc	status,0,c
  2955  0011B2  D008               	goto	l181
  2956  0011B4  C055  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2957  0011B8  C056  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2958  0011BC  0101               	movlb	1	; () banked
  2959  0011BE  4B71               	infsnz	_n_9V& (0+255),f,b
  2960  0011C0  2B72               	incf	(_n_9V+1)& (0+255),f,b
  2961  0011C2  D007               	goto	l7520
  2962  0011C4                     l181:
  2963                           
  2964                           ;main.c: 267: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2965  0011C4  C0F9  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2966  0011C8  C0FA  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2967  0011CC  0101               	movlb	1	; () banked
  2968  0011CE  4B77               	infsnz	_n_OTHER& (0+255),f,b
  2969  0011D0  2B78               	incf	(_n_OTHER+1)& (0+255),f,b
  2970  0011D2                     l7520:
  2971                           
  2972                           ; BSR set to: 1
  2973                           ;main.c: 268: printf("9V lim: %f",V_LIM_9V);
  2974  0011D2  0EDA               	movlw	low STR_6
  2975  0011D4  0100               	movlb	0	; () banked
  2976  0011D6  6FBD               	movwf	printf@f& (0+255),b
  2977  0011D8  0EFF               	movlw	high STR_6
  2978  0011DA  0100               	movlb	0	; () banked
  2979  0011DC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2980  0011DE  C04E  F0BF         	movff	_V_LIM_9V,?_printf+2
  2981  0011E2  C04F  F0C0         	movff	_V_LIM_9V+1,?_printf+3
  2982  0011E6  C050  F0C1         	movff	_V_LIM_9V+2,?_printf+4
  2983  0011EA  EC09  F000         	call	_printf	;wreg free
  2984                           
  2985                           ;main.c: 269: break;
  2986  0011EE  D042               	goto	l7536
  2987  0011F0                     l7522:
  2988                           
  2989                           ;main.c: 271: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2990  0011F0  C0F4  F02F         	movff	_V_LIM_C,___ftge@ff1
  2991  0011F4  C0F5  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  2992  0011F8  C0F6  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  2993  0011FC  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  2994  001200  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  2995  001204  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  2996  001208  EC7D  F019         	call	___ftge	;wreg free
  2997  00120C  B0D8               	btfsc	status,0,c
  2998  00120E  D008               	goto	l184
  2999  001210  C057  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  3000  001214  C058  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  3001  001218  0101               	movlb	1	; () banked
  3002  00121A  4B75               	infsnz	_n_C& (0+255),f,b
  3003  00121C  2B76               	incf	(_n_C+1)& (0+255),f,b
  3004  00121E  D007               	goto	l7530
  3005  001220                     l184:
  3006                           
  3007                           ;main.c: 272: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3008  001220  C0F9  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3009  001224  C0FA  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3010  001228  0101               	movlb	1	; () banked
  3011  00122A  4B77               	infsnz	_n_OTHER& (0+255),f,b
  3012  00122C  2B78               	incf	(_n_OTHER+1)& (0+255),f,b
  3013  00122E                     l7530:
  3014                           
  3015                           ; BSR set to: 1
  3016                           ;main.c: 273: printf("C  lim: %f",V_LIM_C);
  3017  00122E  0EC4               	movlw	low STR_7
  3018  001230  0100               	movlb	0	; () banked
  3019  001232  6FBD               	movwf	printf@f& (0+255),b
  3020  001234  0EFF               	movlw	high STR_7
  3021  001236  0100               	movlb	0	; () banked
  3022  001238  6FBE               	movwf	(printf@f+1)& (0+255),b
  3023  00123A  C0F4  F0BF         	movff	_V_LIM_C,?_printf+2
  3024  00123E  C0F5  F0C0         	movff	_V_LIM_C+1,?_printf+3
  3025  001242  C0F6  F0C1         	movff	_V_LIM_C+2,?_printf+4
  3026  001246  EC09  F000         	call	_printf	;wreg free
  3027                           
  3028                           ;main.c: 275: }
  3029                           
  3030                           ;main.c: 274: break;
  3031  00124A  D014               	goto	l7536
  3032  00124C                     l7534:
  3033  00124C  C107  F0EB         	movff	sortBattery@signal,??_sortBattery
  3034  001250  C108  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  3035                           
  3036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3037                           ; Switch size 1, requested type "space"
  3038                           ; Number of cases is 1, Range of values is 0 to 0
  3039                           ; switch strategies available:
  3040                           ; Name         Instructions Cycles
  3041                           ; simple_byte            4     3 (average)
  3042                           ;	Chosen strategy is simple_byte
  3043  001254  0100               	movlb	0	; () banked
  3044  001256  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  3045  001258  0A00               	xorlw	0	; case 0
  3046  00125A  A4D8               	btfss	status,2,c
  3047  00125C  D00B               	goto	l7536
  3048                           
  3049                           ; BSR set to: 0
  3050                           ; Switch size 1, requested type "space"
  3051                           ; Number of cases is 3, Range of values is 0 to 2
  3052                           ; switch strategies available:
  3053                           ; Name         Instructions Cycles
  3054                           ; simple_byte           10     6 (average)
  3055                           ;	Chosen strategy is simple_byte
  3056  00125E  0100               	movlb	0	; () banked
  3057  001260  51EB               	movf	??_sortBattery& (0+255),w,b
  3058  001262  0A00               	xorlw	0	; case 0
  3059  001264  B4D8               	btfsc	status,2,c
  3060  001266  D758               	goto	l7500
  3061  001268  0A01               	xorlw	1	; case 1
  3062  00126A  B4D8               	btfsc	status,2,c
  3063  00126C  D7C1               	goto	l7522
  3064  00126E  0A03               	xorlw	3	; case 2
  3065  001270  B4D8               	btfsc	status,2,c
  3066  001272  D790               	goto	l7512
  3067  001274                     l7536:
  3068                           
  3069                           ;main.c: 278: readKeypad();
  3070  001274  EC4E  F01E         	call	_readKeypad	;wreg free
  3071                           
  3072                           ;main.c: 279: setAngle(redirectingServo, targetAngle);
  3073  001278  0E5F               	movlw	low _redirectingServo
  3074  00127A  0100               	movlb	0	; () banked
  3075  00127C  6FD4               	movwf	setAngle@motor& (0+255),b
  3076  00127E  0E01               	movlw	high _redirectingServo
  3077  001280  0100               	movlb	0	; () banked
  3078  001282  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3079  001284  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  3080  001288  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3081  00128C  EC24  F016         	call	_setAngle	;wreg free
  3082                           
  3083                           ;main.c: 280: _delay((unsigned long)((500)*(10000000/4000.0)));
  3084  001290  0E07               	movlw	7
  3085  001292  0100               	movlb	0	; () banked
  3086  001294  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3087  001296  0E58               	movlw	88
  3088  001298  0100               	movlb	0	; () banked
  3089  00129A  6FEB               	movwf	??_sortBattery& (0+255),b
  3090  00129C  0E59               	movlw	89
  3091  00129E                     u8027:
  3092  00129E  2EE8               	decfsz	wreg,f,c
  3093  0012A0  D7FE               	bra	u8027
  3094  0012A2  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3095  0012A4  D7FC               	bra	u8027
  3096  0012A6  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3097  0012A8  D7FA               	bra	u8027
  3098  0012AA  D000               	nop2	
  3099                           
  3100                           ;main.c: 284: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3101  0012AC  C0F7  F112         	movff	_padAngle_CLOSE,sortBattery@i_249
  3102  0012B0  C0F8  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_249+1
  3103  0012B4  D018               	goto	l7550
  3104  0012B6                     l7544:
  3105                           
  3106                           ;main.c: 285: setAngle(padServo, i);
  3107  0012B6  0E5B               	movlw	low _padServo
  3108  0012B8  0100               	movlb	0	; () banked
  3109  0012BA  6FD4               	movwf	setAngle@motor& (0+255),b
  3110  0012BC  0E01               	movlw	high _padServo
  3111  0012BE  0100               	movlb	0	; () banked
  3112  0012C0  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3113  0012C2  C112  F0D6         	movff	sortBattery@i_249,setAngle@angle
  3114  0012C6  C113  F0D7         	movff	sortBattery@i_249+1,setAngle@angle+1
  3115  0012CA  EC24  F016         	call	_setAngle	;wreg free
  3116                           
  3117                           ;main.c: 286: _delay((unsigned long)((3)*(10000000/4000.0)));
  3118  0012CE  0E0A               	movlw	10
  3119  0012D0  0100               	movlb	0	; () banked
  3120  0012D2  6FEB               	movwf	??_sortBattery& (0+255),b
  3121  0012D4  0EBC               	movlw	188
  3122  0012D6                     u8037:
  3123  0012D6  2EE8               	decfsz	wreg,f,c
  3124  0012D8  D7FE               	bra	u8037
  3125  0012DA  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3126  0012DC  D7FC               	bra	u8037
  3127  0012DE  F000               	nop	
  3128  0012E0  0101               	movlb	1	; () banked
  3129  0012E2  4B12               	infsnz	sortBattery@i_249& (0+255),f,b
  3130  0012E4  2B13               	incf	(sortBattery@i_249+1)& (0+255),f,b
  3131  0012E6                     l7550:
  3132  0012E6  5053               	movf	_padAngle_OPEN,w,c
  3133  0012E8  0101               	movlb	1	; () banked
  3134  0012EA  5D12               	subwf	sortBattery@i_249& (0+255),w,b
  3135  0012EC  0101               	movlb	1	; () banked
  3136  0012EE  5113               	movf	(sortBattery@i_249+1)& (0+255),w,b
  3137  0012F0  0A80               	xorlw	128
  3138  0012F2  0100               	movlb	0	; () banked
  3139  0012F4  6FEB               	movwf	??_sortBattery& (0+255),b
  3140  0012F6  5054               	movf	_padAngle_OPEN+1,w,c
  3141  0012F8  0A80               	xorlw	128
  3142  0012FA  0100               	movlb	0	; () banked
  3143  0012FC  59EB               	subwfb	??_sortBattery& (0+255),w,b
  3144  0012FE  A0D8               	btfss	status,0,c
  3145  001300  D7DA               	goto	l7544
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;main.c: 287: }
  3149                           ;main.c: 289: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3150                           
  3151                           ; BSR set to: 0
  3152  001302  0E0D               	movlw	13
  3153  001304  0100               	movlb	0	; () banked
  3154  001306  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3155  001308  0EAF               	movlw	175
  3156  00130A  0100               	movlb	0	; () banked
  3157  00130C  6FEB               	movwf	??_sortBattery& (0+255),b
  3158  00130E  0EB6               	movlw	182
  3159  001310                     u8047:
  3160  001310  2EE8               	decfsz	wreg,f,c
  3161  001312  D7FE               	bra	u8047
  3162  001314  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3163  001316  D7FC               	bra	u8047
  3164  001318  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3165  00131A  D7FA               	bra	u8047
  3166  00131C  F000               	nop	
  3167                           
  3168                           ;main.c: 293: setAngle(padServo, padAngle_NEUTRAL);
  3169  00131E  0E5B               	movlw	low _padServo
  3170  001320  0100               	movlb	0	; () banked
  3171  001322  6FD4               	movwf	setAngle@motor& (0+255),b
  3172  001324  0E01               	movlw	high _padServo
  3173  001326  0100               	movlb	0	; () banked
  3174  001328  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3175  00132A  C145  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3176  00132E  C146  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3177  001332  EC24  F016         	call	_setAngle	;wreg free
  3178                           
  3179                           ;main.c: 297: setAngle(conveyorServo, 130);
  3180  001336  0E4B               	movlw	low _conveyorServo
  3181  001338  0100               	movlb	0	; () banked
  3182  00133A  6FD4               	movwf	setAngle@motor& (0+255),b
  3183  00133C  0E01               	movlw	high _conveyorServo
  3184  00133E  0100               	movlb	0	; () banked
  3185  001340  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3186  001342  0E00               	movlw	0
  3187  001344  0100               	movlb	0	; () banked
  3188  001346  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3189  001348  0E82               	movlw	130
  3190  00134A  6FD6               	movwf	setAngle@angle& (0+255),b
  3191  00134C  EC24  F016         	call	_setAngle	;wreg free
  3192                           
  3193                           ;main.c: 298: digitalWrite(cylinderMotor, 1);
  3194  001350  0E4F               	movlw	low _cylinderMotor
  3195  001352  6E23               	movwf	digitalWrite@pin,c
  3196  001354  0E01               	movlw	high _cylinderMotor
  3197  001356  6E24               	movwf	digitalWrite@pin+1,c
  3198  001358  0E00               	movlw	0
  3199  00135A  6E26               	movwf	digitalWrite@val+1,c
  3200  00135C  0E01               	movlw	1
  3201  00135E  6E25               	movwf	digitalWrite@val,c
  3202  001360  EC5C  F017         	call	_digitalWrite	;wreg free
  3203  001364  0012               	return		;funcret
  3204  001366                     __end_of_sortBattery:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           postinc0	equ	0xFEE
  3211                           wreg	equ	0xFE8
  3212                           postdec1	equ	0xFE5
  3213                           fsr1l	equ	0xFE1
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function _digitalWrite *****************
  3217 ;; Defined at:
  3218 ;;		line 53 in file "iopin.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  pin             2   34[COMRAM] PTR int 
  3221 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
  3222 ;;		 -> cylinderMotor(4), 
  3223 ;;  val             2   36[COMRAM] int 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  p               2   41[COMRAM] int 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3235 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;Total ram usage:        9 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    3
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_main
  3246 ;;		_sortBattery
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text2
  3251  002EB8                     __ptext2:
  3252                           	opt stack 0
  3253  002EB8                     _digitalWrite:
  3254                           	opt stack 26
  3255                           
  3256                           ;iopin.c: 54: if(pin){
  3257                           
  3258                           ;incstack = 0
  3259  002EB8  5023               	movf	digitalWrite@pin,w,c
  3260  002EBA  1024               	iorwf	digitalWrite@pin+1,w,c
  3261  002EBC  B4D8               	btfsc	status,2,c
  3262  002EBE  0012               	return	
  3263                           
  3264                           ;iopin.c: 55: int p = 1 << pin[1];
  3265  002EC0  EE20 F002          	lfsr	2,2
  3266  002EC4  5023               	movf	digitalWrite@pin,w,c
  3267  002EC6  26D9               	addwf	fsr2l,f,c
  3268  002EC8  5024               	movf	digitalWrite@pin+1,w,c
  3269  002ECA  22DA               	addwfc	fsr2h,f,c
  3270  002ECC  50DF               	movf	indf2,w,c
  3271  002ECE  6E27               	movwf	??_digitalWrite& (0+255),c
  3272  002ED0  0E01               	movlw	1
  3273  002ED2  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3274  002ED4  0E00               	movlw	0
  3275  002ED6  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3276  002ED8  2A27               	incf	??_digitalWrite,f,c
  3277  002EDA  D003               	goto	u7354
  3278  002EDC                     u7355:
  3279  002EDC  90D8               	bcf	status,0,c
  3280  002EDE  3628               	rlcf	??_digitalWrite+1,f,c
  3281  002EE0  3629               	rlcf	??_digitalWrite+2,f,c
  3282  002EE2                     u7354:
  3283  002EE2  2E27               	decfsz	??_digitalWrite,f,c
  3284  002EE4  D7FB               	goto	u7355
  3285  002EE6  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3286  002EEA  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3287                           
  3288                           ;iopin.c: 56: if(val == 0){
  3289  002EEE  5025               	movf	digitalWrite@val,w,c
  3290  002EF0  1026               	iorwf	digitalWrite@val+1,w,c
  3291  002EF2  A4D8               	btfss	status,2,c
  3292  002EF4  D02B               	goto	l7150
  3293                           
  3294                           ;iopin.c: 57: p ^= 0xff;
  3295  002EF6  0EFF               	movlw	255
  3296  002EF8  1A2A               	xorwf	digitalWrite@p,f,c
  3297                           
  3298                           ;iopin.c: 58: }
  3299                           ;iopin.c: 60: switch(pin[0]){
  3300  002EFA  D028               	goto	l7150
  3301  002EFC                     l7126:
  3302  002EFC  0425               	decf	digitalWrite@val,w,c
  3303  002EFE  1026               	iorwf	digitalWrite@val+1,w,c
  3304  002F00  A4D8               	btfss	status,2,c
  3305  002F02  D003               	goto	l7130
  3306  002F04  502A               	movf	digitalWrite@p,w,c
  3307  002F06  1289               	iorwf	3977,f,c	;volatile
  3308  002F08  0012               	return	
  3309  002F0A                     l7130:
  3310                           
  3311                           ;iopin.c: 62: else LATA &= p;
  3312  002F0A  502A               	movf	digitalWrite@p,w,c
  3313  002F0C  1689               	andwf	3977,f,c	;volatile
  3314                           
  3315                           ;iopin.c: 63: break;
  3316  002F0E  0012               	return	
  3317  002F10                     l7132:
  3318  002F10  0425               	decf	digitalWrite@val,w,c
  3319  002F12  1026               	iorwf	digitalWrite@val+1,w,c
  3320  002F14  A4D8               	btfss	status,2,c
  3321  002F16  D003               	goto	l7136
  3322  002F18  502A               	movf	digitalWrite@p,w,c
  3323  002F1A  128A               	iorwf	3978,f,c	;volatile
  3324  002F1C  0012               	return	
  3325  002F1E                     l7136:
  3326                           
  3327                           ;iopin.c: 65: else LATB &= p;
  3328  002F1E  502A               	movf	digitalWrite@p,w,c
  3329  002F20  168A               	andwf	3978,f,c	;volatile
  3330                           
  3331                           ;iopin.c: 66: break;
  3332  002F22  0012               	return	
  3333  002F24                     l7138:
  3334  002F24  0425               	decf	digitalWrite@val,w,c
  3335  002F26  1026               	iorwf	digitalWrite@val+1,w,c
  3336  002F28  A4D8               	btfss	status,2,c
  3337  002F2A  D003               	goto	l7142
  3338  002F2C  502A               	movf	digitalWrite@p,w,c
  3339  002F2E  128B               	iorwf	3979,f,c	;volatile
  3340  002F30  0012               	return	
  3341  002F32                     l7142:
  3342                           
  3343                           ;iopin.c: 68: else LATC &= p;
  3344  002F32  502A               	movf	digitalWrite@p,w,c
  3345  002F34  168B               	andwf	3979,f,c	;volatile
  3346                           
  3347                           ;iopin.c: 69: break;
  3348  002F36  0012               	return	
  3349  002F38                     l7144:
  3350  002F38  0425               	decf	digitalWrite@val,w,c
  3351  002F3A  1026               	iorwf	digitalWrite@val+1,w,c
  3352  002F3C  A4D8               	btfss	status,2,c
  3353  002F3E  D003               	goto	l7148
  3354  002F40  502A               	movf	digitalWrite@p,w,c
  3355  002F42  128C               	iorwf	3980,f,c	;volatile
  3356  002F44  0012               	return	
  3357  002F46                     l7148:
  3358                           
  3359                           ;iopin.c: 71: else LATD &= p;
  3360  002F46  502A               	movf	digitalWrite@p,w,c
  3361  002F48  168C               	andwf	3980,f,c	;volatile
  3362                           
  3363                           ;iopin.c: 72: }
  3364  002F4A  0012               	return	
  3365  002F4C                     l7150:
  3366  002F4C  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3367  002F50  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3368  002F54  CFDE F027          	movff	postinc2,??_digitalWrite
  3369  002F58  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3370                           
  3371                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3372                           ; Switch size 1, requested type "space"
  3373                           ; Number of cases is 1, Range of values is 0 to 0
  3374                           ; switch strategies available:
  3375                           ; Name         Instructions Cycles
  3376                           ; simple_byte            4     3 (average)
  3377                           ;	Chosen strategy is simple_byte
  3378  002F5C  5028               	movf	??_digitalWrite+1,w,c
  3379  002F5E  0A00               	xorlw	0	; case 0
  3380  002F60  A4D8               	btfss	status,2,c
  3381  002F62  0012               	return	
  3382                           
  3383                           ; Switch size 1, requested type "space"
  3384                           ; Number of cases is 4, Range of values is 0 to 3
  3385                           ; switch strategies available:
  3386                           ; Name         Instructions Cycles
  3387                           ; simple_byte           13     7 (average)
  3388                           ;	Chosen strategy is simple_byte
  3389  002F64  5027               	movf	??_digitalWrite,w,c
  3390  002F66  0A00               	xorlw	0	; case 0
  3391  002F68  B4D8               	btfsc	status,2,c
  3392  002F6A  D7C8               	goto	l7126
  3393  002F6C  0A01               	xorlw	1	; case 1
  3394  002F6E  B4D8               	btfsc	status,2,c
  3395  002F70  D7CF               	goto	l7132
  3396  002F72  0A03               	xorlw	3	; case 2
  3397  002F74  B4D8               	btfsc	status,2,c
  3398  002F76  D7D6               	goto	l7138
  3399  002F78  0A01               	xorlw	1	; case 3
  3400  002F7A  A4D8               	btfss	status,2,c
  3401  002F7C  0012               	return	
  3402  002F7E  D7DC               	goto	l7144
  3403  002F80                     __end_of_digitalWrite:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           postinc0	equ	0xFEE
  3410                           wreg	equ	0xFE8
  3411                           postdec1	equ	0xFE5
  3412                           fsr1l	equ	0xFE1
  3413                           indf2	equ	0xFDF
  3414                           postinc2	equ	0xFDE
  3415                           postdec2	equ	0xFDD
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _digitalRead *****************
  3421 ;; Defined at:
  3422 ;;		line 43 in file "iopin.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;  pin             2   34[COMRAM] PTR int 
  3425 ;;		 -> padPin2(4), padPin1(4), 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  2   34[COMRAM] int 
  3430 ;; Registers used:
  3431 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;Total ram usage:        4 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    3
  3444 ;; This function calls:
  3445 ;;		Nothing
  3446 ;; This function is called by:
  3447 ;;		_sortBattery
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text3
  3452  0028B0                     __ptext3:
  3453                           	opt stack 0
  3454  0028B0                     _digitalRead:
  3455                           	opt stack 26
  3456                           
  3457                           ;iopin.c: 44: switch(pin[0]){
  3458                           
  3459                           ;incstack = 0
  3460  0028B0  D058               	goto	l7232
  3461  0028B2                     l7214:
  3462  0028B2  EE20 F002          	lfsr	2,2
  3463  0028B6  5023               	movf	digitalRead@pin,w,c
  3464  0028B8  26D9               	addwf	fsr2l,f,c
  3465  0028BA  5024               	movf	digitalRead@pin+1,w,c
  3466  0028BC  22DA               	addwfc	fsr2h,f,c
  3467  0028BE  50DF               	movf	indf2,w,c
  3468  0028C0  6E25               	movwf	??_digitalRead& (0+255),c
  3469  0028C2  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3470  0028C6  2A25               	incf	??_digitalRead,f,c
  3471  0028C8  D002               	goto	u7474
  3472  0028CA                     u7475:
  3473  0028CA  90D8               	bcf	status,0,c
  3474  0028CC  3226               	rrcf	??_digitalRead+1,f,c
  3475  0028CE                     u7474:
  3476  0028CE  2E25               	decfsz	??_digitalRead,f,c
  3477  0028D0  D7FC               	goto	u7475
  3478  0028D2  0E01               	movlw	1
  3479  0028D4  1626               	andwf	??_digitalRead+1,f,c
  3480  0028D6  5026               	movf	??_digitalRead+1,w,c
  3481  0028D8  6E23               	movwf	?_digitalRead,c
  3482  0028DA  6A24               	clrf	?_digitalRead+1,c
  3483  0028DC  0012               	return	
  3484  0028DE                     l7218:
  3485  0028DE  EE20 F002          	lfsr	2,2
  3486  0028E2  5023               	movf	digitalRead@pin,w,c
  3487  0028E4  26D9               	addwf	fsr2l,f,c
  3488  0028E6  5024               	movf	digitalRead@pin+1,w,c
  3489  0028E8  22DA               	addwfc	fsr2h,f,c
  3490  0028EA  50DF               	movf	indf2,w,c
  3491  0028EC  6E25               	movwf	??_digitalRead& (0+255),c
  3492  0028EE  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3493  0028F2  2A25               	incf	??_digitalRead,f,c
  3494  0028F4  D002               	goto	u7484
  3495  0028F6                     u7485:
  3496  0028F6  90D8               	bcf	status,0,c
  3497  0028F8  3226               	rrcf	??_digitalRead+1,f,c
  3498  0028FA                     u7484:
  3499  0028FA  2E25               	decfsz	??_digitalRead,f,c
  3500  0028FC  D7FC               	goto	u7485
  3501  0028FE  0E01               	movlw	1
  3502  002900  1626               	andwf	??_digitalRead+1,f,c
  3503  002902  5026               	movf	??_digitalRead+1,w,c
  3504  002904  6E23               	movwf	?_digitalRead,c
  3505  002906  6A24               	clrf	?_digitalRead+1,c
  3506  002908  0012               	return	
  3507  00290A                     l7222:
  3508  00290A  EE20 F002          	lfsr	2,2
  3509  00290E  5023               	movf	digitalRead@pin,w,c
  3510  002910  26D9               	addwf	fsr2l,f,c
  3511  002912  5024               	movf	digitalRead@pin+1,w,c
  3512  002914  22DA               	addwfc	fsr2h,f,c
  3513  002916  50DF               	movf	indf2,w,c
  3514  002918  6E25               	movwf	??_digitalRead& (0+255),c
  3515  00291A  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3516  00291E  2A25               	incf	??_digitalRead,f,c
  3517  002920  D002               	goto	u7494
  3518  002922                     u7495:
  3519  002922  90D8               	bcf	status,0,c
  3520  002924  3226               	rrcf	??_digitalRead+1,f,c
  3521  002926                     u7494:
  3522  002926  2E25               	decfsz	??_digitalRead,f,c
  3523  002928  D7FC               	goto	u7495
  3524  00292A  0E01               	movlw	1
  3525  00292C  1626               	andwf	??_digitalRead+1,f,c
  3526  00292E  5026               	movf	??_digitalRead+1,w,c
  3527  002930  6E23               	movwf	?_digitalRead,c
  3528  002932  6A24               	clrf	?_digitalRead+1,c
  3529  002934  0012               	return	
  3530  002936                     l7226:
  3531  002936  EE20 F002          	lfsr	2,2
  3532  00293A  5023               	movf	digitalRead@pin,w,c
  3533  00293C  26D9               	addwf	fsr2l,f,c
  3534  00293E  5024               	movf	digitalRead@pin+1,w,c
  3535  002940  22DA               	addwfc	fsr2h,f,c
  3536  002942  50DF               	movf	indf2,w,c
  3537  002944  6E25               	movwf	??_digitalRead& (0+255),c
  3538  002946  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3539  00294A  2A25               	incf	??_digitalRead,f,c
  3540  00294C  D002               	goto	u7504
  3541  00294E                     u7505:
  3542  00294E  90D8               	bcf	status,0,c
  3543  002950  3226               	rrcf	??_digitalRead+1,f,c
  3544  002952                     u7504:
  3545  002952  2E25               	decfsz	??_digitalRead,f,c
  3546  002954  D7FC               	goto	u7505
  3547  002956  0E01               	movlw	1
  3548  002958  1626               	andwf	??_digitalRead+1,f,c
  3549  00295A  5026               	movf	??_digitalRead+1,w,c
  3550  00295C  6E23               	movwf	?_digitalRead,c
  3551  00295E  6A24               	clrf	?_digitalRead+1,c
  3552  002960  0012               	return	
  3553  002962                     l7232:
  3554  002962  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3555  002966  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3556  00296A  CFDE F025          	movff	postinc2,??_digitalRead
  3557  00296E  CFDD F026          	movff	postdec2,??_digitalRead+1
  3558                           
  3559                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3560                           ; Switch size 1, requested type "space"
  3561                           ; Number of cases is 1, Range of values is 0 to 0
  3562                           ; switch strategies available:
  3563                           ; Name         Instructions Cycles
  3564                           ; simple_byte            4     3 (average)
  3565                           ;	Chosen strategy is simple_byte
  3566  002972  5026               	movf	??_digitalRead+1,w,c
  3567  002974  0A00               	xorlw	0	; case 0
  3568  002976  A4D8               	btfss	status,2,c
  3569  002978  D00D               	goto	l335
  3570                           
  3571                           ; Switch size 1, requested type "space"
  3572                           ; Number of cases is 4, Range of values is 0 to 3
  3573                           ; switch strategies available:
  3574                           ; Name         Instructions Cycles
  3575                           ; simple_byte           13     7 (average)
  3576                           ;	Chosen strategy is simple_byte
  3577  00297A  5025               	movf	??_digitalRead,w,c
  3578  00297C  0A00               	xorlw	0	; case 0
  3579  00297E  B4D8               	btfsc	status,2,c
  3580  002980  D798               	goto	l7214
  3581  002982  0A01               	xorlw	1	; case 1
  3582  002984  B4D8               	btfsc	status,2,c
  3583  002986  D7AB               	goto	l7218
  3584  002988  0A03               	xorlw	3	; case 2
  3585  00298A  B4D8               	btfsc	status,2,c
  3586  00298C  D7BE               	goto	l7222
  3587  00298E  0A01               	xorlw	1	; case 3
  3588  002990  B4D8               	btfsc	status,2,c
  3589  002992  D7D1               	goto	l7226
  3590  002994                     l335:
  3591                           
  3592                           ;iopin.c: 50: return -1;
  3593  002994  6823               	setf	?_digitalRead,c
  3594  002996  6824               	setf	?_digitalRead+1,c
  3595  002998  0012               	return		;funcret
  3596  00299A                     __end_of_digitalRead:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           postdec1	equ	0xFE5
  3605                           fsr1l	equ	0xFE1
  3606                           indf2	equ	0xFDF
  3607                           postinc2	equ	0xFDE
  3608                           postdec2	equ	0xFDD
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _analogRead *****************
  3614 ;; Defined at:
  3615 ;;		line 90 in file "iopin.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  channel         2   34[COMRAM] int 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  4   34[COMRAM] long 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;Total ram usage:        6 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    3
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_sortBattery
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text4
  3644  003BFC                     __ptext4:
  3645                           	opt stack 0
  3646  003BFC                     _analogRead:
  3647                           	opt stack 26
  3648                           
  3649                           ;iopin.c: 91: ADCON0 = channel<<2;
  3650                           
  3651                           ;incstack = 0
  3652  003BFC  4423               	rlncf	analogRead@channel,w,c
  3653  003BFE  46E8               	rlncf	wreg,f,c
  3654  003C00  0BFC               	andlw	252
  3655  003C02  6EC2               	movwf	4034,c	;volatile
  3656                           
  3657                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3658  003C04  80C2               	bsf	4034,0,c	;volatile
  3659                           
  3660                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3661  003C06  82C2               	bsf	4034,1,c	;volatile
  3662  003C08                     l360:
  3663  003C08  B2C2               	btfsc	4034,1,c	;volatile
  3664  003C0A  D7FE               	goto	l360
  3665                           
  3666                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3667  003C0C  50C3               	movf	4035,w,c	;volatile
  3668  003C0E  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3669  003C12  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3670  003C14  C027  F028         	movff	??_analogRead,??_analogRead+1
  3671  003C18  6A27               	clrf	??_analogRead,c
  3672  003C1A  2627               	addwf	??_analogRead,f,c
  3673  003C1C  0E00               	movlw	0
  3674  003C1E  2228               	addwfc	??_analogRead+1,f,c
  3675  003C20  C027  F023         	movff	??_analogRead,?_analogRead
  3676  003C24  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3677  003C28  0E00               	movlw	0
  3678  003C2A  BE24               	btfsc	?_analogRead+1,7,c
  3679  003C2C  0EFF               	movlw	-1
  3680  003C2E  6E25               	movwf	?_analogRead+2,c
  3681  003C30  6E26               	movwf	?_analogRead+3,c
  3682  003C32  0012               	return	
  3683  003C34                     __end_of_analogRead:
  3684                           	opt stack 0
  3685                           tblptru	equ	0xFF8
  3686                           tblptrh	equ	0xFF7
  3687                           tblptrl	equ	0xFF6
  3688                           tablat	equ	0xFF5
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           postdec1	equ	0xFE5
  3692                           fsr1l	equ	0xFE1
  3693                           indf2	equ	0xFDF
  3694                           postinc2	equ	0xFDE
  3695                           postdec2	equ	0xFDD
  3696                           fsr2h	equ	0xFDA
  3697                           fsr2l	equ	0xFD9
  3698                           status	equ	0xFD8
  3699                           
  3700 ;; *************** function _showInterface *****************
  3701 ;; Defined at:
  3702 ;;		line 18 in file "interface.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;  run             2   16[BANK1 ] PTR int 
  3707 ;;		 -> readPastRun@data(14), 
  3708 ;;  n               2   14[BANK1 ] int 
  3709 ;;  key             1   18[BANK1 ] unsigned char 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;Total ram usage:        7 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    9
  3726 ;; This function calls:
  3727 ;;		_initRTC
  3728 ;;		_readPastRun
  3729 ;;		_showDateTime
  3730 ;;		_showErrorMessage
  3731 ;;		_showMainMenu
  3732 ;;		_showRunMenu
  3733 ;;		_showRunSelect
  3734 ;;		_showRunStats
  3735 ;;		_showRunTime
  3736 ;; This function is called by:
  3737 ;;		_main
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text5
  3742  002D1C                     __ptext5:
  3743                           	opt stack 0
  3744  002D1C                     _showInterface:
  3745                           	opt stack 21
  3746                           
  3747                           ;interface.c: 20: initRTC();
  3748                           
  3749                           ;incstack = 0
  3750  002D1C  ECF8  F01E         	call	_initRTC	;wreg free
  3751  002D20                     l7386:
  3752                           
  3753                           ;interface.c: 23: showDateTime();
  3754  002D20  EC4C  F013         	call	_showDateTime	;wreg free
  3755  002D24                     l7388:
  3756                           
  3757                           ;interface.c: 26: key = showMainMenu();
  3758  002D24  ECFC  F01C         	call	_showMainMenu	;wreg free
  3759  002D28  0101               	movlb	1	; () banked
  3760  002D2A  6F12               	movwf	showInterface@key& (0+255),b
  3761                           
  3762                           ; BSR set to: 1
  3763                           ;interface.c: 28: if(key == 'C'){
  3764  002D2C  0E43               	movlw	67
  3765  002D2E  0101               	movlb	1	; () banked
  3766  002D30  1912               	xorwf	showInterface@key& (0+255),w,b
  3767  002D32  A4D8               	btfss	status,2,c
  3768  002D34  D050               	goto	l7418
  3769                           
  3770                           ; BSR set to: 1
  3771                           ;interface.c: 30: int n = showRunSelect();
  3772  002D36  EC16  F01C         	call	_showRunSelect	;wreg free
  3773  002D3A  0100               	movlb	0	; () banked
  3774  002D3C  6FEF               	movwf	??_showInterface& (0+255),b
  3775  002D3E  0100               	movlb	0	; () banked
  3776  002D40  51EF               	movf	??_showInterface& (0+255),w,b
  3777  002D42  0101               	movlb	1	; () banked
  3778  002D44  6F0E               	movwf	showInterface@n& (0+255),b
  3779  002D46  6B0F               	clrf	(showInterface@n+1)& (0+255),b
  3780                           
  3781                           ; BSR set to: 1
  3782                           ;interface.c: 32: if(key == '*')continue;
  3783  002D48  0E2A               	movlw	42
  3784  002D4A  0101               	movlb	1	; () banked
  3785  002D4C  1912               	xorwf	showInterface@key& (0+255),w,b
  3786  002D4E  B4D8               	btfsc	status,2,c
  3787  002D50  D7E9               	goto	l7388
  3788                           
  3789                           ; BSR set to: 1
  3790                           ;interface.c: 34: int* run = readPastRun( n - '1');
  3791                           
  3792                           ; BSR set to: 1
  3793                           
  3794                           ; BSR set to: 1
  3795  002D52  0ECF               	movlw	207
  3796  002D54  0101               	movlb	1	; () banked
  3797  002D56  250E               	addwf	showInterface@n& (0+255),w,b
  3798  002D58  0100               	movlb	0	; () banked
  3799  002D5A  6F80               	movwf	readPastRun@run& (0+255),b
  3800  002D5C  0EFF               	movlw	255
  3801  002D5E  0101               	movlb	1	; () banked
  3802  002D60  210F               	addwfc	(showInterface@n+1)& (0+255),w,b
  3803  002D62  0100               	movlb	0	; () banked
  3804  002D64  6F81               	movwf	(readPastRun@run+1)& (0+255),b
  3805  002D66  EC34  F019         	call	_readPastRun	;wreg free
  3806  002D6A  C080  F110         	movff	?_readPastRun,showInterface@run
  3807  002D6E  C081  F111         	movff	?_readPastRun+1,showInterface@run+1
  3808                           
  3809                           ;interface.c: 35: if(run[6] == 0xff){
  3810  002D72  0101               	movlb	1	; () banked
  3811  002D74  EE20 F00C          	lfsr	2,12
  3812  002D78  5110               	movf	showInterface@run& (0+255),w,b
  3813  002D7A  26D9               	addwf	fsr2l,f,c
  3814  002D7C  5111               	movf	(showInterface@run+1)& (0+255),w,b
  3815  002D7E  22DA               	addwfc	fsr2h,f,c
  3816  002D80  28DE               	incf	postinc2,w,c
  3817  002D82  10DE               	iorwf	postinc2,w,c
  3818  002D84  A4D8               	btfss	status,2,c
  3819  002D86  D003               	goto	l7404
  3820                           
  3821                           ; BSR set to: 1
  3822                           ;interface.c: 36: showErrorMessage();
  3823  002D88  EC36  F01E         	call	_showErrorMessage	;wreg free
  3824                           
  3825                           ;interface.c: 37: continue;
  3826  002D8C  D7CB               	goto	l7388
  3827  002D8E                     l7404:
  3828                           
  3829                           ;interface.c: 41: key = showRunMenu(n);
  3830  002D8E  0101               	movlb	1	; () banked
  3831  002D90  510E               	movf	showInterface@n& (0+255),w,b
  3832  002D92  EC48  F01C         	call	_showRunMenu
  3833  002D96  0101               	movlb	1	; () banked
  3834  002D98  6F12               	movwf	showInterface@key& (0+255),b
  3835                           
  3836                           ; BSR set to: 1
  3837                           ;interface.c: 43: if(key == 'A') showRunTime(run);
  3838  002D9A  0E41               	movlw	65
  3839  002D9C  0101               	movlb	1	; () banked
  3840  002D9E  1912               	xorwf	showInterface@key& (0+255),w,b
  3841  002DA0  A4D8               	btfss	status,2,c
  3842  002DA2  D007               	goto	l7410
  3843                           
  3844                           ; BSR set to: 1
  3845  002DA4  C110  F0EB         	movff	showInterface@run,showRunTime@run
  3846  002DA8  C111  F0EC         	movff	showInterface@run+1,showRunTime@run+1
  3847  002DAC  EC7B  F01B         	call	_showRunTime	;wreg free
  3848  002DB0  D7EE               	goto	l7404
  3849  002DB2                     l7410:
  3850                           
  3851                           ;interface.c: 44: else if(key == 'B') showRunStats(run);
  3852  002DB2  0E42               	movlw	66
  3853  002DB4  0101               	movlb	1	; () banked
  3854  002DB6  1912               	xorwf	showInterface@key& (0+255),w,b
  3855  002DB8  A4D8               	btfss	status,2,c
  3856  002DBA  D007               	goto	l7414
  3857                           
  3858                           ; BSR set to: 1
  3859  002DBC  C110  F0EB         	movff	showInterface@run,showRunStats@run
  3860  002DC0  C111  F0EC         	movff	showInterface@run+1,showRunStats@run+1
  3861  002DC4  EC24  F018         	call	_showRunStats	;wreg free
  3862  002DC8  D7E2               	goto	l7404
  3863  002DCA                     l7414:
  3864                           
  3865                           ;interface.c: 45: else if(key == '*') break;
  3866  002DCA  0E2A               	movlw	42
  3867  002DCC  0101               	movlb	1	; () banked
  3868  002DCE  1912               	xorwf	showInterface@key& (0+255),w,b
  3869  002DD0  B4D8               	btfsc	status,2,c
  3870  002DD2  D7A8               	goto	l7388
  3871  002DD4  D7DC               	goto	l7404
  3872  002DD6                     l7418:
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;interface.c: 49: else if(key == 'B') return;
  3876  002DD6  0E42               	movlw	66
  3877  002DD8  0101               	movlb	1	; () banked
  3878  002DDA  1912               	xorwf	showInterface@key& (0+255),w,b
  3879  002DDC  B4D8               	btfsc	status,2,c
  3880  002DDE  0012               	return	
  3881                           
  3882                           ; BSR set to: 1
  3883                           ;interface.c: 50: else if(key == '*') break;
  3884                           
  3885                           ; BSR set to: 1
  3886                           
  3887                           ; BSR set to: 1
  3888                           
  3889                           ; BSR set to: 1
  3890  002DE0  0E2A               	movlw	42
  3891  002DE2  0101               	movlb	1	; () banked
  3892  002DE4  1912               	xorwf	showInterface@key& (0+255),w,b
  3893  002DE6  B4D8               	btfsc	status,2,c
  3894  002DE8  D79B               	goto	l7386
  3895  002DEA  D79C               	goto	l7388
  3896  002DEC                     __end_of_showInterface:
  3897                           	opt stack 0
  3898                           tblptru	equ	0xFF8
  3899                           tblptrh	equ	0xFF7
  3900                           tblptrl	equ	0xFF6
  3901                           tablat	equ	0xFF5
  3902                           postinc0	equ	0xFEE
  3903                           wreg	equ	0xFE8
  3904                           postdec1	equ	0xFE5
  3905                           fsr1l	equ	0xFE1
  3906                           indf2	equ	0xFDF
  3907                           postinc2	equ	0xFDE
  3908                           postdec2	equ	0xFDD
  3909                           fsr2h	equ	0xFDA
  3910                           fsr2l	equ	0xFD9
  3911                           status	equ	0xFD8
  3912                           
  3913 ;; *************** function _showRunTime *****************
  3914 ;; Defined at:
  3915 ;;		line 108 in file "interface.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  run             2  107[BANK0 ] PTR int 
  3918 ;;		 -> readPastRun@data(14), main@run(14), 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  time            2  109[BANK0 ] int 
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      unsigned char 
  3923 ;; Registers used:
  3924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3930 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;Total ram usage:        4 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    8
  3937 ;; This function calls:
  3938 ;;		___awdiv
  3939 ;;		_lcdClear
  3940 ;;		_printf
  3941 ;;		_readKeypad
  3942 ;; This function is called by:
  3943 ;;		_main
  3944 ;;		_showInterface
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text6
  3949  0036F6                     __ptext6:
  3950                           	opt stack 0
  3951  0036F6                     _showRunTime:
  3952                           	opt stack 22
  3953                           
  3954                           ;interface.c: 109: int time = run[1];
  3955                           
  3956                           ; BSR set to: 1
  3957                           ;incstack = 0
  3958  0036F6  0100               	movlb	0	; () banked
  3959  0036F8  EE20 F002          	lfsr	2,2
  3960  0036FC  51EB               	movf	showRunTime@run& (0+255),w,b
  3961  0036FE  26D9               	addwf	fsr2l,f,c
  3962  003700  51EC               	movf	(showRunTime@run+1)& (0+255),w,b
  3963  003702  22DA               	addwfc	fsr2h,f,c
  3964  003704  CFDE F0ED          	movff	postinc2,showRunTime@time
  3965  003708  CFDD F0EE          	movff	postdec2,showRunTime@time+1
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;interface.c: 110: time/=10;
  3969  00370C  C0ED  F029         	movff	showRunTime@time,___awdiv@dividend
  3970  003710  C0EE  F02A         	movff	showRunTime@time+1,___awdiv@dividend+1
  3971  003714  0E00               	movlw	0
  3972  003716  6E2C               	movwf	___awdiv@divisor+1,c
  3973  003718  0E0A               	movlw	10
  3974  00371A  6E2B               	movwf	___awdiv@divisor,c
  3975  00371C  EC0B  F01A         	call	___awdiv	;wreg free
  3976  003720  C029  F0ED         	movff	?___awdiv,showRunTime@time
  3977  003724  C02A  F0EE         	movff	?___awdiv+1,showRunTime@time+1
  3978                           
  3979                           ;interface.c: 112: lcdClear();
  3980  003728  EC28  F01F         	call	_lcdClear	;wreg free
  3981                           
  3982                           ;interface.c: 113: printf("time: %d sec   \n",time);
  3983  00372C  0E32               	movlw	low STR_17
  3984  00372E  0100               	movlb	0	; () banked
  3985  003730  6FBD               	movwf	printf@f& (0+255),b
  3986  003732  0EFF               	movlw	high STR_17
  3987  003734  0100               	movlb	0	; () banked
  3988  003736  6FBE               	movwf	(printf@f+1)& (0+255),b
  3989  003738  C0ED  F0BF         	movff	showRunTime@time,?_printf+2
  3990  00373C  C0EE  F0C0         	movff	showRunTime@time+1,?_printf+3
  3991  003740  EC09  F000         	call	_printf	;wreg free
  3992                           
  3993                           ;interface.c: 114: printf("              *>");
  3994  003744  0E43               	movlw	low STR_18
  3995  003746  0100               	movlb	0	; () banked
  3996  003748  6FBD               	movwf	printf@f& (0+255),b
  3997  00374A  0EFF               	movlw	high STR_18
  3998  00374C  0100               	movlb	0	; () banked
  3999  00374E  6FBE               	movwf	(printf@f+1)& (0+255),b
  4000  003750  EC09  F000         	call	_printf	;wreg free
  4001  003754                     l7166:
  4002  003754  EC4E  F01E         	call	_readKeypad	;wreg free
  4003  003758  0A2A               	xorlw	42
  4004  00375A  B4D8               	btfsc	status,2,c
  4005  00375C  0012               	return	
  4006  00375E  D7FA               	goto	l7166
  4007  003760                     __end_of_showRunTime:
  4008                           	opt stack 0
  4009                           tblptru	equ	0xFF8
  4010                           tblptrh	equ	0xFF7
  4011                           tblptrl	equ	0xFF6
  4012                           tablat	equ	0xFF5
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           fsr1l	equ	0xFE1
  4017                           indf2	equ	0xFDF
  4018                           postinc2	equ	0xFDE
  4019                           postdec2	equ	0xFDD
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _showRunStats *****************
  4025 ;; Defined at:
  4026 ;;		line 119 in file "interface.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;  run             2  107[BANK0 ] PTR int 
  4029 ;;		 -> readPastRun@data(14), main@run(14), 
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;  n_OTHER         2    6[BANK1 ] int 
  4032 ;;  n_C             2    4[BANK1 ] int 
  4033 ;;  n_9V            2    2[BANK1 ] int 
  4034 ;;  n_AA            2    0[BANK1 ] int 
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      unsigned char 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4044 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Totals:         0       2       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;Total ram usage:       10 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    8
  4051 ;; This function calls:
  4052 ;;		_lcdClear
  4053 ;;		_printf
  4054 ;;		_readKeypad
  4055 ;; This function is called by:
  4056 ;;		_main
  4057 ;;		_showInterface
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text7
  4062  003048                     __ptext7:
  4063                           	opt stack 0
  4064  003048                     _showRunStats:
  4065                           	opt stack 22
  4066                           
  4067                           ;interface.c: 120: lcdClear();
  4068                           
  4069                           ;incstack = 0
  4070  003048  EC28  F01F         	call	_lcdClear	;wreg free
  4071                           
  4072                           ;interface.c: 122: int n_AA = run[2], n_9V = run[3], n_C = run[4], n_OTHER = run[5];
  4073  00304C  0100               	movlb	0	; () banked
  4074  00304E  EE20 F004          	lfsr	2,4
  4075  003052  51EB               	movf	showRunStats@run& (0+255),w,b
  4076  003054  26D9               	addwf	fsr2l,f,c
  4077  003056  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  4078  003058  22DA               	addwfc	fsr2h,f,c
  4079  00305A  CFDE F100          	movff	postinc2,showRunStats@n_AA
  4080  00305E  CFDD F101          	movff	postdec2,showRunStats@n_AA+1
  4081                           
  4082                           ; BSR set to: 0
  4083  003062  0100               	movlb	0	; () banked
  4084  003064  EE20 F006          	lfsr	2,6
  4085  003068  51EB               	movf	showRunStats@run& (0+255),w,b
  4086  00306A  26D9               	addwf	fsr2l,f,c
  4087  00306C  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  4088  00306E  22DA               	addwfc	fsr2h,f,c
  4089  003070  CFDE F102          	movff	postinc2,showRunStats@n_9V
  4090  003074  CFDD F103          	movff	postdec2,showRunStats@n_9V+1
  4091                           
  4092                           ; BSR set to: 0
  4093  003078  0100               	movlb	0	; () banked
  4094  00307A  EE20 F008          	lfsr	2,8
  4095  00307E  51EB               	movf	showRunStats@run& (0+255),w,b
  4096  003080  26D9               	addwf	fsr2l,f,c
  4097  003082  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  4098  003084  22DA               	addwfc	fsr2h,f,c
  4099  003086  CFDE F104          	movff	postinc2,showRunStats@n_C
  4100  00308A  CFDD F105          	movff	postdec2,showRunStats@n_C+1
  4101                           
  4102                           ; BSR set to: 0
  4103  00308E  0100               	movlb	0	; () banked
  4104  003090  EE20 F00A          	lfsr	2,10
  4105  003094  51EB               	movf	showRunStats@run& (0+255),w,b
  4106  003096  26D9               	addwf	fsr2l,f,c
  4107  003098  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  4108  00309A  22DA               	addwfc	fsr2h,f,c
  4109  00309C  CFDE F106          	movff	postinc2,showRunStats@n_OTHER
  4110  0030A0  CFDD F107          	movff	postdec2,showRunStats@n_OTHER+1
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;interface.c: 124: printf("[AA,9V,C,other] \n");
  4114  0030A4  0E0F               	movlw	low STR_19
  4115  0030A6  0100               	movlb	0	; () banked
  4116  0030A8  6FBD               	movwf	printf@f& (0+255),b
  4117  0030AA  0EFF               	movlw	high STR_19
  4118  0030AC  0100               	movlb	0	; () banked
  4119  0030AE  6FBE               	movwf	(printf@f+1)& (0+255),b
  4120  0030B0  EC09  F000         	call	_printf	;wreg free
  4121                           
  4122                           ;interface.c: 125: if(run)printf("[%d,%d,%d,%d]   *>",n_AA,n_9V,n_C,n_OTHER);
  4123  0030B4  0100               	movlb	0	; () banked
  4124  0030B6  51EB               	movf	showRunStats@run& (0+255),w,b
  4125  0030B8  0100               	movlb	0	; () banked
  4126  0030BA  11EC               	iorwf	(showRunStats@run+1)& (0+255),w,b
  4127  0030BC  B4D8               	btfsc	status,2,c
  4128  0030BE  D019               	goto	l7184
  4129                           
  4130                           ; BSR set to: 0
  4131  0030C0  0ED8               	movlw	low STR_20
  4132  0030C2  0100               	movlb	0	; () banked
  4133  0030C4  6FBD               	movwf	printf@f& (0+255),b
  4134  0030C6  0EFE               	movlw	high STR_20
  4135  0030C8  0100               	movlb	0	; () banked
  4136  0030CA  6FBE               	movwf	(printf@f+1)& (0+255),b
  4137  0030CC  C100  F0BF         	movff	showRunStats@n_AA,?_printf+2
  4138  0030D0  C101  F0C0         	movff	showRunStats@n_AA+1,?_printf+3
  4139  0030D4  C102  F0C1         	movff	showRunStats@n_9V,?_printf+4
  4140  0030D8  C103  F0C2         	movff	showRunStats@n_9V+1,?_printf+5
  4141  0030DC  C104  F0C3         	movff	showRunStats@n_C,?_printf+6
  4142  0030E0  C105  F0C4         	movff	showRunStats@n_C+1,?_printf+7
  4143  0030E4  C106  F0C5         	movff	showRunStats@n_OTHER,?_printf+8
  4144  0030E8  C107  F0C6         	movff	showRunStats@n_OTHER+1,?_printf+9
  4145  0030EC  EC09  F000         	call	_printf	;wreg free
  4146  0030F0  D008               	goto	l7186
  4147  0030F2                     l7184:
  4148                           
  4149                           ;interface.c: 126: else printf("[na,na,na,na]   *>");
  4150  0030F2  0EC5               	movlw	low STR_21
  4151  0030F4  0100               	movlb	0	; () banked
  4152  0030F6  6FBD               	movwf	printf@f& (0+255),b
  4153  0030F8  0EFE               	movlw	high STR_21
  4154  0030FA  0100               	movlb	0	; () banked
  4155  0030FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  4156  0030FE  EC09  F000         	call	_printf	;wreg free
  4157  003102                     l7186:
  4158  003102  EC4E  F01E         	call	_readKeypad	;wreg free
  4159  003106  0A2A               	xorlw	42
  4160  003108  B4D8               	btfsc	status,2,c
  4161  00310A  0012               	return	
  4162  00310C  D7FA               	goto	l7186
  4163  00310E                     __end_of_showRunStats:
  4164                           	opt stack 0
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           postinc0	equ	0xFEE
  4170                           wreg	equ	0xFE8
  4171                           postdec1	equ	0xFE5
  4172                           fsr1l	equ	0xFE1
  4173                           indf2	equ	0xFDF
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           fsr2h	equ	0xFDA
  4177                           fsr2l	equ	0xFD9
  4178                           status	equ	0xFD8
  4179                           
  4180 ;; *************** function _showRunSelect *****************
  4181 ;; Defined at:
  4182 ;;		line 86 in file "interface.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;  k               1  107[BANK0 ] unsigned char 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      unsigned char 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;Total ram usage:        1 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    8
  4203 ;; This function calls:
  4204 ;;		_lcdClear
  4205 ;;		_printf
  4206 ;;		_readKeypad
  4207 ;; This function is called by:
  4208 ;;		_showInterface
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           	psect	text8
  4213  00382C                     __ptext8:
  4214                           	opt stack 0
  4215  00382C                     _showRunSelect:
  4216                           	opt stack 21
  4217                           
  4218                           ;interface.c: 87: lcdClear();
  4219                           
  4220                           ;incstack = 0
  4221  00382C  EC28  F01F         	call	_lcdClear	;wreg free
  4222                           
  4223                           ;interface.c: 88: printf("select run:     \n");
  4224  003830  0EFD               	movlw	low STR_13
  4225  003832  0100               	movlb	0	; () banked
  4226  003834  6FBD               	movwf	printf@f& (0+255),b
  4227  003836  0EFE               	movlw	high STR_13
  4228  003838  0100               	movlb	0	; () banked
  4229  00383A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4230  00383C  EC09  F000         	call	_printf	;wreg free
  4231                           
  4232                           ;interface.c: 89: printf("[1,2,3,4]     *>");
  4233  003840  0E54               	movlw	low STR_14
  4234  003842  0100               	movlb	0	; () banked
  4235  003844  6FBD               	movwf	printf@f& (0+255),b
  4236  003846  0EFF               	movlw	high STR_14
  4237  003848  0100               	movlb	0	; () banked
  4238  00384A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4239  00384C  EC09  F000         	call	_printf	;wreg free
  4240  003850                     l7328:
  4241  003850  EC4E  F01E         	call	_readKeypad	;wreg free
  4242  003854  0100               	movlb	0	; () banked
  4243  003856  6FEB               	movwf	showRunSelect@k& (0+255),b
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;interface.c: 93: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  4247  003858  0E31               	movlw	49
  4248  00385A  0100               	movlb	0	; () banked
  4249  00385C  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4250  00385E  B4D8               	btfsc	status,2,c
  4251  003860  D014               	goto	l7340
  4252                           
  4253                           ; BSR set to: 0
  4254  003862  0E32               	movlw	50
  4255  003864  0100               	movlb	0	; () banked
  4256  003866  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4257  003868  B4D8               	btfsc	status,2,c
  4258  00386A  D00F               	goto	l7340
  4259                           
  4260                           ; BSR set to: 0
  4261  00386C  0E33               	movlw	51
  4262  00386E  0100               	movlb	0	; () banked
  4263  003870  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4264  003872  B4D8               	btfsc	status,2,c
  4265  003874  D00A               	goto	l7340
  4266                           
  4267                           ; BSR set to: 0
  4268  003876  0E34               	movlw	52
  4269  003878  0100               	movlb	0	; () banked
  4270  00387A  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4271  00387C  B4D8               	btfsc	status,2,c
  4272  00387E  D005               	goto	l7340
  4273                           
  4274                           ; BSR set to: 0
  4275  003880  0E2A               	movlw	42
  4276  003882  0100               	movlb	0	; () banked
  4277  003884  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4278  003886  A4D8               	btfss	status,2,c
  4279  003888  D7E3               	goto	l7328
  4280  00388A                     l7340:
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;interface.c: 94: return k;
  4284  00388A  0100               	movlb	0	; () banked
  4285  00388C  51EB               	movf	showRunSelect@k& (0+255),w,b
  4286  00388E  0012               	return	
  4287  003890                     __end_of_showRunSelect:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           postinc0	equ	0xFEE
  4294                           wreg	equ	0xFE8
  4295                           postdec1	equ	0xFE5
  4296                           fsr1l	equ	0xFE1
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _showRunMenu *****************
  4305 ;; Defined at:
  4306 ;;		line 97 in file "interface.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  key             1    wreg     unsigned char 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  key             1  107[BANK0 ] unsigned char 
  4311 ;;  k               1  108[BANK0 ] unsigned char 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      unsigned char 
  4314 ;; Registers used:
  4315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;Total ram usage:        2 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    8
  4328 ;; This function calls:
  4329 ;;		_lcdClear
  4330 ;;		_printf
  4331 ;;		_readKeypad
  4332 ;; This function is called by:
  4333 ;;		_showInterface
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text9
  4338  003890                     __ptext9:
  4339                           	opt stack 0
  4340  003890                     _showRunMenu:
  4341                           	opt stack 21
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;incstack = 0
  4345                           ;showRunMenu@key stored from wreg
  4346  003890  0100               	movlb	0	; () banked
  4347  003892  6FEB               	movwf	showRunMenu@key& (0+255),b
  4348                           
  4349                           ;interface.c: 98: lcdClear();
  4350  003894  EC28  F01F         	call	_lcdClear	;wreg free
  4351                           
  4352                           ;interface.c: 99: printf("%c) time  <A     \n",key);
  4353  003898  0EB2               	movlw	low STR_15
  4354  00389A  0100               	movlb	0	; () banked
  4355  00389C  6FBD               	movwf	printf@f& (0+255),b
  4356  00389E  0EFE               	movlw	high STR_15
  4357  0038A0  0100               	movlb	0	; () banked
  4358  0038A2  6FBE               	movwf	(printf@f+1)& (0+255),b
  4359  0038A4  C0EB  F0BF         	movff	showRunMenu@key,?_printf+2
  4360  0038A8  0100               	movlb	0	; () banked
  4361  0038AA  6BC0               	clrf	(?_printf+3)& (0+255),b
  4362  0038AC  EC09  F000         	call	_printf	;wreg free
  4363                           
  4364                           ;interface.c: 100: printf( "   stats <B   *>");
  4365  0038B0  0E76               	movlw	low STR_16
  4366  0038B2  0100               	movlb	0	; () banked
  4367  0038B4  6FBD               	movwf	printf@f& (0+255),b
  4368  0038B6  0EFF               	movlw	high STR_16
  4369  0038B8  0100               	movlb	0	; () banked
  4370  0038BA  6FBE               	movwf	(printf@f+1)& (0+255),b
  4371  0038BC  EC09  F000         	call	_printf	;wreg free
  4372  0038C0                     l7358:
  4373  0038C0  EC4E  F01E         	call	_readKeypad	;wreg free
  4374  0038C4  0100               	movlb	0	; () banked
  4375  0038C6  6FEC               	movwf	showRunMenu@k& (0+255),b
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;interface.c: 104: while(k != 'A' && k != 'B' && k != '*');
  4379  0038C8  0E41               	movlw	65
  4380  0038CA  0100               	movlb	0	; () banked
  4381  0038CC  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4382  0038CE  B4D8               	btfsc	status,2,c
  4383  0038D0  D00A               	goto	l7366
  4384                           
  4385                           ; BSR set to: 0
  4386  0038D2  0E42               	movlw	66
  4387  0038D4  0100               	movlb	0	; () banked
  4388  0038D6  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4389  0038D8  B4D8               	btfsc	status,2,c
  4390  0038DA  D005               	goto	l7366
  4391                           
  4392                           ; BSR set to: 0
  4393  0038DC  0E2A               	movlw	42
  4394  0038DE  0100               	movlb	0	; () banked
  4395  0038E0  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4396  0038E2  A4D8               	btfss	status,2,c
  4397  0038E4  D7ED               	goto	l7358
  4398  0038E6                     l7366:
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;interface.c: 105: return k;
  4402  0038E6  0100               	movlb	0	; () banked
  4403  0038E8  51EC               	movf	showRunMenu@k& (0+255),w,b
  4404  0038EA  0012               	return	
  4405  0038EC                     __end_of_showRunMenu:
  4406                           	opt stack 0
  4407                           tblptru	equ	0xFF8
  4408                           tblptrh	equ	0xFF7
  4409                           tblptrl	equ	0xFF6
  4410                           tablat	equ	0xFF5
  4411                           postinc0	equ	0xFEE
  4412                           wreg	equ	0xFE8
  4413                           postdec1	equ	0xFE5
  4414                           fsr1l	equ	0xFE1
  4415                           indf2	equ	0xFDF
  4416                           postinc2	equ	0xFDE
  4417                           postdec2	equ	0xFDD
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _showMainMenu *****************
  4423 ;; Defined at:
  4424 ;;		line 75 in file "interface.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  k               1  107[BANK0 ] unsigned char 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      unsigned char 
  4431 ;; Registers used:
  4432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;Total ram usage:        1 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    8
  4445 ;; This function calls:
  4446 ;;		_lcdClear
  4447 ;;		_printf
  4448 ;;		_readKeypad
  4449 ;; This function is called by:
  4450 ;;		_showInterface
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text10
  4455  0039F8                     __ptext10:
  4456                           	opt stack 0
  4457  0039F8                     _showMainMenu:
  4458                           	opt stack 21
  4459                           
  4460                           ;interface.c: 76: lcdClear();
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;incstack = 0
  4464  0039F8  EC28  F01F         	call	_lcdClear	;wreg free
  4465                           
  4466                           ;interface.c: 77: printf("start   <B      \n");
  4467  0039FC  0EEB               	movlw	low STR_11
  4468  0039FE  0100               	movlb	0	; () banked
  4469  003A00  6FBD               	movwf	printf@f& (0+255),b
  4470  003A02  0EFE               	movlw	high STR_11
  4471  003A04  0100               	movlb	0	; () banked
  4472  003A06  6FBE               	movwf	(printf@f+1)& (0+255),b
  4473  003A08  EC09  F000         	call	_printf	;wreg free
  4474                           
  4475                           ;interface.c: 78: printf("history <C    *>");
  4476  003A0C  0E65               	movlw	low STR_12
  4477  003A0E  0100               	movlb	0	; () banked
  4478  003A10  6FBD               	movwf	printf@f& (0+255),b
  4479  003A12  0EFF               	movlw	high STR_12
  4480  003A14  0100               	movlb	0	; () banked
  4481  003A16  6FBE               	movwf	(printf@f+1)& (0+255),b
  4482  003A18  EC09  F000         	call	_printf	;wreg free
  4483  003A1C                     l7310:
  4484  003A1C  EC4E  F01E         	call	_readKeypad	;wreg free
  4485  003A20  0100               	movlb	0	; () banked
  4486  003A22  6FEB               	movwf	showMainMenu@k& (0+255),b
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;interface.c: 82: while(k != 'B' && k != 'C' && k != '*');
  4490  003A24  0E42               	movlw	66
  4491  003A26  0100               	movlb	0	; () banked
  4492  003A28  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4493  003A2A  B4D8               	btfsc	status,2,c
  4494  003A2C  D00A               	goto	l7318
  4495                           
  4496                           ; BSR set to: 0
  4497  003A2E  0E43               	movlw	67
  4498  003A30  0100               	movlb	0	; () banked
  4499  003A32  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4500  003A34  B4D8               	btfsc	status,2,c
  4501  003A36  D005               	goto	l7318
  4502                           
  4503                           ; BSR set to: 0
  4504  003A38  0E2A               	movlw	42
  4505  003A3A  0100               	movlb	0	; () banked
  4506  003A3C  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4507  003A3E  A4D8               	btfss	status,2,c
  4508  003A40  D7ED               	goto	l7310
  4509  003A42                     l7318:
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;interface.c: 83: return k;
  4513  003A42  0100               	movlb	0	; () banked
  4514  003A44  51EB               	movf	showMainMenu@k& (0+255),w,b
  4515  003A46  0012               	return	
  4516  003A48                     __end_of_showMainMenu:
  4517                           	opt stack 0
  4518                           tblptru	equ	0xFF8
  4519                           tblptrh	equ	0xFF7
  4520                           tblptrl	equ	0xFF6
  4521                           tablat	equ	0xFF5
  4522                           postinc0	equ	0xFEE
  4523                           wreg	equ	0xFE8
  4524                           postdec1	equ	0xFE5
  4525                           fsr1l	equ	0xFE1
  4526                           indf2	equ	0xFDF
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _showErrorMessage *****************
  4534 ;; Defined at:
  4535 ;;		line 130 in file "interface.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;		None
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;Total ram usage:        0 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    8
  4556 ;; This function calls:
  4557 ;;		_lcdClear
  4558 ;;		_printf
  4559 ;;		_readKeypad
  4560 ;; This function is called by:
  4561 ;;		_showInterface
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text11
  4566  003C6C                     __ptext11:
  4567                           	opt stack 0
  4568  003C6C                     _showErrorMessage:
  4569                           	opt stack 21
  4570                           
  4571                           ;interface.c: 131: lcdClear();
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;incstack = 0
  4575  003C6C  EC28  F01F         	call	_lcdClear	;wreg free
  4576                           
  4577                           ;interface.c: 132: printf(" run not \n");
  4578  003C70  0EB9               	movlw	low STR_22
  4579  003C72  0100               	movlb	0	; () banked
  4580  003C74  6FBD               	movwf	printf@f& (0+255),b
  4581  003C76  0EFF               	movlw	high STR_22
  4582  003C78  0100               	movlb	0	; () banked
  4583  003C7A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4584  003C7C  EC09  F000         	call	_printf	;wreg free
  4585                           
  4586                           ;interface.c: 133: printf("  available   *>");
  4587  003C80  0E87               	movlw	low STR_23
  4588  003C82  0100               	movlb	0	; () banked
  4589  003C84  6FBD               	movwf	printf@f& (0+255),b
  4590  003C86  0EFF               	movlw	high STR_23
  4591  003C88  0100               	movlb	0	; () banked
  4592  003C8A  6FBE               	movwf	(printf@f+1)& (0+255),b
  4593  003C8C  EC09  F000         	call	_printf	;wreg free
  4594  003C90                     l7350:
  4595  003C90  EC4E  F01E         	call	_readKeypad	;wreg free
  4596  003C94  0A2A               	xorlw	42
  4597  003C96  B4D8               	btfsc	status,2,c
  4598  003C98  0012               	return	
  4599  003C9A  D7FA               	goto	l7350
  4600  003C9C                     __end_of_showErrorMessage:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           postdec1	equ	0xFE5
  4609                           fsr1l	equ	0xFE1
  4610                           indf2	equ	0xFDF
  4611                           postinc2	equ	0xFDE
  4612                           postdec2	equ	0xFDD
  4613                           fsr2h	equ	0xFDA
  4614                           fsr2l	equ	0xFD9
  4615                           status	equ	0xFD8
  4616                           
  4617 ;; *************** function _readKeypad *****************
  4618 ;; Defined at:
  4619 ;;		line 36 in file "keypad.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;  key             1   34[COMRAM] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      unsigned char 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;Total ram usage:        1 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    3
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_sortBattery
  4644 ;;		_showMainMenu
  4645 ;;		_showRunSelect
  4646 ;;		_showRunMenu
  4647 ;;		_showRunTime
  4648 ;;		_showRunStats
  4649 ;;		_showErrorMessage
  4650 ;;		_debug
  4651 ;;		_pause
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text12
  4656  003C9C                     __ptext12:
  4657                           	opt stack 0
  4658  003C9C                     _readKeypad:
  4659                           	opt stack 26
  4660  003C9C                     l262:
  4661  003C9C  A281               	btfss	3969,1,c	;volatile
  4662  003C9E  D7FE               	goto	l262
  4663                           
  4664                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4665  003CA0  3881               	swapf	3969,w,c	;volatile
  4666  003CA2  0B0F               	andlw	15
  4667  003CA4  0B0F               	andlw	15
  4668  003CA6  6E23               	movwf	readKeypad@key,c
  4669  003CA8                     l265:
  4670  003CA8  B281               	btfsc	3969,1,c	;volatile
  4671  003CAA  D7FE               	goto	l265
  4672                           
  4673                           ;keypad.c: 40: return keys[key];
  4674  003CAC  5023               	movf	readKeypad@key,w,c
  4675  003CAE  0D01               	mullw	1
  4676  003CB0  0E6F               	movlw	low _keys
  4677  003CB2  24F3               	addwf	prodl,w,c
  4678  003CB4  6EF6               	movwf	tblptrl,c
  4679  003CB6  0EFE               	movlw	high _keys
  4680  003CB8  20F4               	addwfc	prodh,w,c
  4681  003CBA  6EF7               	movwf	tblptrh,c
  4682  003CBC                     	if	0	;There are less than 3 active tblptr bytes
  4683  003CBC                     	endif
  4684  003CBC  0008               	tblrd		*
  4685  003CBE  50F5               	movf	tablat,w,c
  4686  003CC0  0012               	return	
  4687  003CC2                     __end_of_readKeypad:
  4688                           	opt stack 0
  4689                           tblptru	equ	0xFF8
  4690                           tblptrh	equ	0xFF7
  4691                           tblptrl	equ	0xFF6
  4692                           tablat	equ	0xFF5
  4693                           prodh	equ	0xFF4
  4694                           prodl	equ	0xFF3
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           fsr1l	equ	0xFE1
  4699                           indf2	equ	0xFDF
  4700                           postinc2	equ	0xFDE
  4701                           postdec2	equ	0xFDD
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _showDateTime *****************
  4707 ;; Defined at:
  4708 ;;		line 59 in file "interface.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  t               2   12[BANK1 ] PTR int 
  4713 ;;		 -> getTime@time(14), 
  4714 ;;  year            2   10[BANK1 ] int 
  4715 ;;  mon             2    8[BANK1 ] int 
  4716 ;;  day             2    6[BANK1 ] int 
  4717 ;;  hour            2    4[BANK1 ] int 
  4718 ;;  min             2    2[BANK1 ] int 
  4719 ;;  sec             2    0[BANK1 ] int 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  1    wreg      void 
  4722 ;; Registers used:
  4723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;Total ram usage:       16 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    8
  4736 ;; This function calls:
  4737 ;;		_getTime
  4738 ;;		_initRTC
  4739 ;;		_keyPressed
  4740 ;;		_lcdClear
  4741 ;;		_printf
  4742 ;; This function is called by:
  4743 ;;		_showInterface
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text13
  4748  002698                     __ptext13:
  4749                           	opt stack 0
  4750  002698                     _showDateTime:
  4751                           	opt stack 21
  4752                           
  4753                           ;interface.c: 61: initRTC();
  4754                           
  4755                           ;incstack = 0
  4756  002698  ECF8  F01E         	call	_initRTC	;wreg free
  4757                           
  4758                           ;interface.c: 63: while(keyPressed() != 'A'){
  4759  00269C  D07D               	goto	l7302
  4760  00269E                     l7280:
  4761                           
  4762                           ;interface.c: 64: int* t = getTime();
  4763  00269E  EC8E  F01A         	call	_getTime	;wreg free
  4764  0026A2  C026  F10C         	movff	?_getTime,showDateTime@t
  4765  0026A6  C027  F10D         	movff	?_getTime+1,showDateTime@t+1
  4766                           
  4767                           ;interface.c: 65: lcdClear();
  4768  0026AA  EC28  F01F         	call	_lcdClear	;wreg free
  4769                           
  4770                           ;interface.c: 66: int sec = t[0], min = t[1], hour = t[2];
  4771  0026AE  C10C  FFD9         	movff	showDateTime@t,fsr2l
  4772  0026B2  C10D  FFDA         	movff	showDateTime@t+1,fsr2h
  4773  0026B6  CFDE F100          	movff	postinc2,showDateTime@sec
  4774  0026BA  CFDD F101          	movff	postdec2,showDateTime@sec+1
  4775  0026BE  0101               	movlb	1	; () banked
  4776  0026C0  EE20 F002          	lfsr	2,2
  4777  0026C4  510C               	movf	showDateTime@t& (0+255),w,b
  4778  0026C6  26D9               	addwf	fsr2l,f,c
  4779  0026C8  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  4780  0026CA  22DA               	addwfc	fsr2h,f,c
  4781  0026CC  CFDE F102          	movff	postinc2,showDateTime@min
  4782  0026D0  CFDD F103          	movff	postdec2,showDateTime@min+1
  4783                           
  4784                           ; BSR set to: 1
  4785  0026D4  0101               	movlb	1	; () banked
  4786  0026D6  EE20 F004          	lfsr	2,4
  4787  0026DA  510C               	movf	showDateTime@t& (0+255),w,b
  4788  0026DC  26D9               	addwf	fsr2l,f,c
  4789  0026DE  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  4790  0026E0  22DA               	addwfc	fsr2h,f,c
  4791  0026E2  CFDE F104          	movff	postinc2,showDateTime@hour
  4792  0026E6  CFDD F105          	movff	postdec2,showDateTime@hour+1
  4793                           
  4794                           ; BSR set to: 1
  4795                           ;interface.c: 67: int day = t[4], mon = t[5], year = t[6];
  4796  0026EA  0101               	movlb	1	; () banked
  4797  0026EC  EE20 F008          	lfsr	2,8
  4798  0026F0  510C               	movf	showDateTime@t& (0+255),w,b
  4799  0026F2  26D9               	addwf	fsr2l,f,c
  4800  0026F4  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  4801  0026F6  22DA               	addwfc	fsr2h,f,c
  4802  0026F8  CFDE F106          	movff	postinc2,showDateTime@day
  4803  0026FC  CFDD F107          	movff	postdec2,showDateTime@day+1
  4804                           
  4805                           ; BSR set to: 1
  4806  002700  0101               	movlb	1	; () banked
  4807  002702  EE20 F00A          	lfsr	2,10
  4808  002706  510C               	movf	showDateTime@t& (0+255),w,b
  4809  002708  26D9               	addwf	fsr2l,f,c
  4810  00270A  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  4811  00270C  22DA               	addwfc	fsr2h,f,c
  4812  00270E  CFDE F108          	movff	postinc2,showDateTime@mon
  4813  002712  CFDD F109          	movff	postdec2,showDateTime@mon+1
  4814                           
  4815                           ; BSR set to: 1
  4816  002716  0101               	movlb	1	; () banked
  4817  002718  EE20 F00C          	lfsr	2,12
  4818  00271C  510C               	movf	showDateTime@t& (0+255),w,b
  4819  00271E  26D9               	addwf	fsr2l,f,c
  4820  002720  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  4821  002722  22DA               	addwfc	fsr2h,f,c
  4822  002724  CFDE F10A          	movff	postinc2,showDateTime@year
  4823  002728  CFDD F10B          	movff	postdec2,showDateTime@year+1
  4824                           
  4825                           ; BSR set to: 1
  4826                           ;interface.c: 69: printf("  20%02x/%02x/%02x\n",year,mon,day);
  4827  00272C  0E9E               	movlw	low STR_9
  4828  00272E  0100               	movlb	0	; () banked
  4829  002730  6FBD               	movwf	printf@f& (0+255),b
  4830  002732  0EFE               	movlw	high STR_9
  4831  002734  0100               	movlb	0	; () banked
  4832  002736  6FBE               	movwf	(printf@f+1)& (0+255),b
  4833  002738  C10A  F0BF         	movff	showDateTime@year,?_printf+2
  4834  00273C  C10B  F0C0         	movff	showDateTime@year+1,?_printf+3
  4835  002740  C108  F0C1         	movff	showDateTime@mon,?_printf+4
  4836  002744  C109  F0C2         	movff	showDateTime@mon+1,?_printf+5
  4837  002748  C106  F0C3         	movff	showDateTime@day,?_printf+6
  4838  00274C  C107  F0C4         	movff	showDateTime@day+1,?_printf+7
  4839  002750  EC09  F000         	call	_printf	;wreg free
  4840                           
  4841                           ;interface.c: 70: printf("   %02x:%02x:%02x   A>",hour,min,sec);
  4842  002754  0E87               	movlw	low STR_10
  4843  002756  0100               	movlb	0	; () banked
  4844  002758  6FBD               	movwf	printf@f& (0+255),b
  4845  00275A  0EFE               	movlw	high STR_10
  4846  00275C  0100               	movlb	0	; () banked
  4847  00275E  6FBE               	movwf	(printf@f+1)& (0+255),b
  4848  002760  C104  F0BF         	movff	showDateTime@hour,?_printf+2
  4849  002764  C105  F0C0         	movff	showDateTime@hour+1,?_printf+3
  4850  002768  C102  F0C1         	movff	showDateTime@min,?_printf+4
  4851  00276C  C103  F0C2         	movff	showDateTime@min+1,?_printf+5
  4852  002770  C100  F0C3         	movff	showDateTime@sec,?_printf+6
  4853  002774  C101  F0C4         	movff	showDateTime@sec+1,?_printf+7
  4854  002778  EC09  F000         	call	_printf	;wreg free
  4855                           
  4856                           ;interface.c: 71: _delay((unsigned long)((100)*(10000000/4000.0)));
  4857  00277C  0E02               	movlw	2
  4858  00277E  0100               	movlb	0	; () banked
  4859  002780  6FEC               	movwf	(??_showDateTime+1)& (0+255),b
  4860  002782  0E45               	movlw	69
  4861  002784  0100               	movlb	0	; () banked
  4862  002786  6FEB               	movwf	??_showDateTime& (0+255),b
  4863  002788  0EA9               	movlw	169
  4864  00278A                     u8057:
  4865  00278A  2EE8               	decfsz	wreg,f,c
  4866  00278C  D7FE               	bra	u8057
  4867  00278E  2FEB               	decfsz	??_showDateTime& (0+255),f,b
  4868  002790  D7FC               	bra	u8057
  4869  002792  2FEC               	decfsz	(??_showDateTime+1)& (0+255),f,b
  4870  002794  D7FA               	bra	u8057
  4871  002796  D000               	nop2	
  4872  002798                     l7302:
  4873  002798  EC14  F01F         	call	_keyPressed	;wreg free
  4874  00279C  0A41               	xorlw	65
  4875  00279E  B4D8               	btfsc	status,2,c
  4876  0027A0  0012               	return	
  4877  0027A2  D77D               	goto	l7280
  4878  0027A4                     __end_of_showDateTime:
  4879                           	opt stack 0
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           postinc0	equ	0xFEE
  4887                           wreg	equ	0xFE8
  4888                           postdec1	equ	0xFE5
  4889                           fsr1l	equ	0xFE1
  4890                           indf2	equ	0xFDF
  4891                           postinc2	equ	0xFDE
  4892                           postdec2	equ	0xFDD
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function _printf *****************
  4898 ;; Defined at:
  4899 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  4902 ;;		 -> STR_23(17), STR_22(11), STR_21(19), STR_20(19), 
  4903 ;;		 -> STR_19(18), STR_18(17), STR_17(17), STR_16(17), 
  4904 ;;		 -> STR_15(19), STR_14(17), STR_13(18), STR_12(17), 
  4905 ;;		 -> STR_11(18), STR_10(23), STR_9(20), STR_8(8), 
  4906 ;;		 -> STR_7(11), STR_6(11), STR_5(11), STR_4(16), 
  4907 ;;		 -> STR_3(17), STR_2(8), STR_1(9), 
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;  idx             1   80[BANK0 ] unsigned char 
  4910 ;;  val             4   96[BANK0 ] unsigned long 
  4911 ;;  tmpval          4   87[BANK0 ] struct .
  4912 ;;  fval            3   93[BANK0 ] struct .
  4913 ;;  prec            2  104[BANK0 ] int 
  4914 ;;  flag            2  102[BANK0 ] unsigned short 
  4915 ;;  width           2  100[BANK0 ] int 
  4916 ;;  exp             2   91[BANK0 ] int 
  4917 ;;  ap              2   85[BANK0 ] PTR void [1]
  4918 ;;		 -> ?_printf(2), 
  4919 ;;  len             2   83[BANK0 ] unsigned int 
  4920 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  4921 ;;		 -> printf@c(1), 
  4922 ;;  c               1  106[BANK0 ] char 
  4923 ;;  d               1    0        unsigned char 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  2   61[BANK0 ] int 
  4926 ;; Registers used:
  4927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4933 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;Total ram usage:       46 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    7
  4940 ;; This function calls:
  4941 ;;		___awdiv
  4942 ;;		___ftadd
  4943 ;;		___ftge
  4944 ;;		___ftmul
  4945 ;;		___ftneg
  4946 ;;		___ftsub
  4947 ;;		___fttol
  4948 ;;		___lldiv
  4949 ;;		___llmod
  4950 ;;		___lltoft
  4951 ;;		___wmul
  4952 ;;		__div_to_l_
  4953 ;;		__tdiv_to_l_
  4954 ;;		_fround
  4955 ;;		_isdigit
  4956 ;;		_putch
  4957 ;;		_scale
  4958 ;; This function is called by:
  4959 ;;		_main
  4960 ;;		_sortBattery
  4961 ;;		_showDateTime
  4962 ;;		_showMainMenu
  4963 ;;		_showRunSelect
  4964 ;;		_showRunMenu
  4965 ;;		_showRunTime
  4966 ;;		_showRunStats
  4967 ;;		_showErrorMessage
  4968 ;;		_debug
  4969 ;;		_pause
  4970 ;;		_testFrequency
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text14
  4975  000012                     __ptext14:
  4976                           	opt stack 0
  4977  000012                     _printf:
  4978                           	opt stack 22
  4979                           
  4980                           ;doprnt.c: 466: va_list ap;
  4981                           ;doprnt.c: 499: signed char c;
  4982                           ;doprnt.c: 501: int width;
  4983                           ;doprnt.c: 504: int prec;
  4984                           ;doprnt.c: 508: unsigned short flag;
  4985                           ;doprnt.c: 515: char d;
  4986                           ;doprnt.c: 516: double fval;
  4987                           ;doprnt.c: 517: int exp;
  4988                           ;doprnt.c: 523: union {
  4989                           ;doprnt.c: 524: unsigned long vd;
  4990                           ;doprnt.c: 525: double integ;
  4991                           ;doprnt.c: 526: } tmpval;
  4992                           ;doprnt.c: 528: unsigned long val;
  4993                           ;doprnt.c: 529: unsigned len;
  4994                           ;doprnt.c: 530: const char * cp;
  4995                           ;doprnt.c: 533: *ap = __va_start();
  4996                           
  4997                           ;incstack = 0
  4998  000012  0EBF               	movlw	low (?_printf+2)
  4999  000014  0100               	movlb	0	; () banked
  5000  000016  6FD5               	movwf	printf@ap& (0+255),b
  5001  000018  0E00               	movlw	high (?_printf+2)
  5002  00001A  0100               	movlb	0	; () banked
  5003  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  5004                           
  5005                           ;doprnt.c: 536: while(c = *f++) {
  5006  00001E  EFF5  F006         	goto	l7068
  5007  000022                     l6702:
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;doprnt.c: 538: if(c != '%')
  5011  000022  0E25               	movlw	37
  5012  000024  0100               	movlb	0	; () banked
  5013  000026  19EA               	xorwf	printf@c& (0+255),w,b
  5014  000028  B4D8               	btfsc	status,2,c
  5015  00002A  D006               	goto	l6706
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;doprnt.c: 540: {
  5019                           ;doprnt.c: 541: (putch(c) );
  5020  00002C  0100               	movlb	0	; () banked
  5021  00002E  51EA               	movf	printf@c& (0+255),w,b
  5022  000030  ECAA  F01E         	call	_putch
  5023                           
  5024                           ;doprnt.c: 542: continue;
  5025  000034  EFF5  F006         	goto	l7068
  5026  000038                     l6706:
  5027                           
  5028                           ;doprnt.c: 543: }
  5029                           ;doprnt.c: 546: width = 0;
  5030  000038  0E00               	movlw	0
  5031  00003A  0100               	movlb	0	; () banked
  5032  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  5033  00003E  0E00               	movlw	0
  5034  000040  6FE4               	movwf	printf@width& (0+255),b
  5035                           
  5036                           ;doprnt.c: 548: flag = 0;
  5037  000042  0E00               	movlw	0
  5038  000044  0100               	movlb	0	; () banked
  5039  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  5040  000048  0E00               	movlw	0
  5041  00004A  6FE6               	movwf	printf@flag& (0+255),b
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;doprnt.c: 551: switch(*f) {
  5045                           
  5046                           ;doprnt.c: 550: for(;;) {
  5047  00004C  D005               	goto	l6712
  5048  00004E                     l6708:
  5049                           
  5050                           ;doprnt.c: 580: flag |= 0x04;
  5051  00004E  0100               	movlb	0	; () banked
  5052  000050  85E6               	bsf	printf@flag& (0+255),2,b
  5053                           
  5054                           ;doprnt.c: 581: f++;
  5055  000052  0100               	movlb	0	; () banked
  5056  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  5057  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5058  000058                     l6712:
  5059  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  5060  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5061  000060                     	if	0	;tblptru may be non-zero
  5062  000060                     	endif
  5063  000060                     	if	0	;tblptru may be non-zero
  5064  000060                     	endif
  5065  000060  0008               	tblrd		*
  5066  000062  50F5               	movf	tablat,w,c
  5067                           
  5068                           ; Switch size 1, requested type "space"
  5069                           ; Number of cases is 1, Range of values is 48 to 48
  5070                           ; switch strategies available:
  5071                           ; Name         Instructions Cycles
  5072                           ; simple_byte            4     3 (average)
  5073                           ;	Chosen strategy is simple_byte
  5074  000064  0A30               	xorlw	48	; case 48
  5075  000066  B4D8               	btfsc	status,2,c
  5076  000068  D7F2               	goto	l6708
  5077                           
  5078                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5079                           
  5080                           ;doprnt.c: 586: }
  5081                           
  5082                           ;doprnt.c: 585: break;
  5083  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  5084  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5085  000072                     	if	0	;tblptru may be non-zero
  5086  000072                     	endif
  5087  000072                     	if	0	;tblptru may be non-zero
  5088  000072                     	endif
  5089  000072  0008               	tblrd		*
  5090  000074  50F5               	movf	tablat,w,c
  5091  000076  ECDC  F01E         	call	_isdigit
  5092  00007A  A0D8               	btfss	status,0,c
  5093  00007C  D03F               	goto	l6726
  5094                           
  5095                           ;doprnt.c: 598: width = 0;
  5096  00007E  0E00               	movlw	0
  5097  000080  0100               	movlb	0	; () banked
  5098  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  5099  000084  0E00               	movlw	0
  5100  000086  6FE4               	movwf	printf@width& (0+255),b
  5101  000088                     l6718:
  5102                           
  5103                           ;doprnt.c: 600: width *= 10;
  5104  000088  C0E4  F031         	movff	printf@width,___wmul@multiplier
  5105  00008C  C0E5  F032         	movff	printf@width+1,___wmul@multiplier+1
  5106  000090  0E00               	movlw	0
  5107  000092  6E34               	movwf	___wmul@multiplicand+1,c
  5108  000094  0E0A               	movlw	10
  5109  000096  6E33               	movwf	___wmul@multiplicand,c
  5110  000098  EC74  F01E         	call	___wmul	;wreg free
  5111  00009C  C031  F0E4         	movff	?___wmul,printf@width
  5112  0000A0  C032  F0E5         	movff	?___wmul+1,printf@width+1
  5113                           
  5114                           ;doprnt.c: 601: width += *f++ - '0';
  5115  0000A4  0ED0               	movlw	208
  5116  0000A6  0100               	movlb	0	; () banked
  5117  0000A8  6FC7               	movwf	??_printf& (0+255),b
  5118  0000AA  0EFF               	movlw	255
  5119  0000AC  0100               	movlb	0	; () banked
  5120  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  5121  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  5122  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5123  0000B8                     	if	0	;tblptru may be non-zero
  5124  0000B8                     	endif
  5125  0000B8                     	if	0	;tblptru may be non-zero
  5126  0000B8                     	endif
  5127  0000B8  0008               	tblrd		*
  5128  0000BA  50F5               	movf	tablat,w,c
  5129  0000BC  0100               	movlb	0	; () banked
  5130  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  5131  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  5132  0000C2  0100               	movlb	0	; () banked
  5133  0000C4  51C7               	movf	??_printf& (0+255),w,b
  5134  0000C6  0100               	movlb	0	; () banked
  5135  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  5136  0000CA  0100               	movlb	0	; () banked
  5137  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  5138  0000CE  0100               	movlb	0	; () banked
  5139  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  5140  0000D2  0100               	movlb	0	; () banked
  5141  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  5142  0000D6  0100               	movlb	0	; () banked
  5143  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  5144  0000DA  0100               	movlb	0	; () banked
  5145  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  5146  0000DE  0100               	movlb	0	; () banked
  5147  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  5148                           
  5149                           ; BSR set to: 0
  5150  0000E2  0100               	movlb	0	; () banked
  5151  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  5152  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5156  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  5157  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5158  0000F0                     	if	0	;tblptru may be non-zero
  5159  0000F0                     	endif
  5160  0000F0                     	if	0	;tblptru may be non-zero
  5161  0000F0                     	endif
  5162  0000F0  0008               	tblrd		*
  5163  0000F2  50F5               	movf	tablat,w,c
  5164  0000F4  ECDC  F01E         	call	_isdigit
  5165  0000F8  B0D8               	btfsc	status,0,c
  5166  0000FA  D7C6               	goto	l6718
  5167  0000FC                     l6726:
  5168                           
  5169                           ;doprnt.c: 608: }
  5170                           ;doprnt.c: 611: if(*f == '.') {
  5171  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  5172  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5173  000104                     	if	0	;tblptru may be non-zero
  5174  000104                     	endif
  5175  000104                     	if	0	;tblptru may be non-zero
  5176  000104                     	endif
  5177  000104  0008               	tblrd		*
  5178  000106  50F5               	movf	tablat,w,c
  5179  000108  0A2E               	xorlw	46
  5180  00010A  A4D8               	btfss	status,2,c
  5181  00010C  D034               	goto	l6738
  5182                           
  5183                           ;doprnt.c: 612: flag |= 0x4000;
  5184  00010E  0100               	movlb	0	; () banked
  5185  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  5186                           
  5187                           ;doprnt.c: 613: f++;
  5188  000112  0100               	movlb	0	; () banked
  5189  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  5190  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;doprnt.c: 620: {
  5194                           ;doprnt.c: 621: prec = 0;
  5195  000118  0E00               	movlw	0
  5196  00011A  0100               	movlb	0	; () banked
  5197  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5198  00011E  0E00               	movlw	0
  5199  000120  6FE8               	movwf	printf@prec& (0+255),b
  5200                           
  5201                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5202  000122  D01E               	goto	l6736
  5203  000124                     l6732:
  5204                           
  5205                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5206  000124  C0E8  F031         	movff	printf@prec,___wmul@multiplier
  5207  000128  C0E9  F032         	movff	printf@prec+1,___wmul@multiplier+1
  5208  00012C  0E00               	movlw	0
  5209  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  5210  000130  0E0A               	movlw	10
  5211  000132  6E33               	movwf	___wmul@multiplicand,c
  5212  000134  EC74  F01E         	call	___wmul	;wreg free
  5213  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  5214  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5215  000140                     	if	0	;tblptru may be non-zero
  5216  000140                     	endif
  5217  000140                     	if	0	;tblptru may be non-zero
  5218  000140                     	endif
  5219  000140  0008               	tblrd		*
  5220  000142  50F5               	movf	tablat,w,c
  5221  000144  2631               	addwf	?___wmul,f,c
  5222  000146  0E00               	movlw	0
  5223  000148  2232               	addwfc	?___wmul+1,f,c
  5224  00014A  0ED0               	movlw	208
  5225  00014C  2431               	addwf	?___wmul,w,c
  5226  00014E  0100               	movlb	0	; () banked
  5227  000150  6FE8               	movwf	printf@prec& (0+255),b
  5228  000152  0EFF               	movlw	255
  5229  000154  2032               	addwfc	?___wmul+1,w,c
  5230  000156  0100               	movlb	0	; () banked
  5231  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5232                           
  5233                           ; BSR set to: 0
  5234  00015A  0100               	movlb	0	; () banked
  5235  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  5236  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5237  000160                     l6736:
  5238                           
  5239                           ; BSR set to: 0
  5240  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  5241  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5242  000168                     	if	0	;tblptru may be non-zero
  5243  000168                     	endif
  5244  000168                     	if	0	;tblptru may be non-zero
  5245  000168                     	endif
  5246  000168  0008               	tblrd		*
  5247  00016A  50F5               	movf	tablat,w,c
  5248  00016C  ECDC  F01E         	call	_isdigit
  5249  000170  A0D8               	btfss	status,0,c
  5250  000172  D07D               	goto	l6780
  5251  000174  D7D7               	goto	l6732
  5252  000176                     l6738:
  5253                           
  5254                           ;doprnt.c: 626: prec = 0;
  5255  000176  0E00               	movlw	0
  5256  000178  0100               	movlb	0	; () banked
  5257  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5258  00017C  0E00               	movlw	0
  5259  00017E  6FE8               	movwf	printf@prec& (0+255),b
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;doprnt.c: 628: flag |= 0x1000;
  5263  000180  0100               	movlb	0	; () banked
  5264  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;doprnt.c: 635: switch(c = *f++) {
  5268                           
  5269                           ;doprnt.c: 630: }
  5270                           ;doprnt.c: 633: loop:
  5271                           
  5272                           ; BSR set to: 0
  5273  000184  D074               	goto	l6780
  5274  000186                     l6742:
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;doprnt.c: 643: flag |= 0x10;
  5278  000186  0100               	movlb	0	; () banked
  5279  000188  89E6               	bsf	printf@flag& (0+255),4,b
  5280                           
  5281                           ;doprnt.c: 644: goto loop;
  5282  00018A  D071               	goto	l6780
  5283  00018C                     l6744:
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;doprnt.c: 663: flag |= 0x400;
  5287  00018C  0100               	movlb	0	; () banked
  5288  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;doprnt.c: 698: case 'i':
  5292                           ;doprnt.c: 699: break;
  5293                           
  5294                           ; BSR set to: 0
  5295                           
  5296                           ;doprnt.c: 697: case 'd':
  5297                           
  5298                           ;doprnt.c: 664: break;
  5299  000190  D090               	goto	l6782
  5300  000192                     l6746:
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;doprnt.c: 721: flag |= 0x80;
  5304  000192  0100               	movlb	0	; () banked
  5305  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  5306                           
  5307                           ;doprnt.c: 723: break;
  5308  000196  D08D               	goto	l6782
  5309  000198                     l6748:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;doprnt.c: 753: if(prec && prec < len)
  5313  000198  0100               	movlb	0	; () banked
  5314  00019A  51E8               	movf	printf@prec& (0+255),w,b
  5315  00019C  0100               	movlb	0	; () banked
  5316  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5317  0001A0  B4D8               	btfsc	status,2,c
  5318  0001A2  D00E               	goto	l6754
  5319                           
  5320                           ; BSR set to: 0
  5321  0001A4  0100               	movlb	0	; () banked
  5322  0001A6  51D3               	movf	printf@len& (0+255),w,b
  5323  0001A8  0100               	movlb	0	; () banked
  5324  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  5325  0001AC  0100               	movlb	0	; () banked
  5326  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  5327  0001B0  0100               	movlb	0	; () banked
  5328  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  5329  0001B4  B0D8               	btfsc	status,0,c
  5330  0001B6  D004               	goto	l6754
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;doprnt.c: 754: len = prec;
  5334  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  5335  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  5336  0001C0                     l6754:
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;doprnt.c: 757: if(width > len)
  5340  0001C0  0100               	movlb	0	; () banked
  5341  0001C2  51E4               	movf	printf@width& (0+255),w,b
  5342  0001C4  0100               	movlb	0	; () banked
  5343  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  5344  0001C8  0100               	movlb	0	; () banked
  5345  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  5346  0001CC  0100               	movlb	0	; () banked
  5347  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  5348  0001D0  B0D8               	btfsc	status,0,c
  5349  0001D2  D009               	goto	l6758
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;doprnt.c: 758: width -= len;
  5353  0001D4  0100               	movlb	0	; () banked
  5354  0001D6  51D3               	movf	printf@len& (0+255),w,b
  5355  0001D8  0100               	movlb	0	; () banked
  5356  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  5357  0001DC  0100               	movlb	0	; () banked
  5358  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  5359  0001E0  0100               	movlb	0	; () banked
  5360  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  5361  0001E4  D009               	goto	l6762
  5362  0001E6                     l6758:
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;doprnt.c: 759: else
  5366                           ;doprnt.c: 760: width = 0;
  5367  0001E6  0E00               	movlw	0
  5368  0001E8  0100               	movlb	0	; () banked
  5369  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  5370  0001EC  0E00               	movlw	0
  5371  0001EE  6FE4               	movwf	printf@width& (0+255),b
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;doprnt.c: 764: while(width--)
  5375  0001F0  D003               	goto	l6762
  5376  0001F2                     l6760:
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;doprnt.c: 765: (putch(' ') );
  5380  0001F2  0E20               	movlw	32
  5381  0001F4  ECAA  F01E         	call	_putch
  5382  0001F8                     l6762:
  5383  0001F8  0100               	movlb	0	; () banked
  5384  0001FA  07E4               	decf	printf@width& (0+255),f,b
  5385  0001FC  A0D8               	btfss	status,0,c
  5386  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  5387  000200  0100               	movlb	0	; () banked
  5388  000202  29E4               	incf	printf@width& (0+255),w,b
  5389  000204  E1F6               	bnz	l6760
  5390  000206  0100               	movlb	0	; () banked
  5391  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  5392  00020A  B4D8               	btfsc	status,2,c
  5393  00020C  D00B               	goto	l6768
  5394  00020E  D7F1               	goto	l6760
  5395  000210                     l6764:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;doprnt.c: 768: (putch(*cp++) );
  5399  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  5400  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  5401  000218  50DF               	movf	indf2,w,c
  5402  00021A  ECAA  F01E         	call	_putch
  5403  00021E  0100               	movlb	0	; () banked
  5404  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  5405  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  5406  000224                     l6768:
  5407                           
  5408                           ; BSR set to: 0
  5409  000224  0100               	movlb	0	; () banked
  5410  000226  07D3               	decf	printf@len& (0+255),f,b
  5411  000228  A0D8               	btfss	status,0,c
  5412  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  5413  00022C  0100               	movlb	0	; () banked
  5414  00022E  29D3               	incf	printf@len& (0+255),w,b
  5415  000230  E1EF               	bnz	l6764
  5416  000232  0100               	movlb	0	; () banked
  5417  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  5418  000236  B4D8               	btfsc	status,2,c
  5419  000238  EFF5  F006         	goto	l7068
  5420  00023C  D7E9               	goto	l6764
  5421  00023E                     l6770:
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5425  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  5426  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5427  000246  50DF               	movf	indf2,w,c
  5428  000248  0100               	movlb	0	; () banked
  5429  00024A  6FEA               	movwf	printf@c& (0+255),b
  5430                           
  5431                           ; BSR set to: 0
  5432  00024C  0E02               	movlw	2
  5433  00024E  0100               	movlb	0	; () banked
  5434  000250  27D5               	addwf	printf@ap& (0+255),f,b
  5435  000252  0E00               	movlw	0
  5436  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  5437  000256                     l6774:
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;doprnt.c: 805: cp = (char *)&c;
  5441  000256  0EEA               	movlw	low printf@c
  5442  000258  0100               	movlb	0	; () banked
  5443  00025A  6FD1               	movwf	printf@cp& (0+255),b
  5444  00025C  0E00               	movlw	high printf@c
  5445  00025E  0100               	movlb	0	; () banked
  5446  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;doprnt.c: 806: len = 1;
  5450  000262  0E00               	movlw	0
  5451  000264  0100               	movlb	0	; () banked
  5452  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  5453  000268  0E01               	movlw	1
  5454  00026A  6FD3               	movwf	printf@len& (0+255),b
  5455                           
  5456                           ;doprnt.c: 807: goto dostring;
  5457  00026C  D795               	goto	l6748
  5458  00026E                     l6780:
  5459  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  5460  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5461  000276  0100               	movlb	0	; () banked
  5462  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  5463  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5464  00027C                     	if	0	;tblptru may be non-zero
  5465  00027C                     	endif
  5466  00027C                     	if	0	;tblptru may be non-zero
  5467  00027C                     	endif
  5468  00027C  0008               	tblrd		*
  5469  00027E  CFF5 F0EA          	movff	tablat,printf@c
  5470  000282  0100               	movlb	0	; () banked
  5471  000284  51EA               	movf	printf@c& (0+255),w,b
  5472                           
  5473                           ; Switch size 1, requested type "space"
  5474                           ; Number of cases is 7, Range of values is 0 to 120
  5475                           ; switch strategies available:
  5476                           ; Name         Instructions Cycles
  5477                           ; simple_byte           22    12 (average)
  5478                           ;	Chosen strategy is simple_byte
  5479  000286  0A00               	xorlw	0	; case 0
  5480  000288  B4D8               	btfsc	status,2,c
  5481  00028A  0012               	return	
  5482  00028C  0A63               	xorlw	99	; case 99
  5483  00028E  B4D8               	btfsc	status,2,c
  5484  000290  D7D6               	goto	l6770
  5485  000292  0A07               	xorlw	7	; case 100
  5486  000294  B4D8               	btfsc	status,2,c
  5487  000296  D00D               	goto	l6782
  5488  000298  0A02               	xorlw	2	; case 102
  5489  00029A  B4D8               	btfsc	status,2,c
  5490  00029C  D777               	goto	l6744
  5491  00029E  0A0F               	xorlw	15	; case 105
  5492  0002A0  B4D8               	btfsc	status,2,c
  5493  0002A2  D007               	goto	l6782
  5494  0002A4  0A05               	xorlw	5	; case 108
  5495  0002A6  B4D8               	btfsc	status,2,c
  5496  0002A8  D76E               	goto	l6742
  5497  0002AA  0A14               	xorlw	20	; case 120
  5498  0002AC  B4D8               	btfsc	status,2,c
  5499  0002AE  D771               	goto	l6746
  5500  0002B0  D7D2               	goto	l6774
  5501  0002B2                     l6782:
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;doprnt.c: 825: if(flag & (0x700)) {
  5505  0002B2  0E07               	movlw	7
  5506  0002B4  0100               	movlb	0	; () banked
  5507  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5508  0002B8  B4D8               	btfsc	status,2,c
  5509  0002BA  D36D               	goto	l783
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;doprnt.c: 827: if(flag & 0x1000)
  5513  0002BC  0100               	movlb	0	; () banked
  5514  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  5515  0002C0  D005               	goto	l6788
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;doprnt.c: 829: prec = 6;
  5519  0002C2  0E00               	movlw	0
  5520  0002C4  0100               	movlb	0	; () banked
  5521  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5522  0002C8  0E06               	movlw	6
  5523  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  5524  0002CC                     l6788:
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5528  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  5529  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5530  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  5531  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  5532  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  5533                           
  5534                           ; BSR set to: 0
  5535  0002E0  0E03               	movlw	3
  5536  0002E2  0100               	movlb	0	; () banked
  5537  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  5538  0002E6  0E00               	movlw	0
  5539  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;doprnt.c: 831: if(fval < 0.0) {
  5543  0002EA  0100               	movlb	0	; () banked
  5544  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  5545  0002EE  D011               	goto	l6798
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;doprnt.c: 832: fval = -fval;
  5549  0002F0  C0DD  F023         	movff	printf@fval,___ftneg@f1
  5550  0002F4  C0DE  F024         	movff	printf@fval+1,___ftneg@f1+1
  5551  0002F8  C0DF  F025         	movff	printf@fval+2,___ftneg@f1+2
  5552  0002FC  EC87  F01E         	call	___ftneg	;wreg free
  5553  000300  C023  F0DD         	movff	?___ftneg,printf@fval
  5554  000304  C024  F0DE         	movff	?___ftneg+1,printf@fval+1
  5555  000308  C025  F0DF         	movff	?___ftneg+2,printf@fval+2
  5556                           
  5557                           ;doprnt.c: 833: flag |= 0x03;
  5558  00030C  0E03               	movlw	3
  5559  00030E  0100               	movlb	0	; () banked
  5560  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  5561  000312                     l6798:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;doprnt.c: 834: }
  5565                           ;doprnt.c: 835: exp = 0;
  5566  000312  0E00               	movlw	0
  5567  000314  0100               	movlb	0	; () banked
  5568  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5569  000318  0E00               	movlw	0
  5570  00031A  6FDB               	movwf	printf@exp& (0+255),b
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;doprnt.c: 836: if( fval!=0) {
  5574  00031C  0100               	movlb	0	; () banked
  5575  00031E  51DD               	movf	printf@fval& (0+255),w,b
  5576  000320  0100               	movlb	0	; () banked
  5577  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5578  000324  0100               	movlb	0	; () banked
  5579  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5580  000328  B4D8               	btfsc	status,2,c
  5581  00032A  D091               	goto	l6826
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5585  00032C  0E82               	movlw	130
  5586  00032E  0100               	movlb	0	; () banked
  5587  000330  6FC7               	movwf	??_printf& (0+255),b
  5588  000332  0EFF               	movlw	255
  5589  000334  0100               	movlb	0	; () banked
  5590  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  5591  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  5592  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  5593  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  5594  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  5595  000348  0E10               	movlw	16
  5596  00034A  D006               	goto	u6760
  5597  00034C                     u6765:
  5598  00034C  0100               	movlb	0	; () banked
  5599  00034E  90D8               	bcf	status,0,c
  5600  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  5601  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  5602  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  5603  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  5604  000358                     u6760:
  5605  000358  2EE8               	decfsz	wreg,f,c
  5606  00035A  D7F8               	goto	u6765
  5607  00035C  0100               	movlb	0	; () banked
  5608  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  5609  000360  0100               	movlb	0	; () banked
  5610  000362  25C7               	addwf	??_printf& (0+255),w,b
  5611  000364  0100               	movlb	0	; () banked
  5612  000366  6FDB               	movwf	printf@exp& (0+255),b
  5613  000368  0E00               	movlw	0
  5614  00036A  0100               	movlb	0	; () banked
  5615  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  5616  00036E  0100               	movlb	0	; () banked
  5617  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;doprnt.c: 838: exp--;
  5621  000372  0100               	movlb	0	; () banked
  5622  000374  07DB               	decf	printf@exp& (0+255),f,b
  5623  000376  A0D8               	btfss	status,0,c
  5624  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;doprnt.c: 839: exp *= 3;
  5628  00037A  C0DB  F031         	movff	printf@exp,___wmul@multiplier
  5629  00037E  C0DC  F032         	movff	printf@exp+1,___wmul@multiplier+1
  5630  000382  0E00               	movlw	0
  5631  000384  6E34               	movwf	___wmul@multiplicand+1,c
  5632  000386  0E03               	movlw	3
  5633  000388  6E33               	movwf	___wmul@multiplicand,c
  5634  00038A  EC74  F01E         	call	___wmul	;wreg free
  5635  00038E  C031  F0DB         	movff	?___wmul,printf@exp
  5636  000392  C032  F0DC         	movff	?___wmul+1,printf@exp+1
  5637                           
  5638                           ;doprnt.c: 840: exp /= 10;
  5639  000396  C0DB  F029         	movff	printf@exp,___awdiv@dividend
  5640  00039A  C0DC  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  5641  00039E  0E00               	movlw	0
  5642  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  5643  0003A2  0E0A               	movlw	10
  5644  0003A4  6E2B               	movwf	___awdiv@divisor,c
  5645  0003A6  EC0B  F01A         	call	___awdiv	;wreg free
  5646  0003AA  C029  F0DB         	movff	?___awdiv,printf@exp
  5647  0003AE  C02A  F0DC         	movff	?___awdiv+1,printf@exp+1
  5648                           
  5649                           ;doprnt.c: 841: if(exp < 0)
  5650  0003B2  0100               	movlb	0	; () banked
  5651  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  5652  0003B6  D004               	goto	l6814
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;doprnt.c: 842: exp--;
  5656  0003B8  0100               	movlb	0	; () banked
  5657  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  5658  0003BC  A0D8               	btfss	status,0,c
  5659  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5660  0003C0                     l6814:
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5664  0003C0  0100               	movlb	0	; () banked
  5665  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  5666  0003C4  0800               	sublw	0
  5667  0003C6  ECB3  F009         	call	_scale
  5668  0003CA  C098  F0D7         	movff	?_scale,printf@tmpval
  5669  0003CE  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5670  0003D2  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5671                           
  5672                           ;doprnt.c: 847: tmpval.integ *= fval;
  5673  0003D6  C0D7  F089         	movff	printf@tmpval,___ftmul@f1
  5674  0003DA  C0D8  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  5675  0003DE  C0D9  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  5676  0003E2  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  5677  0003E6  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5678  0003EA  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5679  0003EE  EC9A  F00F         	call	___ftmul	;wreg free
  5680  0003F2  C089  F0D7         	movff	?___ftmul,printf@tmpval
  5681  0003F6  C08A  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  5682  0003FA  C08B  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  5683                           
  5684                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5685  0003FE  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5686  000402  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5687  000406  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5688  00040A  0E00               	movlw	0
  5689  00040C  6E32               	movwf	___ftge@ff2,c
  5690  00040E  0E80               	movlw	128
  5691  000410  6E33               	movwf	___ftge@ff2+1,c
  5692  000412  0E3F               	movlw	63
  5693  000414  6E34               	movwf	___ftge@ff2+2,c
  5694  000416  EC7D  F019         	call	___ftge	;wreg free
  5695  00041A  B0D8               	btfsc	status,0,c
  5696  00041C  D005               	goto	l6822
  5697                           
  5698                           ;doprnt.c: 849: exp--;
  5699  00041E  0100               	movlb	0	; () banked
  5700  000420  07DB               	decf	printf@exp& (0+255),f,b
  5701  000422  A0D8               	btfss	status,0,c
  5702  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5703  000426  D013               	goto	l6826
  5704  000428                     l6822:
  5705                           
  5706                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5707  000428  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5708  00042C  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5709  000430  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5710  000434  0E00               	movlw	0
  5711  000436  6E32               	movwf	___ftge@ff2,c
  5712  000438  0E20               	movlw	32
  5713  00043A  6E33               	movwf	___ftge@ff2+1,c
  5714  00043C  0E41               	movlw	65
  5715  00043E  6E34               	movwf	___ftge@ff2+2,c
  5716  000440  EC7D  F019         	call	___ftge	;wreg free
  5717  000444  A0D8               	btfss	status,0,c
  5718  000446  D003               	goto	l6826
  5719                           
  5720                           ;doprnt.c: 851: exp++;
  5721  000448  0100               	movlb	0	; () banked
  5722  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  5723  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  5724  00044E                     l6826:
  5725                           
  5726                           ;doprnt.c: 852: }
  5727                           ;doprnt.c: 1112: if(prec <= 12)
  5728  00044E  0100               	movlb	0	; () banked
  5729  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  5730  000452  D008               	goto	l6828
  5731  000454  0100               	movlb	0	; () banked
  5732  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5733  000458  E11D               	bnz	l6830
  5734  00045A  0E0D               	movlw	13
  5735  00045C  0100               	movlb	0	; () banked
  5736  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  5737  000460  B0D8               	btfsc	status,0,c
  5738  000462  D018               	goto	l6830
  5739  000464                     l6828:
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;doprnt.c: 1113: fval += fround(prec);
  5743  000464  C0DD  F0A2         	movff	printf@fval,___ftadd@f1
  5744  000468  C0DE  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  5745  00046C  C0DF  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  5746  000470  0100               	movlb	0	; () banked
  5747  000472  51E8               	movf	printf@prec& (0+255),w,b
  5748  000474  EC6A  F00E         	call	_fround
  5749  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  5750  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  5751  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  5752  000484  EC36  F00D         	call	___ftadd	;wreg free
  5753  000488  C0A2  F0DD         	movff	?___ftadd,printf@fval
  5754  00048C  C0A3  F0DE         	movff	?___ftadd+1,printf@fval+1
  5755  000490  C0A4  F0DF         	movff	?___ftadd+2,printf@fval+2
  5756  000494                     l6830:
  5757                           
  5758                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5759  000494  0100               	movlb	0	; () banked
  5760  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5761  000498  D008               	goto	l6832
  5762  00049A  0100               	movlb	0	; () banked
  5763  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5764  00049E  E12A               	bnz	l6838
  5765  0004A0  0E0A               	movlw	10
  5766  0004A2  0100               	movlb	0	; () banked
  5767  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  5768  0004A6  B0D8               	btfsc	status,0,c
  5769  0004A8  D025               	goto	l6838
  5770  0004AA                     l6832:
  5771                           
  5772                           ; BSR set to: 0
  5773  0004AA  0100               	movlb	0	; () banked
  5774  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  5775  0004AE  0100               	movlb	0	; () banked
  5776  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5777  0004B2  0100               	movlb	0	; () banked
  5778  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5779  0004B6  B4D8               	btfsc	status,2,c
  5780  0004B8  D05F               	goto	l6852
  5781                           
  5782                           ; BSR set to: 0
  5783  0004BA  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5784  0004BE  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5785  0004C2  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5786  0004C6  ECF5  F010         	call	___fttol	;wreg free
  5787  0004CA  0100               	movlb	0	; () banked
  5788  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  5789  0004CE  0100               	movlb	0	; () banked
  5790  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  5791  0004D2  0100               	movlb	0	; () banked
  5792  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  5793  0004D6  0100               	movlb	0	; () banked
  5794  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  5795  0004DA  A4D8               	btfss	status,2,c
  5796  0004DC  D04D               	goto	l6852
  5797                           
  5798                           ; BSR set to: 0
  5799  0004DE  0100               	movlb	0	; () banked
  5800  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5801  0004E2  D04A               	goto	l6852
  5802  0004E4  0100               	movlb	0	; () banked
  5803  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5804  0004E8  E105               	bnz	l6838
  5805  0004EA  0E02               	movlw	2
  5806  0004EC  0100               	movlb	0	; () banked
  5807  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  5808  0004F0  A0D8               	btfss	status,0,c
  5809  0004F2  D042               	goto	l6852
  5810  0004F4                     l6838:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5814  0004F4  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5815  0004F8  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5816  0004FC  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5817  000500  0E70               	movlw	112
  5818  000502  6E32               	movwf	___ftge@ff2,c
  5819  000504  0E89               	movlw	137
  5820  000506  6E33               	movwf	___ftge@ff2+1,c
  5821  000508  0E40               	movlw	64
  5822  00050A  6E34               	movwf	___ftge@ff2+2,c
  5823  00050C  EC7D  F019         	call	___ftge	;wreg free
  5824  000510  B0D8               	btfsc	status,0,c
  5825  000512  D003               	goto	l6842
  5826                           
  5827                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5828  000514  0100               	movlb	0	; () banked
  5829  000516  0EF7               	movlw	247
  5830  000518  D002               	goto	L1
  5831  00051A                     l6842:
  5832                           
  5833                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5834  00051A  0100               	movlb	0	; () banked
  5835  00051C  0EF8               	movlw	248
  5836  00051E                     L1:
  5837  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  5838  000520  0EFF               	movlw	255
  5839  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;doprnt.c: 1124: }
  5843                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5844                           
  5845                           ; BSR set to: 0
  5846  000524  0100               	movlb	0	; () banked
  5847  000526  51DB               	movf	printf@exp& (0+255),w,b
  5848  000528  ECB3  F009         	call	_scale
  5849  00052C  C098  F0D7         	movff	?_scale,printf@tmpval
  5850  000530  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5851  000534  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5852                           
  5853                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5854  000538  C0DD  F023         	movff	printf@fval,__tdiv_to_l_@f1
  5855  00053C  C0DE  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5856  000540  C0DF  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5857  000544  C0D7  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  5858  000548  C0D8  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5859  00054C  C0D9  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5860  000550  EC97  F011         	call	__tdiv_to_l_	;wreg free
  5861  000554  C023  F0E0         	movff	?__tdiv_to_l_,printf@val
  5862  000558  C024  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  5863  00055C  C025  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  5864  000560  C026  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  5865                           
  5866                           ;doprnt.c: 1129: fval = 0.0;
  5867  000564  0E00               	movlw	0
  5868  000566  0100               	movlb	0	; () banked
  5869  000568  6FDD               	movwf	printf@fval& (0+255),b
  5870  00056A  0E00               	movlw	0
  5871  00056C  0100               	movlb	0	; () banked
  5872  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  5873  000570  0E00               	movlw	0
  5874  000572  0100               	movlb	0	; () banked
  5875  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  5876                           
  5877                           ;doprnt.c: 1130: } else {
  5878  000576  D033               	goto	l6856
  5879  000578                     l6852:
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5883  000578  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5884  00057C  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5885  000580  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5886  000584  ECF5  F010         	call	___fttol	;wreg free
  5887  000588  C0AE  F0E0         	movff	?___fttol,printf@val
  5888  00058C  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  5889  000590  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  5890  000594  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  5891                           
  5892                           ;doprnt.c: 1132: fval -= (double)val;
  5893  000598  C0DD  F0AE         	movff	printf@fval,___ftsub@f1
  5894  00059C  C0DE  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  5895  0005A0  C0DF  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  5896  0005A4  C0E0  F02B         	movff	printf@val,___lltoft@c
  5897  0005A8  C0E1  F02C         	movff	printf@val+1,___lltoft@c+1
  5898  0005AC  C0E2  F02D         	movff	printf@val+2,___lltoft@c+2
  5899  0005B0  C0E3  F02E         	movff	printf@val+3,___lltoft@c+3
  5900  0005B4  EC76  F01C         	call	___lltoft	;wreg free
  5901  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  5902  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  5903  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  5904  0005C4  EC24  F01D         	call	___ftsub	;wreg free
  5905  0005C8  C0AE  F0DD         	movff	?___ftsub,printf@fval
  5906  0005CC  C0AF  F0DE         	movff	?___ftsub+1,printf@fval+1
  5907  0005D0  C0B0  F0DF         	movff	?___ftsub+2,printf@fval+2
  5908                           
  5909                           ;doprnt.c: 1133: exp = 0;
  5910  0005D4  0E00               	movlw	0
  5911  0005D6  0100               	movlb	0	; () banked
  5912  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5913  0005DA  0E00               	movlw	0
  5914  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  5915  0005DE                     l6856:
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;doprnt.c: 1134: }
  5919                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5920  0005DE  0E01               	movlw	1
  5921  0005E0  0100               	movlb	0	; () banked
  5922  0005E2  6FEA               	movwf	printf@c& (0+255),b
  5923  0005E4                     l6858:
  5924                           
  5925                           ; BSR set to: 0
  5926  0005E4  0E0A               	movlw	10
  5927  0005E6  0100               	movlb	0	; () banked
  5928  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  5929  0005EA  B4D8               	btfsc	status,2,c
  5930  0005EC  D01E               	goto	l6870
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;doprnt.c: 1137: if(val < dpowers[c])
  5934                           
  5935                           ; BSR set to: 0
  5936                           
  5937                           ; BSR set to: 0
  5938  0005EE  0100               	movlb	0	; () banked
  5939  0005F0  51EA               	movf	printf@c& (0+255),w,b
  5940  0005F2  0D04               	mullw	4
  5941  0005F4  0ED9               	movlw	low _dpowers
  5942  0005F6  24F3               	addwf	prodl,w,c
  5943  0005F8  6EF6               	movwf	tblptrl,c
  5944  0005FA  0EFD               	movlw	high _dpowers
  5945  0005FC  20F4               	addwfc	prodh,w,c
  5946  0005FE  6EF7               	movwf	tblptrh,c
  5947  000600                     	if	0	;There are less than 3 active tblptr bytes
  5948  000600                     	endif
  5949  000600  0009               	tblrd		*+
  5950  000602  50F5               	movf	tablat,w,c
  5951  000604  0100               	movlb	0	; () banked
  5952  000606  5DE0               	subwf	printf@val& (0+255),w,b
  5953  000608  0009               	tblrd		*+
  5954  00060A  50F5               	movf	tablat,w,c
  5955  00060C  0100               	movlb	0	; () banked
  5956  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  5957  000610  0009               	tblrd		*+
  5958  000612  50F5               	movf	tablat,w,c
  5959  000614  0100               	movlb	0	; () banked
  5960  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  5961  000618  0009               	tblrd		*+
  5962  00061A  50F5               	movf	tablat,w,c
  5963  00061C  0100               	movlb	0	; () banked
  5964  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  5965  000620  A0D8               	btfss	status,0,c
  5966  000622  D003               	goto	l6870
  5967                           
  5968                           ; BSR set to: 0
  5969                           
  5970                           ; BSR set to: 0
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;doprnt.c: 1138: break;
  5974  000624  0100               	movlb	0	; () banked
  5975  000626  2BEA               	incf	printf@c& (0+255),f,b
  5976  000628  D7DD               	goto	l6858
  5977  00062A                     l6870:
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;doprnt.c: 1142: width -= prec + c + exp;
  5981  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  5982  00062E  0100               	movlb	0	; () banked
  5983  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  5984  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  5985  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  5986  000636  0100               	movlb	0	; () banked
  5987  000638  51E8               	movf	printf@prec& (0+255),w,b
  5988  00063A  0100               	movlb	0	; () banked
  5989  00063C  27C7               	addwf	??_printf& (0+255),f,b
  5990  00063E  0100               	movlb	0	; () banked
  5991  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5992  000642  0100               	movlb	0	; () banked
  5993  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5994  000646  0100               	movlb	0	; () banked
  5995  000648  51DB               	movf	printf@exp& (0+255),w,b
  5996  00064A  0100               	movlb	0	; () banked
  5997  00064C  27C7               	addwf	??_printf& (0+255),f,b
  5998  00064E  0100               	movlb	0	; () banked
  5999  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  6000  000652  0100               	movlb	0	; () banked
  6001  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  6002  000656  0100               	movlb	0	; () banked
  6003  000658  51C7               	movf	??_printf& (0+255),w,b
  6004  00065A  0100               	movlb	0	; () banked
  6005  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  6006  00065E  0100               	movlb	0	; () banked
  6007  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  6008  000662  0100               	movlb	0	; () banked
  6009  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6010                           
  6011                           ;doprnt.c: 1143: if(
  6012                           ;doprnt.c: 1147: prec)
  6013  000666  0100               	movlb	0	; () banked
  6014  000668  51E8               	movf	printf@prec& (0+255),w,b
  6015  00066A  0100               	movlb	0	; () banked
  6016  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6017  00066E  B4D8               	btfsc	status,2,c
  6018  000670  D004               	goto	l6874
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;doprnt.c: 1148: width--;
  6022  000672  0100               	movlb	0	; () banked
  6023  000674  07E4               	decf	printf@width& (0+255),f,b
  6024  000676  A0D8               	btfss	status,0,c
  6025  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  6026  00067A                     l6874:
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;doprnt.c: 1149: if(flag & 0x03)
  6030  00067A  0E03               	movlw	3
  6031  00067C  0100               	movlb	0	; () banked
  6032  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  6033  000680  0100               	movlb	0	; () banked
  6034  000682  6FC7               	movwf	??_printf& (0+255),b
  6035  000684  0E00               	movlw	0
  6036  000686  0100               	movlb	0	; () banked
  6037  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6038  00068A  0100               	movlb	0	; () banked
  6039  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  6040  00068E  0100               	movlb	0	; () banked
  6041  000690  51C7               	movf	??_printf& (0+255),w,b
  6042  000692  0100               	movlb	0	; () banked
  6043  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6044  000696  B4D8               	btfsc	status,2,c
  6045  000698  D004               	goto	l6878
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;doprnt.c: 1150: width--;
  6049  00069A  0100               	movlb	0	; () banked
  6050  00069C  07E4               	decf	printf@width& (0+255),f,b
  6051  00069E  A0D8               	btfss	status,0,c
  6052  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  6053  0006A2                     l6878:
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;doprnt.c: 1153: if(flag & 0x04) {
  6057  0006A2  0100               	movlb	0	; () banked
  6058  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  6059  0006A6  D02D               	goto	l6894
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;doprnt.c: 1157: if(flag & 0x03)
  6063  0006A8  0E03               	movlw	3
  6064  0006AA  0100               	movlb	0	; () banked
  6065  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  6066  0006AE  0100               	movlb	0	; () banked
  6067  0006B0  6FC7               	movwf	??_printf& (0+255),b
  6068  0006B2  0E00               	movlw	0
  6069  0006B4  0100               	movlb	0	; () banked
  6070  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6071  0006B8  0100               	movlb	0	; () banked
  6072  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  6073  0006BC  0100               	movlb	0	; () banked
  6074  0006BE  51C7               	movf	??_printf& (0+255),w,b
  6075  0006C0  0100               	movlb	0	; () banked
  6076  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6077  0006C4  B4D8               	btfsc	status,2,c
  6078  0006C6  D00B               	goto	l6888
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;doprnt.c: 1159: (putch('-') );
  6082  0006C8  0E2D               	movlw	45
  6083  0006CA  ECAA  F01E         	call	_putch
  6084                           
  6085                           ;doprnt.c: 1168: while(width > 0) {
  6086  0006CE  D007               	goto	l6888
  6087  0006D0                     l6884:
  6088                           
  6089                           ;doprnt.c: 1169: (putch('0') );
  6090  0006D0  0E30               	movlw	48
  6091  0006D2  ECAA  F01E         	call	_putch
  6092                           
  6093                           ;doprnt.c: 1170: width--;
  6094  0006D6  0100               	movlb	0	; () banked
  6095  0006D8  07E4               	decf	printf@width& (0+255),f,b
  6096  0006DA  A0D8               	btfss	status,0,c
  6097  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  6098  0006DE                     l6888:
  6099  0006DE  0100               	movlb	0	; () banked
  6100  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  6101  0006E2  D073               	goto	l6906
  6102  0006E4  0100               	movlb	0	; () banked
  6103  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  6104  0006E8  E1F3               	bnz	l6884
  6105  0006EA  0100               	movlb	0	; () banked
  6106  0006EC  05E4               	decf	printf@width& (0+255),w,b
  6107  0006EE  A0D8               	btfss	status,0,c
  6108  0006F0  D06C               	goto	l6906
  6109  0006F2  D7EE               	goto	l6884
  6110  0006F4                     l6890:
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;doprnt.c: 1181: (putch(' ') );
  6114  0006F4  0E20               	movlw	32
  6115  0006F6  ECAA  F01E         	call	_putch
  6116                           
  6117                           ;doprnt.c: 1182: width--;
  6118  0006FA  0100               	movlb	0	; () banked
  6119  0006FC  07E4               	decf	printf@width& (0+255),f,b
  6120  0006FE  A0D8               	btfss	status,0,c
  6121  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  6122  000702                     l6894:
  6123                           
  6124                           ; BSR set to: 0
  6125  000702  0100               	movlb	0	; () banked
  6126  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  6127  000706  D007               	goto	l6896
  6128  000708  0100               	movlb	0	; () banked
  6129  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  6130  00070C  E1F3               	bnz	l6890
  6131  00070E  0100               	movlb	0	; () banked
  6132  000710  05E4               	decf	printf@width& (0+255),w,b
  6133  000712  B0D8               	btfsc	status,0,c
  6134  000714  D7EF               	goto	l6890
  6135  000716                     l6896:
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;doprnt.c: 1183: }
  6139                           ;doprnt.c: 1188: if(flag & 0x03)
  6140  000716  0E03               	movlw	3
  6141  000718  0100               	movlb	0	; () banked
  6142  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  6143  00071C  0100               	movlb	0	; () banked
  6144  00071E  6FC7               	movwf	??_printf& (0+255),b
  6145  000720  0E00               	movlw	0
  6146  000722  0100               	movlb	0	; () banked
  6147  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6148  000726  0100               	movlb	0	; () banked
  6149  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  6150  00072A  0100               	movlb	0	; () banked
  6151  00072C  51C7               	movf	??_printf& (0+255),w,b
  6152  00072E  0100               	movlb	0	; () banked
  6153  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6154  000732  B4D8               	btfsc	status,2,c
  6155  000734  D04A               	goto	l6906
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;doprnt.c: 1190: (putch('-') );
  6159  000736  0E2D               	movlw	45
  6160  000738  ECAA  F01E         	call	_putch
  6161                           
  6162                           ;doprnt.c: 1195: }
  6163                           ;doprnt.c: 1196: while(c--) {
  6164  00073C  D046               	goto	l6906
  6165  00073E                     l6900:
  6166                           
  6167                           ;doprnt.c: 1200: {
  6168                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6169  00073E  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6170  000742  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6171  000746  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6172  00074A  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6173  00074E  0100               	movlb	0	; () banked
  6174  000750  51EA               	movf	printf@c& (0+255),w,b
  6175  000752  0D04               	mullw	4
  6176  000754  0ED9               	movlw	low _dpowers
  6177  000756  24F3               	addwf	prodl,w,c
  6178  000758  6EF6               	movwf	tblptrl,c
  6179  00075A  0EFD               	movlw	high _dpowers
  6180  00075C  20F4               	addwfc	prodh,w,c
  6181  00075E  6EF7               	movwf	tblptrh,c
  6182  000760                     	if	0	;There are less than 3 active tblptr bytes
  6183  000760                     	endif
  6184  000760  0009               	tblrd		*+
  6185  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  6186  000766  0009               	tblrd		*+
  6187  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6188  00076C  0009               	tblrd		*+
  6189  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6190  000772  000A               	tblrd		*-
  6191  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6192  000778  EC4D  F01A         	call	___lldiv	;wreg free
  6193  00077C  C023  F0D7         	movff	?___lldiv,printf@tmpval
  6194  000780  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  6195  000784  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  6196  000788  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  6197                           
  6198                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6199  00078C  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  6200  000790  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6201  000794  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6202  000798  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6203  00079C  0E0A               	movlw	10
  6204  00079E  6E34               	movwf	___llmod@divisor,c
  6205  0007A0  0E00               	movlw	0
  6206  0007A2  6E35               	movwf	___llmod@divisor+1,c
  6207  0007A4  0E00               	movlw	0
  6208  0007A6  6E36               	movwf	___llmod@divisor+2,c
  6209  0007A8  0E00               	movlw	0
  6210  0007AA  6E37               	movwf	___llmod@divisor+3,c
  6211  0007AC  ECB0  F01B         	call	___llmod	;wreg free
  6212  0007B0  C030  F0D7         	movff	?___llmod,printf@tmpval
  6213  0007B4  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  6214  0007B8  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  6215  0007BC  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  6216                           
  6217                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6218  0007C0  0100               	movlb	0	; () banked
  6219  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  6220  0007C4  0F30               	addlw	48
  6221  0007C6  ECAA  F01E         	call	_putch
  6222  0007CA                     l6906:
  6223  0007CA  0100               	movlb	0	; () banked
  6224  0007CC  07EA               	decf	printf@c& (0+255),f,b
  6225  0007CE  0100               	movlb	0	; () banked
  6226  0007D0  29EA               	incf	printf@c& (0+255),w,b
  6227  0007D2  B4D8               	btfsc	status,2,c
  6228  0007D4  D008               	goto	l6912
  6229  0007D6  D7B3               	goto	l6900
  6230  0007D8                     l6908:
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;doprnt.c: 1208: (putch('0') );
  6234  0007D8  0E30               	movlw	48
  6235  0007DA  ECAA  F01E         	call	_putch
  6236                           
  6237                           ;doprnt.c: 1209: exp--;
  6238  0007DE  0100               	movlb	0	; () banked
  6239  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  6240  0007E2  A0D8               	btfss	status,0,c
  6241  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6242  0007E6                     l6912:
  6243                           
  6244                           ; BSR set to: 0
  6245  0007E6  0100               	movlb	0	; () banked
  6246  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  6247  0007EA  D007               	goto	l6914
  6248  0007EC  0100               	movlb	0	; () banked
  6249  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  6250  0007F0  E1F3               	bnz	l6908
  6251  0007F2  0100               	movlb	0	; () banked
  6252  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  6253  0007F6  B0D8               	btfsc	status,0,c
  6254  0007F8  D7EF               	goto	l6908
  6255  0007FA                     l6914:
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;doprnt.c: 1210: }
  6259                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6260  0007FA  0100               	movlb	0	; () banked
  6261  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  6262  0007FE  D00C               	goto	l823
  6263  000800  0100               	movlb	0	; () banked
  6264  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6265  000804  E105               	bnz	u6980
  6266  000806  0E09               	movlw	9
  6267  000808  0100               	movlb	0	; () banked
  6268  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  6269  00080C  A0D8               	btfss	status,0,c
  6270  00080E  D004               	goto	l823
  6271  000810                     u6980:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6275  000810  0E08               	movlw	8
  6276  000812  0100               	movlb	0	; () banked
  6277  000814  6FEA               	movwf	printf@c& (0+255),b
  6278  000816  D002               	goto	l6918
  6279  000818                     l823:
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;doprnt.c: 1213: else
  6283                           ;doprnt.c: 1214: c = prec;
  6284  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  6285  00081C                     l6918:
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;doprnt.c: 1215: prec -= c;
  6289  00081C  0100               	movlb	0	; () banked
  6290  00081E  51EA               	movf	printf@c& (0+255),w,b
  6291  000820  0100               	movlb	0	; () banked
  6292  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  6293  000824  0E00               	movlw	0
  6294  000826  0100               	movlb	0	; () banked
  6295  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  6296  00082A  0EFF               	movlw	255
  6297  00082C  0100               	movlb	0	; () banked
  6298  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;doprnt.c: 1219: if(c)
  6302  000830  0100               	movlb	0	; () banked
  6303  000832  51EA               	movf	printf@c& (0+255),w,b
  6304  000834  0100               	movlb	0	; () banked
  6305  000836  B4D8               	btfsc	status,2,c
  6306  000838  D003               	goto	l6924
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;doprnt.c: 1221: (putch('.') );
  6310  00083A  0E2E               	movlw	46
  6311  00083C  ECAA  F01E         	call	_putch
  6312  000840                     l6924:
  6313                           
  6314                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6315  000840  0100               	movlb	0	; () banked
  6316  000842  51EA               	movf	printf@c& (0+255),w,b
  6317  000844  ECB3  F009         	call	_scale
  6318  000848  C098  F0CD         	movff	?_scale,_printf$1419
  6319  00084C  C099  F0CE         	movff	?_scale+1,_printf$1419+1
  6320  000850  C09A  F0CF         	movff	?_scale+2,_printf$1419+2
  6321                           
  6322                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6323  000854  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  6324  000858  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  6325  00085C  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  6326  000860  C0CD  F089         	movff	_printf$1419,___ftmul@f1
  6327  000864  C0CE  F08A         	movff	_printf$1419+1,___ftmul@f1+1
  6328  000868  C0CF  F08B         	movff	_printf$1419+2,___ftmul@f1+2
  6329  00086C  EC9A  F00F         	call	___ftmul	;wreg free
  6330  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  6331  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  6332  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  6333  00087C  ECF5  F010         	call	___fttol	;wreg free
  6334  000880  C0AE  F0E0         	movff	?___fttol,printf@val
  6335  000884  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  6336  000888  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  6337  00088C  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  6338                           
  6339                           ;doprnt.c: 1228: while(c--) {
  6340  000890  D06D               	goto	l6934
  6341  000892                     l6928:
  6342                           
  6343                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6344  000892  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6345  000896  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6346  00089A  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6347  00089E  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6348  0008A2  0100               	movlb	0	; () banked
  6349  0008A4  51EA               	movf	printf@c& (0+255),w,b
  6350  0008A6  0D04               	mullw	4
  6351  0008A8  0ED9               	movlw	low _dpowers
  6352  0008AA  24F3               	addwf	prodl,w,c
  6353  0008AC  6EF6               	movwf	tblptrl,c
  6354  0008AE  0EFD               	movlw	high _dpowers
  6355  0008B0  20F4               	addwfc	prodh,w,c
  6356  0008B2  6EF7               	movwf	tblptrh,c
  6357  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  6358  0008B4                     	endif
  6359  0008B4  0009               	tblrd		*+
  6360  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  6361  0008BA  0009               	tblrd		*+
  6362  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6363  0008C0  0009               	tblrd		*+
  6364  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6365  0008C6  000A               	tblrd		*-
  6366  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6367  0008CC  EC4D  F01A         	call	___lldiv	;wreg free
  6368  0008D0  C023  F0D7         	movff	?___lldiv,printf@tmpval
  6369  0008D4  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  6370  0008D8  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  6371  0008DC  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  6372                           
  6373                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6374  0008E0  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  6375  0008E4  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6376  0008E8  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6377  0008EC  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6378  0008F0  0E0A               	movlw	10
  6379  0008F2  6E34               	movwf	___llmod@divisor,c
  6380  0008F4  0E00               	movlw	0
  6381  0008F6  6E35               	movwf	___llmod@divisor+1,c
  6382  0008F8  0E00               	movlw	0
  6383  0008FA  6E36               	movwf	___llmod@divisor+2,c
  6384  0008FC  0E00               	movlw	0
  6385  0008FE  6E37               	movwf	___llmod@divisor+3,c
  6386  000900  ECB0  F01B         	call	___llmod	;wreg free
  6387  000904  C030  F0D7         	movff	?___llmod,printf@tmpval
  6388  000908  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  6389  00090C  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  6390  000910  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  6391                           
  6392                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6393  000914  0100               	movlb	0	; () banked
  6394  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  6395  000918  0F30               	addlw	48
  6396  00091A  ECAA  F01E         	call	_putch
  6397                           
  6398                           ;doprnt.c: 1232: val %= dpowers[c];
  6399  00091E  C0E0  F030         	movff	printf@val,___llmod@dividend
  6400  000922  C0E1  F031         	movff	printf@val+1,___llmod@dividend+1
  6401  000926  C0E2  F032         	movff	printf@val+2,___llmod@dividend+2
  6402  00092A  C0E3  F033         	movff	printf@val+3,___llmod@dividend+3
  6403  00092E  0100               	movlb	0	; () banked
  6404  000930  51EA               	movf	printf@c& (0+255),w,b
  6405  000932  0D04               	mullw	4
  6406  000934  0ED9               	movlw	low _dpowers
  6407  000936  24F3               	addwf	prodl,w,c
  6408  000938  6EF6               	movwf	tblptrl,c
  6409  00093A  0EFD               	movlw	high _dpowers
  6410  00093C  20F4               	addwfc	prodh,w,c
  6411  00093E  6EF7               	movwf	tblptrh,c
  6412  000940                     	if	0	;There are less than 3 active tblptr bytes
  6413  000940                     	endif
  6414  000940  0009               	tblrd		*+
  6415  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  6416  000946  0009               	tblrd		*+
  6417  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  6418  00094C  0009               	tblrd		*+
  6419  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  6420  000952  000A               	tblrd		*-
  6421  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  6422  000958  ECB0  F01B         	call	___llmod	;wreg free
  6423  00095C  C030  F0E0         	movff	?___llmod,printf@val
  6424  000960  C031  F0E1         	movff	?___llmod+1,printf@val+1
  6425  000964  C032  F0E2         	movff	?___llmod+2,printf@val+2
  6426  000968  C033  F0E3         	movff	?___llmod+3,printf@val+3
  6427  00096C                     l6934:
  6428  00096C  0100               	movlb	0	; () banked
  6429  00096E  07EA               	decf	printf@c& (0+255),f,b
  6430  000970  0100               	movlb	0	; () banked
  6431  000972  29EA               	incf	printf@c& (0+255),w,b
  6432  000974  B4D8               	btfsc	status,2,c
  6433  000976  D008               	goto	l6940
  6434  000978  D78C               	goto	l6928
  6435  00097A                     l6936:
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;doprnt.c: 1236: (putch('0') );
  6439  00097A  0E30               	movlw	48
  6440  00097C  ECAA  F01E         	call	_putch
  6441                           
  6442                           ;doprnt.c: 1237: prec--;
  6443  000980  0100               	movlb	0	; () banked
  6444  000982  07E8               	decf	printf@prec& (0+255),f,b
  6445  000984  A0D8               	btfss	status,0,c
  6446  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6447  000988                     l6940:
  6448                           
  6449                           ; BSR set to: 0
  6450  000988  0100               	movlb	0	; () banked
  6451  00098A  51E8               	movf	printf@prec& (0+255),w,b
  6452  00098C  0100               	movlb	0	; () banked
  6453  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6454  000990  B4D8               	btfsc	status,2,c
  6455  000992  D22B               	goto	l7068
  6456  000994  D7F2               	goto	l6936
  6457  000996                     l783:
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;doprnt.c: 1246: }
  6461                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6462  000996  0100               	movlb	0	; () banked
  6463  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  6464  00099A  D034               	goto	l832
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;doprnt.c: 1253: {
  6468                           ;doprnt.c: 1255: if(flag & 0x10)
  6469  00099C  0100               	movlb	0	; () banked
  6470  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  6471  0009A0  D00E               	goto	l6948
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  6475  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  6476  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6477  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  6478  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  6479  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  6480  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  6481                           
  6482                           ; BSR set to: 0
  6483  0009BA  0E04               	movlw	4
  6484  0009BC  D00F               	goto	L2
  6485  0009BE                     l6948:
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;doprnt.c: 1257: else
  6489                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6490  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  6491  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6492  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  6493  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  6494  0009CE  0100               	movlb	0	; () banked
  6495  0009D0  0E00               	movlw	0
  6496  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  6497  0009D4  0EFF               	movlw	-1
  6498  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  6499  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  6500                           
  6501                           ; BSR set to: 0
  6502  0009DA  0E02               	movlw	2
  6503  0009DC                     L2:
  6504  0009DC  0100               	movlb	0	; () banked
  6505  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  6506  0009E0  0E00               	movlw	0
  6507  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;doprnt.c: 1261: if((long)val < 0) {
  6511                           
  6512                           ; BSR set to: 0
  6513  0009E4  0100               	movlb	0	; () banked
  6514  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  6515  0009E8  D032               	goto	l6966
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;doprnt.c: 1262: flag |= 0x03;
  6519  0009EA  0E03               	movlw	3
  6520  0009EC  0100               	movlb	0	; () banked
  6521  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;doprnt.c: 1263: val = -val;
  6525  0009F0  0100               	movlb	0	; () banked
  6526  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  6527  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  6528  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  6529  0009F8  6DE0               	negf	printf@val& (0+255),b
  6530  0009FA  0E00               	movlw	0
  6531  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  6532  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  6533  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;doprnt.c: 1264: }
  6537                           ;doprnt.c: 1266: }
  6538  000A02  D025               	goto	l6966
  6539  000A04                     l832:
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;doprnt.c: 1268: else
  6543                           ;doprnt.c: 1273: {
  6544                           ;doprnt.c: 1281: if(flag & 0x10)
  6545  000A04  0100               	movlb	0	; () banked
  6546  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  6547  000A08  D00E               	goto	l6962
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6551  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  6552  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6553  000A12  CFDE F0E0          	movff	postinc2,printf@val
  6554  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  6555  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  6556  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  6557                           
  6558                           ; BSR set to: 0
  6559  000A22  0E04               	movlw	4
  6560  000A24  D010               	goto	L3
  6561  000A26                     l6962:
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;doprnt.c: 1283: else
  6565                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6566  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  6567  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6568  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  6569  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  6570  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  6571  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  6572  000A3E  0100               	movlb	0	; () banked
  6573  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  6574  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  6575                           
  6576                           ; BSR set to: 0
  6577  000A44  0E02               	movlw	2
  6578  000A46                     L3:
  6579  000A46  0100               	movlb	0	; () banked
  6580  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  6581  000A4A  0E00               	movlw	0
  6582  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6583  000A4E                     l6966:
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;doprnt.c: 1287: }
  6587                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6588  000A4E  0100               	movlb	0	; () banked
  6589  000A50  51E8               	movf	printf@prec& (0+255),w,b
  6590  000A52  0100               	movlb	0	; () banked
  6591  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6592  000A56  A4D8               	btfss	status,2,c
  6593  000A58  D05A               	goto	l7002
  6594                           
  6595                           ; BSR set to: 0
  6596  000A5A  0100               	movlb	0	; () banked
  6597  000A5C  51E0               	movf	printf@val& (0+255),w,b
  6598  000A5E  0100               	movlb	0	; () banked
  6599  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  6600  000A62  0100               	movlb	0	; () banked
  6601  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  6602  000A66  0100               	movlb	0	; () banked
  6603  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  6604  000A6A  A4D8               	btfss	status,2,c
  6605  000A6C  D050               	goto	l7002
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;doprnt.c: 1291: prec++;
  6609  000A6E  0100               	movlb	0	; () banked
  6610  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  6611  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  6612                           
  6613                           ; BSR set to: 0
  6614                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6615  000A74  D04C               	goto	l7002
  6616  000A76                     l6972:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6620  000A76  0E01               	movlw	1
  6621  000A78  0100               	movlb	0	; () banked
  6622  000A7A  6FEA               	movwf	printf@c& (0+255),b
  6623  000A7C                     l6974:
  6624                           
  6625                           ; BSR set to: 0
  6626  000A7C  0E0A               	movlw	10
  6627  000A7E  0100               	movlb	0	; () banked
  6628  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  6629  000A82  B4D8               	btfsc	status,2,c
  6630  000A84  D04D               	goto	l7004
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;doprnt.c: 1306: if(val < dpowers[c])
  6634                           
  6635                           ; BSR set to: 0
  6636                           
  6637                           ; BSR set to: 0
  6638  000A86  0100               	movlb	0	; () banked
  6639  000A88  51EA               	movf	printf@c& (0+255),w,b
  6640  000A8A  0D04               	mullw	4
  6641  000A8C  0ED9               	movlw	low _dpowers
  6642  000A8E  24F3               	addwf	prodl,w,c
  6643  000A90  6EF6               	movwf	tblptrl,c
  6644  000A92  0EFD               	movlw	high _dpowers
  6645  000A94  20F4               	addwfc	prodh,w,c
  6646  000A96  6EF7               	movwf	tblptrh,c
  6647  000A98                     	if	0	;There are less than 3 active tblptr bytes
  6648  000A98                     	endif
  6649  000A98  0009               	tblrd		*+
  6650  000A9A  50F5               	movf	tablat,w,c
  6651  000A9C  0100               	movlb	0	; () banked
  6652  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  6653  000AA0  0009               	tblrd		*+
  6654  000AA2  50F5               	movf	tablat,w,c
  6655  000AA4  0100               	movlb	0	; () banked
  6656  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6657  000AA8  0009               	tblrd		*+
  6658  000AAA  50F5               	movf	tablat,w,c
  6659  000AAC  0100               	movlb	0	; () banked
  6660  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6661  000AB0  0009               	tblrd		*+
  6662  000AB2  50F5               	movf	tablat,w,c
  6663  000AB4  0100               	movlb	0	; () banked
  6664  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6665  000AB8  A0D8               	btfss	status,0,c
  6666  000ABA  D032               	goto	l7004
  6667                           
  6668                           ; BSR set to: 0
  6669                           
  6670                           ; BSR set to: 0
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;doprnt.c: 1307: break;
  6674  000ABC  0100               	movlb	0	; () banked
  6675  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  6676  000AC0  D7DD               	goto	l6974
  6677  000AC2                     l6986:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6681  000AC2  0E01               	movlw	1
  6682  000AC4  0100               	movlb	0	; () banked
  6683  000AC6  6FEA               	movwf	printf@c& (0+255),b
  6684  000AC8                     l6988:
  6685                           
  6686                           ; BSR set to: 0
  6687  000AC8  0E08               	movlw	8
  6688  000ACA  0100               	movlb	0	; () banked
  6689  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  6690  000ACE  B4D8               	btfsc	status,2,c
  6691  000AD0  D027               	goto	l7004
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6695                           
  6696                           ; BSR set to: 0
  6697                           
  6698                           ; BSR set to: 0
  6699  000AD2  0100               	movlb	0	; () banked
  6700  000AD4  51EA               	movf	printf@c& (0+255),w,b
  6701  000AD6  0D04               	mullw	4
  6702  000AD8  0E4F               	movlw	low _hexpowers
  6703  000ADA  24F3               	addwf	prodl,w,c
  6704  000ADC  6EF6               	movwf	tblptrl,c
  6705  000ADE  0EFE               	movlw	high _hexpowers
  6706  000AE0  20F4               	addwfc	prodh,w,c
  6707  000AE2  6EF7               	movwf	tblptrh,c
  6708  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  6709  000AE4                     	endif
  6710  000AE4  0009               	tblrd		*+
  6711  000AE6  50F5               	movf	tablat,w,c
  6712  000AE8  0100               	movlb	0	; () banked
  6713  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  6714  000AEC  0009               	tblrd		*+
  6715  000AEE  50F5               	movf	tablat,w,c
  6716  000AF0  0100               	movlb	0	; () banked
  6717  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6718  000AF4  0009               	tblrd		*+
  6719  000AF6  50F5               	movf	tablat,w,c
  6720  000AF8  0100               	movlb	0	; () banked
  6721  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6722  000AFC  0009               	tblrd		*+
  6723  000AFE  50F5               	movf	tablat,w,c
  6724  000B00  0100               	movlb	0	; () banked
  6725  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6726  000B04  A0D8               	btfss	status,0,c
  6727  000B06  D00C               	goto	l7004
  6728                           
  6729                           ; BSR set to: 0
  6730                           
  6731                           ; BSR set to: 0
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;doprnt.c: 1318: break;
  6735  000B08  0100               	movlb	0	; () banked
  6736  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  6737  000B0C  D7DD               	goto	l6988
  6738  000B0E                     l7002:
  6739                           
  6740                           ; BSR set to: 0
  6741  000B0E  0100               	movlb	0	; () banked
  6742  000B10  51E6               	movf	printf@flag& (0+255),w,b
  6743  000B12  0B80               	andlw	128
  6744                           
  6745                           ; Switch size 1, requested type "space"
  6746                           ; Number of cases is 2, Range of values is 0 to 128
  6747                           ; switch strategies available:
  6748                           ; Name         Instructions Cycles
  6749                           ; simple_byte            7     4 (average)
  6750                           ;	Chosen strategy is simple_byte
  6751  000B14  0A00               	xorlw	0	; case 0
  6752  000B16  B4D8               	btfsc	status,2,c
  6753  000B18  D7AE               	goto	l6972
  6754  000B1A  0A80               	xorlw	128	; case 128
  6755  000B1C  B4D8               	btfsc	status,2,c
  6756  000B1E  D7D1               	goto	l6986
  6757  000B20                     l7004:
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;doprnt.c: 1339: if(c < prec)
  6761  000B20  0E80               	movlw	128
  6762  000B22  0100               	movlb	0	; () banked
  6763  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  6764  000B26  0E7F               	movlw	127
  6765  000B28  0100               	movlb	0	; () banked
  6766  000B2A  6FC7               	movwf	??_printf& (0+255),b
  6767  000B2C  0100               	movlb	0	; () banked
  6768  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  6769  000B30  0100               	movlb	0	; () banked
  6770  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  6771  000B34  0100               	movlb	0	; () banked
  6772  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6773  000B38  0A80               	xorlw	128
  6774  000B3A  0100               	movlb	0	; () banked
  6775  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  6776  000B3E  B0D8               	btfsc	status,0,c
  6777  000B40  D003               	goto	l7008
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;doprnt.c: 1340: c = prec;
  6781  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  6782  000B46  D018               	goto	l7012
  6783  000B48                     l7008:
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;doprnt.c: 1341: else if(prec < c)
  6787  000B48  0100               	movlb	0	; () banked
  6788  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6789  000B4C  0A80               	xorlw	128
  6790  000B4E  0100               	movlb	0	; () banked
  6791  000B50  6FC7               	movwf	??_printf& (0+255),b
  6792  000B52  0100               	movlb	0	; () banked
  6793  000B54  51EA               	movf	printf@c& (0+255),w,b
  6794  000B56  0100               	movlb	0	; () banked
  6795  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  6796  000B5A  0E80               	movlw	128
  6797  000B5C  0100               	movlb	0	; () banked
  6798  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  6799  000B60  0E7F               	movlw	127
  6800  000B62  0100               	movlb	0	; () banked
  6801  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  6802  000B66  B0D8               	btfsc	status,0,c
  6803  000B68  D007               	goto	l7012
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;doprnt.c: 1342: prec = c;
  6807  000B6A  0100               	movlb	0	; () banked
  6808  000B6C  51EA               	movf	printf@c& (0+255),w,b
  6809  000B6E  0100               	movlb	0	; () banked
  6810  000B70  6FE8               	movwf	printf@prec& (0+255),b
  6811  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  6812  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  6813  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6814  000B78                     l7012:
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6818  000B78  0100               	movlb	0	; () banked
  6819  000B7A  51E4               	movf	printf@width& (0+255),w,b
  6820  000B7C  0100               	movlb	0	; () banked
  6821  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6822  000B80  B4D8               	btfsc	status,2,c
  6823  000B82  D014               	goto	l7018
  6824                           
  6825                           ; BSR set to: 0
  6826  000B84  0E03               	movlw	3
  6827  000B86  0100               	movlb	0	; () banked
  6828  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  6829  000B8A  0100               	movlb	0	; () banked
  6830  000B8C  6FC7               	movwf	??_printf& (0+255),b
  6831  000B8E  0E00               	movlw	0
  6832  000B90  0100               	movlb	0	; () banked
  6833  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6834  000B94  0100               	movlb	0	; () banked
  6835  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  6836  000B98  0100               	movlb	0	; () banked
  6837  000B9A  51C7               	movf	??_printf& (0+255),w,b
  6838  000B9C  0100               	movlb	0	; () banked
  6839  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6840  000BA0  B4D8               	btfsc	status,2,c
  6841  000BA2  D004               	goto	l7018
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;doprnt.c: 1346: width--;
  6845  000BA4  0100               	movlb	0	; () banked
  6846  000BA6  07E4               	decf	printf@width& (0+255),f,b
  6847  000BA8  A0D8               	btfss	status,0,c
  6848  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  6849  000BAC                     l7018:
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6853  000BAC  0100               	movlb	0	; () banked
  6854  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  6855  000BB0  D01E               	goto	l7026
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;doprnt.c: 1349: if(width > prec)
  6859  000BB2  0100               	movlb	0	; () banked
  6860  000BB4  51E4               	movf	printf@width& (0+255),w,b
  6861  000BB6  0100               	movlb	0	; () banked
  6862  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  6863  000BBA  0100               	movlb	0	; () banked
  6864  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6865  000BBE  0A80               	xorlw	128
  6866  000BC0  0100               	movlb	0	; () banked
  6867  000BC2  6FC7               	movwf	??_printf& (0+255),b
  6868  000BC4  0100               	movlb	0	; () banked
  6869  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  6870  000BC8  0A80               	xorlw	128
  6871  000BCA  0100               	movlb	0	; () banked
  6872  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  6873  000BCE  B0D8               	btfsc	status,0,c
  6874  000BD0  D009               	goto	l7024
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;doprnt.c: 1350: width -= prec;
  6878  000BD2  0100               	movlb	0	; () banked
  6879  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  6880  000BD6  0100               	movlb	0	; () banked
  6881  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  6882  000BDA  0100               	movlb	0	; () banked
  6883  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6884  000BDE  0100               	movlb	0	; () banked
  6885  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6886  000BE2  D005               	goto	l7026
  6887  000BE4                     l7024:
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;doprnt.c: 1351: else
  6891                           ;doprnt.c: 1352: width = 0;
  6892  000BE4  0E00               	movlw	0
  6893  000BE6  0100               	movlb	0	; () banked
  6894  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  6895  000BEA  0E00               	movlw	0
  6896  000BEC  6FE4               	movwf	printf@width& (0+255),b
  6897  000BEE                     l7026:
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;doprnt.c: 1353: }
  6901                           ;doprnt.c: 1381: if(width > c)
  6902  000BEE  0E80               	movlw	128
  6903  000BF0  0100               	movlb	0	; () banked
  6904  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  6905  000BF4  0E7F               	movlw	127
  6906  000BF6  0100               	movlb	0	; () banked
  6907  000BF8  6FC7               	movwf	??_printf& (0+255),b
  6908  000BFA  0100               	movlb	0	; () banked
  6909  000BFC  51E4               	movf	printf@width& (0+255),w,b
  6910  000BFE  0100               	movlb	0	; () banked
  6911  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  6912  000C02  0100               	movlb	0	; () banked
  6913  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  6914  000C06  0A80               	xorlw	128
  6915  000C08  0100               	movlb	0	; () banked
  6916  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  6917  000C0C  B0D8               	btfsc	status,0,c
  6918  000C0E  D00B               	goto	l7030
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;doprnt.c: 1382: width -= c;
  6922  000C10  0100               	movlb	0	; () banked
  6923  000C12  51EA               	movf	printf@c& (0+255),w,b
  6924  000C14  0100               	movlb	0	; () banked
  6925  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  6926  000C18  0E00               	movlw	0
  6927  000C1A  0100               	movlb	0	; () banked
  6928  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  6929  000C1E  0EFF               	movlw	255
  6930  000C20  0100               	movlb	0	; () banked
  6931  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6932  000C24  D005               	goto	l7032
  6933  000C26                     l7030:
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;doprnt.c: 1383: else
  6937                           ;doprnt.c: 1384: width = 0;
  6938  000C26  0E00               	movlw	0
  6939  000C28  0100               	movlb	0	; () banked
  6940  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  6941  000C2C  0E00               	movlw	0
  6942  000C2E  6FE4               	movwf	printf@width& (0+255),b
  6943  000C30                     l7032:
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;doprnt.c: 1387: if(flag & 0x04) {
  6947  000C30  0100               	movlb	0	; () banked
  6948  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  6949  000C34  D021               	goto	l7044
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;doprnt.c: 1392: if(flag & 0x03)
  6953  000C36  0E03               	movlw	3
  6954  000C38  0100               	movlb	0	; () banked
  6955  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  6956  000C3C  0100               	movlb	0	; () banked
  6957  000C3E  6FC7               	movwf	??_printf& (0+255),b
  6958  000C40  0E00               	movlw	0
  6959  000C42  0100               	movlb	0	; () banked
  6960  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6961  000C46  0100               	movlb	0	; () banked
  6962  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  6963  000C4A  0100               	movlb	0	; () banked
  6964  000C4C  51C7               	movf	??_printf& (0+255),w,b
  6965  000C4E  0100               	movlb	0	; () banked
  6966  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6967  000C52  B4D8               	btfsc	status,2,c
  6968  000C54  D003               	goto	l7038
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;doprnt.c: 1393: (putch('-') );
  6972  000C56  0E2D               	movlw	45
  6973  000C58  ECAA  F01E         	call	_putch
  6974  000C5C                     l7038:
  6975                           
  6976                           ;doprnt.c: 1415: if(width)
  6977  000C5C  0100               	movlb	0	; () banked
  6978  000C5E  51E4               	movf	printf@width& (0+255),w,b
  6979  000C60  0100               	movlb	0	; () banked
  6980  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6981  000C64  B4D8               	btfsc	status,2,c
  6982  000C66  D0B6               	goto	l7066
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;doprnt.c: 1417: (putch('0') );
  6986                           
  6987                           ; BSR set to: 0
  6988                           
  6989                           ;doprnt.c: 1416: do
  6990  000C68  0E30               	movlw	48
  6991  000C6A  ECAA  F01E         	call	_putch
  6992                           
  6993                           ;doprnt.c: 1418: while(--width);
  6994  000C6E  0100               	movlb	0	; () banked
  6995  000C70  07E4               	decf	printf@width& (0+255),f,b
  6996  000C72  A0D8               	btfss	status,0,c
  6997  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  6998  000C76  D7F2               	goto	l7038
  6999  000C78                     l7044:
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;doprnt.c: 1422: {
  7003                           ;doprnt.c: 1424: if(width
  7004                           ;doprnt.c: 1428: )
  7005  000C78  0100               	movlb	0	; () banked
  7006  000C7A  51E4               	movf	printf@width& (0+255),w,b
  7007  000C7C  0100               	movlb	0	; () banked
  7008  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  7009  000C80  B4D8               	btfsc	status,2,c
  7010  000C82  D00D               	goto	l7050
  7011  000C84                     l7046:
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;doprnt.c: 1430: (putch(' ') );
  7015  000C84  0E20               	movlw	32
  7016  000C86  ECAA  F01E         	call	_putch
  7017                           
  7018                           ;doprnt.c: 1431: while(--width);
  7019  000C8A  0100               	movlb	0	; () banked
  7020  000C8C  07E4               	decf	printf@width& (0+255),f,b
  7021  000C8E  A0D8               	btfss	status,0,c
  7022  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  7023  000C92  0100               	movlb	0	; () banked
  7024  000C94  51E4               	movf	printf@width& (0+255),w,b
  7025  000C96  0100               	movlb	0	; () banked
  7026  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  7027  000C9A  A4D8               	btfss	status,2,c
  7028  000C9C  D7F3               	goto	l7046
  7029  000C9E                     l7050:
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;doprnt.c: 1438: if(flag & 0x03)
  7033  000C9E  0E03               	movlw	3
  7034  000CA0  0100               	movlb	0	; () banked
  7035  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  7036  000CA4  0100               	movlb	0	; () banked
  7037  000CA6  6FC7               	movwf	??_printf& (0+255),b
  7038  000CA8  0E00               	movlw	0
  7039  000CAA  0100               	movlb	0	; () banked
  7040  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7041  000CAE  0100               	movlb	0	; () banked
  7042  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  7043  000CB2  0100               	movlb	0	; () banked
  7044  000CB4  51C7               	movf	??_printf& (0+255),w,b
  7045  000CB6  0100               	movlb	0	; () banked
  7046  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7047  000CBA  B4D8               	btfsc	status,2,c
  7048  000CBC  D08B               	goto	l7066
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;doprnt.c: 1439: (putch('-') );
  7052  000CBE  0E2D               	movlw	45
  7053  000CC0  ECAA  F01E         	call	_putch
  7054                           
  7055                           ;doprnt.c: 1469: }
  7056                           ;doprnt.c: 1474: while(prec--) {
  7057  000CC4  D087               	goto	l7066
  7058  000CC6                     l7054:
  7059                           
  7060                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7061  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  7062  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  7063  000CCE  0100               	movlb	0	; () banked
  7064  000CD0  90D8               	bcf	status,0,c
  7065  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  7066  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  7067  000CD6  0100               	movlb	0	; () banked
  7068  000CD8  90D8               	bcf	status,0,c
  7069  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  7070  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  7071  000CDE  0ED9               	movlw	low _dpowers
  7072  000CE0  0100               	movlb	0	; () banked
  7073  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  7074  000CE4  6EF6               	movwf	tblptrl,c
  7075  000CE6  0EFD               	movlw	high _dpowers
  7076  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  7077  000CEA  6EF7               	movwf	tblptrh,c
  7078  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  7079  000CEC                     	endif
  7080  000CEC  0009               	tblrd		*+
  7081  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  7082  000CF2  0009               	tblrd		*+
  7083  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7084  000CF8  0009               	tblrd		*+
  7085  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7086  000CFE  000A               	tblrd		*-
  7087  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7088  000D04  C0E0  F023         	movff	printf@val,___lldiv@dividend
  7089  000D08  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  7090  000D0C  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  7091  000D10  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  7092  000D14  EC4D  F01A         	call	___lldiv	;wreg free
  7093  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  7094  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  7095  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  7096  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  7097  000D28  0E0A               	movlw	10
  7098  000D2A  6E34               	movwf	___llmod@divisor,c
  7099  000D2C  0E00               	movlw	0
  7100  000D2E  6E35               	movwf	___llmod@divisor+1,c
  7101  000D30  0E00               	movlw	0
  7102  000D32  6E36               	movwf	___llmod@divisor+2,c
  7103  000D34  0E00               	movlw	0
  7104  000D36  6E37               	movwf	___llmod@divisor+3,c
  7105  000D38  ECB0  F01B         	call	___llmod	;wreg free
  7106  000D3C  5030               	movf	?___llmod,w,c
  7107  000D3E  0F30               	addlw	48
  7108  000D40  0100               	movlb	0	; () banked
  7109  000D42  6FEA               	movwf	printf@c& (0+255),b
  7110                           
  7111                           ;doprnt.c: 1491: break;
  7112  000D44  D043               	goto	l7064
  7113  000D46                     l7056:
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;doprnt.c: 1499: {
  7117                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7118  000D46  C0E0  F023         	movff	printf@val,___lldiv@dividend
  7119  000D4A  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  7120  000D4E  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  7121  000D52  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  7122  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  7123  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  7124  000D5E  0100               	movlb	0	; () banked
  7125  000D60  90D8               	bcf	status,0,c
  7126  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  7127  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  7128  000D66  0100               	movlb	0	; () banked
  7129  000D68  90D8               	bcf	status,0,c
  7130  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  7131  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  7132  000D6E  0E4F               	movlw	low _hexpowers
  7133  000D70  0100               	movlb	0	; () banked
  7134  000D72  25C7               	addwf	??_printf& (0+255),w,b
  7135  000D74  6EF6               	movwf	tblptrl,c
  7136  000D76  0EFE               	movlw	high _hexpowers
  7137  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  7138  000D7A  6EF7               	movwf	tblptrh,c
  7139  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  7140  000D7C                     	endif
  7141  000D7C  0009               	tblrd		*+
  7142  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  7143  000D82  0009               	tblrd		*+
  7144  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7145  000D88  0009               	tblrd		*+
  7146  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7147  000D8E  000A               	tblrd		*-
  7148  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7149  000D94  EC4D  F01A         	call	___lldiv	;wreg free
  7150  000D98  5023               	movf	?___lldiv,w,c
  7151  000D9A  0B0F               	andlw	15
  7152  000D9C  0100               	movlb	0	; () banked
  7153  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7157  000DA0  0100               	movlb	0	; () banked
  7158  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  7159  000DA4  0D01               	mullw	1
  7160  000DA6  0E21               	movlw	low STR_24
  7161  000DA8  24F3               	addwf	prodl,w,c
  7162  000DAA  6EF6               	movwf	tblptrl,c
  7163  000DAC  0EFF               	movlw	high STR_24
  7164  000DAE  20F4               	addwfc	prodh,w,c
  7165  000DB0  6EF7               	movwf	tblptrh,c
  7166  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  7167  000DB2                     	endif
  7168  000DB2  0008               	tblrd		*
  7169  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;doprnt.c: 1523: }
  7173                           
  7174                           ;doprnt.c: 1508: }
  7175                           ;doprnt.c: 1510: break;
  7176  000DB8  D009               	goto	l7064
  7177  000DBA                     l7062:
  7178  000DBA  0100               	movlb	0	; () banked
  7179  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  7180  000DBE  0B80               	andlw	128
  7181                           
  7182                           ; Switch size 1, requested type "space"
  7183                           ; Number of cases is 2, Range of values is 0 to 128
  7184                           ; switch strategies available:
  7185                           ; Name         Instructions Cycles
  7186                           ; simple_byte            7     4 (average)
  7187                           ;	Chosen strategy is simple_byte
  7188  000DC0  0A00               	xorlw	0	; case 0
  7189  000DC2  B4D8               	btfsc	status,2,c
  7190  000DC4  D780               	goto	l7054
  7191  000DC6  0A80               	xorlw	128	; case 128
  7192  000DC8  B4D8               	btfsc	status,2,c
  7193  000DCA  D7BD               	goto	l7056
  7194  000DCC                     l7064:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;doprnt.c: 1524: (putch(c) );
  7198  000DCC  0100               	movlb	0	; () banked
  7199  000DCE  51EA               	movf	printf@c& (0+255),w,b
  7200  000DD0  ECAA  F01E         	call	_putch
  7201  000DD4                     l7066:
  7202  000DD4  0100               	movlb	0	; () banked
  7203  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  7204  000DD8  A0D8               	btfss	status,0,c
  7205  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  7206  000DDC  0100               	movlb	0	; () banked
  7207  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  7208  000DE0  E1EC               	bnz	l7062
  7209  000DE2  0100               	movlb	0	; () banked
  7210  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  7211  000DE6  A4D8               	btfss	status,2,c
  7212  000DE8  D7E8               	goto	l7062
  7213  000DEA                     l7068:
  7214  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  7215  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  7216  000DF2  0100               	movlb	0	; () banked
  7217  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  7218  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  7219  000DF8                     	if	0	;tblptru may be non-zero
  7220  000DF8                     	endif
  7221  000DF8                     	if	0	;tblptru may be non-zero
  7222  000DF8                     	endif
  7223  000DF8  0008               	tblrd		*
  7224  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  7225  000DFE  0100               	movlb	0	; () banked
  7226  000E00  51EA               	movf	printf@c& (0+255),w,b
  7227  000E02  B4D8               	btfsc	status,2,c
  7228  000E04  0012               	return	
  7229  000E06  EF11  F000         	goto	l6702
  7230  000E0A                     __end_of_printf:
  7231                           	opt stack 0
  7232                           tblptru	equ	0xFF8
  7233                           tblptrh	equ	0xFF7
  7234                           tblptrl	equ	0xFF6
  7235                           tablat	equ	0xFF5
  7236                           prodh	equ	0xFF4
  7237                           prodl	equ	0xFF3
  7238                           postinc0	equ	0xFEE
  7239                           wreg	equ	0xFE8
  7240                           postdec1	equ	0xFE5
  7241                           fsr1l	equ	0xFE1
  7242                           indf2	equ	0xFDF
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           fsr2h	equ	0xFDA
  7246                           fsr2l	equ	0xFD9
  7247                           status	equ	0xFD8
  7248                           
  7249 ;; *************** function _scale *****************
  7250 ;; Defined at:
  7251 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  scl             1    wreg     char 
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;  scl             1   30[BANK0 ] char 
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  3   24[BANK0 ] char 
  7258 ;; Registers used:
  7259 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7265 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;Total ram usage:        7 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    5
  7272 ;; This function calls:
  7273 ;;		___awdiv
  7274 ;;		___awmod
  7275 ;;		___ftmul
  7276 ;;		___wmul
  7277 ;; This function is called by:
  7278 ;;		_printf
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text15
  7283  001366                     __ptext15:
  7284                           	opt stack 0
  7285  001366                     _scale:
  7286                           	opt stack 23
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;incstack = 0
  7290                           ;scale@scl stored from wreg
  7291  001366  0100               	movlb	0	; () banked
  7292  001368  6F9E               	movwf	scale@scl& (0+255),b
  7293                           
  7294                           ;doprnt.c: 428: if(scl < 0) {
  7295  00136A  0100               	movlb	0	; () banked
  7296  00136C  AF9E               	btfss	scale@scl& (0+255),7,b
  7297  00136E  D104               	goto	l6364
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;doprnt.c: 429: scl = -scl;
  7301  001370  0100               	movlb	0	; () banked
  7302  001372  6D9E               	negf	scale@scl& (0+255),b
  7303                           
  7304                           ;doprnt.c: 430: if(scl>=110)
  7305  001374  0100               	movlb	0	; () banked
  7306  001376  519E               	movf	scale@scl& (0+255),w,b
  7307  001378  0A80               	xorlw	128
  7308  00137A  0F12               	addlw	-238
  7309  00137C  A0D8               	btfss	status,0,c
  7310  00137E  D094               	goto	l6354
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7314  001380  0E00               	movlw	0
  7315  001382  6E34               	movwf	___wmul@multiplicand+1,c
  7316  001384  0E03               	movlw	3
  7317  001386  6E33               	movwf	___wmul@multiplicand,c
  7318  001388  0E00               	movlw	0
  7319  00138A  6E2C               	movwf	___awdiv@divisor+1,c
  7320  00138C  0E0A               	movlw	10
  7321  00138E  6E2B               	movwf	___awdiv@divisor,c
  7322  001390  0E00               	movlw	0
  7323  001392  6E26               	movwf	___awmod@divisor+1,c
  7324  001394  0E64               	movlw	100
  7325  001396  6E25               	movwf	___awmod@divisor,c
  7326  001398  0100               	movlb	0	; () banked
  7327  00139A  519E               	movf	scale@scl& (0+255),w,b
  7328  00139C  6E23               	movwf	___awmod@dividend,c
  7329  00139E  6A24               	clrf	___awmod@dividend+1,c
  7330  0013A0  BE23               	btfsc	___awmod@dividend,7,c
  7331  0013A2  0624               	decf	___awmod@dividend+1,f,c
  7332  0013A4  EC0B  F01B         	call	___awmod	;wreg free
  7333  0013A8  C023  F029         	movff	?___awmod,___awdiv@dividend
  7334  0013AC  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7335  0013B0  EC0B  F01A         	call	___awdiv	;wreg free
  7336  0013B4  0E09               	movlw	9
  7337  0013B6  2429               	addwf	?___awdiv,w,c
  7338  0013B8  6E31               	movwf	___wmul@multiplier,c
  7339  0013BA  0E00               	movlw	0
  7340  0013BC  202A               	addwfc	?___awdiv+1,w,c
  7341  0013BE  6E32               	movwf	___wmul@multiplier+1,c
  7342  0013C0  EC74  F01E         	call	___wmul	;wreg free
  7343  0013C4  0E01               	movlw	low __npowers_
  7344  0013C6  2431               	addwf	?___wmul,w,c
  7345  0013C8  6EF6               	movwf	tblptrl,c
  7346  0013CA  0EFE               	movlw	high __npowers_
  7347  0013CC  2032               	addwfc	?___wmul+1,w,c
  7348  0013CE  6EF7               	movwf	tblptrh,c
  7349  0013D0                     	if	0	;There are less than 3 active tblptr bytes
  7350  0013D0                     	endif
  7351  0013D0  0009               	tblrd		*+
  7352  0013D2  CFF5 F08C          	movff	tablat,___ftmul@f2
  7353  0013D6  0009               	tblrd		*+
  7354  0013D8  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7355  0013DC  000A               	tblrd		*-
  7356  0013DE  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7357  0013E2  0E00               	movlw	0
  7358  0013E4  6E2C               	movwf	___awdiv@divisor+1,c
  7359  0013E6  0E64               	movlw	100
  7360  0013E8  6E2B               	movwf	___awdiv@divisor,c
  7361  0013EA  0100               	movlb	0	; () banked
  7362  0013EC  519E               	movf	scale@scl& (0+255),w,b
  7363  0013EE  6E29               	movwf	___awdiv@dividend,c
  7364  0013F0  6A2A               	clrf	___awdiv@dividend+1,c
  7365  0013F2  BE29               	btfsc	___awdiv@dividend,7,c
  7366  0013F4  062A               	decf	___awdiv@dividend+1,f,c
  7367  0013F6  EC0B  F01A         	call	___awdiv	;wreg free
  7368  0013FA  0E12               	movlw	18
  7369  0013FC  2429               	addwf	?___awdiv,w,c
  7370  0013FE  6E31               	movwf	___wmul@multiplier,c
  7371  001400  0E00               	movlw	0
  7372  001402  202A               	addwfc	?___awdiv+1,w,c
  7373  001404  6E32               	movwf	___wmul@multiplier+1,c
  7374  001406  0E00               	movlw	0
  7375  001408  6E34               	movwf	___wmul@multiplicand+1,c
  7376  00140A  0E03               	movlw	3
  7377  00140C  6E33               	movwf	___wmul@multiplicand,c
  7378  00140E  EC74  F01E         	call	___wmul	;wreg free
  7379  001412  0E01               	movlw	low __npowers_
  7380  001414  2431               	addwf	?___wmul,w,c
  7381  001416  6EF6               	movwf	tblptrl,c
  7382  001418  0EFE               	movlw	high __npowers_
  7383  00141A  2032               	addwfc	?___wmul+1,w,c
  7384  00141C  6EF7               	movwf	tblptrh,c
  7385  00141E                     	if	0	;There are less than 3 active tblptr bytes
  7386  00141E                     	endif
  7387  00141E  0009               	tblrd		*+
  7388  001420  CFF5 F089          	movff	tablat,___ftmul@f1
  7389  001424  0009               	tblrd		*+
  7390  001426  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7391  00142A  000A               	tblrd		*-
  7392  00142C  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7393  001430  EC9A  F00F         	call	___ftmul	;wreg free
  7394  001434  C089  F09B         	movff	?___ftmul,_scale$1418
  7395  001438  C08A  F09C         	movff	?___ftmul+1,_scale$1418+1
  7396  00143C  C08B  F09D         	movff	?___ftmul+2,_scale$1418+2
  7397                           
  7398                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7399  001440  C09B  F089         	movff	_scale$1418,___ftmul@f1
  7400  001444  C09C  F08A         	movff	_scale$1418+1,___ftmul@f1+1
  7401  001448  C09D  F08B         	movff	_scale$1418+2,___ftmul@f1+2
  7402  00144C  0E00               	movlw	0
  7403  00144E  6E34               	movwf	___wmul@multiplicand+1,c
  7404  001450  0E03               	movlw	3
  7405  001452  6E33               	movwf	___wmul@multiplicand,c
  7406  001454  0E00               	movlw	0
  7407  001456  6E26               	movwf	___awmod@divisor+1,c
  7408  001458  0E0A               	movlw	10
  7409  00145A  6E25               	movwf	___awmod@divisor,c
  7410  00145C  0100               	movlb	0	; () banked
  7411  00145E  519E               	movf	scale@scl& (0+255),w,b
  7412  001460  6E23               	movwf	___awmod@dividend,c
  7413  001462  6A24               	clrf	___awmod@dividend+1,c
  7414  001464  BE23               	btfsc	___awmod@dividend,7,c
  7415  001466  0624               	decf	___awmod@dividend+1,f,c
  7416  001468  EC0B  F01B         	call	___awmod	;wreg free
  7417  00146C  C023  F031         	movff	?___awmod,___wmul@multiplier
  7418  001470  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7419  001474  EC74  F01E         	call	___wmul	;wreg free
  7420  001478  0E01               	movlw	low __npowers_
  7421  00147A  2431               	addwf	?___wmul,w,c
  7422  00147C  6EF6               	movwf	tblptrl,c
  7423  00147E  0EFE               	movlw	high __npowers_
  7424  001480  2032               	addwfc	?___wmul+1,w,c
  7425  001482  6EF7               	movwf	tblptrh,c
  7426  001484                     	if	0	;There are less than 3 active tblptr bytes
  7427  001484                     	endif
  7428  001484  0009               	tblrd		*+
  7429  001486  CFF5 F08C          	movff	tablat,___ftmul@f2
  7430  00148A  0009               	tblrd		*+
  7431  00148C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7432  001490  000A               	tblrd		*-
  7433  001492  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7434  001496  EC9A  F00F         	call	___ftmul	;wreg free
  7435  00149A  C089  F098         	movff	?___ftmul,?_scale
  7436  00149E  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7437  0014A2  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7438  0014A6  0012               	return	
  7439  0014A8                     l6354:
  7440                           
  7441                           ;doprnt.c: 432: else if(scl > 10)
  7442  0014A8  0100               	movlb	0	; () banked
  7443  0014AA  519E               	movf	scale@scl& (0+255),w,b
  7444  0014AC  0A80               	xorlw	128
  7445  0014AE  0F75               	addlw	-139
  7446  0014B0  A0D8               	btfss	status,0,c
  7447  0014B2  D04F               	goto	l6360
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7451  0014B4  0E00               	movlw	0
  7452  0014B6  6E2C               	movwf	___awdiv@divisor+1,c
  7453  0014B8  0E0A               	movlw	10
  7454  0014BA  6E2B               	movwf	___awdiv@divisor,c
  7455  0014BC  0100               	movlb	0	; () banked
  7456  0014BE  519E               	movf	scale@scl& (0+255),w,b
  7457  0014C0  6E29               	movwf	___awdiv@dividend,c
  7458  0014C2  6A2A               	clrf	___awdiv@dividend+1,c
  7459  0014C4  BE29               	btfsc	___awdiv@dividend,7,c
  7460  0014C6  062A               	decf	___awdiv@dividend+1,f,c
  7461  0014C8  EC0B  F01A         	call	___awdiv	;wreg free
  7462  0014CC  0E09               	movlw	9
  7463  0014CE  2429               	addwf	?___awdiv,w,c
  7464  0014D0  6E31               	movwf	___wmul@multiplier,c
  7465  0014D2  0E00               	movlw	0
  7466  0014D4  202A               	addwfc	?___awdiv+1,w,c
  7467  0014D6  6E32               	movwf	___wmul@multiplier+1,c
  7468  0014D8  0E00               	movlw	0
  7469  0014DA  6E34               	movwf	___wmul@multiplicand+1,c
  7470  0014DC  0E03               	movlw	3
  7471  0014DE  6E33               	movwf	___wmul@multiplicand,c
  7472  0014E0  EC74  F01E         	call	___wmul	;wreg free
  7473  0014E4  0E01               	movlw	low __npowers_
  7474  0014E6  2431               	addwf	?___wmul,w,c
  7475  0014E8  6EF6               	movwf	tblptrl,c
  7476  0014EA  0EFE               	movlw	high __npowers_
  7477  0014EC  2032               	addwfc	?___wmul+1,w,c
  7478  0014EE  6EF7               	movwf	tblptrh,c
  7479  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  7480  0014F0                     	endif
  7481  0014F0  0009               	tblrd		*+
  7482  0014F2  CFF5 F089          	movff	tablat,___ftmul@f1
  7483  0014F6  0009               	tblrd		*+
  7484  0014F8  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7485  0014FC  000A               	tblrd		*-
  7486  0014FE  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7487  001502  0E00               	movlw	0
  7488  001504  6E34               	movwf	___wmul@multiplicand+1,c
  7489  001506  0E03               	movlw	3
  7490  001508  6E33               	movwf	___wmul@multiplicand,c
  7491  00150A  0E00               	movlw	0
  7492  00150C  6E26               	movwf	___awmod@divisor+1,c
  7493  00150E  0E0A               	movlw	10
  7494  001510  6E25               	movwf	___awmod@divisor,c
  7495  001512  0100               	movlb	0	; () banked
  7496  001514  519E               	movf	scale@scl& (0+255),w,b
  7497  001516  6E23               	movwf	___awmod@dividend,c
  7498  001518  6A24               	clrf	___awmod@dividend+1,c
  7499  00151A  BE23               	btfsc	___awmod@dividend,7,c
  7500  00151C  0624               	decf	___awmod@dividend+1,f,c
  7501  00151E  EC0B  F01B         	call	___awmod	;wreg free
  7502  001522  C023  F031         	movff	?___awmod,___wmul@multiplier
  7503  001526  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7504  00152A  EC74  F01E         	call	___wmul	;wreg free
  7505  00152E  0E01               	movlw	low __npowers_
  7506  001530  2431               	addwf	?___wmul,w,c
  7507  001532  6EF6               	movwf	tblptrl,c
  7508  001534  0EFE               	movlw	high __npowers_
  7509  001536  2032               	addwfc	?___wmul+1,w,c
  7510  001538  6EF7               	movwf	tblptrh,c
  7511  00153A                     	if	0	;There are less than 3 active tblptr bytes
  7512  00153A                     	endif
  7513  00153A  0009               	tblrd		*+
  7514  00153C  CFF5 F08C          	movff	tablat,___ftmul@f2
  7515  001540  0009               	tblrd		*+
  7516  001542  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7517  001546  000A               	tblrd		*-
  7518  001548  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7519  00154C  EC9A  F00F         	call	___ftmul	;wreg free
  7520  001550  D7A4               	goto	L4
  7521  001552                     l6360:
  7522                           
  7523                           ;doprnt.c: 434: return _npowers_[scl];
  7524  001552  0100               	movlb	0	; () banked
  7525  001554  519E               	movf	scale@scl& (0+255),w,b
  7526  001556  0D03               	mullw	3
  7527  001558  0E01               	movlw	low __npowers_
  7528  00155A  24F3               	addwf	prodl,w,c
  7529  00155C  6EF6               	movwf	tblptrl,c
  7530  00155E  0EFE               	movlw	high __npowers_
  7531  001560  20F4               	addwfc	prodh,w,c
  7532  001562  6EF7               	movwf	tblptrh,c
  7533  001564                     	if	0	;There are less than 3 active tblptr bytes
  7534  001564                     	endif
  7535  001564  0009               	tblrd		*+
  7536  001566  CFF5 F098          	movff	tablat,?_scale
  7537  00156A  0009               	tblrd		*+
  7538  00156C  CFF5 F099          	movff	tablat,?_scale+1
  7539  001570  000A               	tblrd		*-
  7540  001572  CFF5 F09A          	movff	tablat,?_scale+2
  7541                           
  7542                           ; BSR set to: 0
  7543  001576  0012               	return	
  7544  001578                     l6364:
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;doprnt.c: 435: }
  7548                           ;doprnt.c: 436: if(scl>=110)
  7549  001578  0100               	movlb	0	; () banked
  7550  00157A  519E               	movf	scale@scl& (0+255),w,b
  7551  00157C  0A80               	xorlw	128
  7552  00157E  0F12               	addlw	-238
  7553  001580  A0D8               	btfss	status,0,c
  7554  001582  D094               	goto	l6372
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7558  001584  0E00               	movlw	0
  7559  001586  6E34               	movwf	___wmul@multiplicand+1,c
  7560  001588  0E03               	movlw	3
  7561  00158A  6E33               	movwf	___wmul@multiplicand,c
  7562  00158C  0E00               	movlw	0
  7563  00158E  6E2C               	movwf	___awdiv@divisor+1,c
  7564  001590  0E0A               	movlw	10
  7565  001592  6E2B               	movwf	___awdiv@divisor,c
  7566  001594  0E00               	movlw	0
  7567  001596  6E26               	movwf	___awmod@divisor+1,c
  7568  001598  0E64               	movlw	100
  7569  00159A  6E25               	movwf	___awmod@divisor,c
  7570  00159C  0100               	movlb	0	; () banked
  7571  00159E  519E               	movf	scale@scl& (0+255),w,b
  7572  0015A0  6E23               	movwf	___awmod@dividend,c
  7573  0015A2  6A24               	clrf	___awmod@dividend+1,c
  7574  0015A4  BE23               	btfsc	___awmod@dividend,7,c
  7575  0015A6  0624               	decf	___awmod@dividend+1,f,c
  7576  0015A8  EC0B  F01B         	call	___awmod	;wreg free
  7577  0015AC  C023  F029         	movff	?___awmod,___awdiv@dividend
  7578  0015B0  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7579  0015B4  EC0B  F01A         	call	___awdiv	;wreg free
  7580  0015B8  0E09               	movlw	9
  7581  0015BA  2429               	addwf	?___awdiv,w,c
  7582  0015BC  6E31               	movwf	___wmul@multiplier,c
  7583  0015BE  0E00               	movlw	0
  7584  0015C0  202A               	addwfc	?___awdiv+1,w,c
  7585  0015C2  6E32               	movwf	___wmul@multiplier+1,c
  7586  0015C4  EC74  F01E         	call	___wmul	;wreg free
  7587  0015C8  0E28               	movlw	low __powers_
  7588  0015CA  2431               	addwf	?___wmul,w,c
  7589  0015CC  6EF6               	movwf	tblptrl,c
  7590  0015CE  0EFE               	movlw	high __powers_
  7591  0015D0  2032               	addwfc	?___wmul+1,w,c
  7592  0015D2  6EF7               	movwf	tblptrh,c
  7593  0015D4                     	if	0	;There are less than 3 active tblptr bytes
  7594  0015D4                     	endif
  7595  0015D4  0009               	tblrd		*+
  7596  0015D6  CFF5 F08C          	movff	tablat,___ftmul@f2
  7597  0015DA  0009               	tblrd		*+
  7598  0015DC  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7599  0015E0  000A               	tblrd		*-
  7600  0015E2  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7601  0015E6  0E00               	movlw	0
  7602  0015E8  6E2C               	movwf	___awdiv@divisor+1,c
  7603  0015EA  0E64               	movlw	100
  7604  0015EC  6E2B               	movwf	___awdiv@divisor,c
  7605  0015EE  0100               	movlb	0	; () banked
  7606  0015F0  519E               	movf	scale@scl& (0+255),w,b
  7607  0015F2  6E29               	movwf	___awdiv@dividend,c
  7608  0015F4  6A2A               	clrf	___awdiv@dividend+1,c
  7609  0015F6  BE29               	btfsc	___awdiv@dividend,7,c
  7610  0015F8  062A               	decf	___awdiv@dividend+1,f,c
  7611  0015FA  EC0B  F01A         	call	___awdiv	;wreg free
  7612  0015FE  0E12               	movlw	18
  7613  001600  2429               	addwf	?___awdiv,w,c
  7614  001602  6E31               	movwf	___wmul@multiplier,c
  7615  001604  0E00               	movlw	0
  7616  001606  202A               	addwfc	?___awdiv+1,w,c
  7617  001608  6E32               	movwf	___wmul@multiplier+1,c
  7618  00160A  0E00               	movlw	0
  7619  00160C  6E34               	movwf	___wmul@multiplicand+1,c
  7620  00160E  0E03               	movlw	3
  7621  001610  6E33               	movwf	___wmul@multiplicand,c
  7622  001612  EC74  F01E         	call	___wmul	;wreg free
  7623  001616  0E28               	movlw	low __powers_
  7624  001618  2431               	addwf	?___wmul,w,c
  7625  00161A  6EF6               	movwf	tblptrl,c
  7626  00161C  0EFE               	movlw	high __powers_
  7627  00161E  2032               	addwfc	?___wmul+1,w,c
  7628  001620  6EF7               	movwf	tblptrh,c
  7629  001622                     	if	0	;There are less than 3 active tblptr bytes
  7630  001622                     	endif
  7631  001622  0009               	tblrd		*+
  7632  001624  CFF5 F089          	movff	tablat,___ftmul@f1
  7633  001628  0009               	tblrd		*+
  7634  00162A  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7635  00162E  000A               	tblrd		*-
  7636  001630  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7637  001634  EC9A  F00F         	call	___ftmul	;wreg free
  7638  001638  C089  F09B         	movff	?___ftmul,_scale$1418
  7639  00163C  C08A  F09C         	movff	?___ftmul+1,_scale$1418+1
  7640  001640  C08B  F09D         	movff	?___ftmul+2,_scale$1418+2
  7641                           
  7642                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7643  001644  C09B  F089         	movff	_scale$1418,___ftmul@f1
  7644  001648  C09C  F08A         	movff	_scale$1418+1,___ftmul@f1+1
  7645  00164C  C09D  F08B         	movff	_scale$1418+2,___ftmul@f1+2
  7646  001650  0E00               	movlw	0
  7647  001652  6E34               	movwf	___wmul@multiplicand+1,c
  7648  001654  0E03               	movlw	3
  7649  001656  6E33               	movwf	___wmul@multiplicand,c
  7650  001658  0E00               	movlw	0
  7651  00165A  6E26               	movwf	___awmod@divisor+1,c
  7652  00165C  0E0A               	movlw	10
  7653  00165E  6E25               	movwf	___awmod@divisor,c
  7654  001660  0100               	movlb	0	; () banked
  7655  001662  519E               	movf	scale@scl& (0+255),w,b
  7656  001664  6E23               	movwf	___awmod@dividend,c
  7657  001666  6A24               	clrf	___awmod@dividend+1,c
  7658  001668  BE23               	btfsc	___awmod@dividend,7,c
  7659  00166A  0624               	decf	___awmod@dividend+1,f,c
  7660  00166C  EC0B  F01B         	call	___awmod	;wreg free
  7661  001670  C023  F031         	movff	?___awmod,___wmul@multiplier
  7662  001674  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7663  001678  EC74  F01E         	call	___wmul	;wreg free
  7664  00167C  0E28               	movlw	low __powers_
  7665  00167E  2431               	addwf	?___wmul,w,c
  7666  001680  6EF6               	movwf	tblptrl,c
  7667  001682  0EFE               	movlw	high __powers_
  7668  001684  2032               	addwfc	?___wmul+1,w,c
  7669  001686  6EF7               	movwf	tblptrh,c
  7670  001688                     	if	0	;There are less than 3 active tblptr bytes
  7671  001688                     	endif
  7672  001688  0009               	tblrd		*+
  7673  00168A  CFF5 F08C          	movff	tablat,___ftmul@f2
  7674  00168E  0009               	tblrd		*+
  7675  001690  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7676  001694  000A               	tblrd		*-
  7677  001696  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7678  00169A  EC9A  F00F         	call	___ftmul	;wreg free
  7679  00169E  C089  F098         	movff	?___ftmul,?_scale
  7680  0016A2  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7681  0016A6  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7682  0016AA  0012               	return	
  7683  0016AC                     l6372:
  7684                           
  7685                           ;doprnt.c: 438: else if(scl > 10)
  7686  0016AC  0100               	movlb	0	; () banked
  7687  0016AE  519E               	movf	scale@scl& (0+255),w,b
  7688  0016B0  0A80               	xorlw	128
  7689  0016B2  0F75               	addlw	-139
  7690  0016B4  A0D8               	btfss	status,0,c
  7691  0016B6  D04F               	goto	l6378
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7695  0016B8  0E00               	movlw	0
  7696  0016BA  6E2C               	movwf	___awdiv@divisor+1,c
  7697  0016BC  0E0A               	movlw	10
  7698  0016BE  6E2B               	movwf	___awdiv@divisor,c
  7699  0016C0  0100               	movlb	0	; () banked
  7700  0016C2  519E               	movf	scale@scl& (0+255),w,b
  7701  0016C4  6E29               	movwf	___awdiv@dividend,c
  7702  0016C6  6A2A               	clrf	___awdiv@dividend+1,c
  7703  0016C8  BE29               	btfsc	___awdiv@dividend,7,c
  7704  0016CA  062A               	decf	___awdiv@dividend+1,f,c
  7705  0016CC  EC0B  F01A         	call	___awdiv	;wreg free
  7706  0016D0  0E09               	movlw	9
  7707  0016D2  2429               	addwf	?___awdiv,w,c
  7708  0016D4  6E31               	movwf	___wmul@multiplier,c
  7709  0016D6  0E00               	movlw	0
  7710  0016D8  202A               	addwfc	?___awdiv+1,w,c
  7711  0016DA  6E32               	movwf	___wmul@multiplier+1,c
  7712  0016DC  0E00               	movlw	0
  7713  0016DE  6E34               	movwf	___wmul@multiplicand+1,c
  7714  0016E0  0E03               	movlw	3
  7715  0016E2  6E33               	movwf	___wmul@multiplicand,c
  7716  0016E4  EC74  F01E         	call	___wmul	;wreg free
  7717  0016E8  0E28               	movlw	low __powers_
  7718  0016EA  2431               	addwf	?___wmul,w,c
  7719  0016EC  6EF6               	movwf	tblptrl,c
  7720  0016EE  0EFE               	movlw	high __powers_
  7721  0016F0  2032               	addwfc	?___wmul+1,w,c
  7722  0016F2  6EF7               	movwf	tblptrh,c
  7723  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  7724  0016F4                     	endif
  7725  0016F4  0009               	tblrd		*+
  7726  0016F6  CFF5 F089          	movff	tablat,___ftmul@f1
  7727  0016FA  0009               	tblrd		*+
  7728  0016FC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7729  001700  000A               	tblrd		*-
  7730  001702  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7731  001706  0E00               	movlw	0
  7732  001708  6E34               	movwf	___wmul@multiplicand+1,c
  7733  00170A  0E03               	movlw	3
  7734  00170C  6E33               	movwf	___wmul@multiplicand,c
  7735  00170E  0E00               	movlw	0
  7736  001710  6E26               	movwf	___awmod@divisor+1,c
  7737  001712  0E0A               	movlw	10
  7738  001714  6E25               	movwf	___awmod@divisor,c
  7739  001716  0100               	movlb	0	; () banked
  7740  001718  519E               	movf	scale@scl& (0+255),w,b
  7741  00171A  6E23               	movwf	___awmod@dividend,c
  7742  00171C  6A24               	clrf	___awmod@dividend+1,c
  7743  00171E  BE23               	btfsc	___awmod@dividend,7,c
  7744  001720  0624               	decf	___awmod@dividend+1,f,c
  7745  001722  EC0B  F01B         	call	___awmod	;wreg free
  7746  001726  C023  F031         	movff	?___awmod,___wmul@multiplier
  7747  00172A  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7748  00172E  EC74  F01E         	call	___wmul	;wreg free
  7749  001732  0E28               	movlw	low __powers_
  7750  001734  2431               	addwf	?___wmul,w,c
  7751  001736  6EF6               	movwf	tblptrl,c
  7752  001738  0EFE               	movlw	high __powers_
  7753  00173A  2032               	addwfc	?___wmul+1,w,c
  7754  00173C  6EF7               	movwf	tblptrh,c
  7755  00173E                     	if	0	;There are less than 3 active tblptr bytes
  7756  00173E                     	endif
  7757  00173E  0009               	tblrd		*+
  7758  001740  CFF5 F08C          	movff	tablat,___ftmul@f2
  7759  001744  0009               	tblrd		*+
  7760  001746  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7761  00174A  000A               	tblrd		*-
  7762  00174C  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7763  001750  EC9A  F00F         	call	___ftmul	;wreg free
  7764  001754  D7A4               	goto	L5
  7765  001756                     l6378:
  7766                           
  7767                           ;doprnt.c: 440: return _powers_[scl];
  7768  001756  0100               	movlb	0	; () banked
  7769  001758  519E               	movf	scale@scl& (0+255),w,b
  7770  00175A  0D03               	mullw	3
  7771  00175C  0E28               	movlw	low __powers_
  7772  00175E  24F3               	addwf	prodl,w,c
  7773  001760  6EF6               	movwf	tblptrl,c
  7774  001762  0EFE               	movlw	high __powers_
  7775  001764  20F4               	addwfc	prodh,w,c
  7776  001766  6EF7               	movwf	tblptrh,c
  7777  001768                     	if	0	;There are less than 3 active tblptr bytes
  7778  001768                     	endif
  7779  001768  0009               	tblrd		*+
  7780  00176A  CFF5 F098          	movff	tablat,?_scale
  7781  00176E  0009               	tblrd		*+
  7782  001770  CFF5 F099          	movff	tablat,?_scale+1
  7783  001774  000A               	tblrd		*-
  7784  001776  CFF5 F09A          	movff	tablat,?_scale+2
  7785  00177A  0012               	return	
  7786  00177C                     __end_of_scale:
  7787                           	opt stack 0
  7788                           tblptru	equ	0xFF8
  7789                           tblptrh	equ	0xFF7
  7790                           tblptrl	equ	0xFF6
  7791                           tablat	equ	0xFF5
  7792                           prodh	equ	0xFF4
  7793                           prodl	equ	0xFF3
  7794                           postinc0	equ	0xFEE
  7795                           wreg	equ	0xFE8
  7796                           postdec1	equ	0xFE5
  7797                           fsr1l	equ	0xFE1
  7798                           indf2	equ	0xFDF
  7799                           postinc2	equ	0xFDE
  7800                           postdec2	equ	0xFDD
  7801                           fsr2h	equ	0xFDA
  7802                           fsr2l	equ	0xFD9
  7803                           status	equ	0xFD8
  7804                           
  7805 ;; *************** function _putch *****************
  7806 ;; Defined at:
  7807 ;;		line 35 in file "lcd.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  data            1    wreg     unsigned char 
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;  data            1   38[COMRAM] unsigned char 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, status,2, status,0, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;Total ram usage:        1 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    6
  7828 ;; This function calls:
  7829 ;;		_lcdNewline
  7830 ;;		_lcdNibble
  7831 ;; This function is called by:
  7832 ;;		_printf
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text16
  7837  003D54                     __ptext16:
  7838                           	opt stack 0
  7839  003D54                     _putch:
  7840                           	opt stack 22
  7841                           
  7842                           ;incstack = 0
  7843                           ;putch@data stored from wreg
  7844  003D54  6E27               	movwf	putch@data,c
  7845                           
  7846                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7847  003D56  0E0A               	movlw	10
  7848  003D58  1827               	xorwf	putch@data,w,c
  7849  003D5A  A4D8               	btfss	status,2,c
  7850  003D5C  D003               	goto	l226
  7851  003D5E  EC24  F01F         	call	_lcdNewline	;wreg free
  7852  003D62  0012               	return	
  7853  003D64                     l226:
  7854                           
  7855                           ;lcd.c: 37: else
  7856                           ;lcd.c: 38: {
  7857                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7858  003D64  848C               	bsf	3980,2,c	;volatile
  7859                           
  7860                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7861  003D66  0E74               	movlw	116
  7862  003D68                     u8067:
  7863  003D68  2EE8               	decfsz	wreg,f,c
  7864  003D6A  D7FE               	bra	u8067
  7865  003D6C  D000               	nop2	
  7866                           
  7867                           ;lcd.c: 41: lcdNibble(data);
  7868  003D6E  5027               	movf	putch@data,w,c
  7869  003D70  ECE3  F01B         	call	_lcdNibble
  7870  003D74  0012               	return	
  7871  003D76                     __end_of_putch:
  7872                           	opt stack 0
  7873                           tblptru	equ	0xFF8
  7874                           tblptrh	equ	0xFF7
  7875                           tblptrl	equ	0xFF6
  7876                           tablat	equ	0xFF5
  7877                           prodh	equ	0xFF4
  7878                           prodl	equ	0xFF3
  7879                           postinc0	equ	0xFEE
  7880                           wreg	equ	0xFE8
  7881                           postdec1	equ	0xFE5
  7882                           fsr1l	equ	0xFE1
  7883                           indf2	equ	0xFDF
  7884                           postinc2	equ	0xFDE
  7885                           postdec2	equ	0xFDD
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function _lcdNewline *****************
  7891 ;; Defined at:
  7892 ;;		line 78 in file "lcd.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, status,2, status,0, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;Total ram usage:        0 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    5
  7913 ;; This function calls:
  7914 ;;		_lcdInst
  7915 ;; This function is called by:
  7916 ;;		_putch
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           	psect	text17
  7921  003E48                     __ptext17:
  7922                           	opt stack 0
  7923  003E48                     _lcdNewline:
  7924                           	opt stack 22
  7925                           
  7926                           ;lcd.c: 79: lcdInst(0b11000000);
  7927                           
  7928                           ;incstack = 0
  7929  003E48  0EC0               	movlw	192
  7930  003E4A  ECBB  F01E         	call	_lcdInst
  7931  003E4E  0012               	return		;funcret
  7932  003E50                     __end_of_lcdNewline:
  7933                           	opt stack 0
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           postinc0	equ	0xFEE
  7941                           wreg	equ	0xFE8
  7942                           postdec1	equ	0xFE5
  7943                           fsr1l	equ	0xFE1
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           fsr2h	equ	0xFDA
  7948                           fsr2l	equ	0xFD9
  7949                           status	equ	0xFD8
  7950                           
  7951 ;; *************** function _isdigit *****************
  7952 ;; Defined at:
  7953 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;  c               1    wreg     unsigned char 
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;  c               1   36[COMRAM] unsigned char 
  7958 ;; Return value:  Size  Location     Type
  7959 ;;		None               void
  7960 ;; Registers used:
  7961 ;;		wreg, status,2, status,0
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;Total ram usage:        3 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:    3
  7974 ;; This function calls:
  7975 ;;		Nothing
  7976 ;; This function is called by:
  7977 ;;		_printf
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text18
  7982  003DB8                     __ptext18:
  7983                           	opt stack 0
  7984  003DB8                     _isdigit:
  7985                           	opt stack 25
  7986                           
  7987                           ;incstack = 0
  7988                           ;isdigit@c stored from wreg
  7989  003DB8  6E25               	movwf	isdigit@c,c
  7990  003DBA  0E00               	movlw	0
  7991  003DBC  6E24               	movwf	_isdigit$1050,c
  7992  003DBE  0E3A               	movlw	58
  7993  003DC0  6025               	cpfslt	isdigit@c,c
  7994  003DC2  D005               	goto	l6390
  7995  003DC4  0E2F               	movlw	47
  7996  003DC6  6425               	cpfsgt	isdigit@c,c
  7997  003DC8  D002               	goto	l6390
  7998  003DCA  0E01               	movlw	1
  7999  003DCC  6E24               	movwf	_isdigit$1050,c
  8000  003DCE                     l6390:
  8001  003DCE  C024  F023         	movff	_isdigit$1050,??_isdigit
  8002  003DD2  3023               	rrcf	??_isdigit,w,c
  8003  003DD4  0012               	return	
  8004  003DD6                     __end_of_isdigit:
  8005                           	opt stack 0
  8006                           tblptru	equ	0xFF8
  8007                           tblptrh	equ	0xFF7
  8008                           tblptrl	equ	0xFF6
  8009                           tablat	equ	0xFF5
  8010                           prodh	equ	0xFF4
  8011                           prodl	equ	0xFF3
  8012                           postinc0	equ	0xFEE
  8013                           wreg	equ	0xFE8
  8014                           postdec1	equ	0xFE5
  8015                           fsr1l	equ	0xFE1
  8016                           indf2	equ	0xFDF
  8017                           postinc2	equ	0xFDE
  8018                           postdec2	equ	0xFDD
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023 ;; *************** function _fround *****************
  8024 ;; Defined at:
  8025 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  prec            1    wreg     unsigned char 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  prec            1   33[BANK0 ] unsigned char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  3   24[BANK0 ] unsigned char 
  8032 ;; Registers used:
  8033 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8039 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;Total ram usage:       10 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    5
  8046 ;; This function calls:
  8047 ;;		___awdiv
  8048 ;;		___awmod
  8049 ;;		___ftmul
  8050 ;;		___wmul
  8051 ;; This function is called by:
  8052 ;;		_printf
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text19
  8057  001CD4                     __ptext19:
  8058                           	opt stack 0
  8059  001CD4                     _fround:
  8060                           	opt stack 23
  8061                           
  8062                           ;incstack = 0
  8063                           ;fround@prec stored from wreg
  8064  001CD4  0100               	movlb	0	; () banked
  8065  001CD6  6FA1               	movwf	fround@prec& (0+255),b
  8066                           
  8067                           ;doprnt.c: 413: if(prec>=110)
  8068  001CD8  0E6D               	movlw	109
  8069  001CDA  0100               	movlb	0	; () banked
  8070  001CDC  65A1               	cpfsgt	fround@prec& (0+255),b
  8071  001CDE  D0A2               	goto	l6332
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8075  001CE0  0E00               	movlw	0
  8076  001CE2  6E34               	movwf	___wmul@multiplicand+1,c
  8077  001CE4  0E03               	movlw	3
  8078  001CE6  6E33               	movwf	___wmul@multiplicand,c
  8079  001CE8  0E00               	movlw	0
  8080  001CEA  6E2C               	movwf	___awdiv@divisor+1,c
  8081  001CEC  0E0A               	movlw	10
  8082  001CEE  6E2B               	movwf	___awdiv@divisor,c
  8083  001CF0  0E00               	movlw	0
  8084  001CF2  6E26               	movwf	___awmod@divisor+1,c
  8085  001CF4  0E64               	movlw	100
  8086  001CF6  6E25               	movwf	___awmod@divisor,c
  8087  001CF8  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8088  001CFC  6A24               	clrf	___awmod@dividend+1,c
  8089  001CFE  EC0B  F01B         	call	___awmod	;wreg free
  8090  001D02  C023  F029         	movff	?___awmod,___awdiv@dividend
  8091  001D06  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8092  001D0A  EC0B  F01A         	call	___awdiv	;wreg free
  8093  001D0E  0E09               	movlw	9
  8094  001D10  2429               	addwf	?___awdiv,w,c
  8095  001D12  6E31               	movwf	___wmul@multiplier,c
  8096  001D14  0E00               	movlw	0
  8097  001D16  202A               	addwfc	?___awdiv+1,w,c
  8098  001D18  6E32               	movwf	___wmul@multiplier+1,c
  8099  001D1A  EC74  F01E         	call	___wmul	;wreg free
  8100  001D1E  0E01               	movlw	low __npowers_
  8101  001D20  2431               	addwf	?___wmul,w,c
  8102  001D22  6EF6               	movwf	tblptrl,c
  8103  001D24  0EFE               	movlw	high __npowers_
  8104  001D26  2032               	addwfc	?___wmul+1,w,c
  8105  001D28  6EF7               	movwf	tblptrh,c
  8106  001D2A                     	if	0	;There are less than 3 active tblptr bytes
  8107  001D2A                     	endif
  8108  001D2A  0009               	tblrd		*+
  8109  001D2C  CFF5 F08C          	movff	tablat,___ftmul@f2
  8110  001D30  0009               	tblrd		*+
  8111  001D32  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8112  001D36  000A               	tblrd		*-
  8113  001D38  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8114  001D3C  0E00               	movlw	0
  8115  001D3E  6E2C               	movwf	___awdiv@divisor+1,c
  8116  001D40  0E64               	movlw	100
  8117  001D42  6E2B               	movwf	___awdiv@divisor,c
  8118  001D44  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8119  001D48  6A2A               	clrf	___awdiv@dividend+1,c
  8120  001D4A  EC0B  F01A         	call	___awdiv	;wreg free
  8121  001D4E  0E12               	movlw	18
  8122  001D50  2429               	addwf	?___awdiv,w,c
  8123  001D52  6E31               	movwf	___wmul@multiplier,c
  8124  001D54  0E00               	movlw	0
  8125  001D56  202A               	addwfc	?___awdiv+1,w,c
  8126  001D58  6E32               	movwf	___wmul@multiplier+1,c
  8127  001D5A  0E00               	movlw	0
  8128  001D5C  6E34               	movwf	___wmul@multiplicand+1,c
  8129  001D5E  0E03               	movlw	3
  8130  001D60  6E33               	movwf	___wmul@multiplicand,c
  8131  001D62  EC74  F01E         	call	___wmul	;wreg free
  8132  001D66  0E01               	movlw	low __npowers_
  8133  001D68  2431               	addwf	?___wmul,w,c
  8134  001D6A  6EF6               	movwf	tblptrl,c
  8135  001D6C  0EFE               	movlw	high __npowers_
  8136  001D6E  2032               	addwfc	?___wmul+1,w,c
  8137  001D70  6EF7               	movwf	tblptrh,c
  8138  001D72                     	if	0	;There are less than 3 active tblptr bytes
  8139  001D72                     	endif
  8140  001D72  0009               	tblrd		*+
  8141  001D74  CFF5 F089          	movff	tablat,___ftmul@f1
  8142  001D78  0009               	tblrd		*+
  8143  001D7A  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8144  001D7E  000A               	tblrd		*-
  8145  001D80  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8146  001D84  EC9A  F00F         	call	___ftmul	;wreg free
  8147  001D88  C089  F09E         	movff	?___ftmul,_fround$1416
  8148  001D8C  C08A  F09F         	movff	?___ftmul+1,_fround$1416+1
  8149  001D90  C08B  F0A0         	movff	?___ftmul+2,_fround$1416+2
  8150                           
  8151                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8152  001D94  0E00               	movlw	0
  8153  001D96  6E34               	movwf	___wmul@multiplicand+1,c
  8154  001D98  0E03               	movlw	3
  8155  001D9A  6E33               	movwf	___wmul@multiplicand,c
  8156  001D9C  0E00               	movlw	0
  8157  001D9E  6E26               	movwf	___awmod@divisor+1,c
  8158  001DA0  0E0A               	movlw	10
  8159  001DA2  6E25               	movwf	___awmod@divisor,c
  8160  001DA4  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8161  001DA8  6A24               	clrf	___awmod@dividend+1,c
  8162  001DAA  EC0B  F01B         	call	___awmod	;wreg free
  8163  001DAE  C023  F031         	movff	?___awmod,___wmul@multiplier
  8164  001DB2  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8165  001DB6  EC74  F01E         	call	___wmul	;wreg free
  8166  001DBA  0E01               	movlw	low __npowers_
  8167  001DBC  2431               	addwf	?___wmul,w,c
  8168  001DBE  6EF6               	movwf	tblptrl,c
  8169  001DC0  0EFE               	movlw	high __npowers_
  8170  001DC2  2032               	addwfc	?___wmul+1,w,c
  8171  001DC4  6EF7               	movwf	tblptrh,c
  8172  001DC6                     	if	0	;There are less than 3 active tblptr bytes
  8173  001DC6                     	endif
  8174  001DC6  0009               	tblrd		*+
  8175  001DC8  CFF5 F08C          	movff	tablat,___ftmul@f2
  8176  001DCC  0009               	tblrd		*+
  8177  001DCE  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8178  001DD2  000A               	tblrd		*-
  8179  001DD4  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8180  001DD8  C09E  F089         	movff	_fround$1416,___ftmul@f1
  8181  001DDC  C09F  F08A         	movff	_fround$1416+1,___ftmul@f1+1
  8182  001DE0  C0A0  F08B         	movff	_fround$1416+2,___ftmul@f1+2
  8183  001DE4  EC9A  F00F         	call	___ftmul	;wreg free
  8184  001DE8  C089  F09B         	movff	?___ftmul,_fround$1417
  8185  001DEC  C08A  F09C         	movff	?___ftmul+1,_fround$1417+1
  8186  001DF0  C08B  F09D         	movff	?___ftmul+2,_fround$1417+2
  8187                           
  8188                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8189  001DF4  C09B  F089         	movff	_fround$1417,___ftmul@f1
  8190  001DF8  C09C  F08A         	movff	_fround$1417+1,___ftmul@f1+1
  8191  001DFC  C09D  F08B         	movff	_fround$1417+2,___ftmul@f1+2
  8192  001E00  0E00               	movlw	0
  8193  001E02  0100               	movlb	0	; () banked
  8194  001E04  6F8C               	movwf	___ftmul@f2& (0+255),b
  8195  001E06  0E00               	movlw	0
  8196  001E08  0100               	movlb	0	; () banked
  8197  001E0A  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8198  001E0C  0E3F               	movlw	63
  8199  001E0E  0100               	movlb	0	; () banked
  8200  001E10  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8201  001E12  EC9A  F00F         	call	___ftmul	;wreg free
  8202  001E16  C089  F098         	movff	?___ftmul,?_fround
  8203  001E1A  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8204  001E1E  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8205  001E22  0012               	return	
  8206  001E24                     l6332:
  8207                           
  8208                           ;doprnt.c: 415: else if(prec > 10)
  8209  001E24  0E0A               	movlw	10
  8210  001E26  0100               	movlb	0	; () banked
  8211  001E28  65A1               	cpfsgt	fround@prec& (0+255),b
  8212  001E2A  D060               	goto	l6340
  8213                           
  8214                           ; BSR set to: 0
  8215                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8216  001E2C  0E00               	movlw	0
  8217  001E2E  6E34               	movwf	___wmul@multiplicand+1,c
  8218  001E30  0E03               	movlw	3
  8219  001E32  6E33               	movwf	___wmul@multiplicand,c
  8220  001E34  0E00               	movlw	0
  8221  001E36  6E26               	movwf	___awmod@divisor+1,c
  8222  001E38  0E0A               	movlw	10
  8223  001E3A  6E25               	movwf	___awmod@divisor,c
  8224  001E3C  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8225  001E40  6A24               	clrf	___awmod@dividend+1,c
  8226  001E42  EC0B  F01B         	call	___awmod	;wreg free
  8227  001E46  C023  F031         	movff	?___awmod,___wmul@multiplier
  8228  001E4A  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8229  001E4E  EC74  F01E         	call	___wmul	;wreg free
  8230  001E52  0E01               	movlw	low __npowers_
  8231  001E54  2431               	addwf	?___wmul,w,c
  8232  001E56  6EF6               	movwf	tblptrl,c
  8233  001E58  0EFE               	movlw	high __npowers_
  8234  001E5A  2032               	addwfc	?___wmul+1,w,c
  8235  001E5C  6EF7               	movwf	tblptrh,c
  8236  001E5E                     	if	0	;There are less than 3 active tblptr bytes
  8237  001E5E                     	endif
  8238  001E5E  0009               	tblrd		*+
  8239  001E60  CFF5 F08C          	movff	tablat,___ftmul@f2
  8240  001E64  0009               	tblrd		*+
  8241  001E66  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8242  001E6A  000A               	tblrd		*-
  8243  001E6C  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8244  001E70  0E00               	movlw	0
  8245  001E72  6E2C               	movwf	___awdiv@divisor+1,c
  8246  001E74  0E0A               	movlw	10
  8247  001E76  6E2B               	movwf	___awdiv@divisor,c
  8248  001E78  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8249  001E7C  6A2A               	clrf	___awdiv@dividend+1,c
  8250  001E7E  EC0B  F01A         	call	___awdiv	;wreg free
  8251  001E82  0E09               	movlw	9
  8252  001E84  2429               	addwf	?___awdiv,w,c
  8253  001E86  6E31               	movwf	___wmul@multiplier,c
  8254  001E88  0E00               	movlw	0
  8255  001E8A  202A               	addwfc	?___awdiv+1,w,c
  8256  001E8C  6E32               	movwf	___wmul@multiplier+1,c
  8257  001E8E  0E00               	movlw	0
  8258  001E90  6E34               	movwf	___wmul@multiplicand+1,c
  8259  001E92  0E03               	movlw	3
  8260  001E94  6E33               	movwf	___wmul@multiplicand,c
  8261  001E96  EC74  F01E         	call	___wmul	;wreg free
  8262  001E9A  0E01               	movlw	low __npowers_
  8263  001E9C  2431               	addwf	?___wmul,w,c
  8264  001E9E  6EF6               	movwf	tblptrl,c
  8265  001EA0  0EFE               	movlw	high __npowers_
  8266  001EA2  2032               	addwfc	?___wmul+1,w,c
  8267  001EA4  6EF7               	movwf	tblptrh,c
  8268  001EA6                     	if	0	;There are less than 3 active tblptr bytes
  8269  001EA6                     	endif
  8270  001EA6  0009               	tblrd		*+
  8271  001EA8  CFF5 F089          	movff	tablat,___ftmul@f1
  8272  001EAC  0009               	tblrd		*+
  8273  001EAE  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8274  001EB2  000A               	tblrd		*-
  8275  001EB4  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8276  001EB8  EC9A  F00F         	call	___ftmul	;wreg free
  8277  001EBC  C089  F09E         	movff	?___ftmul,_fround$1416
  8278  001EC0  C08A  F09F         	movff	?___ftmul+1,_fround$1416+1
  8279  001EC4  C08B  F0A0         	movff	?___ftmul+2,_fround$1416+2
  8280                           
  8281                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8282  001EC8  C09E  F089         	movff	_fround$1416,___ftmul@f1
  8283  001ECC  C09F  F08A         	movff	_fround$1416+1,___ftmul@f1+1
  8284  001ED0  C0A0  F08B         	movff	_fround$1416+2,___ftmul@f1+2
  8285  001ED4  0E00               	movlw	0
  8286  001ED6  0100               	movlb	0	; () banked
  8287  001ED8  6F8C               	movwf	___ftmul@f2& (0+255),b
  8288  001EDA  0E00               	movlw	0
  8289  001EDC  0100               	movlb	0	; () banked
  8290  001EDE  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8291  001EE0  0E3F               	movlw	63
  8292  001EE2  0100               	movlb	0	; () banked
  8293  001EE4  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8294  001EE6  EC9A  F00F         	call	___ftmul	;wreg free
  8295  001EEA  D795               	goto	L6
  8296  001EEC                     l6340:
  8297                           
  8298                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8299  001EEC  0100               	movlb	0	; () banked
  8300  001EEE  51A1               	movf	fround@prec& (0+255),w,b
  8301  001EF0  0D03               	mullw	3
  8302  001EF2  0E01               	movlw	low __npowers_
  8303  001EF4  24F3               	addwf	prodl,w,c
  8304  001EF6  6EF6               	movwf	tblptrl,c
  8305  001EF8  0EFE               	movlw	high __npowers_
  8306  001EFA  20F4               	addwfc	prodh,w,c
  8307  001EFC  6EF7               	movwf	tblptrh,c
  8308  001EFE                     	if	0	;There are less than 3 active tblptr bytes
  8309  001EFE                     	endif
  8310  001EFE  0009               	tblrd		*+
  8311  001F00  CFF5 F089          	movff	tablat,___ftmul@f1
  8312  001F04  0009               	tblrd		*+
  8313  001F06  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8314  001F0A  000A               	tblrd		*-
  8315  001F0C  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8316  001F10  0E00               	movlw	0
  8317  001F12  0100               	movlb	0	; () banked
  8318  001F14  6F8C               	movwf	___ftmul@f2& (0+255),b
  8319  001F16  0E00               	movlw	0
  8320  001F18  0100               	movlb	0	; () banked
  8321  001F1A  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8322  001F1C  0E3F               	movlw	63
  8323  001F1E  0100               	movlb	0	; () banked
  8324  001F20  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8325  001F22  EC9A  F00F         	call	___ftmul	;wreg free
  8326  001F26  C089  F098         	movff	?___ftmul,?_fround
  8327  001F2A  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8328  001F2E  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8329  001F32  0012               	return	
  8330  001F34                     __end_of_fround:
  8331                           	opt stack 0
  8332                           tblptru	equ	0xFF8
  8333                           tblptrh	equ	0xFF7
  8334                           tblptrl	equ	0xFF6
  8335                           tablat	equ	0xFF5
  8336                           prodh	equ	0xFF4
  8337                           prodl	equ	0xFF3
  8338                           postinc0	equ	0xFEE
  8339                           wreg	equ	0xFE8
  8340                           postdec1	equ	0xFE5
  8341                           fsr1l	equ	0xFE1
  8342                           indf2	equ	0xFDF
  8343                           postinc2	equ	0xFDE
  8344                           postdec2	equ	0xFDD
  8345                           fsr2h	equ	0xFDA
  8346                           fsr2l	equ	0xFD9
  8347                           status	equ	0xFD8
  8348                           
  8349 ;; *************** function ___awmod *****************
  8350 ;; Defined at:
  8351 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  dividend        2   34[COMRAM] int 
  8354 ;;  divisor         2   36[COMRAM] int 
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  sign            1   39[COMRAM] unsigned char 
  8357 ;;  counter         1   38[COMRAM] unsigned char 
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  2   34[COMRAM] int 
  8360 ;; Registers used:
  8361 ;;		wreg, status,2, status,0
  8362 ;; Tracked objects:
  8363 ;;		On entry : 0/0
  8364 ;;		On exit  : 0/0
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8368 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8371 ;;Total ram usage:        6 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    3
  8374 ;; This function calls:
  8375 ;;		Nothing
  8376 ;; This function is called by:
  8377 ;;		_fround
  8378 ;;		_scale
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           	psect	text20
  8383  003616                     __ptext20:
  8384                           	opt stack 0
  8385  003616                     ___awmod:
  8386                           	opt stack 24
  8387                           
  8388                           ;incstack = 0
  8389  003616  0E00               	movlw	0
  8390  003618  6E28               	movwf	___awmod@sign,c
  8391  00361A  AE24               	btfss	___awmod@dividend+1,7,c
  8392  00361C  D006               	goto	l6230
  8393  00361E  6C23               	negf	___awmod@dividend,c
  8394  003620  1E24               	comf	___awmod@dividend+1,f,c
  8395  003622  B0D8               	btfsc	status,0,c
  8396  003624  2A24               	incf	___awmod@dividend+1,f,c
  8397  003626  0E01               	movlw	1
  8398  003628  6E28               	movwf	___awmod@sign,c
  8399  00362A                     l6230:
  8400  00362A  AE26               	btfss	___awmod@divisor+1,7,c
  8401  00362C  D004               	goto	l6234
  8402  00362E  6C25               	negf	___awmod@divisor,c
  8403  003630  1E26               	comf	___awmod@divisor+1,f,c
  8404  003632  B0D8               	btfsc	status,0,c
  8405  003634  2A26               	incf	___awmod@divisor+1,f,c
  8406  003636                     l6234:
  8407  003636  5025               	movf	___awmod@divisor,w,c
  8408  003638  1026               	iorwf	___awmod@divisor+1,w,c
  8409  00363A  B4D8               	btfsc	status,2,c
  8410  00363C  D018               	goto	l6250
  8411  00363E  0E01               	movlw	1
  8412  003640  6E27               	movwf	___awmod@counter,c
  8413  003642  D004               	goto	l6240
  8414  003644                     l6238:
  8415  003644  90D8               	bcf	status,0,c
  8416  003646  3625               	rlcf	___awmod@divisor,f,c
  8417  003648  3626               	rlcf	___awmod@divisor+1,f,c
  8418  00364A  2A27               	incf	___awmod@counter,f,c
  8419  00364C                     l6240:
  8420  00364C  AE26               	btfss	___awmod@divisor+1,7,c
  8421  00364E  D7FA               	goto	l6238
  8422  003650                     l6242:
  8423  003650  5025               	movf	___awmod@divisor,w,c
  8424  003652  5C23               	subwf	___awmod@dividend,w,c
  8425  003654  5026               	movf	___awmod@divisor+1,w,c
  8426  003656  5824               	subwfb	___awmod@dividend+1,w,c
  8427  003658  A0D8               	btfss	status,0,c
  8428  00365A  D004               	goto	l6246
  8429  00365C  5025               	movf	___awmod@divisor,w,c
  8430  00365E  5E23               	subwf	___awmod@dividend,f,c
  8431  003660  5026               	movf	___awmod@divisor+1,w,c
  8432  003662  5A24               	subwfb	___awmod@dividend+1,f,c
  8433  003664                     l6246:
  8434  003664  90D8               	bcf	status,0,c
  8435  003666  3226               	rrcf	___awmod@divisor+1,f,c
  8436  003668  3225               	rrcf	___awmod@divisor,f,c
  8437  00366A  2E27               	decfsz	___awmod@counter,f,c
  8438  00366C  D7F1               	goto	l6242
  8439  00366E                     l6250:
  8440  00366E  5028               	movf	___awmod@sign,w,c
  8441  003670  B4D8               	btfsc	status,2,c
  8442  003672  D004               	goto	l6254
  8443  003674  6C23               	negf	___awmod@dividend,c
  8444  003676  1E24               	comf	___awmod@dividend+1,f,c
  8445  003678  B0D8               	btfsc	status,0,c
  8446  00367A  2A24               	incf	___awmod@dividend+1,f,c
  8447  00367C                     l6254:
  8448  00367C  C023  F023         	movff	___awmod@dividend,?___awmod
  8449  003680  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
  8450  003684  0012               	return	
  8451  003686                     __end_of___awmod:
  8452                           	opt stack 0
  8453                           tblptru	equ	0xFF8
  8454                           tblptrh	equ	0xFF7
  8455                           tblptrl	equ	0xFF6
  8456                           tablat	equ	0xFF5
  8457                           prodh	equ	0xFF4
  8458                           prodl	equ	0xFF3
  8459                           postinc0	equ	0xFEE
  8460                           wreg	equ	0xFE8
  8461                           postdec1	equ	0xFE5
  8462                           fsr1l	equ	0xFE1
  8463                           indf2	equ	0xFDF
  8464                           postinc2	equ	0xFDE
  8465                           postdec2	equ	0xFDD
  8466                           fsr2h	equ	0xFDA
  8467                           fsr2l	equ	0xFD9
  8468                           status	equ	0xFD8
  8469                           
  8470 ;; *************** function ___awdiv *****************
  8471 ;; Defined at:
  8472 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;  dividend        2   40[COMRAM] int 
  8475 ;;  divisor         2   42[COMRAM] int 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;  quotient        2   46[COMRAM] int 
  8478 ;;  sign            1   45[COMRAM] unsigned char 
  8479 ;;  counter         1   44[COMRAM] unsigned char 
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  2   40[COMRAM] int 
  8482 ;; Registers used:
  8483 ;;		wreg, status,2, status,0
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8489 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8492 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;Total ram usage:        8 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    3
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		_showRunTime
  8500 ;;		_fround
  8501 ;;		_scale
  8502 ;;		_printf
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           	psect	text21
  8507  003416                     __ptext21:
  8508                           	opt stack 0
  8509  003416                     ___awdiv:
  8510                           	opt stack 24
  8511                           
  8512                           ;incstack = 0
  8513  003416  0E00               	movlw	0
  8514  003418  6E2E               	movwf	___awdiv@sign,c
  8515  00341A  AE2C               	btfss	___awdiv@divisor+1,7,c
  8516  00341C  D006               	goto	l6186
  8517  00341E  6C2B               	negf	___awdiv@divisor,c
  8518  003420  1E2C               	comf	___awdiv@divisor+1,f,c
  8519  003422  B0D8               	btfsc	status,0,c
  8520  003424  2A2C               	incf	___awdiv@divisor+1,f,c
  8521  003426  0E01               	movlw	1
  8522  003428  6E2E               	movwf	___awdiv@sign,c
  8523  00342A                     l6186:
  8524  00342A  AE2A               	btfss	___awdiv@dividend+1,7,c
  8525  00342C  D006               	goto	l6192
  8526  00342E  6C29               	negf	___awdiv@dividend,c
  8527  003430  1E2A               	comf	___awdiv@dividend+1,f,c
  8528  003432  B0D8               	btfsc	status,0,c
  8529  003434  2A2A               	incf	___awdiv@dividend+1,f,c
  8530  003436  0E01               	movlw	1
  8531  003438  1A2E               	xorwf	___awdiv@sign,f,c
  8532  00343A                     l6192:
  8533  00343A  0E00               	movlw	0
  8534  00343C  6E30               	movwf	___awdiv@quotient+1,c
  8535  00343E  0E00               	movlw	0
  8536  003440  6E2F               	movwf	___awdiv@quotient,c
  8537  003442  502B               	movf	___awdiv@divisor,w,c
  8538  003444  102C               	iorwf	___awdiv@divisor+1,w,c
  8539  003446  B4D8               	btfsc	status,2,c
  8540  003448  D01C               	goto	l6214
  8541  00344A  0E01               	movlw	1
  8542  00344C  6E2D               	movwf	___awdiv@counter,c
  8543  00344E  D004               	goto	l6200
  8544  003450                     l6198:
  8545  003450  90D8               	bcf	status,0,c
  8546  003452  362B               	rlcf	___awdiv@divisor,f,c
  8547  003454  362C               	rlcf	___awdiv@divisor+1,f,c
  8548  003456  2A2D               	incf	___awdiv@counter,f,c
  8549  003458                     l6200:
  8550  003458  AE2C               	btfss	___awdiv@divisor+1,7,c
  8551  00345A  D7FA               	goto	l6198
  8552  00345C                     l6202:
  8553  00345C  90D8               	bcf	status,0,c
  8554  00345E  362F               	rlcf	___awdiv@quotient,f,c
  8555  003460  3630               	rlcf	___awdiv@quotient+1,f,c
  8556  003462  502B               	movf	___awdiv@divisor,w,c
  8557  003464  5C29               	subwf	___awdiv@dividend,w,c
  8558  003466  502C               	movf	___awdiv@divisor+1,w,c
  8559  003468  582A               	subwfb	___awdiv@dividend+1,w,c
  8560  00346A  A0D8               	btfss	status,0,c
  8561  00346C  D005               	goto	l6210
  8562  00346E  502B               	movf	___awdiv@divisor,w,c
  8563  003470  5E29               	subwf	___awdiv@dividend,f,c
  8564  003472  502C               	movf	___awdiv@divisor+1,w,c
  8565  003474  5A2A               	subwfb	___awdiv@dividend+1,f,c
  8566  003476  802F               	bsf	___awdiv@quotient,0,c
  8567  003478                     l6210:
  8568  003478  90D8               	bcf	status,0,c
  8569  00347A  322C               	rrcf	___awdiv@divisor+1,f,c
  8570  00347C  322B               	rrcf	___awdiv@divisor,f,c
  8571  00347E  2E2D               	decfsz	___awdiv@counter,f,c
  8572  003480  D7ED               	goto	l6202
  8573  003482                     l6214:
  8574  003482  502E               	movf	___awdiv@sign,w,c
  8575  003484  B4D8               	btfsc	status,2,c
  8576  003486  D004               	goto	l6218
  8577  003488  6C2F               	negf	___awdiv@quotient,c
  8578  00348A  1E30               	comf	___awdiv@quotient+1,f,c
  8579  00348C  B0D8               	btfsc	status,0,c
  8580  00348E  2A30               	incf	___awdiv@quotient+1,f,c
  8581  003490                     l6218:
  8582  003490  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  8583  003494  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  8584  003498  0012               	return	
  8585  00349A                     __end_of___awdiv:
  8586                           	opt stack 0
  8587                           tblptru	equ	0xFF8
  8588                           tblptrh	equ	0xFF7
  8589                           tblptrl	equ	0xFF6
  8590                           tablat	equ	0xFF5
  8591                           prodh	equ	0xFF4
  8592                           prodl	equ	0xFF3
  8593                           postinc0	equ	0xFEE
  8594                           wreg	equ	0xFE8
  8595                           postdec1	equ	0xFE5
  8596                           fsr1l	equ	0xFE1
  8597                           indf2	equ	0xFDF
  8598                           postinc2	equ	0xFDE
  8599                           postdec2	equ	0xFDD
  8600                           fsr2h	equ	0xFDA
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function __tdiv_to_l_ *****************
  8605 ;; Defined at:
  8606 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;  f1              3   34[COMRAM] float 
  8609 ;;  f2              3   37[COMRAM] float 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;  quot            4   43[COMRAM] unsigned long 
  8612 ;;  exp1            1   48[COMRAM] unsigned char 
  8613 ;;  cntr            1   47[COMRAM] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  4   34[COMRAM] unsigned long 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8623 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;Total ram usage:       15 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    3
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_printf
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text22
  8638  00232E                     __ptext22:
  8639                           	opt stack 0
  8640  00232E                     __tdiv_to_l_:
  8641                           	opt stack 25
  8642                           
  8643                           ;incstack = 0
  8644  00232E  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8645  002332  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8646  002334  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8647  002336  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
  8648  002338  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8649  00233A  E301               	bnc	u6211
  8650  00233C  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8651  00233E                     u6211:
  8652  00233E  5029               	movf	??__tdiv_to_l_,w,c
  8653  002340  6E31               	movwf	__tdiv_to_l_@exp1,c
  8654  002342  5031               	movf	__tdiv_to_l_@exp1,w,c
  8655  002344  A4D8               	btfss	status,2,c
  8656  002346  D009               	goto	l6400
  8657  002348  0E00               	movlw	0
  8658  00234A  6E23               	movwf	?__tdiv_to_l_,c
  8659  00234C  0E00               	movlw	0
  8660  00234E  6E24               	movwf	?__tdiv_to_l_+1,c
  8661  002350  0E00               	movlw	0
  8662  002352  6E25               	movwf	?__tdiv_to_l_+2,c
  8663  002354  0E00               	movlw	0
  8664  002356  6E26               	movwf	?__tdiv_to_l_+3,c
  8665  002358  0012               	return	
  8666  00235A                     l6400:
  8667  00235A  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8668  00235E  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8669  002360  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8670  002362  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
  8671  002364  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8672  002366  E301               	bnc	u6231
  8673  002368  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8674  00236A                     u6231:
  8675  00236A  5029               	movf	??__tdiv_to_l_,w,c
  8676  00236C  6E30               	movwf	__tdiv_to_l_@cntr,c
  8677  00236E  5030               	movf	__tdiv_to_l_@cntr,w,c
  8678  002370  A4D8               	btfss	status,2,c
  8679  002372  D009               	goto	l6406
  8680  002374  0E00               	movlw	0
  8681  002376  6E23               	movwf	?__tdiv_to_l_,c
  8682  002378  0E00               	movlw	0
  8683  00237A  6E24               	movwf	?__tdiv_to_l_+1,c
  8684  00237C  0E00               	movlw	0
  8685  00237E  6E25               	movwf	?__tdiv_to_l_+2,c
  8686  002380  0E00               	movlw	0
  8687  002382  6E26               	movwf	?__tdiv_to_l_+3,c
  8688  002384  0012               	return	
  8689  002386                     l6406:
  8690  002386  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
  8691  002388  0EFF               	movlw	255
  8692  00238A  1623               	andwf	__tdiv_to_l_@f1,f,c
  8693  00238C  0EFF               	movlw	255
  8694  00238E  1624               	andwf	__tdiv_to_l_@f1+1,f,c
  8695  002390  0E00               	movlw	0
  8696  002392  1625               	andwf	__tdiv_to_l_@f1+2,f,c
  8697  002394  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
  8698  002396  0EFF               	movlw	255
  8699  002398  1626               	andwf	__tdiv_to_l_@f2,f,c
  8700  00239A  0EFF               	movlw	255
  8701  00239C  1627               	andwf	__tdiv_to_l_@f2+1,f,c
  8702  00239E  0E00               	movlw	0
  8703  0023A0  1628               	andwf	__tdiv_to_l_@f2+2,f,c
  8704  0023A2  0E00               	movlw	0
  8705  0023A4  6E2C               	movwf	__tdiv_to_l_@quot,c
  8706  0023A6  0E00               	movlw	0
  8707  0023A8  6E2D               	movwf	__tdiv_to_l_@quot+1,c
  8708  0023AA  0E00               	movlw	0
  8709  0023AC  6E2E               	movwf	__tdiv_to_l_@quot+2,c
  8710  0023AE  0E00               	movlw	0
  8711  0023B0  6E2F               	movwf	__tdiv_to_l_@quot+3,c
  8712  0023B2  0E7F               	movlw	127
  8713  0023B4  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8714  0023B6  5030               	movf	__tdiv_to_l_@cntr,w,c
  8715  0023B8  0F98               	addlw	152
  8716  0023BA  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8717  0023BC  0E18               	movlw	24
  8718  0023BE  6E30               	movwf	__tdiv_to_l_@cntr,c
  8719  0023C0                     l1184:
  8720  0023C0  90D8               	bcf	status,0,c
  8721  0023C2  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8722  0023C4  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8723  0023C6  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8724  0023C8  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8725  0023CA  5026               	movf	__tdiv_to_l_@f2,w,c
  8726  0023CC  5C23               	subwf	__tdiv_to_l_@f1,w,c
  8727  0023CE  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8728  0023D0  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
  8729  0023D2  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8730  0023D4  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
  8731  0023D6  A0D8               	btfss	status,0,c
  8732  0023D8  D007               	goto	l1185
  8733  0023DA  5026               	movf	__tdiv_to_l_@f2,w,c
  8734  0023DC  5E23               	subwf	__tdiv_to_l_@f1,f,c
  8735  0023DE  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8736  0023E0  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
  8737  0023E2  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8738  0023E4  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
  8739  0023E6  802C               	bsf	__tdiv_to_l_@quot,0,c
  8740  0023E8                     l1185:
  8741  0023E8  90D8               	bcf	status,0,c
  8742  0023EA  3623               	rlcf	__tdiv_to_l_@f1,f,c
  8743  0023EC  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
  8744  0023EE  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
  8745  0023F0  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
  8746  0023F2  D7E6               	goto	l1184
  8747  0023F4  AE31               	btfss	__tdiv_to_l_@exp1,7,c
  8748  0023F6  D016               	goto	l6440
  8749  0023F8  5031               	movf	__tdiv_to_l_@exp1,w,c
  8750  0023FA  0A80               	xorlw	128
  8751  0023FC  0F97               	addlw	151
  8752  0023FE  B0D8               	btfsc	status,0,c
  8753  002400  D009               	goto	l6436
  8754  002402  0E00               	movlw	0
  8755  002404  6E23               	movwf	?__tdiv_to_l_,c
  8756  002406  0E00               	movlw	0
  8757  002408  6E24               	movwf	?__tdiv_to_l_+1,c
  8758  00240A  0E00               	movlw	0
  8759  00240C  6E25               	movwf	?__tdiv_to_l_+2,c
  8760  00240E  0E00               	movlw	0
  8761  002410  6E26               	movwf	?__tdiv_to_l_+3,c
  8762  002412  0012               	return	
  8763  002414                     l6436:
  8764  002414  90D8               	bcf	status,0,c
  8765  002416  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
  8766  002418  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
  8767  00241A  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
  8768  00241C  322C               	rrcf	__tdiv_to_l_@quot,f,c
  8769  00241E  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
  8770  002420  D7F9               	goto	l6436
  8771  002422  D015               	goto	l1191
  8772  002424                     l6440:
  8773  002424  0E17               	movlw	23
  8774  002426  6431               	cpfsgt	__tdiv_to_l_@exp1,c
  8775  002428  D00F               	goto	l6448
  8776  00242A  0E00               	movlw	0
  8777  00242C  6E23               	movwf	?__tdiv_to_l_,c
  8778  00242E  0E00               	movlw	0
  8779  002430  6E24               	movwf	?__tdiv_to_l_+1,c
  8780  002432  0E00               	movlw	0
  8781  002434  6E25               	movwf	?__tdiv_to_l_+2,c
  8782  002436  0E00               	movlw	0
  8783  002438  6E26               	movwf	?__tdiv_to_l_+3,c
  8784  00243A  0012               	return	
  8785  00243C                     l6446:
  8786  00243C  90D8               	bcf	status,0,c
  8787  00243E  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8788  002440  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8789  002442  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8790  002444  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8791  002446  0631               	decf	__tdiv_to_l_@exp1,f,c
  8792  002448                     l6448:
  8793  002448  5031               	movf	__tdiv_to_l_@exp1,w,c
  8794  00244A  A4D8               	btfss	status,2,c
  8795  00244C  D7F7               	goto	l6446
  8796  00244E                     l1191:
  8797  00244E  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8798  002452  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8799  002456  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8800  00245A  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8801  00245E  0012               	return		;funcret
  8802  002460                     __end_of__tdiv_to_l_:
  8803                           	opt stack 0
  8804                           tblptru	equ	0xFF8
  8805                           tblptrh	equ	0xFF7
  8806                           tblptrl	equ	0xFF6
  8807                           tablat	equ	0xFF5
  8808                           prodh	equ	0xFF4
  8809                           prodl	equ	0xFF3
  8810                           postinc0	equ	0xFEE
  8811                           wreg	equ	0xFE8
  8812                           postdec1	equ	0xFE5
  8813                           fsr1l	equ	0xFE1
  8814                           indf2	equ	0xFDF
  8815                           postinc2	equ	0xFDE
  8816                           postdec2	equ	0xFDD
  8817                           fsr2h	equ	0xFDA
  8818                           fsr2l	equ	0xFD9
  8819                           status	equ	0xFD8
  8820                           
  8821 ;; *************** function __div_to_l_ *****************
  8822 ;; Defined at:
  8823 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;  f1              3   34[COMRAM] unsigned long 
  8826 ;;  f2              3   37[COMRAM] unsigned long 
  8827 ;; Auto vars:     Size  Location     Type
  8828 ;;  quot            4   40[COMRAM] unsigned long 
  8829 ;;  exp1            1   45[COMRAM] unsigned char 
  8830 ;;  cntr            1   44[COMRAM] unsigned char 
  8831 ;; Return value:  Size  Location     Type
  8832 ;;                  4   34[COMRAM] unsigned long 
  8833 ;; Registers used:
  8834 ;;		wreg, status,2, status,0
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8840 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8841 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;Total ram usage:       12 bytes
  8845 ;; Hardware stack levels used:    1
  8846 ;; Hardware stack levels required when called:    3
  8847 ;; This function calls:
  8848 ;;		Nothing
  8849 ;; This function is called by:
  8850 ;;		_printf
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           	psect	text23
  8855  002460                     __ptext23:
  8856                           	opt stack 0
  8857  002460                     __div_to_l_:
  8858                           	opt stack 25
  8859                           
  8860                           ;incstack = 0
  8861  002460  3425               	rlcf	__div_to_l_@f1+2,w,c
  8862  002462  3426               	rlcf	__div_to_l_@f1+3,w,c
  8863  002464  6E2E               	movwf	__div_to_l_@exp1,c
  8864  002466  502E               	movf	__div_to_l_@exp1,w,c
  8865  002468  A4D8               	btfss	status,2,c
  8866  00246A  D009               	goto	l6456
  8867  00246C  0E00               	movlw	0
  8868  00246E  6E23               	movwf	?__div_to_l_,c
  8869  002470  0E00               	movlw	0
  8870  002472  6E24               	movwf	?__div_to_l_+1,c
  8871  002474  0E00               	movlw	0
  8872  002476  6E25               	movwf	?__div_to_l_+2,c
  8873  002478  0E00               	movlw	0
  8874  00247A  6E26               	movwf	?__div_to_l_+3,c
  8875  00247C  0012               	return	
  8876  00247E                     l6456:
  8877  00247E  3428               	rlcf	__div_to_l_@f2+2,w,c
  8878  002480  3429               	rlcf	__div_to_l_@f2+3,w,c
  8879  002482  6E2D               	movwf	__div_to_l_@cntr,c
  8880  002484  502D               	movf	__div_to_l_@cntr,w,c
  8881  002486  A4D8               	btfss	status,2,c
  8882  002488  D009               	goto	l6462
  8883  00248A  0E00               	movlw	0
  8884  00248C  6E23               	movwf	?__div_to_l_,c
  8885  00248E  0E00               	movlw	0
  8886  002490  6E24               	movwf	?__div_to_l_+1,c
  8887  002492  0E00               	movlw	0
  8888  002494  6E25               	movwf	?__div_to_l_+2,c
  8889  002496  0E00               	movlw	0
  8890  002498  6E26               	movwf	?__div_to_l_+3,c
  8891  00249A  0012               	return	
  8892  00249C                     l6462:
  8893  00249C  8E25               	bsf	__div_to_l_@f1+2,7,c
  8894  00249E  0EFF               	movlw	255
  8895  0024A0  1623               	andwf	__div_to_l_@f1,f,c
  8896  0024A2  0EFF               	movlw	255
  8897  0024A4  1624               	andwf	__div_to_l_@f1+1,f,c
  8898  0024A6  0EFF               	movlw	255
  8899  0024A8  1625               	andwf	__div_to_l_@f1+2,f,c
  8900  0024AA  0E00               	movlw	0
  8901  0024AC  1626               	andwf	__div_to_l_@f1+3,f,c
  8902  0024AE  8E28               	bsf	__div_to_l_@f2+2,7,c
  8903  0024B0  0EFF               	movlw	255
  8904  0024B2  1626               	andwf	__div_to_l_@f2,f,c
  8905  0024B4  0EFF               	movlw	255
  8906  0024B6  1627               	andwf	__div_to_l_@f2+1,f,c
  8907  0024B8  0EFF               	movlw	255
  8908  0024BA  1628               	andwf	__div_to_l_@f2+2,f,c
  8909  0024BC  0E00               	movlw	0
  8910  0024BE  1629               	andwf	__div_to_l_@f2+3,f,c
  8911  0024C0  0E00               	movlw	0
  8912  0024C2  6E29               	movwf	__div_to_l_@quot,c
  8913  0024C4  0E00               	movlw	0
  8914  0024C6  6E2A               	movwf	__div_to_l_@quot+1,c
  8915  0024C8  0E00               	movlw	0
  8916  0024CA  6E2B               	movwf	__div_to_l_@quot+2,c
  8917  0024CC  0E00               	movlw	0
  8918  0024CE  6E2C               	movwf	__div_to_l_@quot+3,c
  8919  0024D0  0E7F               	movlw	127
  8920  0024D2  5E2E               	subwf	__div_to_l_@exp1,f,c
  8921  0024D4  502D               	movf	__div_to_l_@cntr,w,c
  8922  0024D6  0FA0               	addlw	160
  8923  0024D8  5E2E               	subwf	__div_to_l_@exp1,f,c
  8924  0024DA  0E20               	movlw	32
  8925  0024DC  6E2D               	movwf	__div_to_l_@cntr,c
  8926  0024DE                     l6476:
  8927  0024DE  90D8               	bcf	status,0,c
  8928  0024E0  3629               	rlcf	__div_to_l_@quot,f,c
  8929  0024E2  362A               	rlcf	__div_to_l_@quot+1,f,c
  8930  0024E4  362B               	rlcf	__div_to_l_@quot+2,f,c
  8931  0024E6  362C               	rlcf	__div_to_l_@quot+3,f,c
  8932  0024E8  5026               	movf	__div_to_l_@f2,w,c
  8933  0024EA  5C23               	subwf	__div_to_l_@f1,w,c
  8934  0024EC  5027               	movf	__div_to_l_@f2+1,w,c
  8935  0024EE  5824               	subwfb	__div_to_l_@f1+1,w,c
  8936  0024F0  5028               	movf	__div_to_l_@f2+2,w,c
  8937  0024F2  5825               	subwfb	__div_to_l_@f1+2,w,c
  8938  0024F4  5029               	movf	__div_to_l_@f2+3,w,c
  8939  0024F6  5826               	subwfb	__div_to_l_@f1+3,w,c
  8940  0024F8  A0D8               	btfss	status,0,c
  8941  0024FA  D009               	goto	l6484
  8942  0024FC  5026               	movf	__div_to_l_@f2,w,c
  8943  0024FE  5E23               	subwf	__div_to_l_@f1,f,c
  8944  002500  5027               	movf	__div_to_l_@f2+1,w,c
  8945  002502  5A24               	subwfb	__div_to_l_@f1+1,f,c
  8946  002504  5028               	movf	__div_to_l_@f2+2,w,c
  8947  002506  5A25               	subwfb	__div_to_l_@f1+2,f,c
  8948  002508  5029               	movf	__div_to_l_@f2+3,w,c
  8949  00250A  5A26               	subwfb	__div_to_l_@f1+3,f,c
  8950  00250C  8029               	bsf	__div_to_l_@quot,0,c
  8951  00250E                     l6484:
  8952  00250E  90D8               	bcf	status,0,c
  8953  002510  3623               	rlcf	__div_to_l_@f1,f,c
  8954  002512  3624               	rlcf	__div_to_l_@f1+1,f,c
  8955  002514  3625               	rlcf	__div_to_l_@f1+2,f,c
  8956  002516  3626               	rlcf	__div_to_l_@f1+3,f,c
  8957  002518  2E2D               	decfsz	__div_to_l_@cntr,f,c
  8958  00251A  D7E1               	goto	l6476
  8959  00251C  AE2E               	btfss	__div_to_l_@exp1,7,c
  8960  00251E  D016               	goto	l6500
  8961  002520  502E               	movf	__div_to_l_@exp1,w,c
  8962  002522  0A80               	xorlw	128
  8963  002524  0F9F               	addlw	159
  8964  002526  B0D8               	btfsc	status,0,c
  8965  002528  D009               	goto	l6496
  8966  00252A  0E00               	movlw	0
  8967  00252C  6E23               	movwf	?__div_to_l_,c
  8968  00252E  0E00               	movlw	0
  8969  002530  6E24               	movwf	?__div_to_l_+1,c
  8970  002532  0E00               	movlw	0
  8971  002534  6E25               	movwf	?__div_to_l_+2,c
  8972  002536  0E00               	movlw	0
  8973  002538  6E26               	movwf	?__div_to_l_+3,c
  8974  00253A  0012               	return	
  8975  00253C                     l6496:
  8976  00253C  90D8               	bcf	status,0,c
  8977  00253E  322C               	rrcf	__div_to_l_@quot+3,f,c
  8978  002540  322B               	rrcf	__div_to_l_@quot+2,f,c
  8979  002542  322A               	rrcf	__div_to_l_@quot+1,f,c
  8980  002544  3229               	rrcf	__div_to_l_@quot,f,c
  8981  002546  3E2E               	incfsz	__div_to_l_@exp1,f,c
  8982  002548  D7F9               	goto	l6496
  8983  00254A  D015               	goto	l1087
  8984  00254C                     l6500:
  8985  00254C  0E1F               	movlw	31
  8986  00254E  642E               	cpfsgt	__div_to_l_@exp1,c
  8987  002550  D00F               	goto	l6508
  8988  002552  0E00               	movlw	0
  8989  002554  6E23               	movwf	?__div_to_l_,c
  8990  002556  0E00               	movlw	0
  8991  002558  6E24               	movwf	?__div_to_l_+1,c
  8992  00255A  0E00               	movlw	0
  8993  00255C  6E25               	movwf	?__div_to_l_+2,c
  8994  00255E  0E00               	movlw	0
  8995  002560  6E26               	movwf	?__div_to_l_+3,c
  8996  002562  0012               	return	
  8997  002564                     l6506:
  8998  002564  90D8               	bcf	status,0,c
  8999  002566  3629               	rlcf	__div_to_l_@quot,f,c
  9000  002568  362A               	rlcf	__div_to_l_@quot+1,f,c
  9001  00256A  362B               	rlcf	__div_to_l_@quot+2,f,c
  9002  00256C  362C               	rlcf	__div_to_l_@quot+3,f,c
  9003  00256E  062E               	decf	__div_to_l_@exp1,f,c
  9004  002570                     l6508:
  9005  002570  502E               	movf	__div_to_l_@exp1,w,c
  9006  002572  A4D8               	btfss	status,2,c
  9007  002574  D7F7               	goto	l6506
  9008  002576                     l1087:
  9009  002576  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
  9010  00257A  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9011  00257E  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9012  002582  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9013  002586  0012               	return		;funcret
  9014  002588                     __end_of__div_to_l_:
  9015                           	opt stack 0
  9016                           tblptru	equ	0xFF8
  9017                           tblptrh	equ	0xFF7
  9018                           tblptrl	equ	0xFF6
  9019                           tablat	equ	0xFF5
  9020                           prodh	equ	0xFF4
  9021                           prodl	equ	0xFF3
  9022                           postinc0	equ	0xFEE
  9023                           wreg	equ	0xFE8
  9024                           postdec1	equ	0xFE5
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           postdec2	equ	0xFDD
  9029                           fsr2h	equ	0xFDA
  9030                           fsr2l	equ	0xFD9
  9031                           status	equ	0xFD8
  9032                           
  9033 ;; *************** function ___lltoft *****************
  9034 ;; Defined at:
  9035 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;  c               4   42[COMRAM] unsigned long 
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  exp             1   50[COMRAM] unsigned char 
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  3   42[COMRAM] float 
  9042 ;; Registers used:
  9043 ;;		wreg, status,2, status,0, cstack
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9049 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;Total ram usage:        9 bytes
  9054 ;; Hardware stack levels used:    1
  9055 ;; Hardware stack levels required when called:    4
  9056 ;; This function calls:
  9057 ;;		___ftpack
  9058 ;; This function is called by:
  9059 ;;		_printf
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text24
  9064  0038EC                     __ptext24:
  9065                           	opt stack 0
  9066  0038EC                     ___lltoft:
  9067                           	opt stack 24
  9068                           
  9069                           ;incstack = 0
  9070  0038EC  0E8E               	movlw	142
  9071  0038EE  6E33               	movwf	___lltoft@exp,c
  9072  0038F0  D006               	goto	l6680
  9073  0038F2                     l6678:
  9074  0038F2  90D8               	bcf	status,0,c
  9075  0038F4  322E               	rrcf	___lltoft@c+3,f,c
  9076  0038F6  322D               	rrcf	___lltoft@c+2,f,c
  9077  0038F8  322C               	rrcf	___lltoft@c+1,f,c
  9078  0038FA  322B               	rrcf	___lltoft@c,f,c
  9079  0038FC  2A33               	incf	___lltoft@exp,f,c
  9080  0038FE                     l6680:
  9081  0038FE  0E00               	movlw	0
  9082  003900  142B               	andwf	___lltoft@c,w,c
  9083  003902  6E2F               	movwf	??___lltoft& (0+255),c
  9084  003904  0E00               	movlw	0
  9085  003906  142C               	andwf	___lltoft@c+1,w,c
  9086  003908  6E30               	movwf	(??___lltoft+1)& (0+255),c
  9087  00390A  0E00               	movlw	0
  9088  00390C  142D               	andwf	___lltoft@c+2,w,c
  9089  00390E  6E31               	movwf	(??___lltoft+2)& (0+255),c
  9090  003910  0EFF               	movlw	255
  9091  003912  142E               	andwf	___lltoft@c+3,w,c
  9092  003914  6E32               	movwf	(??___lltoft+3)& (0+255),c
  9093  003916  502F               	movf	??___lltoft,w,c
  9094  003918  1030               	iorwf	??___lltoft+1,w,c
  9095  00391A  1031               	iorwf	??___lltoft+2,w,c
  9096  00391C  1032               	iorwf	??___lltoft+3,w,c
  9097  00391E  A4D8               	btfss	status,2,c
  9098  003920  D7E8               	goto	l6678
  9099  003922  C02B  F023         	movff	___lltoft@c,___ftpack@arg
  9100  003926  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
  9101  00392A  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
  9102  00392E  C033  F026         	movff	___lltoft@exp,___ftpack@exp
  9103  003932  0E00               	movlw	0
  9104  003934  6E27               	movwf	___ftpack@sign,c
  9105  003936  EC87  F018         	call	___ftpack	;wreg free
  9106  00393A  C023  F02B         	movff	?___ftpack,?___lltoft
  9107  00393E  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
  9108  003942  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
  9109  003946  0012               	return	
  9110  003948                     __end_of___lltoft:
  9111                           	opt stack 0
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           postinc0	equ	0xFEE
  9119                           wreg	equ	0xFE8
  9120                           postdec1	equ	0xFE5
  9121                           fsr1l	equ	0xFE1
  9122                           indf2	equ	0xFDF
  9123                           postinc2	equ	0xFDE
  9124                           postdec2	equ	0xFDD
  9125                           fsr2h	equ	0xFDA
  9126                           fsr2l	equ	0xFD9
  9127                           status	equ	0xFD8
  9128                           
  9129 ;; *************** function ___llmod *****************
  9130 ;; Defined at:
  9131 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  dividend        4   47[COMRAM] unsigned long 
  9134 ;;  divisor         4   51[COMRAM] unsigned long 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  counter         1   55[COMRAM] unsigned char 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  4   47[COMRAM] unsigned long 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9146 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9150 ;;Total ram usage:        9 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    3
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_printf
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text25
  9161  003760                     __ptext25:
  9162                           	opt stack 0
  9163  003760                     ___llmod:
  9164                           	opt stack 25
  9165                           
  9166                           ;incstack = 0
  9167  003760  5034               	movf	___llmod@divisor,w,c
  9168  003762  1035               	iorwf	___llmod@divisor+1,w,c
  9169  003764  1036               	iorwf	___llmod@divisor+2,w,c
  9170  003766  1037               	iorwf	___llmod@divisor+3,w,c
  9171  003768  B4D8               	btfsc	status,2,c
  9172  00376A  D024               	goto	l1276
  9173  00376C  0E01               	movlw	1
  9174  00376E  6E38               	movwf	___llmod@counter,c
  9175  003770  D006               	goto	l6666
  9176  003772                     l6664:
  9177  003772  90D8               	bcf	status,0,c
  9178  003774  3634               	rlcf	___llmod@divisor,f,c
  9179  003776  3635               	rlcf	___llmod@divisor+1,f,c
  9180  003778  3636               	rlcf	___llmod@divisor+2,f,c
  9181  00377A  3637               	rlcf	___llmod@divisor+3,f,c
  9182  00377C  2A38               	incf	___llmod@counter,f,c
  9183  00377E                     l6666:
  9184  00377E  AE37               	btfss	___llmod@divisor+3,7,c
  9185  003780  D7F8               	goto	l6664
  9186  003782                     l6668:
  9187  003782  5034               	movf	___llmod@divisor,w,c
  9188  003784  5C30               	subwf	___llmod@dividend,w,c
  9189  003786  5035               	movf	___llmod@divisor+1,w,c
  9190  003788  5831               	subwfb	___llmod@dividend+1,w,c
  9191  00378A  5036               	movf	___llmod@divisor+2,w,c
  9192  00378C  5832               	subwfb	___llmod@dividend+2,w,c
  9193  00378E  5037               	movf	___llmod@divisor+3,w,c
  9194  003790  5833               	subwfb	___llmod@dividend+3,w,c
  9195  003792  A0D8               	btfss	status,0,c
  9196  003794  D008               	goto	l6672
  9197  003796  5034               	movf	___llmod@divisor,w,c
  9198  003798  5E30               	subwf	___llmod@dividend,f,c
  9199  00379A  5035               	movf	___llmod@divisor+1,w,c
  9200  00379C  5A31               	subwfb	___llmod@dividend+1,f,c
  9201  00379E  5036               	movf	___llmod@divisor+2,w,c
  9202  0037A0  5A32               	subwfb	___llmod@dividend+2,f,c
  9203  0037A2  5037               	movf	___llmod@divisor+3,w,c
  9204  0037A4  5A33               	subwfb	___llmod@dividend+3,f,c
  9205  0037A6                     l6672:
  9206  0037A6  90D8               	bcf	status,0,c
  9207  0037A8  3237               	rrcf	___llmod@divisor+3,f,c
  9208  0037AA  3236               	rrcf	___llmod@divisor+2,f,c
  9209  0037AC  3235               	rrcf	___llmod@divisor+1,f,c
  9210  0037AE  3234               	rrcf	___llmod@divisor,f,c
  9211  0037B0  2E38               	decfsz	___llmod@counter,f,c
  9212  0037B2  D7E7               	goto	l6668
  9213  0037B4                     l1276:
  9214  0037B4  C030  F030         	movff	___llmod@dividend,?___llmod
  9215  0037B8  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
  9216  0037BC  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
  9217  0037C0  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
  9218  0037C4  0012               	return		;funcret
  9219  0037C6                     __end_of___llmod:
  9220                           	opt stack 0
  9221                           tblptru	equ	0xFF8
  9222                           tblptrh	equ	0xFF7
  9223                           tblptrl	equ	0xFF6
  9224                           tablat	equ	0xFF5
  9225                           prodh	equ	0xFF4
  9226                           prodl	equ	0xFF3
  9227                           postinc0	equ	0xFEE
  9228                           wreg	equ	0xFE8
  9229                           postdec1	equ	0xFE5
  9230                           fsr1l	equ	0xFE1
  9231                           indf2	equ	0xFDF
  9232                           postinc2	equ	0xFDE
  9233                           postdec2	equ	0xFDD
  9234                           fsr2h	equ	0xFDA
  9235                           fsr2l	equ	0xFD9
  9236                           status	equ	0xFD8
  9237                           
  9238 ;; *************** function ___ftsub *****************
  9239 ;; Defined at:
  9240 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;  f1              3   46[BANK0 ] float 
  9243 ;;  f2              3   49[BANK0 ] float 
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;		None
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  3   46[BANK0 ] float 
  9248 ;; Registers used:
  9249 ;;		wreg, status,2, status,0, cstack
  9250 ;; Tracked objects:
  9251 ;;		On entry : 0/0
  9252 ;;		On exit  : 0/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9255 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9259 ;;Total ram usage:        6 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:    5
  9262 ;; This function calls:
  9263 ;;		___ftadd
  9264 ;; This function is called by:
  9265 ;;		_sortBattery
  9266 ;;		_printf
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           	psect	text26
  9271  003A48                     __ptext26:
  9272                           	opt stack 0
  9273  003A48                     ___ftsub:
  9274                           	opt stack 23
  9275                           
  9276                           ;incstack = 0
  9277  003A48  0100               	movlb	0	; () banked
  9278  003A4A  51B1               	movf	___ftsub@f2& (0+255),w,b
  9279  003A4C  0100               	movlb	0	; () banked
  9280  003A4E  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9281  003A50  0100               	movlb	0	; () banked
  9282  003A52  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9283  003A54  B4D8               	btfsc	status,2,c
  9284  003A56  D009               	goto	l6576
  9285                           
  9286                           ; BSR set to: 0
  9287  003A58  0E00               	movlw	0
  9288  003A5A  0100               	movlb	0	; () banked
  9289  003A5C  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
  9290  003A5E  0E00               	movlw	0
  9291  003A60  0100               	movlb	0	; () banked
  9292  003A62  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9293  003A64  0E80               	movlw	128
  9294  003A66  0100               	movlb	0	; () banked
  9295  003A68  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9296  003A6A                     l6576:
  9297                           
  9298                           ; BSR set to: 0
  9299  003A6A  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
  9300  003A6E  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
  9301  003A72  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
  9302  003A76  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
  9303  003A7A  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
  9304  003A7E  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
  9305  003A82  EC36  F00D         	call	___ftadd	;wreg free
  9306  003A86  C0A2  F0AE         	movff	?___ftadd,?___ftsub
  9307  003A8A  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
  9308  003A8E  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
  9309  003A92  0012               	return	
  9310  003A94                     __end_of___ftsub:
  9311                           	opt stack 0
  9312                           tblptru	equ	0xFF8
  9313                           tblptrh	equ	0xFF7
  9314                           tblptrl	equ	0xFF6
  9315                           tablat	equ	0xFF5
  9316                           prodh	equ	0xFF4
  9317                           prodl	equ	0xFF3
  9318                           postinc0	equ	0xFEE
  9319                           wreg	equ	0xFE8
  9320                           postdec1	equ	0xFE5
  9321                           fsr1l	equ	0xFE1
  9322                           indf2	equ	0xFDF
  9323                           postinc2	equ	0xFDE
  9324                           postdec2	equ	0xFDD
  9325                           fsr2h	equ	0xFDA
  9326                           fsr2l	equ	0xFD9
  9327                           status	equ	0xFD8
  9328                           
  9329 ;; *************** function ___ftneg *****************
  9330 ;; Defined at:
  9331 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;  f1              3   34[COMRAM] float 
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;		None
  9336 ;; Return value:  Size  Location     Type
  9337 ;;                  3   34[COMRAM] float 
  9338 ;; Registers used:
  9339 ;;		wreg, status,2, status,0
  9340 ;; Tracked objects:
  9341 ;;		On entry : 0/0
  9342 ;;		On exit  : 0/0
  9343 ;;		Unchanged: 0/0
  9344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9345 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9349 ;;Total ram usage:        3 bytes
  9350 ;; Hardware stack levels used:    1
  9351 ;; Hardware stack levels required when called:    3
  9352 ;; This function calls:
  9353 ;;		Nothing
  9354 ;; This function is called by:
  9355 ;;		_printf
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	text27
  9360  003D0E                     __ptext27:
  9361                           	opt stack 0
  9362  003D0E                     ___ftneg:
  9363                           	opt stack 25
  9364                           
  9365                           ;incstack = 0
  9366  003D0E  5023               	movf	___ftneg@f1,w,c
  9367  003D10  1024               	iorwf	___ftneg@f1+1,w,c
  9368  003D12  1025               	iorwf	___ftneg@f1+2,w,c
  9369  003D14  B4D8               	btfsc	status,2,c
  9370  003D16  D006               	goto	l1216
  9371  003D18  0E00               	movlw	0
  9372  003D1A  1A23               	xorwf	___ftneg@f1,f,c
  9373  003D1C  0E00               	movlw	0
  9374  003D1E  1A24               	xorwf	___ftneg@f1+1,f,c
  9375  003D20  0E80               	movlw	128
  9376  003D22  1A25               	xorwf	___ftneg@f1+2,f,c
  9377  003D24                     l1216:
  9378  003D24  C023  F023         	movff	___ftneg@f1,?___ftneg
  9379  003D28  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
  9380  003D2C  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
  9381  003D30  0012               	return		;funcret
  9382  003D32                     __end_of___ftneg:
  9383                           	opt stack 0
  9384                           tblptru	equ	0xFF8
  9385                           tblptrh	equ	0xFF7
  9386                           tblptrl	equ	0xFF6
  9387                           tablat	equ	0xFF5
  9388                           prodh	equ	0xFF4
  9389                           prodl	equ	0xFF3
  9390                           postinc0	equ	0xFEE
  9391                           wreg	equ	0xFE8
  9392                           postdec1	equ	0xFE5
  9393                           fsr1l	equ	0xFE1
  9394                           indf2	equ	0xFDF
  9395                           postinc2	equ	0xFDE
  9396                           postdec2	equ	0xFDD
  9397                           fsr2h	equ	0xFDA
  9398                           fsr2l	equ	0xFD9
  9399                           status	equ	0xFD8
  9400                           
  9401 ;; *************** function ___ftge *****************
  9402 ;; Defined at:
  9403 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;  ff1             3   46[COMRAM] float 
  9406 ;;  ff2             3   49[COMRAM] float 
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;		None
  9409 ;; Return value:  Size  Location     Type
  9410 ;;		None               void
  9411 ;; Registers used:
  9412 ;;		wreg, status,2, status,0
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9418 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9422 ;;Total ram usage:        9 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    3
  9425 ;; This function calls:
  9426 ;;		Nothing
  9427 ;; This function is called by:
  9428 ;;		_sortBattery
  9429 ;;		_printf
  9430 ;; This function uses a non-reentrant model
  9431 ;;
  9432                           
  9433                           	psect	text28
  9434  0032FA                     __ptext28:
  9435                           	opt stack 0
  9436  0032FA                     ___ftge:
  9437                           	opt stack 25
  9438                           
  9439                           ;incstack = 0
  9440  0032FA  AE31               	btfss	___ftge@ff1+2,7,c
  9441  0032FC  D016               	goto	l6596
  9442  0032FE  C02F  F035         	movff	___ftge@ff1,??___ftge
  9443  003302  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
  9444  003306  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
  9445  00330A  1E35               	comf	??___ftge,f,c
  9446  00330C  1E36               	comf	??___ftge+1,f,c
  9447  00330E  1E37               	comf	??___ftge+2,f,c
  9448  003310  2A35               	incf	??___ftge,f,c
  9449  003312  0E00               	movlw	0
  9450  003314  2236               	addwfc	??___ftge+1,f,c
  9451  003316  2237               	addwfc	??___ftge+2,f,c
  9452  003318  0E00               	movlw	0
  9453  00331A  2435               	addwf	??___ftge,w,c
  9454  00331C  6E2F               	movwf	___ftge@ff1,c
  9455  00331E  0E00               	movlw	0
  9456  003320  2036               	addwfc	??___ftge+1,w,c
  9457  003322  6E30               	movwf	___ftge@ff1+1,c
  9458  003324  0E80               	movlw	128
  9459  003326  2037               	addwfc	??___ftge+2,w,c
  9460  003328  6E31               	movwf	___ftge@ff1+2,c
  9461  00332A                     l6596:
  9462  00332A  AE34               	btfss	___ftge@ff2+2,7,c
  9463  00332C  D016               	goto	l6600
  9464  00332E  C032  F035         	movff	___ftge@ff2,??___ftge
  9465  003332  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
  9466  003336  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
  9467  00333A  1E35               	comf	??___ftge,f,c
  9468  00333C  1E36               	comf	??___ftge+1,f,c
  9469  00333E  1E37               	comf	??___ftge+2,f,c
  9470  003340  2A35               	incf	??___ftge,f,c
  9471  003342  0E00               	movlw	0
  9472  003344  2236               	addwfc	??___ftge+1,f,c
  9473  003346  2237               	addwfc	??___ftge+2,f,c
  9474  003348  0E00               	movlw	0
  9475  00334A  2435               	addwf	??___ftge,w,c
  9476  00334C  6E32               	movwf	___ftge@ff2,c
  9477  00334E  0E00               	movlw	0
  9478  003350  2036               	addwfc	??___ftge+1,w,c
  9479  003352  6E33               	movwf	___ftge@ff2+1,c
  9480  003354  0E80               	movlw	128
  9481  003356  2037               	addwfc	??___ftge+2,w,c
  9482  003358  6E34               	movwf	___ftge@ff2+2,c
  9483  00335A                     l6600:
  9484  00335A  0E00               	movlw	0
  9485  00335C  1A2F               	xorwf	___ftge@ff1,f,c
  9486  00335E  0E00               	movlw	0
  9487  003360  1A30               	xorwf	___ftge@ff1+1,f,c
  9488  003362  0E80               	movlw	128
  9489  003364  1A31               	xorwf	___ftge@ff1+2,f,c
  9490  003366  0E00               	movlw	0
  9491  003368  1A32               	xorwf	___ftge@ff2,f,c
  9492  00336A  0E00               	movlw	0
  9493  00336C  1A33               	xorwf	___ftge@ff2+1,f,c
  9494  00336E  0E80               	movlw	128
  9495  003370  1A34               	xorwf	___ftge@ff2+2,f,c
  9496  003372  5032               	movf	___ftge@ff2,w,c
  9497  003374  5C2F               	subwf	___ftge@ff1,w,c
  9498  003376  5033               	movf	___ftge@ff2+1,w,c
  9499  003378  5830               	subwfb	___ftge@ff1+1,w,c
  9500  00337A  5034               	movf	___ftge@ff2+2,w,c
  9501  00337C  5831               	subwfb	___ftge@ff1+2,w,c
  9502  00337E  B0D8               	btfsc	status,0,c
  9503  003380  D002               	goto	l6606
  9504  003382  90D8               	bcf	status,0,c
  9505  003384  0012               	return	
  9506  003386                     l6606:
  9507  003386  80D8               	bsf	status,0,c
  9508  003388  0012               	return	
  9509  00338A                     __end_of___ftge:
  9510                           	opt stack 0
  9511                           tblptru	equ	0xFF8
  9512                           tblptrh	equ	0xFF7
  9513                           tblptrl	equ	0xFF6
  9514                           tablat	equ	0xFF5
  9515                           prodh	equ	0xFF4
  9516                           prodl	equ	0xFF3
  9517                           postinc0	equ	0xFEE
  9518                           wreg	equ	0xFE8
  9519                           postdec1	equ	0xFE5
  9520                           fsr1l	equ	0xFE1
  9521                           indf2	equ	0xFDF
  9522                           postinc2	equ	0xFDE
  9523                           postdec2	equ	0xFDD
  9524                           fsr2h	equ	0xFDA
  9525                           fsr2l	equ	0xFD9
  9526                           status	equ	0xFD8
  9527                           
  9528 ;; *************** function _lcdClear *****************
  9529 ;; Defined at:
  9530 ;;		line 74 in file "lcd.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;		None
  9533 ;; Auto vars:     Size  Location     Type
  9534 ;;		None
  9535 ;; Return value:  Size  Location     Type
  9536 ;;                  1    wreg      void 
  9537 ;; Registers used:
  9538 ;;		wreg, status,2, status,0, cstack
  9539 ;; Tracked objects:
  9540 ;;		On entry : 0/0
  9541 ;;		On exit  : 0/0
  9542 ;;		Unchanged: 0/0
  9543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9548 ;;Total ram usage:        0 bytes
  9549 ;; Hardware stack levels used:    1
  9550 ;; Hardware stack levels required when called:    5
  9551 ;; This function calls:
  9552 ;;		_lcdInst
  9553 ;; This function is called by:
  9554 ;;		_main
  9555 ;;		_sortBattery
  9556 ;;		_showDateTime
  9557 ;;		_showMainMenu
  9558 ;;		_showRunSelect
  9559 ;;		_showRunMenu
  9560 ;;		_showRunTime
  9561 ;;		_showRunStats
  9562 ;;		_showErrorMessage
  9563 ;;		_debug
  9564 ;;		_pause
  9565 ;; This function uses a non-reentrant model
  9566 ;;
  9567                           
  9568                           	psect	text29
  9569  003E50                     __ptext29:
  9570                           	opt stack 0
  9571  003E50                     _lcdClear:
  9572                           	opt stack 24
  9573                           
  9574                           ;lcd.c: 75: lcdInst(0b00000001);
  9575                           
  9576                           ;incstack = 0
  9577  003E50  0E01               	movlw	1
  9578  003E52  ECBB  F01E         	call	_lcdInst
  9579  003E56  0012               	return		;funcret
  9580  003E58                     __end_of_lcdClear:
  9581                           	opt stack 0
  9582                           tblptru	equ	0xFF8
  9583                           tblptrh	equ	0xFF7
  9584                           tblptrl	equ	0xFF6
  9585                           tablat	equ	0xFF5
  9586                           prodh	equ	0xFF4
  9587                           prodl	equ	0xFF3
  9588                           postinc0	equ	0xFEE
  9589                           wreg	equ	0xFE8
  9590                           postdec1	equ	0xFE5
  9591                           fsr1l	equ	0xFE1
  9592                           indf2	equ	0xFDF
  9593                           postinc2	equ	0xFDE
  9594                           postdec2	equ	0xFDD
  9595                           fsr2h	equ	0xFDA
  9596                           fsr2l	equ	0xFD9
  9597                           status	equ	0xFD8
  9598                           
  9599 ;; *************** function _keyPressed *****************
  9600 ;; Defined at:
  9601 ;;		line 43 in file "keypad.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;  key             1   34[COMRAM] unsigned char 
  9606 ;; Return value:  Size  Location     Type
  9607 ;;                  1    wreg      unsigned char 
  9608 ;; Registers used:
  9609 ;;		wreg, status,2
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;Total ram usage:        1 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:    3
  9622 ;; This function calls:
  9623 ;;		Nothing
  9624 ;; This function is called by:
  9625 ;;		_showDateTime
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text30
  9630  003E28                     __ptext30:
  9631                           	opt stack 0
  9632  003E28                     _keyPressed:
  9633                           	opt stack 25
  9634                           
  9635                           ;keypad.c: 44: char key = lastKey;
  9636                           
  9637                           ;incstack = 0
  9638  003E28  C04D  F023         	movff	_lastKey,keyPressed@key
  9639                           
  9640                           ;keypad.c: 45: lastKey = 0;
  9641  003E2C  0E00               	movlw	0
  9642  003E2E  6E4D               	movwf	_lastKey,c
  9643                           
  9644                           ;keypad.c: 46: return key;
  9645  003E30  5023               	movf	keyPressed@key,w,c
  9646  003E32  0012               	return	
  9647  003E34                     __end_of_keyPressed:
  9648                           	opt stack 0
  9649                           tblptru	equ	0xFF8
  9650                           tblptrh	equ	0xFF7
  9651                           tblptrl	equ	0xFF6
  9652                           tablat	equ	0xFF5
  9653                           prodh	equ	0xFF4
  9654                           prodl	equ	0xFF3
  9655                           postinc0	equ	0xFEE
  9656                           wreg	equ	0xFE8
  9657                           postdec1	equ	0xFE5
  9658                           fsr1l	equ	0xFE1
  9659                           indf2	equ	0xFDF
  9660                           postinc2	equ	0xFDE
  9661                           postdec2	equ	0xFDD
  9662                           fsr2h	equ	0xFDA
  9663                           fsr2l	equ	0xFD9
  9664                           status	equ	0xFD8
  9665                           
  9666 ;; *************** function _initRTC *****************
  9667 ;; Defined at:
  9668 ;;		line 19 in file "RTC.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, status,2, status,0, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;Total ram usage:        0 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    5
  9689 ;; This function calls:
  9690 ;;		_I2C_Master_Init
  9691 ;; This function is called by:
  9692 ;;		_showInterface
  9693 ;;		_showDateTime
  9694 ;; This function uses a non-reentrant model
  9695 ;;
  9696                           
  9697                           	psect	text31
  9698  003DF0                     __ptext31:
  9699                           	opt stack 0
  9700  003DF0                     _initRTC:
  9701                           	opt stack 23
  9702                           
  9703                           ;RTC.c: 20: I2C_Master_Init(10000);
  9704                           
  9705                           ;incstack = 0
  9706  003DF0  0E10               	movlw	16
  9707  003DF2  6E30               	movwf	I2C_Master_Init@c,c
  9708  003DF4  0E27               	movlw	39
  9709  003DF6  6E31               	movwf	I2C_Master_Init@c+1,c
  9710  003DF8  0E00               	movlw	0
  9711  003DFA  6E32               	movwf	I2C_Master_Init@c+2,c
  9712  003DFC  0E00               	movlw	0
  9713  003DFE  6E33               	movwf	I2C_Master_Init@c+3,c
  9714  003E00  ECA4  F01C         	call	_I2C_Master_Init	;wreg free
  9715  003E04  0012               	return		;funcret
  9716  003E06                     __end_of_initRTC:
  9717                           	opt stack 0
  9718                           tblptru	equ	0xFF8
  9719                           tblptrh	equ	0xFF7
  9720                           tblptrl	equ	0xFF6
  9721                           tablat	equ	0xFF5
  9722                           prodh	equ	0xFF4
  9723                           prodl	equ	0xFF3
  9724                           postinc0	equ	0xFEE
  9725                           wreg	equ	0xFE8
  9726                           postdec1	equ	0xFE5
  9727                           fsr1l	equ	0xFE1
  9728                           indf2	equ	0xFDF
  9729                           postinc2	equ	0xFDE
  9730                           postdec2	equ	0xFDD
  9731                           fsr2h	equ	0xFDA
  9732                           fsr2l	equ	0xFD9
  9733                           status	equ	0xFD8
  9734                           
  9735 ;; *************** function _I2C_Master_Init *****************
  9736 ;; Defined at:
  9737 ;;		line 13 in file "I2C.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;  c               4   47[COMRAM] const unsigned long 
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;		None
  9742 ;; Return value:  Size  Location     Type
  9743 ;;                  1    wreg      void 
  9744 ;; Registers used:
  9745 ;;		wreg, status,2, status,0, cstack
  9746 ;; Tracked objects:
  9747 ;;		On entry : 0/0
  9748 ;;		On exit  : 0/0
  9749 ;;		Unchanged: 0/0
  9750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9751 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9753 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9754 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9755 ;;Total ram usage:        8 bytes
  9756 ;; Hardware stack levels used:    1
  9757 ;; Hardware stack levels required when called:    4
  9758 ;; This function calls:
  9759 ;;		___lldiv
  9760 ;; This function is called by:
  9761 ;;		_initRTC
  9762 ;;		_testFrequency
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           	psect	text32
  9767  003948                     __ptext32:
  9768                           	opt stack 0
  9769  003948                     _I2C_Master_Init:
  9770                           	opt stack 23
  9771                           
  9772                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  9773                           
  9774                           ;incstack = 0
  9775  003948  0E00               	movlw	0
  9776  00394A  6EC7               	movwf	4039,c	;volatile
  9777                           
  9778                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  9779  00394C  0E28               	movlw	40
  9780  00394E  6EC6               	movwf	4038,c	;volatile
  9781                           
  9782                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  9783  003950  0E00               	movlw	0
  9784  003952  6EC5               	movwf	4037,c	;volatile
  9785                           
  9786                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  9787  003954  0E80               	movlw	128
  9788  003956  6E23               	movwf	___lldiv@dividend,c
  9789  003958  0E96               	movlw	150
  9790  00395A  6E24               	movwf	___lldiv@dividend+1,c
  9791  00395C  0E98               	movlw	152
  9792  00395E  6E25               	movwf	___lldiv@dividend+2,c
  9793  003960  0E00               	movlw	0
  9794  003962  6E26               	movwf	___lldiv@dividend+3,c
  9795  003964  C030  F034         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  9796  003968  C031  F035         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  9797  00396C  C032  F036         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  9798  003970  C033  F037         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  9799  003974  0E02               	movlw	2
  9800  003976                     u6095:
  9801  003976  90D8               	bcf	status,0,c
  9802  003978  3634               	rlcf	??_I2C_Master_Init,f,c
  9803  00397A  3635               	rlcf	??_I2C_Master_Init+1,f,c
  9804  00397C  3636               	rlcf	??_I2C_Master_Init+2,f,c
  9805  00397E  3637               	rlcf	??_I2C_Master_Init+3,f,c
  9806  003980  2EE8               	decfsz	wreg,f,c
  9807  003982  D7F9               	goto	u6095
  9808  003984  C034  F027         	movff	??_I2C_Master_Init,___lldiv@divisor
  9809  003988  C035  F028         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9810  00398C  C036  F029         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9811  003990  C037  F02A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9812  003994  EC4D  F01A         	call	___lldiv	;wreg free
  9813  003998  0423               	decf	?___lldiv,w,c
  9814  00399A  6EC8               	movwf	4040,c	;volatile
  9815                           
  9816                           ;I2C.c: 20: TRISC3 = 1;
  9817  00399C  8694               	bsf	3988,3,c	;volatile
  9818                           
  9819                           ;I2C.c: 21: TRISC4 = 1;
  9820  00399E  8894               	bsf	3988,4,c	;volatile
  9821  0039A0  0012               	return		;funcret
  9822  0039A2                     __end_of_I2C_Master_Init:
  9823                           	opt stack 0
  9824                           tblptru	equ	0xFF8
  9825                           tblptrh	equ	0xFF7
  9826                           tblptrl	equ	0xFF6
  9827                           tablat	equ	0xFF5
  9828                           prodh	equ	0xFF4
  9829                           prodl	equ	0xFF3
  9830                           postinc0	equ	0xFEE
  9831                           wreg	equ	0xFE8
  9832                           postdec1	equ	0xFE5
  9833                           fsr1l	equ	0xFE1
  9834                           indf2	equ	0xFDF
  9835                           postinc2	equ	0xFDE
  9836                           postdec2	equ	0xFDD
  9837                           fsr2h	equ	0xFDA
  9838                           fsr2l	equ	0xFD9
  9839                           status	equ	0xFD8
  9840                           
  9841 ;; *************** function ___lldiv *****************
  9842 ;; Defined at:
  9843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;  dividend        4   34[COMRAM] unsigned long 
  9846 ;;  divisor         4   38[COMRAM] unsigned long 
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;  quotient        4   42[COMRAM] unsigned long 
  9849 ;;  counter         1   46[COMRAM] unsigned char 
  9850 ;; Return value:  Size  Location     Type
  9851 ;;                  4   34[COMRAM] unsigned long 
  9852 ;; Registers used:
  9853 ;;		wreg, status,2, status,0
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9859 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9862 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9863 ;;Total ram usage:       13 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    3
  9866 ;; This function calls:
  9867 ;;		Nothing
  9868 ;; This function is called by:
  9869 ;;		_I2C_Master_Init
  9870 ;;		_printf
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           	psect	text33
  9875  00349A                     __ptext33:
  9876                           	opt stack 0
  9877  00349A                     ___lldiv:
  9878                           	opt stack 25
  9879                           
  9880                           ;incstack = 0
  9881  00349A  0E00               	movlw	0
  9882  00349C  6E2B               	movwf	___lldiv@quotient,c
  9883  00349E  0E00               	movlw	0
  9884  0034A0  6E2C               	movwf	___lldiv@quotient+1,c
  9885  0034A2  0E00               	movlw	0
  9886  0034A4  6E2D               	movwf	___lldiv@quotient+2,c
  9887  0034A6  0E00               	movlw	0
  9888  0034A8  6E2E               	movwf	___lldiv@quotient+3,c
  9889  0034AA  5027               	movf	___lldiv@divisor,w,c
  9890  0034AC  1028               	iorwf	___lldiv@divisor+1,w,c
  9891  0034AE  1029               	iorwf	___lldiv@divisor+2,w,c
  9892  0034B0  102A               	iorwf	___lldiv@divisor+3,w,c
  9893  0034B2  B4D8               	btfsc	status,2,c
  9894  0034B4  D02A               	goto	l1266
  9895  0034B6  0E01               	movlw	1
  9896  0034B8  6E2F               	movwf	___lldiv@counter,c
  9897  0034BA  D006               	goto	l6266
  9898  0034BC                     l6264:
  9899  0034BC  90D8               	bcf	status,0,c
  9900  0034BE  3627               	rlcf	___lldiv@divisor,f,c
  9901  0034C0  3628               	rlcf	___lldiv@divisor+1,f,c
  9902  0034C2  3629               	rlcf	___lldiv@divisor+2,f,c
  9903  0034C4  362A               	rlcf	___lldiv@divisor+3,f,c
  9904  0034C6  2A2F               	incf	___lldiv@counter,f,c
  9905  0034C8                     l6266:
  9906  0034C8  AE2A               	btfss	___lldiv@divisor+3,7,c
  9907  0034CA  D7F8               	goto	l6264
  9908  0034CC                     l6268:
  9909  0034CC  90D8               	bcf	status,0,c
  9910  0034CE  362B               	rlcf	___lldiv@quotient,f,c
  9911  0034D0  362C               	rlcf	___lldiv@quotient+1,f,c
  9912  0034D2  362D               	rlcf	___lldiv@quotient+2,f,c
  9913  0034D4  362E               	rlcf	___lldiv@quotient+3,f,c
  9914  0034D6  5027               	movf	___lldiv@divisor,w,c
  9915  0034D8  5C23               	subwf	___lldiv@dividend,w,c
  9916  0034DA  5028               	movf	___lldiv@divisor+1,w,c
  9917  0034DC  5824               	subwfb	___lldiv@dividend+1,w,c
  9918  0034DE  5029               	movf	___lldiv@divisor+2,w,c
  9919  0034E0  5825               	subwfb	___lldiv@dividend+2,w,c
  9920  0034E2  502A               	movf	___lldiv@divisor+3,w,c
  9921  0034E4  5826               	subwfb	___lldiv@dividend+3,w,c
  9922  0034E6  A0D8               	btfss	status,0,c
  9923  0034E8  D009               	goto	l6276
  9924  0034EA  5027               	movf	___lldiv@divisor,w,c
  9925  0034EC  5E23               	subwf	___lldiv@dividend,f,c
  9926  0034EE  5028               	movf	___lldiv@divisor+1,w,c
  9927  0034F0  5A24               	subwfb	___lldiv@dividend+1,f,c
  9928  0034F2  5029               	movf	___lldiv@divisor+2,w,c
  9929  0034F4  5A25               	subwfb	___lldiv@dividend+2,f,c
  9930  0034F6  502A               	movf	___lldiv@divisor+3,w,c
  9931  0034F8  5A26               	subwfb	___lldiv@dividend+3,f,c
  9932  0034FA  802B               	bsf	___lldiv@quotient,0,c
  9933  0034FC                     l6276:
  9934  0034FC  90D8               	bcf	status,0,c
  9935  0034FE  322A               	rrcf	___lldiv@divisor+3,f,c
  9936  003500  3229               	rrcf	___lldiv@divisor+2,f,c
  9937  003502  3228               	rrcf	___lldiv@divisor+1,f,c
  9938  003504  3227               	rrcf	___lldiv@divisor,f,c
  9939  003506  2E2F               	decfsz	___lldiv@counter,f,c
  9940  003508  D7E1               	goto	l6268
  9941  00350A                     l1266:
  9942  00350A  C02B  F023         	movff	___lldiv@quotient,?___lldiv
  9943  00350E  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
  9944  003512  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
  9945  003516  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
  9946  00351A  0012               	return		;funcret
  9947  00351C                     __end_of___lldiv:
  9948                           	opt stack 0
  9949                           tblptru	equ	0xFF8
  9950                           tblptrh	equ	0xFF7
  9951                           tblptrl	equ	0xFF6
  9952                           tablat	equ	0xFF5
  9953                           prodh	equ	0xFF4
  9954                           prodl	equ	0xFF3
  9955                           postinc0	equ	0xFEE
  9956                           wreg	equ	0xFE8
  9957                           postdec1	equ	0xFE5
  9958                           fsr1l	equ	0xFE1
  9959                           indf2	equ	0xFDF
  9960                           postinc2	equ	0xFDE
  9961                           postdec2	equ	0xFDD
  9962                           fsr2h	equ	0xFDA
  9963                           fsr2l	equ	0xFD9
  9964                           status	equ	0xFD8
  9965                           
  9966 ;; *************** function _getTime *****************
  9967 ;; Defined at:
  9968 ;;		line 23 in file "RTC.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;		None
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;  i               1   55[COMRAM] unsigned char 
  9973 ;;  time           14   41[COMRAM] int [7]
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  2   37[COMRAM] PTR int 
  9976 ;; Registers used:
  9977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9983 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;Total ram usage:       19 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; Hardware stack levels required when called:    5
  9990 ;; This function calls:
  9991 ;;		_I2C_Master_Read
  9992 ;;		_I2C_Master_Start
  9993 ;;		_I2C_Master_Stop
  9994 ;;		_I2C_Master_Write
  9995 ;; This function is called by:
  9996 ;;		_showDateTime
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text34
 10001  00351C                     __ptext34:
 10002                           	opt stack 0
 10003  00351C                     _getTime:
 10004                           	opt stack 23
 10005                           
 10006                           ;RTC.c: 24: int time[7];
 10007                           ;RTC.c: 26: (INTCONbits.GIE = 0);
 10008                           
 10009                           ;incstack = 0
 10010  00351C  9EF2               	bcf	intcon,7,c	;volatile
 10011                           
 10012                           ;RTC.c: 29: I2C_Master_Start();
 10013  00351E  EC30  F01F         	call	_I2C_Master_Start	;wreg free
 10014                           
 10015                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
 10016  003522  0E00               	movlw	0
 10017  003524  6E25               	movwf	I2C_Master_Write@d+1,c
 10018  003526  0ED0               	movlw	208
 10019  003528  6E24               	movwf	I2C_Master_Write@d,c
 10020  00352A  EC1F  F01F         	call	_I2C_Master_Write	;wreg free
 10021                           
 10022                           ;RTC.c: 31: I2C_Master_Write(0x00);
 10023  00352E  0E00               	movlw	0
 10024  003530  6E25               	movwf	I2C_Master_Write@d+1,c
 10025  003532  0E00               	movlw	0
 10026  003534  6E24               	movwf	I2C_Master_Write@d,c
 10027  003536  EC1F  F01F         	call	_I2C_Master_Write	;wreg free
 10028                           
 10029                           ;RTC.c: 32: I2C_Master_Stop();
 10030  00353A  EC2C  F01F         	call	_I2C_Master_Stop	;wreg free
 10031                           
 10032                           ;RTC.c: 35: I2C_Master_Start();
 10033  00353E  EC30  F01F         	call	_I2C_Master_Start	;wreg free
 10034                           
 10035                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
 10036  003542  0E00               	movlw	0
 10037  003544  6E25               	movwf	I2C_Master_Write@d+1,c
 10038  003546  0ED1               	movlw	209
 10039  003548  6E24               	movwf	I2C_Master_Write@d,c
 10040  00354A  EC1F  F01F         	call	_I2C_Master_Write	;wreg free
 10041                           
 10042                           ;RTC.c: 37: for(unsigned char i=0;i<6;i++){
 10043  00354E  0E00               	movlw	0
 10044  003550  6E38               	movwf	getTime@i,c
 10045  003552                     l7100:
 10046  003552  0E05               	movlw	5
 10047  003554  6438               	cpfsgt	getTime@i,c
 10048  003556  D001               	goto	l7104
 10049  003558  D013               	goto	l7110
 10050  00355A                     l7104:
 10051                           
 10052                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
 10053  00355A  0E01               	movlw	1
 10054  00355C  EC61  F01E         	call	_I2C_Master_Read
 10055  003560  6E28               	movwf	??_getTime& (0+255),c
 10056  003562  6A29               	clrf	(??_getTime+1)& (0+255),c
 10057  003564  5038               	movf	getTime@i,w,c
 10058  003566  0D02               	mullw	2
 10059  003568  0E2A               	movlw	low getTime@time
 10060  00356A  24F3               	addwf	prodl,w,c
 10061  00356C  6ED9               	movwf	fsr2l,c
 10062  00356E  0E00               	movlw	high getTime@time
 10063  003570  20F4               	addwfc	prodh,w,c
 10064  003572  6EDA               	movwf	fsr2h,c
 10065  003574  C028  FFDE         	movff	??_getTime,postinc2
 10066  003578  C029  FFDD         	movff	??_getTime+1,postdec2
 10067  00357C  2A38               	incf	getTime@i,f,c
 10068  00357E  D7E9               	goto	l7100
 10069  003580                     l7110:
 10070                           
 10071                           ;RTC.c: 39: }
 10072                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
 10073  003580  0E00               	movlw	0
 10074  003582  EC61  F01E         	call	_I2C_Master_Read
 10075  003586  6E28               	movwf	??_getTime& (0+255),c
 10076  003588  5028               	movf	??_getTime,w,c
 10077  00358A  6E36               	movwf	getTime@time+12,c
 10078  00358C  6A37               	clrf	getTime@time+13,c
 10079                           
 10080                           ;RTC.c: 41: I2C_Master_Stop();
 10081  00358E  EC2C  F01F         	call	_I2C_Master_Stop	;wreg free
 10082                           
 10083                           ;RTC.c: 43: (INTCONbits.GIE = 1);
 10084  003592  8EF2               	bsf	intcon,7,c	;volatile
 10085                           
 10086                           ;RTC.c: 45: return time;
 10087  003594  0E2A               	movlw	low getTime@time
 10088  003596  6E26               	movwf	?_getTime,c
 10089  003598  0E00               	movlw	high getTime@time
 10090  00359A  6E27               	movwf	?_getTime+1,c
 10091  00359C  0012               	return	
 10092  00359E                     __end_of_getTime:
 10093                           	opt stack 0
 10094                           tblptru	equ	0xFF8
 10095                           tblptrh	equ	0xFF7
 10096                           tblptrl	equ	0xFF6
 10097                           tablat	equ	0xFF5
 10098                           prodh	equ	0xFF4
 10099                           prodl	equ	0xFF3
 10100                           intcon	equ	0xFF2
 10101                           postinc0	equ	0xFEE
 10102                           wreg	equ	0xFE8
 10103                           postdec1	equ	0xFE5
 10104                           fsr1l	equ	0xFE1
 10105                           indf2	equ	0xFDF
 10106                           postinc2	equ	0xFDE
 10107                           postdec2	equ	0xFDD
 10108                           fsr2h	equ	0xFDA
 10109                           fsr2l	equ	0xFD9
 10110                           status	equ	0xFD8
 10111                           
 10112 ;; *************** function _I2C_Master_Write *****************
 10113 ;; Defined at:
 10114 ;;		line 47 in file "I2C.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  d               2   35[COMRAM] unsigned int 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;		None
 10119 ;; Return value:  Size  Location     Type
 10120 ;;                  1    wreg      void 
 10121 ;; Registers used:
 10122 ;;		wreg, status,2, status,0, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;Total ram usage:        2 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    4
 10135 ;; This function calls:
 10136 ;;		_I2C_Master_Wait
 10137 ;; This function is called by:
 10138 ;;		_getTime
 10139 ;;		_testFrequency
 10140 ;;		_setTime
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text35
 10145  003E3E                     __ptext35:
 10146                           	opt stack 0
 10147  003E3E                     _I2C_Master_Write:
 10148                           	opt stack 23
 10149                           
 10150                           ;I2C.c: 49: I2C_Master_Wait();
 10151                           
 10152                           ;incstack = 0
 10153  003E3E  EC03  F01F         	call	_I2C_Master_Wait	;wreg free
 10154                           
 10155                           ;I2C.c: 50: SSPBUF = d;
 10156  003E42  C024  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10157  003E46  0012               	return		;funcret
 10158  003E48                     __end_of_I2C_Master_Write:
 10159                           	opt stack 0
 10160                           tblptru	equ	0xFF8
 10161                           tblptrh	equ	0xFF7
 10162                           tblptrl	equ	0xFF6
 10163                           tablat	equ	0xFF5
 10164                           prodh	equ	0xFF4
 10165                           prodl	equ	0xFF3
 10166                           intcon	equ	0xFF2
 10167                           postinc0	equ	0xFEE
 10168                           wreg	equ	0xFE8
 10169                           postdec1	equ	0xFE5
 10170                           fsr1l	equ	0xFE1
 10171                           indf2	equ	0xFDF
 10172                           postinc2	equ	0xFDE
 10173                           postdec2	equ	0xFDD
 10174                           fsr2h	equ	0xFDA
 10175                           fsr2l	equ	0xFD9
 10176                           status	equ	0xFD8
 10177                           
 10178 ;; *************** function _I2C_Master_Stop *****************
 10179 ;; Defined at:
 10180 ;;		line 41 in file "I2C.c"
 10181 ;; Parameters:    Size  Location     Type
 10182 ;;		None
 10183 ;; Auto vars:     Size  Location     Type
 10184 ;;		None
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  2  439[None  ] int 
 10187 ;; Registers used:
 10188 ;;		wreg, status,2, status,0, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;Total ram usage:        0 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    4
 10201 ;; This function calls:
 10202 ;;		_I2C_Master_Wait
 10203 ;; This function is called by:
 10204 ;;		_getTime
 10205 ;;		_testFrequency
 10206 ;;		_setTime
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           	psect	text36
 10211  003E58                     __ptext36:
 10212                           	opt stack 0
 10213  003E58                     _I2C_Master_Stop:
 10214                           	opt stack 23
 10215                           
 10216                           ;I2C.c: 43: I2C_Master_Wait();
 10217                           
 10218                           ;incstack = 0
 10219  003E58  EC03  F01F         	call	_I2C_Master_Wait	;wreg free
 10220                           
 10221                           ;I2C.c: 44: PEN = 1;
 10222  003E5C  84C5               	bsf	4037,2,c	;volatile
 10223  003E5E  0012               	return		;funcret
 10224  003E60                     __end_of_I2C_Master_Stop:
 10225                           	opt stack 0
 10226                           tblptru	equ	0xFF8
 10227                           tblptrh	equ	0xFF7
 10228                           tblptrl	equ	0xFF6
 10229                           tablat	equ	0xFF5
 10230                           prodh	equ	0xFF4
 10231                           prodl	equ	0xFF3
 10232                           intcon	equ	0xFF2
 10233                           postinc0	equ	0xFEE
 10234                           wreg	equ	0xFE8
 10235                           postdec1	equ	0xFE5
 10236                           fsr1l	equ	0xFE1
 10237                           indf2	equ	0xFDF
 10238                           postinc2	equ	0xFDE
 10239                           postdec2	equ	0xFDD
 10240                           fsr2h	equ	0xFDA
 10241                           fsr2l	equ	0xFD9
 10242                           status	equ	0xFD8
 10243                           
 10244 ;; *************** function _I2C_Master_Start *****************
 10245 ;; Defined at:
 10246 ;;		line 29 in file "I2C.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;		None
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;		None
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  2  435[None  ] int 
 10253 ;; Registers used:
 10254 ;;		wreg, status,2, status,0, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;Total ram usage:        0 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    4
 10267 ;; This function calls:
 10268 ;;		_I2C_Master_Wait
 10269 ;; This function is called by:
 10270 ;;		_getTime
 10271 ;;		_testFrequency
 10272 ;;		_setTime
 10273 ;; This function uses a non-reentrant model
 10274 ;;
 10275                           
 10276                           	psect	text37
 10277  003E60                     __ptext37:
 10278                           	opt stack 0
 10279  003E60                     _I2C_Master_Start:
 10280                           	opt stack 23
 10281                           
 10282                           ;I2C.c: 31: I2C_Master_Wait();
 10283                           
 10284                           ;incstack = 0
 10285  003E60  EC03  F01F         	call	_I2C_Master_Wait	;wreg free
 10286                           
 10287                           ;I2C.c: 32: SEN = 1;
 10288  003E64  80C5               	bsf	4037,0,c	;volatile
 10289  003E66  0012               	return		;funcret
 10290  003E68                     __end_of_I2C_Master_Start:
 10291                           	opt stack 0
 10292                           tblptru	equ	0xFF8
 10293                           tblptrh	equ	0xFF7
 10294                           tblptrl	equ	0xFF6
 10295                           tablat	equ	0xFF5
 10296                           prodh	equ	0xFF4
 10297                           prodl	equ	0xFF3
 10298                           intcon	equ	0xFF2
 10299                           postinc0	equ	0xFEE
 10300                           wreg	equ	0xFE8
 10301                           postdec1	equ	0xFE5
 10302                           fsr1l	equ	0xFE1
 10303                           indf2	equ	0xFDF
 10304                           postinc2	equ	0xFDE
 10305                           postdec2	equ	0xFDD
 10306                           fsr2h	equ	0xFDA
 10307                           fsr2l	equ	0xFD9
 10308                           status	equ	0xFD8
 10309                           
 10310 ;; *************** function _I2C_Master_Read *****************
 10311 ;; Defined at:
 10312 ;;		line 53 in file "I2C.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;  a               1    wreg     unsigned char 
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;  a               1   35[COMRAM] unsigned char 
 10317 ;;  temp            1   36[COMRAM] unsigned char 
 10318 ;; Return value:  Size  Location     Type
 10319 ;;                  1    wreg      unsigned char 
 10320 ;; Registers used:
 10321 ;;		wreg, status,2, status,0, cstack
 10322 ;; Tracked objects:
 10323 ;;		On entry : 0/0
 10324 ;;		On exit  : 0/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10330 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10331 ;;Total ram usage:        2 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:    4
 10334 ;; This function calls:
 10335 ;;		_I2C_Master_Wait
 10336 ;; This function is called by:
 10337 ;;		_getTime
 10338 ;;		_testFrequency
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           	psect	text38
 10343  003CC2                     __ptext38:
 10344                           	opt stack 0
 10345  003CC2                     _I2C_Master_Read:
 10346                           	opt stack 23
 10347                           
 10348                           ;incstack = 0
 10349                           ;I2C_Master_Read@a stored from wreg
 10350  003CC2  6E24               	movwf	I2C_Master_Read@a,c
 10351                           
 10352                           ;I2C.c: 55: unsigned char temp;
 10353                           ;I2C.c: 56: I2C_Master_Wait();
 10354  003CC4  EC03  F01F         	call	_I2C_Master_Wait	;wreg free
 10355                           
 10356                           ;I2C.c: 57: RCEN = 1;
 10357  003CC8  86C5               	bsf	4037,3,c	;volatile
 10358                           
 10359                           ;I2C.c: 58: I2C_Master_Wait();
 10360  003CCA  EC03  F01F         	call	_I2C_Master_Wait	;wreg free
 10361                           
 10362                           ;I2C.c: 59: temp = SSPBUF;
 10363  003CCE  CFC9 F025          	movff	4041,I2C_Master_Read@temp	;volatile
 10364                           
 10365                           ;I2C.c: 60: I2C_Master_Wait();
 10366  003CD2  EC03  F01F         	call	_I2C_Master_Wait	;wreg free
 10367                           
 10368                           ;I2C.c: 61: ACKDT = (a)?0:1;
 10369  003CD6  5024               	movf	I2C_Master_Read@a,w,c
 10370  003CD8  A4D8               	btfss	status,2,c
 10371  003CDA  D002               	goto	u6100
 10372  003CDC  8AC5               	bsf	4037,5,c	;volatile
 10373  003CDE  D001               	goto	l6316
 10374  003CE0                     u6100:
 10375  003CE0  9AC5               	bcf	4037,5,c	;volatile
 10376  003CE2                     l6316:
 10377                           
 10378                           ;I2C.c: 62: ACKEN = 1;
 10379  003CE2  88C5               	bsf	4037,4,c	;volatile
 10380                           
 10381                           ;I2C.c: 63: return temp;
 10382  003CE4  5025               	movf	I2C_Master_Read@temp,w,c
 10383  003CE6  0012               	return	
 10384  003CE8                     __end_of_I2C_Master_Read:
 10385                           	opt stack 0
 10386                           tblptru	equ	0xFF8
 10387                           tblptrh	equ	0xFF7
 10388                           tblptrl	equ	0xFF6
 10389                           tablat	equ	0xFF5
 10390                           prodh	equ	0xFF4
 10391                           prodl	equ	0xFF3
 10392                           intcon	equ	0xFF2
 10393                           postinc0	equ	0xFEE
 10394                           wreg	equ	0xFE8
 10395                           postdec1	equ	0xFE5
 10396                           fsr1l	equ	0xFE1
 10397                           indf2	equ	0xFDF
 10398                           postinc2	equ	0xFDE
 10399                           postdec2	equ	0xFDD
 10400                           fsr2h	equ	0xFDA
 10401                           fsr2l	equ	0xFD9
 10402                           status	equ	0xFD8
 10403                           
 10404 ;; *************** function _I2C_Master_Wait *****************
 10405 ;; Defined at:
 10406 ;;		line 24 in file "I2C.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;		None
 10409 ;; Auto vars:     Size  Location     Type
 10410 ;;		None
 10411 ;; Return value:  Size  Location     Type
 10412 ;;                  1    wreg      void 
 10413 ;; Registers used:
 10414 ;;		wreg, status,2, status,0
 10415 ;; Tracked objects:
 10416 ;;		On entry : 0/0
 10417 ;;		On exit  : 0/0
 10418 ;;		Unchanged: 0/0
 10419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10423 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10424 ;;Total ram usage:        1 bytes
 10425 ;; Hardware stack levels used:    1
 10426 ;; Hardware stack levels required when called:    3
 10427 ;; This function calls:
 10428 ;;		Nothing
 10429 ;; This function is called by:
 10430 ;;		_I2C_Master_Start
 10431 ;;		_I2C_Master_Stop
 10432 ;;		_I2C_Master_Write
 10433 ;;		_I2C_Master_Read
 10434 ;;		_I2C_Master_RepeatedStart
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           	psect	text39
 10439  003E06                     __ptext39:
 10440                           	opt stack 0
 10441  003E06                     _I2C_Master_Wait:
 10442                           	opt stack 23
 10443  003E06                     l510:
 10444  003E06  B4C7               	btfsc	4039,2,c	;volatile
 10445  003E08  D7FE               	goto	l510
 10446  003E0A  CFC5 F023          	movff	4037,??_I2C_Master_Wait	;volatile
 10447  003E0E  0E1F               	movlw	31
 10448  003E10  1623               	andwf	??_I2C_Master_Wait,f,c
 10449  003E12  B4D8               	btfsc	status,2,c
 10450  003E14  0012               	return	
 10451  003E16  D7F7               	goto	l510
 10452  003E18                     __end_of_I2C_Master_Wait:
 10453                           	opt stack 0
 10454                           tblptru	equ	0xFF8
 10455                           tblptrh	equ	0xFF7
 10456                           tblptrl	equ	0xFF6
 10457                           tablat	equ	0xFF5
 10458                           prodh	equ	0xFF4
 10459                           prodl	equ	0xFF3
 10460                           intcon	equ	0xFF2
 10461                           postinc0	equ	0xFEE
 10462                           wreg	equ	0xFE8
 10463                           postdec1	equ	0xFE5
 10464                           fsr1l	equ	0xFE1
 10465                           indf2	equ	0xFDF
 10466                           postinc2	equ	0xFDE
 10467                           postdec2	equ	0xFDD
 10468                           fsr2h	equ	0xFDA
 10469                           fsr2l	equ	0xFD9
 10470                           status	equ	0xFD8
 10471                           
 10472 ;; *************** function _readPastRun *****************
 10473 ;; Defined at:
 10474 ;;		line 23 in file "eeprom.c"
 10475 ;; Parameters:    Size  Location     Type
 10476 ;;  run             2    0[BANK0 ] int 
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;  i               2   16[BANK0 ] int 
 10479 ;;  data           14    2[BANK0 ] int [7]
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  2    0[BANK0 ] PTR int 
 10482 ;; Registers used:
 10483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10489 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;Total ram usage:       18 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    4
 10496 ;; This function calls:
 10497 ;;		___wmul
 10498 ;;		_eepromRead
 10499 ;; This function is called by:
 10500 ;;		_showInterface
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text40
 10505  003268                     __ptext40:
 10506                           	opt stack 0
 10507  003268                     _readPastRun:
 10508                           	opt stack 25
 10509                           
 10510                           ;eeprom.c: 24: int data[7];
 10511                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 10512                           
 10513                           ;incstack = 0
 10514  003268  0E00               	movlw	0
 10515  00326A  0100               	movlb	0	; () banked
 10516  00326C  6F91               	movwf	(readPastRun@i+1)& (0+255),b
 10517  00326E  0E00               	movlw	0
 10518  003270  6F90               	movwf	readPastRun@i& (0+255),b
 10519  003272                     l7240:
 10520                           
 10521                           ; BSR set to: 0
 10522  003272  0100               	movlb	0	; () banked
 10523  003274  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
 10524  003276  D008               	goto	l7244
 10525  003278  0100               	movlb	0	; () banked
 10526  00327A  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 10527  00327C  E137               	bnz	l7250
 10528  00327E  0E07               	movlw	7
 10529  003280  0100               	movlb	0	; () banked
 10530  003282  5D90               	subwf	readPastRun@i& (0+255),w,b
 10531  003284  B0D8               	btfsc	status,0,c
 10532  003286  D032               	goto	l7250
 10533  003288                     l7244:
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 10537  003288  C080  F031         	movff	readPastRun@run,___wmul@multiplier
 10538  00328C  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
 10539  003290  0E00               	movlw	0
 10540  003292  6E34               	movwf	___wmul@multiplicand+1,c
 10541  003294  0E07               	movlw	7
 10542  003296  6E33               	movwf	___wmul@multiplicand,c
 10543  003298  EC74  F01E         	call	___wmul	;wreg free
 10544  00329C  0100               	movlb	0	; () banked
 10545  00329E  5190               	movf	readPastRun@i& (0+255),w,b
 10546  0032A0  2631               	addwf	?___wmul,f,c
 10547  0032A2  0100               	movlb	0	; () banked
 10548  0032A4  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 10549  0032A6  2232               	addwfc	?___wmul+1,f,c
 10550  0032A8  0E01               	movlw	1
 10551  0032AA  2631               	addwf	?___wmul,f,c
 10552  0032AC  0E00               	movlw	0
 10553  0032AE  2232               	addwfc	?___wmul+1,f,c
 10554  0032B0  C031  F037         	movff	?___wmul,eepromRead@address
 10555  0032B4  C032  F038         	movff	?___wmul+1,eepromRead@address+1
 10556  0032B8  0E00               	movlw	0
 10557  0032BA  BE38               	btfsc	eepromRead@address+1,7,c
 10558  0032BC  0EFF               	movlw	-1
 10559  0032BE  6E39               	movwf	eepromRead@address+2,c
 10560  0032C0  6E3A               	movwf	eepromRead@address+3,c
 10561  0032C2  ECEB  F01E         	call	_eepromRead	;wreg free
 10562  0032C6  90D8               	bcf	status,0,c
 10563  0032C8  0100               	movlb	0	; () banked
 10564  0032CA  3590               	rlcf	readPastRun@i& (0+255),w,b
 10565  0032CC  6ED9               	movwf	fsr2l,c
 10566  0032CE  0100               	movlb	0	; () banked
 10567  0032D0  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
 10568  0032D2  6EDA               	movwf	fsr2h,c
 10569  0032D4  0E82               	movlw	low readPastRun@data
 10570  0032D6  26D9               	addwf	fsr2l,f,c
 10571  0032D8  0E00               	movlw	high readPastRun@data
 10572  0032DA  22DA               	addwfc	fsr2h,f,c
 10573  0032DC  C037  FFDE         	movff	?_eepromRead,postinc2
 10574  0032E0  C038  FFDD         	movff	?_eepromRead+1,postdec2
 10575                           
 10576                           ; BSR set to: 0
 10577  0032E4  0100               	movlb	0	; () banked
 10578  0032E6  4B90               	infsnz	readPastRun@i& (0+255),f,b
 10579  0032E8  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
 10580  0032EA  D7C3               	goto	l7240
 10581  0032EC                     l7250:
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;eeprom.c: 27: }
 10585                           ;eeprom.c: 28: return data;
 10586  0032EC  0E82               	movlw	low readPastRun@data
 10587  0032EE  0100               	movlb	0	; () banked
 10588  0032F0  6F80               	movwf	?_readPastRun& (0+255),b
 10589  0032F2  0E00               	movlw	high readPastRun@data
 10590  0032F4  0100               	movlb	0	; () banked
 10591  0032F6  6F81               	movwf	(?_readPastRun+1)& (0+255),b
 10592  0032F8  0012               	return	
 10593  0032FA                     __end_of_readPastRun:
 10594                           	opt stack 0
 10595                           tblptru	equ	0xFF8
 10596                           tblptrh	equ	0xFF7
 10597                           tblptrl	equ	0xFF6
 10598                           tablat	equ	0xFF5
 10599                           prodh	equ	0xFF4
 10600                           prodl	equ	0xFF3
 10601                           intcon	equ	0xFF2
 10602                           postinc0	equ	0xFEE
 10603                           wreg	equ	0xFE8
 10604                           postdec1	equ	0xFE5
 10605                           fsr1l	equ	0xFE1
 10606                           indf2	equ	0xFDF
 10607                           postinc2	equ	0xFDE
 10608                           postdec2	equ	0xFDD
 10609                           fsr2h	equ	0xFDA
 10610                           fsr2l	equ	0xFD9
 10611                           status	equ	0xFD8
 10612                           
 10613 ;; *************** function _saveNewRun *****************
 10614 ;; Defined at:
 10615 ;;		line 31 in file "eeprom.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;  data            2    9[BANK0 ] PTR int 
 10618 ;;		 -> main@run(14), 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;  i               2   13[BANK0 ] int 
 10621 ;;  n               2   11[BANK0 ] int 
 10622 ;; Return value:  Size  Location     Type
 10623 ;;                  1    wreg      void 
 10624 ;; Registers used:
 10625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10631 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;Total ram usage:        6 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    4
 10638 ;; This function calls:
 10639 ;;		___wmul
 10640 ;;		_eepromRead
 10641 ;;		_eepromWrite
 10642 ;; This function is called by:
 10643 ;;		_main
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           	psect	text41
 10648  002A84                     __ptext41:
 10649                           	opt stack 0
 10650  002A84                     _saveNewRun:
 10651                           	opt stack 26
 10652                           
 10653                           ;eeprom.c: 33: eepromWrite(eepromRead(0)+1,0);
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;incstack = 0
 10657  002A84  0E00               	movlw	0
 10658  002A86  6E37               	movwf	eepromRead@address,c
 10659  002A88  0E00               	movlw	0
 10660  002A8A  6E38               	movwf	eepromRead@address+1,c
 10661  002A8C  0E00               	movlw	0
 10662  002A8E  6E39               	movwf	eepromRead@address+2,c
 10663  002A90  0E00               	movlw	0
 10664  002A92  6E3A               	movwf	eepromRead@address+3,c
 10665  002A94  ECEB  F01E         	call	_eepromRead	;wreg free
 10666  002A98  0E01               	movlw	1
 10667  002A9A  2437               	addwf	?_eepromRead,w,c
 10668  002A9C  0100               	movlb	0	; () banked
 10669  002A9E  6F80               	movwf	eepromWrite@data& (0+255),b
 10670  002AA0  0E00               	movlw	0
 10671  002AA2  2038               	addwfc	?_eepromRead+1,w,c
 10672  002AA4  0100               	movlb	0	; () banked
 10673  002AA6  6F81               	movwf	(eepromWrite@data+1)& (0+255),b
 10674  002AA8  0E00               	movlw	0
 10675  002AAA  0100               	movlb	0	; () banked
 10676  002AAC  6F82               	movwf	eepromWrite@address& (0+255),b
 10677  002AAE  0E00               	movlw	0
 10678  002AB0  6F83               	movwf	(eepromWrite@address+1)& (0+255),b
 10679  002AB2  0E00               	movlw	0
 10680  002AB4  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 10681  002AB6  0E00               	movlw	0
 10682  002AB8  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 10683  002ABA  ECD1  F01C         	call	_eepromWrite	;wreg free
 10684                           
 10685                           ;eeprom.c: 34: int n = eepromRead(0);
 10686  002ABE  0E00               	movlw	0
 10687  002AC0  6E37               	movwf	eepromRead@address,c
 10688  002AC2  0E00               	movlw	0
 10689  002AC4  6E38               	movwf	eepromRead@address+1,c
 10690  002AC6  0E00               	movlw	0
 10691  002AC8  6E39               	movwf	eepromRead@address+2,c
 10692  002ACA  0E00               	movlw	0
 10693  002ACC  6E3A               	movwf	eepromRead@address+3,c
 10694  002ACE  ECEB  F01E         	call	_eepromRead	;wreg free
 10695  002AD2  C037  F08B         	movff	?_eepromRead,saveNewRun@n
 10696  002AD6  C038  F08C         	movff	?_eepromRead+1,saveNewRun@n+1
 10697                           
 10698                           ;eeprom.c: 36: for(int i = 0; i < 7; i++){
 10699  002ADA  0E00               	movlw	0
 10700  002ADC  0100               	movlb	0	; () banked
 10701  002ADE  6F8E               	movwf	(saveNewRun@i+1)& (0+255),b
 10702  002AE0  0E00               	movlw	0
 10703  002AE2  6F8D               	movwf	saveNewRun@i& (0+255),b
 10704  002AE4                     l7568:
 10705                           
 10706                           ; BSR set to: 0
 10707  002AE4  0100               	movlb	0	; () banked
 10708  002AE6  BF8E               	btfsc	(saveNewRun@i+1)& (0+255),7,b
 10709  002AE8  D008               	goto	l7572
 10710  002AEA  0100               	movlb	0	; () banked
 10711  002AEC  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 10712  002AEE  E13A               	bnz	l391
 10713  002AF0  0E07               	movlw	7
 10714  002AF2  0100               	movlb	0	; () banked
 10715  002AF4  5D8D               	subwf	saveNewRun@i& (0+255),w,b
 10716  002AF6  B0D8               	btfsc	status,0,c
 10717  002AF8  0012               	return	
 10718  002AFA                     l7572:
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;eeprom.c: 37: eepromWrite(data[i], (n*7+1) + i);
 10722  002AFA  90D8               	bcf	status,0,c
 10723  002AFC  0100               	movlb	0	; () banked
 10724  002AFE  358D               	rlcf	saveNewRun@i& (0+255),w,b
 10725  002B00  6ED9               	movwf	fsr2l,c
 10726  002B02  0100               	movlb	0	; () banked
 10727  002B04  358E               	rlcf	(saveNewRun@i+1)& (0+255),w,b
 10728  002B06  6EDA               	movwf	fsr2h,c
 10729  002B08  0100               	movlb	0	; () banked
 10730  002B0A  5189               	movf	saveNewRun@data& (0+255),w,b
 10731  002B0C  26D9               	addwf	fsr2l,f,c
 10732  002B0E  0100               	movlb	0	; () banked
 10733  002B10  518A               	movf	(saveNewRun@data+1)& (0+255),w,b
 10734  002B12  22DA               	addwfc	fsr2h,f,c
 10735  002B14  CFDE F080          	movff	postinc2,eepromWrite@data
 10736  002B18  CFDD F081          	movff	postdec2,eepromWrite@data+1
 10737  002B1C  C08B  F031         	movff	saveNewRun@n,___wmul@multiplier
 10738  002B20  C08C  F032         	movff	saveNewRun@n+1,___wmul@multiplier+1
 10739  002B24  0E00               	movlw	0
 10740  002B26  6E34               	movwf	___wmul@multiplicand+1,c
 10741  002B28  0E07               	movlw	7
 10742  002B2A  6E33               	movwf	___wmul@multiplicand,c
 10743  002B2C  EC74  F01E         	call	___wmul	;wreg free
 10744  002B30  0100               	movlb	0	; () banked
 10745  002B32  518D               	movf	saveNewRun@i& (0+255),w,b
 10746  002B34  2631               	addwf	?___wmul,f,c
 10747  002B36  0100               	movlb	0	; () banked
 10748  002B38  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 10749  002B3A  2232               	addwfc	?___wmul+1,f,c
 10750  002B3C  0E01               	movlw	1
 10751  002B3E  2631               	addwf	?___wmul,f,c
 10752  002B40  0E00               	movlw	0
 10753  002B42  2232               	addwfc	?___wmul+1,f,c
 10754  002B44  C031  F082         	movff	?___wmul,eepromWrite@address
 10755  002B48  C032  F083         	movff	?___wmul+1,eepromWrite@address+1
 10756  002B4C  0100               	movlb	0	; () banked
 10757  002B4E  0E00               	movlw	0
 10758  002B50  BF83               	btfsc	(eepromWrite@address+1)& (0+255),7,b
 10759  002B52  0EFF               	movlw	-1
 10760  002B54  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 10761  002B56  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 10762  002B58  ECD1  F01C         	call	_eepromWrite	;wreg free
 10763  002B5C  0100               	movlb	0	; () banked
 10764  002B5E  4B8D               	infsnz	saveNewRun@i& (0+255),f,b
 10765  002B60  2B8E               	incf	(saveNewRun@i+1)& (0+255),f,b
 10766  002B62  D7C0               	goto	l7568
 10767  002B64                     l391:
 10768                           
 10769                           ; BSR set to: 0
 10770  002B64  0012               	return		;funcret
 10771  002B66                     __end_of_saveNewRun:
 10772                           	opt stack 0
 10773                           tblptru	equ	0xFF8
 10774                           tblptrh	equ	0xFF7
 10775                           tblptrl	equ	0xFF6
 10776                           tablat	equ	0xFF5
 10777                           prodh	equ	0xFF4
 10778                           prodl	equ	0xFF3
 10779                           intcon	equ	0xFF2
 10780                           postinc0	equ	0xFEE
 10781                           wreg	equ	0xFE8
 10782                           postdec1	equ	0xFE5
 10783                           fsr1l	equ	0xFE1
 10784                           indf2	equ	0xFDF
 10785                           postinc2	equ	0xFDE
 10786                           postdec2	equ	0xFDD
 10787                           fsr2h	equ	0xFDA
 10788                           fsr2l	equ	0xFD9
 10789                           status	equ	0xFD8
 10790                           
 10791 ;; *************** function _eepromWrite *****************
 10792 ;; Defined at:
 10793 ;;		line 41 in file "eeprom.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;  data            2    0[BANK0 ] int 
 10796 ;;  address         4    2[BANK0 ] long 
 10797 ;; Auto vars:     Size  Location     Type
 10798 ;;  ien             2    7[BANK0 ] int 
 10799 ;; Return value:  Size  Location     Type
 10800 ;;                  1    wreg      void 
 10801 ;; Registers used:
 10802 ;;		wreg, status,2, status,0
 10803 ;; Tracked objects:
 10804 ;;		On entry : 0/0
 10805 ;;		On exit  : 0/0
 10806 ;;		Unchanged: 0/0
 10807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10808 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10811 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10812 ;;Total ram usage:        9 bytes
 10813 ;; Hardware stack levels used:    1
 10814 ;; Hardware stack levels required when called:    3
 10815 ;; This function calls:
 10816 ;;		Nothing
 10817 ;; This function is called by:
 10818 ;;		_saveNewRun
 10819 ;; This function uses a non-reentrant model
 10820 ;;
 10821                           
 10822                           	psect	text42
 10823  0039A2                     __ptext42:
 10824                           	opt stack 0
 10825  0039A2                     _eepromWrite:
 10826                           	opt stack 26
 10827  0039A2                     l394:
 10828  0039A2  B2A6               	btfsc	4006,1,c	;volatile
 10829  0039A4  D7FE               	goto	l394
 10830                           
 10831                           ;eeprom.c: 45: int ien = INTCONbits.GIE;
 10832  0039A6  AEF2               	btfss	intcon,7,c	;volatile
 10833  0039A8  D004               	goto	u7540
 10834  0039AA  0100               	movlb	0	; () banked
 10835  0039AC  6B86               	clrf	??_eepromWrite& (0+255),b
 10836  0039AE  2B86               	incf	??_eepromWrite& (0+255),f,b
 10837  0039B0  D002               	goto	u7548
 10838  0039B2                     u7540:
 10839  0039B2  0100               	movlb	0	; () banked
 10840  0039B4  6B86               	clrf	??_eepromWrite& (0+255),b
 10841  0039B6                     u7548:
 10842  0039B6  0100               	movlb	0	; () banked
 10843  0039B8  5186               	movf	??_eepromWrite& (0+255),w,b
 10844  0039BA  0100               	movlb	0	; () banked
 10845  0039BC  6F87               	movwf	eepromWrite@ien& (0+255),b
 10846  0039BE  6B88               	clrf	(eepromWrite@ien+1)& (0+255),b
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;eeprom.c: 46: (INTCONbits.GIE = 0);
 10850  0039C0  9EF2               	bcf	intcon,7,c	;volatile
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;eeprom.c: 47: EEADR = address;
 10854  0039C2  C082  FFA9         	movff	eepromWrite@address,4009	;volatile
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;eeprom.c: 48: EEADRH = (address>>8) & 0b11;
 10858  0039C6  0100               	movlb	0	; () banked
 10859  0039C8  5183               	movf	(eepromWrite@address+1)& (0+255),w,b
 10860  0039CA  0B03               	andlw	3
 10861  0039CC  6EAA               	movwf	4010,c	;volatile
 10862                           
 10863                           ; BSR set to: 0
 10864                           ;eeprom.c: 49: EEDATA = data;
 10865  0039CE  C080  FFA8         	movff	eepromWrite@data,4008	;volatile
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;eeprom.c: 50: EECON1 = 0b100;
 10869  0039D2  0E04               	movlw	4
 10870  0039D4  6EA6               	movwf	4006,c	;volatile
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;eeprom.c: 52: EECON2 = 0x55;
 10874  0039D6  0E55               	movlw	85
 10875  0039D8  6EA7               	movwf	4007,c	;volatile
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;eeprom.c: 53: EECON2 = 0xaa;
 10879  0039DA  0EAA               	movlw	170
 10880  0039DC  6EA7               	movwf	4007,c	;volatile
 10881                           
 10882                           ; BSR set to: 0
 10883                           ;eeprom.c: 57: EECON1 |= 0b10;
 10884  0039DE  82A6               	bsf	4006,1,c	;volatile
 10885  0039E0                     l397:
 10886  0039E0  B2A6               	btfsc	4006,1,c	;volatile
 10887  0039E2  D7FE               	goto	l397
 10888                           
 10889                           ;eeprom.c: 60: EEIF = 0;
 10890  0039E4  98A1               	bcf	4001,4,c	;volatile
 10891                           
 10892                           ;eeprom.c: 62: EECON1 = 0;
 10893  0039E6  0E00               	movlw	0
 10894  0039E8  6EA6               	movwf	4006,c	;volatile
 10895                           
 10896                           ;eeprom.c: 63: INTCONbits.GIE = ien;
 10897  0039EA  0100               	movlb	0	; () banked
 10898  0039EC  B187               	btfsc	eepromWrite@ien& (0+255),0,b
 10899  0039EE  D002               	bra	u7565
 10900  0039F0  9EF2               	bcf	intcon,7,c	;volatile
 10901  0039F2  D001               	bra	u7566
 10902  0039F4                     u7565:
 10903  0039F4  8EF2               	bsf	intcon,7,c	;volatile
 10904  0039F6                     u7566:
 10905  0039F6  0012               	return		;funcret
 10906  0039F8                     __end_of_eepromWrite:
 10907                           	opt stack 0
 10908                           tblptru	equ	0xFF8
 10909                           tblptrh	equ	0xFF7
 10910                           tblptrl	equ	0xFF6
 10911                           tablat	equ	0xFF5
 10912                           prodh	equ	0xFF4
 10913                           prodl	equ	0xFF3
 10914                           intcon	equ	0xFF2
 10915                           postinc0	equ	0xFEE
 10916                           wreg	equ	0xFE8
 10917                           postdec1	equ	0xFE5
 10918                           fsr1l	equ	0xFE1
 10919                           indf2	equ	0xFDF
 10920                           postinc2	equ	0xFDE
 10921                           postdec2	equ	0xFDD
 10922                           fsr2h	equ	0xFDA
 10923                           fsr2l	equ	0xFD9
 10924                           status	equ	0xFD8
 10925                           
 10926 ;; *************** function _eepromRead *****************
 10927 ;; Defined at:
 10928 ;;		line 66 in file "eeprom.c"
 10929 ;; Parameters:    Size  Location     Type
 10930 ;;  address         4   54[COMRAM] long 
 10931 ;; Auto vars:     Size  Location     Type
 10932 ;;		None
 10933 ;; Return value:  Size  Location     Type
 10934 ;;                  2   54[COMRAM] int 
 10935 ;; Registers used:
 10936 ;;		wreg, status,2, status,0
 10937 ;; Tracked objects:
 10938 ;;		On entry : 0/0
 10939 ;;		On exit  : 0/0
 10940 ;;		Unchanged: 0/0
 10941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10945 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10946 ;;Total ram usage:        4 bytes
 10947 ;; Hardware stack levels used:    1
 10948 ;; Hardware stack levels required when called:    3
 10949 ;; This function calls:
 10950 ;;		Nothing
 10951 ;; This function is called by:
 10952 ;;		_readPastRun
 10953 ;;		_saveNewRun
 10954 ;;		_debug
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           	psect	text43
 10959  003DD6                     __ptext43:
 10960                           	opt stack 0
 10961  003DD6                     _eepromRead:
 10962                           	opt stack 25
 10963                           
 10964                           ;eeprom.c: 67: EEADR = address;
 10965                           
 10966                           ;incstack = 0
 10967  003DD6  C037  FFA9         	movff	eepromRead@address,4009	;volatile
 10968                           
 10969                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 10970  003DDA  5038               	movf	eepromRead@address+1,w,c
 10971  003DDC  0B03               	andlw	3
 10972  003DDE  6EAA               	movwf	4010,c	;volatile
 10973                           
 10974                           ;eeprom.c: 69: EECON1 = 0;
 10975  003DE0  0E00               	movlw	0
 10976  003DE2  6EA6               	movwf	4006,c	;volatile
 10977                           
 10978                           ;eeprom.c: 70: EECON1 = 1;
 10979  003DE4  0E01               	movlw	1
 10980  003DE6  6EA6               	movwf	4006,c	;volatile
 10981                           
 10982                           ;eeprom.c: 71: return EEDATA;
 10983  003DE8  CFA8 F037          	movff	4008,?_eepromRead	;volatile
 10984  003DEC  6A38               	clrf	?_eepromRead+1,c
 10985  003DEE  0012               	return	
 10986  003DF0                     __end_of_eepromRead:
 10987                           	opt stack 0
 10988                           tblptru	equ	0xFF8
 10989                           tblptrh	equ	0xFF7
 10990                           tblptrl	equ	0xFF6
 10991                           tablat	equ	0xFF5
 10992                           prodh	equ	0xFF4
 10993                           prodl	equ	0xFF3
 10994                           intcon	equ	0xFF2
 10995                           postinc0	equ	0xFEE
 10996                           wreg	equ	0xFE8
 10997                           postdec1	equ	0xFE5
 10998                           fsr1l	equ	0xFE1
 10999                           indf2	equ	0xFDF
 11000                           postinc2	equ	0xFDE
 11001                           postdec2	equ	0xFDD
 11002                           fsr2h	equ	0xFDA
 11003                           fsr2l	equ	0xFD9
 11004                           status	equ	0xFD8
 11005                           
 11006 ;; *************** function ___wmul *****************
 11007 ;; Defined at:
 11008 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11009 ;; Parameters:    Size  Location     Type
 11010 ;;  multiplier      2   48[COMRAM] unsigned int 
 11011 ;;  multiplicand    2   50[COMRAM] unsigned int 
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;  product         2   52[COMRAM] unsigned int 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  2   48[COMRAM] unsigned int 
 11016 ;; Registers used:
 11017 ;;		wreg, status,2, status,0, prodl, prodh
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11023 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;Total ram usage:        6 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    3
 11030 ;; This function calls:
 11031 ;;		Nothing
 11032 ;; This function is called by:
 11033 ;;		_readPastRun
 11034 ;;		_saveNewRun
 11035 ;;		_fround
 11036 ;;		_scale
 11037 ;;		_printf
 11038 ;; This function uses a non-reentrant model
 11039 ;;
 11040                           
 11041                           	psect	text44
 11042  003CE8                     __ptext44:
 11043                           	opt stack 0
 11044  003CE8                     ___wmul:
 11045                           	opt stack 24
 11046                           
 11047                           ;incstack = 0
 11048  003CE8  5031               	movf	___wmul@multiplier,w,c
 11049  003CEA  0233               	mulwf	___wmul@multiplicand,c
 11050  003CEC  CFF3 F035          	movff	prodl,___wmul@product
 11051  003CF0  CFF4 F036          	movff	prodh,___wmul@product+1
 11052  003CF4  5031               	movf	___wmul@multiplier,w,c
 11053  003CF6  0234               	mulwf	___wmul@multiplicand+1,c
 11054  003CF8  50F3               	movf	prodl,w,c
 11055  003CFA  2636               	addwf	___wmul@product+1,f,c
 11056  003CFC  5032               	movf	___wmul@multiplier+1,w,c
 11057  003CFE  0233               	mulwf	___wmul@multiplicand,c
 11058  003D00  50F3               	movf	prodl,w,c
 11059  003D02  2636               	addwf	___wmul@product+1,f,c
 11060  003D04  C035  F031         	movff	___wmul@product,?___wmul
 11061  003D08  C036  F032         	movff	___wmul@product+1,?___wmul+1
 11062  003D0C  0012               	return	
 11063  003D0E                     __end_of___wmul:
 11064                           	opt stack 0
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           postinc0	equ	0xFEE
 11073                           wreg	equ	0xFE8
 11074                           postdec1	equ	0xFE5
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           fsr2h	equ	0xFDA
 11080                           fsr2l	equ	0xFD9
 11081                           status	equ	0xFD8
 11082                           
 11083 ;; *************** function _pinSetup *****************
 11084 ;; Defined at:
 11085 ;;		line 301 in file "main.c"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;		None
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;		None
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      void 
 11092 ;; Registers used:
 11093 ;;		wreg, status,2, status,0
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;Total ram usage:        0 bytes
 11104 ;; Hardware stack levels used:    1
 11105 ;; Hardware stack levels required when called:    3
 11106 ;; This function calls:
 11107 ;;		Nothing
 11108 ;; This function is called by:
 11109 ;;		_main
 11110 ;;		_debug
 11111 ;; This function uses a non-reentrant model
 11112 ;;
 11113                           
 11114                           	psect	text45
 11115  003BBC                     __ptext45:
 11116                           	opt stack 0
 11117  003BBC                     _pinSetup:
 11118                           	opt stack 27
 11119                           
 11120                           ;main.c: 307: TRISA = 0xFF;
 11121                           
 11122                           ;incstack = 0
 11123  003BBC  6892               	setf	3986,c	;volatile
 11124                           
 11125                           ;main.c: 308: TRISB = 0xFF;
 11126  003BBE  6893               	setf	3987,c	;volatile
 11127                           
 11128                           ;main.c: 309: TRISC = 0b11000000;
 11129  003BC0  0EC0               	movlw	192
 11130  003BC2  6E94               	movwf	3988,c	;volatile
 11131                           
 11132                           ;main.c: 310: TRISD = 0x00;
 11133  003BC4  0E00               	movlw	0
 11134  003BC6  6E95               	movwf	3989,c	;volatile
 11135                           
 11136                           ;main.c: 311: TRISE = 0x00;
 11137  003BC8  0E00               	movlw	0
 11138  003BCA  6E96               	movwf	3990,c	;volatile
 11139                           
 11140                           ;main.c: 313: LATA = 0x00;
 11141  003BCC  0E00               	movlw	0
 11142  003BCE  6E89               	movwf	3977,c	;volatile
 11143                           
 11144                           ;main.c: 314: LATB = 0x00;
 11145  003BD0  0E00               	movlw	0
 11146  003BD2  6E8A               	movwf	3978,c	;volatile
 11147                           
 11148                           ;main.c: 315: LATC = 0x00;
 11149  003BD4  0E00               	movlw	0
 11150  003BD6  6E8B               	movwf	3979,c	;volatile
 11151                           
 11152                           ;main.c: 316: LATD = 0x00;
 11153  003BD8  0E00               	movlw	0
 11154  003BDA  6E8C               	movwf	3980,c	;volatile
 11155                           
 11156                           ;main.c: 317: LATE = 0x00;
 11157  003BDC  0E00               	movlw	0
 11158  003BDE  6E8D               	movwf	3981,c	;volatile
 11159                           
 11160                           ;main.c: 319: ADCON0 = 0x00;
 11161  003BE0  0E00               	movlw	0
 11162  003BE2  6EC2               	movwf	4034,c	;volatile
 11163                           
 11164                           ;main.c: 321: ADCON1 |= 0x0B;
 11165  003BE4  0E0B               	movlw	11
 11166  003BE6  12C1               	iorwf	4033,f,c	;volatile
 11167                           
 11168                           ;main.c: 326: ADCON2 = 0;
 11169  003BE8  0E00               	movlw	0
 11170  003BEA  6EC0               	movwf	4032,c	;volatile
 11171                           
 11172                           ;main.c: 327: ADCON2 |= 0b010;
 11173  003BEC  82C0               	bsf	4032,1,c	;volatile
 11174                           
 11175                           ;main.c: 328: ADCON2 |= 0b110<<3;
 11176  003BEE  0E30               	movlw	48
 11177  003BF0  12C0               	iorwf	4032,f,c	;volatile
 11178                           
 11179                           ;main.c: 329: ADCON2 |= 1<<7;
 11180  003BF2  8EC0               	bsf	4032,7,c	;volatile
 11181                           
 11182                           ;main.c: 332: INT1IE = 1;
 11183  003BF4  86F0               	bsf	intcon3,3,c	;volatile
 11184                           
 11185                           ;main.c: 333: INT0IE = 1;
 11186  003BF6  88F2               	bsf	intcon,4,c	;volatile
 11187                           
 11188                           ;main.c: 334: (INTCONbits.GIE = 1);
 11189  003BF8  8EF2               	bsf	intcon,7,c	;volatile
 11190  003BFA  0012               	return		;funcret
 11191  003BFC                     __end_of_pinSetup:
 11192                           	opt stack 0
 11193                           tblptru	equ	0xFF8
 11194                           tblptrh	equ	0xFF7
 11195                           tblptrl	equ	0xFF6
 11196                           tablat	equ	0xFF5
 11197                           prodh	equ	0xFF4
 11198                           prodl	equ	0xFF3
 11199                           intcon	equ	0xFF2
 11200                           intcon3	equ	0xFF0
 11201                           postinc0	equ	0xFEE
 11202                           wreg	equ	0xFE8
 11203                           postdec1	equ	0xFE5
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function _lcdHome *****************
 11213 ;; Defined at:
 11214 ;;		line 70 in file "lcd.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;		None
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;		None
 11219 ;; Return value:  Size  Location     Type
 11220 ;;                  2   24[None  ] int 
 11221 ;; Registers used:
 11222 ;;		wreg, status,2, status,0, cstack
 11223 ;; Tracked objects:
 11224 ;;		On entry : 0/0
 11225 ;;		On exit  : 0/0
 11226 ;;		Unchanged: 0/0
 11227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11232 ;;Total ram usage:        0 bytes
 11233 ;; Hardware stack levels used:    1
 11234 ;; Hardware stack levels required when called:    5
 11235 ;; This function calls:
 11236 ;;		_lcdInst
 11237 ;; This function is called by:
 11238 ;;		_main
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text46
 11243  003E68                     __ptext46:
 11244                           	opt stack 0
 11245  003E68                     _lcdHome:
 11246                           	opt stack 25
 11247                           
 11248                           ;lcd.c: 71: lcdInst(0b11000000);
 11249                           
 11250                           ;incstack = 0
 11251  003E68  0EC0               	movlw	192
 11252  003E6A  ECBB  F01E         	call	_lcdInst
 11253  003E6E  0012               	return		;funcret
 11254  003E70                     __end_of_lcdHome:
 11255                           	opt stack 0
 11256                           tblptru	equ	0xFF8
 11257                           tblptrh	equ	0xFF7
 11258                           tblptrl	equ	0xFF6
 11259                           tablat	equ	0xFF5
 11260                           prodh	equ	0xFF4
 11261                           prodl	equ	0xFF3
 11262                           intcon	equ	0xFF2
 11263                           intcon3	equ	0xFF0
 11264                           postinc0	equ	0xFEE
 11265                           wreg	equ	0xFE8
 11266                           postdec1	equ	0xFE5
 11267                           fsr1l	equ	0xFE1
 11268                           indf2	equ	0xFDF
 11269                           postinc2	equ	0xFDE
 11270                           postdec2	equ	0xFDD
 11271                           fsr2h	equ	0xFDA
 11272                           fsr2l	equ	0xFD9
 11273                           status	equ	0xFD8
 11274                           
 11275 ;; *************** function _initServo *****************
 11276 ;; Defined at:
 11277 ;;		line 21 in file "servo.c"
 11278 ;; Parameters:    Size  Location     Type
 11279 ;;  motor           2   94[BANK0 ] PTR int 
 11280 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 11281 ;;  angle           2   96[BANK0 ] int 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;  i               2  102[BANK0 ] int 
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      void 
 11286 ;; Registers used:
 11287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11293 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;Total ram usage:       10 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    7
 11300 ;; This function calls:
 11301 ;;		_initTimer
 11302 ;;		_setAngle
 11303 ;;		_startTimer
 11304 ;; This function is called by:
 11305 ;;		_main
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	text47
 11310  002B66                     __ptext47:
 11311                           	opt stack 0
 11312  002B66                     _initServo:
 11313                           	opt stack 23
 11314                           
 11315                           ;servo.c: 24: for(int i = 0; i < n; i++){
 11316                           
 11317                           ;incstack = 0
 11318  002B66  0E00               	movlw	0
 11319  002B68  0100               	movlb	0	; () banked
 11320  002B6A  6FE7               	movwf	(initServo@i+1)& (0+255),b
 11321  002B6C  0E00               	movlw	0
 11322  002B6E  6FE6               	movwf	initServo@i& (0+255),b
 11323  002B70  D017               	goto	l7436
 11324  002B72                     l7430:
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;servo.c: 25: if(servos[i] == motor)return;
 11328  002B72  90D8               	bcf	status,0,c
 11329  002B74  0100               	movlb	0	; () banked
 11330  002B76  35E6               	rlcf	initServo@i& (0+255),w,b
 11331  002B78  6ED9               	movwf	fsr2l,c
 11332  002B7A  0100               	movlb	0	; () banked
 11333  002B7C  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
 11334  002B7E  6EDA               	movwf	fsr2h,c
 11335  002B80  0E3B               	movlw	low _servos
 11336  002B82  26D9               	addwf	fsr2l,f,c
 11337  002B84  0E00               	movlw	high _servos
 11338  002B86  22DA               	addwfc	fsr2h,f,c
 11339  002B88  0100               	movlb	0	; () banked
 11340  002B8A  51DE               	movf	initServo@motor& (0+255),w,b
 11341  002B8C  18DE               	xorwf	postinc2,w,c
 11342  002B8E  E105               	bnz	l7434
 11343  002B90  0100               	movlb	0	; () banked
 11344  002B92  51DF               	movf	(initServo@motor+1)& (0+255),w,b
 11345  002B94  18DE               	xorwf	postinc2,w,c
 11346  002B96  B4D8               	btfsc	status,2,c
 11347  002B98  0012               	return	
 11348  002B9A                     l7434:
 11349                           
 11350                           ; BSR set to: 0
 11351  002B9A  0100               	movlb	0	; () banked
 11352  002B9C  4BE6               	infsnz	initServo@i& (0+255),f,b
 11353  002B9E  2BE7               	incf	(initServo@i+1)& (0+255),f,b
 11354  002BA0                     l7436:
 11355                           
 11356                           ; BSR set to: 0
 11357  002BA0  0100               	movlb	0	; () banked
 11358  002BA2  51FB               	movf	_n& (0+255),w,b
 11359  002BA4  0100               	movlb	0	; () banked
 11360  002BA6  5DE6               	subwf	initServo@i& (0+255),w,b
 11361  002BA8  0100               	movlb	0	; () banked
 11362  002BAA  51E7               	movf	(initServo@i+1)& (0+255),w,b
 11363  002BAC  0A80               	xorlw	128
 11364  002BAE  0100               	movlb	0	; () banked
 11365  002BB0  6FE2               	movwf	??_initServo& (0+255),b
 11366  002BB2  0100               	movlb	0	; () banked
 11367  002BB4  51FC               	movf	(_n+1)& (0+255),w,b
 11368  002BB6  0A80               	xorlw	128
 11369  002BB8  0100               	movlb	0	; () banked
 11370  002BBA  59E2               	subwfb	??_initServo& (0+255),w,b
 11371  002BBC  A0D8               	btfss	status,0,c
 11372  002BBE  D7D9               	goto	l7430
 11373                           
 11374                           ; BSR set to: 0
 11375                           ;servo.c: 26: }
 11376                           ;servo.c: 28: n++;
 11377                           
 11378                           ; BSR set to: 0
 11379  002BC0  0100               	movlb	0	; () banked
 11380  002BC2  4BFB               	infsnz	_n& (0+255),f,b
 11381  002BC4  2BFC               	incf	(_n+1)& (0+255),f,b
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;servo.c: 29: servos[n-1] = motor;
 11385  002BC6  0EFE               	movlw	254
 11386  002BC8  0100               	movlb	0	; () banked
 11387  002BCA  6FE2               	movwf	??_initServo& (0+255),b
 11388  002BCC  0EFF               	movlw	255
 11389  002BCE  0100               	movlb	0	; () banked
 11390  002BD0  6FE3               	movwf	(??_initServo+1)& (0+255),b
 11391  002BD2  C0FB  F0E4         	movff	_n,??_initServo+2
 11392  002BD6  C0FC  F0E5         	movff	_n+1,??_initServo+3
 11393  002BDA  90D8               	bcf	status,0,c
 11394  002BDC  0100               	movlb	0	; () banked
 11395  002BDE  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
 11396  002BE0  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
 11397  002BE2  0100               	movlb	0	; () banked
 11398  002BE4  51E2               	movf	??_initServo& (0+255),w,b
 11399  002BE6  0100               	movlb	0	; () banked
 11400  002BE8  27E4               	addwf	(??_initServo+2)& (0+255),f,b
 11401  002BEA  0100               	movlb	0	; () banked
 11402  002BEC  51E3               	movf	(??_initServo+1)& (0+255),w,b
 11403  002BEE  0100               	movlb	0	; () banked
 11404  002BF0  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
 11405  002BF2  0E3B               	movlw	low _servos
 11406  002BF4  0100               	movlb	0	; () banked
 11407  002BF6  25E4               	addwf	(??_initServo+2)& (0+255),w,b
 11408  002BF8  6ED9               	movwf	fsr2l,c
 11409  002BFA  0E00               	movlw	high _servos
 11410  002BFC  0100               	movlb	0	; () banked
 11411  002BFE  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
 11412  002C00  6EDA               	movwf	fsr2h,c
 11413  002C02  C0DE  FFDE         	movff	initServo@motor,postinc2
 11414  002C06  C0DF  FFDD         	movff	initServo@motor+1,postdec2
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;servo.c: 30: setAngle(motor, angle);
 11418  002C0A  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
 11419  002C0E  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
 11420  002C12  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
 11421  002C16  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
 11422  002C1A  EC24  F016         	call	_setAngle	;wreg free
 11423                           
 11424                           ;servo.c: 32: initTimer(0);
 11425  002C1E  0E00               	movlw	0
 11426  002C20  6E24               	movwf	initTimer@timer+1,c
 11427  002C22  0E00               	movlw	0
 11428  002C24  6E23               	movwf	initTimer@timer,c
 11429  002C26  EC96  F01D         	call	_initTimer	;wreg free
 11430                           
 11431                           ;servo.c: 33: startTimer(0,0);
 11432  002C2A  0E00               	movlw	0
 11433  002C2C  6E24               	movwf	startTimer@timer+1,c
 11434  002C2E  0E00               	movlw	0
 11435  002C30  6E23               	movwf	startTimer@timer,c
 11436  002C32  0E00               	movlw	0
 11437  002C34  6E25               	movwf	startTimer@val,c
 11438  002C36  0E00               	movlw	0
 11439  002C38  6E26               	movwf	startTimer@val+1,c
 11440  002C3A  0E00               	movlw	0
 11441  002C3C  6E27               	movwf	startTimer@val+2,c
 11442  002C3E  0E00               	movlw	0
 11443  002C40  6E28               	movwf	startTimer@val+3,c
 11444  002C42  EC4A  F01D         	call	_startTimer	;wreg free
 11445  002C46  0012               	return		;funcret
 11446  002C48                     __end_of_initServo:
 11447                           	opt stack 0
 11448                           tblptru	equ	0xFF8
 11449                           tblptrh	equ	0xFF7
 11450                           tblptrl	equ	0xFF6
 11451                           tablat	equ	0xFF5
 11452                           prodh	equ	0xFF4
 11453                           prodl	equ	0xFF3
 11454                           intcon	equ	0xFF2
 11455                           intcon3	equ	0xFF0
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           postdec1	equ	0xFE5
 11459                           fsr1l	equ	0xFE1
 11460                           indf2	equ	0xFDF
 11461                           postinc2	equ	0xFDE
 11462                           postdec2	equ	0xFDD
 11463                           fsr2h	equ	0xFDA
 11464                           fsr2l	equ	0xFD9
 11465                           status	equ	0xFD8
 11466                           
 11467 ;; *************** function _startTimer *****************
 11468 ;; Defined at:
 11469 ;;		line 76 in file "timer.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  timer           2   34[COMRAM] int 
 11472 ;;  val             4   36[COMRAM] long 
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;		None
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  1    wreg      void 
 11477 ;; Registers used:
 11478 ;;		wreg, status,2, status,0
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11484 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;Total ram usage:        8 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    3
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		_main
 11495 ;;		_initServo
 11496 ;;		_testFrequency
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           	psect	text48
 11501  003A94                     __ptext48:
 11502                           	opt stack 0
 11503  003A94                     _startTimer:
 11504                           	opt stack 27
 11505                           
 11506                           ;timer.c: 77: switch(timer){
 11507                           
 11508                           ;incstack = 0
 11509  003A94  D012               	goto	l4976
 11510  003A96                     l455:
 11511                           
 11512                           ;timer.c: 79: TMR0H = val>>8;
 11513  003A96  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
 11514                           
 11515                           ;timer.c: 80: TMR0L = val;
 11516  003A9A  C025  FFD6         	movff	startTimer@val,4054	;volatile
 11517                           
 11518                           ;timer.c: 81: T0CON |= 1<<7;
 11519  003A9E  8ED5               	bsf	4053,7,c	;volatile
 11520                           
 11521                           ;timer.c: 82: break;
 11522  003AA0  0012               	return	
 11523  003AA2                     l457:
 11524                           
 11525                           ;timer.c: 84: TMR1H = val>>8;
 11526  003AA2  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
 11527                           
 11528                           ;timer.c: 85: TMR1L = val;
 11529  003AA6  C025  FFCE         	movff	startTimer@val,4046	;volatile
 11530                           
 11531                           ;timer.c: 86: T1CON |= 1<<0;
 11532  003AAA  80CD               	bsf	4045,0,c	;volatile
 11533                           
 11534                           ;timer.c: 87: break;
 11535  003AAC  0012               	return	
 11536  003AAE                     l458:
 11537                           
 11538                           ;timer.c: 89: TMR3H = val>>8;
 11539  003AAE  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
 11540                           
 11541                           ;timer.c: 90: TMR3L = val;
 11542  003AB2  C025  FFB2         	movff	startTimer@val,4018	;volatile
 11543                           
 11544                           ;timer.c: 91: T3CON |= 1<<0;
 11545  003AB6  80B1               	bsf	4017,0,c	;volatile
 11546                           
 11547                           ;timer.c: 92: }
 11548  003AB8  0012               	return	
 11549  003ABA                     l4976:
 11550  003ABA  C023  F029         	movff	startTimer@timer,??_startTimer
 11551  003ABE  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
 11552                           
 11553                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11554                           ; Switch size 1, requested type "space"
 11555                           ; Number of cases is 1, Range of values is 0 to 0
 11556                           ; switch strategies available:
 11557                           ; Name         Instructions Cycles
 11558                           ; simple_byte            4     3 (average)
 11559                           ;	Chosen strategy is simple_byte
 11560  003AC2  502A               	movf	??_startTimer+1,w,c
 11561  003AC4  0A00               	xorlw	0	; case 0
 11562  003AC6  A4D8               	btfss	status,2,c
 11563  003AC8  0012               	return	
 11564                           
 11565                           ; Switch size 1, requested type "space"
 11566                           ; Number of cases is 3, Range of values is 0 to 3
 11567                           ; switch strategies available:
 11568                           ; Name         Instructions Cycles
 11569                           ; simple_byte           10     6 (average)
 11570                           ;	Chosen strategy is simple_byte
 11571  003ACA  5029               	movf	??_startTimer,w,c
 11572  003ACC  0A00               	xorlw	0	; case 0
 11573  003ACE  B4D8               	btfsc	status,2,c
 11574  003AD0  D7E2               	goto	l455
 11575  003AD2  0A01               	xorlw	1	; case 1
 11576  003AD4  B4D8               	btfsc	status,2,c
 11577  003AD6  D7E5               	goto	l457
 11578  003AD8  0A02               	xorlw	2	; case 3
 11579  003ADA  A4D8               	btfss	status,2,c
 11580  003ADC  0012               	return	
 11581  003ADE  D7E7               	goto	l458
 11582  003AE0                     __end_of_startTimer:
 11583                           	opt stack 0
 11584                           tblptru	equ	0xFF8
 11585                           tblptrh	equ	0xFF7
 11586                           tblptrl	equ	0xFF6
 11587                           tablat	equ	0xFF5
 11588                           prodh	equ	0xFF4
 11589                           prodl	equ	0xFF3
 11590                           intcon	equ	0xFF2
 11591                           intcon3	equ	0xFF0
 11592                           postinc0	equ	0xFEE
 11593                           wreg	equ	0xFE8
 11594                           postdec1	equ	0xFE5
 11595                           fsr1l	equ	0xFE1
 11596                           indf2	equ	0xFDF
 11597                           postinc2	equ	0xFDE
 11598                           postdec2	equ	0xFDD
 11599                           fsr2h	equ	0xFDA
 11600                           fsr2l	equ	0xFD9
 11601                           status	equ	0xFD8
 11602                           
 11603 ;; *************** function _setAngle *****************
 11604 ;; Defined at:
 11605 ;;		line 44 in file "servo.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;  motor           2   84[BANK0 ] PTR int 
 11608 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 11609 ;;  angle           2   86[BANK0 ] int 
 11610 ;; Auto vars:     Size  Location     Type
 11611 ;;  i               2   92[BANK0 ] int 
 11612 ;;  period          2   90[BANK0 ] unsigned int 
 11613 ;; Return value:  Size  Location     Type
 11614 ;;                  1    wreg      void 
 11615 ;; Registers used:
 11616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11617 ;; Tracked objects:
 11618 ;;		On entry : 0/0
 11619 ;;		On exit  : 0/0
 11620 ;;		Unchanged: 0/0
 11621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11622 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11623 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11624 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11625 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11626 ;;Total ram usage:       10 bytes
 11627 ;; Hardware stack levels used:    1
 11628 ;; Hardware stack levels required when called:    6
 11629 ;; This function calls:
 11630 ;;		_angleToPulse
 11631 ;; This function is called by:
 11632 ;;		_sortBattery
 11633 ;;		_initServo
 11634 ;; This function uses a non-reentrant model
 11635 ;;
 11636                           
 11637                           	psect	text49
 11638  002C48                     __ptext49:
 11639                           	opt stack 0
 11640  002C48                     _setAngle:
 11641                           	opt stack 23
 11642                           
 11643                           ;servo.c: 45: unsigned int period = 50000;
 11644                           
 11645                           ;incstack = 0
 11646  002C48  0EC3               	movlw	195
 11647  002C4A  0100               	movlb	0	; () banked
 11648  002C4C  6FDB               	movwf	(setAngle@period+1)& (0+255),b
 11649  002C4E  0E50               	movlw	80
 11650  002C50  6FDA               	movwf	setAngle@period& (0+255),b
 11651                           
 11652                           ;servo.c: 46: for(int i = 0; i < n; i++){
 11653  002C52  0E00               	movlw	0
 11654  002C54  0100               	movlb	0	; () banked
 11655  002C56  6FDD               	movwf	(setAngle@i+1)& (0+255),b
 11656  002C58  0E00               	movlw	0
 11657  002C5A  6FDC               	movwf	setAngle@i& (0+255),b
 11658  002C5C  D03F               	goto	l7198
 11659  002C5E                     l7190:
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;servo.c: 47: if(servos[i] == motor){
 11663  002C5E  90D8               	bcf	status,0,c
 11664  002C60  0100               	movlb	0	; () banked
 11665  002C62  35DC               	rlcf	setAngle@i& (0+255),w,b
 11666  002C64  6ED9               	movwf	fsr2l,c
 11667  002C66  0100               	movlb	0	; () banked
 11668  002C68  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11669  002C6A  6EDA               	movwf	fsr2h,c
 11670  002C6C  0E3B               	movlw	low _servos
 11671  002C6E  26D9               	addwf	fsr2l,f,c
 11672  002C70  0E00               	movlw	high _servos
 11673  002C72  22DA               	addwfc	fsr2h,f,c
 11674  002C74  0100               	movlb	0	; () banked
 11675  002C76  51D4               	movf	setAngle@motor& (0+255),w,b
 11676  002C78  18DE               	xorwf	postinc2,w,c
 11677  002C7A  E11C               	bnz	l7194
 11678  002C7C  0100               	movlb	0	; () banked
 11679  002C7E  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
 11680  002C80  18DE               	xorwf	postinc2,w,c
 11681  002C82  A4D8               	btfss	status,2,c
 11682  002C84  D017               	goto	l7194
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
 11686  002C86  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
 11687  002C8A  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
 11688  002C8E  EC49  F010         	call	_angleToPulse	;wreg free
 11689  002C92  90D8               	bcf	status,0,c
 11690  002C94  0100               	movlb	0	; () banked
 11691  002C96  35DC               	rlcf	setAngle@i& (0+255),w,b
 11692  002C98  6ED9               	movwf	fsr2l,c
 11693  002C9A  0100               	movlb	0	; () banked
 11694  002C9C  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11695  002C9E  6EDA               	movwf	fsr2h,c
 11696  002CA0  0E63               	movlw	low _pulse
 11697  002CA2  26D9               	addwf	fsr2l,f,c
 11698  002CA4  0E01               	movlw	high _pulse
 11699  002CA6  22DA               	addwfc	fsr2h,f,c
 11700  002CA8  0100               	movlb	0	; () banked
 11701  002CAA  C0BD  FFDE         	movff	?_angleToPulse,postinc2
 11702  002CAE  0100               	movlb	0	; () banked
 11703  002CB0  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
 11704  002CB4                     l7194:
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;servo.c: 49: }
 11708                           ;servo.c: 50: period-=pulse[i];
 11709  002CB4  90D8               	bcf	status,0,c
 11710  002CB6  0100               	movlb	0	; () banked
 11711  002CB8  35DC               	rlcf	setAngle@i& (0+255),w,b
 11712  002CBA  6ED9               	movwf	fsr2l,c
 11713  002CBC  0100               	movlb	0	; () banked
 11714  002CBE  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11715  002CC0  6EDA               	movwf	fsr2h,c
 11716  002CC2  0E63               	movlw	low _pulse
 11717  002CC4  26D9               	addwf	fsr2l,f,c
 11718  002CC6  0E01               	movlw	high _pulse
 11719  002CC8  22DA               	addwfc	fsr2h,f,c
 11720  002CCA  50DE               	movf	postinc2,w,c
 11721  002CCC  0100               	movlb	0	; () banked
 11722  002CCE  5FDA               	subwf	setAngle@period& (0+255),f,b
 11723  002CD0  50DD               	movf	postdec2,w,c
 11724  002CD2  0100               	movlb	0	; () banked
 11725  002CD4  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
 11726                           
 11727                           ; BSR set to: 0
 11728  002CD6  0100               	movlb	0	; () banked
 11729  002CD8  4BDC               	infsnz	setAngle@i& (0+255),f,b
 11730  002CDA  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
 11731  002CDC                     l7198:
 11732                           
 11733                           ; BSR set to: 0
 11734  002CDC  0100               	movlb	0	; () banked
 11735  002CDE  51FB               	movf	_n& (0+255),w,b
 11736  002CE0  0100               	movlb	0	; () banked
 11737  002CE2  5DDC               	subwf	setAngle@i& (0+255),w,b
 11738  002CE4  0100               	movlb	0	; () banked
 11739  002CE6  51DD               	movf	(setAngle@i+1)& (0+255),w,b
 11740  002CE8  0A80               	xorlw	128
 11741  002CEA  0100               	movlb	0	; () banked
 11742  002CEC  6FD8               	movwf	??_setAngle& (0+255),b
 11743  002CEE  0100               	movlb	0	; () banked
 11744  002CF0  51FC               	movf	(_n+1)& (0+255),w,b
 11745  002CF2  0A80               	xorlw	128
 11746  002CF4  0100               	movlb	0	; () banked
 11747  002CF6  59D8               	subwfb	??_setAngle& (0+255),w,b
 11748  002CF8  A0D8               	btfss	status,0,c
 11749  002CFA  D7B1               	goto	l7190
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;servo.c: 51: }
 11753                           ;servo.c: 52: pulse[n] = period;
 11754                           
 11755                           ; BSR set to: 0
 11756  002CFC  90D8               	bcf	status,0,c
 11757  002CFE  0100               	movlb	0	; () banked
 11758  002D00  35FB               	rlcf	_n& (0+255),w,b
 11759  002D02  6ED9               	movwf	fsr2l,c
 11760  002D04  0100               	movlb	0	; () banked
 11761  002D06  35FC               	rlcf	(_n+1)& (0+255),w,b
 11762  002D08  6EDA               	movwf	fsr2h,c
 11763  002D0A  0E63               	movlw	low _pulse
 11764  002D0C  26D9               	addwf	fsr2l,f,c
 11765  002D0E  0E01               	movlw	high _pulse
 11766  002D10  22DA               	addwfc	fsr2h,f,c
 11767  002D12  C0DA  FFDE         	movff	setAngle@period,postinc2
 11768  002D16  C0DB  FFDD         	movff	setAngle@period+1,postdec2
 11769                           
 11770                           ; BSR set to: 0
 11771  002D1A  0012               	return		;funcret
 11772  002D1C                     __end_of_setAngle:
 11773                           	opt stack 0
 11774                           tblptru	equ	0xFF8
 11775                           tblptrh	equ	0xFF7
 11776                           tblptrl	equ	0xFF6
 11777                           tablat	equ	0xFF5
 11778                           prodh	equ	0xFF4
 11779                           prodl	equ	0xFF3
 11780                           intcon	equ	0xFF2
 11781                           intcon3	equ	0xFF0
 11782                           postinc0	equ	0xFEE
 11783                           wreg	equ	0xFE8
 11784                           postdec1	equ	0xFE5
 11785                           fsr1l	equ	0xFE1
 11786                           indf2	equ	0xFDF
 11787                           postinc2	equ	0xFDE
 11788                           postdec2	equ	0xFDD
 11789                           fsr2h	equ	0xFDA
 11790                           fsr2l	equ	0xFD9
 11791                           status	equ	0xFD8
 11792                           
 11793 ;; *************** function _angleToPulse *****************
 11794 ;; Defined at:
 11795 ;;		line 36 in file "servo.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;  angle           2   61[BANK0 ] int 
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;  a000            4   80[BANK0 ] long 
 11800 ;;  a180            4   73[BANK0 ] long 
 11801 ;;  offset          4   69[BANK0 ] long 
 11802 ;; Return value:  Size  Location     Type
 11803 ;;                  4   61[BANK0 ] long 
 11804 ;; Registers used:
 11805 ;;		wreg, status,2, status,0, cstack
 11806 ;; Tracked objects:
 11807 ;;		On entry : 0/0
 11808 ;;		On exit  : 0/0
 11809 ;;		Unchanged: 0/0
 11810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11811 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11814 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11815 ;;Total ram usage:       23 bytes
 11816 ;; Hardware stack levels used:    1
 11817 ;; Hardware stack levels required when called:    5
 11818 ;; This function calls:
 11819 ;;		___altoft
 11820 ;;		___awtoft
 11821 ;;		___ftadd
 11822 ;;		___ftdiv
 11823 ;;		___ftmul
 11824 ;;		___fttol
 11825 ;; This function is called by:
 11826 ;;		_setAngle
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830                           	psect	text50
 11831  002092                     __ptext50:
 11832                           	opt stack 0
 11833  002092                     _angleToPulse:
 11834                           	opt stack 23
 11835                           
 11836                           ;servo.c: 37: long offset = -600;
 11837                           
 11838                           ; BSR set to: 0
 11839                           ;incstack = 0
 11840  002092  0EA8               	movlw	168
 11841  002094  0100               	movlb	0	; () banked
 11842  002096  6FC5               	movwf	angleToPulse@offset& (0+255),b
 11843  002098  0EFD               	movlw	253
 11844  00209A  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
 11845  00209C  0EFF               	movlw	255
 11846  00209E  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
 11847  0020A0  0EFF               	movlw	255
 11848  0020A2  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
 11849                           
 11850                           ;servo.c: 38: long a000 = 1250;
 11851  0020A4  0EE2               	movlw	226
 11852  0020A6  0100               	movlb	0	; () banked
 11853  0020A8  6FD0               	movwf	angleToPulse@a000& (0+255),b
 11854  0020AA  0E04               	movlw	4
 11855  0020AC  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
 11856  0020AE  0E00               	movlw	0
 11857  0020B0  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
 11858  0020B2  0E00               	movlw	0
 11859  0020B4  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
 11860                           
 11861                           ;servo.c: 39: long a180 = 6250;
 11862  0020B6  0E6A               	movlw	106
 11863  0020B8  0100               	movlb	0	; () banked
 11864  0020BA  6FC9               	movwf	angleToPulse@a180& (0+255),b
 11865  0020BC  0E18               	movlw	24
 11866  0020BE  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
 11867  0020C0  0E00               	movlw	0
 11868  0020C2  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
 11869  0020C4  0E00               	movlw	0
 11870  0020C6  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 11874  0020C8  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
 11875  0020CC  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
 11876  0020D0  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
 11877  0020D4  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
 11878  0020D8  0100               	movlb	0	; () banked
 11879  0020DA  1FC1               	comf	??_angleToPulse& (0+255),f,b
 11880  0020DC  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
 11881  0020DE  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
 11882  0020E0  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
 11883  0020E2  2BC1               	incf	??_angleToPulse& (0+255),f,b
 11884  0020E4  0E00               	movlw	0
 11885  0020E6  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 11886  0020E8  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 11887  0020EA  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 11888  0020EC  0100               	movlb	0	; () banked
 11889  0020EE  51C9               	movf	angleToPulse@a180& (0+255),w,b
 11890  0020F0  0100               	movlb	0	; () banked
 11891  0020F2  25C1               	addwf	??_angleToPulse& (0+255),w,b
 11892  0020F4  6E2B               	movwf	___altoft@c,c
 11893  0020F6  0100               	movlb	0	; () banked
 11894  0020F8  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
 11895  0020FA  0100               	movlb	0	; () banked
 11896  0020FC  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 11897  0020FE  6E2C               	movwf	___altoft@c+1,c
 11898  002100  0100               	movlb	0	; () banked
 11899  002102  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
 11900  002104  0100               	movlb	0	; () banked
 11901  002106  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 11902  002108  6E2D               	movwf	___altoft@c+2,c
 11903  00210A  0100               	movlb	0	; () banked
 11904  00210C  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
 11905  00210E  0100               	movlb	0	; () banked
 11906  002110  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 11907  002112  6E2E               	movwf	___altoft@c+3,c
 11908  002114  ECCF  F01A         	call	___altoft	;wreg free
 11909  002118  C02B  F08C         	movff	?___altoft,___ftmul@f2
 11910  00211C  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
 11911  002120  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
 11912  002124  0E00               	movlw	0
 11913  002126  6E38               	movwf	___ftdiv@f2,c
 11914  002128  0E34               	movlw	52
 11915  00212A  6E39               	movwf	___ftdiv@f2+1,c
 11916  00212C  0E43               	movlw	67
 11917  00212E  6E3A               	movwf	___ftdiv@f2+2,c
 11918  002130  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
 11919  002134  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
 11920  002138  EC1A  F01E         	call	___awtoft	;wreg free
 11921  00213C  C02B  F035         	movff	?___awtoft,___ftdiv@f1
 11922  002140  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
 11923  002144  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
 11924  002148  ECC4  F012         	call	___ftdiv	;wreg free
 11925  00214C  C035  F089         	movff	?___ftdiv,___ftmul@f1
 11926  002150  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
 11927  002154  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
 11928  002158  EC9A  F00F         	call	___ftmul	;wreg free
 11929  00215C  C089  F0A5         	movff	?___ftmul,___ftadd@f2
 11930  002160  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
 11931  002164  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
 11932  002168  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
 11933  00216C  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
 11934  002170  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
 11935  002174  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
 11936  002178  ECCF  F01A         	call	___altoft	;wreg free
 11937  00217C  C02B  F0A2         	movff	?___altoft,___ftadd@f1
 11938  002180  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
 11939  002184  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
 11940  002188  EC36  F00D         	call	___ftadd	;wreg free
 11941  00218C  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1415
 11942  002190  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1415+1
 11943  002194  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1415+2
 11944                           
 11945                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 11946  002198  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
 11947  00219C  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
 11948  0021A0  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
 11949  0021A4  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
 11950  0021A8  ECCF  F01A         	call	___altoft	;wreg free
 11951  0021AC  C02B  F0A5         	movff	?___altoft,___ftadd@f2
 11952  0021B0  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
 11953  0021B4  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
 11954  0021B8  C0CD  F0A2         	movff	_angleToPulse$1415,___ftadd@f1
 11955  0021BC  C0CE  F0A3         	movff	_angleToPulse$1415+1,___ftadd@f1+1
 11956  0021C0  C0CF  F0A4         	movff	_angleToPulse$1415+2,___ftadd@f1+2
 11957  0021C4  EC36  F00D         	call	___ftadd	;wreg free
 11958  0021C8  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
 11959  0021CC  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
 11960  0021D0  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
 11961  0021D4  ECF5  F010         	call	___fttol	;wreg free
 11962  0021D8  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
 11963  0021DC  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
 11964  0021E0  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
 11965  0021E4  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
 11966  0021E8  0012               	return	
 11967  0021EA                     __end_of_angleToPulse:
 11968                           	opt stack 0
 11969                           tblptru	equ	0xFF8
 11970                           tblptrh	equ	0xFF7
 11971                           tblptrl	equ	0xFF6
 11972                           tablat	equ	0xFF5
 11973                           prodh	equ	0xFF4
 11974                           prodl	equ	0xFF3
 11975                           intcon	equ	0xFF2
 11976                           intcon3	equ	0xFF0
 11977                           postinc0	equ	0xFEE
 11978                           wreg	equ	0xFE8
 11979                           postdec1	equ	0xFE5
 11980                           fsr1l	equ	0xFE1
 11981                           indf2	equ	0xFDF
 11982                           postinc2	equ	0xFDE
 11983                           postdec2	equ	0xFDD
 11984                           fsr2h	equ	0xFDA
 11985                           fsr2l	equ	0xFD9
 11986                           status	equ	0xFD8
 11987                           
 11988 ;; *************** function ___fttol *****************
 11989 ;; Defined at:
 11990 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;  f1              3   46[BANK0 ] float 
 11993 ;; Auto vars:     Size  Location     Type
 11994 ;;  lval            4   56[BANK0 ] unsigned long 
 11995 ;;  exp1            1   60[BANK0 ] unsigned char 
 11996 ;;  sign1           1   55[BANK0 ] unsigned char 
 11997 ;; Return value:  Size  Location     Type
 11998 ;;                  4   46[BANK0 ] long 
 11999 ;; Registers used:
 12000 ;;		wreg, status,2, status,0
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12006 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12007 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12008 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12009 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12010 ;;Total ram usage:       15 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:    3
 12013 ;; This function calls:
 12014 ;;		Nothing
 12015 ;; This function is called by:
 12016 ;;		_sortBattery
 12017 ;;		_angleToPulse
 12018 ;;		_printf
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           	psect	text51
 12023  0021EA                     __ptext51:
 12024                           	opt stack 0
 12025  0021EA                     ___fttol:
 12026                           	opt stack 24
 12027                           
 12028                           ;incstack = 0
 12029  0021EA  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 12030  0021EE  0100               	movlb	0	; () banked
 12031  0021F0  6BB3               	clrf	(??___fttol+1)& (0+255),b
 12032  0021F2  6BB4               	clrf	(??___fttol+2)& (0+255),b
 12033  0021F4  0100               	movlb	0	; () banked
 12034  0021F6  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 12035  0021F8  0100               	movlb	0	; () banked
 12036  0021FA  37B2               	rlcf	??___fttol& (0+255),f,b
 12037  0021FC  E301               	bnc	u6501
 12038  0021FE  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 12039  002200                     u6501:
 12040  002200  0100               	movlb	0	; () banked
 12041  002202  51B2               	movf	??___fttol& (0+255),w,b
 12042  002204  0100               	movlb	0	; () banked
 12043  002206  6FBC               	movwf	___fttol@exp1& (0+255),b
 12044  002208  0100               	movlb	0	; () banked
 12045  00220A  51BC               	movf	___fttol@exp1& (0+255),w,b
 12046  00220C  A4D8               	btfss	status,2,c
 12047  00220E  D00A               	goto	l6620
 12048                           
 12049                           ; BSR set to: 0
 12050  002210  0E00               	movlw	0
 12051  002212  0100               	movlb	0	; () banked
 12052  002214  6FAE               	movwf	?___fttol& (0+255),b
 12053  002216  0E00               	movlw	0
 12054  002218  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12055  00221A  0E00               	movlw	0
 12056  00221C  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12057  00221E  0E00               	movlw	0
 12058  002220  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12059                           
 12060                           ; BSR set to: 0
 12061  002222  0012               	return	
 12062  002224                     l6620:
 12063                           
 12064                           ; BSR set to: 0
 12065  002224  0E17               	movlw	23
 12066  002226  0100               	movlb	0	; () banked
 12067  002228  6FB2               	movwf	??___fttol& (0+255),b
 12068  00222A  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 12069  00222E  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 12070  002232  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 12071  002236  0100               	movlb	0	; () banked
 12072  002238  29B2               	incf	??___fttol& (0+255),w,b
 12073  00223A  0100               	movlb	0	; () banked
 12074  00223C  6FB6               	movwf	(??___fttol+4)& (0+255),b
 12075  00223E  D005               	goto	u6520
 12076  002240                     u6525:
 12077  002240  0100               	movlb	0	; () banked
 12078  002242  90D8               	bcf	status,0,c
 12079  002244  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 12080  002246  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 12081  002248  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 12082  00224A                     u6520:
 12083  00224A  0100               	movlb	0	; () banked
 12084  00224C  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 12085  00224E  D7F8               	goto	u6525
 12086  002250  0100               	movlb	0	; () banked
 12087  002252  51B3               	movf	(??___fttol+1)& (0+255),w,b
 12088  002254  0100               	movlb	0	; () banked
 12089  002256  6FB7               	movwf	___fttol@sign1& (0+255),b
 12090                           
 12091                           ; BSR set to: 0
 12092  002258  0100               	movlb	0	; () banked
 12093  00225A  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 12094                           
 12095                           ; BSR set to: 0
 12096  00225C  0EFF               	movlw	255
 12097  00225E  0100               	movlb	0	; () banked
 12098  002260  17AE               	andwf	___fttol@f1& (0+255),f,b
 12099  002262  0EFF               	movlw	255
 12100  002264  0100               	movlb	0	; () banked
 12101  002266  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 12102  002268  0E00               	movlw	0
 12103  00226A  0100               	movlb	0	; () banked
 12104  00226C  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 12105                           
 12106                           ; BSR set to: 0
 12107  00226E  0100               	movlb	0	; () banked
 12108  002270  51AE               	movf	___fttol@f1& (0+255),w,b
 12109  002272  0100               	movlb	0	; () banked
 12110  002274  6FB8               	movwf	___fttol@lval& (0+255),b
 12111  002276  0100               	movlb	0	; () banked
 12112  002278  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 12113  00227A  0100               	movlb	0	; () banked
 12114  00227C  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 12115  00227E  0100               	movlb	0	; () banked
 12116  002280  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 12117  002282  0100               	movlb	0	; () banked
 12118  002284  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 12119  002286  0100               	movlb	0	; () banked
 12120  002288  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 12121                           
 12122                           ; BSR set to: 0
 12123  00228A  0E8E               	movlw	142
 12124  00228C  0100               	movlb	0	; () banked
 12125  00228E  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 12126                           
 12127                           ; BSR set to: 0
 12128  002290  0100               	movlb	0	; () banked
 12129  002292  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 12130  002294  D01A               	goto	l6642
 12131                           
 12132                           ; BSR set to: 0
 12133  002296  0100               	movlb	0	; () banked
 12134  002298  51BC               	movf	___fttol@exp1& (0+255),w,b
 12135  00229A  0A80               	xorlw	128
 12136  00229C  0F8F               	addlw	143
 12137  00229E  B0D8               	btfsc	status,0,c
 12138  0022A0  D00A               	goto	l6638
 12139                           
 12140                           ; BSR set to: 0
 12141  0022A2  0E00               	movlw	0
 12142  0022A4  0100               	movlb	0	; () banked
 12143  0022A6  6FAE               	movwf	?___fttol& (0+255),b
 12144  0022A8  0E00               	movlw	0
 12145  0022AA  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12146  0022AC  0E00               	movlw	0
 12147  0022AE  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12148  0022B0  0E00               	movlw	0
 12149  0022B2  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12150                           
 12151                           ; BSR set to: 0
 12152  0022B4  0012               	return	
 12153  0022B6                     l6638:
 12154                           
 12155                           ; BSR set to: 0
 12156  0022B6  0100               	movlb	0	; () banked
 12157  0022B8  90D8               	bcf	status,0,c
 12158  0022BA  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 12159  0022BC  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 12160  0022BE  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 12161  0022C0  33B8               	rrcf	___fttol@lval& (0+255),f,b
 12162                           
 12163                           ; BSR set to: 0
 12164  0022C2  0100               	movlb	0	; () banked
 12165  0022C4  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 12166  0022C6  D7F7               	goto	l6638
 12167                           
 12168                           ; BSR set to: 0
 12169  0022C8  D01B               	goto	l6652
 12170  0022CA                     l6642:
 12171                           
 12172                           ; BSR set to: 0
 12173  0022CA  0E17               	movlw	23
 12174  0022CC  0100               	movlb	0	; () banked
 12175  0022CE  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 12176  0022D0  D012               	goto	l6650
 12177                           
 12178                           ; BSR set to: 0
 12179  0022D2  0E00               	movlw	0
 12180  0022D4  0100               	movlb	0	; () banked
 12181  0022D6  6FAE               	movwf	?___fttol& (0+255),b
 12182  0022D8  0E00               	movlw	0
 12183  0022DA  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12184  0022DC  0E00               	movlw	0
 12185  0022DE  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12186  0022E0  0E00               	movlw	0
 12187  0022E2  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12188                           
 12189                           ; BSR set to: 0
 12190  0022E4  0012               	return	
 12191  0022E6                     l6648:
 12192                           
 12193                           ; BSR set to: 0
 12194  0022E6  0100               	movlb	0	; () banked
 12195  0022E8  90D8               	bcf	status,0,c
 12196  0022EA  37B8               	rlcf	___fttol@lval& (0+255),f,b
 12197  0022EC  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 12198  0022EE  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 12199  0022F0  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 12200  0022F2  0100               	movlb	0	; () banked
 12201  0022F4  07BC               	decf	___fttol@exp1& (0+255),f,b
 12202  0022F6                     l6650:
 12203                           
 12204                           ; BSR set to: 0
 12205  0022F6  0100               	movlb	0	; () banked
 12206  0022F8  51BC               	movf	___fttol@exp1& (0+255),w,b
 12207  0022FA  0100               	movlb	0	; () banked
 12208  0022FC  A4D8               	btfss	status,2,c
 12209  0022FE  D7F3               	goto	l6648
 12210  002300                     l6652:
 12211                           
 12212                           ; BSR set to: 0
 12213  002300  0100               	movlb	0	; () banked
 12214  002302  51B7               	movf	___fttol@sign1& (0+255),w,b
 12215  002304  0100               	movlb	0	; () banked
 12216  002306  B4D8               	btfsc	status,2,c
 12217  002308  D009               	goto	l6656
 12218                           
 12219                           ; BSR set to: 0
 12220  00230A  0100               	movlb	0	; () banked
 12221  00230C  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 12222  00230E  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 12223  002310  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 12224  002312  6DB8               	negf	___fttol@lval& (0+255),b
 12225  002314  0E00               	movlw	0
 12226  002316  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 12227  002318  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 12228  00231A  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 12229  00231C                     l6656:
 12230                           
 12231                           ; BSR set to: 0
 12232  00231C  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 12233  002320  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 12234  002324  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 12235  002328  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 12236  00232C  0012               	return	
 12237  00232E                     __end_of___fttol:
 12238                           	opt stack 0
 12239                           tblptru	equ	0xFF8
 12240                           tblptrh	equ	0xFF7
 12241                           tblptrl	equ	0xFF6
 12242                           tablat	equ	0xFF5
 12243                           prodh	equ	0xFF4
 12244                           prodl	equ	0xFF3
 12245                           intcon	equ	0xFF2
 12246                           intcon3	equ	0xFF0
 12247                           postinc0	equ	0xFEE
 12248                           wreg	equ	0xFE8
 12249                           postdec1	equ	0xFE5
 12250                           fsr1l	equ	0xFE1
 12251                           indf2	equ	0xFDF
 12252                           postinc2	equ	0xFDE
 12253                           postdec2	equ	0xFDD
 12254                           fsr2h	equ	0xFDA
 12255                           fsr2l	equ	0xFD9
 12256                           status	equ	0xFD8
 12257                           
 12258 ;; *************** function ___ftmul *****************
 12259 ;; Defined at:
 12260 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 12261 ;; Parameters:    Size  Location     Type
 12262 ;;  f1              3    9[BANK0 ] float 
 12263 ;;  f2              3   12[BANK0 ] float 
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 12266 ;;  sign            1   23[BANK0 ] unsigned char 
 12267 ;;  cntr            1   22[BANK0 ] unsigned char 
 12268 ;;  exp             1   18[BANK0 ] unsigned char 
 12269 ;; Return value:  Size  Location     Type
 12270 ;;                  3    9[BANK0 ] float 
 12271 ;; Registers used:
 12272 ;;		wreg, status,2, status,0, cstack
 12273 ;; Tracked objects:
 12274 ;;		On entry : 0/0
 12275 ;;		On exit  : 0/0
 12276 ;;		Unchanged: 0/0
 12277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12278 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12279 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12280 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12281 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12282 ;;Total ram usage:       15 bytes
 12283 ;; Hardware stack levels used:    1
 12284 ;; Hardware stack levels required when called:    4
 12285 ;; This function calls:
 12286 ;;		___ftpack
 12287 ;; This function is called by:
 12288 ;;		_sortBattery
 12289 ;;		_angleToPulse
 12290 ;;		_fround
 12291 ;;		_scale
 12292 ;;		_printf
 12293 ;; This function uses a non-reentrant model
 12294 ;;
 12295                           
 12296                           	psect	text52
 12297  001F34                     __ptext52:
 12298                           	opt stack 0
 12299  001F34                     ___ftmul:
 12300                           	opt stack 23
 12301                           
 12302                           ; BSR set to: 0
 12303                           ;incstack = 0
 12304  001F34  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 12305  001F38  0100               	movlb	0	; () banked
 12306  001F3A  6B90               	clrf	(??___ftmul+1)& (0+255),b
 12307  001F3C  6B91               	clrf	(??___ftmul+2)& (0+255),b
 12308  001F3E  0100               	movlb	0	; () banked
 12309  001F40  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 12310  001F42  0100               	movlb	0	; () banked
 12311  001F44  378F               	rlcf	??___ftmul& (0+255),f,b
 12312  001F46  E301               	bnc	u5871
 12313  001F48  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 12314  001F4A                     u5871:
 12315  001F4A  0100               	movlb	0	; () banked
 12316  001F4C  518F               	movf	??___ftmul& (0+255),w,b
 12317  001F4E  0100               	movlb	0	; () banked
 12318  001F50  6F92               	movwf	___ftmul@exp& (0+255),b
 12319  001F52  0100               	movlb	0	; () banked
 12320  001F54  5192               	movf	___ftmul@exp& (0+255),w,b
 12321  001F56  A4D8               	btfss	status,2,c
 12322  001F58  D00A               	goto	l6136
 12323                           
 12324                           ; BSR set to: 0
 12325  001F5A  0E00               	movlw	0
 12326  001F5C  0100               	movlb	0	; () banked
 12327  001F5E  6F89               	movwf	?___ftmul& (0+255),b
 12328  001F60  0E00               	movlw	0
 12329  001F62  0100               	movlb	0	; () banked
 12330  001F64  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 12331  001F66  0E00               	movlw	0
 12332  001F68  0100               	movlb	0	; () banked
 12333  001F6A  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 12334                           
 12335                           ; BSR set to: 0
 12336  001F6C  0012               	return	
 12337  001F6E                     l6136:
 12338                           
 12339                           ; BSR set to: 0
 12340  001F6E  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 12341  001F72  0100               	movlb	0	; () banked
 12342  001F74  6B90               	clrf	(??___ftmul+1)& (0+255),b
 12343  001F76  6B91               	clrf	(??___ftmul+2)& (0+255),b
 12344  001F78  0100               	movlb	0	; () banked
 12345  001F7A  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 12346  001F7C  0100               	movlb	0	; () banked
 12347  001F7E  378F               	rlcf	??___ftmul& (0+255),f,b
 12348  001F80  E301               	bnc	u5891
 12349  001F82  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 12350  001F84                     u5891:
 12351  001F84  0100               	movlb	0	; () banked
 12352  001F86  518F               	movf	??___ftmul& (0+255),w,b
 12353  001F88  0100               	movlb	0	; () banked
 12354  001F8A  6F97               	movwf	___ftmul@sign& (0+255),b
 12355  001F8C  0100               	movlb	0	; () banked
 12356  001F8E  5197               	movf	___ftmul@sign& (0+255),w,b
 12357  001F90  A4D8               	btfss	status,2,c
 12358  001F92  D00A               	goto	l6142
 12359                           
 12360                           ; BSR set to: 0
 12361  001F94  0E00               	movlw	0
 12362  001F96  0100               	movlb	0	; () banked
 12363  001F98  6F89               	movwf	?___ftmul& (0+255),b
 12364  001F9A  0E00               	movlw	0
 12365  001F9C  0100               	movlb	0	; () banked
 12366  001F9E  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 12367  001FA0  0E00               	movlw	0
 12368  001FA2  0100               	movlb	0	; () banked
 12369  001FA4  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 12370                           
 12371                           ; BSR set to: 0
 12372  001FA6  0012               	return	
 12373  001FA8                     l6142:
 12374                           
 12375                           ; BSR set to: 0
 12376  001FA8  0100               	movlb	0	; () banked
 12377  001FAA  5197               	movf	___ftmul@sign& (0+255),w,b
 12378  001FAC  0F7B               	addlw	123
 12379  001FAE  0100               	movlb	0	; () banked
 12380  001FB0  2792               	addwf	___ftmul@exp& (0+255),f,b
 12381                           
 12382                           ; BSR set to: 0
 12383  001FB2  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 12384  001FB6  0100               	movlb	0	; () banked
 12385  001FB8  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12386  001FBA  0100               	movlb	0	; () banked
 12387  001FBC  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 12388  001FBE  0E80               	movlw	128
 12389  001FC0  0100               	movlb	0	; () banked
 12390  001FC2  1797               	andwf	___ftmul@sign& (0+255),f,b
 12391                           
 12392                           ; BSR set to: 0
 12393  001FC4  0100               	movlb	0	; () banked
 12394  001FC6  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 12395                           
 12396                           ; BSR set to: 0
 12397  001FC8  0100               	movlb	0	; () banked
 12398  001FCA  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 12399                           
 12400                           ; BSR set to: 0
 12401  001FCC  0EFF               	movlw	255
 12402  001FCE  0100               	movlb	0	; () banked
 12403  001FD0  178C               	andwf	___ftmul@f2& (0+255),f,b
 12404  001FD2  0EFF               	movlw	255
 12405  001FD4  0100               	movlb	0	; () banked
 12406  001FD6  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 12407  001FD8  0E00               	movlw	0
 12408  001FDA  0100               	movlb	0	; () banked
 12409  001FDC  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 12410                           
 12411                           ; BSR set to: 0
 12412  001FDE  0E00               	movlw	0
 12413  001FE0  0100               	movlb	0	; () banked
 12414  001FE2  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 12415  001FE4  0E00               	movlw	0
 12416  001FE6  0100               	movlb	0	; () banked
 12417  001FE8  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 12418  001FEA  0E00               	movlw	0
 12419  001FEC  0100               	movlb	0	; () banked
 12420  001FEE  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 12421                           
 12422                           ; BSR set to: 0
 12423  001FF0  0E07               	movlw	7
 12424  001FF2  0100               	movlb	0	; () banked
 12425  001FF4  6F96               	movwf	___ftmul@cntr& (0+255),b
 12426  001FF6                     l6156:
 12427                           
 12428                           ; BSR set to: 0
 12429  001FF6  0100               	movlb	0	; () banked
 12430  001FF8  A189               	btfss	___ftmul@f1& (0+255),0,b
 12431  001FFA  D00C               	goto	l6160
 12432                           
 12433                           ; BSR set to: 0
 12434  001FFC  0100               	movlb	0	; () banked
 12435  001FFE  518C               	movf	___ftmul@f2& (0+255),w,b
 12436  002000  0100               	movlb	0	; () banked
 12437  002002  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12438  002004  0100               	movlb	0	; () banked
 12439  002006  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 12440  002008  0100               	movlb	0	; () banked
 12441  00200A  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12442  00200C  0100               	movlb	0	; () banked
 12443  00200E  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12444  002010  0100               	movlb	0	; () banked
 12445  002012  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12446  002014                     l6160:
 12447                           
 12448                           ; BSR set to: 0
 12449  002014  0100               	movlb	0	; () banked
 12450  002016  90D8               	bcf	status,0,c
 12451  002018  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12452  00201A  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12453  00201C  3389               	rrcf	___ftmul@f1& (0+255),f,b
 12454  00201E  0100               	movlb	0	; () banked
 12455  002020  90D8               	bcf	status,0,c
 12456  002022  378C               	rlcf	___ftmul@f2& (0+255),f,b
 12457  002024  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 12458  002026  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 12459                           
 12460                           ; BSR set to: 0
 12461  002028  0100               	movlb	0	; () banked
 12462  00202A  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 12463  00202C  D7E4               	goto	l6156
 12464                           
 12465                           ; BSR set to: 0
 12466                           
 12467                           ; BSR set to: 0
 12468  00202E  0E09               	movlw	9
 12469  002030  0100               	movlb	0	; () banked
 12470  002032  6F96               	movwf	___ftmul@cntr& (0+255),b
 12471  002034                     l6166:
 12472                           
 12473                           ; BSR set to: 0
 12474  002034  0100               	movlb	0	; () banked
 12475  002036  A189               	btfss	___ftmul@f1& (0+255),0,b
 12476  002038  D00C               	goto	l6170
 12477                           
 12478                           ; BSR set to: 0
 12479  00203A  0100               	movlb	0	; () banked
 12480  00203C  518C               	movf	___ftmul@f2& (0+255),w,b
 12481  00203E  0100               	movlb	0	; () banked
 12482  002040  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12483  002042  0100               	movlb	0	; () banked
 12484  002044  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 12485  002046  0100               	movlb	0	; () banked
 12486  002048  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12487  00204A  0100               	movlb	0	; () banked
 12488  00204C  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12489  00204E  0100               	movlb	0	; () banked
 12490  002050  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12491  002052                     l6170:
 12492                           
 12493                           ; BSR set to: 0
 12494  002052  0100               	movlb	0	; () banked
 12495  002054  90D8               	bcf	status,0,c
 12496  002056  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12497  002058  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12498  00205A  3389               	rrcf	___ftmul@f1& (0+255),f,b
 12499  00205C  0100               	movlb	0	; () banked
 12500  00205E  90D8               	bcf	status,0,c
 12501  002060  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 12502  002062  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 12503  002064  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 12504                           
 12505                           ; BSR set to: 0
 12506  002066  0100               	movlb	0	; () banked
 12507  002068  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 12508  00206A  D7E4               	goto	l6166
 12509                           
 12510                           ; BSR set to: 0
 12511                           
 12512                           ; BSR set to: 0
 12513  00206C  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 12514  002070  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12515  002074  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12516  002078  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 12517  00207C  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 12518  002080  EC87  F018         	call	___ftpack	;wreg free
 12519  002084  C023  F089         	movff	?___ftpack,?___ftmul
 12520  002088  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 12521  00208C  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 12522  002090  0012               	return	
 12523  002092                     __end_of___ftmul:
 12524                           	opt stack 0
 12525                           tblptru	equ	0xFF8
 12526                           tblptrh	equ	0xFF7
 12527                           tblptrl	equ	0xFF6
 12528                           tablat	equ	0xFF5
 12529                           prodh	equ	0xFF4
 12530                           prodl	equ	0xFF3
 12531                           intcon	equ	0xFF2
 12532                           intcon3	equ	0xFF0
 12533                           postinc0	equ	0xFEE
 12534                           wreg	equ	0xFE8
 12535                           postdec1	equ	0xFE5
 12536                           fsr1l	equ	0xFE1
 12537                           indf2	equ	0xFDF
 12538                           postinc2	equ	0xFDE
 12539                           postdec2	equ	0xFDD
 12540                           fsr2h	equ	0xFDA
 12541                           fsr2l	equ	0xFD9
 12542                           status	equ	0xFD8
 12543                           
 12544 ;; *************** function ___ftdiv *****************
 12545 ;; Defined at:
 12546 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12547 ;; Parameters:    Size  Location     Type
 12548 ;;  f1              3   52[COMRAM] float 
 12549 ;;  f2              3   55[COMRAM] float 
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;  f3              3    4[BANK0 ] float 
 12552 ;;  sign            1    8[BANK0 ] unsigned char 
 12553 ;;  exp             1    7[BANK0 ] unsigned char 
 12554 ;;  cntr            1    3[BANK0 ] unsigned char 
 12555 ;; Return value:  Size  Location     Type
 12556 ;;                  3   52[COMRAM] float 
 12557 ;; Registers used:
 12558 ;;		wreg, status,2, status,0, cstack
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12564 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12565 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12566 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12567 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12568 ;;Total ram usage:       15 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:    4
 12571 ;; This function calls:
 12572 ;;		___ftpack
 12573 ;; This function is called by:
 12574 ;;		_sortBattery
 12575 ;;		_angleToPulse
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579                           	psect	text53
 12580  002588                     __ptext53:
 12581                           	opt stack 0
 12582  002588                     ___ftdiv:
 12583                           	opt stack 23
 12584                           
 12585                           ;incstack = 0
 12586  002588  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
 12587  00258C  0100               	movlb	0	; () banked
 12588  00258E  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 12589  002590  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 12590  002592  3436               	rlcf	___ftdiv@f1+1,w,c
 12591  002594  0100               	movlb	0	; () banked
 12592  002596  3780               	rlcf	??___ftdiv& (0+255),f,b
 12593  002598  E301               	bnc	u6391
 12594  00259A  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 12595  00259C                     u6391:
 12596  00259C  0100               	movlb	0	; () banked
 12597  00259E  5180               	movf	??___ftdiv& (0+255),w,b
 12598  0025A0  0100               	movlb	0	; () banked
 12599  0025A2  6F87               	movwf	___ftdiv@exp& (0+255),b
 12600  0025A4  0100               	movlb	0	; () banked
 12601  0025A6  5187               	movf	___ftdiv@exp& (0+255),w,b
 12602  0025A8  A4D8               	btfss	status,2,c
 12603  0025AA  D007               	goto	l6532
 12604                           
 12605                           ; BSR set to: 0
 12606  0025AC  0E00               	movlw	0
 12607  0025AE  6E35               	movwf	?___ftdiv,c
 12608  0025B0  0E00               	movlw	0
 12609  0025B2  6E36               	movwf	?___ftdiv+1,c
 12610  0025B4  0E00               	movlw	0
 12611  0025B6  6E37               	movwf	?___ftdiv+2,c
 12612                           
 12613                           ; BSR set to: 0
 12614  0025B8  0012               	return	
 12615  0025BA                     l6532:
 12616                           
 12617                           ; BSR set to: 0
 12618  0025BA  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
 12619  0025BE  0100               	movlb	0	; () banked
 12620  0025C0  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 12621  0025C2  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 12622  0025C4  3439               	rlcf	___ftdiv@f2+1,w,c
 12623  0025C6  0100               	movlb	0	; () banked
 12624  0025C8  3780               	rlcf	??___ftdiv& (0+255),f,b
 12625  0025CA  E301               	bnc	u6411
 12626  0025CC  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 12627  0025CE                     u6411:
 12628  0025CE  0100               	movlb	0	; () banked
 12629  0025D0  5180               	movf	??___ftdiv& (0+255),w,b
 12630  0025D2  0100               	movlb	0	; () banked
 12631  0025D4  6F88               	movwf	___ftdiv@sign& (0+255),b
 12632  0025D6  0100               	movlb	0	; () banked
 12633  0025D8  5188               	movf	___ftdiv@sign& (0+255),w,b
 12634  0025DA  A4D8               	btfss	status,2,c
 12635  0025DC  D007               	goto	l6538
 12636                           
 12637                           ; BSR set to: 0
 12638  0025DE  0E00               	movlw	0
 12639  0025E0  6E35               	movwf	?___ftdiv,c
 12640  0025E2  0E00               	movlw	0
 12641  0025E4  6E36               	movwf	?___ftdiv+1,c
 12642  0025E6  0E00               	movlw	0
 12643  0025E8  6E37               	movwf	?___ftdiv+2,c
 12644                           
 12645                           ; BSR set to: 0
 12646  0025EA  0012               	return	
 12647  0025EC                     l6538:
 12648                           
 12649                           ; BSR set to: 0
 12650  0025EC  0E00               	movlw	0
 12651  0025EE  0100               	movlb	0	; () banked
 12652  0025F0  6F84               	movwf	___ftdiv@f3& (0+255),b
 12653  0025F2  0E00               	movlw	0
 12654  0025F4  0100               	movlb	0	; () banked
 12655  0025F6  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
 12656  0025F8  0E00               	movlw	0
 12657  0025FA  0100               	movlb	0	; () banked
 12658  0025FC  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
 12659                           
 12660                           ; BSR set to: 0
 12661  0025FE  0100               	movlb	0	; () banked
 12662  002600  5188               	movf	___ftdiv@sign& (0+255),w,b
 12663  002602  0F89               	addlw	137
 12664  002604  0100               	movlb	0	; () banked
 12665  002606  5F87               	subwf	___ftdiv@exp& (0+255),f,b
 12666                           
 12667                           ; BSR set to: 0
 12668  002608  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
 12669                           
 12670                           ; BSR set to: 0
 12671  00260C  503A               	movf	___ftdiv@f2+2,w,c
 12672  00260E  0100               	movlb	0	; () banked
 12673  002610  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
 12674                           
 12675                           ; BSR set to: 0
 12676  002612  0E80               	movlw	128
 12677  002614  0100               	movlb	0	; () banked
 12678  002616  1788               	andwf	___ftdiv@sign& (0+255),f,b
 12679                           
 12680                           ; BSR set to: 0
 12681  002618  8E36               	bsf	___ftdiv@f1+1,7,c
 12682                           
 12683                           ; BSR set to: 0
 12684  00261A  0EFF               	movlw	255
 12685  00261C  1635               	andwf	___ftdiv@f1,f,c
 12686  00261E  0EFF               	movlw	255
 12687  002620  1636               	andwf	___ftdiv@f1+1,f,c
 12688  002622  0E00               	movlw	0
 12689  002624  1637               	andwf	___ftdiv@f1+2,f,c
 12690                           
 12691                           ; BSR set to: 0
 12692  002626  8E39               	bsf	___ftdiv@f2+1,7,c
 12693                           
 12694                           ; BSR set to: 0
 12695  002628  0EFF               	movlw	255
 12696  00262A  1638               	andwf	___ftdiv@f2,f,c
 12697  00262C  0EFF               	movlw	255
 12698  00262E  1639               	andwf	___ftdiv@f2+1,f,c
 12699  002630  0E00               	movlw	0
 12700  002632  163A               	andwf	___ftdiv@f2+2,f,c
 12701                           
 12702                           ; BSR set to: 0
 12703  002634  0E18               	movlw	24
 12704  002636  0100               	movlb	0	; () banked
 12705  002638  6F83               	movwf	___ftdiv@cntr& (0+255),b
 12706  00263A                     l6558:
 12707                           
 12708                           ; BSR set to: 0
 12709  00263A  0100               	movlb	0	; () banked
 12710  00263C  90D8               	bcf	status,0,c
 12711  00263E  3784               	rlcf	___ftdiv@f3& (0+255),f,b
 12712  002640  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 12713  002642  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 12714                           
 12715                           ; BSR set to: 0
 12716  002644  5038               	movf	___ftdiv@f2,w,c
 12717  002646  5C35               	subwf	___ftdiv@f1,w,c
 12718  002648  5039               	movf	___ftdiv@f2+1,w,c
 12719  00264A  5836               	subwfb	___ftdiv@f1+1,w,c
 12720  00264C  503A               	movf	___ftdiv@f2+2,w,c
 12721  00264E  5837               	subwfb	___ftdiv@f1+2,w,c
 12722  002650  A0D8               	btfss	status,0,c
 12723  002652  D008               	goto	l1177
 12724                           
 12725                           ; BSR set to: 0
 12726  002654  5038               	movf	___ftdiv@f2,w,c
 12727  002656  5E35               	subwf	___ftdiv@f1,f,c
 12728  002658  5039               	movf	___ftdiv@f2+1,w,c
 12729  00265A  5A36               	subwfb	___ftdiv@f1+1,f,c
 12730  00265C  503A               	movf	___ftdiv@f2+2,w,c
 12731  00265E  5A37               	subwfb	___ftdiv@f1+2,f,c
 12732                           
 12733                           ; BSR set to: 0
 12734  002660  0100               	movlb	0	; () banked
 12735  002662  8184               	bsf	___ftdiv@f3& (0+255),0,b
 12736  002664                     l1177:
 12737                           
 12738                           ; BSR set to: 0
 12739  002664  90D8               	bcf	status,0,c
 12740  002666  3635               	rlcf	___ftdiv@f1,f,c
 12741  002668  3636               	rlcf	___ftdiv@f1+1,f,c
 12742  00266A  3637               	rlcf	___ftdiv@f1+2,f,c
 12743                           
 12744                           ; BSR set to: 0
 12745  00266C  0100               	movlb	0	; () banked
 12746  00266E  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
 12747  002670  D7E4               	goto	l6558
 12748                           
 12749                           ; BSR set to: 0
 12750                           
 12751                           ; BSR set to: 0
 12752  002672  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
 12753  002676  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12754  00267A  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12755  00267E  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
 12756  002682  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
 12757  002686  EC87  F018         	call	___ftpack	;wreg free
 12758  00268A  C023  F035         	movff	?___ftpack,?___ftdiv
 12759  00268E  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
 12760  002692  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
 12761  002696  0012               	return	
 12762  002698                     __end_of___ftdiv:
 12763                           	opt stack 0
 12764                           tblptru	equ	0xFF8
 12765                           tblptrh	equ	0xFF7
 12766                           tblptrl	equ	0xFF6
 12767                           tablat	equ	0xFF5
 12768                           prodh	equ	0xFF4
 12769                           prodl	equ	0xFF3
 12770                           intcon	equ	0xFF2
 12771                           intcon3	equ	0xFF0
 12772                           postinc0	equ	0xFEE
 12773                           wreg	equ	0xFE8
 12774                           postdec1	equ	0xFE5
 12775                           fsr1l	equ	0xFE1
 12776                           indf2	equ	0xFDF
 12777                           postinc2	equ	0xFDE
 12778                           postdec2	equ	0xFDD
 12779                           fsr2h	equ	0xFDA
 12780                           fsr2l	equ	0xFD9
 12781                           status	equ	0xFD8
 12782                           
 12783 ;; *************** function ___ftadd *****************
 12784 ;; Defined at:
 12785 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;  f1              3   34[BANK0 ] float 
 12788 ;;  f2              3   37[BANK0 ] float 
 12789 ;; Auto vars:     Size  Location     Type
 12790 ;;  exp1            1   45[BANK0 ] unsigned char 
 12791 ;;  exp2            1   44[BANK0 ] unsigned char 
 12792 ;;  sign            1   43[BANK0 ] unsigned char 
 12793 ;; Return value:  Size  Location     Type
 12794 ;;                  3   34[BANK0 ] float 
 12795 ;; Registers used:
 12796 ;;		wreg, status,2, status,0, cstack
 12797 ;; Tracked objects:
 12798 ;;		On entry : 0/0
 12799 ;;		On exit  : 0/0
 12800 ;;		Unchanged: 0/0
 12801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12802 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12803 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12804 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12805 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12806 ;;Total ram usage:       12 bytes
 12807 ;; Hardware stack levels used:    1
 12808 ;; Hardware stack levels required when called:    4
 12809 ;; This function calls:
 12810 ;;		___ftpack
 12811 ;; This function is called by:
 12812 ;;		_angleToPulse
 12813 ;;		_printf
 12814 ;;		___ftsub
 12815 ;; This function uses a non-reentrant model
 12816 ;;
 12817                           
 12818                           	psect	text54
 12819  001A6C                     __ptext54:
 12820                           	opt stack 0
 12821  001A6C                     ___ftadd:
 12822                           	opt stack 23
 12823                           
 12824                           ;incstack = 0
 12825  001A6C  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 12826  001A70  0100               	movlb	0	; () banked
 12827  001A72  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 12828  001A74  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 12829  001A76  0100               	movlb	0	; () banked
 12830  001A78  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 12831  001A7A  0100               	movlb	0	; () banked
 12832  001A7C  37A8               	rlcf	??___ftadd& (0+255),f,b
 12833  001A7E  E301               	bnc	u5661
 12834  001A80  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 12835  001A82                     u5661:
 12836  001A82  0100               	movlb	0	; () banked
 12837  001A84  51A8               	movf	??___ftadd& (0+255),w,b
 12838  001A86  0100               	movlb	0	; () banked
 12839  001A88  6FAD               	movwf	___ftadd@exp1& (0+255),b
 12840  001A8A  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 12841  001A8E  0100               	movlb	0	; () banked
 12842  001A90  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 12843  001A92  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 12844  001A94  0100               	movlb	0	; () banked
 12845  001A96  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 12846  001A98  0100               	movlb	0	; () banked
 12847  001A9A  37A8               	rlcf	??___ftadd& (0+255),f,b
 12848  001A9C  E301               	bnc	u5671
 12849  001A9E  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 12850  001AA0                     u5671:
 12851  001AA0  0100               	movlb	0	; () banked
 12852  001AA2  51A8               	movf	??___ftadd& (0+255),w,b
 12853  001AA4  0100               	movlb	0	; () banked
 12854  001AA6  6FAC               	movwf	___ftadd@exp2& (0+255),b
 12855                           
 12856                           ; BSR set to: 0
 12857  001AA8  0100               	movlb	0	; () banked
 12858  001AAA  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12859  001AAC  0100               	movlb	0	; () banked
 12860  001AAE  B4D8               	btfsc	status,2,c
 12861  001AB0  D011               	goto	l1142
 12862                           
 12863                           ; BSR set to: 0
 12864  001AB2  0100               	movlb	0	; () banked
 12865  001AB4  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12866  001AB6  0100               	movlb	0	; () banked
 12867  001AB8  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 12868  001ABA  B0D8               	btfsc	status,0,c
 12869  001ABC  D012               	goto	l6068
 12870                           
 12871                           ; BSR set to: 0
 12872  001ABE  0100               	movlb	0	; () banked
 12873  001AC0  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12874  001AC2  0800               	sublw	0
 12875  001AC4  0100               	movlb	0	; () banked
 12876  001AC6  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 12877  001AC8  0100               	movlb	0	; () banked
 12878  001ACA  6FA8               	movwf	??___ftadd& (0+255),b
 12879  001ACC  0E18               	movlw	24
 12880  001ACE  0100               	movlb	0	; () banked
 12881  001AD0  65A8               	cpfsgt	??___ftadd& (0+255),b
 12882  001AD2  D007               	goto	l6068
 12883  001AD4                     l1142:
 12884                           
 12885                           ; BSR set to: 0
 12886  001AD4  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 12887  001AD8  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 12888  001ADC  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 12889  001AE0  0012               	return	
 12890  001AE2                     l6068:
 12891                           
 12892                           ; BSR set to: 0
 12893  001AE2  0100               	movlb	0	; () banked
 12894  001AE4  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12895  001AE6  0100               	movlb	0	; () banked
 12896  001AE8  B4D8               	btfsc	status,2,c
 12897  001AEA  D011               	goto	l1146
 12898                           
 12899                           ; BSR set to: 0
 12900  001AEC  0100               	movlb	0	; () banked
 12901  001AEE  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12902  001AF0  0100               	movlb	0	; () banked
 12903  001AF2  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 12904  001AF4  B0D8               	btfsc	status,0,c
 12905  001AF6  D012               	goto	l6074
 12906                           
 12907                           ; BSR set to: 0
 12908  001AF8  0100               	movlb	0	; () banked
 12909  001AFA  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12910  001AFC  0800               	sublw	0
 12911  001AFE  0100               	movlb	0	; () banked
 12912  001B00  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 12913  001B02  0100               	movlb	0	; () banked
 12914  001B04  6FA8               	movwf	??___ftadd& (0+255),b
 12915  001B06  0E18               	movlw	24
 12916  001B08  0100               	movlb	0	; () banked
 12917  001B0A  65A8               	cpfsgt	??___ftadd& (0+255),b
 12918  001B0C  D007               	goto	l6074
 12919  001B0E                     l1146:
 12920                           
 12921                           ; BSR set to: 0
 12922  001B0E  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 12923  001B12  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 12924  001B16  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 12925  001B1A  0012               	return	
 12926  001B1C                     l6074:
 12927                           
 12928                           ; BSR set to: 0
 12929  001B1C  0E06               	movlw	6
 12930  001B1E  0100               	movlb	0	; () banked
 12931  001B20  6FAB               	movwf	___ftadd@sign& (0+255),b
 12932                           
 12933                           ; BSR set to: 0
 12934  001B22  0100               	movlb	0	; () banked
 12935  001B24  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 12936  001B26  D002               	goto	l6080
 12937                           
 12938                           ; BSR set to: 0
 12939  001B28  0100               	movlb	0	; () banked
 12940  001B2A  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 12941  001B2C                     l6080:
 12942                           
 12943                           ; BSR set to: 0
 12944  001B2C  0100               	movlb	0	; () banked
 12945  001B2E  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12946  001B30  D002               	goto	l1148
 12947                           
 12948                           ; BSR set to: 0
 12949  001B32  0100               	movlb	0	; () banked
 12950  001B34  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 12951  001B36                     l1148:
 12952                           
 12953                           ; BSR set to: 0
 12954  001B36  0100               	movlb	0	; () banked
 12955  001B38  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12956                           
 12957                           ; BSR set to: 0
 12958  001B3A  0EFF               	movlw	255
 12959  001B3C  0100               	movlb	0	; () banked
 12960  001B3E  17A2               	andwf	___ftadd@f1& (0+255),f,b
 12961  001B40  0EFF               	movlw	255
 12962  001B42  0100               	movlb	0	; () banked
 12963  001B44  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12964  001B46  0E00               	movlw	0
 12965  001B48  0100               	movlb	0	; () banked
 12966  001B4A  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12967  001B4C  0100               	movlb	0	; () banked
 12968  001B4E  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12969                           
 12970                           ; BSR set to: 0
 12971  001B50  0EFF               	movlw	255
 12972  001B52  0100               	movlb	0	; () banked
 12973  001B54  17A5               	andwf	___ftadd@f2& (0+255),f,b
 12974  001B56  0EFF               	movlw	255
 12975  001B58  0100               	movlb	0	; () banked
 12976  001B5A  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 12977  001B5C  0E00               	movlw	0
 12978  001B5E  0100               	movlb	0	; () banked
 12979  001B60  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 12980                           
 12981                           ; BSR set to: 0
 12982  001B62  0100               	movlb	0	; () banked
 12983  001B64  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12984  001B66  0100               	movlb	0	; () banked
 12985  001B68  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 12986  001B6A  B0D8               	btfsc	status,0,c
 12987  001B6C  D025               	goto	l6100
 12988  001B6E                     l6090:
 12989                           
 12990                           ; BSR set to: 0
 12991  001B6E  0100               	movlb	0	; () banked
 12992  001B70  90D8               	bcf	status,0,c
 12993  001B72  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 12994  001B74  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 12995  001B76  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 12996  001B78  0100               	movlb	0	; () banked
 12997  001B7A  07AC               	decf	___ftadd@exp2& (0+255),f,b
 12998                           
 12999                           ; BSR set to: 0
 13000  001B7C  0100               	movlb	0	; () banked
 13001  001B7E  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13002  001B80  0100               	movlb	0	; () banked
 13003  001B82  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 13004  001B84  B4D8               	btfsc	status,2,c
 13005  001B86  D011               	goto	l6098
 13006                           
 13007                           ; BSR set to: 0
 13008  001B88  0100               	movlb	0	; () banked
 13009  001B8A  07AB               	decf	___ftadd@sign& (0+255),f,b
 13010  001B8C  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 13011  001B90  0E07               	movlw	7
 13012  001B92  0100               	movlb	0	; () banked
 13013  001B94  17A8               	andwf	??___ftadd& (0+255),f,b
 13014  001B96  B4D8               	btfsc	status,2,c
 13015  001B98  D008               	goto	l6098
 13016  001B9A  D7E9               	goto	l6090
 13017  001B9C                     l6096:
 13018                           
 13019                           ; BSR set to: 0
 13020  001B9C  0100               	movlb	0	; () banked
 13021  001B9E  90D8               	bcf	status,0,c
 13022  001BA0  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 13023  001BA2  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 13024  001BA4  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 13025  001BA6  0100               	movlb	0	; () banked
 13026  001BA8  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 13027  001BAA                     l6098:
 13028                           
 13029                           ; BSR set to: 0
 13030  001BAA  0100               	movlb	0	; () banked
 13031  001BAC  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13032  001BAE  0100               	movlb	0	; () banked
 13033  001BB0  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 13034  001BB2  B4D8               	btfsc	status,2,c
 13035  001BB4  D02B               	goto	l1157
 13036  001BB6  D7F2               	goto	l6096
 13037  001BB8                     l6100:
 13038                           
 13039                           ; BSR set to: 0
 13040  001BB8  0100               	movlb	0	; () banked
 13041  001BBA  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13042  001BBC  0100               	movlb	0	; () banked
 13043  001BBE  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 13044  001BC0  B0D8               	btfsc	status,0,c
 13045  001BC2  D024               	goto	l1157
 13046  001BC4                     l6102:
 13047                           
 13048                           ; BSR set to: 0
 13049  001BC4  0100               	movlb	0	; () banked
 13050  001BC6  90D8               	bcf	status,0,c
 13051  001BC8  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 13052  001BCA  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 13053  001BCC  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 13054  001BCE  0100               	movlb	0	; () banked
 13055  001BD0  07AD               	decf	___ftadd@exp1& (0+255),f,b
 13056                           
 13057                           ; BSR set to: 0
 13058  001BD2  0100               	movlb	0	; () banked
 13059  001BD4  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13060  001BD6  0100               	movlb	0	; () banked
 13061  001BD8  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 13062  001BDA  B4D8               	btfsc	status,2,c
 13063  001BDC  D011               	goto	l6110
 13064                           
 13065                           ; BSR set to: 0
 13066  001BDE  0100               	movlb	0	; () banked
 13067  001BE0  07AB               	decf	___ftadd@sign& (0+255),f,b
 13068  001BE2  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 13069  001BE6  0E07               	movlw	7
 13070  001BE8  0100               	movlb	0	; () banked
 13071  001BEA  17A8               	andwf	??___ftadd& (0+255),f,b
 13072  001BEC  B4D8               	btfsc	status,2,c
 13073  001BEE  D008               	goto	l6110
 13074  001BF0  D7E9               	goto	l6102
 13075  001BF2                     l6108:
 13076                           
 13077                           ; BSR set to: 0
 13078  001BF2  0100               	movlb	0	; () banked
 13079  001BF4  90D8               	bcf	status,0,c
 13080  001BF6  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 13081  001BF8  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 13082  001BFA  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 13083  001BFC  0100               	movlb	0	; () banked
 13084  001BFE  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 13085  001C00                     l6110:
 13086                           
 13087                           ; BSR set to: 0
 13088  001C00  0100               	movlb	0	; () banked
 13089  001C02  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13090  001C04  0100               	movlb	0	; () banked
 13091  001C06  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 13092  001C08  A4D8               	btfss	status,2,c
 13093  001C0A  D7F3               	goto	l6108
 13094  001C0C                     l1157:
 13095                           
 13096                           ; BSR set to: 0
 13097  001C0C  0100               	movlb	0	; () banked
 13098  001C0E  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 13099  001C10  D012               	goto	l1166
 13100                           
 13101                           ; BSR set to: 0
 13102  001C12  0EFF               	movlw	255
 13103  001C14  0100               	movlb	0	; () banked
 13104  001C16  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 13105  001C18  0EFF               	movlw	255
 13106  001C1A  0100               	movlb	0	; () banked
 13107  001C1C  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 13108  001C1E  0EFF               	movlw	255
 13109  001C20  0100               	movlb	0	; () banked
 13110  001C22  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 13111  001C24  0E01               	movlw	1
 13112  001C26  0100               	movlb	0	; () banked
 13113  001C28  27A2               	addwf	___ftadd@f1& (0+255),f,b
 13114  001C2A  0E00               	movlw	0
 13115  001C2C  0100               	movlb	0	; () banked
 13116  001C2E  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 13117  001C30  0E00               	movlw	0
 13118  001C32  0100               	movlb	0	; () banked
 13119  001C34  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 13120  001C36                     l1166:
 13121                           
 13122                           ; BSR set to: 0
 13123  001C36  0100               	movlb	0	; () banked
 13124  001C38  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 13125  001C3A  D012               	goto	l6116
 13126                           
 13127                           ; BSR set to: 0
 13128  001C3C  0EFF               	movlw	255
 13129  001C3E  0100               	movlb	0	; () banked
 13130  001C40  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 13131  001C42  0EFF               	movlw	255
 13132  001C44  0100               	movlb	0	; () banked
 13133  001C46  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13134  001C48  0EFF               	movlw	255
 13135  001C4A  0100               	movlb	0	; () banked
 13136  001C4C  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13137  001C4E  0E01               	movlw	1
 13138  001C50  0100               	movlb	0	; () banked
 13139  001C52  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13140  001C54  0E00               	movlw	0
 13141  001C56  0100               	movlb	0	; () banked
 13142  001C58  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13143  001C5A  0E00               	movlw	0
 13144  001C5C  0100               	movlb	0	; () banked
 13145  001C5E  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13146  001C60                     l6116:
 13147                           
 13148                           ; BSR set to: 0
 13149  001C60  0E00               	movlw	0
 13150  001C62  0100               	movlb	0	; () banked
 13151  001C64  6FAB               	movwf	___ftadd@sign& (0+255),b
 13152                           
 13153                           ; BSR set to: 0
 13154  001C66  0100               	movlb	0	; () banked
 13155  001C68  51A2               	movf	___ftadd@f1& (0+255),w,b
 13156  001C6A  0100               	movlb	0	; () banked
 13157  001C6C  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13158  001C6E  0100               	movlb	0	; () banked
 13159  001C70  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 13160  001C72  0100               	movlb	0	; () banked
 13161  001C74  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13162  001C76  0100               	movlb	0	; () banked
 13163  001C78  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 13164  001C7A  0100               	movlb	0	; () banked
 13165  001C7C  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13166                           
 13167                           ; BSR set to: 0
 13168  001C7E  0100               	movlb	0	; () banked
 13169  001C80  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13170  001C82  D015               	goto	l6126
 13171                           
 13172                           ; BSR set to: 0
 13173  001C84  0EFF               	movlw	255
 13174  001C86  0100               	movlb	0	; () banked
 13175  001C88  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 13176  001C8A  0EFF               	movlw	255
 13177  001C8C  0100               	movlb	0	; () banked
 13178  001C8E  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13179  001C90  0EFF               	movlw	255
 13180  001C92  0100               	movlb	0	; () banked
 13181  001C94  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13182  001C96  0E01               	movlw	1
 13183  001C98  0100               	movlb	0	; () banked
 13184  001C9A  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13185  001C9C  0E00               	movlw	0
 13186  001C9E  0100               	movlb	0	; () banked
 13187  001CA0  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13188  001CA2  0E00               	movlw	0
 13189  001CA4  0100               	movlb	0	; () banked
 13190  001CA6  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13191                           
 13192                           ; BSR set to: 0
 13193  001CA8  0E01               	movlw	1
 13194  001CAA  0100               	movlb	0	; () banked
 13195  001CAC  6FAB               	movwf	___ftadd@sign& (0+255),b
 13196  001CAE                     l6126:
 13197                           
 13198                           ; BSR set to: 0
 13199  001CAE  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 13200  001CB2  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 13201  001CB6  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 13202  001CBA  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 13203  001CBE  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 13204  001CC2  EC87  F018         	call	___ftpack	;wreg free
 13205  001CC6  C023  F0A2         	movff	?___ftpack,?___ftadd
 13206  001CCA  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 13207  001CCE  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 13208  001CD2  0012               	return	
 13209  001CD4                     __end_of___ftadd:
 13210                           	opt stack 0
 13211                           tblptru	equ	0xFF8
 13212                           tblptrh	equ	0xFF7
 13213                           tblptrl	equ	0xFF6
 13214                           tablat	equ	0xFF5
 13215                           prodh	equ	0xFF4
 13216                           prodl	equ	0xFF3
 13217                           intcon	equ	0xFF2
 13218                           intcon3	equ	0xFF0
 13219                           postinc0	equ	0xFEE
 13220                           wreg	equ	0xFE8
 13221                           postdec1	equ	0xFE5
 13222                           fsr1l	equ	0xFE1
 13223                           indf2	equ	0xFDF
 13224                           postinc2	equ	0xFDE
 13225                           postdec2	equ	0xFDD
 13226                           fsr2h	equ	0xFDA
 13227                           fsr2l	equ	0xFD9
 13228                           status	equ	0xFD8
 13229                           
 13230 ;; *************** function ___awtoft *****************
 13231 ;; Defined at:
 13232 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;  c               2   42[COMRAM] int 
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;  sign            1   45[COMRAM] unsigned char 
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  3   42[COMRAM] float 
 13239 ;; Registers used:
 13240 ;;		wreg, status,2, status,0, cstack
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13246 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13249 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13250 ;;Total ram usage:        4 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:    4
 13253 ;; This function calls:
 13254 ;;		___ftpack
 13255 ;; This function is called by:
 13256 ;;		_sortBattery
 13257 ;;		_angleToPulse
 13258 ;;		_testFrequency
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           	psect	text55
 13263  003C34                     __ptext55:
 13264                           	opt stack 0
 13265  003C34                     ___awtoft:
 13266                           	opt stack 23
 13267                           
 13268                           ;incstack = 0
 13269  003C34  0E00               	movlw	0
 13270  003C36  6E2E               	movwf	___awtoft@sign,c
 13271  003C38  AE2C               	btfss	___awtoft@c+1,7,c
 13272  003C3A  D006               	goto	l6588
 13273  003C3C  6C2B               	negf	___awtoft@c,c
 13274  003C3E  1E2C               	comf	___awtoft@c+1,f,c
 13275  003C40  B0D8               	btfsc	status,0,c
 13276  003C42  2A2C               	incf	___awtoft@c+1,f,c
 13277  003C44  0E01               	movlw	1
 13278  003C46  6E2E               	movwf	___awtoft@sign,c
 13279  003C48                     l6588:
 13280  003C48  C02B  F023         	movff	___awtoft@c,___ftpack@arg
 13281  003C4C  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
 13282  003C50  6A25               	clrf	___ftpack@arg+2,c
 13283  003C52  0E8E               	movlw	142
 13284  003C54  6E26               	movwf	___ftpack@exp,c
 13285  003C56  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
 13286  003C5A  EC87  F018         	call	___ftpack	;wreg free
 13287  003C5E  C023  F02B         	movff	?___ftpack,?___awtoft
 13288  003C62  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
 13289  003C66  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
 13290  003C6A  0012               	return	
 13291  003C6C                     __end_of___awtoft:
 13292                           	opt stack 0
 13293                           tblptru	equ	0xFF8
 13294                           tblptrh	equ	0xFF7
 13295                           tblptrl	equ	0xFF6
 13296                           tablat	equ	0xFF5
 13297                           prodh	equ	0xFF4
 13298                           prodl	equ	0xFF3
 13299                           intcon	equ	0xFF2
 13300                           intcon3	equ	0xFF0
 13301                           postinc0	equ	0xFEE
 13302                           wreg	equ	0xFE8
 13303                           postdec1	equ	0xFE5
 13304                           fsr1l	equ	0xFE1
 13305                           indf2	equ	0xFDF
 13306                           postinc2	equ	0xFDE
 13307                           postdec2	equ	0xFDD
 13308                           fsr2h	equ	0xFDA
 13309                           fsr2l	equ	0xFD9
 13310                           status	equ	0xFD8
 13311                           
 13312 ;; *************** function ___altoft *****************
 13313 ;; Defined at:
 13314 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;  c               4   42[COMRAM] long 
 13317 ;; Auto vars:     Size  Location     Type
 13318 ;;  sign            1   51[COMRAM] unsigned char 
 13319 ;;  exp             1   50[COMRAM] unsigned char 
 13320 ;; Return value:  Size  Location     Type
 13321 ;;                  3   42[COMRAM] float 
 13322 ;; Registers used:
 13323 ;;		wreg, status,2, status,0, cstack
 13324 ;; Tracked objects:
 13325 ;;		On entry : 0/0
 13326 ;;		On exit  : 0/0
 13327 ;;		Unchanged: 0/0
 13328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13329 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13330 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13331 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13332 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13333 ;;Total ram usage:       10 bytes
 13334 ;; Hardware stack levels used:    1
 13335 ;; Hardware stack levels required when called:    4
 13336 ;; This function calls:
 13337 ;;		___ftpack
 13338 ;; This function is called by:
 13339 ;;		_sortBattery
 13340 ;;		_angleToPulse
 13341 ;; This function uses a non-reentrant model
 13342 ;;
 13343                           
 13344                           	psect	text56
 13345  00359E                     __ptext56:
 13346                           	opt stack 0
 13347  00359E                     ___altoft:
 13348                           	opt stack 23
 13349                           
 13350                           ;incstack = 0
 13351  00359E  0E00               	movlw	0
 13352  0035A0  6E34               	movwf	___altoft@sign,c
 13353  0035A2  0E8E               	movlw	142
 13354  0035A4  6E33               	movwf	___altoft@exp,c
 13355  0035A6  AE2E               	btfss	___altoft@c+3,7,c
 13356  0035A8  D011               	goto	l6520
 13357  0035AA  1E2E               	comf	___altoft@c+3,f,c
 13358  0035AC  1E2D               	comf	___altoft@c+2,f,c
 13359  0035AE  1E2C               	comf	___altoft@c+1,f,c
 13360  0035B0  6C2B               	negf	___altoft@c,c
 13361  0035B2  0E00               	movlw	0
 13362  0035B4  222C               	addwfc	___altoft@c+1,f,c
 13363  0035B6  222D               	addwfc	___altoft@c+2,f,c
 13364  0035B8  222E               	addwfc	___altoft@c+3,f,c
 13365  0035BA  0E01               	movlw	1
 13366  0035BC  6E34               	movwf	___altoft@sign,c
 13367  0035BE  D006               	goto	l6520
 13368  0035C0                     l6518:
 13369  0035C0  90D8               	bcf	status,0,c
 13370  0035C2  322E               	rrcf	___altoft@c+3,f,c
 13371  0035C4  322D               	rrcf	___altoft@c+2,f,c
 13372  0035C6  322C               	rrcf	___altoft@c+1,f,c
 13373  0035C8  322B               	rrcf	___altoft@c,f,c
 13374  0035CA  2A33               	incf	___altoft@exp,f,c
 13375  0035CC                     l6520:
 13376  0035CC  0E00               	movlw	0
 13377  0035CE  142B               	andwf	___altoft@c,w,c
 13378  0035D0  6E2F               	movwf	??___altoft& (0+255),c
 13379  0035D2  0E00               	movlw	0
 13380  0035D4  142C               	andwf	___altoft@c+1,w,c
 13381  0035D6  6E30               	movwf	(??___altoft+1)& (0+255),c
 13382  0035D8  0E00               	movlw	0
 13383  0035DA  142D               	andwf	___altoft@c+2,w,c
 13384  0035DC  6E31               	movwf	(??___altoft+2)& (0+255),c
 13385  0035DE  0EFF               	movlw	255
 13386  0035E0  142E               	andwf	___altoft@c+3,w,c
 13387  0035E2  6E32               	movwf	(??___altoft+3)& (0+255),c
 13388  0035E4  502F               	movf	??___altoft,w,c
 13389  0035E6  1030               	iorwf	??___altoft+1,w,c
 13390  0035E8  1031               	iorwf	??___altoft+2,w,c
 13391  0035EA  1032               	iorwf	??___altoft+3,w,c
 13392  0035EC  A4D8               	btfss	status,2,c
 13393  0035EE  D7E8               	goto	l6518
 13394  0035F0  C02B  F023         	movff	___altoft@c,___ftpack@arg
 13395  0035F4  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
 13396  0035F8  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
 13397  0035FC  C033  F026         	movff	___altoft@exp,___ftpack@exp
 13398  003600  C034  F027         	movff	___altoft@sign,___ftpack@sign
 13399  003604  EC87  F018         	call	___ftpack	;wreg free
 13400  003608  C023  F02B         	movff	?___ftpack,?___altoft
 13401  00360C  C024  F02C         	movff	?___ftpack+1,?___altoft+1
 13402  003610  C025  F02D         	movff	?___ftpack+2,?___altoft+2
 13403  003614  0012               	return	
 13404  003616                     __end_of___altoft:
 13405                           	opt stack 0
 13406                           tblptru	equ	0xFF8
 13407                           tblptrh	equ	0xFF7
 13408                           tblptrl	equ	0xFF6
 13409                           tablat	equ	0xFF5
 13410                           prodh	equ	0xFF4
 13411                           prodl	equ	0xFF3
 13412                           intcon	equ	0xFF2
 13413                           intcon3	equ	0xFF0
 13414                           postinc0	equ	0xFEE
 13415                           wreg	equ	0xFE8
 13416                           postdec1	equ	0xFE5
 13417                           fsr1l	equ	0xFE1
 13418                           indf2	equ	0xFDF
 13419                           postinc2	equ	0xFDE
 13420                           postdec2	equ	0xFDD
 13421                           fsr2h	equ	0xFDA
 13422                           fsr2l	equ	0xFD9
 13423                           status	equ	0xFD8
 13424                           
 13425 ;; *************** function ___ftpack *****************
 13426 ;; Defined at:
 13427 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 13428 ;; Parameters:    Size  Location     Type
 13429 ;;  arg             3   34[COMRAM] unsigned um
 13430 ;;  exp             1   37[COMRAM] unsigned char 
 13431 ;;  sign            1   38[COMRAM] unsigned char 
 13432 ;; Auto vars:     Size  Location     Type
 13433 ;;		None
 13434 ;; Return value:  Size  Location     Type
 13435 ;;                  3   34[COMRAM] float 
 13436 ;; Registers used:
 13437 ;;		wreg, status,2, status,0
 13438 ;; Tracked objects:
 13439 ;;		On entry : 0/0
 13440 ;;		On exit  : 0/0
 13441 ;;		Unchanged: 0/0
 13442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13443 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13445 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13446 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13447 ;;Total ram usage:        8 bytes
 13448 ;; Hardware stack levels used:    1
 13449 ;; Hardware stack levels required when called:    3
 13450 ;; This function calls:
 13451 ;;		Nothing
 13452 ;; This function is called by:
 13453 ;;		___altoft
 13454 ;;		___awtoft
 13455 ;;		___ftadd
 13456 ;;		___ftdiv
 13457 ;;		___ftmul
 13458 ;;		___lltoft
 13459 ;; This function uses a non-reentrant model
 13460 ;;
 13461                           
 13462                           	psect	text57
 13463  00310E                     __ptext57:
 13464                           	opt stack 0
 13465  00310E                     ___ftpack:
 13466                           	opt stack 23
 13467                           
 13468                           ;incstack = 0
 13469  00310E  5026               	movf	___ftpack@exp,w,c
 13470  003110  B4D8               	btfsc	status,2,c
 13471  003112  D005               	goto	l6016
 13472  003114  5023               	movf	___ftpack@arg,w,c
 13473  003116  1024               	iorwf	___ftpack@arg+1,w,c
 13474  003118  1025               	iorwf	___ftpack@arg+2,w,c
 13475  00311A  A4D8               	btfss	status,2,c
 13476  00311C  D00C               	goto	l6022
 13477  00311E                     l6016:
 13478  00311E  0E00               	movlw	0
 13479  003120  6E23               	movwf	?___ftpack,c
 13480  003122  0E00               	movlw	0
 13481  003124  6E24               	movwf	?___ftpack+1,c
 13482  003126  0E00               	movlw	0
 13483  003128  6E25               	movwf	?___ftpack+2,c
 13484  00312A  0012               	return	
 13485  00312C                     l6020:
 13486  00312C  2A26               	incf	___ftpack@exp,f,c
 13487  00312E  90D8               	bcf	status,0,c
 13488  003130  3225               	rrcf	___ftpack@arg+2,f,c
 13489  003132  3224               	rrcf	___ftpack@arg+1,f,c
 13490  003134  3223               	rrcf	___ftpack@arg,f,c
 13491  003136                     l6022:
 13492  003136  0E00               	movlw	0
 13493  003138  1423               	andwf	___ftpack@arg,w,c
 13494  00313A  6E28               	movwf	??___ftpack& (0+255),c
 13495  00313C  0E00               	movlw	0
 13496  00313E  1424               	andwf	___ftpack@arg+1,w,c
 13497  003140  6E29               	movwf	(??___ftpack+1)& (0+255),c
 13498  003142  0EFE               	movlw	254
 13499  003144  1425               	andwf	___ftpack@arg+2,w,c
 13500  003146  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 13501  003148  5028               	movf	??___ftpack,w,c
 13502  00314A  1029               	iorwf	??___ftpack+1,w,c
 13503  00314C  102A               	iorwf	??___ftpack+2,w,c
 13504  00314E  B4D8               	btfsc	status,2,c
 13505  003150  D00C               	goto	l6028
 13506  003152  D7EC               	goto	l6020
 13507  003154                     l6024:
 13508  003154  2A26               	incf	___ftpack@exp,f,c
 13509  003156  0E01               	movlw	1
 13510  003158  2623               	addwf	___ftpack@arg,f,c
 13511  00315A  0E00               	movlw	0
 13512  00315C  2224               	addwfc	___ftpack@arg+1,f,c
 13513  00315E  0E00               	movlw	0
 13514  003160  2225               	addwfc	___ftpack@arg+2,f,c
 13515  003162  90D8               	bcf	status,0,c
 13516  003164  3225               	rrcf	___ftpack@arg+2,f,c
 13517  003166  3224               	rrcf	___ftpack@arg+1,f,c
 13518  003168  3223               	rrcf	___ftpack@arg,f,c
 13519  00316A                     l6028:
 13520  00316A  0E00               	movlw	0
 13521  00316C  1423               	andwf	___ftpack@arg,w,c
 13522  00316E  6E28               	movwf	??___ftpack& (0+255),c
 13523  003170  0E00               	movlw	0
 13524  003172  1424               	andwf	___ftpack@arg+1,w,c
 13525  003174  6E29               	movwf	(??___ftpack+1)& (0+255),c
 13526  003176  0EFF               	movlw	255
 13527  003178  1425               	andwf	___ftpack@arg+2,w,c
 13528  00317A  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 13529  00317C  5028               	movf	??___ftpack,w,c
 13530  00317E  1029               	iorwf	??___ftpack+1,w,c
 13531  003180  102A               	iorwf	??___ftpack+2,w,c
 13532  003182  B4D8               	btfsc	status,2,c
 13533  003184  D006               	goto	l6032
 13534  003186  D7E6               	goto	l6024
 13535  003188                     l6030:
 13536  003188  0626               	decf	___ftpack@exp,f,c
 13537  00318A  90D8               	bcf	status,0,c
 13538  00318C  3623               	rlcf	___ftpack@arg,f,c
 13539  00318E  3624               	rlcf	___ftpack@arg+1,f,c
 13540  003190  3625               	rlcf	___ftpack@arg+2,f,c
 13541  003192                     l6032:
 13542  003192  BE24               	btfsc	___ftpack@arg+1,7,c
 13543  003194  D003               	goto	l1119
 13544  003196  0E02               	movlw	2
 13545  003198  6026               	cpfslt	___ftpack@exp,c
 13546  00319A  D7F6               	goto	l6030
 13547  00319C                     l1119:
 13548  00319C  A026               	btfss	___ftpack@exp,0,c
 13549  00319E  9E24               	bcf	___ftpack@arg+1,7,c
 13550  0031A0  90D8               	bcf	status,0,c
 13551  0031A2  3226               	rrcf	___ftpack@exp,f,c
 13552  0031A4  5026               	movf	___ftpack@exp,w,c
 13553  0031A6  1225               	iorwf	___ftpack@arg+2,f,c
 13554  0031A8  5027               	movf	___ftpack@sign,w,c
 13555  0031AA  A4D8               	btfss	status,2,c
 13556  0031AC  8E25               	bsf	___ftpack@arg+2,7,c
 13557  0031AE  C023  F023         	movff	___ftpack@arg,?___ftpack
 13558  0031B2  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 13559  0031B6  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 13560  0031BA  0012               	return	
 13561  0031BC                     __end_of___ftpack:
 13562                           	opt stack 0
 13563                           tblptru	equ	0xFF8
 13564                           tblptrh	equ	0xFF7
 13565                           tblptrl	equ	0xFF6
 13566                           tablat	equ	0xFF5
 13567                           prodh	equ	0xFF4
 13568                           prodl	equ	0xFF3
 13569                           intcon	equ	0xFF2
 13570                           intcon3	equ	0xFF0
 13571                           postinc0	equ	0xFEE
 13572                           wreg	equ	0xFE8
 13573                           postdec1	equ	0xFE5
 13574                           fsr1l	equ	0xFE1
 13575                           indf2	equ	0xFDF
 13576                           postinc2	equ	0xFDE
 13577                           postdec2	equ	0xFDD
 13578                           fsr2h	equ	0xFDA
 13579                           fsr2l	equ	0xFD9
 13580                           status	equ	0xFD8
 13581                           
 13582 ;; *************** function _initTimer *****************
 13583 ;; Defined at:
 13584 ;;		line 52 in file "timer.c"
 13585 ;; Parameters:    Size  Location     Type
 13586 ;;  timer           2   34[COMRAM] int 
 13587 ;; Auto vars:     Size  Location     Type
 13588 ;;		None
 13589 ;; Return value:  Size  Location     Type
 13590 ;;                  1    wreg      void 
 13591 ;; Registers used:
 13592 ;;		wreg, status,2, status,0
 13593 ;; Tracked objects:
 13594 ;;		On entry : 0/0
 13595 ;;		On exit  : 0/0
 13596 ;;		Unchanged: 0/0
 13597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13598 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13600 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13601 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13602 ;;Total ram usage:        4 bytes
 13603 ;; Hardware stack levels used:    1
 13604 ;; Hardware stack levels required when called:    3
 13605 ;; This function calls:
 13606 ;;		Nothing
 13607 ;; This function is called by:
 13608 ;;		_main
 13609 ;;		_initServo
 13610 ;;		_testFrequency
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           	psect	text58
 13615  003B2C                     __ptext58:
 13616                           	opt stack 0
 13617  003B2C                     _initTimer:
 13618                           	opt stack 27
 13619                           
 13620                           ;timer.c: 53: switch(timer){
 13621                           
 13622                           ;incstack = 0
 13623  003B2C  D00F               	goto	l4962
 13624  003B2E                     l4944:
 13625                           
 13626                           ;timer.c: 55: T0CON = 0;
 13627  003B2E  0E00               	movlw	0
 13628  003B30  6ED5               	movwf	4053,c	;volatile
 13629                           
 13630                           ;timer.c: 56: T0CON |= 1<<3;
 13631  003B32  86D5               	bsf	4053,3,c	;volatile
 13632                           
 13633                           ;timer.c: 58: TMR0IE = 1;
 13634  003B34  8AF2               	bsf	intcon,5,c	;volatile
 13635                           
 13636                           ;timer.c: 59: break;
 13637  003B36  D01C               	goto	l448
 13638  003B38                     l4950:
 13639                           
 13640                           ;timer.c: 61: T1CON = 0;
 13641  003B38  0E00               	movlw	0
 13642  003B3A  6ECD               	movwf	4045,c	;volatile
 13643                           
 13644                           ;timer.c: 63: T1CON |= 0b11<<4;
 13645  003B3C  0E30               	movlw	48
 13646  003B3E  12CD               	iorwf	4045,f,c	;volatile
 13647                           
 13648                           ;timer.c: 64: TMR1IE = 1;
 13649  003B40  809D               	bsf	3997,0,c	;volatile
 13650                           
 13651                           ;timer.c: 65: break;
 13652  003B42  D016               	goto	l448
 13653  003B44                     l4956:
 13654                           
 13655                           ;timer.c: 67: T3CON = 0;
 13656  003B44  0E00               	movlw	0
 13657  003B46  6EB1               	movwf	4017,c	;volatile
 13658                           
 13659                           ;timer.c: 68: TMR3IE = 1;
 13660  003B48  82A0               	bsf	4000,1,c	;volatile
 13661                           
 13662                           ;timer.c: 70: }
 13663                           
 13664                           ;timer.c: 69: break;
 13665  003B4A  D012               	goto	l448
 13666  003B4C                     l4962:
 13667  003B4C  C023  F025         	movff	initTimer@timer,??_initTimer
 13668  003B50  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
 13669                           
 13670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13671                           ; Switch size 1, requested type "space"
 13672                           ; Number of cases is 1, Range of values is 0 to 0
 13673                           ; switch strategies available:
 13674                           ; Name         Instructions Cycles
 13675                           ; simple_byte            4     3 (average)
 13676                           ;	Chosen strategy is simple_byte
 13677  003B54  5026               	movf	??_initTimer+1,w,c
 13678  003B56  0A00               	xorlw	0	; case 0
 13679  003B58  A4D8               	btfss	status,2,c
 13680  003B5A  D00A               	goto	l448
 13681                           
 13682                           ; Switch size 1, requested type "space"
 13683                           ; Number of cases is 3, Range of values is 0 to 3
 13684                           ; switch strategies available:
 13685                           ; Name         Instructions Cycles
 13686                           ; simple_byte           10     6 (average)
 13687                           ;	Chosen strategy is simple_byte
 13688  003B5C  5025               	movf	??_initTimer,w,c
 13689  003B5E  0A00               	xorlw	0	; case 0
 13690  003B60  B4D8               	btfsc	status,2,c
 13691  003B62  D7E5               	goto	l4944
 13692  003B64  0A01               	xorlw	1	; case 1
 13693  003B66  B4D8               	btfsc	status,2,c
 13694  003B68  D7E7               	goto	l4950
 13695  003B6A  0A02               	xorlw	2	; case 3
 13696  003B6C  B4D8               	btfsc	status,2,c
 13697  003B6E  D7EA               	goto	l4956
 13698  003B70                     l448:
 13699                           
 13700                           ;timer.c: 71: PEIE = 1;
 13701  003B70  8CF2               	bsf	intcon,6,c	;volatile
 13702                           
 13703                           ;timer.c: 72: (INTCONbits.GIE = 1);
 13704  003B72  8EF2               	bsf	intcon,7,c	;volatile
 13705  003B74  0012               	return		;funcret
 13706  003B76                     __end_of_initTimer:
 13707                           	opt stack 0
 13708                           tblptru	equ	0xFF8
 13709                           tblptrh	equ	0xFF7
 13710                           tblptrl	equ	0xFF6
 13711                           tablat	equ	0xFF5
 13712                           prodh	equ	0xFF4
 13713                           prodl	equ	0xFF3
 13714                           intcon	equ	0xFF2
 13715                           intcon3	equ	0xFF0
 13716                           postinc0	equ	0xFEE
 13717                           wreg	equ	0xFE8
 13718                           postdec1	equ	0xFE5
 13719                           fsr1l	equ	0xFE1
 13720                           indf2	equ	0xFDF
 13721                           postinc2	equ	0xFDE
 13722                           postdec2	equ	0xFDD
 13723                           fsr2h	equ	0xFDA
 13724                           fsr2l	equ	0xFD9
 13725                           status	equ	0xFD8
 13726                           
 13727 ;; *************** function _initLCD *****************
 13728 ;; Defined at:
 13729 ;;		line 15 in file "lcd.c"
 13730 ;; Parameters:    Size  Location     Type
 13731 ;;		None
 13732 ;; Auto vars:     Size  Location     Type
 13733 ;;		None
 13734 ;; Return value:  Size  Location     Type
 13735 ;;                  1    wreg      void 
 13736 ;; Registers used:
 13737 ;;		wreg, status,2, status,0, cstack
 13738 ;; Tracked objects:
 13739 ;;		On entry : 0/0
 13740 ;;		On exit  : 0/0
 13741 ;;		Unchanged: 0/0
 13742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13747 ;;Total ram usage:        1 bytes
 13748 ;; Hardware stack levels used:    1
 13749 ;; Hardware stack levels required when called:    5
 13750 ;; This function calls:
 13751 ;;		_lcdInst
 13752 ;; This function is called by:
 13753 ;;		_main
 13754 ;;		_debug
 13755 ;; This function uses a non-reentrant model
 13756 ;;
 13757                           
 13758                           	psect	text59
 13759  003B76                     __ptext59:
 13760                           	opt stack 0
 13761  003B76                     _initLCD:
 13762                           	opt stack 25
 13763                           
 13764                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 13765                           
 13766                           ;incstack = 0
 13767  003B76  0E31               	movlw	49
 13768  003B78  6E27               	movwf	??_initLCD& (0+255),c
 13769  003B7A  0EB2               	movlw	178
 13770  003B7C                     u8077:
 13771  003B7C  2EE8               	decfsz	wreg,f,c
 13772  003B7E  D7FE               	bra	u8077
 13773  003B80  2E27               	decfsz	??_initLCD& (0+255),f,c
 13774  003B82  D7FC               	bra	u8077
 13775  003B84  D000               	nop2	
 13776                           
 13777                           ;lcd.c: 18: lcdInst(0b00110011);
 13778  003B86  0E33               	movlw	51
 13779  003B88  ECBB  F01E         	call	_lcdInst
 13780                           
 13781                           ;lcd.c: 19: lcdInst(0b00110010);
 13782  003B8C  0E32               	movlw	50
 13783  003B8E  ECBB  F01E         	call	_lcdInst
 13784                           
 13785                           ;lcd.c: 20: lcdInst(0b00101000);
 13786  003B92  0E28               	movlw	40
 13787  003B94  ECBB  F01E         	call	_lcdInst
 13788                           
 13789                           ;lcd.c: 21: lcdInst(0b00001111);
 13790  003B98  0E0F               	movlw	15
 13791  003B9A  ECBB  F01E         	call	_lcdInst
 13792                           
 13793                           ;lcd.c: 22: lcdInst(0b00000110);
 13794  003B9E  0E06               	movlw	6
 13795  003BA0  ECBB  F01E         	call	_lcdInst
 13796                           
 13797                           ;lcd.c: 23: lcdInst(0b00000001);
 13798  003BA4  0E01               	movlw	1
 13799  003BA6  ECBB  F01E         	call	_lcdInst
 13800                           
 13801                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 13802  003BAA  0E31               	movlw	49
 13803  003BAC  6E27               	movwf	??_initLCD& (0+255),c
 13804  003BAE  0EB2               	movlw	178
 13805  003BB0                     u8087:
 13806  003BB0  2EE8               	decfsz	wreg,f,c
 13807  003BB2  D7FE               	bra	u8087
 13808  003BB4  2E27               	decfsz	??_initLCD& (0+255),f,c
 13809  003BB6  D7FC               	bra	u8087
 13810  003BB8  D000               	nop2	
 13811  003BBA  0012               	return		;funcret
 13812  003BBC                     __end_of_initLCD:
 13813                           	opt stack 0
 13814                           tblptru	equ	0xFF8
 13815                           tblptrh	equ	0xFF7
 13816                           tblptrl	equ	0xFF6
 13817                           tablat	equ	0xFF5
 13818                           prodh	equ	0xFF4
 13819                           prodl	equ	0xFF3
 13820                           intcon	equ	0xFF2
 13821                           intcon3	equ	0xFF0
 13822                           postinc0	equ	0xFEE
 13823                           wreg	equ	0xFE8
 13824                           postdec1	equ	0xFE5
 13825                           fsr1l	equ	0xFE1
 13826                           indf2	equ	0xFDF
 13827                           postinc2	equ	0xFDE
 13828                           postdec2	equ	0xFDD
 13829                           fsr2h	equ	0xFDA
 13830                           fsr2l	equ	0xFD9
 13831                           status	equ	0xFD8
 13832                           
 13833 ;; *************** function _lcdInst *****************
 13834 ;; Defined at:
 13835 ;;		line 27 in file "lcd.c"
 13836 ;; Parameters:    Size  Location     Type
 13837 ;;  data            1    wreg     unsigned char 
 13838 ;; Auto vars:     Size  Location     Type
 13839 ;;  data            1   37[COMRAM] unsigned char 
 13840 ;; Return value:  Size  Location     Type
 13841 ;;                  1    wreg      void 
 13842 ;; Registers used:
 13843 ;;		wreg, status,2, status,0, cstack
 13844 ;; Tracked objects:
 13845 ;;		On entry : 0/0
 13846 ;;		On exit  : 0/0
 13847 ;;		Unchanged: 0/0
 13848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13850 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13852 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;Total ram usage:        2 bytes
 13854 ;; Hardware stack levels used:    1
 13855 ;; Hardware stack levels required when called:    4
 13856 ;; This function calls:
 13857 ;;		_lcdNibble
 13858 ;; This function is called by:
 13859 ;;		_initLCD
 13860 ;;		_lcdHome
 13861 ;;		_lcdClear
 13862 ;;		_lcdNewline
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           	psect	text60
 13867  003D76                     __ptext60:
 13868                           	opt stack 0
 13869  003D76                     _lcdInst:
 13870                           	opt stack 22
 13871                           
 13872                           ;incstack = 0
 13873                           ;lcdInst@data stored from wreg
 13874  003D76  6E26               	movwf	lcdInst@data,c
 13875                           
 13876                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 13877  003D78  948C               	bcf	3980,2,c	;volatile
 13878                           
 13879                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 13880  003D7A  0E74               	movlw	116
 13881  003D7C                     u8097:
 13882  003D7C  2EE8               	decfsz	wreg,f,c
 13883  003D7E  D7FE               	bra	u8097
 13884  003D80  D000               	nop2	
 13885                           
 13886                           ;lcd.c: 30: lcdNibble(data);
 13887  003D82  5026               	movf	lcdInst@data,w,c
 13888  003D84  ECE3  F01B         	call	_lcdNibble
 13889                           
 13890                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 13891  003D88  0E04               	movlw	4
 13892  003D8A  6E25               	movwf	??_lcdInst& (0+255),c
 13893  003D8C  0E3E               	movlw	62
 13894  003D8E                     u8107:
 13895  003D8E  2EE8               	decfsz	wreg,f,c
 13896  003D90  D7FE               	bra	u8107
 13897  003D92  2E25               	decfsz	??_lcdInst& (0+255),f,c
 13898  003D94  D7FC               	bra	u8107
 13899  003D96  0012               	return		;funcret
 13900  003D98                     __end_of_lcdInst:
 13901                           	opt stack 0
 13902                           tblptru	equ	0xFF8
 13903                           tblptrh	equ	0xFF7
 13904                           tblptrl	equ	0xFF6
 13905                           tablat	equ	0xFF5
 13906                           prodh	equ	0xFF4
 13907                           prodl	equ	0xFF3
 13908                           intcon	equ	0xFF2
 13909                           intcon3	equ	0xFF0
 13910                           postinc0	equ	0xFEE
 13911                           wreg	equ	0xFE8
 13912                           postdec1	equ	0xFE5
 13913                           fsr1l	equ	0xFE1
 13914                           indf2	equ	0xFDF
 13915                           postinc2	equ	0xFDE
 13916                           postdec2	equ	0xFDD
 13917                           fsr2h	equ	0xFDA
 13918                           fsr2l	equ	0xFD9
 13919                           status	equ	0xFD8
 13920                           
 13921 ;; *************** function _lcdNibble *****************
 13922 ;; Defined at:
 13923 ;;		line 46 in file "lcd.c"
 13924 ;; Parameters:    Size  Location     Type
 13925 ;;  data            1    wreg     unsigned char 
 13926 ;; Auto vars:     Size  Location     Type
 13927 ;;  data            1   35[COMRAM] unsigned char 
 13928 ;;  temp            1   34[COMRAM] unsigned char 
 13929 ;; Return value:  Size  Location     Type
 13930 ;;                  1    wreg      void 
 13931 ;; Registers used:
 13932 ;;		wreg, status,2, status,0
 13933 ;; Tracked objects:
 13934 ;;		On entry : 0/0
 13935 ;;		On exit  : 0/0
 13936 ;;		Unchanged: 0/0
 13937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13942 ;;Total ram usage:        2 bytes
 13943 ;; Hardware stack levels used:    1
 13944 ;; Hardware stack levels required when called:    3
 13945 ;; This function calls:
 13946 ;;		Nothing
 13947 ;; This function is called by:
 13948 ;;		_lcdInst
 13949 ;;		_putch
 13950 ;; This function uses a non-reentrant model
 13951 ;;
 13952                           
 13953                           	psect	text61
 13954  0037C6                     __ptext61:
 13955                           	opt stack 0
 13956  0037C6                     _lcdNibble:
 13957                           	opt stack 24
 13958                           
 13959                           ;incstack = 0
 13960                           ;lcdNibble@data stored from wreg
 13961  0037C6  6E24               	movwf	lcdNibble@data,c
 13962                           
 13963                           ;lcd.c: 48: char temp = data & 0xF0;
 13964  0037C8  5024               	movf	lcdNibble@data,w,c
 13965  0037CA  0BF0               	andlw	240
 13966  0037CC  6E23               	movwf	lcdNibble@temp,c
 13967                           
 13968                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13969  0037CE  508C               	movf	3980,w,c	;volatile
 13970  0037D0  0B0F               	andlw	15
 13971  0037D2  6E8C               	movwf	3980,c	;volatile
 13972                           
 13973                           ;lcd.c: 50: LATD = temp | LATD;
 13974  0037D4  5023               	movf	lcdNibble@temp,w,c
 13975  0037D6  108C               	iorwf	3980,w,c	;volatile
 13976  0037D8  6E8C               	movwf	3980,c	;volatile
 13977                           
 13978                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13979  0037DA  968C               	bcf	3980,3,c	;volatile
 13980                           
 13981                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13982  0037DC  0ED6               	movlw	214
 13983  0037DE                     u8117:
 13984  0037DE  D000               	nop2	
 13985  0037E0  D000               	nop2	
 13986  0037E2  2EE8               	decfsz	wreg,f,c
 13987  0037E4  D7FC               	bra	u8117
 13988  0037E6  D000               	nop2	
 13989                           
 13990                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13991  0037E8  868C               	bsf	3980,3,c	;volatile
 13992                           
 13993                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13994  0037EA  0ED6               	movlw	214
 13995  0037EC                     u8127:
 13996  0037EC  D000               	nop2	
 13997  0037EE  D000               	nop2	
 13998  0037F0  2EE8               	decfsz	wreg,f,c
 13999  0037F2  D7FC               	bra	u8127
 14000  0037F4  D000               	nop2	
 14001                           
 14002                           ;lcd.c: 58: data = data << 4;
 14003  0037F6  3824               	swapf	lcdNibble@data,w,c
 14004  0037F8  0BF0               	andlw	240
 14005  0037FA  6E24               	movwf	lcdNibble@data,c
 14006                           
 14007                           ;lcd.c: 60: temp = data & 0xF0;
 14008  0037FC  5024               	movf	lcdNibble@data,w,c
 14009  0037FE  0BF0               	andlw	240
 14010  003800  6E23               	movwf	lcdNibble@temp,c
 14011                           
 14012                           ;lcd.c: 61: LATD = LATD & 0x0F;
 14013  003802  508C               	movf	3980,w,c	;volatile
 14014  003804  0B0F               	andlw	15
 14015  003806  6E8C               	movwf	3980,c	;volatile
 14016                           
 14017                           ;lcd.c: 62: LATD = temp | LATD;
 14018  003808  5023               	movf	lcdNibble@temp,w,c
 14019  00380A  108C               	iorwf	3980,w,c	;volatile
 14020  00380C  6E8C               	movwf	3980,c	;volatile
 14021                           
 14022                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 14023  00380E  968C               	bcf	3980,3,c	;volatile
 14024                           
 14025                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14026  003810  0ED6               	movlw	214
 14027  003812                     u8137:
 14028  003812  D000               	nop2	
 14029  003814  D000               	nop2	
 14030  003816  2EE8               	decfsz	wreg,f,c
 14031  003818  D7FC               	bra	u8137
 14032  00381A  D000               	nop2	
 14033                           
 14034                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 14035  00381C  868C               	bsf	3980,3,c	;volatile
 14036                           
 14037                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14038  00381E  0ED6               	movlw	214
 14039  003820                     u8147:
 14040  003820  D000               	nop2	
 14041  003822  D000               	nop2	
 14042  003824  2EE8               	decfsz	wreg,f,c
 14043  003826  D7FC               	bra	u8147
 14044  003828  D000               	nop2	
 14045  00382A  0012               	return		;funcret
 14046  00382C                     __end_of_lcdNibble:
 14047                           	opt stack 0
 14048                           tblptru	equ	0xFF8
 14049                           tblptrh	equ	0xFF7
 14050                           tblptrl	equ	0xFF6
 14051                           tablat	equ	0xFF5
 14052                           prodh	equ	0xFF4
 14053                           prodl	equ	0xFF3
 14054                           intcon	equ	0xFF2
 14055                           intcon3	equ	0xFF0
 14056                           postinc0	equ	0xFEE
 14057                           wreg	equ	0xFE8
 14058                           postdec1	equ	0xFE5
 14059                           fsr1l	equ	0xFE1
 14060                           indf2	equ	0xFDF
 14061                           postinc2	equ	0xFDE
 14062                           postdec2	equ	0xFDD
 14063                           fsr2h	equ	0xFDA
 14064                           fsr2l	equ	0xFD9
 14065                           status	equ	0xFD8
 14066                           
 14067 ;; *************** function ___almod *****************
 14068 ;; Defined at:
 14069 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;  dividend        4   48[COMRAM] long 
 14072 ;;  divisor         4   52[COMRAM] long 
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;  sign            1   57[COMRAM] unsigned char 
 14075 ;;  counter         1   56[COMRAM] unsigned char 
 14076 ;; Return value:  Size  Location     Type
 14077 ;;                  4   48[COMRAM] long 
 14078 ;; Registers used:
 14079 ;;		wreg, status,2, status,0
 14080 ;; Tracked objects:
 14081 ;;		On entry : 0/0
 14082 ;;		On exit  : 0/0
 14083 ;;		Unchanged: 0/0
 14084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14085 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14088 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14089 ;;Total ram usage:       10 bytes
 14090 ;; Hardware stack levels used:    1
 14091 ;; Hardware stack levels required when called:    3
 14092 ;; This function calls:
 14093 ;;		Nothing
 14094 ;; This function is called by:
 14095 ;;		_main
 14096 ;; This function uses a non-reentrant model
 14097 ;;
 14098                           
 14099                           	psect	text62
 14100  0031BC                     __ptext62:
 14101                           	opt stack 0
 14102  0031BC                     ___almod:
 14103                           	opt stack 27
 14104                           
 14105                           ;incstack = 0
 14106  0031BC  0E00               	movlw	0
 14107  0031BE  6E3A               	movwf	___almod@sign,c
 14108  0031C0  AE34               	btfss	___almod@dividend+3,7,c
 14109  0031C2  D00A               	goto	l5620
 14110  0031C4  1E34               	comf	___almod@dividend+3,f,c
 14111  0031C6  1E33               	comf	___almod@dividend+2,f,c
 14112  0031C8  1E32               	comf	___almod@dividend+1,f,c
 14113  0031CA  6C31               	negf	___almod@dividend,c
 14114  0031CC  0E00               	movlw	0
 14115  0031CE  2232               	addwfc	___almod@dividend+1,f,c
 14116  0031D0  2233               	addwfc	___almod@dividend+2,f,c
 14117  0031D2  2234               	addwfc	___almod@dividend+3,f,c
 14118  0031D4  0E01               	movlw	1
 14119  0031D6  6E3A               	movwf	___almod@sign,c
 14120  0031D8                     l5620:
 14121  0031D8  AE38               	btfss	___almod@divisor+3,7,c
 14122  0031DA  D008               	goto	l5624
 14123  0031DC  1E38               	comf	___almod@divisor+3,f,c
 14124  0031DE  1E37               	comf	___almod@divisor+2,f,c
 14125  0031E0  1E36               	comf	___almod@divisor+1,f,c
 14126  0031E2  6C35               	negf	___almod@divisor,c
 14127  0031E4  0E00               	movlw	0
 14128  0031E6  2236               	addwfc	___almod@divisor+1,f,c
 14129  0031E8  2237               	addwfc	___almod@divisor+2,f,c
 14130  0031EA  2238               	addwfc	___almod@divisor+3,f,c
 14131  0031EC                     l5624:
 14132  0031EC  5035               	movf	___almod@divisor,w,c
 14133  0031EE  1036               	iorwf	___almod@divisor+1,w,c
 14134  0031F0  1037               	iorwf	___almod@divisor+2,w,c
 14135  0031F2  1038               	iorwf	___almod@divisor+3,w,c
 14136  0031F4  B4D8               	btfsc	status,2,c
 14137  0031F6  D024               	goto	l5640
 14138  0031F8  0E01               	movlw	1
 14139  0031FA  6E39               	movwf	___almod@counter,c
 14140  0031FC  D006               	goto	l5630
 14141  0031FE                     l5628:
 14142  0031FE  90D8               	bcf	status,0,c
 14143  003200  3635               	rlcf	___almod@divisor,f,c
 14144  003202  3636               	rlcf	___almod@divisor+1,f,c
 14145  003204  3637               	rlcf	___almod@divisor+2,f,c
 14146  003206  3638               	rlcf	___almod@divisor+3,f,c
 14147  003208  2A39               	incf	___almod@counter,f,c
 14148  00320A                     l5630:
 14149  00320A  AE38               	btfss	___almod@divisor+3,7,c
 14150  00320C  D7F8               	goto	l5628
 14151  00320E                     l5632:
 14152  00320E  5035               	movf	___almod@divisor,w,c
 14153  003210  5C31               	subwf	___almod@dividend,w,c
 14154  003212  5036               	movf	___almod@divisor+1,w,c
 14155  003214  5832               	subwfb	___almod@dividend+1,w,c
 14156  003216  5037               	movf	___almod@divisor+2,w,c
 14157  003218  5833               	subwfb	___almod@dividend+2,w,c
 14158  00321A  5038               	movf	___almod@divisor+3,w,c
 14159  00321C  5834               	subwfb	___almod@dividend+3,w,c
 14160  00321E  A0D8               	btfss	status,0,c
 14161  003220  D008               	goto	l5636
 14162  003222  5035               	movf	___almod@divisor,w,c
 14163  003224  5E31               	subwf	___almod@dividend,f,c
 14164  003226  5036               	movf	___almod@divisor+1,w,c
 14165  003228  5A32               	subwfb	___almod@dividend+1,f,c
 14166  00322A  5037               	movf	___almod@divisor+2,w,c
 14167  00322C  5A33               	subwfb	___almod@dividend+2,f,c
 14168  00322E  5038               	movf	___almod@divisor+3,w,c
 14169  003230  5A34               	subwfb	___almod@dividend+3,f,c
 14170  003232                     l5636:
 14171  003232  90D8               	bcf	status,0,c
 14172  003234  3238               	rrcf	___almod@divisor+3,f,c
 14173  003236  3237               	rrcf	___almod@divisor+2,f,c
 14174  003238  3236               	rrcf	___almod@divisor+1,f,c
 14175  00323A  3235               	rrcf	___almod@divisor,f,c
 14176  00323C  2E39               	decfsz	___almod@counter,f,c
 14177  00323E  D7E7               	goto	l5632
 14178  003240                     l5640:
 14179  003240  503A               	movf	___almod@sign,w,c
 14180  003242  B4D8               	btfsc	status,2,c
 14181  003244  D008               	goto	l5644
 14182  003246  1E34               	comf	___almod@dividend+3,f,c
 14183  003248  1E33               	comf	___almod@dividend+2,f,c
 14184  00324A  1E32               	comf	___almod@dividend+1,f,c
 14185  00324C  6C31               	negf	___almod@dividend,c
 14186  00324E  0E00               	movlw	0
 14187  003250  2232               	addwfc	___almod@dividend+1,f,c
 14188  003252  2233               	addwfc	___almod@dividend+2,f,c
 14189  003254  2234               	addwfc	___almod@dividend+3,f,c
 14190  003256                     l5644:
 14191  003256  C031  F031         	movff	___almod@dividend,?___almod
 14192  00325A  C032  F032         	movff	___almod@dividend+1,?___almod+1
 14193  00325E  C033  F033         	movff	___almod@dividend+2,?___almod+2
 14194  003262  C034  F034         	movff	___almod@dividend+3,?___almod+3
 14195  003266  0012               	return	
 14196  003268                     __end_of___almod:
 14197                           	opt stack 0
 14198                           tblptru	equ	0xFF8
 14199                           tblptrh	equ	0xFF7
 14200                           tblptrl	equ	0xFF6
 14201                           tablat	equ	0xFF5
 14202                           prodh	equ	0xFF4
 14203                           prodl	equ	0xFF3
 14204                           intcon	equ	0xFF2
 14205                           intcon3	equ	0xFF0
 14206                           postinc0	equ	0xFEE
 14207                           wreg	equ	0xFE8
 14208                           postdec1	equ	0xFE5
 14209                           fsr1l	equ	0xFE1
 14210                           indf2	equ	0xFDF
 14211                           postinc2	equ	0xFDE
 14212                           postdec2	equ	0xFDD
 14213                           fsr2h	equ	0xFDA
 14214                           fsr2l	equ	0xFD9
 14215                           status	equ	0xFD8
 14216                           
 14217 ;; *************** function ___aldiv *****************
 14218 ;; Defined at:
 14219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 14220 ;; Parameters:    Size  Location     Type
 14221 ;;  dividend        4   34[COMRAM] long 
 14222 ;;  divisor         4   38[COMRAM] long 
 14223 ;; Auto vars:     Size  Location     Type
 14224 ;;  quotient        4   44[COMRAM] long 
 14225 ;;  sign            1   43[COMRAM] unsigned char 
 14226 ;;  counter         1   42[COMRAM] unsigned char 
 14227 ;; Return value:  Size  Location     Type
 14228 ;;                  4   34[COMRAM] long 
 14229 ;; Registers used:
 14230 ;;		wreg, status,2, status,0
 14231 ;; Tracked objects:
 14232 ;;		On entry : 0/0
 14233 ;;		On exit  : 0/0
 14234 ;;		Unchanged: 0/0
 14235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14236 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14237 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14239 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14240 ;;Total ram usage:       14 bytes
 14241 ;; Hardware stack levels used:    1
 14242 ;; Hardware stack levels required when called:    3
 14243 ;; This function calls:
 14244 ;;		Nothing
 14245 ;; This function is called by:
 14246 ;;		_main
 14247 ;; This function uses a non-reentrant model
 14248 ;;
 14249                           
 14250                           	psect	text63
 14251  002DEC                     __ptext63:
 14252                           	opt stack 0
 14253  002DEC                     ___aldiv:
 14254                           	opt stack 27
 14255                           
 14256                           ;incstack = 0
 14257  002DEC  0E00               	movlw	0
 14258  002DEE  6E2C               	movwf	___aldiv@sign,c
 14259  002DF0  AE2A               	btfss	___aldiv@divisor+3,7,c
 14260  002DF2  D00A               	goto	l5576
 14261  002DF4  1E2A               	comf	___aldiv@divisor+3,f,c
 14262  002DF6  1E29               	comf	___aldiv@divisor+2,f,c
 14263  002DF8  1E28               	comf	___aldiv@divisor+1,f,c
 14264  002DFA  6C27               	negf	___aldiv@divisor,c
 14265  002DFC  0E00               	movlw	0
 14266  002DFE  2228               	addwfc	___aldiv@divisor+1,f,c
 14267  002E00  2229               	addwfc	___aldiv@divisor+2,f,c
 14268  002E02  222A               	addwfc	___aldiv@divisor+3,f,c
 14269  002E04  0E01               	movlw	1
 14270  002E06  6E2C               	movwf	___aldiv@sign,c
 14271  002E08                     l5576:
 14272  002E08  AE26               	btfss	___aldiv@dividend+3,7,c
 14273  002E0A  D00A               	goto	l5582
 14274  002E0C  1E26               	comf	___aldiv@dividend+3,f,c
 14275  002E0E  1E25               	comf	___aldiv@dividend+2,f,c
 14276  002E10  1E24               	comf	___aldiv@dividend+1,f,c
 14277  002E12  6C23               	negf	___aldiv@dividend,c
 14278  002E14  0E00               	movlw	0
 14279  002E16  2224               	addwfc	___aldiv@dividend+1,f,c
 14280  002E18  2225               	addwfc	___aldiv@dividend+2,f,c
 14281  002E1A  2226               	addwfc	___aldiv@dividend+3,f,c
 14282  002E1C  0E01               	movlw	1
 14283  002E1E  1A2C               	xorwf	___aldiv@sign,f,c
 14284  002E20                     l5582:
 14285  002E20  0E00               	movlw	0
 14286  002E22  6E2D               	movwf	___aldiv@quotient,c
 14287  002E24  0E00               	movlw	0
 14288  002E26  6E2E               	movwf	___aldiv@quotient+1,c
 14289  002E28  0E00               	movlw	0
 14290  002E2A  6E2F               	movwf	___aldiv@quotient+2,c
 14291  002E2C  0E00               	movlw	0
 14292  002E2E  6E30               	movwf	___aldiv@quotient+3,c
 14293  002E30  5027               	movf	___aldiv@divisor,w,c
 14294  002E32  1028               	iorwf	___aldiv@divisor+1,w,c
 14295  002E34  1029               	iorwf	___aldiv@divisor+2,w,c
 14296  002E36  102A               	iorwf	___aldiv@divisor+3,w,c
 14297  002E38  B4D8               	btfsc	status,2,c
 14298  002E3A  D02A               	goto	l5604
 14299  002E3C  0E01               	movlw	1
 14300  002E3E  6E2B               	movwf	___aldiv@counter,c
 14301  002E40  D006               	goto	l5590
 14302  002E42                     l5588:
 14303  002E42  90D8               	bcf	status,0,c
 14304  002E44  3627               	rlcf	___aldiv@divisor,f,c
 14305  002E46  3628               	rlcf	___aldiv@divisor+1,f,c
 14306  002E48  3629               	rlcf	___aldiv@divisor+2,f,c
 14307  002E4A  362A               	rlcf	___aldiv@divisor+3,f,c
 14308  002E4C  2A2B               	incf	___aldiv@counter,f,c
 14309  002E4E                     l5590:
 14310  002E4E  AE2A               	btfss	___aldiv@divisor+3,7,c
 14311  002E50  D7F8               	goto	l5588
 14312  002E52                     l5592:
 14313  002E52  90D8               	bcf	status,0,c
 14314  002E54  362D               	rlcf	___aldiv@quotient,f,c
 14315  002E56  362E               	rlcf	___aldiv@quotient+1,f,c
 14316  002E58  362F               	rlcf	___aldiv@quotient+2,f,c
 14317  002E5A  3630               	rlcf	___aldiv@quotient+3,f,c
 14318  002E5C  5027               	movf	___aldiv@divisor,w,c
 14319  002E5E  5C23               	subwf	___aldiv@dividend,w,c
 14320  002E60  5028               	movf	___aldiv@divisor+1,w,c
 14321  002E62  5824               	subwfb	___aldiv@dividend+1,w,c
 14322  002E64  5029               	movf	___aldiv@divisor+2,w,c
 14323  002E66  5825               	subwfb	___aldiv@dividend+2,w,c
 14324  002E68  502A               	movf	___aldiv@divisor+3,w,c
 14325  002E6A  5826               	subwfb	___aldiv@dividend+3,w,c
 14326  002E6C  A0D8               	btfss	status,0,c
 14327  002E6E  D009               	goto	l5600
 14328  002E70  5027               	movf	___aldiv@divisor,w,c
 14329  002E72  5E23               	subwf	___aldiv@dividend,f,c
 14330  002E74  5028               	movf	___aldiv@divisor+1,w,c
 14331  002E76  5A24               	subwfb	___aldiv@dividend+1,f,c
 14332  002E78  5029               	movf	___aldiv@divisor+2,w,c
 14333  002E7A  5A25               	subwfb	___aldiv@dividend+2,f,c
 14334  002E7C  502A               	movf	___aldiv@divisor+3,w,c
 14335  002E7E  5A26               	subwfb	___aldiv@dividend+3,f,c
 14336  002E80  802D               	bsf	___aldiv@quotient,0,c
 14337  002E82                     l5600:
 14338  002E82  90D8               	bcf	status,0,c
 14339  002E84  322A               	rrcf	___aldiv@divisor+3,f,c
 14340  002E86  3229               	rrcf	___aldiv@divisor+2,f,c
 14341  002E88  3228               	rrcf	___aldiv@divisor+1,f,c
 14342  002E8A  3227               	rrcf	___aldiv@divisor,f,c
 14343  002E8C  2E2B               	decfsz	___aldiv@counter,f,c
 14344  002E8E  D7E1               	goto	l5592
 14345  002E90                     l5604:
 14346  002E90  502C               	movf	___aldiv@sign,w,c
 14347  002E92  B4D8               	btfsc	status,2,c
 14348  002E94  D008               	goto	l5608
 14349  002E96  1E30               	comf	___aldiv@quotient+3,f,c
 14350  002E98  1E2F               	comf	___aldiv@quotient+2,f,c
 14351  002E9A  1E2E               	comf	___aldiv@quotient+1,f,c
 14352  002E9C  6C2D               	negf	___aldiv@quotient,c
 14353  002E9E  0E00               	movlw	0
 14354  002EA0  222E               	addwfc	___aldiv@quotient+1,f,c
 14355  002EA2  222F               	addwfc	___aldiv@quotient+2,f,c
 14356  002EA4  2230               	addwfc	___aldiv@quotient+3,f,c
 14357  002EA6                     l5608:
 14358  002EA6  C02D  F023         	movff	___aldiv@quotient,?___aldiv
 14359  002EAA  C02E  F024         	movff	___aldiv@quotient+1,?___aldiv+1
 14360  002EAE  C02F  F025         	movff	___aldiv@quotient+2,?___aldiv+2
 14361  002EB2  C030  F026         	movff	___aldiv@quotient+3,?___aldiv+3
 14362  002EB6  0012               	return	
 14363  002EB8                     __end_of___aldiv:
 14364                           	opt stack 0
 14365                           tblptru	equ	0xFF8
 14366                           tblptrh	equ	0xFF7
 14367                           tblptrl	equ	0xFF6
 14368                           tablat	equ	0xFF5
 14369                           prodh	equ	0xFF4
 14370                           prodl	equ	0xFF3
 14371                           intcon	equ	0xFF2
 14372                           intcon3	equ	0xFF0
 14373                           postinc0	equ	0xFEE
 14374                           wreg	equ	0xFE8
 14375                           postdec1	equ	0xFE5
 14376                           fsr1l	equ	0xFE1
 14377                           indf2	equ	0xFDF
 14378                           postinc2	equ	0xFDE
 14379                           postdec2	equ	0xFDD
 14380                           fsr2h	equ	0xFDA
 14381                           fsr2l	equ	0xFD9
 14382                           status	equ	0xFD8
 14383                           
 14384 ;; *************** function _service *****************
 14385 ;; Defined at:
 14386 ;;		line 341 in file "main.c"
 14387 ;; Parameters:    Size  Location     Type
 14388 ;;		None
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;  key             1   33[COMRAM] unsigned char 
 14391 ;; Return value:  Size  Location     Type
 14392 ;;                  1    wreg      void 
 14393 ;; Registers used:
 14394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14402 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14403 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;Total ram usage:       15 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; Hardware stack levels required when called:    2
 14407 ;; This function calls:
 14408 ;;		_keyPressedInterruptService
 14409 ;;		_servoInterruptService
 14410 ;;		i2_startTimer
 14411 ;; This function is called by:
 14412 ;;		Interrupt level 2
 14413 ;; This function uses a non-reentrant model
 14414 ;;
 14415                           
 14416                           	psect	intcode
 14417  000008                     __pintcode:
 14418                           	opt stack 0
 14419  000008                     _service:
 14420                           	opt stack 21
 14421                           
 14422                           ;incstack = 0
 14423  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14424  00000A  EDCD  F014         	call	int_func,f	;refresh shadow registers
 14425                           tblptru	equ	0xFF8
 14426                           tblptrh	equ	0xFF7
 14427                           tblptrl	equ	0xFF6
 14428                           tablat	equ	0xFF5
 14429                           prodh	equ	0xFF4
 14430                           prodl	equ	0xFF3
 14431                           intcon	equ	0xFF2
 14432                           intcon3	equ	0xFF0
 14433                           postinc0	equ	0xFEE
 14434                           wreg	equ	0xFE8
 14435                           postdec1	equ	0xFE5
 14436                           fsr1l	equ	0xFE1
 14437                           indf2	equ	0xFDF
 14438                           postinc2	equ	0xFDE
 14439                           postdec2	equ	0xFDD
 14440                           fsr2h	equ	0xFDA
 14441                           fsr2l	equ	0xFD9
 14442                           status	equ	0xFD8
 14443                           
 14444                           	psect	intcode_body
 14445  00299A                     __pintcode_body:
 14446                           	opt stack 21
 14447  00299A                     int_func:
 14448                           	opt stack 21
 14449  00299A  0006               	pop		; remove dummy address from shadow register refresh
 14450  00299C  CFFA F014          	movff	pclath,??_service
 14451  0029A0  CFFB F015          	movff	pclatu,??_service+1
 14452  0029A4  CFE9 F016          	movff	fsr0l,??_service+2
 14453  0029A8  CFEA F017          	movff	fsr0h,??_service+3
 14454  0029AC  CFE1 F018          	movff	fsr1l,??_service+4
 14455  0029B0  CFE2 F019          	movff	fsr1h,??_service+5
 14456  0029B4  CFD9 F01A          	movff	fsr2l,??_service+6
 14457  0029B8  CFDA F01B          	movff	fsr2h,??_service+7
 14458  0029BC  CFF3 F01C          	movff	prodl,??_service+8
 14459  0029C0  CFF4 F01D          	movff	prodh,??_service+9
 14460  0029C4  CFF6 F01E          	movff	tblptrl,??_service+10
 14461  0029C8  CFF7 F01F          	movff	tblptrh,??_service+11
 14462  0029CC  CFF8 F020          	movff	tblptru,??_service+12
 14463  0029D0  CFF5 F021          	movff	tablat,??_service+13
 14464                           
 14465                           ;main.c: 343: if( servoInterruptService() )return;
 14466  0029D4  ECD2  F013         	call	_servoInterruptService	;wreg free
 14467  0029D8  0900               	iorlw	0
 14468  0029DA  A4D8               	btfss	status,2,c
 14469  0029DC  D035               	goto	i2l198
 14470                           
 14471                           ;main.c: 348: if(TMR1IF){
 14472  0029DE  A09E               	btfss	3998,0,c	;volatile
 14473  0029E0  D017               	goto	i2l199
 14474                           
 14475                           ;main.c: 349: startTimer(1,0x8683);
 14476  0029E2  0E00               	movlw	0
 14477  0029E4  6E08               	movwf	i2startTimer@timer+1,c
 14478  0029E6  0E01               	movlw	1
 14479  0029E8  6E07               	movwf	i2startTimer@timer,c
 14480  0029EA  0E83               	movlw	131
 14481  0029EC  6E09               	movwf	i2startTimer@val,c
 14482  0029EE  0E86               	movlw	134
 14483  0029F0  6E0A               	movwf	i2startTimer@val+1,c
 14484  0029F2  0E00               	movlw	0
 14485  0029F4  6E0B               	movwf	i2startTimer@val+2,c
 14486  0029F6  0E00               	movlw	0
 14487  0029F8  6E0C               	movwf	i2startTimer@val+3,c
 14488  0029FA  EC70  F01D         	call	i2_startTimer	;wreg free
 14489                           
 14490                           ;main.c: 350: time+=1;
 14491  0029FE  0E01               	movlw	1
 14492  002A00  0101               	movlb	1	; () banked
 14493  002A02  276B               	addwf	_time& (0+255),f,b
 14494  002A04  0E00               	movlw	0
 14495  002A06  236C               	addwfc	(_time+1)& (0+255),f,b
 14496  002A08  236D               	addwfc	(_time+2)& (0+255),f,b
 14497  002A0A  236E               	addwfc	(_time+3)& (0+255),f,b
 14498                           
 14499                           ; BSR set to: 1
 14500                           ;main.c: 351: TMR1IF = 0;
 14501  002A0C  909E               	bcf	3998,0,c	;volatile
 14502                           
 14503                           ; BSR set to: 1
 14504                           ;main.c: 352: return;
 14505  002A0E  D01C               	goto	i2l198
 14506  002A10                     i2l199:
 14507                           
 14508                           ;main.c: 353: }
 14509                           ;main.c: 356: if(INT0IF){ INT0IF = 0;
 14510  002A10  A2F2               	btfss	intcon,1,c	;volatile
 14511  002A12  D007               	goto	i2l200
 14512  002A14  92F2               	bcf	intcon,1,c	;volatile
 14513                           
 14514                           ;main.c: 357: batteryDetected = 1;
 14515  002A16  0E00               	movlw	0
 14516  002A18  0101               	movlb	1	; () banked
 14517  002A1A  6F70               	movwf	(_batteryDetected+1)& (0+255),b
 14518  002A1C  0E01               	movlw	1
 14519  002A1E  6F6F               	movwf	_batteryDetected& (0+255),b
 14520                           
 14521                           ; BSR set to: 1
 14522                           ;main.c: 358: return;
 14523  002A20  D013               	goto	i2l198
 14524  002A22                     i2l200:
 14525                           
 14526                           ;main.c: 359: }
 14527                           ;main.c: 362: if(INT1IF && INT1IE){INT1IF = 0;
 14528  002A22  B0F0               	btfsc	intcon3,0,c	;volatile
 14529  002A24  A6F0               	btfss	intcon3,3,c	;volatile
 14530  002A26  D010               	goto	i2l198
 14531  002A28  90F0               	bcf	intcon3,0,c	;volatile
 14532                           
 14533                           ;main.c: 363: keyPressedInterruptService();
 14534  002A2A  ECCC  F01E         	call	_keyPressedInterruptService	;wreg free
 14535                           
 14536                           ;main.c: 364: char key = (PORTB & 0xF0) >> 4;
 14537  002A2E  3881               	swapf	3969,w,c	;volatile
 14538  002A30  0B0F               	andlw	15
 14539  002A32  0B0F               	andlw	15
 14540  002A34  6E22               	movwf	service@key,c
 14541                           
 14542                           ;main.c: 365: if(key == 12)terminate = 1;
 14543  002A36  0E0C               	movlw	12
 14544  002A38  1822               	xorwf	service@key,w,c
 14545  002A3A  A4D8               	btfss	status,2,c
 14546  002A3C  D005               	goto	i2l198
 14547  002A3E  0E00               	movlw	0
 14548  002A40  0101               	movlb	1	; () banked
 14549  002A42  6F7A               	movwf	(_terminate+1)& (0+255),b
 14550  002A44  0E01               	movlw	1
 14551  002A46  6F79               	movwf	_terminate& (0+255),b
 14552  002A48                     i2l198:
 14553  002A48  C021  FFF5         	movff	??_service+13,tablat
 14554  002A4C  C020  FFF8         	movff	??_service+12,tblptru
 14555  002A50  C01F  FFF7         	movff	??_service+11,tblptrh
 14556  002A54  C01E  FFF6         	movff	??_service+10,tblptrl
 14557  002A58  C01D  FFF4         	movff	??_service+9,prodh
 14558  002A5C  C01C  FFF3         	movff	??_service+8,prodl
 14559  002A60  C01B  FFDA         	movff	??_service+7,fsr2h
 14560  002A64  C01A  FFD9         	movff	??_service+6,fsr2l
 14561  002A68  C019  FFE2         	movff	??_service+5,fsr1h
 14562  002A6C  C018  FFE1         	movff	??_service+4,fsr1l
 14563  002A70  C017  FFEA         	movff	??_service+3,fsr0h
 14564  002A74  C016  FFE9         	movff	??_service+2,fsr0l
 14565  002A78  C015  FFFB         	movff	??_service+1,pclatu
 14566  002A7C  C014  FFFA         	movff	??_service,pclath
 14567  002A80  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14568  002A82  0011               	retfie		f
 14569  002A84                     __end_of_service:
 14570                           	opt stack 0
 14571                           pclatu	equ	0xFFB
 14572                           pclath	equ	0xFFA
 14573                           tblptru	equ	0xFF8
 14574                           tblptrh	equ	0xFF7
 14575                           tblptrl	equ	0xFF6
 14576                           tablat	equ	0xFF5
 14577                           prodh	equ	0xFF4
 14578                           prodl	equ	0xFF3
 14579                           intcon	equ	0xFF2
 14580                           intcon3	equ	0xFF0
 14581                           postinc0	equ	0xFEE
 14582                           fsr0h	equ	0xFEA
 14583                           fsr0l	equ	0xFE9
 14584                           wreg	equ	0xFE8
 14585                           postdec1	equ	0xFE5
 14586                           fsr1h	equ	0xFE2
 14587                           fsr1l	equ	0xFE1
 14588                           indf2	equ	0xFDF
 14589                           postinc2	equ	0xFDE
 14590                           postdec2	equ	0xFDD
 14591                           fsr2h	equ	0xFDA
 14592                           fsr2l	equ	0xFD9
 14593                           status	equ	0xFD8
 14594                           
 14595 ;; *************** function _servoInterruptService *****************
 14596 ;; Defined at:
 14597 ;;		line 55 in file "servo.c"
 14598 ;; Parameters:    Size  Location     Type
 14599 ;;		None
 14600 ;; Auto vars:     Size  Location     Type
 14601 ;;		None
 14602 ;; Return value:  Size  Location     Type
 14603 ;;                  1    wreg      unsigned char 
 14604 ;; Registers used:
 14605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14606 ;; Tracked objects:
 14607 ;;		On entry : 0/0
 14608 ;;		On exit  : 0/0
 14609 ;;		Unchanged: 0/0
 14610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14613 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14614 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14615 ;;Total ram usage:        4 bytes
 14616 ;; Hardware stack levels used:    1
 14617 ;; Hardware stack levels required when called:    1
 14618 ;; This function calls:
 14619 ;;		i2___awmod
 14620 ;;		i2_digitalWrite
 14621 ;;		i2_startTimer
 14622 ;; This function is called by:
 14623 ;;		_service
 14624 ;; This function uses a non-reentrant model
 14625 ;;
 14626                           
 14627                           	psect	text65
 14628  0027A4                     __ptext65:
 14629                           	opt stack 0
 14630  0027A4                     _servoInterruptService:
 14631                           	opt stack 21
 14632                           
 14633                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 14634                           
 14635                           ;incstack = 0
 14636  0027A4  A4F2               	btfss	intcon,2,c	;volatile
 14637  0027A6  D082               	goto	i2l5560
 14638  0027A8  94F2               	bcf	intcon,2,c	;volatile
 14639                           
 14640                           ;servo.c: 58: digitalWrite(servos[curr],0);
 14641  0027AA  90D8               	bcf	status,0,c
 14642  0027AC  3449               	rlcf	_curr,w,c
 14643  0027AE  6ED9               	movwf	fsr2l,c
 14644  0027B0  344A               	rlcf	_curr+1,w,c
 14645  0027B2  6EDA               	movwf	fsr2h,c
 14646  0027B4  0E3B               	movlw	low _servos
 14647  0027B6  26D9               	addwf	fsr2l,f,c
 14648  0027B8  0E00               	movlw	high _servos
 14649  0027BA  22DA               	addwfc	fsr2h,f,c
 14650  0027BC  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14651  0027C0  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14652  0027C4  0E00               	movlw	0
 14653  0027C6  6E0A               	movwf	i2digitalWrite@val+1,c
 14654  0027C8  0E00               	movlw	0
 14655  0027CA  6E09               	movwf	i2digitalWrite@val,c
 14656  0027CC  ECC0  F017         	call	i2_digitalWrite	;wreg free
 14657                           
 14658                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 14659  0027D0  0E01               	movlw	1
 14660  0027D2  2449               	addwf	_curr,w,c
 14661  0027D4  6E01               	movwf	i2___awmod@dividend,c
 14662  0027D6  0E00               	movlw	0
 14663  0027D8  204A               	addwfc	_curr+1,w,c
 14664  0027DA  6E02               	movwf	i2___awmod@dividend+1,c
 14665  0027DC  0E01               	movlw	1
 14666  0027DE  0100               	movlb	0	; () banked
 14667  0027E0  25FB               	addwf	_n& (0+255),w,b
 14668  0027E2  6E03               	movwf	i2___awmod@divisor,c
 14669  0027E4  0E00               	movlw	0
 14670  0027E6  0100               	movlb	0	; () banked
 14671  0027E8  21FC               	addwfc	(_n+1)& (0+255),w,b
 14672  0027EA  6E04               	movwf	i2___awmod@divisor+1,c
 14673  0027EC  EC43  F01B         	call	i2___awmod	;wreg free
 14674  0027F0  90D8               	bcf	status,0,c
 14675  0027F2  3601               	rlcf	?i2___awmod,f,c
 14676  0027F4  3602               	rlcf	?i2___awmod+1,f,c
 14677  0027F6  0E3B               	movlw	low _servos
 14678  0027F8  2401               	addwf	?i2___awmod,w,c
 14679  0027FA  6ED9               	movwf	fsr2l,c
 14680  0027FC  0E00               	movlw	high _servos
 14681  0027FE  2002               	addwfc	?i2___awmod+1,w,c
 14682  002800  6EDA               	movwf	fsr2h,c
 14683  002802  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14684  002806  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14685  00280A  0E00               	movlw	0
 14686  00280C  6E0A               	movwf	i2digitalWrite@val+1,c
 14687  00280E  0E01               	movlw	1
 14688  002810  6E09               	movwf	i2digitalWrite@val,c
 14689  002812  ECC0  F017         	call	i2_digitalWrite	;wreg free
 14690                           
 14691                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 14692  002816  0E00               	movlw	0
 14693  002818  6E08               	movwf	i2startTimer@timer+1,c
 14694  00281A  0E00               	movlw	0
 14695  00281C  6E07               	movwf	i2startTimer@timer,c
 14696  00281E  0EFF               	movlw	255
 14697  002820  6E10               	movwf	??_servoInterruptService& (0+255),c
 14698  002822  0EFF               	movlw	255
 14699  002824  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 14700  002826  0E01               	movlw	1
 14701  002828  2449               	addwf	_curr,w,c
 14702  00282A  6E01               	movwf	i2___awmod@dividend,c
 14703  00282C  0E00               	movlw	0
 14704  00282E  204A               	addwfc	_curr+1,w,c
 14705  002830  6E02               	movwf	i2___awmod@dividend+1,c
 14706  002832  0E01               	movlw	1
 14707  002834  0100               	movlb	0	; () banked
 14708  002836  25FB               	addwf	_n& (0+255),w,b
 14709  002838  6E03               	movwf	i2___awmod@divisor,c
 14710  00283A  0E00               	movlw	0
 14711  00283C  0100               	movlb	0	; () banked
 14712  00283E  21FC               	addwfc	(_n+1)& (0+255),w,b
 14713  002840  6E04               	movwf	i2___awmod@divisor+1,c
 14714  002842  EC43  F01B         	call	i2___awmod	;wreg free
 14715  002846  90D8               	bcf	status,0,c
 14716  002848  3601               	rlcf	?i2___awmod,f,c
 14717  00284A  3602               	rlcf	?i2___awmod+1,f,c
 14718  00284C  0E63               	movlw	low _pulse
 14719  00284E  2401               	addwf	?i2___awmod,w,c
 14720  002850  6ED9               	movwf	fsr2l,c
 14721  002852  0E01               	movlw	high _pulse
 14722  002854  2002               	addwfc	?i2___awmod+1,w,c
 14723  002856  6EDA               	movwf	fsr2h,c
 14724  002858  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 14725  00285C  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 14726  002860  1E12               	comf	??_servoInterruptService+2,f,c
 14727  002862  1E13               	comf	??_servoInterruptService+3,f,c
 14728  002864  4A12               	infsnz	??_servoInterruptService+2,f,c
 14729  002866  2A13               	incf	??_servoInterruptService+3,f,c
 14730  002868  5010               	movf	??_servoInterruptService,w,c
 14731  00286A  2612               	addwf	??_servoInterruptService+2,f,c
 14732  00286C  5011               	movf	??_servoInterruptService+1,w,c
 14733  00286E  2213               	addwfc	??_servoInterruptService+3,f,c
 14734  002870  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 14735  002874  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 14736  002878  6A0B               	clrf	i2startTimer@val+2,c
 14737  00287A  6A0C               	clrf	i2startTimer@val+3,c
 14738  00287C  EC70  F01D         	call	i2_startTimer	;wreg free
 14739                           
 14740                           ;servo.c: 62: curr = (curr+1)%(n+1);
 14741  002880  0E01               	movlw	1
 14742  002882  2449               	addwf	_curr,w,c
 14743  002884  6E01               	movwf	i2___awmod@dividend,c
 14744  002886  0E00               	movlw	0
 14745  002888  204A               	addwfc	_curr+1,w,c
 14746  00288A  6E02               	movwf	i2___awmod@dividend+1,c
 14747  00288C  0E01               	movlw	1
 14748  00288E  0100               	movlb	0	; () banked
 14749  002890  25FB               	addwf	_n& (0+255),w,b
 14750  002892  6E03               	movwf	i2___awmod@divisor,c
 14751  002894  0E00               	movlw	0
 14752  002896  0100               	movlb	0	; () banked
 14753  002898  21FC               	addwfc	(_n+1)& (0+255),w,b
 14754  00289A  6E04               	movwf	i2___awmod@divisor+1,c
 14755  00289C  EC43  F01B         	call	i2___awmod	;wreg free
 14756  0028A0  C001  F049         	movff	?i2___awmod,_curr
 14757  0028A4  C002  F04A         	movff	?i2___awmod+1,_curr+1
 14758                           
 14759                           ;servo.c: 63: return 1;
 14760  0028A8  0E01               	movlw	1
 14761  0028AA  0012               	return	
 14762  0028AC                     i2l5560:
 14763                           
 14764                           ;servo.c: 64: }
 14765                           ;servo.c: 65: return 0;
 14766  0028AC  0E00               	movlw	0
 14767  0028AE  0012               	return	
 14768  0028B0                     __end_of_servoInterruptService:
 14769                           	opt stack 0
 14770                           pclatu	equ	0xFFB
 14771                           pclath	equ	0xFFA
 14772                           tblptru	equ	0xFF8
 14773                           tblptrh	equ	0xFF7
 14774                           tblptrl	equ	0xFF6
 14775                           tablat	equ	0xFF5
 14776                           prodh	equ	0xFF4
 14777                           prodl	equ	0xFF3
 14778                           intcon	equ	0xFF2
 14779                           intcon3	equ	0xFF0
 14780                           postinc0	equ	0xFEE
 14781                           fsr0h	equ	0xFEA
 14782                           fsr0l	equ	0xFE9
 14783                           wreg	equ	0xFE8
 14784                           postdec1	equ	0xFE5
 14785                           fsr1h	equ	0xFE2
 14786                           fsr1l	equ	0xFE1
 14787                           indf2	equ	0xFDF
 14788                           postinc2	equ	0xFDE
 14789                           postdec2	equ	0xFDD
 14790                           fsr2h	equ	0xFDA
 14791                           fsr2l	equ	0xFD9
 14792                           status	equ	0xFD8
 14793                           
 14794 ;; *************** function i2_startTimer *****************
 14795 ;; Defined at:
 14796 ;;		line 76 in file "timer.c"
 14797 ;; Parameters:    Size  Location     Type
 14798 ;;  timer           2    6[COMRAM] int 
 14799 ;;  val             4    8[COMRAM] long 
 14800 ;; Auto vars:     Size  Location     Type
 14801 ;;		None
 14802 ;; Return value:  Size  Location     Type
 14803 ;;                  1    wreg      void 
 14804 ;; Registers used:
 14805 ;;		wreg, status,2, status,0
 14806 ;; Tracked objects:
 14807 ;;		On entry : 0/0
 14808 ;;		On exit  : 0/0
 14809 ;;		Unchanged: 0/0
 14810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14811 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14814 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14815 ;;Total ram usage:        8 bytes
 14816 ;; Hardware stack levels used:    1
 14817 ;; This function calls:
 14818 ;;		Nothing
 14819 ;; This function is called by:
 14820 ;;		_service
 14821 ;;		_servoInterruptService
 14822 ;; This function uses a non-reentrant model
 14823 ;;
 14824                           
 14825                           	psect	text66
 14826  003AE0                     __ptext66:
 14827                           	opt stack 0
 14828  003AE0                     i2_startTimer:
 14829                           	opt stack 22
 14830                           
 14831                           ;timer.c: 77: switch(timer){
 14832                           
 14833                           ;incstack = 0
 14834  003AE0  D012               	goto	i2l5280
 14835  003AE2                     i2l455:
 14836                           
 14837                           ;timer.c: 79: TMR0H = val>>8;
 14838  003AE2  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 14839                           
 14840                           ;timer.c: 80: TMR0L = val;
 14841  003AE6  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 14842                           
 14843                           ;timer.c: 81: T0CON |= 1<<7;
 14844  003AEA  8ED5               	bsf	4053,7,c	;volatile
 14845                           
 14846                           ;timer.c: 82: break;
 14847  003AEC  0012               	return	
 14848  003AEE                     i2l457:
 14849                           
 14850                           ;timer.c: 84: TMR1H = val>>8;
 14851  003AEE  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 14852                           
 14853                           ;timer.c: 85: TMR1L = val;
 14854  003AF2  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 14855                           
 14856                           ;timer.c: 86: T1CON |= 1<<0;
 14857  003AF6  80CD               	bsf	4045,0,c	;volatile
 14858                           
 14859                           ;timer.c: 87: break;
 14860  003AF8  0012               	return	
 14861  003AFA                     i2l458:
 14862                           
 14863                           ;timer.c: 89: TMR3H = val>>8;
 14864  003AFA  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 14865                           
 14866                           ;timer.c: 90: TMR3L = val;
 14867  003AFE  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 14868                           
 14869                           ;timer.c: 91: T3CON |= 1<<0;
 14870  003B02  80B1               	bsf	4017,0,c	;volatile
 14871                           
 14872                           ;timer.c: 92: }
 14873  003B04  0012               	return	
 14874  003B06                     i2l5280:
 14875  003B06  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 14876  003B0A  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 14877                           
 14878                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14879                           ; Switch size 1, requested type "space"
 14880                           ; Number of cases is 1, Range of values is 0 to 0
 14881                           ; switch strategies available:
 14882                           ; Name         Instructions Cycles
 14883                           ; simple_byte            4     3 (average)
 14884                           ;	Chosen strategy is simple_byte
 14885  003B0E  500E               	movf	??i2_startTimer+1,w,c
 14886  003B10  0A00               	xorlw	0	; case 0
 14887  003B12  A4D8               	btfss	status,2,c
 14888  003B14  0012               	return	
 14889                           
 14890                           ; Switch size 1, requested type "space"
 14891                           ; Number of cases is 3, Range of values is 0 to 3
 14892                           ; switch strategies available:
 14893                           ; Name         Instructions Cycles
 14894                           ; simple_byte           10     6 (average)
 14895                           ;	Chosen strategy is simple_byte
 14896  003B16  500D               	movf	??i2_startTimer,w,c
 14897  003B18  0A00               	xorlw	0	; case 0
 14898  003B1A  B4D8               	btfsc	status,2,c
 14899  003B1C  D7E2               	goto	i2l455
 14900  003B1E  0A01               	xorlw	1	; case 1
 14901  003B20  B4D8               	btfsc	status,2,c
 14902  003B22  D7E5               	goto	i2l457
 14903  003B24  0A02               	xorlw	2	; case 3
 14904  003B26  A4D8               	btfss	status,2,c
 14905  003B28  0012               	return	
 14906  003B2A  D7E7               	goto	i2l458
 14907  003B2C                     __end_ofi2_startTimer:
 14908                           	opt stack 0
 14909                           pclatu	equ	0xFFB
 14910                           pclath	equ	0xFFA
 14911                           tblptru	equ	0xFF8
 14912                           tblptrh	equ	0xFF7
 14913                           tblptrl	equ	0xFF6
 14914                           tablat	equ	0xFF5
 14915                           prodh	equ	0xFF4
 14916                           prodl	equ	0xFF3
 14917                           intcon	equ	0xFF2
 14918                           intcon3	equ	0xFF0
 14919                           postinc0	equ	0xFEE
 14920                           fsr0h	equ	0xFEA
 14921                           fsr0l	equ	0xFE9
 14922                           wreg	equ	0xFE8
 14923                           postdec1	equ	0xFE5
 14924                           fsr1h	equ	0xFE2
 14925                           fsr1l	equ	0xFE1
 14926                           indf2	equ	0xFDF
 14927                           postinc2	equ	0xFDE
 14928                           postdec2	equ	0xFDD
 14929                           fsr2h	equ	0xFDA
 14930                           fsr2l	equ	0xFD9
 14931                           status	equ	0xFD8
 14932                           
 14933 ;; *************** function i2_digitalWrite *****************
 14934 ;; Defined at:
 14935 ;;		line 53 in file "iopin.c"
 14936 ;; Parameters:    Size  Location     Type
 14937 ;;  pin             2    6[COMRAM] PTR int 
 14938 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
 14939 ;;		 -> cylinderMotor(4), 
 14940 ;;  val             2    8[COMRAM] int 
 14941 ;; Auto vars:     Size  Location     Type
 14942 ;;  digitalWrite    2   13[COMRAM] int 
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  1    wreg      void 
 14945 ;; Registers used:
 14946 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14952 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14954 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14955 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14956 ;;Total ram usage:        9 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; This function calls:
 14959 ;;		Nothing
 14960 ;; This function is called by:
 14961 ;;		_servoInterruptService
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           	psect	text67
 14966  002F80                     __ptext67:
 14967                           	opt stack 0
 14968  002F80                     i2_digitalWrite:
 14969                           	opt stack 21
 14970                           
 14971                           ;iopin.c: 54: if(pin){
 14972                           
 14973                           ;incstack = 0
 14974  002F80  5007               	movf	i2digitalWrite@pin,w,c
 14975  002F82  1008               	iorwf	i2digitalWrite@pin+1,w,c
 14976  002F84  B4D8               	btfsc	status,2,c
 14977  002F86  0012               	return	
 14978                           
 14979                           ;iopin.c: 55: int p = 1 << pin[1];
 14980  002F88  EE20 F002          	lfsr	2,2
 14981  002F8C  5007               	movf	i2digitalWrite@pin,w,c
 14982  002F8E  26D9               	addwf	fsr2l,f,c
 14983  002F90  5008               	movf	i2digitalWrite@pin+1,w,c
 14984  002F92  22DA               	addwfc	fsr2h,f,c
 14985  002F94  50DF               	movf	indf2,w,c
 14986  002F96  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 14987  002F98  0E01               	movlw	1
 14988  002F9A  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 14989  002F9C  0E00               	movlw	0
 14990  002F9E  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 14991  002FA0  2A0B               	incf	??i2_digitalWrite,f,c
 14992  002FA2  D003               	goto	i2u497_44
 14993  002FA4                     i2u497_45:
 14994  002FA4  90D8               	bcf	status,0,c
 14995  002FA6  360C               	rlcf	??i2_digitalWrite+1,f,c
 14996  002FA8  360D               	rlcf	??i2_digitalWrite+2,f,c
 14997  002FAA                     i2u497_44:
 14998  002FAA  2E0B               	decfsz	??i2_digitalWrite,f,c
 14999  002FAC  D7FB               	goto	i2u497_45
 15000  002FAE  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 15001  002FB2  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 15002                           
 15003                           ;iopin.c: 56: if(val == 0){
 15004  002FB6  5009               	movf	i2digitalWrite@val,w,c
 15005  002FB8  100A               	iorwf	i2digitalWrite@val+1,w,c
 15006  002FBA  A4D8               	btfss	status,2,c
 15007  002FBC  D02B               	goto	i2l5266
 15008                           
 15009                           ;iopin.c: 57: p ^= 0xff;
 15010  002FBE  0EFF               	movlw	255
 15011  002FC0  1A0E               	xorwf	i2digitalWrite@p,f,c
 15012                           
 15013                           ;iopin.c: 58: }
 15014                           ;iopin.c: 60: switch(pin[0]){
 15015  002FC2  D028               	goto	i2l5266
 15016  002FC4                     i2l5242:
 15017  002FC4  0409               	decf	i2digitalWrite@val,w,c
 15018  002FC6  100A               	iorwf	i2digitalWrite@val+1,w,c
 15019  002FC8  A4D8               	btfss	status,2,c
 15020  002FCA  D003               	goto	i2l5246
 15021  002FCC  500E               	movf	i2digitalWrite@p,w,c
 15022  002FCE  1289               	iorwf	3977,f,c	;volatile
 15023  002FD0  0012               	return	
 15024  002FD2                     i2l5246:
 15025                           
 15026                           ;iopin.c: 62: else LATA &= p;
 15027  002FD2  500E               	movf	i2digitalWrite@p,w,c
 15028  002FD4  1689               	andwf	3977,f,c	;volatile
 15029                           
 15030                           ;iopin.c: 63: break;
 15031  002FD6  0012               	return	
 15032  002FD8                     i2l5248:
 15033  002FD8  0409               	decf	i2digitalWrite@val,w,c
 15034  002FDA  100A               	iorwf	i2digitalWrite@val+1,w,c
 15035  002FDC  A4D8               	btfss	status,2,c
 15036  002FDE  D003               	goto	i2l5252
 15037  002FE0  500E               	movf	i2digitalWrite@p,w,c
 15038  002FE2  128A               	iorwf	3978,f,c	;volatile
 15039  002FE4  0012               	return	
 15040  002FE6                     i2l5252:
 15041                           
 15042                           ;iopin.c: 65: else LATB &= p;
 15043  002FE6  500E               	movf	i2digitalWrite@p,w,c
 15044  002FE8  168A               	andwf	3978,f,c	;volatile
 15045                           
 15046                           ;iopin.c: 66: break;
 15047  002FEA  0012               	return	
 15048  002FEC                     i2l5254:
 15049  002FEC  0409               	decf	i2digitalWrite@val,w,c
 15050  002FEE  100A               	iorwf	i2digitalWrite@val+1,w,c
 15051  002FF0  A4D8               	btfss	status,2,c
 15052  002FF2  D003               	goto	i2l5258
 15053  002FF4  500E               	movf	i2digitalWrite@p,w,c
 15054  002FF6  128B               	iorwf	3979,f,c	;volatile
 15055  002FF8  0012               	return	
 15056  002FFA                     i2l5258:
 15057                           
 15058                           ;iopin.c: 68: else LATC &= p;
 15059  002FFA  500E               	movf	i2digitalWrite@p,w,c
 15060  002FFC  168B               	andwf	3979,f,c	;volatile
 15061                           
 15062                           ;iopin.c: 69: break;
 15063  002FFE  0012               	return	
 15064  003000                     i2l5260:
 15065  003000  0409               	decf	i2digitalWrite@val,w,c
 15066  003002  100A               	iorwf	i2digitalWrite@val+1,w,c
 15067  003004  A4D8               	btfss	status,2,c
 15068  003006  D003               	goto	i2l5264
 15069  003008  500E               	movf	i2digitalWrite@p,w,c
 15070  00300A  128C               	iorwf	3980,f,c	;volatile
 15071  00300C  0012               	return	
 15072  00300E                     i2l5264:
 15073                           
 15074                           ;iopin.c: 71: else LATD &= p;
 15075  00300E  500E               	movf	i2digitalWrite@p,w,c
 15076  003010  168C               	andwf	3980,f,c	;volatile
 15077                           
 15078                           ;iopin.c: 72: }
 15079  003012  0012               	return	
 15080  003014                     i2l5266:
 15081  003014  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 15082  003018  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 15083  00301C  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 15084  003020  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 15085                           
 15086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15087                           ; Switch size 1, requested type "space"
 15088                           ; Number of cases is 1, Range of values is 0 to 0
 15089                           ; switch strategies available:
 15090                           ; Name         Instructions Cycles
 15091                           ; simple_byte            4     3 (average)
 15092                           ;	Chosen strategy is simple_byte
 15093  003024  500C               	movf	??i2_digitalWrite+1,w,c
 15094  003026  0A00               	xorlw	0	; case 0
 15095  003028  A4D8               	btfss	status,2,c
 15096  00302A  0012               	return	
 15097                           
 15098                           ; Switch size 1, requested type "space"
 15099                           ; Number of cases is 4, Range of values is 0 to 3
 15100                           ; switch strategies available:
 15101                           ; Name         Instructions Cycles
 15102                           ; simple_byte           13     7 (average)
 15103                           ;	Chosen strategy is simple_byte
 15104  00302C  500B               	movf	??i2_digitalWrite,w,c
 15105  00302E  0A00               	xorlw	0	; case 0
 15106  003030  B4D8               	btfsc	status,2,c
 15107  003032  D7C8               	goto	i2l5242
 15108  003034  0A01               	xorlw	1	; case 1
 15109  003036  B4D8               	btfsc	status,2,c
 15110  003038  D7CF               	goto	i2l5248
 15111  00303A  0A03               	xorlw	3	; case 2
 15112  00303C  B4D8               	btfsc	status,2,c
 15113  00303E  D7D6               	goto	i2l5254
 15114  003040  0A01               	xorlw	1	; case 3
 15115  003042  A4D8               	btfss	status,2,c
 15116  003044  0012               	return	
 15117  003046  D7DC               	goto	i2l5260
 15118  003048                     __end_ofi2_digitalWrite:
 15119                           	opt stack 0
 15120                           pclatu	equ	0xFFB
 15121                           pclath	equ	0xFFA
 15122                           tblptru	equ	0xFF8
 15123                           tblptrh	equ	0xFF7
 15124                           tblptrl	equ	0xFF6
 15125                           tablat	equ	0xFF5
 15126                           prodh	equ	0xFF4
 15127                           prodl	equ	0xFF3
 15128                           intcon	equ	0xFF2
 15129                           intcon3	equ	0xFF0
 15130                           postinc0	equ	0xFEE
 15131                           fsr0h	equ	0xFEA
 15132                           fsr0l	equ	0xFE9
 15133                           wreg	equ	0xFE8
 15134                           postdec1	equ	0xFE5
 15135                           fsr1h	equ	0xFE2
 15136                           fsr1l	equ	0xFE1
 15137                           indf2	equ	0xFDF
 15138                           postinc2	equ	0xFDE
 15139                           postdec2	equ	0xFDD
 15140                           fsr2h	equ	0xFDA
 15141                           fsr2l	equ	0xFD9
 15142                           status	equ	0xFD8
 15143                           
 15144 ;; *************** function i2___awmod *****************
 15145 ;; Defined at:
 15146 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 15147 ;; Parameters:    Size  Location     Type
 15148 ;;  dividend        2    0[COMRAM] int 
 15149 ;;  divisor         2    2[COMRAM] int 
 15150 ;; Auto vars:     Size  Location     Type
 15151 ;;  __awmod         1    5[COMRAM] unsigned char 
 15152 ;;  __awmod         1    4[COMRAM] unsigned char 
 15153 ;; Return value:  Size  Location     Type
 15154 ;;                  2    0[COMRAM] int 
 15155 ;; Registers used:
 15156 ;;		wreg, status,2, status,0
 15157 ;; Tracked objects:
 15158 ;;		On entry : 0/0
 15159 ;;		On exit  : 0/0
 15160 ;;		Unchanged: 0/0
 15161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15163 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15165 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15166 ;;Total ram usage:        6 bytes
 15167 ;; Hardware stack levels used:    1
 15168 ;; This function calls:
 15169 ;;		Nothing
 15170 ;; This function is called by:
 15171 ;;		_servoInterruptService
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175                           	psect	text68
 15176  003686                     __ptext68:
 15177                           	opt stack 0
 15178  003686                     i2___awmod:
 15179                           	opt stack 21
 15180                           
 15181                           ;incstack = 0
 15182  003686  0E00               	movlw	0
 15183  003688  6E06               	movwf	i2___awmod@sign,c
 15184  00368A  AE02               	btfss	i2___awmod@dividend+1,7,c
 15185  00368C  D006               	goto	i2l5294
 15186  00368E  6C01               	negf	i2___awmod@dividend,c
 15187  003690  1E02               	comf	i2___awmod@dividend+1,f,c
 15188  003692  B0D8               	btfsc	status,0,c
 15189  003694  2A02               	incf	i2___awmod@dividend+1,f,c
 15190  003696  0E01               	movlw	1
 15191  003698  6E06               	movwf	i2___awmod@sign,c
 15192  00369A                     i2l5294:
 15193  00369A  AE04               	btfss	i2___awmod@divisor+1,7,c
 15194  00369C  D004               	goto	i2l5298
 15195  00369E  6C03               	negf	i2___awmod@divisor,c
 15196  0036A0  1E04               	comf	i2___awmod@divisor+1,f,c
 15197  0036A2  B0D8               	btfsc	status,0,c
 15198  0036A4  2A04               	incf	i2___awmod@divisor+1,f,c
 15199  0036A6                     i2l5298:
 15200  0036A6  5003               	movf	i2___awmod@divisor,w,c
 15201  0036A8  1004               	iorwf	i2___awmod@divisor+1,w,c
 15202  0036AA  B4D8               	btfsc	status,2,c
 15203  0036AC  D018               	goto	i2l5314
 15204  0036AE  0E01               	movlw	1
 15205  0036B0  6E05               	movwf	i2___awmod@counter,c
 15206  0036B2  D004               	goto	i2l5304
 15207  0036B4                     i2l5302:
 15208  0036B4  90D8               	bcf	status,0,c
 15209  0036B6  3603               	rlcf	i2___awmod@divisor,f,c
 15210  0036B8  3604               	rlcf	i2___awmod@divisor+1,f,c
 15211  0036BA  2A05               	incf	i2___awmod@counter,f,c
 15212  0036BC                     i2l5304:
 15213  0036BC  AE04               	btfss	i2___awmod@divisor+1,7,c
 15214  0036BE  D7FA               	goto	i2l5302
 15215  0036C0                     i2l5306:
 15216  0036C0  5003               	movf	i2___awmod@divisor,w,c
 15217  0036C2  5C01               	subwf	i2___awmod@dividend,w,c
 15218  0036C4  5004               	movf	i2___awmod@divisor+1,w,c
 15219  0036C6  5802               	subwfb	i2___awmod@dividend+1,w,c
 15220  0036C8  A0D8               	btfss	status,0,c
 15221  0036CA  D004               	goto	i2l5310
 15222  0036CC  5003               	movf	i2___awmod@divisor,w,c
 15223  0036CE  5E01               	subwf	i2___awmod@dividend,f,c
 15224  0036D0  5004               	movf	i2___awmod@divisor+1,w,c
 15225  0036D2  5A02               	subwfb	i2___awmod@dividend+1,f,c
 15226  0036D4                     i2l5310:
 15227  0036D4  90D8               	bcf	status,0,c
 15228  0036D6  3204               	rrcf	i2___awmod@divisor+1,f,c
 15229  0036D8  3203               	rrcf	i2___awmod@divisor,f,c
 15230  0036DA  2E05               	decfsz	i2___awmod@counter,f,c
 15231  0036DC  D7F1               	goto	i2l5306
 15232  0036DE                     i2l5314:
 15233  0036DE  5006               	movf	i2___awmod@sign,w,c
 15234  0036E0  B4D8               	btfsc	status,2,c
 15235  0036E2  D004               	goto	i2l5318
 15236  0036E4  6C01               	negf	i2___awmod@dividend,c
 15237  0036E6  1E02               	comf	i2___awmod@dividend+1,f,c
 15238  0036E8  B0D8               	btfsc	status,0,c
 15239  0036EA  2A02               	incf	i2___awmod@dividend+1,f,c
 15240  0036EC                     i2l5318:
 15241  0036EC  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 15242  0036F0  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 15243  0036F4  0012               	return	
 15244  0036F6                     __end_ofi2___awmod:
 15245                           	opt stack 0
 15246                           pclatu	equ	0xFFB
 15247                           pclath	equ	0xFFA
 15248                           tblptru	equ	0xFF8
 15249                           tblptrh	equ	0xFF7
 15250                           tblptrl	equ	0xFF6
 15251                           tablat	equ	0xFF5
 15252                           prodh	equ	0xFF4
 15253                           prodl	equ	0xFF3
 15254                           intcon	equ	0xFF2
 15255                           intcon3	equ	0xFF0
 15256                           postinc0	equ	0xFEE
 15257                           fsr0h	equ	0xFEA
 15258                           fsr0l	equ	0xFE9
 15259                           wreg	equ	0xFE8
 15260                           postdec1	equ	0xFE5
 15261                           fsr1h	equ	0xFE2
 15262                           fsr1l	equ	0xFE1
 15263                           indf2	equ	0xFDF
 15264                           postinc2	equ	0xFDE
 15265                           postdec2	equ	0xFDD
 15266                           fsr2h	equ	0xFDA
 15267                           fsr2l	equ	0xFD9
 15268                           status	equ	0xFD8
 15269                           
 15270 ;; *************** function _keyPressedInterruptService *****************
 15271 ;; Defined at:
 15272 ;;		line 49 in file "keypad.c"
 15273 ;; Parameters:    Size  Location     Type
 15274 ;;		None
 15275 ;; Auto vars:     Size  Location     Type
 15276 ;;  key             1    0[COMRAM] unsigned char 
 15277 ;; Return value:  Size  Location     Type
 15278 ;;                  1    wreg      void 
 15279 ;; Registers used:
 15280 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 15281 ;; Tracked objects:
 15282 ;;		On entry : 0/0
 15283 ;;		On exit  : 0/0
 15284 ;;		Unchanged: 0/0
 15285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15289 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15290 ;;Total ram usage:        1 bytes
 15291 ;; Hardware stack levels used:    1
 15292 ;; This function calls:
 15293 ;;		Nothing
 15294 ;; This function is called by:
 15295 ;;		_service
 15296 ;; This function uses a non-reentrant model
 15297 ;;
 15298                           
 15299                           	psect	text69
 15300  003D98                     __ptext69:
 15301                           	opt stack 0
 15302  003D98                     _keyPressedInterruptService:
 15303                           	opt stack 22
 15304                           
 15305                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 15306                           
 15307                           ;incstack = 0
 15308  003D98  3881               	swapf	3969,w,c	;volatile
 15309  003D9A  0B0F               	andlw	15
 15310  003D9C  0B0F               	andlw	15
 15311  003D9E  6E01               	movwf	keyPressedInterruptService@key,c
 15312                           
 15313                           ;keypad.c: 51: lastKey = keys[key];
 15314  003DA0  5001               	movf	keyPressedInterruptService@key,w,c
 15315  003DA2  0D01               	mullw	1
 15316  003DA4  0E6F               	movlw	low _keys
 15317  003DA6  24F3               	addwf	prodl,w,c
 15318  003DA8  6EF6               	movwf	tblptrl,c
 15319  003DAA  0EFE               	movlw	high _keys
 15320  003DAC  20F4               	addwfc	prodh,w,c
 15321  003DAE  6EF7               	movwf	tblptrh,c
 15322  003DB0                     	if	0	;There are less than 3 active tblptr bytes
 15323  003DB0                     	endif
 15324  003DB0  0008               	tblrd		*
 15325  003DB2  CFF5 F04D          	movff	tablat,_lastKey
 15326  003DB6  0012               	return		;funcret
 15327  003DB8                     __end_of_keyPressedInterruptService:
 15328                           	opt stack 0
 15329                           pclatu	equ	0xFFB
 15330                           pclath	equ	0xFFA
 15331                           tblptru	equ	0xFF8
 15332                           tblptrh	equ	0xFF7
 15333                           tblptrl	equ	0xFF6
 15334                           tablat	equ	0xFF5
 15335                           prodh	equ	0xFF4
 15336                           prodl	equ	0xFF3
 15337                           intcon	equ	0xFF2
 15338                           intcon3	equ	0xFF0
 15339                           postinc0	equ	0xFEE
 15340                           fsr0h	equ	0xFEA
 15341                           fsr0l	equ	0xFE9
 15342                           wreg	equ	0xFE8
 15343                           postdec1	equ	0xFE5
 15344                           fsr1h	equ	0xFE2
 15345                           fsr1l	equ	0xFE1
 15346                           indf2	equ	0xFDF
 15347                           postinc2	equ	0xFDE
 15348                           postdec2	equ	0xFDD
 15349                           fsr2h	equ	0xFDA
 15350                           fsr2l	equ	0xFD9
 15351                           status	equ	0xFD8
 15352                           pclatu	equ	0xFFB
 15353                           pclath	equ	0xFFA
 15354                           tblptru	equ	0xFF8
 15355                           tblptrh	equ	0xFF7
 15356                           tblptrl	equ	0xFF6
 15357                           tablat	equ	0xFF5
 15358                           prodh	equ	0xFF4
 15359                           prodl	equ	0xFF3
 15360                           intcon	equ	0xFF2
 15361                           intcon3	equ	0xFF0
 15362                           postinc0	equ	0xFEE
 15363                           fsr0h	equ	0xFEA
 15364                           fsr0l	equ	0xFE9
 15365                           wreg	equ	0xFE8
 15366                           postdec1	equ	0xFE5
 15367                           fsr1h	equ	0xFE2
 15368                           fsr1l	equ	0xFE1
 15369                           indf2	equ	0xFDF
 15370                           postinc2	equ	0xFDE
 15371                           postdec2	equ	0xFDD
 15372                           fsr2h	equ	0xFDA
 15373                           fsr2l	equ	0xFD9
 15374                           status	equ	0xFD8
 15375                           
 15376                           	psect	rparam
 15377  0000                     pclatu	equ	0xFFB
 15378                           pclath	equ	0xFFA
 15379                           tblptru	equ	0xFF8
 15380                           tblptrh	equ	0xFF7
 15381                           tblptrl	equ	0xFF6
 15382                           tablat	equ	0xFF5
 15383                           prodh	equ	0xFF4
 15384                           prodl	equ	0xFF3
 15385                           intcon	equ	0xFF2
 15386                           intcon3	equ	0xFF0
 15387                           postinc0	equ	0xFEE
 15388                           fsr0h	equ	0xFEA
 15389                           fsr0l	equ	0xFE9
 15390                           wreg	equ	0xFE8
 15391                           postdec1	equ	0xFE5
 15392                           fsr1h	equ	0xFE2
 15393                           fsr1l	equ	0xFE1
 15394                           indf2	equ	0xFDF
 15395                           postinc2	equ	0xFDE
 15396                           postdec2	equ	0xFDD
 15397                           fsr2h	equ	0xFDA
 15398                           fsr2l	equ	0xFD9
 15399                           status	equ	0xFD8
 15400                           
 15401                           	psect	temp
 15402  00005D                     btemp:
 15403                           	opt stack 0
 15404  00005D                     	ds	1
 15405  0000                     int$flags	set	btemp
 15406                           pclatu	equ	0xFFB
 15407                           pclath	equ	0xFFA
 15408                           tblptru	equ	0xFF8
 15409                           tblptrh	equ	0xFF7
 15410                           tblptrl	equ	0xFF6
 15411                           tablat	equ	0xFF5
 15412                           prodh	equ	0xFF4
 15413                           prodl	equ	0xFF3
 15414                           intcon	equ	0xFF2
 15415                           intcon3	equ	0xFF0
 15416                           postinc0	equ	0xFEE
 15417                           fsr0h	equ	0xFEA
 15418                           fsr0l	equ	0xFE9
 15419                           wreg	equ	0xFE8
 15420                           postdec1	equ	0xFE5
 15421                           fsr1h	equ	0xFE2
 15422                           fsr1l	equ	0xFE1
 15423                           indf2	equ	0xFDF
 15424                           postinc2	equ	0xFDE
 15425                           postdec2	equ	0xFDD
 15426                           fsr2h	equ	0xFDA
 15427                           fsr2l	equ	0xFD9
 15428                           status	equ	0xFD8


Data Sizes:
    Strings     375
    Constant    174
    Data        59
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    113     125
    BANK1           256     65     123
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_23(CODE[17]), STR_22(CODE[11]), STR_21(CODE[19]), STR_20(CODE[19]), 
		 -> STR_19(CODE[18]), STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), 
		 -> STR_15(CODE[19]), STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), 
		 -> STR_11(CODE[18]), STR_10(CODE[23]), STR_9(CODE[20]), STR_8(CODE[8]), 
		 -> STR_7(CODE[11]), STR_6(CODE[11]), STR_5(CODE[11]), STR_4(CODE[16]), 
		 -> STR_3(CODE[17]), STR_2(CODE[8]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showDateTime@t	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    saveNewRun@data	PTR int  size(2) Largest target is 14
		 -> main@run(BANK1[14]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), 


Critical Paths under _main in COMRAM

    _main->___almod
    _sortBattery->___ftdiv
    _printf->___almod
    _lcdNewline->_lcdInst
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _readPastRun->_eepromRead
    _saveNewRun->_eepromRead
    _eepromWrite->_eepromRead
    _eepromRead->___wmul
    ___wmul->___awdiv
    _lcdHome->_lcdInst
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _sortBattery->_printf
    _showInterface->_showRunTime
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showErrorMessage->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _saveNewRun->_eepromWrite
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _showInterface->_showDateTime

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0  820596
                                             31 BANK1     34    34      0
                            ___aldiv
                            ___almod
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _saveNewRun
                      _showInterface
                       _showRunStats
                        _showRunTime
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  114316
                                            107 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1594
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     309
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        7     7      0  472878
                                            111 BANK0      2     2      0
                                             14 BANK1      5     5      0
                            _initRTC
                        _readPastRun
                       _showDateTime
                   _showErrorMessage
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (1) _showRunTime                                          4     2      2   68243
                                            107 BANK0      4     2      2
                            ___awdiv
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (1) _showRunStats                                        10     8      2   66296
                                            107 BANK0      2     0      2
                                              0 BANK1      8     8      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   66040
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   66009
                                            107 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65978
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showErrorMessage                                     0     0      0   65851
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                        16    16      0   68451
                                            107 BANK0      2     2      0
                                              0 BANK1     14    14      0
                            _getTime
                            _initRTC
                         _keyPressed
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   65622
                                             61 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14447
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14168
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2139
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _keyPressed                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Init                                      8     4      4    1196
                                             47 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _getTime                                             19    17      2    1011
                                             37 COMRAM    19    17      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     724
                                             35 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             35 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4430
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (1) _saveNewRun                                           6     4      2    4813
                                              9 BANK0      6     4      2
                             ___wmul
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          9     3      6     435
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     370
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24017
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22459
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             48 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                             34 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1472
                                             19 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _saveNewRun
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _eepromRead
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _eepromWrite
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _initRTC
         _I2C_Master_Init
           ___lldiv
       _keyPressed
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _showErrorMessage
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___awdiv
         ___awmod (ARG)
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _showRunStats
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _showRunTime
     ___awdiv
       ___awmod (ARG)
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     41      7B       7       48.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     71      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     154      34        0.0%
DATA                 0      0     154       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 10:51:38 2017

                       ___altoft@exp 0033                                    _n 00FB  
                  main@cylinderStart 0129                 main@cylinderBackward 012F  
                      ___altoft@sign 0034                          _sortBattery 0E0A  
                     showRunSelect@k 00EB                         ___awdiv@sign 002E  
                ___wmul@multiplicand 0033                          __CFG_BORV$3 000000  
                     showRunTime@run 00EB                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                          __CFG_OSC$HS 000000  
                   _redirectingServo 015F                         ___ftadd@exp1 00AD  
                       ___ftadd@exp2 00AC                  main@cylinderForward 012D  
                       ___ftadd@sign 00AB                                  l226 3D64  
                                l163 1A6A                                  l181 11C4  
                                l510 3E06                                  l262 3C9C  
                                l335 2994                                  l360 3C08  
                                l184 1220                                  l265 3CA8  
                                l177 1168                                  l455 3A96  
                                l391 2B64                                  l448 3B70  
                                l457 3AA2                                  l458 3AAE  
                                l394 39A2                                  l397 39E0  
                                l823 0818                                  l832 0A04  
                    ??_showInterface 00EF                                  l783 0996  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _n_C 0175                         ___awmod@sign 0028  
                                prod 000FF3                                  wreg 000FE8  
                    showRunTime@time 00ED                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0083                         ___ftdiv@sign 0088  
                       __CFG_WDT$OFF 000000                                 l1142 1AD4  
                               l1119 319C                                 l1216 3D24  
                               l1146 1B0E                                 l1148 1B36  
                               l1157 1C0C                                 l1166 1C36  
                               l1087 2576                                 l1191 244E  
                               l1184 23C0                                 l1177 2664  
                               l1185 23E8                                 l1266 350A  
                               l1276 37B4                                 l6020 312C  
                               l6100 1BB8                                 l6030 3188  
                               l6022 3136                                 l6110 1C00  
                               l6102 1BC4                                 l6032 3192  
                               l6024 3154                                 l6016 311E  
                               l6200 3458                                 l6210 3478  
                               l6202 345C                                 l7002 0B0E  
                               l6028 316A                                 l6116 1C60  
                               l6108 1BF2                                 l7100 3552  
                               l7012 0B78                                 l7004 0B20  
                               l6126 1CAE                                 l6142 1FA8  
                               l7110 3580                                 l6214 3482  
                               l6230 362A                                 l7030 0C26  
                               l5600 2E82                                 l6080 1B2C  
                               l6160 2014                                 l6136 1F6E  
                               l7104 355A                                 l6400 235A  
                               l6240 364C                                 l7032 0C30  
                               l7024 0BE4                                 l7008 0B48  
                               l6090 1B6E                                 l6074 1B1C  
                               l6170 2052                                 l6218 3490  
                               l6242 3650                                 l6250 366E  
                               l6234 3636                                 l7050 0C9E  
                               l7026 0BEE                                 l7018 0BAC  
                               l7130 2F0A                                 l5604 2E90  
                               l5620 31D8                                 l6068 1AE2  
                               l6156 1FF6                                 l6316 3CE2  
                               l6500 254C                                 l6340 1EEC  
                               l6332 1E24                                 l7044 0C78  
                               l7132 2F10                                 l5630 320A  
                               l6166 2034                                 l6406 2386  
                               l6254 367C                                 l6246 3664  
                               l6238 3644                                 l7054 0CC6  
                               l7062 0DBA                                 l7046 0C84  
                               l7038 0C5C                                 l7302 2798  
                               l7310 3A1C                                 l7222 290A  
                               l7214 28B2                                 l7142 2F32  
                               l7126 2EFC                                 l7150 2F4C  
                               l5608 2EA6                                 l5632 320E  
                               l5640 3240                                 l5624 31EC  
                               l6520 35CC                                 l6096 1B9C  
                               l7240 3272                                 l6264 34BC  
                               l6600 335A                                 l6440 2424  
                               l6192 343A                                 l6360 1552  
                               l7056 0D46                                 l7064 0DCC  
                               l7232 2962                                 l7144 2F38  
                               l7136 2F1E                                 l6098 1BAA  
                               l7250 32EC                                 l6266 34C8  
                               l6506 2564                                 l6186 342A  
                               l6354 14A8                                 l7066 0DD4  
                               l7410 2DB2                                 l7226 2936  
                               l7218 28DE                                 l7138 2F24  
                               l5644 3256                                 l5636 3232  
                               l5628 31FE                                 l6532 25BA  
                               l6620 2224                                 l7244 3288  
                               l6276 34FC                                 l6268 34CC  
                               l6508 2570                                 l6436 2414  
                               l6372 16AC                                 l6364 1578  
                               l7068 0DEA                                 l7340 388A  
                               l7404 2D8E                                 l7148 2F46  
                               l7500 1118                                 l5590 2E4E  
                               l5582 2E20                                 l4950 3B38  
                               l6518 35C0                                 l7190 2C5E  
                               l7430 2B72                                 l6606 3386  
                               l6462 249C                                 l6446 243C  
                               l6198 3450                                 l6390 3DCE  
                               l6702 0022                                 l7350 3C90  
                               l7318 3A42                                 l7166 3754  
                               l7414 2DCA                                 l7510 1176  
                               l5592 2E52                                 l5576 2E08  
                               l4944 3B2E                                 l6456 247E  
                               l6448 2448                                 l6712 0058  
                               l7280 269E                                 l7328 3850  
                               l7184 30F2                                 l7520 11D2  
                               l7512 1194                                 l4962 3B4C  
                               l6538 25EC                                 l6650 22F6  
                               l6642 22CA                                 l7194 2CB4  
                               l7434 2B9A                                 l6378 1756  
                               l6706 0038                                 l7186 3102  
                               l7418 2DD6                                 l7530 122E  
                               l7522 11F0                                 l7610 182A  
                               l5588 2E42                                 l4956 3B44  
                               l6652 2300                                 l7436 2BA0  
                               l6484 250E                                 l6476 24DE  
                               l6900 073E                                 l6732 0124  
                               l6708 004E                                 l6558 263A  
                               l6638 22B6                                 l7198 2CDC  
                               l6830 0494                                 l6822 0428  
                               l6814 03C0                                 l6742 0186  
                               l6718 0088                                 l6726 00FC  
                               l7366 38E6                                 l7358 38C0  
                               l7550 12E6                                 l7534 124C  
                               l7622 186E                                 l6656 231C  
                               l6648 22E6                                 l4976 3ABA  
                               l6576 3A6A                                 l6672 37A6  
                               l6664 3772                                 l6680 38FE  
                               l6496 253C                                 l6912 07E6  
                               l6832 04AA                                 l6760 01F2  
                               l6744 018C                                 l6736 0160  
                               l7544 12B6                                 l7536 1274  
                               l7632 19B8                                 l6666 377E  
                               l6914 07FA                                 l6906 07CA  
                               l6842 051A                                 l6826 044E  
                               l6770 023E                                 l6762 01F8  
                               l6754 01C0                                 l6746 0192  
                               l6738 0176                                 l7386 2D20  
                               l7482 0FA0                                 l6588 3C48  
                               l7572 2AFA                                 l6596 332A  
                               l6668 3782                                 l6940 0988  
                               l6924 0840                                 l6908 07D8  
                               l6852 0578                                 l6828 0464  
                               l6764 0210                                 l6748 0198  
                               l6780 026E                                 l7388 2D24  
                               l7492 1088                                 l7468 0ECA  
                               l7636 19D0                                 l6678 38F2  
                               l6934 096C                                 l6918 081C  
                               l6870 062A                                 l6838 04F4  
                               l6774 0256                                 l6758 01E6  
                               l6782 02B2                                 l7494 10B6  
                               l7646 19F4                                 l7568 2AE4  
                               l6936 097A                                 l6928 0892  
                               l6856 05DE                                 l6768 0224  
                               l7592 1784                                 l6962 0A26  
                               l6890 06F4                                 l6874 067A  
                               l6858 05E4                                 l6972 0A76  
                               l6948 09BE                                 l6884 06D0  
                               l6788 02CC                                 l6974 0A7C  
                               l6966 0A4E                                 l6894 0702  
                               l6878 06A2                                 l6798 0312  
                               l6896 0716                                 l6888 06DE  
                               l6986 0AC2                                 l6988 0AC8  
                               _EEIF 007D0C                                 STR_1 FFE5  
                               STR_2 FFF6                                 STR_3 FF98  
                               STR_4 FFA9                                 STR_5 FFCF  
                               STR_6 FFDA                                 STR_7 FFC4  
                               STR_8 FFEE                                 STR_9 FE9E  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 00D7  
                               u6100 3CE0                                 u6211 233E  
                               _PEIE 007F96                                 u6231 236A  
                               u6411 25CE                                 _RCEN 007E2B  
                               u6501 2200                                 u6095 3976  
                               u8007 0EFC                                 u6520 224A  
                               u8017 101A                                 u8107 3D8E  
                               u8027 129E                                 u8117 37DE  
                               u5661 1A82                                 u6525 2240  
                               u8037 12D6                                 u8127 37EC  
                               u5671 1AA0                                 u6391 259C  
                               u8047 1310                                 u7504 2952  
                               u8137 3812                                 u8057 278A  
                               u7505 294E                                 u7354 2EE2  
                               u8147 3820                                 u8067 3D68  
                               u7355 2EDC                                 u7540 39B2  
                               u8077 3B7C                                 u8087 3BB0  
                               u5871 1F4A                                 u6760 0358  
                               u8097 3D7C                                 u7474 28CE  
                               u5891 1F84                                 u7475 28CA  
                               u7548 39B6                                 u7484 28FA  
                               u7565 39F4                                 u6765 034C  
                               u7485 28F6                                 u7566 39F6  
                               u7494 2926                                 u7495 2922  
                               u6980 0810                                 u7987 1916  
                               u7997 0E46                                 _RSEN 007E29  
                    showRunStats@n_C 0104                                 _n_AA 0173  
                               _n_9V 0171                      showRunStats@run 00EB  
                               _main 177C                                 _curr 0049  
                       ___ftpack@arg 0023                                 _keys FE6F  
                       ___ftpack@exp 0026                                 _time 016B  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 005D  
                    ??_showRunSelect 003B                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                        __CFG_MCLRE$ON 000000  
                       ___ftmul@cntr 0096                         ___param_bank 000000  
                       ___ftmul@sign 0097                         ___fttol@exp1 00BC  
                       ___fttol@lval 00B8                 __end_ofi2_startTimer 3B2C  
                   ?_I2C_Master_Init 0030                     ?_I2C_Master_Read 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
                       ?_readPastRun 0080                 __end_of_angleToPulse 21EA  
                    __end_of___aldiv 2EB8                      __end_of___almod 3268  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___awdiv 349A  
                              _EEADR 000FA9                      __end_of___ftadd 1CD4  
                              STR_10 FE87                                STR_11 FEEB  
                              STR_12 FF65                                STR_20 FED8  
                              STR_13 FEFD                                STR_21 FEC5  
                              STR_22 FFB9                                STR_14 FF54  
                              STR_23 FF87                                STR_15 FEB2  
                              STR_16 FF76                                STR_24 FF21  
                              STR_17 FF32                                STR_18 FF43  
                              STR_19 FF0F                      __end_of___awmod 3686  
                    __end_of___ftdiv 2698              ??_servoInterruptService 0010  
                    __end_of___ftneg 3D32                      __end_of___lldiv 351C  
                    __end_of___ftmul 2092                                _T0CON 000FD5  
                    ___awdiv@divisor 002B                                _T1CON 000FCD  
                    __end_of___llmod 37C6                      __end_of___ftsub 3A94  
                    __end_of___fttol 232E                                _T3CON 000FB1  
                              i2l200 2A22                                i2l198 2A48  
                              i2l455 3AE2                                i2l199 2A10  
                              i2l457 3AEE                                i2l458 3AFA  
                    ___awdiv@counter 002D                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR3H 000FB3                                _TMR1L 000FCE  
                              _TMR3L 000FB2                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _PORTD 000F83                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                      __end_of_lcdHome 3E70  
                       ___lltoft@exp 0033                        _conveyorServo 014B  
                    __end_of_lcdInst 3D98                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 359E  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     showRunStats@n_AA 0100  
                   showRunStats@n_9V 0102                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 3BBC                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 002E                                _angle 0051  
                    __end_of_initRTC 3E06                      __end_of_dpowers FE01  
                              _count 0047                                _scale 1366  
                    __end_of_isdigit 3DD6                       eepromWrite@ien 0087  
                      ___ftpack@sign 0027                    ?_showErrorMessage 0001  
                              _pulse 0163                                _putch 3D54  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_service 2A84                   ??_showErrorMessage 003B  
                              status 000FD8                   __size_ofi2___awmod 0070  
                     __CFG_PBADEN$ON 000000                 __end_of_digitalWrite 2F80  
                    __initialization 338A                         __end_of_main 1A6C  
                       __end_of_keys FE80                               ??_main 011F  
                      ___fttol@sign1 00B7                        __activetblptr 000002  
               __size_of_digitalRead 00EA                 __size_of__tdiv_to_l_ 0132  
                       _stoppingTime 0149                    ?_I2C_Master_Start 0001  
                    i2digitalWrite@p 000E                    ?_I2C_Master_Write 0024  
                 ??_I2C_Master_Start 0024                               _ADCON0 000FC2  
                             _ADCON1 000FC1                   ??_I2C_Master_Write 0026  
                             _ADCON2 000FC0                     __end_of___altoft 3616  
                   ___llmod@dividend 0030                               ?_scale 0098  
                             _ADRESH 000FC4                               _EEADRH 000FAA  
                             _ADRESL 000FC3                               _EEDATA 000FA8  
                             _EECON1 000FA6                               _EECON2 000FA7  
      keyPressedInterruptService@key 0001                     ___awdiv@dividend 0029  
                   __end_of___awtoft 3C6C                               ?_putch 0001  
                   __end_of___ftpack 31BC                     __end_of___lltoft 3948  
                             _INT0IE 007F94                               _INT0IF 007F91  
                             _INT1IE 007F83                               _INT1IF 007F80  
                       sortBattery@V 0116                         sortBattery@i 0119  
                             i2l5310 36D4                               i2l5302 36B4  
                             i2l5304 36BC                               i2l5306 36C0  
                             i2l5314 36DE                               i2l5242 2FC4  
                             i2l5260 3000                               i2l5252 2FE6  
                             i2l5318 36EC                               i2l5254 2FEC  
                             i2l5246 2FD2                               i2l5264 300E  
                             i2l5248 2FD8                               i2l5280 3B06  
                             i2l5258 2FFA                               i2l5266 3014  
                             i2l5294 369A                               i2l5560 28AC  
                             i2l5298 36A6                               _TMR0IE 007F95  
                             _TMR0IF 007F92                               _TMR1IE 007CE8  
                             _TMR1IF 007CF0                               _TMR3IE 007D01  
                             _SSPADD 000FC8                               _TRISC3 007CA3  
                             _TRISC4 007CA4                               _SSPBUF 000FC9  
                  _angleToPulse$1415 00CD                     __end_of_lcdClear 3E58  
                     __CFG_XINST$OFF 000000                 __size_of_eepromWrite 0056  
                   __end_of__powers_ FE4F                               ___ftge 32FA  
                          ??___aldiv 002B                            ??___almod 0039  
                             ___wmul 3CE8                            ??___awdiv 002D  
                          ??___ftadd 00A8                       __CFG_STVREN$ON 000000  
                          ??___awmod 0027                            ??___ftdiv 0080  
                          ??___ftneg 0026                            ??___lldiv 002B  
                          ??___ftmul 008F                            ??___llmod 0038  
                          ??___ftsub 003B                            ??___fttol 00B2  
                             _fround 1CD4                               clear_0 33F0  
                             clear_1 3402                      eepromWrite@data 0080  
                   ___awdiv@quotient 002F                      ___awmod@divisor 0025  
                          ??_lcdHome 0027                      ___awmod@counter 0027  
                             _servos 003B                            ??_lcdInst 0025  
                             _printf 0012                            ??_getTime 0028  
                   __end_of_pinSetup 3BFC                     __end_of_setAngle 2D1C  
                  analogRead@channel 0023                ___ftmul@f3_as_product 0093  
                          ??_initLCD 0027                            ??_initRTC 0038  
                       __pdataCOMRAM 004E                            ??_isdigit 0023  
                    readPastRun@data 0082                    __end_ofi2___awmod 36F6  
                      setAngle@angle 00D6                         __mediumconst FDD8  
                       ?_showRunMenu 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_showRunTime 00EB                        setAngle@motor 00D4  
                          ??_service 0014                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 3408  
                         ___altoft@c 002B                           ___ftadd@f1 00A2  
                         ___ftadd@f2 00A5                           ___ftge@ff1 002F  
                         ___ftge@ff2 0032                        ___rparam_used 000001  
                         ___ftdiv@f1 0035                           ___ftdiv@f2 0038  
                         ___ftdiv@f3 0084                           ___ftneg@f1 0023  
                         ___awtoft@c 002B                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 0089                           ___ftmul@f2 008C  
                         ___ftsub@f1 00AE                           ___ftsub@f2 00B1  
                         ___fttol@f1 00AE                 __end_of_happynewyear FE87  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 0158  
                       __pidataBANK0 3E34                         __pidataBANK1 3D32  
                         ___lltoft@c 002B                        _cylinderMotor 014F  
                      __end_of_scale 177C                         ?_sortBattery 0001  
                      __end_of_putch 3D76                   __size_of_lcdNibble 0066  
                         __div_to_l_ 2460                    eepromRead@address 0037  
               __size_of_readPastRun 0092                      showDateTime@day 0106  
                    showDateTime@min 0102                      showDateTime@sec 0100  
                    showDateTime@mon 0108                      __div_to_l_@exp1 002E  
                    __div_to_l_@cntr 002D                              ??_scale 003B  
                    __div_to_l_@quot 0029                              ??_putch 0027  
                       i2_startTimer 3AE0                           __pbssBANK0 00FB  
                         __pbssBANK1 0163                         _angleToPulse 2092  
              __size_of_digitalWrite 00C8                   __size_of_initTimer 004A  
                 __size_of_initServo 00E2                           _analogRead 3BFC  
                      __div_to_l_@f1 0023                        __div_to_l_@f2 0026  
                            ?___ftge 002F                              ?___wmul 0031  
                   _sortBattery$1414 0100                sortBattery@resolution 010C  
                        saveNewRun@i 008D                            ?___altoft 002B  
                        saveNewRun@n 008B                              ?_fround 0098  
                         _lcdNewline 3E48                            ?___awtoft 002B  
                          ?___ftpack 0023                              ?_printf 00BD  
                          ?___lltoft 002B                           _eepromRead 3DD6  
     __size_of_servoInterruptService 010C        __end_of_servoInterruptService 28B0  
              __end_of_showInterface 2DEC                    i2startTimer@timer 0007  
                          ?_lcdClear 0001                     angleToPulse@a000 00D0  
                   angleToPulse@a180 00C9                         _digitalWrite 2EB8  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7              __size_ofi2_digitalWrite 00C8  
                            _V_LIM_C 00F4                  main@lastBatteryTime 0131  
                          ?_pinSetup 0001                            ?_setAngle 00D4  
                  __end_of_lcdNibble 382C                    __end_of__npowers_ FE28  
                            __Hparam 0000                           _scale$1418 009B  
              __end_of_showRunSelect 3890                           _keyPressed 3E28  
                            __Lparam 0000                         readPastRun@i 0090  
                            ___aldiv 2DEC            __size_of_showErrorMessage 0030  
                            ___almod 31BC                      __size_of___ftge 0090  
                            ___awdiv 3416                              ___ftadd 1A6C  
                            ___awmod 3616                           _readKeypad 3C9C  
                            ___ftdiv 2588                              ___ftneg 3D0E  
                            ___lldiv 349A                      __size_of___wmul 0026  
                            ___ftmul 1F34                              ___llmod 3760  
                            ___ftsub 3A48                              ___fttol 21EA  
                            _n_OTHER 0177                           ??___altoft 002F  
                            __pcinit 338A                           ??___awtoft 002E  
                         ??___ftpack 0028                      __size_of_fround 0260  
                            __ramtop 1000                              _lcdHome 3E68  
                            _lcdInst 3D76                           ??___lltoft 002F  
                            __ptext0 177C                              __ptext1 0E0A  
                            __ptext2 2EB8                              __ptext3 28B0  
                            _getTime 351C                              __ptext4 3BFC  
                            __ptext5 2D1C                              __ptext6 36F6  
                            __ptext7 3048                              __ptext8 382C  
                            __ptext9 3890                        ?_showDateTime 0001  
                    __size_of_printf 0DF8                              _padPin1 0153  
                            _padPin2 0157                              _padPin3 0043  
                      startTimer@val 0025                              _initLCD 3B76  
                  __end_of_hexpowers FE6F                          ?__div_to_l_ 0023  
                            _lastKey 004D                              _initRTC 3DF0  
                  __end_of_initTimer 3B76                    __end_of_initServo 2C48  
                            _dpowers FDD9                              _isdigit 3DB8  
                   ___awmod@dividend 0023                     ___aldiv@dividend 0023  
           __size_of_I2C_Master_Init 005A             __size_of_I2C_Master_Read 0026  
                         ??_lcdClear 0027             __size_of_I2C_Master_Wait 0012  
           __size_of_I2C_Master_Stop 0008                        ?_showMainMenu 0001  
                            _service 0008                              main@run 0133  
               __size_of_showRunMenu 005C                       __pintcode_body 299A  
               __size_of_showRunTime 006A                 end_of_initialization 3408  
                         _saveNewRun 2A84                        __Lmediumconst FDD8  
                            int_func 299A                       digitalRead@pin 0023  
                        ?_analogRead 0023                           ??_pinSetup 0023  
                         ??_setAngle 00D8            __size_of_I2C_Master_Start 0008  
          __size_of_I2C_Master_Write 000A                      ___lldiv@divisor 0027  
                    ___lldiv@counter 002F                       setAngle@period 00DA  
                      ?_showRunStats 00EB                              printf@c 00EA  
                            printf@f 00BD                     ___aldiv@quotient 002D  
                   I2C_Master_Init@c 0030                     I2C_Master_Read@a 0024  
                            postdec1 000FE5                              postdec2 000FDD  
                    _batteryDetected 016F                              postinc0 000FEE  
                            postinc2 000FDE                       __tdiv_to_l_@f1 0023  
                     __tdiv_to_l_@f2 0026                        ??_digitalRead 0025  
                        ?_lcdNewline 0001                        ??__tdiv_to_l_ 0029  
                     ??_showDateTime 00EB                            _PORTBbits 000F81  
               __size_of_sortBattery 055C                     showInterface@key 0112  
                   showInterface@run 0110                          ?_eepromRead 0037  
                     ??_showMainMenu 003B         ??_keyPressedInterruptService 0001  
                _redirectAngle_OTHER 00F9                         _happynewyear FE80  
                 angleToPulse@offset 00C5                   sortBattery@V_float 0102  
                          i2___awmod 3686                           _startTimer 3A94  
                      ??_eepromWrite 0086                          ___ftdiv@exp 0087  
                        printf@width 00E4                  __size_of__div_to_l_ 0128  
                     ??_showRunStats 003B                          ?_keyPressed 0001  
                        ___ftmul@exp 0092                          ?_readKeypad 0001  
                     __end_of___ftge 338A                       __end_of___wmul 3D0E  
                      __pidataCOMRAM 3E18  __size_of_keyPressedInterruptService 0020  
                     __end_of_fround 1F34                       __end_of_printf 0E0A  
                __size_of_analogRead 0038                  start_initialization 338A  
                __end_of_digitalRead 299A                  __end_of__tdiv_to_l_ 2460  
                     initServo@angle 00E0                       initTimer@timer 0023  
                     initServo@motor 00DE                           ?i2___awmod 0001  
                        ?_saveNewRun 0089                       i2_digitalWrite 2F80  
                  ??_I2C_Master_Init 0034                    ??_I2C_Master_Read 0024  
                  ??_I2C_Master_Wait 0023                    ??_I2C_Master_Stop 0024  
                __size_of_lcdNewline 0008                      ___llmod@divisor 0034  
                    ___llmod@counter 0038                  __size_of_eepromRead 001A  
                         initServo@i 00E6                     showDateTime@hour 0104  
                   showDateTime@year 010A                             ??___ftge 0035  
                   _showErrorMessage 3C6C                  __end_of_eepromWrite 39F8  
                           ??___wmul 0035                          __pdataBANK0 00F1  
                        __pdataBANK1 0141                     __CFG_LPT1OSC$OFF 000000  
                           ??_fround 003B                        ??_readPastRun 003B  
                     readPastRun@run 0080                             ??_printf 00C7  
                  __size_of___altoft 0078                           fround@prec 00A1  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
                  __size_of___lltoft 005C                          __pbssCOMRAM 003B  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
                __size_of_keyPressed 000C               __end_ofi2_digitalWrite 3048  
             sortBattery@targetAngle 0114                         _isdigit$1050 0024  
                      keyPressed@key 0023                          ?_startTimer 0023  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
               __end_of_showDateTime 27A4                    i2digitalWrite@pin 0007  
                  i2digitalWrite@val 0009                     _I2C_Master_Start 3E60  
                   _I2C_Master_Write 3E3E                    __CFG_CCP2MX$PORTC 000000  
                  __size_of_pinSetup 0040                 __end_of_showMainMenu 3A48  
                  __size_of_setAngle 00D4                            __pintcode 0008  
                      __pmediumconst FDD8                            _lcdNibble 37C6  
                           ?___aldiv 0023                             ?___almod 0031  
                           ?___awdiv 0029                             ?___ftadd 00A2  
                           ?___awmod 0023                             ?___ftdiv 0035  
                           ?___ftneg 0023                             ?___lldiv 0023  
                           ?___ftmul 0089                             ?___llmod 0030  
                           ?___ftsub 00AE                            __npowers_ FE01  
                           ?___fttol 00AE                          _digitalRead 28B0  
                __size_of_saveNewRun 00E2                     ___almod@dividend 0031  
                           ?_lcdHome 0001                             ?_lcdInst 0001  
                        __tdiv_to_l_ 232E                             ?_getTime 0026  
                       ??__div_to_l_ 0029                             ?_initLCD 0001  
                           ?_initRTC 0001                      startTimer@timer 0023  
                           ?_isdigit 0001   __end_of_keyPressedInterruptService 3DB8  
         _keyPressedInterruptService 3D98                  __end_of_readPastRun 32FA  
               __end_of_showRunStats 310E                             ?_service 0001  
                          _hexpowers FE4F                            _initTimer 3B2C  
                          _initServo 2B66                      ?i2_digitalWrite 0007  
              _servoInterruptService 27A4                          ??i2___awmod 0005  
                     __size_of_scale 0416                       __size_of_putch 0022  
                           _AA_float 0059                   eepromWrite@address 0082  
                    ___aldiv@divisor 0027                      ___aldiv@counter 002B  
                     sortBattery@Vcc 0109                       ___wmul@product 0035  
                           _LATDbits 000F8C                         ??_analogRead 0027  
                        _eepromWrite 39A2                   __end_of__div_to_l_ 2588  
                           i2u497_44 2FAA                             i2u497_45 2FA4  
             __size_of_showInterface 00D0                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001                       _padAngle_CLOSE 00F7  
                          _terminate 0179                        digitalWrite@p 002A  
                         service@key 0022                         ??_lcdNewline 0027  
                __size_of_startTimer 004C                    angleToPulse@angle 00BD  
                    main@cylinderDur 012B                    ___wmul@multiplier 0031  
                      lcdNibble@data 0024                         ??_eepromRead 003B  
                         printf@flag 00E6                        lcdNibble@temp 0023  
                         printf@fval 00DD                           printf@prec 00E8  
                      ??_showRunMenu 003B                        ??_showRunTime 003B  
                 __end_of_analogRead 3C34                             _V_LIM_AA 00F1  
                           _V_LIM_9V 004E               __size_of_showRunSelect 0064  
                     saveNewRun@data 0089                           ?_initTimer 0023  
                         ?_initServo 00DE                    sortBattery@signal 0107  
           sortBattery@pos_v_counter 0105                  I2C_Master_Read@temp 0025  
                          copy_data0 339E                            copy_data1 33BE  
                          copy_data2 33DE                   i2___awmod@dividend 0001  
                 __end_of_lcdNewline 3E50                        readKeypad@key 0023  
                           __Hrparam 0000                         ??_keyPressed 0023  
                           __Lrparam 0000                   __end_of_eepromRead 3DF0  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0023  
                showRunStats@n_OTHER 0106                        ??_sortBattery 00EB  
                   __size_of___aldiv 00CC                     __size_of___almod 00AC  
                   __size_of___awdiv 0084                     __size_of___ftadd 0268  
                   __size_of___awmod 0070                     __size_of___ftdiv 0110  
                   __size_of___ftneg 0024                     __size_of___lldiv 0082  
                           ___altoft 359E                     __size_of___ftmul 015E  
                   __size_of___llmod 0066                     __size_of___ftsub 004C  
                   __size_of___fttol 0144                             ___awtoft 3C34  
                           ___ftpack 310E                          _readPastRun 3268  
                        _fround$1416 009E                          _fround$1417 009B  
                        _cylinderDir 0141                             ___lltoft 38EC  
                   __size_of_lcdHome 0008                     __size_of_lcdInst 0022  
                   __size_of_getTime 0082                        showDateTime@t 010C  
                          setAngle@i 00DC                      _I2C_Master_Init 3948  
                    _I2C_Master_Read 3CC2                     __size_of_initLCD 0046  
                    _I2C_Master_Wait 3E06                     __size_of_initRTC 0016  
                    _I2C_Master_Stop 3E58                     __size_of_isdigit 001E  
             ?_servoInterruptService 0001                        _showInterface 2D1C  
                           _lcdClear 3E50                             __ptext10 39F8  
                           __ptext11 3C6C                             __ptext20 3616  
                           __ptext12 3C9C                             __ptext21 3416  
                           __ptext13 2698                             __ptext30 3E28  
                           __ptext22 232E                             __ptext14 0012  
                           __ptext31 3DF0                             __ptext23 2460  
                           __ptext15 1366                             __ptext40 3268  
                           __ptext32 3948                             __ptext24 38EC  
                           __ptext16 3D54                             __ptext41 2A84  
                           __ptext33 349A                             __ptext25 3760  
                           __ptext17 3E48                             __ptext50 2092  
                           __ptext42 39A2                             __ptext34 351C  
                           __ptext26 3A48                             __ptext18 3DB8  
                           __ptext51 21EA                             __ptext43 3DD6  
                           __ptext35 3E3E                             __ptext27 3D0E  
                           __ptext19 1CD4                             __ptext60 3D76  
                           __ptext52 1F34                             __ptext44 3CE8  
                           __ptext36 3E58                             __ptext28 32FA  
                           __ptext61 37C6                             __ptext53 2588  
                           __ptext45 3BBC                             __ptext37 3E60  
                           __ptext29 3E50                             __ptext62 31BC  
                           __ptext54 1A6C                             __ptext46 3E68  
                           __ptext38 3CC2                             __ptext63 2DEC  
                           __ptext55 3C34                             __ptext47 2B66  
                           __ptext39 3E06                             __ptext56 359E  
                           __ptext48 3A94                             __ptext65 27A4  
                           __ptext57 310E                             __ptext49 2C48  
                           __ptext66 3AE0                             __ptext58 3B2C  
                           __ptext67 2F80                             __ptext59 3B76  
                           __ptext68 3686                             __ptext69 3D98  
           __end_of_showErrorMessage 3C9C                   __end_of_keyPressed 3E34  
              __size_of_showDateTime 010C                             __powers_ FE28  
                   __size_of_service 2A7C                      i2startTimer@val 0009  
                    ___almod@divisor 0035                         ??_saveNewRun 003B  
                      ?i2_startTimer 0007                             _padServo 015B  
                    ___almod@counter 0039                  __end_of_showRunMenu 38EC  
                 __end_of_readKeypad 3CC2                  __end_of_showRunTime 3760  
                      ?_angleToPulse 00BD                        __size_of_main 02F0  
              __size_of_showMainMenu 0050                             _pinSetup 3BBC  
                           _setAngle 2C48                        _showRunSelect 382C  
                           _prevTime 004B                     sortBattery@V_244 011C  
                        ??_lcdNibble 0023                             getTime@i 0038  
                     showInterface@n 010E                        _padAngle_OPEN 0053  
                           int$flags 005D                     sortBattery@i_249 0112  
                   sortBattery@V_max 010F                            printf@idx 00D0  
                          printf@len 00D3                            printf@exp 00DB  
                          printf@val 00E0                        showMainMenu@k 00EB  
                 __end_of_saveNewRun 2B66                __size_of_showRunStats 00C6  
                       _showDateTime 2698                    i2___awmod@divisor 0003  
                          putch@data 0027                    i2___awmod@counter 0005  
           __end_of_I2C_Master_Start 3E68                  __end_of_sortBattery 1366  
           __end_of_I2C_Master_Write 3E48                           _INTCONbits 000FF2  
                     ?_showInterface 0001                        ?_digitalWrite 0023  
                        ??_initTimer 0025                          ??_initServo 00E2  
                           isdigit@c 0025                         _showMainMenu 39F8  
                           scale@scl 009E                       ??i2_startTimer 000D  
                       ??_startTimer 0029                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0031                     __tdiv_to_l_@cntr 0030  
                     ??_angleToPulse 00C1                     __tdiv_to_l_@quot 002C  
                   ___lldiv@dividend 0023                       ?_showRunSelect 0001  
                       _showRunStats 3048                     _redirectAngle_AA 0147  
                   _redirectAngle_9V 0055                             printf@ap 00D5  
                           printf@cp 00D1              __end_of_I2C_Master_Init 39A2  
            __end_of_I2C_Master_Read 3CE8              __end_of_I2C_Master_Wait 3E18  
            __end_of_I2C_Master_Stop 3E60                          lcdInst@data 0026  
                       ?_digitalRead 0023                         ?__tdiv_to_l_ 0023  
                 __end_of_startTimer 3AE0                          _printf$1419 00CD  
                   ??i2_digitalWrite 000B                     ___lldiv@quotient 002B  
                  I2C_Master_Write@d 0024                       ??_digitalWrite 0027  
        ?_keyPressedInterruptService 0001                         ___aldiv@sign 002C  
                        _showRunMenu 3890                          _showRunTime 36F6  
                    _redirectAngle_C 0057                          getTime@time 002A  
                   _padAngle_NEUTRAL 0145                      digitalWrite@pin 0023  
                    digitalWrite@val 0025                         ___almod@sign 003A  
                       ?_eepromWrite 0080                         showRunMenu@k 00EC  
                     showRunMenu@key 00EB  
