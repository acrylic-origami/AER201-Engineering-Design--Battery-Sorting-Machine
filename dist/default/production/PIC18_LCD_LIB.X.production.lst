

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 24 11:20:19 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 1.40
    24                           ; Generated 01/12/2016 GMT
    25                           ; 
    26                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	smallconst
    59  001000                     __psmallconst:
    60                           	opt stack 0
    61  001000  00                 	db	0
    62  001001  31                 	db	49
    63  001002  32                 	db	50
    64  001003  33                 	db	51
    65  001004  41                 	db	65
    66  001005  34                 	db	52
    67  001006  35                 	db	53
    68  001007  36                 	db	54
    69  001008  42                 	db	66
    70  001009  37                 	db	55
    71  00100A  38                 	db	56
    72  00100B  39                 	db	57
    73  00100C  43                 	db	67
    74  00100D  2A                 	db	42
    75  00100E  30                 	db	48
    76  00100F  23                 	db	35
    77  001010  44                 	db	68
    78  001011  00                 	db	0
    79  001012                     __end_of_keys:
    80                           	opt stack 0
    81  001012                     _dpowers:
    82                           	opt stack 0
    83  001012  0001               	dw	1
    84  001014  000A               	dw	10
    85  001016  0064               	dw	100
    86  001018  03E8               	dw	1000
    87  00101A  2710               	dw	10000
    88  00101C                     __end_of_dpowers:
    89                           	opt stack 0
    90  0000                     _ADCON0	set	4034
    91  0000                     _ADCON1	set	4033
    92  0000                     _ADCON2	set	4032
    93  0000                     _ADRESH	set	4036
    94  0000                     _ADRESL	set	4035
    95  0000                     _EEADR	set	4009
    96  0000                     _EEADRH	set	4010
    97  0000                     _EECON1	set	4006
    98  0000                     _EECON2	set	4007
    99  0000                     _EEDATA	set	4008
   100  0000                     _INTCONbits	set	4082
   101  0000                     _LATA	set	3977
   102  0000                     _LATB	set	3978
   103  0000                     _LATC	set	3979
   104  0000                     _LATD	set	3980
   105  0000                     _LATDbits	set	3980
   106  0000                     _LATE	set	3981
   107  0000                     _PORTA	set	3968
   108  0000                     _PORTB	set	3969
   109  0000                     _PORTBbits	set	3969
   110  0000                     _PORTC	set	3970
   111  0000                     _PORTD	set	3971
   112  0000                     _TRISA	set	3986
   113  0000                     _TRISB	set	3987
   114  0000                     _TRISC	set	3988
   115  0000                     _TRISD	set	3989
   116  0000                     _TRISE	set	3990
   117  0000                     _EEIF	set	32012
   118  00101C                     STR_3:
   119  00101C  77                 	db	119	;'w'
   120  00101D  72                 	db	114	;'r'
   121  00101E  69                 	db	105	;'i'
   122  00101F  6E                 	db	110	;'n'
   123  001020  74                 	db	116	;'t'
   124  001021  69                 	db	105	;'i'
   125  001022  6E                 	db	110	;'n'
   126  001023  00                 	db	0
   127  001024                     STR_4:
   128  001024  25                 	db	37
   129  001025  64                 	db	100	;'d'
   130  001026  00                 	db	0
   131  001027  30                 	db	48	;'0'
   132  001028  00                 	db	0
   133  001029  31                 	db	49	;'1'
   134  00102A  00                 	db	0
   135                           
   136                           ; #config settings
   137  00102B  00                 	db	0	; dummy byte at the end
   138  0000                     
   139                           	psect	cinit
   140  0013E6                     __pcinit:
   141                           	opt stack 0
   142  0013E6                     start_initialization:
   143                           	opt stack 0
   144  0013E6                     __initialization:
   145                           	opt stack 0
   146  0013E6                     end_of_initialization:
   147                           	opt stack 0
   148  0013E6                     __end_of__initialization:
   149                           	opt stack 0
   150  0013E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   151  0013E8  6EF8               	movwf	tblptru,c
   152  0013EA  0100               	movlb	0
   153  0013EC  EFA5  F008         	goto	_main	;jump to C main() function
   154                           tblptru	equ	0xFF8
   155                           
   156                           	psect	cstackCOMRAM
   157  000001                     __pcstackCOMRAM:
   158                           	opt stack 0
   159  000001                     ?_eepromRead:
   160                           	opt stack 0
   161  000001                     ?___lwdiv:
   162                           	opt stack 0
   163  000001                     lcdNibble@temp:
   164                           	opt stack 0
   165  000001                     readKeypad@key:
   166                           	opt stack 0
   167  000001                     eepromWrite@data:
   168                           	opt stack 0
   169  000001                     ___lwdiv@dividend:
   170                           	opt stack 0
   171  000001                     eepromRead@address:
   172                           	opt stack 0
   173                           
   174                           ; 4 bytes @ 0x0
   175  000001                     	ds	1
   176  000002                     lcdNibble@data:
   177                           	opt stack 0
   178                           
   179                           ; 1 bytes @ 0x1
   180  000002                     	ds	1
   181  000003                     ??_lcdInst:
   182  000003                     ___lwdiv@divisor:
   183                           	opt stack 0
   184  000003                     eepromWrite@address:
   185                           	opt stack 0
   186                           
   187                           ; 4 bytes @ 0x2
   188  000003                     	ds	1
   189  000004                     lcdInst@data:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0x3
   193  000004                     	ds	1
   194  000005                     ??_initLCD:
   195  000005                     putch@data:
   196                           	opt stack 0
   197  000005                     ___lwdiv@quotient:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x4
   201  000005                     	ds	2
   202  000007                     ??_eepromWrite:
   203  000007                     ___lwdiv@counter:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x6
   207  000007                     	ds	1
   208  000008                     ?___lwmod:
   209                           	opt stack 0
   210  000008                     eepromWrite@ien:
   211                           	opt stack 0
   212  000008                     ___lwmod@dividend:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0x7
   216  000008                     	ds	2
   217  00000A                     ___lwmod@divisor:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x9
   221  00000A                     	ds	2
   222  00000C                     ___lwmod@counter:
   223                           	opt stack 0
   224                           
   225                           ; 1 bytes @ 0xB
   226  00000C                     	ds	1
   227  00000D                     ?_printf:
   228                           	opt stack 0
   229  00000D                     printf@f:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0xC
   233  00000D                     	ds	4
   234  000011                     ??_printf:
   235                           
   236                           ; 1 bytes @ 0x10
   237  000011                     	ds	1
   238  000012                     printf@ap:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x11
   242  000012                     	ds	2
   243  000014                     printf@flag:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x13
   247  000014                     	ds	1
   248  000015                     printf@prec:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x14
   252  000015                     	ds	1
   253  000016                     printf@val:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x15
   257  000016                     	ds	2
   258  000018                     printf@c:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0x17
   262  000018                     	ds	1
   263  000019                     tblptru	equ	0xFF8
   264                           
   265                           ; 1 bytes @ 0x18
   266 ;;
   267 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   268 ;;
   269 ;; *************** function _main *****************
   270 ;; Defined at:
   271 ;;		line 30 in file "main.c"
   272 ;; Parameters:    Size  Location     Type
   273 ;;		None
   274 ;; Auto vars:     Size  Location     Type
   275 ;;		None
   276 ;; Return value:  Size  Location     Type
   277 ;;                  1    wreg      void 
   278 ;; Registers used:
   279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   280 ;; Tracked objects:
   281 ;;		On entry : 0/0
   282 ;;		On exit  : 0/0
   283 ;;		Unchanged: 0/0
   284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   289 ;;Total ram usage:        0 bytes
   290 ;; Hardware stack levels required when called:    5
   291 ;; This function calls:
   292 ;;		_eepromRead
   293 ;;		_eepromWrite
   294 ;;		_initLCD
   295 ;;		_printf
   296 ;;		_readKeypad
   297 ;; This function is called by:
   298 ;;		Startup code after reset
   299 ;; This function uses a non-reentrant model
   300 ;;
   301                           
   302                           	psect	text0
   303  00114A                     __ptext0:
   304                           	opt stack 0
   305  00114A                     _main:
   306                           	opt stack 26
   307                           
   308                           ;main.c: 33: TRISA = 0xFF;
   309                           
   310                           ;incstack = 0
   311  00114A  6892               	setf	3986,c	;volatile
   312                           
   313                           ;main.c: 34: TRISB = 0xFF;
   314  00114C  6893               	setf	3987,c	;volatile
   315                           
   316                           ;main.c: 35: TRISC = 0x00;
   317  00114E  0E00               	movlw	0
   318  001150  6E94               	movwf	3988,c	;volatile
   319                           
   320                           ;main.c: 36: TRISD = 0x00;
   321  001152  0E00               	movlw	0
   322  001154  6E95               	movwf	3989,c	;volatile
   323                           
   324                           ;main.c: 37: TRISE = 0x00;
   325  001156  0E00               	movlw	0
   326  001158  6E96               	movwf	3990,c	;volatile
   327                           
   328                           ;main.c: 39: LATA = 0x00;
   329  00115A  0E00               	movlw	0
   330  00115C  6E89               	movwf	3977,c	;volatile
   331                           
   332                           ;main.c: 40: LATB = 0x00;
   333  00115E  0E00               	movlw	0
   334  001160  6E8A               	movwf	3978,c	;volatile
   335                           
   336                           ;main.c: 41: LATC = 0x00;
   337  001162  0E00               	movlw	0
   338  001164  6E8B               	movwf	3979,c	;volatile
   339                           
   340                           ;main.c: 42: LATD = 0x00;
   341  001166  0E00               	movlw	0
   342  001168  6E8C               	movwf	3980,c	;volatile
   343                           
   344                           ;main.c: 43: LATE = 0x00;
   345  00116A  0E00               	movlw	0
   346  00116C  6E8D               	movwf	3981,c	;volatile
   347                           
   348                           ;main.c: 45: ADCON0 = 0x00;
   349  00116E  0E00               	movlw	0
   350  001170  6EC2               	movwf	4034,c	;volatile
   351                           
   352                           ;main.c: 46: ADCON1 |= 0x0A;
   353  001172  0E0A               	movlw	10
   354  001174  12C1               	iorwf	4033,f,c	;volatile
   355                           
   356                           ;main.c: 47: ADCON1 |= 0b11<<4;
   357  001176  0E30               	movlw	48
   358  001178  12C1               	iorwf	4033,f,c	;volatile
   359                           
   360                           ;main.c: 50: ADCON2 = 0;
   361  00117A  0E00               	movlw	0
   362  00117C  6EC0               	movwf	4032,c	;volatile
   363                           
   364                           ;main.c: 51: ADCON2 |= 0b001;
   365  00117E  80C0               	bsf	4032,0,c	;volatile
   366                           
   367                           ;main.c: 52: ADCON2 |= 0b110<<3;
   368  001180  0E30               	movlw	48
   369  001182  12C0               	iorwf	4032,f,c	;volatile
   370                           
   371                           ;main.c: 53: ADCON2 |= 1<<7;
   372  001184  8EC0               	bsf	4032,7,c	;volatile
   373                           
   374                           ;main.c: 55: initLCD();
   375  001186  EC77  F009         	call	_initLCD	;wreg free
   376                           
   377                           ;main.c: 57: if(eepromRead(0b1111111111) == 255){
   378  00118A  0EFF               	movlw	255
   379  00118C  6E01               	movwf	eepromRead@address,c
   380  00118E  0E03               	movlw	3
   381  001190  6E02               	movwf	eepromRead@address+1,c
   382  001192  0E00               	movlw	0
   383  001194  6E03               	movwf	eepromRead@address+2,c
   384  001196  0E00               	movlw	0
   385  001198  6E04               	movwf	eepromRead@address+3,c
   386  00119A  ECDD  F009         	call	_eepromRead	;wreg free
   387  00119E  2801               	incf	?_eepromRead,w,c
   388  0011A0  1002               	iorwf	?_eepromRead+1,w,c
   389  0011A2  A4D8               	btfss	status,2,c
   390  0011A4  D014               	goto	l1372
   391                           
   392                           ;main.c: 58: printf("wrintin");
   393  0011A6  0E1C               	movlw	low STR_3
   394  0011A8  6E0D               	movwf	printf@f,c
   395  0011AA  0E10               	movlw	high STR_3
   396  0011AC  6E0E               	movwf	printf@f+1,c
   397  0011AE  EC16  F008         	call	_printf	;wreg free
   398                           
   399                           ;main.c: 59: eepromWrite(7,0b1111111111);
   400  0011B2  0E00               	movlw	0
   401  0011B4  6E02               	movwf	eepromWrite@data+1,c
   402  0011B6  0E07               	movlw	7
   403  0011B8  6E01               	movwf	eepromWrite@data,c
   404  0011BA  0EFF               	movlw	255
   405  0011BC  6E03               	movwf	eepromWrite@address,c
   406  0011BE  0E03               	movlw	3
   407  0011C0  6E04               	movwf	eepromWrite@address+1,c
   408  0011C2  0E00               	movlw	0
   409  0011C4  6E05               	movwf	eepromWrite@address+2,c
   410  0011C6  0E00               	movlw	0
   411  0011C8  6E06               	movwf	eepromWrite@address+3,c
   412  0011CA  EC52  F009         	call	_eepromWrite	;wreg free
   413  0011CE                     l1372:
   414                           
   415                           ;main.c: 64: readKeypad();
   416  0011CE  ECEA  F009         	call	_readKeypad	;wreg free
   417                           
   418                           ;main.c: 65: printf("%d",eepromRead(0b1111111111));
   419  0011D2  0E24               	movlw	low STR_4
   420  0011D4  6E0D               	movwf	printf@f,c
   421  0011D6  0E10               	movlw	high STR_4
   422  0011D8  6E0E               	movwf	printf@f+1,c
   423  0011DA  0EFF               	movlw	255
   424  0011DC  6E01               	movwf	eepromRead@address,c
   425  0011DE  0E03               	movlw	3
   426  0011E0  6E02               	movwf	eepromRead@address+1,c
   427  0011E2  0E00               	movlw	0
   428  0011E4  6E03               	movwf	eepromRead@address+2,c
   429  0011E6  0E00               	movlw	0
   430  0011E8  6E04               	movwf	eepromRead@address+3,c
   431  0011EA  ECDD  F009         	call	_eepromRead	;wreg free
   432  0011EE  C001  F00F         	movff	?_eepromRead,?_printf+2
   433  0011F2  C002  F010         	movff	?_eepromRead+1,?_printf+3
   434  0011F6  EC16  F008         	call	_printf	;wreg free
   435  0011FA  D7E9               	goto	l1372
   436  0011FC                     __end_of_main:
   437                           	opt stack 0
   438                           tblptru	equ	0xFF8
   439                           status	equ	0xFD8
   440                           
   441 ;; *************** function _readKeypad *****************
   442 ;; Defined at:
   443 ;;		line 35 in file "keypad.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  key             1    0[COMRAM] unsigned char 
   448 ;; Return value:  Size  Location     Type
   449 ;;                  2   36[None  ] int 
   450 ;; Registers used:
   451 ;;		wreg, status,2, status,0
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   461 ;;Total ram usage:        1 bytes
   462 ;; Hardware stack levels used:    1
   463 ;; This function calls:
   464 ;;		Nothing
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           	psect	text1
   471  0013D4                     __ptext1:
   472                           	opt stack 0
   473  0013D4                     _readKeypad:
   474                           	opt stack 30
   475  0013D4                     l102:
   476  0013D4  A281               	btfss	3969,1,c	;volatile
   477  0013D6  D7FE               	goto	l102
   478                           
   479                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
   480  0013D8  3881               	swapf	3969,w,c	;volatile
   481  0013DA  0B0F               	andlw	15
   482  0013DC  0B0F               	andlw	15
   483  0013DE  6E01               	movwf	readKeypad@key,c
   484  0013E0                     l105:
   485  0013E0  A281               	btfss	3969,1,c	;volatile
   486  0013E2  0012               	return	
   487  0013E4  D7FD               	goto	l105
   488  0013E6                     __end_of_readKeypad:
   489                           	opt stack 0
   490                           tblptru	equ	0xFF8
   491                           status	equ	0xFD8
   492                           
   493 ;; *************** function _printf *****************
   494 ;; Defined at:
   495 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;  f               2   12[COMRAM] PTR const unsigned char 
   498 ;;		 -> STR_4(3), STR_3(8), STR_2(2), STR_1(2), 
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  tmpval          4    0        struct .
   501 ;;  cp              3    0        PTR const unsigned char 
   502 ;;  val             2   21[COMRAM] unsigned int 
   503 ;;  ap              2   17[COMRAM] PTR void [1]
   504 ;;		 -> ?_printf(2), 
   505 ;;  len             2    0        unsigned int 
   506 ;;  c               1   23[COMRAM] char 
   507 ;;  prec            1   20[COMRAM] char 
   508 ;;  flag            1   19[COMRAM] unsigned char 
   509 ;; Return value:  Size  Location     Type
   510 ;;                  2   12[COMRAM] int 
   511 ;; Registers used:
   512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   518 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   519 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   521 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   522 ;;Total ram usage:       12 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; Hardware stack levels required when called:    4
   525 ;; This function calls:
   526 ;;		___lwdiv
   527 ;;		___lwmod
   528 ;;		_putch
   529 ;; This function is called by:
   530 ;;		_main
   531 ;;		_printb
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           	psect	text2
   536  00102C                     __ptext2:
   537                           	opt stack 0
   538  00102C                     _printf:
   539                           	opt stack 26
   540                           
   541                           ;doprnt.c: 466: va_list ap;
   542                           ;doprnt.c: 499: signed char c;
   543                           ;doprnt.c: 506: signed char prec;
   544                           ;doprnt.c: 508: unsigned char flag;
   545                           ;doprnt.c: 523: union {
   546                           ;doprnt.c: 524: unsigned long vd;
   547                           ;doprnt.c: 525: double integ;
   548                           ;doprnt.c: 526: } tmpval;
   549                           ;doprnt.c: 528: unsigned int val;
   550                           ;doprnt.c: 529: unsigned len;
   551                           ;doprnt.c: 530: const char * cp;
   552                           ;doprnt.c: 533: *ap = __va_start();
   553                           
   554                           ;incstack = 0
   555  00102C  0E0F               	movlw	low (?_printf+2)
   556  00102E  6E12               	movwf	printf@ap,c
   557  001030  0E00               	movlw	high (?_printf+2)
   558  001032  6E13               	movwf	printf@ap+1,c
   559                           
   560                           ;doprnt.c: 536: while(c = *f++) {
   561  001034  D07D               	goto	l1296
   562  001036                     l1250:
   563                           
   564                           ;doprnt.c: 538: if(c != '%')
   565  001036  0E25               	movlw	37
   566  001038  1818               	xorwf	printf@c,w,c
   567  00103A  B4D8               	btfsc	status,2,c
   568  00103C  D004               	goto	l1254
   569                           
   570                           ;doprnt.c: 540: {
   571                           ;doprnt.c: 541: (putch(c) );
   572  00103E  5018               	movf	printf@c,w,c
   573  001040  ECBB  F009         	call	_putch
   574                           
   575                           ;doprnt.c: 542: continue;
   576  001044  D075               	goto	l1296
   577  001046                     l1254:
   578                           
   579                           ;doprnt.c: 543: }
   580                           ;doprnt.c: 548: flag = 0;
   581  001046  0E00               	movlw	0
   582  001048  6E14               	movwf	printf@flag,c
   583                           
   584                           ;doprnt.c: 822: }
   585                           
   586                           ;doprnt.c: 813: continue;
   587                           
   588                           ;doprnt.c: 802: default:
   589                           
   590                           ;doprnt.c: 698: case 'i':
   591                           ;doprnt.c: 699: break;
   592                           
   593                           ;doprnt.c: 697: case 'd':
   594                           
   595                           ;doprnt.c: 638: goto alldone;
   596                           
   597                           ;doprnt.c: 637: case 0:
   598                           
   599                           ;doprnt.c: 635: switch(c = *f++) {
   600  00104A  C00D  FFF6         	movff	printf@f,tblptrl
   601  00104E  C00E  FFF7         	movff	printf@f+1,tblptrh
   602  001052  4A0D               	infsnz	printf@f,f,c
   603  001054  2A0E               	incf	printf@f+1,f,c
   604  001056                     	if	0	;tblptru may be non-zero
   605  001056                     	endif
   606  001056                     	if	0	;tblptru may be non-zero
   607  001056                     	endif
   608  001056  0008               	tblrd		*
   609  001058  CFF5 F018          	movff	tablat,printf@c
   610  00105C  5018               	movf	printf@c,w,c
   611                           
   612                           ; Switch size 1, requested type "space"
   613                           ; Number of cases is 3, Range of values is 0 to 105
   614                           ; switch strategies available:
   615                           ; Name         Instructions Cycles
   616                           ; simple_byte           10     6 (average)
   617                           ;	Chosen strategy is simple_byte
   618  00105E  0A00               	xorlw	0	; case 0
   619  001060  B4D8               	btfsc	status,2,c
   620  001062  0012               	return	
   621  001064  0A64               	xorlw	100	; case 100
   622  001066  B4D8               	btfsc	status,2,c
   623  001068  D003               	goto	l1260
   624  00106A  0A0D               	xorlw	13	; case 105
   625  00106C  A4D8               	btfss	status,2,c
   626  00106E  D060               	goto	l1296
   627  001070                     l1260:
   628                           
   629                           ;doprnt.c: 1253: {
   630                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   631  001070  C012  FFD9         	movff	printf@ap,fsr2l
   632  001074  C013  FFDA         	movff	printf@ap+1,fsr2h
   633  001078  CFDE F016          	movff	postinc2,printf@val
   634  00107C  CFDD F017          	movff	postdec2,printf@val+1
   635  001080  0E02               	movlw	2
   636  001082  2612               	addwf	printf@ap,f,c
   637  001084  0E00               	movlw	0
   638  001086  2213               	addwfc	printf@ap+1,f,c
   639                           
   640                           ;doprnt.c: 1261: if((int)val < 0) {
   641  001088  AE17               	btfss	printf@val+1,7,c
   642  00108A  D006               	goto	l1270
   643                           
   644                           ;doprnt.c: 1262: flag |= 0x03;
   645  00108C  0E03               	movlw	3
   646  00108E  1214               	iorwf	printf@flag,f,c
   647                           
   648                           ;doprnt.c: 1263: val = -val;
   649  001090  6C16               	negf	printf@val,c
   650  001092  1E17               	comf	printf@val+1,f,c
   651  001094  B0D8               	btfsc	status,0,c
   652  001096  2A17               	incf	printf@val+1,f,c
   653  001098                     l1270:
   654                           
   655                           ;doprnt.c: 1264: }
   656                           ;doprnt.c: 1266: }
   657                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   658  001098  0E01               	movlw	1
   659  00109A  6E18               	movwf	printf@c,c
   660  00109C                     l1272:
   661  00109C  0E05               	movlw	5
   662  00109E  1818               	xorwf	printf@c,w,c
   663  0010A0  B4D8               	btfsc	status,2,c
   664  0010A2  D012               	goto	l1284
   665                           
   666                           ;doprnt.c: 1306: if(val < dpowers[c])
   667  0010A4  5018               	movf	printf@c,w,c
   668  0010A6  0D02               	mullw	2
   669  0010A8  0E12               	movlw	low _dpowers
   670  0010AA  24F3               	addwf	prodl,w,c
   671  0010AC  6EF6               	movwf	tblptrl,c
   672  0010AE  0E10               	movlw	high _dpowers
   673  0010B0  20F4               	addwfc	prodh,w,c
   674  0010B2  6EF7               	movwf	tblptrh,c
   675  0010B4                     	if	0	;There are less than 3 active tblptr bytes
   676  0010B4                     	endif
   677  0010B4  0009               	tblrd		*+
   678  0010B6  50F5               	movf	tablat,w,c
   679  0010B8  5C16               	subwf	printf@val,w,c
   680  0010BA  0009               	tblrd		*+
   681  0010BC  50F5               	movf	tablat,w,c
   682  0010BE  5817               	subwfb	printf@val+1,w,c
   683  0010C0  A0D8               	btfss	status,0,c
   684  0010C2  D002               	goto	l1284
   685                           
   686                           ;doprnt.c: 1307: break;
   687  0010C4  2A18               	incf	printf@c,f,c
   688  0010C6  D7EA               	goto	l1272
   689  0010C8                     l1284:
   690                           
   691                           ;doprnt.c: 1422: {
   692                           ;doprnt.c: 1438: if(flag & 0x03)
   693  0010C8  C014  F011         	movff	printf@flag,??_printf
   694  0010CC  0E03               	movlw	3
   695  0010CE  1611               	andwf	??_printf,f,c
   696  0010D0  B4D8               	btfsc	status,2,c
   697  0010D2  D003               	goto	l1288
   698                           
   699                           ;doprnt.c: 1439: (putch('-') );
   700  0010D4  0E2D               	movlw	45
   701  0010D6  ECBB  F009         	call	_putch
   702  0010DA                     l1288:
   703                           
   704                           ;doprnt.c: 1469: }
   705                           ;doprnt.c: 1472: prec = c;
   706  0010DA  C018  F015         	movff	printf@c,printf@prec
   707                           
   708                           ;doprnt.c: 1474: while(prec--) {
   709  0010DE  D024               	goto	l1294
   710  0010E0                     l1290:
   711                           
   712                           ;doprnt.c: 1478: {
   713                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   714  0010E0  5015               	movf	printf@prec,w,c
   715  0010E2  0D02               	mullw	2
   716  0010E4  0E12               	movlw	low _dpowers
   717  0010E6  24F3               	addwf	prodl,w,c
   718  0010E8  6EF6               	movwf	tblptrl,c
   719  0010EA  0E10               	movlw	high _dpowers
   720  0010EC  20F4               	addwfc	prodh,w,c
   721  0010EE  6EF7               	movwf	tblptrh,c
   722  0010F0                     	if	0	;There are less than 3 active tblptr bytes
   723  0010F0                     	endif
   724  0010F0  0009               	tblrd		*+
   725  0010F2  CFF5 F003          	movff	tablat,___lwdiv@divisor
   726  0010F6  000A               	tblrd		*-
   727  0010F8  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   728  0010FC  C016  F001         	movff	printf@val,___lwdiv@dividend
   729  001100  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   730  001104  EC29  F009         	call	___lwdiv	;wreg free
   731  001108  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   732  00110C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   733  001110  0E00               	movlw	0
   734  001112  6E0B               	movwf	___lwmod@divisor+1,c
   735  001114  0E0A               	movlw	10
   736  001116  6E0A               	movwf	___lwmod@divisor,c
   737  001118  EC9A  F009         	call	___lwmod	;wreg free
   738  00111C  5008               	movf	?___lwmod,w,c
   739  00111E  0F30               	addlw	48
   740  001120  6E18               	movwf	printf@c,c
   741                           
   742                           ;doprnt.c: 1523: }
   743                           ;doprnt.c: 1524: (putch(c) );
   744  001122  5018               	movf	printf@c,w,c
   745  001124  ECBB  F009         	call	_putch
   746  001128                     l1294:
   747  001128  0615               	decf	printf@prec,f,c
   748  00112A  2815               	incf	printf@prec,w,c
   749  00112C  A4D8               	btfss	status,2,c
   750  00112E  D7D8               	goto	l1290
   751  001130                     l1296:
   752  001130  C00D  FFF6         	movff	printf@f,tblptrl
   753  001134  C00E  FFF7         	movff	printf@f+1,tblptrh
   754  001138  4A0D               	infsnz	printf@f,f,c
   755  00113A  2A0E               	incf	printf@f+1,f,c
   756  00113C                     	if	0	;tblptru may be non-zero
   757  00113C                     	endif
   758  00113C                     	if	0	;tblptru may be non-zero
   759  00113C                     	endif
   760  00113C  0008               	tblrd		*
   761  00113E  CFF5 F018          	movff	tablat,printf@c
   762  001142  5018               	movf	printf@c,w,c
   763  001144  B4D8               	btfsc	status,2,c
   764  001146  0012               	return	
   765  001148  D776               	goto	l1250
   766  00114A                     __end_of_printf:
   767                           	opt stack 0
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           prodh	equ	0xFF4
   773                           prodl	equ	0xFF3
   774                           postinc2	equ	0xFDE
   775                           postdec2	equ	0xFDD
   776                           fsr2h	equ	0xFDA
   777                           fsr2l	equ	0xFD9
   778                           status	equ	0xFD8
   779                           
   780 ;; *************** function _putch *****************
   781 ;; Defined at:
   782 ;;		line 35 in file "lcd.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;  data            1    wreg     unsigned char 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  data            1    4[COMRAM] unsigned char 
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, status,2, status,0, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:        1 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    3
   803 ;; This function calls:
   804 ;;		_lcdNewline
   805 ;;		_lcdNibble
   806 ;; This function is called by:
   807 ;;		_printf
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           	psect	text3
   812  001376                     __ptext3:
   813                           	opt stack 0
   814  001376                     _putch:
   815                           	opt stack 26
   816                           
   817                           ;incstack = 0
   818                           ;putch@data stored from wreg
   819  001376  6E05               	movwf	putch@data,c
   820                           
   821                           ;lcd.c: 36: if(data == '\n')lcdNewline();
   822  001378  0E0A               	movlw	10
   823  00137A  1805               	xorwf	putch@data,w,c
   824  00137C  A4D8               	btfss	status,2,c
   825  00137E  D003               	goto	l71
   826  001380  ECF8  F009         	call	_lcdNewline	;wreg free
   827  001384  0012               	return	
   828  001386                     l71:
   829                           
   830                           ;lcd.c: 37: else
   831                           ;lcd.c: 38: {
   832                           ;lcd.c: 39: LATDbits.LATD2 = 1;
   833  001386  848C               	bsf	3980,2,c	;volatile
   834                           
   835                           ;lcd.c: 40: _delay((unsigned long)((140)*(8000000/4000000.0)));
   836  001388  0E5D               	movlw	93
   837  00138A                     u617:
   838  00138A  2EE8               	decfsz	wreg,f,c
   839  00138C  D7FE               	bra	u617
   840  00138E  F000               	nop	
   841                           
   842                           ;lcd.c: 41: lcdNibble(data);
   843  001390  5005               	movf	putch@data,w,c
   844  001392  ECFE  F008         	call	_lcdNibble
   845  001396  0012               	return	
   846  001398                     __end_of_putch:
   847                           	opt stack 0
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           prodh	equ	0xFF4
   853                           prodl	equ	0xFF3
   854                           wreg	equ	0xFE8
   855                           postinc2	equ	0xFDE
   856                           postdec2	equ	0xFDD
   857                           fsr2h	equ	0xFDA
   858                           fsr2l	equ	0xFD9
   859                           status	equ	0xFD8
   860                           
   861 ;; *************** function _lcdNewline *****************
   862 ;; Defined at:
   863 ;;		line 74 in file "lcd.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;		None
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, status,2, status,0, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;Total ram usage:        0 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    2
   884 ;; This function calls:
   885 ;;		_lcdInst
   886 ;; This function is called by:
   887 ;;		_putch
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text4
   892  0013F0                     __ptext4:
   893                           	opt stack 0
   894  0013F0                     _lcdNewline:
   895                           	opt stack 26
   896                           
   897                           ;lcd.c: 75: lcdInst(0b11000000);
   898                           
   899                           ;incstack = 0
   900  0013F0  0EC0               	movlw	192
   901  0013F2  ECCC  F009         	call	_lcdInst
   902  0013F6  0012               	return		;funcret
   903  0013F8                     __end_of_lcdNewline:
   904                           	opt stack 0
   905                           tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           tblptrl	equ	0xFF6
   908                           tablat	equ	0xFF5
   909                           prodh	equ	0xFF4
   910                           prodl	equ	0xFF3
   911                           wreg	equ	0xFE8
   912                           postinc2	equ	0xFDE
   913                           postdec2	equ	0xFDD
   914                           fsr2h	equ	0xFDA
   915                           fsr2l	equ	0xFD9
   916                           status	equ	0xFD8
   917                           
   918 ;; *************** function ___lwmod *****************
   919 ;; Defined at:
   920 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  dividend        2    7[COMRAM] unsigned int 
   923 ;;  divisor         2    9[COMRAM] unsigned int 
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  counter         1   11[COMRAM] unsigned char 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  2    7[COMRAM] unsigned int 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   938 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;Total ram usage:        5 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_printf
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text5
   949  001334                     __ptext5:
   950                           	opt stack 0
   951  001334                     ___lwmod:
   952                           	opt stack 29
   953                           
   954                           ;incstack = 0
   955  001334  500A               	movf	___lwmod@divisor,w,c
   956  001336  100B               	iorwf	___lwmod@divisor+1,w,c
   957  001338  B4D8               	btfsc	status,2,c
   958  00133A  D018               	goto	l665
   959  00133C  0E01               	movlw	1
   960  00133E  6E0C               	movwf	___lwmod@counter,c
   961  001340  D004               	goto	l1238
   962  001342                     l1236:
   963  001342  90D8               	bcf	status,0,c
   964  001344  360A               	rlcf	___lwmod@divisor,f,c
   965  001346  360B               	rlcf	___lwmod@divisor+1,f,c
   966  001348  2A0C               	incf	___lwmod@counter,f,c
   967  00134A                     l1238:
   968  00134A  AE0B               	btfss	___lwmod@divisor+1,7,c
   969  00134C  D7FA               	goto	l1236
   970  00134E                     l1240:
   971  00134E  500A               	movf	___lwmod@divisor,w,c
   972  001350  5C08               	subwf	___lwmod@dividend,w,c
   973  001352  500B               	movf	___lwmod@divisor+1,w,c
   974  001354  5809               	subwfb	___lwmod@dividend+1,w,c
   975  001356  A0D8               	btfss	status,0,c
   976  001358  D004               	goto	l1244
   977  00135A  500A               	movf	___lwmod@divisor,w,c
   978  00135C  5E08               	subwf	___lwmod@dividend,f,c
   979  00135E  500B               	movf	___lwmod@divisor+1,w,c
   980  001360  5A09               	subwfb	___lwmod@dividend+1,f,c
   981  001362                     l1244:
   982  001362  90D8               	bcf	status,0,c
   983  001364  320B               	rrcf	___lwmod@divisor+1,f,c
   984  001366  320A               	rrcf	___lwmod@divisor,f,c
   985  001368  2E0C               	decfsz	___lwmod@counter,f,c
   986  00136A  D7F1               	goto	l1240
   987  00136C                     l665:
   988  00136C  C008  F008         	movff	___lwmod@dividend,?___lwmod
   989  001370  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   990  001374  0012               	return		;funcret
   991  001376                     __end_of___lwmod:
   992                           	opt stack 0
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           prodh	equ	0xFF4
   998                           prodl	equ	0xFF3
   999                           wreg	equ	0xFE8
  1000                           postinc2	equ	0xFDE
  1001                           postdec2	equ	0xFDD
  1002                           fsr2h	equ	0xFDA
  1003                           fsr2l	equ	0xFD9
  1004                           status	equ	0xFD8
  1005                           
  1006 ;; *************** function ___lwdiv *****************
  1007 ;; Defined at:
  1008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;  dividend        2    0[COMRAM] unsigned int 
  1011 ;;  divisor         2    2[COMRAM] unsigned int 
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;  quotient        2    4[COMRAM] unsigned int 
  1014 ;;  counter         1    6[COMRAM] unsigned char 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  2    0[COMRAM] unsigned int 
  1017 ;; Registers used:
  1018 ;;		wreg, status,2, status,0
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;Total ram usage:        7 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; This function calls:
  1031 ;;		Nothing
  1032 ;; This function is called by:
  1033 ;;		_printf
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           	psect	text6
  1038  001252                     __ptext6:
  1039                           	opt stack 0
  1040  001252                     ___lwdiv:
  1041                           	opt stack 29
  1042                           
  1043                           ;incstack = 0
  1044  001252  0E00               	movlw	0
  1045  001254  6E06               	movwf	___lwdiv@quotient+1,c
  1046  001256  0E00               	movlw	0
  1047  001258  6E05               	movwf	___lwdiv@quotient,c
  1048  00125A  5003               	movf	___lwdiv@divisor,w,c
  1049  00125C  1004               	iorwf	___lwdiv@divisor+1,w,c
  1050  00125E  B4D8               	btfsc	status,2,c
  1051  001260  D01C               	goto	l655
  1052  001262  0E01               	movlw	1
  1053  001264  6E07               	movwf	___lwdiv@counter,c
  1054  001266  D004               	goto	l1218
  1055  001268                     l1216:
  1056  001268  90D8               	bcf	status,0,c
  1057  00126A  3603               	rlcf	___lwdiv@divisor,f,c
  1058  00126C  3604               	rlcf	___lwdiv@divisor+1,f,c
  1059  00126E  2A07               	incf	___lwdiv@counter,f,c
  1060  001270                     l1218:
  1061  001270  AE04               	btfss	___lwdiv@divisor+1,7,c
  1062  001272  D7FA               	goto	l1216
  1063  001274                     l1220:
  1064  001274  90D8               	bcf	status,0,c
  1065  001276  3605               	rlcf	___lwdiv@quotient,f,c
  1066  001278  3606               	rlcf	___lwdiv@quotient+1,f,c
  1067  00127A  5003               	movf	___lwdiv@divisor,w,c
  1068  00127C  5C01               	subwf	___lwdiv@dividend,w,c
  1069  00127E  5004               	movf	___lwdiv@divisor+1,w,c
  1070  001280  5802               	subwfb	___lwdiv@dividend+1,w,c
  1071  001282  A0D8               	btfss	status,0,c
  1072  001284  D005               	goto	l1228
  1073  001286  5003               	movf	___lwdiv@divisor,w,c
  1074  001288  5E01               	subwf	___lwdiv@dividend,f,c
  1075  00128A  5004               	movf	___lwdiv@divisor+1,w,c
  1076  00128C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1077  00128E  8005               	bsf	___lwdiv@quotient,0,c
  1078  001290                     l1228:
  1079  001290  90D8               	bcf	status,0,c
  1080  001292  3204               	rrcf	___lwdiv@divisor+1,f,c
  1081  001294  3203               	rrcf	___lwdiv@divisor,f,c
  1082  001296  2E07               	decfsz	___lwdiv@counter,f,c
  1083  001298  D7ED               	goto	l1220
  1084  00129A                     l655:
  1085  00129A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1086  00129E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1087  0012A2  0012               	return		;funcret
  1088  0012A4                     __end_of___lwdiv:
  1089                           	opt stack 0
  1090                           tblptru	equ	0xFF8
  1091                           tblptrh	equ	0xFF7
  1092                           tblptrl	equ	0xFF6
  1093                           tablat	equ	0xFF5
  1094                           prodh	equ	0xFF4
  1095                           prodl	equ	0xFF3
  1096                           wreg	equ	0xFE8
  1097                           postinc2	equ	0xFDE
  1098                           postdec2	equ	0xFDD
  1099                           fsr2h	equ	0xFDA
  1100                           fsr2l	equ	0xFD9
  1101                           status	equ	0xFD8
  1102                           
  1103 ;; *************** function _initLCD *****************
  1104 ;; Defined at:
  1105 ;;		line 15 in file "lcd.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;		None
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;		None
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      void 
  1112 ;; Registers used:
  1113 ;;		wreg, status,2, status,0, cstack
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;Total ram usage:        1 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; Hardware stack levels required when called:    2
  1126 ;; This function calls:
  1127 ;;		_lcdInst
  1128 ;; This function is called by:
  1129 ;;		_main
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           	psect	text7
  1134  0012EE                     __ptext7:
  1135                           	opt stack 0
  1136  0012EE                     _initLCD:
  1137                           	opt stack 28
  1138                           
  1139                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  1140                           
  1141                           ;incstack = 0
  1142  0012EE  0E27               	movlw	39
  1143  0012F0  6E05               	movwf	??_initLCD& (0+255),c
  1144  0012F2  0EF5               	movlw	245
  1145  0012F4                     u627:
  1146  0012F4  2EE8               	decfsz	wreg,f,c
  1147  0012F6  D7FE               	bra	u627
  1148  0012F8  2E05               	decfsz	??_initLCD& (0+255),f,c
  1149  0012FA  D7FC               	bra	u627
  1150  0012FC  F000               	nop	
  1151                           
  1152                           ;lcd.c: 18: lcdInst(0b00110011);
  1153  0012FE  0E33               	movlw	51
  1154  001300  ECCC  F009         	call	_lcdInst
  1155                           
  1156                           ;lcd.c: 19: lcdInst(0b00110010);
  1157  001304  0E32               	movlw	50
  1158  001306  ECCC  F009         	call	_lcdInst
  1159                           
  1160                           ;lcd.c: 20: lcdInst(0b00101000);
  1161  00130A  0E28               	movlw	40
  1162  00130C  ECCC  F009         	call	_lcdInst
  1163                           
  1164                           ;lcd.c: 21: lcdInst(0b00001111);
  1165  001310  0E0F               	movlw	15
  1166  001312  ECCC  F009         	call	_lcdInst
  1167                           
  1168                           ;lcd.c: 22: lcdInst(0b00000110);
  1169  001316  0E06               	movlw	6
  1170  001318  ECCC  F009         	call	_lcdInst
  1171                           
  1172                           ;lcd.c: 23: lcdInst(0b00000001);
  1173  00131C  0E01               	movlw	1
  1174  00131E  ECCC  F009         	call	_lcdInst
  1175                           
  1176                           ;lcd.c: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
  1177  001322  0E27               	movlw	39
  1178  001324  6E05               	movwf	??_initLCD& (0+255),c
  1179  001326  0EF5               	movlw	245
  1180  001328                     u637:
  1181  001328  2EE8               	decfsz	wreg,f,c
  1182  00132A  D7FE               	bra	u637
  1183  00132C  2E05               	decfsz	??_initLCD& (0+255),f,c
  1184  00132E  D7FC               	bra	u637
  1185  001330  F000               	nop	
  1186  001332  0012               	return		;funcret
  1187  001334                     __end_of_initLCD:
  1188                           	opt stack 0
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           prodh	equ	0xFF4
  1194                           prodl	equ	0xFF3
  1195                           wreg	equ	0xFE8
  1196                           postinc2	equ	0xFDE
  1197                           postdec2	equ	0xFDD
  1198                           fsr2h	equ	0xFDA
  1199                           fsr2l	equ	0xFD9
  1200                           status	equ	0xFD8
  1201                           
  1202 ;; *************** function _lcdInst *****************
  1203 ;; Defined at:
  1204 ;;		line 27 in file "lcd.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  data            1    wreg     unsigned char 
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  data            1    3[COMRAM] unsigned char 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, status,2, status,0, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1222 ;;Total ram usage:        2 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    1
  1225 ;; This function calls:
  1226 ;;		_lcdNibble
  1227 ;; This function is called by:
  1228 ;;		_initLCD
  1229 ;;		_lcdNewline
  1230 ;;		_lcdClear
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text8
  1235  001398                     __ptext8:
  1236                           	opt stack 0
  1237  001398                     _lcdInst:
  1238                           	opt stack 26
  1239                           
  1240                           ;incstack = 0
  1241                           ;lcdInst@data stored from wreg
  1242  001398  6E04               	movwf	lcdInst@data,c
  1243                           
  1244                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  1245  00139A  948C               	bcf	3980,2,c	;volatile
  1246                           
  1247                           ;lcd.c: 29: _delay((unsigned long)((140)*(8000000/4000000.0)));
  1248  00139C  0E5D               	movlw	93
  1249  00139E                     u647:
  1250  00139E  2EE8               	decfsz	wreg,f,c
  1251  0013A0  D7FE               	bra	u647
  1252  0013A2  F000               	nop	
  1253                           
  1254                           ;lcd.c: 30: lcdNibble(data);
  1255  0013A4  5004               	movf	lcdInst@data,w,c
  1256  0013A6  ECFE  F008         	call	_lcdNibble
  1257                           
  1258                           ;lcd.c: 31: _delay((unsigned long)((1000)*(8000000/4000000.0)));
  1259  0013AA  0E03               	movlw	3
  1260  0013AC  6E03               	movwf	??_lcdInst& (0+255),c
  1261  0013AE  0E98               	movlw	152
  1262  0013B0                     u657:
  1263  0013B0  2EE8               	decfsz	wreg,f,c
  1264  0013B2  D7FE               	bra	u657
  1265  0013B4  2E03               	decfsz	??_lcdInst& (0+255),f,c
  1266  0013B6  D7FC               	bra	u657
  1267  0013B8  0012               	return		;funcret
  1268  0013BA                     __end_of_lcdInst:
  1269                           	opt stack 0
  1270                           tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           prodh	equ	0xFF4
  1275                           prodl	equ	0xFF3
  1276                           wreg	equ	0xFE8
  1277                           postinc2	equ	0xFDE
  1278                           postdec2	equ	0xFDD
  1279                           fsr2h	equ	0xFDA
  1280                           fsr2l	equ	0xFD9
  1281                           status	equ	0xFD8
  1282                           
  1283 ;; *************** function _lcdNibble *****************
  1284 ;; Defined at:
  1285 ;;		line 46 in file "lcd.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;  data            1    wreg     unsigned char 
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;  data            1    1[COMRAM] unsigned char 
  1290 ;;  temp            1    0[COMRAM] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1301 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1303 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;Total ram usage:        2 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_lcdInst
  1310 ;;		_putch
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           	psect	text9
  1315  0011FC                     __ptext9:
  1316                           	opt stack 0
  1317  0011FC                     _lcdNibble:
  1318                           	opt stack 28
  1319                           
  1320                           ;incstack = 0
  1321                           ;lcdNibble@data stored from wreg
  1322  0011FC  6E02               	movwf	lcdNibble@data,c
  1323                           
  1324                           ;lcd.c: 48: char temp = data & 0xF0;
  1325  0011FE  5002               	movf	lcdNibble@data,w,c
  1326  001200  0BF0               	andlw	240
  1327  001202  6E01               	movwf	lcdNibble@temp,c
  1328                           
  1329                           ;lcd.c: 49: LATD = LATD & 0x0F;
  1330  001204  508C               	movf	3980,w,c	;volatile
  1331  001206  0B0F               	andlw	15
  1332  001208  6E8C               	movwf	3980,c	;volatile
  1333                           
  1334                           ;lcd.c: 50: LATD = temp | LATD;
  1335  00120A  5001               	movf	lcdNibble@temp,w,c
  1336  00120C  108C               	iorwf	3980,w,c	;volatile
  1337  00120E  6E8C               	movwf	3980,c	;volatile
  1338                           
  1339                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  1340  001210  968C               	bcf	3980,3,c	;volatile
  1341                           
  1342                           ;lcd.c: 53: _delay((unsigned long)((600)*(8000000/4000000.0)));
  1343  001212  0EF0               	movlw	240
  1344  001214                     u667:
  1345  001214  D000               	nop2	
  1346  001216  2EE8               	decfsz	wreg,f,c
  1347  001218  D7FD               	bra	u667
  1348                           
  1349                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  1350  00121A  868C               	bsf	3980,3,c	;volatile
  1351                           
  1352                           ;lcd.c: 55: _delay((unsigned long)((600)*(8000000/4000000.0)));
  1353  00121C  0EF0               	movlw	240
  1354  00121E                     u677:
  1355  00121E  D000               	nop2	
  1356  001220  2EE8               	decfsz	wreg,f,c
  1357  001222  D7FD               	bra	u677
  1358                           
  1359                           ;lcd.c: 58: data = data << 4;
  1360  001224  3802               	swapf	lcdNibble@data,w,c
  1361  001226  0BF0               	andlw	240
  1362  001228  6E02               	movwf	lcdNibble@data,c
  1363                           
  1364                           ;lcd.c: 60: temp = data & 0xF0;
  1365  00122A  5002               	movf	lcdNibble@data,w,c
  1366  00122C  0BF0               	andlw	240
  1367  00122E  6E01               	movwf	lcdNibble@temp,c
  1368                           
  1369                           ;lcd.c: 61: LATD = LATD & 0x0F;
  1370  001230  508C               	movf	3980,w,c	;volatile
  1371  001232  0B0F               	andlw	15
  1372  001234  6E8C               	movwf	3980,c	;volatile
  1373                           
  1374                           ;lcd.c: 62: LATD = temp | LATD;
  1375  001236  5001               	movf	lcdNibble@temp,w,c
  1376  001238  108C               	iorwf	3980,w,c	;volatile
  1377  00123A  6E8C               	movwf	3980,c	;volatile
  1378                           
  1379                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  1380  00123C  968C               	bcf	3980,3,c	;volatile
  1381                           
  1382                           ;lcd.c: 65: _delay((unsigned long)((600)*(8000000/4000000.0)));
  1383  00123E  0EF0               	movlw	240
  1384  001240                     u687:
  1385  001240  D000               	nop2	
  1386  001242  2EE8               	decfsz	wreg,f,c
  1387  001244  D7FD               	bra	u687
  1388                           
  1389                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  1390  001246  868C               	bsf	3980,3,c	;volatile
  1391                           
  1392                           ;lcd.c: 67: _delay((unsigned long)((600)*(8000000/4000000.0)));
  1393  001248  0EF0               	movlw	240
  1394  00124A                     u697:
  1395  00124A  D000               	nop2	
  1396  00124C  2EE8               	decfsz	wreg,f,c
  1397  00124E  D7FD               	bra	u697
  1398  001250  0012               	return		;funcret
  1399  001252                     __end_of_lcdNibble:
  1400                           	opt stack 0
  1401                           tblptru	equ	0xFF8
  1402                           tblptrh	equ	0xFF7
  1403                           tblptrl	equ	0xFF6
  1404                           tablat	equ	0xFF5
  1405                           prodh	equ	0xFF4
  1406                           prodl	equ	0xFF3
  1407                           wreg	equ	0xFE8
  1408                           postinc2	equ	0xFDE
  1409                           postdec2	equ	0xFDD
  1410                           fsr2h	equ	0xFDA
  1411                           fsr2l	equ	0xFD9
  1412                           status	equ	0xFD8
  1413                           
  1414 ;; *************** function _eepromWrite *****************
  1415 ;; Defined at:
  1416 ;;		line 22 in file "eeprom.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  data            2    0[COMRAM] int 
  1419 ;;  address         4    2[COMRAM] long 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  ien             2    7[COMRAM] int 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, status,2, status,0
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1431 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;Total ram usage:        9 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text10
  1445  0012A4                     __ptext10:
  1446                           	opt stack 0
  1447  0012A4                     _eepromWrite:
  1448                           	opt stack 30
  1449  0012A4                     l213:
  1450  0012A4  B2A6               	btfsc	4006,1,c	;volatile
  1451  0012A6  D7FE               	goto	l213
  1452                           
  1453                           ;eeprom.c: 26: int ien = INTCONbits.GIE;
  1454  0012A8  AEF2               	btfss	intcon,7,c	;volatile
  1455  0012AA  D003               	goto	u540
  1456  0012AC  6A07               	clrf	??_eepromWrite& (0+255),c
  1457  0012AE  2A07               	incf	??_eepromWrite& (0+255),f,c
  1458  0012B0  D001               	goto	u548
  1459  0012B2                     u540:
  1460  0012B2  6A07               	clrf	??_eepromWrite& (0+255),c
  1461  0012B4                     u548:
  1462  0012B4  5007               	movf	??_eepromWrite,w,c
  1463  0012B6  6E08               	movwf	eepromWrite@ien,c
  1464  0012B8  6A09               	clrf	eepromWrite@ien+1,c
  1465                           
  1466                           ;eeprom.c: 27: (INTCONbits.GIE = 0);
  1467  0012BA  9EF2               	bcf	intcon,7,c	;volatile
  1468                           
  1469                           ;eeprom.c: 28: EEADR = address;
  1470  0012BC  C003  FFA9         	movff	eepromWrite@address,4009	;volatile
  1471                           
  1472                           ;eeprom.c: 29: EEADRH = (address>>8) & 0b11;
  1473  0012C0  5004               	movf	eepromWrite@address+1,w,c
  1474  0012C2  0B03               	andlw	3
  1475  0012C4  6EAA               	movwf	4010,c	;volatile
  1476                           
  1477                           ;eeprom.c: 30: EEDATA = data;
  1478  0012C6  C001  FFA8         	movff	eepromWrite@data,4008	;volatile
  1479                           
  1480                           ;eeprom.c: 31: EECON1 = 0b100;
  1481  0012CA  0E04               	movlw	4
  1482  0012CC  6EA6               	movwf	4006,c	;volatile
  1483                           
  1484                           ;eeprom.c: 33: EECON2 = 0x55;
  1485  0012CE  0E55               	movlw	85
  1486  0012D0  6EA7               	movwf	4007,c	;volatile
  1487                           
  1488                           ;eeprom.c: 34: EECON2 = 0xaa;
  1489  0012D2  0EAA               	movlw	170
  1490  0012D4  6EA7               	movwf	4007,c	;volatile
  1491                           
  1492                           ;eeprom.c: 38: EECON1 |= 0b10;
  1493  0012D6  82A6               	bsf	4006,1,c	;volatile
  1494  0012D8                     l216:
  1495  0012D8  B2A6               	btfsc	4006,1,c	;volatile
  1496  0012DA  D7FE               	goto	l216
  1497                           
  1498                           ;eeprom.c: 41: EEIF = 0;
  1499  0012DC  98A1               	bcf	4001,4,c	;volatile
  1500                           
  1501                           ;eeprom.c: 43: EECON1 = 0;
  1502  0012DE  0E00               	movlw	0
  1503  0012E0  6EA6               	movwf	4006,c	;volatile
  1504                           
  1505                           ;eeprom.c: 44: INTCONbits.GIE = ien;
  1506  0012E2  B008               	btfsc	eepromWrite@ien,0,c
  1507  0012E4  D002               	bra	u565
  1508  0012E6  9EF2               	bcf	intcon,7,c	;volatile
  1509  0012E8  D001               	bra	u566
  1510  0012EA                     u565:
  1511  0012EA  8EF2               	bsf	intcon,7,c	;volatile
  1512  0012EC                     u566:
  1513  0012EC  0012               	return		;funcret
  1514  0012EE                     __end_of_eepromWrite:
  1515                           	opt stack 0
  1516                           tblptru	equ	0xFF8
  1517                           tblptrh	equ	0xFF7
  1518                           tblptrl	equ	0xFF6
  1519                           tablat	equ	0xFF5
  1520                           prodh	equ	0xFF4
  1521                           prodl	equ	0xFF3
  1522                           intcon	equ	0xFF2
  1523                           wreg	equ	0xFE8
  1524                           postinc2	equ	0xFDE
  1525                           postdec2	equ	0xFDD
  1526                           fsr2h	equ	0xFDA
  1527                           fsr2l	equ	0xFD9
  1528                           status	equ	0xFD8
  1529                           
  1530 ;; *************** function _eepromRead *****************
  1531 ;; Defined at:
  1532 ;;		line 47 in file "eeprom.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  address         4    0[COMRAM] long 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  2    0[COMRAM] int 
  1539 ;; Registers used:
  1540 ;;		wreg, status,2, status,0
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1546 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1549 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;Total ram usage:        4 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text11
  1560  0013BA                     __ptext11:
  1561                           	opt stack 0
  1562  0013BA                     _eepromRead:
  1563                           	opt stack 30
  1564                           
  1565                           ;eeprom.c: 48: EEADR = address;
  1566                           
  1567                           ;incstack = 0
  1568  0013BA  C001  FFA9         	movff	eepromRead@address,4009	;volatile
  1569                           
  1570                           ;eeprom.c: 49: EEADRH = (address>>8) & 0b11;
  1571  0013BE  5002               	movf	eepromRead@address+1,w,c
  1572  0013C0  0B03               	andlw	3
  1573  0013C2  6EAA               	movwf	4010,c	;volatile
  1574                           
  1575                           ;eeprom.c: 50: EECON1 = 0;
  1576  0013C4  0E00               	movlw	0
  1577  0013C6  6EA6               	movwf	4006,c	;volatile
  1578                           
  1579                           ;eeprom.c: 51: EECON1 = 1;
  1580  0013C8  0E01               	movlw	1
  1581  0013CA  6EA6               	movwf	4006,c	;volatile
  1582                           
  1583                           ;eeprom.c: 52: return EEDATA;
  1584  0013CC  CFA8 F001          	movff	4008,?_eepromRead	;volatile
  1585  0013D0  6A02               	clrf	?_eepromRead+1,c
  1586  0013D2  0012               	return	
  1587  0013D4                     __end_of_eepromRead:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           prodh	equ	0xFF4
  1594                           prodl	equ	0xFF3
  1595                           intcon	equ	0xFF2
  1596                           wreg	equ	0xFE8
  1597                           postinc2	equ	0xFDE
  1598                           postdec2	equ	0xFDD
  1599                           fsr2h	equ	0xFDA
  1600                           fsr2l	equ	0xFD9
  1601                           status	equ	0xFD8
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           prodh	equ	0xFF4
  1607                           prodl	equ	0xFF3
  1608                           intcon	equ	0xFF2
  1609                           wreg	equ	0xFE8
  1610                           postinc2	equ	0xFDE
  1611                           postdec2	equ	0xFDD
  1612                           fsr2h	equ	0xFDA
  1613                           fsr2l	equ	0xFD9
  1614                           status	equ	0xFD8
  1615                           
  1616                           	psect	rparam
  1617  0000                     tblptru	equ	0xFF8
  1618                           tblptrh	equ	0xFF7
  1619                           tblptrl	equ	0xFF6
  1620                           tablat	equ	0xFF5
  1621                           prodh	equ	0xFF4
  1622                           prodl	equ	0xFF3
  1623                           intcon	equ	0xFF2
  1624                           wreg	equ	0xFE8
  1625                           postinc2	equ	0xFDE
  1626                           postdec2	equ	0xFDD
  1627                           fsr2h	equ	0xFDA
  1628                           fsr2l	equ	0xFD9
  1629                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    27
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     24      24
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[3]), STR_3(CODE[8]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _lcdNewline->_lcdInst
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1898
                         _eepromRead
                        _eepromWrite
                            _initLCD
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (1) _readKeypad                                           1     1      0       5
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1414
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                         _eepromRead (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                              4 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNewline                                           0     0      0      90
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              4 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              2     2      0      90
                                              2 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _eepromWrite                                          9     3      6     217
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _eepromRead                                           4     0      4     172
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eepromRead
   _eepromWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _eepromRead (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _readKeypad

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     18      18       1       18.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 24 11:20:19 2017

                     l71 1386              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l102 13D4                      l105 13E0  
                    l213 12A4                      l216 12D8                      l655 129A  
                    l665 136C             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    u540 12B2                      u617 138A                      u627 12F4  
                    u548 12B4                      u565 12EA                      u637 1328  
                    u566 12EC                      u647 139E                      u657 13B0  
                    u667 1214                      u677 121E                      u687 1240  
                    u697 124A                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1220 1274                     l1216 1268  
                   l1240 134E                     l1218 1270                     l1250 1036  
                   l1228 1290                     l1244 1362                     l1236 1342  
                   l1260 1070                     l1238 134A                     l1270 1098  
                   l1254 1046                     l1272 109C                     l1290 10E0  
                   l1284 10C8                     l1372 11CE                     l1294 1128  
                   l1288 10DA                     l1296 1130                     _EEIF 007D0C  
                   STR_1 1029                     STR_2 1027                     STR_3 101C  
                   STR_4 1024                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _LATE 000F8D  
                   _main 114A                     _keys 1001                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ?_main 0001                    _EEADR 000FA9  
        __end_of___lwdiv 12A4          __end_of___lwmod 1376                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 13BA           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_initLCD 1334           __CFG_EBTRB$OFF 000000  
        __end_of_dpowers 101C           eepromWrite@ien 0008                    _putch 1376  
                  tablat 000FF5                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 13E6             __end_of_main 11FC             __end_of_keys 1012  
                 ??_main 0019            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADRESH 000FC4  
                 _EEADRH 000FAA                   _ADRESL 000FC3                   _EEDATA 000FA8  
                 _EECON1 000FA6                   _EECON2 000FA7                   ?_putch 0001  
         __CFG_XINST$OFF 000000     __size_of_eepromWrite 004A           __CFG_STVREN$ON 000000  
              ??___lwdiv 0005                ??___lwmod 000C          eepromWrite@data 0001  
              ??_lcdInst 0003                   _printf 102C                ??_initLCD 0005  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 13E6  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 1398  
     __size_of_lcdNibble 0056        eepromRead@address 0001                  ??_putch 0005  
             _lcdNewline 13F0                  ?_printf 000D               _eepromRead 13BA  
      __end_of_lcdNibble 1252                  __Hparam 0000                  __Lparam 0000  
             _readKeypad 13D4                  ___lwdiv 1252                  ___lwmod 1334  
           __psmallconst 1000                  __pcinit 13E6                  __ramtop 1000  
                _lcdInst 1398                  __ptext0 114A                  __ptext1 13D4  
                __ptext2 102C                  __ptext3 1376                  __ptext4 13F0  
                __ptext5 1334                  __ptext6 1252                  __ptext7 12EE  
                __ptext8 1398                  __ptext9 11FC          __size_of_printf 011E  
                _initLCD 12EE                  _dpowers 1012     end_of_initialization 13E6  
          __Lmediumconst 0000                  printf@c 0018                  printf@f 000D  
                postdec2 000FDD                  postinc2 000FDE              ?_lcdNewline 0001  
              _PORTBbits 000F81              ?_eepromRead 0001            ??_eepromWrite 0007  
            ?_readKeypad 0001           __end_of_printf 114A      start_initialization 13E6  
    __size_of_lcdNewline 0008      __size_of_eepromRead 001A      __end_of_eepromWrite 12EE  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0011      __size_of_readKeypad 0012  
       ___lwdiv@dividend 0001        __CFG_CCP2MX$PORTC 000000                _lcdNibble 11FC  
               ?___lwdiv 0001                 ?___lwmod 0008                 ?_lcdInst 0001  
               ?_initLCD 0001              __smallconst 1000         ___lwdiv@quotient 0005  
         __size_of_putch 0022       eepromWrite@address 0003                 _LATDbits 000F8C  
            _eepromWrite 12A4         __CFG_WDTPS$32768 000000               ?_lcdNibble 0001  
           ??_lcdNewline 0005            lcdNibble@data 0002             ??_eepromRead 0005  
             printf@flag 0014            lcdNibble@temp 0001               printf@prec 0015  
     __end_of_lcdNewline 13F8            readKeypad@key 0001                 __Hrparam 0000  
               __Lrparam 0000       __end_of_eepromRead 13D4       __CFG_BOREN$SBORDIS 000000  
           ??_readKeypad 0001         __size_of___lwdiv 0052         __size_of___lwmod 0042  
       __size_of_lcdInst 0022         __size_of_initLCD 0046          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007                 __ptext10 12A4                 __ptext11 13BA  
     __end_of_readKeypad 13E6            __size_of_main 00B2              ??_lcdNibble 0001  
              printf@val 0016                putch@data 0005               _INTCONbits 000FF2  
       ___lwmod@dividend 0008                 printf@ap 0012              lcdInst@data 0004  
        ___lwmod@divisor 000A          ___lwmod@counter 000C             ?_eepromWrite 0001  
