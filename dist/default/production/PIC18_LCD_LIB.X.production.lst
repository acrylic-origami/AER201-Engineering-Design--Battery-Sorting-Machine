

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 04 15:23:59 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           ; Version 1.40
    82                           ; Generated 01/12/2016 GMT
    83                           ; 
    84                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F4620 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     
   116                           	psect	idataCOMRAM
   117  003A36                     __pidataCOMRAM:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _V_LIM_9V
   121  003A36  77                 	db	119
   122  003A37  EE                 	db	238
   123  003A38  3F                 	db	63
   124                           
   125                           ;initializer for _V_LIM_AA
   126  003A39  C1                 	db	193
   127  003A3A  4A                 	db	74
   128  003A3B  3E                 	db	62
   129                           
   130                           ;initializer for _V_LIM_C
   131  003A3C  A7                 	db	167
   132  003A3D  A9                 	db	169
   133  003A3E  3F                 	db	63
   134                           
   135                           ;initializer for _padAngle_CLOSE
   136  003A3F  0046               	dw	70
   137                           
   138                           ;initializer for _padAngle_NEUTRAL
   139  003A41  0082               	dw	130
   140                           
   141                           ;initializer for _redirectAngle_AA
   142  003A43  008A               	dw	138
   143                           
   144                           ;initializer for _redirectAngle_OTHER
   145  003A45  0099               	dw	153
   146                           
   147                           ;initializer for _stoppingTime
   148  003A47  2710               	dw	10000
   149                           
   150                           ;initializer for _padServo
   151  003A49  0002               	dw	2
   152  003A4B  0001               	dw	1
   153                           
   154                           	psect	idataBANK1
   155  003952                     __pidataBANK1:
   156                           	opt stack 0
   157                           
   158                           ;initializer for _cylinderDir
   159  003952  0003               	dw	3
   160  003954  0001               	dw	1
   161                           
   162                           ;initializer for _angle
   163  003956  005A               	dw	90
   164                           
   165                           ;initializer for _padAngle_OPEN
   166  003958  00B4               	dw	180
   167                           
   168                           ;initializer for _redirectAngle_9V
   169  00395A  0076               	dw	118
   170                           
   171                           ;initializer for _redirectAngle_C
   172  00395C  00A6               	dw	166
   173                           
   174                           ;initializer for _AA_float
   175  00395E  0002               	dw	2
   176  003960  0005               	dw	5
   177                           
   178                           ;initializer for _conveyorServo
   179  003962  0002               	dw	2
   180  003964  0002               	dw	2
   181                           
   182                           ;initializer for _cylinderMotor
   183  003966  0002               	dw	2
   184  003968  0000               	dw	0
   185                           
   186                           ;initializer for _padPin1
   187  00396A  0002               	dw	2
   188  00396C  0006               	dw	6
   189                           
   190                           ;initializer for _padPin2
   191  00396E  0002               	dw	2
   192  003970  0007               	dw	7
   193                           
   194                           ;initializer for _redirectingServo
   195  003972  0003               	dw	3
   196  003974  0000               	dw	0
   197                           
   198                           	psect	mediumconst
   199  00FE08                     __pmediumconst:
   200                           	opt stack 0
   201  00FE08  00                 	db	0
   202  00FE09                     _dpowers:
   203                           	opt stack 0
   204  00FE09  0001               	dw	1
   205  00FE0B  0000               	dw	0
   206  00FE0D  000A               	dw	10
   207  00FE0F  0000               	dw	0
   208  00FE11  0064               	dw	100
   209  00FE13  0000               	dw	0
   210  00FE15  03E8               	dw	1000
   211  00FE17  0000               	dw	0
   212  00FE19  2710               	dw	10000
   213  00FE1B  0000               	dw	0
   214  00FE1D  86A0               	dw	34464
   215  00FE1F  0001               	dw	1
   216  00FE21  4240               	dw	16960
   217  00FE23  000F               	dw	15
   218  00FE25  9680               	dw	38528
   219  00FE27  0098               	dw	152
   220  00FE29  E100               	dw	57600
   221  00FE2B  05F5               	dw	1525
   222  00FE2D  CA00               	dw	51712
   223  00FE2F  3B9A               	dw	15258
   224  00FE31                     __end_of_dpowers:
   225                           	opt stack 0
   226  00FE31                     __npowers_:
   227                           	opt stack 0
   228  00FE31  00                 	db	0
   229  00FE32  80                 	db	128
   230  00FE33  3F                 	db	63
   231  00FE34  CD                 	db	205
   232  00FE35  CC                 	db	204
   233  00FE36  3D                 	db	61
   234  00FE37  D7                 	db	215
   235  00FE38  23                 	db	35
   236  00FE39  3C                 	db	60
   237  00FE3A  12                 	db	18
   238  00FE3B  83                 	db	131
   239  00FE3C  3A                 	db	58
   240  00FE3D  B7                 	db	183
   241  00FE3E  D1                 	db	209
   242  00FE3F  38                 	db	56
   243  00FE40  C6                 	db	198
   244  00FE41  27                 	db	39
   245  00FE42  37                 	db	55
   246  00FE43  38                 	db	56
   247  00FE44  86                 	db	134
   248  00FE45  35                 	db	53
   249  00FE46  C0                 	db	192
   250  00FE47  D6                 	db	214
   251  00FE48  33                 	db	51
   252  00FE49  CC                 	db	204
   253  00FE4A  2B                 	db	43
   254  00FE4B  32                 	db	50
   255  00FE4C  70                 	db	112
   256  00FE4D  89                 	db	137
   257  00FE4E  30                 	db	48
   258  00FE4F  E7                 	db	231
   259  00FE50  DB                 	db	219
   260  00FE51  2E                 	db	46
   261  00FE52  E5                 	db	229
   262  00FE53  3C                 	db	60
   263  00FE54  1E                 	db	30
   264  00FE55  42                 	db	66
   265  00FE56  A2                 	db	162
   266  00FE57  0D                 	db	13
   267  00FE58                     __end_of__npowers_:
   268                           	opt stack 0
   269  00FE58                     __powers_:
   270                           	opt stack 0
   271  00FE58  00                 	db	0
   272  00FE59  80                 	db	128
   273  00FE5A  3F                 	db	63
   274  00FE5B  00                 	db	0
   275  00FE5C  20                 	db	32
   276  00FE5D  41                 	db	65
   277  00FE5E  00                 	db	0
   278  00FE5F  C8                 	db	200
   279  00FE60  42                 	db	66
   280  00FE61  00                 	db	0
   281  00FE62  7A                 	db	122
   282  00FE63  44                 	db	68
   283  00FE64  40                 	db	64
   284  00FE65  1C                 	db	28
   285  00FE66  46                 	db	70
   286  00FE67  50                 	db	80
   287  00FE68  C3                 	db	195
   288  00FE69  47                 	db	71
   289  00FE6A  24                 	db	36
   290  00FE6B  74                 	db	116
   291  00FE6C  49                 	db	73
   292  00FE6D  97                 	db	151
   293  00FE6E  18                 	db	24
   294  00FE6F  4B                 	db	75
   295  00FE70  BC                 	db	188
   296  00FE71  BE                 	db	190
   297  00FE72  4C                 	db	76
   298  00FE73  6B                 	db	107
   299  00FE74  6E                 	db	110
   300  00FE75  4E                 	db	78
   301  00FE76  03                 	db	3
   302  00FE77  15                 	db	21
   303  00FE78  50                 	db	80
   304  00FE79  79                 	db	121
   305  00FE7A  AD                 	db	173
   306  00FE7B  60                 	db	96
   307  00FE7C  F3                 	db	243
   308  00FE7D  49                 	db	73
   309  00FE7E  71                 	db	113
   310  00FE7F                     __end_of__powers_:
   311                           	opt stack 0
   312  00FE7F                     _hexpowers:
   313                           	opt stack 0
   314  00FE7F  0001               	dw	1
   315  00FE81  0000               	dw	0
   316  00FE83  0010               	dw	16
   317  00FE85  0000               	dw	0
   318  00FE87  0100               	dw	256
   319  00FE89  0000               	dw	0
   320  00FE8B  1000               	dw	4096
   321  00FE8D  0000               	dw	0
   322  00FE8F  0000               	dw	0
   323  00FE91  0001               	dw	1
   324  00FE93  0000               	dw	0
   325  00FE95  0010               	dw	16
   326  00FE97  0000               	dw	0
   327  00FE99  0100               	dw	256
   328  00FE9B  0000               	dw	0
   329  00FE9D  1000               	dw	4096
   330  00FE9F                     __end_of_hexpowers:
   331                           	opt stack 0
   332  00FE9F                     _keys:
   333                           	opt stack 0
   334  00FE9F  31                 	db	49
   335  00FEA0  32                 	db	50
   336  00FEA1  33                 	db	51
   337  00FEA2  41                 	db	65
   338  00FEA3  34                 	db	52
   339  00FEA4  35                 	db	53
   340  00FEA5  36                 	db	54
   341  00FEA6  42                 	db	66
   342  00FEA7  37                 	db	55
   343  00FEA8  38                 	db	56
   344  00FEA9  39                 	db	57
   345  00FEAA  43                 	db	67
   346  00FEAB  2A                 	db	42
   347  00FEAC  30                 	db	48
   348  00FEAD  23                 	db	35
   349  00FEAE  44                 	db	68
   350  00FEAF  00                 	db	0
   351  00FEB0                     __end_of_keys:
   352                           	opt stack 0
   353  00FEB0                     _happynewyear:
   354                           	opt stack 0
   355  00FEB0  50                 	db	80
   356  00FEB1  59                 	db	89
   357  00FEB2  23                 	db	35
   358  00FEB3  01                 	db	1
   359  00FEB4  02                 	db	2
   360  00FEB5  04                 	db	4
   361  00FEB6  17                 	db	23
   362  00FEB7                     __end_of_happynewyear:
   363                           	opt stack 0
   364  0000                     _ADCON0	set	4034
   365  0000                     _ADCON1	set	4033
   366  0000                     _ADCON2	set	4032
   367  0000                     _ADRESH	set	4036
   368  0000                     _ADRESL	set	4035
   369  0000                     _EEADR	set	4009
   370  0000                     _EEADRH	set	4010
   371  0000                     _EECON1	set	4006
   372  0000                     _EECON2	set	4007
   373  0000                     _EEDATA	set	4008
   374  0000                     _INTCONbits	set	4082
   375  0000                     _LATA	set	3977
   376  0000                     _LATB	set	3978
   377  0000                     _LATC	set	3979
   378  0000                     _LATD	set	3980
   379  0000                     _LATDbits	set	3980
   380  0000                     _LATE	set	3981
   381  0000                     _PORTA	set	3968
   382  0000                     _PORTB	set	3969
   383  0000                     _PORTBbits	set	3969
   384  0000                     _PORTC	set	3970
   385  0000                     _PORTD	set	3971
   386  0000                     _SSPADD	set	4040
   387  0000                     _SSPBUF	set	4041
   388  0000                     _SSPCON1	set	4038
   389  0000                     _SSPCON2	set	4037
   390  0000                     _SSPSTAT	set	4039
   391  0000                     _T0CON	set	4053
   392  0000                     _T1CON	set	4045
   393  0000                     _T3CON	set	4017
   394  0000                     _TMR0H	set	4055
   395  0000                     _TMR0L	set	4054
   396  0000                     _TMR1H	set	4047
   397  0000                     _TMR1L	set	4046
   398  0000                     _TMR3H	set	4019
   399  0000                     _TMR3L	set	4018
   400  0000                     _TRISA	set	3986
   401  0000                     _TRISB	set	3987
   402  0000                     _TRISC	set	3988
   403  0000                     _TRISD	set	3989
   404  0000                     _TRISE	set	3990
   405  0000                     _ACKDT	set	32301
   406  0000                     _ACKEN	set	32300
   407  0000                     _EEIF	set	32012
   408  0000                     _INT0IE	set	32660
   409  0000                     _INT0IF	set	32657
   410  0000                     _INT1IE	set	32643
   411  0000                     _INT1IF	set	32640
   412  0000                     _PEIE	set	32662
   413  0000                     _PEN	set	32298
   414  0000                     _RCEN	set	32299
   415  0000                     _RSEN	set	32297
   416  0000                     _SEN	set	32296
   417  0000                     _TMR0IE	set	32661
   418  0000                     _TMR0IF	set	32658
   419  0000                     _TMR1IE	set	31976
   420  0000                     _TMR1IF	set	31984
   421  0000                     _TMR3IE	set	32001
   422  0000                     _TRISC3	set	31907
   423  0000                     _TRISC4	set	31908
   424  00FEB7                     STR_16:
   425  00FEB7  25                 	db	37
   426  00FEB8  63                 	db	99	;'c'
   427  00FEB9  29                 	db	41
   428  00FEBA  20                 	db	32
   429  00FEBB  74                 	db	116	;'t'
   430  00FEBC  69                 	db	105	;'i'
   431  00FEBD  6D                 	db	109	;'m'
   432  00FEBE  65                 	db	101	;'e'
   433  00FEBF  20                 	db	32
   434  00FEC0  20                 	db	32
   435  00FEC1  3C                 	db	60	;'<'
   436  00FEC2  41                 	db	65	;'A'
   437  00FEC3  20                 	db	32
   438  00FEC4  20                 	db	32
   439  00FEC5  20                 	db	32
   440  00FEC6  20                 	db	32
   441  00FEC7  20                 	db	32
   442  00FEC8  0A                 	db	10
   443  00FEC9  00                 	db	0
   444  00FECA                     STR_18:
   445  00FECA  74                 	db	116	;'t'
   446  00FECB  69                 	db	105	;'i'
   447  00FECC  6D                 	db	109	;'m'
   448  00FECD  65                 	db	101	;'e'
   449  00FECE  3A                 	db	58	;':'
   450  00FECF  20                 	db	32
   451  00FED0  25                 	db	37
   452  00FED1  2E                 	db	46
   453  00FED2  31                 	db	49	;'1'
   454  00FED3  66                 	db	102	;'f'
   455  00FED4  20                 	db	32
   456  00FED5  73                 	db	115	;'s'
   457  00FED6  65                 	db	101	;'e'
   458  00FED7  63                 	db	99	;'c'
   459  00FED8  20                 	db	32
   460  00FED9  20                 	db	32
   461  00FEDA  20                 	db	32
   462  00FEDB  0A                 	db	10
   463  00FEDC  00                 	db	0
   464  00FEDD                     STR_21:
   465  00FEDD  5B                 	db	91	;'['
   466  00FEDE  25                 	db	37
   467  00FEDF  64                 	db	100	;'d'
   468  00FEE0  2C                 	db	44
   469  00FEE1  25                 	db	37
   470  00FEE2  64                 	db	100	;'d'
   471  00FEE3  2C                 	db	44
   472  00FEE4  25                 	db	37
   473  00FEE5  64                 	db	100	;'d'
   474  00FEE6  2C                 	db	44
   475  00FEE7  25                 	db	37
   476  00FEE8  64                 	db	100	;'d'
   477  00FEE9  5D                 	db	93	;']'
   478  00FEEA  20                 	db	32
   479  00FEEB  20                 	db	32
   480  00FEEC  20                 	db	32
   481  00FEED  2A                 	db	42
   482  00FEEE  3E                 	db	62	;'>'
   483  00FEEF  00                 	db	0
   484  00FEF0                     STR_12:
   485  00FEF0  73                 	db	115	;'s'
   486  00FEF1  74                 	db	116	;'t'
   487  00FEF2  61                 	db	97	;'a'
   488  00FEF3  72                 	db	114	;'r'
   489  00FEF4  74                 	db	116	;'t'
   490  00FEF5  20                 	db	32
   491  00FEF6  20                 	db	32
   492  00FEF7  20                 	db	32
   493  00FEF8  3C                 	db	60	;'<'
   494  00FEF9  42                 	db	66	;'B'
   495  00FEFA  20                 	db	32
   496  00FEFB  20                 	db	32
   497  00FEFC  20                 	db	32
   498  00FEFD  20                 	db	32
   499  00FEFE  20                 	db	32
   500  00FEFF  20                 	db	32
   501  00FF00  0A                 	db	10
   502  00FF01  00                 	db	0
   503  00FF02                     STR_14:
   504  00FF02  73                 	db	115	;'s'
   505  00FF03  65                 	db	101	;'e'
   506  00FF04  6C                 	db	108	;'l'
   507  00FF05  65                 	db	101	;'e'
   508  00FF06  63                 	db	99	;'c'
   509  00FF07  74                 	db	116	;'t'
   510  00FF08  20                 	db	32
   511  00FF09  72                 	db	114	;'r'
   512  00FF0A  75                 	db	117	;'u'
   513  00FF0B  6E                 	db	110	;'n'
   514  00FF0C  3A                 	db	58	;':'
   515  00FF0D  20                 	db	32
   516  00FF0E  20                 	db	32
   517  00FF0F  20                 	db	32
   518  00FF10  20                 	db	32
   519  00FF11  20                 	db	32
   520  00FF12  0A                 	db	10
   521  00FF13  00                 	db	0
   522  00FF14                     STR_20:
   523  00FF14  5B                 	db	91	;'['
   524  00FF15  41                 	db	65	;'A'
   525  00FF16  41                 	db	65	;'A'
   526  00FF17  2C                 	db	44
   527  00FF18  39                 	db	57	;'9'
   528  00FF19  56                 	db	86	;'V'
   529  00FF1A  2C                 	db	44
   530  00FF1B  43                 	db	67	;'C'
   531  00FF1C  2C                 	db	44
   532  00FF1D  6F                 	db	111	;'o'
   533  00FF1E  74                 	db	116	;'t'
   534  00FF1F  68                 	db	104	;'h'
   535  00FF20  65                 	db	101	;'e'
   536  00FF21  72                 	db	114	;'r'
   537  00FF22  5D                 	db	93	;']'
   538  00FF23  20                 	db	32
   539  00FF24  0A                 	db	10
   540  00FF25  00                 	db	0
   541  00FF26                     STR_22:
   542  00FF26  30                 	db	48	;'0'
   543  00FF27  31                 	db	49	;'1'
   544  00FF28  32                 	db	50	;'2'
   545  00FF29  33                 	db	51	;'3'
   546  00FF2A  34                 	db	52	;'4'
   547  00FF2B  35                 	db	53	;'5'
   548  00FF2C  36                 	db	54	;'6'
   549  00FF2D  37                 	db	55	;'7'
   550  00FF2E  38                 	db	56	;'8'
   551  00FF2F  39                 	db	57	;'9'
   552  00FF30  61                 	db	97	;'a'
   553  00FF31  62                 	db	98	;'b'
   554  00FF32  63                 	db	99	;'c'
   555  00FF33  64                 	db	100	;'d'
   556  00FF34  65                 	db	101	;'e'
   557  00FF35  66                 	db	102	;'f'
   558  00FF36  00                 	db	0
   559  00FF37                     STR_19:
   560  00FF37  20                 	db	32
   561  00FF38  20                 	db	32
   562  00FF39  20                 	db	32
   563  00FF3A  20                 	db	32
   564  00FF3B  20                 	db	32
   565  00FF3C  20                 	db	32
   566  00FF3D  20                 	db	32
   567  00FF3E  20                 	db	32
   568  00FF3F  20                 	db	32
   569  00FF40  20                 	db	32
   570  00FF41  20                 	db	32
   571  00FF42  20                 	db	32
   572  00FF43  20                 	db	32
   573  00FF44  20                 	db	32
   574  00FF45  2A                 	db	42
   575  00FF46  3E                 	db	62	;'>'
   576  00FF47  00                 	db	0
   577  00FF48                     STR_15:
   578  00FF48  5B                 	db	91	;'['
   579  00FF49  31                 	db	49	;'1'
   580  00FF4A  2C                 	db	44
   581  00FF4B  32                 	db	50	;'2'
   582  00FF4C  2C                 	db	44
   583  00FF4D  33                 	db	51	;'3'
   584  00FF4E  2C                 	db	44
   585  00FF4F  34                 	db	52	;'4'
   586  00FF50  5D                 	db	93	;']'
   587  00FF51  20                 	db	32
   588  00FF52  20                 	db	32
   589  00FF53  20                 	db	32
   590  00FF54  20                 	db	32
   591  00FF55  20                 	db	32
   592  00FF56  2A                 	db	42
   593  00FF57  3E                 	db	62	;'>'
   594  00FF58  00                 	db	0
   595  00FF59                     STR_13:
   596  00FF59  68                 	db	104	;'h'
   597  00FF5A  69                 	db	105	;'i'
   598  00FF5B  73                 	db	115	;'s'
   599  00FF5C  74                 	db	116	;'t'
   600  00FF5D  6F                 	db	111	;'o'
   601  00FF5E  72                 	db	114	;'r'
   602  00FF5F  79                 	db	121	;'y'
   603  00FF60  20                 	db	32
   604  00FF61  3C                 	db	60	;'<'
   605  00FF62  43                 	db	67	;'C'
   606  00FF63  20                 	db	32
   607  00FF64  20                 	db	32
   608  00FF65  20                 	db	32
   609  00FF66  20                 	db	32
   610  00FF67  2A                 	db	42
   611  00FF68  3E                 	db	62	;'>'
   612  00FF69  00                 	db	0
   613  00FF6A                     STR_17:
   614  00FF6A  20                 	db	32
   615  00FF6B  20                 	db	32
   616  00FF6C  20                 	db	32
   617  00FF6D  73                 	db	115	;'s'
   618  00FF6E  74                 	db	116	;'t'
   619  00FF6F  61                 	db	97	;'a'
   620  00FF70  74                 	db	116	;'t'
   621  00FF71  73                 	db	115	;'s'
   622  00FF72  20                 	db	32
   623  00FF73  3C                 	db	60	;'<'
   624  00FF74  42                 	db	66	;'B'
   625  00FF75  20                 	db	32
   626  00FF76  20                 	db	32
   627  00FF77  20                 	db	32
   628  00FF78  2A                 	db	42
   629  00FF79  3E                 	db	62	;'>'
   630  00FF7A  00                 	db	0
   631  00FF7B                     STR_3:
   632  00FF7B  5B                 	db	91	;'['
   633  00FF7C  41                 	db	65	;'A'
   634  00FF7D  41                 	db	65	;'A'
   635  00FF7E  2C                 	db	44
   636  00FF7F  43                 	db	67	;'C'
   637  00FF80  2C                 	db	44
   638  00FF81  39                 	db	57	;'9'
   639  00FF82  56                 	db	86	;'V'
   640  00FF83  2C                 	db	44
   641  00FF84  4F                 	db	79	;'O'
   642  00FF85  54                 	db	84	;'T'
   643  00FF86  48                 	db	72	;'H'
   644  00FF87  45                 	db	69	;'E'
   645  00FF88  52                 	db	82	;'R'
   646  00FF89  5D                 	db	93	;']'
   647  00FF8A  0A                 	db	10
   648  00FF8B  00                 	db	0
   649  00FF8C                     STR_2:
   650  00FF8C  74                 	db	116	;'t'
   651  00FF8D  69                 	db	105	;'i'
   652  00FF8E  6D                 	db	109	;'m'
   653  00FF8F  65                 	db	101	;'e'
   654  00FF90  20                 	db	32
   655  00FF91  25                 	db	37
   656  00FF92  30                 	db	48	;'0'
   657  00FF93  32                 	db	50	;'2'
   658  00FF94  6C                 	db	108	;'l'
   659  00FF95  64                 	db	100	;'d'
   660  00FF96  3A                 	db	58	;':'
   661  00FF97  25                 	db	37
   662  00FF98  30                 	db	48	;'0'
   663  00FF99  32                 	db	50	;'2'
   664  00FF9A  6C                 	db	108	;'l'
   665  00FF9B  64                 	db	100	;'d'
   666  00FF9C  00                 	db	0
   667  00FF9D                     STR_5:
   668  00FF9D  56                 	db	86	;'V'
   669  00FF9E  3A                 	db	58	;':'
   670  00FF9F  20                 	db	32
   671  00FFA0  25                 	db	37
   672  00FFA1  64                 	db	100	;'d'
   673  00FFA2  2C                 	db	44
   674  00FFA3  20                 	db	32
   675  00FFA4  4E                 	db	78	;'N'
   676  00FFA5  3A                 	db	58	;':'
   677  00FFA6  20                 	db	32
   678  00FFA7  25                 	db	37
   679  00FFA8  2E                 	db	46
   680  00FFA9  33                 	db	51	;'3'
   681  00FFAA  66                 	db	102	;'f'
   682  00FFAB  00                 	db	0
   683  00FFAC                     STR_4:
   684  00FFAC  5B                 	db	91	;'['
   685  00FFAD  25                 	db	37
   686  00FFAE  64                 	db	100	;'d'
   687  00FFAF  2C                 	db	44
   688  00FFB0  25                 	db	37
   689  00FFB1  64                 	db	100	;'d'
   690  00FFB2  2C                 	db	44
   691  00FFB3  25                 	db	37
   692  00FFB4  64                 	db	100	;'d'
   693  00FFB5  2C                 	db	44
   694  00FFB6  25                 	db	37
   695  00FFB7  64                 	db	100	;'d'
   696  00FFB8  5D                 	db	93	;']'
   697  00FFB9  00                 	db	0
   698  00FFBA                     STR_8:
   699  00FFBA  43                 	db	67	;'C'
   700  00FFBB  20                 	db	32
   701  00FFBC  20                 	db	32
   702  00FFBD  6C                 	db	108	;'l'
   703  00FFBE  69                 	db	105	;'i'
   704  00FFBF  6D                 	db	109	;'m'
   705  00FFC0  3A                 	db	58	;':'
   706  00FFC1  20                 	db	32
   707  00FFC2  25                 	db	37
   708  00FFC3  66                 	db	102	;'f'
   709  00FFC4  00                 	db	0
   710  00FFC5                     STR_6:
   711  00FFC5  41                 	db	65	;'A'
   712  00FFC6  41                 	db	65	;'A'
   713  00FFC7  20                 	db	32
   714  00FFC8  6C                 	db	108	;'l'
   715  00FFC9  69                 	db	105	;'i'
   716  00FFCA  6D                 	db	109	;'m'
   717  00FFCB  3A                 	db	58	;':'
   718  00FFCC  20                 	db	32
   719  00FFCD  25                 	db	37
   720  00FFCE  66                 	db	102	;'f'
   721  00FFCF  00                 	db	0
   722  00FFD0                     STR_7:
   723  00FFD0  39                 	db	57	;'9'
   724  00FFD1  56                 	db	86	;'V'
   725  00FFD2  20                 	db	32
   726  00FFD3  6C                 	db	108	;'l'
   727  00FFD4  69                 	db	105	;'i'
   728  00FFD5  6D                 	db	109	;'m'
   729  00FFD6  3A                 	db	58	;':'
   730  00FFD7  20                 	db	32
   731  00FFD8  25                 	db	37
   732  00FFD9  66                 	db	102	;'f'
   733  00FFDA  00                 	db	0
   734  00FFDB  25                 	db	37
   735  00FFDC  78                 	db	120	;'x'
   736  00FFDD  3A                 	db	58	;':'
   737  00FFDE  25                 	db	37
   738  00FFDF  78                 	db	120	;'x'
   739  00FFE0  3A                 	db	58	;':'
   740  00FFE1  25                 	db	37
   741  00FFE2  78                 	db	120	;'x'
   742  00FFE3  0A                 	db	10
   743  00FFE4  00                 	db	0
   744  00FFE5  25                 	db	37
   745  00FFE6  78                 	db	120	;'x'
   746  00FFE7  2F                 	db	47
   747  00FFE8  25                 	db	37
   748  00FFE9  78                 	db	120	;'x'
   749  00FFEA  2F                 	db	47
   750  00FFEB  25                 	db	37
   751  00FFEC  78                 	db	120	;'x'
   752  00FFED  00                 	db	0
   753  00FFEE  74                 	db	116	;'t'
   754  00FFEF  31                 	db	49	;'1'
   755  00FFF0  3A                 	db	58	;':'
   756  00FFF1  20                 	db	32
   757  00FFF2  25                 	db	37
   758  00FFF3  78                 	db	120	;'x'
   759  00FFF4  20                 	db	32
   760  00FFF5  00                 	db	0
   761  00FFF6                     STR_1:
   762  00FFF6  72                 	db	114	;'r'
   763  00FFF7  75                 	db	117	;'u'
   764  00FFF8  6E                 	db	110	;'n'
   765  00FFF9  6E                 	db	110	;'n'
   766  00FFFA  69                 	db	105	;'i'
   767  00FFFB  6E                 	db	110	;'n'
   768  00FFFC  67                 	db	103	;'g'
   769  00FFFD  00                 	db	0
   770                           
   771                           ; #config settings
   772  00FFFE  00                 	db	0	; dummy byte at the end
   773  0000                     
   774                           	psect	cinit
   775  0033E4                     __pcinit:
   776                           	opt stack 0
   777  0033E4                     start_initialization:
   778                           	opt stack 0
   779  0033E4                     __initialization:
   780                           	opt stack 0
   781                           
   782                           ; Initialize objects allocated to BANK1 (36 bytes)
   783                           ; load TBLPTR registers with __pidataBANK1
   784  0033E4  0E52               	movlw	low __pidataBANK1
   785  0033E6  6EF6               	movwf	tblptrl,c
   786  0033E8  0E39               	movlw	high __pidataBANK1
   787  0033EA  6EF7               	movwf	tblptrh,c
   788  0033EC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   789  0033EE  6EF8               	movwf	tblptru,c
   790  0033F0  EE01  F033         	lfsr	0,__pdataBANK1
   791  0033F4  EE10 F024          	lfsr	1,36
   792  0033F8                     copy_data0:
   793  0033F8  0009               	tblrd		*+
   794  0033FA  CFF5 FFEE          	movff	tablat,postinc0
   795  0033FE  50E5               	movf	postdec1,w,c
   796  003400  50E1               	movf	fsr1l,w,c
   797  003402  E1FA               	bnz	copy_data0
   798                           
   799                           ; Initialize objects allocated to COMRAM (23 bytes)
   800                           ; load TBLPTR registers with __pidataCOMRAM
   801  003404  0E36               	movlw	low __pidataCOMRAM
   802  003406  6EF6               	movwf	tblptrl,c
   803  003408  0E3A               	movlw	high __pidataCOMRAM
   804  00340A  6EF7               	movwf	tblptrh,c
   805  00340C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   806  00340E  6EF8               	movwf	tblptru,c
   807  003410  EE00  F03B         	lfsr	0,__pdataCOMRAM
   808  003414  EE10 F017          	lfsr	1,23
   809  003418                     copy_data1:
   810  003418  0009               	tblrd		*+
   811  00341A  CFF5 FFEE          	movff	tablat,postinc0
   812  00341E  50E5               	movf	postdec1,w,c
   813  003420  50E1               	movf	fsr1l,w,c
   814  003422  E1FA               	bnz	copy_data1
   815                           
   816                           ; Clear objects allocated to BANK1 (32 bytes)
   817  003424  EE01  F057         	lfsr	0,__pbssBANK1
   818  003428  0E20               	movlw	32
   819  00342A                     clear_0:
   820  00342A  6AEE               	clrf	postinc0,c
   821  00342C  06E8               	decf	wreg,f,c
   822  00342E  E1FD               	bnz	clear_0
   823                           
   824                           ; Clear objects allocated to BANK0 (2 bytes)
   825  003430  0100               	movlb	0
   826  003432  6BFA               	clrf	(__pbssBANK0+1)& (0+255),b
   827  003434  6BF9               	clrf	__pbssBANK0& (0+255),b
   828                           
   829                           ; Clear objects allocated to COMRAM (11 bytes)
   830  003436  EE00  F052         	lfsr	0,__pbssCOMRAM
   831  00343A  0E0B               	movlw	11
   832  00343C                     clear_1:
   833  00343C  6AEE               	clrf	postinc0,c
   834  00343E  06E8               	decf	wreg,f,c
   835  003440  E1FD               	bnz	clear_1
   836  003442                     end_of_initialization:
   837                           	opt stack 0
   838  003442                     __end_of__initialization:
   839                           	opt stack 0
   840  003442  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   841  003444  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   842  003446  0E00               	movlw	low (__Lmediumconst shr (0+16))
   843  003448  6EF8               	movwf	tblptru,c
   844  00344A  0100               	movlb	0
   845  00344C  EFB0  F00B         	goto	_main	;jump to C main() function
   846                           tblptru	equ	0xFF8
   847                           tblptrh	equ	0xFF7
   848                           tblptrl	equ	0xFF6
   849                           tablat	equ	0xFF5
   850                           postinc0	equ	0xFEE
   851                           wreg	equ	0xFE8
   852                           postdec1	equ	0xFE5
   853                           fsr1l	equ	0xFE1
   854                           
   855                           	psect	bssCOMRAM
   856  000052                     __pbssCOMRAM:
   857                           	opt stack 0
   858  000052                     _time:
   859                           	opt stack 0
   860  000052                     	ds	4
   861  000056                     _batteryDetected:
   862                           	opt stack 0
   863  000056                     	ds	2
   864  000058                     _curr:
   865                           	opt stack 0
   866  000058                     	ds	2
   867  00005A                     _terminate:
   868                           	opt stack 0
   869  00005A                     	ds	2
   870  00005C                     _lastKey:
   871                           	opt stack 0
   872  00005C                     	ds	1
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           postdec1	equ	0xFE5
   880                           fsr1l	equ	0xFE1
   881                           
   882                           	psect	dataCOMRAM
   883  00003B                     __pdataCOMRAM:
   884                           	opt stack 0
   885  00003B                     _V_LIM_9V:
   886                           	opt stack 0
   887  00003B                     	ds	3
   888  00003E                     _V_LIM_AA:
   889                           	opt stack 0
   890  00003E                     	ds	3
   891  000041                     _V_LIM_C:
   892                           	opt stack 0
   893  000041                     	ds	3
   894  000044                     _padAngle_CLOSE:
   895                           	opt stack 0
   896  000044                     	ds	2
   897  000046                     _padAngle_NEUTRAL:
   898                           	opt stack 0
   899  000046                     	ds	2
   900  000048                     _redirectAngle_AA:
   901                           	opt stack 0
   902  000048                     	ds	2
   903  00004A                     _redirectAngle_OTHER:
   904                           	opt stack 0
   905  00004A                     	ds	2
   906  00004C                     _stoppingTime:
   907                           	opt stack 0
   908  00004C                     	ds	2
   909  00004E                     _padServo:
   910                           	opt stack 0
   911  00004E                     	ds	4
   912                           tblptru	equ	0xFF8
   913                           tblptrh	equ	0xFF7
   914                           tblptrl	equ	0xFF6
   915                           tablat	equ	0xFF5
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           postdec1	equ	0xFE5
   919                           fsr1l	equ	0xFE1
   920                           
   921                           	psect	bssBANK0
   922  0000F9                     __pbssBANK0:
   923                           	opt stack 0
   924  0000F9                     _n:
   925                           	opt stack 0
   926  0000F9                     	ds	2
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1l	equ	0xFE1
   935                           
   936                           	psect	bssBANK1
   937  000157                     __pbssBANK1:
   938                           	opt stack 0
   939  000157                     _pulse:
   940                           	opt stack 0
   941  000157                     	ds	8
   942  00015F                     _servos:
   943                           	opt stack 0
   944  00015F                     	ds	8
   945  000167                     _padPin3:
   946                           	opt stack 0
   947  000167                     	ds	4
   948  00016B                     _count:
   949                           	opt stack 0
   950  00016B                     	ds	2
   951  00016D                     _n_9V:
   952                           	opt stack 0
   953  00016D                     	ds	2
   954  00016F                     _n_AA:
   955                           	opt stack 0
   956  00016F                     	ds	2
   957  000171                     _n_C:
   958                           	opt stack 0
   959  000171                     	ds	2
   960  000173                     _n_OTHER:
   961                           	opt stack 0
   962  000173                     	ds	2
   963  000175                     _prevTime:
   964                           	opt stack 0
   965  000175                     	ds	2
   966                           tblptru	equ	0xFF8
   967                           tblptrh	equ	0xFF7
   968                           tblptrl	equ	0xFF6
   969                           tablat	equ	0xFF5
   970                           postinc0	equ	0xFEE
   971                           wreg	equ	0xFE8
   972                           postdec1	equ	0xFE5
   973                           fsr1l	equ	0xFE1
   974                           
   975                           	psect	dataBANK1
   976  000133                     __pdataBANK1:
   977                           	opt stack 0
   978  000133                     _cylinderDir:
   979                           	opt stack 0
   980  000133                     	ds	4
   981  000137                     _angle:
   982                           	opt stack 0
   983  000137                     	ds	2
   984  000139                     _padAngle_OPEN:
   985                           	opt stack 0
   986  000139                     	ds	2
   987  00013B                     _redirectAngle_9V:
   988                           	opt stack 0
   989  00013B                     	ds	2
   990  00013D                     _redirectAngle_C:
   991                           	opt stack 0
   992  00013D                     	ds	2
   993  00013F                     _AA_float:
   994                           	opt stack 0
   995  00013F                     	ds	4
   996  000143                     _conveyorServo:
   997                           	opt stack 0
   998  000143                     	ds	4
   999  000147                     _cylinderMotor:
  1000                           	opt stack 0
  1001  000147                     	ds	4
  1002  00014B                     _padPin1:
  1003                           	opt stack 0
  1004  00014B                     	ds	4
  1005  00014F                     _padPin2:
  1006                           	opt stack 0
  1007  00014F                     	ds	4
  1008  000153                     _redirectingServo:
  1009                           	opt stack 0
  1010  000153                     	ds	4
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           postdec1	equ	0xFE5
  1018                           fsr1l	equ	0xFE1
  1019                           
  1020                           	psect	cstackBANK1
  1021  000100                     __pcstackBANK1:
  1022                           	opt stack 0
  1023  000100                     _sortBattery$1389:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x0
  1027  000100                     	ds	2
  1028  000102                     sortBattery@V_float:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x2
  1032  000102                     	ds	3
  1033  000105                     sortBattery@pos_v_counter:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x5
  1037  000105                     	ds	2
  1038  000107                     sortBattery@signal:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x7
  1042  000107                     	ds	2
  1043  000109                     sortBattery@Vcc:
  1044                           	opt stack 0
  1045                           
  1046                           ; 3 bytes @ 0x9
  1047  000109                     	ds	3
  1048  00010C                     sortBattery@resolution:
  1049                           	opt stack 0
  1050                           
  1051                           ; 3 bytes @ 0xC
  1052  00010C                     	ds	3
  1053  00010F                     sortBattery@V_max:
  1054                           	opt stack 0
  1055                           
  1056                           ; 3 bytes @ 0xF
  1057  00010F                     	ds	3
  1058  000112                     sortBattery@i_228:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x12
  1062  000112                     	ds	2
  1063  000114                     sortBattery@targetAngle:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x14
  1067  000114                     	ds	2
  1068  000116                     sortBattery@V:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x16
  1072  000116                     	ds	3
  1073  000119                     sortBattery@i:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x19
  1077  000119                     	ds	3
  1078  00011C                     sortBattery@V_223:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x1C
  1082  00011C                     	ds	3
  1083  00011F                     ??_main:
  1084                           
  1085                           ; 1 bytes @ 0x1F
  1086  00011F                     	ds	10
  1087  000129                     main@cylinderStart:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x29
  1091  000129                     	ds	2
  1092  00012B                     main@cylinderDur:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x2B
  1096  00012B                     	ds	2
  1097  00012D                     main@cylinderForward:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x2D
  1101  00012D                     	ds	2
  1102  00012F                     main@cylinderBackward:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x2F
  1106  00012F                     	ds	2
  1107  000131                     main@lastBatteryTime:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x31
  1111  000131                     	ds	2
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           postdec1	equ	0xFE5
  1119                           fsr1l	equ	0xFE1
  1120                           
  1121                           	psect	cstackBANK0
  1122  000080                     __pcstackBANK0:
  1123                           	opt stack 0
  1124  000080                     ??___ftdiv:
  1125  000080                     ?_readPastRun:
  1126                           	opt stack 0
  1127  000080                     readPastRun@run:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x0
  1131  000080                     	ds	2
  1132  000082                     readPastRun@data:
  1133                           	opt stack 0
  1134                           
  1135                           ; 14 bytes @ 0x2
  1136  000082                     	ds	1
  1137  000083                     ___ftdiv@cntr:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x3
  1141  000083                     	ds	1
  1142  000084                     ___ftdiv@f3:
  1143                           	opt stack 0
  1144                           
  1145                           ; 3 bytes @ 0x4
  1146  000084                     	ds	3
  1147  000087                     ___ftdiv@exp:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x7
  1151  000087                     	ds	1
  1152  000088                     ___ftdiv@sign:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x8
  1156  000088                     	ds	1
  1157  000089                     ?___ftmul:
  1158                           	opt stack 0
  1159  000089                     ___ftmul@f1:
  1160                           	opt stack 0
  1161                           
  1162                           ; 3 bytes @ 0x9
  1163  000089                     	ds	3
  1164  00008C                     ___ftmul@f2:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0xC
  1168  00008C                     	ds	3
  1169  00008F                     ??___ftmul:
  1170                           
  1171                           ; 1 bytes @ 0xF
  1172  00008F                     	ds	1
  1173  000090                     readPastRun@i:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x10
  1177  000090                     	ds	2
  1178  000092                     ___ftmul@exp:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x12
  1182  000092                     	ds	1
  1183  000093                     ___ftmul@f3_as_product:
  1184                           	opt stack 0
  1185                           
  1186                           ; 3 bytes @ 0x13
  1187  000093                     	ds	3
  1188  000096                     ___ftmul@cntr:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x16
  1192  000096                     	ds	1
  1193  000097                     ___ftmul@sign:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x17
  1197  000097                     	ds	1
  1198  000098                     ?_fround:
  1199                           	opt stack 0
  1200  000098                     ?_scale:
  1201                           	opt stack 0
  1202                           
  1203                           ; 3 bytes @ 0x18
  1204  000098                     	ds	3
  1205  00009B                     _fround$1392:
  1206                           	opt stack 0
  1207  00009B                     _scale$1393:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0x1B
  1211  00009B                     	ds	3
  1212  00009E                     scale@scl:
  1213                           	opt stack 0
  1214  00009E                     _fround$1391:
  1215                           	opt stack 0
  1216                           
  1217                           ; 3 bytes @ 0x1E
  1218  00009E                     	ds	3
  1219  0000A1                     fround@prec:
  1220                           	opt stack 0
  1221                           
  1222                           ; 1 bytes @ 0x21
  1223  0000A1                     	ds	1
  1224  0000A2                     ?___ftadd:
  1225                           	opt stack 0
  1226  0000A2                     ___ftadd@f1:
  1227                           	opt stack 0
  1228                           
  1229                           ; 3 bytes @ 0x22
  1230  0000A2                     	ds	3
  1231  0000A5                     ___ftadd@f2:
  1232                           	opt stack 0
  1233                           
  1234                           ; 3 bytes @ 0x25
  1235  0000A5                     	ds	3
  1236  0000A8                     ??___ftadd:
  1237                           
  1238                           ; 1 bytes @ 0x28
  1239  0000A8                     	ds	3
  1240  0000AB                     ___ftadd@sign:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x2B
  1244  0000AB                     	ds	1
  1245  0000AC                     ___ftadd@exp2:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x2C
  1249  0000AC                     	ds	1
  1250  0000AD                     ___ftadd@exp1:
  1251                           	opt stack 0
  1252                           
  1253                           ; 1 bytes @ 0x2D
  1254  0000AD                     	ds	1
  1255  0000AE                     ?___ftsub:
  1256                           	opt stack 0
  1257  0000AE                     ?___fttol:
  1258                           	opt stack 0
  1259  0000AE                     ___ftsub@f1:
  1260                           	opt stack 0
  1261  0000AE                     ___fttol@f1:
  1262                           	opt stack 0
  1263                           
  1264                           ; 3 bytes @ 0x2E
  1265  0000AE                     	ds	3
  1266  0000B1                     ___ftsub@f2:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0x31
  1270  0000B1                     	ds	1
  1271  0000B2                     ??___fttol:
  1272                           
  1273                           ; 1 bytes @ 0x32
  1274  0000B2                     	ds	5
  1275  0000B7                     ___fttol@sign1:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x37
  1279  0000B7                     	ds	1
  1280  0000B8                     ___fttol@lval:
  1281                           	opt stack 0
  1282                           
  1283                           ; 4 bytes @ 0x38
  1284  0000B8                     	ds	4
  1285  0000BC                     ___fttol@exp1:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x3C
  1289  0000BC                     	ds	1
  1290  0000BD                     ?_printf:
  1291                           	opt stack 0
  1292  0000BD                     ?_angleToPulse:
  1293                           	opt stack 0
  1294  0000BD                     angleToPulse@angle:
  1295                           	opt stack 0
  1296  0000BD                     printf@f:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x3D
  1300  0000BD                     	ds	4
  1301  0000C1                     ??_angleToPulse:
  1302                           
  1303                           ; 1 bytes @ 0x41
  1304  0000C1                     	ds	4
  1305  0000C5                     angleToPulse@offset:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x45
  1309  0000C5                     	ds	2
  1310  0000C7                     ??_printf:
  1311                           
  1312                           ; 1 bytes @ 0x47
  1313  0000C7                     	ds	2
  1314  0000C9                     angleToPulse@a180:
  1315                           	opt stack 0
  1316                           
  1317                           ; 4 bytes @ 0x49
  1318  0000C9                     	ds	4
  1319  0000CD                     _angleToPulse$1390:
  1320                           	opt stack 0
  1321  0000CD                     _printf$1394:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x4D
  1325  0000CD                     	ds	3
  1326  0000D0                     printf@idx:
  1327                           	opt stack 0
  1328  0000D0                     angleToPulse@a000:
  1329                           	opt stack 0
  1330                           
  1331                           ; 4 bytes @ 0x50
  1332  0000D0                     	ds	1
  1333  0000D1                     printf@cp:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x51
  1337  0000D1                     	ds	2
  1338  0000D3                     printf@len:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x53
  1342  0000D3                     	ds	1
  1343  0000D4                     setAngle@motor:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x54
  1347  0000D4                     	ds	1
  1348  0000D5                     printf@ap:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x55
  1352  0000D5                     	ds	1
  1353  0000D6                     setAngle@angle:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x56
  1357  0000D6                     	ds	1
  1358  0000D7                     printf@tmpval:
  1359                           	opt stack 0
  1360                           
  1361                           ; 4 bytes @ 0x57
  1362  0000D7                     	ds	1
  1363  0000D8                     ??_setAngle:
  1364                           
  1365                           ; 1 bytes @ 0x58
  1366  0000D8                     	ds	2
  1367  0000DA                     setAngle@period:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x5A
  1371  0000DA                     	ds	1
  1372  0000DB                     printf@exp:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x5B
  1376  0000DB                     	ds	1
  1377  0000DC                     setAngle@i:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x5C
  1381  0000DC                     	ds	1
  1382  0000DD                     printf@fval:
  1383                           	opt stack 0
  1384                           
  1385                           ; 3 bytes @ 0x5D
  1386  0000DD                     	ds	1
  1387  0000DE                     initServo@motor:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x5E
  1391  0000DE                     	ds	2
  1392  0000E0                     initServo@angle:
  1393                           	opt stack 0
  1394  0000E0                     printf@val:
  1395                           	opt stack 0
  1396                           
  1397                           ; 4 bytes @ 0x60
  1398  0000E0                     	ds	2
  1399  0000E2                     ??_initServo:
  1400                           
  1401                           ; 1 bytes @ 0x62
  1402  0000E2                     	ds	2
  1403  0000E4                     printf@width:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x64
  1407  0000E4                     	ds	2
  1408  0000E6                     initServo@i:
  1409                           	opt stack 0
  1410  0000E6                     printf@flag:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x66
  1414  0000E6                     	ds	2
  1415  0000E8                     printf@prec:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x68
  1419  0000E8                     	ds	2
  1420  0000EA                     printf@c:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x6A
  1424  0000EA                     	ds	1
  1425  0000EB                     ??_sortBattery:
  1426  0000EB                     showMainMenu@k:
  1427                           	opt stack 0
  1428  0000EB                     showRunSelect@k:
  1429                           	opt stack 0
  1430  0000EB                     showRunMenu@key:
  1431                           	opt stack 0
  1432  0000EB                     showRunTime@run:
  1433                           	opt stack 0
  1434  0000EB                     showRunStats@run:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x6B
  1438  0000EB                     	ds	1
  1439  0000EC                     showRunMenu@k:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x6C
  1443  0000EC                     	ds	1
  1444  0000ED                     ??_showRunTime:
  1445                           
  1446                           ; 1 bytes @ 0x6D
  1447  0000ED                     	ds	3
  1448  0000F0                     showRunTime@time:
  1449                           	opt stack 0
  1450                           
  1451                           ; 3 bytes @ 0x70
  1452  0000F0                     	ds	3
  1453  0000F3                     ??_showInterface:
  1454                           
  1455                           ; 1 bytes @ 0x73
  1456  0000F3                     	ds	1
  1457  0000F4                     showInterface@n:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x74
  1461  0000F4                     	ds	2
  1462  0000F6                     showInterface@run:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x76
  1466  0000F6                     	ds	2
  1467  0000F8                     showInterface@key:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x78
  1471  0000F8                     	ds	1
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           postdec1	equ	0xFE5
  1479                           fsr1l	equ	0xFE1
  1480                           
  1481                           	psect	cstackCOMRAM
  1482  000001                     __pcstackCOMRAM:
  1483                           	opt stack 0
  1484  000001                     ?i2___awmod:
  1485                           	opt stack 0
  1486  000001                     keyPressedInterruptService@key:
  1487                           	opt stack 0
  1488  000001                     i2___awmod@dividend:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x0
  1492  000001                     	ds	2
  1493  000003                     i2___awmod@divisor:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x2
  1497  000003                     	ds	2
  1498  000005                     i2___awmod@counter:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0x4
  1502  000005                     	ds	1
  1503  000006                     i2___awmod@sign:
  1504                           	opt stack 0
  1505                           
  1506                           ; 1 bytes @ 0x5
  1507  000006                     	ds	1
  1508  000007                     i2digitalWrite@pin:
  1509                           	opt stack 0
  1510  000007                     i2startTimer@timer:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x6
  1514  000007                     	ds	2
  1515  000009                     i2digitalWrite@val:
  1516                           	opt stack 0
  1517  000009                     i2startTimer@val:
  1518                           	opt stack 0
  1519                           
  1520                           ; 4 bytes @ 0x8
  1521  000009                     	ds	2
  1522  00000B                     ??i2_digitalWrite:
  1523                           
  1524                           ; 1 bytes @ 0xA
  1525  00000B                     	ds	2
  1526  00000D                     ??i2_startTimer:
  1527                           
  1528                           ; 1 bytes @ 0xC
  1529  00000D                     	ds	1
  1530  00000E                     i2digitalWrite@p:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0xD
  1534  00000E                     	ds	2
  1535  000010                     ??_servoInterruptService:
  1536                           
  1537                           ; 1 bytes @ 0xF
  1538  000010                     	ds	4
  1539  000014                     ??_service:
  1540                           
  1541                           ; 1 bytes @ 0x13
  1542  000014                     	ds	14
  1543  000022                     service@key:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x21
  1547  000022                     	ds	1
  1548  000023                     ??_isdigit:
  1549  000023                     ?_digitalRead:
  1550                           	opt stack 0
  1551  000023                     ?___awmod:
  1552                           	opt stack 0
  1553  000023                     ?___ftpack:
  1554                           	opt stack 0
  1555  000023                     ?___ftneg:
  1556                           	opt stack 0
  1557  000023                     ?_analogRead:
  1558                           	opt stack 0
  1559  000023                     ?__tdiv_to_l_:
  1560                           	opt stack 0
  1561  000023                     ?__div_to_l_:
  1562                           	opt stack 0
  1563  000023                     ?___aldiv:
  1564                           	opt stack 0
  1565  000023                     ?___lldiv:
  1566                           	opt stack 0
  1567  000023                     lcdNibble@temp:
  1568                           	opt stack 0
  1569  000023                     readKeypad@key:
  1570                           	opt stack 0
  1571  000023                     digitalRead@pin:
  1572                           	opt stack 0
  1573  000023                     digitalWrite@pin:
  1574                           	opt stack 0
  1575  000023                     analogRead@channel:
  1576                           	opt stack 0
  1577  000023                     initTimer@timer:
  1578                           	opt stack 0
  1579  000023                     startTimer@timer:
  1580                           	opt stack 0
  1581  000023                     ___awmod@dividend:
  1582                           	opt stack 0
  1583  000023                     __div_to_l_@f1:
  1584                           	opt stack 0
  1585  000023                     ___ftpack@arg:
  1586                           	opt stack 0
  1587  000023                     __tdiv_to_l_@f1:
  1588                           	opt stack 0
  1589  000023                     ___ftneg@f1:
  1590                           	opt stack 0
  1591  000023                     ___aldiv@dividend:
  1592                           	opt stack 0
  1593  000023                     ___lldiv@dividend:
  1594                           	opt stack 0
  1595                           
  1596                           ; 4 bytes @ 0x22
  1597  000023                     	ds	1
  1598  000024                     lcdNibble@data:
  1599                           	opt stack 0
  1600  000024                     _isdigit$1019:
  1601                           	opt stack 0
  1602                           
  1603                           ; 1 bytes @ 0x23
  1604  000024                     	ds	1
  1605  000025                     ??_initTimer:
  1606  000025                     ??_digitalRead:
  1607  000025                     ??_lcdInst:
  1608  000025                     isdigit@c:
  1609                           	opt stack 0
  1610  000025                     digitalWrite@val:
  1611                           	opt stack 0
  1612  000025                     ___awmod@divisor:
  1613                           	opt stack 0
  1614  000025                     startTimer@val:
  1615                           	opt stack 0
  1616                           
  1617                           ; 4 bytes @ 0x24
  1618  000025                     	ds	1
  1619  000026                     lcdInst@data:
  1620                           	opt stack 0
  1621  000026                     ___ftpack@exp:
  1622                           	opt stack 0
  1623  000026                     __div_to_l_@f2:
  1624                           	opt stack 0
  1625  000026                     __tdiv_to_l_@f2:
  1626                           	opt stack 0
  1627                           
  1628                           ; 3 bytes @ 0x25
  1629  000026                     	ds	1
  1630  000027                     ??_initLCD:
  1631  000027                     ??_digitalWrite:
  1632  000027                     ??_analogRead:
  1633  000027                     putch@data:
  1634                           	opt stack 0
  1635  000027                     ___awmod@counter:
  1636                           	opt stack 0
  1637  000027                     ___ftpack@sign:
  1638                           	opt stack 0
  1639  000027                     ___aldiv@divisor:
  1640                           	opt stack 0
  1641  000027                     ___lldiv@divisor:
  1642                           	opt stack 0
  1643                           
  1644                           ; 4 bytes @ 0x26
  1645  000027                     	ds	1
  1646  000028                     ??___ftpack:
  1647  000028                     ___awmod@sign:
  1648                           	opt stack 0
  1649                           
  1650                           ; 1 bytes @ 0x27
  1651  000028                     	ds	1
  1652  000029                     ??_startTimer:
  1653  000029                     ??__tdiv_to_l_:
  1654  000029                     ?___awdiv:
  1655                           	opt stack 0
  1656  000029                     ___awdiv@dividend:
  1657                           	opt stack 0
  1658  000029                     __div_to_l_@quot:
  1659                           	opt stack 0
  1660                           
  1661                           ; 4 bytes @ 0x28
  1662  000029                     	ds	1
  1663  00002A                     digitalWrite@p:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x29
  1667  00002A                     	ds	1
  1668  00002B                     ?___altoft:
  1669                           	opt stack 0
  1670  00002B                     ?___awtoft:
  1671                           	opt stack 0
  1672  00002B                     ?___lltoft:
  1673                           	opt stack 0
  1674  00002B                     ___aldiv@counter:
  1675                           	opt stack 0
  1676  00002B                     ___awdiv@divisor:
  1677                           	opt stack 0
  1678  00002B                     ___awtoft@c:
  1679                           	opt stack 0
  1680  00002B                     ___altoft@c:
  1681                           	opt stack 0
  1682  00002B                     ___lldiv@quotient:
  1683                           	opt stack 0
  1684  00002B                     ___lltoft@c:
  1685                           	opt stack 0
  1686                           
  1687                           ; 4 bytes @ 0x2A
  1688  00002B                     	ds	1
  1689  00002C                     ___aldiv@sign:
  1690                           	opt stack 0
  1691  00002C                     __tdiv_to_l_@quot:
  1692                           	opt stack 0
  1693                           
  1694                           ; 4 bytes @ 0x2B
  1695  00002C                     	ds	1
  1696  00002D                     ___awdiv@counter:
  1697                           	opt stack 0
  1698  00002D                     __div_to_l_@cntr:
  1699                           	opt stack 0
  1700  00002D                     ___aldiv@quotient:
  1701                           	opt stack 0
  1702                           
  1703                           ; 4 bytes @ 0x2C
  1704  00002D                     	ds	1
  1705  00002E                     ___awdiv@sign:
  1706                           	opt stack 0
  1707  00002E                     ___awtoft@sign:
  1708                           	opt stack 0
  1709  00002E                     __div_to_l_@exp1:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0x2D
  1713  00002E                     	ds	1
  1714  00002F                     ??___altoft:
  1715  00002F                     ??___lltoft:
  1716  00002F                     ___lldiv@counter:
  1717                           	opt stack 0
  1718  00002F                     ___awdiv@quotient:
  1719                           	opt stack 0
  1720  00002F                     ___ftge@ff1:
  1721                           	opt stack 0
  1722                           
  1723                           ; 3 bytes @ 0x2E
  1724  00002F                     	ds	1
  1725  000030                     ?___llmod:
  1726                           	opt stack 0
  1727  000030                     __tdiv_to_l_@cntr:
  1728                           	opt stack 0
  1729  000030                     I2C_Master_Init@c:
  1730                           	opt stack 0
  1731  000030                     ___llmod@dividend:
  1732                           	opt stack 0
  1733                           
  1734                           ; 4 bytes @ 0x2F
  1735  000030                     	ds	1
  1736  000031                     ?___wmul:
  1737                           	opt stack 0
  1738  000031                     ?___almod:
  1739                           	opt stack 0
  1740  000031                     __tdiv_to_l_@exp1:
  1741                           	opt stack 0
  1742  000031                     ___wmul@multiplier:
  1743                           	opt stack 0
  1744  000031                     ___almod@dividend:
  1745                           	opt stack 0
  1746                           
  1747                           ; 4 bytes @ 0x30
  1748  000031                     	ds	1
  1749  000032                     ___ftge@ff2:
  1750                           	opt stack 0
  1751                           
  1752                           ; 3 bytes @ 0x31
  1753  000032                     	ds	1
  1754  000033                     ___altoft@exp:
  1755                           	opt stack 0
  1756  000033                     ___lltoft@exp:
  1757                           	opt stack 0
  1758  000033                     ___wmul@multiplicand:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x32
  1762  000033                     	ds	1
  1763  000034                     ??_I2C_Master_Init:
  1764  000034                     ___altoft@sign:
  1765                           	opt stack 0
  1766  000034                     ___llmod@divisor:
  1767                           	opt stack 0
  1768                           
  1769                           ; 4 bytes @ 0x33
  1770  000034                     	ds	1
  1771  000035                     ??___ftge:
  1772  000035                     ?___ftdiv:
  1773                           	opt stack 0
  1774  000035                     ___wmul@product:
  1775                           	opt stack 0
  1776  000035                     ___ftdiv@f1:
  1777                           	opt stack 0
  1778  000035                     ___almod@divisor:
  1779                           	opt stack 0
  1780                           
  1781                           ; 4 bytes @ 0x34
  1782  000035                     	ds	2
  1783  000037                     ?_eepromRead:
  1784                           	opt stack 0
  1785  000037                     eepromRead@address:
  1786                           	opt stack 0
  1787                           
  1788                           ; 4 bytes @ 0x36
  1789  000037                     	ds	1
  1790  000038                     ___llmod@counter:
  1791                           	opt stack 0
  1792  000038                     ___ftdiv@f2:
  1793                           	opt stack 0
  1794                           
  1795                           ; 3 bytes @ 0x37
  1796  000038                     	ds	1
  1797  000039                     ___almod@counter:
  1798                           	opt stack 0
  1799                           
  1800                           ; 1 bytes @ 0x38
  1801  000039                     	ds	1
  1802  00003A                     ___almod@sign:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0x39
  1806  00003A                     	ds	1
  1807  00003B                     tblptru	equ	0xFF8
  1808                           tblptrh	equ	0xFF7
  1809                           tblptrl	equ	0xFF6
  1810                           tablat	equ	0xFF5
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           postdec1	equ	0xFE5
  1814                           fsr1l	equ	0xFE1
  1815                           
  1816                           ; 1 bytes @ 0x3A
  1817 ;;
  1818 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  1819 ;;
  1820 ;; *************** function _main *****************
  1821 ;; Defined at:
  1822 ;;		line 114 in file "main.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  lastBatteryT    2   49[BANK1 ] int 
  1827 ;;  cylinderBack    2   47[BANK1 ] int 
  1828 ;;  cylinderForw    2   45[BANK1 ] int 
  1829 ;;  cylinderDur     2   43[BANK1 ] int 
  1830 ;;  cylinderStar    2   41[BANK1 ] int 
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:       20 bytes
  1845 ;; Hardware stack levels required when called:   10
  1846 ;; This function calls:
  1847 ;;		___aldiv
  1848 ;;		___almod
  1849 ;;		_digitalWrite
  1850 ;;		_initLCD
  1851 ;;		_initServo
  1852 ;;		_initTimer
  1853 ;;		_lcdClear
  1854 ;;		_lcdHome
  1855 ;;		_pinSetup
  1856 ;;		_printf
  1857 ;;		_readKeypad
  1858 ;;		_showInterface
  1859 ;;		_sortBattery
  1860 ;;		_startTimer
  1861 ;; This function is called by:
  1862 ;;		Startup code after reset
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text0
  1867  001760                     __ptext0:
  1868                           	opt stack 0
  1869  001760                     _main:
  1870                           	opt stack 21
  1871                           
  1872                           ;main.c: 118: pinSetup();
  1873                           
  1874                           ;incstack = 0
  1875  001760  EC2B  F01C         	call	_pinSetup	;wreg free
  1876                           
  1877                           ;main.c: 119: initLCD();
  1878  001764  EC08  F01C         	call	_initLCD	;wreg free
  1879  001768                     l7324:
  1880                           
  1881                           ;main.c: 122: showInterface();
  1882  001768  EC9B  F017         	call	_showInterface	;wreg free
  1883                           
  1884                           ;main.c: 126: terminate = 0;
  1885  00176C  0E00               	movlw	0
  1886  00176E  6E5B               	movwf	_terminate+1,c
  1887  001770  0E00               	movlw	0
  1888  001772  6E5A               	movwf	_terminate,c
  1889                           
  1890                           ;main.c: 127: time = 0;
  1891  001774  0E00               	movlw	0
  1892  001776  6E52               	movwf	_time,c
  1893  001778  0E00               	movlw	0
  1894  00177A  6E53               	movwf	_time+1,c
  1895  00177C  0E00               	movlw	0
  1896  00177E  6E54               	movwf	_time+2,c
  1897  001780  0E00               	movlw	0
  1898  001782  6E55               	movwf	_time+3,c
  1899                           
  1900                           ;main.c: 128: initTimer(1);
  1901  001784  0E00               	movlw	0
  1902  001786  6E24               	movwf	initTimer@timer+1,c
  1903  001788  0E01               	movlw	1
  1904  00178A  6E23               	movwf	initTimer@timer,c
  1905  00178C  ECE3  F01B         	call	_initTimer	;wreg free
  1906                           
  1907                           ;main.c: 129: startTimer(1,0);
  1908  001790  0E00               	movlw	0
  1909  001792  6E24               	movwf	startTimer@timer+1,c
  1910  001794  0E01               	movlw	1
  1911  001796  6E23               	movwf	startTimer@timer,c
  1912  001798  0E00               	movlw	0
  1913  00179A  6E25               	movwf	startTimer@val,c
  1914  00179C  0E00               	movlw	0
  1915  00179E  6E26               	movwf	startTimer@val+1,c
  1916  0017A0  0E00               	movlw	0
  1917  0017A2  6E27               	movwf	startTimer@val+2,c
  1918  0017A4  0E00               	movlw	0
  1919  0017A6  6E28               	movwf	startTimer@val+3,c
  1920  0017A8  EC97  F01B         	call	_startTimer	;wreg free
  1921                           
  1922                           ;main.c: 132: digitalWrite(cylinderMotor, 1);
  1923  0017AC  0E47               	movlw	low _cylinderMotor
  1924  0017AE  6E23               	movwf	digitalWrite@pin,c
  1925  0017B0  0E01               	movlw	high _cylinderMotor
  1926  0017B2  6E24               	movwf	digitalWrite@pin+1,c
  1927  0017B4  0E00               	movlw	0
  1928  0017B6  6E26               	movwf	digitalWrite@val+1,c
  1929  0017B8  0E01               	movlw	1
  1930  0017BA  6E25               	movwf	digitalWrite@val,c
  1931  0017BC  ECCF  F015         	call	_digitalWrite	;wreg free
  1932                           
  1933                           ;main.c: 133: initServo(conveyorServo, 130);
  1934  0017C0  0E43               	movlw	low _conveyorServo
  1935  0017C2  0100               	movlb	0	; () banked
  1936  0017C4  6FDE               	movwf	initServo@motor& (0+255),b
  1937  0017C6  0E01               	movlw	high _conveyorServo
  1938  0017C8  0100               	movlb	0	; () banked
  1939  0017CA  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1940  0017CC  0E00               	movlw	0
  1941  0017CE  0100               	movlb	0	; () banked
  1942  0017D0  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  1943  0017D2  0E82               	movlw	130
  1944  0017D4  6FE0               	movwf	initServo@angle& (0+255),b
  1945  0017D6  EC8E  F014         	call	_initServo	;wreg free
  1946                           
  1947                           ;main.c: 134: initServo(padServo, padAngle_NEUTRAL);
  1948  0017DA  0E4E               	movlw	low _padServo
  1949  0017DC  0100               	movlb	0	; () banked
  1950  0017DE  6FDE               	movwf	initServo@motor& (0+255),b
  1951  0017E0  0E00               	movlw	high _padServo
  1952  0017E2  0100               	movlb	0	; () banked
  1953  0017E4  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1954  0017E6  C046  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  1955  0017EA  C047  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1956  0017EE  EC8E  F014         	call	_initServo	;wreg free
  1957                           
  1958                           ;main.c: 135: initServo(redirectingServo, redirectAngle_AA);
  1959  0017F2  0E53               	movlw	low _redirectingServo
  1960  0017F4  0100               	movlb	0	; () banked
  1961  0017F6  6FDE               	movwf	initServo@motor& (0+255),b
  1962  0017F8  0E01               	movlw	high _redirectingServo
  1963  0017FA  0100               	movlb	0	; () banked
  1964  0017FC  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1965  0017FE  C048  F0E0         	movff	_redirectAngle_AA,initServo@angle
  1966  001802  C049  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  1967  001806  EC8E  F014         	call	_initServo	;wreg free
  1968  00180A                     l7342:
  1969                           
  1970                           ;main.c: 139: lcdClear();
  1971  00180A  EC36  F01D         	call	_lcdClear	;wreg free
  1972                           
  1973                           ;main.c: 140: printf("running");
  1974  00180E  0EF6               	movlw	low STR_1
  1975  001810  0100               	movlb	0	; () banked
  1976  001812  6FBD               	movwf	printf@f& (0+255),b
  1977  001814  0EFF               	movlw	high STR_1
  1978  001816  0100               	movlb	0	; () banked
  1979  001818  6FBE               	movwf	(printf@f+1)& (0+255),b
  1980  00181A  EC09  F000         	call	_printf	;wreg free
  1981                           
  1982                           ;main.c: 142: int lastBatteryTime = time;
  1983  00181E  C052  F131         	movff	_time,main@lastBatteryTime
  1984  001822  C053  F132         	movff	_time+1,main@lastBatteryTime+1
  1985                           
  1986                           ;main.c: 144: int cylinderStart = time;
  1987  001826  C052  F129         	movff	_time,main@cylinderStart
  1988  00182A  C053  F12A         	movff	_time+1,main@cylinderStart+1
  1989                           
  1990                           ;main.c: 145: int cylinderDur = 0;
  1991  00182E  0E00               	movlw	0
  1992  001830  0101               	movlb	1	; () banked
  1993  001832  6F2C               	movwf	(main@cylinderDur+1)& (0+255),b
  1994  001834  0E00               	movlw	0
  1995  001836  6F2B               	movwf	main@cylinderDur& (0+255),b
  1996                           
  1997                           ; BSR set to: 1
  1998                           ;main.c: 146: int cylinderForward = 70;
  1999  001838  0E00               	movlw	0
  2000  00183A  0101               	movlb	1	; () banked
  2001  00183C  6F2E               	movwf	(main@cylinderForward+1)& (0+255),b
  2002  00183E  0E46               	movlw	70
  2003  001840  6F2D               	movwf	main@cylinderForward& (0+255),b
  2004                           
  2005                           ; BSR set to: 1
  2006                           ;main.c: 147: int cylinderBackward = 30;
  2007  001842  0E00               	movlw	0
  2008  001844  0101               	movlb	1	; () banked
  2009  001846  6F30               	movwf	(main@cylinderBackward+1)& (0+255),b
  2010  001848  0E1E               	movlw	30
  2011  00184A  6F2F               	movwf	main@cylinderBackward& (0+255),b
  2012                           
  2013                           ;main.c: 149: while(!batteryDetected && !terminate){
  2014  00184C  D09D               	goto	l7364
  2015  00184E                     l7354:
  2016                           
  2017                           ; BSR set to: 1
  2018                           ;main.c: 151: lcdHome();
  2019  00184E  EC3A  F01D         	call	_lcdHome	;wreg free
  2020                           
  2021                           ;main.c: 152: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2022  001852  0E8C               	movlw	low STR_2
  2023  001854  0100               	movlb	0	; () banked
  2024  001856  6FBD               	movwf	printf@f& (0+255),b
  2025  001858  0EFF               	movlw	high STR_2
  2026  00185A  0100               	movlb	0	; () banked
  2027  00185C  6FBE               	movwf	(printf@f+1)& (0+255),b
  2028  00185E  C052  F023         	movff	_time,___aldiv@dividend
  2029  001862  C053  F024         	movff	_time+1,___aldiv@dividend+1
  2030  001866  C054  F025         	movff	_time+2,___aldiv@dividend+2
  2031  00186A  C055  F026         	movff	_time+3,___aldiv@dividend+3
  2032  00186E  0E58               	movlw	88
  2033  001870  6E27               	movwf	___aldiv@divisor,c
  2034  001872  0E02               	movlw	2
  2035  001874  6E28               	movwf	___aldiv@divisor+1,c
  2036  001876  0E00               	movlw	0
  2037  001878  6E29               	movwf	___aldiv@divisor+2,c
  2038  00187A  0E00               	movlw	0
  2039  00187C  6E2A               	movwf	___aldiv@divisor+3,c
  2040  00187E  EC69  F015         	call	___aldiv	;wreg free
  2041  001882  C023  F0BF         	movff	?___aldiv,?_printf+2
  2042  001886  C024  F0C0         	movff	?___aldiv+1,?_printf+3
  2043  00188A  C025  F0C1         	movff	?___aldiv+2,?_printf+4
  2044  00188E  C026  F0C2         	movff	?___aldiv+3,?_printf+5
  2045  001892  0E0A               	movlw	10
  2046  001894  6E27               	movwf	___aldiv@divisor,c
  2047  001896  0E00               	movlw	0
  2048  001898  6E28               	movwf	___aldiv@divisor+1,c
  2049  00189A  0E00               	movlw	0
  2050  00189C  6E29               	movwf	___aldiv@divisor+2,c
  2051  00189E  0E00               	movlw	0
  2052  0018A0  6E2A               	movwf	___aldiv@divisor+3,c
  2053  0018A2  C052  F023         	movff	_time,___aldiv@dividend
  2054  0018A6  C053  F024         	movff	_time+1,___aldiv@dividend+1
  2055  0018AA  C054  F025         	movff	_time+2,___aldiv@dividend+2
  2056  0018AE  C055  F026         	movff	_time+3,___aldiv@dividend+3
  2057  0018B2  EC69  F015         	call	___aldiv	;wreg free
  2058  0018B6  C023  F031         	movff	?___aldiv,___almod@dividend
  2059  0018BA  C024  F032         	movff	?___aldiv+1,___almod@dividend+1
  2060  0018BE  C025  F033         	movff	?___aldiv+2,___almod@dividend+2
  2061  0018C2  C026  F034         	movff	?___aldiv+3,___almod@dividend+3
  2062  0018C6  0E3C               	movlw	60
  2063  0018C8  6E35               	movwf	___almod@divisor,c
  2064  0018CA  0E00               	movlw	0
  2065  0018CC  6E36               	movwf	___almod@divisor+1,c
  2066  0018CE  0E00               	movlw	0
  2067  0018D0  6E37               	movwf	___almod@divisor+2,c
  2068  0018D2  0E00               	movlw	0
  2069  0018D4  6E38               	movwf	___almod@divisor+3,c
  2070  0018D6  EC45  F017         	call	___almod	;wreg free
  2071  0018DA  C031  F0C3         	movff	?___almod,?_printf+6
  2072  0018DE  C032  F0C4         	movff	?___almod+1,?_printf+7
  2073  0018E2  C033  F0C5         	movff	?___almod+2,?_printf+8
  2074  0018E6  C034  F0C6         	movff	?___almod+3,?_printf+9
  2075  0018EA  EC09  F000         	call	_printf	;wreg free
  2076                           
  2077                           ;main.c: 153: _delay((unsigned long)((77)*(10000000/4000.0)));
  2078  0018EE  0EFA               	movlw	250
  2079  0018F0  0101               	movlb	1	; () banked
  2080  0018F2  6F1F               	movwf	??_main& (0+255),b
  2081  0018F4  0EFF               	movlw	255
  2082  0018F6                     u7747:
  2083  0018F6  2EE8               	decfsz	wreg,f,c
  2084  0018F8  D7FE               	bra	u7747
  2085  0018FA  2F1F               	decfsz	??_main& (0+255),f,b
  2086  0018FC  D7FC               	bra	u7747
  2087                           
  2088                           ;main.c: 165: if(time - lastBatteryTime > stoppingTime)
  2089  0018FE  C131  F11F         	movff	main@lastBatteryTime,??_main
  2090  001902  C132  F120         	movff	main@lastBatteryTime+1,??_main+1
  2091  001906  0E00               	movlw	0
  2092  001908  0101               	movlb	1	; () banked
  2093  00190A  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2094  00190C  0EFF               	movlw	255
  2095  00190E  6F21               	movwf	(??_main+2)& (0+255),b
  2096  001910  6F22               	movwf	(??_main+3)& (0+255),b
  2097  001912  0101               	movlb	1	; () banked
  2098  001914  1F1F               	comf	??_main& (0+255),f,b
  2099  001916  1F20               	comf	(??_main+1)& (0+255),f,b
  2100  001918  1F21               	comf	(??_main+2)& (0+255),f,b
  2101  00191A  1F22               	comf	(??_main+3)& (0+255),f,b
  2102  00191C  2B1F               	incf	??_main& (0+255),f,b
  2103  00191E  0E00               	movlw	0
  2104  001920  2320               	addwfc	(??_main+1)& (0+255),f,b
  2105  001922  2321               	addwfc	(??_main+2)& (0+255),f,b
  2106  001924  2322               	addwfc	(??_main+3)& (0+255),f,b
  2107  001926  5052               	movf	_time,w,c
  2108  001928  0101               	movlb	1	; () banked
  2109  00192A  251F               	addwf	??_main& (0+255),w,b
  2110  00192C  0101               	movlb	1	; () banked
  2111  00192E  6F23               	movwf	(??_main+4)& (0+255),b
  2112  001930  5053               	movf	_time+1,w,c
  2113  001932  0101               	movlb	1	; () banked
  2114  001934  2120               	addwfc	(??_main+1)& (0+255),w,b
  2115  001936  0101               	movlb	1	; () banked
  2116  001938  6F24               	movwf	(??_main+5)& (0+255),b
  2117  00193A  5054               	movf	_time+2,w,c
  2118  00193C  0101               	movlb	1	; () banked
  2119  00193E  2121               	addwfc	(??_main+2)& (0+255),w,b
  2120  001940  0101               	movlb	1	; () banked
  2121  001942  6F25               	movwf	(??_main+6)& (0+255),b
  2122  001944  5055               	movf	_time+3,w,c
  2123  001946  0101               	movlb	1	; () banked
  2124  001948  2122               	addwfc	(??_main+3)& (0+255),w,b
  2125  00194A  0101               	movlb	1	; () banked
  2126  00194C  6F26               	movwf	(??_main+7)& (0+255),b
  2127  00194E  0E00               	movlw	0
  2128  001950  BE4D               	btfsc	_stoppingTime+1,7,c
  2129  001952  0EFF               	movlw	255
  2130  001954  0101               	movlb	1	; () banked
  2131  001956  6F28               	movwf	(??_main+9)& (0+255),b
  2132  001958  0A80               	xorlw	128
  2133  00195A  6F27               	movwf	(??_main+8)& (0+255),b
  2134  00195C  0101               	movlb	1	; () banked
  2135  00195E  5123               	movf	(??_main+4)& (0+255),w,b
  2136  001960  5C4C               	subwf	_stoppingTime,w,c
  2137  001962  0101               	movlb	1	; () banked
  2138  001964  5124               	movf	(??_main+5)& (0+255),w,b
  2139  001966  584D               	subwfb	_stoppingTime+1,w,c
  2140  001968  0101               	movlb	1	; () banked
  2141  00196A  5125               	movf	(??_main+6)& (0+255),w,b
  2142  00196C  0101               	movlb	1	; () banked
  2143  00196E  5928               	subwfb	(??_main+9)& (0+255),w,b
  2144  001970  0101               	movlb	1	; () banked
  2145  001972  5126               	movf	(??_main+7)& (0+255),w,b
  2146  001974  0A80               	xorlw	128
  2147  001976  0101               	movlb	1	; () banked
  2148  001978  5927               	subwfb	(??_main+8)& (0+255),w,b
  2149  00197A  B0D8               	btfsc	status,0,c
  2150  00197C  D005               	goto	l7364
  2151                           
  2152                           ; BSR set to: 1
  2153                           ;main.c: 166: {
  2154                           ;main.c: 167: terminate = 1;
  2155  00197E  0E00               	movlw	0
  2156  001980  6E5B               	movwf	_terminate+1,c
  2157  001982  0E01               	movlw	1
  2158  001984  6E5A               	movwf	_terminate,c
  2159                           
  2160                           ;main.c: 168: break;
  2161  001986  D008               	goto	l7368
  2162  001988                     l7364:
  2163                           
  2164                           ; BSR set to: 1
  2165  001988  5056               	movf	_batteryDetected,w,c
  2166  00198A  1057               	iorwf	_batteryDetected+1,w,c
  2167  00198C  A4D8               	btfss	status,2,c
  2168  00198E  D004               	goto	l7368
  2169                           
  2170                           ; BSR set to: 1
  2171  001990  505A               	movf	_terminate,w,c
  2172  001992  105B               	iorwf	_terminate+1,w,c
  2173  001994  B4D8               	btfsc	status,2,c
  2174  001996  D75B               	goto	l7354
  2175  001998                     l7368:
  2176                           
  2177                           ; BSR set to: 1
  2178                           ;main.c: 169: }
  2179                           ;main.c: 170: }
  2180                           ;main.c: 172: if(terminate)break;
  2181  001998  505A               	movf	_terminate,w,c
  2182  00199A  105B               	iorwf	_terminate+1,w,c
  2183  00199C  A4D8               	btfss	status,2,c
  2184  00199E  D00B               	goto	l7378
  2185                           
  2186                           ; BSR set to: 1
  2187                           ;main.c: 174: sortBattery();
  2188                           
  2189                           ; BSR set to: 1
  2190                           
  2191                           ; BSR set to: 1
  2192  0019A0  EC05  F007         	call	_sortBattery	;wreg free
  2193                           
  2194                           ;main.c: 177: lastBatteryTime = time;
  2195  0019A4  C052  F131         	movff	_time,main@lastBatteryTime
  2196  0019A8  C053  F132         	movff	_time+1,main@lastBatteryTime+1
  2197                           
  2198                           ;main.c: 178: batteryDetected = 0;
  2199  0019AC  0E00               	movlw	0
  2200  0019AE  6E57               	movwf	_batteryDetected+1,c
  2201  0019B0  0E00               	movlw	0
  2202  0019B2  6E56               	movwf	_batteryDetected,c
  2203  0019B4  D72A               	goto	l7342
  2204  0019B6                     l7378:
  2205                           
  2206                           ;main.c: 179: }
  2207                           ;main.c: 182: digitalWrite(cylinderMotor, 0);
  2208  0019B6  0E47               	movlw	low _cylinderMotor
  2209  0019B8  6E23               	movwf	digitalWrite@pin,c
  2210  0019BA  0E01               	movlw	high _cylinderMotor
  2211  0019BC  6E24               	movwf	digitalWrite@pin+1,c
  2212  0019BE  0E00               	movlw	0
  2213  0019C0  6E26               	movwf	digitalWrite@val+1,c
  2214  0019C2  0E00               	movlw	0
  2215  0019C4  6E25               	movwf	digitalWrite@val,c
  2216  0019C6  ECCF  F015         	call	_digitalWrite	;wreg free
  2217                           
  2218                           ;main.c: 185: lcdClear();
  2219  0019CA  EC36  F01D         	call	_lcdClear	;wreg free
  2220                           
  2221                           ;main.c: 186: printf("[AA,C,9V,OTHER]\n");
  2222  0019CE  0E7B               	movlw	low STR_3
  2223  0019D0  0100               	movlb	0	; () banked
  2224  0019D2  6FBD               	movwf	printf@f& (0+255),b
  2225  0019D4  0EFF               	movlw	high STR_3
  2226  0019D6  0100               	movlb	0	; () banked
  2227  0019D8  6FBE               	movwf	(printf@f+1)& (0+255),b
  2228  0019DA  EC09  F000         	call	_printf	;wreg free
  2229                           
  2230                           ;main.c: 187: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2231  0019DE  0EAC               	movlw	low STR_4
  2232  0019E0  0100               	movlb	0	; () banked
  2233  0019E2  6FBD               	movwf	printf@f& (0+255),b
  2234  0019E4  0EFF               	movlw	high STR_4
  2235  0019E6  0100               	movlb	0	; () banked
  2236  0019E8  6FBE               	movwf	(printf@f+1)& (0+255),b
  2237  0019EA  C16F  F0BF         	movff	_n_AA,?_printf+2
  2238  0019EE  C170  F0C0         	movff	_n_AA+1,?_printf+3
  2239  0019F2  C171  F0C1         	movff	_n_C,?_printf+4
  2240  0019F6  C172  F0C2         	movff	_n_C+1,?_printf+5
  2241  0019FA  C16D  F0C3         	movff	_n_9V,?_printf+6
  2242  0019FE  C16E  F0C4         	movff	_n_9V+1,?_printf+7
  2243  001A02  C173  F0C5         	movff	_n_OTHER,?_printf+8
  2244  001A06  C174  F0C6         	movff	_n_OTHER+1,?_printf+9
  2245  001A0A  EC09  F000         	call	_printf	;wreg free
  2246                           
  2247                           ;main.c: 188: readKeypad();
  2248  001A0E  EC83  F01C         	call	_readKeypad	;wreg free
  2249  001A12  D6AA               	goto	l7324
  2250  001A14                     l152:
  2251  001A14  D7FF               	goto	l152
  2252  001A16                     __end_of_main:
  2253                           	opt stack 0
  2254                           tblptru	equ	0xFF8
  2255                           tblptrh	equ	0xFF7
  2256                           tblptrl	equ	0xFF6
  2257                           tablat	equ	0xFF5
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           postdec1	equ	0xFE5
  2261                           fsr1l	equ	0xFE1
  2262                           status	equ	0xFD8
  2263                           
  2264 ;; *************** function _sortBattery *****************
  2265 ;; Defined at:
  2266 ;;		line 196 in file "main.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;		None
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;  V               3   22[BANK1 ] float 
  2271 ;;  i               2   18[BANK1 ] int 
  2272 ;;  i               3   25[BANK1 ] float 
  2273 ;;  V               3   28[BANK1 ] float 
  2274 ;;  V_max           3   15[BANK1 ] float 
  2275 ;;  resolution      3   12[BANK1 ] float 
  2276 ;;  Vcc             3    9[BANK1 ] float 
  2277 ;;  V_float         3    2[BANK1 ] float 
  2278 ;;  targetAngle     2   20[BANK1 ] int 
  2279 ;;  signal          2    7[BANK1 ] int 
  2280 ;;  pos_v_counte    2    5[BANK1 ] int 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;Total ram usage:       33 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    8
  2297 ;; This function calls:
  2298 ;;		___altoft
  2299 ;;		___awtoft
  2300 ;;		___ftdiv
  2301 ;;		___ftge
  2302 ;;		___ftmul
  2303 ;;		___ftsub
  2304 ;;		___fttol
  2305 ;;		_analogRead
  2306 ;;		_digitalRead
  2307 ;;		_digitalWrite
  2308 ;;		_lcdClear
  2309 ;;		_printf
  2310 ;;		_readKeypad
  2311 ;;		_setAngle
  2312 ;; This function is called by:
  2313 ;;		_main
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text1
  2318  000E0A                     __ptext1:
  2319                           	opt stack 0
  2320  000E0A                     _sortBattery:
  2321                           	opt stack 22
  2322                           
  2323                           ;main.c: 199: setAngle(conveyorServo, 90);
  2324                           
  2325                           ;incstack = 0
  2326  000E0A  0E43               	movlw	low _conveyorServo
  2327  000E0C  0100               	movlb	0	; () banked
  2328  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2329  000E10  0E01               	movlw	high _conveyorServo
  2330  000E12  0100               	movlb	0	; () banked
  2331  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2332  000E16  0E00               	movlw	0
  2333  000E18  0100               	movlb	0	; () banked
  2334  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2335  000E1C  0E5A               	movlw	90
  2336  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2337  000E20  ECFF  F014         	call	_setAngle	;wreg free
  2338                           
  2339                           ;main.c: 200: digitalWrite(cylinderMotor, 0);
  2340  000E24  0E47               	movlw	low _cylinderMotor
  2341  000E26  6E23               	movwf	digitalWrite@pin,c
  2342  000E28  0E01               	movlw	high _cylinderMotor
  2343  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2344  000E2C  0E00               	movlw	0
  2345  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2346  000E30  0E00               	movlw	0
  2347  000E32  6E25               	movwf	digitalWrite@val,c
  2348  000E34  ECCF  F015         	call	_digitalWrite	;wreg free
  2349                           
  2350                           ;main.c: 203: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2351  000E38  0E0D               	movlw	13
  2352  000E3A  0100               	movlb	0	; () banked
  2353  000E3C  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2354  000E3E  0EAF               	movlw	175
  2355  000E40  0100               	movlb	0	; () banked
  2356  000E42  6FEB               	movwf	??_sortBattery& (0+255),b
  2357  000E44  0EB6               	movlw	182
  2358  000E46                     u7757:
  2359  000E46  2EE8               	decfsz	wreg,f,c
  2360  000E48  D7FE               	bra	u7757
  2361  000E4A  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2362  000E4C  D7FC               	bra	u7757
  2363  000E4E  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2364  000E50  D7FA               	bra	u7757
  2365  000E52  F000               	nop	
  2366                           
  2367                           ;main.c: 205: float Vcc = 5.00;
  2368  000E54  0E00               	movlw	0
  2369  000E56  0101               	movlb	1	; () banked
  2370  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2371  000E5A  0EA0               	movlw	160
  2372  000E5C  0101               	movlb	1	; () banked
  2373  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2374  000E60  0E40               	movlw	64
  2375  000E62  0101               	movlb	1	; () banked
  2376  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2377                           
  2378                           ; BSR set to: 1
  2379                           ;main.c: 206: float resolution = (1<<10) - 1;
  2380  000E66  0EC0               	movlw	192
  2381  000E68  0101               	movlb	1	; () banked
  2382  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2383  000E6C  0E7F               	movlw	127
  2384  000E6E  0101               	movlb	1	; () banked
  2385  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2386  000E72  0E44               	movlw	68
  2387  000E74  0101               	movlb	1	; () banked
  2388  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2389                           
  2390                           ; BSR set to: 1
  2391                           ;main.c: 207: float V_max = 0;
  2392  000E78  0E00               	movlw	0
  2393  000E7A  0101               	movlb	1	; () banked
  2394  000E7C  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2395  000E7E  0E00               	movlw	0
  2396  000E80  0101               	movlb	1	; () banked
  2397  000E82  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2398  000E84  0E00               	movlw	0
  2399  000E86  0101               	movlb	1	; () banked
  2400  000E88  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2401                           
  2402                           ; BSR set to: 1
  2403                           ;main.c: 208: float V_float = 0;
  2404  000E8A  0E00               	movlw	0
  2405  000E8C  0101               	movlb	1	; () banked
  2406  000E8E  6F02               	movwf	sortBattery@V_float& (0+255),b
  2407  000E90  0E00               	movlw	0
  2408  000E92  0101               	movlb	1	; () banked
  2409  000E94  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2410  000E96  0E00               	movlw	0
  2411  000E98  0101               	movlb	1	; () banked
  2412  000E9A  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2413                           
  2414                           ; BSR set to: 1
  2415                           ;main.c: 209: int pos_v_counter = 1;
  2416  000E9C  0E00               	movlw	0
  2417  000E9E  0101               	movlb	1	; () banked
  2418  000EA0  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2419  000EA2  0E01               	movlw	1
  2420  000EA4  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2421                           
  2422                           ; BSR set to: 1
  2423                           ;main.c: 210: int signal = 0;
  2424  000EA6  0E00               	movlw	0
  2425  000EA8  0101               	movlb	1	; () banked
  2426  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2427  000EAC  0E00               	movlw	0
  2428  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2429                           
  2430                           ; BSR set to: 1
  2431                           ;main.c: 214: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2432  000EB0  C046  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2433  000EB4  C047  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2434  000EB8  EC67  F01C         	call	___awtoft	;wreg free
  2435  000EBC  C02B  F119         	movff	?___awtoft,sortBattery@i
  2436  000EC0  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2437  000EC4  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2438  000EC8  D0F6               	goto	l7166
  2439  000ECA                     l7140:
  2440                           
  2441                           ;main.c: 215: setAngle(padServo, i);
  2442  000ECA  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2443  000ECE  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2444  000ED2  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2445  000ED6  ECCA  F010         	call	___fttol	;wreg free
  2446  000EDA  C0AE  F100         	movff	?___fttol,_sortBattery$1389
  2447  000EDE  C0AF  F101         	movff	?___fttol+1,_sortBattery$1389+1
  2448                           
  2449                           ;main.c: 215: setAngle(padServo, i);
  2450  000EE2  0E4E               	movlw	low _padServo
  2451  000EE4  0100               	movlb	0	; () banked
  2452  000EE6  6FD4               	movwf	setAngle@motor& (0+255),b
  2453  000EE8  0E00               	movlw	high _padServo
  2454  000EEA  0100               	movlb	0	; () banked
  2455  000EEC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2456  000EEE  C100  F0D6         	movff	_sortBattery$1389,setAngle@angle
  2457  000EF2  C101  F0D7         	movff	_sortBattery$1389+1,setAngle@angle+1
  2458  000EF6  ECFF  F014         	call	_setAngle	;wreg free
  2459                           
  2460                           ;main.c: 216: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2461  000EFA  0E53               	movlw	83
  2462  000EFC                     u7767:
  2463  000EFC  2EE8               	decfsz	wreg,f,c
  2464  000EFE  D7FE               	bra	u7767
  2465  000F00  F000               	nop	
  2466                           
  2467                           ;main.c: 217: digitalWrite(AA_float, 1);
  2468  000F02  0E3F               	movlw	low _AA_float
  2469  000F04  6E23               	movwf	digitalWrite@pin,c
  2470  000F06  0E01               	movlw	high _AA_float
  2471  000F08  6E24               	movwf	digitalWrite@pin+1,c
  2472  000F0A  0E00               	movlw	0
  2473  000F0C  6E26               	movwf	digitalWrite@val+1,c
  2474  000F0E  0E01               	movlw	1
  2475  000F10  6E25               	movwf	digitalWrite@val,c
  2476  000F12  ECCF  F015         	call	_digitalWrite	;wreg free
  2477                           
  2478                           ;main.c: 218: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2479  000F16  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2480  000F1A  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2481  000F1E  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2482  000F22  C169  F023         	movff	_padPin3+2,analogRead@channel
  2483  000F26  C16A  F024         	movff	_padPin3+3,analogRead@channel+1
  2484  000F2A  EC4B  F01C         	call	_analogRead	;wreg free
  2485  000F2E  C023  F02B         	movff	?_analogRead,___altoft@c
  2486  000F32  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2487  000F36  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2488  000F3A  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2489  000F3E  EC46  F019         	call	___altoft	;wreg free
  2490  000F42  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2491  000F46  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2492  000F4A  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2493  000F4E  EC99  F012         	call	___ftdiv	;wreg free
  2494  000F52  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2495  000F56  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2496  000F5A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2497  000F5E  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2498  000F62  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2499  000F66  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2500  000F6A  EC6F  F00F         	call	___ftmul	;wreg free
  2501  000F6E  C089  F116         	movff	?___ftmul,sortBattery@V
  2502  000F72  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2503  000F76  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2504                           
  2505                           ;main.c: 220: if(V > 0.1)pos_v_counter++;
  2506  000F7A  0ECD               	movlw	205
  2507  000F7C  6E2F               	movwf	___ftge@ff1,c
  2508  000F7E  0ECC               	movlw	204
  2509  000F80  6E30               	movwf	___ftge@ff1+1,c
  2510  000F82  0E3D               	movlw	61
  2511  000F84  6E31               	movwf	___ftge@ff1+2,c
  2512  000F86  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2513  000F8A  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2514  000F8E  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2515  000F92  EC37  F018         	call	___ftge	;wreg free
  2516  000F96  B0D8               	btfsc	status,0,c
  2517  000F98  D003               	goto	l7154
  2518  000F9A  0101               	movlb	1	; () banked
  2519  000F9C  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2520  000F9E  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2521  000FA0                     l7154:
  2522                           
  2523                           ;main.c: 222: if(V > V_max) {
  2524  000FA0  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2525  000FA4  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2526  000FA8  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2527  000FAC  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2528  000FB0  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2529  000FB4  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2530  000FB8  EC37  F018         	call	___ftge	;wreg free
  2531  000FBC  B0D8               	btfsc	status,0,c
  2532  000FBE  D064               	goto	l7164
  2533                           
  2534                           ;main.c: 223: signal = digitalRead(padPin1)<<1;
  2535  000FC0  0E4B               	movlw	low _padPin1
  2536  000FC2  6E23               	movwf	digitalRead@pin,c
  2537  000FC4  0E01               	movlw	high _padPin1
  2538  000FC6  6E24               	movwf	digitalRead@pin+1,c
  2539  000FC8  ECA7  F013         	call	_digitalRead	;wreg free
  2540  000FCC  90D8               	bcf	status,0,c
  2541  000FCE  3423               	rlcf	?_digitalRead,w,c
  2542  000FD0  0101               	movlb	1	; () banked
  2543  000FD2  6F07               	movwf	sortBattery@signal& (0+255),b
  2544  000FD4  3424               	rlcf	?_digitalRead+1,w,c
  2545  000FD6  0101               	movlb	1	; () banked
  2546  000FD8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2547                           
  2548                           ;main.c: 224: signal |= digitalRead(padPin2)<<0;
  2549  000FDA  0E4F               	movlw	low _padPin2
  2550  000FDC  6E23               	movwf	digitalRead@pin,c
  2551  000FDE  0E01               	movlw	high _padPin2
  2552  000FE0  6E24               	movwf	digitalRead@pin+1,c
  2553  000FE2  ECA7  F013         	call	_digitalRead	;wreg free
  2554  000FE6  5023               	movf	?_digitalRead,w,c
  2555  000FE8  0101               	movlb	1	; () banked
  2556  000FEA  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2557  000FEC  5024               	movf	?_digitalRead+1,w,c
  2558  000FEE  0101               	movlb	1	; () banked
  2559  000FF0  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2560                           
  2561                           ; BSR set to: 1
  2562                           ;main.c: 226: V_max = V;
  2563  000FF2  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2564  000FF6  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2565  000FFA  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2566                           
  2567                           ;main.c: 229: digitalWrite(AA_float, 0);
  2568  000FFE  0E3F               	movlw	low _AA_float
  2569  001000  6E23               	movwf	digitalWrite@pin,c
  2570  001002  0E01               	movlw	high _AA_float
  2571  001004  6E24               	movwf	digitalWrite@pin+1,c
  2572  001006  0E00               	movlw	0
  2573  001008  6E26               	movwf	digitalWrite@val+1,c
  2574  00100A  0E00               	movlw	0
  2575  00100C  6E25               	movwf	digitalWrite@val,c
  2576  00100E  ECCF  F015         	call	_digitalWrite	;wreg free
  2577                           
  2578                           ;main.c: 230: _delay((unsigned long)((1)*(10000000/4000.0)));
  2579  001012  0E04               	movlw	4
  2580  001014  0100               	movlb	0	; () banked
  2581  001016  6FEB               	movwf	??_sortBattery& (0+255),b
  2582  001018  0E3D               	movlw	61
  2583  00101A                     u7777:
  2584  00101A  2EE8               	decfsz	wreg,f,c
  2585  00101C  D7FE               	bra	u7777
  2586  00101E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2587  001020  D7FC               	bra	u7777
  2588  001022  D000               	nop2	
  2589                           
  2590                           ;main.c: 231: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2591  001024  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2592  001028  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2593  00102C  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2594  001030  C169  F023         	movff	_padPin3+2,analogRead@channel
  2595  001034  C16A  F024         	movff	_padPin3+3,analogRead@channel+1
  2596  001038  EC4B  F01C         	call	_analogRead	;wreg free
  2597  00103C  C023  F02B         	movff	?_analogRead,___altoft@c
  2598  001040  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2599  001044  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2600  001048  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2601  00104C  EC46  F019         	call	___altoft	;wreg free
  2602  001050  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2603  001054  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2604  001058  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2605  00105C  EC99  F012         	call	___ftdiv	;wreg free
  2606  001060  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2607  001064  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2608  001068  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2609  00106C  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2610  001070  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2611  001074  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2612  001078  EC6F  F00F         	call	___ftmul	;wreg free
  2613  00107C  C089  F102         	movff	?___ftmul,sortBattery@V_float
  2614  001080  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2615  001084  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2616  001088                     l7164:
  2617  001088  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  2618  00108C  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  2619  001090  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  2620  001094  0ECD               	movlw	205
  2621  001096  0100               	movlb	0	; () banked
  2622  001098  6FB1               	movwf	___ftsub@f2& (0+255),b
  2623  00109A  0ECC               	movlw	204
  2624  00109C  0100               	movlb	0	; () banked
  2625  00109E  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  2626  0010A0  0E3D               	movlw	61
  2627  0010A2  0100               	movlb	0	; () banked
  2628  0010A4  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  2629  0010A6  EC71  F01B         	call	___ftsub	;wreg free
  2630  0010AA  C0AE  F119         	movff	?___ftsub,sortBattery@i
  2631  0010AE  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2632  0010B2  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2633  0010B6                     l7166:
  2634  0010B6  C044  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  2635  0010BA  C045  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2636  0010BE  EC67  F01C         	call	___awtoft	;wreg free
  2637  0010C2  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  2638  0010C6  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  2639  0010CA  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  2640  0010CE  C119  F032         	movff	sortBattery@i,___ftge@ff2
  2641  0010D2  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  2642  0010D6  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  2643  0010DA  EC37  F018         	call	___ftge	;wreg free
  2644  0010DE  A0D8               	btfss	status,0,c
  2645  0010E0  D6F4               	goto	l7140
  2646                           
  2647                           ;main.c: 233: }
  2648                           ;main.c: 234: }
  2649                           ;main.c: 236: int targetAngle;
  2650                           ;main.c: 237: float V = V_max;
  2651  0010E2  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_223
  2652  0010E6  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_223+1
  2653  0010EA  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_223+2
  2654                           
  2655                           ;main.c: 239: lcdClear();
  2656  0010EE  EC36  F01D         	call	_lcdClear	;wreg free
  2657                           
  2658                           ;main.c: 240: printf("V: %d, N: %.3f",V,pos_v_counter);
  2659  0010F2  0E9D               	movlw	low STR_5
  2660  0010F4  0100               	movlb	0	; () banked
  2661  0010F6  6FBD               	movwf	printf@f& (0+255),b
  2662  0010F8  0EFF               	movlw	high STR_5
  2663  0010FA  0100               	movlb	0	; () banked
  2664  0010FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2665  0010FE  C11C  F0BF         	movff	sortBattery@V_223,?_printf+2
  2666  001102  C11D  F0C0         	movff	sortBattery@V_223+1,?_printf+3
  2667  001106  C11E  F0C1         	movff	sortBattery@V_223+2,?_printf+4
  2668  00110A  C105  F0C2         	movff	sortBattery@pos_v_counter,?_printf+5
  2669  00110E  C106  F0C3         	movff	sortBattery@pos_v_counter+1,?_printf+6
  2670  001112  EC09  F000         	call	_printf	;wreg free
  2671                           
  2672                           ;main.c: 245: switch(signal){
  2673  001116  D08A               	goto	l7206
  2674  001118                     l7172:
  2675                           
  2676                           ;main.c: 247: if(V_float < 0.1){
  2677  001118  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  2678  00111C  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2679  001120  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2680  001124  0ECD               	movlw	205
  2681  001126  6E32               	movwf	___ftge@ff2,c
  2682  001128  0ECC               	movlw	204
  2683  00112A  6E33               	movwf	___ftge@ff2+1,c
  2684  00112C  0E3D               	movlw	61
  2685  00112E  6E34               	movwf	___ftge@ff2+2,c
  2686  001130  EC37  F018         	call	___ftge	;wreg free
  2687  001134  B0D8               	btfsc	status,0,c
  2688  001136  D026               	goto	l7184
  2689                           
  2690                           ;main.c: 248: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;printf("AA lim: 
      +                          %f",V_LIM_AA);}
  2691  001138  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  2692  00113C  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2693  001140  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2694  001144  C11C  F032         	movff	sortBattery@V_223,___ftge@ff2
  2695  001148  C11D  F033         	movff	sortBattery@V_223+1,___ftge@ff2+1
  2696  00114C  C11E  F034         	movff	sortBattery@V_223+2,___ftge@ff2+2
  2697  001150  EC37  F018         	call	___ftge	;wreg free
  2698  001154  B0D8               	btfsc	status,0,c
  2699  001156  D062               	goto	l173
  2700  001158  C048  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2701  00115C  C049  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2702  001160  0101               	movlb	1	; () banked
  2703  001162  4B6F               	infsnz	_n_AA& (0+255),f,b
  2704  001164  2B70               	incf	(_n_AA+1)& (0+255),f,b
  2705                           
  2706                           ; BSR set to: 1
  2707  001166  0EC5               	movlw	low STR_6
  2708  001168  0100               	movlb	0	; () banked
  2709  00116A  6FBD               	movwf	printf@f& (0+255),b
  2710  00116C  0EFF               	movlw	high STR_6
  2711  00116E  0100               	movlb	0	; () banked
  2712  001170  6FBE               	movwf	(printf@f+1)& (0+255),b
  2713  001172  C03E  F0BF         	movff	_V_LIM_AA,?_printf+2
  2714  001176  C03F  F0C0         	movff	_V_LIM_AA+1,?_printf+3
  2715  00117A  C040  F0C1         	movff	_V_LIM_AA+2,?_printf+4
  2716  00117E  EC09  F000         	call	_printf	;wreg free
  2717  001182  D068               	goto	l7208
  2718  001184                     l7184:
  2719                           
  2720                           ;main.c: 254: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;printf("9V lim: 
      +                          %f",V_LIM_9V);}
  2721  001184  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  2722  001188  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2723  00118C  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2724  001190  C11C  F032         	movff	sortBattery@V_223,___ftge@ff2
  2725  001194  C11D  F033         	movff	sortBattery@V_223+1,___ftge@ff2+1
  2726  001198  C11E  F034         	movff	sortBattery@V_223+2,___ftge@ff2+2
  2727  00119C  EC37  F018         	call	___ftge	;wreg free
  2728  0011A0  B0D8               	btfsc	status,0,c
  2729  0011A2  D03C               	goto	l173
  2730  0011A4  C13B  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2731  0011A8  C13C  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2732  0011AC  0101               	movlb	1	; () banked
  2733  0011AE  4B6D               	infsnz	_n_9V& (0+255),f,b
  2734  0011B0  2B6E               	incf	(_n_9V+1)& (0+255),f,b
  2735                           
  2736                           ; BSR set to: 1
  2737  0011B2  0ED0               	movlw	low STR_7
  2738  0011B4  0100               	movlb	0	; () banked
  2739  0011B6  6FBD               	movwf	printf@f& (0+255),b
  2740  0011B8  0EFF               	movlw	high STR_7
  2741  0011BA  0100               	movlb	0	; () banked
  2742  0011BC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2743  0011BE  C03B  F0BF         	movff	_V_LIM_9V,?_printf+2
  2744  0011C2  C03C  F0C0         	movff	_V_LIM_9V+1,?_printf+3
  2745  0011C6  C03D  F0C1         	movff	_V_LIM_9V+2,?_printf+4
  2746  0011CA  EC09  F000         	call	_printf	;wreg free
  2747  0011CE  D042               	goto	l7208
  2748  0011D0                     l7194:
  2749                           
  2750                           ;main.c: 258: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;printf("C  lim: %f"
      +                          ,V_LIM_C);}
  2751  0011D0  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  2752  0011D4  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  2753  0011D8  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  2754  0011DC  C11C  F032         	movff	sortBattery@V_223,___ftge@ff2
  2755  0011E0  C11D  F033         	movff	sortBattery@V_223+1,___ftge@ff2+1
  2756  0011E4  C11E  F034         	movff	sortBattery@V_223+2,___ftge@ff2+2
  2757  0011E8  EC37  F018         	call	___ftge	;wreg free
  2758  0011EC  B0D8               	btfsc	status,0,c
  2759  0011EE  D016               	goto	l173
  2760  0011F0  C13D  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2761  0011F4  C13E  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2762  0011F8  0101               	movlb	1	; () banked
  2763  0011FA  4B71               	infsnz	_n_C& (0+255),f,b
  2764  0011FC  2B72               	incf	(_n_C+1)& (0+255),f,b
  2765                           
  2766                           ; BSR set to: 1
  2767  0011FE  0EBA               	movlw	low STR_8
  2768  001200  0100               	movlb	0	; () banked
  2769  001202  6FBD               	movwf	printf@f& (0+255),b
  2770  001204  0EFF               	movlw	high STR_8
  2771  001206  0100               	movlb	0	; () banked
  2772  001208  6FBE               	movwf	(printf@f+1)& (0+255),b
  2773  00120A  C041  F0BF         	movff	_V_LIM_C,?_printf+2
  2774  00120E  C042  F0C0         	movff	_V_LIM_C+1,?_printf+3
  2775  001212  C043  F0C1         	movff	_V_LIM_C+2,?_printf+4
  2776  001216  EC09  F000         	call	_printf	;wreg free
  2777  00121A  D01C               	goto	l7208
  2778  00121C                     l173:
  2779                           
  2780                           ;main.c: 259: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2781  00121C  C04A  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2782  001220  C04B  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2783  001224  0101               	movlb	1	; () banked
  2784  001226  4B73               	infsnz	_n_OTHER& (0+255),f,b
  2785  001228  2B74               	incf	(_n_OTHER+1)& (0+255),f,b
  2786                           
  2787                           ; BSR set to: 1
  2788                           ;main.c: 261: }
  2789                           
  2790                           ; BSR set to: 1
  2791                           ;main.c: 260: break;
  2792  00122A  D014               	goto	l7208
  2793  00122C                     l7206:
  2794  00122C  C107  F0EB         	movff	sortBattery@signal,??_sortBattery
  2795  001230  C108  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  2796                           
  2797                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2798                           ; Switch size 1, requested type "space"
  2799                           ; Number of cases is 1, Range of values is 0 to 0
  2800                           ; switch strategies available:
  2801                           ; Name         Instructions Cycles
  2802                           ; simple_byte            4     3 (average)
  2803                           ;	Chosen strategy is simple_byte
  2804  001234  0100               	movlb	0	; () banked
  2805  001236  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  2806  001238  0A00               	xorlw	0	; case 0
  2807  00123A  A4D8               	btfss	status,2,c
  2808  00123C  D00B               	goto	l7208
  2809                           
  2810                           ; BSR set to: 0
  2811                           ; Switch size 1, requested type "space"
  2812                           ; Number of cases is 3, Range of values is 0 to 2
  2813                           ; switch strategies available:
  2814                           ; Name         Instructions Cycles
  2815                           ; simple_byte           10     6 (average)
  2816                           ;	Chosen strategy is simple_byte
  2817  00123E  0100               	movlb	0	; () banked
  2818  001240  51EB               	movf	??_sortBattery& (0+255),w,b
  2819  001242  0A00               	xorlw	0	; case 0
  2820  001244  B4D8               	btfsc	status,2,c
  2821  001246  D768               	goto	l7172
  2822  001248  0A01               	xorlw	1	; case 1
  2823  00124A  B4D8               	btfsc	status,2,c
  2824  00124C  D7C1               	goto	l7194
  2825  00124E  0A03               	xorlw	3	; case 2
  2826  001250  B4D8               	btfsc	status,2,c
  2827  001252  D798               	goto	l7184
  2828  001254                     l7208:
  2829                           
  2830                           ;main.c: 264: readKeypad();
  2831  001254  EC83  F01C         	call	_readKeypad	;wreg free
  2832                           
  2833                           ;main.c: 265: setAngle(redirectingServo, targetAngle);
  2834  001258  0E53               	movlw	low _redirectingServo
  2835  00125A  0100               	movlb	0	; () banked
  2836  00125C  6FD4               	movwf	setAngle@motor& (0+255),b
  2837  00125E  0E01               	movlw	high _redirectingServo
  2838  001260  0100               	movlb	0	; () banked
  2839  001262  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2840  001264  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  2841  001268  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2842  00126C  ECFF  F014         	call	_setAngle	;wreg free
  2843                           
  2844                           ;main.c: 266: _delay((unsigned long)((500)*(10000000/4000.0)));
  2845  001270  0E07               	movlw	7
  2846  001272  0100               	movlb	0	; () banked
  2847  001274  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2848  001276  0E58               	movlw	88
  2849  001278  0100               	movlb	0	; () banked
  2850  00127A  6FEB               	movwf	??_sortBattery& (0+255),b
  2851  00127C  0E59               	movlw	89
  2852  00127E                     u7787:
  2853  00127E  2EE8               	decfsz	wreg,f,c
  2854  001280  D7FE               	bra	u7787
  2855  001282  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2856  001284  D7FC               	bra	u7787
  2857  001286  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2858  001288  D7FA               	bra	u7787
  2859  00128A  D000               	nop2	
  2860                           
  2861                           ;main.c: 270: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  2862  00128C  C044  F112         	movff	_padAngle_CLOSE,sortBattery@i_228
  2863  001290  C045  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_228+1
  2864  001294  D018               	goto	l7222
  2865  001296                     l7216:
  2866                           
  2867                           ;main.c: 271: setAngle(padServo, i);
  2868  001296  0E4E               	movlw	low _padServo
  2869  001298  0100               	movlb	0	; () banked
  2870  00129A  6FD4               	movwf	setAngle@motor& (0+255),b
  2871  00129C  0E00               	movlw	high _padServo
  2872  00129E  0100               	movlb	0	; () banked
  2873  0012A0  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2874  0012A2  C112  F0D6         	movff	sortBattery@i_228,setAngle@angle
  2875  0012A6  C113  F0D7         	movff	sortBattery@i_228+1,setAngle@angle+1
  2876  0012AA  ECFF  F014         	call	_setAngle	;wreg free
  2877                           
  2878                           ;main.c: 272: _delay((unsigned long)((3)*(10000000/4000.0)));
  2879  0012AE  0E0A               	movlw	10
  2880  0012B0  0100               	movlb	0	; () banked
  2881  0012B2  6FEB               	movwf	??_sortBattery& (0+255),b
  2882  0012B4  0EBC               	movlw	188
  2883  0012B6                     u7797:
  2884  0012B6  2EE8               	decfsz	wreg,f,c
  2885  0012B8  D7FE               	bra	u7797
  2886  0012BA  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2887  0012BC  D7FC               	bra	u7797
  2888  0012BE  F000               	nop	
  2889  0012C0  0101               	movlb	1	; () banked
  2890  0012C2  4B12               	infsnz	sortBattery@i_228& (0+255),f,b
  2891  0012C4  2B13               	incf	(sortBattery@i_228+1)& (0+255),f,b
  2892  0012C6                     l7222:
  2893  0012C6  0101               	movlb	1	; () banked
  2894  0012C8  5139               	movf	_padAngle_OPEN& (0+255),w,b
  2895  0012CA  0101               	movlb	1	; () banked
  2896  0012CC  5D12               	subwf	sortBattery@i_228& (0+255),w,b
  2897  0012CE  0101               	movlb	1	; () banked
  2898  0012D0  5113               	movf	(sortBattery@i_228+1)& (0+255),w,b
  2899  0012D2  0A80               	xorlw	128
  2900  0012D4  0100               	movlb	0	; () banked
  2901  0012D6  6FEB               	movwf	??_sortBattery& (0+255),b
  2902  0012D8  0101               	movlb	1	; () banked
  2903  0012DA  513A               	movf	(_padAngle_OPEN+1)& (0+255),w,b
  2904  0012DC  0A80               	xorlw	128
  2905  0012DE  0100               	movlb	0	; () banked
  2906  0012E0  59EB               	subwfb	??_sortBattery& (0+255),w,b
  2907  0012E2  A0D8               	btfss	status,0,c
  2908  0012E4  D7D8               	goto	l7216
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;main.c: 273: }
  2912                           ;main.c: 275: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2913                           
  2914                           ; BSR set to: 0
  2915  0012E6  0E0D               	movlw	13
  2916  0012E8  0100               	movlb	0	; () banked
  2917  0012EA  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2918  0012EC  0EAF               	movlw	175
  2919  0012EE  0100               	movlb	0	; () banked
  2920  0012F0  6FEB               	movwf	??_sortBattery& (0+255),b
  2921  0012F2  0EB6               	movlw	182
  2922  0012F4                     u7807:
  2923  0012F4  2EE8               	decfsz	wreg,f,c
  2924  0012F6  D7FE               	bra	u7807
  2925  0012F8  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2926  0012FA  D7FC               	bra	u7807
  2927  0012FC  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2928  0012FE  D7FA               	bra	u7807
  2929  001300  F000               	nop	
  2930                           
  2931                           ;main.c: 279: setAngle(padServo, padAngle_NEUTRAL);
  2932  001302  0E4E               	movlw	low _padServo
  2933  001304  0100               	movlb	0	; () banked
  2934  001306  6FD4               	movwf	setAngle@motor& (0+255),b
  2935  001308  0E00               	movlw	high _padServo
  2936  00130A  0100               	movlb	0	; () banked
  2937  00130C  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2938  00130E  C046  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  2939  001312  C047  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2940  001316  ECFF  F014         	call	_setAngle	;wreg free
  2941                           
  2942                           ;main.c: 283: setAngle(conveyorServo, 130);
  2943  00131A  0E43               	movlw	low _conveyorServo
  2944  00131C  0100               	movlb	0	; () banked
  2945  00131E  6FD4               	movwf	setAngle@motor& (0+255),b
  2946  001320  0E01               	movlw	high _conveyorServo
  2947  001322  0100               	movlb	0	; () banked
  2948  001324  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2949  001326  0E00               	movlw	0
  2950  001328  0100               	movlb	0	; () banked
  2951  00132A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2952  00132C  0E82               	movlw	130
  2953  00132E  6FD6               	movwf	setAngle@angle& (0+255),b
  2954  001330  ECFF  F014         	call	_setAngle	;wreg free
  2955                           
  2956                           ;main.c: 284: digitalWrite(cylinderMotor, 1);
  2957  001334  0E47               	movlw	low _cylinderMotor
  2958  001336  6E23               	movwf	digitalWrite@pin,c
  2959  001338  0E01               	movlw	high _cylinderMotor
  2960  00133A  6E24               	movwf	digitalWrite@pin+1,c
  2961  00133C  0E00               	movlw	0
  2962  00133E  6E26               	movwf	digitalWrite@val+1,c
  2963  001340  0E01               	movlw	1
  2964  001342  6E25               	movwf	digitalWrite@val,c
  2965  001344  ECCF  F015         	call	_digitalWrite	;wreg free
  2966  001348  0012               	return		;funcret
  2967  00134A                     __end_of_sortBattery:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1l	equ	0xFE1
  2977                           status	equ	0xFD8
  2978                           
  2979 ;; *************** function _digitalWrite *****************
  2980 ;; Defined at:
  2981 ;;		line 53 in file "iopin.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  pin             2   34[COMRAM] PTR int 
  2984 ;;		 -> AA_float(4), redirectingServo(4), cylinderMotor(4), padServo(4), 
  2985 ;;		 -> conveyorServo(4), 
  2986 ;;  val             2   36[COMRAM] int 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  p               2   41[COMRAM] int 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      void 
  2991 ;; Registers used:
  2992 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2998 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;Total ram usage:        9 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    3
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;;		_sortBattery
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text2
  3014  002B9E                     __ptext2:
  3015                           	opt stack 0
  3016  002B9E                     _digitalWrite:
  3017                           	opt stack 26
  3018                           
  3019                           ;iopin.c: 54: if(pin){
  3020                           
  3021                           ;incstack = 0
  3022  002B9E  5023               	movf	digitalWrite@pin,w,c
  3023  002BA0  1024               	iorwf	digitalWrite@pin+1,w,c
  3024  002BA2  B4D8               	btfsc	status,2,c
  3025  002BA4  0012               	return	
  3026                           
  3027                           ;iopin.c: 55: int p = 1 << pin[1];
  3028  002BA6  EE20 F002          	lfsr	2,2
  3029  002BAA  5023               	movf	digitalWrite@pin,w,c
  3030  002BAC  26D9               	addwf	fsr2l,f,c
  3031  002BAE  5024               	movf	digitalWrite@pin+1,w,c
  3032  002BB0  22DA               	addwfc	fsr2h,f,c
  3033  002BB2  50DF               	movf	indf2,w,c
  3034  002BB4  6E27               	movwf	??_digitalWrite& (0+255),c
  3035  002BB6  0E01               	movlw	1
  3036  002BB8  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3037  002BBA  0E00               	movlw	0
  3038  002BBC  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3039  002BBE  2A27               	incf	??_digitalWrite,f,c
  3040  002BC0  D003               	goto	u7094
  3041  002BC2                     u7095:
  3042  002BC2  90D8               	bcf	status,0,c
  3043  002BC4  3628               	rlcf	??_digitalWrite+1,f,c
  3044  002BC6  3629               	rlcf	??_digitalWrite+2,f,c
  3045  002BC8                     u7094:
  3046  002BC8  2E27               	decfsz	??_digitalWrite,f,c
  3047  002BCA  D7FB               	goto	u7095
  3048  002BCC  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3049  002BD0  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3050                           
  3051                           ;iopin.c: 56: if(val == 0){
  3052  002BD4  5025               	movf	digitalWrite@val,w,c
  3053  002BD6  1026               	iorwf	digitalWrite@val+1,w,c
  3054  002BD8  A4D8               	btfss	status,2,c
  3055  002BDA  D02B               	goto	l6880
  3056                           
  3057                           ;iopin.c: 57: p ^= 0xff;
  3058  002BDC  0EFF               	movlw	255
  3059  002BDE  1A2A               	xorwf	digitalWrite@p,f,c
  3060                           
  3061                           ;iopin.c: 58: }
  3062                           ;iopin.c: 60: switch(pin[0]){
  3063  002BE0  D028               	goto	l6880
  3064  002BE2                     l6856:
  3065  002BE2  0425               	decf	digitalWrite@val,w,c
  3066  002BE4  1026               	iorwf	digitalWrite@val+1,w,c
  3067  002BE6  A4D8               	btfss	status,2,c
  3068  002BE8  D003               	goto	l6860
  3069  002BEA  502A               	movf	digitalWrite@p,w,c
  3070  002BEC  1289               	iorwf	3977,f,c	;volatile
  3071  002BEE  0012               	return	
  3072  002BF0                     l6860:
  3073                           
  3074                           ;iopin.c: 62: else LATA &= p;
  3075  002BF0  502A               	movf	digitalWrite@p,w,c
  3076  002BF2  1689               	andwf	3977,f,c	;volatile
  3077                           
  3078                           ;iopin.c: 63: break;
  3079  002BF4  0012               	return	
  3080  002BF6                     l6862:
  3081  002BF6  0425               	decf	digitalWrite@val,w,c
  3082  002BF8  1026               	iorwf	digitalWrite@val+1,w,c
  3083  002BFA  A4D8               	btfss	status,2,c
  3084  002BFC  D003               	goto	l6866
  3085  002BFE  502A               	movf	digitalWrite@p,w,c
  3086  002C00  128A               	iorwf	3978,f,c	;volatile
  3087  002C02  0012               	return	
  3088  002C04                     l6866:
  3089                           
  3090                           ;iopin.c: 65: else LATB &= p;
  3091  002C04  502A               	movf	digitalWrite@p,w,c
  3092  002C06  168A               	andwf	3978,f,c	;volatile
  3093                           
  3094                           ;iopin.c: 66: break;
  3095  002C08  0012               	return	
  3096  002C0A                     l6868:
  3097  002C0A  0425               	decf	digitalWrite@val,w,c
  3098  002C0C  1026               	iorwf	digitalWrite@val+1,w,c
  3099  002C0E  A4D8               	btfss	status,2,c
  3100  002C10  D003               	goto	l6872
  3101  002C12  502A               	movf	digitalWrite@p,w,c
  3102  002C14  128B               	iorwf	3979,f,c	;volatile
  3103  002C16  0012               	return	
  3104  002C18                     l6872:
  3105                           
  3106                           ;iopin.c: 68: else LATC &= p;
  3107  002C18  502A               	movf	digitalWrite@p,w,c
  3108  002C1A  168B               	andwf	3979,f,c	;volatile
  3109                           
  3110                           ;iopin.c: 69: break;
  3111  002C1C  0012               	return	
  3112  002C1E                     l6874:
  3113  002C1E  0425               	decf	digitalWrite@val,w,c
  3114  002C20  1026               	iorwf	digitalWrite@val+1,w,c
  3115  002C22  A4D8               	btfss	status,2,c
  3116  002C24  D003               	goto	l6878
  3117  002C26  502A               	movf	digitalWrite@p,w,c
  3118  002C28  128C               	iorwf	3980,f,c	;volatile
  3119  002C2A  0012               	return	
  3120  002C2C                     l6878:
  3121                           
  3122                           ;iopin.c: 71: else LATD &= p;
  3123  002C2C  502A               	movf	digitalWrite@p,w,c
  3124  002C2E  168C               	andwf	3980,f,c	;volatile
  3125                           
  3126                           ;iopin.c: 72: }
  3127  002C30  0012               	return	
  3128  002C32                     l6880:
  3129  002C32  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3130  002C36  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3131  002C3A  CFDE F027          	movff	postinc2,??_digitalWrite
  3132  002C3E  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3133                           
  3134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3135                           ; Switch size 1, requested type "space"
  3136                           ; Number of cases is 1, Range of values is 0 to 0
  3137                           ; switch strategies available:
  3138                           ; Name         Instructions Cycles
  3139                           ; simple_byte            4     3 (average)
  3140                           ;	Chosen strategy is simple_byte
  3141  002C42  5028               	movf	??_digitalWrite+1,w,c
  3142  002C44  0A00               	xorlw	0	; case 0
  3143  002C46  A4D8               	btfss	status,2,c
  3144  002C48  0012               	return	
  3145                           
  3146                           ; Switch size 1, requested type "space"
  3147                           ; Number of cases is 4, Range of values is 0 to 3
  3148                           ; switch strategies available:
  3149                           ; Name         Instructions Cycles
  3150                           ; simple_byte           13     7 (average)
  3151                           ;	Chosen strategy is simple_byte
  3152  002C4A  5027               	movf	??_digitalWrite,w,c
  3153  002C4C  0A00               	xorlw	0	; case 0
  3154  002C4E  B4D8               	btfsc	status,2,c
  3155  002C50  D7C8               	goto	l6856
  3156  002C52  0A01               	xorlw	1	; case 1
  3157  002C54  B4D8               	btfsc	status,2,c
  3158  002C56  D7CF               	goto	l6862
  3159  002C58  0A03               	xorlw	3	; case 2
  3160  002C5A  B4D8               	btfsc	status,2,c
  3161  002C5C  D7D6               	goto	l6868
  3162  002C5E  0A01               	xorlw	1	; case 3
  3163  002C60  A4D8               	btfss	status,2,c
  3164  002C62  0012               	return	
  3165  002C64  D7DC               	goto	l6874
  3166  002C66                     __end_of_digitalWrite:
  3167                           	opt stack 0
  3168                           tblptru	equ	0xFF8
  3169                           tblptrh	equ	0xFF7
  3170                           tblptrl	equ	0xFF6
  3171                           tablat	equ	0xFF5
  3172                           postinc0	equ	0xFEE
  3173                           wreg	equ	0xFE8
  3174                           postdec1	equ	0xFE5
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _digitalRead *****************
  3184 ;; Defined at:
  3185 ;;		line 43 in file "iopin.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  pin             2   34[COMRAM] PTR int 
  3188 ;;		 -> padPin2(4), padPin1(4), 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  2   34[COMRAM] int 
  3193 ;; Registers used:
  3194 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3200 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;Total ram usage:        4 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    3
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_sortBattery
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text3
  3215  00274E                     __ptext3:
  3216                           	opt stack 0
  3217  00274E                     _digitalRead:
  3218                           	opt stack 26
  3219                           
  3220                           ;iopin.c: 44: switch(pin[0]){
  3221                           
  3222                           ;incstack = 0
  3223  00274E  D058               	goto	l6930
  3224  002750                     l6912:
  3225  002750  EE20 F002          	lfsr	2,2
  3226  002754  5023               	movf	digitalRead@pin,w,c
  3227  002756  26D9               	addwf	fsr2l,f,c
  3228  002758  5024               	movf	digitalRead@pin+1,w,c
  3229  00275A  22DA               	addwfc	fsr2h,f,c
  3230  00275C  50DF               	movf	indf2,w,c
  3231  00275E  6E25               	movwf	??_digitalRead& (0+255),c
  3232  002760  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3233  002764  2A25               	incf	??_digitalRead,f,c
  3234  002766  D002               	goto	u7184
  3235  002768                     u7185:
  3236  002768  90D8               	bcf	status,0,c
  3237  00276A  3226               	rrcf	??_digitalRead+1,f,c
  3238  00276C                     u7184:
  3239  00276C  2E25               	decfsz	??_digitalRead,f,c
  3240  00276E  D7FC               	goto	u7185
  3241  002770  0E01               	movlw	1
  3242  002772  1626               	andwf	??_digitalRead+1,f,c
  3243  002774  5026               	movf	??_digitalRead+1,w,c
  3244  002776  6E23               	movwf	?_digitalRead,c
  3245  002778  6A24               	clrf	?_digitalRead+1,c
  3246  00277A  0012               	return	
  3247  00277C                     l6916:
  3248  00277C  EE20 F002          	lfsr	2,2
  3249  002780  5023               	movf	digitalRead@pin,w,c
  3250  002782  26D9               	addwf	fsr2l,f,c
  3251  002784  5024               	movf	digitalRead@pin+1,w,c
  3252  002786  22DA               	addwfc	fsr2h,f,c
  3253  002788  50DF               	movf	indf2,w,c
  3254  00278A  6E25               	movwf	??_digitalRead& (0+255),c
  3255  00278C  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3256  002790  2A25               	incf	??_digitalRead,f,c
  3257  002792  D002               	goto	u7194
  3258  002794                     u7195:
  3259  002794  90D8               	bcf	status,0,c
  3260  002796  3226               	rrcf	??_digitalRead+1,f,c
  3261  002798                     u7194:
  3262  002798  2E25               	decfsz	??_digitalRead,f,c
  3263  00279A  D7FC               	goto	u7195
  3264  00279C  0E01               	movlw	1
  3265  00279E  1626               	andwf	??_digitalRead+1,f,c
  3266  0027A0  5026               	movf	??_digitalRead+1,w,c
  3267  0027A2  6E23               	movwf	?_digitalRead,c
  3268  0027A4  6A24               	clrf	?_digitalRead+1,c
  3269  0027A6  0012               	return	
  3270  0027A8                     l6920:
  3271  0027A8  EE20 F002          	lfsr	2,2
  3272  0027AC  5023               	movf	digitalRead@pin,w,c
  3273  0027AE  26D9               	addwf	fsr2l,f,c
  3274  0027B0  5024               	movf	digitalRead@pin+1,w,c
  3275  0027B2  22DA               	addwfc	fsr2h,f,c
  3276  0027B4  50DF               	movf	indf2,w,c
  3277  0027B6  6E25               	movwf	??_digitalRead& (0+255),c
  3278  0027B8  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3279  0027BC  2A25               	incf	??_digitalRead,f,c
  3280  0027BE  D002               	goto	u7204
  3281  0027C0                     u7205:
  3282  0027C0  90D8               	bcf	status,0,c
  3283  0027C2  3226               	rrcf	??_digitalRead+1,f,c
  3284  0027C4                     u7204:
  3285  0027C4  2E25               	decfsz	??_digitalRead,f,c
  3286  0027C6  D7FC               	goto	u7205
  3287  0027C8  0E01               	movlw	1
  3288  0027CA  1626               	andwf	??_digitalRead+1,f,c
  3289  0027CC  5026               	movf	??_digitalRead+1,w,c
  3290  0027CE  6E23               	movwf	?_digitalRead,c
  3291  0027D0  6A24               	clrf	?_digitalRead+1,c
  3292  0027D2  0012               	return	
  3293  0027D4                     l6924:
  3294  0027D4  EE20 F002          	lfsr	2,2
  3295  0027D8  5023               	movf	digitalRead@pin,w,c
  3296  0027DA  26D9               	addwf	fsr2l,f,c
  3297  0027DC  5024               	movf	digitalRead@pin+1,w,c
  3298  0027DE  22DA               	addwfc	fsr2h,f,c
  3299  0027E0  50DF               	movf	indf2,w,c
  3300  0027E2  6E25               	movwf	??_digitalRead& (0+255),c
  3301  0027E4  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3302  0027E8  2A25               	incf	??_digitalRead,f,c
  3303  0027EA  D002               	goto	u7214
  3304  0027EC                     u7215:
  3305  0027EC  90D8               	bcf	status,0,c
  3306  0027EE  3226               	rrcf	??_digitalRead+1,f,c
  3307  0027F0                     u7214:
  3308  0027F0  2E25               	decfsz	??_digitalRead,f,c
  3309  0027F2  D7FC               	goto	u7215
  3310  0027F4  0E01               	movlw	1
  3311  0027F6  1626               	andwf	??_digitalRead+1,f,c
  3312  0027F8  5026               	movf	??_digitalRead+1,w,c
  3313  0027FA  6E23               	movwf	?_digitalRead,c
  3314  0027FC  6A24               	clrf	?_digitalRead+1,c
  3315  0027FE  0012               	return	
  3316  002800                     l6930:
  3317  002800  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3318  002804  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3319  002808  CFDE F025          	movff	postinc2,??_digitalRead
  3320  00280C  CFDD F026          	movff	postdec2,??_digitalRead+1
  3321                           
  3322                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3323                           ; Switch size 1, requested type "space"
  3324                           ; Number of cases is 1, Range of values is 0 to 0
  3325                           ; switch strategies available:
  3326                           ; Name         Instructions Cycles
  3327                           ; simple_byte            4     3 (average)
  3328                           ;	Chosen strategy is simple_byte
  3329  002810  5026               	movf	??_digitalRead+1,w,c
  3330  002812  0A00               	xorlw	0	; case 0
  3331  002814  A4D8               	btfss	status,2,c
  3332  002816  D00D               	goto	l324
  3333                           
  3334                           ; Switch size 1, requested type "space"
  3335                           ; Number of cases is 4, Range of values is 0 to 3
  3336                           ; switch strategies available:
  3337                           ; Name         Instructions Cycles
  3338                           ; simple_byte           13     7 (average)
  3339                           ;	Chosen strategy is simple_byte
  3340  002818  5025               	movf	??_digitalRead,w,c
  3341  00281A  0A00               	xorlw	0	; case 0
  3342  00281C  B4D8               	btfsc	status,2,c
  3343  00281E  D798               	goto	l6912
  3344  002820  0A01               	xorlw	1	; case 1
  3345  002822  B4D8               	btfsc	status,2,c
  3346  002824  D7AB               	goto	l6916
  3347  002826  0A03               	xorlw	3	; case 2
  3348  002828  B4D8               	btfsc	status,2,c
  3349  00282A  D7BE               	goto	l6920
  3350  00282C  0A01               	xorlw	1	; case 3
  3351  00282E  B4D8               	btfsc	status,2,c
  3352  002830  D7D1               	goto	l6924
  3353  002832                     l324:
  3354                           
  3355                           ;iopin.c: 50: return -1;
  3356  002832  6823               	setf	?_digitalRead,c
  3357  002834  6824               	setf	?_digitalRead+1,c
  3358  002836  0012               	return		;funcret
  3359  002838                     __end_of_digitalRead:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           postinc0	equ	0xFEE
  3366                           wreg	equ	0xFE8
  3367                           postdec1	equ	0xFE5
  3368                           fsr1l	equ	0xFE1
  3369                           indf2	equ	0xFDF
  3370                           postinc2	equ	0xFDE
  3371                           postdec2	equ	0xFDD
  3372                           fsr2h	equ	0xFDA
  3373                           fsr2l	equ	0xFD9
  3374                           status	equ	0xFD8
  3375                           
  3376 ;; *************** function _analogRead *****************
  3377 ;; Defined at:
  3378 ;;		line 90 in file "iopin.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  channel         2   34[COMRAM] int 
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;		None
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  4   34[COMRAM] long 
  3385 ;; Registers used:
  3386 ;;		wreg, status,2, status,0
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;Total ram usage:        6 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    3
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_sortBattery
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text4
  3407  003896                     __ptext4:
  3408                           	opt stack 0
  3409  003896                     _analogRead:
  3410                           	opt stack 26
  3411                           
  3412                           ;iopin.c: 91: ADCON0 = channel<<2;
  3413                           
  3414                           ;incstack = 0
  3415  003896  4423               	rlncf	analogRead@channel,w,c
  3416  003898  46E8               	rlncf	wreg,f,c
  3417  00389A  0BFC               	andlw	252
  3418  00389C  6EC2               	movwf	4034,c	;volatile
  3419                           
  3420                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3421  00389E  80C2               	bsf	4034,0,c	;volatile
  3422                           
  3423                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3424  0038A0  82C2               	bsf	4034,1,c	;volatile
  3425  0038A2                     l349:
  3426  0038A2  B2C2               	btfsc	4034,1,c	;volatile
  3427  0038A4  D7FE               	goto	l349
  3428                           
  3429                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3430  0038A6  50C3               	movf	4035,w,c	;volatile
  3431  0038A8  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3432  0038AC  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3433  0038AE  C027  F028         	movff	??_analogRead,??_analogRead+1
  3434  0038B2  6A27               	clrf	??_analogRead,c
  3435  0038B4  2627               	addwf	??_analogRead,f,c
  3436  0038B6  0E00               	movlw	0
  3437  0038B8  2228               	addwfc	??_analogRead+1,f,c
  3438  0038BA  C027  F023         	movff	??_analogRead,?_analogRead
  3439  0038BE  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3440  0038C2  0E00               	movlw	0
  3441  0038C4  BE24               	btfsc	?_analogRead+1,7,c
  3442  0038C6  0EFF               	movlw	-1
  3443  0038C8  6E25               	movwf	?_analogRead+2,c
  3444  0038CA  6E26               	movwf	?_analogRead+3,c
  3445  0038CC  0012               	return	
  3446  0038CE                     __end_of_analogRead:
  3447                           	opt stack 0
  3448                           tblptru	equ	0xFF8
  3449                           tblptrh	equ	0xFF7
  3450                           tblptrl	equ	0xFF6
  3451                           tablat	equ	0xFF5
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1l	equ	0xFE1
  3456                           indf2	equ	0xFDF
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _showInterface *****************
  3464 ;; Defined at:
  3465 ;;		line 18 in file "interface.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  run             2  118[BANK0 ] PTR int 
  3470 ;;		 -> readPastRun@data(14), 
  3471 ;;  n               2  116[BANK0 ] int 
  3472 ;;  key             1  120[BANK0 ] unsigned char 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;Total ram usage:        6 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    9
  3489 ;; This function calls:
  3490 ;;		_initRTC
  3491 ;;		_readPastRun
  3492 ;;		_showMainMenu
  3493 ;;		_showRunMenu
  3494 ;;		_showRunSelect
  3495 ;;		_showRunStats
  3496 ;;		_showRunTime
  3497 ;; This function is called by:
  3498 ;;		_main
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text5
  3503  002F36                     __ptext5:
  3504                           	opt stack 0
  3505  002F36                     _showInterface:
  3506                           	opt stack 21
  3507                           
  3508                           ;interface.c: 20: initRTC();
  3509                           
  3510                           ;incstack = 0
  3511  002F36  EC27  F01D         	call	_initRTC	;wreg free
  3512  002F3A                     l7084:
  3513                           
  3514                           ;interface.c: 26: key = showMainMenu();
  3515  002F3A  EC49  F01B         	call	_showMainMenu	;wreg free
  3516  002F3E  0100               	movlb	0	; () banked
  3517  002F40  6FF8               	movwf	showInterface@key& (0+255),b
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;interface.c: 28: if(key == 'C'){
  3521  002F42  0E43               	movlw	67
  3522  002F44  0100               	movlb	0	; () banked
  3523  002F46  19F8               	xorwf	showInterface@key& (0+255),w,b
  3524  002F48  A4D8               	btfss	status,2,c
  3525  002F4A  D042               	goto	l7110
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;interface.c: 30: int n = showRunSelect();
  3529  002F4C  EC8E  F01A         	call	_showRunSelect	;wreg free
  3530  002F50  0100               	movlb	0	; () banked
  3531  002F52  6FF3               	movwf	??_showInterface& (0+255),b
  3532  002F54  0100               	movlb	0	; () banked
  3533  002F56  51F3               	movf	??_showInterface& (0+255),w,b
  3534  002F58  0100               	movlb	0	; () banked
  3535  002F5A  6FF4               	movwf	showInterface@n& (0+255),b
  3536  002F5C  6BF5               	clrf	(showInterface@n+1)& (0+255),b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;interface.c: 32: if(key == '*')continue;
  3540  002F5E  0E2A               	movlw	42
  3541  002F60  0100               	movlb	0	; () banked
  3542  002F62  19F8               	xorwf	showInterface@key& (0+255),w,b
  3543  002F64  B4D8               	btfsc	status,2,c
  3544  002F66  D7E9               	goto	l7084
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;interface.c: 34: int* run = readPastRun( n - '1');
  3548                           
  3549                           ; BSR set to: 0
  3550                           
  3551                           ; BSR set to: 0
  3552  002F68  0ECF               	movlw	207
  3553  002F6A  0100               	movlb	0	; () banked
  3554  002F6C  25F4               	addwf	showInterface@n& (0+255),w,b
  3555  002F6E  0100               	movlb	0	; () banked
  3556  002F70  6F80               	movwf	readPastRun@run& (0+255),b
  3557  002F72  0EFF               	movlw	255
  3558  002F74  0100               	movlb	0	; () banked
  3559  002F76  21F5               	addwfc	(showInterface@n+1)& (0+255),w,b
  3560  002F78  0100               	movlb	0	; () banked
  3561  002F7A  6F81               	movwf	(readPastRun@run+1)& (0+255),b
  3562  002F7C  ECEE  F017         	call	_readPastRun	;wreg free
  3563  002F80  C080  F0F6         	movff	?_readPastRun,showInterface@run
  3564  002F84  C081  F0F7         	movff	?_readPastRun+1,showInterface@run+1
  3565  002F88                     l7096:
  3566                           
  3567                           ;interface.c: 38: key = showRunMenu(n);
  3568  002F88  0100               	movlb	0	; () banked
  3569  002F8A  51F4               	movf	showInterface@n& (0+255),w,b
  3570  002F8C  ECC0  F01A         	call	_showRunMenu
  3571  002F90  0100               	movlb	0	; () banked
  3572  002F92  6FF8               	movwf	showInterface@key& (0+255),b
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;interface.c: 40: if(key == 'A') showRunTime(run);
  3576  002F94  0E41               	movlw	65
  3577  002F96  0100               	movlb	0	; () banked
  3578  002F98  19F8               	xorwf	showInterface@key& (0+255),w,b
  3579  002F9A  A4D8               	btfss	status,2,c
  3580  002F9C  D007               	goto	l7102
  3581                           
  3582                           ; BSR set to: 0
  3583  002F9E  C0F6  F0EB         	movff	showInterface@run,showRunTime@run
  3584  002FA2  C0F7  F0EC         	movff	showInterface@run+1,showRunTime@run+1
  3585  002FA6  EC97  F016         	call	_showRunTime	;wreg free
  3586  002FAA  D7EE               	goto	l7096
  3587  002FAC                     l7102:
  3588                           
  3589                           ;interface.c: 41: else if(key == 'B') showRunStats(run);
  3590  002FAC  0E42               	movlw	66
  3591  002FAE  0100               	movlb	0	; () banked
  3592  002FB0  19F8               	xorwf	showInterface@key& (0+255),w,b
  3593  002FB2  A4D8               	btfss	status,2,c
  3594  002FB4  D007               	goto	l7106
  3595                           
  3596                           ; BSR set to: 0
  3597  002FB6  C0F6  F0EB         	movff	showInterface@run,showRunStats@run
  3598  002FBA  C0F7  F0EC         	movff	showInterface@run+1,showRunStats@run+1
  3599  002FBE  EC7F  F018         	call	_showRunStats	;wreg free
  3600  002FC2  D7E2               	goto	l7096
  3601  002FC4                     l7106:
  3602                           
  3603                           ;interface.c: 42: else if(key == '*') break;
  3604  002FC4  0E2A               	movlw	42
  3605  002FC6  0100               	movlb	0	; () banked
  3606  002FC8  19F8               	xorwf	showInterface@key& (0+255),w,b
  3607  002FCA  B4D8               	btfsc	status,2,c
  3608  002FCC  D7B6               	goto	l7084
  3609  002FCE  D7DC               	goto	l7096
  3610  002FD0                     l7110:
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;interface.c: 46: else if(key == 'B') return;
  3614  002FD0  0E42               	movlw	66
  3615  002FD2  0100               	movlb	0	; () banked
  3616  002FD4  19F8               	xorwf	showInterface@key& (0+255),w,b
  3617  002FD6  B4D8               	btfsc	status,2,c
  3618  002FD8  0012               	return	
  3619  002FDA  D7AF               	goto	l7084
  3620  002FDC                     __end_of_showInterface:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           postinc0	equ	0xFEE
  3627                           wreg	equ	0xFE8
  3628                           postdec1	equ	0xFE5
  3629                           fsr1l	equ	0xFE1
  3630                           indf2	equ	0xFDF
  3631                           postinc2	equ	0xFDE
  3632                           postdec2	equ	0xFDD
  3633                           fsr2h	equ	0xFDA
  3634                           fsr2l	equ	0xFD9
  3635                           status	equ	0xFD8
  3636                           
  3637 ;; *************** function _showRunTime *****************
  3638 ;; Defined at:
  3639 ;;		line 102 in file "interface.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;  run             2  107[BANK0 ] PTR int 
  3642 ;;		 -> readPastRun@data(14), 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  time            3  112[BANK0 ] float 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      unsigned char 
  3647 ;; Registers used:
  3648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3654 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;Total ram usage:        8 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    8
  3661 ;; This function calls:
  3662 ;;		___awtoft
  3663 ;;		___ftdiv
  3664 ;;		_lcdClear
  3665 ;;		_printf
  3666 ;;		_readKeypad
  3667 ;; This function is called by:
  3668 ;;		_showInterface
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text6
  3673  002D2E                     __ptext6:
  3674                           	opt stack 0
  3675  002D2E                     _showRunTime:
  3676                           	opt stack 21
  3677                           
  3678                           ;interface.c: 103: float time = (float)(run[0]<<8 + run[1])/10.0;
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;incstack = 0
  3682  002D2E  0100               	movlb	0	; () banked
  3683  002D30  EE20 F002          	lfsr	2,2
  3684  002D34  51EB               	movf	showRunTime@run& (0+255),w,b
  3685  002D36  26D9               	addwf	fsr2l,f,c
  3686  002D38  51EC               	movf	(showRunTime@run+1)& (0+255),w,b
  3687  002D3A  22DA               	addwfc	fsr2h,f,c
  3688  002D3C  50DF               	movf	indf2,w,c
  3689  002D3E  0100               	movlb	0	; () banked
  3690  002D40  6FED               	movwf	??_showRunTime& (0+255),b
  3691  002D42  0E08               	movlw	8
  3692  002D44  0100               	movlb	0	; () banked
  3693  002D46  27ED               	addwf	??_showRunTime& (0+255),f,b
  3694  002D48  C0EB  FFD9         	movff	showRunTime@run,fsr2l
  3695  002D4C  C0EC  FFDA         	movff	showRunTime@run+1,fsr2h
  3696  002D50  CFDE F0EE          	movff	postinc2,??_showRunTime+1
  3697  002D54  CFDD F0EF          	movff	postdec2,??_showRunTime+2
  3698  002D58  0100               	movlb	0	; () banked
  3699  002D5A  2BED               	incf	??_showRunTime& (0+255),f,b
  3700  002D5C  D004               	goto	u7354
  3701  002D5E                     u7355:
  3702  002D5E  90D8               	bcf	status,0,c
  3703  002D60  0100               	movlb	0	; () banked
  3704  002D62  37EE               	rlcf	(??_showRunTime+1)& (0+255),f,b
  3705  002D64  37EF               	rlcf	(??_showRunTime+2)& (0+255),f,b
  3706  002D66                     u7354:
  3707  002D66  0100               	movlb	0	; () banked
  3708  002D68  2FED               	decfsz	??_showRunTime& (0+255),f,b
  3709  002D6A  D7F9               	goto	u7355
  3710  002D6C  C0EE  F02B         	movff	??_showRunTime+1,___awtoft@c
  3711  002D70  C0EF  F02C         	movff	??_showRunTime+2,___awtoft@c+1
  3712  002D74  EC67  F01C         	call	___awtoft	;wreg free
  3713  002D78  C02B  F035         	movff	?___awtoft,___ftdiv@f1
  3714  002D7C  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
  3715  002D80  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
  3716  002D84  0E00               	movlw	0
  3717  002D86  6E38               	movwf	___ftdiv@f2,c
  3718  002D88  0E20               	movlw	32
  3719  002D8A  6E39               	movwf	___ftdiv@f2+1,c
  3720  002D8C  0E41               	movlw	65
  3721  002D8E  6E3A               	movwf	___ftdiv@f2+2,c
  3722  002D90  EC99  F012         	call	___ftdiv	;wreg free
  3723  002D94  C035  F0F0         	movff	?___ftdiv,showRunTime@time
  3724  002D98  C036  F0F1         	movff	?___ftdiv+1,showRunTime@time+1
  3725  002D9C  C037  F0F2         	movff	?___ftdiv+2,showRunTime@time+2
  3726                           
  3727                           ;interface.c: 105: lcdClear();
  3728  002DA0  EC36  F01D         	call	_lcdClear	;wreg free
  3729                           
  3730                           ;interface.c: 106: printf("time: %.1f sec   \n",time);
  3731  002DA4  0ECA               	movlw	low STR_18
  3732  002DA6  0100               	movlb	0	; () banked
  3733  002DA8  6FBD               	movwf	printf@f& (0+255),b
  3734  002DAA  0EFE               	movlw	high STR_18
  3735  002DAC  0100               	movlb	0	; () banked
  3736  002DAE  6FBE               	movwf	(printf@f+1)& (0+255),b
  3737  002DB0  C0F0  F0BF         	movff	showRunTime@time,?_printf+2
  3738  002DB4  C0F1  F0C0         	movff	showRunTime@time+1,?_printf+3
  3739  002DB8  C0F2  F0C1         	movff	showRunTime@time+2,?_printf+4
  3740  002DBC  EC09  F000         	call	_printf	;wreg free
  3741                           
  3742                           ;interface.c: 107: printf("              *>");
  3743  002DC0  0E37               	movlw	low STR_19
  3744  002DC2  0100               	movlb	0	; () banked
  3745  002DC4  6FBD               	movwf	printf@f& (0+255),b
  3746  002DC6  0EFF               	movlw	high STR_19
  3747  002DC8  0100               	movlb	0	; () banked
  3748  002DCA  6FBE               	movwf	(printf@f+1)& (0+255),b
  3749  002DCC  EC09  F000         	call	_printf	;wreg free
  3750  002DD0                     l7020:
  3751  002DD0  EC83  F01C         	call	_readKeypad	;wreg free
  3752  002DD4  0A2A               	xorlw	42
  3753  002DD6  B4D8               	btfsc	status,2,c
  3754  002DD8  0012               	return	
  3755  002DDA  D7FA               	goto	l7020
  3756  002DDC                     __end_of_showRunTime:
  3757                           	opt stack 0
  3758                           tblptru	equ	0xFF8
  3759                           tblptrh	equ	0xFF7
  3760                           tblptrl	equ	0xFF6
  3761                           tablat	equ	0xFF5
  3762                           postinc0	equ	0xFEE
  3763                           wreg	equ	0xFE8
  3764                           postdec1	equ	0xFE5
  3765                           fsr1l	equ	0xFE1
  3766                           indf2	equ	0xFDF
  3767                           postinc2	equ	0xFDE
  3768                           postdec2	equ	0xFDD
  3769                           fsr2h	equ	0xFDA
  3770                           fsr2l	equ	0xFD9
  3771                           status	equ	0xFD8
  3772                           
  3773 ;; *************** function _showRunStats *****************
  3774 ;; Defined at:
  3775 ;;		line 112 in file "interface.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  run             2  107[BANK0 ] PTR int 
  3778 ;;		 -> readPastRun@data(14), 
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      unsigned char 
  3783 ;; Registers used:
  3784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3790 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;Total ram usage:        2 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    8
  3797 ;; This function calls:
  3798 ;;		_lcdClear
  3799 ;;		_printf
  3800 ;;		_readKeypad
  3801 ;; This function is called by:
  3802 ;;		_showInterface
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text7
  3807  0030FE                     __ptext7:
  3808                           	opt stack 0
  3809  0030FE                     _showRunStats:
  3810                           	opt stack 21
  3811                           
  3812                           ;interface.c: 113: lcdClear();
  3813                           
  3814                           ;incstack = 0
  3815  0030FE  EC36  F01D         	call	_lcdClear	;wreg free
  3816                           
  3817                           ;interface.c: 114: printf("[AA,9V,C,other] \n");
  3818  003102  0E14               	movlw	low STR_20
  3819  003104  0100               	movlb	0	; () banked
  3820  003106  6FBD               	movwf	printf@f& (0+255),b
  3821  003108  0EFF               	movlw	high STR_20
  3822  00310A  0100               	movlb	0	; () banked
  3823  00310C  6FBE               	movwf	(printf@f+1)& (0+255),b
  3824  00310E  EC09  F000         	call	_printf	;wreg free
  3825                           
  3826                           ;interface.c: 115: printf("[%d,%d,%d,%d]   *>",run[2],run[3],run[4],run[5]);
  3827  003112  0EDD               	movlw	low STR_21
  3828  003114  0100               	movlb	0	; () banked
  3829  003116  6FBD               	movwf	printf@f& (0+255),b
  3830  003118  0EFE               	movlw	high STR_21
  3831  00311A  0100               	movlb	0	; () banked
  3832  00311C  6FBE               	movwf	(printf@f+1)& (0+255),b
  3833  00311E  0100               	movlb	0	; () banked
  3834  003120  EE20 F004          	lfsr	2,4
  3835  003124  51EB               	movf	showRunStats@run& (0+255),w,b
  3836  003126  26D9               	addwf	fsr2l,f,c
  3837  003128  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  3838  00312A  22DA               	addwfc	fsr2h,f,c
  3839  00312C  CFDE F0BF          	movff	postinc2,?_printf+2
  3840  003130  CFDD F0C0          	movff	postdec2,?_printf+3
  3841  003134  0100               	movlb	0	; () banked
  3842  003136  EE20 F006          	lfsr	2,6
  3843  00313A  51EB               	movf	showRunStats@run& (0+255),w,b
  3844  00313C  26D9               	addwf	fsr2l,f,c
  3845  00313E  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  3846  003140  22DA               	addwfc	fsr2h,f,c
  3847  003142  CFDE F0C1          	movff	postinc2,?_printf+4
  3848  003146  CFDD F0C2          	movff	postdec2,?_printf+5
  3849  00314A  0100               	movlb	0	; () banked
  3850  00314C  EE20 F008          	lfsr	2,8
  3851  003150  51EB               	movf	showRunStats@run& (0+255),w,b
  3852  003152  26D9               	addwf	fsr2l,f,c
  3853  003154  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  3854  003156  22DA               	addwfc	fsr2h,f,c
  3855  003158  CFDE F0C3          	movff	postinc2,?_printf+6
  3856  00315C  CFDD F0C4          	movff	postdec2,?_printf+7
  3857  003160  0100               	movlb	0	; () banked
  3858  003162  EE20 F00A          	lfsr	2,10
  3859  003166  51EB               	movf	showRunStats@run& (0+255),w,b
  3860  003168  26D9               	addwf	fsr2l,f,c
  3861  00316A  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  3862  00316C  22DA               	addwfc	fsr2h,f,c
  3863  00316E  CFDE F0C5          	movff	postinc2,?_printf+8
  3864  003172  CFDD F0C6          	movff	postdec2,?_printf+9
  3865  003176  EC09  F000         	call	_printf	;wreg free
  3866  00317A                     l7028:
  3867  00317A  EC83  F01C         	call	_readKeypad	;wreg free
  3868  00317E  0A2A               	xorlw	42
  3869  003180  B4D8               	btfsc	status,2,c
  3870  003182  0012               	return	
  3871  003184  D7FA               	goto	l7028
  3872  003186                     __end_of_showRunStats:
  3873                           	opt stack 0
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           postinc0	equ	0xFEE
  3879                           wreg	equ	0xFE8
  3880                           postdec1	equ	0xFE5
  3881                           fsr1l	equ	0xFE1
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           status	equ	0xFD8
  3888                           
  3889 ;; *************** function _showRunSelect *****************
  3890 ;; Defined at:
  3891 ;;		line 80 in file "interface.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  k               1  107[BANK0 ] unsigned char 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      unsigned char 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;Total ram usage:        1 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    8
  3912 ;; This function calls:
  3913 ;;		_lcdClear
  3914 ;;		_printf
  3915 ;;		_readKeypad
  3916 ;; This function is called by:
  3917 ;;		_showInterface
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           	psect	text8
  3922  00351C                     __ptext8:
  3923                           	opt stack 0
  3924  00351C                     _showRunSelect:
  3925                           	opt stack 21
  3926                           
  3927                           ;interface.c: 81: lcdClear();
  3928                           
  3929                           ;incstack = 0
  3930  00351C  EC36  F01D         	call	_lcdClear	;wreg free
  3931                           
  3932                           ;interface.c: 82: printf("select run:     \n");
  3933  003520  0E02               	movlw	low STR_14
  3934  003522  0100               	movlb	0	; () banked
  3935  003524  6FBD               	movwf	printf@f& (0+255),b
  3936  003526  0EFF               	movlw	high STR_14
  3937  003528  0100               	movlb	0	; () banked
  3938  00352A  6FBE               	movwf	(printf@f+1)& (0+255),b
  3939  00352C  EC09  F000         	call	_printf	;wreg free
  3940                           
  3941                           ;interface.c: 83: printf("[1,2,3,4]     *>");
  3942  003530  0E48               	movlw	low STR_15
  3943  003532  0100               	movlb	0	; () banked
  3944  003534  6FBD               	movwf	printf@f& (0+255),b
  3945  003536  0EFF               	movlw	high STR_15
  3946  003538  0100               	movlb	0	; () banked
  3947  00353A  6FBE               	movwf	(printf@f+1)& (0+255),b
  3948  00353C  EC09  F000         	call	_printf	;wreg free
  3949  003540                     l6978:
  3950  003540  EC83  F01C         	call	_readKeypad	;wreg free
  3951  003544  0100               	movlb	0	; () banked
  3952  003546  6FEB               	movwf	showRunSelect@k& (0+255),b
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;interface.c: 87: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  3956  003548  0E31               	movlw	49
  3957  00354A  0100               	movlb	0	; () banked
  3958  00354C  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  3959  00354E  B4D8               	btfsc	status,2,c
  3960  003550  D014               	goto	l6990
  3961                           
  3962                           ; BSR set to: 0
  3963  003552  0E32               	movlw	50
  3964  003554  0100               	movlb	0	; () banked
  3965  003556  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  3966  003558  B4D8               	btfsc	status,2,c
  3967  00355A  D00F               	goto	l6990
  3968                           
  3969                           ; BSR set to: 0
  3970  00355C  0E33               	movlw	51
  3971  00355E  0100               	movlb	0	; () banked
  3972  003560  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  3973  003562  B4D8               	btfsc	status,2,c
  3974  003564  D00A               	goto	l6990
  3975                           
  3976                           ; BSR set to: 0
  3977  003566  0E34               	movlw	52
  3978  003568  0100               	movlb	0	; () banked
  3979  00356A  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  3980  00356C  B4D8               	btfsc	status,2,c
  3981  00356E  D005               	goto	l6990
  3982                           
  3983                           ; BSR set to: 0
  3984  003570  0E2A               	movlw	42
  3985  003572  0100               	movlb	0	; () banked
  3986  003574  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  3987  003576  A4D8               	btfss	status,2,c
  3988  003578  D7E3               	goto	l6978
  3989  00357A                     l6990:
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;interface.c: 88: return k;
  3993  00357A  0100               	movlb	0	; () banked
  3994  00357C  51EB               	movf	showRunSelect@k& (0+255),w,b
  3995  00357E  0012               	return	
  3996  003580                     __end_of_showRunSelect:
  3997                           	opt stack 0
  3998                           tblptru	equ	0xFF8
  3999                           tblptrh	equ	0xFF7
  4000                           tblptrl	equ	0xFF6
  4001                           tablat	equ	0xFF5
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           postdec1	equ	0xFE5
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           fsr2h	equ	0xFDA
  4010                           fsr2l	equ	0xFD9
  4011                           status	equ	0xFD8
  4012                           
  4013 ;; *************** function _showRunMenu *****************
  4014 ;; Defined at:
  4015 ;;		line 91 in file "interface.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;  key             1    wreg     unsigned char 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  key             1  107[BANK0 ] unsigned char 
  4020 ;;  k               1  108[BANK0 ] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      unsigned char 
  4023 ;; Registers used:
  4024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;Total ram usage:        2 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    8
  4037 ;; This function calls:
  4038 ;;		_lcdClear
  4039 ;;		_printf
  4040 ;;		_readKeypad
  4041 ;; This function is called by:
  4042 ;;		_showInterface
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text9
  4047  003580                     __ptext9:
  4048                           	opt stack 0
  4049  003580                     _showRunMenu:
  4050                           	opt stack 21
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;incstack = 0
  4054                           ;showRunMenu@key stored from wreg
  4055  003580  0100               	movlb	0	; () banked
  4056  003582  6FEB               	movwf	showRunMenu@key& (0+255),b
  4057                           
  4058                           ;interface.c: 92: lcdClear();
  4059  003584  EC36  F01D         	call	_lcdClear	;wreg free
  4060                           
  4061                           ;interface.c: 93: printf("%c) time  <A     \n",key);
  4062  003588  0EB7               	movlw	low STR_16
  4063  00358A  0100               	movlb	0	; () banked
  4064  00358C  6FBD               	movwf	printf@f& (0+255),b
  4065  00358E  0EFE               	movlw	high STR_16
  4066  003590  0100               	movlb	0	; () banked
  4067  003592  6FBE               	movwf	(printf@f+1)& (0+255),b
  4068  003594  C0EB  F0BF         	movff	showRunMenu@key,?_printf+2
  4069  003598  0100               	movlb	0	; () banked
  4070  00359A  6BC0               	clrf	(?_printf+3)& (0+255),b
  4071  00359C  EC09  F000         	call	_printf	;wreg free
  4072                           
  4073                           ;interface.c: 94: printf( "   stats <B   *>");
  4074  0035A0  0E6A               	movlw	low STR_17
  4075  0035A2  0100               	movlb	0	; () banked
  4076  0035A4  6FBD               	movwf	printf@f& (0+255),b
  4077  0035A6  0EFF               	movlw	high STR_17
  4078  0035A8  0100               	movlb	0	; () banked
  4079  0035AA  6FBE               	movwf	(printf@f+1)& (0+255),b
  4080  0035AC  EC09  F000         	call	_printf	;wreg free
  4081  0035B0                     l7000:
  4082  0035B0  EC83  F01C         	call	_readKeypad	;wreg free
  4083  0035B4  0100               	movlb	0	; () banked
  4084  0035B6  6FEC               	movwf	showRunMenu@k& (0+255),b
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;interface.c: 98: while(k != 'A' && k != 'B' && k != '*');
  4088  0035B8  0E41               	movlw	65
  4089  0035BA  0100               	movlb	0	; () banked
  4090  0035BC  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4091  0035BE  B4D8               	btfsc	status,2,c
  4092  0035C0  D00A               	goto	l7008
  4093                           
  4094                           ; BSR set to: 0
  4095  0035C2  0E42               	movlw	66
  4096  0035C4  0100               	movlb	0	; () banked
  4097  0035C6  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4098  0035C8  B4D8               	btfsc	status,2,c
  4099  0035CA  D005               	goto	l7008
  4100                           
  4101                           ; BSR set to: 0
  4102  0035CC  0E2A               	movlw	42
  4103  0035CE  0100               	movlb	0	; () banked
  4104  0035D0  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4105  0035D2  A4D8               	btfss	status,2,c
  4106  0035D4  D7ED               	goto	l7000
  4107  0035D6                     l7008:
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;interface.c: 99: return k;
  4111  0035D6  0100               	movlb	0	; () banked
  4112  0035D8  51EC               	movf	showRunMenu@k& (0+255),w,b
  4113  0035DA  0012               	return	
  4114  0035DC                     __end_of_showRunMenu:
  4115                           	opt stack 0
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           postinc0	equ	0xFEE
  4121                           wreg	equ	0xFE8
  4122                           postdec1	equ	0xFE5
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _showMainMenu *****************
  4132 ;; Defined at:
  4133 ;;		line 69 in file "interface.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  k               1  107[BANK0 ] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      unsigned char 
  4140 ;; Registers used:
  4141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;Total ram usage:        1 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    8
  4154 ;; This function calls:
  4155 ;;		_lcdClear
  4156 ;;		_printf
  4157 ;;		_readKeypad
  4158 ;; This function is called by:
  4159 ;;		_showInterface
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text10
  4164  003692                     __ptext10:
  4165                           	opt stack 0
  4166  003692                     _showMainMenu:
  4167                           	opt stack 21
  4168                           
  4169                           ;interface.c: 70: lcdClear();
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;incstack = 0
  4173  003692  EC36  F01D         	call	_lcdClear	;wreg free
  4174                           
  4175                           ;interface.c: 71: printf("start   <B      \n");
  4176  003696  0EF0               	movlw	low STR_12
  4177  003698  0100               	movlb	0	; () banked
  4178  00369A  6FBD               	movwf	printf@f& (0+255),b
  4179  00369C  0EFE               	movlw	high STR_12
  4180  00369E  0100               	movlb	0	; () banked
  4181  0036A0  6FBE               	movwf	(printf@f+1)& (0+255),b
  4182  0036A2  EC09  F000         	call	_printf	;wreg free
  4183                           
  4184                           ;interface.c: 72: printf("history <C    *>");
  4185  0036A6  0E59               	movlw	low STR_13
  4186  0036A8  0100               	movlb	0	; () banked
  4187  0036AA  6FBD               	movwf	printf@f& (0+255),b
  4188  0036AC  0EFF               	movlw	high STR_13
  4189  0036AE  0100               	movlb	0	; () banked
  4190  0036B0  6FBE               	movwf	(printf@f+1)& (0+255),b
  4191  0036B2  EC09  F000         	call	_printf	;wreg free
  4192  0036B6                     l6960:
  4193  0036B6  EC83  F01C         	call	_readKeypad	;wreg free
  4194  0036BA  0100               	movlb	0	; () banked
  4195  0036BC  6FEB               	movwf	showMainMenu@k& (0+255),b
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;interface.c: 76: while(k != 'B' && k != 'C' && k != '*');
  4199  0036BE  0E42               	movlw	66
  4200  0036C0  0100               	movlb	0	; () banked
  4201  0036C2  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4202  0036C4  B4D8               	btfsc	status,2,c
  4203  0036C6  D00A               	goto	l6968
  4204                           
  4205                           ; BSR set to: 0
  4206  0036C8  0E43               	movlw	67
  4207  0036CA  0100               	movlb	0	; () banked
  4208  0036CC  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4209  0036CE  B4D8               	btfsc	status,2,c
  4210  0036D0  D005               	goto	l6968
  4211                           
  4212                           ; BSR set to: 0
  4213  0036D2  0E2A               	movlw	42
  4214  0036D4  0100               	movlb	0	; () banked
  4215  0036D6  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4216  0036D8  A4D8               	btfss	status,2,c
  4217  0036DA  D7ED               	goto	l6960
  4218  0036DC                     l6968:
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;interface.c: 77: return k;
  4222  0036DC  0100               	movlb	0	; () banked
  4223  0036DE  51EB               	movf	showMainMenu@k& (0+255),w,b
  4224  0036E0  0012               	return	
  4225  0036E2                     __end_of_showMainMenu:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           postdec1	equ	0xFE5
  4234                           fsr1l	equ	0xFE1
  4235                           indf2	equ	0xFDF
  4236                           postinc2	equ	0xFDE
  4237                           postdec2	equ	0xFDD
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function _readKeypad *****************
  4243 ;; Defined at:
  4244 ;;		line 36 in file "keypad.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  key             1   34[COMRAM] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      unsigned char 
  4251 ;; Registers used:
  4252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        1 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    3
  4265 ;; This function calls:
  4266 ;;		Nothing
  4267 ;; This function is called by:
  4268 ;;		_main
  4269 ;;		_sortBattery
  4270 ;;		_showMainMenu
  4271 ;;		_showRunSelect
  4272 ;;		_showRunMenu
  4273 ;;		_showRunTime
  4274 ;;		_showRunStats
  4275 ;;		_pause
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text11
  4280  003906                     __ptext11:
  4281                           	opt stack 0
  4282  003906                     _readKeypad:
  4283                           	opt stack 26
  4284  003906                     l251:
  4285  003906  A281               	btfss	3969,1,c	;volatile
  4286  003908  D7FE               	goto	l251
  4287                           
  4288                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4289  00390A  3881               	swapf	3969,w,c	;volatile
  4290  00390C  0B0F               	andlw	15
  4291  00390E  0B0F               	andlw	15
  4292  003910  6E23               	movwf	readKeypad@key,c
  4293  003912                     l254:
  4294  003912  B281               	btfsc	3969,1,c	;volatile
  4295  003914  D7FE               	goto	l254
  4296                           
  4297                           ;keypad.c: 40: return keys[key];
  4298  003916  5023               	movf	readKeypad@key,w,c
  4299  003918  0D01               	mullw	1
  4300  00391A  0E9F               	movlw	low _keys
  4301  00391C  24F3               	addwf	prodl,w,c
  4302  00391E  6EF6               	movwf	tblptrl,c
  4303  003920  0EFE               	movlw	high _keys
  4304  003922  20F4               	addwfc	prodh,w,c
  4305  003924  6EF7               	movwf	tblptrh,c
  4306  003926                     	if	0	;There are less than 3 active tblptr bytes
  4307  003926                     	endif
  4308  003926  0008               	tblrd		*
  4309  003928  50F5               	movf	tablat,w,c
  4310  00392A  0012               	return	
  4311  00392C                     __end_of_readKeypad:
  4312                           	opt stack 0
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           postinc0	equ	0xFEE
  4320                           wreg	equ	0xFE8
  4321                           postdec1	equ	0xFE5
  4322                           fsr1l	equ	0xFE1
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function _printf *****************
  4331 ;; Defined at:
  4332 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  4335 ;;		 -> STR_21(19), STR_20(18), STR_19(17), STR_18(19), 
  4336 ;;		 -> STR_17(17), STR_16(19), STR_15(17), STR_14(18), 
  4337 ;;		 -> STR_13(17), STR_12(18), STR_11(9), STR_10(10), 
  4338 ;;		 -> STR_9(8), STR_8(11), STR_7(11), STR_6(11), 
  4339 ;;		 -> STR_5(15), STR_4(14), STR_3(17), STR_2(17), 
  4340 ;;		 -> STR_1(8), 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  idx             1   80[BANK0 ] unsigned char 
  4343 ;;  val             4   96[BANK0 ] unsigned long 
  4344 ;;  tmpval          4   87[BANK0 ] struct .
  4345 ;;  fval            3   93[BANK0 ] struct .
  4346 ;;  prec            2  104[BANK0 ] int 
  4347 ;;  flag            2  102[BANK0 ] unsigned short 
  4348 ;;  width           2  100[BANK0 ] int 
  4349 ;;  exp             2   91[BANK0 ] int 
  4350 ;;  ap              2   85[BANK0 ] PTR void [1]
  4351 ;;		 -> ?_printf(2), 
  4352 ;;  len             2   83[BANK0 ] unsigned int 
  4353 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  4354 ;;		 -> printf@c(1), 
  4355 ;;  c               1  106[BANK0 ] char 
  4356 ;;  d               1    0        unsigned char 
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  2   61[BANK0 ] int 
  4359 ;; Registers used:
  4360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4366 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;Total ram usage:       46 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    7
  4373 ;; This function calls:
  4374 ;;		___awdiv
  4375 ;;		___ftadd
  4376 ;;		___ftge
  4377 ;;		___ftmul
  4378 ;;		___ftneg
  4379 ;;		___ftsub
  4380 ;;		___fttol
  4381 ;;		___lldiv
  4382 ;;		___llmod
  4383 ;;		___lltoft
  4384 ;;		___wmul
  4385 ;;		__div_to_l_
  4386 ;;		__tdiv_to_l_
  4387 ;;		_fround
  4388 ;;		_isdigit
  4389 ;;		_putch
  4390 ;;		_scale
  4391 ;; This function is called by:
  4392 ;;		_main
  4393 ;;		_sortBattery
  4394 ;;		_showMainMenu
  4395 ;;		_showRunSelect
  4396 ;;		_showRunMenu
  4397 ;;		_showRunTime
  4398 ;;		_showRunStats
  4399 ;;		_pause
  4400 ;;		_testFrequency
  4401 ;;		_showDateTime
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text12
  4406  000012                     __ptext12:
  4407                           	opt stack 0
  4408  000012                     _printf:
  4409                           	opt stack 22
  4410                           
  4411                           ;doprnt.c: 466: va_list ap;
  4412                           ;doprnt.c: 499: signed char c;
  4413                           ;doprnt.c: 501: int width;
  4414                           ;doprnt.c: 504: int prec;
  4415                           ;doprnt.c: 508: unsigned short flag;
  4416                           ;doprnt.c: 515: char d;
  4417                           ;doprnt.c: 516: double fval;
  4418                           ;doprnt.c: 517: int exp;
  4419                           ;doprnt.c: 523: union {
  4420                           ;doprnt.c: 524: unsigned long vd;
  4421                           ;doprnt.c: 525: double integ;
  4422                           ;doprnt.c: 526: } tmpval;
  4423                           ;doprnt.c: 528: unsigned long val;
  4424                           ;doprnt.c: 529: unsigned len;
  4425                           ;doprnt.c: 530: const char * cp;
  4426                           ;doprnt.c: 533: *ap = __va_start();
  4427                           
  4428                           ;incstack = 0
  4429  000012  0EBF               	movlw	low (?_printf+2)
  4430  000014  0100               	movlb	0	; () banked
  4431  000016  6FD5               	movwf	printf@ap& (0+255),b
  4432  000018  0E00               	movlw	high (?_printf+2)
  4433  00001A  0100               	movlb	0	; () banked
  4434  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  4435                           
  4436                           ;doprnt.c: 536: while(c = *f++) {
  4437  00001E  EFF5  F006         	goto	l6770
  4438  000022                     l6404:
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;doprnt.c: 538: if(c != '%')
  4442  000022  0E25               	movlw	37
  4443  000024  0100               	movlb	0	; () banked
  4444  000026  19EA               	xorwf	printf@c& (0+255),w,b
  4445  000028  B4D8               	btfsc	status,2,c
  4446  00002A  D006               	goto	l6408
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;doprnt.c: 540: {
  4450                           ;doprnt.c: 541: (putch(c) );
  4451  00002C  0100               	movlb	0	; () banked
  4452  00002E  51EA               	movf	printf@c& (0+255),w,b
  4453  000030  ECCD  F01C         	call	_putch
  4454                           
  4455                           ;doprnt.c: 542: continue;
  4456  000034  EFF5  F006         	goto	l6770
  4457  000038                     l6408:
  4458                           
  4459                           ;doprnt.c: 543: }
  4460                           ;doprnt.c: 546: width = 0;
  4461  000038  0E00               	movlw	0
  4462  00003A  0100               	movlb	0	; () banked
  4463  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  4464  00003E  0E00               	movlw	0
  4465  000040  6FE4               	movwf	printf@width& (0+255),b
  4466                           
  4467                           ;doprnt.c: 548: flag = 0;
  4468  000042  0E00               	movlw	0
  4469  000044  0100               	movlb	0	; () banked
  4470  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  4471  000048  0E00               	movlw	0
  4472  00004A  6FE6               	movwf	printf@flag& (0+255),b
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;doprnt.c: 551: switch(*f) {
  4476                           
  4477                           ;doprnt.c: 550: for(;;) {
  4478  00004C  D005               	goto	l6414
  4479  00004E                     l6410:
  4480                           
  4481                           ;doprnt.c: 580: flag |= 0x04;
  4482  00004E  0100               	movlb	0	; () banked
  4483  000050  85E6               	bsf	printf@flag& (0+255),2,b
  4484                           
  4485                           ;doprnt.c: 581: f++;
  4486  000052  0100               	movlb	0	; () banked
  4487  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  4488  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4489  000058                     l6414:
  4490  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  4491  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4492  000060                     	if	0	;tblptru may be non-zero
  4493  000060                     	endif
  4494  000060                     	if	0	;tblptru may be non-zero
  4495  000060                     	endif
  4496  000060  0008               	tblrd		*
  4497  000062  50F5               	movf	tablat,w,c
  4498                           
  4499                           ; Switch size 1, requested type "space"
  4500                           ; Number of cases is 1, Range of values is 48 to 48
  4501                           ; switch strategies available:
  4502                           ; Name         Instructions Cycles
  4503                           ; simple_byte            4     3 (average)
  4504                           ;	Chosen strategy is simple_byte
  4505  000064  0A30               	xorlw	48	; case 48
  4506  000066  B4D8               	btfsc	status,2,c
  4507  000068  D7F2               	goto	l6410
  4508                           
  4509                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4510                           
  4511                           ;doprnt.c: 586: }
  4512                           
  4513                           ;doprnt.c: 585: break;
  4514  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  4515  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4516  000072                     	if	0	;tblptru may be non-zero
  4517  000072                     	endif
  4518  000072                     	if	0	;tblptru may be non-zero
  4519  000072                     	endif
  4520  000072  0008               	tblrd		*
  4521  000074  50F5               	movf	tablat,w,c
  4522  000076  ECFF  F01C         	call	_isdigit
  4523  00007A  A0D8               	btfss	status,0,c
  4524  00007C  D03F               	goto	l6428
  4525                           
  4526                           ;doprnt.c: 598: width = 0;
  4527  00007E  0E00               	movlw	0
  4528  000080  0100               	movlb	0	; () banked
  4529  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  4530  000084  0E00               	movlw	0
  4531  000086  6FE4               	movwf	printf@width& (0+255),b
  4532  000088                     l6420:
  4533                           
  4534                           ;doprnt.c: 600: width *= 10;
  4535  000088  C0E4  F031         	movff	printf@width,___wmul@multiplier
  4536  00008C  C0E5  F032         	movff	printf@width+1,___wmul@multiplier+1
  4537  000090  0E00               	movlw	0
  4538  000092  6E34               	movwf	___wmul@multiplicand+1,c
  4539  000094  0E0A               	movlw	10
  4540  000096  6E33               	movwf	___wmul@multiplicand,c
  4541  000098  EC96  F01C         	call	___wmul	;wreg free
  4542  00009C  C031  F0E4         	movff	?___wmul,printf@width
  4543  0000A0  C032  F0E5         	movff	?___wmul+1,printf@width+1
  4544                           
  4545                           ;doprnt.c: 601: width += *f++ - '0';
  4546  0000A4  0ED0               	movlw	208
  4547  0000A6  0100               	movlb	0	; () banked
  4548  0000A8  6FC7               	movwf	??_printf& (0+255),b
  4549  0000AA  0EFF               	movlw	255
  4550  0000AC  0100               	movlb	0	; () banked
  4551  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  4552  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  4553  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4554  0000B8                     	if	0	;tblptru may be non-zero
  4555  0000B8                     	endif
  4556  0000B8                     	if	0	;tblptru may be non-zero
  4557  0000B8                     	endif
  4558  0000B8  0008               	tblrd		*
  4559  0000BA  50F5               	movf	tablat,w,c
  4560  0000BC  0100               	movlb	0	; () banked
  4561  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  4562  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  4563  0000C2  0100               	movlb	0	; () banked
  4564  0000C4  51C7               	movf	??_printf& (0+255),w,b
  4565  0000C6  0100               	movlb	0	; () banked
  4566  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  4567  0000CA  0100               	movlb	0	; () banked
  4568  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  4569  0000CE  0100               	movlb	0	; () banked
  4570  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  4571  0000D2  0100               	movlb	0	; () banked
  4572  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  4573  0000D6  0100               	movlb	0	; () banked
  4574  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  4575  0000DA  0100               	movlb	0	; () banked
  4576  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  4577  0000DE  0100               	movlb	0	; () banked
  4578  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  4579                           
  4580                           ; BSR set to: 0
  4581  0000E2  0100               	movlb	0	; () banked
  4582  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  4583  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4587  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  4588  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4589  0000F0                     	if	0	;tblptru may be non-zero
  4590  0000F0                     	endif
  4591  0000F0                     	if	0	;tblptru may be non-zero
  4592  0000F0                     	endif
  4593  0000F0  0008               	tblrd		*
  4594  0000F2  50F5               	movf	tablat,w,c
  4595  0000F4  ECFF  F01C         	call	_isdigit
  4596  0000F8  B0D8               	btfsc	status,0,c
  4597  0000FA  D7C6               	goto	l6420
  4598  0000FC                     l6428:
  4599                           
  4600                           ;doprnt.c: 608: }
  4601                           ;doprnt.c: 611: if(*f == '.') {
  4602  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  4603  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4604  000104                     	if	0	;tblptru may be non-zero
  4605  000104                     	endif
  4606  000104                     	if	0	;tblptru may be non-zero
  4607  000104                     	endif
  4608  000104  0008               	tblrd		*
  4609  000106  50F5               	movf	tablat,w,c
  4610  000108  0A2E               	xorlw	46
  4611  00010A  A4D8               	btfss	status,2,c
  4612  00010C  D034               	goto	l6440
  4613                           
  4614                           ;doprnt.c: 612: flag |= 0x4000;
  4615  00010E  0100               	movlb	0	; () banked
  4616  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  4617                           
  4618                           ;doprnt.c: 613: f++;
  4619  000112  0100               	movlb	0	; () banked
  4620  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  4621  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;doprnt.c: 620: {
  4625                           ;doprnt.c: 621: prec = 0;
  4626  000118  0E00               	movlw	0
  4627  00011A  0100               	movlb	0	; () banked
  4628  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  4629  00011E  0E00               	movlw	0
  4630  000120  6FE8               	movwf	printf@prec& (0+255),b
  4631                           
  4632                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4633  000122  D01E               	goto	l6438
  4634  000124                     l6434:
  4635                           
  4636                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4637  000124  C0E8  F031         	movff	printf@prec,___wmul@multiplier
  4638  000128  C0E9  F032         	movff	printf@prec+1,___wmul@multiplier+1
  4639  00012C  0E00               	movlw	0
  4640  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  4641  000130  0E0A               	movlw	10
  4642  000132  6E33               	movwf	___wmul@multiplicand,c
  4643  000134  EC96  F01C         	call	___wmul	;wreg free
  4644  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  4645  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4646  000140                     	if	0	;tblptru may be non-zero
  4647  000140                     	endif
  4648  000140                     	if	0	;tblptru may be non-zero
  4649  000140                     	endif
  4650  000140  0008               	tblrd		*
  4651  000142  50F5               	movf	tablat,w,c
  4652  000144  2631               	addwf	?___wmul,f,c
  4653  000146  0E00               	movlw	0
  4654  000148  2232               	addwfc	?___wmul+1,f,c
  4655  00014A  0ED0               	movlw	208
  4656  00014C  2431               	addwf	?___wmul,w,c
  4657  00014E  0100               	movlb	0	; () banked
  4658  000150  6FE8               	movwf	printf@prec& (0+255),b
  4659  000152  0EFF               	movlw	255
  4660  000154  2032               	addwfc	?___wmul+1,w,c
  4661  000156  0100               	movlb	0	; () banked
  4662  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  4663                           
  4664                           ; BSR set to: 0
  4665  00015A  0100               	movlb	0	; () banked
  4666  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  4667  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4668  000160                     l6438:
  4669                           
  4670                           ; BSR set to: 0
  4671  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  4672  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4673  000168                     	if	0	;tblptru may be non-zero
  4674  000168                     	endif
  4675  000168                     	if	0	;tblptru may be non-zero
  4676  000168                     	endif
  4677  000168  0008               	tblrd		*
  4678  00016A  50F5               	movf	tablat,w,c
  4679  00016C  ECFF  F01C         	call	_isdigit
  4680  000170  A0D8               	btfss	status,0,c
  4681  000172  D07D               	goto	l6482
  4682  000174  D7D7               	goto	l6434
  4683  000176                     l6440:
  4684                           
  4685                           ;doprnt.c: 626: prec = 0;
  4686  000176  0E00               	movlw	0
  4687  000178  0100               	movlb	0	; () banked
  4688  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  4689  00017C  0E00               	movlw	0
  4690  00017E  6FE8               	movwf	printf@prec& (0+255),b
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;doprnt.c: 628: flag |= 0x1000;
  4694  000180  0100               	movlb	0	; () banked
  4695  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;doprnt.c: 635: switch(c = *f++) {
  4699                           
  4700                           ;doprnt.c: 630: }
  4701                           ;doprnt.c: 633: loop:
  4702                           
  4703                           ; BSR set to: 0
  4704  000184  D074               	goto	l6482
  4705  000186                     l6444:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;doprnt.c: 643: flag |= 0x10;
  4709  000186  0100               	movlb	0	; () banked
  4710  000188  89E6               	bsf	printf@flag& (0+255),4,b
  4711                           
  4712                           ;doprnt.c: 644: goto loop;
  4713  00018A  D071               	goto	l6482
  4714  00018C                     l6446:
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;doprnt.c: 663: flag |= 0x400;
  4718  00018C  0100               	movlb	0	; () banked
  4719  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;doprnt.c: 698: case 'i':
  4723                           ;doprnt.c: 699: break;
  4724                           
  4725                           ; BSR set to: 0
  4726                           
  4727                           ;doprnt.c: 697: case 'd':
  4728                           
  4729                           ;doprnt.c: 664: break;
  4730  000190  D090               	goto	l6484
  4731  000192                     l6448:
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;doprnt.c: 721: flag |= 0x80;
  4735  000192  0100               	movlb	0	; () banked
  4736  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  4737                           
  4738                           ;doprnt.c: 723: break;
  4739  000196  D08D               	goto	l6484
  4740  000198                     l6450:
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;doprnt.c: 753: if(prec && prec < len)
  4744  000198  0100               	movlb	0	; () banked
  4745  00019A  51E8               	movf	printf@prec& (0+255),w,b
  4746  00019C  0100               	movlb	0	; () banked
  4747  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  4748  0001A0  B4D8               	btfsc	status,2,c
  4749  0001A2  D00E               	goto	l6456
  4750                           
  4751                           ; BSR set to: 0
  4752  0001A4  0100               	movlb	0	; () banked
  4753  0001A6  51D3               	movf	printf@len& (0+255),w,b
  4754  0001A8  0100               	movlb	0	; () banked
  4755  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  4756  0001AC  0100               	movlb	0	; () banked
  4757  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  4758  0001B0  0100               	movlb	0	; () banked
  4759  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  4760  0001B4  B0D8               	btfsc	status,0,c
  4761  0001B6  D004               	goto	l6456
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;doprnt.c: 754: len = prec;
  4765  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  4766  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  4767  0001C0                     l6456:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;doprnt.c: 757: if(width > len)
  4771  0001C0  0100               	movlb	0	; () banked
  4772  0001C2  51E4               	movf	printf@width& (0+255),w,b
  4773  0001C4  0100               	movlb	0	; () banked
  4774  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  4775  0001C8  0100               	movlb	0	; () banked
  4776  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  4777  0001CC  0100               	movlb	0	; () banked
  4778  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  4779  0001D0  B0D8               	btfsc	status,0,c
  4780  0001D2  D009               	goto	l6460
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;doprnt.c: 758: width -= len;
  4784  0001D4  0100               	movlb	0	; () banked
  4785  0001D6  51D3               	movf	printf@len& (0+255),w,b
  4786  0001D8  0100               	movlb	0	; () banked
  4787  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  4788  0001DC  0100               	movlb	0	; () banked
  4789  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  4790  0001E0  0100               	movlb	0	; () banked
  4791  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  4792  0001E4  D009               	goto	l6464
  4793  0001E6                     l6460:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;doprnt.c: 759: else
  4797                           ;doprnt.c: 760: width = 0;
  4798  0001E6  0E00               	movlw	0
  4799  0001E8  0100               	movlb	0	; () banked
  4800  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  4801  0001EC  0E00               	movlw	0
  4802  0001EE  6FE4               	movwf	printf@width& (0+255),b
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;doprnt.c: 764: while(width--)
  4806  0001F0  D003               	goto	l6464
  4807  0001F2                     l6462:
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;doprnt.c: 765: (putch(' ') );
  4811  0001F2  0E20               	movlw	32
  4812  0001F4  ECCD  F01C         	call	_putch
  4813  0001F8                     l6464:
  4814  0001F8  0100               	movlb	0	; () banked
  4815  0001FA  07E4               	decf	printf@width& (0+255),f,b
  4816  0001FC  A0D8               	btfss	status,0,c
  4817  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  4818  000200  0100               	movlb	0	; () banked
  4819  000202  29E4               	incf	printf@width& (0+255),w,b
  4820  000204  E1F6               	bnz	l6462
  4821  000206  0100               	movlb	0	; () banked
  4822  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  4823  00020A  B4D8               	btfsc	status,2,c
  4824  00020C  D00B               	goto	l6470
  4825  00020E  D7F1               	goto	l6462
  4826  000210                     l6466:
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;doprnt.c: 768: (putch(*cp++) );
  4830  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  4831  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  4832  000218  50DF               	movf	indf2,w,c
  4833  00021A  ECCD  F01C         	call	_putch
  4834  00021E  0100               	movlb	0	; () banked
  4835  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  4836  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  4837  000224                     l6470:
  4838                           
  4839                           ; BSR set to: 0
  4840  000224  0100               	movlb	0	; () banked
  4841  000226  07D3               	decf	printf@len& (0+255),f,b
  4842  000228  A0D8               	btfss	status,0,c
  4843  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  4844  00022C  0100               	movlb	0	; () banked
  4845  00022E  29D3               	incf	printf@len& (0+255),w,b
  4846  000230  E1EF               	bnz	l6466
  4847  000232  0100               	movlb	0	; () banked
  4848  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  4849  000236  B4D8               	btfsc	status,2,c
  4850  000238  EFF5  F006         	goto	l6770
  4851  00023C  D7E9               	goto	l6466
  4852  00023E                     l6472:
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4856  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  4857  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4858  000246  50DF               	movf	indf2,w,c
  4859  000248  0100               	movlb	0	; () banked
  4860  00024A  6FEA               	movwf	printf@c& (0+255),b
  4861                           
  4862                           ; BSR set to: 0
  4863  00024C  0E02               	movlw	2
  4864  00024E  0100               	movlb	0	; () banked
  4865  000250  27D5               	addwf	printf@ap& (0+255),f,b
  4866  000252  0E00               	movlw	0
  4867  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4868  000256                     l6476:
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;doprnt.c: 805: cp = (char *)&c;
  4872  000256  0EEA               	movlw	low printf@c
  4873  000258  0100               	movlb	0	; () banked
  4874  00025A  6FD1               	movwf	printf@cp& (0+255),b
  4875  00025C  0E00               	movlw	high printf@c
  4876  00025E  0100               	movlb	0	; () banked
  4877  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;doprnt.c: 806: len = 1;
  4881  000262  0E00               	movlw	0
  4882  000264  0100               	movlb	0	; () banked
  4883  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  4884  000268  0E01               	movlw	1
  4885  00026A  6FD3               	movwf	printf@len& (0+255),b
  4886                           
  4887                           ;doprnt.c: 807: goto dostring;
  4888  00026C  D795               	goto	l6450
  4889  00026E                     l6482:
  4890  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  4891  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4892  000276  0100               	movlb	0	; () banked
  4893  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  4894  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4895  00027C                     	if	0	;tblptru may be non-zero
  4896  00027C                     	endif
  4897  00027C                     	if	0	;tblptru may be non-zero
  4898  00027C                     	endif
  4899  00027C  0008               	tblrd		*
  4900  00027E  CFF5 F0EA          	movff	tablat,printf@c
  4901  000282  0100               	movlb	0	; () banked
  4902  000284  51EA               	movf	printf@c& (0+255),w,b
  4903                           
  4904                           ; Switch size 1, requested type "space"
  4905                           ; Number of cases is 7, Range of values is 0 to 120
  4906                           ; switch strategies available:
  4907                           ; Name         Instructions Cycles
  4908                           ; simple_byte           22    12 (average)
  4909                           ;	Chosen strategy is simple_byte
  4910  000286  0A00               	xorlw	0	; case 0
  4911  000288  B4D8               	btfsc	status,2,c
  4912  00028A  0012               	return	
  4913  00028C  0A63               	xorlw	99	; case 99
  4914  00028E  B4D8               	btfsc	status,2,c
  4915  000290  D7D6               	goto	l6472
  4916  000292  0A07               	xorlw	7	; case 100
  4917  000294  B4D8               	btfsc	status,2,c
  4918  000296  D00D               	goto	l6484
  4919  000298  0A02               	xorlw	2	; case 102
  4920  00029A  B4D8               	btfsc	status,2,c
  4921  00029C  D777               	goto	l6446
  4922  00029E  0A0F               	xorlw	15	; case 105
  4923  0002A0  B4D8               	btfsc	status,2,c
  4924  0002A2  D007               	goto	l6484
  4925  0002A4  0A05               	xorlw	5	; case 108
  4926  0002A6  B4D8               	btfsc	status,2,c
  4927  0002A8  D76E               	goto	l6444
  4928  0002AA  0A14               	xorlw	20	; case 120
  4929  0002AC  B4D8               	btfsc	status,2,c
  4930  0002AE  D771               	goto	l6448
  4931  0002B0  D7D2               	goto	l6476
  4932  0002B2                     l6484:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;doprnt.c: 825: if(flag & (0x700)) {
  4936  0002B2  0E07               	movlw	7
  4937  0002B4  0100               	movlb	0	; () banked
  4938  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  4939  0002B8  B4D8               	btfsc	status,2,c
  4940  0002BA  D36D               	goto	l759
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;doprnt.c: 827: if(flag & 0x1000)
  4944  0002BC  0100               	movlb	0	; () banked
  4945  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  4946  0002C0  D005               	goto	l6490
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;doprnt.c: 829: prec = 6;
  4950  0002C2  0E00               	movlw	0
  4951  0002C4  0100               	movlb	0	; () banked
  4952  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  4953  0002C8  0E06               	movlw	6
  4954  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  4955  0002CC                     l6490:
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4959  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  4960  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4961  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  4962  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  4963  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  4964                           
  4965                           ; BSR set to: 0
  4966  0002E0  0E03               	movlw	3
  4967  0002E2  0100               	movlb	0	; () banked
  4968  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  4969  0002E6  0E00               	movlw	0
  4970  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;doprnt.c: 831: if(fval < 0.0) {
  4974  0002EA  0100               	movlb	0	; () banked
  4975  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  4976  0002EE  D011               	goto	l6500
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;doprnt.c: 832: fval = -fval;
  4980  0002F0  C0DD  F023         	movff	printf@fval,___ftneg@f1
  4981  0002F4  C0DE  F024         	movff	printf@fval+1,___ftneg@f1+1
  4982  0002F8  C0DF  F025         	movff	printf@fval+2,___ftneg@f1+2
  4983  0002FC  ECBB  F01C         	call	___ftneg	;wreg free
  4984  000300  C023  F0DD         	movff	?___ftneg,printf@fval
  4985  000304  C024  F0DE         	movff	?___ftneg+1,printf@fval+1
  4986  000308  C025  F0DF         	movff	?___ftneg+2,printf@fval+2
  4987                           
  4988                           ;doprnt.c: 833: flag |= 0x03;
  4989  00030C  0E03               	movlw	3
  4990  00030E  0100               	movlb	0	; () banked
  4991  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  4992  000312                     l6500:
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;doprnt.c: 834: }
  4996                           ;doprnt.c: 835: exp = 0;
  4997  000312  0E00               	movlw	0
  4998  000314  0100               	movlb	0	; () banked
  4999  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5000  000318  0E00               	movlw	0
  5001  00031A  6FDB               	movwf	printf@exp& (0+255),b
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;doprnt.c: 836: if( fval!=0) {
  5005  00031C  0100               	movlb	0	; () banked
  5006  00031E  51DD               	movf	printf@fval& (0+255),w,b
  5007  000320  0100               	movlb	0	; () banked
  5008  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5009  000324  0100               	movlb	0	; () banked
  5010  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5011  000328  B4D8               	btfsc	status,2,c
  5012  00032A  D091               	goto	l6528
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5016  00032C  0E82               	movlw	130
  5017  00032E  0100               	movlb	0	; () banked
  5018  000330  6FC7               	movwf	??_printf& (0+255),b
  5019  000332  0EFF               	movlw	255
  5020  000334  0100               	movlb	0	; () banked
  5021  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  5022  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  5023  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  5024  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  5025  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  5026  000348  0E10               	movlw	16
  5027  00034A  D006               	goto	u6510
  5028  00034C                     u6515:
  5029  00034C  0100               	movlb	0	; () banked
  5030  00034E  90D8               	bcf	status,0,c
  5031  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  5032  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  5033  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  5034  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  5035  000358                     u6510:
  5036  000358  2EE8               	decfsz	wreg,f,c
  5037  00035A  D7F8               	goto	u6515
  5038  00035C  0100               	movlb	0	; () banked
  5039  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  5040  000360  0100               	movlb	0	; () banked
  5041  000362  25C7               	addwf	??_printf& (0+255),w,b
  5042  000364  0100               	movlb	0	; () banked
  5043  000366  6FDB               	movwf	printf@exp& (0+255),b
  5044  000368  0E00               	movlw	0
  5045  00036A  0100               	movlb	0	; () banked
  5046  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  5047  00036E  0100               	movlb	0	; () banked
  5048  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;doprnt.c: 838: exp--;
  5052  000372  0100               	movlb	0	; () banked
  5053  000374  07DB               	decf	printf@exp& (0+255),f,b
  5054  000376  A0D8               	btfss	status,0,c
  5055  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;doprnt.c: 839: exp *= 3;
  5059  00037A  C0DB  F031         	movff	printf@exp,___wmul@multiplier
  5060  00037E  C0DC  F032         	movff	printf@exp+1,___wmul@multiplier+1
  5061  000382  0E00               	movlw	0
  5062  000384  6E34               	movwf	___wmul@multiplicand+1,c
  5063  000386  0E03               	movlw	3
  5064  000388  6E33               	movwf	___wmul@multiplicand,c
  5065  00038A  EC96  F01C         	call	___wmul	;wreg free
  5066  00038E  C031  F0DB         	movff	?___wmul,printf@exp
  5067  000392  C032  F0DC         	movff	?___wmul+1,printf@exp+1
  5068                           
  5069                           ;doprnt.c: 840: exp /= 10;
  5070  000396  C0DB  F029         	movff	printf@exp,___awdiv@dividend
  5071  00039A  C0DC  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  5072  00039E  0E00               	movlw	0
  5073  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  5074  0003A2  0E0A               	movlw	10
  5075  0003A4  6E2B               	movwf	___awdiv@divisor,c
  5076  0003A6  ECC3  F018         	call	___awdiv	;wreg free
  5077  0003AA  C029  F0DB         	movff	?___awdiv,printf@exp
  5078  0003AE  C02A  F0DC         	movff	?___awdiv+1,printf@exp+1
  5079                           
  5080                           ;doprnt.c: 841: if(exp < 0)
  5081  0003B2  0100               	movlb	0	; () banked
  5082  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  5083  0003B6  D004               	goto	l6516
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;doprnt.c: 842: exp--;
  5087  0003B8  0100               	movlb	0	; () banked
  5088  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  5089  0003BC  A0D8               	btfss	status,0,c
  5090  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5091  0003C0                     l6516:
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5095  0003C0  0100               	movlb	0	; () banked
  5096  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  5097  0003C4  0800               	sublw	0
  5098  0003C6  ECA5  F009         	call	_scale
  5099  0003CA  C098  F0D7         	movff	?_scale,printf@tmpval
  5100  0003CE  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5101  0003D2  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5102                           
  5103                           ;doprnt.c: 847: tmpval.integ *= fval;
  5104  0003D6  C0D7  F089         	movff	printf@tmpval,___ftmul@f1
  5105  0003DA  C0D8  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  5106  0003DE  C0D9  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  5107  0003E2  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  5108  0003E6  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5109  0003EA  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5110  0003EE  EC6F  F00F         	call	___ftmul	;wreg free
  5111  0003F2  C089  F0D7         	movff	?___ftmul,printf@tmpval
  5112  0003F6  C08A  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  5113  0003FA  C08B  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  5114                           
  5115                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5116  0003FE  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5117  000402  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5118  000406  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5119  00040A  0E00               	movlw	0
  5120  00040C  6E32               	movwf	___ftge@ff2,c
  5121  00040E  0E80               	movlw	128
  5122  000410  6E33               	movwf	___ftge@ff2+1,c
  5123  000412  0E3F               	movlw	63
  5124  000414  6E34               	movwf	___ftge@ff2+2,c
  5125  000416  EC37  F018         	call	___ftge	;wreg free
  5126  00041A  B0D8               	btfsc	status,0,c
  5127  00041C  D005               	goto	l6524
  5128                           
  5129                           ;doprnt.c: 849: exp--;
  5130  00041E  0100               	movlb	0	; () banked
  5131  000420  07DB               	decf	printf@exp& (0+255),f,b
  5132  000422  A0D8               	btfss	status,0,c
  5133  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5134  000426  D013               	goto	l6528
  5135  000428                     l6524:
  5136                           
  5137                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5138  000428  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5139  00042C  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5140  000430  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5141  000434  0E00               	movlw	0
  5142  000436  6E32               	movwf	___ftge@ff2,c
  5143  000438  0E20               	movlw	32
  5144  00043A  6E33               	movwf	___ftge@ff2+1,c
  5145  00043C  0E41               	movlw	65
  5146  00043E  6E34               	movwf	___ftge@ff2+2,c
  5147  000440  EC37  F018         	call	___ftge	;wreg free
  5148  000444  A0D8               	btfss	status,0,c
  5149  000446  D003               	goto	l6528
  5150                           
  5151                           ;doprnt.c: 851: exp++;
  5152  000448  0100               	movlb	0	; () banked
  5153  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  5154  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  5155  00044E                     l6528:
  5156                           
  5157                           ;doprnt.c: 852: }
  5158                           ;doprnt.c: 1112: if(prec <= 12)
  5159  00044E  0100               	movlb	0	; () banked
  5160  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  5161  000452  D008               	goto	l6530
  5162  000454  0100               	movlb	0	; () banked
  5163  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5164  000458  E11D               	bnz	l6532
  5165  00045A  0E0D               	movlw	13
  5166  00045C  0100               	movlb	0	; () banked
  5167  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  5168  000460  B0D8               	btfsc	status,0,c
  5169  000462  D018               	goto	l6532
  5170  000464                     l6530:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;doprnt.c: 1113: fval += fround(prec);
  5174  000464  C0DD  F0A2         	movff	printf@fval,___ftadd@f1
  5175  000468  C0DE  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  5176  00046C  C0DF  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  5177  000470  0100               	movlb	0	; () banked
  5178  000472  51E8               	movf	printf@prec& (0+255),w,b
  5179  000474  EC3F  F00E         	call	_fround
  5180  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  5181  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  5182  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  5183  000484  EC0B  F00D         	call	___ftadd	;wreg free
  5184  000488  C0A2  F0DD         	movff	?___ftadd,printf@fval
  5185  00048C  C0A3  F0DE         	movff	?___ftadd+1,printf@fval+1
  5186  000490  C0A4  F0DF         	movff	?___ftadd+2,printf@fval+2
  5187  000494                     l6532:
  5188                           
  5189                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5190  000494  0100               	movlb	0	; () banked
  5191  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5192  000498  D008               	goto	l6534
  5193  00049A  0100               	movlb	0	; () banked
  5194  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5195  00049E  E12A               	bnz	l6540
  5196  0004A0  0E0A               	movlw	10
  5197  0004A2  0100               	movlb	0	; () banked
  5198  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  5199  0004A6  B0D8               	btfsc	status,0,c
  5200  0004A8  D025               	goto	l6540
  5201  0004AA                     l6534:
  5202                           
  5203                           ; BSR set to: 0
  5204  0004AA  0100               	movlb	0	; () banked
  5205  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  5206  0004AE  0100               	movlb	0	; () banked
  5207  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5208  0004B2  0100               	movlb	0	; () banked
  5209  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5210  0004B6  B4D8               	btfsc	status,2,c
  5211  0004B8  D05F               	goto	l6554
  5212                           
  5213                           ; BSR set to: 0
  5214  0004BA  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5215  0004BE  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5216  0004C2  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5217  0004C6  ECCA  F010         	call	___fttol	;wreg free
  5218  0004CA  0100               	movlb	0	; () banked
  5219  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  5220  0004CE  0100               	movlb	0	; () banked
  5221  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  5222  0004D2  0100               	movlb	0	; () banked
  5223  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  5224  0004D6  0100               	movlb	0	; () banked
  5225  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  5226  0004DA  A4D8               	btfss	status,2,c
  5227  0004DC  D04D               	goto	l6554
  5228                           
  5229                           ; BSR set to: 0
  5230  0004DE  0100               	movlb	0	; () banked
  5231  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5232  0004E2  D04A               	goto	l6554
  5233  0004E4  0100               	movlb	0	; () banked
  5234  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5235  0004E8  E105               	bnz	l6540
  5236  0004EA  0E02               	movlw	2
  5237  0004EC  0100               	movlb	0	; () banked
  5238  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  5239  0004F0  A0D8               	btfss	status,0,c
  5240  0004F2  D042               	goto	l6554
  5241  0004F4                     l6540:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5245  0004F4  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5246  0004F8  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5247  0004FC  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5248  000500  0E70               	movlw	112
  5249  000502  6E32               	movwf	___ftge@ff2,c
  5250  000504  0E89               	movlw	137
  5251  000506  6E33               	movwf	___ftge@ff2+1,c
  5252  000508  0E40               	movlw	64
  5253  00050A  6E34               	movwf	___ftge@ff2+2,c
  5254  00050C  EC37  F018         	call	___ftge	;wreg free
  5255  000510  B0D8               	btfsc	status,0,c
  5256  000512  D003               	goto	l6544
  5257                           
  5258                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5259  000514  0100               	movlb	0	; () banked
  5260  000516  0EF7               	movlw	247
  5261  000518  D002               	goto	L1
  5262  00051A                     l6544:
  5263                           
  5264                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5265  00051A  0100               	movlb	0	; () banked
  5266  00051C  0EF8               	movlw	248
  5267  00051E                     L1:
  5268  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  5269  000520  0EFF               	movlw	255
  5270  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;doprnt.c: 1124: }
  5274                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5275                           
  5276                           ; BSR set to: 0
  5277  000524  0100               	movlb	0	; () banked
  5278  000526  51DB               	movf	printf@exp& (0+255),w,b
  5279  000528  ECA5  F009         	call	_scale
  5280  00052C  C098  F0D7         	movff	?_scale,printf@tmpval
  5281  000530  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5282  000534  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5283                           
  5284                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5285  000538  C0DD  F023         	movff	printf@fval,__tdiv_to_l_@f1
  5286  00053C  C0DE  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5287  000540  C0DF  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5288  000544  C0D7  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  5289  000548  C0D8  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5290  00054C  C0D9  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5291  000550  EC6C  F011         	call	__tdiv_to_l_	;wreg free
  5292  000554  C023  F0E0         	movff	?__tdiv_to_l_,printf@val
  5293  000558  C024  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  5294  00055C  C025  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  5295  000560  C026  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  5296                           
  5297                           ;doprnt.c: 1129: fval = 0.0;
  5298  000564  0E00               	movlw	0
  5299  000566  0100               	movlb	0	; () banked
  5300  000568  6FDD               	movwf	printf@fval& (0+255),b
  5301  00056A  0E00               	movlw	0
  5302  00056C  0100               	movlb	0	; () banked
  5303  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  5304  000570  0E00               	movlw	0
  5305  000572  0100               	movlb	0	; () banked
  5306  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  5307                           
  5308                           ;doprnt.c: 1130: } else {
  5309  000576  D033               	goto	l6558
  5310  000578                     l6554:
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5314  000578  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5315  00057C  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5316  000580  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5317  000584  ECCA  F010         	call	___fttol	;wreg free
  5318  000588  C0AE  F0E0         	movff	?___fttol,printf@val
  5319  00058C  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  5320  000590  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  5321  000594  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  5322                           
  5323                           ;doprnt.c: 1132: fval -= (double)val;
  5324  000598  C0DD  F0AE         	movff	printf@fval,___ftsub@f1
  5325  00059C  C0DE  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  5326  0005A0  C0DF  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  5327  0005A4  C0E0  F02B         	movff	printf@val,___lltoft@c
  5328  0005A8  C0E1  F02C         	movff	printf@val+1,___lltoft@c+1
  5329  0005AC  C0E2  F02D         	movff	printf@val+2,___lltoft@c+2
  5330  0005B0  C0E3  F02E         	movff	printf@val+3,___lltoft@c+3
  5331  0005B4  ECEE  F01A         	call	___lltoft	;wreg free
  5332  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  5333  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  5334  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  5335  0005C4  EC71  F01B         	call	___ftsub	;wreg free
  5336  0005C8  C0AE  F0DD         	movff	?___ftsub,printf@fval
  5337  0005CC  C0AF  F0DE         	movff	?___ftsub+1,printf@fval+1
  5338  0005D0  C0B0  F0DF         	movff	?___ftsub+2,printf@fval+2
  5339                           
  5340                           ;doprnt.c: 1133: exp = 0;
  5341  0005D4  0E00               	movlw	0
  5342  0005D6  0100               	movlb	0	; () banked
  5343  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5344  0005DA  0E00               	movlw	0
  5345  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  5346  0005DE                     l6558:
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;doprnt.c: 1134: }
  5350                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5351  0005DE  0E01               	movlw	1
  5352  0005E0  0100               	movlb	0	; () banked
  5353  0005E2  6FEA               	movwf	printf@c& (0+255),b
  5354  0005E4                     l6560:
  5355                           
  5356                           ; BSR set to: 0
  5357  0005E4  0E0A               	movlw	10
  5358  0005E6  0100               	movlb	0	; () banked
  5359  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  5360  0005EA  B4D8               	btfsc	status,2,c
  5361  0005EC  D01E               	goto	l6572
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;doprnt.c: 1137: if(val < dpowers[c])
  5365                           
  5366                           ; BSR set to: 0
  5367                           
  5368                           ; BSR set to: 0
  5369  0005EE  0100               	movlb	0	; () banked
  5370  0005F0  51EA               	movf	printf@c& (0+255),w,b
  5371  0005F2  0D04               	mullw	4
  5372  0005F4  0E09               	movlw	low _dpowers
  5373  0005F6  24F3               	addwf	prodl,w,c
  5374  0005F8  6EF6               	movwf	tblptrl,c
  5375  0005FA  0EFE               	movlw	high _dpowers
  5376  0005FC  20F4               	addwfc	prodh,w,c
  5377  0005FE  6EF7               	movwf	tblptrh,c
  5378  000600                     	if	0	;There are less than 3 active tblptr bytes
  5379  000600                     	endif
  5380  000600  0009               	tblrd		*+
  5381  000602  50F5               	movf	tablat,w,c
  5382  000604  0100               	movlb	0	; () banked
  5383  000606  5DE0               	subwf	printf@val& (0+255),w,b
  5384  000608  0009               	tblrd		*+
  5385  00060A  50F5               	movf	tablat,w,c
  5386  00060C  0100               	movlb	0	; () banked
  5387  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  5388  000610  0009               	tblrd		*+
  5389  000612  50F5               	movf	tablat,w,c
  5390  000614  0100               	movlb	0	; () banked
  5391  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  5392  000618  0009               	tblrd		*+
  5393  00061A  50F5               	movf	tablat,w,c
  5394  00061C  0100               	movlb	0	; () banked
  5395  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  5396  000620  A0D8               	btfss	status,0,c
  5397  000622  D003               	goto	l6572
  5398                           
  5399                           ; BSR set to: 0
  5400                           
  5401                           ; BSR set to: 0
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;doprnt.c: 1138: break;
  5405  000624  0100               	movlb	0	; () banked
  5406  000626  2BEA               	incf	printf@c& (0+255),f,b
  5407  000628  D7DD               	goto	l6560
  5408  00062A                     l6572:
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;doprnt.c: 1142: width -= prec + c + exp;
  5412  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  5413  00062E  0100               	movlb	0	; () banked
  5414  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  5415  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  5416  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  5417  000636  0100               	movlb	0	; () banked
  5418  000638  51E8               	movf	printf@prec& (0+255),w,b
  5419  00063A  0100               	movlb	0	; () banked
  5420  00063C  27C7               	addwf	??_printf& (0+255),f,b
  5421  00063E  0100               	movlb	0	; () banked
  5422  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5423  000642  0100               	movlb	0	; () banked
  5424  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5425  000646  0100               	movlb	0	; () banked
  5426  000648  51DB               	movf	printf@exp& (0+255),w,b
  5427  00064A  0100               	movlb	0	; () banked
  5428  00064C  27C7               	addwf	??_printf& (0+255),f,b
  5429  00064E  0100               	movlb	0	; () banked
  5430  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5431  000652  0100               	movlb	0	; () banked
  5432  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5433  000656  0100               	movlb	0	; () banked
  5434  000658  51C7               	movf	??_printf& (0+255),w,b
  5435  00065A  0100               	movlb	0	; () banked
  5436  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  5437  00065E  0100               	movlb	0	; () banked
  5438  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  5439  000662  0100               	movlb	0	; () banked
  5440  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  5441                           
  5442                           ;doprnt.c: 1143: if(
  5443                           ;doprnt.c: 1147: prec)
  5444  000666  0100               	movlb	0	; () banked
  5445  000668  51E8               	movf	printf@prec& (0+255),w,b
  5446  00066A  0100               	movlb	0	; () banked
  5447  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5448  00066E  B4D8               	btfsc	status,2,c
  5449  000670  D004               	goto	l6576
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;doprnt.c: 1148: width--;
  5453  000672  0100               	movlb	0	; () banked
  5454  000674  07E4               	decf	printf@width& (0+255),f,b
  5455  000676  A0D8               	btfss	status,0,c
  5456  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  5457  00067A                     l6576:
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;doprnt.c: 1149: if(flag & 0x03)
  5461  00067A  0E03               	movlw	3
  5462  00067C  0100               	movlb	0	; () banked
  5463  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  5464  000680  0100               	movlb	0	; () banked
  5465  000682  6FC7               	movwf	??_printf& (0+255),b
  5466  000684  0E00               	movlw	0
  5467  000686  0100               	movlb	0	; () banked
  5468  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5469  00068A  0100               	movlb	0	; () banked
  5470  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  5471  00068E  0100               	movlb	0	; () banked
  5472  000690  51C7               	movf	??_printf& (0+255),w,b
  5473  000692  0100               	movlb	0	; () banked
  5474  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5475  000696  B4D8               	btfsc	status,2,c
  5476  000698  D004               	goto	l6580
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;doprnt.c: 1150: width--;
  5480  00069A  0100               	movlb	0	; () banked
  5481  00069C  07E4               	decf	printf@width& (0+255),f,b
  5482  00069E  A0D8               	btfss	status,0,c
  5483  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  5484  0006A2                     l6580:
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;doprnt.c: 1153: if(flag & 0x04) {
  5488  0006A2  0100               	movlb	0	; () banked
  5489  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  5490  0006A6  D02D               	goto	l6596
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;doprnt.c: 1157: if(flag & 0x03)
  5494  0006A8  0E03               	movlw	3
  5495  0006AA  0100               	movlb	0	; () banked
  5496  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  5497  0006AE  0100               	movlb	0	; () banked
  5498  0006B0  6FC7               	movwf	??_printf& (0+255),b
  5499  0006B2  0E00               	movlw	0
  5500  0006B4  0100               	movlb	0	; () banked
  5501  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5502  0006B8  0100               	movlb	0	; () banked
  5503  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  5504  0006BC  0100               	movlb	0	; () banked
  5505  0006BE  51C7               	movf	??_printf& (0+255),w,b
  5506  0006C0  0100               	movlb	0	; () banked
  5507  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5508  0006C4  B4D8               	btfsc	status,2,c
  5509  0006C6  D00B               	goto	l6590
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;doprnt.c: 1159: (putch('-') );
  5513  0006C8  0E2D               	movlw	45
  5514  0006CA  ECCD  F01C         	call	_putch
  5515                           
  5516                           ;doprnt.c: 1168: while(width > 0) {
  5517  0006CE  D007               	goto	l6590
  5518  0006D0                     l6586:
  5519                           
  5520                           ;doprnt.c: 1169: (putch('0') );
  5521  0006D0  0E30               	movlw	48
  5522  0006D2  ECCD  F01C         	call	_putch
  5523                           
  5524                           ;doprnt.c: 1170: width--;
  5525  0006D6  0100               	movlb	0	; () banked
  5526  0006D8  07E4               	decf	printf@width& (0+255),f,b
  5527  0006DA  A0D8               	btfss	status,0,c
  5528  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  5529  0006DE                     l6590:
  5530  0006DE  0100               	movlb	0	; () banked
  5531  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  5532  0006E2  D073               	goto	l6608
  5533  0006E4  0100               	movlb	0	; () banked
  5534  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  5535  0006E8  E1F3               	bnz	l6586
  5536  0006EA  0100               	movlb	0	; () banked
  5537  0006EC  05E4               	decf	printf@width& (0+255),w,b
  5538  0006EE  A0D8               	btfss	status,0,c
  5539  0006F0  D06C               	goto	l6608
  5540  0006F2  D7EE               	goto	l6586
  5541  0006F4                     l6592:
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;doprnt.c: 1181: (putch(' ') );
  5545  0006F4  0E20               	movlw	32
  5546  0006F6  ECCD  F01C         	call	_putch
  5547                           
  5548                           ;doprnt.c: 1182: width--;
  5549  0006FA  0100               	movlb	0	; () banked
  5550  0006FC  07E4               	decf	printf@width& (0+255),f,b
  5551  0006FE  A0D8               	btfss	status,0,c
  5552  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  5553  000702                     l6596:
  5554                           
  5555                           ; BSR set to: 0
  5556  000702  0100               	movlb	0	; () banked
  5557  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  5558  000706  D007               	goto	l6598
  5559  000708  0100               	movlb	0	; () banked
  5560  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  5561  00070C  E1F3               	bnz	l6592
  5562  00070E  0100               	movlb	0	; () banked
  5563  000710  05E4               	decf	printf@width& (0+255),w,b
  5564  000712  B0D8               	btfsc	status,0,c
  5565  000714  D7EF               	goto	l6592
  5566  000716                     l6598:
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;doprnt.c: 1183: }
  5570                           ;doprnt.c: 1188: if(flag & 0x03)
  5571  000716  0E03               	movlw	3
  5572  000718  0100               	movlb	0	; () banked
  5573  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  5574  00071C  0100               	movlb	0	; () banked
  5575  00071E  6FC7               	movwf	??_printf& (0+255),b
  5576  000720  0E00               	movlw	0
  5577  000722  0100               	movlb	0	; () banked
  5578  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5579  000726  0100               	movlb	0	; () banked
  5580  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  5581  00072A  0100               	movlb	0	; () banked
  5582  00072C  51C7               	movf	??_printf& (0+255),w,b
  5583  00072E  0100               	movlb	0	; () banked
  5584  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5585  000732  B4D8               	btfsc	status,2,c
  5586  000734  D04A               	goto	l6608
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;doprnt.c: 1190: (putch('-') );
  5590  000736  0E2D               	movlw	45
  5591  000738  ECCD  F01C         	call	_putch
  5592                           
  5593                           ;doprnt.c: 1195: }
  5594                           ;doprnt.c: 1196: while(c--) {
  5595  00073C  D046               	goto	l6608
  5596  00073E                     l6602:
  5597                           
  5598                           ;doprnt.c: 1200: {
  5599                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5600  00073E  C0E0  F023         	movff	printf@val,___lldiv@dividend
  5601  000742  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  5602  000746  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  5603  00074A  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  5604  00074E  0100               	movlb	0	; () banked
  5605  000750  51EA               	movf	printf@c& (0+255),w,b
  5606  000752  0D04               	mullw	4
  5607  000754  0E09               	movlw	low _dpowers
  5608  000756  24F3               	addwf	prodl,w,c
  5609  000758  6EF6               	movwf	tblptrl,c
  5610  00075A  0EFE               	movlw	high _dpowers
  5611  00075C  20F4               	addwfc	prodh,w,c
  5612  00075E  6EF7               	movwf	tblptrh,c
  5613  000760                     	if	0	;There are less than 3 active tblptr bytes
  5614  000760                     	endif
  5615  000760  0009               	tblrd		*+
  5616  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  5617  000766  0009               	tblrd		*+
  5618  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  5619  00076C  0009               	tblrd		*+
  5620  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  5621  000772  000A               	tblrd		*-
  5622  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  5623  000778  EC05  F019         	call	___lldiv	;wreg free
  5624  00077C  C023  F0D7         	movff	?___lldiv,printf@tmpval
  5625  000780  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  5626  000784  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  5627  000788  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  5628                           
  5629                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5630  00078C  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  5631  000790  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  5632  000794  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  5633  000798  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  5634  00079C  0E0A               	movlw	10
  5635  00079E  6E34               	movwf	___llmod@divisor,c
  5636  0007A0  0E00               	movlw	0
  5637  0007A2  6E35               	movwf	___llmod@divisor+1,c
  5638  0007A4  0E00               	movlw	0
  5639  0007A6  6E36               	movwf	___llmod@divisor+2,c
  5640  0007A8  0E00               	movlw	0
  5641  0007AA  6E37               	movwf	___llmod@divisor+3,c
  5642  0007AC  EC28  F01A         	call	___llmod	;wreg free
  5643  0007B0  C030  F0D7         	movff	?___llmod,printf@tmpval
  5644  0007B4  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  5645  0007B8  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  5646  0007BC  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  5647                           
  5648                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5649  0007C0  0100               	movlb	0	; () banked
  5650  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  5651  0007C4  0F30               	addlw	48
  5652  0007C6  ECCD  F01C         	call	_putch
  5653  0007CA                     l6608:
  5654  0007CA  0100               	movlb	0	; () banked
  5655  0007CC  07EA               	decf	printf@c& (0+255),f,b
  5656  0007CE  0100               	movlb	0	; () banked
  5657  0007D0  29EA               	incf	printf@c& (0+255),w,b
  5658  0007D2  B4D8               	btfsc	status,2,c
  5659  0007D4  D008               	goto	l6614
  5660  0007D6  D7B3               	goto	l6602
  5661  0007D8                     l6610:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;doprnt.c: 1208: (putch('0') );
  5665  0007D8  0E30               	movlw	48
  5666  0007DA  ECCD  F01C         	call	_putch
  5667                           
  5668                           ;doprnt.c: 1209: exp--;
  5669  0007DE  0100               	movlb	0	; () banked
  5670  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  5671  0007E2  A0D8               	btfss	status,0,c
  5672  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5673  0007E6                     l6614:
  5674                           
  5675                           ; BSR set to: 0
  5676  0007E6  0100               	movlb	0	; () banked
  5677  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5678  0007EA  D007               	goto	l6616
  5679  0007EC  0100               	movlb	0	; () banked
  5680  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5681  0007F0  E1F3               	bnz	l6610
  5682  0007F2  0100               	movlb	0	; () banked
  5683  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  5684  0007F6  B0D8               	btfsc	status,0,c
  5685  0007F8  D7EF               	goto	l6610
  5686  0007FA                     l6616:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;doprnt.c: 1210: }
  5690                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5691  0007FA  0100               	movlb	0	; () banked
  5692  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  5693  0007FE  D00C               	goto	l799
  5694  000800  0100               	movlb	0	; () banked
  5695  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5696  000804  E105               	bnz	u6730
  5697  000806  0E09               	movlw	9
  5698  000808  0100               	movlb	0	; () banked
  5699  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  5700  00080C  A0D8               	btfss	status,0,c
  5701  00080E  D004               	goto	l799
  5702  000810                     u6730:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5706  000810  0E08               	movlw	8
  5707  000812  0100               	movlb	0	; () banked
  5708  000814  6FEA               	movwf	printf@c& (0+255),b
  5709  000816  D002               	goto	l6620
  5710  000818                     l799:
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;doprnt.c: 1213: else
  5714                           ;doprnt.c: 1214: c = prec;
  5715  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  5716  00081C                     l6620:
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;doprnt.c: 1215: prec -= c;
  5720  00081C  0100               	movlb	0	; () banked
  5721  00081E  51EA               	movf	printf@c& (0+255),w,b
  5722  000820  0100               	movlb	0	; () banked
  5723  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  5724  000824  0E00               	movlw	0
  5725  000826  0100               	movlb	0	; () banked
  5726  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  5727  00082A  0EFF               	movlw	255
  5728  00082C  0100               	movlb	0	; () banked
  5729  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;doprnt.c: 1219: if(c)
  5733  000830  0100               	movlb	0	; () banked
  5734  000832  51EA               	movf	printf@c& (0+255),w,b
  5735  000834  0100               	movlb	0	; () banked
  5736  000836  B4D8               	btfsc	status,2,c
  5737  000838  D003               	goto	l6626
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;doprnt.c: 1221: (putch('.') );
  5741  00083A  0E2E               	movlw	46
  5742  00083C  ECCD  F01C         	call	_putch
  5743  000840                     l6626:
  5744                           
  5745                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5746  000840  0100               	movlb	0	; () banked
  5747  000842  51EA               	movf	printf@c& (0+255),w,b
  5748  000844  ECA5  F009         	call	_scale
  5749  000848  C098  F0CD         	movff	?_scale,_printf$1394
  5750  00084C  C099  F0CE         	movff	?_scale+1,_printf$1394+1
  5751  000850  C09A  F0CF         	movff	?_scale+2,_printf$1394+2
  5752                           
  5753                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5754  000854  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  5755  000858  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5756  00085C  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5757  000860  C0CD  F089         	movff	_printf$1394,___ftmul@f1
  5758  000864  C0CE  F08A         	movff	_printf$1394+1,___ftmul@f1+1
  5759  000868  C0CF  F08B         	movff	_printf$1394+2,___ftmul@f1+2
  5760  00086C  EC6F  F00F         	call	___ftmul	;wreg free
  5761  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  5762  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  5763  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  5764  00087C  ECCA  F010         	call	___fttol	;wreg free
  5765  000880  C0AE  F0E0         	movff	?___fttol,printf@val
  5766  000884  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  5767  000888  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  5768  00088C  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  5769                           
  5770                           ;doprnt.c: 1228: while(c--) {
  5771  000890  D06D               	goto	l6636
  5772  000892                     l6630:
  5773                           
  5774                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5775  000892  C0E0  F023         	movff	printf@val,___lldiv@dividend
  5776  000896  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  5777  00089A  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  5778  00089E  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  5779  0008A2  0100               	movlb	0	; () banked
  5780  0008A4  51EA               	movf	printf@c& (0+255),w,b
  5781  0008A6  0D04               	mullw	4
  5782  0008A8  0E09               	movlw	low _dpowers
  5783  0008AA  24F3               	addwf	prodl,w,c
  5784  0008AC  6EF6               	movwf	tblptrl,c
  5785  0008AE  0EFE               	movlw	high _dpowers
  5786  0008B0  20F4               	addwfc	prodh,w,c
  5787  0008B2  6EF7               	movwf	tblptrh,c
  5788  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  5789  0008B4                     	endif
  5790  0008B4  0009               	tblrd		*+
  5791  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  5792  0008BA  0009               	tblrd		*+
  5793  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  5794  0008C0  0009               	tblrd		*+
  5795  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  5796  0008C6  000A               	tblrd		*-
  5797  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  5798  0008CC  EC05  F019         	call	___lldiv	;wreg free
  5799  0008D0  C023  F0D7         	movff	?___lldiv,printf@tmpval
  5800  0008D4  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  5801  0008D8  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  5802  0008DC  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  5803                           
  5804                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5805  0008E0  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  5806  0008E4  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  5807  0008E8  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  5808  0008EC  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  5809  0008F0  0E0A               	movlw	10
  5810  0008F2  6E34               	movwf	___llmod@divisor,c
  5811  0008F4  0E00               	movlw	0
  5812  0008F6  6E35               	movwf	___llmod@divisor+1,c
  5813  0008F8  0E00               	movlw	0
  5814  0008FA  6E36               	movwf	___llmod@divisor+2,c
  5815  0008FC  0E00               	movlw	0
  5816  0008FE  6E37               	movwf	___llmod@divisor+3,c
  5817  000900  EC28  F01A         	call	___llmod	;wreg free
  5818  000904  C030  F0D7         	movff	?___llmod,printf@tmpval
  5819  000908  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  5820  00090C  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  5821  000910  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  5822                           
  5823                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5824  000914  0100               	movlb	0	; () banked
  5825  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  5826  000918  0F30               	addlw	48
  5827  00091A  ECCD  F01C         	call	_putch
  5828                           
  5829                           ;doprnt.c: 1232: val %= dpowers[c];
  5830  00091E  C0E0  F030         	movff	printf@val,___llmod@dividend
  5831  000922  C0E1  F031         	movff	printf@val+1,___llmod@dividend+1
  5832  000926  C0E2  F032         	movff	printf@val+2,___llmod@dividend+2
  5833  00092A  C0E3  F033         	movff	printf@val+3,___llmod@dividend+3
  5834  00092E  0100               	movlb	0	; () banked
  5835  000930  51EA               	movf	printf@c& (0+255),w,b
  5836  000932  0D04               	mullw	4
  5837  000934  0E09               	movlw	low _dpowers
  5838  000936  24F3               	addwf	prodl,w,c
  5839  000938  6EF6               	movwf	tblptrl,c
  5840  00093A  0EFE               	movlw	high _dpowers
  5841  00093C  20F4               	addwfc	prodh,w,c
  5842  00093E  6EF7               	movwf	tblptrh,c
  5843  000940                     	if	0	;There are less than 3 active tblptr bytes
  5844  000940                     	endif
  5845  000940  0009               	tblrd		*+
  5846  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  5847  000946  0009               	tblrd		*+
  5848  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  5849  00094C  0009               	tblrd		*+
  5850  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  5851  000952  000A               	tblrd		*-
  5852  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  5853  000958  EC28  F01A         	call	___llmod	;wreg free
  5854  00095C  C030  F0E0         	movff	?___llmod,printf@val
  5855  000960  C031  F0E1         	movff	?___llmod+1,printf@val+1
  5856  000964  C032  F0E2         	movff	?___llmod+2,printf@val+2
  5857  000968  C033  F0E3         	movff	?___llmod+3,printf@val+3
  5858  00096C                     l6636:
  5859  00096C  0100               	movlb	0	; () banked
  5860  00096E  07EA               	decf	printf@c& (0+255),f,b
  5861  000970  0100               	movlb	0	; () banked
  5862  000972  29EA               	incf	printf@c& (0+255),w,b
  5863  000974  B4D8               	btfsc	status,2,c
  5864  000976  D008               	goto	l6642
  5865  000978  D78C               	goto	l6630
  5866  00097A                     l6638:
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;doprnt.c: 1236: (putch('0') );
  5870  00097A  0E30               	movlw	48
  5871  00097C  ECCD  F01C         	call	_putch
  5872                           
  5873                           ;doprnt.c: 1237: prec--;
  5874  000980  0100               	movlb	0	; () banked
  5875  000982  07E8               	decf	printf@prec& (0+255),f,b
  5876  000984  A0D8               	btfss	status,0,c
  5877  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  5878  000988                     l6642:
  5879                           
  5880                           ; BSR set to: 0
  5881  000988  0100               	movlb	0	; () banked
  5882  00098A  51E8               	movf	printf@prec& (0+255),w,b
  5883  00098C  0100               	movlb	0	; () banked
  5884  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5885  000990  B4D8               	btfsc	status,2,c
  5886  000992  D22B               	goto	l6770
  5887  000994  D7F2               	goto	l6638
  5888  000996                     l759:
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;doprnt.c: 1246: }
  5892                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5893  000996  0100               	movlb	0	; () banked
  5894  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  5895  00099A  D034               	goto	l808
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;doprnt.c: 1253: {
  5899                           ;doprnt.c: 1255: if(flag & 0x10)
  5900  00099C  0100               	movlb	0	; () banked
  5901  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  5902  0009A0  D00E               	goto	l6650
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5906  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  5907  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5908  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  5909  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  5910  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  5911  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  5912                           
  5913                           ; BSR set to: 0
  5914  0009BA  0E04               	movlw	4
  5915  0009BC  D00F               	goto	L2
  5916  0009BE                     l6650:
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;doprnt.c: 1257: else
  5920                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5921  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  5922  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5923  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  5924  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  5925  0009CE  0100               	movlb	0	; () banked
  5926  0009D0  0E00               	movlw	0
  5927  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  5928  0009D4  0EFF               	movlw	-1
  5929  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  5930  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  5931                           
  5932                           ; BSR set to: 0
  5933  0009DA  0E02               	movlw	2
  5934  0009DC                     L2:
  5935  0009DC  0100               	movlb	0	; () banked
  5936  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  5937  0009E0  0E00               	movlw	0
  5938  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;doprnt.c: 1261: if((long)val < 0) {
  5942                           
  5943                           ; BSR set to: 0
  5944  0009E4  0100               	movlb	0	; () banked
  5945  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  5946  0009E8  D032               	goto	l6668
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;doprnt.c: 1262: flag |= 0x03;
  5950  0009EA  0E03               	movlw	3
  5951  0009EC  0100               	movlb	0	; () banked
  5952  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;doprnt.c: 1263: val = -val;
  5956  0009F0  0100               	movlb	0	; () banked
  5957  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  5958  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  5959  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  5960  0009F8  6DE0               	negf	printf@val& (0+255),b
  5961  0009FA  0E00               	movlw	0
  5962  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  5963  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  5964  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;doprnt.c: 1264: }
  5968                           ;doprnt.c: 1266: }
  5969  000A02  D025               	goto	l6668
  5970  000A04                     l808:
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;doprnt.c: 1268: else
  5974                           ;doprnt.c: 1273: {
  5975                           ;doprnt.c: 1281: if(flag & 0x10)
  5976  000A04  0100               	movlb	0	; () banked
  5977  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  5978  000A08  D00E               	goto	l6664
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5982  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  5983  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5984  000A12  CFDE F0E0          	movff	postinc2,printf@val
  5985  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  5986  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  5987  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  5988                           
  5989                           ; BSR set to: 0
  5990  000A22  0E04               	movlw	4
  5991  000A24  D010               	goto	L3
  5992  000A26                     l6664:
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;doprnt.c: 1283: else
  5996                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5997  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  5998  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5999  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  6000  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  6001  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  6002  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  6003  000A3E  0100               	movlb	0	; () banked
  6004  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  6005  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  6006                           
  6007                           ; BSR set to: 0
  6008  000A44  0E02               	movlw	2
  6009  000A46                     L3:
  6010  000A46  0100               	movlb	0	; () banked
  6011  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  6012  000A4A  0E00               	movlw	0
  6013  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6014  000A4E                     l6668:
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;doprnt.c: 1287: }
  6018                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6019  000A4E  0100               	movlb	0	; () banked
  6020  000A50  51E8               	movf	printf@prec& (0+255),w,b
  6021  000A52  0100               	movlb	0	; () banked
  6022  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6023  000A56  A4D8               	btfss	status,2,c
  6024  000A58  D05A               	goto	l6704
  6025                           
  6026                           ; BSR set to: 0
  6027  000A5A  0100               	movlb	0	; () banked
  6028  000A5C  51E0               	movf	printf@val& (0+255),w,b
  6029  000A5E  0100               	movlb	0	; () banked
  6030  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  6031  000A62  0100               	movlb	0	; () banked
  6032  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  6033  000A66  0100               	movlb	0	; () banked
  6034  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  6035  000A6A  A4D8               	btfss	status,2,c
  6036  000A6C  D050               	goto	l6704
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;doprnt.c: 1291: prec++;
  6040  000A6E  0100               	movlb	0	; () banked
  6041  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  6042  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6046  000A74  D04C               	goto	l6704
  6047  000A76                     l6674:
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6051  000A76  0E01               	movlw	1
  6052  000A78  0100               	movlb	0	; () banked
  6053  000A7A  6FEA               	movwf	printf@c& (0+255),b
  6054  000A7C                     l6676:
  6055                           
  6056                           ; BSR set to: 0
  6057  000A7C  0E0A               	movlw	10
  6058  000A7E  0100               	movlb	0	; () banked
  6059  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  6060  000A82  B4D8               	btfsc	status,2,c
  6061  000A84  D04D               	goto	l6706
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;doprnt.c: 1306: if(val < dpowers[c])
  6065                           
  6066                           ; BSR set to: 0
  6067                           
  6068                           ; BSR set to: 0
  6069  000A86  0100               	movlb	0	; () banked
  6070  000A88  51EA               	movf	printf@c& (0+255),w,b
  6071  000A8A  0D04               	mullw	4
  6072  000A8C  0E09               	movlw	low _dpowers
  6073  000A8E  24F3               	addwf	prodl,w,c
  6074  000A90  6EF6               	movwf	tblptrl,c
  6075  000A92  0EFE               	movlw	high _dpowers
  6076  000A94  20F4               	addwfc	prodh,w,c
  6077  000A96  6EF7               	movwf	tblptrh,c
  6078  000A98                     	if	0	;There are less than 3 active tblptr bytes
  6079  000A98                     	endif
  6080  000A98  0009               	tblrd		*+
  6081  000A9A  50F5               	movf	tablat,w,c
  6082  000A9C  0100               	movlb	0	; () banked
  6083  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  6084  000AA0  0009               	tblrd		*+
  6085  000AA2  50F5               	movf	tablat,w,c
  6086  000AA4  0100               	movlb	0	; () banked
  6087  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6088  000AA8  0009               	tblrd		*+
  6089  000AAA  50F5               	movf	tablat,w,c
  6090  000AAC  0100               	movlb	0	; () banked
  6091  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6092  000AB0  0009               	tblrd		*+
  6093  000AB2  50F5               	movf	tablat,w,c
  6094  000AB4  0100               	movlb	0	; () banked
  6095  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6096  000AB8  A0D8               	btfss	status,0,c
  6097  000ABA  D032               	goto	l6706
  6098                           
  6099                           ; BSR set to: 0
  6100                           
  6101                           ; BSR set to: 0
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;doprnt.c: 1307: break;
  6105  000ABC  0100               	movlb	0	; () banked
  6106  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  6107  000AC0  D7DD               	goto	l6676
  6108  000AC2                     l6688:
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6112  000AC2  0E01               	movlw	1
  6113  000AC4  0100               	movlb	0	; () banked
  6114  000AC6  6FEA               	movwf	printf@c& (0+255),b
  6115  000AC8                     l6690:
  6116                           
  6117                           ; BSR set to: 0
  6118  000AC8  0E08               	movlw	8
  6119  000ACA  0100               	movlb	0	; () banked
  6120  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  6121  000ACE  B4D8               	btfsc	status,2,c
  6122  000AD0  D027               	goto	l6706
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6126                           
  6127                           ; BSR set to: 0
  6128                           
  6129                           ; BSR set to: 0
  6130  000AD2  0100               	movlb	0	; () banked
  6131  000AD4  51EA               	movf	printf@c& (0+255),w,b
  6132  000AD6  0D04               	mullw	4
  6133  000AD8  0E7F               	movlw	low _hexpowers
  6134  000ADA  24F3               	addwf	prodl,w,c
  6135  000ADC  6EF6               	movwf	tblptrl,c
  6136  000ADE  0EFE               	movlw	high _hexpowers
  6137  000AE0  20F4               	addwfc	prodh,w,c
  6138  000AE2  6EF7               	movwf	tblptrh,c
  6139  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  6140  000AE4                     	endif
  6141  000AE4  0009               	tblrd		*+
  6142  000AE6  50F5               	movf	tablat,w,c
  6143  000AE8  0100               	movlb	0	; () banked
  6144  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  6145  000AEC  0009               	tblrd		*+
  6146  000AEE  50F5               	movf	tablat,w,c
  6147  000AF0  0100               	movlb	0	; () banked
  6148  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6149  000AF4  0009               	tblrd		*+
  6150  000AF6  50F5               	movf	tablat,w,c
  6151  000AF8  0100               	movlb	0	; () banked
  6152  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6153  000AFC  0009               	tblrd		*+
  6154  000AFE  50F5               	movf	tablat,w,c
  6155  000B00  0100               	movlb	0	; () banked
  6156  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6157  000B04  A0D8               	btfss	status,0,c
  6158  000B06  D00C               	goto	l6706
  6159                           
  6160                           ; BSR set to: 0
  6161                           
  6162                           ; BSR set to: 0
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;doprnt.c: 1318: break;
  6166  000B08  0100               	movlb	0	; () banked
  6167  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  6168  000B0C  D7DD               	goto	l6690
  6169  000B0E                     l6704:
  6170                           
  6171                           ; BSR set to: 0
  6172  000B0E  0100               	movlb	0	; () banked
  6173  000B10  51E6               	movf	printf@flag& (0+255),w,b
  6174  000B12  0B80               	andlw	128
  6175                           
  6176                           ; Switch size 1, requested type "space"
  6177                           ; Number of cases is 2, Range of values is 0 to 128
  6178                           ; switch strategies available:
  6179                           ; Name         Instructions Cycles
  6180                           ; simple_byte            7     4 (average)
  6181                           ;	Chosen strategy is simple_byte
  6182  000B14  0A00               	xorlw	0	; case 0
  6183  000B16  B4D8               	btfsc	status,2,c
  6184  000B18  D7AE               	goto	l6674
  6185  000B1A  0A80               	xorlw	128	; case 128
  6186  000B1C  B4D8               	btfsc	status,2,c
  6187  000B1E  D7D1               	goto	l6688
  6188  000B20                     l6706:
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;doprnt.c: 1339: if(c < prec)
  6192  000B20  0E80               	movlw	128
  6193  000B22  0100               	movlb	0	; () banked
  6194  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  6195  000B26  0E7F               	movlw	127
  6196  000B28  0100               	movlb	0	; () banked
  6197  000B2A  6FC7               	movwf	??_printf& (0+255),b
  6198  000B2C  0100               	movlb	0	; () banked
  6199  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  6200  000B30  0100               	movlb	0	; () banked
  6201  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  6202  000B34  0100               	movlb	0	; () banked
  6203  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6204  000B38  0A80               	xorlw	128
  6205  000B3A  0100               	movlb	0	; () banked
  6206  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  6207  000B3E  B0D8               	btfsc	status,0,c
  6208  000B40  D003               	goto	l6710
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;doprnt.c: 1340: c = prec;
  6212  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  6213  000B46  D018               	goto	l6714
  6214  000B48                     l6710:
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;doprnt.c: 1341: else if(prec < c)
  6218  000B48  0100               	movlb	0	; () banked
  6219  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6220  000B4C  0A80               	xorlw	128
  6221  000B4E  0100               	movlb	0	; () banked
  6222  000B50  6FC7               	movwf	??_printf& (0+255),b
  6223  000B52  0100               	movlb	0	; () banked
  6224  000B54  51EA               	movf	printf@c& (0+255),w,b
  6225  000B56  0100               	movlb	0	; () banked
  6226  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  6227  000B5A  0E80               	movlw	128
  6228  000B5C  0100               	movlb	0	; () banked
  6229  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  6230  000B60  0E7F               	movlw	127
  6231  000B62  0100               	movlb	0	; () banked
  6232  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  6233  000B66  B0D8               	btfsc	status,0,c
  6234  000B68  D007               	goto	l6714
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;doprnt.c: 1342: prec = c;
  6238  000B6A  0100               	movlb	0	; () banked
  6239  000B6C  51EA               	movf	printf@c& (0+255),w,b
  6240  000B6E  0100               	movlb	0	; () banked
  6241  000B70  6FE8               	movwf	printf@prec& (0+255),b
  6242  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  6243  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  6244  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6245  000B78                     l6714:
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6249  000B78  0100               	movlb	0	; () banked
  6250  000B7A  51E4               	movf	printf@width& (0+255),w,b
  6251  000B7C  0100               	movlb	0	; () banked
  6252  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6253  000B80  B4D8               	btfsc	status,2,c
  6254  000B82  D014               	goto	l6720
  6255                           
  6256                           ; BSR set to: 0
  6257  000B84  0E03               	movlw	3
  6258  000B86  0100               	movlb	0	; () banked
  6259  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  6260  000B8A  0100               	movlb	0	; () banked
  6261  000B8C  6FC7               	movwf	??_printf& (0+255),b
  6262  000B8E  0E00               	movlw	0
  6263  000B90  0100               	movlb	0	; () banked
  6264  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6265  000B94  0100               	movlb	0	; () banked
  6266  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  6267  000B98  0100               	movlb	0	; () banked
  6268  000B9A  51C7               	movf	??_printf& (0+255),w,b
  6269  000B9C  0100               	movlb	0	; () banked
  6270  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6271  000BA0  B4D8               	btfsc	status,2,c
  6272  000BA2  D004               	goto	l6720
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;doprnt.c: 1346: width--;
  6276  000BA4  0100               	movlb	0	; () banked
  6277  000BA6  07E4               	decf	printf@width& (0+255),f,b
  6278  000BA8  A0D8               	btfss	status,0,c
  6279  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  6280  000BAC                     l6720:
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6284  000BAC  0100               	movlb	0	; () banked
  6285  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  6286  000BB0  D01E               	goto	l6728
  6287                           
  6288                           ; BSR set to: 0
  6289                           ;doprnt.c: 1349: if(width > prec)
  6290  000BB2  0100               	movlb	0	; () banked
  6291  000BB4  51E4               	movf	printf@width& (0+255),w,b
  6292  000BB6  0100               	movlb	0	; () banked
  6293  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  6294  000BBA  0100               	movlb	0	; () banked
  6295  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6296  000BBE  0A80               	xorlw	128
  6297  000BC0  0100               	movlb	0	; () banked
  6298  000BC2  6FC7               	movwf	??_printf& (0+255),b
  6299  000BC4  0100               	movlb	0	; () banked
  6300  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  6301  000BC8  0A80               	xorlw	128
  6302  000BCA  0100               	movlb	0	; () banked
  6303  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  6304  000BCE  B0D8               	btfsc	status,0,c
  6305  000BD0  D009               	goto	l6726
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;doprnt.c: 1350: width -= prec;
  6309  000BD2  0100               	movlb	0	; () banked
  6310  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  6311  000BD6  0100               	movlb	0	; () banked
  6312  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  6313  000BDA  0100               	movlb	0	; () banked
  6314  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6315  000BDE  0100               	movlb	0	; () banked
  6316  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6317  000BE2  D005               	goto	l6728
  6318  000BE4                     l6726:
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;doprnt.c: 1351: else
  6322                           ;doprnt.c: 1352: width = 0;
  6323  000BE4  0E00               	movlw	0
  6324  000BE6  0100               	movlb	0	; () banked
  6325  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  6326  000BEA  0E00               	movlw	0
  6327  000BEC  6FE4               	movwf	printf@width& (0+255),b
  6328  000BEE                     l6728:
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;doprnt.c: 1353: }
  6332                           ;doprnt.c: 1381: if(width > c)
  6333  000BEE  0E80               	movlw	128
  6334  000BF0  0100               	movlb	0	; () banked
  6335  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  6336  000BF4  0E7F               	movlw	127
  6337  000BF6  0100               	movlb	0	; () banked
  6338  000BF8  6FC7               	movwf	??_printf& (0+255),b
  6339  000BFA  0100               	movlb	0	; () banked
  6340  000BFC  51E4               	movf	printf@width& (0+255),w,b
  6341  000BFE  0100               	movlb	0	; () banked
  6342  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  6343  000C02  0100               	movlb	0	; () banked
  6344  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  6345  000C06  0A80               	xorlw	128
  6346  000C08  0100               	movlb	0	; () banked
  6347  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  6348  000C0C  B0D8               	btfsc	status,0,c
  6349  000C0E  D00B               	goto	l6732
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;doprnt.c: 1382: width -= c;
  6353  000C10  0100               	movlb	0	; () banked
  6354  000C12  51EA               	movf	printf@c& (0+255),w,b
  6355  000C14  0100               	movlb	0	; () banked
  6356  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  6357  000C18  0E00               	movlw	0
  6358  000C1A  0100               	movlb	0	; () banked
  6359  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  6360  000C1E  0EFF               	movlw	255
  6361  000C20  0100               	movlb	0	; () banked
  6362  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6363  000C24  D005               	goto	l6734
  6364  000C26                     l6732:
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;doprnt.c: 1383: else
  6368                           ;doprnt.c: 1384: width = 0;
  6369  000C26  0E00               	movlw	0
  6370  000C28  0100               	movlb	0	; () banked
  6371  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  6372  000C2C  0E00               	movlw	0
  6373  000C2E  6FE4               	movwf	printf@width& (0+255),b
  6374  000C30                     l6734:
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;doprnt.c: 1387: if(flag & 0x04) {
  6378  000C30  0100               	movlb	0	; () banked
  6379  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  6380  000C34  D021               	goto	l6746
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;doprnt.c: 1392: if(flag & 0x03)
  6384  000C36  0E03               	movlw	3
  6385  000C38  0100               	movlb	0	; () banked
  6386  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  6387  000C3C  0100               	movlb	0	; () banked
  6388  000C3E  6FC7               	movwf	??_printf& (0+255),b
  6389  000C40  0E00               	movlw	0
  6390  000C42  0100               	movlb	0	; () banked
  6391  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6392  000C46  0100               	movlb	0	; () banked
  6393  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  6394  000C4A  0100               	movlb	0	; () banked
  6395  000C4C  51C7               	movf	??_printf& (0+255),w,b
  6396  000C4E  0100               	movlb	0	; () banked
  6397  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6398  000C52  B4D8               	btfsc	status,2,c
  6399  000C54  D003               	goto	l6740
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;doprnt.c: 1393: (putch('-') );
  6403  000C56  0E2D               	movlw	45
  6404  000C58  ECCD  F01C         	call	_putch
  6405  000C5C                     l6740:
  6406                           
  6407                           ;doprnt.c: 1415: if(width)
  6408  000C5C  0100               	movlb	0	; () banked
  6409  000C5E  51E4               	movf	printf@width& (0+255),w,b
  6410  000C60  0100               	movlb	0	; () banked
  6411  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6412  000C64  B4D8               	btfsc	status,2,c
  6413  000C66  D0B6               	goto	l6768
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;doprnt.c: 1417: (putch('0') );
  6417                           
  6418                           ; BSR set to: 0
  6419                           
  6420                           ;doprnt.c: 1416: do
  6421  000C68  0E30               	movlw	48
  6422  000C6A  ECCD  F01C         	call	_putch
  6423                           
  6424                           ;doprnt.c: 1418: while(--width);
  6425  000C6E  0100               	movlb	0	; () banked
  6426  000C70  07E4               	decf	printf@width& (0+255),f,b
  6427  000C72  A0D8               	btfss	status,0,c
  6428  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  6429  000C76  D7F2               	goto	l6740
  6430  000C78                     l6746:
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;doprnt.c: 1422: {
  6434                           ;doprnt.c: 1424: if(width
  6435                           ;doprnt.c: 1428: )
  6436  000C78  0100               	movlb	0	; () banked
  6437  000C7A  51E4               	movf	printf@width& (0+255),w,b
  6438  000C7C  0100               	movlb	0	; () banked
  6439  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6440  000C80  B4D8               	btfsc	status,2,c
  6441  000C82  D00D               	goto	l6752
  6442  000C84                     l6748:
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;doprnt.c: 1430: (putch(' ') );
  6446  000C84  0E20               	movlw	32
  6447  000C86  ECCD  F01C         	call	_putch
  6448                           
  6449                           ;doprnt.c: 1431: while(--width);
  6450  000C8A  0100               	movlb	0	; () banked
  6451  000C8C  07E4               	decf	printf@width& (0+255),f,b
  6452  000C8E  A0D8               	btfss	status,0,c
  6453  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  6454  000C92  0100               	movlb	0	; () banked
  6455  000C94  51E4               	movf	printf@width& (0+255),w,b
  6456  000C96  0100               	movlb	0	; () banked
  6457  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6458  000C9A  A4D8               	btfss	status,2,c
  6459  000C9C  D7F3               	goto	l6748
  6460  000C9E                     l6752:
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;doprnt.c: 1438: if(flag & 0x03)
  6464  000C9E  0E03               	movlw	3
  6465  000CA0  0100               	movlb	0	; () banked
  6466  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  6467  000CA4  0100               	movlb	0	; () banked
  6468  000CA6  6FC7               	movwf	??_printf& (0+255),b
  6469  000CA8  0E00               	movlw	0
  6470  000CAA  0100               	movlb	0	; () banked
  6471  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6472  000CAE  0100               	movlb	0	; () banked
  6473  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  6474  000CB2  0100               	movlb	0	; () banked
  6475  000CB4  51C7               	movf	??_printf& (0+255),w,b
  6476  000CB6  0100               	movlb	0	; () banked
  6477  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6478  000CBA  B4D8               	btfsc	status,2,c
  6479  000CBC  D08B               	goto	l6768
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;doprnt.c: 1439: (putch('-') );
  6483  000CBE  0E2D               	movlw	45
  6484  000CC0  ECCD  F01C         	call	_putch
  6485                           
  6486                           ;doprnt.c: 1469: }
  6487                           ;doprnt.c: 1474: while(prec--) {
  6488  000CC4  D087               	goto	l6768
  6489  000CC6                     l6756:
  6490                           
  6491                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6492  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  6493  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  6494  000CCE  0100               	movlb	0	; () banked
  6495  000CD0  90D8               	bcf	status,0,c
  6496  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  6497  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6498  000CD6  0100               	movlb	0	; () banked
  6499  000CD8  90D8               	bcf	status,0,c
  6500  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  6501  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6502  000CDE  0E09               	movlw	low _dpowers
  6503  000CE0  0100               	movlb	0	; () banked
  6504  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  6505  000CE4  6EF6               	movwf	tblptrl,c
  6506  000CE6  0EFE               	movlw	high _dpowers
  6507  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6508  000CEA  6EF7               	movwf	tblptrh,c
  6509  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  6510  000CEC                     	endif
  6511  000CEC  0009               	tblrd		*+
  6512  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  6513  000CF2  0009               	tblrd		*+
  6514  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6515  000CF8  0009               	tblrd		*+
  6516  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6517  000CFE  000A               	tblrd		*-
  6518  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6519  000D04  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6520  000D08  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6521  000D0C  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6522  000D10  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6523  000D14  EC05  F019         	call	___lldiv	;wreg free
  6524  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  6525  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  6526  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  6527  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  6528  000D28  0E0A               	movlw	10
  6529  000D2A  6E34               	movwf	___llmod@divisor,c
  6530  000D2C  0E00               	movlw	0
  6531  000D2E  6E35               	movwf	___llmod@divisor+1,c
  6532  000D30  0E00               	movlw	0
  6533  000D32  6E36               	movwf	___llmod@divisor+2,c
  6534  000D34  0E00               	movlw	0
  6535  000D36  6E37               	movwf	___llmod@divisor+3,c
  6536  000D38  EC28  F01A         	call	___llmod	;wreg free
  6537  000D3C  5030               	movf	?___llmod,w,c
  6538  000D3E  0F30               	addlw	48
  6539  000D40  0100               	movlb	0	; () banked
  6540  000D42  6FEA               	movwf	printf@c& (0+255),b
  6541                           
  6542                           ;doprnt.c: 1491: break;
  6543  000D44  D043               	goto	l6766
  6544  000D46                     l6758:
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;doprnt.c: 1499: {
  6548                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6549  000D46  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6550  000D4A  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6551  000D4E  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6552  000D52  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6553  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  6554  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  6555  000D5E  0100               	movlb	0	; () banked
  6556  000D60  90D8               	bcf	status,0,c
  6557  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  6558  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6559  000D66  0100               	movlb	0	; () banked
  6560  000D68  90D8               	bcf	status,0,c
  6561  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  6562  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6563  000D6E  0E7F               	movlw	low _hexpowers
  6564  000D70  0100               	movlb	0	; () banked
  6565  000D72  25C7               	addwf	??_printf& (0+255),w,b
  6566  000D74  6EF6               	movwf	tblptrl,c
  6567  000D76  0EFE               	movlw	high _hexpowers
  6568  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6569  000D7A  6EF7               	movwf	tblptrh,c
  6570  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  6571  000D7C                     	endif
  6572  000D7C  0009               	tblrd		*+
  6573  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  6574  000D82  0009               	tblrd		*+
  6575  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6576  000D88  0009               	tblrd		*+
  6577  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6578  000D8E  000A               	tblrd		*-
  6579  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6580  000D94  EC05  F019         	call	___lldiv	;wreg free
  6581  000D98  5023               	movf	?___lldiv,w,c
  6582  000D9A  0B0F               	andlw	15
  6583  000D9C  0100               	movlb	0	; () banked
  6584  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6588  000DA0  0100               	movlb	0	; () banked
  6589  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  6590  000DA4  0D01               	mullw	1
  6591  000DA6  0E26               	movlw	low STR_22
  6592  000DA8  24F3               	addwf	prodl,w,c
  6593  000DAA  6EF6               	movwf	tblptrl,c
  6594  000DAC  0EFF               	movlw	high STR_22
  6595  000DAE  20F4               	addwfc	prodh,w,c
  6596  000DB0  6EF7               	movwf	tblptrh,c
  6597  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  6598  000DB2                     	endif
  6599  000DB2  0008               	tblrd		*
  6600  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;doprnt.c: 1523: }
  6604                           
  6605                           ;doprnt.c: 1508: }
  6606                           ;doprnt.c: 1510: break;
  6607  000DB8  D009               	goto	l6766
  6608  000DBA                     l6764:
  6609  000DBA  0100               	movlb	0	; () banked
  6610  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  6611  000DBE  0B80               	andlw	128
  6612                           
  6613                           ; Switch size 1, requested type "space"
  6614                           ; Number of cases is 2, Range of values is 0 to 128
  6615                           ; switch strategies available:
  6616                           ; Name         Instructions Cycles
  6617                           ; simple_byte            7     4 (average)
  6618                           ;	Chosen strategy is simple_byte
  6619  000DC0  0A00               	xorlw	0	; case 0
  6620  000DC2  B4D8               	btfsc	status,2,c
  6621  000DC4  D780               	goto	l6756
  6622  000DC6  0A80               	xorlw	128	; case 128
  6623  000DC8  B4D8               	btfsc	status,2,c
  6624  000DCA  D7BD               	goto	l6758
  6625  000DCC                     l6766:
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;doprnt.c: 1524: (putch(c) );
  6629  000DCC  0100               	movlb	0	; () banked
  6630  000DCE  51EA               	movf	printf@c& (0+255),w,b
  6631  000DD0  ECCD  F01C         	call	_putch
  6632  000DD4                     l6768:
  6633  000DD4  0100               	movlb	0	; () banked
  6634  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  6635  000DD8  A0D8               	btfss	status,0,c
  6636  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6637  000DDC  0100               	movlb	0	; () banked
  6638  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  6639  000DE0  E1EC               	bnz	l6764
  6640  000DE2  0100               	movlb	0	; () banked
  6641  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  6642  000DE6  A4D8               	btfss	status,2,c
  6643  000DE8  D7E8               	goto	l6764
  6644  000DEA                     l6770:
  6645  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  6646  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6647  000DF2  0100               	movlb	0	; () banked
  6648  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  6649  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6650  000DF8                     	if	0	;tblptru may be non-zero
  6651  000DF8                     	endif
  6652  000DF8                     	if	0	;tblptru may be non-zero
  6653  000DF8                     	endif
  6654  000DF8  0008               	tblrd		*
  6655  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  6656  000DFE  0100               	movlb	0	; () banked
  6657  000E00  51EA               	movf	printf@c& (0+255),w,b
  6658  000E02  B4D8               	btfsc	status,2,c
  6659  000E04  0012               	return	
  6660  000E06  EF11  F000         	goto	l6404
  6661  000E0A                     __end_of_printf:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           postinc0	equ	0xFEE
  6670                           wreg	equ	0xFE8
  6671                           postdec1	equ	0xFE5
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _scale *****************
  6681 ;; Defined at:
  6682 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  scl             1    wreg     char 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  scl             1   30[BANK0 ] char 
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  3   24[BANK0 ] char 
  6689 ;; Registers used:
  6690 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6696 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;Total ram usage:        7 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    5
  6703 ;; This function calls:
  6704 ;;		___awdiv
  6705 ;;		___awmod
  6706 ;;		___ftmul
  6707 ;;		___wmul
  6708 ;; This function is called by:
  6709 ;;		_printf
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           	psect	text13
  6714  00134A                     __ptext13:
  6715                           	opt stack 0
  6716  00134A                     _scale:
  6717                           	opt stack 23
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;incstack = 0
  6721                           ;scale@scl stored from wreg
  6722  00134A  0100               	movlb	0	; () banked
  6723  00134C  6F9E               	movwf	scale@scl& (0+255),b
  6724                           
  6725                           ;doprnt.c: 428: if(scl < 0) {
  6726  00134E  0100               	movlb	0	; () banked
  6727  001350  AF9E               	btfss	scale@scl& (0+255),7,b
  6728  001352  D104               	goto	l6056
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;doprnt.c: 429: scl = -scl;
  6732  001354  0100               	movlb	0	; () banked
  6733  001356  6D9E               	negf	scale@scl& (0+255),b
  6734                           
  6735                           ;doprnt.c: 430: if(scl>=110)
  6736  001358  0100               	movlb	0	; () banked
  6737  00135A  519E               	movf	scale@scl& (0+255),w,b
  6738  00135C  0A80               	xorlw	128
  6739  00135E  0F12               	addlw	-238
  6740  001360  A0D8               	btfss	status,0,c
  6741  001362  D094               	goto	l6046
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6745  001364  0E00               	movlw	0
  6746  001366  6E34               	movwf	___wmul@multiplicand+1,c
  6747  001368  0E03               	movlw	3
  6748  00136A  6E33               	movwf	___wmul@multiplicand,c
  6749  00136C  0E00               	movlw	0
  6750  00136E  6E2C               	movwf	___awdiv@divisor+1,c
  6751  001370  0E0A               	movlw	10
  6752  001372  6E2B               	movwf	___awdiv@divisor,c
  6753  001374  0E00               	movlw	0
  6754  001376  6E26               	movwf	___awmod@divisor+1,c
  6755  001378  0E64               	movlw	100
  6756  00137A  6E25               	movwf	___awmod@divisor,c
  6757  00137C  0100               	movlb	0	; () banked
  6758  00137E  519E               	movf	scale@scl& (0+255),w,b
  6759  001380  6E23               	movwf	___awmod@dividend,c
  6760  001382  6A24               	clrf	___awmod@dividend+1,c
  6761  001384  BE23               	btfsc	___awmod@dividend,7,c
  6762  001386  0624               	decf	___awmod@dividend+1,f,c
  6763  001388  EC82  F019         	call	___awmod	;wreg free
  6764  00138C  C023  F029         	movff	?___awmod,___awdiv@dividend
  6765  001390  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  6766  001394  ECC3  F018         	call	___awdiv	;wreg free
  6767  001398  0E09               	movlw	9
  6768  00139A  2429               	addwf	?___awdiv,w,c
  6769  00139C  6E31               	movwf	___wmul@multiplier,c
  6770  00139E  0E00               	movlw	0
  6771  0013A0  202A               	addwfc	?___awdiv+1,w,c
  6772  0013A2  6E32               	movwf	___wmul@multiplier+1,c
  6773  0013A4  EC96  F01C         	call	___wmul	;wreg free
  6774  0013A8  0E31               	movlw	low __npowers_
  6775  0013AA  2431               	addwf	?___wmul,w,c
  6776  0013AC  6EF6               	movwf	tblptrl,c
  6777  0013AE  0EFE               	movlw	high __npowers_
  6778  0013B0  2032               	addwfc	?___wmul+1,w,c
  6779  0013B2  6EF7               	movwf	tblptrh,c
  6780  0013B4                     	if	0	;There are less than 3 active tblptr bytes
  6781  0013B4                     	endif
  6782  0013B4  0009               	tblrd		*+
  6783  0013B6  CFF5 F08C          	movff	tablat,___ftmul@f2
  6784  0013BA  0009               	tblrd		*+
  6785  0013BC  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6786  0013C0  000A               	tblrd		*-
  6787  0013C2  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6788  0013C6  0E00               	movlw	0
  6789  0013C8  6E2C               	movwf	___awdiv@divisor+1,c
  6790  0013CA  0E64               	movlw	100
  6791  0013CC  6E2B               	movwf	___awdiv@divisor,c
  6792  0013CE  0100               	movlb	0	; () banked
  6793  0013D0  519E               	movf	scale@scl& (0+255),w,b
  6794  0013D2  6E29               	movwf	___awdiv@dividend,c
  6795  0013D4  6A2A               	clrf	___awdiv@dividend+1,c
  6796  0013D6  BE29               	btfsc	___awdiv@dividend,7,c
  6797  0013D8  062A               	decf	___awdiv@dividend+1,f,c
  6798  0013DA  ECC3  F018         	call	___awdiv	;wreg free
  6799  0013DE  0E12               	movlw	18
  6800  0013E0  2429               	addwf	?___awdiv,w,c
  6801  0013E2  6E31               	movwf	___wmul@multiplier,c
  6802  0013E4  0E00               	movlw	0
  6803  0013E6  202A               	addwfc	?___awdiv+1,w,c
  6804  0013E8  6E32               	movwf	___wmul@multiplier+1,c
  6805  0013EA  0E00               	movlw	0
  6806  0013EC  6E34               	movwf	___wmul@multiplicand+1,c
  6807  0013EE  0E03               	movlw	3
  6808  0013F0  6E33               	movwf	___wmul@multiplicand,c
  6809  0013F2  EC96  F01C         	call	___wmul	;wreg free
  6810  0013F6  0E31               	movlw	low __npowers_
  6811  0013F8  2431               	addwf	?___wmul,w,c
  6812  0013FA  6EF6               	movwf	tblptrl,c
  6813  0013FC  0EFE               	movlw	high __npowers_
  6814  0013FE  2032               	addwfc	?___wmul+1,w,c
  6815  001400  6EF7               	movwf	tblptrh,c
  6816  001402                     	if	0	;There are less than 3 active tblptr bytes
  6817  001402                     	endif
  6818  001402  0009               	tblrd		*+
  6819  001404  CFF5 F089          	movff	tablat,___ftmul@f1
  6820  001408  0009               	tblrd		*+
  6821  00140A  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  6822  00140E  000A               	tblrd		*-
  6823  001410  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  6824  001414  EC6F  F00F         	call	___ftmul	;wreg free
  6825  001418  C089  F09B         	movff	?___ftmul,_scale$1393
  6826  00141C  C08A  F09C         	movff	?___ftmul+1,_scale$1393+1
  6827  001420  C08B  F09D         	movff	?___ftmul+2,_scale$1393+2
  6828                           
  6829                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6830  001424  C09B  F089         	movff	_scale$1393,___ftmul@f1
  6831  001428  C09C  F08A         	movff	_scale$1393+1,___ftmul@f1+1
  6832  00142C  C09D  F08B         	movff	_scale$1393+2,___ftmul@f1+2
  6833  001430  0E00               	movlw	0
  6834  001432  6E34               	movwf	___wmul@multiplicand+1,c
  6835  001434  0E03               	movlw	3
  6836  001436  6E33               	movwf	___wmul@multiplicand,c
  6837  001438  0E00               	movlw	0
  6838  00143A  6E26               	movwf	___awmod@divisor+1,c
  6839  00143C  0E0A               	movlw	10
  6840  00143E  6E25               	movwf	___awmod@divisor,c
  6841  001440  0100               	movlb	0	; () banked
  6842  001442  519E               	movf	scale@scl& (0+255),w,b
  6843  001444  6E23               	movwf	___awmod@dividend,c
  6844  001446  6A24               	clrf	___awmod@dividend+1,c
  6845  001448  BE23               	btfsc	___awmod@dividend,7,c
  6846  00144A  0624               	decf	___awmod@dividend+1,f,c
  6847  00144C  EC82  F019         	call	___awmod	;wreg free
  6848  001450  C023  F031         	movff	?___awmod,___wmul@multiplier
  6849  001454  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  6850  001458  EC96  F01C         	call	___wmul	;wreg free
  6851  00145C  0E31               	movlw	low __npowers_
  6852  00145E  2431               	addwf	?___wmul,w,c
  6853  001460  6EF6               	movwf	tblptrl,c
  6854  001462  0EFE               	movlw	high __npowers_
  6855  001464  2032               	addwfc	?___wmul+1,w,c
  6856  001466  6EF7               	movwf	tblptrh,c
  6857  001468                     	if	0	;There are less than 3 active tblptr bytes
  6858  001468                     	endif
  6859  001468  0009               	tblrd		*+
  6860  00146A  CFF5 F08C          	movff	tablat,___ftmul@f2
  6861  00146E  0009               	tblrd		*+
  6862  001470  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6863  001474  000A               	tblrd		*-
  6864  001476  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6865  00147A  EC6F  F00F         	call	___ftmul	;wreg free
  6866  00147E  C089  F098         	movff	?___ftmul,?_scale
  6867  001482  C08A  F099         	movff	?___ftmul+1,?_scale+1
  6868  001486  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  6869  00148A  0012               	return	
  6870  00148C                     l6046:
  6871                           
  6872                           ;doprnt.c: 432: else if(scl > 10)
  6873  00148C  0100               	movlb	0	; () banked
  6874  00148E  519E               	movf	scale@scl& (0+255),w,b
  6875  001490  0A80               	xorlw	128
  6876  001492  0F75               	addlw	-139
  6877  001494  A0D8               	btfss	status,0,c
  6878  001496  D04F               	goto	l6052
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6882  001498  0E00               	movlw	0
  6883  00149A  6E2C               	movwf	___awdiv@divisor+1,c
  6884  00149C  0E0A               	movlw	10
  6885  00149E  6E2B               	movwf	___awdiv@divisor,c
  6886  0014A0  0100               	movlb	0	; () banked
  6887  0014A2  519E               	movf	scale@scl& (0+255),w,b
  6888  0014A4  6E29               	movwf	___awdiv@dividend,c
  6889  0014A6  6A2A               	clrf	___awdiv@dividend+1,c
  6890  0014A8  BE29               	btfsc	___awdiv@dividend,7,c
  6891  0014AA  062A               	decf	___awdiv@dividend+1,f,c
  6892  0014AC  ECC3  F018         	call	___awdiv	;wreg free
  6893  0014B0  0E09               	movlw	9
  6894  0014B2  2429               	addwf	?___awdiv,w,c
  6895  0014B4  6E31               	movwf	___wmul@multiplier,c
  6896  0014B6  0E00               	movlw	0
  6897  0014B8  202A               	addwfc	?___awdiv+1,w,c
  6898  0014BA  6E32               	movwf	___wmul@multiplier+1,c
  6899  0014BC  0E00               	movlw	0
  6900  0014BE  6E34               	movwf	___wmul@multiplicand+1,c
  6901  0014C0  0E03               	movlw	3
  6902  0014C2  6E33               	movwf	___wmul@multiplicand,c
  6903  0014C4  EC96  F01C         	call	___wmul	;wreg free
  6904  0014C8  0E31               	movlw	low __npowers_
  6905  0014CA  2431               	addwf	?___wmul,w,c
  6906  0014CC  6EF6               	movwf	tblptrl,c
  6907  0014CE  0EFE               	movlw	high __npowers_
  6908  0014D0  2032               	addwfc	?___wmul+1,w,c
  6909  0014D2  6EF7               	movwf	tblptrh,c
  6910  0014D4                     	if	0	;There are less than 3 active tblptr bytes
  6911  0014D4                     	endif
  6912  0014D4  0009               	tblrd		*+
  6913  0014D6  CFF5 F089          	movff	tablat,___ftmul@f1
  6914  0014DA  0009               	tblrd		*+
  6915  0014DC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  6916  0014E0  000A               	tblrd		*-
  6917  0014E2  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  6918  0014E6  0E00               	movlw	0
  6919  0014E8  6E34               	movwf	___wmul@multiplicand+1,c
  6920  0014EA  0E03               	movlw	3
  6921  0014EC  6E33               	movwf	___wmul@multiplicand,c
  6922  0014EE  0E00               	movlw	0
  6923  0014F0  6E26               	movwf	___awmod@divisor+1,c
  6924  0014F2  0E0A               	movlw	10
  6925  0014F4  6E25               	movwf	___awmod@divisor,c
  6926  0014F6  0100               	movlb	0	; () banked
  6927  0014F8  519E               	movf	scale@scl& (0+255),w,b
  6928  0014FA  6E23               	movwf	___awmod@dividend,c
  6929  0014FC  6A24               	clrf	___awmod@dividend+1,c
  6930  0014FE  BE23               	btfsc	___awmod@dividend,7,c
  6931  001500  0624               	decf	___awmod@dividend+1,f,c
  6932  001502  EC82  F019         	call	___awmod	;wreg free
  6933  001506  C023  F031         	movff	?___awmod,___wmul@multiplier
  6934  00150A  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  6935  00150E  EC96  F01C         	call	___wmul	;wreg free
  6936  001512  0E31               	movlw	low __npowers_
  6937  001514  2431               	addwf	?___wmul,w,c
  6938  001516  6EF6               	movwf	tblptrl,c
  6939  001518  0EFE               	movlw	high __npowers_
  6940  00151A  2032               	addwfc	?___wmul+1,w,c
  6941  00151C  6EF7               	movwf	tblptrh,c
  6942  00151E                     	if	0	;There are less than 3 active tblptr bytes
  6943  00151E                     	endif
  6944  00151E  0009               	tblrd		*+
  6945  001520  CFF5 F08C          	movff	tablat,___ftmul@f2
  6946  001524  0009               	tblrd		*+
  6947  001526  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  6948  00152A  000A               	tblrd		*-
  6949  00152C  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  6950  001530  EC6F  F00F         	call	___ftmul	;wreg free
  6951  001534  D7A4               	goto	L4
  6952  001536                     l6052:
  6953                           
  6954                           ;doprnt.c: 434: return _npowers_[scl];
  6955  001536  0100               	movlb	0	; () banked
  6956  001538  519E               	movf	scale@scl& (0+255),w,b
  6957  00153A  0D03               	mullw	3
  6958  00153C  0E31               	movlw	low __npowers_
  6959  00153E  24F3               	addwf	prodl,w,c
  6960  001540  6EF6               	movwf	tblptrl,c
  6961  001542  0EFE               	movlw	high __npowers_
  6962  001544  20F4               	addwfc	prodh,w,c
  6963  001546  6EF7               	movwf	tblptrh,c
  6964  001548                     	if	0	;There are less than 3 active tblptr bytes
  6965  001548                     	endif
  6966  001548  0009               	tblrd		*+
  6967  00154A  CFF5 F098          	movff	tablat,?_scale
  6968  00154E  0009               	tblrd		*+
  6969  001550  CFF5 F099          	movff	tablat,?_scale+1
  6970  001554  000A               	tblrd		*-
  6971  001556  CFF5 F09A          	movff	tablat,?_scale+2
  6972                           
  6973                           ; BSR set to: 0
  6974  00155A  0012               	return	
  6975  00155C                     l6056:
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;doprnt.c: 435: }
  6979                           ;doprnt.c: 436: if(scl>=110)
  6980  00155C  0100               	movlb	0	; () banked
  6981  00155E  519E               	movf	scale@scl& (0+255),w,b
  6982  001560  0A80               	xorlw	128
  6983  001562  0F12               	addlw	-238
  6984  001564  A0D8               	btfss	status,0,c
  6985  001566  D094               	goto	l6064
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6989  001568  0E00               	movlw	0
  6990  00156A  6E34               	movwf	___wmul@multiplicand+1,c
  6991  00156C  0E03               	movlw	3
  6992  00156E  6E33               	movwf	___wmul@multiplicand,c
  6993  001570  0E00               	movlw	0
  6994  001572  6E2C               	movwf	___awdiv@divisor+1,c
  6995  001574  0E0A               	movlw	10
  6996  001576  6E2B               	movwf	___awdiv@divisor,c
  6997  001578  0E00               	movlw	0
  6998  00157A  6E26               	movwf	___awmod@divisor+1,c
  6999  00157C  0E64               	movlw	100
  7000  00157E  6E25               	movwf	___awmod@divisor,c
  7001  001580  0100               	movlb	0	; () banked
  7002  001582  519E               	movf	scale@scl& (0+255),w,b
  7003  001584  6E23               	movwf	___awmod@dividend,c
  7004  001586  6A24               	clrf	___awmod@dividend+1,c
  7005  001588  BE23               	btfsc	___awmod@dividend,7,c
  7006  00158A  0624               	decf	___awmod@dividend+1,f,c
  7007  00158C  EC82  F019         	call	___awmod	;wreg free
  7008  001590  C023  F029         	movff	?___awmod,___awdiv@dividend
  7009  001594  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7010  001598  ECC3  F018         	call	___awdiv	;wreg free
  7011  00159C  0E09               	movlw	9
  7012  00159E  2429               	addwf	?___awdiv,w,c
  7013  0015A0  6E31               	movwf	___wmul@multiplier,c
  7014  0015A2  0E00               	movlw	0
  7015  0015A4  202A               	addwfc	?___awdiv+1,w,c
  7016  0015A6  6E32               	movwf	___wmul@multiplier+1,c
  7017  0015A8  EC96  F01C         	call	___wmul	;wreg free
  7018  0015AC  0E58               	movlw	low __powers_
  7019  0015AE  2431               	addwf	?___wmul,w,c
  7020  0015B0  6EF6               	movwf	tblptrl,c
  7021  0015B2  0EFE               	movlw	high __powers_
  7022  0015B4  2032               	addwfc	?___wmul+1,w,c
  7023  0015B6  6EF7               	movwf	tblptrh,c
  7024  0015B8                     	if	0	;There are less than 3 active tblptr bytes
  7025  0015B8                     	endif
  7026  0015B8  0009               	tblrd		*+
  7027  0015BA  CFF5 F08C          	movff	tablat,___ftmul@f2
  7028  0015BE  0009               	tblrd		*+
  7029  0015C0  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7030  0015C4  000A               	tblrd		*-
  7031  0015C6  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7032  0015CA  0E00               	movlw	0
  7033  0015CC  6E2C               	movwf	___awdiv@divisor+1,c
  7034  0015CE  0E64               	movlw	100
  7035  0015D0  6E2B               	movwf	___awdiv@divisor,c
  7036  0015D2  0100               	movlb	0	; () banked
  7037  0015D4  519E               	movf	scale@scl& (0+255),w,b
  7038  0015D6  6E29               	movwf	___awdiv@dividend,c
  7039  0015D8  6A2A               	clrf	___awdiv@dividend+1,c
  7040  0015DA  BE29               	btfsc	___awdiv@dividend,7,c
  7041  0015DC  062A               	decf	___awdiv@dividend+1,f,c
  7042  0015DE  ECC3  F018         	call	___awdiv	;wreg free
  7043  0015E2  0E12               	movlw	18
  7044  0015E4  2429               	addwf	?___awdiv,w,c
  7045  0015E6  6E31               	movwf	___wmul@multiplier,c
  7046  0015E8  0E00               	movlw	0
  7047  0015EA  202A               	addwfc	?___awdiv+1,w,c
  7048  0015EC  6E32               	movwf	___wmul@multiplier+1,c
  7049  0015EE  0E00               	movlw	0
  7050  0015F0  6E34               	movwf	___wmul@multiplicand+1,c
  7051  0015F2  0E03               	movlw	3
  7052  0015F4  6E33               	movwf	___wmul@multiplicand,c
  7053  0015F6  EC96  F01C         	call	___wmul	;wreg free
  7054  0015FA  0E58               	movlw	low __powers_
  7055  0015FC  2431               	addwf	?___wmul,w,c
  7056  0015FE  6EF6               	movwf	tblptrl,c
  7057  001600  0EFE               	movlw	high __powers_
  7058  001602  2032               	addwfc	?___wmul+1,w,c
  7059  001604  6EF7               	movwf	tblptrh,c
  7060  001606                     	if	0	;There are less than 3 active tblptr bytes
  7061  001606                     	endif
  7062  001606  0009               	tblrd		*+
  7063  001608  CFF5 F089          	movff	tablat,___ftmul@f1
  7064  00160C  0009               	tblrd		*+
  7065  00160E  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7066  001612  000A               	tblrd		*-
  7067  001614  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7068  001618  EC6F  F00F         	call	___ftmul	;wreg free
  7069  00161C  C089  F09B         	movff	?___ftmul,_scale$1393
  7070  001620  C08A  F09C         	movff	?___ftmul+1,_scale$1393+1
  7071  001624  C08B  F09D         	movff	?___ftmul+2,_scale$1393+2
  7072                           
  7073                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7074  001628  C09B  F089         	movff	_scale$1393,___ftmul@f1
  7075  00162C  C09C  F08A         	movff	_scale$1393+1,___ftmul@f1+1
  7076  001630  C09D  F08B         	movff	_scale$1393+2,___ftmul@f1+2
  7077  001634  0E00               	movlw	0
  7078  001636  6E34               	movwf	___wmul@multiplicand+1,c
  7079  001638  0E03               	movlw	3
  7080  00163A  6E33               	movwf	___wmul@multiplicand,c
  7081  00163C  0E00               	movlw	0
  7082  00163E  6E26               	movwf	___awmod@divisor+1,c
  7083  001640  0E0A               	movlw	10
  7084  001642  6E25               	movwf	___awmod@divisor,c
  7085  001644  0100               	movlb	0	; () banked
  7086  001646  519E               	movf	scale@scl& (0+255),w,b
  7087  001648  6E23               	movwf	___awmod@dividend,c
  7088  00164A  6A24               	clrf	___awmod@dividend+1,c
  7089  00164C  BE23               	btfsc	___awmod@dividend,7,c
  7090  00164E  0624               	decf	___awmod@dividend+1,f,c
  7091  001650  EC82  F019         	call	___awmod	;wreg free
  7092  001654  C023  F031         	movff	?___awmod,___wmul@multiplier
  7093  001658  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7094  00165C  EC96  F01C         	call	___wmul	;wreg free
  7095  001660  0E58               	movlw	low __powers_
  7096  001662  2431               	addwf	?___wmul,w,c
  7097  001664  6EF6               	movwf	tblptrl,c
  7098  001666  0EFE               	movlw	high __powers_
  7099  001668  2032               	addwfc	?___wmul+1,w,c
  7100  00166A  6EF7               	movwf	tblptrh,c
  7101  00166C                     	if	0	;There are less than 3 active tblptr bytes
  7102  00166C                     	endif
  7103  00166C  0009               	tblrd		*+
  7104  00166E  CFF5 F08C          	movff	tablat,___ftmul@f2
  7105  001672  0009               	tblrd		*+
  7106  001674  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7107  001678  000A               	tblrd		*-
  7108  00167A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7109  00167E  EC6F  F00F         	call	___ftmul	;wreg free
  7110  001682  C089  F098         	movff	?___ftmul,?_scale
  7111  001686  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7112  00168A  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7113  00168E  0012               	return	
  7114  001690                     l6064:
  7115                           
  7116                           ;doprnt.c: 438: else if(scl > 10)
  7117  001690  0100               	movlb	0	; () banked
  7118  001692  519E               	movf	scale@scl& (0+255),w,b
  7119  001694  0A80               	xorlw	128
  7120  001696  0F75               	addlw	-139
  7121  001698  A0D8               	btfss	status,0,c
  7122  00169A  D04F               	goto	l6070
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7126  00169C  0E00               	movlw	0
  7127  00169E  6E2C               	movwf	___awdiv@divisor+1,c
  7128  0016A0  0E0A               	movlw	10
  7129  0016A2  6E2B               	movwf	___awdiv@divisor,c
  7130  0016A4  0100               	movlb	0	; () banked
  7131  0016A6  519E               	movf	scale@scl& (0+255),w,b
  7132  0016A8  6E29               	movwf	___awdiv@dividend,c
  7133  0016AA  6A2A               	clrf	___awdiv@dividend+1,c
  7134  0016AC  BE29               	btfsc	___awdiv@dividend,7,c
  7135  0016AE  062A               	decf	___awdiv@dividend+1,f,c
  7136  0016B0  ECC3  F018         	call	___awdiv	;wreg free
  7137  0016B4  0E09               	movlw	9
  7138  0016B6  2429               	addwf	?___awdiv,w,c
  7139  0016B8  6E31               	movwf	___wmul@multiplier,c
  7140  0016BA  0E00               	movlw	0
  7141  0016BC  202A               	addwfc	?___awdiv+1,w,c
  7142  0016BE  6E32               	movwf	___wmul@multiplier+1,c
  7143  0016C0  0E00               	movlw	0
  7144  0016C2  6E34               	movwf	___wmul@multiplicand+1,c
  7145  0016C4  0E03               	movlw	3
  7146  0016C6  6E33               	movwf	___wmul@multiplicand,c
  7147  0016C8  EC96  F01C         	call	___wmul	;wreg free
  7148  0016CC  0E58               	movlw	low __powers_
  7149  0016CE  2431               	addwf	?___wmul,w,c
  7150  0016D0  6EF6               	movwf	tblptrl,c
  7151  0016D2  0EFE               	movlw	high __powers_
  7152  0016D4  2032               	addwfc	?___wmul+1,w,c
  7153  0016D6  6EF7               	movwf	tblptrh,c
  7154  0016D8                     	if	0	;There are less than 3 active tblptr bytes
  7155  0016D8                     	endif
  7156  0016D8  0009               	tblrd		*+
  7157  0016DA  CFF5 F089          	movff	tablat,___ftmul@f1
  7158  0016DE  0009               	tblrd		*+
  7159  0016E0  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7160  0016E4  000A               	tblrd		*-
  7161  0016E6  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7162  0016EA  0E00               	movlw	0
  7163  0016EC  6E34               	movwf	___wmul@multiplicand+1,c
  7164  0016EE  0E03               	movlw	3
  7165  0016F0  6E33               	movwf	___wmul@multiplicand,c
  7166  0016F2  0E00               	movlw	0
  7167  0016F4  6E26               	movwf	___awmod@divisor+1,c
  7168  0016F6  0E0A               	movlw	10
  7169  0016F8  6E25               	movwf	___awmod@divisor,c
  7170  0016FA  0100               	movlb	0	; () banked
  7171  0016FC  519E               	movf	scale@scl& (0+255),w,b
  7172  0016FE  6E23               	movwf	___awmod@dividend,c
  7173  001700  6A24               	clrf	___awmod@dividend+1,c
  7174  001702  BE23               	btfsc	___awmod@dividend,7,c
  7175  001704  0624               	decf	___awmod@dividend+1,f,c
  7176  001706  EC82  F019         	call	___awmod	;wreg free
  7177  00170A  C023  F031         	movff	?___awmod,___wmul@multiplier
  7178  00170E  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7179  001712  EC96  F01C         	call	___wmul	;wreg free
  7180  001716  0E58               	movlw	low __powers_
  7181  001718  2431               	addwf	?___wmul,w,c
  7182  00171A  6EF6               	movwf	tblptrl,c
  7183  00171C  0EFE               	movlw	high __powers_
  7184  00171E  2032               	addwfc	?___wmul+1,w,c
  7185  001720  6EF7               	movwf	tblptrh,c
  7186  001722                     	if	0	;There are less than 3 active tblptr bytes
  7187  001722                     	endif
  7188  001722  0009               	tblrd		*+
  7189  001724  CFF5 F08C          	movff	tablat,___ftmul@f2
  7190  001728  0009               	tblrd		*+
  7191  00172A  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7192  00172E  000A               	tblrd		*-
  7193  001730  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7194  001734  EC6F  F00F         	call	___ftmul	;wreg free
  7195  001738  D7A4               	goto	L5
  7196  00173A                     l6070:
  7197                           
  7198                           ;doprnt.c: 440: return _powers_[scl];
  7199  00173A  0100               	movlb	0	; () banked
  7200  00173C  519E               	movf	scale@scl& (0+255),w,b
  7201  00173E  0D03               	mullw	3
  7202  001740  0E58               	movlw	low __powers_
  7203  001742  24F3               	addwf	prodl,w,c
  7204  001744  6EF6               	movwf	tblptrl,c
  7205  001746  0EFE               	movlw	high __powers_
  7206  001748  20F4               	addwfc	prodh,w,c
  7207  00174A  6EF7               	movwf	tblptrh,c
  7208  00174C                     	if	0	;There are less than 3 active tblptr bytes
  7209  00174C                     	endif
  7210  00174C  0009               	tblrd		*+
  7211  00174E  CFF5 F098          	movff	tablat,?_scale
  7212  001752  0009               	tblrd		*+
  7213  001754  CFF5 F099          	movff	tablat,?_scale+1
  7214  001758  000A               	tblrd		*-
  7215  00175A  CFF5 F09A          	movff	tablat,?_scale+2
  7216  00175E  0012               	return	
  7217  001760                     __end_of_scale:
  7218                           	opt stack 0
  7219                           tblptru	equ	0xFF8
  7220                           tblptrh	equ	0xFF7
  7221                           tblptrl	equ	0xFF6
  7222                           tablat	equ	0xFF5
  7223                           prodh	equ	0xFF4
  7224                           prodl	equ	0xFF3
  7225                           postinc0	equ	0xFEE
  7226                           wreg	equ	0xFE8
  7227                           postdec1	equ	0xFE5
  7228                           fsr1l	equ	0xFE1
  7229                           indf2	equ	0xFDF
  7230                           postinc2	equ	0xFDE
  7231                           postdec2	equ	0xFDD
  7232                           fsr2h	equ	0xFDA
  7233                           fsr2l	equ	0xFD9
  7234                           status	equ	0xFD8
  7235                           
  7236 ;; *************** function _putch *****************
  7237 ;; Defined at:
  7238 ;;		line 35 in file "lcd.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;  data            1    wreg     unsigned char 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  data            1   38[COMRAM] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  1    wreg      void 
  7245 ;; Registers used:
  7246 ;;		wreg, status,2, status,0, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;Total ram usage:        1 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    6
  7259 ;; This function calls:
  7260 ;;		_lcdNewline
  7261 ;;		_lcdNibble
  7262 ;; This function is called by:
  7263 ;;		_printf
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text14
  7268  00399A                     __ptext14:
  7269                           	opt stack 0
  7270  00399A                     _putch:
  7271                           	opt stack 22
  7272                           
  7273                           ;incstack = 0
  7274                           ;putch@data stored from wreg
  7275  00399A  6E27               	movwf	putch@data,c
  7276                           
  7277                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7278  00399C  0E0A               	movlw	10
  7279  00399E  1827               	xorwf	putch@data,w,c
  7280  0039A0  A4D8               	btfss	status,2,c
  7281  0039A2  D003               	goto	l215
  7282  0039A4  EC32  F01D         	call	_lcdNewline	;wreg free
  7283  0039A8  0012               	return	
  7284  0039AA                     l215:
  7285                           
  7286                           ;lcd.c: 37: else
  7287                           ;lcd.c: 38: {
  7288                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7289  0039AA  848C               	bsf	3980,2,c	;volatile
  7290                           
  7291                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7292  0039AC  0E74               	movlw	116
  7293  0039AE                     u7817:
  7294  0039AE  2EE8               	decfsz	wreg,f,c
  7295  0039B0  D7FE               	bra	u7817
  7296  0039B2  D000               	nop2	
  7297                           
  7298                           ;lcd.c: 41: lcdNibble(data);
  7299  0039B4  5027               	movf	putch@data,w,c
  7300  0039B6  EC5B  F01A         	call	_lcdNibble
  7301  0039BA  0012               	return	
  7302  0039BC                     __end_of_putch:
  7303                           	opt stack 0
  7304                           tblptru	equ	0xFF8
  7305                           tblptrh	equ	0xFF7
  7306                           tblptrl	equ	0xFF6
  7307                           tablat	equ	0xFF5
  7308                           prodh	equ	0xFF4
  7309                           prodl	equ	0xFF3
  7310                           postinc0	equ	0xFEE
  7311                           wreg	equ	0xFE8
  7312                           postdec1	equ	0xFE5
  7313                           fsr1l	equ	0xFE1
  7314                           indf2	equ	0xFDF
  7315                           postinc2	equ	0xFDE
  7316                           postdec2	equ	0xFDD
  7317                           fsr2h	equ	0xFDA
  7318                           fsr2l	equ	0xFD9
  7319                           status	equ	0xFD8
  7320                           
  7321 ;; *************** function _lcdNewline *****************
  7322 ;; Defined at:
  7323 ;;		line 78 in file "lcd.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;		None
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;		None
  7328 ;; Return value:  Size  Location     Type
  7329 ;;                  1    wreg      void 
  7330 ;; Registers used:
  7331 ;;		wreg, status,2, status,0, cstack
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;Total ram usage:        0 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:    5
  7344 ;; This function calls:
  7345 ;;		_lcdInst
  7346 ;; This function is called by:
  7347 ;;		_putch
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           	psect	text15
  7352  003A64                     __ptext15:
  7353                           	opt stack 0
  7354  003A64                     _lcdNewline:
  7355                           	opt stack 22
  7356                           
  7357                           ;lcd.c: 79: lcdInst(0b11000000);
  7358                           
  7359                           ;incstack = 0
  7360  003A64  0EC0               	movlw	192
  7361  003A66  ECDE  F01C         	call	_lcdInst
  7362  003A6A  0012               	return		;funcret
  7363  003A6C                     __end_of_lcdNewline:
  7364                           	opt stack 0
  7365                           tblptru	equ	0xFF8
  7366                           tblptrh	equ	0xFF7
  7367                           tblptrl	equ	0xFF6
  7368                           tablat	equ	0xFF5
  7369                           prodh	equ	0xFF4
  7370                           prodl	equ	0xFF3
  7371                           postinc0	equ	0xFEE
  7372                           wreg	equ	0xFE8
  7373                           postdec1	equ	0xFE5
  7374                           fsr1l	equ	0xFE1
  7375                           indf2	equ	0xFDF
  7376                           postinc2	equ	0xFDE
  7377                           postdec2	equ	0xFDD
  7378                           fsr2h	equ	0xFDA
  7379                           fsr2l	equ	0xFD9
  7380                           status	equ	0xFD8
  7381                           
  7382 ;; *************** function _isdigit *****************
  7383 ;; Defined at:
  7384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  c               1    wreg     unsigned char 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  c               1   36[COMRAM] unsigned char 
  7389 ;; Return value:  Size  Location     Type
  7390 ;;		None               void
  7391 ;; Registers used:
  7392 ;;		wreg, status,2, status,0
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;Total ram usage:        3 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    3
  7405 ;; This function calls:
  7406 ;;		Nothing
  7407 ;; This function is called by:
  7408 ;;		_printf
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text16
  7413  0039FE                     __ptext16:
  7414                           	opt stack 0
  7415  0039FE                     _isdigit:
  7416                           	opt stack 25
  7417                           
  7418                           ;incstack = 0
  7419                           ;isdigit@c stored from wreg
  7420  0039FE  6E25               	movwf	isdigit@c,c
  7421  003A00  0E00               	movlw	0
  7422  003A02  6E24               	movwf	_isdigit$1019,c
  7423  003A04  0E3A               	movlw	58
  7424  003A06  6025               	cpfslt	isdigit@c,c
  7425  003A08  D005               	goto	l6082
  7426  003A0A  0E2F               	movlw	47
  7427  003A0C  6425               	cpfsgt	isdigit@c,c
  7428  003A0E  D002               	goto	l6082
  7429  003A10  0E01               	movlw	1
  7430  003A12  6E24               	movwf	_isdigit$1019,c
  7431  003A14                     l6082:
  7432  003A14  C024  F023         	movff	_isdigit$1019,??_isdigit
  7433  003A18  3023               	rrcf	??_isdigit,w,c
  7434  003A1A  0012               	return	
  7435  003A1C                     __end_of_isdigit:
  7436                           	opt stack 0
  7437                           tblptru	equ	0xFF8
  7438                           tblptrh	equ	0xFF7
  7439                           tblptrl	equ	0xFF6
  7440                           tablat	equ	0xFF5
  7441                           prodh	equ	0xFF4
  7442                           prodl	equ	0xFF3
  7443                           postinc0	equ	0xFEE
  7444                           wreg	equ	0xFE8
  7445                           postdec1	equ	0xFE5
  7446                           fsr1l	equ	0xFE1
  7447                           indf2	equ	0xFDF
  7448                           postinc2	equ	0xFDE
  7449                           postdec2	equ	0xFDD
  7450                           fsr2h	equ	0xFDA
  7451                           fsr2l	equ	0xFD9
  7452                           status	equ	0xFD8
  7453                           
  7454 ;; *************** function _fround *****************
  7455 ;; Defined at:
  7456 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  prec            1    wreg     unsigned char 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  prec            1   33[BANK0 ] unsigned char 
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  3   24[BANK0 ] unsigned char 
  7463 ;; Registers used:
  7464 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7470 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;Total ram usage:       10 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; Hardware stack levels required when called:    5
  7477 ;; This function calls:
  7478 ;;		___awdiv
  7479 ;;		___awmod
  7480 ;;		___ftmul
  7481 ;;		___wmul
  7482 ;; This function is called by:
  7483 ;;		_printf
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text17
  7488  001C7E                     __ptext17:
  7489                           	opt stack 0
  7490  001C7E                     _fround:
  7491                           	opt stack 23
  7492                           
  7493                           ;incstack = 0
  7494                           ;fround@prec stored from wreg
  7495  001C7E  0100               	movlb	0	; () banked
  7496  001C80  6FA1               	movwf	fround@prec& (0+255),b
  7497                           
  7498                           ;doprnt.c: 413: if(prec>=110)
  7499  001C82  0E6D               	movlw	109
  7500  001C84  0100               	movlb	0	; () banked
  7501  001C86  65A1               	cpfsgt	fround@prec& (0+255),b
  7502  001C88  D0A2               	goto	l6024
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7506  001C8A  0E00               	movlw	0
  7507  001C8C  6E34               	movwf	___wmul@multiplicand+1,c
  7508  001C8E  0E03               	movlw	3
  7509  001C90  6E33               	movwf	___wmul@multiplicand,c
  7510  001C92  0E00               	movlw	0
  7511  001C94  6E2C               	movwf	___awdiv@divisor+1,c
  7512  001C96  0E0A               	movlw	10
  7513  001C98  6E2B               	movwf	___awdiv@divisor,c
  7514  001C9A  0E00               	movlw	0
  7515  001C9C  6E26               	movwf	___awmod@divisor+1,c
  7516  001C9E  0E64               	movlw	100
  7517  001CA0  6E25               	movwf	___awmod@divisor,c
  7518  001CA2  C0A1  F023         	movff	fround@prec,___awmod@dividend
  7519  001CA6  6A24               	clrf	___awmod@dividend+1,c
  7520  001CA8  EC82  F019         	call	___awmod	;wreg free
  7521  001CAC  C023  F029         	movff	?___awmod,___awdiv@dividend
  7522  001CB0  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7523  001CB4  ECC3  F018         	call	___awdiv	;wreg free
  7524  001CB8  0E09               	movlw	9
  7525  001CBA  2429               	addwf	?___awdiv,w,c
  7526  001CBC  6E31               	movwf	___wmul@multiplier,c
  7527  001CBE  0E00               	movlw	0
  7528  001CC0  202A               	addwfc	?___awdiv+1,w,c
  7529  001CC2  6E32               	movwf	___wmul@multiplier+1,c
  7530  001CC4  EC96  F01C         	call	___wmul	;wreg free
  7531  001CC8  0E31               	movlw	low __npowers_
  7532  001CCA  2431               	addwf	?___wmul,w,c
  7533  001CCC  6EF6               	movwf	tblptrl,c
  7534  001CCE  0EFE               	movlw	high __npowers_
  7535  001CD0  2032               	addwfc	?___wmul+1,w,c
  7536  001CD2  6EF7               	movwf	tblptrh,c
  7537  001CD4                     	if	0	;There are less than 3 active tblptr bytes
  7538  001CD4                     	endif
  7539  001CD4  0009               	tblrd		*+
  7540  001CD6  CFF5 F08C          	movff	tablat,___ftmul@f2
  7541  001CDA  0009               	tblrd		*+
  7542  001CDC  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7543  001CE0  000A               	tblrd		*-
  7544  001CE2  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7545  001CE6  0E00               	movlw	0
  7546  001CE8  6E2C               	movwf	___awdiv@divisor+1,c
  7547  001CEA  0E64               	movlw	100
  7548  001CEC  6E2B               	movwf	___awdiv@divisor,c
  7549  001CEE  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  7550  001CF2  6A2A               	clrf	___awdiv@dividend+1,c
  7551  001CF4  ECC3  F018         	call	___awdiv	;wreg free
  7552  001CF8  0E12               	movlw	18
  7553  001CFA  2429               	addwf	?___awdiv,w,c
  7554  001CFC  6E31               	movwf	___wmul@multiplier,c
  7555  001CFE  0E00               	movlw	0
  7556  001D00  202A               	addwfc	?___awdiv+1,w,c
  7557  001D02  6E32               	movwf	___wmul@multiplier+1,c
  7558  001D04  0E00               	movlw	0
  7559  001D06  6E34               	movwf	___wmul@multiplicand+1,c
  7560  001D08  0E03               	movlw	3
  7561  001D0A  6E33               	movwf	___wmul@multiplicand,c
  7562  001D0C  EC96  F01C         	call	___wmul	;wreg free
  7563  001D10  0E31               	movlw	low __npowers_
  7564  001D12  2431               	addwf	?___wmul,w,c
  7565  001D14  6EF6               	movwf	tblptrl,c
  7566  001D16  0EFE               	movlw	high __npowers_
  7567  001D18  2032               	addwfc	?___wmul+1,w,c
  7568  001D1A  6EF7               	movwf	tblptrh,c
  7569  001D1C                     	if	0	;There are less than 3 active tblptr bytes
  7570  001D1C                     	endif
  7571  001D1C  0009               	tblrd		*+
  7572  001D1E  CFF5 F089          	movff	tablat,___ftmul@f1
  7573  001D22  0009               	tblrd		*+
  7574  001D24  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7575  001D28  000A               	tblrd		*-
  7576  001D2A  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7577  001D2E  EC6F  F00F         	call	___ftmul	;wreg free
  7578  001D32  C089  F09E         	movff	?___ftmul,_fround$1391
  7579  001D36  C08A  F09F         	movff	?___ftmul+1,_fround$1391+1
  7580  001D3A  C08B  F0A0         	movff	?___ftmul+2,_fround$1391+2
  7581                           
  7582                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7583  001D3E  0E00               	movlw	0
  7584  001D40  6E34               	movwf	___wmul@multiplicand+1,c
  7585  001D42  0E03               	movlw	3
  7586  001D44  6E33               	movwf	___wmul@multiplicand,c
  7587  001D46  0E00               	movlw	0
  7588  001D48  6E26               	movwf	___awmod@divisor+1,c
  7589  001D4A  0E0A               	movlw	10
  7590  001D4C  6E25               	movwf	___awmod@divisor,c
  7591  001D4E  C0A1  F023         	movff	fround@prec,___awmod@dividend
  7592  001D52  6A24               	clrf	___awmod@dividend+1,c
  7593  001D54  EC82  F019         	call	___awmod	;wreg free
  7594  001D58  C023  F031         	movff	?___awmod,___wmul@multiplier
  7595  001D5C  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7596  001D60  EC96  F01C         	call	___wmul	;wreg free
  7597  001D64  0E31               	movlw	low __npowers_
  7598  001D66  2431               	addwf	?___wmul,w,c
  7599  001D68  6EF6               	movwf	tblptrl,c
  7600  001D6A  0EFE               	movlw	high __npowers_
  7601  001D6C  2032               	addwfc	?___wmul+1,w,c
  7602  001D6E  6EF7               	movwf	tblptrh,c
  7603  001D70                     	if	0	;There are less than 3 active tblptr bytes
  7604  001D70                     	endif
  7605  001D70  0009               	tblrd		*+
  7606  001D72  CFF5 F08C          	movff	tablat,___ftmul@f2
  7607  001D76  0009               	tblrd		*+
  7608  001D78  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7609  001D7C  000A               	tblrd		*-
  7610  001D7E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7611  001D82  C09E  F089         	movff	_fround$1391,___ftmul@f1
  7612  001D86  C09F  F08A         	movff	_fround$1391+1,___ftmul@f1+1
  7613  001D8A  C0A0  F08B         	movff	_fround$1391+2,___ftmul@f1+2
  7614  001D8E  EC6F  F00F         	call	___ftmul	;wreg free
  7615  001D92  C089  F09B         	movff	?___ftmul,_fround$1392
  7616  001D96  C08A  F09C         	movff	?___ftmul+1,_fround$1392+1
  7617  001D9A  C08B  F09D         	movff	?___ftmul+2,_fround$1392+2
  7618                           
  7619                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7620  001D9E  C09B  F089         	movff	_fround$1392,___ftmul@f1
  7621  001DA2  C09C  F08A         	movff	_fround$1392+1,___ftmul@f1+1
  7622  001DA6  C09D  F08B         	movff	_fround$1392+2,___ftmul@f1+2
  7623  001DAA  0E00               	movlw	0
  7624  001DAC  0100               	movlb	0	; () banked
  7625  001DAE  6F8C               	movwf	___ftmul@f2& (0+255),b
  7626  001DB0  0E00               	movlw	0
  7627  001DB2  0100               	movlb	0	; () banked
  7628  001DB4  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7629  001DB6  0E3F               	movlw	63
  7630  001DB8  0100               	movlb	0	; () banked
  7631  001DBA  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7632  001DBC  EC6F  F00F         	call	___ftmul	;wreg free
  7633  001DC0  C089  F098         	movff	?___ftmul,?_fround
  7634  001DC4  C08A  F099         	movff	?___ftmul+1,?_fround+1
  7635  001DC8  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  7636  001DCC  0012               	return	
  7637  001DCE                     l6024:
  7638                           
  7639                           ;doprnt.c: 415: else if(prec > 10)
  7640  001DCE  0E0A               	movlw	10
  7641  001DD0  0100               	movlb	0	; () banked
  7642  001DD2  65A1               	cpfsgt	fround@prec& (0+255),b
  7643  001DD4  D060               	goto	l6032
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7647  001DD6  0E00               	movlw	0
  7648  001DD8  6E34               	movwf	___wmul@multiplicand+1,c
  7649  001DDA  0E03               	movlw	3
  7650  001DDC  6E33               	movwf	___wmul@multiplicand,c
  7651  001DDE  0E00               	movlw	0
  7652  001DE0  6E26               	movwf	___awmod@divisor+1,c
  7653  001DE2  0E0A               	movlw	10
  7654  001DE4  6E25               	movwf	___awmod@divisor,c
  7655  001DE6  C0A1  F023         	movff	fround@prec,___awmod@dividend
  7656  001DEA  6A24               	clrf	___awmod@dividend+1,c
  7657  001DEC  EC82  F019         	call	___awmod	;wreg free
  7658  001DF0  C023  F031         	movff	?___awmod,___wmul@multiplier
  7659  001DF4  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7660  001DF8  EC96  F01C         	call	___wmul	;wreg free
  7661  001DFC  0E31               	movlw	low __npowers_
  7662  001DFE  2431               	addwf	?___wmul,w,c
  7663  001E00  6EF6               	movwf	tblptrl,c
  7664  001E02  0EFE               	movlw	high __npowers_
  7665  001E04  2032               	addwfc	?___wmul+1,w,c
  7666  001E06  6EF7               	movwf	tblptrh,c
  7667  001E08                     	if	0	;There are less than 3 active tblptr bytes
  7668  001E08                     	endif
  7669  001E08  0009               	tblrd		*+
  7670  001E0A  CFF5 F08C          	movff	tablat,___ftmul@f2
  7671  001E0E  0009               	tblrd		*+
  7672  001E10  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7673  001E14  000A               	tblrd		*-
  7674  001E16  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7675  001E1A  0E00               	movlw	0
  7676  001E1C  6E2C               	movwf	___awdiv@divisor+1,c
  7677  001E1E  0E0A               	movlw	10
  7678  001E20  6E2B               	movwf	___awdiv@divisor,c
  7679  001E22  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  7680  001E26  6A2A               	clrf	___awdiv@dividend+1,c
  7681  001E28  ECC3  F018         	call	___awdiv	;wreg free
  7682  001E2C  0E09               	movlw	9
  7683  001E2E  2429               	addwf	?___awdiv,w,c
  7684  001E30  6E31               	movwf	___wmul@multiplier,c
  7685  001E32  0E00               	movlw	0
  7686  001E34  202A               	addwfc	?___awdiv+1,w,c
  7687  001E36  6E32               	movwf	___wmul@multiplier+1,c
  7688  001E38  0E00               	movlw	0
  7689  001E3A  6E34               	movwf	___wmul@multiplicand+1,c
  7690  001E3C  0E03               	movlw	3
  7691  001E3E  6E33               	movwf	___wmul@multiplicand,c
  7692  001E40  EC96  F01C         	call	___wmul	;wreg free
  7693  001E44  0E31               	movlw	low __npowers_
  7694  001E46  2431               	addwf	?___wmul,w,c
  7695  001E48  6EF6               	movwf	tblptrl,c
  7696  001E4A  0EFE               	movlw	high __npowers_
  7697  001E4C  2032               	addwfc	?___wmul+1,w,c
  7698  001E4E  6EF7               	movwf	tblptrh,c
  7699  001E50                     	if	0	;There are less than 3 active tblptr bytes
  7700  001E50                     	endif
  7701  001E50  0009               	tblrd		*+
  7702  001E52  CFF5 F089          	movff	tablat,___ftmul@f1
  7703  001E56  0009               	tblrd		*+
  7704  001E58  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7705  001E5C  000A               	tblrd		*-
  7706  001E5E  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7707  001E62  EC6F  F00F         	call	___ftmul	;wreg free
  7708  001E66  C089  F09E         	movff	?___ftmul,_fround$1391
  7709  001E6A  C08A  F09F         	movff	?___ftmul+1,_fround$1391+1
  7710  001E6E  C08B  F0A0         	movff	?___ftmul+2,_fround$1391+2
  7711                           
  7712                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7713  001E72  C09E  F089         	movff	_fround$1391,___ftmul@f1
  7714  001E76  C09F  F08A         	movff	_fround$1391+1,___ftmul@f1+1
  7715  001E7A  C0A0  F08B         	movff	_fround$1391+2,___ftmul@f1+2
  7716  001E7E  0E00               	movlw	0
  7717  001E80  0100               	movlb	0	; () banked
  7718  001E82  6F8C               	movwf	___ftmul@f2& (0+255),b
  7719  001E84  0E00               	movlw	0
  7720  001E86  0100               	movlb	0	; () banked
  7721  001E88  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7722  001E8A  0E3F               	movlw	63
  7723  001E8C  0100               	movlb	0	; () banked
  7724  001E8E  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7725  001E90  EC6F  F00F         	call	___ftmul	;wreg free
  7726  001E94  D795               	goto	L6
  7727  001E96                     l6032:
  7728                           
  7729                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7730  001E96  0100               	movlb	0	; () banked
  7731  001E98  51A1               	movf	fround@prec& (0+255),w,b
  7732  001E9A  0D03               	mullw	3
  7733  001E9C  0E31               	movlw	low __npowers_
  7734  001E9E  24F3               	addwf	prodl,w,c
  7735  001EA0  6EF6               	movwf	tblptrl,c
  7736  001EA2  0EFE               	movlw	high __npowers_
  7737  001EA4  20F4               	addwfc	prodh,w,c
  7738  001EA6  6EF7               	movwf	tblptrh,c
  7739  001EA8                     	if	0	;There are less than 3 active tblptr bytes
  7740  001EA8                     	endif
  7741  001EA8  0009               	tblrd		*+
  7742  001EAA  CFF5 F089          	movff	tablat,___ftmul@f1
  7743  001EAE  0009               	tblrd		*+
  7744  001EB0  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7745  001EB4  000A               	tblrd		*-
  7746  001EB6  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7747  001EBA  0E00               	movlw	0
  7748  001EBC  0100               	movlb	0	; () banked
  7749  001EBE  6F8C               	movwf	___ftmul@f2& (0+255),b
  7750  001EC0  0E00               	movlw	0
  7751  001EC2  0100               	movlb	0	; () banked
  7752  001EC4  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  7753  001EC6  0E3F               	movlw	63
  7754  001EC8  0100               	movlb	0	; () banked
  7755  001ECA  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  7756  001ECC  EC6F  F00F         	call	___ftmul	;wreg free
  7757  001ED0  C089  F098         	movff	?___ftmul,?_fround
  7758  001ED4  C08A  F099         	movff	?___ftmul+1,?_fround+1
  7759  001ED8  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  7760  001EDC  0012               	return	
  7761  001EDE                     __end_of_fround:
  7762                           	opt stack 0
  7763                           tblptru	equ	0xFF8
  7764                           tblptrh	equ	0xFF7
  7765                           tblptrl	equ	0xFF6
  7766                           tablat	equ	0xFF5
  7767                           prodh	equ	0xFF4
  7768                           prodl	equ	0xFF3
  7769                           postinc0	equ	0xFEE
  7770                           wreg	equ	0xFE8
  7771                           postdec1	equ	0xFE5
  7772                           fsr1l	equ	0xFE1
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           postdec2	equ	0xFDD
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780 ;; *************** function ___awmod *****************
  7781 ;; Defined at:
  7782 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;  dividend        2   34[COMRAM] int 
  7785 ;;  divisor         2   36[COMRAM] int 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  sign            1   39[COMRAM] unsigned char 
  7788 ;;  counter         1   38[COMRAM] unsigned char 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  2   34[COMRAM] int 
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;Total ram usage:        6 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    3
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_fround
  7809 ;;		_scale
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text18
  7814  003304                     __ptext18:
  7815                           	opt stack 0
  7816  003304                     ___awmod:
  7817                           	opt stack 24
  7818                           
  7819                           ;incstack = 0
  7820  003304  0E00               	movlw	0
  7821  003306  6E28               	movwf	___awmod@sign,c
  7822  003308  AE24               	btfss	___awmod@dividend+1,7,c
  7823  00330A  D006               	goto	l5978
  7824  00330C  6C23               	negf	___awmod@dividend,c
  7825  00330E  1E24               	comf	___awmod@dividend+1,f,c
  7826  003310  B0D8               	btfsc	status,0,c
  7827  003312  2A24               	incf	___awmod@dividend+1,f,c
  7828  003314  0E01               	movlw	1
  7829  003316  6E28               	movwf	___awmod@sign,c
  7830  003318                     l5978:
  7831  003318  AE26               	btfss	___awmod@divisor+1,7,c
  7832  00331A  D004               	goto	l5982
  7833  00331C  6C25               	negf	___awmod@divisor,c
  7834  00331E  1E26               	comf	___awmod@divisor+1,f,c
  7835  003320  B0D8               	btfsc	status,0,c
  7836  003322  2A26               	incf	___awmod@divisor+1,f,c
  7837  003324                     l5982:
  7838  003324  5025               	movf	___awmod@divisor,w,c
  7839  003326  1026               	iorwf	___awmod@divisor+1,w,c
  7840  003328  B4D8               	btfsc	status,2,c
  7841  00332A  D018               	goto	l5998
  7842  00332C  0E01               	movlw	1
  7843  00332E  6E27               	movwf	___awmod@counter,c
  7844  003330  D004               	goto	l5988
  7845  003332                     l5986:
  7846  003332  90D8               	bcf	status,0,c
  7847  003334  3625               	rlcf	___awmod@divisor,f,c
  7848  003336  3626               	rlcf	___awmod@divisor+1,f,c
  7849  003338  2A27               	incf	___awmod@counter,f,c
  7850  00333A                     l5988:
  7851  00333A  AE26               	btfss	___awmod@divisor+1,7,c
  7852  00333C  D7FA               	goto	l5986
  7853  00333E                     l5990:
  7854  00333E  5025               	movf	___awmod@divisor,w,c
  7855  003340  5C23               	subwf	___awmod@dividend,w,c
  7856  003342  5026               	movf	___awmod@divisor+1,w,c
  7857  003344  5824               	subwfb	___awmod@dividend+1,w,c
  7858  003346  A0D8               	btfss	status,0,c
  7859  003348  D004               	goto	l5994
  7860  00334A  5025               	movf	___awmod@divisor,w,c
  7861  00334C  5E23               	subwf	___awmod@dividend,f,c
  7862  00334E  5026               	movf	___awmod@divisor+1,w,c
  7863  003350  5A24               	subwfb	___awmod@dividend+1,f,c
  7864  003352                     l5994:
  7865  003352  90D8               	bcf	status,0,c
  7866  003354  3226               	rrcf	___awmod@divisor+1,f,c
  7867  003356  3225               	rrcf	___awmod@divisor,f,c
  7868  003358  2E27               	decfsz	___awmod@counter,f,c
  7869  00335A  D7F1               	goto	l5990
  7870  00335C                     l5998:
  7871  00335C  5028               	movf	___awmod@sign,w,c
  7872  00335E  B4D8               	btfsc	status,2,c
  7873  003360  D004               	goto	l6002
  7874  003362  6C23               	negf	___awmod@dividend,c
  7875  003364  1E24               	comf	___awmod@dividend+1,f,c
  7876  003366  B0D8               	btfsc	status,0,c
  7877  003368  2A24               	incf	___awmod@dividend+1,f,c
  7878  00336A                     l6002:
  7879  00336A  C023  F023         	movff	___awmod@dividend,?___awmod
  7880  00336E  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
  7881  003372  0012               	return	
  7882  003374                     __end_of___awmod:
  7883                           	opt stack 0
  7884                           tblptru	equ	0xFF8
  7885                           tblptrh	equ	0xFF7
  7886                           tblptrl	equ	0xFF6
  7887                           tablat	equ	0xFF5
  7888                           prodh	equ	0xFF4
  7889                           prodl	equ	0xFF3
  7890                           postinc0	equ	0xFEE
  7891                           wreg	equ	0xFE8
  7892                           postdec1	equ	0xFE5
  7893                           fsr1l	equ	0xFE1
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function ___awdiv *****************
  7902 ;; Defined at:
  7903 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  dividend        2   40[COMRAM] int 
  7906 ;;  divisor         2   42[COMRAM] int 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  quotient        2   46[COMRAM] int 
  7909 ;;  sign            1   45[COMRAM] unsigned char 
  7910 ;;  counter         1   44[COMRAM] unsigned char 
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  2   40[COMRAM] int 
  7913 ;; Registers used:
  7914 ;;		wreg, status,2, status,0
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7920 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7921 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;Total ram usage:        8 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    3
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		_fround
  7931 ;;		_scale
  7932 ;;		_printf
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text19
  7937  003186                     __ptext19:
  7938                           	opt stack 0
  7939  003186                     ___awdiv:
  7940                           	opt stack 24
  7941                           
  7942                           ;incstack = 0
  7943  003186  0E00               	movlw	0
  7944  003188  6E2E               	movwf	___awdiv@sign,c
  7945  00318A  AE2C               	btfss	___awdiv@divisor+1,7,c
  7946  00318C  D006               	goto	l5934
  7947  00318E  6C2B               	negf	___awdiv@divisor,c
  7948  003190  1E2C               	comf	___awdiv@divisor+1,f,c
  7949  003192  B0D8               	btfsc	status,0,c
  7950  003194  2A2C               	incf	___awdiv@divisor+1,f,c
  7951  003196  0E01               	movlw	1
  7952  003198  6E2E               	movwf	___awdiv@sign,c
  7953  00319A                     l5934:
  7954  00319A  AE2A               	btfss	___awdiv@dividend+1,7,c
  7955  00319C  D006               	goto	l5940
  7956  00319E  6C29               	negf	___awdiv@dividend,c
  7957  0031A0  1E2A               	comf	___awdiv@dividend+1,f,c
  7958  0031A2  B0D8               	btfsc	status,0,c
  7959  0031A4  2A2A               	incf	___awdiv@dividend+1,f,c
  7960  0031A6  0E01               	movlw	1
  7961  0031A8  1A2E               	xorwf	___awdiv@sign,f,c
  7962  0031AA                     l5940:
  7963  0031AA  0E00               	movlw	0
  7964  0031AC  6E30               	movwf	___awdiv@quotient+1,c
  7965  0031AE  0E00               	movlw	0
  7966  0031B0  6E2F               	movwf	___awdiv@quotient,c
  7967  0031B2  502B               	movf	___awdiv@divisor,w,c
  7968  0031B4  102C               	iorwf	___awdiv@divisor+1,w,c
  7969  0031B6  B4D8               	btfsc	status,2,c
  7970  0031B8  D01C               	goto	l5962
  7971  0031BA  0E01               	movlw	1
  7972  0031BC  6E2D               	movwf	___awdiv@counter,c
  7973  0031BE  D004               	goto	l5948
  7974  0031C0                     l5946:
  7975  0031C0  90D8               	bcf	status,0,c
  7976  0031C2  362B               	rlcf	___awdiv@divisor,f,c
  7977  0031C4  362C               	rlcf	___awdiv@divisor+1,f,c
  7978  0031C6  2A2D               	incf	___awdiv@counter,f,c
  7979  0031C8                     l5948:
  7980  0031C8  AE2C               	btfss	___awdiv@divisor+1,7,c
  7981  0031CA  D7FA               	goto	l5946
  7982  0031CC                     l5950:
  7983  0031CC  90D8               	bcf	status,0,c
  7984  0031CE  362F               	rlcf	___awdiv@quotient,f,c
  7985  0031D0  3630               	rlcf	___awdiv@quotient+1,f,c
  7986  0031D2  502B               	movf	___awdiv@divisor,w,c
  7987  0031D4  5C29               	subwf	___awdiv@dividend,w,c
  7988  0031D6  502C               	movf	___awdiv@divisor+1,w,c
  7989  0031D8  582A               	subwfb	___awdiv@dividend+1,w,c
  7990  0031DA  A0D8               	btfss	status,0,c
  7991  0031DC  D005               	goto	l5958
  7992  0031DE  502B               	movf	___awdiv@divisor,w,c
  7993  0031E0  5E29               	subwf	___awdiv@dividend,f,c
  7994  0031E2  502C               	movf	___awdiv@divisor+1,w,c
  7995  0031E4  5A2A               	subwfb	___awdiv@dividend+1,f,c
  7996  0031E6  802F               	bsf	___awdiv@quotient,0,c
  7997  0031E8                     l5958:
  7998  0031E8  90D8               	bcf	status,0,c
  7999  0031EA  322C               	rrcf	___awdiv@divisor+1,f,c
  8000  0031EC  322B               	rrcf	___awdiv@divisor,f,c
  8001  0031EE  2E2D               	decfsz	___awdiv@counter,f,c
  8002  0031F0  D7ED               	goto	l5950
  8003  0031F2                     l5962:
  8004  0031F2  502E               	movf	___awdiv@sign,w,c
  8005  0031F4  B4D8               	btfsc	status,2,c
  8006  0031F6  D004               	goto	l5966
  8007  0031F8  6C2F               	negf	___awdiv@quotient,c
  8008  0031FA  1E30               	comf	___awdiv@quotient+1,f,c
  8009  0031FC  B0D8               	btfsc	status,0,c
  8010  0031FE  2A30               	incf	___awdiv@quotient+1,f,c
  8011  003200                     l5966:
  8012  003200  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  8013  003204  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  8014  003208  0012               	return	
  8015  00320A                     __end_of___awdiv:
  8016                           	opt stack 0
  8017                           tblptru	equ	0xFF8
  8018                           tblptrh	equ	0xFF7
  8019                           tblptrl	equ	0xFF6
  8020                           tablat	equ	0xFF5
  8021                           prodh	equ	0xFF4
  8022                           prodl	equ	0xFF3
  8023                           postinc0	equ	0xFEE
  8024                           wreg	equ	0xFE8
  8025                           postdec1	equ	0xFE5
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           fsr2h	equ	0xFDA
  8031                           fsr2l	equ	0xFD9
  8032                           status	equ	0xFD8
  8033                           
  8034 ;; *************** function __tdiv_to_l_ *****************
  8035 ;; Defined at:
  8036 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;  f1              3   34[COMRAM] float 
  8039 ;;  f2              3   37[COMRAM] float 
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;  quot            4   43[COMRAM] unsigned long 
  8042 ;;  exp1            1   48[COMRAM] unsigned char 
  8043 ;;  cntr            1   47[COMRAM] unsigned char 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  4   34[COMRAM] unsigned long 
  8046 ;; Registers used:
  8047 ;;		wreg, status,2, status,0
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8053 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;Total ram usage:       15 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    3
  8060 ;; This function calls:
  8061 ;;		Nothing
  8062 ;; This function is called by:
  8063 ;;		_printf
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           	psect	text20
  8068  0022D8                     __ptext20:
  8069                           	opt stack 0
  8070  0022D8                     __tdiv_to_l_:
  8071                           	opt stack 25
  8072                           
  8073                           ;incstack = 0
  8074  0022D8  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8075  0022DC  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8076  0022DE  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8077  0022E0  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
  8078  0022E2  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8079  0022E4  E301               	bnc	u5931
  8080  0022E6  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8081  0022E8                     u5931:
  8082  0022E8  5029               	movf	??__tdiv_to_l_,w,c
  8083  0022EA  6E31               	movwf	__tdiv_to_l_@exp1,c
  8084  0022EC  5031               	movf	__tdiv_to_l_@exp1,w,c
  8085  0022EE  A4D8               	btfss	status,2,c
  8086  0022F0  D009               	goto	l6092
  8087  0022F2  0E00               	movlw	0
  8088  0022F4  6E23               	movwf	?__tdiv_to_l_,c
  8089  0022F6  0E00               	movlw	0
  8090  0022F8  6E24               	movwf	?__tdiv_to_l_+1,c
  8091  0022FA  0E00               	movlw	0
  8092  0022FC  6E25               	movwf	?__tdiv_to_l_+2,c
  8093  0022FE  0E00               	movlw	0
  8094  002300  6E26               	movwf	?__tdiv_to_l_+3,c
  8095  002302  0012               	return	
  8096  002304                     l6092:
  8097  002304  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8098  002308  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8099  00230A  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8100  00230C  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
  8101  00230E  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8102  002310  E301               	bnc	u5951
  8103  002312  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8104  002314                     u5951:
  8105  002314  5029               	movf	??__tdiv_to_l_,w,c
  8106  002316  6E30               	movwf	__tdiv_to_l_@cntr,c
  8107  002318  5030               	movf	__tdiv_to_l_@cntr,w,c
  8108  00231A  A4D8               	btfss	status,2,c
  8109  00231C  D009               	goto	l6098
  8110  00231E  0E00               	movlw	0
  8111  002320  6E23               	movwf	?__tdiv_to_l_,c
  8112  002322  0E00               	movlw	0
  8113  002324  6E24               	movwf	?__tdiv_to_l_+1,c
  8114  002326  0E00               	movlw	0
  8115  002328  6E25               	movwf	?__tdiv_to_l_+2,c
  8116  00232A  0E00               	movlw	0
  8117  00232C  6E26               	movwf	?__tdiv_to_l_+3,c
  8118  00232E  0012               	return	
  8119  002330                     l6098:
  8120  002330  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
  8121  002332  0EFF               	movlw	255
  8122  002334  1623               	andwf	__tdiv_to_l_@f1,f,c
  8123  002336  0EFF               	movlw	255
  8124  002338  1624               	andwf	__tdiv_to_l_@f1+1,f,c
  8125  00233A  0E00               	movlw	0
  8126  00233C  1625               	andwf	__tdiv_to_l_@f1+2,f,c
  8127  00233E  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
  8128  002340  0EFF               	movlw	255
  8129  002342  1626               	andwf	__tdiv_to_l_@f2,f,c
  8130  002344  0EFF               	movlw	255
  8131  002346  1627               	andwf	__tdiv_to_l_@f2+1,f,c
  8132  002348  0E00               	movlw	0
  8133  00234A  1628               	andwf	__tdiv_to_l_@f2+2,f,c
  8134  00234C  0E00               	movlw	0
  8135  00234E  6E2C               	movwf	__tdiv_to_l_@quot,c
  8136  002350  0E00               	movlw	0
  8137  002352  6E2D               	movwf	__tdiv_to_l_@quot+1,c
  8138  002354  0E00               	movlw	0
  8139  002356  6E2E               	movwf	__tdiv_to_l_@quot+2,c
  8140  002358  0E00               	movlw	0
  8141  00235A  6E2F               	movwf	__tdiv_to_l_@quot+3,c
  8142  00235C  0E7F               	movlw	127
  8143  00235E  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8144  002360  5030               	movf	__tdiv_to_l_@cntr,w,c
  8145  002362  0F98               	addlw	152
  8146  002364  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8147  002366  0E18               	movlw	24
  8148  002368  6E30               	movwf	__tdiv_to_l_@cntr,c
  8149  00236A                     l1160:
  8150  00236A  90D8               	bcf	status,0,c
  8151  00236C  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8152  00236E  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8153  002370  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8154  002372  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8155  002374  5026               	movf	__tdiv_to_l_@f2,w,c
  8156  002376  5C23               	subwf	__tdiv_to_l_@f1,w,c
  8157  002378  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8158  00237A  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
  8159  00237C  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8160  00237E  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
  8161  002380  A0D8               	btfss	status,0,c
  8162  002382  D007               	goto	l1161
  8163  002384  5026               	movf	__tdiv_to_l_@f2,w,c
  8164  002386  5E23               	subwf	__tdiv_to_l_@f1,f,c
  8165  002388  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8166  00238A  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
  8167  00238C  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8168  00238E  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
  8169  002390  802C               	bsf	__tdiv_to_l_@quot,0,c
  8170  002392                     l1161:
  8171  002392  90D8               	bcf	status,0,c
  8172  002394  3623               	rlcf	__tdiv_to_l_@f1,f,c
  8173  002396  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
  8174  002398  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
  8175  00239A  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
  8176  00239C  D7E6               	goto	l1160
  8177  00239E  AE31               	btfss	__tdiv_to_l_@exp1,7,c
  8178  0023A0  D016               	goto	l6132
  8179  0023A2  5031               	movf	__tdiv_to_l_@exp1,w,c
  8180  0023A4  0A80               	xorlw	128
  8181  0023A6  0F97               	addlw	151
  8182  0023A8  B0D8               	btfsc	status,0,c
  8183  0023AA  D009               	goto	l6128
  8184  0023AC  0E00               	movlw	0
  8185  0023AE  6E23               	movwf	?__tdiv_to_l_,c
  8186  0023B0  0E00               	movlw	0
  8187  0023B2  6E24               	movwf	?__tdiv_to_l_+1,c
  8188  0023B4  0E00               	movlw	0
  8189  0023B6  6E25               	movwf	?__tdiv_to_l_+2,c
  8190  0023B8  0E00               	movlw	0
  8191  0023BA  6E26               	movwf	?__tdiv_to_l_+3,c
  8192  0023BC  0012               	return	
  8193  0023BE                     l6128:
  8194  0023BE  90D8               	bcf	status,0,c
  8195  0023C0  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
  8196  0023C2  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
  8197  0023C4  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
  8198  0023C6  322C               	rrcf	__tdiv_to_l_@quot,f,c
  8199  0023C8  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
  8200  0023CA  D7F9               	goto	l6128
  8201  0023CC  D015               	goto	l1167
  8202  0023CE                     l6132:
  8203  0023CE  0E17               	movlw	23
  8204  0023D0  6431               	cpfsgt	__tdiv_to_l_@exp1,c
  8205  0023D2  D00F               	goto	l6140
  8206  0023D4  0E00               	movlw	0
  8207  0023D6  6E23               	movwf	?__tdiv_to_l_,c
  8208  0023D8  0E00               	movlw	0
  8209  0023DA  6E24               	movwf	?__tdiv_to_l_+1,c
  8210  0023DC  0E00               	movlw	0
  8211  0023DE  6E25               	movwf	?__tdiv_to_l_+2,c
  8212  0023E0  0E00               	movlw	0
  8213  0023E2  6E26               	movwf	?__tdiv_to_l_+3,c
  8214  0023E4  0012               	return	
  8215  0023E6                     l6138:
  8216  0023E6  90D8               	bcf	status,0,c
  8217  0023E8  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8218  0023EA  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8219  0023EC  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8220  0023EE  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8221  0023F0  0631               	decf	__tdiv_to_l_@exp1,f,c
  8222  0023F2                     l6140:
  8223  0023F2  5031               	movf	__tdiv_to_l_@exp1,w,c
  8224  0023F4  A4D8               	btfss	status,2,c
  8225  0023F6  D7F7               	goto	l6138
  8226  0023F8                     l1167:
  8227  0023F8  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8228  0023FC  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8229  002400  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8230  002404  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8231  002408  0012               	return		;funcret
  8232  00240A                     __end_of__tdiv_to_l_:
  8233                           	opt stack 0
  8234                           tblptru	equ	0xFF8
  8235                           tblptrh	equ	0xFF7
  8236                           tblptrl	equ	0xFF6
  8237                           tablat	equ	0xFF5
  8238                           prodh	equ	0xFF4
  8239                           prodl	equ	0xFF3
  8240                           postinc0	equ	0xFEE
  8241                           wreg	equ	0xFE8
  8242                           postdec1	equ	0xFE5
  8243                           fsr1l	equ	0xFE1
  8244                           indf2	equ	0xFDF
  8245                           postinc2	equ	0xFDE
  8246                           postdec2	equ	0xFDD
  8247                           fsr2h	equ	0xFDA
  8248                           fsr2l	equ	0xFD9
  8249                           status	equ	0xFD8
  8250                           
  8251 ;; *************** function __div_to_l_ *****************
  8252 ;; Defined at:
  8253 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;  f1              3   34[COMRAM] unsigned long 
  8256 ;;  f2              3   37[COMRAM] unsigned long 
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  quot            4   40[COMRAM] unsigned long 
  8259 ;;  exp1            1   45[COMRAM] unsigned char 
  8260 ;;  cntr            1   44[COMRAM] unsigned char 
  8261 ;; Return value:  Size  Location     Type
  8262 ;;                  4   34[COMRAM] unsigned long 
  8263 ;; Registers used:
  8264 ;;		wreg, status,2, status,0
  8265 ;; Tracked objects:
  8266 ;;		On entry : 0/0
  8267 ;;		On exit  : 0/0
  8268 ;;		Unchanged: 0/0
  8269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8270 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8271 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8273 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8274 ;;Total ram usage:       12 bytes
  8275 ;; Hardware stack levels used:    1
  8276 ;; Hardware stack levels required when called:    3
  8277 ;; This function calls:
  8278 ;;		Nothing
  8279 ;; This function is called by:
  8280 ;;		_printf
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           	psect	text21
  8285  00240A                     __ptext21:
  8286                           	opt stack 0
  8287  00240A                     __div_to_l_:
  8288                           	opt stack 25
  8289                           
  8290                           ;incstack = 0
  8291  00240A  3425               	rlcf	__div_to_l_@f1+2,w,c
  8292  00240C  3426               	rlcf	__div_to_l_@f1+3,w,c
  8293  00240E  6E2E               	movwf	__div_to_l_@exp1,c
  8294  002410  502E               	movf	__div_to_l_@exp1,w,c
  8295  002412  A4D8               	btfss	status,2,c
  8296  002414  D009               	goto	l6148
  8297  002416  0E00               	movlw	0
  8298  002418  6E23               	movwf	?__div_to_l_,c
  8299  00241A  0E00               	movlw	0
  8300  00241C  6E24               	movwf	?__div_to_l_+1,c
  8301  00241E  0E00               	movlw	0
  8302  002420  6E25               	movwf	?__div_to_l_+2,c
  8303  002422  0E00               	movlw	0
  8304  002424  6E26               	movwf	?__div_to_l_+3,c
  8305  002426  0012               	return	
  8306  002428                     l6148:
  8307  002428  3428               	rlcf	__div_to_l_@f2+2,w,c
  8308  00242A  3429               	rlcf	__div_to_l_@f2+3,w,c
  8309  00242C  6E2D               	movwf	__div_to_l_@cntr,c
  8310  00242E  502D               	movf	__div_to_l_@cntr,w,c
  8311  002430  A4D8               	btfss	status,2,c
  8312  002432  D009               	goto	l6154
  8313  002434  0E00               	movlw	0
  8314  002436  6E23               	movwf	?__div_to_l_,c
  8315  002438  0E00               	movlw	0
  8316  00243A  6E24               	movwf	?__div_to_l_+1,c
  8317  00243C  0E00               	movlw	0
  8318  00243E  6E25               	movwf	?__div_to_l_+2,c
  8319  002440  0E00               	movlw	0
  8320  002442  6E26               	movwf	?__div_to_l_+3,c
  8321  002444  0012               	return	
  8322  002446                     l6154:
  8323  002446  8E25               	bsf	__div_to_l_@f1+2,7,c
  8324  002448  0EFF               	movlw	255
  8325  00244A  1623               	andwf	__div_to_l_@f1,f,c
  8326  00244C  0EFF               	movlw	255
  8327  00244E  1624               	andwf	__div_to_l_@f1+1,f,c
  8328  002450  0EFF               	movlw	255
  8329  002452  1625               	andwf	__div_to_l_@f1+2,f,c
  8330  002454  0E00               	movlw	0
  8331  002456  1626               	andwf	__div_to_l_@f1+3,f,c
  8332  002458  8E28               	bsf	__div_to_l_@f2+2,7,c
  8333  00245A  0EFF               	movlw	255
  8334  00245C  1626               	andwf	__div_to_l_@f2,f,c
  8335  00245E  0EFF               	movlw	255
  8336  002460  1627               	andwf	__div_to_l_@f2+1,f,c
  8337  002462  0EFF               	movlw	255
  8338  002464  1628               	andwf	__div_to_l_@f2+2,f,c
  8339  002466  0E00               	movlw	0
  8340  002468  1629               	andwf	__div_to_l_@f2+3,f,c
  8341  00246A  0E00               	movlw	0
  8342  00246C  6E29               	movwf	__div_to_l_@quot,c
  8343  00246E  0E00               	movlw	0
  8344  002470  6E2A               	movwf	__div_to_l_@quot+1,c
  8345  002472  0E00               	movlw	0
  8346  002474  6E2B               	movwf	__div_to_l_@quot+2,c
  8347  002476  0E00               	movlw	0
  8348  002478  6E2C               	movwf	__div_to_l_@quot+3,c
  8349  00247A  0E7F               	movlw	127
  8350  00247C  5E2E               	subwf	__div_to_l_@exp1,f,c
  8351  00247E  502D               	movf	__div_to_l_@cntr,w,c
  8352  002480  0FA0               	addlw	160
  8353  002482  5E2E               	subwf	__div_to_l_@exp1,f,c
  8354  002484  0E20               	movlw	32
  8355  002486  6E2D               	movwf	__div_to_l_@cntr,c
  8356  002488                     l6168:
  8357  002488  90D8               	bcf	status,0,c
  8358  00248A  3629               	rlcf	__div_to_l_@quot,f,c
  8359  00248C  362A               	rlcf	__div_to_l_@quot+1,f,c
  8360  00248E  362B               	rlcf	__div_to_l_@quot+2,f,c
  8361  002490  362C               	rlcf	__div_to_l_@quot+3,f,c
  8362  002492  5026               	movf	__div_to_l_@f2,w,c
  8363  002494  5C23               	subwf	__div_to_l_@f1,w,c
  8364  002496  5027               	movf	__div_to_l_@f2+1,w,c
  8365  002498  5824               	subwfb	__div_to_l_@f1+1,w,c
  8366  00249A  5028               	movf	__div_to_l_@f2+2,w,c
  8367  00249C  5825               	subwfb	__div_to_l_@f1+2,w,c
  8368  00249E  5029               	movf	__div_to_l_@f2+3,w,c
  8369  0024A0  5826               	subwfb	__div_to_l_@f1+3,w,c
  8370  0024A2  A0D8               	btfss	status,0,c
  8371  0024A4  D009               	goto	l6176
  8372  0024A6  5026               	movf	__div_to_l_@f2,w,c
  8373  0024A8  5E23               	subwf	__div_to_l_@f1,f,c
  8374  0024AA  5027               	movf	__div_to_l_@f2+1,w,c
  8375  0024AC  5A24               	subwfb	__div_to_l_@f1+1,f,c
  8376  0024AE  5028               	movf	__div_to_l_@f2+2,w,c
  8377  0024B0  5A25               	subwfb	__div_to_l_@f1+2,f,c
  8378  0024B2  5029               	movf	__div_to_l_@f2+3,w,c
  8379  0024B4  5A26               	subwfb	__div_to_l_@f1+3,f,c
  8380  0024B6  8029               	bsf	__div_to_l_@quot,0,c
  8381  0024B8                     l6176:
  8382  0024B8  90D8               	bcf	status,0,c
  8383  0024BA  3623               	rlcf	__div_to_l_@f1,f,c
  8384  0024BC  3624               	rlcf	__div_to_l_@f1+1,f,c
  8385  0024BE  3625               	rlcf	__div_to_l_@f1+2,f,c
  8386  0024C0  3626               	rlcf	__div_to_l_@f1+3,f,c
  8387  0024C2  2E2D               	decfsz	__div_to_l_@cntr,f,c
  8388  0024C4  D7E1               	goto	l6168
  8389  0024C6  AE2E               	btfss	__div_to_l_@exp1,7,c
  8390  0024C8  D016               	goto	l6192
  8391  0024CA  502E               	movf	__div_to_l_@exp1,w,c
  8392  0024CC  0A80               	xorlw	128
  8393  0024CE  0F9F               	addlw	159
  8394  0024D0  B0D8               	btfsc	status,0,c
  8395  0024D2  D009               	goto	l6188
  8396  0024D4  0E00               	movlw	0
  8397  0024D6  6E23               	movwf	?__div_to_l_,c
  8398  0024D8  0E00               	movlw	0
  8399  0024DA  6E24               	movwf	?__div_to_l_+1,c
  8400  0024DC  0E00               	movlw	0
  8401  0024DE  6E25               	movwf	?__div_to_l_+2,c
  8402  0024E0  0E00               	movlw	0
  8403  0024E2  6E26               	movwf	?__div_to_l_+3,c
  8404  0024E4  0012               	return	
  8405  0024E6                     l6188:
  8406  0024E6  90D8               	bcf	status,0,c
  8407  0024E8  322C               	rrcf	__div_to_l_@quot+3,f,c
  8408  0024EA  322B               	rrcf	__div_to_l_@quot+2,f,c
  8409  0024EC  322A               	rrcf	__div_to_l_@quot+1,f,c
  8410  0024EE  3229               	rrcf	__div_to_l_@quot,f,c
  8411  0024F0  3E2E               	incfsz	__div_to_l_@exp1,f,c
  8412  0024F2  D7F9               	goto	l6188
  8413  0024F4  D015               	goto	l1063
  8414  0024F6                     l6192:
  8415  0024F6  0E1F               	movlw	31
  8416  0024F8  642E               	cpfsgt	__div_to_l_@exp1,c
  8417  0024FA  D00F               	goto	l6200
  8418  0024FC  0E00               	movlw	0
  8419  0024FE  6E23               	movwf	?__div_to_l_,c
  8420  002500  0E00               	movlw	0
  8421  002502  6E24               	movwf	?__div_to_l_+1,c
  8422  002504  0E00               	movlw	0
  8423  002506  6E25               	movwf	?__div_to_l_+2,c
  8424  002508  0E00               	movlw	0
  8425  00250A  6E26               	movwf	?__div_to_l_+3,c
  8426  00250C  0012               	return	
  8427  00250E                     l6198:
  8428  00250E  90D8               	bcf	status,0,c
  8429  002510  3629               	rlcf	__div_to_l_@quot,f,c
  8430  002512  362A               	rlcf	__div_to_l_@quot+1,f,c
  8431  002514  362B               	rlcf	__div_to_l_@quot+2,f,c
  8432  002516  362C               	rlcf	__div_to_l_@quot+3,f,c
  8433  002518  062E               	decf	__div_to_l_@exp1,f,c
  8434  00251A                     l6200:
  8435  00251A  502E               	movf	__div_to_l_@exp1,w,c
  8436  00251C  A4D8               	btfss	status,2,c
  8437  00251E  D7F7               	goto	l6198
  8438  002520                     l1063:
  8439  002520  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
  8440  002524  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8441  002528  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8442  00252C  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8443  002530  0012               	return		;funcret
  8444  002532                     __end_of__div_to_l_:
  8445                           	opt stack 0
  8446                           tblptru	equ	0xFF8
  8447                           tblptrh	equ	0xFF7
  8448                           tblptrl	equ	0xFF6
  8449                           tablat	equ	0xFF5
  8450                           prodh	equ	0xFF4
  8451                           prodl	equ	0xFF3
  8452                           postinc0	equ	0xFEE
  8453                           wreg	equ	0xFE8
  8454                           postdec1	equ	0xFE5
  8455                           fsr1l	equ	0xFE1
  8456                           indf2	equ	0xFDF
  8457                           postinc2	equ	0xFDE
  8458                           postdec2	equ	0xFDD
  8459                           fsr2h	equ	0xFDA
  8460                           fsr2l	equ	0xFD9
  8461                           status	equ	0xFD8
  8462                           
  8463 ;; *************** function ___lltoft *****************
  8464 ;; Defined at:
  8465 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  c               4   42[COMRAM] unsigned long 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  exp             1   50[COMRAM] unsigned char 
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  3   42[COMRAM] float 
  8472 ;; Registers used:
  8473 ;;		wreg, status,2, status,0, cstack
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;Total ram usage:        9 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; Hardware stack levels required when called:    4
  8486 ;; This function calls:
  8487 ;;		___ftpack
  8488 ;; This function is called by:
  8489 ;;		_printf
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           	psect	text22
  8494  0035DC                     __ptext22:
  8495                           	opt stack 0
  8496  0035DC                     ___lltoft:
  8497                           	opt stack 24
  8498                           
  8499                           ;incstack = 0
  8500  0035DC  0E8E               	movlw	142
  8501  0035DE  6E33               	movwf	___lltoft@exp,c
  8502  0035E0  D006               	goto	l6394
  8503  0035E2                     l6392:
  8504  0035E2  90D8               	bcf	status,0,c
  8505  0035E4  322E               	rrcf	___lltoft@c+3,f,c
  8506  0035E6  322D               	rrcf	___lltoft@c+2,f,c
  8507  0035E8  322C               	rrcf	___lltoft@c+1,f,c
  8508  0035EA  322B               	rrcf	___lltoft@c,f,c
  8509  0035EC  2A33               	incf	___lltoft@exp,f,c
  8510  0035EE                     l6394:
  8511  0035EE  0E00               	movlw	0
  8512  0035F0  142B               	andwf	___lltoft@c,w,c
  8513  0035F2  6E2F               	movwf	??___lltoft& (0+255),c
  8514  0035F4  0E00               	movlw	0
  8515  0035F6  142C               	andwf	___lltoft@c+1,w,c
  8516  0035F8  6E30               	movwf	(??___lltoft+1)& (0+255),c
  8517  0035FA  0E00               	movlw	0
  8518  0035FC  142D               	andwf	___lltoft@c+2,w,c
  8519  0035FE  6E31               	movwf	(??___lltoft+2)& (0+255),c
  8520  003600  0EFF               	movlw	255
  8521  003602  142E               	andwf	___lltoft@c+3,w,c
  8522  003604  6E32               	movwf	(??___lltoft+3)& (0+255),c
  8523  003606  502F               	movf	??___lltoft,w,c
  8524  003608  1030               	iorwf	??___lltoft+1,w,c
  8525  00360A  1031               	iorwf	??___lltoft+2,w,c
  8526  00360C  1032               	iorwf	??___lltoft+3,w,c
  8527  00360E  A4D8               	btfss	status,2,c
  8528  003610  D7E8               	goto	l6392
  8529  003612  C02B  F023         	movff	___lltoft@c,___ftpack@arg
  8530  003616  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
  8531  00361A  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
  8532  00361E  C033  F026         	movff	___lltoft@exp,___ftpack@exp
  8533  003622  0E00               	movlw	0
  8534  003624  6E27               	movwf	___ftpack@sign,c
  8535  003626  ECEE  F016         	call	___ftpack	;wreg free
  8536  00362A  C023  F02B         	movff	?___ftpack,?___lltoft
  8537  00362E  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
  8538  003632  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
  8539  003636  0012               	return	
  8540  003638                     __end_of___lltoft:
  8541                           	opt stack 0
  8542                           tblptru	equ	0xFF8
  8543                           tblptrh	equ	0xFF7
  8544                           tblptrl	equ	0xFF6
  8545                           tablat	equ	0xFF5
  8546                           prodh	equ	0xFF4
  8547                           prodl	equ	0xFF3
  8548                           postinc0	equ	0xFEE
  8549                           wreg	equ	0xFE8
  8550                           postdec1	equ	0xFE5
  8551                           fsr1l	equ	0xFE1
  8552                           indf2	equ	0xFDF
  8553                           postinc2	equ	0xFDE
  8554                           postdec2	equ	0xFDD
  8555                           fsr2h	equ	0xFDA
  8556                           fsr2l	equ	0xFD9
  8557                           status	equ	0xFD8
  8558                           
  8559 ;; *************** function ___llmod *****************
  8560 ;; Defined at:
  8561 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;  dividend        4   47[COMRAM] unsigned long 
  8564 ;;  divisor         4   51[COMRAM] unsigned long 
  8565 ;; Auto vars:     Size  Location     Type
  8566 ;;  counter         1   55[COMRAM] unsigned char 
  8567 ;; Return value:  Size  Location     Type
  8568 ;;                  4   47[COMRAM] unsigned long 
  8569 ;; Registers used:
  8570 ;;		wreg, status,2, status,0
  8571 ;; Tracked objects:
  8572 ;;		On entry : 0/0
  8573 ;;		On exit  : 0/0
  8574 ;;		Unchanged: 0/0
  8575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8576 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;Total ram usage:        9 bytes
  8581 ;; Hardware stack levels used:    1
  8582 ;; Hardware stack levels required when called:    3
  8583 ;; This function calls:
  8584 ;;		Nothing
  8585 ;; This function is called by:
  8586 ;;		_printf
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text23
  8591  003450                     __ptext23:
  8592                           	opt stack 0
  8593  003450                     ___llmod:
  8594                           	opt stack 25
  8595                           
  8596                           ;incstack = 0
  8597  003450  5034               	movf	___llmod@divisor,w,c
  8598  003452  1035               	iorwf	___llmod@divisor+1,w,c
  8599  003454  1036               	iorwf	___llmod@divisor+2,w,c
  8600  003456  1037               	iorwf	___llmod@divisor+3,w,c
  8601  003458  B4D8               	btfsc	status,2,c
  8602  00345A  D024               	goto	l1252
  8603  00345C  0E01               	movlw	1
  8604  00345E  6E38               	movwf	___llmod@counter,c
  8605  003460  D006               	goto	l6380
  8606  003462                     l6378:
  8607  003462  90D8               	bcf	status,0,c
  8608  003464  3634               	rlcf	___llmod@divisor,f,c
  8609  003466  3635               	rlcf	___llmod@divisor+1,f,c
  8610  003468  3636               	rlcf	___llmod@divisor+2,f,c
  8611  00346A  3637               	rlcf	___llmod@divisor+3,f,c
  8612  00346C  2A38               	incf	___llmod@counter,f,c
  8613  00346E                     l6380:
  8614  00346E  AE37               	btfss	___llmod@divisor+3,7,c
  8615  003470  D7F8               	goto	l6378
  8616  003472                     l6382:
  8617  003472  5034               	movf	___llmod@divisor,w,c
  8618  003474  5C30               	subwf	___llmod@dividend,w,c
  8619  003476  5035               	movf	___llmod@divisor+1,w,c
  8620  003478  5831               	subwfb	___llmod@dividend+1,w,c
  8621  00347A  5036               	movf	___llmod@divisor+2,w,c
  8622  00347C  5832               	subwfb	___llmod@dividend+2,w,c
  8623  00347E  5037               	movf	___llmod@divisor+3,w,c
  8624  003480  5833               	subwfb	___llmod@dividend+3,w,c
  8625  003482  A0D8               	btfss	status,0,c
  8626  003484  D008               	goto	l6386
  8627  003486  5034               	movf	___llmod@divisor,w,c
  8628  003488  5E30               	subwf	___llmod@dividend,f,c
  8629  00348A  5035               	movf	___llmod@divisor+1,w,c
  8630  00348C  5A31               	subwfb	___llmod@dividend+1,f,c
  8631  00348E  5036               	movf	___llmod@divisor+2,w,c
  8632  003490  5A32               	subwfb	___llmod@dividend+2,f,c
  8633  003492  5037               	movf	___llmod@divisor+3,w,c
  8634  003494  5A33               	subwfb	___llmod@dividend+3,f,c
  8635  003496                     l6386:
  8636  003496  90D8               	bcf	status,0,c
  8637  003498  3237               	rrcf	___llmod@divisor+3,f,c
  8638  00349A  3236               	rrcf	___llmod@divisor+2,f,c
  8639  00349C  3235               	rrcf	___llmod@divisor+1,f,c
  8640  00349E  3234               	rrcf	___llmod@divisor,f,c
  8641  0034A0  2E38               	decfsz	___llmod@counter,f,c
  8642  0034A2  D7E7               	goto	l6382
  8643  0034A4                     l1252:
  8644  0034A4  C030  F030         	movff	___llmod@dividend,?___llmod
  8645  0034A8  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
  8646  0034AC  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
  8647  0034B0  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
  8648  0034B4  0012               	return		;funcret
  8649  0034B6                     __end_of___llmod:
  8650                           	opt stack 0
  8651                           tblptru	equ	0xFF8
  8652                           tblptrh	equ	0xFF7
  8653                           tblptrl	equ	0xFF6
  8654                           tablat	equ	0xFF5
  8655                           prodh	equ	0xFF4
  8656                           prodl	equ	0xFF3
  8657                           postinc0	equ	0xFEE
  8658                           wreg	equ	0xFE8
  8659                           postdec1	equ	0xFE5
  8660                           fsr1l	equ	0xFE1
  8661                           indf2	equ	0xFDF
  8662                           postinc2	equ	0xFDE
  8663                           postdec2	equ	0xFDD
  8664                           fsr2h	equ	0xFDA
  8665                           fsr2l	equ	0xFD9
  8666                           status	equ	0xFD8
  8667                           
  8668 ;; *************** function ___ftsub *****************
  8669 ;; Defined at:
  8670 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;  f1              3   46[BANK0 ] float 
  8673 ;;  f2              3   49[BANK0 ] float 
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;		None
  8676 ;; Return value:  Size  Location     Type
  8677 ;;                  3   46[BANK0 ] float 
  8678 ;; Registers used:
  8679 ;;		wreg, status,2, status,0, cstack
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8685 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8688 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;Total ram usage:        6 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; Hardware stack levels required when called:    5
  8692 ;; This function calls:
  8693 ;;		___ftadd
  8694 ;; This function is called by:
  8695 ;;		_sortBattery
  8696 ;;		_printf
  8697 ;; This function uses a non-reentrant model
  8698 ;;
  8699                           
  8700                           	psect	text24
  8701  0036E2                     __ptext24:
  8702                           	opt stack 0
  8703  0036E2                     ___ftsub:
  8704                           	opt stack 23
  8705                           
  8706                           ;incstack = 0
  8707  0036E2  0100               	movlb	0	; () banked
  8708  0036E4  51B1               	movf	___ftsub@f2& (0+255),w,b
  8709  0036E6  0100               	movlb	0	; () banked
  8710  0036E8  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8711  0036EA  0100               	movlb	0	; () banked
  8712  0036EC  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8713  0036EE  B4D8               	btfsc	status,2,c
  8714  0036F0  D009               	goto	l6268
  8715                           
  8716                           ; BSR set to: 0
  8717  0036F2  0E00               	movlw	0
  8718  0036F4  0100               	movlb	0	; () banked
  8719  0036F6  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
  8720  0036F8  0E00               	movlw	0
  8721  0036FA  0100               	movlb	0	; () banked
  8722  0036FC  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8723  0036FE  0E80               	movlw	128
  8724  003700  0100               	movlb	0	; () banked
  8725  003702  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8726  003704                     l6268:
  8727                           
  8728                           ; BSR set to: 0
  8729  003704  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
  8730  003708  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
  8731  00370C  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
  8732  003710  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
  8733  003714  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
  8734  003718  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
  8735  00371C  EC0B  F00D         	call	___ftadd	;wreg free
  8736  003720  C0A2  F0AE         	movff	?___ftadd,?___ftsub
  8737  003724  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
  8738  003728  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
  8739  00372C  0012               	return	
  8740  00372E                     __end_of___ftsub:
  8741                           	opt stack 0
  8742                           tblptru	equ	0xFF8
  8743                           tblptrh	equ	0xFF7
  8744                           tblptrl	equ	0xFF6
  8745                           tablat	equ	0xFF5
  8746                           prodh	equ	0xFF4
  8747                           prodl	equ	0xFF3
  8748                           postinc0	equ	0xFEE
  8749                           wreg	equ	0xFE8
  8750                           postdec1	equ	0xFE5
  8751                           fsr1l	equ	0xFE1
  8752                           indf2	equ	0xFDF
  8753                           postinc2	equ	0xFDE
  8754                           postdec2	equ	0xFDD
  8755                           fsr2h	equ	0xFDA
  8756                           fsr2l	equ	0xFD9
  8757                           status	equ	0xFD8
  8758                           
  8759 ;; *************** function ___ftneg *****************
  8760 ;; Defined at:
  8761 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;  f1              3   34[COMRAM] float 
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;		None
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  3   34[COMRAM] float 
  8768 ;; Registers used:
  8769 ;;		wreg, status,2, status,0
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8775 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8779 ;;Total ram usage:        3 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    3
  8782 ;; This function calls:
  8783 ;;		Nothing
  8784 ;; This function is called by:
  8785 ;;		_printf
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           	psect	text25
  8790  003976                     __ptext25:
  8791                           	opt stack 0
  8792  003976                     ___ftneg:
  8793                           	opt stack 25
  8794                           
  8795                           ;incstack = 0
  8796  003976  5023               	movf	___ftneg@f1,w,c
  8797  003978  1024               	iorwf	___ftneg@f1+1,w,c
  8798  00397A  1025               	iorwf	___ftneg@f1+2,w,c
  8799  00397C  B4D8               	btfsc	status,2,c
  8800  00397E  D006               	goto	l1192
  8801  003980  0E00               	movlw	0
  8802  003982  1A23               	xorwf	___ftneg@f1,f,c
  8803  003984  0E00               	movlw	0
  8804  003986  1A24               	xorwf	___ftneg@f1+1,f,c
  8805  003988  0E80               	movlw	128
  8806  00398A  1A25               	xorwf	___ftneg@f1+2,f,c
  8807  00398C                     l1192:
  8808  00398C  C023  F023         	movff	___ftneg@f1,?___ftneg
  8809  003990  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
  8810  003994  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
  8811  003998  0012               	return		;funcret
  8812  00399A                     __end_of___ftneg:
  8813                           	opt stack 0
  8814                           tblptru	equ	0xFF8
  8815                           tblptrh	equ	0xFF7
  8816                           tblptrl	equ	0xFF6
  8817                           tablat	equ	0xFF5
  8818                           prodh	equ	0xFF4
  8819                           prodl	equ	0xFF3
  8820                           postinc0	equ	0xFEE
  8821                           wreg	equ	0xFE8
  8822                           postdec1	equ	0xFE5
  8823                           fsr1l	equ	0xFE1
  8824                           indf2	equ	0xFDF
  8825                           postinc2	equ	0xFDE
  8826                           postdec2	equ	0xFDD
  8827                           fsr2h	equ	0xFDA
  8828                           fsr2l	equ	0xFD9
  8829                           status	equ	0xFD8
  8830                           
  8831 ;; *************** function ___ftge *****************
  8832 ;; Defined at:
  8833 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;  ff1             3   46[COMRAM] float 
  8836 ;;  ff2             3   49[COMRAM] float 
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;		None
  8839 ;; Return value:  Size  Location     Type
  8840 ;;		None               void
  8841 ;; Registers used:
  8842 ;;		wreg, status,2, status,0
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8848 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;Total ram usage:        9 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    3
  8855 ;; This function calls:
  8856 ;;		Nothing
  8857 ;; This function is called by:
  8858 ;;		_sortBattery
  8859 ;;		_printf
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           	psect	text26
  8864  00306E                     __ptext26:
  8865                           	opt stack 0
  8866  00306E                     ___ftge:
  8867                           	opt stack 25
  8868                           
  8869                           ;incstack = 0
  8870  00306E  AE31               	btfss	___ftge@ff1+2,7,c
  8871  003070  D016               	goto	l6288
  8872  003072  C02F  F035         	movff	___ftge@ff1,??___ftge
  8873  003076  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
  8874  00307A  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
  8875  00307E  1E35               	comf	??___ftge,f,c
  8876  003080  1E36               	comf	??___ftge+1,f,c
  8877  003082  1E37               	comf	??___ftge+2,f,c
  8878  003084  2A35               	incf	??___ftge,f,c
  8879  003086  0E00               	movlw	0
  8880  003088  2236               	addwfc	??___ftge+1,f,c
  8881  00308A  2237               	addwfc	??___ftge+2,f,c
  8882  00308C  0E00               	movlw	0
  8883  00308E  2435               	addwf	??___ftge,w,c
  8884  003090  6E2F               	movwf	___ftge@ff1,c
  8885  003092  0E00               	movlw	0
  8886  003094  2036               	addwfc	??___ftge+1,w,c
  8887  003096  6E30               	movwf	___ftge@ff1+1,c
  8888  003098  0E80               	movlw	128
  8889  00309A  2037               	addwfc	??___ftge+2,w,c
  8890  00309C  6E31               	movwf	___ftge@ff1+2,c
  8891  00309E                     l6288:
  8892  00309E  AE34               	btfss	___ftge@ff2+2,7,c
  8893  0030A0  D016               	goto	l6292
  8894  0030A2  C032  F035         	movff	___ftge@ff2,??___ftge
  8895  0030A6  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
  8896  0030AA  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
  8897  0030AE  1E35               	comf	??___ftge,f,c
  8898  0030B0  1E36               	comf	??___ftge+1,f,c
  8899  0030B2  1E37               	comf	??___ftge+2,f,c
  8900  0030B4  2A35               	incf	??___ftge,f,c
  8901  0030B6  0E00               	movlw	0
  8902  0030B8  2236               	addwfc	??___ftge+1,f,c
  8903  0030BA  2237               	addwfc	??___ftge+2,f,c
  8904  0030BC  0E00               	movlw	0
  8905  0030BE  2435               	addwf	??___ftge,w,c
  8906  0030C0  6E32               	movwf	___ftge@ff2,c
  8907  0030C2  0E00               	movlw	0
  8908  0030C4  2036               	addwfc	??___ftge+1,w,c
  8909  0030C6  6E33               	movwf	___ftge@ff2+1,c
  8910  0030C8  0E80               	movlw	128
  8911  0030CA  2037               	addwfc	??___ftge+2,w,c
  8912  0030CC  6E34               	movwf	___ftge@ff2+2,c
  8913  0030CE                     l6292:
  8914  0030CE  0E00               	movlw	0
  8915  0030D0  1A2F               	xorwf	___ftge@ff1,f,c
  8916  0030D2  0E00               	movlw	0
  8917  0030D4  1A30               	xorwf	___ftge@ff1+1,f,c
  8918  0030D6  0E80               	movlw	128
  8919  0030D8  1A31               	xorwf	___ftge@ff1+2,f,c
  8920  0030DA  0E00               	movlw	0
  8921  0030DC  1A32               	xorwf	___ftge@ff2,f,c
  8922  0030DE  0E00               	movlw	0
  8923  0030E0  1A33               	xorwf	___ftge@ff2+1,f,c
  8924  0030E2  0E80               	movlw	128
  8925  0030E4  1A34               	xorwf	___ftge@ff2+2,f,c
  8926  0030E6  5032               	movf	___ftge@ff2,w,c
  8927  0030E8  5C2F               	subwf	___ftge@ff1,w,c
  8928  0030EA  5033               	movf	___ftge@ff2+1,w,c
  8929  0030EC  5830               	subwfb	___ftge@ff1+1,w,c
  8930  0030EE  5034               	movf	___ftge@ff2+2,w,c
  8931  0030F0  5831               	subwfb	___ftge@ff1+2,w,c
  8932  0030F2  B0D8               	btfsc	status,0,c
  8933  0030F4  D002               	goto	l6298
  8934  0030F6  90D8               	bcf	status,0,c
  8935  0030F8  0012               	return	
  8936  0030FA                     l6298:
  8937  0030FA  80D8               	bsf	status,0,c
  8938  0030FC  0012               	return	
  8939  0030FE                     __end_of___ftge:
  8940                           	opt stack 0
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           postinc0	equ	0xFEE
  8948                           wreg	equ	0xFE8
  8949                           postdec1	equ	0xFE5
  8950                           fsr1l	equ	0xFE1
  8951                           indf2	equ	0xFDF
  8952                           postinc2	equ	0xFDE
  8953                           postdec2	equ	0xFDD
  8954                           fsr2h	equ	0xFDA
  8955                           fsr2l	equ	0xFD9
  8956                           status	equ	0xFD8
  8957                           
  8958 ;; *************** function _lcdClear *****************
  8959 ;; Defined at:
  8960 ;;		line 74 in file "lcd.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;		None
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;		None
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  1    wreg      void 
  8967 ;; Registers used:
  8968 ;;		wreg, status,2, status,0, cstack
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8978 ;;Total ram usage:        0 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:    5
  8981 ;; This function calls:
  8982 ;;		_lcdInst
  8983 ;; This function is called by:
  8984 ;;		_main
  8985 ;;		_sortBattery
  8986 ;;		_showMainMenu
  8987 ;;		_showRunSelect
  8988 ;;		_showRunMenu
  8989 ;;		_showRunTime
  8990 ;;		_showRunStats
  8991 ;;		_pause
  8992 ;;		_showDateTime
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           	psect	text27
  8997  003A6C                     __ptext27:
  8998                           	opt stack 0
  8999  003A6C                     _lcdClear:
  9000                           	opt stack 24
  9001                           
  9002                           ;lcd.c: 75: lcdInst(0b00000001);
  9003                           
  9004                           ;incstack = 0
  9005  003A6C  0E01               	movlw	1
  9006  003A6E  ECDE  F01C         	call	_lcdInst
  9007  003A72  0012               	return		;funcret
  9008  003A74                     __end_of_lcdClear:
  9009                           	opt stack 0
  9010                           tblptru	equ	0xFF8
  9011                           tblptrh	equ	0xFF7
  9012                           tblptrl	equ	0xFF6
  9013                           tablat	equ	0xFF5
  9014                           prodh	equ	0xFF4
  9015                           prodl	equ	0xFF3
  9016                           postinc0	equ	0xFEE
  9017                           wreg	equ	0xFE8
  9018                           postdec1	equ	0xFE5
  9019                           fsr1l	equ	0xFE1
  9020                           indf2	equ	0xFDF
  9021                           postinc2	equ	0xFDE
  9022                           postdec2	equ	0xFDD
  9023                           fsr2h	equ	0xFDA
  9024                           fsr2l	equ	0xFD9
  9025                           status	equ	0xFD8
  9026                           
  9027 ;; *************** function _readPastRun *****************
  9028 ;; Defined at:
  9029 ;;		line 23 in file "eeprom.c"
  9030 ;; Parameters:    Size  Location     Type
  9031 ;;  run             2    0[BANK0 ] int 
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;  i               2   16[BANK0 ] int 
  9034 ;;  data           14    2[BANK0 ] int [7]
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  2    0[BANK0 ] PTR int 
  9037 ;; Registers used:
  9038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9044 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9047 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9048 ;;Total ram usage:       18 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    4
  9051 ;; This function calls:
  9052 ;;		___wmul
  9053 ;;		_eepromRead
  9054 ;; This function is called by:
  9055 ;;		_showInterface
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           	psect	text28
  9060  002FDC                     __ptext28:
  9061                           	opt stack 0
  9062  002FDC                     _readPastRun:
  9063                           	opt stack 25
  9064                           
  9065                           ;eeprom.c: 24: int data[7];
  9066                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
  9067                           
  9068                           ;incstack = 0
  9069  002FDC  0E00               	movlw	0
  9070  002FDE  0100               	movlb	0	; () banked
  9071  002FE0  6F91               	movwf	(readPastRun@i+1)& (0+255),b
  9072  002FE2  0E00               	movlw	0
  9073  002FE4  6F90               	movwf	readPastRun@i& (0+255),b
  9074  002FE6                     l6938:
  9075                           
  9076                           ; BSR set to: 0
  9077  002FE6  0100               	movlb	0	; () banked
  9078  002FE8  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
  9079  002FEA  D008               	goto	l6942
  9080  002FEC  0100               	movlb	0	; () banked
  9081  002FEE  5191               	movf	(readPastRun@i+1)& (0+255),w,b
  9082  002FF0  E137               	bnz	l6948
  9083  002FF2  0E07               	movlw	7
  9084  002FF4  0100               	movlb	0	; () banked
  9085  002FF6  5D90               	subwf	readPastRun@i& (0+255),w,b
  9086  002FF8  B0D8               	btfsc	status,0,c
  9087  002FFA  D032               	goto	l6948
  9088  002FFC                     l6942:
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
  9092  002FFC  C080  F031         	movff	readPastRun@run,___wmul@multiplier
  9093  003000  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
  9094  003004  0E00               	movlw	0
  9095  003006  6E34               	movwf	___wmul@multiplicand+1,c
  9096  003008  0E07               	movlw	7
  9097  00300A  6E33               	movwf	___wmul@multiplicand,c
  9098  00300C  EC96  F01C         	call	___wmul	;wreg free
  9099  003010  0100               	movlb	0	; () banked
  9100  003012  5190               	movf	readPastRun@i& (0+255),w,b
  9101  003014  2631               	addwf	?___wmul,f,c
  9102  003016  0100               	movlb	0	; () banked
  9103  003018  5191               	movf	(readPastRun@i+1)& (0+255),w,b
  9104  00301A  2232               	addwfc	?___wmul+1,f,c
  9105  00301C  0E01               	movlw	1
  9106  00301E  2631               	addwf	?___wmul,f,c
  9107  003020  0E00               	movlw	0
  9108  003022  2232               	addwfc	?___wmul+1,f,c
  9109  003024  C031  F037         	movff	?___wmul,eepromRead@address
  9110  003028  C032  F038         	movff	?___wmul+1,eepromRead@address+1
  9111  00302C  0E00               	movlw	0
  9112  00302E  BE38               	btfsc	eepromRead@address+1,7,c
  9113  003030  0EFF               	movlw	-1
  9114  003032  6E39               	movwf	eepromRead@address+2,c
  9115  003034  6E3A               	movwf	eepromRead@address+3,c
  9116  003036  EC0E  F01D         	call	_eepromRead	;wreg free
  9117  00303A  90D8               	bcf	status,0,c
  9118  00303C  0100               	movlb	0	; () banked
  9119  00303E  3590               	rlcf	readPastRun@i& (0+255),w,b
  9120  003040  6ED9               	movwf	fsr2l,c
  9121  003042  0100               	movlb	0	; () banked
  9122  003044  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
  9123  003046  6EDA               	movwf	fsr2h,c
  9124  003048  0E82               	movlw	low readPastRun@data
  9125  00304A  26D9               	addwf	fsr2l,f,c
  9126  00304C  0E00               	movlw	high readPastRun@data
  9127  00304E  22DA               	addwfc	fsr2h,f,c
  9128  003050  C037  FFDE         	movff	?_eepromRead,postinc2
  9129  003054  C038  FFDD         	movff	?_eepromRead+1,postdec2
  9130                           
  9131                           ; BSR set to: 0
  9132  003058  0100               	movlb	0	; () banked
  9133  00305A  4B90               	infsnz	readPastRun@i& (0+255),f,b
  9134  00305C  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
  9135  00305E  D7C3               	goto	l6938
  9136  003060                     l6948:
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;eeprom.c: 27: }
  9140                           ;eeprom.c: 28: return data;
  9141  003060  0E82               	movlw	low readPastRun@data
  9142  003062  0100               	movlb	0	; () banked
  9143  003064  6F80               	movwf	?_readPastRun& (0+255),b
  9144  003066  0E00               	movlw	high readPastRun@data
  9145  003068  0100               	movlb	0	; () banked
  9146  00306A  6F81               	movwf	(?_readPastRun+1)& (0+255),b
  9147  00306C  0012               	return	
  9148  00306E                     __end_of_readPastRun:
  9149                           	opt stack 0
  9150                           tblptru	equ	0xFF8
  9151                           tblptrh	equ	0xFF7
  9152                           tblptrl	equ	0xFF6
  9153                           tablat	equ	0xFF5
  9154                           prodh	equ	0xFF4
  9155                           prodl	equ	0xFF3
  9156                           postinc0	equ	0xFEE
  9157                           wreg	equ	0xFE8
  9158                           postdec1	equ	0xFE5
  9159                           fsr1l	equ	0xFE1
  9160                           indf2	equ	0xFDF
  9161                           postinc2	equ	0xFDE
  9162                           postdec2	equ	0xFDD
  9163                           fsr2h	equ	0xFDA
  9164                           fsr2l	equ	0xFD9
  9165                           status	equ	0xFD8
  9166                           
  9167 ;; *************** function _eepromRead *****************
  9168 ;; Defined at:
  9169 ;;		line 66 in file "eeprom.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;  address         4   54[COMRAM] long 
  9172 ;; Auto vars:     Size  Location     Type
  9173 ;;		None
  9174 ;; Return value:  Size  Location     Type
  9175 ;;                  2   54[COMRAM] int 
  9176 ;; Registers used:
  9177 ;;		wreg, status,2, status,0
  9178 ;; Tracked objects:
  9179 ;;		On entry : 0/0
  9180 ;;		On exit  : 0/0
  9181 ;;		Unchanged: 0/0
  9182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9183 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9186 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9187 ;;Total ram usage:        4 bytes
  9188 ;; Hardware stack levels used:    1
  9189 ;; Hardware stack levels required when called:    3
  9190 ;; This function calls:
  9191 ;;		Nothing
  9192 ;; This function is called by:
  9193 ;;		_readPastRun
  9194 ;;		_saveNewRun
  9195 ;; This function uses a non-reentrant model
  9196 ;;
  9197                           
  9198                           	psect	text29
  9199  003A1C                     __ptext29:
  9200                           	opt stack 0
  9201  003A1C                     _eepromRead:
  9202                           	opt stack 25
  9203                           
  9204                           ;eeprom.c: 67: EEADR = address;
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;incstack = 0
  9208  003A1C  C037  FFA9         	movff	eepromRead@address,4009	;volatile
  9209                           
  9210                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
  9211  003A20  5038               	movf	eepromRead@address+1,w,c
  9212  003A22  0B03               	andlw	3
  9213  003A24  6EAA               	movwf	4010,c	;volatile
  9214                           
  9215                           ;eeprom.c: 69: EECON1 = 0;
  9216  003A26  0E00               	movlw	0
  9217  003A28  6EA6               	movwf	4006,c	;volatile
  9218                           
  9219                           ;eeprom.c: 70: EECON1 = 1;
  9220  003A2A  0E01               	movlw	1
  9221  003A2C  6EA6               	movwf	4006,c	;volatile
  9222                           
  9223                           ;eeprom.c: 71: return EEDATA;
  9224  003A2E  CFA8 F037          	movff	4008,?_eepromRead	;volatile
  9225  003A32  6A38               	clrf	?_eepromRead+1,c
  9226  003A34  0012               	return	
  9227  003A36                     __end_of_eepromRead:
  9228                           	opt stack 0
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           prodh	equ	0xFF4
  9234                           prodl	equ	0xFF3
  9235                           postinc0	equ	0xFEE
  9236                           wreg	equ	0xFE8
  9237                           postdec1	equ	0xFE5
  9238                           fsr1l	equ	0xFE1
  9239                           indf2	equ	0xFDF
  9240                           postinc2	equ	0xFDE
  9241                           postdec2	equ	0xFDD
  9242                           fsr2h	equ	0xFDA
  9243                           fsr2l	equ	0xFD9
  9244                           status	equ	0xFD8
  9245                           
  9246 ;; *************** function ___wmul *****************
  9247 ;; Defined at:
  9248 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;  multiplier      2   48[COMRAM] unsigned int 
  9251 ;;  multiplicand    2   50[COMRAM] unsigned int 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  product         2   52[COMRAM] unsigned int 
  9254 ;; Return value:  Size  Location     Type
  9255 ;;                  2   48[COMRAM] unsigned int 
  9256 ;; Registers used:
  9257 ;;		wreg, status,2, status,0, prodl, prodh
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;Total ram usage:        6 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    3
  9270 ;; This function calls:
  9271 ;;		Nothing
  9272 ;; This function is called by:
  9273 ;;		_readPastRun
  9274 ;;		_fround
  9275 ;;		_scale
  9276 ;;		_printf
  9277 ;;		_saveNewRun
  9278 ;; This function uses a non-reentrant model
  9279 ;;
  9280                           
  9281                           	psect	text30
  9282  00392C                     __ptext30:
  9283                           	opt stack 0
  9284  00392C                     ___wmul:
  9285                           	opt stack 24
  9286                           
  9287                           ;incstack = 0
  9288  00392C  5031               	movf	___wmul@multiplier,w,c
  9289  00392E  0233               	mulwf	___wmul@multiplicand,c
  9290  003930  CFF3 F035          	movff	prodl,___wmul@product
  9291  003934  CFF4 F036          	movff	prodh,___wmul@product+1
  9292  003938  5031               	movf	___wmul@multiplier,w,c
  9293  00393A  0234               	mulwf	___wmul@multiplicand+1,c
  9294  00393C  50F3               	movf	prodl,w,c
  9295  00393E  2636               	addwf	___wmul@product+1,f,c
  9296  003940  5032               	movf	___wmul@multiplier+1,w,c
  9297  003942  0233               	mulwf	___wmul@multiplicand,c
  9298  003944  50F3               	movf	prodl,w,c
  9299  003946  2636               	addwf	___wmul@product+1,f,c
  9300  003948  C035  F031         	movff	___wmul@product,?___wmul
  9301  00394C  C036  F032         	movff	___wmul@product+1,?___wmul+1
  9302  003950  0012               	return	
  9303  003952                     __end_of___wmul:
  9304                           	opt stack 0
  9305                           tblptru	equ	0xFF8
  9306                           tblptrh	equ	0xFF7
  9307                           tblptrl	equ	0xFF6
  9308                           tablat	equ	0xFF5
  9309                           prodh	equ	0xFF4
  9310                           prodl	equ	0xFF3
  9311                           postinc0	equ	0xFEE
  9312                           wreg	equ	0xFE8
  9313                           postdec1	equ	0xFE5
  9314                           fsr1l	equ	0xFE1
  9315                           indf2	equ	0xFDF
  9316                           postinc2	equ	0xFDE
  9317                           postdec2	equ	0xFDD
  9318                           fsr2h	equ	0xFDA
  9319                           fsr2l	equ	0xFD9
  9320                           status	equ	0xFD8
  9321                           
  9322 ;; *************** function _initRTC *****************
  9323 ;; Defined at:
  9324 ;;		line 19 in file "RTC.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;		None
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;		None
  9329 ;; Return value:  Size  Location     Type
  9330 ;;                  1    wreg      void 
  9331 ;; Registers used:
  9332 ;;		wreg, status,2, status,0, cstack
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;Total ram usage:        0 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    5
  9345 ;; This function calls:
  9346 ;;		_I2C_Master_Init
  9347 ;; This function is called by:
  9348 ;;		_showInterface
  9349 ;;		_showDateTime
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text31
  9354  003A4E                     __ptext31:
  9355                           	opt stack 0
  9356  003A4E                     _initRTC:
  9357                           	opt stack 24
  9358                           
  9359                           ;RTC.c: 20: I2C_Master_Init(10000);
  9360                           
  9361                           ;incstack = 0
  9362  003A4E  0E10               	movlw	16
  9363  003A50  6E30               	movwf	I2C_Master_Init@c,c
  9364  003A52  0E27               	movlw	39
  9365  003A54  6E31               	movwf	I2C_Master_Init@c+1,c
  9366  003A56  0E00               	movlw	0
  9367  003A58  6E32               	movwf	I2C_Master_Init@c+2,c
  9368  003A5A  0E00               	movlw	0
  9369  003A5C  6E33               	movwf	I2C_Master_Init@c+3,c
  9370  003A5E  EC1C  F01B         	call	_I2C_Master_Init	;wreg free
  9371  003A62  0012               	return		;funcret
  9372  003A64                     __end_of_initRTC:
  9373                           	opt stack 0
  9374                           tblptru	equ	0xFF8
  9375                           tblptrh	equ	0xFF7
  9376                           tblptrl	equ	0xFF6
  9377                           tablat	equ	0xFF5
  9378                           prodh	equ	0xFF4
  9379                           prodl	equ	0xFF3
  9380                           postinc0	equ	0xFEE
  9381                           wreg	equ	0xFE8
  9382                           postdec1	equ	0xFE5
  9383                           fsr1l	equ	0xFE1
  9384                           indf2	equ	0xFDF
  9385                           postinc2	equ	0xFDE
  9386                           postdec2	equ	0xFDD
  9387                           fsr2h	equ	0xFDA
  9388                           fsr2l	equ	0xFD9
  9389                           status	equ	0xFD8
  9390                           
  9391 ;; *************** function _I2C_Master_Init *****************
  9392 ;; Defined at:
  9393 ;;		line 13 in file "I2C.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;  c               4   47[COMRAM] const unsigned long 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;		None
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  1    wreg      void 
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0, cstack
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9407 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9409 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9411 ;;Total ram usage:        8 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:    4
  9414 ;; This function calls:
  9415 ;;		___lldiv
  9416 ;; This function is called by:
  9417 ;;		_initRTC
  9418 ;;		_testFrequency
  9419 ;; This function uses a non-reentrant model
  9420 ;;
  9421                           
  9422                           	psect	text32
  9423  003638                     __ptext32:
  9424                           	opt stack 0
  9425  003638                     _I2C_Master_Init:
  9426                           	opt stack 24
  9427                           
  9428                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  9429                           
  9430                           ;incstack = 0
  9431  003638  0E00               	movlw	0
  9432  00363A  6EC7               	movwf	4039,c	;volatile
  9433                           
  9434                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  9435  00363C  0E28               	movlw	40
  9436  00363E  6EC6               	movwf	4038,c	;volatile
  9437                           
  9438                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  9439  003640  0E00               	movlw	0
  9440  003642  6EC5               	movwf	4037,c	;volatile
  9441                           
  9442                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  9443  003644  0E80               	movlw	128
  9444  003646  6E23               	movwf	___lldiv@dividend,c
  9445  003648  0E96               	movlw	150
  9446  00364A  6E24               	movwf	___lldiv@dividend+1,c
  9447  00364C  0E98               	movlw	152
  9448  00364E  6E25               	movwf	___lldiv@dividend+2,c
  9449  003650  0E00               	movlw	0
  9450  003652  6E26               	movwf	___lldiv@dividend+3,c
  9451  003654  C030  F034         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  9452  003658  C031  F035         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  9453  00365C  C032  F036         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  9454  003660  C033  F037         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  9455  003664  0E02               	movlw	2
  9456  003666                     u7075:
  9457  003666  90D8               	bcf	status,0,c
  9458  003668  3634               	rlcf	??_I2C_Master_Init,f,c
  9459  00366A  3635               	rlcf	??_I2C_Master_Init+1,f,c
  9460  00366C  3636               	rlcf	??_I2C_Master_Init+2,f,c
  9461  00366E  3637               	rlcf	??_I2C_Master_Init+3,f,c
  9462  003670  2EE8               	decfsz	wreg,f,c
  9463  003672  D7F9               	goto	u7075
  9464  003674  C034  F027         	movff	??_I2C_Master_Init,___lldiv@divisor
  9465  003678  C035  F028         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9466  00367C  C036  F029         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9467  003680  C037  F02A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9468  003684  EC05  F019         	call	___lldiv	;wreg free
  9469  003688  0423               	decf	?___lldiv,w,c
  9470  00368A  6EC8               	movwf	4040,c	;volatile
  9471                           
  9472                           ;I2C.c: 20: TRISC3 = 1;
  9473  00368C  8694               	bsf	3988,3,c	;volatile
  9474                           
  9475                           ;I2C.c: 21: TRISC4 = 1;
  9476  00368E  8894               	bsf	3988,4,c	;volatile
  9477  003690  0012               	return		;funcret
  9478  003692                     __end_of_I2C_Master_Init:
  9479                           	opt stack 0
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           postinc0	equ	0xFEE
  9487                           wreg	equ	0xFE8
  9488                           postdec1	equ	0xFE5
  9489                           fsr1l	equ	0xFE1
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function ___lldiv *****************
  9498 ;; Defined at:
  9499 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  dividend        4   34[COMRAM] unsigned long 
  9502 ;;  divisor         4   38[COMRAM] unsigned long 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  quotient        4   42[COMRAM] unsigned long 
  9505 ;;  counter         1   46[COMRAM] unsigned char 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  4   34[COMRAM] unsigned long 
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9515 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;Total ram usage:       13 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    3
  9522 ;; This function calls:
  9523 ;;		Nothing
  9524 ;; This function is called by:
  9525 ;;		_I2C_Master_Init
  9526 ;;		_printf
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text33
  9531  00320A                     __ptext33:
  9532                           	opt stack 0
  9533  00320A                     ___lldiv:
  9534                           	opt stack 25
  9535                           
  9536                           ;incstack = 0
  9537  00320A  0E00               	movlw	0
  9538  00320C  6E2B               	movwf	___lldiv@quotient,c
  9539  00320E  0E00               	movlw	0
  9540  003210  6E2C               	movwf	___lldiv@quotient+1,c
  9541  003212  0E00               	movlw	0
  9542  003214  6E2D               	movwf	___lldiv@quotient+2,c
  9543  003216  0E00               	movlw	0
  9544  003218  6E2E               	movwf	___lldiv@quotient+3,c
  9545  00321A  5027               	movf	___lldiv@divisor,w,c
  9546  00321C  1028               	iorwf	___lldiv@divisor+1,w,c
  9547  00321E  1029               	iorwf	___lldiv@divisor+2,w,c
  9548  003220  102A               	iorwf	___lldiv@divisor+3,w,c
  9549  003222  B4D8               	btfsc	status,2,c
  9550  003224  D02A               	goto	l1242
  9551  003226  0E01               	movlw	1
  9552  003228  6E2F               	movwf	___lldiv@counter,c
  9553  00322A  D006               	goto	l6360
  9554  00322C                     l6358:
  9555  00322C  90D8               	bcf	status,0,c
  9556  00322E  3627               	rlcf	___lldiv@divisor,f,c
  9557  003230  3628               	rlcf	___lldiv@divisor+1,f,c
  9558  003232  3629               	rlcf	___lldiv@divisor+2,f,c
  9559  003234  362A               	rlcf	___lldiv@divisor+3,f,c
  9560  003236  2A2F               	incf	___lldiv@counter,f,c
  9561  003238                     l6360:
  9562  003238  AE2A               	btfss	___lldiv@divisor+3,7,c
  9563  00323A  D7F8               	goto	l6358
  9564  00323C                     l6362:
  9565  00323C  90D8               	bcf	status,0,c
  9566  00323E  362B               	rlcf	___lldiv@quotient,f,c
  9567  003240  362C               	rlcf	___lldiv@quotient+1,f,c
  9568  003242  362D               	rlcf	___lldiv@quotient+2,f,c
  9569  003244  362E               	rlcf	___lldiv@quotient+3,f,c
  9570  003246  5027               	movf	___lldiv@divisor,w,c
  9571  003248  5C23               	subwf	___lldiv@dividend,w,c
  9572  00324A  5028               	movf	___lldiv@divisor+1,w,c
  9573  00324C  5824               	subwfb	___lldiv@dividend+1,w,c
  9574  00324E  5029               	movf	___lldiv@divisor+2,w,c
  9575  003250  5825               	subwfb	___lldiv@dividend+2,w,c
  9576  003252  502A               	movf	___lldiv@divisor+3,w,c
  9577  003254  5826               	subwfb	___lldiv@dividend+3,w,c
  9578  003256  A0D8               	btfss	status,0,c
  9579  003258  D009               	goto	l6370
  9580  00325A  5027               	movf	___lldiv@divisor,w,c
  9581  00325C  5E23               	subwf	___lldiv@dividend,f,c
  9582  00325E  5028               	movf	___lldiv@divisor+1,w,c
  9583  003260  5A24               	subwfb	___lldiv@dividend+1,f,c
  9584  003262  5029               	movf	___lldiv@divisor+2,w,c
  9585  003264  5A25               	subwfb	___lldiv@dividend+2,f,c
  9586  003266  502A               	movf	___lldiv@divisor+3,w,c
  9587  003268  5A26               	subwfb	___lldiv@dividend+3,f,c
  9588  00326A  802B               	bsf	___lldiv@quotient,0,c
  9589  00326C                     l6370:
  9590  00326C  90D8               	bcf	status,0,c
  9591  00326E  322A               	rrcf	___lldiv@divisor+3,f,c
  9592  003270  3229               	rrcf	___lldiv@divisor+2,f,c
  9593  003272  3228               	rrcf	___lldiv@divisor+1,f,c
  9594  003274  3227               	rrcf	___lldiv@divisor,f,c
  9595  003276  2E2F               	decfsz	___lldiv@counter,f,c
  9596  003278  D7E1               	goto	l6362
  9597  00327A                     l1242:
  9598  00327A  C02B  F023         	movff	___lldiv@quotient,?___lldiv
  9599  00327E  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
  9600  003282  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
  9601  003286  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
  9602  00328A  0012               	return		;funcret
  9603  00328C                     __end_of___lldiv:
  9604                           	opt stack 0
  9605                           tblptru	equ	0xFF8
  9606                           tblptrh	equ	0xFF7
  9607                           tblptrl	equ	0xFF6
  9608                           tablat	equ	0xFF5
  9609                           prodh	equ	0xFF4
  9610                           prodl	equ	0xFF3
  9611                           postinc0	equ	0xFEE
  9612                           wreg	equ	0xFE8
  9613                           postdec1	equ	0xFE5
  9614                           fsr1l	equ	0xFE1
  9615                           indf2	equ	0xFDF
  9616                           postinc2	equ	0xFDE
  9617                           postdec2	equ	0xFDD
  9618                           fsr2h	equ	0xFDA
  9619                           fsr2l	equ	0xFD9
  9620                           status	equ	0xFD8
  9621                           
  9622 ;; *************** function _pinSetup *****************
  9623 ;; Defined at:
  9624 ;;		line 287 in file "main.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;		None
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;                  1    wreg      void 
  9631 ;; Registers used:
  9632 ;;		wreg, status,2, status,0
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9642 ;;Total ram usage:        0 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; Hardware stack levels required when called:    3
  9645 ;; This function calls:
  9646 ;;		Nothing
  9647 ;; This function is called by:
  9648 ;;		_main
  9649 ;;		_debug
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           	psect	text34
  9654  003856                     __ptext34:
  9655                           	opt stack 0
  9656  003856                     _pinSetup:
  9657                           	opt stack 27
  9658                           
  9659                           ;main.c: 293: TRISA = 0xFF;
  9660                           
  9661                           ;incstack = 0
  9662  003856  6892               	setf	3986,c	;volatile
  9663                           
  9664                           ;main.c: 294: TRISB = 0xFF;
  9665  003858  6893               	setf	3987,c	;volatile
  9666                           
  9667                           ;main.c: 295: TRISC = 0b11000000;
  9668  00385A  0EC0               	movlw	192
  9669  00385C  6E94               	movwf	3988,c	;volatile
  9670                           
  9671                           ;main.c: 296: TRISD = 0x00;
  9672  00385E  0E00               	movlw	0
  9673  003860  6E95               	movwf	3989,c	;volatile
  9674                           
  9675                           ;main.c: 297: TRISE = 0x00;
  9676  003862  0E00               	movlw	0
  9677  003864  6E96               	movwf	3990,c	;volatile
  9678                           
  9679                           ;main.c: 299: LATA = 0x00;
  9680  003866  0E00               	movlw	0
  9681  003868  6E89               	movwf	3977,c	;volatile
  9682                           
  9683                           ;main.c: 300: LATB = 0x00;
  9684  00386A  0E00               	movlw	0
  9685  00386C  6E8A               	movwf	3978,c	;volatile
  9686                           
  9687                           ;main.c: 301: LATC = 0x00;
  9688  00386E  0E00               	movlw	0
  9689  003870  6E8B               	movwf	3979,c	;volatile
  9690                           
  9691                           ;main.c: 302: LATD = 0x00;
  9692  003872  0E00               	movlw	0
  9693  003874  6E8C               	movwf	3980,c	;volatile
  9694                           
  9695                           ;main.c: 303: LATE = 0x00;
  9696  003876  0E00               	movlw	0
  9697  003878  6E8D               	movwf	3981,c	;volatile
  9698                           
  9699                           ;main.c: 305: ADCON0 = 0x00;
  9700  00387A  0E00               	movlw	0
  9701  00387C  6EC2               	movwf	4034,c	;volatile
  9702                           
  9703                           ;main.c: 307: ADCON1 |= 0x0B;
  9704  00387E  0E0B               	movlw	11
  9705  003880  12C1               	iorwf	4033,f,c	;volatile
  9706                           
  9707                           ;main.c: 312: ADCON2 = 0;
  9708  003882  0E00               	movlw	0
  9709  003884  6EC0               	movwf	4032,c	;volatile
  9710                           
  9711                           ;main.c: 313: ADCON2 |= 0b010;
  9712  003886  82C0               	bsf	4032,1,c	;volatile
  9713                           
  9714                           ;main.c: 314: ADCON2 |= 0b110<<3;
  9715  003888  0E30               	movlw	48
  9716  00388A  12C0               	iorwf	4032,f,c	;volatile
  9717                           
  9718                           ;main.c: 315: ADCON2 |= 1<<7;
  9719  00388C  8EC0               	bsf	4032,7,c	;volatile
  9720                           
  9721                           ;main.c: 318: INT1IE = 1;
  9722  00388E  86F0               	bsf	intcon3,3,c	;volatile
  9723                           
  9724                           ;main.c: 319: INT0IE = 1;
  9725  003890  88F2               	bsf	intcon,4,c	;volatile
  9726                           
  9727                           ;main.c: 320: (INTCONbits.GIE = 1);
  9728  003892  8EF2               	bsf	intcon,7,c	;volatile
  9729  003894  0012               	return		;funcret
  9730  003896                     __end_of_pinSetup:
  9731                           	opt stack 0
  9732                           tblptru	equ	0xFF8
  9733                           tblptrh	equ	0xFF7
  9734                           tblptrl	equ	0xFF6
  9735                           tablat	equ	0xFF5
  9736                           prodh	equ	0xFF4
  9737                           prodl	equ	0xFF3
  9738                           intcon	equ	0xFF2
  9739                           intcon3	equ	0xFF0
  9740                           postinc0	equ	0xFEE
  9741                           wreg	equ	0xFE8
  9742                           postdec1	equ	0xFE5
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           
  9751 ;; *************** function _lcdHome *****************
  9752 ;; Defined at:
  9753 ;;		line 70 in file "lcd.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;		None
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;		None
  9758 ;; Return value:  Size  Location     Type
  9759 ;;                  2   20[None  ] int 
  9760 ;; Registers used:
  9761 ;;		wreg, status,2, status,0, cstack
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;Total ram usage:        0 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    5
  9774 ;; This function calls:
  9775 ;;		_lcdInst
  9776 ;; This function is called by:
  9777 ;;		_main
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           	psect	text35
  9782  003A74                     __ptext35:
  9783                           	opt stack 0
  9784  003A74                     _lcdHome:
  9785                           	opt stack 25
  9786                           
  9787                           ;lcd.c: 71: lcdInst(0b11000000);
  9788                           
  9789                           ;incstack = 0
  9790  003A74  0EC0               	movlw	192
  9791  003A76  ECDE  F01C         	call	_lcdInst
  9792  003A7A  0012               	return		;funcret
  9793  003A7C                     __end_of_lcdHome:
  9794                           	opt stack 0
  9795                           tblptru	equ	0xFF8
  9796                           tblptrh	equ	0xFF7
  9797                           tblptrl	equ	0xFF6
  9798                           tablat	equ	0xFF5
  9799                           prodh	equ	0xFF4
  9800                           prodl	equ	0xFF3
  9801                           intcon	equ	0xFF2
  9802                           intcon3	equ	0xFF0
  9803                           postinc0	equ	0xFEE
  9804                           wreg	equ	0xFE8
  9805                           postdec1	equ	0xFE5
  9806                           fsr1l	equ	0xFE1
  9807                           indf2	equ	0xFDF
  9808                           postinc2	equ	0xFDE
  9809                           postdec2	equ	0xFDD
  9810                           fsr2h	equ	0xFDA
  9811                           fsr2l	equ	0xFD9
  9812                           status	equ	0xFD8
  9813                           
  9814 ;; *************** function _initServo *****************
  9815 ;; Defined at:
  9816 ;;		line 21 in file "servo.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;  motor           2   94[BANK0 ] PTR int 
  9819 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9820 ;;  angle           2   96[BANK0 ] int 
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  i               2  102[BANK0 ] int 
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  1    wreg      void 
  9825 ;; Registers used:
  9826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9836 ;;Total ram usage:       10 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    7
  9839 ;; This function calls:
  9840 ;;		_initTimer
  9841 ;;		_setAngle
  9842 ;;		_startTimer
  9843 ;; This function is called by:
  9844 ;;		_main
  9845 ;;		_debug
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           	psect	text36
  9850  00291C                     __ptext36:
  9851                           	opt stack 0
  9852  00291C                     _initServo:
  9853                           	opt stack 23
  9854                           
  9855                           ;servo.c: 24: for(int i = 0; i < n; i++){
  9856                           
  9857                           ;incstack = 0
  9858  00291C  0E00               	movlw	0
  9859  00291E  0100               	movlb	0	; () banked
  9860  002920  6FE7               	movwf	(initServo@i+1)& (0+255),b
  9861  002922  0E00               	movlw	0
  9862  002924  6FE6               	movwf	initServo@i& (0+255),b
  9863  002926  D017               	goto	l7070
  9864  002928                     l7064:
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;servo.c: 25: if(servos[i] == motor)return;
  9868  002928  90D8               	bcf	status,0,c
  9869  00292A  0100               	movlb	0	; () banked
  9870  00292C  35E6               	rlcf	initServo@i& (0+255),w,b
  9871  00292E  6ED9               	movwf	fsr2l,c
  9872  002930  0100               	movlb	0	; () banked
  9873  002932  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
  9874  002934  6EDA               	movwf	fsr2h,c
  9875  002936  0E5F               	movlw	low _servos
  9876  002938  26D9               	addwf	fsr2l,f,c
  9877  00293A  0E01               	movlw	high _servos
  9878  00293C  22DA               	addwfc	fsr2h,f,c
  9879  00293E  0100               	movlb	0	; () banked
  9880  002940  51DE               	movf	initServo@motor& (0+255),w,b
  9881  002942  18DE               	xorwf	postinc2,w,c
  9882  002944  E105               	bnz	l7068
  9883  002946  0100               	movlb	0	; () banked
  9884  002948  51DF               	movf	(initServo@motor+1)& (0+255),w,b
  9885  00294A  18DE               	xorwf	postinc2,w,c
  9886  00294C  B4D8               	btfsc	status,2,c
  9887  00294E  0012               	return	
  9888  002950                     l7068:
  9889                           
  9890                           ; BSR set to: 0
  9891  002950  0100               	movlb	0	; () banked
  9892  002952  4BE6               	infsnz	initServo@i& (0+255),f,b
  9893  002954  2BE7               	incf	(initServo@i+1)& (0+255),f,b
  9894  002956                     l7070:
  9895                           
  9896                           ; BSR set to: 0
  9897  002956  0100               	movlb	0	; () banked
  9898  002958  51F9               	movf	_n& (0+255),w,b
  9899  00295A  0100               	movlb	0	; () banked
  9900  00295C  5DE6               	subwf	initServo@i& (0+255),w,b
  9901  00295E  0100               	movlb	0	; () banked
  9902  002960  51E7               	movf	(initServo@i+1)& (0+255),w,b
  9903  002962  0A80               	xorlw	128
  9904  002964  0100               	movlb	0	; () banked
  9905  002966  6FE2               	movwf	??_initServo& (0+255),b
  9906  002968  0100               	movlb	0	; () banked
  9907  00296A  51FA               	movf	(_n+1)& (0+255),w,b
  9908  00296C  0A80               	xorlw	128
  9909  00296E  0100               	movlb	0	; () banked
  9910  002970  59E2               	subwfb	??_initServo& (0+255),w,b
  9911  002972  A0D8               	btfss	status,0,c
  9912  002974  D7D9               	goto	l7064
  9913                           
  9914                           ; BSR set to: 0
  9915                           ;servo.c: 26: }
  9916                           ;servo.c: 28: n++;
  9917                           
  9918                           ; BSR set to: 0
  9919  002976  0100               	movlb	0	; () banked
  9920  002978  4BF9               	infsnz	_n& (0+255),f,b
  9921  00297A  2BFA               	incf	(_n+1)& (0+255),f,b
  9922                           
  9923                           ; BSR set to: 0
  9924                           ;servo.c: 29: servos[n-1] = motor;
  9925  00297C  0EFE               	movlw	254
  9926  00297E  0100               	movlb	0	; () banked
  9927  002980  6FE2               	movwf	??_initServo& (0+255),b
  9928  002982  0EFF               	movlw	255
  9929  002984  0100               	movlb	0	; () banked
  9930  002986  6FE3               	movwf	(??_initServo+1)& (0+255),b
  9931  002988  C0F9  F0E4         	movff	_n,??_initServo+2
  9932  00298C  C0FA  F0E5         	movff	_n+1,??_initServo+3
  9933  002990  90D8               	bcf	status,0,c
  9934  002992  0100               	movlb	0	; () banked
  9935  002994  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
  9936  002996  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
  9937  002998  0100               	movlb	0	; () banked
  9938  00299A  51E2               	movf	??_initServo& (0+255),w,b
  9939  00299C  0100               	movlb	0	; () banked
  9940  00299E  27E4               	addwf	(??_initServo+2)& (0+255),f,b
  9941  0029A0  0100               	movlb	0	; () banked
  9942  0029A2  51E3               	movf	(??_initServo+1)& (0+255),w,b
  9943  0029A4  0100               	movlb	0	; () banked
  9944  0029A6  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
  9945  0029A8  0E5F               	movlw	low _servos
  9946  0029AA  0100               	movlb	0	; () banked
  9947  0029AC  25E4               	addwf	(??_initServo+2)& (0+255),w,b
  9948  0029AE  6ED9               	movwf	fsr2l,c
  9949  0029B0  0E01               	movlw	high _servos
  9950  0029B2  0100               	movlb	0	; () banked
  9951  0029B4  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
  9952  0029B6  6EDA               	movwf	fsr2h,c
  9953  0029B8  C0DE  FFDE         	movff	initServo@motor,postinc2
  9954  0029BC  C0DF  FFDD         	movff	initServo@motor+1,postdec2
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;servo.c: 30: setAngle(motor, angle);
  9958  0029C0  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
  9959  0029C4  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
  9960  0029C8  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
  9961  0029CC  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
  9962  0029D0  ECFF  F014         	call	_setAngle	;wreg free
  9963                           
  9964                           ;servo.c: 32: initTimer(0);
  9965  0029D4  0E00               	movlw	0
  9966  0029D6  6E24               	movwf	initTimer@timer+1,c
  9967  0029D8  0E00               	movlw	0
  9968  0029DA  6E23               	movwf	initTimer@timer,c
  9969  0029DC  ECE3  F01B         	call	_initTimer	;wreg free
  9970                           
  9971                           ;servo.c: 33: startTimer(0,0);
  9972  0029E0  0E00               	movlw	0
  9973  0029E2  6E24               	movwf	startTimer@timer+1,c
  9974  0029E4  0E00               	movlw	0
  9975  0029E6  6E23               	movwf	startTimer@timer,c
  9976  0029E8  0E00               	movlw	0
  9977  0029EA  6E25               	movwf	startTimer@val,c
  9978  0029EC  0E00               	movlw	0
  9979  0029EE  6E26               	movwf	startTimer@val+1,c
  9980  0029F0  0E00               	movlw	0
  9981  0029F2  6E27               	movwf	startTimer@val+2,c
  9982  0029F4  0E00               	movlw	0
  9983  0029F6  6E28               	movwf	startTimer@val+3,c
  9984  0029F8  EC97  F01B         	call	_startTimer	;wreg free
  9985  0029FC  0012               	return		;funcret
  9986  0029FE                     __end_of_initServo:
  9987                           	opt stack 0
  9988                           tblptru	equ	0xFF8
  9989                           tblptrh	equ	0xFF7
  9990                           tblptrl	equ	0xFF6
  9991                           tablat	equ	0xFF5
  9992                           prodh	equ	0xFF4
  9993                           prodl	equ	0xFF3
  9994                           intcon	equ	0xFF2
  9995                           intcon3	equ	0xFF0
  9996                           postinc0	equ	0xFEE
  9997                           wreg	equ	0xFE8
  9998                           postdec1	equ	0xFE5
  9999                           fsr1l	equ	0xFE1
 10000                           indf2	equ	0xFDF
 10001                           postinc2	equ	0xFDE
 10002                           postdec2	equ	0xFDD
 10003                           fsr2h	equ	0xFDA
 10004                           fsr2l	equ	0xFD9
 10005                           status	equ	0xFD8
 10006                           
 10007 ;; *************** function _startTimer *****************
 10008 ;; Defined at:
 10009 ;;		line 76 in file "timer.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;  timer           2   34[COMRAM] int 
 10012 ;;  val             4   36[COMRAM] long 
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;		None
 10015 ;; Return value:  Size  Location     Type
 10016 ;;                  1    wreg      void 
 10017 ;; Registers used:
 10018 ;;		wreg, status,2, status,0
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10024 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;Total ram usage:        8 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    3
 10031 ;; This function calls:
 10032 ;;		Nothing
 10033 ;; This function is called by:
 10034 ;;		_main
 10035 ;;		_initServo
 10036 ;;		_testFrequency
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text37
 10041  00372E                     __ptext37:
 10042                           	opt stack 0
 10043  00372E                     _startTimer:
 10044                           	opt stack 27
 10045                           
 10046                           ;timer.c: 77: switch(timer){
 10047                           
 10048                           ;incstack = 0
 10049  00372E  D012               	goto	l6842
 10050  003730                     l444:
 10051                           
 10052                           ;timer.c: 79: TMR0H = val>>8;
 10053  003730  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
 10054                           
 10055                           ;timer.c: 80: TMR0L = val;
 10056  003734  C025  FFD6         	movff	startTimer@val,4054	;volatile
 10057                           
 10058                           ;timer.c: 81: T0CON |= 1<<7;
 10059  003738  8ED5               	bsf	4053,7,c	;volatile
 10060                           
 10061                           ;timer.c: 82: break;
 10062  00373A  0012               	return	
 10063  00373C                     l446:
 10064                           
 10065                           ;timer.c: 84: TMR1H = val>>8;
 10066  00373C  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
 10067                           
 10068                           ;timer.c: 85: TMR1L = val;
 10069  003740  C025  FFCE         	movff	startTimer@val,4046	;volatile
 10070                           
 10071                           ;timer.c: 86: T1CON |= 1<<0;
 10072  003744  80CD               	bsf	4045,0,c	;volatile
 10073                           
 10074                           ;timer.c: 87: break;
 10075  003746  0012               	return	
 10076  003748                     l447:
 10077                           
 10078                           ;timer.c: 89: TMR3H = val>>8;
 10079  003748  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
 10080                           
 10081                           ;timer.c: 90: TMR3L = val;
 10082  00374C  C025  FFB2         	movff	startTimer@val,4018	;volatile
 10083                           
 10084                           ;timer.c: 91: T3CON |= 1<<0;
 10085  003750  80B1               	bsf	4017,0,c	;volatile
 10086                           
 10087                           ;timer.c: 92: }
 10088  003752  0012               	return	
 10089  003754                     l6842:
 10090  003754  C023  F029         	movff	startTimer@timer,??_startTimer
 10091  003758  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
 10092                           
 10093                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10094                           ; Switch size 1, requested type "space"
 10095                           ; Number of cases is 1, Range of values is 0 to 0
 10096                           ; switch strategies available:
 10097                           ; Name         Instructions Cycles
 10098                           ; simple_byte            4     3 (average)
 10099                           ;	Chosen strategy is simple_byte
 10100  00375C  502A               	movf	??_startTimer+1,w,c
 10101  00375E  0A00               	xorlw	0	; case 0
 10102  003760  A4D8               	btfss	status,2,c
 10103  003762  0012               	return	
 10104                           
 10105                           ; Switch size 1, requested type "space"
 10106                           ; Number of cases is 3, Range of values is 0 to 3
 10107                           ; switch strategies available:
 10108                           ; Name         Instructions Cycles
 10109                           ; simple_byte           10     6 (average)
 10110                           ;	Chosen strategy is simple_byte
 10111  003764  5029               	movf	??_startTimer,w,c
 10112  003766  0A00               	xorlw	0	; case 0
 10113  003768  B4D8               	btfsc	status,2,c
 10114  00376A  D7E2               	goto	l444
 10115  00376C  0A01               	xorlw	1	; case 1
 10116  00376E  B4D8               	btfsc	status,2,c
 10117  003770  D7E5               	goto	l446
 10118  003772  0A02               	xorlw	2	; case 3
 10119  003774  A4D8               	btfss	status,2,c
 10120  003776  0012               	return	
 10121  003778  D7E7               	goto	l447
 10122  00377A                     __end_of_startTimer:
 10123                           	opt stack 0
 10124                           tblptru	equ	0xFF8
 10125                           tblptrh	equ	0xFF7
 10126                           tblptrl	equ	0xFF6
 10127                           tablat	equ	0xFF5
 10128                           prodh	equ	0xFF4
 10129                           prodl	equ	0xFF3
 10130                           intcon	equ	0xFF2
 10131                           intcon3	equ	0xFF0
 10132                           postinc0	equ	0xFEE
 10133                           wreg	equ	0xFE8
 10134                           postdec1	equ	0xFE5
 10135                           fsr1l	equ	0xFE1
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           postdec2	equ	0xFDD
 10139                           fsr2h	equ	0xFDA
 10140                           fsr2l	equ	0xFD9
 10141                           status	equ	0xFD8
 10142                           
 10143 ;; *************** function _setAngle *****************
 10144 ;; Defined at:
 10145 ;;		line 44 in file "servo.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;  motor           2   84[BANK0 ] PTR int 
 10148 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 10149 ;;  angle           2   86[BANK0 ] int 
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;  i               2   92[BANK0 ] int 
 10152 ;;  period          2   90[BANK0 ] unsigned int 
 10153 ;; Return value:  Size  Location     Type
 10154 ;;                  1    wreg      void 
 10155 ;; Registers used:
 10156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10157 ;; Tracked objects:
 10158 ;;		On entry : 0/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10162 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10164 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10165 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10166 ;;Total ram usage:       10 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; Hardware stack levels required when called:    6
 10169 ;; This function calls:
 10170 ;;		_angleToPulse
 10171 ;; This function is called by:
 10172 ;;		_sortBattery
 10173 ;;		_initServo
 10174 ;; This function uses a non-reentrant model
 10175 ;;
 10176                           
 10177                           	psect	text38
 10178  0029FE                     __ptext38:
 10179                           	opt stack 0
 10180  0029FE                     _setAngle:
 10181                           	opt stack 23
 10182                           
 10183                           ;servo.c: 45: unsigned int period = 50000;
 10184                           
 10185                           ;incstack = 0
 10186  0029FE  0EC3               	movlw	195
 10187  002A00  0100               	movlb	0	; () banked
 10188  002A02  6FDB               	movwf	(setAngle@period+1)& (0+255),b
 10189  002A04  0E50               	movlw	80
 10190  002A06  6FDA               	movwf	setAngle@period& (0+255),b
 10191                           
 10192                           ;servo.c: 46: for(int i = 0; i < n; i++){
 10193  002A08  0E00               	movlw	0
 10194  002A0A  0100               	movlb	0	; () banked
 10195  002A0C  6FDD               	movwf	(setAngle@i+1)& (0+255),b
 10196  002A0E  0E00               	movlw	0
 10197  002A10  6FDC               	movwf	setAngle@i& (0+255),b
 10198  002A12  D03F               	goto	l6896
 10199  002A14                     l6888:
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;servo.c: 47: if(servos[i] == motor){
 10203  002A14  90D8               	bcf	status,0,c
 10204  002A16  0100               	movlb	0	; () banked
 10205  002A18  35DC               	rlcf	setAngle@i& (0+255),w,b
 10206  002A1A  6ED9               	movwf	fsr2l,c
 10207  002A1C  0100               	movlb	0	; () banked
 10208  002A1E  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 10209  002A20  6EDA               	movwf	fsr2h,c
 10210  002A22  0E5F               	movlw	low _servos
 10211  002A24  26D9               	addwf	fsr2l,f,c
 10212  002A26  0E01               	movlw	high _servos
 10213  002A28  22DA               	addwfc	fsr2h,f,c
 10214  002A2A  0100               	movlb	0	; () banked
 10215  002A2C  51D4               	movf	setAngle@motor& (0+255),w,b
 10216  002A2E  18DE               	xorwf	postinc2,w,c
 10217  002A30  E11C               	bnz	l6892
 10218  002A32  0100               	movlb	0	; () banked
 10219  002A34  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
 10220  002A36  18DE               	xorwf	postinc2,w,c
 10221  002A38  A4D8               	btfss	status,2,c
 10222  002A3A  D017               	goto	l6892
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
 10226  002A3C  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
 10227  002A40  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
 10228  002A44  EC1E  F010         	call	_angleToPulse	;wreg free
 10229  002A48  90D8               	bcf	status,0,c
 10230  002A4A  0100               	movlb	0	; () banked
 10231  002A4C  35DC               	rlcf	setAngle@i& (0+255),w,b
 10232  002A4E  6ED9               	movwf	fsr2l,c
 10233  002A50  0100               	movlb	0	; () banked
 10234  002A52  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 10235  002A54  6EDA               	movwf	fsr2h,c
 10236  002A56  0E57               	movlw	low _pulse
 10237  002A58  26D9               	addwf	fsr2l,f,c
 10238  002A5A  0E01               	movlw	high _pulse
 10239  002A5C  22DA               	addwfc	fsr2h,f,c
 10240  002A5E  0100               	movlb	0	; () banked
 10241  002A60  C0BD  FFDE         	movff	?_angleToPulse,postinc2
 10242  002A64  0100               	movlb	0	; () banked
 10243  002A66  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
 10244  002A6A                     l6892:
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;servo.c: 49: }
 10248                           ;servo.c: 50: period-=pulse[i];
 10249  002A6A  90D8               	bcf	status,0,c
 10250  002A6C  0100               	movlb	0	; () banked
 10251  002A6E  35DC               	rlcf	setAngle@i& (0+255),w,b
 10252  002A70  6ED9               	movwf	fsr2l,c
 10253  002A72  0100               	movlb	0	; () banked
 10254  002A74  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 10255  002A76  6EDA               	movwf	fsr2h,c
 10256  002A78  0E57               	movlw	low _pulse
 10257  002A7A  26D9               	addwf	fsr2l,f,c
 10258  002A7C  0E01               	movlw	high _pulse
 10259  002A7E  22DA               	addwfc	fsr2h,f,c
 10260  002A80  50DE               	movf	postinc2,w,c
 10261  002A82  0100               	movlb	0	; () banked
 10262  002A84  5FDA               	subwf	setAngle@period& (0+255),f,b
 10263  002A86  50DD               	movf	postdec2,w,c
 10264  002A88  0100               	movlb	0	; () banked
 10265  002A8A  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
 10266                           
 10267                           ; BSR set to: 0
 10268  002A8C  0100               	movlb	0	; () banked
 10269  002A8E  4BDC               	infsnz	setAngle@i& (0+255),f,b
 10270  002A90  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
 10271  002A92                     l6896:
 10272                           
 10273                           ; BSR set to: 0
 10274  002A92  0100               	movlb	0	; () banked
 10275  002A94  51F9               	movf	_n& (0+255),w,b
 10276  002A96  0100               	movlb	0	; () banked
 10277  002A98  5DDC               	subwf	setAngle@i& (0+255),w,b
 10278  002A9A  0100               	movlb	0	; () banked
 10279  002A9C  51DD               	movf	(setAngle@i+1)& (0+255),w,b
 10280  002A9E  0A80               	xorlw	128
 10281  002AA0  0100               	movlb	0	; () banked
 10282  002AA2  6FD8               	movwf	??_setAngle& (0+255),b
 10283  002AA4  0100               	movlb	0	; () banked
 10284  002AA6  51FA               	movf	(_n+1)& (0+255),w,b
 10285  002AA8  0A80               	xorlw	128
 10286  002AAA  0100               	movlb	0	; () banked
 10287  002AAC  59D8               	subwfb	??_setAngle& (0+255),w,b
 10288  002AAE  A0D8               	btfss	status,0,c
 10289  002AB0  D7B1               	goto	l6888
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;servo.c: 51: }
 10293                           ;servo.c: 52: pulse[n] = period;
 10294                           
 10295                           ; BSR set to: 0
 10296  002AB2  90D8               	bcf	status,0,c
 10297  002AB4  0100               	movlb	0	; () banked
 10298  002AB6  35F9               	rlcf	_n& (0+255),w,b
 10299  002AB8  6ED9               	movwf	fsr2l,c
 10300  002ABA  0100               	movlb	0	; () banked
 10301  002ABC  35FA               	rlcf	(_n+1)& (0+255),w,b
 10302  002ABE  6EDA               	movwf	fsr2h,c
 10303  002AC0  0E57               	movlw	low _pulse
 10304  002AC2  26D9               	addwf	fsr2l,f,c
 10305  002AC4  0E01               	movlw	high _pulse
 10306  002AC6  22DA               	addwfc	fsr2h,f,c
 10307  002AC8  C0DA  FFDE         	movff	setAngle@period,postinc2
 10308  002ACC  C0DB  FFDD         	movff	setAngle@period+1,postdec2
 10309                           
 10310                           ; BSR set to: 0
 10311  002AD0  0012               	return		;funcret
 10312  002AD2                     __end_of_setAngle:
 10313                           	opt stack 0
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           intcon3	equ	0xFF0
 10322                           postinc0	equ	0xFEE
 10323                           wreg	equ	0xFE8
 10324                           postdec1	equ	0xFE5
 10325                           fsr1l	equ	0xFE1
 10326                           indf2	equ	0xFDF
 10327                           postinc2	equ	0xFDE
 10328                           postdec2	equ	0xFDD
 10329                           fsr2h	equ	0xFDA
 10330                           fsr2l	equ	0xFD9
 10331                           status	equ	0xFD8
 10332                           
 10333 ;; *************** function _angleToPulse *****************
 10334 ;; Defined at:
 10335 ;;		line 36 in file "servo.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  angle           2   61[BANK0 ] int 
 10338 ;; Auto vars:     Size  Location     Type
 10339 ;;  a000            4   80[BANK0 ] long 
 10340 ;;  a180            4   73[BANK0 ] long 
 10341 ;;  offset          4   69[BANK0 ] long 
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  4   61[BANK0 ] long 
 10344 ;; Registers used:
 10345 ;;		wreg, status,2, status,0, cstack
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10351 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10352 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10353 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10355 ;;Total ram usage:       23 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; Hardware stack levels required when called:    5
 10358 ;; This function calls:
 10359 ;;		___altoft
 10360 ;;		___awtoft
 10361 ;;		___ftadd
 10362 ;;		___ftdiv
 10363 ;;		___ftmul
 10364 ;;		___fttol
 10365 ;; This function is called by:
 10366 ;;		_setAngle
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           	psect	text39
 10371  00203C                     __ptext39:
 10372                           	opt stack 0
 10373  00203C                     _angleToPulse:
 10374                           	opt stack 23
 10375                           
 10376                           ;servo.c: 37: long offset = -600;
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;incstack = 0
 10380  00203C  0EA8               	movlw	168
 10381  00203E  0100               	movlb	0	; () banked
 10382  002040  6FC5               	movwf	angleToPulse@offset& (0+255),b
 10383  002042  0EFD               	movlw	253
 10384  002044  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
 10385  002046  0EFF               	movlw	255
 10386  002048  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
 10387  00204A  0EFF               	movlw	255
 10388  00204C  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
 10389                           
 10390                           ;servo.c: 38: long a000 = 1250;
 10391  00204E  0EE2               	movlw	226
 10392  002050  0100               	movlb	0	; () banked
 10393  002052  6FD0               	movwf	angleToPulse@a000& (0+255),b
 10394  002054  0E04               	movlw	4
 10395  002056  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
 10396  002058  0E00               	movlw	0
 10397  00205A  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
 10398  00205C  0E00               	movlw	0
 10399  00205E  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
 10400                           
 10401                           ;servo.c: 39: long a180 = 6250;
 10402  002060  0E6A               	movlw	106
 10403  002062  0100               	movlb	0	; () banked
 10404  002064  6FC9               	movwf	angleToPulse@a180& (0+255),b
 10405  002066  0E18               	movlw	24
 10406  002068  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
 10407  00206A  0E00               	movlw	0
 10408  00206C  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
 10409  00206E  0E00               	movlw	0
 10410  002070  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 10414  002072  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
 10415  002076  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
 10416  00207A  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
 10417  00207E  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
 10418  002082  0100               	movlb	0	; () banked
 10419  002084  1FC1               	comf	??_angleToPulse& (0+255),f,b
 10420  002086  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
 10421  002088  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
 10422  00208A  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
 10423  00208C  2BC1               	incf	??_angleToPulse& (0+255),f,b
 10424  00208E  0E00               	movlw	0
 10425  002090  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 10426  002092  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 10427  002094  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 10428  002096  0100               	movlb	0	; () banked
 10429  002098  51C9               	movf	angleToPulse@a180& (0+255),w,b
 10430  00209A  0100               	movlb	0	; () banked
 10431  00209C  25C1               	addwf	??_angleToPulse& (0+255),w,b
 10432  00209E  6E2B               	movwf	___altoft@c,c
 10433  0020A0  0100               	movlb	0	; () banked
 10434  0020A2  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
 10435  0020A4  0100               	movlb	0	; () banked
 10436  0020A6  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 10437  0020A8  6E2C               	movwf	___altoft@c+1,c
 10438  0020AA  0100               	movlb	0	; () banked
 10439  0020AC  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
 10440  0020AE  0100               	movlb	0	; () banked
 10441  0020B0  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 10442  0020B2  6E2D               	movwf	___altoft@c+2,c
 10443  0020B4  0100               	movlb	0	; () banked
 10444  0020B6  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
 10445  0020B8  0100               	movlb	0	; () banked
 10446  0020BA  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 10447  0020BC  6E2E               	movwf	___altoft@c+3,c
 10448  0020BE  EC46  F019         	call	___altoft	;wreg free
 10449  0020C2  C02B  F08C         	movff	?___altoft,___ftmul@f2
 10450  0020C6  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
 10451  0020CA  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
 10452  0020CE  0E00               	movlw	0
 10453  0020D0  6E38               	movwf	___ftdiv@f2,c
 10454  0020D2  0E34               	movlw	52
 10455  0020D4  6E39               	movwf	___ftdiv@f2+1,c
 10456  0020D6  0E43               	movlw	67
 10457  0020D8  6E3A               	movwf	___ftdiv@f2+2,c
 10458  0020DA  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
 10459  0020DE  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
 10460  0020E2  EC67  F01C         	call	___awtoft	;wreg free
 10461  0020E6  C02B  F035         	movff	?___awtoft,___ftdiv@f1
 10462  0020EA  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
 10463  0020EE  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
 10464  0020F2  EC99  F012         	call	___ftdiv	;wreg free
 10465  0020F6  C035  F089         	movff	?___ftdiv,___ftmul@f1
 10466  0020FA  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
 10467  0020FE  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
 10468  002102  EC6F  F00F         	call	___ftmul	;wreg free
 10469  002106  C089  F0A5         	movff	?___ftmul,___ftadd@f2
 10470  00210A  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
 10471  00210E  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
 10472  002112  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
 10473  002116  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
 10474  00211A  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
 10475  00211E  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
 10476  002122  EC46  F019         	call	___altoft	;wreg free
 10477  002126  C02B  F0A2         	movff	?___altoft,___ftadd@f1
 10478  00212A  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
 10479  00212E  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
 10480  002132  EC0B  F00D         	call	___ftadd	;wreg free
 10481  002136  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1390
 10482  00213A  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1390+1
 10483  00213E  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1390+2
 10484                           
 10485                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 10486  002142  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
 10487  002146  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
 10488  00214A  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
 10489  00214E  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
 10490  002152  EC46  F019         	call	___altoft	;wreg free
 10491  002156  C02B  F0A5         	movff	?___altoft,___ftadd@f2
 10492  00215A  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
 10493  00215E  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
 10494  002162  C0CD  F0A2         	movff	_angleToPulse$1390,___ftadd@f1
 10495  002166  C0CE  F0A3         	movff	_angleToPulse$1390+1,___ftadd@f1+1
 10496  00216A  C0CF  F0A4         	movff	_angleToPulse$1390+2,___ftadd@f1+2
 10497  00216E  EC0B  F00D         	call	___ftadd	;wreg free
 10498  002172  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
 10499  002176  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
 10500  00217A  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
 10501  00217E  ECCA  F010         	call	___fttol	;wreg free
 10502  002182  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
 10503  002186  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
 10504  00218A  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
 10505  00218E  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
 10506  002192  0012               	return	
 10507  002194                     __end_of_angleToPulse:
 10508                           	opt stack 0
 10509                           tblptru	equ	0xFF8
 10510                           tblptrh	equ	0xFF7
 10511                           tblptrl	equ	0xFF6
 10512                           tablat	equ	0xFF5
 10513                           prodh	equ	0xFF4
 10514                           prodl	equ	0xFF3
 10515                           intcon	equ	0xFF2
 10516                           intcon3	equ	0xFF0
 10517                           postinc0	equ	0xFEE
 10518                           wreg	equ	0xFE8
 10519                           postdec1	equ	0xFE5
 10520                           fsr1l	equ	0xFE1
 10521                           indf2	equ	0xFDF
 10522                           postinc2	equ	0xFDE
 10523                           postdec2	equ	0xFDD
 10524                           fsr2h	equ	0xFDA
 10525                           fsr2l	equ	0xFD9
 10526                           status	equ	0xFD8
 10527                           
 10528 ;; *************** function ___fttol *****************
 10529 ;; Defined at:
 10530 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;  f1              3   46[BANK0 ] float 
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;  lval            4   56[BANK0 ] unsigned long 
 10535 ;;  exp1            1   60[BANK0 ] unsigned char 
 10536 ;;  sign1           1   55[BANK0 ] unsigned char 
 10537 ;; Return value:  Size  Location     Type
 10538 ;;                  4   46[BANK0 ] long 
 10539 ;; Registers used:
 10540 ;;		wreg, status,2, status,0
 10541 ;; Tracked objects:
 10542 ;;		On entry : 0/0
 10543 ;;		On exit  : 0/0
 10544 ;;		Unchanged: 0/0
 10545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10546 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10548 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10550 ;;Total ram usage:       15 bytes
 10551 ;; Hardware stack levels used:    1
 10552 ;; Hardware stack levels required when called:    3
 10553 ;; This function calls:
 10554 ;;		Nothing
 10555 ;; This function is called by:
 10556 ;;		_sortBattery
 10557 ;;		_angleToPulse
 10558 ;;		_printf
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           	psect	text40
 10563  002194                     __ptext40:
 10564                           	opt stack 0
 10565  002194                     ___fttol:
 10566                           	opt stack 24
 10567                           
 10568                           ;incstack = 0
 10569  002194  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 10570  002198  0100               	movlb	0	; () banked
 10571  00219A  6BB3               	clrf	(??___fttol+1)& (0+255),b
 10572  00219C  6BB4               	clrf	(??___fttol+2)& (0+255),b
 10573  00219E  0100               	movlb	0	; () banked
 10574  0021A0  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10575  0021A2  0100               	movlb	0	; () banked
 10576  0021A4  37B2               	rlcf	??___fttol& (0+255),f,b
 10577  0021A6  E301               	bnc	u6221
 10578  0021A8  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 10579  0021AA                     u6221:
 10580  0021AA  0100               	movlb	0	; () banked
 10581  0021AC  51B2               	movf	??___fttol& (0+255),w,b
 10582  0021AE  0100               	movlb	0	; () banked
 10583  0021B0  6FBC               	movwf	___fttol@exp1& (0+255),b
 10584  0021B2  0100               	movlb	0	; () banked
 10585  0021B4  51BC               	movf	___fttol@exp1& (0+255),w,b
 10586  0021B6  A4D8               	btfss	status,2,c
 10587  0021B8  D00A               	goto	l6312
 10588                           
 10589                           ; BSR set to: 0
 10590  0021BA  0E00               	movlw	0
 10591  0021BC  0100               	movlb	0	; () banked
 10592  0021BE  6FAE               	movwf	?___fttol& (0+255),b
 10593  0021C0  0E00               	movlw	0
 10594  0021C2  6FAF               	movwf	(?___fttol+1)& (0+255),b
 10595  0021C4  0E00               	movlw	0
 10596  0021C6  6FB0               	movwf	(?___fttol+2)& (0+255),b
 10597  0021C8  0E00               	movlw	0
 10598  0021CA  6FB1               	movwf	(?___fttol+3)& (0+255),b
 10599                           
 10600                           ; BSR set to: 0
 10601  0021CC  0012               	return	
 10602  0021CE                     l6312:
 10603                           
 10604                           ; BSR set to: 0
 10605  0021CE  0E17               	movlw	23
 10606  0021D0  0100               	movlb	0	; () banked
 10607  0021D2  6FB2               	movwf	??___fttol& (0+255),b
 10608  0021D4  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 10609  0021D8  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 10610  0021DC  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 10611  0021E0  0100               	movlb	0	; () banked
 10612  0021E2  29B2               	incf	??___fttol& (0+255),w,b
 10613  0021E4  0100               	movlb	0	; () banked
 10614  0021E6  6FB6               	movwf	(??___fttol+4)& (0+255),b
 10615  0021E8  D005               	goto	u6240
 10616  0021EA                     u6245:
 10617  0021EA  0100               	movlb	0	; () banked
 10618  0021EC  90D8               	bcf	status,0,c
 10619  0021EE  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 10620  0021F0  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 10621  0021F2  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 10622  0021F4                     u6240:
 10623  0021F4  0100               	movlb	0	; () banked
 10624  0021F6  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 10625  0021F8  D7F8               	goto	u6245
 10626  0021FA  0100               	movlb	0	; () banked
 10627  0021FC  51B3               	movf	(??___fttol+1)& (0+255),w,b
 10628  0021FE  0100               	movlb	0	; () banked
 10629  002200  6FB7               	movwf	___fttol@sign1& (0+255),b
 10630                           
 10631                           ; BSR set to: 0
 10632  002202  0100               	movlb	0	; () banked
 10633  002204  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 10634                           
 10635                           ; BSR set to: 0
 10636  002206  0EFF               	movlw	255
 10637  002208  0100               	movlb	0	; () banked
 10638  00220A  17AE               	andwf	___fttol@f1& (0+255),f,b
 10639  00220C  0EFF               	movlw	255
 10640  00220E  0100               	movlb	0	; () banked
 10641  002210  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 10642  002212  0E00               	movlw	0
 10643  002214  0100               	movlb	0	; () banked
 10644  002216  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 10645                           
 10646                           ; BSR set to: 0
 10647  002218  0100               	movlb	0	; () banked
 10648  00221A  51AE               	movf	___fttol@f1& (0+255),w,b
 10649  00221C  0100               	movlb	0	; () banked
 10650  00221E  6FB8               	movwf	___fttol@lval& (0+255),b
 10651  002220  0100               	movlb	0	; () banked
 10652  002222  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 10653  002224  0100               	movlb	0	; () banked
 10654  002226  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 10655  002228  0100               	movlb	0	; () banked
 10656  00222A  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 10657  00222C  0100               	movlb	0	; () banked
 10658  00222E  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 10659  002230  0100               	movlb	0	; () banked
 10660  002232  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 10661                           
 10662                           ; BSR set to: 0
 10663  002234  0E8E               	movlw	142
 10664  002236  0100               	movlb	0	; () banked
 10665  002238  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 10666                           
 10667                           ; BSR set to: 0
 10668  00223A  0100               	movlb	0	; () banked
 10669  00223C  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 10670  00223E  D01A               	goto	l6334
 10671                           
 10672                           ; BSR set to: 0
 10673  002240  0100               	movlb	0	; () banked
 10674  002242  51BC               	movf	___fttol@exp1& (0+255),w,b
 10675  002244  0A80               	xorlw	128
 10676  002246  0F8F               	addlw	143
 10677  002248  B0D8               	btfsc	status,0,c
 10678  00224A  D00A               	goto	l6330
 10679                           
 10680                           ; BSR set to: 0
 10681  00224C  0E00               	movlw	0
 10682  00224E  0100               	movlb	0	; () banked
 10683  002250  6FAE               	movwf	?___fttol& (0+255),b
 10684  002252  0E00               	movlw	0
 10685  002254  6FAF               	movwf	(?___fttol+1)& (0+255),b
 10686  002256  0E00               	movlw	0
 10687  002258  6FB0               	movwf	(?___fttol+2)& (0+255),b
 10688  00225A  0E00               	movlw	0
 10689  00225C  6FB1               	movwf	(?___fttol+3)& (0+255),b
 10690                           
 10691                           ; BSR set to: 0
 10692  00225E  0012               	return	
 10693  002260                     l6330:
 10694                           
 10695                           ; BSR set to: 0
 10696  002260  0100               	movlb	0	; () banked
 10697  002262  90D8               	bcf	status,0,c
 10698  002264  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10699  002266  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10700  002268  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10701  00226A  33B8               	rrcf	___fttol@lval& (0+255),f,b
 10702                           
 10703                           ; BSR set to: 0
 10704  00226C  0100               	movlb	0	; () banked
 10705  00226E  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 10706  002270  D7F7               	goto	l6330
 10707                           
 10708                           ; BSR set to: 0
 10709  002272  D01B               	goto	l6344
 10710  002274                     l6334:
 10711                           
 10712                           ; BSR set to: 0
 10713  002274  0E17               	movlw	23
 10714  002276  0100               	movlb	0	; () banked
 10715  002278  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 10716  00227A  D012               	goto	l6342
 10717                           
 10718                           ; BSR set to: 0
 10719  00227C  0E00               	movlw	0
 10720  00227E  0100               	movlb	0	; () banked
 10721  002280  6FAE               	movwf	?___fttol& (0+255),b
 10722  002282  0E00               	movlw	0
 10723  002284  6FAF               	movwf	(?___fttol+1)& (0+255),b
 10724  002286  0E00               	movlw	0
 10725  002288  6FB0               	movwf	(?___fttol+2)& (0+255),b
 10726  00228A  0E00               	movlw	0
 10727  00228C  6FB1               	movwf	(?___fttol+3)& (0+255),b
 10728                           
 10729                           ; BSR set to: 0
 10730  00228E  0012               	return	
 10731  002290                     l6340:
 10732                           
 10733                           ; BSR set to: 0
 10734  002290  0100               	movlb	0	; () banked
 10735  002292  90D8               	bcf	status,0,c
 10736  002294  37B8               	rlcf	___fttol@lval& (0+255),f,b
 10737  002296  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10738  002298  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10739  00229A  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10740  00229C  0100               	movlb	0	; () banked
 10741  00229E  07BC               	decf	___fttol@exp1& (0+255),f,b
 10742  0022A0                     l6342:
 10743                           
 10744                           ; BSR set to: 0
 10745  0022A0  0100               	movlb	0	; () banked
 10746  0022A2  51BC               	movf	___fttol@exp1& (0+255),w,b
 10747  0022A4  0100               	movlb	0	; () banked
 10748  0022A6  A4D8               	btfss	status,2,c
 10749  0022A8  D7F3               	goto	l6340
 10750  0022AA                     l6344:
 10751                           
 10752                           ; BSR set to: 0
 10753  0022AA  0100               	movlb	0	; () banked
 10754  0022AC  51B7               	movf	___fttol@sign1& (0+255),w,b
 10755  0022AE  0100               	movlb	0	; () banked
 10756  0022B0  B4D8               	btfsc	status,2,c
 10757  0022B2  D009               	goto	l6348
 10758                           
 10759                           ; BSR set to: 0
 10760  0022B4  0100               	movlb	0	; () banked
 10761  0022B6  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 10762  0022B8  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 10763  0022BA  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 10764  0022BC  6DB8               	negf	___fttol@lval& (0+255),b
 10765  0022BE  0E00               	movlw	0
 10766  0022C0  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10767  0022C2  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10768  0022C4  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10769  0022C6                     l6348:
 10770                           
 10771                           ; BSR set to: 0
 10772  0022C6  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 10773  0022CA  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 10774  0022CE  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 10775  0022D2  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 10776  0022D6  0012               	return	
 10777  0022D8                     __end_of___fttol:
 10778                           	opt stack 0
 10779                           tblptru	equ	0xFF8
 10780                           tblptrh	equ	0xFF7
 10781                           tblptrl	equ	0xFF6
 10782                           tablat	equ	0xFF5
 10783                           prodh	equ	0xFF4
 10784                           prodl	equ	0xFF3
 10785                           intcon	equ	0xFF2
 10786                           intcon3	equ	0xFF0
 10787                           postinc0	equ	0xFEE
 10788                           wreg	equ	0xFE8
 10789                           postdec1	equ	0xFE5
 10790                           fsr1l	equ	0xFE1
 10791                           indf2	equ	0xFDF
 10792                           postinc2	equ	0xFDE
 10793                           postdec2	equ	0xFDD
 10794                           fsr2h	equ	0xFDA
 10795                           fsr2l	equ	0xFD9
 10796                           status	equ	0xFD8
 10797                           
 10798 ;; *************** function ___ftmul *****************
 10799 ;; Defined at:
 10800 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;  f1              3    9[BANK0 ] float 
 10803 ;;  f2              3   12[BANK0 ] float 
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 10806 ;;  sign            1   23[BANK0 ] unsigned char 
 10807 ;;  cntr            1   22[BANK0 ] unsigned char 
 10808 ;;  exp             1   18[BANK0 ] unsigned char 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  3    9[BANK0 ] float 
 10811 ;; Registers used:
 10812 ;;		wreg, status,2, status,0, cstack
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10818 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;Total ram usage:       15 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:    4
 10825 ;; This function calls:
 10826 ;;		___ftpack
 10827 ;; This function is called by:
 10828 ;;		_sortBattery
 10829 ;;		_angleToPulse
 10830 ;;		_fround
 10831 ;;		_scale
 10832 ;;		_printf
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           	psect	text41
 10837  001EDE                     __ptext41:
 10838                           	opt stack 0
 10839  001EDE                     ___ftmul:
 10840                           	opt stack 23
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;incstack = 0
 10844  001EDE  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 10845  001EE2  0100               	movlb	0	; () banked
 10846  001EE4  6B90               	clrf	(??___ftmul+1)& (0+255),b
 10847  001EE6  6B91               	clrf	(??___ftmul+2)& (0+255),b
 10848  001EE8  0100               	movlb	0	; () banked
 10849  001EEA  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10850  001EEC  0100               	movlb	0	; () banked
 10851  001EEE  378F               	rlcf	??___ftmul& (0+255),f,b
 10852  001EF0  E301               	bnc	u5651
 10853  001EF2  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 10854  001EF4                     u5651:
 10855  001EF4  0100               	movlb	0	; () banked
 10856  001EF6  518F               	movf	??___ftmul& (0+255),w,b
 10857  001EF8  0100               	movlb	0	; () banked
 10858  001EFA  6F92               	movwf	___ftmul@exp& (0+255),b
 10859  001EFC  0100               	movlb	0	; () banked
 10860  001EFE  5192               	movf	___ftmul@exp& (0+255),w,b
 10861  001F00  A4D8               	btfss	status,2,c
 10862  001F02  D00A               	goto	l5884
 10863                           
 10864                           ; BSR set to: 0
 10865  001F04  0E00               	movlw	0
 10866  001F06  0100               	movlb	0	; () banked
 10867  001F08  6F89               	movwf	?___ftmul& (0+255),b
 10868  001F0A  0E00               	movlw	0
 10869  001F0C  0100               	movlb	0	; () banked
 10870  001F0E  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 10871  001F10  0E00               	movlw	0
 10872  001F12  0100               	movlb	0	; () banked
 10873  001F14  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 10874                           
 10875                           ; BSR set to: 0
 10876  001F16  0012               	return	
 10877  001F18                     l5884:
 10878                           
 10879                           ; BSR set to: 0
 10880  001F18  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 10881  001F1C  0100               	movlb	0	; () banked
 10882  001F1E  6B90               	clrf	(??___ftmul+1)& (0+255),b
 10883  001F20  6B91               	clrf	(??___ftmul+2)& (0+255),b
 10884  001F22  0100               	movlb	0	; () banked
 10885  001F24  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10886  001F26  0100               	movlb	0	; () banked
 10887  001F28  378F               	rlcf	??___ftmul& (0+255),f,b
 10888  001F2A  E301               	bnc	u5671
 10889  001F2C  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 10890  001F2E                     u5671:
 10891  001F2E  0100               	movlb	0	; () banked
 10892  001F30  518F               	movf	??___ftmul& (0+255),w,b
 10893  001F32  0100               	movlb	0	; () banked
 10894  001F34  6F97               	movwf	___ftmul@sign& (0+255),b
 10895  001F36  0100               	movlb	0	; () banked
 10896  001F38  5197               	movf	___ftmul@sign& (0+255),w,b
 10897  001F3A  A4D8               	btfss	status,2,c
 10898  001F3C  D00A               	goto	l5890
 10899                           
 10900                           ; BSR set to: 0
 10901  001F3E  0E00               	movlw	0
 10902  001F40  0100               	movlb	0	; () banked
 10903  001F42  6F89               	movwf	?___ftmul& (0+255),b
 10904  001F44  0E00               	movlw	0
 10905  001F46  0100               	movlb	0	; () banked
 10906  001F48  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 10907  001F4A  0E00               	movlw	0
 10908  001F4C  0100               	movlb	0	; () banked
 10909  001F4E  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 10910                           
 10911                           ; BSR set to: 0
 10912  001F50  0012               	return	
 10913  001F52                     l5890:
 10914                           
 10915                           ; BSR set to: 0
 10916  001F52  0100               	movlb	0	; () banked
 10917  001F54  5197               	movf	___ftmul@sign& (0+255),w,b
 10918  001F56  0F7B               	addlw	123
 10919  001F58  0100               	movlb	0	; () banked
 10920  001F5A  2792               	addwf	___ftmul@exp& (0+255),f,b
 10921                           
 10922                           ; BSR set to: 0
 10923  001F5C  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 10924  001F60  0100               	movlb	0	; () banked
 10925  001F62  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 10926  001F64  0100               	movlb	0	; () banked
 10927  001F66  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 10928  001F68  0E80               	movlw	128
 10929  001F6A  0100               	movlb	0	; () banked
 10930  001F6C  1797               	andwf	___ftmul@sign& (0+255),f,b
 10931                           
 10932                           ; BSR set to: 0
 10933  001F6E  0100               	movlb	0	; () banked
 10934  001F70  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10935                           
 10936                           ; BSR set to: 0
 10937  001F72  0100               	movlb	0	; () banked
 10938  001F74  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10939                           
 10940                           ; BSR set to: 0
 10941  001F76  0EFF               	movlw	255
 10942  001F78  0100               	movlb	0	; () banked
 10943  001F7A  178C               	andwf	___ftmul@f2& (0+255),f,b
 10944  001F7C  0EFF               	movlw	255
 10945  001F7E  0100               	movlb	0	; () banked
 10946  001F80  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10947  001F82  0E00               	movlw	0
 10948  001F84  0100               	movlb	0	; () banked
 10949  001F86  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10950                           
 10951                           ; BSR set to: 0
 10952  001F88  0E00               	movlw	0
 10953  001F8A  0100               	movlb	0	; () banked
 10954  001F8C  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 10955  001F8E  0E00               	movlw	0
 10956  001F90  0100               	movlb	0	; () banked
 10957  001F92  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10958  001F94  0E00               	movlw	0
 10959  001F96  0100               	movlb	0	; () banked
 10960  001F98  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10961                           
 10962                           ; BSR set to: 0
 10963  001F9A  0E07               	movlw	7
 10964  001F9C  0100               	movlb	0	; () banked
 10965  001F9E  6F96               	movwf	___ftmul@cntr& (0+255),b
 10966  001FA0                     l5904:
 10967                           
 10968                           ; BSR set to: 0
 10969  001FA0  0100               	movlb	0	; () banked
 10970  001FA2  A189               	btfss	___ftmul@f1& (0+255),0,b
 10971  001FA4  D00C               	goto	l5908
 10972                           
 10973                           ; BSR set to: 0
 10974  001FA6  0100               	movlb	0	; () banked
 10975  001FA8  518C               	movf	___ftmul@f2& (0+255),w,b
 10976  001FAA  0100               	movlb	0	; () banked
 10977  001FAC  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10978  001FAE  0100               	movlb	0	; () banked
 10979  001FB0  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 10980  001FB2  0100               	movlb	0	; () banked
 10981  001FB4  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10982  001FB6  0100               	movlb	0	; () banked
 10983  001FB8  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 10984  001FBA  0100               	movlb	0	; () banked
 10985  001FBC  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10986  001FBE                     l5908:
 10987                           
 10988                           ; BSR set to: 0
 10989  001FBE  0100               	movlb	0	; () banked
 10990  001FC0  90D8               	bcf	status,0,c
 10991  001FC2  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10992  001FC4  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10993  001FC6  3389               	rrcf	___ftmul@f1& (0+255),f,b
 10994  001FC8  0100               	movlb	0	; () banked
 10995  001FCA  90D8               	bcf	status,0,c
 10996  001FCC  378C               	rlcf	___ftmul@f2& (0+255),f,b
 10997  001FCE  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10998  001FD0  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10999                           
 11000                           ; BSR set to: 0
 11001  001FD2  0100               	movlb	0	; () banked
 11002  001FD4  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 11003  001FD6  D7E4               	goto	l5904
 11004                           
 11005                           ; BSR set to: 0
 11006                           
 11007                           ; BSR set to: 0
 11008  001FD8  0E09               	movlw	9
 11009  001FDA  0100               	movlb	0	; () banked
 11010  001FDC  6F96               	movwf	___ftmul@cntr& (0+255),b
 11011  001FDE                     l5914:
 11012                           
 11013                           ; BSR set to: 0
 11014  001FDE  0100               	movlb	0	; () banked
 11015  001FE0  A189               	btfss	___ftmul@f1& (0+255),0,b
 11016  001FE2  D00C               	goto	l5918
 11017                           
 11018                           ; BSR set to: 0
 11019  001FE4  0100               	movlb	0	; () banked
 11020  001FE6  518C               	movf	___ftmul@f2& (0+255),w,b
 11021  001FE8  0100               	movlb	0	; () banked
 11022  001FEA  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11023  001FEC  0100               	movlb	0	; () banked
 11024  001FEE  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 11025  001FF0  0100               	movlb	0	; () banked
 11026  001FF2  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11027  001FF4  0100               	movlb	0	; () banked
 11028  001FF6  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11029  001FF8  0100               	movlb	0	; () banked
 11030  001FFA  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11031  001FFC                     l5918:
 11032                           
 11033                           ; BSR set to: 0
 11034  001FFC  0100               	movlb	0	; () banked
 11035  001FFE  90D8               	bcf	status,0,c
 11036  002000  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11037  002002  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11038  002004  3389               	rrcf	___ftmul@f1& (0+255),f,b
 11039  002006  0100               	movlb	0	; () banked
 11040  002008  90D8               	bcf	status,0,c
 11041  00200A  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 11042  00200C  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 11043  00200E  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 11044                           
 11045                           ; BSR set to: 0
 11046  002010  0100               	movlb	0	; () banked
 11047  002012  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 11048  002014  D7E4               	goto	l5914
 11049                           
 11050                           ; BSR set to: 0
 11051                           
 11052                           ; BSR set to: 0
 11053  002016  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 11054  00201A  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11055  00201E  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11056  002022  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 11057  002026  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 11058  00202A  ECEE  F016         	call	___ftpack	;wreg free
 11059  00202E  C023  F089         	movff	?___ftpack,?___ftmul
 11060  002032  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 11061  002036  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 11062  00203A  0012               	return	
 11063  00203C                     __end_of___ftmul:
 11064                           	opt stack 0
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           intcon3	equ	0xFF0
 11073                           postinc0	equ	0xFEE
 11074                           wreg	equ	0xFE8
 11075                           postdec1	equ	0xFE5
 11076                           fsr1l	equ	0xFE1
 11077                           indf2	equ	0xFDF
 11078                           postinc2	equ	0xFDE
 11079                           postdec2	equ	0xFDD
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function ___ftdiv *****************
 11085 ;; Defined at:
 11086 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  f1              3   52[COMRAM] float 
 11089 ;;  f2              3   55[COMRAM] float 
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;  f3              3    4[BANK0 ] float 
 11092 ;;  sign            1    8[BANK0 ] unsigned char 
 11093 ;;  exp             1    7[BANK0 ] unsigned char 
 11094 ;;  cntr            1    3[BANK0 ] unsigned char 
 11095 ;; Return value:  Size  Location     Type
 11096 ;;                  3   52[COMRAM] float 
 11097 ;; Registers used:
 11098 ;;		wreg, status,2, status,0, cstack
 11099 ;; Tracked objects:
 11100 ;;		On entry : 0/0
 11101 ;;		On exit  : 0/0
 11102 ;;		Unchanged: 0/0
 11103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11104 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11105 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11106 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11107 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;Total ram usage:       15 bytes
 11109 ;; Hardware stack levels used:    1
 11110 ;; Hardware stack levels required when called:    4
 11111 ;; This function calls:
 11112 ;;		___ftpack
 11113 ;; This function is called by:
 11114 ;;		_sortBattery
 11115 ;;		_angleToPulse
 11116 ;;		_showRunTime
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           	psect	text42
 11121  002532                     __ptext42:
 11122                           	opt stack 0
 11123  002532                     ___ftdiv:
 11124                           	opt stack 23
 11125                           
 11126                           ;incstack = 0
 11127  002532  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
 11128  002536  0100               	movlb	0	; () banked
 11129  002538  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 11130  00253A  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 11131  00253C  3436               	rlcf	___ftdiv@f1+1,w,c
 11132  00253E  0100               	movlb	0	; () banked
 11133  002540  3780               	rlcf	??___ftdiv& (0+255),f,b
 11134  002542  E301               	bnc	u6111
 11135  002544  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 11136  002546                     u6111:
 11137  002546  0100               	movlb	0	; () banked
 11138  002548  5180               	movf	??___ftdiv& (0+255),w,b
 11139  00254A  0100               	movlb	0	; () banked
 11140  00254C  6F87               	movwf	___ftdiv@exp& (0+255),b
 11141  00254E  0100               	movlb	0	; () banked
 11142  002550  5187               	movf	___ftdiv@exp& (0+255),w,b
 11143  002552  A4D8               	btfss	status,2,c
 11144  002554  D007               	goto	l6224
 11145                           
 11146                           ; BSR set to: 0
 11147  002556  0E00               	movlw	0
 11148  002558  6E35               	movwf	?___ftdiv,c
 11149  00255A  0E00               	movlw	0
 11150  00255C  6E36               	movwf	?___ftdiv+1,c
 11151  00255E  0E00               	movlw	0
 11152  002560  6E37               	movwf	?___ftdiv+2,c
 11153                           
 11154                           ; BSR set to: 0
 11155  002562  0012               	return	
 11156  002564                     l6224:
 11157                           
 11158                           ; BSR set to: 0
 11159  002564  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
 11160  002568  0100               	movlb	0	; () banked
 11161  00256A  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 11162  00256C  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 11163  00256E  3439               	rlcf	___ftdiv@f2+1,w,c
 11164  002570  0100               	movlb	0	; () banked
 11165  002572  3780               	rlcf	??___ftdiv& (0+255),f,b
 11166  002574  E301               	bnc	u6131
 11167  002576  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 11168  002578                     u6131:
 11169  002578  0100               	movlb	0	; () banked
 11170  00257A  5180               	movf	??___ftdiv& (0+255),w,b
 11171  00257C  0100               	movlb	0	; () banked
 11172  00257E  6F88               	movwf	___ftdiv@sign& (0+255),b
 11173  002580  0100               	movlb	0	; () banked
 11174  002582  5188               	movf	___ftdiv@sign& (0+255),w,b
 11175  002584  A4D8               	btfss	status,2,c
 11176  002586  D007               	goto	l6230
 11177                           
 11178                           ; BSR set to: 0
 11179  002588  0E00               	movlw	0
 11180  00258A  6E35               	movwf	?___ftdiv,c
 11181  00258C  0E00               	movlw	0
 11182  00258E  6E36               	movwf	?___ftdiv+1,c
 11183  002590  0E00               	movlw	0
 11184  002592  6E37               	movwf	?___ftdiv+2,c
 11185                           
 11186                           ; BSR set to: 0
 11187  002594  0012               	return	
 11188  002596                     l6230:
 11189                           
 11190                           ; BSR set to: 0
 11191  002596  0E00               	movlw	0
 11192  002598  0100               	movlb	0	; () banked
 11193  00259A  6F84               	movwf	___ftdiv@f3& (0+255),b
 11194  00259C  0E00               	movlw	0
 11195  00259E  0100               	movlb	0	; () banked
 11196  0025A0  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
 11197  0025A2  0E00               	movlw	0
 11198  0025A4  0100               	movlb	0	; () banked
 11199  0025A6  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
 11200                           
 11201                           ; BSR set to: 0
 11202  0025A8  0100               	movlb	0	; () banked
 11203  0025AA  5188               	movf	___ftdiv@sign& (0+255),w,b
 11204  0025AC  0F89               	addlw	137
 11205  0025AE  0100               	movlb	0	; () banked
 11206  0025B0  5F87               	subwf	___ftdiv@exp& (0+255),f,b
 11207                           
 11208                           ; BSR set to: 0
 11209  0025B2  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
 11210                           
 11211                           ; BSR set to: 0
 11212  0025B6  503A               	movf	___ftdiv@f2+2,w,c
 11213  0025B8  0100               	movlb	0	; () banked
 11214  0025BA  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
 11215                           
 11216                           ; BSR set to: 0
 11217  0025BC  0E80               	movlw	128
 11218  0025BE  0100               	movlb	0	; () banked
 11219  0025C0  1788               	andwf	___ftdiv@sign& (0+255),f,b
 11220                           
 11221                           ; BSR set to: 0
 11222  0025C2  8E36               	bsf	___ftdiv@f1+1,7,c
 11223                           
 11224                           ; BSR set to: 0
 11225  0025C4  0EFF               	movlw	255
 11226  0025C6  1635               	andwf	___ftdiv@f1,f,c
 11227  0025C8  0EFF               	movlw	255
 11228  0025CA  1636               	andwf	___ftdiv@f1+1,f,c
 11229  0025CC  0E00               	movlw	0
 11230  0025CE  1637               	andwf	___ftdiv@f1+2,f,c
 11231                           
 11232                           ; BSR set to: 0
 11233  0025D0  8E39               	bsf	___ftdiv@f2+1,7,c
 11234                           
 11235                           ; BSR set to: 0
 11236  0025D2  0EFF               	movlw	255
 11237  0025D4  1638               	andwf	___ftdiv@f2,f,c
 11238  0025D6  0EFF               	movlw	255
 11239  0025D8  1639               	andwf	___ftdiv@f2+1,f,c
 11240  0025DA  0E00               	movlw	0
 11241  0025DC  163A               	andwf	___ftdiv@f2+2,f,c
 11242                           
 11243                           ; BSR set to: 0
 11244  0025DE  0E18               	movlw	24
 11245  0025E0  0100               	movlb	0	; () banked
 11246  0025E2  6F83               	movwf	___ftdiv@cntr& (0+255),b
 11247  0025E4                     l6250:
 11248                           
 11249                           ; BSR set to: 0
 11250  0025E4  0100               	movlb	0	; () banked
 11251  0025E6  90D8               	bcf	status,0,c
 11252  0025E8  3784               	rlcf	___ftdiv@f3& (0+255),f,b
 11253  0025EA  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11254  0025EC  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11255                           
 11256                           ; BSR set to: 0
 11257  0025EE  5038               	movf	___ftdiv@f2,w,c
 11258  0025F0  5C35               	subwf	___ftdiv@f1,w,c
 11259  0025F2  5039               	movf	___ftdiv@f2+1,w,c
 11260  0025F4  5836               	subwfb	___ftdiv@f1+1,w,c
 11261  0025F6  503A               	movf	___ftdiv@f2+2,w,c
 11262  0025F8  5837               	subwfb	___ftdiv@f1+2,w,c
 11263  0025FA  A0D8               	btfss	status,0,c
 11264  0025FC  D008               	goto	l1153
 11265                           
 11266                           ; BSR set to: 0
 11267  0025FE  5038               	movf	___ftdiv@f2,w,c
 11268  002600  5E35               	subwf	___ftdiv@f1,f,c
 11269  002602  5039               	movf	___ftdiv@f2+1,w,c
 11270  002604  5A36               	subwfb	___ftdiv@f1+1,f,c
 11271  002606  503A               	movf	___ftdiv@f2+2,w,c
 11272  002608  5A37               	subwfb	___ftdiv@f1+2,f,c
 11273                           
 11274                           ; BSR set to: 0
 11275  00260A  0100               	movlb	0	; () banked
 11276  00260C  8184               	bsf	___ftdiv@f3& (0+255),0,b
 11277  00260E                     l1153:
 11278                           
 11279                           ; BSR set to: 0
 11280  00260E  90D8               	bcf	status,0,c
 11281  002610  3635               	rlcf	___ftdiv@f1,f,c
 11282  002612  3636               	rlcf	___ftdiv@f1+1,f,c
 11283  002614  3637               	rlcf	___ftdiv@f1+2,f,c
 11284                           
 11285                           ; BSR set to: 0
 11286  002616  0100               	movlb	0	; () banked
 11287  002618  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
 11288  00261A  D7E4               	goto	l6250
 11289                           
 11290                           ; BSR set to: 0
 11291                           
 11292                           ; BSR set to: 0
 11293  00261C  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
 11294  002620  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11295  002624  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11296  002628  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
 11297  00262C  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
 11298  002630  ECEE  F016         	call	___ftpack	;wreg free
 11299  002634  C023  F035         	movff	?___ftpack,?___ftdiv
 11300  002638  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
 11301  00263C  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
 11302  002640  0012               	return	
 11303  002642                     __end_of___ftdiv:
 11304                           	opt stack 0
 11305                           tblptru	equ	0xFF8
 11306                           tblptrh	equ	0xFF7
 11307                           tblptrl	equ	0xFF6
 11308                           tablat	equ	0xFF5
 11309                           prodh	equ	0xFF4
 11310                           prodl	equ	0xFF3
 11311                           intcon	equ	0xFF2
 11312                           intcon3	equ	0xFF0
 11313                           postinc0	equ	0xFEE
 11314                           wreg	equ	0xFE8
 11315                           postdec1	equ	0xFE5
 11316                           fsr1l	equ	0xFE1
 11317                           indf2	equ	0xFDF
 11318                           postinc2	equ	0xFDE
 11319                           postdec2	equ	0xFDD
 11320                           fsr2h	equ	0xFDA
 11321                           fsr2l	equ	0xFD9
 11322                           status	equ	0xFD8
 11323                           
 11324 ;; *************** function ___ftadd *****************
 11325 ;; Defined at:
 11326 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11327 ;; Parameters:    Size  Location     Type
 11328 ;;  f1              3   34[BANK0 ] float 
 11329 ;;  f2              3   37[BANK0 ] float 
 11330 ;; Auto vars:     Size  Location     Type
 11331 ;;  exp1            1   45[BANK0 ] unsigned char 
 11332 ;;  exp2            1   44[BANK0 ] unsigned char 
 11333 ;;  sign            1   43[BANK0 ] unsigned char 
 11334 ;; Return value:  Size  Location     Type
 11335 ;;                  3   34[BANK0 ] float 
 11336 ;; Registers used:
 11337 ;;		wreg, status,2, status,0, cstack
 11338 ;; Tracked objects:
 11339 ;;		On entry : 0/0
 11340 ;;		On exit  : 0/0
 11341 ;;		Unchanged: 0/0
 11342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11343 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11344 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11345 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11346 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11347 ;;Total ram usage:       12 bytes
 11348 ;; Hardware stack levels used:    1
 11349 ;; Hardware stack levels required when called:    4
 11350 ;; This function calls:
 11351 ;;		___ftpack
 11352 ;; This function is called by:
 11353 ;;		_angleToPulse
 11354 ;;		_printf
 11355 ;;		___ftsub
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359                           	psect	text43
 11360  001A16                     __ptext43:
 11361                           	opt stack 0
 11362  001A16                     ___ftadd:
 11363                           	opt stack 23
 11364                           
 11365                           ;incstack = 0
 11366  001A16  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 11367  001A1A  0100               	movlb	0	; () banked
 11368  001A1C  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 11369  001A1E  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 11370  001A20  0100               	movlb	0	; () banked
 11371  001A22  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11372  001A24  0100               	movlb	0	; () banked
 11373  001A26  37A8               	rlcf	??___ftadd& (0+255),f,b
 11374  001A28  E301               	bnc	u5441
 11375  001A2A  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 11376  001A2C                     u5441:
 11377  001A2C  0100               	movlb	0	; () banked
 11378  001A2E  51A8               	movf	??___ftadd& (0+255),w,b
 11379  001A30  0100               	movlb	0	; () banked
 11380  001A32  6FAD               	movwf	___ftadd@exp1& (0+255),b
 11381  001A34  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 11382  001A38  0100               	movlb	0	; () banked
 11383  001A3A  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 11384  001A3C  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 11385  001A3E  0100               	movlb	0	; () banked
 11386  001A40  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11387  001A42  0100               	movlb	0	; () banked
 11388  001A44  37A8               	rlcf	??___ftadd& (0+255),f,b
 11389  001A46  E301               	bnc	u5451
 11390  001A48  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 11391  001A4A                     u5451:
 11392  001A4A  0100               	movlb	0	; () banked
 11393  001A4C  51A8               	movf	??___ftadd& (0+255),w,b
 11394  001A4E  0100               	movlb	0	; () banked
 11395  001A50  6FAC               	movwf	___ftadd@exp2& (0+255),b
 11396                           
 11397                           ; BSR set to: 0
 11398  001A52  0100               	movlb	0	; () banked
 11399  001A54  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11400  001A56  0100               	movlb	0	; () banked
 11401  001A58  B4D8               	btfsc	status,2,c
 11402  001A5A  D011               	goto	l1118
 11403                           
 11404                           ; BSR set to: 0
 11405  001A5C  0100               	movlb	0	; () banked
 11406  001A5E  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11407  001A60  0100               	movlb	0	; () banked
 11408  001A62  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 11409  001A64  B0D8               	btfsc	status,0,c
 11410  001A66  D012               	goto	l5816
 11411                           
 11412                           ; BSR set to: 0
 11413  001A68  0100               	movlb	0	; () banked
 11414  001A6A  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11415  001A6C  0800               	sublw	0
 11416  001A6E  0100               	movlb	0	; () banked
 11417  001A70  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 11418  001A72  0100               	movlb	0	; () banked
 11419  001A74  6FA8               	movwf	??___ftadd& (0+255),b
 11420  001A76  0E18               	movlw	24
 11421  001A78  0100               	movlb	0	; () banked
 11422  001A7A  65A8               	cpfsgt	??___ftadd& (0+255),b
 11423  001A7C  D007               	goto	l5816
 11424  001A7E                     l1118:
 11425                           
 11426                           ; BSR set to: 0
 11427  001A7E  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 11428  001A82  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 11429  001A86  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 11430  001A8A  0012               	return	
 11431  001A8C                     l5816:
 11432                           
 11433                           ; BSR set to: 0
 11434  001A8C  0100               	movlb	0	; () banked
 11435  001A8E  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11436  001A90  0100               	movlb	0	; () banked
 11437  001A92  B4D8               	btfsc	status,2,c
 11438  001A94  D011               	goto	l1122
 11439                           
 11440                           ; BSR set to: 0
 11441  001A96  0100               	movlb	0	; () banked
 11442  001A98  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11443  001A9A  0100               	movlb	0	; () banked
 11444  001A9C  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 11445  001A9E  B0D8               	btfsc	status,0,c
 11446  001AA0  D012               	goto	l5822
 11447                           
 11448                           ; BSR set to: 0
 11449  001AA2  0100               	movlb	0	; () banked
 11450  001AA4  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11451  001AA6  0800               	sublw	0
 11452  001AA8  0100               	movlb	0	; () banked
 11453  001AAA  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 11454  001AAC  0100               	movlb	0	; () banked
 11455  001AAE  6FA8               	movwf	??___ftadd& (0+255),b
 11456  001AB0  0E18               	movlw	24
 11457  001AB2  0100               	movlb	0	; () banked
 11458  001AB4  65A8               	cpfsgt	??___ftadd& (0+255),b
 11459  001AB6  D007               	goto	l5822
 11460  001AB8                     l1122:
 11461                           
 11462                           ; BSR set to: 0
 11463  001AB8  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 11464  001ABC  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 11465  001AC0  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 11466  001AC4  0012               	return	
 11467  001AC6                     l5822:
 11468                           
 11469                           ; BSR set to: 0
 11470  001AC6  0E06               	movlw	6
 11471  001AC8  0100               	movlb	0	; () banked
 11472  001ACA  6FAB               	movwf	___ftadd@sign& (0+255),b
 11473                           
 11474                           ; BSR set to: 0
 11475  001ACC  0100               	movlb	0	; () banked
 11476  001ACE  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11477  001AD0  D002               	goto	l5828
 11478                           
 11479                           ; BSR set to: 0
 11480  001AD2  0100               	movlb	0	; () banked
 11481  001AD4  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 11482  001AD6                     l5828:
 11483                           
 11484                           ; BSR set to: 0
 11485  001AD6  0100               	movlb	0	; () banked
 11486  001AD8  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11487  001ADA  D002               	goto	l1124
 11488                           
 11489                           ; BSR set to: 0
 11490  001ADC  0100               	movlb	0	; () banked
 11491  001ADE  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 11492  001AE0                     l1124:
 11493                           
 11494                           ; BSR set to: 0
 11495  001AE0  0100               	movlb	0	; () banked
 11496  001AE2  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11497                           
 11498                           ; BSR set to: 0
 11499  001AE4  0EFF               	movlw	255
 11500  001AE6  0100               	movlb	0	; () banked
 11501  001AE8  17A2               	andwf	___ftadd@f1& (0+255),f,b
 11502  001AEA  0EFF               	movlw	255
 11503  001AEC  0100               	movlb	0	; () banked
 11504  001AEE  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11505  001AF0  0E00               	movlw	0
 11506  001AF2  0100               	movlb	0	; () banked
 11507  001AF4  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11508  001AF6  0100               	movlb	0	; () banked
 11509  001AF8  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11510                           
 11511                           ; BSR set to: 0
 11512  001AFA  0EFF               	movlw	255
 11513  001AFC  0100               	movlb	0	; () banked
 11514  001AFE  17A5               	andwf	___ftadd@f2& (0+255),f,b
 11515  001B00  0EFF               	movlw	255
 11516  001B02  0100               	movlb	0	; () banked
 11517  001B04  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11518  001B06  0E00               	movlw	0
 11519  001B08  0100               	movlb	0	; () banked
 11520  001B0A  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11521                           
 11522                           ; BSR set to: 0
 11523  001B0C  0100               	movlb	0	; () banked
 11524  001B0E  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11525  001B10  0100               	movlb	0	; () banked
 11526  001B12  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 11527  001B14  B0D8               	btfsc	status,0,c
 11528  001B16  D025               	goto	l5848
 11529  001B18                     l5838:
 11530                           
 11531                           ; BSR set to: 0
 11532  001B18  0100               	movlb	0	; () banked
 11533  001B1A  90D8               	bcf	status,0,c
 11534  001B1C  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 11535  001B1E  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11536  001B20  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11537  001B22  0100               	movlb	0	; () banked
 11538  001B24  07AC               	decf	___ftadd@exp2& (0+255),f,b
 11539                           
 11540                           ; BSR set to: 0
 11541  001B26  0100               	movlb	0	; () banked
 11542  001B28  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11543  001B2A  0100               	movlb	0	; () banked
 11544  001B2C  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 11545  001B2E  B4D8               	btfsc	status,2,c
 11546  001B30  D011               	goto	l5846
 11547                           
 11548                           ; BSR set to: 0
 11549  001B32  0100               	movlb	0	; () banked
 11550  001B34  07AB               	decf	___ftadd@sign& (0+255),f,b
 11551  001B36  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 11552  001B3A  0E07               	movlw	7
 11553  001B3C  0100               	movlb	0	; () banked
 11554  001B3E  17A8               	andwf	??___ftadd& (0+255),f,b
 11555  001B40  B4D8               	btfsc	status,2,c
 11556  001B42  D008               	goto	l5846
 11557  001B44  D7E9               	goto	l5838
 11558  001B46                     l5844:
 11559                           
 11560                           ; BSR set to: 0
 11561  001B46  0100               	movlb	0	; () banked
 11562  001B48  90D8               	bcf	status,0,c
 11563  001B4A  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11564  001B4C  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11565  001B4E  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 11566  001B50  0100               	movlb	0	; () banked
 11567  001B52  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 11568  001B54                     l5846:
 11569                           
 11570                           ; BSR set to: 0
 11571  001B54  0100               	movlb	0	; () banked
 11572  001B56  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11573  001B58  0100               	movlb	0	; () banked
 11574  001B5A  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 11575  001B5C  B4D8               	btfsc	status,2,c
 11576  001B5E  D02B               	goto	l1133
 11577  001B60  D7F2               	goto	l5844
 11578  001B62                     l5848:
 11579                           
 11580                           ; BSR set to: 0
 11581  001B62  0100               	movlb	0	; () banked
 11582  001B64  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11583  001B66  0100               	movlb	0	; () banked
 11584  001B68  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 11585  001B6A  B0D8               	btfsc	status,0,c
 11586  001B6C  D024               	goto	l1133
 11587  001B6E                     l5850:
 11588                           
 11589                           ; BSR set to: 0
 11590  001B6E  0100               	movlb	0	; () banked
 11591  001B70  90D8               	bcf	status,0,c
 11592  001B72  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 11593  001B74  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11594  001B76  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11595  001B78  0100               	movlb	0	; () banked
 11596  001B7A  07AD               	decf	___ftadd@exp1& (0+255),f,b
 11597                           
 11598                           ; BSR set to: 0
 11599  001B7C  0100               	movlb	0	; () banked
 11600  001B7E  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11601  001B80  0100               	movlb	0	; () banked
 11602  001B82  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 11603  001B84  B4D8               	btfsc	status,2,c
 11604  001B86  D011               	goto	l5858
 11605                           
 11606                           ; BSR set to: 0
 11607  001B88  0100               	movlb	0	; () banked
 11608  001B8A  07AB               	decf	___ftadd@sign& (0+255),f,b
 11609  001B8C  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 11610  001B90  0E07               	movlw	7
 11611  001B92  0100               	movlb	0	; () banked
 11612  001B94  17A8               	andwf	??___ftadd& (0+255),f,b
 11613  001B96  B4D8               	btfsc	status,2,c
 11614  001B98  D008               	goto	l5858
 11615  001B9A  D7E9               	goto	l5850
 11616  001B9C                     l5856:
 11617                           
 11618                           ; BSR set to: 0
 11619  001B9C  0100               	movlb	0	; () banked
 11620  001B9E  90D8               	bcf	status,0,c
 11621  001BA0  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11622  001BA2  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11623  001BA4  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 11624  001BA6  0100               	movlb	0	; () banked
 11625  001BA8  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 11626  001BAA                     l5858:
 11627                           
 11628                           ; BSR set to: 0
 11629  001BAA  0100               	movlb	0	; () banked
 11630  001BAC  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11631  001BAE  0100               	movlb	0	; () banked
 11632  001BB0  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 11633  001BB2  A4D8               	btfss	status,2,c
 11634  001BB4  D7F3               	goto	l5856
 11635  001BB6                     l1133:
 11636                           
 11637                           ; BSR set to: 0
 11638  001BB6  0100               	movlb	0	; () banked
 11639  001BB8  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 11640  001BBA  D012               	goto	l1142
 11641                           
 11642                           ; BSR set to: 0
 11643  001BBC  0EFF               	movlw	255
 11644  001BBE  0100               	movlb	0	; () banked
 11645  001BC0  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 11646  001BC2  0EFF               	movlw	255
 11647  001BC4  0100               	movlb	0	; () banked
 11648  001BC6  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11649  001BC8  0EFF               	movlw	255
 11650  001BCA  0100               	movlb	0	; () banked
 11651  001BCC  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11652  001BCE  0E01               	movlw	1
 11653  001BD0  0100               	movlb	0	; () banked
 11654  001BD2  27A2               	addwf	___ftadd@f1& (0+255),f,b
 11655  001BD4  0E00               	movlw	0
 11656  001BD6  0100               	movlb	0	; () banked
 11657  001BD8  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11658  001BDA  0E00               	movlw	0
 11659  001BDC  0100               	movlb	0	; () banked
 11660  001BDE  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11661  001BE0                     l1142:
 11662                           
 11663                           ; BSR set to: 0
 11664  001BE0  0100               	movlb	0	; () banked
 11665  001BE2  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 11666  001BE4  D012               	goto	l5864
 11667                           
 11668                           ; BSR set to: 0
 11669  001BE6  0EFF               	movlw	255
 11670  001BE8  0100               	movlb	0	; () banked
 11671  001BEA  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 11672  001BEC  0EFF               	movlw	255
 11673  001BEE  0100               	movlb	0	; () banked
 11674  001BF0  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11675  001BF2  0EFF               	movlw	255
 11676  001BF4  0100               	movlb	0	; () banked
 11677  001BF6  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11678  001BF8  0E01               	movlw	1
 11679  001BFA  0100               	movlb	0	; () banked
 11680  001BFC  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11681  001BFE  0E00               	movlw	0
 11682  001C00  0100               	movlb	0	; () banked
 11683  001C02  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11684  001C04  0E00               	movlw	0
 11685  001C06  0100               	movlb	0	; () banked
 11686  001C08  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11687  001C0A                     l5864:
 11688                           
 11689                           ; BSR set to: 0
 11690  001C0A  0E00               	movlw	0
 11691  001C0C  0100               	movlb	0	; () banked
 11692  001C0E  6FAB               	movwf	___ftadd@sign& (0+255),b
 11693                           
 11694                           ; BSR set to: 0
 11695  001C10  0100               	movlb	0	; () banked
 11696  001C12  51A2               	movf	___ftadd@f1& (0+255),w,b
 11697  001C14  0100               	movlb	0	; () banked
 11698  001C16  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11699  001C18  0100               	movlb	0	; () banked
 11700  001C1A  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 11701  001C1C  0100               	movlb	0	; () banked
 11702  001C1E  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11703  001C20  0100               	movlb	0	; () banked
 11704  001C22  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 11705  001C24  0100               	movlb	0	; () banked
 11706  001C26  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11707                           
 11708                           ; BSR set to: 0
 11709  001C28  0100               	movlb	0	; () banked
 11710  001C2A  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11711  001C2C  D015               	goto	l5874
 11712                           
 11713                           ; BSR set to: 0
 11714  001C2E  0EFF               	movlw	255
 11715  001C30  0100               	movlb	0	; () banked
 11716  001C32  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 11717  001C34  0EFF               	movlw	255
 11718  001C36  0100               	movlb	0	; () banked
 11719  001C38  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11720  001C3A  0EFF               	movlw	255
 11721  001C3C  0100               	movlb	0	; () banked
 11722  001C3E  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11723  001C40  0E01               	movlw	1
 11724  001C42  0100               	movlb	0	; () banked
 11725  001C44  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11726  001C46  0E00               	movlw	0
 11727  001C48  0100               	movlb	0	; () banked
 11728  001C4A  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11729  001C4C  0E00               	movlw	0
 11730  001C4E  0100               	movlb	0	; () banked
 11731  001C50  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11732                           
 11733                           ; BSR set to: 0
 11734  001C52  0E01               	movlw	1
 11735  001C54  0100               	movlb	0	; () banked
 11736  001C56  6FAB               	movwf	___ftadd@sign& (0+255),b
 11737  001C58                     l5874:
 11738                           
 11739                           ; BSR set to: 0
 11740  001C58  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 11741  001C5C  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 11742  001C60  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 11743  001C64  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 11744  001C68  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 11745  001C6C  ECEE  F016         	call	___ftpack	;wreg free
 11746  001C70  C023  F0A2         	movff	?___ftpack,?___ftadd
 11747  001C74  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 11748  001C78  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 11749  001C7C  0012               	return	
 11750  001C7E                     __end_of___ftadd:
 11751                           	opt stack 0
 11752                           tblptru	equ	0xFF8
 11753                           tblptrh	equ	0xFF7
 11754                           tblptrl	equ	0xFF6
 11755                           tablat	equ	0xFF5
 11756                           prodh	equ	0xFF4
 11757                           prodl	equ	0xFF3
 11758                           intcon	equ	0xFF2
 11759                           intcon3	equ	0xFF0
 11760                           postinc0	equ	0xFEE
 11761                           wreg	equ	0xFE8
 11762                           postdec1	equ	0xFE5
 11763                           fsr1l	equ	0xFE1
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function ___awtoft *****************
 11772 ;; Defined at:
 11773 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;  c               2   42[COMRAM] int 
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;  sign            1   45[COMRAM] unsigned char 
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  3   42[COMRAM] float 
 11780 ;; Registers used:
 11781 ;;		wreg, status,2, status,0, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11787 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11790 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;Total ram usage:        4 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    4
 11794 ;; This function calls:
 11795 ;;		___ftpack
 11796 ;; This function is called by:
 11797 ;;		_sortBattery
 11798 ;;		_angleToPulse
 11799 ;;		_showRunTime
 11800 ;;		_testFrequency
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           	psect	text44
 11805  0038CE                     __ptext44:
 11806                           	opt stack 0
 11807  0038CE                     ___awtoft:
 11808                           	opt stack 23
 11809                           
 11810                           ;incstack = 0
 11811  0038CE  0E00               	movlw	0
 11812  0038D0  6E2E               	movwf	___awtoft@sign,c
 11813  0038D2  AE2C               	btfss	___awtoft@c+1,7,c
 11814  0038D4  D006               	goto	l6280
 11815  0038D6  6C2B               	negf	___awtoft@c,c
 11816  0038D8  1E2C               	comf	___awtoft@c+1,f,c
 11817  0038DA  B0D8               	btfsc	status,0,c
 11818  0038DC  2A2C               	incf	___awtoft@c+1,f,c
 11819  0038DE  0E01               	movlw	1
 11820  0038E0  6E2E               	movwf	___awtoft@sign,c
 11821  0038E2                     l6280:
 11822  0038E2  C02B  F023         	movff	___awtoft@c,___ftpack@arg
 11823  0038E6  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
 11824  0038EA  6A25               	clrf	___ftpack@arg+2,c
 11825  0038EC  0E8E               	movlw	142
 11826  0038EE  6E26               	movwf	___ftpack@exp,c
 11827  0038F0  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
 11828  0038F4  ECEE  F016         	call	___ftpack	;wreg free
 11829  0038F8  C023  F02B         	movff	?___ftpack,?___awtoft
 11830  0038FC  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
 11831  003900  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
 11832  003904  0012               	return	
 11833  003906                     __end_of___awtoft:
 11834                           	opt stack 0
 11835                           tblptru	equ	0xFF8
 11836                           tblptrh	equ	0xFF7
 11837                           tblptrl	equ	0xFF6
 11838                           tablat	equ	0xFF5
 11839                           prodh	equ	0xFF4
 11840                           prodl	equ	0xFF3
 11841                           intcon	equ	0xFF2
 11842                           intcon3	equ	0xFF0
 11843                           postinc0	equ	0xFEE
 11844                           wreg	equ	0xFE8
 11845                           postdec1	equ	0xFE5
 11846                           fsr1l	equ	0xFE1
 11847                           indf2	equ	0xFDF
 11848                           postinc2	equ	0xFDE
 11849                           postdec2	equ	0xFDD
 11850                           fsr2h	equ	0xFDA
 11851                           fsr2l	equ	0xFD9
 11852                           status	equ	0xFD8
 11853                           
 11854 ;; *************** function ___altoft *****************
 11855 ;; Defined at:
 11856 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;  c               4   42[COMRAM] long 
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;  sign            1   51[COMRAM] unsigned char 
 11861 ;;  exp             1   50[COMRAM] unsigned char 
 11862 ;; Return value:  Size  Location     Type
 11863 ;;                  3   42[COMRAM] float 
 11864 ;; Registers used:
 11865 ;;		wreg, status,2, status,0, cstack
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11871 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11872 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11873 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11874 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11875 ;;Total ram usage:       10 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    4
 11878 ;; This function calls:
 11879 ;;		___ftpack
 11880 ;; This function is called by:
 11881 ;;		_sortBattery
 11882 ;;		_angleToPulse
 11883 ;; This function uses a non-reentrant model
 11884 ;;
 11885                           
 11886                           	psect	text45
 11887  00328C                     __ptext45:
 11888                           	opt stack 0
 11889  00328C                     ___altoft:
 11890                           	opt stack 23
 11891                           
 11892                           ;incstack = 0
 11893  00328C  0E00               	movlw	0
 11894  00328E  6E34               	movwf	___altoft@sign,c
 11895  003290  0E8E               	movlw	142
 11896  003292  6E33               	movwf	___altoft@exp,c
 11897  003294  AE2E               	btfss	___altoft@c+3,7,c
 11898  003296  D011               	goto	l6212
 11899  003298  1E2E               	comf	___altoft@c+3,f,c
 11900  00329A  1E2D               	comf	___altoft@c+2,f,c
 11901  00329C  1E2C               	comf	___altoft@c+1,f,c
 11902  00329E  6C2B               	negf	___altoft@c,c
 11903  0032A0  0E00               	movlw	0
 11904  0032A2  222C               	addwfc	___altoft@c+1,f,c
 11905  0032A4  222D               	addwfc	___altoft@c+2,f,c
 11906  0032A6  222E               	addwfc	___altoft@c+3,f,c
 11907  0032A8  0E01               	movlw	1
 11908  0032AA  6E34               	movwf	___altoft@sign,c
 11909  0032AC  D006               	goto	l6212
 11910  0032AE                     l6210:
 11911  0032AE  90D8               	bcf	status,0,c
 11912  0032B0  322E               	rrcf	___altoft@c+3,f,c
 11913  0032B2  322D               	rrcf	___altoft@c+2,f,c
 11914  0032B4  322C               	rrcf	___altoft@c+1,f,c
 11915  0032B6  322B               	rrcf	___altoft@c,f,c
 11916  0032B8  2A33               	incf	___altoft@exp,f,c
 11917  0032BA                     l6212:
 11918  0032BA  0E00               	movlw	0
 11919  0032BC  142B               	andwf	___altoft@c,w,c
 11920  0032BE  6E2F               	movwf	??___altoft& (0+255),c
 11921  0032C0  0E00               	movlw	0
 11922  0032C2  142C               	andwf	___altoft@c+1,w,c
 11923  0032C4  6E30               	movwf	(??___altoft+1)& (0+255),c
 11924  0032C6  0E00               	movlw	0
 11925  0032C8  142D               	andwf	___altoft@c+2,w,c
 11926  0032CA  6E31               	movwf	(??___altoft+2)& (0+255),c
 11927  0032CC  0EFF               	movlw	255
 11928  0032CE  142E               	andwf	___altoft@c+3,w,c
 11929  0032D0  6E32               	movwf	(??___altoft+3)& (0+255),c
 11930  0032D2  502F               	movf	??___altoft,w,c
 11931  0032D4  1030               	iorwf	??___altoft+1,w,c
 11932  0032D6  1031               	iorwf	??___altoft+2,w,c
 11933  0032D8  1032               	iorwf	??___altoft+3,w,c
 11934  0032DA  A4D8               	btfss	status,2,c
 11935  0032DC  D7E8               	goto	l6210
 11936  0032DE  C02B  F023         	movff	___altoft@c,___ftpack@arg
 11937  0032E2  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
 11938  0032E6  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
 11939  0032EA  C033  F026         	movff	___altoft@exp,___ftpack@exp
 11940  0032EE  C034  F027         	movff	___altoft@sign,___ftpack@sign
 11941  0032F2  ECEE  F016         	call	___ftpack	;wreg free
 11942  0032F6  C023  F02B         	movff	?___ftpack,?___altoft
 11943  0032FA  C024  F02C         	movff	?___ftpack+1,?___altoft+1
 11944  0032FE  C025  F02D         	movff	?___ftpack+2,?___altoft+2
 11945  003302  0012               	return	
 11946  003304                     __end_of___altoft:
 11947                           	opt stack 0
 11948                           tblptru	equ	0xFF8
 11949                           tblptrh	equ	0xFF7
 11950                           tblptrl	equ	0xFF6
 11951                           tablat	equ	0xFF5
 11952                           prodh	equ	0xFF4
 11953                           prodl	equ	0xFF3
 11954                           intcon	equ	0xFF2
 11955                           intcon3	equ	0xFF0
 11956                           postinc0	equ	0xFEE
 11957                           wreg	equ	0xFE8
 11958                           postdec1	equ	0xFE5
 11959                           fsr1l	equ	0xFE1
 11960                           indf2	equ	0xFDF
 11961                           postinc2	equ	0xFDE
 11962                           postdec2	equ	0xFDD
 11963                           fsr2h	equ	0xFDA
 11964                           fsr2l	equ	0xFD9
 11965                           status	equ	0xFD8
 11966                           
 11967 ;; *************** function ___ftpack *****************
 11968 ;; Defined at:
 11969 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11970 ;; Parameters:    Size  Location     Type
 11971 ;;  arg             3   34[COMRAM] unsigned um
 11972 ;;  exp             1   37[COMRAM] unsigned char 
 11973 ;;  sign            1   38[COMRAM] unsigned char 
 11974 ;; Auto vars:     Size  Location     Type
 11975 ;;		None
 11976 ;; Return value:  Size  Location     Type
 11977 ;;                  3   34[COMRAM] float 
 11978 ;; Registers used:
 11979 ;;		wreg, status,2, status,0
 11980 ;; Tracked objects:
 11981 ;;		On entry : 0/0
 11982 ;;		On exit  : 0/0
 11983 ;;		Unchanged: 0/0
 11984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11985 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11987 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11989 ;;Total ram usage:        8 bytes
 11990 ;; Hardware stack levels used:    1
 11991 ;; Hardware stack levels required when called:    3
 11992 ;; This function calls:
 11993 ;;		Nothing
 11994 ;; This function is called by:
 11995 ;;		___altoft
 11996 ;;		___awtoft
 11997 ;;		___ftadd
 11998 ;;		___ftdiv
 11999 ;;		___ftmul
 12000 ;;		___lltoft
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           	psect	text46
 12005  002DDC                     __ptext46:
 12006                           	opt stack 0
 12007  002DDC                     ___ftpack:
 12008                           	opt stack 23
 12009                           
 12010                           ;incstack = 0
 12011  002DDC  5026               	movf	___ftpack@exp,w,c
 12012  002DDE  B4D8               	btfsc	status,2,c
 12013  002DE0  D005               	goto	l5768
 12014  002DE2  5023               	movf	___ftpack@arg,w,c
 12015  002DE4  1024               	iorwf	___ftpack@arg+1,w,c
 12016  002DE6  1025               	iorwf	___ftpack@arg+2,w,c
 12017  002DE8  A4D8               	btfss	status,2,c
 12018  002DEA  D00C               	goto	l5774
 12019  002DEC                     l5768:
 12020  002DEC  0E00               	movlw	0
 12021  002DEE  6E23               	movwf	?___ftpack,c
 12022  002DF0  0E00               	movlw	0
 12023  002DF2  6E24               	movwf	?___ftpack+1,c
 12024  002DF4  0E00               	movlw	0
 12025  002DF6  6E25               	movwf	?___ftpack+2,c
 12026  002DF8  0012               	return	
 12027  002DFA                     l5772:
 12028  002DFA  2A26               	incf	___ftpack@exp,f,c
 12029  002DFC  90D8               	bcf	status,0,c
 12030  002DFE  3225               	rrcf	___ftpack@arg+2,f,c
 12031  002E00  3224               	rrcf	___ftpack@arg+1,f,c
 12032  002E02  3223               	rrcf	___ftpack@arg,f,c
 12033  002E04                     l5774:
 12034  002E04  0E00               	movlw	0
 12035  002E06  1423               	andwf	___ftpack@arg,w,c
 12036  002E08  6E28               	movwf	??___ftpack& (0+255),c
 12037  002E0A  0E00               	movlw	0
 12038  002E0C  1424               	andwf	___ftpack@arg+1,w,c
 12039  002E0E  6E29               	movwf	(??___ftpack+1)& (0+255),c
 12040  002E10  0EFE               	movlw	254
 12041  002E12  1425               	andwf	___ftpack@arg+2,w,c
 12042  002E14  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 12043  002E16  5028               	movf	??___ftpack,w,c
 12044  002E18  1029               	iorwf	??___ftpack+1,w,c
 12045  002E1A  102A               	iorwf	??___ftpack+2,w,c
 12046  002E1C  B4D8               	btfsc	status,2,c
 12047  002E1E  D00C               	goto	l5780
 12048  002E20  D7EC               	goto	l5772
 12049  002E22                     l5776:
 12050  002E22  2A26               	incf	___ftpack@exp,f,c
 12051  002E24  0E01               	movlw	1
 12052  002E26  2623               	addwf	___ftpack@arg,f,c
 12053  002E28  0E00               	movlw	0
 12054  002E2A  2224               	addwfc	___ftpack@arg+1,f,c
 12055  002E2C  0E00               	movlw	0
 12056  002E2E  2225               	addwfc	___ftpack@arg+2,f,c
 12057  002E30  90D8               	bcf	status,0,c
 12058  002E32  3225               	rrcf	___ftpack@arg+2,f,c
 12059  002E34  3224               	rrcf	___ftpack@arg+1,f,c
 12060  002E36  3223               	rrcf	___ftpack@arg,f,c
 12061  002E38                     l5780:
 12062  002E38  0E00               	movlw	0
 12063  002E3A  1423               	andwf	___ftpack@arg,w,c
 12064  002E3C  6E28               	movwf	??___ftpack& (0+255),c
 12065  002E3E  0E00               	movlw	0
 12066  002E40  1424               	andwf	___ftpack@arg+1,w,c
 12067  002E42  6E29               	movwf	(??___ftpack+1)& (0+255),c
 12068  002E44  0EFF               	movlw	255
 12069  002E46  1425               	andwf	___ftpack@arg+2,w,c
 12070  002E48  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 12071  002E4A  5028               	movf	??___ftpack,w,c
 12072  002E4C  1029               	iorwf	??___ftpack+1,w,c
 12073  002E4E  102A               	iorwf	??___ftpack+2,w,c
 12074  002E50  B4D8               	btfsc	status,2,c
 12075  002E52  D006               	goto	l5784
 12076  002E54  D7E6               	goto	l5776
 12077  002E56                     l5782:
 12078  002E56  0626               	decf	___ftpack@exp,f,c
 12079  002E58  90D8               	bcf	status,0,c
 12080  002E5A  3623               	rlcf	___ftpack@arg,f,c
 12081  002E5C  3624               	rlcf	___ftpack@arg+1,f,c
 12082  002E5E  3625               	rlcf	___ftpack@arg+2,f,c
 12083  002E60                     l5784:
 12084  002E60  BE24               	btfsc	___ftpack@arg+1,7,c
 12085  002E62  D003               	goto	l1095
 12086  002E64  0E02               	movlw	2
 12087  002E66  6026               	cpfslt	___ftpack@exp,c
 12088  002E68  D7F6               	goto	l5782
 12089  002E6A                     l1095:
 12090  002E6A  A026               	btfss	___ftpack@exp,0,c
 12091  002E6C  9E24               	bcf	___ftpack@arg+1,7,c
 12092  002E6E  90D8               	bcf	status,0,c
 12093  002E70  3226               	rrcf	___ftpack@exp,f,c
 12094  002E72  5026               	movf	___ftpack@exp,w,c
 12095  002E74  1225               	iorwf	___ftpack@arg+2,f,c
 12096  002E76  5027               	movf	___ftpack@sign,w,c
 12097  002E78  A4D8               	btfss	status,2,c
 12098  002E7A  8E25               	bsf	___ftpack@arg+2,7,c
 12099  002E7C  C023  F023         	movff	___ftpack@arg,?___ftpack
 12100  002E80  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 12101  002E84  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 12102  002E88  0012               	return	
 12103  002E8A                     __end_of___ftpack:
 12104                           	opt stack 0
 12105                           tblptru	equ	0xFF8
 12106                           tblptrh	equ	0xFF7
 12107                           tblptrl	equ	0xFF6
 12108                           tablat	equ	0xFF5
 12109                           prodh	equ	0xFF4
 12110                           prodl	equ	0xFF3
 12111                           intcon	equ	0xFF2
 12112                           intcon3	equ	0xFF0
 12113                           postinc0	equ	0xFEE
 12114                           wreg	equ	0xFE8
 12115                           postdec1	equ	0xFE5
 12116                           fsr1l	equ	0xFE1
 12117                           indf2	equ	0xFDF
 12118                           postinc2	equ	0xFDE
 12119                           postdec2	equ	0xFDD
 12120                           fsr2h	equ	0xFDA
 12121                           fsr2l	equ	0xFD9
 12122                           status	equ	0xFD8
 12123                           
 12124 ;; *************** function _initTimer *****************
 12125 ;; Defined at:
 12126 ;;		line 52 in file "timer.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;  timer           2   34[COMRAM] int 
 12129 ;; Auto vars:     Size  Location     Type
 12130 ;;		None
 12131 ;; Return value:  Size  Location     Type
 12132 ;;                  1    wreg      void 
 12133 ;; Registers used:
 12134 ;;		wreg, status,2, status,0
 12135 ;; Tracked objects:
 12136 ;;		On entry : 0/0
 12137 ;;		On exit  : 0/0
 12138 ;;		Unchanged: 0/0
 12139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12140 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12142 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12143 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12144 ;;Total ram usage:        4 bytes
 12145 ;; Hardware stack levels used:    1
 12146 ;; Hardware stack levels required when called:    3
 12147 ;; This function calls:
 12148 ;;		Nothing
 12149 ;; This function is called by:
 12150 ;;		_main
 12151 ;;		_initServo
 12152 ;;		_testFrequency
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text47
 12157  0037C6                     __ptext47:
 12158                           	opt stack 0
 12159  0037C6                     _initTimer:
 12160                           	opt stack 27
 12161                           
 12162                           ;timer.c: 53: switch(timer){
 12163                           
 12164                           ;incstack = 0
 12165  0037C6  D00F               	goto	l6828
 12166  0037C8                     l6810:
 12167                           
 12168                           ;timer.c: 55: T0CON = 0;
 12169  0037C8  0E00               	movlw	0
 12170  0037CA  6ED5               	movwf	4053,c	;volatile
 12171                           
 12172                           ;timer.c: 56: T0CON |= 1<<3;
 12173  0037CC  86D5               	bsf	4053,3,c	;volatile
 12174                           
 12175                           ;timer.c: 58: TMR0IE = 1;
 12176  0037CE  8AF2               	bsf	intcon,5,c	;volatile
 12177                           
 12178                           ;timer.c: 59: break;
 12179  0037D0  D01C               	goto	l437
 12180  0037D2                     l6816:
 12181                           
 12182                           ;timer.c: 61: T1CON = 0;
 12183  0037D2  0E00               	movlw	0
 12184  0037D4  6ECD               	movwf	4045,c	;volatile
 12185                           
 12186                           ;timer.c: 63: T1CON |= 0b11<<4;
 12187  0037D6  0E30               	movlw	48
 12188  0037D8  12CD               	iorwf	4045,f,c	;volatile
 12189                           
 12190                           ;timer.c: 64: TMR1IE = 1;
 12191  0037DA  809D               	bsf	3997,0,c	;volatile
 12192                           
 12193                           ;timer.c: 65: break;
 12194  0037DC  D016               	goto	l437
 12195  0037DE                     l6822:
 12196                           
 12197                           ;timer.c: 67: T3CON = 0;
 12198  0037DE  0E00               	movlw	0
 12199  0037E0  6EB1               	movwf	4017,c	;volatile
 12200                           
 12201                           ;timer.c: 68: TMR3IE = 1;
 12202  0037E2  82A0               	bsf	4000,1,c	;volatile
 12203                           
 12204                           ;timer.c: 70: }
 12205                           
 12206                           ;timer.c: 69: break;
 12207  0037E4  D012               	goto	l437
 12208  0037E6                     l6828:
 12209  0037E6  C023  F025         	movff	initTimer@timer,??_initTimer
 12210  0037EA  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
 12211                           
 12212                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12213                           ; Switch size 1, requested type "space"
 12214                           ; Number of cases is 1, Range of values is 0 to 0
 12215                           ; switch strategies available:
 12216                           ; Name         Instructions Cycles
 12217                           ; simple_byte            4     3 (average)
 12218                           ;	Chosen strategy is simple_byte
 12219  0037EE  5026               	movf	??_initTimer+1,w,c
 12220  0037F0  0A00               	xorlw	0	; case 0
 12221  0037F2  A4D8               	btfss	status,2,c
 12222  0037F4  D00A               	goto	l437
 12223                           
 12224                           ; Switch size 1, requested type "space"
 12225                           ; Number of cases is 3, Range of values is 0 to 3
 12226                           ; switch strategies available:
 12227                           ; Name         Instructions Cycles
 12228                           ; simple_byte           10     6 (average)
 12229                           ;	Chosen strategy is simple_byte
 12230  0037F6  5025               	movf	??_initTimer,w,c
 12231  0037F8  0A00               	xorlw	0	; case 0
 12232  0037FA  B4D8               	btfsc	status,2,c
 12233  0037FC  D7E5               	goto	l6810
 12234  0037FE  0A01               	xorlw	1	; case 1
 12235  003800  B4D8               	btfsc	status,2,c
 12236  003802  D7E7               	goto	l6816
 12237  003804  0A02               	xorlw	2	; case 3
 12238  003806  B4D8               	btfsc	status,2,c
 12239  003808  D7EA               	goto	l6822
 12240  00380A                     l437:
 12241                           
 12242                           ;timer.c: 71: PEIE = 1;
 12243  00380A  8CF2               	bsf	intcon,6,c	;volatile
 12244                           
 12245                           ;timer.c: 72: (INTCONbits.GIE = 1);
 12246  00380C  8EF2               	bsf	intcon,7,c	;volatile
 12247  00380E  0012               	return		;funcret
 12248  003810                     __end_of_initTimer:
 12249                           	opt stack 0
 12250                           tblptru	equ	0xFF8
 12251                           tblptrh	equ	0xFF7
 12252                           tblptrl	equ	0xFF6
 12253                           tablat	equ	0xFF5
 12254                           prodh	equ	0xFF4
 12255                           prodl	equ	0xFF3
 12256                           intcon	equ	0xFF2
 12257                           intcon3	equ	0xFF0
 12258                           postinc0	equ	0xFEE
 12259                           wreg	equ	0xFE8
 12260                           postdec1	equ	0xFE5
 12261                           fsr1l	equ	0xFE1
 12262                           indf2	equ	0xFDF
 12263                           postinc2	equ	0xFDE
 12264                           postdec2	equ	0xFDD
 12265                           fsr2h	equ	0xFDA
 12266                           fsr2l	equ	0xFD9
 12267                           status	equ	0xFD8
 12268                           
 12269 ;; *************** function _initLCD *****************
 12270 ;; Defined at:
 12271 ;;		line 15 in file "lcd.c"
 12272 ;; Parameters:    Size  Location     Type
 12273 ;;		None
 12274 ;; Auto vars:     Size  Location     Type
 12275 ;;		None
 12276 ;; Return value:  Size  Location     Type
 12277 ;;                  1    wreg      void 
 12278 ;; Registers used:
 12279 ;;		wreg, status,2, status,0, cstack
 12280 ;; Tracked objects:
 12281 ;;		On entry : 0/0
 12282 ;;		On exit  : 0/0
 12283 ;;		Unchanged: 0/0
 12284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12288 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12289 ;;Total ram usage:        1 bytes
 12290 ;; Hardware stack levels used:    1
 12291 ;; Hardware stack levels required when called:    5
 12292 ;; This function calls:
 12293 ;;		_lcdInst
 12294 ;; This function is called by:
 12295 ;;		_main
 12296 ;;		_debug
 12297 ;; This function uses a non-reentrant model
 12298 ;;
 12299                           
 12300                           	psect	text48
 12301  003810                     __ptext48:
 12302                           	opt stack 0
 12303  003810                     _initLCD:
 12304                           	opt stack 25
 12305                           
 12306                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 12307                           
 12308                           ;incstack = 0
 12309  003810  0E31               	movlw	49
 12310  003812  6E27               	movwf	??_initLCD& (0+255),c
 12311  003814  0EB2               	movlw	178
 12312  003816                     u7827:
 12313  003816  2EE8               	decfsz	wreg,f,c
 12314  003818  D7FE               	bra	u7827
 12315  00381A  2E27               	decfsz	??_initLCD& (0+255),f,c
 12316  00381C  D7FC               	bra	u7827
 12317  00381E  D000               	nop2	
 12318                           
 12319                           ;lcd.c: 18: lcdInst(0b00110011);
 12320  003820  0E33               	movlw	51
 12321  003822  ECDE  F01C         	call	_lcdInst
 12322                           
 12323                           ;lcd.c: 19: lcdInst(0b00110010);
 12324  003826  0E32               	movlw	50
 12325  003828  ECDE  F01C         	call	_lcdInst
 12326                           
 12327                           ;lcd.c: 20: lcdInst(0b00101000);
 12328  00382C  0E28               	movlw	40
 12329  00382E  ECDE  F01C         	call	_lcdInst
 12330                           
 12331                           ;lcd.c: 21: lcdInst(0b00001111);
 12332  003832  0E0F               	movlw	15
 12333  003834  ECDE  F01C         	call	_lcdInst
 12334                           
 12335                           ;lcd.c: 22: lcdInst(0b00000110);
 12336  003838  0E06               	movlw	6
 12337  00383A  ECDE  F01C         	call	_lcdInst
 12338                           
 12339                           ;lcd.c: 23: lcdInst(0b00000001);
 12340  00383E  0E01               	movlw	1
 12341  003840  ECDE  F01C         	call	_lcdInst
 12342                           
 12343                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 12344  003844  0E31               	movlw	49
 12345  003846  6E27               	movwf	??_initLCD& (0+255),c
 12346  003848  0EB2               	movlw	178
 12347  00384A                     u7837:
 12348  00384A  2EE8               	decfsz	wreg,f,c
 12349  00384C  D7FE               	bra	u7837
 12350  00384E  2E27               	decfsz	??_initLCD& (0+255),f,c
 12351  003850  D7FC               	bra	u7837
 12352  003852  D000               	nop2	
 12353  003854  0012               	return		;funcret
 12354  003856                     __end_of_initLCD:
 12355                           	opt stack 0
 12356                           tblptru	equ	0xFF8
 12357                           tblptrh	equ	0xFF7
 12358                           tblptrl	equ	0xFF6
 12359                           tablat	equ	0xFF5
 12360                           prodh	equ	0xFF4
 12361                           prodl	equ	0xFF3
 12362                           intcon	equ	0xFF2
 12363                           intcon3	equ	0xFF0
 12364                           postinc0	equ	0xFEE
 12365                           wreg	equ	0xFE8
 12366                           postdec1	equ	0xFE5
 12367                           fsr1l	equ	0xFE1
 12368                           indf2	equ	0xFDF
 12369                           postinc2	equ	0xFDE
 12370                           postdec2	equ	0xFDD
 12371                           fsr2h	equ	0xFDA
 12372                           fsr2l	equ	0xFD9
 12373                           status	equ	0xFD8
 12374                           
 12375 ;; *************** function _lcdInst *****************
 12376 ;; Defined at:
 12377 ;;		line 27 in file "lcd.c"
 12378 ;; Parameters:    Size  Location     Type
 12379 ;;  data            1    wreg     unsigned char 
 12380 ;; Auto vars:     Size  Location     Type
 12381 ;;  data            1   37[COMRAM] unsigned char 
 12382 ;; Return value:  Size  Location     Type
 12383 ;;                  1    wreg      void 
 12384 ;; Registers used:
 12385 ;;		wreg, status,2, status,0, cstack
 12386 ;; Tracked objects:
 12387 ;;		On entry : 0/0
 12388 ;;		On exit  : 0/0
 12389 ;;		Unchanged: 0/0
 12390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;Total ram usage:        2 bytes
 12396 ;; Hardware stack levels used:    1
 12397 ;; Hardware stack levels required when called:    4
 12398 ;; This function calls:
 12399 ;;		_lcdNibble
 12400 ;; This function is called by:
 12401 ;;		_initLCD
 12402 ;;		_lcdHome
 12403 ;;		_lcdClear
 12404 ;;		_lcdNewline
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           	psect	text49
 12409  0039BC                     __ptext49:
 12410                           	opt stack 0
 12411  0039BC                     _lcdInst:
 12412                           	opt stack 22
 12413                           
 12414                           ;incstack = 0
 12415                           ;lcdInst@data stored from wreg
 12416  0039BC  6E26               	movwf	lcdInst@data,c
 12417                           
 12418                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 12419  0039BE  948C               	bcf	3980,2,c	;volatile
 12420                           
 12421                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 12422  0039C0  0E74               	movlw	116
 12423  0039C2                     u7847:
 12424  0039C2  2EE8               	decfsz	wreg,f,c
 12425  0039C4  D7FE               	bra	u7847
 12426  0039C6  D000               	nop2	
 12427                           
 12428                           ;lcd.c: 30: lcdNibble(data);
 12429  0039C8  5026               	movf	lcdInst@data,w,c
 12430  0039CA  EC5B  F01A         	call	_lcdNibble
 12431                           
 12432                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 12433  0039CE  0E04               	movlw	4
 12434  0039D0  6E25               	movwf	??_lcdInst& (0+255),c
 12435  0039D2  0E3E               	movlw	62
 12436  0039D4                     u7857:
 12437  0039D4  2EE8               	decfsz	wreg,f,c
 12438  0039D6  D7FE               	bra	u7857
 12439  0039D8  2E25               	decfsz	??_lcdInst& (0+255),f,c
 12440  0039DA  D7FC               	bra	u7857
 12441  0039DC  0012               	return		;funcret
 12442  0039DE                     __end_of_lcdInst:
 12443                           	opt stack 0
 12444                           tblptru	equ	0xFF8
 12445                           tblptrh	equ	0xFF7
 12446                           tblptrl	equ	0xFF6
 12447                           tablat	equ	0xFF5
 12448                           prodh	equ	0xFF4
 12449                           prodl	equ	0xFF3
 12450                           intcon	equ	0xFF2
 12451                           intcon3	equ	0xFF0
 12452                           postinc0	equ	0xFEE
 12453                           wreg	equ	0xFE8
 12454                           postdec1	equ	0xFE5
 12455                           fsr1l	equ	0xFE1
 12456                           indf2	equ	0xFDF
 12457                           postinc2	equ	0xFDE
 12458                           postdec2	equ	0xFDD
 12459                           fsr2h	equ	0xFDA
 12460                           fsr2l	equ	0xFD9
 12461                           status	equ	0xFD8
 12462                           
 12463 ;; *************** function _lcdNibble *****************
 12464 ;; Defined at:
 12465 ;;		line 46 in file "lcd.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  data            1    wreg     unsigned char 
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;  data            1   35[COMRAM] unsigned char 
 12470 ;;  temp            1   34[COMRAM] unsigned char 
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  1    wreg      void 
 12473 ;; Registers used:
 12474 ;;		wreg, status,2, status,0
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12483 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12484 ;;Total ram usage:        2 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; Hardware stack levels required when called:    3
 12487 ;; This function calls:
 12488 ;;		Nothing
 12489 ;; This function is called by:
 12490 ;;		_lcdInst
 12491 ;;		_putch
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           	psect	text50
 12496  0034B6                     __ptext50:
 12497                           	opt stack 0
 12498  0034B6                     _lcdNibble:
 12499                           	opt stack 24
 12500                           
 12501                           ;incstack = 0
 12502                           ;lcdNibble@data stored from wreg
 12503  0034B6  6E24               	movwf	lcdNibble@data,c
 12504                           
 12505                           ;lcd.c: 48: char temp = data & 0xF0;
 12506  0034B8  5024               	movf	lcdNibble@data,w,c
 12507  0034BA  0BF0               	andlw	240
 12508  0034BC  6E23               	movwf	lcdNibble@temp,c
 12509                           
 12510                           ;lcd.c: 49: LATD = LATD & 0x0F;
 12511  0034BE  508C               	movf	3980,w,c	;volatile
 12512  0034C0  0B0F               	andlw	15
 12513  0034C2  6E8C               	movwf	3980,c	;volatile
 12514                           
 12515                           ;lcd.c: 50: LATD = temp | LATD;
 12516  0034C4  5023               	movf	lcdNibble@temp,w,c
 12517  0034C6  108C               	iorwf	3980,w,c	;volatile
 12518  0034C8  6E8C               	movwf	3980,c	;volatile
 12519                           
 12520                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 12521  0034CA  968C               	bcf	3980,3,c	;volatile
 12522                           
 12523                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12524  0034CC  0ED6               	movlw	214
 12525  0034CE                     u7867:
 12526  0034CE  D000               	nop2	
 12527  0034D0  D000               	nop2	
 12528  0034D2  2EE8               	decfsz	wreg,f,c
 12529  0034D4  D7FC               	bra	u7867
 12530  0034D6  D000               	nop2	
 12531                           
 12532                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 12533  0034D8  868C               	bsf	3980,3,c	;volatile
 12534                           
 12535                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12536  0034DA  0ED6               	movlw	214
 12537  0034DC                     u7877:
 12538  0034DC  D000               	nop2	
 12539  0034DE  D000               	nop2	
 12540  0034E0  2EE8               	decfsz	wreg,f,c
 12541  0034E2  D7FC               	bra	u7877
 12542  0034E4  D000               	nop2	
 12543                           
 12544                           ;lcd.c: 58: data = data << 4;
 12545  0034E6  3824               	swapf	lcdNibble@data,w,c
 12546  0034E8  0BF0               	andlw	240
 12547  0034EA  6E24               	movwf	lcdNibble@data,c
 12548                           
 12549                           ;lcd.c: 60: temp = data & 0xF0;
 12550  0034EC  5024               	movf	lcdNibble@data,w,c
 12551  0034EE  0BF0               	andlw	240
 12552  0034F0  6E23               	movwf	lcdNibble@temp,c
 12553                           
 12554                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12555  0034F2  508C               	movf	3980,w,c	;volatile
 12556  0034F4  0B0F               	andlw	15
 12557  0034F6  6E8C               	movwf	3980,c	;volatile
 12558                           
 12559                           ;lcd.c: 62: LATD = temp | LATD;
 12560  0034F8  5023               	movf	lcdNibble@temp,w,c
 12561  0034FA  108C               	iorwf	3980,w,c	;volatile
 12562  0034FC  6E8C               	movwf	3980,c	;volatile
 12563                           
 12564                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12565  0034FE  968C               	bcf	3980,3,c	;volatile
 12566                           
 12567                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12568  003500  0ED6               	movlw	214
 12569  003502                     u7887:
 12570  003502  D000               	nop2	
 12571  003504  D000               	nop2	
 12572  003506  2EE8               	decfsz	wreg,f,c
 12573  003508  D7FC               	bra	u7887
 12574  00350A  D000               	nop2	
 12575                           
 12576                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12577  00350C  868C               	bsf	3980,3,c	;volatile
 12578                           
 12579                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12580  00350E  0ED6               	movlw	214
 12581  003510                     u7897:
 12582  003510  D000               	nop2	
 12583  003512  D000               	nop2	
 12584  003514  2EE8               	decfsz	wreg,f,c
 12585  003516  D7FC               	bra	u7897
 12586  003518  D000               	nop2	
 12587  00351A  0012               	return		;funcret
 12588  00351C                     __end_of_lcdNibble:
 12589                           	opt stack 0
 12590                           tblptru	equ	0xFF8
 12591                           tblptrh	equ	0xFF7
 12592                           tblptrl	equ	0xFF6
 12593                           tablat	equ	0xFF5
 12594                           prodh	equ	0xFF4
 12595                           prodl	equ	0xFF3
 12596                           intcon	equ	0xFF2
 12597                           intcon3	equ	0xFF0
 12598                           postinc0	equ	0xFEE
 12599                           wreg	equ	0xFE8
 12600                           postdec1	equ	0xFE5
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           fsr2h	equ	0xFDA
 12606                           fsr2l	equ	0xFD9
 12607                           status	equ	0xFD8
 12608                           
 12609 ;; *************** function ___almod *****************
 12610 ;; Defined at:
 12611 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12612 ;; Parameters:    Size  Location     Type
 12613 ;;  dividend        4   48[COMRAM] long 
 12614 ;;  divisor         4   52[COMRAM] long 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  sign            1   57[COMRAM] unsigned char 
 12617 ;;  counter         1   56[COMRAM] unsigned char 
 12618 ;; Return value:  Size  Location     Type
 12619 ;;                  4   48[COMRAM] long 
 12620 ;; Registers used:
 12621 ;;		wreg, status,2, status,0
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12627 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;Total ram usage:       10 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; Hardware stack levels required when called:    3
 12634 ;; This function calls:
 12635 ;;		Nothing
 12636 ;; This function is called by:
 12637 ;;		_main
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           	psect	text51
 12642  002E8A                     __ptext51:
 12643                           	opt stack 0
 12644  002E8A                     ___almod:
 12645                           	opt stack 27
 12646                           
 12647                           ;incstack = 0
 12648  002E8A  0E00               	movlw	0
 12649  002E8C  6E3A               	movwf	___almod@sign,c
 12650  002E8E  AE34               	btfss	___almod@dividend+3,7,c
 12651  002E90  D00A               	goto	l7288
 12652  002E92  1E34               	comf	___almod@dividend+3,f,c
 12653  002E94  1E33               	comf	___almod@dividend+2,f,c
 12654  002E96  1E32               	comf	___almod@dividend+1,f,c
 12655  002E98  6C31               	negf	___almod@dividend,c
 12656  002E9A  0E00               	movlw	0
 12657  002E9C  2232               	addwfc	___almod@dividend+1,f,c
 12658  002E9E  2233               	addwfc	___almod@dividend+2,f,c
 12659  002EA0  2234               	addwfc	___almod@dividend+3,f,c
 12660  002EA2  0E01               	movlw	1
 12661  002EA4  6E3A               	movwf	___almod@sign,c
 12662  002EA6                     l7288:
 12663  002EA6  AE38               	btfss	___almod@divisor+3,7,c
 12664  002EA8  D008               	goto	l7292
 12665  002EAA  1E38               	comf	___almod@divisor+3,f,c
 12666  002EAC  1E37               	comf	___almod@divisor+2,f,c
 12667  002EAE  1E36               	comf	___almod@divisor+1,f,c
 12668  002EB0  6C35               	negf	___almod@divisor,c
 12669  002EB2  0E00               	movlw	0
 12670  002EB4  2236               	addwfc	___almod@divisor+1,f,c
 12671  002EB6  2237               	addwfc	___almod@divisor+2,f,c
 12672  002EB8  2238               	addwfc	___almod@divisor+3,f,c
 12673  002EBA                     l7292:
 12674  002EBA  5035               	movf	___almod@divisor,w,c
 12675  002EBC  1036               	iorwf	___almod@divisor+1,w,c
 12676  002EBE  1037               	iorwf	___almod@divisor+2,w,c
 12677  002EC0  1038               	iorwf	___almod@divisor+3,w,c
 12678  002EC2  B4D8               	btfsc	status,2,c
 12679  002EC4  D024               	goto	l7308
 12680  002EC6  0E01               	movlw	1
 12681  002EC8  6E39               	movwf	___almod@counter,c
 12682  002ECA  D006               	goto	l7298
 12683  002ECC                     l7296:
 12684  002ECC  90D8               	bcf	status,0,c
 12685  002ECE  3635               	rlcf	___almod@divisor,f,c
 12686  002ED0  3636               	rlcf	___almod@divisor+1,f,c
 12687  002ED2  3637               	rlcf	___almod@divisor+2,f,c
 12688  002ED4  3638               	rlcf	___almod@divisor+3,f,c
 12689  002ED6  2A39               	incf	___almod@counter,f,c
 12690  002ED8                     l7298:
 12691  002ED8  AE38               	btfss	___almod@divisor+3,7,c
 12692  002EDA  D7F8               	goto	l7296
 12693  002EDC                     l7300:
 12694  002EDC  5035               	movf	___almod@divisor,w,c
 12695  002EDE  5C31               	subwf	___almod@dividend,w,c
 12696  002EE0  5036               	movf	___almod@divisor+1,w,c
 12697  002EE2  5832               	subwfb	___almod@dividend+1,w,c
 12698  002EE4  5037               	movf	___almod@divisor+2,w,c
 12699  002EE6  5833               	subwfb	___almod@dividend+2,w,c
 12700  002EE8  5038               	movf	___almod@divisor+3,w,c
 12701  002EEA  5834               	subwfb	___almod@dividend+3,w,c
 12702  002EEC  A0D8               	btfss	status,0,c
 12703  002EEE  D008               	goto	l7304
 12704  002EF0  5035               	movf	___almod@divisor,w,c
 12705  002EF2  5E31               	subwf	___almod@dividend,f,c
 12706  002EF4  5036               	movf	___almod@divisor+1,w,c
 12707  002EF6  5A32               	subwfb	___almod@dividend+1,f,c
 12708  002EF8  5037               	movf	___almod@divisor+2,w,c
 12709  002EFA  5A33               	subwfb	___almod@dividend+2,f,c
 12710  002EFC  5038               	movf	___almod@divisor+3,w,c
 12711  002EFE  5A34               	subwfb	___almod@dividend+3,f,c
 12712  002F00                     l7304:
 12713  002F00  90D8               	bcf	status,0,c
 12714  002F02  3238               	rrcf	___almod@divisor+3,f,c
 12715  002F04  3237               	rrcf	___almod@divisor+2,f,c
 12716  002F06  3236               	rrcf	___almod@divisor+1,f,c
 12717  002F08  3235               	rrcf	___almod@divisor,f,c
 12718  002F0A  2E39               	decfsz	___almod@counter,f,c
 12719  002F0C  D7E7               	goto	l7300
 12720  002F0E                     l7308:
 12721  002F0E  503A               	movf	___almod@sign,w,c
 12722  002F10  B4D8               	btfsc	status,2,c
 12723  002F12  D008               	goto	l7312
 12724  002F14  1E34               	comf	___almod@dividend+3,f,c
 12725  002F16  1E33               	comf	___almod@dividend+2,f,c
 12726  002F18  1E32               	comf	___almod@dividend+1,f,c
 12727  002F1A  6C31               	negf	___almod@dividend,c
 12728  002F1C  0E00               	movlw	0
 12729  002F1E  2232               	addwfc	___almod@dividend+1,f,c
 12730  002F20  2233               	addwfc	___almod@dividend+2,f,c
 12731  002F22  2234               	addwfc	___almod@dividend+3,f,c
 12732  002F24                     l7312:
 12733  002F24  C031  F031         	movff	___almod@dividend,?___almod
 12734  002F28  C032  F032         	movff	___almod@dividend+1,?___almod+1
 12735  002F2C  C033  F033         	movff	___almod@dividend+2,?___almod+2
 12736  002F30  C034  F034         	movff	___almod@dividend+3,?___almod+3
 12737  002F34  0012               	return	
 12738  002F36                     __end_of___almod:
 12739                           	opt stack 0
 12740                           tblptru	equ	0xFF8
 12741                           tblptrh	equ	0xFF7
 12742                           tblptrl	equ	0xFF6
 12743                           tablat	equ	0xFF5
 12744                           prodh	equ	0xFF4
 12745                           prodl	equ	0xFF3
 12746                           intcon	equ	0xFF2
 12747                           intcon3	equ	0xFF0
 12748                           postinc0	equ	0xFEE
 12749                           wreg	equ	0xFE8
 12750                           postdec1	equ	0xFE5
 12751                           fsr1l	equ	0xFE1
 12752                           indf2	equ	0xFDF
 12753                           postinc2	equ	0xFDE
 12754                           postdec2	equ	0xFDD
 12755                           fsr2h	equ	0xFDA
 12756                           fsr2l	equ	0xFD9
 12757                           status	equ	0xFD8
 12758                           
 12759 ;; *************** function ___aldiv *****************
 12760 ;; Defined at:
 12761 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;  dividend        4   34[COMRAM] long 
 12764 ;;  divisor         4   38[COMRAM] long 
 12765 ;; Auto vars:     Size  Location     Type
 12766 ;;  quotient        4   44[COMRAM] long 
 12767 ;;  sign            1   43[COMRAM] unsigned char 
 12768 ;;  counter         1   42[COMRAM] unsigned char 
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  4   34[COMRAM] long 
 12771 ;; Registers used:
 12772 ;;		wreg, status,2, status,0
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12778 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;Total ram usage:       14 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:    3
 12785 ;; This function calls:
 12786 ;;		Nothing
 12787 ;; This function is called by:
 12788 ;;		_main
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           	psect	text52
 12793  002AD2                     __ptext52:
 12794                           	opt stack 0
 12795  002AD2                     ___aldiv:
 12796                           	opt stack 27
 12797                           
 12798                           ;incstack = 0
 12799  002AD2  0E00               	movlw	0
 12800  002AD4  6E2C               	movwf	___aldiv@sign,c
 12801  002AD6  AE2A               	btfss	___aldiv@divisor+3,7,c
 12802  002AD8  D00A               	goto	l7244
 12803  002ADA  1E2A               	comf	___aldiv@divisor+3,f,c
 12804  002ADC  1E29               	comf	___aldiv@divisor+2,f,c
 12805  002ADE  1E28               	comf	___aldiv@divisor+1,f,c
 12806  002AE0  6C27               	negf	___aldiv@divisor,c
 12807  002AE2  0E00               	movlw	0
 12808  002AE4  2228               	addwfc	___aldiv@divisor+1,f,c
 12809  002AE6  2229               	addwfc	___aldiv@divisor+2,f,c
 12810  002AE8  222A               	addwfc	___aldiv@divisor+3,f,c
 12811  002AEA  0E01               	movlw	1
 12812  002AEC  6E2C               	movwf	___aldiv@sign,c
 12813  002AEE                     l7244:
 12814  002AEE  AE26               	btfss	___aldiv@dividend+3,7,c
 12815  002AF0  D00A               	goto	l7250
 12816  002AF2  1E26               	comf	___aldiv@dividend+3,f,c
 12817  002AF4  1E25               	comf	___aldiv@dividend+2,f,c
 12818  002AF6  1E24               	comf	___aldiv@dividend+1,f,c
 12819  002AF8  6C23               	negf	___aldiv@dividend,c
 12820  002AFA  0E00               	movlw	0
 12821  002AFC  2224               	addwfc	___aldiv@dividend+1,f,c
 12822  002AFE  2225               	addwfc	___aldiv@dividend+2,f,c
 12823  002B00  2226               	addwfc	___aldiv@dividend+3,f,c
 12824  002B02  0E01               	movlw	1
 12825  002B04  1A2C               	xorwf	___aldiv@sign,f,c
 12826  002B06                     l7250:
 12827  002B06  0E00               	movlw	0
 12828  002B08  6E2D               	movwf	___aldiv@quotient,c
 12829  002B0A  0E00               	movlw	0
 12830  002B0C  6E2E               	movwf	___aldiv@quotient+1,c
 12831  002B0E  0E00               	movlw	0
 12832  002B10  6E2F               	movwf	___aldiv@quotient+2,c
 12833  002B12  0E00               	movlw	0
 12834  002B14  6E30               	movwf	___aldiv@quotient+3,c
 12835  002B16  5027               	movf	___aldiv@divisor,w,c
 12836  002B18  1028               	iorwf	___aldiv@divisor+1,w,c
 12837  002B1A  1029               	iorwf	___aldiv@divisor+2,w,c
 12838  002B1C  102A               	iorwf	___aldiv@divisor+3,w,c
 12839  002B1E  B4D8               	btfsc	status,2,c
 12840  002B20  D02A               	goto	l7272
 12841  002B22  0E01               	movlw	1
 12842  002B24  6E2B               	movwf	___aldiv@counter,c
 12843  002B26  D006               	goto	l7258
 12844  002B28                     l7256:
 12845  002B28  90D8               	bcf	status,0,c
 12846  002B2A  3627               	rlcf	___aldiv@divisor,f,c
 12847  002B2C  3628               	rlcf	___aldiv@divisor+1,f,c
 12848  002B2E  3629               	rlcf	___aldiv@divisor+2,f,c
 12849  002B30  362A               	rlcf	___aldiv@divisor+3,f,c
 12850  002B32  2A2B               	incf	___aldiv@counter,f,c
 12851  002B34                     l7258:
 12852  002B34  AE2A               	btfss	___aldiv@divisor+3,7,c
 12853  002B36  D7F8               	goto	l7256
 12854  002B38                     l7260:
 12855  002B38  90D8               	bcf	status,0,c
 12856  002B3A  362D               	rlcf	___aldiv@quotient,f,c
 12857  002B3C  362E               	rlcf	___aldiv@quotient+1,f,c
 12858  002B3E  362F               	rlcf	___aldiv@quotient+2,f,c
 12859  002B40  3630               	rlcf	___aldiv@quotient+3,f,c
 12860  002B42  5027               	movf	___aldiv@divisor,w,c
 12861  002B44  5C23               	subwf	___aldiv@dividend,w,c
 12862  002B46  5028               	movf	___aldiv@divisor+1,w,c
 12863  002B48  5824               	subwfb	___aldiv@dividend+1,w,c
 12864  002B4A  5029               	movf	___aldiv@divisor+2,w,c
 12865  002B4C  5825               	subwfb	___aldiv@dividend+2,w,c
 12866  002B4E  502A               	movf	___aldiv@divisor+3,w,c
 12867  002B50  5826               	subwfb	___aldiv@dividend+3,w,c
 12868  002B52  A0D8               	btfss	status,0,c
 12869  002B54  D009               	goto	l7268
 12870  002B56  5027               	movf	___aldiv@divisor,w,c
 12871  002B58  5E23               	subwf	___aldiv@dividend,f,c
 12872  002B5A  5028               	movf	___aldiv@divisor+1,w,c
 12873  002B5C  5A24               	subwfb	___aldiv@dividend+1,f,c
 12874  002B5E  5029               	movf	___aldiv@divisor+2,w,c
 12875  002B60  5A25               	subwfb	___aldiv@dividend+2,f,c
 12876  002B62  502A               	movf	___aldiv@divisor+3,w,c
 12877  002B64  5A26               	subwfb	___aldiv@dividend+3,f,c
 12878  002B66  802D               	bsf	___aldiv@quotient,0,c
 12879  002B68                     l7268:
 12880  002B68  90D8               	bcf	status,0,c
 12881  002B6A  322A               	rrcf	___aldiv@divisor+3,f,c
 12882  002B6C  3229               	rrcf	___aldiv@divisor+2,f,c
 12883  002B6E  3228               	rrcf	___aldiv@divisor+1,f,c
 12884  002B70  3227               	rrcf	___aldiv@divisor,f,c
 12885  002B72  2E2B               	decfsz	___aldiv@counter,f,c
 12886  002B74  D7E1               	goto	l7260
 12887  002B76                     l7272:
 12888  002B76  502C               	movf	___aldiv@sign,w,c
 12889  002B78  B4D8               	btfsc	status,2,c
 12890  002B7A  D008               	goto	l7276
 12891  002B7C  1E30               	comf	___aldiv@quotient+3,f,c
 12892  002B7E  1E2F               	comf	___aldiv@quotient+2,f,c
 12893  002B80  1E2E               	comf	___aldiv@quotient+1,f,c
 12894  002B82  6C2D               	negf	___aldiv@quotient,c
 12895  002B84  0E00               	movlw	0
 12896  002B86  222E               	addwfc	___aldiv@quotient+1,f,c
 12897  002B88  222F               	addwfc	___aldiv@quotient+2,f,c
 12898  002B8A  2230               	addwfc	___aldiv@quotient+3,f,c
 12899  002B8C                     l7276:
 12900  002B8C  C02D  F023         	movff	___aldiv@quotient,?___aldiv
 12901  002B90  C02E  F024         	movff	___aldiv@quotient+1,?___aldiv+1
 12902  002B94  C02F  F025         	movff	___aldiv@quotient+2,?___aldiv+2
 12903  002B98  C030  F026         	movff	___aldiv@quotient+3,?___aldiv+3
 12904  002B9C  0012               	return	
 12905  002B9E                     __end_of___aldiv:
 12906                           	opt stack 0
 12907                           tblptru	equ	0xFF8
 12908                           tblptrh	equ	0xFF7
 12909                           tblptrl	equ	0xFF6
 12910                           tablat	equ	0xFF5
 12911                           prodh	equ	0xFF4
 12912                           prodl	equ	0xFF3
 12913                           intcon	equ	0xFF2
 12914                           intcon3	equ	0xFF0
 12915                           postinc0	equ	0xFEE
 12916                           wreg	equ	0xFE8
 12917                           postdec1	equ	0xFE5
 12918                           fsr1l	equ	0xFE1
 12919                           indf2	equ	0xFDF
 12920                           postinc2	equ	0xFDE
 12921                           postdec2	equ	0xFDD
 12922                           fsr2h	equ	0xFDA
 12923                           fsr2l	equ	0xFD9
 12924                           status	equ	0xFD8
 12925                           
 12926 ;; *************** function _service *****************
 12927 ;; Defined at:
 12928 ;;		line 327 in file "main.c"
 12929 ;; Parameters:    Size  Location     Type
 12930 ;;		None
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;  key             1   33[COMRAM] unsigned char 
 12933 ;; Return value:  Size  Location     Type
 12934 ;;                  1    wreg      void 
 12935 ;; Registers used:
 12936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;Total ram usage:       15 bytes
 12947 ;; Hardware stack levels used:    1
 12948 ;; Hardware stack levels required when called:    2
 12949 ;; This function calls:
 12950 ;;		_keyPressedInterruptService
 12951 ;;		_servoInterruptService
 12952 ;;		i2_startTimer
 12953 ;; This function is called by:
 12954 ;;		Interrupt level 2
 12955 ;; This function uses a non-reentrant model
 12956 ;;
 12957                           
 12958                           	psect	intcode
 12959  000008                     __pintcode:
 12960                           	opt stack 0
 12961  000008                     _service:
 12962                           	opt stack 21
 12963                           
 12964                           ;incstack = 0
 12965  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12966  00000A  ED1C  F014         	call	int_func,f	;refresh shadow registers
 12967                           tblptru	equ	0xFF8
 12968                           tblptrh	equ	0xFF7
 12969                           tblptrl	equ	0xFF6
 12970                           tablat	equ	0xFF5
 12971                           prodh	equ	0xFF4
 12972                           prodl	equ	0xFF3
 12973                           intcon	equ	0xFF2
 12974                           intcon3	equ	0xFF0
 12975                           postinc0	equ	0xFEE
 12976                           wreg	equ	0xFE8
 12977                           postdec1	equ	0xFE5
 12978                           fsr1l	equ	0xFE1
 12979                           indf2	equ	0xFDF
 12980                           postinc2	equ	0xFDE
 12981                           postdec2	equ	0xFDD
 12982                           fsr2h	equ	0xFDA
 12983                           fsr2l	equ	0xFD9
 12984                           status	equ	0xFD8
 12985                           
 12986                           	psect	intcode_body
 12987  002838                     __pintcode_body:
 12988                           	opt stack 21
 12989  002838                     int_func:
 12990                           	opt stack 21
 12991  002838  0006               	pop		; remove dummy address from shadow register refresh
 12992  00283A  CFFA F014          	movff	pclath,??_service
 12993  00283E  CFFB F015          	movff	pclatu,??_service+1
 12994  002842  CFE9 F016          	movff	fsr0l,??_service+2
 12995  002846  CFEA F017          	movff	fsr0h,??_service+3
 12996  00284A  CFE1 F018          	movff	fsr1l,??_service+4
 12997  00284E  CFE2 F019          	movff	fsr1h,??_service+5
 12998  002852  CFD9 F01A          	movff	fsr2l,??_service+6
 12999  002856  CFDA F01B          	movff	fsr2h,??_service+7
 13000  00285A  CFF3 F01C          	movff	prodl,??_service+8
 13001  00285E  CFF4 F01D          	movff	prodh,??_service+9
 13002  002862  CFF6 F01E          	movff	tblptrl,??_service+10
 13003  002866  CFF7 F01F          	movff	tblptrh,??_service+11
 13004  00286A  CFF8 F020          	movff	tblptru,??_service+12
 13005  00286E  CFF5 F021          	movff	tablat,??_service+13
 13006                           
 13007                           ;main.c: 329: if( servoInterruptService() )return;
 13008  002872  EC21  F013         	call	_servoInterruptService	;wreg free
 13009  002876  0900               	iorlw	0
 13010  002878  A4D8               	btfss	status,2,c
 13011  00287A  D032               	goto	i2l187
 13012                           
 13013                           ;main.c: 334: if(TMR1IF){
 13014  00287C  A09E               	btfss	3998,0,c	;volatile
 13015  00287E  D016               	goto	i2l188
 13016                           
 13017                           ;main.c: 335: startTimer(1,0x8683);
 13018  002880  0E00               	movlw	0
 13019  002882  6E08               	movwf	i2startTimer@timer+1,c
 13020  002884  0E01               	movlw	1
 13021  002886  6E07               	movwf	i2startTimer@timer,c
 13022  002888  0E83               	movlw	131
 13023  00288A  6E09               	movwf	i2startTimer@val,c
 13024  00288C  0E86               	movlw	134
 13025  00288E  6E0A               	movwf	i2startTimer@val+1,c
 13026  002890  0E00               	movlw	0
 13027  002892  6E0B               	movwf	i2startTimer@val+2,c
 13028  002894  0E00               	movlw	0
 13029  002896  6E0C               	movwf	i2startTimer@val+3,c
 13030  002898  ECBD  F01B         	call	i2_startTimer	;wreg free
 13031                           
 13032                           ;main.c: 336: time+=1;
 13033  00289C  0E01               	movlw	1
 13034  00289E  2652               	addwf	_time,f,c
 13035  0028A0  0E00               	movlw	0
 13036  0028A2  2253               	addwfc	_time+1,f,c
 13037  0028A4  2254               	addwfc	_time+2,f,c
 13038  0028A6  2255               	addwfc	_time+3,f,c
 13039                           
 13040                           ;main.c: 337: TMR1IF = 0;
 13041  0028A8  909E               	bcf	3998,0,c	;volatile
 13042                           
 13043                           ;main.c: 338: return;
 13044  0028AA  D01A               	goto	i2l187
 13045  0028AC                     i2l188:
 13046                           
 13047                           ;main.c: 339: }
 13048                           ;main.c: 342: if(INT0IF){ INT0IF = 0;
 13049  0028AC  A2F2               	btfss	intcon,1,c	;volatile
 13050  0028AE  D006               	goto	i2l189
 13051  0028B0  92F2               	bcf	intcon,1,c	;volatile
 13052                           
 13053                           ;main.c: 343: batteryDetected = 1;
 13054  0028B2  0E00               	movlw	0
 13055  0028B4  6E57               	movwf	_batteryDetected+1,c
 13056  0028B6  0E01               	movlw	1
 13057  0028B8  6E56               	movwf	_batteryDetected,c
 13058                           
 13059                           ;main.c: 344: return;
 13060  0028BA  D012               	goto	i2l187
 13061  0028BC                     i2l189:
 13062                           
 13063                           ;main.c: 345: }
 13064                           ;main.c: 348: if(INT1IF && INT1IE){INT1IF = 0;
 13065  0028BC  B0F0               	btfsc	intcon3,0,c	;volatile
 13066  0028BE  A6F0               	btfss	intcon3,3,c	;volatile
 13067  0028C0  D00F               	goto	i2l187
 13068  0028C2  90F0               	bcf	intcon3,0,c	;volatile
 13069                           
 13070                           ;main.c: 349: keyPressedInterruptService();
 13071  0028C4  ECEF  F01C         	call	_keyPressedInterruptService	;wreg free
 13072                           
 13073                           ;main.c: 350: char key = (PORTB & 0xF0) >> 4;
 13074  0028C8  3881               	swapf	3969,w,c	;volatile
 13075  0028CA  0B0F               	andlw	15
 13076  0028CC  0B0F               	andlw	15
 13077  0028CE  6E22               	movwf	service@key,c
 13078                           
 13079                           ;main.c: 351: if(key == 12)terminate = 1;
 13080  0028D0  0E0C               	movlw	12
 13081  0028D2  1822               	xorwf	service@key,w,c
 13082  0028D4  A4D8               	btfss	status,2,c
 13083  0028D6  D004               	goto	i2l187
 13084  0028D8  0E00               	movlw	0
 13085  0028DA  6E5B               	movwf	_terminate+1,c
 13086  0028DC  0E01               	movlw	1
 13087  0028DE  6E5A               	movwf	_terminate,c
 13088  0028E0                     i2l187:
 13089  0028E0  C021  FFF5         	movff	??_service+13,tablat
 13090  0028E4  C020  FFF8         	movff	??_service+12,tblptru
 13091  0028E8  C01F  FFF7         	movff	??_service+11,tblptrh
 13092  0028EC  C01E  FFF6         	movff	??_service+10,tblptrl
 13093  0028F0  C01D  FFF4         	movff	??_service+9,prodh
 13094  0028F4  C01C  FFF3         	movff	??_service+8,prodl
 13095  0028F8  C01B  FFDA         	movff	??_service+7,fsr2h
 13096  0028FC  C01A  FFD9         	movff	??_service+6,fsr2l
 13097  002900  C019  FFE2         	movff	??_service+5,fsr1h
 13098  002904  C018  FFE1         	movff	??_service+4,fsr1l
 13099  002908  C017  FFEA         	movff	??_service+3,fsr0h
 13100  00290C  C016  FFE9         	movff	??_service+2,fsr0l
 13101  002910  C015  FFFB         	movff	??_service+1,pclatu
 13102  002914  C014  FFFA         	movff	??_service,pclath
 13103  002918  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13104  00291A  0011               	retfie		f
 13105  00291C                     __end_of_service:
 13106                           	opt stack 0
 13107                           pclatu	equ	0xFFB
 13108                           pclath	equ	0xFFA
 13109                           tblptru	equ	0xFF8
 13110                           tblptrh	equ	0xFF7
 13111                           tblptrl	equ	0xFF6
 13112                           tablat	equ	0xFF5
 13113                           prodh	equ	0xFF4
 13114                           prodl	equ	0xFF3
 13115                           intcon	equ	0xFF2
 13116                           intcon3	equ	0xFF0
 13117                           postinc0	equ	0xFEE
 13118                           fsr0h	equ	0xFEA
 13119                           fsr0l	equ	0xFE9
 13120                           wreg	equ	0xFE8
 13121                           postdec1	equ	0xFE5
 13122                           fsr1h	equ	0xFE2
 13123                           fsr1l	equ	0xFE1
 13124                           indf2	equ	0xFDF
 13125                           postinc2	equ	0xFDE
 13126                           postdec2	equ	0xFDD
 13127                           fsr2h	equ	0xFDA
 13128                           fsr2l	equ	0xFD9
 13129                           status	equ	0xFD8
 13130                           
 13131 ;; *************** function _servoInterruptService *****************
 13132 ;; Defined at:
 13133 ;;		line 55 in file "servo.c"
 13134 ;; Parameters:    Size  Location     Type
 13135 ;;		None
 13136 ;; Auto vars:     Size  Location     Type
 13137 ;;		None
 13138 ;; Return value:  Size  Location     Type
 13139 ;;                  1    wreg      unsigned char 
 13140 ;; Registers used:
 13141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13142 ;; Tracked objects:
 13143 ;;		On entry : 0/0
 13144 ;;		On exit  : 0/0
 13145 ;;		Unchanged: 0/0
 13146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13149 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13150 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13151 ;;Total ram usage:        4 bytes
 13152 ;; Hardware stack levels used:    1
 13153 ;; Hardware stack levels required when called:    1
 13154 ;; This function calls:
 13155 ;;		i2___awmod
 13156 ;;		i2_digitalWrite
 13157 ;;		i2_startTimer
 13158 ;; This function is called by:
 13159 ;;		_service
 13160 ;; This function uses a non-reentrant model
 13161 ;;
 13162                           
 13163                           	psect	text54
 13164  002642                     __ptext54:
 13165                           	opt stack 0
 13166  002642                     _servoInterruptService:
 13167                           	opt stack 21
 13168                           
 13169                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 13170                           
 13171                           ;incstack = 0
 13172  002642  A4F2               	btfss	intcon,2,c	;volatile
 13173  002644  D082               	goto	i2l5328
 13174  002646  94F2               	bcf	intcon,2,c	;volatile
 13175                           
 13176                           ;servo.c: 58: digitalWrite(servos[curr],0);
 13177  002648  90D8               	bcf	status,0,c
 13178  00264A  3458               	rlcf	_curr,w,c
 13179  00264C  6ED9               	movwf	fsr2l,c
 13180  00264E  3459               	rlcf	_curr+1,w,c
 13181  002650  6EDA               	movwf	fsr2h,c
 13182  002652  0E5F               	movlw	low _servos
 13183  002654  26D9               	addwf	fsr2l,f,c
 13184  002656  0E01               	movlw	high _servos
 13185  002658  22DA               	addwfc	fsr2h,f,c
 13186  00265A  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13187  00265E  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13188  002662  0E00               	movlw	0
 13189  002664  6E0A               	movwf	i2digitalWrite@val+1,c
 13190  002666  0E00               	movlw	0
 13191  002668  6E09               	movwf	i2digitalWrite@val,c
 13192  00266A  EC33  F016         	call	i2_digitalWrite	;wreg free
 13193                           
 13194                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 13195  00266E  0E01               	movlw	1
 13196  002670  2458               	addwf	_curr,w,c
 13197  002672  6E01               	movwf	i2___awmod@dividend,c
 13198  002674  0E00               	movlw	0
 13199  002676  2059               	addwfc	_curr+1,w,c
 13200  002678  6E02               	movwf	i2___awmod@dividend+1,c
 13201  00267A  0E01               	movlw	1
 13202  00267C  0100               	movlb	0	; () banked
 13203  00267E  25F9               	addwf	_n& (0+255),w,b
 13204  002680  6E03               	movwf	i2___awmod@divisor,c
 13205  002682  0E00               	movlw	0
 13206  002684  0100               	movlb	0	; () banked
 13207  002686  21FA               	addwfc	(_n+1)& (0+255),w,b
 13208  002688  6E04               	movwf	i2___awmod@divisor+1,c
 13209  00268A  ECBA  F019         	call	i2___awmod	;wreg free
 13210  00268E  90D8               	bcf	status,0,c
 13211  002690  3601               	rlcf	?i2___awmod,f,c
 13212  002692  3602               	rlcf	?i2___awmod+1,f,c
 13213  002694  0E5F               	movlw	low _servos
 13214  002696  2401               	addwf	?i2___awmod,w,c
 13215  002698  6ED9               	movwf	fsr2l,c
 13216  00269A  0E01               	movlw	high _servos
 13217  00269C  2002               	addwfc	?i2___awmod+1,w,c
 13218  00269E  6EDA               	movwf	fsr2h,c
 13219  0026A0  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13220  0026A4  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13221  0026A8  0E00               	movlw	0
 13222  0026AA  6E0A               	movwf	i2digitalWrite@val+1,c
 13223  0026AC  0E01               	movlw	1
 13224  0026AE  6E09               	movwf	i2digitalWrite@val,c
 13225  0026B0  EC33  F016         	call	i2_digitalWrite	;wreg free
 13226                           
 13227                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 13228  0026B4  0E00               	movlw	0
 13229  0026B6  6E08               	movwf	i2startTimer@timer+1,c
 13230  0026B8  0E00               	movlw	0
 13231  0026BA  6E07               	movwf	i2startTimer@timer,c
 13232  0026BC  0EFF               	movlw	255
 13233  0026BE  6E10               	movwf	??_servoInterruptService& (0+255),c
 13234  0026C0  0EFF               	movlw	255
 13235  0026C2  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 13236  0026C4  0E01               	movlw	1
 13237  0026C6  2458               	addwf	_curr,w,c
 13238  0026C8  6E01               	movwf	i2___awmod@dividend,c
 13239  0026CA  0E00               	movlw	0
 13240  0026CC  2059               	addwfc	_curr+1,w,c
 13241  0026CE  6E02               	movwf	i2___awmod@dividend+1,c
 13242  0026D0  0E01               	movlw	1
 13243  0026D2  0100               	movlb	0	; () banked
 13244  0026D4  25F9               	addwf	_n& (0+255),w,b
 13245  0026D6  6E03               	movwf	i2___awmod@divisor,c
 13246  0026D8  0E00               	movlw	0
 13247  0026DA  0100               	movlb	0	; () banked
 13248  0026DC  21FA               	addwfc	(_n+1)& (0+255),w,b
 13249  0026DE  6E04               	movwf	i2___awmod@divisor+1,c
 13250  0026E0  ECBA  F019         	call	i2___awmod	;wreg free
 13251  0026E4  90D8               	bcf	status,0,c
 13252  0026E6  3601               	rlcf	?i2___awmod,f,c
 13253  0026E8  3602               	rlcf	?i2___awmod+1,f,c
 13254  0026EA  0E57               	movlw	low _pulse
 13255  0026EC  2401               	addwf	?i2___awmod,w,c
 13256  0026EE  6ED9               	movwf	fsr2l,c
 13257  0026F0  0E01               	movlw	high _pulse
 13258  0026F2  2002               	addwfc	?i2___awmod+1,w,c
 13259  0026F4  6EDA               	movwf	fsr2h,c
 13260  0026F6  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 13261  0026FA  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 13262  0026FE  1E12               	comf	??_servoInterruptService+2,f,c
 13263  002700  1E13               	comf	??_servoInterruptService+3,f,c
 13264  002702  4A12               	infsnz	??_servoInterruptService+2,f,c
 13265  002704  2A13               	incf	??_servoInterruptService+3,f,c
 13266  002706  5010               	movf	??_servoInterruptService,w,c
 13267  002708  2612               	addwf	??_servoInterruptService+2,f,c
 13268  00270A  5011               	movf	??_servoInterruptService+1,w,c
 13269  00270C  2213               	addwfc	??_servoInterruptService+3,f,c
 13270  00270E  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 13271  002712  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 13272  002716  6A0B               	clrf	i2startTimer@val+2,c
 13273  002718  6A0C               	clrf	i2startTimer@val+3,c
 13274  00271A  ECBD  F01B         	call	i2_startTimer	;wreg free
 13275                           
 13276                           ;servo.c: 62: curr = (curr+1)%(n+1);
 13277  00271E  0E01               	movlw	1
 13278  002720  2458               	addwf	_curr,w,c
 13279  002722  6E01               	movwf	i2___awmod@dividend,c
 13280  002724  0E00               	movlw	0
 13281  002726  2059               	addwfc	_curr+1,w,c
 13282  002728  6E02               	movwf	i2___awmod@dividend+1,c
 13283  00272A  0E01               	movlw	1
 13284  00272C  0100               	movlb	0	; () banked
 13285  00272E  25F9               	addwf	_n& (0+255),w,b
 13286  002730  6E03               	movwf	i2___awmod@divisor,c
 13287  002732  0E00               	movlw	0
 13288  002734  0100               	movlb	0	; () banked
 13289  002736  21FA               	addwfc	(_n+1)& (0+255),w,b
 13290  002738  6E04               	movwf	i2___awmod@divisor+1,c
 13291  00273A  ECBA  F019         	call	i2___awmod	;wreg free
 13292  00273E  C001  F058         	movff	?i2___awmod,_curr
 13293  002742  C002  F059         	movff	?i2___awmod+1,_curr+1
 13294                           
 13295                           ;servo.c: 63: return 1;
 13296  002746  0E01               	movlw	1
 13297  002748  0012               	return	
 13298  00274A                     i2l5328:
 13299                           
 13300                           ;servo.c: 64: }
 13301                           ;servo.c: 65: return 0;
 13302  00274A  0E00               	movlw	0
 13303  00274C  0012               	return	
 13304  00274E                     __end_of_servoInterruptService:
 13305                           	opt stack 0
 13306                           pclatu	equ	0xFFB
 13307                           pclath	equ	0xFFA
 13308                           tblptru	equ	0xFF8
 13309                           tblptrh	equ	0xFF7
 13310                           tblptrl	equ	0xFF6
 13311                           tablat	equ	0xFF5
 13312                           prodh	equ	0xFF4
 13313                           prodl	equ	0xFF3
 13314                           intcon	equ	0xFF2
 13315                           intcon3	equ	0xFF0
 13316                           postinc0	equ	0xFEE
 13317                           fsr0h	equ	0xFEA
 13318                           fsr0l	equ	0xFE9
 13319                           wreg	equ	0xFE8
 13320                           postdec1	equ	0xFE5
 13321                           fsr1h	equ	0xFE2
 13322                           fsr1l	equ	0xFE1
 13323                           indf2	equ	0xFDF
 13324                           postinc2	equ	0xFDE
 13325                           postdec2	equ	0xFDD
 13326                           fsr2h	equ	0xFDA
 13327                           fsr2l	equ	0xFD9
 13328                           status	equ	0xFD8
 13329                           
 13330 ;; *************** function i2_startTimer *****************
 13331 ;; Defined at:
 13332 ;;		line 76 in file "timer.c"
 13333 ;; Parameters:    Size  Location     Type
 13334 ;;  timer           2    6[COMRAM] int 
 13335 ;;  val             4    8[COMRAM] long 
 13336 ;; Auto vars:     Size  Location     Type
 13337 ;;		None
 13338 ;; Return value:  Size  Location     Type
 13339 ;;                  1    wreg      void 
 13340 ;; Registers used:
 13341 ;;		wreg, status,2, status,0
 13342 ;; Tracked objects:
 13343 ;;		On entry : 0/0
 13344 ;;		On exit  : 0/0
 13345 ;;		Unchanged: 0/0
 13346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13347 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13349 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13350 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13351 ;;Total ram usage:        8 bytes
 13352 ;; Hardware stack levels used:    1
 13353 ;; This function calls:
 13354 ;;		Nothing
 13355 ;; This function is called by:
 13356 ;;		_service
 13357 ;;		_servoInterruptService
 13358 ;; This function uses a non-reentrant model
 13359 ;;
 13360                           
 13361                           	psect	text55
 13362  00377A                     __ptext55:
 13363                           	opt stack 0
 13364  00377A                     i2_startTimer:
 13365                           	opt stack 22
 13366                           
 13367                           ;timer.c: 77: switch(timer){
 13368                           
 13369                           ;incstack = 0
 13370  00377A  D012               	goto	i2l5068
 13371  00377C                     i2l444:
 13372                           
 13373                           ;timer.c: 79: TMR0H = val>>8;
 13374  00377C  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 13375                           
 13376                           ;timer.c: 80: TMR0L = val;
 13377  003780  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 13378                           
 13379                           ;timer.c: 81: T0CON |= 1<<7;
 13380  003784  8ED5               	bsf	4053,7,c	;volatile
 13381                           
 13382                           ;timer.c: 82: break;
 13383  003786  0012               	return	
 13384  003788                     i2l446:
 13385                           
 13386                           ;timer.c: 84: TMR1H = val>>8;
 13387  003788  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 13388                           
 13389                           ;timer.c: 85: TMR1L = val;
 13390  00378C  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 13391                           
 13392                           ;timer.c: 86: T1CON |= 1<<0;
 13393  003790  80CD               	bsf	4045,0,c	;volatile
 13394                           
 13395                           ;timer.c: 87: break;
 13396  003792  0012               	return	
 13397  003794                     i2l447:
 13398                           
 13399                           ;timer.c: 89: TMR3H = val>>8;
 13400  003794  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 13401                           
 13402                           ;timer.c: 90: TMR3L = val;
 13403  003798  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 13404                           
 13405                           ;timer.c: 91: T3CON |= 1<<0;
 13406  00379C  80B1               	bsf	4017,0,c	;volatile
 13407                           
 13408                           ;timer.c: 92: }
 13409  00379E  0012               	return	
 13410  0037A0                     i2l5068:
 13411  0037A0  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 13412  0037A4  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 13413                           
 13414                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13415                           ; Switch size 1, requested type "space"
 13416                           ; Number of cases is 1, Range of values is 0 to 0
 13417                           ; switch strategies available:
 13418                           ; Name         Instructions Cycles
 13419                           ; simple_byte            4     3 (average)
 13420                           ;	Chosen strategy is simple_byte
 13421  0037A8  500E               	movf	??i2_startTimer+1,w,c
 13422  0037AA  0A00               	xorlw	0	; case 0
 13423  0037AC  A4D8               	btfss	status,2,c
 13424  0037AE  0012               	return	
 13425                           
 13426                           ; Switch size 1, requested type "space"
 13427                           ; Number of cases is 3, Range of values is 0 to 3
 13428                           ; switch strategies available:
 13429                           ; Name         Instructions Cycles
 13430                           ; simple_byte           10     6 (average)
 13431                           ;	Chosen strategy is simple_byte
 13432  0037B0  500D               	movf	??i2_startTimer,w,c
 13433  0037B2  0A00               	xorlw	0	; case 0
 13434  0037B4  B4D8               	btfsc	status,2,c
 13435  0037B6  D7E2               	goto	i2l444
 13436  0037B8  0A01               	xorlw	1	; case 1
 13437  0037BA  B4D8               	btfsc	status,2,c
 13438  0037BC  D7E5               	goto	i2l446
 13439  0037BE  0A02               	xorlw	2	; case 3
 13440  0037C0  A4D8               	btfss	status,2,c
 13441  0037C2  0012               	return	
 13442  0037C4  D7E7               	goto	i2l447
 13443  0037C6                     __end_ofi2_startTimer:
 13444                           	opt stack 0
 13445                           pclatu	equ	0xFFB
 13446                           pclath	equ	0xFFA
 13447                           tblptru	equ	0xFF8
 13448                           tblptrh	equ	0xFF7
 13449                           tblptrl	equ	0xFF6
 13450                           tablat	equ	0xFF5
 13451                           prodh	equ	0xFF4
 13452                           prodl	equ	0xFF3
 13453                           intcon	equ	0xFF2
 13454                           intcon3	equ	0xFF0
 13455                           postinc0	equ	0xFEE
 13456                           fsr0h	equ	0xFEA
 13457                           fsr0l	equ	0xFE9
 13458                           wreg	equ	0xFE8
 13459                           postdec1	equ	0xFE5
 13460                           fsr1h	equ	0xFE2
 13461                           fsr1l	equ	0xFE1
 13462                           indf2	equ	0xFDF
 13463                           postinc2	equ	0xFDE
 13464                           postdec2	equ	0xFDD
 13465                           fsr2h	equ	0xFDA
 13466                           fsr2l	equ	0xFD9
 13467                           status	equ	0xFD8
 13468                           
 13469 ;; *************** function i2_digitalWrite *****************
 13470 ;; Defined at:
 13471 ;;		line 53 in file "iopin.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;  pin             2    6[COMRAM] PTR int 
 13474 ;;		 -> AA_float(4), redirectingServo(4), cylinderMotor(4), padServo(4), 
 13475 ;;		 -> conveyorServo(4), 
 13476 ;;  val             2    8[COMRAM] int 
 13477 ;; Auto vars:     Size  Location     Type
 13478 ;;  digitalWrite    2   13[COMRAM] int 
 13479 ;; Return value:  Size  Location     Type
 13480 ;;                  1    wreg      void 
 13481 ;; Registers used:
 13482 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13483 ;; Tracked objects:
 13484 ;;		On entry : 0/0
 13485 ;;		On exit  : 0/0
 13486 ;;		Unchanged: 0/0
 13487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13490 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13491 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13492 ;;Total ram usage:        9 bytes
 13493 ;; Hardware stack levels used:    1
 13494 ;; This function calls:
 13495 ;;		Nothing
 13496 ;; This function is called by:
 13497 ;;		_servoInterruptService
 13498 ;; This function uses a non-reentrant model
 13499 ;;
 13500                           
 13501                           	psect	text56
 13502  002C66                     __ptext56:
 13503                           	opt stack 0
 13504  002C66                     i2_digitalWrite:
 13505                           	opt stack 21
 13506                           
 13507                           ;iopin.c: 54: if(pin){
 13508                           
 13509                           ;incstack = 0
 13510  002C66  5007               	movf	i2digitalWrite@pin,w,c
 13511  002C68  1008               	iorwf	i2digitalWrite@pin+1,w,c
 13512  002C6A  B4D8               	btfsc	status,2,c
 13513  002C6C  0012               	return	
 13514                           
 13515                           ;iopin.c: 55: int p = 1 << pin[1];
 13516  002C6E  EE20 F002          	lfsr	2,2
 13517  002C72  5007               	movf	i2digitalWrite@pin,w,c
 13518  002C74  26D9               	addwf	fsr2l,f,c
 13519  002C76  5008               	movf	i2digitalWrite@pin+1,w,c
 13520  002C78  22DA               	addwfc	fsr2h,f,c
 13521  002C7A  50DF               	movf	indf2,w,c
 13522  002C7C  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 13523  002C7E  0E01               	movlw	1
 13524  002C80  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 13525  002C82  0E00               	movlw	0
 13526  002C84  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 13527  002C86  2A0B               	incf	??i2_digitalWrite,f,c
 13528  002C88  D003               	goto	i2u481_44
 13529  002C8A                     i2u481_45:
 13530  002C8A  90D8               	bcf	status,0,c
 13531  002C8C  360C               	rlcf	??i2_digitalWrite+1,f,c
 13532  002C8E  360D               	rlcf	??i2_digitalWrite+2,f,c
 13533  002C90                     i2u481_44:
 13534  002C90  2E0B               	decfsz	??i2_digitalWrite,f,c
 13535  002C92  D7FB               	goto	i2u481_45
 13536  002C94  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 13537  002C98  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 13538                           
 13539                           ;iopin.c: 56: if(val == 0){
 13540  002C9C  5009               	movf	i2digitalWrite@val,w,c
 13541  002C9E  100A               	iorwf	i2digitalWrite@val+1,w,c
 13542  002CA0  A4D8               	btfss	status,2,c
 13543  002CA2  D02B               	goto	i2l5054
 13544                           
 13545                           ;iopin.c: 57: p ^= 0xff;
 13546  002CA4  0EFF               	movlw	255
 13547  002CA6  1A0E               	xorwf	i2digitalWrite@p,f,c
 13548                           
 13549                           ;iopin.c: 58: }
 13550                           ;iopin.c: 60: switch(pin[0]){
 13551  002CA8  D028               	goto	i2l5054
 13552  002CAA                     i2l5030:
 13553  002CAA  0409               	decf	i2digitalWrite@val,w,c
 13554  002CAC  100A               	iorwf	i2digitalWrite@val+1,w,c
 13555  002CAE  A4D8               	btfss	status,2,c
 13556  002CB0  D003               	goto	i2l5034
 13557  002CB2  500E               	movf	i2digitalWrite@p,w,c
 13558  002CB4  1289               	iorwf	3977,f,c	;volatile
 13559  002CB6  0012               	return	
 13560  002CB8                     i2l5034:
 13561                           
 13562                           ;iopin.c: 62: else LATA &= p;
 13563  002CB8  500E               	movf	i2digitalWrite@p,w,c
 13564  002CBA  1689               	andwf	3977,f,c	;volatile
 13565                           
 13566                           ;iopin.c: 63: break;
 13567  002CBC  0012               	return	
 13568  002CBE                     i2l5036:
 13569  002CBE  0409               	decf	i2digitalWrite@val,w,c
 13570  002CC0  100A               	iorwf	i2digitalWrite@val+1,w,c
 13571  002CC2  A4D8               	btfss	status,2,c
 13572  002CC4  D003               	goto	i2l5040
 13573  002CC6  500E               	movf	i2digitalWrite@p,w,c
 13574  002CC8  128A               	iorwf	3978,f,c	;volatile
 13575  002CCA  0012               	return	
 13576  002CCC                     i2l5040:
 13577                           
 13578                           ;iopin.c: 65: else LATB &= p;
 13579  002CCC  500E               	movf	i2digitalWrite@p,w,c
 13580  002CCE  168A               	andwf	3978,f,c	;volatile
 13581                           
 13582                           ;iopin.c: 66: break;
 13583  002CD0  0012               	return	
 13584  002CD2                     i2l5042:
 13585  002CD2  0409               	decf	i2digitalWrite@val,w,c
 13586  002CD4  100A               	iorwf	i2digitalWrite@val+1,w,c
 13587  002CD6  A4D8               	btfss	status,2,c
 13588  002CD8  D003               	goto	i2l5046
 13589  002CDA  500E               	movf	i2digitalWrite@p,w,c
 13590  002CDC  128B               	iorwf	3979,f,c	;volatile
 13591  002CDE  0012               	return	
 13592  002CE0                     i2l5046:
 13593                           
 13594                           ;iopin.c: 68: else LATC &= p;
 13595  002CE0  500E               	movf	i2digitalWrite@p,w,c
 13596  002CE2  168B               	andwf	3979,f,c	;volatile
 13597                           
 13598                           ;iopin.c: 69: break;
 13599  002CE4  0012               	return	
 13600  002CE6                     i2l5048:
 13601  002CE6  0409               	decf	i2digitalWrite@val,w,c
 13602  002CE8  100A               	iorwf	i2digitalWrite@val+1,w,c
 13603  002CEA  A4D8               	btfss	status,2,c
 13604  002CEC  D003               	goto	i2l5052
 13605  002CEE  500E               	movf	i2digitalWrite@p,w,c
 13606  002CF0  128C               	iorwf	3980,f,c	;volatile
 13607  002CF2  0012               	return	
 13608  002CF4                     i2l5052:
 13609                           
 13610                           ;iopin.c: 71: else LATD &= p;
 13611  002CF4  500E               	movf	i2digitalWrite@p,w,c
 13612  002CF6  168C               	andwf	3980,f,c	;volatile
 13613                           
 13614                           ;iopin.c: 72: }
 13615  002CF8  0012               	return	
 13616  002CFA                     i2l5054:
 13617  002CFA  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 13618  002CFE  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 13619  002D02  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 13620  002D06  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 13621                           
 13622                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13623                           ; Switch size 1, requested type "space"
 13624                           ; Number of cases is 1, Range of values is 0 to 0
 13625                           ; switch strategies available:
 13626                           ; Name         Instructions Cycles
 13627                           ; simple_byte            4     3 (average)
 13628                           ;	Chosen strategy is simple_byte
 13629  002D0A  500C               	movf	??i2_digitalWrite+1,w,c
 13630  002D0C  0A00               	xorlw	0	; case 0
 13631  002D0E  A4D8               	btfss	status,2,c
 13632  002D10  0012               	return	
 13633                           
 13634                           ; Switch size 1, requested type "space"
 13635                           ; Number of cases is 4, Range of values is 0 to 3
 13636                           ; switch strategies available:
 13637                           ; Name         Instructions Cycles
 13638                           ; simple_byte           13     7 (average)
 13639                           ;	Chosen strategy is simple_byte
 13640  002D12  500B               	movf	??i2_digitalWrite,w,c
 13641  002D14  0A00               	xorlw	0	; case 0
 13642  002D16  B4D8               	btfsc	status,2,c
 13643  002D18  D7C8               	goto	i2l5030
 13644  002D1A  0A01               	xorlw	1	; case 1
 13645  002D1C  B4D8               	btfsc	status,2,c
 13646  002D1E  D7CF               	goto	i2l5036
 13647  002D20  0A03               	xorlw	3	; case 2
 13648  002D22  B4D8               	btfsc	status,2,c
 13649  002D24  D7D6               	goto	i2l5042
 13650  002D26  0A01               	xorlw	1	; case 3
 13651  002D28  A4D8               	btfss	status,2,c
 13652  002D2A  0012               	return	
 13653  002D2C  D7DC               	goto	i2l5048
 13654  002D2E                     __end_ofi2_digitalWrite:
 13655                           	opt stack 0
 13656                           pclatu	equ	0xFFB
 13657                           pclath	equ	0xFFA
 13658                           tblptru	equ	0xFF8
 13659                           tblptrh	equ	0xFF7
 13660                           tblptrl	equ	0xFF6
 13661                           tablat	equ	0xFF5
 13662                           prodh	equ	0xFF4
 13663                           prodl	equ	0xFF3
 13664                           intcon	equ	0xFF2
 13665                           intcon3	equ	0xFF0
 13666                           postinc0	equ	0xFEE
 13667                           fsr0h	equ	0xFEA
 13668                           fsr0l	equ	0xFE9
 13669                           wreg	equ	0xFE8
 13670                           postdec1	equ	0xFE5
 13671                           fsr1h	equ	0xFE2
 13672                           fsr1l	equ	0xFE1
 13673                           indf2	equ	0xFDF
 13674                           postinc2	equ	0xFDE
 13675                           postdec2	equ	0xFDD
 13676                           fsr2h	equ	0xFDA
 13677                           fsr2l	equ	0xFD9
 13678                           status	equ	0xFD8
 13679                           
 13680 ;; *************** function i2___awmod *****************
 13681 ;; Defined at:
 13682 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13683 ;; Parameters:    Size  Location     Type
 13684 ;;  dividend        2    0[COMRAM] int 
 13685 ;;  divisor         2    2[COMRAM] int 
 13686 ;; Auto vars:     Size  Location     Type
 13687 ;;  __awmod         1    5[COMRAM] unsigned char 
 13688 ;;  __awmod         1    4[COMRAM] unsigned char 
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  2    0[COMRAM] int 
 13691 ;; Registers used:
 13692 ;;		wreg, status,2, status,0
 13693 ;; Tracked objects:
 13694 ;;		On entry : 0/0
 13695 ;;		On exit  : 0/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13698 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13701 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13702 ;;Total ram usage:        6 bytes
 13703 ;; Hardware stack levels used:    1
 13704 ;; This function calls:
 13705 ;;		Nothing
 13706 ;; This function is called by:
 13707 ;;		_servoInterruptService
 13708 ;; This function uses a non-reentrant model
 13709 ;;
 13710                           
 13711                           	psect	text57
 13712  003374                     __ptext57:
 13713                           	opt stack 0
 13714  003374                     i2___awmod:
 13715                           	opt stack 21
 13716                           
 13717                           ;incstack = 0
 13718  003374  0E00               	movlw	0
 13719  003376  6E06               	movwf	i2___awmod@sign,c
 13720  003378  AE02               	btfss	i2___awmod@dividend+1,7,c
 13721  00337A  D006               	goto	i2l5082
 13722  00337C  6C01               	negf	i2___awmod@dividend,c
 13723  00337E  1E02               	comf	i2___awmod@dividend+1,f,c
 13724  003380  B0D8               	btfsc	status,0,c
 13725  003382  2A02               	incf	i2___awmod@dividend+1,f,c
 13726  003384  0E01               	movlw	1
 13727  003386  6E06               	movwf	i2___awmod@sign,c
 13728  003388                     i2l5082:
 13729  003388  AE04               	btfss	i2___awmod@divisor+1,7,c
 13730  00338A  D004               	goto	i2l5086
 13731  00338C  6C03               	negf	i2___awmod@divisor,c
 13732  00338E  1E04               	comf	i2___awmod@divisor+1,f,c
 13733  003390  B0D8               	btfsc	status,0,c
 13734  003392  2A04               	incf	i2___awmod@divisor+1,f,c
 13735  003394                     i2l5086:
 13736  003394  5003               	movf	i2___awmod@divisor,w,c
 13737  003396  1004               	iorwf	i2___awmod@divisor+1,w,c
 13738  003398  B4D8               	btfsc	status,2,c
 13739  00339A  D018               	goto	i2l5102
 13740  00339C  0E01               	movlw	1
 13741  00339E  6E05               	movwf	i2___awmod@counter,c
 13742  0033A0  D004               	goto	i2l5092
 13743  0033A2                     i2l5090:
 13744  0033A2  90D8               	bcf	status,0,c
 13745  0033A4  3603               	rlcf	i2___awmod@divisor,f,c
 13746  0033A6  3604               	rlcf	i2___awmod@divisor+1,f,c
 13747  0033A8  2A05               	incf	i2___awmod@counter,f,c
 13748  0033AA                     i2l5092:
 13749  0033AA  AE04               	btfss	i2___awmod@divisor+1,7,c
 13750  0033AC  D7FA               	goto	i2l5090
 13751  0033AE                     i2l5094:
 13752  0033AE  5003               	movf	i2___awmod@divisor,w,c
 13753  0033B0  5C01               	subwf	i2___awmod@dividend,w,c
 13754  0033B2  5004               	movf	i2___awmod@divisor+1,w,c
 13755  0033B4  5802               	subwfb	i2___awmod@dividend+1,w,c
 13756  0033B6  A0D8               	btfss	status,0,c
 13757  0033B8  D004               	goto	i2l5098
 13758  0033BA  5003               	movf	i2___awmod@divisor,w,c
 13759  0033BC  5E01               	subwf	i2___awmod@dividend,f,c
 13760  0033BE  5004               	movf	i2___awmod@divisor+1,w,c
 13761  0033C0  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13762  0033C2                     i2l5098:
 13763  0033C2  90D8               	bcf	status,0,c
 13764  0033C4  3204               	rrcf	i2___awmod@divisor+1,f,c
 13765  0033C6  3203               	rrcf	i2___awmod@divisor,f,c
 13766  0033C8  2E05               	decfsz	i2___awmod@counter,f,c
 13767  0033CA  D7F1               	goto	i2l5094
 13768  0033CC                     i2l5102:
 13769  0033CC  5006               	movf	i2___awmod@sign,w,c
 13770  0033CE  B4D8               	btfsc	status,2,c
 13771  0033D0  D004               	goto	i2l5106
 13772  0033D2  6C01               	negf	i2___awmod@dividend,c
 13773  0033D4  1E02               	comf	i2___awmod@dividend+1,f,c
 13774  0033D6  B0D8               	btfsc	status,0,c
 13775  0033D8  2A02               	incf	i2___awmod@dividend+1,f,c
 13776  0033DA                     i2l5106:
 13777  0033DA  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13778  0033DE  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13779  0033E2  0012               	return	
 13780  0033E4                     __end_ofi2___awmod:
 13781                           	opt stack 0
 13782                           pclatu	equ	0xFFB
 13783                           pclath	equ	0xFFA
 13784                           tblptru	equ	0xFF8
 13785                           tblptrh	equ	0xFF7
 13786                           tblptrl	equ	0xFF6
 13787                           tablat	equ	0xFF5
 13788                           prodh	equ	0xFF4
 13789                           prodl	equ	0xFF3
 13790                           intcon	equ	0xFF2
 13791                           intcon3	equ	0xFF0
 13792                           postinc0	equ	0xFEE
 13793                           fsr0h	equ	0xFEA
 13794                           fsr0l	equ	0xFE9
 13795                           wreg	equ	0xFE8
 13796                           postdec1	equ	0xFE5
 13797                           fsr1h	equ	0xFE2
 13798                           fsr1l	equ	0xFE1
 13799                           indf2	equ	0xFDF
 13800                           postinc2	equ	0xFDE
 13801                           postdec2	equ	0xFDD
 13802                           fsr2h	equ	0xFDA
 13803                           fsr2l	equ	0xFD9
 13804                           status	equ	0xFD8
 13805                           
 13806 ;; *************** function _keyPressedInterruptService *****************
 13807 ;; Defined at:
 13808 ;;		line 49 in file "keypad.c"
 13809 ;; Parameters:    Size  Location     Type
 13810 ;;		None
 13811 ;; Auto vars:     Size  Location     Type
 13812 ;;  key             1    0[COMRAM] unsigned char 
 13813 ;; Return value:  Size  Location     Type
 13814 ;;                  1    wreg      void 
 13815 ;; Registers used:
 13816 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13817 ;; Tracked objects:
 13818 ;;		On entry : 0/0
 13819 ;;		On exit  : 0/0
 13820 ;;		Unchanged: 0/0
 13821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13826 ;;Total ram usage:        1 bytes
 13827 ;; Hardware stack levels used:    1
 13828 ;; This function calls:
 13829 ;;		Nothing
 13830 ;; This function is called by:
 13831 ;;		_service
 13832 ;; This function uses a non-reentrant model
 13833 ;;
 13834                           
 13835                           	psect	text58
 13836  0039DE                     __ptext58:
 13837                           	opt stack 0
 13838  0039DE                     _keyPressedInterruptService:
 13839                           	opt stack 22
 13840                           
 13841                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 13842                           
 13843                           ;incstack = 0
 13844  0039DE  3881               	swapf	3969,w,c	;volatile
 13845  0039E0  0B0F               	andlw	15
 13846  0039E2  0B0F               	andlw	15
 13847  0039E4  6E01               	movwf	keyPressedInterruptService@key,c
 13848                           
 13849                           ;keypad.c: 51: lastKey = keys[key];
 13850  0039E6  5001               	movf	keyPressedInterruptService@key,w,c
 13851  0039E8  0D01               	mullw	1
 13852  0039EA  0E9F               	movlw	low _keys
 13853  0039EC  24F3               	addwf	prodl,w,c
 13854  0039EE  6EF6               	movwf	tblptrl,c
 13855  0039F0  0EFE               	movlw	high _keys
 13856  0039F2  20F4               	addwfc	prodh,w,c
 13857  0039F4  6EF7               	movwf	tblptrh,c
 13858  0039F6                     	if	0	;There are less than 3 active tblptr bytes
 13859  0039F6                     	endif
 13860  0039F6  0008               	tblrd		*
 13861  0039F8  CFF5 F05C          	movff	tablat,_lastKey
 13862  0039FC  0012               	return		;funcret
 13863  0039FE                     __end_of_keyPressedInterruptService:
 13864                           	opt stack 0
 13865                           pclatu	equ	0xFFB
 13866                           pclath	equ	0xFFA
 13867                           tblptru	equ	0xFF8
 13868                           tblptrh	equ	0xFF7
 13869                           tblptrl	equ	0xFF6
 13870                           tablat	equ	0xFF5
 13871                           prodh	equ	0xFF4
 13872                           prodl	equ	0xFF3
 13873                           intcon	equ	0xFF2
 13874                           intcon3	equ	0xFF0
 13875                           postinc0	equ	0xFEE
 13876                           fsr0h	equ	0xFEA
 13877                           fsr0l	equ	0xFE9
 13878                           wreg	equ	0xFE8
 13879                           postdec1	equ	0xFE5
 13880                           fsr1h	equ	0xFE2
 13881                           fsr1l	equ	0xFE1
 13882                           indf2	equ	0xFDF
 13883                           postinc2	equ	0xFDE
 13884                           postdec2	equ	0xFDD
 13885                           fsr2h	equ	0xFDA
 13886                           fsr2l	equ	0xFD9
 13887                           status	equ	0xFD8
 13888                           pclatu	equ	0xFFB
 13889                           pclath	equ	0xFFA
 13890                           tblptru	equ	0xFF8
 13891                           tblptrh	equ	0xFF7
 13892                           tblptrl	equ	0xFF6
 13893                           tablat	equ	0xFF5
 13894                           prodh	equ	0xFF4
 13895                           prodl	equ	0xFF3
 13896                           intcon	equ	0xFF2
 13897                           intcon3	equ	0xFF0
 13898                           postinc0	equ	0xFEE
 13899                           fsr0h	equ	0xFEA
 13900                           fsr0l	equ	0xFE9
 13901                           wreg	equ	0xFE8
 13902                           postdec1	equ	0xFE5
 13903                           fsr1h	equ	0xFE2
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           fsr2h	equ	0xFDA
 13909                           fsr2l	equ	0xFD9
 13910                           status	equ	0xFD8
 13911                           
 13912                           	psect	rparam
 13913  0000                     pclatu	equ	0xFFB
 13914                           pclath	equ	0xFFA
 13915                           tblptru	equ	0xFF8
 13916                           tblptrh	equ	0xFF7
 13917                           tblptrl	equ	0xFF6
 13918                           tablat	equ	0xFF5
 13919                           prodh	equ	0xFF4
 13920                           prodl	equ	0xFF3
 13921                           intcon	equ	0xFF2
 13922                           intcon3	equ	0xFF0
 13923                           postinc0	equ	0xFEE
 13924                           fsr0h	equ	0xFEA
 13925                           fsr0l	equ	0xFE9
 13926                           wreg	equ	0xFE8
 13927                           postdec1	equ	0xFE5
 13928                           fsr1h	equ	0xFE2
 13929                           fsr1l	equ	0xFE1
 13930                           indf2	equ	0xFDF
 13931                           postinc2	equ	0xFDE
 13932                           postdec2	equ	0xFDD
 13933                           fsr2h	equ	0xFDA
 13934                           fsr2l	equ	0xFD9
 13935                           status	equ	0xFD8
 13936                           
 13937                           	psect	temp
 13938  00005D                     btemp:
 13939                           	opt stack 0
 13940  00005D                     	ds	1
 13941  0000                     int$flags	set	btemp
 13942                           pclatu	equ	0xFFB
 13943                           pclath	equ	0xFFA
 13944                           tblptru	equ	0xFF8
 13945                           tblptrh	equ	0xFF7
 13946                           tblptrl	equ	0xFF6
 13947                           tablat	equ	0xFF5
 13948                           prodh	equ	0xFF4
 13949                           prodl	equ	0xFF3
 13950                           intcon	equ	0xFF2
 13951                           intcon3	equ	0xFF0
 13952                           postinc0	equ	0xFEE
 13953                           fsr0h	equ	0xFEA
 13954                           fsr0l	equ	0xFE9
 13955                           wreg	equ	0xFE8
 13956                           postdec1	equ	0xFE5
 13957                           fsr1h	equ	0xFE2
 13958                           fsr1l	equ	0xFE1
 13959                           indf2	equ	0xFDF
 13960                           postinc2	equ	0xFDE
 13961                           postdec2	equ	0xFDD
 13962                           fsr2h	equ	0xFDA
 13963                           fsr2l	equ	0xFD9
 13964                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    174
    Data        59
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    121     123
    BANK1           256     51     119
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_21(CODE[19]), STR_20(CODE[18]), STR_19(CODE[17]), STR_18(CODE[19]), 
		 -> STR_17(CODE[17]), STR_16(CODE[19]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[18]), STR_11(CODE[9]), STR_10(CODE[10]), 
		 -> STR_9(CODE[8]), STR_8(CODE[11]), STR_7(CODE[11]), STR_6(CODE[11]), 
		 -> STR_5(CODE[15]), STR_4(CODE[14]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(COMRAM[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(COMRAM[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(COMRAM[4]), conveyorServo(BANK1[4]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), redirectingServo(BANK1[4]), cylinderMotor(BANK1[4]), padServo(COMRAM[4]), 
		 -> conveyorServo(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), 


Critical Paths under _main in COMRAM

    _main->___almod
    _sortBattery->___ftdiv
    _showRunTime->___ftdiv
    _printf->___almod
    _lcdNewline->_lcdInst
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _readPastRun->_eepromRead
    _eepromRead->___wmul
    ___wmul->___awdiv
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _lcdHome->_lcdInst
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _sortBattery->_printf
    _showInterface->_showRunTime
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  548401
                                             31 BANK1     20    20      0
                            ___aldiv
                            ___almod
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  114162
                                            107 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1594
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     309
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        6     6      0  339761
                                            115 BANK0      6     6      0
                            _initRTC
                        _readPastRun
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (2) _showRunTime                                          8     6      2   72244
                                            107 BANK0      8     6      2
                           ___awtoft
                            ___ftdiv
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunStats                                         2     0      2   65436
                                            107 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   65424
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   65393
                                            107 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65362
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   65006
                                             61 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14293
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14014
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4353
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     293
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4    1196
                                             47 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24761
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     847
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22690
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21383
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3734
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3102
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     262
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     587
                                             48 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     753
                                             34 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1464
                                             19 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     33      77       7       46.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     79      7B       5       96.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 04 15:23:59 2017

                       ___altoft@exp 0033                                    _n 00F9  
                  main@cylinderStart 0129                 main@cylinderBackward 012F  
                      ___altoft@sign 0034                          _sortBattery 0E0A  
                     showRunSelect@k 00EB                         ___awdiv@sign 002E  
                ___wmul@multiplicand 0033                          __CFG_BORV$3 000000  
                     showRunTime@run 00EB                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                          __CFG_OSC$HS 000000  
                   _redirectingServo 0153                         ___ftadd@exp1 00AD  
                       ___ftadd@exp2 00AC                  main@cylinderForward 012D  
                       ___ftadd@sign 00AB                                  l215 39AA  
                                l152 1A14                                  l251 3906  
                                l324 2832                                  l173 121C  
                                l254 3912                                  l444 3730  
                                l437 380A                                  l349 38A2  
                                l446 373C                                  l447 3748  
                                l808 0A04                      ??_showInterface 00F3  
                                l759 0996                                  l799 0818  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _n_C 0171                         ___awmod@sign 0028  
                                wreg 000FE8                      showRunTime@time 00F0  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0083  
                       ___ftdiv@sign 0088                         __CFG_WDT$OFF 000000  
                               l1122 1AB8                                 l1124 1AE0  
                               l1133 1BB6                                 l1142 1BE0  
                               l1118 1A7E                                 l1063 2520  
                               l1160 236A                                 l1153 260E  
                               l1161 2392                                 l1242 327A  
                               l1252 34A4                                 l1095 2E6A  
                               l1167 23F8                                 l1192 398C  
                               l6002 336A                                 l6200 251A  
                               l6032 1E96                                 l6024 1DCE  
                               l7000 35B0                                 l6210 32AE  
                               l6212 32BA                                 l6140 23F2  
                               l6132 23CE                                 l6052 1536  
                               l7020 2DD0                                 l6230 2596  
                               l6070 173A                                 l6046 148C  
                               l7102 2FAC                                 l7110 2FD0  
                               l6224 2564                                 l6312 21CE  
                               l6128 23BE                                 l6064 1690  
                               l6056 155C                                 l7008 35D6  
                               l6250 25E4                                 l6330 2260  
                               l6154 2446                                 l6138 23E6  
                               l6082 3A14                                 l6410 004E  
                               l7106 2FC4                                 l7300 2EDC  
                               l6340 2290                                 l6148 2428  
                               l6092 2304                                 l6500 0312  
                               l6420 0088                                 l6404 0022  
                               l7028 317A                                 l7140 0ECA  
                               l6342 22A0                                 l6334 2274  
                               l7070 2956                                 l6414 0058  
                               l7222 12C6                                 l7206 122C  
                               l7312 2F24                                 l7304 2F00  
                               l6280 38E2                                 l6344 22AA  
                               l7064 2928                                 l6360 3238  
                               l6192 24F6                                 l6176 24B8  
                               l6168 2488                                 l6440 0176  
                               l6408 0038                                 l7216 1296  
                               l7208 1254                                 l7250 2B06  
                               l6370 326C                                 l6362 323C  
                               l6098 2330                                 l6610 07D8  
                               l6602 073E                                 l6530 0464  
                               l6450 0198                                 l6434 0124  
                               l7154 0FA0                                 l7260 2B38  
                               l7244 2AEE                                 l7308 2F0E  
                               l6348 22C6                                 l7068 2950  
                               l6292 30CE                                 l6268 3704  
                               l6380 346E                                 l6188 24E6  
                               l6620 081C                                 l6540 04F4  
                               l6532 0494                                 l6524 0428  
                               l6516 03C0                                 l6460 01E6  
                               l6444 0186                                 l6428 00FC  
                               l7084 2F3A                                 l7172 1118  
                               l7164 1088                                 l7324 1768  
                               l5822 1AC6                                 l6358 322C  
                               l6382 3472                                 l6198 250E  
                               l6710 0B48                                 l6630 0892  
                               l6614 07E6                                 l6534 04AA  
                               l6470 0224                                 l6462 01F2  
                               l6446 018C                                 l6438 0160  
                               l7166 10B6                                 l7342 180A  
                               l7256 2B28                                 l7272 2B76  
                               l5816 1A8C                                 l5904 1FA0  
                               l6288 309E                                 l6392 35E2  
                               l6720 0BAC                                 l6704 0B0E  
                               l6616 07FA                                 l6608 07CA  
                               l6560 05E4                                 l6544 051A  
                               l6528 044E                                 l6472 023E  
                               l6464 01F8                                 l6456 01C0  
                               l6448 0192                                 l7096 2F88  
                               l7184 1184                                 l7258 2B34  
                               l6810 37C8                                 l5850 1B6E  
                               l5914 1FDE                                 l6298 30FA  
                               l6386 3496                                 l6378 3462  
                               l6394 35EE                                 l6714 0B78  
                               l6706 0B20                                 l6650 09BE  
                               l6642 0988                                 l6626 0840  
                               l6554 0578                                 l6490 02CC  
                               l6466 0210                                 l6482 026E  
                               l7194 11D0                                 l7354 184E  
                               l7276 2B8C                                 l7268 2B68  
                               l7292 2EBA                                 l5780 2E38  
                               l5772 2DFA                                 l5844 1B46  
                               l5828 1AD6                                 l5908 1FBE  
                               l5940 31AA                                 l6740 0C5C  
                               l6732 0C26                                 l6636 096C  
                               l6580 06A2                                 l6572 062A  
                               l6476 0256                                 l6484 02B2  
                               l7364 1988                                 l6822 37DE  
                               l5782 2E56                                 l5774 2E04  
                               l5846 1B54                                 l5838 1B18  
                               l5918 1FFC                                 l5950 31CC  
                               l5934 319A                                 l6734 0C30  
                               l6726 0BE4                                 l6638 097A  
                               l6590 06DE                                 l6558 05DE  
                               l7296 2ECC                                 l7288 2EA6  
                               l6816 37D2                                 l5784 2E60  
                               l5776 2E22                                 l5768 2DEC  
                               l5864 1C0A                                 l5856 1B9C  
                               l5848 1B62                                 l6752 0C9E  
                               l6728 0BEE                                 l6664 0A26  
                               l6592 06F4                                 l6576 067A  
                               l6920 27A8                                 l6912 2750  
                               l7368 1998                                 l7298 2ED8  
                               l5874 1C58                                 l5858 1BAA  
                               l5890 1F52                                 l6842 3754  
                               l5946 31C0                                 l5962 31F2  
                               l6746 0C78                                 l6690 0AC8  
                               l6674 0A76                                 l6586 06D0  
                               l6770 0DEA                                 l6930 2800  
                               l7378 19B6                                 l6828 37E6  
                               l5884 1F18                                 l5948 31C8  
                               l6756 0CC6                                 l6764 0DBA  
                               l6748 0C84                                 l6676 0A7C  
                               l6668 0A4E                                 l6596 0702  
                               l6924 27D4                                 l6916 277C  
                               l6860 2BF0                                 l6942 2FFC  
                               l5966 3200                                 l5958 31E8  
                               l5990 333E                                 l5982 3324  
                               l6758 0D46                                 l6766 0DCC  
                               l6598 0716                                 l6862 2BF6  
                               l6768 0DD4                                 l6688 0AC2  
                               l6960 36B6                                 l6872 2C18  
                               l6856 2BE2                                 l6880 2C32  
                               l6938 2FE6                                 l5994 3352  
                               l5986 3332                                 l5978 3318  
                               l6874 2C1E                                 l6866 2C04  
                               l6892 2A6A                                 l6948 3060  
                               l5988 333A                                 l6868 2C0A  
                               l5998 335C                                 l6990 357A  
                               l6878 2C2C                                 l6888 2A14  
                               l6896 2A92                                 l6968 36DC  
                               l6978 3540                                 _EEIF 007D0C  
                               STR_1 FFF6                                 STR_2 FF8C  
                               STR_3 FF7B                                 STR_4 FFAC  
                               STR_5 FF9D                                 STR_6 FFC5  
                               STR_7 FFD0                                 STR_8 FFBA  
                               STR_9 FFEE                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                       printf@tmpval 00D7                                 u6111 2546  
                               u6131 2578                                 _PEIE 007F96  
                               u6221 21AA                                 u6240 21F4  
                               u5441 1A2C                                 u5451 1A4A  
                               u7204 27C4                                 _RCEN 007E2B  
                               u6245 21EA                                 u7205 27C0  
                               u6510 0358                                 u7214 27F0  
                               u7215 27EC                                 u5651 1EF4  
                               u7075 3666                                 u6515 034C  
                               u7094 2BC8                                 u5671 1F2E  
                               u7095 2BC2                                 u7184 276C  
                               u7185 2768                                 u6730 0810  
                               u7354 2D66                                 u7194 2798  
                               u5931 22E8                                 u7355 2D5E  
                               u7195 2794                                 u5951 2314  
                               u7807 12F4                                 u7817 39AE  
                               u7827 3816                                 u7747 18F6  
                               u7837 384A                                 u7757 0E46  
                               u7847 39C2                                 u7767 0EFC  
                               u7857 39D4                                 u7777 101A  
                               u7867 34CE                                 u7787 127E  
                               u7877 34DC                                 u7797 12B6  
                               u7887 3502                                 u7897 3510  
                               _RSEN 007E29                                 _n_AA 016F  
                               _n_9V 016D                      showRunStats@run 00EB  
                               _main 1760                                 _curr 0058  
                       ___ftpack@arg 0023                                 _keys FE9F  
                       ___ftpack@exp 0026                                 _time 0052  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 005D  
                    ??_showRunSelect 003B                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                        __CFG_MCLRE$ON 000000  
                       ___ftmul@cntr 0096                         ___param_bank 000000  
                       ___ftmul@sign 0097                         ___fttol@exp1 00BC  
                       ___fttol@lval 00B8                 __end_ofi2_startTimer 37C6  
                   ?_I2C_Master_Init 0030                         ?_readPastRun 0080  
               __end_of_angleToPulse 2194                      __end_of___aldiv 2B9E  
                    __end_of___almod 2F36                                ?_main 0001  
                              _ACKEN 007E2C                                _ACKDT 007E2D  
                    __end_of___awdiv 320A                                _EEADR 000FA9  
                    __end_of___ftadd 1C7E                                STR_10 FFDB  
                              STR_11 FFE5                                STR_20 FF14  
                              STR_12 FEF0                                STR_13 FF59  
                              STR_21 FEDD                                STR_22 FF26  
                              STR_14 FF02                                STR_15 FF48  
                              STR_16 FEB7                                STR_17 FF6A  
                              STR_18 FECA                                STR_19 FF37  
                    __end_of___awmod 3374                      __end_of___ftdiv 2642  
            ??_servoInterruptService 0010                      __end_of___ftneg 399A  
                    __end_of___lldiv 328C                      __end_of___ftmul 203C  
                              _T0CON 000FD5                      ___awdiv@divisor 002B  
                              _T1CON 000FCD                      __end_of___llmod 34B6  
                    __end_of___ftsub 372E                      __end_of___fttol 22D8  
                              _T3CON 000FB1                                i2l187 28E0  
                              i2l444 377C                                i2l188 28AC  
                              i2l189 28BC                                i2l446 3788  
                              i2l447 3794                      ___awdiv@counter 002D  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR3H 000FB3  
                              _TMR1L 000FCE                                _TMR3L 000FB2  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _PORTD 000F83  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                    __end_of_lcdHome 3A7C                         ___lltoft@exp 0033  
                      _conveyorServo 0143                      __end_of_lcdInst 39DE  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 3856                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 002E                                _angle 0137  
                    __end_of_initRTC 3A64                      __end_of_dpowers FE31  
                              _count 016B                                _scale 134A  
                    __end_of_isdigit 3A1C                        ___ftpack@sign 0027  
                              _pulse 0157                                _putch 399A  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_service 291C                                status 000FD8  
                 __size_ofi2___awmod 0070                       __CFG_PBADEN$ON 000000  
               __end_of_digitalWrite 2C66                      __initialization 33E4  
                       __end_of_main 1A16                         __end_of_keys FEB0  
                             ??_main 011F                        ___fttol@sign1 00B7  
                      __activetblptr 000002                 __size_of_digitalRead 00EA  
               __size_of__tdiv_to_l_ 0132                         _stoppingTime 004C  
                    i2digitalWrite@p 000E                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                   __end_of___altoft 3304                     ___llmod@dividend 0030  
                             ?_scale 0098                               _ADRESH 000FC4  
                             _EEADRH 000FAA                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _EECON1 000FA6  
                             _EECON2 000FA7        keyPressedInterruptService@key 0001  
                   ___awdiv@dividend 0029                     __end_of___awtoft 3906  
                             ?_putch 0001                     __end_of___ftpack 2E8A  
                   __end_of___lltoft 3638                               _INT0IE 007F94  
                             _INT0IF 007F91                               _INT1IE 007F83  
                             _INT1IF 007F80                         sortBattery@V 0116  
                       sortBattery@i 0119                               i2l5102 33CC  
                             i2l5030 2CAA                               i2l5040 2CCC  
                             i2l5106 33DA                               i2l5042 2CD2  
                             i2l5034 2CB8                               i2l5052 2CF4  
                             i2l5036 2CBE                               i2l5046 2CE0  
                             i2l5054 2CFA                               i2l5048 2CE6  
                             i2l5090 33A2                               i2l5082 3388  
                             i2l5092 33AA                               i2l5068 37A0  
                             i2l5094 33AE                               i2l5086 3394  
                             i2l5328 274A                               i2l5098 33C2  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR3IE 007D01                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9                     __end_of_lcdClear 3A74  
                  _angleToPulse$1390 00CD                       __CFG_XINST$OFF 000000  
                   __end_of__powers_ FE7F                               ___ftge 306E  
                          ??___aldiv 002B                            ??___almod 0039  
                             ___wmul 392C                            ??___awdiv 002D  
                          ??___ftadd 00A8                       __CFG_STVREN$ON 000000  
                          ??___awmod 0027                            ??___ftdiv 0080  
                          ??___ftneg 0026                            ??___lldiv 002B  
                          ??___ftmul 008F                            ??___llmod 0038  
                          ??___ftsub 003B                            ??___fttol 00B2  
                             _fround 1C7E                               clear_0 342A  
                             clear_1 343C                     ___awdiv@quotient 002F  
                    ___awmod@divisor 0025                            ??_lcdHome 0027  
                    ___awmod@counter 0027                               _servos 015F  
                          ??_lcdInst 0025                               _printf 0012  
                   __end_of_pinSetup 3896                     __end_of_setAngle 2AD2  
                  analogRead@channel 0023                ___ftmul@f3_as_product 0093  
                          ??_initLCD 0027                            ??_initRTC 0038  
                       __pdataCOMRAM 003B                            ??_isdigit 0023  
                    readPastRun@data 0082                    __end_ofi2___awmod 33E4  
                      setAngle@angle 00D6                         __mediumconst FE08  
                       ?_showRunMenu 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_showRunTime 00EB                        setAngle@motor 00D4  
                          ??_service 0014                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 3442  
                         ___altoft@c 002B                           ___ftadd@f1 00A2  
                         ___ftadd@f2 00A5                           ___ftge@ff1 002F  
                         ___ftge@ff2 0032                        ___rparam_used 000001  
                         ___ftdiv@f1 0035                           ___ftdiv@f2 0038  
                         ___ftdiv@f3 0084                           ___ftneg@f1 0023  
                         ___awtoft@c 002B                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 0089                           ___ftmul@f2 008C  
                         ___ftsub@f1 00AE                           ___ftsub@f2 00B1  
                         ___fttol@f1 00AE                 __end_of_happynewyear FEB7  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 0158  
                       __pidataBANK1 3952                           ___lltoft@c 002B  
                      _cylinderMotor 0147                        __end_of_scale 1760  
                       ?_sortBattery 0001                        __end_of_putch 39BC  
                 __size_of_lcdNibble 0066                           __div_to_l_ 240A  
                  eepromRead@address 0037                 __size_of_readPastRun 0092  
                    __div_to_l_@exp1 002E                      __div_to_l_@cntr 002D  
                            ??_scale 003B                      __div_to_l_@quot 0029  
                            ??_putch 0027                         i2_startTimer 377A  
                         __pbssBANK0 00F9                           __pbssBANK1 0157  
                       _angleToPulse 203C                __size_of_digitalWrite 00C8  
                 __size_of_initTimer 004A                   __size_of_initServo 00E2  
                         _analogRead 3896                        __div_to_l_@f1 0023  
                      __div_to_l_@f2 0026                              ?___ftge 002F  
                            ?___wmul 0031                sortBattery@resolution 010C  
                   _sortBattery$1389 0100                            ?___altoft 002B  
                            ?_fround 0098                           _lcdNewline 3A64  
                          ?___awtoft 002B                            ?___ftpack 0023  
                            ?_printf 00BD                            ?___lltoft 002B  
                         _eepromRead 3A1C       __size_of_servoInterruptService 010C  
      __end_of_servoInterruptService 274E                __end_of_showInterface 2FDC  
                  i2startTimer@timer 0007                            ?_lcdClear 0001  
                   angleToPulse@a000 00D0                     angleToPulse@a180 00C9  
                       _digitalWrite 2B9E                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
            __size_ofi2_digitalWrite 00C8                              _V_LIM_C 0041  
                main@lastBatteryTime 0131                            ?_pinSetup 0001  
                          ?_setAngle 00D4                    __end_of_lcdNibble 351C  
                  __end_of__npowers_ FE58                              __Hparam 0000  
                         _scale$1393 009B                __end_of_showRunSelect 3580  
                            __Lparam 0000                         readPastRun@i 0090  
                            ___aldiv 2AD2                              ___almod 2E8A  
                    __size_of___ftge 0090                              ___awdiv 3186  
                            ___ftadd 1A16                              ___awmod 3304  
                         _readKeypad 3906                              ___ftdiv 2532  
                            ___ftneg 3976                              ___lldiv 320A  
                    __size_of___wmul 0026                              ___ftmul 1EDE  
                            ___llmod 3450                              ___ftsub 36E2  
                            ___fttol 2194                              _n_OTHER 0173  
                         ??___altoft 002F                              __pcinit 33E4  
                         ??___awtoft 002E                           ??___ftpack 0028  
                    __size_of_fround 0260                              __ramtop 1000  
                            _lcdHome 3A74                              _lcdInst 39BC  
                         ??___lltoft 002F                              __ptext0 1760  
                            __ptext1 0E0A                              __ptext2 2B9E  
                            __ptext3 274E                              __ptext4 3896  
                            __ptext5 2F36                              __ptext6 2D2E  
                            __ptext7 30FE                              __ptext8 351C  
                            __ptext9 3580                      __size_of_printf 0DF8  
                            _padPin1 014B                              _padPin2 014F  
                            _padPin3 0167                        startTimer@val 0025  
                            _initLCD 3810                    __end_of_hexpowers FE9F  
                        ?__div_to_l_ 0023                              _lastKey 005C  
                            _initRTC 3A4E                    __end_of_initTimer 3810  
                  __end_of_initServo 29FE                              _dpowers FE09  
                            _isdigit 39FE                     ___awmod@dividend 0023  
                   ___aldiv@dividend 0023             __size_of_I2C_Master_Init 005A  
                         ??_lcdClear 0027                        ?_showMainMenu 0001  
                            _service 0008                 __size_of_showRunMenu 005C  
                     __pintcode_body 2838                 __size_of_showRunTime 00AE  
               end_of_initialization 3442                        __Lmediumconst FE08  
                            int_func 2838                       digitalRead@pin 0023  
                        ?_analogRead 0023                           ??_pinSetup 0023  
                         ??_setAngle 00D8                      ___lldiv@divisor 0027  
                    ___lldiv@counter 002F                       setAngle@period 00DA  
                      ?_showRunStats 00EB                              printf@c 00EA  
                            printf@f 00BD                     ___aldiv@quotient 002D  
                   I2C_Master_Init@c 0030                              postdec1 000FE5  
                            postdec2 000FDD                      _batteryDetected 0056  
                            postinc0 000FEE                              postinc2 000FDE  
                     __tdiv_to_l_@f1 0023                       __tdiv_to_l_@f2 0026  
                      ??_digitalRead 0025                          ?_lcdNewline 0001  
                      ??__tdiv_to_l_ 0029                            _PORTBbits 000F81  
               __size_of_sortBattery 0540                     showInterface@key 00F8  
                   showInterface@run 00F6                          ?_eepromRead 0037  
                     ??_showMainMenu 003B         ??_keyPressedInterruptService 0001  
                _redirectAngle_OTHER 004A                         _happynewyear FEB0  
                 angleToPulse@offset 00C5                   sortBattery@V_float 0102  
                          i2___awmod 3374                           _startTimer 372E  
                        ___ftdiv@exp 0087                          printf@width 00E4  
                __size_of__div_to_l_ 0128                       ??_showRunStats 003B  
                        ___ftmul@exp 0092                          ?_readKeypad 0001  
                     __end_of___ftge 30FE                       __end_of___wmul 3952  
                      __pidataCOMRAM 3A36  __size_of_keyPressedInterruptService 0020  
                     __end_of_fround 1EDE                       __end_of_printf 0E0A  
                __size_of_analogRead 0038                  start_initialization 33E4  
                __end_of_digitalRead 2838                  __end_of__tdiv_to_l_ 240A  
                     initServo@angle 00E0                       initTimer@timer 0023  
                     initServo@motor 00DE                           ?i2___awmod 0001  
                     i2_digitalWrite 2C66                    ??_I2C_Master_Init 0034  
                __size_of_lcdNewline 0008                      ___llmod@divisor 0034  
                    ___llmod@counter 0038                  __size_of_eepromRead 001A  
                         initServo@i 00E6                             ??___ftge 0035  
                           ??___wmul 0035                          __pdataBANK1 0133  
                   __CFG_LPT1OSC$OFF 000000                             ??_fround 003B  
                      ??_readPastRun 003B                       readPastRun@run 0080  
                           ??_printf 00C7                    __size_of___altoft 0078  
                         fround@prec 00A1                    __size_of___awtoft 0038  
                  __size_of___ftpack 00AE                    __size_of___lltoft 005C  
                        __pbssCOMRAM 0052                        __pcstackBANK0 0080  
                      __pcstackBANK1 0100               __end_ofi2_digitalWrite 2D2E  
             sortBattery@targetAngle 0114                         _isdigit$1019 0024  
                        ?_startTimer 0023                    __size_of_lcdClear 0008  
                __size_of_readKeypad 0026                    i2digitalWrite@pin 0007  
                  i2digitalWrite@val 0009                    __CFG_CCP2MX$PORTC 000000  
                  __size_of_pinSetup 0040                 __end_of_showMainMenu 36E2  
                  __size_of_setAngle 00D4                            __pintcode 0008  
                      __pmediumconst FE08                            _lcdNibble 34B6  
                           ?___aldiv 0023                             ?___almod 0031  
                           ?___awdiv 0029                             ?___ftadd 00A2  
                           ?___awmod 0023                             ?___ftdiv 0035  
                           ?___ftneg 0023                             ?___lldiv 0023  
                           ?___ftmul 0089                             ?___llmod 0030  
                           ?___ftsub 00AE                            __npowers_ FE31  
                           ?___fttol 00AE                          _digitalRead 274E  
                   ___almod@dividend 0031                             ?_lcdHome 0001  
                           ?_lcdInst 0001                          __tdiv_to_l_ 22D8  
                       ??__div_to_l_ 0029                             ?_initLCD 0001  
                           ?_initRTC 0001                      startTimer@timer 0023  
                           ?_isdigit 0001   __end_of_keyPressedInterruptService 39FE  
         _keyPressedInterruptService 39DE                  __end_of_readPastRun 306E  
               __end_of_showRunStats 3186                             ?_service 0001  
                          _hexpowers FE7F                            _initTimer 37C6  
                          _initServo 291C                      ?i2_digitalWrite 0007  
              _servoInterruptService 2642                          ??i2___awmod 0005  
                     __size_of_scale 0416                       __size_of_putch 0022  
                           _AA_float 013F                      ___aldiv@divisor 0027  
                    ___aldiv@counter 002B                       sortBattery@Vcc 0109  
                     ___wmul@product 0035                             _LATDbits 000F8C  
                       ??_analogRead 0027                   __end_of__div_to_l_ 2532  
                           i2u481_44 2C90                             i2u481_45 2C8A  
             __size_of_showInterface 00A6                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001                       _padAngle_CLOSE 0044  
                          _terminate 005A                        digitalWrite@p 002A  
                         service@key 0022                         ??_lcdNewline 0027  
                __size_of_startTimer 004C                    angleToPulse@angle 00BD  
                    main@cylinderDur 012B                    ___wmul@multiplier 0031  
                      lcdNibble@data 0024                         ??_eepromRead 003B  
                         printf@flag 00E6                        lcdNibble@temp 0023  
                         printf@fval 00DD                           printf@prec 00E8  
                      ??_showRunMenu 003B                        ??_showRunTime 00ED  
                 __end_of_analogRead 38CE                             _V_LIM_AA 003E  
                           _V_LIM_9V 003B               __size_of_showRunSelect 0064  
                         ?_initTimer 0023                           ?_initServo 00DE  
                  sortBattery@signal 0107             sortBattery@pos_v_counter 0105  
                          copy_data0 33F8                            copy_data1 3418  
                 i2___awmod@dividend 0001                   __end_of_lcdNewline 3A6C  
                      readKeypad@key 0023                             __Hrparam 0000  
                           __Lrparam 0000                   __end_of_eepromRead 3A36  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0023  
                      ??_sortBattery 00EB                     __size_of___aldiv 00CC  
                   __size_of___almod 00AC                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0110                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 328C  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                           ___awtoft 38CE                             ___ftpack 2DDC  
                        _readPastRun 2FDC                          _cylinderDir 0133  
                        _fround$1391 009E                          _fround$1392 009B  
                           ___lltoft 35DC                     __size_of_lcdHome 0008  
                   __size_of_lcdInst 0022                            setAngle@i 00DC  
                    _I2C_Master_Init 3638                     __size_of_initLCD 0046  
                   __size_of_initRTC 0016                     __size_of_isdigit 001E  
             ?_servoInterruptService 0001                        _showInterface 2F36  
                           _lcdClear 3A6C                             __ptext10 3692  
                           __ptext11 3906                             __ptext20 22D8  
                           __ptext12 0012                             __ptext21 240A  
                           __ptext13 134A                             __ptext30 392C  
                           __ptext22 35DC                             __ptext14 399A  
                           __ptext31 3A4E                             __ptext23 3450  
                           __ptext15 3A64                             __ptext40 2194  
                           __ptext32 3638                             __ptext24 36E2  
                           __ptext16 39FE                             __ptext41 1EDE  
                           __ptext33 320A                             __ptext25 3976  
                           __ptext17 1C7E                             __ptext50 34B6  
                           __ptext42 2532                             __ptext34 3856  
                           __ptext26 306E                             __ptext18 3304  
                           __ptext51 2E8A                             __ptext43 1A16  
                           __ptext35 3A74                             __ptext27 3A6C  
                           __ptext19 3186                             __ptext52 2AD2  
                           __ptext44 38CE                             __ptext36 291C  
                           __ptext28 2FDC                             __ptext45 328C  
                           __ptext37 372E                             __ptext29 3A1C  
                           __ptext54 2642                             __ptext46 2DDC  
                           __ptext38 29FE                             __ptext55 377A  
                           __ptext47 37C6                             __ptext39 203C  
                           __ptext56 2C66                             __ptext48 3810  
                           __ptext57 3374                             __ptext49 39BC  
                           __ptext58 39DE                             __powers_ FE58  
                   __size_of_service 2914                      i2startTimer@val 0009  
                    ___almod@divisor 0035                        ?i2_startTimer 0007  
                           _padServo 004E                      ___almod@counter 0039  
                __end_of_showRunMenu 35DC                   __end_of_readKeypad 392C  
                __end_of_showRunTime 2DDC                        ?_angleToPulse 00BD  
                      __size_of_main 02B6                __size_of_showMainMenu 0050  
                           _pinSetup 3856                             _setAngle 29FE  
                      _showRunSelect 351C                             _prevTime 0175  
                   sortBattery@V_223 011C                          ??_lcdNibble 0023  
                     showInterface@n 00F4                        _padAngle_OPEN 0139  
                           int$flags 005D                     sortBattery@i_228 0112  
                   sortBattery@V_max 010F                            printf@idx 00D0  
                          printf@len 00D3                            printf@exp 00DB  
                          printf@val 00E0                        showMainMenu@k 00EB  
              __size_of_showRunStats 0088                    i2___awmod@divisor 0003  
                          putch@data 0027                    i2___awmod@counter 0005  
                __end_of_sortBattery 134A                           _INTCONbits 000FF2  
                     ?_showInterface 0001                        ?_digitalWrite 0023  
                        ??_initTimer 0025                          ??_initServo 00E2  
                           isdigit@c 0025                         _showMainMenu 3692  
                           scale@scl 009E                       ??i2_startTimer 000D  
                       ??_startTimer 0029                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0031                     __tdiv_to_l_@cntr 0030  
                     ??_angleToPulse 00C1                     __tdiv_to_l_@quot 002C  
                   ___lldiv@dividend 0023                       ?_showRunSelect 0001  
                       _showRunStats 30FE                     _redirectAngle_AA 0048  
                   _redirectAngle_9V 013B                             printf@ap 00D5  
                           printf@cp 00D1              __end_of_I2C_Master_Init 3692  
                        lcdInst@data 0026                         ?_digitalRead 0023  
                       ?__tdiv_to_l_ 0023                   __end_of_startTimer 377A  
                        _printf$1394 00CD                     ??i2_digitalWrite 000B  
                   ___lldiv@quotient 002B                       ??_digitalWrite 0027  
        ?_keyPressedInterruptService 0001                         ___aldiv@sign 002C  
                        _showRunMenu 3580                          _showRunTime 2D2E  
                    _redirectAngle_C 013D                     _padAngle_NEUTRAL 0046  
                    digitalWrite@pin 0023                      digitalWrite@val 0025  
                       ___almod@sign 003A                         showRunMenu@k 00EC  
                     showRunMenu@key 00EB  
