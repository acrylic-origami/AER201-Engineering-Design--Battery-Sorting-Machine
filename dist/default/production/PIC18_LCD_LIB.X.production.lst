

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 12 14:42:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 1.40
    65                           ; Generated 01/12/2016 GMT
    66                           ; 
    67                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F4620 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	idataBANK0
   100  00291C                     __pidataBANK0:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _angle
   104  00291C  F159               	dw	61785
   105  00291E  0000               	dw	0
   106                           
   107                           ;initializer for _a1
   108  002920  005A               	dw	90
   109                           
   110                           ;initializer for _a2
   111  002922  00B4               	dw	180
   112                           
   113                           	psect	mediumconst
   114  00FE88                     __pmediumconst:
   115                           	opt stack 0
   116  00FE88  00                 	db	0
   117  00FE89                     _dpowers:
   118                           	opt stack 0
   119  00FE89  0001               	dw	1
   120  00FE8B  0000               	dw	0
   121  00FE8D  000A               	dw	10
   122  00FE8F  0000               	dw	0
   123  00FE91  0064               	dw	100
   124  00FE93  0000               	dw	0
   125  00FE95  03E8               	dw	1000
   126  00FE97  0000               	dw	0
   127  00FE99  2710               	dw	10000
   128  00FE9B  0000               	dw	0
   129  00FE9D  86A0               	dw	34464
   130  00FE9F  0001               	dw	1
   131  00FEA1  4240               	dw	16960
   132  00FEA3  000F               	dw	15
   133  00FEA5  9680               	dw	38528
   134  00FEA7  0098               	dw	152
   135  00FEA9  E100               	dw	57600
   136  00FEAB  05F5               	dw	1525
   137  00FEAD  CA00               	dw	51712
   138  00FEAF  3B9A               	dw	15258
   139  00FEB1                     __end_of_dpowers:
   140                           	opt stack 0
   141  00FEB1                     _hexpowers:
   142                           	opt stack 0
   143  00FEB1  0001               	dw	1
   144  00FEB3  0000               	dw	0
   145  00FEB5  0010               	dw	16
   146  00FEB7  0000               	dw	0
   147  00FEB9  0100               	dw	256
   148  00FEBB  0000               	dw	0
   149  00FEBD  1000               	dw	4096
   150  00FEBF  0000               	dw	0
   151  00FEC1  0000               	dw	0
   152  00FEC3  0001               	dw	1
   153  00FEC5  0000               	dw	0
   154  00FEC7  0010               	dw	16
   155  00FEC9  0000               	dw	0
   156  00FECB  0100               	dw	256
   157  00FECD  0000               	dw	0
   158  00FECF  1000               	dw	4096
   159  00FED1                     __end_of_hexpowers:
   160                           	opt stack 0
   161  00FED1                     _keys:
   162                           	opt stack 0
   163  00FED1  31                 	db	49
   164  00FED2  32                 	db	50
   165  00FED3  33                 	db	51
   166  00FED4  41                 	db	65
   167  00FED5  34                 	db	52
   168  00FED6  35                 	db	53
   169  00FED7  36                 	db	54
   170  00FED8  42                 	db	66
   171  00FED9  37                 	db	55
   172  00FEDA  38                 	db	56
   173  00FEDB  39                 	db	57
   174  00FEDC  43                 	db	67
   175  00FEDD  2A                 	db	42
   176  00FEDE  30                 	db	48
   177  00FEDF  23                 	db	35
   178  00FEE0  44                 	db	68
   179  00FEE1  00                 	db	0
   180  00FEE2                     __end_of_keys:
   181                           	opt stack 0
   182  00FEE2                     _happynewyear:
   183                           	opt stack 0
   184  00FEE2  45                 	db	69
   185  00FEE3  59                 	db	89
   186  00FEE4  23                 	db	35
   187  00FEE5  07                 	db	7
   188  00FEE6  31                 	db	49
   189  00FEE7  12                 	db	18
   190  00FEE8  16                 	db	22
   191  00FEE9                     __end_of_happynewyear:
   192                           	opt stack 0
   193  0000                     _ADCON0	set	4034
   194  0000                     _ADCON1	set	4033
   195  0000                     _ADCON2	set	4032
   196  0000                     _ADRESH	set	4036
   197  0000                     _ADRESL	set	4035
   198  0000                     _EEADR	set	4009
   199  0000                     _EEADRH	set	4010
   200  0000                     _EECON1	set	4006
   201  0000                     _EECON2	set	4007
   202  0000                     _EEDATA	set	4008
   203  0000                     _INTCONbits	set	4082
   204  0000                     _LATA	set	3977
   205  0000                     _LATB	set	3978
   206  0000                     _LATC	set	3979
   207  0000                     _LATD	set	3980
   208  0000                     _LATDbits	set	3980
   209  0000                     _LATE	set	3981
   210  0000                     _PORTA	set	3968
   211  0000                     _PORTB	set	3969
   212  0000                     _PORTBbits	set	3969
   213  0000                     _PORTC	set	3970
   214  0000                     _PORTD	set	3971
   215  0000                     _SSPADD	set	4040
   216  0000                     _SSPBUF	set	4041
   217  0000                     _SSPCON1	set	4038
   218  0000                     _SSPCON2	set	4037
   219  0000                     _SSPSTAT	set	4039
   220  0000                     _T0CON	set	4053
   221  0000                     _T1CON	set	4045
   222  0000                     _T3CON	set	4017
   223  0000                     _TMR0H	set	4055
   224  0000                     _TMR0L	set	4054
   225  0000                     _TMR1H	set	4047
   226  0000                     _TMR1L	set	4046
   227  0000                     _TMR3H	set	4019
   228  0000                     _TMR3L	set	4018
   229  0000                     _TRISA	set	3986
   230  0000                     _TRISB	set	3987
   231  0000                     _TRISC	set	3988
   232  0000                     _TRISD	set	3989
   233  0000                     _TRISE	set	3990
   234  0000                     _ACKDT	set	32301
   235  0000                     _ACKEN	set	32300
   236  0000                     _EEIF	set	32012
   237  0000                     _INT1IF	set	32640
   238  0000                     _PEIE	set	32662
   239  0000                     _PEN	set	32298
   240  0000                     _RCEN	set	32299
   241  0000                     _RSEN	set	32297
   242  0000                     _SEN	set	32296
   243  0000                     _TMR0IE	set	32661
   244  0000                     _TMR0IF	set	32658
   245  0000                     _TMR1IE	set	31976
   246  0000                     _TMR3IE	set	32001
   247  0000                     _TRISC3	set	31907
   248  0000                     _TRISC4	set	31908
   249  00FEE9  25                 	db	37
   250  00FEEA  63                 	db	99	;'c'
   251  00FEEB  29                 	db	41
   252  00FEEC  20                 	db	32
   253  00FEED  74                 	db	116	;'t'
   254  00FEEE  69                 	db	105	;'i'
   255  00FEEF  6D                 	db	109	;'m'
   256  00FEF0  65                 	db	101	;'e'
   257  00FEF1  20                 	db	32
   258  00FEF2  20                 	db	32
   259  00FEF3  3C                 	db	60	;'<'
   260  00FEF4  41                 	db	65	;'A'
   261  00FEF5  20                 	db	32
   262  00FEF6  20                 	db	32
   263  00FEF7  20                 	db	32
   264  00FEF8  20                 	db	32
   265  00FEF9  20                 	db	32
   266  00FEFA  0A                 	db	10
   267  00FEFB  00                 	db	0
   268  00FEFC  73                 	db	115	;'s'
   269  00FEFD  74                 	db	116	;'t'
   270  00FEFE  61                 	db	97	;'a'
   271  00FEFF  72                 	db	114	;'r'
   272  00FF00  74                 	db	116	;'t'
   273  00FF01  20                 	db	32
   274  00FF02  20                 	db	32
   275  00FF03  20                 	db	32
   276  00FF04  3C                 	db	60	;'<'
   277  00FF05  42                 	db	66	;'B'
   278  00FF06  20                 	db	32
   279  00FF07  20                 	db	32
   280  00FF08  20                 	db	32
   281  00FF09  20                 	db	32
   282  00FF0A  20                 	db	32
   283  00FF0B  20                 	db	32
   284  00FF0C  0A                 	db	10
   285  00FF0D  00                 	db	0
   286  00FF0E  20                 	db	32
   287  00FF0F  20                 	db	32
   288  00FF10  68                 	db	104	;'h'
   289  00FF11  68                 	db	104	;'h'
   290  00FF12  3A                 	db	58	;':'
   291  00FF13  6D                 	db	109	;'m'
   292  00FF14  6D                 	db	109	;'m'
   293  00FF15  3A                 	db	58	;':'
   294  00FF16  73                 	db	115	;'s'
   295  00FF17  73                 	db	115	;'s'
   296  00FF18  20                 	db	32
   297  00FF19  20                 	db	32
   298  00FF1A  20                 	db	32
   299  00FF1B  20                 	db	32
   300  00FF1C  20                 	db	32
   301  00FF1D  20                 	db	32
   302  00FF1E  0A                 	db	10
   303  00FF1F  00                 	db	0
   304  00FF20  73                 	db	115	;'s'
   305  00FF21  65                 	db	101	;'e'
   306  00FF22  6C                 	db	108	;'l'
   307  00FF23  65                 	db	101	;'e'
   308  00FF24  63                 	db	99	;'c'
   309  00FF25  74                 	db	116	;'t'
   310  00FF26  20                 	db	32
   311  00FF27  72                 	db	114	;'r'
   312  00FF28  75                 	db	117	;'u'
   313  00FF29  6E                 	db	110	;'n'
   314  00FF2A  3A                 	db	58	;':'
   315  00FF2B  20                 	db	32
   316  00FF2C  20                 	db	32
   317  00FF2D  20                 	db	32
   318  00FF2E  20                 	db	32
   319  00FF2F  20                 	db	32
   320  00FF30  0A                 	db	10
   321  00FF31  00                 	db	0
   322  00FF32  74                 	db	116	;'t'
   323  00FF33  69                 	db	105	;'i'
   324  00FF34  6D                 	db	109	;'m'
   325  00FF35  65                 	db	101	;'e'
   326  00FF36  3A                 	db	58	;':'
   327  00FF37  20                 	db	32
   328  00FF38  6E                 	db	110	;'n'
   329  00FF39  6E                 	db	110	;'n'
   330  00FF3A  6E                 	db	110	;'n'
   331  00FF3B  20                 	db	32
   332  00FF3C  73                 	db	115	;'s'
   333  00FF3D  65                 	db	101	;'e'
   334  00FF3E  63                 	db	99	;'c'
   335  00FF3F  20                 	db	32
   336  00FF40  20                 	db	32
   337  00FF41  20                 	db	32
   338  00FF42  0A                 	db	10
   339  00FF43  00                 	db	0
   340  00FF44  5B                 	db	91	;'['
   341  00FF45  41                 	db	65	;'A'
   342  00FF46  41                 	db	65	;'A'
   343  00FF47  2C                 	db	44
   344  00FF48  39                 	db	57	;'9'
   345  00FF49  56                 	db	86	;'V'
   346  00FF4A  2C                 	db	44
   347  00FF4B  43                 	db	67	;'C'
   348  00FF4C  2C                 	db	44
   349  00FF4D  6F                 	db	111	;'o'
   350  00FF4E  74                 	db	116	;'t'
   351  00FF4F  68                 	db	104	;'h'
   352  00FF50  65                 	db	101	;'e'
   353  00FF51  72                 	db	114	;'r'
   354  00FF52  5D                 	db	93	;']'
   355  00FF53  20                 	db	32
   356  00FF54  0A                 	db	10
   357  00FF55  00                 	db	0
   358  00FF56                     STR_17:
   359  00FF56  30                 	db	48	;'0'
   360  00FF57  31                 	db	49	;'1'
   361  00FF58  32                 	db	50	;'2'
   362  00FF59  33                 	db	51	;'3'
   363  00FF5A  34                 	db	52	;'4'
   364  00FF5B  35                 	db	53	;'5'
   365  00FF5C  36                 	db	54	;'6'
   366  00FF5D  37                 	db	55	;'7'
   367  00FF5E  38                 	db	56	;'8'
   368  00FF5F  39                 	db	57	;'9'
   369  00FF60  61                 	db	97	;'a'
   370  00FF61  62                 	db	98	;'b'
   371  00FF62  63                 	db	99	;'c'
   372  00FF63  64                 	db	100	;'d'
   373  00FF64  65                 	db	101	;'e'
   374  00FF65  66                 	db	102	;'f'
   375  00FF66  00                 	db	0
   376  00FF67  20                 	db	32
   377  00FF68  20                 	db	32
   378  00FF69  20                 	db	32
   379  00FF6A  20                 	db	32
   380  00FF6B  20                 	db	32
   381  00FF6C  20                 	db	32
   382  00FF6D  20                 	db	32
   383  00FF6E  20                 	db	32
   384  00FF6F  20                 	db	32
   385  00FF70  20                 	db	32
   386  00FF71  20                 	db	32
   387  00FF72  20                 	db	32
   388  00FF73  20                 	db	32
   389  00FF74  20                 	db	32
   390  00FF75  2A                 	db	42
   391  00FF76  3E                 	db	62	;'>'
   392  00FF77  00                 	db	0
   393  00FF78  5B                 	db	91	;'['
   394  00FF79  31                 	db	49	;'1'
   395  00FF7A  2C                 	db	44
   396  00FF7B  32                 	db	50	;'2'
   397  00FF7C  2C                 	db	44
   398  00FF7D  33                 	db	51	;'3'
   399  00FF7E  2C                 	db	44
   400  00FF7F  34                 	db	52	;'4'
   401  00FF80  5D                 	db	93	;']'
   402  00FF81  20                 	db	32
   403  00FF82  20                 	db	32
   404  00FF83  20                 	db	32
   405  00FF84  20                 	db	32
   406  00FF85  20                 	db	32
   407  00FF86  2A                 	db	42
   408  00FF87  3E                 	db	62	;'>'
   409  00FF88  00                 	db	0
   410  00FF89  68                 	db	104	;'h'
   411  00FF8A  69                 	db	105	;'i'
   412  00FF8B  73                 	db	115	;'s'
   413  00FF8C  74                 	db	116	;'t'
   414  00FF8D  6F                 	db	111	;'o'
   415  00FF8E  72                 	db	114	;'r'
   416  00FF8F  79                 	db	121	;'y'
   417  00FF90  20                 	db	32
   418  00FF91  3C                 	db	60	;'<'
   419  00FF92  43                 	db	67	;'C'
   420  00FF93  20                 	db	32
   421  00FF94  20                 	db	32
   422  00FF95  20                 	db	32
   423  00FF96  20                 	db	32
   424  00FF97  2A                 	db	42
   425  00FF98  3E                 	db	62	;'>'
   426  00FF99  00                 	db	0
   427  00FF9A  20                 	db	32
   428  00FF9B  20                 	db	32
   429  00FF9C  20                 	db	32
   430  00FF9D  73                 	db	115	;'s'
   431  00FF9E  74                 	db	116	;'t'
   432  00FF9F  61                 	db	97	;'a'
   433  00FFA0  74                 	db	116	;'t'
   434  00FFA1  73                 	db	115	;'s'
   435  00FFA2  20                 	db	32
   436  00FFA3  3C                 	db	60	;'<'
   437  00FFA4  42                 	db	66	;'B'
   438  00FFA5  20                 	db	32
   439  00FFA6  20                 	db	32
   440  00FFA7  20                 	db	32
   441  00FFA8  2A                 	db	42
   442  00FFA9  3E                 	db	62	;'>'
   443  00FFAA  00                 	db	0
   444  00FFAB  5B                 	db	91	;'['
   445  00FFAC  6E                 	db	110	;'n'
   446  00FFAD  6E                 	db	110	;'n'
   447  00FFAE  2C                 	db	44
   448  00FFAF  6E                 	db	110	;'n'
   449  00FFB0  2C                 	db	44
   450  00FFB1  6E                 	db	110	;'n'
   451  00FFB2  2C                 	db	44
   452  00FFB3  6E                 	db	110	;'n'
   453  00FFB4  6E                 	db	110	;'n'
   454  00FFB5  5D                 	db	93	;']'
   455  00FFB6  20                 	db	32
   456  00FFB7  20                 	db	32
   457  00FFB8  20                 	db	32
   458  00FFB9  2A                 	db	42
   459  00FFBA  3E                 	db	62	;'>'
   460  00FFBB  00                 	db	0
   461  00FFBC  20                 	db	32
   462  00FFBD  20                 	db	32
   463  00FFBE  6D                 	db	109	;'m'
   464  00FFBF  6D                 	db	109	;'m'
   465  00FFC0  3A                 	db	58	;':'
   466  00FFC1  64                 	db	100	;'d'
   467  00FFC2  64                 	db	100	;'d'
   468  00FFC3  3A                 	db	58	;':'
   469  00FFC4  79                 	db	121	;'y'
   470  00FFC5  79                 	db	121	;'y'
   471  00FFC6  20                 	db	32
   472  00FFC7  20                 	db	32
   473  00FFC8  20                 	db	32
   474  00FFC9  20                 	db	32
   475  00FFCA  41                 	db	65	;'A'
   476  00FFCB  3E                 	db	62	;'>'
   477  00FFCC  00                 	db	0
   478  00FFCD                     STR_3:
   479  00FFCD  25                 	db	37
   480  00FFCE  6C                 	db	108	;'l'
   481  00FFCF  64                 	db	100	;'d'
   482  00FFD0  20                 	db	32
   483  00FFD1  25                 	db	37
   484  00FFD2  6C                 	db	108	;'l'
   485  00FFD3  64                 	db	100	;'d'
   486  00FFD4  20                 	db	32
   487  00FFD5  25                 	db	37
   488  00FFD6  6C                 	db	108	;'l'
   489  00FFD7  64                 	db	100	;'d'
   490  00FFD8  20                 	db	32
   491  00FFD9  25                 	db	37
   492  00FFDA  6C                 	db	108	;'l'
   493  00FFDB  64                 	db	100	;'d'
   494  00FFDC  0A                 	db	10
   495  00FFDD  00                 	db	0
   496  00FFDE                     STR_4:
   497  00FFDE  25                 	db	37
   498  00FFDF  6C                 	db	108	;'l'
   499  00FFE0  64                 	db	100	;'d'
   500  00FFE1  20                 	db	32
   501  00FFE2  25                 	db	37
   502  00FFE3  6C                 	db	108	;'l'
   503  00FFE4  64                 	db	100	;'d'
   504  00FFE5  20                 	db	32
   505  00FFE6  25                 	db	37
   506  00FFE7  6C                 	db	108	;'l'
   507  00FFE8  64                 	db	100	;'d'
   508  00FFE9  20                 	db	32
   509  00FFEA  25                 	db	37
   510  00FFEB  6C                 	db	108	;'l'
   511  00FFEC  64                 	db	100	;'d'
   512  00FFED  00                 	db	0
   513  00FFEE  5B                 	db	91	;'['
   514  00FFEF  25                 	db	37
   515  00FFF0  78                 	db	120	;'x'
   516  00FFF1  20                 	db	32
   517  00FFF2  25                 	db	37
   518  00FFF3  78                 	db	120	;'x'
   519  00FFF4  5D                 	db	93	;']'
   520  00FFF5  0A                 	db	10
   521  00FFF6  00                 	db	0
   522  00FFF7  74                 	db	116	;'t'
   523  00FFF8  31                 	db	49	;'1'
   524  00FFF9  3A                 	db	58	;':'
   525  00FFFA  20                 	db	32
   526  00FFFB  25                 	db	37
   527  00FFFC  78                 	db	120	;'x'
   528  00FFFD  20                 	db	32
   529  00FFFE  00                 	db	0
   530                           
   531                           ; #config settings
   532  00FFFF  00                 	db	0	; dummy byte at the end
   533  0000                     
   534                           	psect	cinit
   535  00278C                     __pcinit:
   536                           	opt stack 0
   537  00278C                     start_initialization:
   538                           	opt stack 0
   539  00278C                     __initialization:
   540                           	opt stack 0
   541                           
   542                           ; Initialize objects allocated to BANK0 (8 bytes)
   543                           ; load TBLPTR registers with __pidataBANK0
   544  00278C  0E1C               	movlw	low __pidataBANK0
   545  00278E  6EF6               	movwf	tblptrl,c
   546  002790  0E29               	movlw	high __pidataBANK0
   547  002792  6EF7               	movwf	tblptrh,c
   548  002794  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   549  002796  6EF8               	movwf	tblptru,c
   550  002798  EE00  F0D0         	lfsr	0,__pdataBANK0
   551  00279C  EE10 F008          	lfsr	1,8
   552  0027A0                     copy_data0:
   553  0027A0  0009               	tblrd		*+
   554  0027A2  CFF5 FFEE          	movff	tablat,postinc0
   555  0027A6  50E5               	movf	postdec1,w,c
   556  0027A8  50E1               	movf	fsr1l,w,c
   557  0027AA  E1FA               	bnz	copy_data0
   558                           
   559                           ; Clear objects allocated to BANK1 (58 bytes)
   560  0027AC  EE01  F071         	lfsr	0,__pbssBANK1
   561  0027B0  0E3A               	movlw	58
   562  0027B2                     clear_0:
   563  0027B2  6AEE               	clrf	postinc0,c
   564  0027B4  06E8               	decf	wreg,f,c
   565  0027B6  E1FD               	bnz	clear_0
   566                           
   567                           ; Clear objects allocated to BANK0 (2 bytes)
   568  0027B8  0100               	movlb	0
   569  0027BA  6BD9               	clrf	(__pbssBANK0+1)& (0+255),b
   570  0027BC  6BD8               	clrf	__pbssBANK0& (0+255),b
   571                           
   572                           ; Clear objects allocated to COMRAM (2 bytes)
   573  0027BE  6A7E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   574  0027C0  6A7D               	clrf	__pbssCOMRAM& (0+255),c
   575  0027C2                     end_of_initialization:
   576                           	opt stack 0
   577  0027C2                     __end_of__initialization:
   578                           	opt stack 0
   579  0027C2  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   580  0027C4  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   581  0027C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   582  0027C8  6EF8               	movwf	tblptru,c
   583  0027CA  0100               	movlb	0
   584  0027CC  EF2F  F013         	goto	_main	;jump to C main() function
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           postdec1	equ	0xFE5
   592                           fsr1l	equ	0xFE1
   593                           
   594                           	psect	bssCOMRAM
   595  00007D                     __pbssCOMRAM:
   596                           	opt stack 0
   597  00007D                     _curr:
   598                           	opt stack 0
   599  00007D                     	ds	2
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	bssBANK0
   610  0000D8                     __pbssBANK0:
   611                           	opt stack 0
   612  0000D8                     _a0:
   613                           	opt stack 0
   614  0000D8                     	ds	2
   615                           tblptru	equ	0xFF8
   616                           tblptrh	equ	0xFF7
   617                           tblptrl	equ	0xFF6
   618                           tablat	equ	0xFF5
   619                           postinc0	equ	0xFEE
   620                           wreg	equ	0xFE8
   621                           postdec1	equ	0xFE5
   622                           fsr1l	equ	0xFE1
   623                           
   624                           	psect	dataBANK0
   625  0000D0                     __pdataBANK0:
   626                           	opt stack 0
   627  0000D0                     _angle:
   628                           	opt stack 0
   629  0000D0                     	ds	4
   630  0000D4                     _a1:
   631                           	opt stack 0
   632  0000D4                     	ds	2
   633  0000D6                     _a2:
   634                           	opt stack 0
   635  0000D6                     	ds	2
   636                           tblptru	equ	0xFF8
   637                           tblptrh	equ	0xFF7
   638                           tblptrl	equ	0xFF6
   639                           tablat	equ	0xFF5
   640                           postinc0	equ	0xFEE
   641                           wreg	equ	0xFE8
   642                           postdec1	equ	0xFE5
   643                           fsr1l	equ	0xFE1
   644                           
   645                           	psect	bssBANK1
   646  000171                     __pbssBANK1:
   647                           	opt stack 0
   648  000171                     _pulse:
   649                           	opt stack 0
   650  000171                     	ds	16
   651  000181                     _sequence:
   652                           	opt stack 0
   653  000181                     	ds	16
   654  000191                     _order:
   655                           	opt stack 0
   656  000191                     	ds	8
   657  000199                     _pin:
   658                           	opt stack 0
   659  000199                     	ds	8
   660  0001A1                     _port:
   661                           	opt stack 0
   662  0001A1                     	ds	8
   663  0001A9                     _nServo:
   664                           	opt stack 0
   665  0001A9                     	ds	2
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           postdec1	equ	0xFE5
   673                           fsr1l	equ	0xFE1
   674                           
   675                           	psect	cstackBANK1
   676  000100                     __pcstackBANK1:
   677                           	opt stack 0
   678  000100                     ?___ftadd:
   679                           	opt stack 0
   680  000100                     printf@idx:
   681                           	opt stack 0
   682  000100                     ___ftadd@f1:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x0
   686  000100                     	ds	1
   687  000101                     printf@prec:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x1
   691  000101                     	ds	2
   692  000103                     printf@ap:
   693                           	opt stack 0
   694  000103                     ___ftadd@f2:
   695                           	opt stack 0
   696                           
   697                           ; 3 bytes @ 0x3
   698  000103                     	ds	2
   699  000105                     printf@val:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x5
   703  000105                     	ds	1
   704  000106                     ??___ftadd:
   705                           
   706                           ; 1 bytes @ 0x6
   707  000106                     	ds	3
   708  000109                     printf@flag:
   709                           	opt stack 0
   710  000109                     ___ftadd@sign:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x9
   714  000109                     	ds	1
   715  00010A                     printf@c:
   716                           	opt stack 0
   717  00010A                     ___ftadd@exp2:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0xA
   721  00010A                     	ds	1
   722  00010B                     ___ftadd@exp1:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0xB
   726  00010B                     	ds	1
   727  00010C                     ?___fttol:
   728                           	opt stack 0
   729  00010C                     ___fttol@f1:
   730                           	opt stack 0
   731                           
   732                           ; 3 bytes @ 0xC
   733  00010C                     	ds	4
   734  000110                     ??___fttol:
   735                           
   736                           ; 1 bytes @ 0x10
   737  000110                     	ds	5
   738  000115                     ___fttol@sign1:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x15
   742  000115                     	ds	1
   743  000116                     ___fttol@lval:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x16
   747  000116                     	ds	4
   748  00011A                     ___fttol@exp1:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x1A
   752  00011A                     	ds	1
   753  00011B                     ?_angleToPulse:
   754                           	opt stack 0
   755  00011B                     angleToPulse@angle:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x1B
   759  00011B                     	ds	4
   760  00011F                     ??_angleToPulse:
   761                           
   762                           ; 1 bytes @ 0x1F
   763  00011F                     	ds	4
   764  000123                     angleToPulse@a180:
   765                           	opt stack 0
   766                           
   767                           ; 4 bytes @ 0x23
   768  000123                     	ds	4
   769  000127                     angleToPulse@offset:
   770                           	opt stack 0
   771                           
   772                           ; 4 bytes @ 0x27
   773  000127                     	ds	4
   774  00012B                     angleToPulse@a000:
   775                           	opt stack 0
   776                           
   777                           ; 4 bytes @ 0x2B
   778  00012B                     	ds	4
   779  00012F                     setAngle@id:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x2F
   783  00012F                     	ds	2
   784  000131                     setAngle@angle:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x31
   788  000131                     	ds	2
   789  000133                     ??_setAngle:
   790                           
   791                           ; 1 bytes @ 0x33
   792  000133                     	ds	16
   793  000143                     setAngle@taken:
   794                           	opt stack 0
   795                           
   796                           ; 20 bytes @ 0x43
   797  000143                     	ds	20
   798  000157                     setAngle@smallest:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x57
   802  000157                     	ds	4
   803  00015B                     setAngle@ind:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x5B
   807  00015B                     	ds	2
   808  00015D                     setAngle@a_505:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x5D
   812  00015D                     	ds	2
   813  00015F                     setAngle@prev:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x5F
   817  00015F                     	ds	2
   818  000161                     setAngle@a:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x61
   822  000161                     	ds	2
   823  000163                     setAngle@smallest_ind:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x63
   827  000163                     	ds	2
   828  000165                     setAngle@a_510:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x65
   832  000165                     	ds	2
   833  000167                     setAngle@b:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x67
   837  000167                     	ds	2
   838  000169                     initServo@po:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x69
   842  000169                     	ds	2
   843  00016B                     initServo@pi:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x6B
   847  00016B                     	ds	2
   848  00016D                     initServo@angle:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x6D
   852  00016D                     	ds	2
   853  00016F                     initServo@id:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x6F
   857  00016F                     	ds	2
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           postdec1	equ	0xFE5
   865                           fsr1l	equ	0xFE1
   866                           
   867                           	psect	cstackBANK0
   868  000080                     __pcstackBANK0:
   869                           	opt stack 0
   870  000080                     i2setAngle@taken:
   871                           	opt stack 0
   872                           
   873                           ; 20 bytes @ 0x0
   874  000080                     	ds	20
   875  000094                     i2setAngle@smallest:
   876                           	opt stack 0
   877                           
   878                           ; 4 bytes @ 0x14
   879  000094                     	ds	4
   880  000098                     i2setAngle@ind:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x18
   884  000098                     	ds	2
   885  00009A                     i2setAngle@a_505:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x1A
   889  00009A                     	ds	2
   890  00009C                     i2setAngle@prev:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x1C
   894  00009C                     	ds	2
   895  00009E                     i2setAngle@a:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x1E
   899  00009E                     	ds	2
   900  0000A0                     i2setAngle@smallest_ind:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x20
   904  0000A0                     	ds	2
   905  0000A2                     i2setAngle@a_510:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x22
   909  0000A2                     	ds	2
   910  0000A4                     i2setAngle@b:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x24
   914  0000A4                     	ds	2
   915  0000A6                     ?___ftpack:
   916                           	opt stack 0
   917  0000A6                     ?___lldiv:
   918                           	opt stack 0
   919  0000A6                     lcdNibble@temp:
   920                           	opt stack 0
   921  0000A6                     initTimer@timer:
   922                           	opt stack 0
   923  0000A6                     startTimer@timer:
   924                           	opt stack 0
   925  0000A6                     ___ftpack@arg:
   926                           	opt stack 0
   927  0000A6                     ___lldiv@dividend:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x26
   931  0000A6                     	ds	1
   932  0000A7                     lcdNibble@data:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x27
   936  0000A7                     	ds	1
   937  0000A8                     ??_lcdInst:
   938  0000A8                     ??_initTimer:
   939  0000A8                     startTimer@val:
   940                           	opt stack 0
   941                           
   942                           ; 4 bytes @ 0x28
   943  0000A8                     	ds	1
   944  0000A9                     lcdInst@data:
   945                           	opt stack 0
   946  0000A9                     ___ftpack@exp:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x29
   950  0000A9                     	ds	1
   951  0000AA                     ??_initLCD:
   952  0000AA                     putch@data:
   953                           	opt stack 0
   954  0000AA                     ___ftpack@sign:
   955                           	opt stack 0
   956  0000AA                     ___lldiv@divisor:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x2A
   960  0000AA                     	ds	1
   961  0000AB                     ??___ftpack:
   962                           
   963                           ; 1 bytes @ 0x2B
   964  0000AB                     	ds	1
   965  0000AC                     ??_startTimer:
   966                           
   967                           ; 1 bytes @ 0x2C
   968  0000AC                     	ds	2
   969  0000AE                     ?___altoft:
   970                           	opt stack 0
   971  0000AE                     ?___awtoft:
   972                           	opt stack 0
   973  0000AE                     ___awtoft@c:
   974                           	opt stack 0
   975  0000AE                     ___altoft@c:
   976                           	opt stack 0
   977  0000AE                     ___lldiv@quotient:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0x2E
   981  0000AE                     	ds	3
   982  0000B1                     ___awtoft@sign:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x31
   986  0000B1                     	ds	1
   987  0000B2                     ??___altoft:
   988  0000B2                     ?___ftdiv:
   989                           	opt stack 0
   990  0000B2                     ___lldiv@counter:
   991                           	opt stack 0
   992  0000B2                     ___ftdiv@f1:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0x32
   996  0000B2                     	ds	1
   997  0000B3                     ?___llmod:
   998                           	opt stack 0
   999  0000B3                     ___llmod@dividend:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x33
  1003  0000B3                     	ds	2
  1004  0000B5                     ___ftdiv@f2:
  1005                           	opt stack 0
  1006                           
  1007                           ; 3 bytes @ 0x35
  1008  0000B5                     	ds	1
  1009  0000B6                     ___altoft@exp:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x36
  1013  0000B6                     	ds	1
  1014  0000B7                     ___altoft@sign:
  1015                           	opt stack 0
  1016  0000B7                     ___llmod@divisor:
  1017                           	opt stack 0
  1018                           
  1019                           ; 4 bytes @ 0x37
  1020  0000B7                     	ds	1
  1021  0000B8                     ??___ftdiv:
  1022                           
  1023                           ; 1 bytes @ 0x38
  1024  0000B8                     	ds	3
  1025  0000BB                     ___ftdiv@cntr:
  1026                           	opt stack 0
  1027  0000BB                     ___llmod@counter:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x3B
  1031  0000BB                     	ds	1
  1032  0000BC                     ?_printf:
  1033                           	opt stack 0
  1034  0000BC                     printf@f:
  1035                           	opt stack 0
  1036  0000BC                     ___ftdiv@f3:
  1037                           	opt stack 0
  1038                           
  1039                           ; 3 bytes @ 0x3C
  1040  0000BC                     	ds	3
  1041  0000BF                     ___ftdiv@exp:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x3F
  1045  0000BF                     	ds	1
  1046  0000C0                     ___ftdiv@sign:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x40
  1050  0000C0                     	ds	1
  1051  0000C1                     ?___ftmul:
  1052                           	opt stack 0
  1053  0000C1                     ___ftmul@f1:
  1054                           	opt stack 0
  1055                           
  1056                           ; 3 bytes @ 0x41
  1057  0000C1                     	ds	3
  1058  0000C4                     ___ftmul@f2:
  1059                           	opt stack 0
  1060                           
  1061                           ; 3 bytes @ 0x44
  1062  0000C4                     	ds	3
  1063  0000C7                     ??___ftmul:
  1064                           
  1065                           ; 1 bytes @ 0x47
  1066  0000C7                     	ds	3
  1067  0000CA                     ___ftmul@exp:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x4A
  1071  0000CA                     	ds	1
  1072  0000CB                     ___ftmul@f3_as_product:
  1073                           	opt stack 0
  1074                           
  1075                           ; 3 bytes @ 0x4B
  1076  0000CB                     	ds	3
  1077  0000CE                     ??_printf:
  1078  0000CE                     ___ftmul@cntr:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x4E
  1082  0000CE                     	ds	1
  1083  0000CF                     ___ftmul@sign:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x4F
  1087  0000CF                     	ds	1
  1088  0000D0                     tblptru	equ	0xFF8
  1089                           tblptrh	equ	0xFF7
  1090                           tblptrl	equ	0xFF6
  1091                           tablat	equ	0xFF5
  1092                           postinc0	equ	0xFEE
  1093                           wreg	equ	0xFE8
  1094                           postdec1	equ	0xFE5
  1095                           fsr1l	equ	0xFE1
  1096                           
  1097                           ; 1 bytes @ 0x50
  1098                           
  1099                           	psect	cstackCOMRAM
  1100  000001                     __pcstackCOMRAM:
  1101                           	opt stack 0
  1102  000001                     ?i2___ftpack:
  1103                           	opt stack 0
  1104  000001                     ?i2___lldiv:
  1105                           	opt stack 0
  1106  000001                     i2lcdNibble@temp:
  1107                           	opt stack 0
  1108  000001                     digitalWrite@port:
  1109                           	opt stack 0
  1110  000001                     i2startTimer@timer:
  1111                           	opt stack 0
  1112  000001                     i2___ftpack@arg:
  1113                           	opt stack 0
  1114  000001                     i2___lldiv@dividend:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0x0
  1118  000001                     	ds	1
  1119  000002                     i2lcdNibble@data:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x1
  1123  000002                     	ds	1
  1124  000003                     ??i2_lcdInst:
  1125  000003                     digitalWrite@pin:
  1126                           	opt stack 0
  1127  000003                     i2startTimer@val:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x2
  1131  000003                     	ds	1
  1132  000004                     i2lcdInst@data:
  1133                           	opt stack 0
  1134  000004                     i2___ftpack@exp:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x3
  1138  000004                     	ds	1
  1139  000005                     i2putch@data:
  1140                           	opt stack 0
  1141  000005                     i2___ftpack@sign:
  1142                           	opt stack 0
  1143  000005                     digitalWrite@val:
  1144                           	opt stack 0
  1145  000005                     i2___lldiv@divisor:
  1146                           	opt stack 0
  1147                           
  1148                           ; 4 bytes @ 0x4
  1149  000005                     	ds	1
  1150  000006                     ??i2___ftpack:
  1151                           
  1152                           ; 1 bytes @ 0x5
  1153  000006                     	ds	1
  1154  000007                     ??_digitalWrite:
  1155  000007                     ??i2_startTimer:
  1156                           
  1157                           ; 1 bytes @ 0x6
  1158  000007                     	ds	2
  1159  000009                     ?i2___altoft:
  1160                           	opt stack 0
  1161  000009                     ?i2___awtoft:
  1162                           	opt stack 0
  1163  000009                     i2___awtoft@c:
  1164                           	opt stack 0
  1165  000009                     i2___altoft@c:
  1166                           	opt stack 0
  1167  000009                     i2___lldiv@quotient:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0x8
  1171  000009                     	ds	1
  1172  00000A                     ??_servoInterruptService:
  1173                           
  1174                           ; 1 bytes @ 0x9
  1175  00000A                     	ds	2
  1176  00000C                     i2___awtoft@sign:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0xB
  1180  00000C                     	ds	1
  1181  00000D                     ??i2___altoft:
  1182  00000D                     ?i2___ftdiv:
  1183                           	opt stack 0
  1184  00000D                     i2___lldiv@counter:
  1185                           	opt stack 0
  1186  00000D                     i2___ftdiv@f1:
  1187                           	opt stack 0
  1188                           
  1189                           ; 3 bytes @ 0xC
  1190  00000D                     	ds	1
  1191  00000E                     ?i2___llmod:
  1192                           	opt stack 0
  1193  00000E                     i2___llmod@dividend:
  1194                           	opt stack 0
  1195                           
  1196                           ; 4 bytes @ 0xD
  1197  00000E                     	ds	2
  1198  000010                     i2___ftdiv@f2:
  1199                           	opt stack 0
  1200                           
  1201                           ; 3 bytes @ 0xF
  1202  000010                     	ds	1
  1203  000011                     i2___altoft@exp:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x10
  1207  000011                     	ds	1
  1208  000012                     i2___altoft@sign:
  1209                           	opt stack 0
  1210  000012                     i2___llmod@divisor:
  1211                           	opt stack 0
  1212                           
  1213                           ; 4 bytes @ 0x11
  1214  000012                     	ds	1
  1215  000013                     ??i2___ftdiv:
  1216                           
  1217                           ; 1 bytes @ 0x12
  1218  000013                     	ds	3
  1219  000016                     i2___ftdiv@cntr:
  1220                           	opt stack 0
  1221  000016                     i2___llmod@counter:
  1222                           	opt stack 0
  1223  000016                     servoInterruptService@i:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x15
  1227  000016                     	ds	1
  1228  000017                     ?i2_printf:
  1229                           	opt stack 0
  1230  000017                     i2printf@f:
  1231                           	opt stack 0
  1232  000017                     i2___ftdiv@f3:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x16
  1236  000017                     	ds	3
  1237  00001A                     i2___ftdiv@exp:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x19
  1241  00001A                     	ds	1
  1242  00001B                     i2___ftdiv@sign:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x1A
  1246  00001B                     	ds	1
  1247  00001C                     ?i2___ftmul:
  1248                           	opt stack 0
  1249  00001C                     i2___ftmul@f1:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x1B
  1253  00001C                     	ds	3
  1254  00001F                     i2___ftmul@f2:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x1E
  1258  00001F                     	ds	3
  1259  000022                     ??i2___ftmul:
  1260                           
  1261                           ; 1 bytes @ 0x21
  1262  000022                     	ds	3
  1263  000025                     i2___ftmul@exp:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x24
  1267  000025                     	ds	1
  1268  000026                     i2___ftmul@f3_as_product:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x25
  1272  000026                     	ds	3
  1273  000029                     ??i2_printf:
  1274  000029                     i2___ftmul@cntr:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x28
  1278  000029                     	ds	1
  1279  00002A                     i2___ftmul@sign:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x29
  1283  00002A                     	ds	1
  1284  00002B                     ?i2___ftadd:
  1285                           	opt stack 0
  1286  00002B                     i2printf@idx:
  1287                           	opt stack 0
  1288  00002B                     i2___ftadd@f1:
  1289                           	opt stack 0
  1290                           
  1291                           ; 3 bytes @ 0x2A
  1292  00002B                     	ds	1
  1293  00002C                     i2printf@prec:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x2B
  1297  00002C                     	ds	2
  1298  00002E                     i2printf@ap:
  1299                           	opt stack 0
  1300  00002E                     i2___ftadd@f2:
  1301                           	opt stack 0
  1302                           
  1303                           ; 3 bytes @ 0x2D
  1304  00002E                     	ds	2
  1305  000030                     i2printf@val:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x2F
  1309  000030                     	ds	1
  1310  000031                     ??i2___ftadd:
  1311                           
  1312                           ; 1 bytes @ 0x30
  1313  000031                     	ds	3
  1314  000034                     i2printf@flag:
  1315                           	opt stack 0
  1316  000034                     i2___ftadd@sign:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x33
  1320  000034                     	ds	1
  1321  000035                     i2printf@c:
  1322                           	opt stack 0
  1323  000035                     i2___ftadd@exp2:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x34
  1327  000035                     	ds	1
  1328  000036                     i2___ftadd@exp1:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x35
  1332  000036                     	ds	1
  1333  000037                     ?i2___fttol:
  1334                           	opt stack 0
  1335  000037                     i2___fttol@f1:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0x36
  1339  000037                     	ds	4
  1340  00003B                     ??i2___fttol:
  1341                           
  1342                           ; 1 bytes @ 0x3A
  1343  00003B                     	ds	5
  1344  000040                     i2___fttol@sign1:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x3F
  1348  000040                     	ds	1
  1349  000041                     i2___fttol@lval:
  1350                           	opt stack 0
  1351                           
  1352                           ; 4 bytes @ 0x40
  1353  000041                     	ds	4
  1354  000045                     i2___fttol@exp1:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x44
  1358  000045                     	ds	1
  1359  000046                     ?i2_angleToPulse:
  1360                           	opt stack 0
  1361  000046                     i2angleToPulse@angle:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x45
  1365  000046                     	ds	4
  1366  00004A                     ??i2_angleToPulse:
  1367                           
  1368                           ; 1 bytes @ 0x49
  1369  00004A                     	ds	4
  1370  00004E                     i2angleToPulse@a180:
  1371                           	opt stack 0
  1372                           
  1373                           ; 4 bytes @ 0x4D
  1374  00004E                     	ds	4
  1375  000052                     i2angleToPulse@offset:
  1376                           	opt stack 0
  1377                           
  1378                           ; 4 bytes @ 0x51
  1379  000052                     	ds	4
  1380  000056                     i2angleToPulse@a000:
  1381                           	opt stack 0
  1382                           
  1383                           ; 4 bytes @ 0x55
  1384  000056                     	ds	4
  1385  00005A                     i2setAngle@id:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x59
  1389  00005A                     	ds	2
  1390  00005C                     i2setAngle@angle:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x5B
  1394  00005C                     	ds	2
  1395  00005E                     ??i2_setAngle:
  1396                           
  1397                           ; 1 bytes @ 0x5D
  1398  00005E                     	ds	16
  1399  00006E                     ??_service:
  1400                           
  1401                           ; 1 bytes @ 0x6D
  1402  00006E                     	ds	14
  1403  00007C                     service@key:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x7B
  1407  00007C                     	ds	1
  1408                           tblptru	equ	0xFF8
  1409                           tblptrh	equ	0xFF7
  1410                           tblptrl	equ	0xFF6
  1411                           tablat	equ	0xFF5
  1412                           postinc0	equ	0xFEE
  1413                           wreg	equ	0xFE8
  1414                           postdec1	equ	0xFE5
  1415                           fsr1l	equ	0xFE1
  1416                           
  1417 ;;
  1418 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1419 ;;
  1420 ;; *************** function _main *****************
  1421 ;; Defined at:
  1422 ;;		line 121 in file "main.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;		None
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  1    wreg      void 
  1429 ;; Registers used:
  1430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1440 ;;Total ram usage:        0 bytes
  1441 ;; Hardware stack levels required when called:   14
  1442 ;; This function calls:
  1443 ;;		_initLCD
  1444 ;;		_initServo
  1445 ;;		_pinSetup
  1446 ;; This function is called by:
  1447 ;;		Startup code after reset
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text0
  1452  00265E                     __ptext0:
  1453                           	opt stack 0
  1454  00265E                     _main:
  1455                           	opt stack 17
  1456                           
  1457                           ;main.c: 122: pinSetup();
  1458                           
  1459                           ;incstack = 0
  1460  00265E  EC0A  F014         	call	_pinSetup	;wreg free
  1461                           
  1462                           ;main.c: 123: initLCD();
  1463  002662  ECA1  F013         	call	_initLCD	;wreg free
  1464                           
  1465                           ;main.c: 127: initServo(2,0,0);
  1466  002666  0E00               	movlw	0
  1467  002668  0101               	movlb	1	; () banked
  1468  00266A  6F6A               	movwf	(initServo@po+1)& (0+255),b
  1469  00266C  0E02               	movlw	2
  1470  00266E  6F69               	movwf	initServo@po& (0+255),b
  1471  002670  0E00               	movlw	0
  1472  002672  0101               	movlb	1	; () banked
  1473  002674  6F6C               	movwf	(initServo@pi+1)& (0+255),b
  1474  002676  0E00               	movlw	0
  1475  002678  6F6B               	movwf	initServo@pi& (0+255),b
  1476  00267A  0E00               	movlw	0
  1477  00267C  0101               	movlb	1	; () banked
  1478  00267E  6F6E               	movwf	(initServo@angle+1)& (0+255),b
  1479  002680  0E00               	movlw	0
  1480  002682  6F6D               	movwf	initServo@angle& (0+255),b
  1481  002684  ECA1  F011         	call	_initServo	;wreg free
  1482                           
  1483                           ;main.c: 128: initServo(2,1,180);
  1484  002688  0E00               	movlw	0
  1485  00268A  0101               	movlb	1	; () banked
  1486  00268C  6F6A               	movwf	(initServo@po+1)& (0+255),b
  1487  00268E  0E02               	movlw	2
  1488  002690  6F69               	movwf	initServo@po& (0+255),b
  1489  002692  0E00               	movlw	0
  1490  002694  0101               	movlb	1	; () banked
  1491  002696  6F6C               	movwf	(initServo@pi+1)& (0+255),b
  1492  002698  0E01               	movlw	1
  1493  00269A  6F6B               	movwf	initServo@pi& (0+255),b
  1494  00269C  0E00               	movlw	0
  1495  00269E  0101               	movlb	1	; () banked
  1496  0026A0  6F6E               	movwf	(initServo@angle+1)& (0+255),b
  1497  0026A2  0EB4               	movlw	180
  1498  0026A4  6F6D               	movwf	initServo@angle& (0+255),b
  1499  0026A6  ECA1  F011         	call	_initServo	;wreg free
  1500  0026AA                     l101:
  1501  0026AA  D7FF               	goto	l101
  1502  0026AC                     __end_of_main:
  1503                           	opt stack 0
  1504                           tblptru	equ	0xFF8
  1505                           tblptrh	equ	0xFF7
  1506                           tblptrl	equ	0xFF6
  1507                           tablat	equ	0xFF5
  1508                           postinc0	equ	0xFEE
  1509                           wreg	equ	0xFE8
  1510                           postdec1	equ	0xFE5
  1511                           fsr1l	equ	0xFE1
  1512                           
  1513 ;; *************** function _pinSetup *****************
  1514 ;; Defined at:
  1515 ;;		line 27 in file "main.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;		None
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;Total ram usage:        0 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    7
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text1
  1544  002814                     __ptext1:
  1545                           	opt stack 0
  1546  002814                     _pinSetup:
  1547                           	opt stack 23
  1548                           
  1549                           ;main.c: 33: TRISA = 0xFF;
  1550                           
  1551                           ;incstack = 0
  1552  002814  6892               	setf	3986,c	;volatile
  1553                           
  1554                           ;main.c: 34: TRISB = 0xFF;
  1555  002816  6893               	setf	3987,c	;volatile
  1556                           
  1557                           ;main.c: 35: TRISC = 0x00;
  1558  002818  0E00               	movlw	0
  1559  00281A  6E94               	movwf	3988,c	;volatile
  1560                           
  1561                           ;main.c: 36: TRISD = 0x00;
  1562  00281C  0E00               	movlw	0
  1563  00281E  6E95               	movwf	3989,c	;volatile
  1564                           
  1565                           ;main.c: 37: TRISE = 0x00;
  1566  002820  0E00               	movlw	0
  1567  002822  6E96               	movwf	3990,c	;volatile
  1568                           
  1569                           ;main.c: 39: LATA = 0x00;
  1570  002824  0E00               	movlw	0
  1571  002826  6E89               	movwf	3977,c	;volatile
  1572                           
  1573                           ;main.c: 40: LATB = 0x00;
  1574  002828  0E00               	movlw	0
  1575  00282A  6E8A               	movwf	3978,c	;volatile
  1576                           
  1577                           ;main.c: 41: LATC = 0x00;
  1578  00282C  0E00               	movlw	0
  1579  00282E  6E8B               	movwf	3979,c	;volatile
  1580                           
  1581                           ;main.c: 42: LATD = 0x00;
  1582  002830  0E00               	movlw	0
  1583  002832  6E8C               	movwf	3980,c	;volatile
  1584                           
  1585                           ;main.c: 43: LATE = 0x00;
  1586  002834  0E00               	movlw	0
  1587  002836  6E8D               	movwf	3981,c	;volatile
  1588                           
  1589                           ;main.c: 45: ADCON0 = 0x00;
  1590  002838  0E00               	movlw	0
  1591  00283A  6EC2               	movwf	4034,c	;volatile
  1592                           
  1593                           ;main.c: 46: ADCON1 |= 0x0A;
  1594  00283C  0E0A               	movlw	10
  1595  00283E  12C1               	iorwf	4033,f,c	;volatile
  1596                           
  1597                           ;main.c: 50: ADCON2 = 0;
  1598  002840  0E00               	movlw	0
  1599  002842  6EC0               	movwf	4032,c	;volatile
  1600                           
  1601                           ;main.c: 51: ADCON2 |= 0b010;
  1602  002844  82C0               	bsf	4032,1,c	;volatile
  1603                           
  1604                           ;main.c: 52: ADCON2 |= 0b110<<3;
  1605  002846  0E30               	movlw	48
  1606  002848  12C0               	iorwf	4032,f,c	;volatile
  1607                           
  1608                           ;main.c: 53: ADCON2 |= 1<<7;
  1609  00284A  8EC0               	bsf	4032,7,c	;volatile
  1610  00284C  0012               	return		;funcret
  1611  00284E                     __end_of_pinSetup:
  1612                           	opt stack 0
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           postinc0	equ	0xFEE
  1618                           wreg	equ	0xFE8
  1619                           postdec1	equ	0xFE5
  1620                           fsr1l	equ	0xFE1
  1621                           
  1622 ;; *************** function _initServo *****************
  1623 ;; Defined at:
  1624 ;;		line 23 in file "servo.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;  po              2  105[BANK1 ] int 
  1627 ;;  pi              2  107[BANK1 ] int 
  1628 ;;  angle           2  109[BANK1 ] int 
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;  id              2  111[BANK1 ] int 
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  2  105[BANK1 ] int 
  1633 ;; Registers used:
  1634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1640 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1641 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;Total ram usage:        8 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; Hardware stack levels required when called:   13
  1647 ;; This function calls:
  1648 ;;		_initTimer
  1649 ;;		_setAngle
  1650 ;;		_startTimer
  1651 ;; This function is called by:
  1652 ;;		_main
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text2
  1657  002342                     __ptext2:
  1658                           	opt stack 0
  1659  002342                     _initServo:
  1660                           	opt stack 17
  1661                           
  1662                           ;servo.c: 24: int id = nServo;
  1663                           
  1664                           ;incstack = 0
  1665  002342  C1A9  F16F         	movff	_nServo,initServo@id
  1666  002346  C1AA  F170         	movff	_nServo+1,initServo@id+1
  1667                           
  1668                           ;servo.c: 25: nServo++;
  1669  00234A  0101               	movlb	1	; () banked
  1670  00234C  4BA9               	infsnz	_nServo& (0+255),f,b
  1671  00234E  2BAA               	incf	(_nServo+1)& (0+255),f,b
  1672                           
  1673                           ; BSR set to: 1
  1674                           ;servo.c: 26: port[id] = po;
  1675  002350  90D8               	bcf	status,0,c
  1676  002352  0101               	movlb	1	; () banked
  1677  002354  356F               	rlcf	initServo@id& (0+255),w,b
  1678  002356  6ED9               	movwf	fsr2l,c
  1679  002358  0101               	movlb	1	; () banked
  1680  00235A  3570               	rlcf	(initServo@id+1)& (0+255),w,b
  1681  00235C  6EDA               	movwf	fsr2h,c
  1682  00235E  0EA1               	movlw	low _port
  1683  002360  26D9               	addwf	fsr2l,f,c
  1684  002362  0E01               	movlw	high _port
  1685  002364  22DA               	addwfc	fsr2h,f,c
  1686  002366  C169  FFDE         	movff	initServo@po,postinc2
  1687  00236A  C16A  FFDD         	movff	initServo@po+1,postdec2
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;servo.c: 27: pin[id] = pi;
  1691  00236E  90D8               	bcf	status,0,c
  1692  002370  0101               	movlb	1	; () banked
  1693  002372  356F               	rlcf	initServo@id& (0+255),w,b
  1694  002374  6ED9               	movwf	fsr2l,c
  1695  002376  0101               	movlb	1	; () banked
  1696  002378  3570               	rlcf	(initServo@id+1)& (0+255),w,b
  1697  00237A  6EDA               	movwf	fsr2h,c
  1698  00237C  0E99               	movlw	low _pin
  1699  00237E  26D9               	addwf	fsr2l,f,c
  1700  002380  0E01               	movlw	high _pin
  1701  002382  22DA               	addwfc	fsr2h,f,c
  1702  002384  C16B  FFDE         	movff	initServo@pi,postinc2
  1703  002388  C16C  FFDD         	movff	initServo@pi+1,postdec2
  1704                           
  1705                           ; BSR set to: 1
  1706                           ;servo.c: 28: setAngle(id, angle);
  1707  00238C  C16F  F12F         	movff	initServo@id,setAngle@id
  1708  002390  C170  F130         	movff	initServo@id+1,setAngle@id+1
  1709  002394  C16D  F131         	movff	initServo@angle,setAngle@angle
  1710  002398  C16E  F132         	movff	initServo@angle+1,setAngle@angle+1
  1711  00239C  EC09  F000         	call	_setAngle	;wreg free
  1712                           
  1713                           ;servo.c: 30: initTimer(0);
  1714  0023A0  0E00               	movlw	0
  1715  0023A2  0100               	movlb	0	; () banked
  1716  0023A4  6FA7               	movwf	(initTimer@timer+1)& (0+255),b
  1717  0023A6  0E00               	movlw	0
  1718  0023A8  6FA6               	movwf	initTimer@timer& (0+255),b
  1719  0023AA  EC7C  F013         	call	_initTimer	;wreg free
  1720                           
  1721                           ;servo.c: 31: startTimer(0,0);
  1722  0023AE  0E00               	movlw	0
  1723  0023B0  0100               	movlb	0	; () banked
  1724  0023B2  6FA7               	movwf	(startTimer@timer+1)& (0+255),b
  1725  0023B4  0E00               	movlw	0
  1726  0023B6  6FA6               	movwf	startTimer@timer& (0+255),b
  1727  0023B8  0E00               	movlw	0
  1728  0023BA  0100               	movlb	0	; () banked
  1729  0023BC  6FA8               	movwf	startTimer@val& (0+255),b
  1730  0023BE  0E00               	movlw	0
  1731  0023C0  6FA9               	movwf	(startTimer@val+1)& (0+255),b
  1732  0023C2  0E00               	movlw	0
  1733  0023C4  6FAA               	movwf	(startTimer@val+2)& (0+255),b
  1734  0023C6  0E00               	movlw	0
  1735  0023C8  6FAB               	movwf	(startTimer@val+3)& (0+255),b
  1736  0023CA  EC07  F013         	call	_startTimer	;wreg free
  1737  0023CE  0012               	return	
  1738  0023D0                     __end_of_initServo:
  1739                           	opt stack 0
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           postdec1	equ	0xFE5
  1747                           fsr1l	equ	0xFE1
  1748                           postinc2	equ	0xFDE
  1749                           postdec2	equ	0xFDD
  1750                           fsr2h	equ	0xFDA
  1751                           fsr2l	equ	0xFD9
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _startTimer *****************
  1755 ;; Defined at:
  1756 ;;		line 75 in file "timer.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  timer           2   38[BANK0 ] int 
  1759 ;;  val             4   40[BANK0 ] long 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1771 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;Total ram usage:        8 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    7
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_initServo
  1782 ;;		_testFrequency
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text3
  1787  00260E                     __ptext3:
  1788                           	opt stack 0
  1789  00260E                     _startTimer:
  1790                           	opt stack 22
  1791                           
  1792                           ;timer.c: 76: switch(timer){
  1793                           
  1794                           ;incstack = 0
  1795  00260E  D012               	goto	l3801
  1796  002610                     l344:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;timer.c: 78: TMR0H = val>>8;
  1800  002610  C0A9  FFD7         	movff	startTimer@val+1,4055	;volatile
  1801                           
  1802                           ;timer.c: 79: TMR0L = val;
  1803  002614  C0A8  FFD6         	movff	startTimer@val,4054	;volatile
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;timer.c: 80: T0CON |= 1<<7;
  1807  002618  8ED5               	bsf	4053,7,c	;volatile
  1808                           
  1809                           ;timer.c: 81: break;
  1810  00261A  0012               	return	
  1811  00261C                     l346:
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;timer.c: 83: TMR1H = val>>8;
  1815  00261C  C0A9  FFCF         	movff	startTimer@val+1,4047	;volatile
  1816                           
  1817                           ;timer.c: 84: TMR1L = val;
  1818  002620  C0A8  FFCE         	movff	startTimer@val,4046	;volatile
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;timer.c: 85: T1CON |= 1<<0;
  1822  002624  80CD               	bsf	4045,0,c	;volatile
  1823                           
  1824                           ;timer.c: 86: break;
  1825  002626  0012               	return	
  1826  002628                     l347:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;timer.c: 88: TMR3H = val>>8;
  1830  002628  C0A9  FFB3         	movff	startTimer@val+1,4019	;volatile
  1831                           
  1832                           ;timer.c: 89: TMR3L = val;
  1833  00262C  C0A8  FFB2         	movff	startTimer@val,4018	;volatile
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;timer.c: 90: T3CON |= 1<<0;
  1837  002630  80B1               	bsf	4017,0,c	;volatile
  1838                           
  1839                           ;timer.c: 91: }
  1840  002632  0012               	return	
  1841  002634                     l3801:
  1842  002634  C0A6  F0AC         	movff	startTimer@timer,??_startTimer
  1843  002638  C0A7  F0AD         	movff	startTimer@timer+1,??_startTimer+1
  1844                           
  1845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1846                           ; Switch size 1, requested type "space"
  1847                           ; Number of cases is 1, Range of values is 0 to 0
  1848                           ; switch strategies available:
  1849                           ; Name         Instructions Cycles
  1850                           ; simple_byte            4     3 (average)
  1851                           ;	Chosen strategy is simple_byte
  1852  00263C  0100               	movlb	0	; () banked
  1853  00263E  51AD               	movf	(??_startTimer+1)& (0+255),w,b
  1854  002640  0A00               	xorlw	0	; case 0
  1855  002642  A4D8               	btfss	status,2,c
  1856  002644  0012               	return	
  1857                           
  1858                           ; BSR set to: 0
  1859                           ; Switch size 1, requested type "space"
  1860                           ; Number of cases is 3, Range of values is 0 to 3
  1861                           ; switch strategies available:
  1862                           ; Name         Instructions Cycles
  1863                           ; simple_byte           10     6 (average)
  1864                           ;	Chosen strategy is simple_byte
  1865  002646  0100               	movlb	0	; () banked
  1866  002648  51AC               	movf	??_startTimer& (0+255),w,b
  1867  00264A  0A00               	xorlw	0	; case 0
  1868  00264C  B4D8               	btfsc	status,2,c
  1869  00264E  D7E0               	goto	l344
  1870  002650  0A01               	xorlw	1	; case 1
  1871  002652  B4D8               	btfsc	status,2,c
  1872  002654  D7E3               	goto	l346
  1873  002656  0A02               	xorlw	2	; case 3
  1874  002658  A4D8               	btfss	status,2,c
  1875  00265A  0012               	return	
  1876  00265C  D7E5               	goto	l347
  1877  00265E                     __end_of_startTimer:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           postinc2	equ	0xFDE
  1888                           postdec2	equ	0xFDD
  1889                           fsr2h	equ	0xFDA
  1890                           fsr2l	equ	0xFD9
  1891                           status	equ	0xFD8
  1892                           
  1893 ;; *************** function _setAngle *****************
  1894 ;; Defined at:
  1895 ;;		line 41 in file "servo.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  id              2   47[BANK1 ] int 
  1898 ;;  angle           2   49[BANK1 ] int 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  b               2  103[BANK1 ] int 
  1901 ;;  smallest        4   87[BANK1 ] long 
  1902 ;;  smallest_ind    2   99[BANK1 ] int 
  1903 ;;  a               2  101[BANK1 ] int 
  1904 ;;  a               2   93[BANK1 ] int 
  1905 ;;  a               2   97[BANK1 ] int 
  1906 ;;  taken          20   67[BANK1 ] int [10]
  1907 ;;  prev            2   95[BANK1 ] int 
  1908 ;;  ind             2   91[BANK1 ] int 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1918 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Locals:         0       0      38       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Temps:          0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Totals:         0       0      58       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;Total ram usage:       58 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:   12
  1925 ;; This function calls:
  1926 ;;		_angleToPulse
  1927 ;;		_lcdClear
  1928 ;;		_printf
  1929 ;; This function is called by:
  1930 ;;		_initServo
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text4
  1935  000012                     __ptext4:
  1936                           	opt stack 0
  1937  000012                     _setAngle:
  1938                           	opt stack 17
  1939                           
  1940                           ;servo.c: 42: pulse[id] = angleToPulse(angle);
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;incstack = 0
  1944  000012  C131  F11B         	movff	setAngle@angle,angleToPulse@angle
  1945  000016  C132  F11C         	movff	setAngle@angle+1,angleToPulse@angle+1
  1946  00001A  EC22  F00B         	call	_angleToPulse	;wreg free
  1947  00001E  0E71               	movlw	low _pulse
  1948  000020  0101               	movlb	1	; () banked
  1949  000022  6F33               	movwf	??_setAngle& (0+255),b
  1950  000024  0E01               	movlw	high _pulse
  1951  000026  0101               	movlb	1	; () banked
  1952  000028  6F34               	movwf	(??_setAngle+1)& (0+255),b
  1953  00002A  90D8               	bcf	status,0,c
  1954  00002C  0101               	movlb	1	; () banked
  1955  00002E  352F               	rlcf	setAngle@id& (0+255),w,b
  1956  000030  6ED9               	movwf	fsr2l,c
  1957  000032  0101               	movlb	1	; () banked
  1958  000034  3530               	rlcf	(setAngle@id+1)& (0+255),w,b
  1959  000036  6EDA               	movwf	fsr2h,c
  1960  000038  90D8               	bcf	status,0,c
  1961  00003A  36D9               	rlcf	fsr2l,f,c
  1962  00003C  36DA               	rlcf	fsr2h,f,c
  1963  00003E  0101               	movlb	1	; () banked
  1964  000040  5133               	movf	??_setAngle& (0+255),w,b
  1965  000042  26D9               	addwf	fsr2l,f,c
  1966  000044  0101               	movlb	1	; () banked
  1967  000046  5134               	movf	(??_setAngle+1)& (0+255),w,b
  1968  000048  22DA               	addwfc	fsr2h,f,c
  1969  00004A  0101               	movlb	1	; () banked
  1970  00004C  C11B  FFDE         	movff	?_angleToPulse,postinc2
  1971  000050  0101               	movlb	1	; () banked
  1972  000052  C11C  FFDE         	movff	?_angleToPulse+1,postinc2
  1973  000056  0101               	movlb	1	; () banked
  1974  000058  C11D  FFDE         	movff	?_angleToPulse+2,postinc2
  1975  00005C  0101               	movlb	1	; () banked
  1976  00005E  C11E  FFDE         	movff	?_angleToPulse+3,postinc2
  1977                           
  1978                           ; BSR set to: 1
  1979                           ;servo.c: 45: int taken[10];
  1980                           ;servo.c: 46: for(int a = 0; a < nServo; a++) taken[a] = 0;
  1981  000062  0E00               	movlw	0
  1982  000064  0101               	movlb	1	; () banked
  1983  000066  6F62               	movwf	(setAngle@a+1)& (0+255),b
  1984  000068  0E00               	movlw	0
  1985  00006A  6F61               	movwf	setAngle@a& (0+255),b
  1986  00006C  D012               	goto	l4417
  1987  00006E                     l4413:
  1988                           
  1989                           ; BSR set to: 1
  1990  00006E  90D8               	bcf	status,0,c
  1991  000070  0101               	movlb	1	; () banked
  1992  000072  3561               	rlcf	setAngle@a& (0+255),w,b
  1993  000074  6ED9               	movwf	fsr2l,c
  1994  000076  0101               	movlb	1	; () banked
  1995  000078  3562               	rlcf	(setAngle@a+1)& (0+255),w,b
  1996  00007A  6EDA               	movwf	fsr2h,c
  1997  00007C  0E43               	movlw	low setAngle@taken
  1998  00007E  26D9               	addwf	fsr2l,f,c
  1999  000080  0E01               	movlw	high setAngle@taken
  2000  000082  22DA               	addwfc	fsr2h,f,c
  2001  000084  0E00               	movlw	0
  2002  000086  6EDE               	movwf	postinc2,c
  2003  000088  0E00               	movlw	0
  2004  00008A  6EDD               	movwf	postdec2,c
  2005                           
  2006                           ; BSR set to: 1
  2007  00008C  0101               	movlb	1	; () banked
  2008  00008E  4B61               	infsnz	setAngle@a& (0+255),f,b
  2009  000090  2B62               	incf	(setAngle@a+1)& (0+255),f,b
  2010  000092                     l4417:
  2011                           
  2012                           ; BSR set to: 1
  2013  000092  0101               	movlb	1	; () banked
  2014  000094  51A9               	movf	_nServo& (0+255),w,b
  2015  000096  0101               	movlb	1	; () banked
  2016  000098  5D61               	subwf	setAngle@a& (0+255),w,b
  2017  00009A  0101               	movlb	1	; () banked
  2018  00009C  5162               	movf	(setAngle@a+1)& (0+255),w,b
  2019  00009E  0A80               	xorlw	128
  2020  0000A0  0101               	movlb	1	; () banked
  2021  0000A2  6F33               	movwf	??_setAngle& (0+255),b
  2022  0000A4  0101               	movlb	1	; () banked
  2023  0000A6  51AA               	movf	(_nServo+1)& (0+255),w,b
  2024  0000A8  0A80               	xorlw	128
  2025  0000AA  0101               	movlb	1	; () banked
  2026  0000AC  5933               	subwfb	??_setAngle& (0+255),w,b
  2027  0000AE  A0D8               	btfss	status,0,c
  2028  0000B0  D7DE               	goto	l4413
  2029                           
  2030                           ; BSR set to: 1
  2031                           ;servo.c: 48: int ind = 0;
  2032                           
  2033                           ; BSR set to: 1
  2034  0000B2  0E00               	movlw	0
  2035  0000B4  0101               	movlb	1	; () banked
  2036  0000B6  6F5C               	movwf	(setAngle@ind+1)& (0+255),b
  2037  0000B8  0E00               	movlw	0
  2038  0000BA  6F5B               	movwf	setAngle@ind& (0+255),b
  2039                           
  2040                           ;servo.c: 49: for(int a = 0; a < nServo; a++){
  2041  0000BC  0E00               	movlw	0
  2042  0000BE  0101               	movlb	1	; () banked
  2043  0000C0  6F5E               	movwf	(setAngle@a_505+1)& (0+255),b
  2044  0000C2  0E00               	movlw	0
  2045  0000C4  6F5D               	movwf	setAngle@a_505& (0+255),b
  2046  0000C6  D0A4               	goto	l4445
  2047  0000C8                     l4421:
  2048                           
  2049                           ; BSR set to: 1
  2050                           ;servo.c: 50: long smallest = 0xffff;
  2051  0000C8  0EFF               	movlw	255
  2052  0000CA  0101               	movlb	1	; () banked
  2053  0000CC  6F57               	movwf	setAngle@smallest& (0+255),b
  2054  0000CE  0EFF               	movlw	255
  2055  0000D0  6F58               	movwf	(setAngle@smallest+1)& (0+255),b
  2056  0000D2  0E00               	movlw	0
  2057  0000D4  6F59               	movwf	(setAngle@smallest+2)& (0+255),b
  2058  0000D6  0E00               	movlw	0
  2059  0000D8  6F5A               	movwf	(setAngle@smallest+3)& (0+255),b
  2060                           
  2061                           ; BSR set to: 1
  2062                           ;servo.c: 51: int smallest_ind = -1;
  2063  0000DA  0101               	movlb	1	; () banked
  2064  0000DC  6963               	setf	setAngle@smallest_ind& (0+255),b
  2065  0000DE  6964               	setf	(setAngle@smallest_ind+1)& (0+255),b
  2066                           
  2067                           ;servo.c: 52: for(int b = 0; b < nServo; b++){
  2068  0000E0  0E00               	movlw	0
  2069  0000E2  0101               	movlb	1	; () banked
  2070  0000E4  6F68               	movwf	(setAngle@b+1)& (0+255),b
  2071  0000E6  0E00               	movlw	0
  2072  0000E8  6F67               	movwf	setAngle@b& (0+255),b
  2073  0000EA  D05E               	goto	l4435
  2074  0000EC                     l4425:
  2075                           
  2076                           ; BSR set to: 1
  2077                           ;servo.c: 53: if(!taken[b] && pulse[b] < smallest){
  2078  0000EC  90D8               	bcf	status,0,c
  2079  0000EE  0101               	movlb	1	; () banked
  2080  0000F0  3567               	rlcf	setAngle@b& (0+255),w,b
  2081  0000F2  6ED9               	movwf	fsr2l,c
  2082  0000F4  0101               	movlb	1	; () banked
  2083  0000F6  3568               	rlcf	(setAngle@b+1)& (0+255),w,b
  2084  0000F8  6EDA               	movwf	fsr2h,c
  2085  0000FA  0E43               	movlw	low setAngle@taken
  2086  0000FC  26D9               	addwf	fsr2l,f,c
  2087  0000FE  0E01               	movlw	high setAngle@taken
  2088  000100  22DA               	addwfc	fsr2h,f,c
  2089  000102  50DE               	movf	postinc2,w,c
  2090  000104  10DE               	iorwf	postinc2,w,c
  2091  000106  A4D8               	btfss	status,2,c
  2092  000108  D04C               	goto	l4433
  2093                           
  2094                           ; BSR set to: 1
  2095  00010A  0E71               	movlw	low _pulse
  2096  00010C  0101               	movlb	1	; () banked
  2097  00010E  6F33               	movwf	??_setAngle& (0+255),b
  2098  000110  0E01               	movlw	high _pulse
  2099  000112  0101               	movlb	1	; () banked
  2100  000114  6F34               	movwf	(??_setAngle+1)& (0+255),b
  2101  000116  90D8               	bcf	status,0,c
  2102  000118  0101               	movlb	1	; () banked
  2103  00011A  3567               	rlcf	setAngle@b& (0+255),w,b
  2104  00011C  6ED9               	movwf	fsr2l,c
  2105  00011E  0101               	movlb	1	; () banked
  2106  000120  3568               	rlcf	(setAngle@b+1)& (0+255),w,b
  2107  000122  6EDA               	movwf	fsr2h,c
  2108  000124  90D8               	bcf	status,0,c
  2109  000126  36D9               	rlcf	fsr2l,f,c
  2110  000128  36DA               	rlcf	fsr2h,f,c
  2111  00012A  0101               	movlb	1	; () banked
  2112  00012C  5133               	movf	??_setAngle& (0+255),w,b
  2113  00012E  26D9               	addwf	fsr2l,f,c
  2114  000130  0101               	movlb	1	; () banked
  2115  000132  5134               	movf	(??_setAngle+1)& (0+255),w,b
  2116  000134  22DA               	addwfc	fsr2h,f,c
  2117  000136  0101               	movlb	1	; () banked
  2118  000138  5157               	movf	setAngle@smallest& (0+255),w,b
  2119  00013A  5CDE               	subwf	postinc2,w,c
  2120  00013C  0101               	movlb	1	; () banked
  2121  00013E  5158               	movf	(setAngle@smallest+1)& (0+255),w,b
  2122  000140  58DE               	subwfb	postinc2,w,c
  2123  000142  0101               	movlb	1	; () banked
  2124  000144  5159               	movf	(setAngle@smallest+2)& (0+255),w,b
  2125  000146  58DE               	subwfb	postinc2,w,c
  2126  000148  50DE               	movf	postinc2,w,c
  2127  00014A  0A80               	xorlw	128
  2128  00014C  0101               	movlb	1	; () banked
  2129  00014E  6F39               	movwf	(??_setAngle+6)& (0+255),b
  2130  000150  0101               	movlb	1	; () banked
  2131  000152  515A               	movf	(setAngle@smallest+3)& (0+255),w,b
  2132  000154  0A80               	xorlw	128
  2133  000156  0101               	movlb	1	; () banked
  2134  000158  5939               	subwfb	(??_setAngle+6)& (0+255),w,b
  2135  00015A  B0D8               	btfsc	status,0,c
  2136  00015C  D022               	goto	l4433
  2137                           
  2138                           ; BSR set to: 1
  2139                           ;servo.c: 54: smallest = pulse[b];
  2140  00015E  0E71               	movlw	low _pulse
  2141  000160  0101               	movlb	1	; () banked
  2142  000162  6F33               	movwf	??_setAngle& (0+255),b
  2143  000164  0E01               	movlw	high _pulse
  2144  000166  0101               	movlb	1	; () banked
  2145  000168  6F34               	movwf	(??_setAngle+1)& (0+255),b
  2146  00016A  90D8               	bcf	status,0,c
  2147  00016C  0101               	movlb	1	; () banked
  2148  00016E  3567               	rlcf	setAngle@b& (0+255),w,b
  2149  000170  6ED9               	movwf	fsr2l,c
  2150  000172  0101               	movlb	1	; () banked
  2151  000174  3568               	rlcf	(setAngle@b+1)& (0+255),w,b
  2152  000176  6EDA               	movwf	fsr2h,c
  2153  000178  90D8               	bcf	status,0,c
  2154  00017A  36D9               	rlcf	fsr2l,f,c
  2155  00017C  36DA               	rlcf	fsr2h,f,c
  2156  00017E  0101               	movlb	1	; () banked
  2157  000180  5133               	movf	??_setAngle& (0+255),w,b
  2158  000182  26D9               	addwf	fsr2l,f,c
  2159  000184  0101               	movlb	1	; () banked
  2160  000186  5134               	movf	(??_setAngle+1)& (0+255),w,b
  2161  000188  22DA               	addwfc	fsr2h,f,c
  2162  00018A  CFDE F157          	movff	postinc2,setAngle@smallest
  2163  00018E  CFDE F158          	movff	postinc2,setAngle@smallest+1
  2164  000192  CFDE F159          	movff	postinc2,setAngle@smallest+2
  2165  000196  CFDE F15A          	movff	postinc2,setAngle@smallest+3
  2166                           
  2167                           ; BSR set to: 1
  2168                           ;servo.c: 55: smallest_ind = b;
  2169  00019A  C167  F163         	movff	setAngle@b,setAngle@smallest_ind
  2170  00019E  C168  F164         	movff	setAngle@b+1,setAngle@smallest_ind+1
  2171  0001A2                     l4433:
  2172                           
  2173                           ; BSR set to: 1
  2174  0001A2  0101               	movlb	1	; () banked
  2175  0001A4  4B67               	infsnz	setAngle@b& (0+255),f,b
  2176  0001A6  2B68               	incf	(setAngle@b+1)& (0+255),f,b
  2177  0001A8                     l4435:
  2178                           
  2179                           ; BSR set to: 1
  2180  0001A8  0101               	movlb	1	; () banked
  2181  0001AA  51A9               	movf	_nServo& (0+255),w,b
  2182  0001AC  0101               	movlb	1	; () banked
  2183  0001AE  5D67               	subwf	setAngle@b& (0+255),w,b
  2184  0001B0  0101               	movlb	1	; () banked
  2185  0001B2  5168               	movf	(setAngle@b+1)& (0+255),w,b
  2186  0001B4  0A80               	xorlw	128
  2187  0001B6  0101               	movlb	1	; () banked
  2188  0001B8  6F33               	movwf	??_setAngle& (0+255),b
  2189  0001BA  0101               	movlb	1	; () banked
  2190  0001BC  51AA               	movf	(_nServo+1)& (0+255),w,b
  2191  0001BE  0A80               	xorlw	128
  2192  0001C0  0101               	movlb	1	; () banked
  2193  0001C2  5933               	subwfb	??_setAngle& (0+255),w,b
  2194  0001C4  A0D8               	btfss	status,0,c
  2195  0001C6  D792               	goto	l4425
  2196                           
  2197                           ; BSR set to: 1
  2198                           ;servo.c: 56: }
  2199                           ;servo.c: 57: }
  2200                           ;servo.c: 58: taken[smallest_ind] = 1;
  2201                           
  2202                           ; BSR set to: 1
  2203  0001C8  90D8               	bcf	status,0,c
  2204  0001CA  0101               	movlb	1	; () banked
  2205  0001CC  3563               	rlcf	setAngle@smallest_ind& (0+255),w,b
  2206  0001CE  6ED9               	movwf	fsr2l,c
  2207  0001D0  0101               	movlb	1	; () banked
  2208  0001D2  3564               	rlcf	(setAngle@smallest_ind+1)& (0+255),w,b
  2209  0001D4  6EDA               	movwf	fsr2h,c
  2210  0001D6  0E43               	movlw	low setAngle@taken
  2211  0001D8  26D9               	addwf	fsr2l,f,c
  2212  0001DA  0E01               	movlw	high setAngle@taken
  2213  0001DC  22DA               	addwfc	fsr2h,f,c
  2214  0001DE  0E01               	movlw	1
  2215  0001E0  6EDE               	movwf	postinc2,c
  2216  0001E2  0E00               	movlw	0
  2217  0001E4  6EDD               	movwf	postdec2,c
  2218                           
  2219                           ; BSR set to: 1
  2220                           ;servo.c: 59: order[ind++] = smallest_ind;
  2221  0001E6  90D8               	bcf	status,0,c
  2222  0001E8  0101               	movlb	1	; () banked
  2223  0001EA  355B               	rlcf	setAngle@ind& (0+255),w,b
  2224  0001EC  6ED9               	movwf	fsr2l,c
  2225  0001EE  0101               	movlb	1	; () banked
  2226  0001F0  355C               	rlcf	(setAngle@ind+1)& (0+255),w,b
  2227  0001F2  6EDA               	movwf	fsr2h,c
  2228  0001F4  0E91               	movlw	low _order
  2229  0001F6  26D9               	addwf	fsr2l,f,c
  2230  0001F8  0E01               	movlw	high _order
  2231  0001FA  22DA               	addwfc	fsr2h,f,c
  2232  0001FC  C163  FFDE         	movff	setAngle@smallest_ind,postinc2
  2233  000200  C164  FFDD         	movff	setAngle@smallest_ind+1,postdec2
  2234                           
  2235                           ; BSR set to: 1
  2236  000204  0101               	movlb	1	; () banked
  2237  000206  4B5B               	infsnz	setAngle@ind& (0+255),f,b
  2238  000208  2B5C               	incf	(setAngle@ind+1)& (0+255),f,b
  2239                           
  2240                           ; BSR set to: 1
  2241  00020A  0101               	movlb	1	; () banked
  2242  00020C  4B5D               	infsnz	setAngle@a_505& (0+255),f,b
  2243  00020E  2B5E               	incf	(setAngle@a_505+1)& (0+255),f,b
  2244  000210                     l4445:
  2245                           
  2246                           ; BSR set to: 1
  2247  000210  0101               	movlb	1	; () banked
  2248  000212  51A9               	movf	_nServo& (0+255),w,b
  2249  000214  0101               	movlb	1	; () banked
  2250  000216  5D5D               	subwf	setAngle@a_505& (0+255),w,b
  2251  000218  0101               	movlb	1	; () banked
  2252  00021A  515E               	movf	(setAngle@a_505+1)& (0+255),w,b
  2253  00021C  0A80               	xorlw	128
  2254  00021E  0101               	movlb	1	; () banked
  2255  000220  6F33               	movwf	??_setAngle& (0+255),b
  2256  000222  0101               	movlb	1	; () banked
  2257  000224  51AA               	movf	(_nServo+1)& (0+255),w,b
  2258  000226  0A80               	xorlw	128
  2259  000228  0101               	movlb	1	; () banked
  2260  00022A  5933               	subwfb	??_setAngle& (0+255),w,b
  2261  00022C  A0D8               	btfss	status,0,c
  2262  00022E  D74C               	goto	l4421
  2263                           
  2264                           ; BSR set to: 1
  2265                           ;servo.c: 60: }
  2266                           ;servo.c: 63: int prev = 0;
  2267                           
  2268                           ; BSR set to: 1
  2269  000230  0E00               	movlw	0
  2270  000232  0101               	movlb	1	; () banked
  2271  000234  6F60               	movwf	(setAngle@prev+1)& (0+255),b
  2272  000236  0E00               	movlw	0
  2273  000238  6F5F               	movwf	setAngle@prev& (0+255),b
  2274                           
  2275                           ;servo.c: 64: for(int a = 0; a < nServo; a++){
  2276  00023A  0E00               	movlw	0
  2277  00023C  0101               	movlb	1	; () banked
  2278  00023E  6F66               	movwf	(setAngle@a_510+1)& (0+255),b
  2279  000240  0E00               	movlw	0
  2280  000242  6F65               	movwf	setAngle@a_510& (0+255),b
  2281  000244  D097               	goto	l4453
  2282  000246                     l4449:
  2283                           
  2284                           ; BSR set to: 1
  2285                           ;servo.c: 65: sequence[a] = pulse[order[a]] - prev;
  2286  000246  90D8               	bcf	status,0,c
  2287  000248  0101               	movlb	1	; () banked
  2288  00024A  3565               	rlcf	setAngle@a_510& (0+255),w,b
  2289  00024C  6ED9               	movwf	fsr2l,c
  2290  00024E  0101               	movlb	1	; () banked
  2291  000250  3566               	rlcf	(setAngle@a_510+1)& (0+255),w,b
  2292  000252  6EDA               	movwf	fsr2h,c
  2293  000254  0E91               	movlw	low _order
  2294  000256  26D9               	addwf	fsr2l,f,c
  2295  000258  0E01               	movlw	high _order
  2296  00025A  22DA               	addwfc	fsr2h,f,c
  2297  00025C  CFDE F133          	movff	postinc2,??_setAngle
  2298  000260  CFDD F134          	movff	postdec2,??_setAngle+1
  2299  000264  0101               	movlb	1	; () banked
  2300  000266  90D8               	bcf	status,0,c
  2301  000268  3733               	rlcf	??_setAngle& (0+255),f,b
  2302  00026A  3734               	rlcf	(??_setAngle+1)& (0+255),f,b
  2303  00026C  0101               	movlb	1	; () banked
  2304  00026E  90D8               	bcf	status,0,c
  2305  000270  3733               	rlcf	??_setAngle& (0+255),f,b
  2306  000272  3734               	rlcf	(??_setAngle+1)& (0+255),f,b
  2307  000274  0E71               	movlw	low _pulse
  2308  000276  0101               	movlb	1	; () banked
  2309  000278  2533               	addwf	??_setAngle& (0+255),w,b
  2310  00027A  6ED9               	movwf	fsr2l,c
  2311  00027C  0E01               	movlw	high _pulse
  2312  00027E  0101               	movlb	1	; () banked
  2313  000280  2134               	addwfc	(??_setAngle+1)& (0+255),w,b
  2314  000282  6EDA               	movwf	fsr2h,c
  2315  000284  CFDE F135          	movff	postinc2,??_setAngle+2
  2316  000288  CFDE F136          	movff	postinc2,??_setAngle+3
  2317  00028C  CFDE F137          	movff	postinc2,??_setAngle+4
  2318  000290  CFDE F138          	movff	postinc2,??_setAngle+5
  2319  000294  C15F  F139         	movff	setAngle@prev,??_setAngle+6
  2320  000298  C160  F13A         	movff	setAngle@prev+1,??_setAngle+7
  2321  00029C  0E00               	movlw	0
  2322  00029E  0101               	movlb	1	; () banked
  2323  0002A0  BF3A               	btfsc	(??_setAngle+7)& (0+255),7,b
  2324  0002A2  0EFF               	movlw	255
  2325  0002A4  6F3B               	movwf	(??_setAngle+8)& (0+255),b
  2326  0002A6  6F3C               	movwf	(??_setAngle+9)& (0+255),b
  2327  0002A8  0101               	movlb	1	; () banked
  2328  0002AA  1F39               	comf	(??_setAngle+6)& (0+255),f,b
  2329  0002AC  1F3A               	comf	(??_setAngle+7)& (0+255),f,b
  2330  0002AE  1F3B               	comf	(??_setAngle+8)& (0+255),f,b
  2331  0002B0  1F3C               	comf	(??_setAngle+9)& (0+255),f,b
  2332  0002B2  2B39               	incf	(??_setAngle+6)& (0+255),f,b
  2333  0002B4  0E00               	movlw	0
  2334  0002B6  233A               	addwfc	(??_setAngle+7)& (0+255),f,b
  2335  0002B8  233B               	addwfc	(??_setAngle+8)& (0+255),f,b
  2336  0002BA  233C               	addwfc	(??_setAngle+9)& (0+255),f,b
  2337  0002BC  0101               	movlb	1	; () banked
  2338  0002BE  5135               	movf	(??_setAngle+2)& (0+255),w,b
  2339  0002C0  0101               	movlb	1	; () banked
  2340  0002C2  2539               	addwf	(??_setAngle+6)& (0+255),w,b
  2341  0002C4  0101               	movlb	1	; () banked
  2342  0002C6  6F3D               	movwf	(??_setAngle+10)& (0+255),b
  2343  0002C8  0101               	movlb	1	; () banked
  2344  0002CA  5136               	movf	(??_setAngle+3)& (0+255),w,b
  2345  0002CC  0101               	movlb	1	; () banked
  2346  0002CE  213A               	addwfc	(??_setAngle+7)& (0+255),w,b
  2347  0002D0  0101               	movlb	1	; () banked
  2348  0002D2  6F3E               	movwf	(??_setAngle+11)& (0+255),b
  2349  0002D4  0101               	movlb	1	; () banked
  2350  0002D6  5137               	movf	(??_setAngle+4)& (0+255),w,b
  2351  0002D8  0101               	movlb	1	; () banked
  2352  0002DA  213B               	addwfc	(??_setAngle+8)& (0+255),w,b
  2353  0002DC  0101               	movlb	1	; () banked
  2354  0002DE  6F3F               	movwf	(??_setAngle+12)& (0+255),b
  2355  0002E0  0101               	movlb	1	; () banked
  2356  0002E2  5138               	movf	(??_setAngle+5)& (0+255),w,b
  2357  0002E4  0101               	movlb	1	; () banked
  2358  0002E6  213C               	addwfc	(??_setAngle+9)& (0+255),w,b
  2359  0002E8  0101               	movlb	1	; () banked
  2360  0002EA  6F40               	movwf	(??_setAngle+13)& (0+255),b
  2361  0002EC  0E81               	movlw	low _sequence
  2362  0002EE  0101               	movlb	1	; () banked
  2363  0002F0  6F41               	movwf	(??_setAngle+14)& (0+255),b
  2364  0002F2  0E01               	movlw	high _sequence
  2365  0002F4  0101               	movlb	1	; () banked
  2366  0002F6  6F42               	movwf	(??_setAngle+15)& (0+255),b
  2367  0002F8  90D8               	bcf	status,0,c
  2368  0002FA  0101               	movlb	1	; () banked
  2369  0002FC  3565               	rlcf	setAngle@a_510& (0+255),w,b
  2370  0002FE  6ED9               	movwf	fsr2l,c
  2371  000300  0101               	movlb	1	; () banked
  2372  000302  3566               	rlcf	(setAngle@a_510+1)& (0+255),w,b
  2373  000304  6EDA               	movwf	fsr2h,c
  2374  000306  90D8               	bcf	status,0,c
  2375  000308  36D9               	rlcf	fsr2l,f,c
  2376  00030A  36DA               	rlcf	fsr2h,f,c
  2377  00030C  0101               	movlb	1	; () banked
  2378  00030E  5141               	movf	(??_setAngle+14)& (0+255),w,b
  2379  000310  26D9               	addwf	fsr2l,f,c
  2380  000312  0101               	movlb	1	; () banked
  2381  000314  5142               	movf	(??_setAngle+15)& (0+255),w,b
  2382  000316  22DA               	addwfc	fsr2h,f,c
  2383  000318  C13D  FFDE         	movff	??_setAngle+10,postinc2
  2384  00031C  C13E  FFDE         	movff	??_setAngle+11,postinc2
  2385  000320  C13F  FFDE         	movff	??_setAngle+12,postinc2
  2386  000324  C140  FFDE         	movff	??_setAngle+13,postinc2
  2387                           
  2388                           ;servo.c: 66: prev = pulse[order[a]];
  2389  000328  90D8               	bcf	status,0,c
  2390  00032A  0101               	movlb	1	; () banked
  2391  00032C  3565               	rlcf	setAngle@a_510& (0+255),w,b
  2392  00032E  6ED9               	movwf	fsr2l,c
  2393  000330  0101               	movlb	1	; () banked
  2394  000332  3566               	rlcf	(setAngle@a_510+1)& (0+255),w,b
  2395  000334  6EDA               	movwf	fsr2h,c
  2396  000336  0E91               	movlw	low _order
  2397  000338  26D9               	addwf	fsr2l,f,c
  2398  00033A  0E01               	movlw	high _order
  2399  00033C  22DA               	addwfc	fsr2h,f,c
  2400  00033E  CFDE F133          	movff	postinc2,??_setAngle
  2401  000342  CFDD F134          	movff	postdec2,??_setAngle+1
  2402  000346  0101               	movlb	1	; () banked
  2403  000348  90D8               	bcf	status,0,c
  2404  00034A  3733               	rlcf	??_setAngle& (0+255),f,b
  2405  00034C  3734               	rlcf	(??_setAngle+1)& (0+255),f,b
  2406  00034E  0101               	movlb	1	; () banked
  2407  000350  90D8               	bcf	status,0,c
  2408  000352  3733               	rlcf	??_setAngle& (0+255),f,b
  2409  000354  3734               	rlcf	(??_setAngle+1)& (0+255),f,b
  2410  000356  0E71               	movlw	low _pulse
  2411  000358  0101               	movlb	1	; () banked
  2412  00035A  2533               	addwf	??_setAngle& (0+255),w,b
  2413  00035C  6ED9               	movwf	fsr2l,c
  2414  00035E  0E01               	movlw	high _pulse
  2415  000360  0101               	movlb	1	; () banked
  2416  000362  2134               	addwfc	(??_setAngle+1)& (0+255),w,b
  2417  000364  6EDA               	movwf	fsr2h,c
  2418  000366  CFDE F15F          	movff	postinc2,setAngle@prev
  2419  00036A  CFDD F160          	movff	postdec2,setAngle@prev+1
  2420                           
  2421                           ; BSR set to: 1
  2422  00036E  0101               	movlb	1	; () banked
  2423  000370  4B65               	infsnz	setAngle@a_510& (0+255),f,b
  2424  000372  2B66               	incf	(setAngle@a_510+1)& (0+255),f,b
  2425  000374                     l4453:
  2426                           
  2427                           ; BSR set to: 1
  2428  000374  0101               	movlb	1	; () banked
  2429  000376  51A9               	movf	_nServo& (0+255),w,b
  2430  000378  0101               	movlb	1	; () banked
  2431  00037A  5D65               	subwf	setAngle@a_510& (0+255),w,b
  2432  00037C  0101               	movlb	1	; () banked
  2433  00037E  5166               	movf	(setAngle@a_510+1)& (0+255),w,b
  2434  000380  0A80               	xorlw	128
  2435  000382  0101               	movlb	1	; () banked
  2436  000384  6F33               	movwf	??_setAngle& (0+255),b
  2437  000386  0101               	movlb	1	; () banked
  2438  000388  51AA               	movf	(_nServo+1)& (0+255),w,b
  2439  00038A  0A80               	xorlw	128
  2440  00038C  0101               	movlb	1	; () banked
  2441  00038E  5933               	subwfb	??_setAngle& (0+255),w,b
  2442  000390  A0D8               	btfss	status,0,c
  2443  000392  D759               	goto	l4449
  2444                           
  2445                           ; BSR set to: 1
  2446                           ;servo.c: 67: }
  2447                           ;servo.c: 68: sequence[nServo] = 50000;
  2448                           
  2449                           ; BSR set to: 1
  2450  000394  0E81               	movlw	low _sequence
  2451  000396  0101               	movlb	1	; () banked
  2452  000398  6F33               	movwf	??_setAngle& (0+255),b
  2453  00039A  0E01               	movlw	high _sequence
  2454  00039C  0101               	movlb	1	; () banked
  2455  00039E  6F34               	movwf	(??_setAngle+1)& (0+255),b
  2456  0003A0  90D8               	bcf	status,0,c
  2457  0003A2  0101               	movlb	1	; () banked
  2458  0003A4  35A9               	rlcf	_nServo& (0+255),w,b
  2459  0003A6  6ED9               	movwf	fsr2l,c
  2460  0003A8  0101               	movlb	1	; () banked
  2461  0003AA  35AA               	rlcf	(_nServo+1)& (0+255),w,b
  2462  0003AC  6EDA               	movwf	fsr2h,c
  2463  0003AE  90D8               	bcf	status,0,c
  2464  0003B0  36D9               	rlcf	fsr2l,f,c
  2465  0003B2  36DA               	rlcf	fsr2h,f,c
  2466  0003B4  0101               	movlb	1	; () banked
  2467  0003B6  5133               	movf	??_setAngle& (0+255),w,b
  2468  0003B8  26D9               	addwf	fsr2l,f,c
  2469  0003BA  0101               	movlb	1	; () banked
  2470  0003BC  5134               	movf	(??_setAngle+1)& (0+255),w,b
  2471  0003BE  22DA               	addwfc	fsr2h,f,c
  2472  0003C0  0E50               	movlw	80
  2473  0003C2  6EDE               	movwf	postinc2,c
  2474  0003C4  0EC3               	movlw	195
  2475  0003C6  6EDE               	movwf	postinc2,c
  2476  0003C8  0E00               	movlw	0
  2477  0003CA  6EDE               	movwf	postinc2,c
  2478  0003CC  0E00               	movlw	0
  2479  0003CE  6EDD               	movwf	postdec2,c
  2480                           
  2481                           ; BSR set to: 1
  2482                           ;servo.c: 70: lcdClear();
  2483  0003D0  EC96  F014         	call	_lcdClear	;wreg free
  2484                           
  2485                           ;servo.c: 71: printf("%ld %ld %ld %ld\n",pulse[0],pulse[1],pulse[2],pulse[3]);
  2486  0003D4  0ECD               	movlw	low STR_3
  2487  0003D6  0100               	movlb	0	; () banked
  2488  0003D8  6FBC               	movwf	printf@f& (0+255),b
  2489  0003DA  0EFF               	movlw	high STR_3
  2490  0003DC  0100               	movlb	0	; () banked
  2491  0003DE  6FBD               	movwf	(printf@f+1)& (0+255),b
  2492  0003E0  C171  F0BE         	movff	_pulse,?_printf+2
  2493  0003E4  C172  F0BF         	movff	_pulse+1,?_printf+3
  2494  0003E8  C173  F0C0         	movff	_pulse+2,?_printf+4
  2495  0003EC  C174  F0C1         	movff	_pulse+3,?_printf+5
  2496  0003F0  C175  F0C2         	movff	_pulse+4,?_printf+6
  2497  0003F4  C176  F0C3         	movff	_pulse+5,?_printf+7
  2498  0003F8  C177  F0C4         	movff	_pulse+6,?_printf+8
  2499  0003FC  C178  F0C5         	movff	_pulse+7,?_printf+9
  2500  000400  C179  F0C6         	movff	_pulse+8,?_printf+10
  2501  000404  C17A  F0C7         	movff	_pulse+9,?_printf+11
  2502  000408  C17B  F0C8         	movff	_pulse+10,?_printf+12
  2503  00040C  C17C  F0C9         	movff	_pulse+11,?_printf+13
  2504  000410  C17D  F0CA         	movff	_pulse+12,?_printf+14
  2505  000414  C17E  F0CB         	movff	_pulse+13,?_printf+15
  2506  000418  C17F  F0CC         	movff	_pulse+14,?_printf+16
  2507  00041C  C180  F0CD         	movff	_pulse+15,?_printf+17
  2508  000420  EC2F  F004         	call	_printf	;wreg free
  2509                           
  2510                           ;servo.c: 72: printf("%ld %ld %ld %ld",sequence[0],sequence[1],sequence[2],sequence[3]);
  2511  000424  0EDE               	movlw	low STR_4
  2512  000426  0100               	movlb	0	; () banked
  2513  000428  6FBC               	movwf	printf@f& (0+255),b
  2514  00042A  0EFF               	movlw	high STR_4
  2515  00042C  0100               	movlb	0	; () banked
  2516  00042E  6FBD               	movwf	(printf@f+1)& (0+255),b
  2517  000430  C181  F0BE         	movff	_sequence,?_printf+2
  2518  000434  C182  F0BF         	movff	_sequence+1,?_printf+3
  2519  000438  C183  F0C0         	movff	_sequence+2,?_printf+4
  2520  00043C  C184  F0C1         	movff	_sequence+3,?_printf+5
  2521  000440  C185  F0C2         	movff	_sequence+4,?_printf+6
  2522  000444  C186  F0C3         	movff	_sequence+5,?_printf+7
  2523  000448  C187  F0C4         	movff	_sequence+6,?_printf+8
  2524  00044C  C188  F0C5         	movff	_sequence+7,?_printf+9
  2525  000450  C189  F0C6         	movff	_sequence+8,?_printf+10
  2526  000454  C18A  F0C7         	movff	_sequence+9,?_printf+11
  2527  000458  C18B  F0C8         	movff	_sequence+10,?_printf+12
  2528  00045C  C18C  F0C9         	movff	_sequence+11,?_printf+13
  2529  000460  C18D  F0CA         	movff	_sequence+12,?_printf+14
  2530  000464  C18E  F0CB         	movff	_sequence+13,?_printf+15
  2531  000468  C18F  F0CC         	movff	_sequence+14,?_printf+16
  2532  00046C  C190  F0CD         	movff	_sequence+15,?_printf+17
  2533  000470  EC2F  F004         	call	_printf	;wreg free
  2534  000474  0012               	return		;funcret
  2535  000476                     __end_of_setAngle:
  2536                           	opt stack 0
  2537                           tblptru	equ	0xFF8
  2538                           tblptrh	equ	0xFF7
  2539                           tblptrl	equ	0xFF6
  2540                           tablat	equ	0xFF5
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           postdec1	equ	0xFE5
  2544                           fsr1l	equ	0xFE1
  2545                           postinc2	equ	0xFDE
  2546                           postdec2	equ	0xFDD
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _printf *****************
  2552 ;; Defined at:
  2553 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  f               2   60[BANK0 ] PTR const unsigned char 
  2556 ;;		 -> STR_16(17), STR_15(18), STR_14(17), STR_13(18), 
  2557 ;;		 -> STR_12(17), STR_11(19), STR_10(17), STR_9(18), 
  2558 ;;		 -> STR_8(17), STR_7(18), STR_6(17), STR_5(18), 
  2559 ;;		 -> STR_4(16), STR_3(17), STR_2(9), STR_1(8), 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  idx             1    0[BANK1 ] unsigned char 
  2562 ;;  val             4    5[BANK1 ] unsigned long 
  2563 ;;  tmpval          4    0        struct .
  2564 ;;  cp              3    0        PTR const unsigned char 
  2565 ;;  ap              2    3[BANK1 ] PTR void [1]
  2566 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2567 ;;  prec            2    1[BANK1 ] int 
  2568 ;;  len             2    0        unsigned int 
  2569 ;;  c               1   10[BANK1 ] char 
  2570 ;;  flag            1    9[BANK1 ] unsigned char 
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  2   60[BANK0 ] int 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2580 ;;      Params:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2581 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2582 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Totals:         0      20      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;Total ram usage:       31 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:   11
  2587 ;; This function calls:
  2588 ;;		___lldiv
  2589 ;;		___llmod
  2590 ;;		_putch
  2591 ;; This function is called by:
  2592 ;;		_setAngle
  2593 ;;		_testFrequency
  2594 ;;		_dateTime
  2595 ;;		_mainMenu
  2596 ;;		_runSelect
  2597 ;;		_runMenu
  2598 ;;		_runTime
  2599 ;;		_runStats
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text5
  2604  00085E                     __ptext5:
  2605                           	opt stack 0
  2606  00085E                     _printf:
  2607                           	opt stack 17
  2608                           
  2609                           ;doprnt.c: 466: va_list ap;
  2610                           ;doprnt.c: 499: signed char c;
  2611                           ;doprnt.c: 504: int prec;
  2612                           ;doprnt.c: 508: unsigned char flag;
  2613                           ;doprnt.c: 523: union {
  2614                           ;doprnt.c: 524: unsigned long vd;
  2615                           ;doprnt.c: 525: double integ;
  2616                           ;doprnt.c: 526: } tmpval;
  2617                           ;doprnt.c: 528: unsigned long val;
  2618                           ;doprnt.c: 529: unsigned len;
  2619                           ;doprnt.c: 530: const char * cp;
  2620                           ;doprnt.c: 533: *ap = __va_start();
  2621                           
  2622                           ;incstack = 0
  2623  00085E  0EBE               	movlw	low (?_printf+2)
  2624  000860  0101               	movlb	1	; () banked
  2625  000862  6F03               	movwf	printf@ap& (0+255),b
  2626  000864  0E00               	movlw	high (?_printf+2)
  2627  000866  0101               	movlb	1	; () banked
  2628  000868  6F04               	movwf	(printf@ap+1)& (0+255),b
  2629                           
  2630                           ;doprnt.c: 536: while(c = *f++) {
  2631  00086A  D19D               	goto	l3385
  2632  00086C                     l3289:
  2633                           
  2634                           ; BSR set to: 1
  2635                           ;doprnt.c: 538: if(c != '%')
  2636  00086C  0E25               	movlw	37
  2637  00086E  0101               	movlb	1	; () banked
  2638  000870  190A               	xorwf	printf@c& (0+255),w,b
  2639  000872  B4D8               	btfsc	status,2,c
  2640  000874  D005               	goto	l3293
  2641                           
  2642                           ; BSR set to: 1
  2643                           ;doprnt.c: 540: {
  2644                           ;doprnt.c: 541: (putch(c) );
  2645  000876  0101               	movlb	1	; () banked
  2646  000878  510A               	movf	printf@c& (0+255),w,b
  2647  00087A  EC58  F014         	call	_putch
  2648                           
  2649                           ;doprnt.c: 542: continue;
  2650  00087E  D193               	goto	l3385
  2651  000880                     l3293:
  2652                           
  2653                           ;doprnt.c: 543: }
  2654                           ;doprnt.c: 548: flag = 0;
  2655  000880  0E00               	movlw	0
  2656  000882  0101               	movlb	1	; () banked
  2657  000884  6F09               	movwf	printf@flag& (0+255),b
  2658                           
  2659                           ; BSR set to: 1
  2660                           ;doprnt.c: 635: switch(c = *f++) {
  2661                           
  2662                           ;doprnt.c: 633: loop:
  2663  000886  D017               	goto	l3307
  2664  000888                     l3295:
  2665                           
  2666                           ; BSR set to: 1
  2667                           ;doprnt.c: 643: flag |= 0x10;
  2668  000888  0101               	movlb	1	; () banked
  2669  00088A  8909               	bsf	printf@flag& (0+255),4,b
  2670                           
  2671                           ;doprnt.c: 644: goto loop;
  2672  00088C  D014               	goto	l3307
  2673  00088E                     l3297:
  2674                           
  2675                           ; BSR set to: 1
  2676                           ;doprnt.c: 721: flag |= 0x80;
  2677  00088E  0101               	movlb	1	; () banked
  2678  000890  8F09               	bsf	printf@flag& (0+255),7,b
  2679                           
  2680                           ;doprnt.c: 723: break;
  2681  000892  D030               	goto	l551
  2682  000894                     l3299:
  2683                           
  2684                           ; BSR set to: 1
  2685                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2686  000894  C103  FFD9         	movff	printf@ap,fsr2l
  2687  000898  C104  FFDA         	movff	printf@ap+1,fsr2h
  2688  00089C  50DF               	movf	indf2,w,c
  2689  00089E  0101               	movlb	1	; () banked
  2690  0008A0  6F0A               	movwf	printf@c& (0+255),b
  2691                           
  2692                           ; BSR set to: 1
  2693  0008A2  0E02               	movlw	2
  2694  0008A4  0101               	movlb	1	; () banked
  2695  0008A6  2703               	addwf	printf@ap& (0+255),f,b
  2696  0008A8  0E00               	movlw	0
  2697  0008AA  2304               	addwfc	(printf@ap+1)& (0+255),f,b
  2698  0008AC                     l3303:
  2699                           
  2700                           ; BSR set to: 1
  2701                           ;doprnt.c: 809: (putch(c) );
  2702  0008AC  0101               	movlb	1	; () banked
  2703  0008AE  510A               	movf	printf@c& (0+255),w,b
  2704  0008B0  EC58  F014         	call	_putch
  2705                           
  2706                           ;doprnt.c: 810: continue;
  2707  0008B4  D178               	goto	l3385
  2708  0008B6                     l3307:
  2709  0008B6  C0BC  FFF6         	movff	printf@f,tblptrl
  2710  0008BA  C0BD  FFF7         	movff	printf@f+1,tblptrh
  2711  0008BE  0100               	movlb	0	; () banked
  2712  0008C0  4BBC               	infsnz	printf@f& (0+255),f,b
  2713  0008C2  2BBD               	incf	(printf@f+1)& (0+255),f,b
  2714  0008C4                     	if	0	;tblptru may be non-zero
  2715  0008C4                     	endif
  2716  0008C4                     	if	0	;tblptru may be non-zero
  2717  0008C4                     	endif
  2718  0008C4  0008               	tblrd		*
  2719  0008C6  CFF5 F10A          	movff	tablat,printf@c
  2720  0008CA  0101               	movlb	1	; () banked
  2721  0008CC  510A               	movf	printf@c& (0+255),w,b
  2722                           
  2723                           ; Switch size 1, requested type "space"
  2724                           ; Number of cases is 6, Range of values is 0 to 120
  2725                           ; switch strategies available:
  2726                           ; Name         Instructions Cycles
  2727                           ; simple_byte           19    10 (average)
  2728                           ;	Chosen strategy is simple_byte
  2729  0008CE  0A00               	xorlw	0	; case 0
  2730  0008D0  B4D8               	btfsc	status,2,c
  2731  0008D2  0012               	return	
  2732  0008D4  0A63               	xorlw	99	; case 99
  2733  0008D6  B4D8               	btfsc	status,2,c
  2734  0008D8  D7DD               	goto	l3299
  2735  0008DA  0A07               	xorlw	7	; case 100
  2736  0008DC  B4D8               	btfsc	status,2,c
  2737  0008DE  D00A               	goto	l551
  2738  0008E0  0A0D               	xorlw	13	; case 105
  2739  0008E2  B4D8               	btfsc	status,2,c
  2740  0008E4  D007               	goto	l551
  2741  0008E6  0A05               	xorlw	5	; case 108
  2742  0008E8  B4D8               	btfsc	status,2,c
  2743  0008EA  D7CE               	goto	l3295
  2744  0008EC  0A14               	xorlw	20	; case 120
  2745  0008EE  B4D8               	btfsc	status,2,c
  2746  0008F0  D7CE               	goto	l3297
  2747  0008F2  D7DC               	goto	l3303
  2748  0008F4                     l551:
  2749                           
  2750                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2751  0008F4  0101               	movlb	1	; () banked
  2752  0008F6  BF09               	btfsc	printf@flag& (0+255),7,b
  2753  0008F8  D034               	goto	l555
  2754                           
  2755                           ; BSR set to: 1
  2756                           ;doprnt.c: 1253: {
  2757                           ;doprnt.c: 1255: if(flag & 0x10)
  2758  0008FA  0101               	movlb	1	; () banked
  2759  0008FC  A909               	btfss	printf@flag& (0+255),4,b
  2760  0008FE  D00E               	goto	l3315
  2761                           
  2762                           ; BSR set to: 1
  2763                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2764  000900  C103  FFD9         	movff	printf@ap,fsr2l
  2765  000904  C104  FFDA         	movff	printf@ap+1,fsr2h
  2766  000908  CFDE F105          	movff	postinc2,printf@val
  2767  00090C  CFDE F106          	movff	postinc2,printf@val+1
  2768  000910  CFDE F107          	movff	postinc2,printf@val+2
  2769  000914  CFDE F108          	movff	postinc2,printf@val+3
  2770                           
  2771                           ; BSR set to: 1
  2772  000918  0E04               	movlw	4
  2773  00091A  D00F               	goto	L1
  2774  00091C                     l3315:
  2775                           
  2776                           ; BSR set to: 1
  2777                           ;doprnt.c: 1257: else
  2778                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2779  00091C  C103  FFD9         	movff	printf@ap,fsr2l
  2780  000920  C104  FFDA         	movff	printf@ap+1,fsr2h
  2781  000924  CFDE F105          	movff	postinc2,printf@val
  2782  000928  CFDD F106          	movff	postdec2,printf@val+1
  2783  00092C  0101               	movlb	1	; () banked
  2784  00092E  0E00               	movlw	0
  2785  000930  BF06               	btfsc	(printf@val+1)& (0+255),7,b
  2786  000932  0EFF               	movlw	-1
  2787  000934  6F07               	movwf	(printf@val+2)& (0+255),b
  2788  000936  6F08               	movwf	(printf@val+3)& (0+255),b
  2789                           
  2790                           ; BSR set to: 1
  2791  000938  0E02               	movlw	2
  2792  00093A                     L1:
  2793  00093A  0101               	movlb	1	; () banked
  2794  00093C  2703               	addwf	printf@ap& (0+255),f,b
  2795  00093E  0E00               	movlw	0
  2796  000940  2304               	addwfc	(printf@ap+1)& (0+255),f,b
  2797                           
  2798                           ; BSR set to: 1
  2799                           ;doprnt.c: 1261: if((long)val < 0) {
  2800                           
  2801                           ; BSR set to: 1
  2802  000942  0101               	movlb	1	; () banked
  2803  000944  AF08               	btfss	(printf@val+3)& (0+255),7,b
  2804  000946  D07F               	goto	l3363
  2805                           
  2806                           ; BSR set to: 1
  2807                           ;doprnt.c: 1262: flag |= 0x03;
  2808  000948  0E03               	movlw	3
  2809  00094A  0101               	movlb	1	; () banked
  2810  00094C  1309               	iorwf	printf@flag& (0+255),f,b
  2811                           
  2812                           ; BSR set to: 1
  2813                           ;doprnt.c: 1263: val = -val;
  2814  00094E  0101               	movlb	1	; () banked
  2815  000950  1F08               	comf	(printf@val+3)& (0+255),f,b
  2816  000952  1F07               	comf	(printf@val+2)& (0+255),f,b
  2817  000954  1F06               	comf	(printf@val+1)& (0+255),f,b
  2818  000956  6D05               	negf	printf@val& (0+255),b
  2819  000958  0E00               	movlw	0
  2820  00095A  2306               	addwfc	(printf@val+1)& (0+255),f,b
  2821  00095C  2307               	addwfc	(printf@val+2)& (0+255),f,b
  2822  00095E  2308               	addwfc	(printf@val+3)& (0+255),f,b
  2823                           
  2824                           ; BSR set to: 1
  2825                           ;doprnt.c: 1264: }
  2826                           ;doprnt.c: 1266: }
  2827  000960  D072               	goto	l3363
  2828  000962                     l555:
  2829                           
  2830                           ; BSR set to: 1
  2831                           ;doprnt.c: 1268: else
  2832                           ;doprnt.c: 1273: {
  2833                           ;doprnt.c: 1281: if(flag & 0x10)
  2834  000962  0101               	movlb	1	; () banked
  2835  000964  A909               	btfss	printf@flag& (0+255),4,b
  2836  000966  D00E               	goto	l3329
  2837                           
  2838                           ; BSR set to: 1
  2839                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2840  000968  C103  FFD9         	movff	printf@ap,fsr2l
  2841  00096C  C104  FFDA         	movff	printf@ap+1,fsr2h
  2842  000970  CFDE F105          	movff	postinc2,printf@val
  2843  000974  CFDE F106          	movff	postinc2,printf@val+1
  2844  000978  CFDE F107          	movff	postinc2,printf@val+2
  2845  00097C  CFDE F108          	movff	postinc2,printf@val+3
  2846                           
  2847                           ; BSR set to: 1
  2848  000980  0E04               	movlw	4
  2849  000982  D010               	goto	L2
  2850  000984                     l3329:
  2851                           
  2852                           ; BSR set to: 1
  2853                           ;doprnt.c: 1283: else
  2854                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2855  000984  C103  FFD9         	movff	printf@ap,fsr2l
  2856  000988  C104  FFDA         	movff	printf@ap+1,fsr2h
  2857  00098C  CFDE F0CE          	movff	postinc2,??_printf
  2858  000990  CFDD F0CF          	movff	postdec2,??_printf+1
  2859  000994  C0CE  F105         	movff	??_printf,printf@val
  2860  000998  C0CF  F106         	movff	??_printf+1,printf@val+1
  2861  00099C  0101               	movlb	1	; () banked
  2862  00099E  6B07               	clrf	(printf@val+2)& (0+255),b
  2863  0009A0  6B08               	clrf	(printf@val+3)& (0+255),b
  2864                           
  2865                           ; BSR set to: 1
  2866  0009A2  0E02               	movlw	2
  2867  0009A4                     L2:
  2868  0009A4  0101               	movlb	1	; () banked
  2869  0009A6  2703               	addwf	printf@ap& (0+255),f,b
  2870  0009A8  0E00               	movlw	0
  2871  0009AA  2304               	addwfc	(printf@ap+1)& (0+255),f,b
  2872                           
  2873                           ; BSR set to: 1
  2874                           ;doprnt.c: 1287: }
  2875                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2876                           
  2877                           ; BSR set to: 1
  2878  0009AC  D04C               	goto	l3363
  2879  0009AE                     l3333:
  2880                           
  2881                           ; BSR set to: 1
  2882                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2883  0009AE  0E01               	movlw	1
  2884  0009B0  0101               	movlb	1	; () banked
  2885  0009B2  6F0A               	movwf	printf@c& (0+255),b
  2886  0009B4                     l3335:
  2887                           
  2888                           ; BSR set to: 1
  2889  0009B4  0E0A               	movlw	10
  2890  0009B6  0101               	movlb	1	; () banked
  2891  0009B8  190A               	xorwf	printf@c& (0+255),w,b
  2892  0009BA  B4D8               	btfsc	status,2,c
  2893  0009BC  D04D               	goto	l3365
  2894                           
  2895                           ; BSR set to: 1
  2896                           ;doprnt.c: 1306: if(val < dpowers[c])
  2897                           
  2898                           ; BSR set to: 1
  2899                           
  2900                           ; BSR set to: 1
  2901  0009BE  0101               	movlb	1	; () banked
  2902  0009C0  510A               	movf	printf@c& (0+255),w,b
  2903  0009C2  0D04               	mullw	4
  2904  0009C4  0E89               	movlw	low _dpowers
  2905  0009C6  24F3               	addwf	prodl,w,c
  2906  0009C8  6EF6               	movwf	tblptrl,c
  2907  0009CA  0EFE               	movlw	high _dpowers
  2908  0009CC  20F4               	addwfc	prodh,w,c
  2909  0009CE  6EF7               	movwf	tblptrh,c
  2910  0009D0                     	if	0	;There are less than 3 active tblptr bytes
  2911  0009D0                     	endif
  2912  0009D0  0009               	tblrd		*+
  2913  0009D2  50F5               	movf	tablat,w,c
  2914  0009D4  0101               	movlb	1	; () banked
  2915  0009D6  5D05               	subwf	printf@val& (0+255),w,b
  2916  0009D8  0009               	tblrd		*+
  2917  0009DA  50F5               	movf	tablat,w,c
  2918  0009DC  0101               	movlb	1	; () banked
  2919  0009DE  5906               	subwfb	(printf@val+1)& (0+255),w,b
  2920  0009E0  0009               	tblrd		*+
  2921  0009E2  50F5               	movf	tablat,w,c
  2922  0009E4  0101               	movlb	1	; () banked
  2923  0009E6  5907               	subwfb	(printf@val+2)& (0+255),w,b
  2924  0009E8  0009               	tblrd		*+
  2925  0009EA  50F5               	movf	tablat,w,c
  2926  0009EC  0101               	movlb	1	; () banked
  2927  0009EE  5908               	subwfb	(printf@val+3)& (0+255),w,b
  2928  0009F0  A0D8               	btfss	status,0,c
  2929  0009F2  D032               	goto	l3365
  2930                           
  2931                           ; BSR set to: 1
  2932                           
  2933                           ; BSR set to: 1
  2934                           
  2935                           ; BSR set to: 1
  2936                           ;doprnt.c: 1307: break;
  2937  0009F4  0101               	movlb	1	; () banked
  2938  0009F6  2B0A               	incf	printf@c& (0+255),f,b
  2939  0009F8  D7DD               	goto	l3335
  2940  0009FA                     l3347:
  2941                           
  2942                           ; BSR set to: 1
  2943                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2944  0009FA  0E01               	movlw	1
  2945  0009FC  0101               	movlb	1	; () banked
  2946  0009FE  6F0A               	movwf	printf@c& (0+255),b
  2947  000A00                     l3349:
  2948                           
  2949                           ; BSR set to: 1
  2950  000A00  0E08               	movlw	8
  2951  000A02  0101               	movlb	1	; () banked
  2952  000A04  190A               	xorwf	printf@c& (0+255),w,b
  2953  000A06  B4D8               	btfsc	status,2,c
  2954  000A08  D027               	goto	l3365
  2955                           
  2956                           ; BSR set to: 1
  2957                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2958                           
  2959                           ; BSR set to: 1
  2960                           
  2961                           ; BSR set to: 1
  2962  000A0A  0101               	movlb	1	; () banked
  2963  000A0C  510A               	movf	printf@c& (0+255),w,b
  2964  000A0E  0D04               	mullw	4
  2965  000A10  0EB1               	movlw	low _hexpowers
  2966  000A12  24F3               	addwf	prodl,w,c
  2967  000A14  6EF6               	movwf	tblptrl,c
  2968  000A16  0EFE               	movlw	high _hexpowers
  2969  000A18  20F4               	addwfc	prodh,w,c
  2970  000A1A  6EF7               	movwf	tblptrh,c
  2971  000A1C                     	if	0	;There are less than 3 active tblptr bytes
  2972  000A1C                     	endif
  2973  000A1C  0009               	tblrd		*+
  2974  000A1E  50F5               	movf	tablat,w,c
  2975  000A20  0101               	movlb	1	; () banked
  2976  000A22  5D05               	subwf	printf@val& (0+255),w,b
  2977  000A24  0009               	tblrd		*+
  2978  000A26  50F5               	movf	tablat,w,c
  2979  000A28  0101               	movlb	1	; () banked
  2980  000A2A  5906               	subwfb	(printf@val+1)& (0+255),w,b
  2981  000A2C  0009               	tblrd		*+
  2982  000A2E  50F5               	movf	tablat,w,c
  2983  000A30  0101               	movlb	1	; () banked
  2984  000A32  5907               	subwfb	(printf@val+2)& (0+255),w,b
  2985  000A34  0009               	tblrd		*+
  2986  000A36  50F5               	movf	tablat,w,c
  2987  000A38  0101               	movlb	1	; () banked
  2988  000A3A  5908               	subwfb	(printf@val+3)& (0+255),w,b
  2989  000A3C  A0D8               	btfss	status,0,c
  2990  000A3E  D00C               	goto	l3365
  2991                           
  2992                           ; BSR set to: 1
  2993                           
  2994                           ; BSR set to: 1
  2995                           
  2996                           ; BSR set to: 1
  2997                           ;doprnt.c: 1318: break;
  2998  000A40  0101               	movlb	1	; () banked
  2999  000A42  2B0A               	incf	printf@c& (0+255),f,b
  3000  000A44  D7DD               	goto	l3349
  3001  000A46                     l3363:
  3002                           
  3003                           ; BSR set to: 1
  3004  000A46  0101               	movlb	1	; () banked
  3005  000A48  5109               	movf	printf@flag& (0+255),w,b
  3006  000A4A  0B80               	andlw	128
  3007                           
  3008                           ; Switch size 1, requested type "space"
  3009                           ; Number of cases is 2, Range of values is 0 to 128
  3010                           ; switch strategies available:
  3011                           ; Name         Instructions Cycles
  3012                           ; simple_byte            7     4 (average)
  3013                           ;	Chosen strategy is simple_byte
  3014  000A4C  0A00               	xorlw	0	; case 0
  3015  000A4E  B4D8               	btfsc	status,2,c
  3016  000A50  D7AE               	goto	l3333
  3017  000A52  0A80               	xorlw	128	; case 128
  3018  000A54  B4D8               	btfsc	status,2,c
  3019  000A56  D7D1               	goto	l3347
  3020  000A58                     l3365:
  3021                           
  3022                           ; BSR set to: 1
  3023                           ;doprnt.c: 1422: {
  3024                           ;doprnt.c: 1438: if(flag & 0x03)
  3025  000A58  C109  F0CE         	movff	printf@flag,??_printf
  3026  000A5C  0E03               	movlw	3
  3027  000A5E  0100               	movlb	0	; () banked
  3028  000A60  17CE               	andwf	??_printf& (0+255),f,b
  3029  000A62  B4D8               	btfsc	status,2,c
  3030  000A64  D003               	goto	l3369
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;doprnt.c: 1439: (putch('-') );
  3034  000A66  0E2D               	movlw	45
  3035  000A68  EC58  F014         	call	_putch
  3036  000A6C                     l3369:
  3037                           
  3038                           ;doprnt.c: 1469: }
  3039                           ;doprnt.c: 1472: prec = c;
  3040  000A6C  0101               	movlb	1	; () banked
  3041  000A6E  510A               	movf	printf@c& (0+255),w,b
  3042  000A70  0101               	movlb	1	; () banked
  3043  000A72  6F01               	movwf	printf@prec& (0+255),b
  3044  000A74  6B02               	clrf	(printf@prec+1)& (0+255),b
  3045  000A76  BF01               	btfsc	printf@prec& (0+255),7,b
  3046  000A78  0702               	decf	(printf@prec+1)& (0+255),f,b
  3047                           
  3048                           ;doprnt.c: 1474: while(prec--) {
  3049  000A7A  D08A               	goto	l3383
  3050  000A7C                     l3371:
  3051                           
  3052                           ; BSR set to: 1
  3053                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3054  000A7C  C101  F0CE         	movff	printf@prec,??_printf
  3055  000A80  C102  F0CF         	movff	printf@prec+1,??_printf+1
  3056  000A84  0100               	movlb	0	; () banked
  3057  000A86  90D8               	bcf	status,0,c
  3058  000A88  37CE               	rlcf	??_printf& (0+255),f,b
  3059  000A8A  37CF               	rlcf	(??_printf+1)& (0+255),f,b
  3060  000A8C  0100               	movlb	0	; () banked
  3061  000A8E  90D8               	bcf	status,0,c
  3062  000A90  37CE               	rlcf	??_printf& (0+255),f,b
  3063  000A92  37CF               	rlcf	(??_printf+1)& (0+255),f,b
  3064  000A94  0E89               	movlw	low _dpowers
  3065  000A96  0100               	movlb	0	; () banked
  3066  000A98  25CE               	addwf	??_printf& (0+255),w,b
  3067  000A9A  6EF6               	movwf	tblptrl,c
  3068  000A9C  0EFE               	movlw	high _dpowers
  3069  000A9E  21CF               	addwfc	(??_printf+1)& (0+255),w,b
  3070  000AA0  6EF7               	movwf	tblptrh,c
  3071  000AA2                     	if	0	;There are less than 3 active tblptr bytes
  3072  000AA2                     	endif
  3073  000AA2  0009               	tblrd		*+
  3074  000AA4  CFF5 F0AA          	movff	tablat,___lldiv@divisor
  3075  000AA8  0009               	tblrd		*+
  3076  000AAA  CFF5 F0AB          	movff	tablat,___lldiv@divisor+1
  3077  000AAE  0009               	tblrd		*+
  3078  000AB0  CFF5 F0AC          	movff	tablat,___lldiv@divisor+2
  3079  000AB4  000A               	tblrd		*-
  3080  000AB6  CFF5 F0AD          	movff	tablat,___lldiv@divisor+3
  3081  000ABA  C105  F0A6         	movff	printf@val,___lldiv@dividend
  3082  000ABE  C106  F0A7         	movff	printf@val+1,___lldiv@dividend+1
  3083  000AC2  C107  F0A8         	movff	printf@val+2,___lldiv@dividend+2
  3084  000AC6  C108  F0A9         	movff	printf@val+3,___lldiv@dividend+3
  3085  000ACA  ECFA  F00F         	call	___lldiv	;wreg free
  3086  000ACE  C0A6  F0B3         	movff	?___lldiv,___llmod@dividend
  3087  000AD2  C0A7  F0B4         	movff	?___lldiv+1,___llmod@dividend+1
  3088  000AD6  C0A8  F0B5         	movff	?___lldiv+2,___llmod@dividend+2
  3089  000ADA  C0A9  F0B6         	movff	?___lldiv+3,___llmod@dividend+3
  3090  000ADE  0E0A               	movlw	10
  3091  000AE0  0100               	movlb	0	; () banked
  3092  000AE2  6FB7               	movwf	___llmod@divisor& (0+255),b
  3093  000AE4  0E00               	movlw	0
  3094  000AE6  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
  3095  000AE8  0E00               	movlw	0
  3096  000AEA  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  3097  000AEC  0E00               	movlw	0
  3098  000AEE  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  3099  000AF0  EC54  F011         	call	___llmod	;wreg free
  3100  000AF4  0100               	movlb	0	; () banked
  3101  000AF6  51B3               	movf	?___llmod& (0+255),w,b
  3102  000AF8  0F30               	addlw	48
  3103  000AFA  0101               	movlb	1	; () banked
  3104  000AFC  6F0A               	movwf	printf@c& (0+255),b
  3105                           
  3106                           ;doprnt.c: 1491: break;
  3107  000AFE  D044               	goto	l3381
  3108  000B00                     l3373:
  3109                           
  3110                           ; BSR set to: 1
  3111                           ;doprnt.c: 1499: {
  3112                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3113  000B00  C105  F0A6         	movff	printf@val,___lldiv@dividend
  3114  000B04  C106  F0A7         	movff	printf@val+1,___lldiv@dividend+1
  3115  000B08  C107  F0A8         	movff	printf@val+2,___lldiv@dividend+2
  3116  000B0C  C108  F0A9         	movff	printf@val+3,___lldiv@dividend+3
  3117  000B10  C101  F0CE         	movff	printf@prec,??_printf
  3118  000B14  C102  F0CF         	movff	printf@prec+1,??_printf+1
  3119  000B18  0100               	movlb	0	; () banked
  3120  000B1A  90D8               	bcf	status,0,c
  3121  000B1C  37CE               	rlcf	??_printf& (0+255),f,b
  3122  000B1E  37CF               	rlcf	(??_printf+1)& (0+255),f,b
  3123  000B20  0100               	movlb	0	; () banked
  3124  000B22  90D8               	bcf	status,0,c
  3125  000B24  37CE               	rlcf	??_printf& (0+255),f,b
  3126  000B26  37CF               	rlcf	(??_printf+1)& (0+255),f,b
  3127  000B28  0EB1               	movlw	low _hexpowers
  3128  000B2A  0100               	movlb	0	; () banked
  3129  000B2C  25CE               	addwf	??_printf& (0+255),w,b
  3130  000B2E  6EF6               	movwf	tblptrl,c
  3131  000B30  0EFE               	movlw	high _hexpowers
  3132  000B32  21CF               	addwfc	(??_printf+1)& (0+255),w,b
  3133  000B34  6EF7               	movwf	tblptrh,c
  3134  000B36                     	if	0	;There are less than 3 active tblptr bytes
  3135  000B36                     	endif
  3136  000B36  0009               	tblrd		*+
  3137  000B38  CFF5 F0AA          	movff	tablat,___lldiv@divisor
  3138  000B3C  0009               	tblrd		*+
  3139  000B3E  CFF5 F0AB          	movff	tablat,___lldiv@divisor+1
  3140  000B42  0009               	tblrd		*+
  3141  000B44  CFF5 F0AC          	movff	tablat,___lldiv@divisor+2
  3142  000B48  000A               	tblrd		*-
  3143  000B4A  CFF5 F0AD          	movff	tablat,___lldiv@divisor+3
  3144  000B4E  ECFA  F00F         	call	___lldiv	;wreg free
  3145  000B52  0100               	movlb	0	; () banked
  3146  000B54  51A6               	movf	?___lldiv& (0+255),w,b
  3147  000B56  0B0F               	andlw	15
  3148  000B58  0101               	movlb	1	; () banked
  3149  000B5A  6F00               	movwf	printf@idx& (0+255),b
  3150                           
  3151                           ; BSR set to: 1
  3152                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3153  000B5C  0101               	movlb	1	; () banked
  3154  000B5E  5100               	movf	printf@idx& (0+255),w,b
  3155  000B60  0D01               	mullw	1
  3156  000B62  0E56               	movlw	low STR_17
  3157  000B64  24F3               	addwf	prodl,w,c
  3158  000B66  6EF6               	movwf	tblptrl,c
  3159  000B68  0EFF               	movlw	high STR_17
  3160  000B6A  20F4               	addwfc	prodh,w,c
  3161  000B6C  6EF7               	movwf	tblptrh,c
  3162  000B6E                     	if	0	;There are less than 3 active tblptr bytes
  3163  000B6E                     	endif
  3164  000B6E  0008               	tblrd		*
  3165  000B70  CFF5 F10A          	movff	tablat,printf@c
  3166                           
  3167                           ; BSR set to: 1
  3168                           ;doprnt.c: 1523: }
  3169                           
  3170                           ;doprnt.c: 1508: }
  3171                           ;doprnt.c: 1510: break;
  3172  000B74  D009               	goto	l3381
  3173  000B76                     l3379:
  3174                           
  3175                           ; BSR set to: 1
  3176  000B76  0101               	movlb	1	; () banked
  3177  000B78  5109               	movf	printf@flag& (0+255),w,b
  3178  000B7A  0B80               	andlw	128
  3179                           
  3180                           ; Switch size 1, requested type "space"
  3181                           ; Number of cases is 2, Range of values is 0 to 128
  3182                           ; switch strategies available:
  3183                           ; Name         Instructions Cycles
  3184                           ; simple_byte            7     4 (average)
  3185                           ;	Chosen strategy is simple_byte
  3186  000B7C  0A00               	xorlw	0	; case 0
  3187  000B7E  B4D8               	btfsc	status,2,c
  3188  000B80  D77D               	goto	l3371
  3189  000B82  0A80               	xorlw	128	; case 128
  3190  000B84  B4D8               	btfsc	status,2,c
  3191  000B86  D7BC               	goto	l3373
  3192  000B88                     l3381:
  3193                           
  3194                           ; BSR set to: 1
  3195                           ;doprnt.c: 1524: (putch(c) );
  3196  000B88  0101               	movlb	1	; () banked
  3197  000B8A  510A               	movf	printf@c& (0+255),w,b
  3198  000B8C  EC58  F014         	call	_putch
  3199  000B90                     l3383:
  3200  000B90  0101               	movlb	1	; () banked
  3201  000B92  0701               	decf	printf@prec& (0+255),f,b
  3202  000B94  A0D8               	btfss	status,0,c
  3203  000B96  0702               	decf	(printf@prec+1)& (0+255),f,b
  3204  000B98  0101               	movlb	1	; () banked
  3205  000B9A  2901               	incf	printf@prec& (0+255),w,b
  3206  000B9C  E1EC               	bnz	l3379
  3207  000B9E  0101               	movlb	1	; () banked
  3208  000BA0  2902               	incf	(printf@prec+1)& (0+255),w,b
  3209  000BA2  A4D8               	btfss	status,2,c
  3210  000BA4  D7E8               	goto	l3379
  3211  000BA6                     l3385:
  3212  000BA6  C0BC  FFF6         	movff	printf@f,tblptrl
  3213  000BAA  C0BD  FFF7         	movff	printf@f+1,tblptrh
  3214  000BAE  0100               	movlb	0	; () banked
  3215  000BB0  4BBC               	infsnz	printf@f& (0+255),f,b
  3216  000BB2  2BBD               	incf	(printf@f+1)& (0+255),f,b
  3217  000BB4                     	if	0	;tblptru may be non-zero
  3218  000BB4                     	endif
  3219  000BB4                     	if	0	;tblptru may be non-zero
  3220  000BB4                     	endif
  3221  000BB4  0008               	tblrd		*
  3222  000BB6  CFF5 F10A          	movff	tablat,printf@c
  3223  000BBA  0101               	movlb	1	; () banked
  3224  000BBC  510A               	movf	printf@c& (0+255),w,b
  3225  000BBE  B4D8               	btfsc	status,2,c
  3226  000BC0  0012               	return	
  3227  000BC2  D654               	goto	l3289
  3228  000BC4                     __end_of_printf:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           prodh	equ	0xFF4
  3235                           prodl	equ	0xFF3
  3236                           postinc0	equ	0xFEE
  3237                           wreg	equ	0xFE8
  3238                           postdec1	equ	0xFE5
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _putch *****************
  3248 ;; Defined at:
  3249 ;;		line 35 in file "lcd.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  data            1    wreg     unsigned char 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  data            1   42[BANK0 ] unsigned char 
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:        1 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:   10
  3270 ;; This function calls:
  3271 ;;		_lcdNewline
  3272 ;;		_lcdNibble
  3273 ;; This function is called by:
  3274 ;;		_printf
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text6
  3279  0028B0                     __ptext6:
  3280                           	opt stack 0
  3281  0028B0                     _putch:
  3282                           	opt stack 17
  3283                           
  3284                           ; BSR set to: 1
  3285                           ;incstack = 0
  3286                           ;putch@data stored from wreg
  3287  0028B0  0100               	movlb	0	; () banked
  3288  0028B2  6FAA               	movwf	putch@data& (0+255),b
  3289                           
  3290                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  3291  0028B4  0E0A               	movlw	10
  3292  0028B6  0100               	movlb	0	; () banked
  3293  0028B8  19AA               	xorwf	putch@data& (0+255),w,b
  3294  0028BA  A4D8               	btfss	status,2,c
  3295  0028BC  D003               	goto	l138
  3296                           
  3297                           ; BSR set to: 0
  3298  0028BE  EC92  F014         	call	_lcdNewline	;wreg free
  3299  0028C2  0012               	return	
  3300  0028C4                     l138:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;lcd.c: 37: else
  3304                           ;lcd.c: 38: {
  3305                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  3306  0028C4  848C               	bsf	3980,2,c	;volatile
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3310  0028C6  0E74               	movlw	116
  3311  0028C8                     u4387:
  3312  0028C8  2EE8               	decfsz	wreg,f,c
  3313  0028CA  D7FE               	bra	u4387
  3314  0028CC  D000               	nop2	
  3315                           
  3316                           ;lcd.c: 41: lcdNibble(data);
  3317  0028CE  0100               	movlb	0	; () banked
  3318  0028D0  51AA               	movf	putch@data& (0+255),w,b
  3319  0028D2  EC29  F012         	call	_lcdNibble
  3320  0028D6  0012               	return	
  3321  0028D8                     __end_of_putch:
  3322                           	opt stack 0
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           prodh	equ	0xFF4
  3328                           prodl	equ	0xFF3
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           fsr1l	equ	0xFE1
  3333                           indf2	equ	0xFDF
  3334                           postinc2	equ	0xFDE
  3335                           postdec2	equ	0xFDD
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function _lcdNewline *****************
  3341 ;; Defined at:
  3342 ;;		line 78 in file "lcd.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;		None
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;		None
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;Total ram usage:        0 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    9
  3363 ;; This function calls:
  3364 ;;		_lcdInst
  3365 ;; This function is called by:
  3366 ;;		_putch
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text7
  3371  002924                     __ptext7:
  3372                           	opt stack 0
  3373  002924                     _lcdNewline:
  3374                           	opt stack 17
  3375                           
  3376                           ;lcd.c: 79: lcdInst(0b11000000);
  3377                           
  3378                           ;incstack = 0
  3379  002924  0EC0               	movlw	192
  3380  002926  EC43  F014         	call	_lcdInst
  3381  00292A  0012               	return		;funcret
  3382  00292C                     __end_of_lcdNewline:
  3383                           	opt stack 0
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           postinc0	equ	0xFEE
  3391                           wreg	equ	0xFE8
  3392                           postdec1	equ	0xFE5
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           postinc2	equ	0xFDE
  3396                           postdec2	equ	0xFDD
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function ___llmod *****************
  3402 ;; Defined at:
  3403 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  dividend        4   51[BANK0 ] unsigned long 
  3406 ;;  divisor         4   55[BANK0 ] unsigned long 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  counter         1   59[BANK0 ] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  4   51[BANK0 ] unsigned long 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3418 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;Total ram usage:        9 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    7
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_printf
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text8
  3433  0022A8                     __ptext8:
  3434                           	opt stack 0
  3435  0022A8                     ___llmod:
  3436                           	opt stack 20
  3437                           
  3438                           ;incstack = 0
  3439  0022A8  0100               	movlb	0	; () banked
  3440  0022AA  51B7               	movf	___llmod@divisor& (0+255),w,b
  3441  0022AC  0100               	movlb	0	; () banked
  3442  0022AE  11B8               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3443  0022B0  0100               	movlb	0	; () banked
  3444  0022B2  11B9               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3445  0022B4  0100               	movlb	0	; () banked
  3446  0022B6  11BA               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3447  0022B8  B4D8               	btfsc	status,2,c
  3448  0022BA  D03A               	goto	l941
  3449                           
  3450                           ; BSR set to: 0
  3451  0022BC  0E01               	movlw	1
  3452  0022BE  0100               	movlb	0	; () banked
  3453  0022C0  6FBB               	movwf	___llmod@counter& (0+255),b
  3454  0022C2  D008               	goto	l3237
  3455  0022C4                     l3235:
  3456                           
  3457                           ; BSR set to: 0
  3458  0022C4  0100               	movlb	0	; () banked
  3459  0022C6  90D8               	bcf	status,0,c
  3460  0022C8  37B7               	rlcf	___llmod@divisor& (0+255),f,b
  3461  0022CA  37B8               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3462  0022CC  37B9               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3463  0022CE  37BA               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3464  0022D0  0100               	movlb	0	; () banked
  3465  0022D2  2BBB               	incf	___llmod@counter& (0+255),f,b
  3466  0022D4                     l3237:
  3467                           
  3468                           ; BSR set to: 0
  3469  0022D4  0100               	movlb	0	; () banked
  3470  0022D6  AFBA               	btfss	(___llmod@divisor+3)& (0+255),7,b
  3471  0022D8  D7F5               	goto	l3235
  3472  0022DA                     l3239:
  3473                           
  3474                           ; BSR set to: 0
  3475  0022DA  0100               	movlb	0	; () banked
  3476  0022DC  51B7               	movf	___llmod@divisor& (0+255),w,b
  3477  0022DE  0100               	movlb	0	; () banked
  3478  0022E0  5DB3               	subwf	___llmod@dividend& (0+255),w,b
  3479  0022E2  0100               	movlb	0	; () banked
  3480  0022E4  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
  3481  0022E6  0100               	movlb	0	; () banked
  3482  0022E8  59B4               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  3483  0022EA  0100               	movlb	0	; () banked
  3484  0022EC  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
  3485  0022EE  0100               	movlb	0	; () banked
  3486  0022F0  59B5               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  3487  0022F2  0100               	movlb	0	; () banked
  3488  0022F4  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
  3489  0022F6  0100               	movlb	0	; () banked
  3490  0022F8  59B6               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  3491  0022FA  A0D8               	btfss	status,0,c
  3492  0022FC  D010               	goto	l3243
  3493                           
  3494                           ; BSR set to: 0
  3495  0022FE  0100               	movlb	0	; () banked
  3496  002300  51B7               	movf	___llmod@divisor& (0+255),w,b
  3497  002302  0100               	movlb	0	; () banked
  3498  002304  5FB3               	subwf	___llmod@dividend& (0+255),f,b
  3499  002306  0100               	movlb	0	; () banked
  3500  002308  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
  3501  00230A  0100               	movlb	0	; () banked
  3502  00230C  5BB4               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  3503  00230E  0100               	movlb	0	; () banked
  3504  002310  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
  3505  002312  0100               	movlb	0	; () banked
  3506  002314  5BB5               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  3507  002316  0100               	movlb	0	; () banked
  3508  002318  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
  3509  00231A  0100               	movlb	0	; () banked
  3510  00231C  5BB6               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  3511  00231E                     l3243:
  3512                           
  3513                           ; BSR set to: 0
  3514  00231E  0100               	movlb	0	; () banked
  3515  002320  90D8               	bcf	status,0,c
  3516  002322  33BA               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  3517  002324  33B9               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  3518  002326  33B8               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  3519  002328  33B7               	rrcf	___llmod@divisor& (0+255),f,b
  3520                           
  3521                           ; BSR set to: 0
  3522  00232A  0100               	movlb	0	; () banked
  3523  00232C  2FBB               	decfsz	___llmod@counter& (0+255),f,b
  3524  00232E  D7D5               	goto	l3239
  3525  002330                     l941:
  3526                           
  3527                           ; BSR set to: 0
  3528  002330  C0B3  F0B3         	movff	___llmod@dividend,?___llmod
  3529  002334  C0B4  F0B4         	movff	___llmod@dividend+1,?___llmod+1
  3530  002338  C0B5  F0B5         	movff	___llmod@dividend+2,?___llmod+2
  3531  00233C  C0B6  F0B6         	movff	___llmod@dividend+3,?___llmod+3
  3532                           
  3533                           ; BSR set to: 0
  3534  002340  0012               	return		;funcret
  3535  002342                     __end_of___llmod:
  3536                           	opt stack 0
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           postdec1	equ	0xFE5
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function ___lldiv *****************
  3555 ;; Defined at:
  3556 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  dividend        4   38[BANK0 ] unsigned long 
  3559 ;;  divisor         4   42[BANK0 ] unsigned long 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  quotient        4   46[BANK0 ] unsigned long 
  3562 ;;  counter         1   50[BANK0 ] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  4   38[BANK0 ] unsigned long 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3572 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;Total ram usage:       13 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    7
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_printf
  3583 ;;		_I2C_Master_Init
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text9
  3588  001FF4                     __ptext9:
  3589                           	opt stack 0
  3590  001FF4                     ___lldiv:
  3591                           	opt stack 20
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;incstack = 0
  3595  001FF4  0E00               	movlw	0
  3596  001FF6  0100               	movlb	0	; () banked
  3597  001FF8  6FAE               	movwf	___lldiv@quotient& (0+255),b
  3598  001FFA  0E00               	movlw	0
  3599  001FFC  6FAF               	movwf	(___lldiv@quotient+1)& (0+255),b
  3600  001FFE  0E00               	movlw	0
  3601  002000  6FB0               	movwf	(___lldiv@quotient+2)& (0+255),b
  3602  002002  0E00               	movlw	0
  3603  002004  6FB1               	movwf	(___lldiv@quotient+3)& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606  002006  0100               	movlb	0	; () banked
  3607  002008  51AA               	movf	___lldiv@divisor& (0+255),w,b
  3608  00200A  0100               	movlb	0	; () banked
  3609  00200C  11AB               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3610  00200E  0100               	movlb	0	; () banked
  3611  002010  11AC               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3612  002012  0100               	movlb	0	; () banked
  3613  002014  11AD               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3614  002016  B4D8               	btfsc	status,2,c
  3615  002018  D042               	goto	l931
  3616                           
  3617                           ; BSR set to: 0
  3618  00201A  0E01               	movlw	1
  3619  00201C  0100               	movlb	0	; () banked
  3620  00201E  6FB2               	movwf	___lldiv@counter& (0+255),b
  3621  002020  D008               	goto	l3217
  3622  002022                     l3215:
  3623                           
  3624                           ; BSR set to: 0
  3625  002022  0100               	movlb	0	; () banked
  3626  002024  90D8               	bcf	status,0,c
  3627  002026  37AA               	rlcf	___lldiv@divisor& (0+255),f,b
  3628  002028  37AB               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3629  00202A  37AC               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3630  00202C  37AD               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3631  00202E  0100               	movlb	0	; () banked
  3632  002030  2BB2               	incf	___lldiv@counter& (0+255),f,b
  3633  002032                     l3217:
  3634                           
  3635                           ; BSR set to: 0
  3636  002032  0100               	movlb	0	; () banked
  3637  002034  AFAD               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3638  002036  D7F5               	goto	l3215
  3639  002038                     l3219:
  3640                           
  3641                           ; BSR set to: 0
  3642  002038  0100               	movlb	0	; () banked
  3643  00203A  90D8               	bcf	status,0,c
  3644  00203C  37AE               	rlcf	___lldiv@quotient& (0+255),f,b
  3645  00203E  37AF               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3646  002040  37B0               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3647  002042  37B1               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3648                           
  3649                           ; BSR set to: 0
  3650  002044  0100               	movlb	0	; () banked
  3651  002046  51AA               	movf	___lldiv@divisor& (0+255),w,b
  3652  002048  0100               	movlb	0	; () banked
  3653  00204A  5DA6               	subwf	___lldiv@dividend& (0+255),w,b
  3654  00204C  0100               	movlb	0	; () banked
  3655  00204E  51AB               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3656  002050  0100               	movlb	0	; () banked
  3657  002052  59A7               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3658  002054  0100               	movlb	0	; () banked
  3659  002056  51AC               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3660  002058  0100               	movlb	0	; () banked
  3661  00205A  59A8               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3662  00205C  0100               	movlb	0	; () banked
  3663  00205E  51AD               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3664  002060  0100               	movlb	0	; () banked
  3665  002062  59A9               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3666  002064  A0D8               	btfss	status,0,c
  3667  002066  D012               	goto	l3227
  3668                           
  3669                           ; BSR set to: 0
  3670  002068  0100               	movlb	0	; () banked
  3671  00206A  51AA               	movf	___lldiv@divisor& (0+255),w,b
  3672  00206C  0100               	movlb	0	; () banked
  3673  00206E  5FA6               	subwf	___lldiv@dividend& (0+255),f,b
  3674  002070  0100               	movlb	0	; () banked
  3675  002072  51AB               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3676  002074  0100               	movlb	0	; () banked
  3677  002076  5BA7               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3678  002078  0100               	movlb	0	; () banked
  3679  00207A  51AC               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3680  00207C  0100               	movlb	0	; () banked
  3681  00207E  5BA8               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3682  002080  0100               	movlb	0	; () banked
  3683  002082  51AD               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3684  002084  0100               	movlb	0	; () banked
  3685  002086  5BA9               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3686                           
  3687                           ; BSR set to: 0
  3688  002088  0100               	movlb	0	; () banked
  3689  00208A  81AE               	bsf	___lldiv@quotient& (0+255),0,b
  3690  00208C                     l3227:
  3691                           
  3692                           ; BSR set to: 0
  3693  00208C  0100               	movlb	0	; () banked
  3694  00208E  90D8               	bcf	status,0,c
  3695  002090  33AD               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3696  002092  33AC               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3697  002094  33AB               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3698  002096  33AA               	rrcf	___lldiv@divisor& (0+255),f,b
  3699                           
  3700                           ; BSR set to: 0
  3701  002098  0100               	movlb	0	; () banked
  3702  00209A  2FB2               	decfsz	___lldiv@counter& (0+255),f,b
  3703  00209C  D7CD               	goto	l3219
  3704  00209E                     l931:
  3705                           
  3706                           ; BSR set to: 0
  3707  00209E  C0AE  F0A6         	movff	___lldiv@quotient,?___lldiv
  3708  0020A2  C0AF  F0A7         	movff	___lldiv@quotient+1,?___lldiv+1
  3709  0020A6  C0B0  F0A8         	movff	___lldiv@quotient+2,?___lldiv+2
  3710  0020AA  C0B1  F0A9         	movff	___lldiv@quotient+3,?___lldiv+3
  3711                           
  3712                           ; BSR set to: 0
  3713  0020AE  0012               	return		;funcret
  3714  0020B0                     __end_of___lldiv:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           prodh	equ	0xFF4
  3721                           prodl	equ	0xFF3
  3722                           postinc0	equ	0xFEE
  3723                           wreg	equ	0xFE8
  3724                           postdec1	equ	0xFE5
  3725                           fsr1l	equ	0xFE1
  3726                           indf2	equ	0xFDF
  3727                           postinc2	equ	0xFDE
  3728                           postdec2	equ	0xFDD
  3729                           fsr2h	equ	0xFDA
  3730                           fsr2l	equ	0xFD9
  3731                           status	equ	0xFD8
  3732                           
  3733 ;; *************** function _lcdClear *****************
  3734 ;; Defined at:
  3735 ;;		line 74 in file "lcd.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;		None
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      void 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;Total ram usage:        0 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    9
  3756 ;; This function calls:
  3757 ;;		_lcdInst
  3758 ;; This function is called by:
  3759 ;;		_setAngle
  3760 ;;		_dateTime
  3761 ;;		_mainMenu
  3762 ;;		_runSelect
  3763 ;;		_runMenu
  3764 ;;		_runTime
  3765 ;;		_runStats
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           	psect	text10
  3770  00292C                     __ptext10:
  3771                           	opt stack 0
  3772  00292C                     _lcdClear:
  3773                           	opt stack 19
  3774                           
  3775                           ;lcd.c: 75: lcdInst(0b00000001);
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;incstack = 0
  3779  00292C  0E01               	movlw	1
  3780  00292E  EC43  F014         	call	_lcdInst
  3781  002932  0012               	return		;funcret
  3782  002934                     __end_of_lcdClear:
  3783                           	opt stack 0
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           prodh	equ	0xFF4
  3789                           prodl	equ	0xFF3
  3790                           postinc0	equ	0xFEE
  3791                           wreg	equ	0xFE8
  3792                           postdec1	equ	0xFE5
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _angleToPulse *****************
  3802 ;; Defined at:
  3803 ;;		line 75 in file "servo.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  angle           2   27[BANK1 ] int 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  a000            4   43[BANK1 ] long 
  3808 ;;  offset          4   39[BANK1 ] long 
  3809 ;;  a180            4   35[BANK1 ] long 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  4   27[BANK1 ] long 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3819 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;Total ram usage:       20 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    9
  3826 ;; This function calls:
  3827 ;;		___altoft
  3828 ;;		___awtoft
  3829 ;;		___ftadd
  3830 ;;		___ftdiv
  3831 ;;		___ftmul
  3832 ;;		___fttol
  3833 ;; This function is called by:
  3834 ;;		_setAngle
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text11
  3839  001644                     __ptext11:
  3840                           	opt stack 0
  3841  001644                     _angleToPulse:
  3842                           	opt stack 19
  3843                           
  3844                           ;servo.c: 76: long offset = -500;
  3845                           
  3846                           ;incstack = 0
  3847  001644  0E0C               	movlw	12
  3848  001646  0101               	movlb	1	; () banked
  3849  001648  6F27               	movwf	angleToPulse@offset& (0+255),b
  3850  00164A  0EFE               	movlw	254
  3851  00164C  6F28               	movwf	(angleToPulse@offset+1)& (0+255),b
  3852  00164E  0EFF               	movlw	255
  3853  001650  6F29               	movwf	(angleToPulse@offset+2)& (0+255),b
  3854  001652  0EFF               	movlw	255
  3855  001654  6F2A               	movwf	(angleToPulse@offset+3)& (0+255),b
  3856                           
  3857                           ; BSR set to: 1
  3858                           ;servo.c: 77: long a000 = 1250 + offset;
  3859  001656  0EE2               	movlw	226
  3860  001658  0101               	movlb	1	; () banked
  3861  00165A  2527               	addwf	angleToPulse@offset& (0+255),w,b
  3862  00165C  0101               	movlb	1	; () banked
  3863  00165E  6F2B               	movwf	angleToPulse@a000& (0+255),b
  3864  001660  0E04               	movlw	4
  3865  001662  0101               	movlb	1	; () banked
  3866  001664  2128               	addwfc	(angleToPulse@offset+1)& (0+255),w,b
  3867  001666  0101               	movlb	1	; () banked
  3868  001668  6F2C               	movwf	(angleToPulse@a000+1)& (0+255),b
  3869  00166A  0E00               	movlw	0
  3870  00166C  0101               	movlb	1	; () banked
  3871  00166E  2129               	addwfc	(angleToPulse@offset+2)& (0+255),w,b
  3872  001670  0101               	movlb	1	; () banked
  3873  001672  6F2D               	movwf	(angleToPulse@a000+2)& (0+255),b
  3874  001674  0E00               	movlw	0
  3875  001676  0101               	movlb	1	; () banked
  3876  001678  212A               	addwfc	(angleToPulse@offset+3)& (0+255),w,b
  3877  00167A  0101               	movlb	1	; () banked
  3878  00167C  6F2E               	movwf	(angleToPulse@a000+3)& (0+255),b
  3879                           
  3880                           ; BSR set to: 1
  3881                           ;servo.c: 78: long a180 = 6250 + offset;
  3882  00167E  0E6A               	movlw	106
  3883  001680  0101               	movlb	1	; () banked
  3884  001682  2527               	addwf	angleToPulse@offset& (0+255),w,b
  3885  001684  0101               	movlb	1	; () banked
  3886  001686  6F23               	movwf	angleToPulse@a180& (0+255),b
  3887  001688  0E18               	movlw	24
  3888  00168A  0101               	movlb	1	; () banked
  3889  00168C  2128               	addwfc	(angleToPulse@offset+1)& (0+255),w,b
  3890  00168E  0101               	movlb	1	; () banked
  3891  001690  6F24               	movwf	(angleToPulse@a180+1)& (0+255),b
  3892  001692  0E00               	movlw	0
  3893  001694  0101               	movlb	1	; () banked
  3894  001696  2129               	addwfc	(angleToPulse@offset+2)& (0+255),w,b
  3895  001698  0101               	movlb	1	; () banked
  3896  00169A  6F25               	movwf	(angleToPulse@a180+2)& (0+255),b
  3897  00169C  0E00               	movlw	0
  3898  00169E  0101               	movlb	1	; () banked
  3899  0016A0  212A               	addwfc	(angleToPulse@offset+3)& (0+255),w,b
  3900  0016A2  0101               	movlb	1	; () banked
  3901  0016A4  6F26               	movwf	(angleToPulse@a180+3)& (0+255),b
  3902                           
  3903                           ; BSR set to: 1
  3904                           ;servo.c: 80: return (long)(a000 + angle/180.0*(a180-a000));
  3905  0016A6  C12B  F11F         	movff	angleToPulse@a000,??_angleToPulse
  3906  0016AA  C12C  F120         	movff	angleToPulse@a000+1,??_angleToPulse+1
  3907  0016AE  C12D  F121         	movff	angleToPulse@a000+2,??_angleToPulse+2
  3908  0016B2  C12E  F122         	movff	angleToPulse@a000+3,??_angleToPulse+3
  3909  0016B6  0101               	movlb	1	; () banked
  3910  0016B8  1F1F               	comf	??_angleToPulse& (0+255),f,b
  3911  0016BA  1F20               	comf	(??_angleToPulse+1)& (0+255),f,b
  3912  0016BC  1F21               	comf	(??_angleToPulse+2)& (0+255),f,b
  3913  0016BE  1F22               	comf	(??_angleToPulse+3)& (0+255),f,b
  3914  0016C0  2B1F               	incf	??_angleToPulse& (0+255),f,b
  3915  0016C2  0E00               	movlw	0
  3916  0016C4  2320               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  3917  0016C6  2321               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  3918  0016C8  2322               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  3919  0016CA  0101               	movlb	1	; () banked
  3920  0016CC  5123               	movf	angleToPulse@a180& (0+255),w,b
  3921  0016CE  0101               	movlb	1	; () banked
  3922  0016D0  251F               	addwf	??_angleToPulse& (0+255),w,b
  3923  0016D2  0100               	movlb	0	; () banked
  3924  0016D4  6FAE               	movwf	___altoft@c& (0+255),b
  3925  0016D6  0101               	movlb	1	; () banked
  3926  0016D8  5124               	movf	(angleToPulse@a180+1)& (0+255),w,b
  3927  0016DA  0101               	movlb	1	; () banked
  3928  0016DC  2120               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  3929  0016DE  0100               	movlb	0	; () banked
  3930  0016E0  6FAF               	movwf	(___altoft@c+1)& (0+255),b
  3931  0016E2  0101               	movlb	1	; () banked
  3932  0016E4  5125               	movf	(angleToPulse@a180+2)& (0+255),w,b
  3933  0016E6  0101               	movlb	1	; () banked
  3934  0016E8  2121               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  3935  0016EA  0100               	movlb	0	; () banked
  3936  0016EC  6FB0               	movwf	(___altoft@c+2)& (0+255),b
  3937  0016EE  0101               	movlb	1	; () banked
  3938  0016F0  5126               	movf	(angleToPulse@a180+3)& (0+255),w,b
  3939  0016F2  0101               	movlb	1	; () banked
  3940  0016F4  2122               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  3941  0016F6  0100               	movlb	0	; () banked
  3942  0016F8  6FB1               	movwf	(___altoft@c+3)& (0+255),b
  3943  0016FA  EC05  F011         	call	___altoft	;wreg free
  3944  0016FE  C0AE  F0C4         	movff	?___altoft,___ftmul@f2
  3945  001702  C0AF  F0C5         	movff	?___altoft+1,___ftmul@f2+1
  3946  001706  C0B0  F0C6         	movff	?___altoft+2,___ftmul@f2+2
  3947  00170A  0E00               	movlw	0
  3948  00170C  0100               	movlb	0	; () banked
  3949  00170E  6FB5               	movwf	___ftdiv@f2& (0+255),b
  3950  001710  0E34               	movlw	52
  3951  001712  0100               	movlb	0	; () banked
  3952  001714  6FB6               	movwf	(___ftdiv@f2+1)& (0+255),b
  3953  001716  0E43               	movlw	67
  3954  001718  0100               	movlb	0	; () banked
  3955  00171A  6FB7               	movwf	(___ftdiv@f2+2)& (0+255),b
  3956  00171C  C11B  F0AE         	movff	angleToPulse@angle,___awtoft@c
  3957  001720  C11C  F0AF         	movff	angleToPulse@angle+1,___awtoft@c+1
  3958  001724  ECE8  F013         	call	___awtoft	;wreg free
  3959  001728  C0AE  F0B2         	movff	?___awtoft,___ftdiv@f1
  3960  00172C  C0AF  F0B3         	movff	?___awtoft+1,___ftdiv@f1+1
  3961  001730  C0B0  F0B4         	movff	?___awtoft+2,___ftdiv@f1+2
  3962  001734  ECCD  F00B         	call	___ftdiv	;wreg free
  3963  001738  C0B2  F0C1         	movff	?___ftdiv,___ftmul@f1
  3964  00173C  C0B3  F0C2         	movff	?___ftdiv+1,___ftmul@f1+1
  3965  001740  C0B4  F0C3         	movff	?___ftdiv+2,___ftmul@f1+2
  3966  001744  EC73  F00A         	call	___ftmul	;wreg free
  3967  001748  C0C1  F103         	movff	?___ftmul,___ftadd@f2
  3968  00174C  C0C2  F104         	movff	?___ftmul+1,___ftadd@f2+1
  3969  001750  C0C3  F105         	movff	?___ftmul+2,___ftadd@f2+2
  3970  001754  C12B  F0AE         	movff	angleToPulse@a000,___altoft@c
  3971  001758  C12C  F0AF         	movff	angleToPulse@a000+1,___altoft@c+1
  3972  00175C  C12D  F0B0         	movff	angleToPulse@a000+2,___altoft@c+2
  3973  001760  C12E  F0B1         	movff	angleToPulse@a000+3,___altoft@c+3
  3974  001764  EC05  F011         	call	___altoft	;wreg free
  3975  001768  C0AE  F100         	movff	?___altoft,___ftadd@f1
  3976  00176C  C0AF  F101         	movff	?___altoft+1,___ftadd@f1+1
  3977  001770  C0B0  F102         	movff	?___altoft+2,___ftadd@f1+2
  3978  001774  EC58  F007         	call	___ftadd	;wreg free
  3979  001778  C100  F10C         	movff	?___ftadd,___fttol@f1
  3980  00177C  C101  F10D         	movff	?___ftadd+1,___fttol@f1+1
  3981  001780  C102  F10E         	movff	?___ftadd+2,___fttol@f1+2
  3982  001784  EC73  F00C         	call	___fttol	;wreg free
  3983  001788  C10C  F11B         	movff	?___fttol,?_angleToPulse
  3984  00178C  C10D  F11C         	movff	?___fttol+1,?_angleToPulse+1
  3985  001790  C10E  F11D         	movff	?___fttol+2,?_angleToPulse+2
  3986  001794  C10F  F11E         	movff	?___fttol+3,?_angleToPulse+3
  3987  001798  0012               	return	
  3988  00179A                     __end_of_angleToPulse:
  3989                           	opt stack 0
  3990                           tblptru	equ	0xFF8
  3991                           tblptrh	equ	0xFF7
  3992                           tblptrl	equ	0xFF6
  3993                           tablat	equ	0xFF5
  3994                           prodh	equ	0xFF4
  3995                           prodl	equ	0xFF3
  3996                           postinc0	equ	0xFEE
  3997                           wreg	equ	0xFE8
  3998                           postdec1	equ	0xFE5
  3999                           fsr1l	equ	0xFE1
  4000                           indf2	equ	0xFDF
  4001                           postinc2	equ	0xFDE
  4002                           postdec2	equ	0xFDD
  4003                           fsr2h	equ	0xFDA
  4004                           fsr2l	equ	0xFD9
  4005                           status	equ	0xFD8
  4006                           
  4007 ;; *************** function ___fttol *****************
  4008 ;; Defined at:
  4009 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;  f1              3   12[BANK1 ] float 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  lval            4   22[BANK1 ] unsigned long 
  4014 ;;  exp1            1   26[BANK1 ] unsigned char 
  4015 ;;  sign1           1   21[BANK1 ] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  4   12[BANK1 ] long 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4025 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;Total ram usage:       15 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    7
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_angleToPulse
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text12
  4040  0018E6                     __ptext12:
  4041                           	opt stack 0
  4042  0018E6                     ___fttol:
  4043                           	opt stack 20
  4044                           
  4045                           ;incstack = 0
  4046  0018E6  C10E  F110         	movff	___fttol@f1+2,??___fttol
  4047  0018EA  0101               	movlb	1	; () banked
  4048  0018EC  6B11               	clrf	(??___fttol+1)& (0+255),b
  4049  0018EE  6B12               	clrf	(??___fttol+2)& (0+255),b
  4050  0018F0  0101               	movlb	1	; () banked
  4051  0018F2  350D               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4052  0018F4  0101               	movlb	1	; () banked
  4053  0018F6  3710               	rlcf	??___fttol& (0+255),f,b
  4054  0018F8  E301               	bnc	u2611
  4055  0018FA  8111               	bsf	(??___fttol+1)& (0+255),0,b
  4056  0018FC                     u2611:
  4057  0018FC  0101               	movlb	1	; () banked
  4058  0018FE  5110               	movf	??___fttol& (0+255),w,b
  4059  001900  0101               	movlb	1	; () banked
  4060  001902  6F1A               	movwf	___fttol@exp1& (0+255),b
  4061  001904  0101               	movlb	1	; () banked
  4062  001906  511A               	movf	___fttol@exp1& (0+255),w,b
  4063  001908  A4D8               	btfss	status,2,c
  4064  00190A  D00A               	goto	l3169
  4065                           
  4066                           ; BSR set to: 1
  4067  00190C  0E00               	movlw	0
  4068  00190E  0101               	movlb	1	; () banked
  4069  001910  6F0C               	movwf	?___fttol& (0+255),b
  4070  001912  0E00               	movlw	0
  4071  001914  6F0D               	movwf	(?___fttol+1)& (0+255),b
  4072  001916  0E00               	movlw	0
  4073  001918  6F0E               	movwf	(?___fttol+2)& (0+255),b
  4074  00191A  0E00               	movlw	0
  4075  00191C  6F0F               	movwf	(?___fttol+3)& (0+255),b
  4076                           
  4077                           ; BSR set to: 1
  4078  00191E  0012               	return	
  4079  001920                     l3169:
  4080                           
  4081                           ; BSR set to: 1
  4082  001920  0E17               	movlw	23
  4083  001922  0101               	movlb	1	; () banked
  4084  001924  6F10               	movwf	??___fttol& (0+255),b
  4085  001926  C10C  F111         	movff	___fttol@f1,??___fttol+1
  4086  00192A  C10D  F112         	movff	___fttol@f1+1,??___fttol+2
  4087  00192E  C10E  F113         	movff	___fttol@f1+2,??___fttol+3
  4088  001932  0101               	movlb	1	; () banked
  4089  001934  2910               	incf	??___fttol& (0+255),w,b
  4090  001936  0101               	movlb	1	; () banked
  4091  001938  6F14               	movwf	(??___fttol+4)& (0+255),b
  4092  00193A  D005               	goto	u2630
  4093  00193C                     u2635:
  4094  00193C  0101               	movlb	1	; () banked
  4095  00193E  90D8               	bcf	status,0,c
  4096  001940  3313               	rrcf	(??___fttol+3)& (0+255),f,b
  4097  001942  3312               	rrcf	(??___fttol+2)& (0+255),f,b
  4098  001944  3311               	rrcf	(??___fttol+1)& (0+255),f,b
  4099  001946                     u2630:
  4100  001946  0101               	movlb	1	; () banked
  4101  001948  2F14               	decfsz	(??___fttol+4)& (0+255),f,b
  4102  00194A  D7F8               	goto	u2635
  4103  00194C  0101               	movlb	1	; () banked
  4104  00194E  5111               	movf	(??___fttol+1)& (0+255),w,b
  4105  001950  0101               	movlb	1	; () banked
  4106  001952  6F15               	movwf	___fttol@sign1& (0+255),b
  4107                           
  4108                           ; BSR set to: 1
  4109  001954  0101               	movlb	1	; () banked
  4110  001956  8F0D               	bsf	(___fttol@f1+1)& (0+255),7,b
  4111                           
  4112                           ; BSR set to: 1
  4113  001958  0EFF               	movlw	255
  4114  00195A  0101               	movlb	1	; () banked
  4115  00195C  170C               	andwf	___fttol@f1& (0+255),f,b
  4116  00195E  0EFF               	movlw	255
  4117  001960  0101               	movlb	1	; () banked
  4118  001962  170D               	andwf	(___fttol@f1+1)& (0+255),f,b
  4119  001964  0E00               	movlw	0
  4120  001966  0101               	movlb	1	; () banked
  4121  001968  170E               	andwf	(___fttol@f1+2)& (0+255),f,b
  4122                           
  4123                           ; BSR set to: 1
  4124  00196A  0101               	movlb	1	; () banked
  4125  00196C  510C               	movf	___fttol@f1& (0+255),w,b
  4126  00196E  0101               	movlb	1	; () banked
  4127  001970  6F16               	movwf	___fttol@lval& (0+255),b
  4128  001972  0101               	movlb	1	; () banked
  4129  001974  510D               	movf	(___fttol@f1+1)& (0+255),w,b
  4130  001976  0101               	movlb	1	; () banked
  4131  001978  6F17               	movwf	(___fttol@lval+1)& (0+255),b
  4132  00197A  0101               	movlb	1	; () banked
  4133  00197C  510E               	movf	(___fttol@f1+2)& (0+255),w,b
  4134  00197E  0101               	movlb	1	; () banked
  4135  001980  6F18               	movwf	(___fttol@lval+2)& (0+255),b
  4136  001982  0101               	movlb	1	; () banked
  4137  001984  6B19               	clrf	(___fttol@lval+3)& (0+255),b
  4138                           
  4139                           ; BSR set to: 1
  4140  001986  0E8E               	movlw	142
  4141  001988  0101               	movlb	1	; () banked
  4142  00198A  5F1A               	subwf	___fttol@exp1& (0+255),f,b
  4143                           
  4144                           ; BSR set to: 1
  4145  00198C  0101               	movlb	1	; () banked
  4146  00198E  AF1A               	btfss	___fttol@exp1& (0+255),7,b
  4147  001990  D01A               	goto	l3191
  4148                           
  4149                           ; BSR set to: 1
  4150  001992  0101               	movlb	1	; () banked
  4151  001994  511A               	movf	___fttol@exp1& (0+255),w,b
  4152  001996  0A80               	xorlw	128
  4153  001998  0F8F               	addlw	143
  4154  00199A  B0D8               	btfsc	status,0,c
  4155  00199C  D00A               	goto	l3187
  4156                           
  4157                           ; BSR set to: 1
  4158  00199E  0E00               	movlw	0
  4159  0019A0  0101               	movlb	1	; () banked
  4160  0019A2  6F0C               	movwf	?___fttol& (0+255),b
  4161  0019A4  0E00               	movlw	0
  4162  0019A6  6F0D               	movwf	(?___fttol+1)& (0+255),b
  4163  0019A8  0E00               	movlw	0
  4164  0019AA  6F0E               	movwf	(?___fttol+2)& (0+255),b
  4165  0019AC  0E00               	movlw	0
  4166  0019AE  6F0F               	movwf	(?___fttol+3)& (0+255),b
  4167                           
  4168                           ; BSR set to: 1
  4169  0019B0  0012               	return	
  4170  0019B2                     l3187:
  4171                           
  4172                           ; BSR set to: 1
  4173  0019B2  0101               	movlb	1	; () banked
  4174  0019B4  90D8               	bcf	status,0,c
  4175  0019B6  3319               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4176  0019B8  3318               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4177  0019BA  3317               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4178  0019BC  3316               	rrcf	___fttol@lval& (0+255),f,b
  4179                           
  4180                           ; BSR set to: 1
  4181  0019BE  0101               	movlb	1	; () banked
  4182  0019C0  3F1A               	incfsz	___fttol@exp1& (0+255),f,b
  4183  0019C2  D7F7               	goto	l3187
  4184                           
  4185                           ; BSR set to: 1
  4186  0019C4  D01B               	goto	l3201
  4187  0019C6                     l3191:
  4188                           
  4189                           ; BSR set to: 1
  4190  0019C6  0E17               	movlw	23
  4191  0019C8  0101               	movlb	1	; () banked
  4192  0019CA  651A               	cpfsgt	___fttol@exp1& (0+255),b
  4193  0019CC  D012               	goto	l3199
  4194                           
  4195                           ; BSR set to: 1
  4196  0019CE  0E00               	movlw	0
  4197  0019D0  0101               	movlb	1	; () banked
  4198  0019D2  6F0C               	movwf	?___fttol& (0+255),b
  4199  0019D4  0E00               	movlw	0
  4200  0019D6  6F0D               	movwf	(?___fttol+1)& (0+255),b
  4201  0019D8  0E00               	movlw	0
  4202  0019DA  6F0E               	movwf	(?___fttol+2)& (0+255),b
  4203  0019DC  0E00               	movlw	0
  4204  0019DE  6F0F               	movwf	(?___fttol+3)& (0+255),b
  4205                           
  4206                           ; BSR set to: 1
  4207  0019E0  0012               	return	
  4208  0019E2                     l3197:
  4209                           
  4210                           ; BSR set to: 1
  4211  0019E2  0101               	movlb	1	; () banked
  4212  0019E4  90D8               	bcf	status,0,c
  4213  0019E6  3716               	rlcf	___fttol@lval& (0+255),f,b
  4214  0019E8  3717               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4215  0019EA  3718               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4216  0019EC  3719               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4217  0019EE  0101               	movlb	1	; () banked
  4218  0019F0  071A               	decf	___fttol@exp1& (0+255),f,b
  4219  0019F2                     l3199:
  4220                           
  4221                           ; BSR set to: 1
  4222  0019F2  0101               	movlb	1	; () banked
  4223  0019F4  511A               	movf	___fttol@exp1& (0+255),w,b
  4224  0019F6  0101               	movlb	1	; () banked
  4225  0019F8  A4D8               	btfss	status,2,c
  4226  0019FA  D7F3               	goto	l3197
  4227  0019FC                     l3201:
  4228                           
  4229                           ; BSR set to: 1
  4230  0019FC  0101               	movlb	1	; () banked
  4231  0019FE  5115               	movf	___fttol@sign1& (0+255),w,b
  4232  001A00  0101               	movlb	1	; () banked
  4233  001A02  B4D8               	btfsc	status,2,c
  4234  001A04  D009               	goto	l3205
  4235                           
  4236                           ; BSR set to: 1
  4237  001A06  0101               	movlb	1	; () banked
  4238  001A08  1F19               	comf	(___fttol@lval+3)& (0+255),f,b
  4239  001A0A  1F18               	comf	(___fttol@lval+2)& (0+255),f,b
  4240  001A0C  1F17               	comf	(___fttol@lval+1)& (0+255),f,b
  4241  001A0E  6D16               	negf	___fttol@lval& (0+255),b
  4242  001A10  0E00               	movlw	0
  4243  001A12  2317               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4244  001A14  2318               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4245  001A16  2319               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4246  001A18                     l3205:
  4247                           
  4248                           ; BSR set to: 1
  4249  001A18  C116  F10C         	movff	___fttol@lval,?___fttol
  4250  001A1C  C117  F10D         	movff	___fttol@lval+1,?___fttol+1
  4251  001A20  C118  F10E         	movff	___fttol@lval+2,?___fttol+2
  4252  001A24  C119  F10F         	movff	___fttol@lval+3,?___fttol+3
  4253  001A28  0012               	return	
  4254  001A2A                     __end_of___fttol:
  4255                           	opt stack 0
  4256                           tblptru	equ	0xFF8
  4257                           tblptrh	equ	0xFF7
  4258                           tblptrl	equ	0xFF6
  4259                           tablat	equ	0xFF5
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function ___ftmul *****************
  4274 ;; Defined at:
  4275 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;  f1              3   65[BANK0 ] float 
  4278 ;;  f2              3   68[BANK0 ] float 
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  f3_as_produc    3   75[BANK0 ] unsigned um
  4281 ;;  sign            1   79[BANK0 ] unsigned char 
  4282 ;;  cntr            1   78[BANK0 ] unsigned char 
  4283 ;;  exp             1   74[BANK0 ] unsigned char 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  3   65[BANK0 ] float 
  4286 ;; Registers used:
  4287 ;;		wreg, status,2, status,0, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4293 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;Total ram usage:       15 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    8
  4300 ;; This function calls:
  4301 ;;		___ftpack
  4302 ;; This function is called by:
  4303 ;;		_angleToPulse
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text13
  4308  0014E6                     __ptext13:
  4309                           	opt stack 0
  4310  0014E6                     ___ftmul:
  4311                           	opt stack 19
  4312                           
  4313                           ; BSR set to: 1
  4314                           ;incstack = 0
  4315  0014E6  C0C3  F0C7         	movff	___ftmul@f1+2,??___ftmul
  4316  0014EA  0100               	movlb	0	; () banked
  4317  0014EC  6BC8               	clrf	(??___ftmul+1)& (0+255),b
  4318  0014EE  6BC9               	clrf	(??___ftmul+2)& (0+255),b
  4319  0014F0  0100               	movlb	0	; () banked
  4320  0014F2  35C2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4321  0014F4  0100               	movlb	0	; () banked
  4322  0014F6  37C7               	rlcf	??___ftmul& (0+255),f,b
  4323  0014F8  E301               	bnc	u2541
  4324  0014FA  81C8               	bsf	(??___ftmul+1)& (0+255),0,b
  4325  0014FC                     u2541:
  4326  0014FC  0100               	movlb	0	; () banked
  4327  0014FE  51C7               	movf	??___ftmul& (0+255),w,b
  4328  001500  0100               	movlb	0	; () banked
  4329  001502  6FCA               	movwf	___ftmul@exp& (0+255),b
  4330  001504  0100               	movlb	0	; () banked
  4331  001506  51CA               	movf	___ftmul@exp& (0+255),w,b
  4332  001508  A4D8               	btfss	status,2,c
  4333  00150A  D00A               	goto	l3109
  4334                           
  4335                           ; BSR set to: 0
  4336  00150C  0E00               	movlw	0
  4337  00150E  0100               	movlb	0	; () banked
  4338  001510  6FC1               	movwf	?___ftmul& (0+255),b
  4339  001512  0E00               	movlw	0
  4340  001514  0100               	movlb	0	; () banked
  4341  001516  6FC2               	movwf	(?___ftmul+1)& (0+255),b
  4342  001518  0E00               	movlw	0
  4343  00151A  0100               	movlb	0	; () banked
  4344  00151C  6FC3               	movwf	(?___ftmul+2)& (0+255),b
  4345                           
  4346                           ; BSR set to: 0
  4347  00151E  0012               	return	
  4348  001520                     l3109:
  4349                           
  4350                           ; BSR set to: 0
  4351  001520  C0C6  F0C7         	movff	___ftmul@f2+2,??___ftmul
  4352  001524  0100               	movlb	0	; () banked
  4353  001526  6BC8               	clrf	(??___ftmul+1)& (0+255),b
  4354  001528  6BC9               	clrf	(??___ftmul+2)& (0+255),b
  4355  00152A  0100               	movlb	0	; () banked
  4356  00152C  35C5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4357  00152E  0100               	movlb	0	; () banked
  4358  001530  37C7               	rlcf	??___ftmul& (0+255),f,b
  4359  001532  E301               	bnc	u2561
  4360  001534  81C8               	bsf	(??___ftmul+1)& (0+255),0,b
  4361  001536                     u2561:
  4362  001536  0100               	movlb	0	; () banked
  4363  001538  51C7               	movf	??___ftmul& (0+255),w,b
  4364  00153A  0100               	movlb	0	; () banked
  4365  00153C  6FCF               	movwf	___ftmul@sign& (0+255),b
  4366  00153E  0100               	movlb	0	; () banked
  4367  001540  51CF               	movf	___ftmul@sign& (0+255),w,b
  4368  001542  A4D8               	btfss	status,2,c
  4369  001544  D00A               	goto	l3115
  4370                           
  4371                           ; BSR set to: 0
  4372  001546  0E00               	movlw	0
  4373  001548  0100               	movlb	0	; () banked
  4374  00154A  6FC1               	movwf	?___ftmul& (0+255),b
  4375  00154C  0E00               	movlw	0
  4376  00154E  0100               	movlb	0	; () banked
  4377  001550  6FC2               	movwf	(?___ftmul+1)& (0+255),b
  4378  001552  0E00               	movlw	0
  4379  001554  0100               	movlb	0	; () banked
  4380  001556  6FC3               	movwf	(?___ftmul+2)& (0+255),b
  4381                           
  4382                           ; BSR set to: 0
  4383  001558  0012               	return	
  4384  00155A                     l3115:
  4385                           
  4386                           ; BSR set to: 0
  4387  00155A  0100               	movlb	0	; () banked
  4388  00155C  51CF               	movf	___ftmul@sign& (0+255),w,b
  4389  00155E  0F7B               	addlw	123
  4390  001560  0100               	movlb	0	; () banked
  4391  001562  27CA               	addwf	___ftmul@exp& (0+255),f,b
  4392                           
  4393                           ; BSR set to: 0
  4394  001564  C0C3  F0CF         	movff	___ftmul@f1+2,___ftmul@sign
  4395  001568  0100               	movlb	0	; () banked
  4396  00156A  51C6               	movf	(___ftmul@f2+2)& (0+255),w,b
  4397  00156C  0100               	movlb	0	; () banked
  4398  00156E  1BCF               	xorwf	___ftmul@sign& (0+255),f,b
  4399  001570  0E80               	movlw	128
  4400  001572  0100               	movlb	0	; () banked
  4401  001574  17CF               	andwf	___ftmul@sign& (0+255),f,b
  4402                           
  4403                           ; BSR set to: 0
  4404  001576  0100               	movlb	0	; () banked
  4405  001578  8FC2               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4406                           
  4407                           ; BSR set to: 0
  4408  00157A  0100               	movlb	0	; () banked
  4409  00157C  8FC5               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4410                           
  4411                           ; BSR set to: 0
  4412  00157E  0EFF               	movlw	255
  4413  001580  0100               	movlb	0	; () banked
  4414  001582  17C4               	andwf	___ftmul@f2& (0+255),f,b
  4415  001584  0EFF               	movlw	255
  4416  001586  0100               	movlb	0	; () banked
  4417  001588  17C5               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4418  00158A  0E00               	movlw	0
  4419  00158C  0100               	movlb	0	; () banked
  4420  00158E  17C6               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4421                           
  4422                           ; BSR set to: 0
  4423  001590  0E00               	movlw	0
  4424  001592  0100               	movlb	0	; () banked
  4425  001594  6FCB               	movwf	___ftmul@f3_as_product& (0+255),b
  4426  001596  0E00               	movlw	0
  4427  001598  0100               	movlb	0	; () banked
  4428  00159A  6FCC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4429  00159C  0E00               	movlw	0
  4430  00159E  0100               	movlb	0	; () banked
  4431  0015A0  6FCD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4432                           
  4433                           ; BSR set to: 0
  4434  0015A2  0E07               	movlw	7
  4435  0015A4  0100               	movlb	0	; () banked
  4436  0015A6  6FCE               	movwf	___ftmul@cntr& (0+255),b
  4437  0015A8                     l3129:
  4438                           
  4439                           ; BSR set to: 0
  4440  0015A8  0100               	movlb	0	; () banked
  4441  0015AA  A1C1               	btfss	___ftmul@f1& (0+255),0,b
  4442  0015AC  D00C               	goto	l3133
  4443                           
  4444                           ; BSR set to: 0
  4445  0015AE  0100               	movlb	0	; () banked
  4446  0015B0  51C4               	movf	___ftmul@f2& (0+255),w,b
  4447  0015B2  0100               	movlb	0	; () banked
  4448  0015B4  27CB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4449  0015B6  0100               	movlb	0	; () banked
  4450  0015B8  51C5               	movf	(___ftmul@f2+1)& (0+255),w,b
  4451  0015BA  0100               	movlb	0	; () banked
  4452  0015BC  23CC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4453  0015BE  0100               	movlb	0	; () banked
  4454  0015C0  51C6               	movf	(___ftmul@f2+2)& (0+255),w,b
  4455  0015C2  0100               	movlb	0	; () banked
  4456  0015C4  23CD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4457  0015C6                     l3133:
  4458                           
  4459                           ; BSR set to: 0
  4460  0015C6  0100               	movlb	0	; () banked
  4461  0015C8  90D8               	bcf	status,0,c
  4462  0015CA  33C3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4463  0015CC  33C2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4464  0015CE  33C1               	rrcf	___ftmul@f1& (0+255),f,b
  4465  0015D0  0100               	movlb	0	; () banked
  4466  0015D2  90D8               	bcf	status,0,c
  4467  0015D4  37C4               	rlcf	___ftmul@f2& (0+255),f,b
  4468  0015D6  37C5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4469  0015D8  37C6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4470                           
  4471                           ; BSR set to: 0
  4472  0015DA  0100               	movlb	0	; () banked
  4473  0015DC  2FCE               	decfsz	___ftmul@cntr& (0+255),f,b
  4474  0015DE  D7E4               	goto	l3129
  4475                           
  4476                           ; BSR set to: 0
  4477                           
  4478                           ; BSR set to: 0
  4479  0015E0  0E09               	movlw	9
  4480  0015E2  0100               	movlb	0	; () banked
  4481  0015E4  6FCE               	movwf	___ftmul@cntr& (0+255),b
  4482  0015E6                     l3139:
  4483                           
  4484                           ; BSR set to: 0
  4485  0015E6  0100               	movlb	0	; () banked
  4486  0015E8  A1C1               	btfss	___ftmul@f1& (0+255),0,b
  4487  0015EA  D00C               	goto	l3143
  4488                           
  4489                           ; BSR set to: 0
  4490  0015EC  0100               	movlb	0	; () banked
  4491  0015EE  51C4               	movf	___ftmul@f2& (0+255),w,b
  4492  0015F0  0100               	movlb	0	; () banked
  4493  0015F2  27CB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4494  0015F4  0100               	movlb	0	; () banked
  4495  0015F6  51C5               	movf	(___ftmul@f2+1)& (0+255),w,b
  4496  0015F8  0100               	movlb	0	; () banked
  4497  0015FA  23CC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4498  0015FC  0100               	movlb	0	; () banked
  4499  0015FE  51C6               	movf	(___ftmul@f2+2)& (0+255),w,b
  4500  001600  0100               	movlb	0	; () banked
  4501  001602  23CD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4502  001604                     l3143:
  4503                           
  4504                           ; BSR set to: 0
  4505  001604  0100               	movlb	0	; () banked
  4506  001606  90D8               	bcf	status,0,c
  4507  001608  33C3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4508  00160A  33C2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4509  00160C  33C1               	rrcf	___ftmul@f1& (0+255),f,b
  4510  00160E  0100               	movlb	0	; () banked
  4511  001610  90D8               	bcf	status,0,c
  4512  001612  33CD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4513  001614  33CC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4514  001616  33CB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4515                           
  4516                           ; BSR set to: 0
  4517  001618  0100               	movlb	0	; () banked
  4518  00161A  2FCE               	decfsz	___ftmul@cntr& (0+255),f,b
  4519  00161C  D7E4               	goto	l3139
  4520                           
  4521                           ; BSR set to: 0
  4522                           
  4523                           ; BSR set to: 0
  4524  00161E  C0CB  F0A6         	movff	___ftmul@f3_as_product,___ftpack@arg
  4525  001622  C0CC  F0A7         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4526  001626  C0CD  F0A8         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4527  00162A  C0CA  F0A9         	movff	___ftmul@exp,___ftpack@exp
  4528  00162E  C0CF  F0AA         	movff	___ftmul@sign,___ftpack@sign
  4529  001632  EC9F  F00D         	call	___ftpack	;wreg free
  4530  001636  C0A6  F0C1         	movff	?___ftpack,?___ftmul
  4531  00163A  C0A7  F0C2         	movff	?___ftpack+1,?___ftmul+1
  4532  00163E  C0A8  F0C3         	movff	?___ftpack+2,?___ftmul+2
  4533  001642  0012               	return	
  4534  001644                     __end_of___ftmul:
  4535                           	opt stack 0
  4536                           tblptru	equ	0xFF8
  4537                           tblptrh	equ	0xFF7
  4538                           tblptrl	equ	0xFF6
  4539                           tablat	equ	0xFF5
  4540                           prodh	equ	0xFF4
  4541                           prodl	equ	0xFF3
  4542                           postinc0	equ	0xFEE
  4543                           wreg	equ	0xFE8
  4544                           postdec1	equ	0xFE5
  4545                           fsr1l	equ	0xFE1
  4546                           indf2	equ	0xFDF
  4547                           postinc2	equ	0xFDE
  4548                           postdec2	equ	0xFDD
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function ___ftdiv *****************
  4554 ;; Defined at:
  4555 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  f1              3   50[BANK0 ] float 
  4558 ;;  f2              3   53[BANK0 ] float 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  f3              3   60[BANK0 ] float 
  4561 ;;  sign            1   64[BANK0 ] unsigned char 
  4562 ;;  exp             1   63[BANK0 ] unsigned char 
  4563 ;;  cntr            1   59[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  3   50[BANK0 ] float 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4573 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;Total ram usage:       15 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    8
  4580 ;; This function calls:
  4581 ;;		___ftpack
  4582 ;; This function is called by:
  4583 ;;		_angleToPulse
  4584 ;;		_testFrequency
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text14
  4589  00179A                     __ptext14:
  4590                           	opt stack 0
  4591  00179A                     ___ftdiv:
  4592                           	opt stack 19
  4593                           
  4594                           ;incstack = 0
  4595  00179A  C0B4  F0B8         	movff	___ftdiv@f1+2,??___ftdiv
  4596  00179E  0100               	movlb	0	; () banked
  4597  0017A0  6BB9               	clrf	(??___ftdiv+1)& (0+255),b
  4598  0017A2  6BBA               	clrf	(??___ftdiv+2)& (0+255),b
  4599  0017A4  0100               	movlb	0	; () banked
  4600  0017A6  35B3               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  4601  0017A8  0100               	movlb	0	; () banked
  4602  0017AA  37B8               	rlcf	??___ftdiv& (0+255),f,b
  4603  0017AC  E301               	bnc	u2491
  4604  0017AE  81B9               	bsf	(??___ftdiv+1)& (0+255),0,b
  4605  0017B0                     u2491:
  4606  0017B0  0100               	movlb	0	; () banked
  4607  0017B2  51B8               	movf	??___ftdiv& (0+255),w,b
  4608  0017B4  0100               	movlb	0	; () banked
  4609  0017B6  6FBF               	movwf	___ftdiv@exp& (0+255),b
  4610  0017B8  0100               	movlb	0	; () banked
  4611  0017BA  51BF               	movf	___ftdiv@exp& (0+255),w,b
  4612  0017BC  A4D8               	btfss	status,2,c
  4613  0017BE  D00A               	goto	l3063
  4614                           
  4615                           ; BSR set to: 0
  4616  0017C0  0E00               	movlw	0
  4617  0017C2  0100               	movlb	0	; () banked
  4618  0017C4  6FB2               	movwf	?___ftdiv& (0+255),b
  4619  0017C6  0E00               	movlw	0
  4620  0017C8  0100               	movlb	0	; () banked
  4621  0017CA  6FB3               	movwf	(?___ftdiv+1)& (0+255),b
  4622  0017CC  0E00               	movlw	0
  4623  0017CE  0100               	movlb	0	; () banked
  4624  0017D0  6FB4               	movwf	(?___ftdiv+2)& (0+255),b
  4625                           
  4626                           ; BSR set to: 0
  4627  0017D2  0012               	return	
  4628  0017D4                     l3063:
  4629                           
  4630                           ; BSR set to: 0
  4631  0017D4  C0B7  F0B8         	movff	___ftdiv@f2+2,??___ftdiv
  4632  0017D8  0100               	movlb	0	; () banked
  4633  0017DA  6BB9               	clrf	(??___ftdiv+1)& (0+255),b
  4634  0017DC  6BBA               	clrf	(??___ftdiv+2)& (0+255),b
  4635  0017DE  0100               	movlb	0	; () banked
  4636  0017E0  35B6               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  4637  0017E2  0100               	movlb	0	; () banked
  4638  0017E4  37B8               	rlcf	??___ftdiv& (0+255),f,b
  4639  0017E6  E301               	bnc	u2511
  4640  0017E8  81B9               	bsf	(??___ftdiv+1)& (0+255),0,b
  4641  0017EA                     u2511:
  4642  0017EA  0100               	movlb	0	; () banked
  4643  0017EC  51B8               	movf	??___ftdiv& (0+255),w,b
  4644  0017EE  0100               	movlb	0	; () banked
  4645  0017F0  6FC0               	movwf	___ftdiv@sign& (0+255),b
  4646  0017F2  0100               	movlb	0	; () banked
  4647  0017F4  51C0               	movf	___ftdiv@sign& (0+255),w,b
  4648  0017F6  A4D8               	btfss	status,2,c
  4649  0017F8  D00A               	goto	l3069
  4650                           
  4651                           ; BSR set to: 0
  4652  0017FA  0E00               	movlw	0
  4653  0017FC  0100               	movlb	0	; () banked
  4654  0017FE  6FB2               	movwf	?___ftdiv& (0+255),b
  4655  001800  0E00               	movlw	0
  4656  001802  0100               	movlb	0	; () banked
  4657  001804  6FB3               	movwf	(?___ftdiv+1)& (0+255),b
  4658  001806  0E00               	movlw	0
  4659  001808  0100               	movlb	0	; () banked
  4660  00180A  6FB4               	movwf	(?___ftdiv+2)& (0+255),b
  4661                           
  4662                           ; BSR set to: 0
  4663  00180C  0012               	return	
  4664  00180E                     l3069:
  4665                           
  4666                           ; BSR set to: 0
  4667  00180E  0E00               	movlw	0
  4668  001810  0100               	movlb	0	; () banked
  4669  001812  6FBC               	movwf	___ftdiv@f3& (0+255),b
  4670  001814  0E00               	movlw	0
  4671  001816  0100               	movlb	0	; () banked
  4672  001818  6FBD               	movwf	(___ftdiv@f3+1)& (0+255),b
  4673  00181A  0E00               	movlw	0
  4674  00181C  0100               	movlb	0	; () banked
  4675  00181E  6FBE               	movwf	(___ftdiv@f3+2)& (0+255),b
  4676                           
  4677                           ; BSR set to: 0
  4678  001820  0100               	movlb	0	; () banked
  4679  001822  51C0               	movf	___ftdiv@sign& (0+255),w,b
  4680  001824  0F89               	addlw	137
  4681  001826  0100               	movlb	0	; () banked
  4682  001828  5FBF               	subwf	___ftdiv@exp& (0+255),f,b
  4683                           
  4684                           ; BSR set to: 0
  4685  00182A  C0B4  F0C0         	movff	___ftdiv@f1+2,___ftdiv@sign
  4686                           
  4687                           ; BSR set to: 0
  4688  00182E  0100               	movlb	0	; () banked
  4689  001830  51B7               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4690  001832  0100               	movlb	0	; () banked
  4691  001834  1BC0               	xorwf	___ftdiv@sign& (0+255),f,b
  4692                           
  4693                           ; BSR set to: 0
  4694  001836  0E80               	movlw	128
  4695  001838  0100               	movlb	0	; () banked
  4696  00183A  17C0               	andwf	___ftdiv@sign& (0+255),f,b
  4697                           
  4698                           ; BSR set to: 0
  4699  00183C  0100               	movlb	0	; () banked
  4700  00183E  8FB3               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  4701                           
  4702                           ; BSR set to: 0
  4703  001840  0EFF               	movlw	255
  4704  001842  0100               	movlb	0	; () banked
  4705  001844  17B2               	andwf	___ftdiv@f1& (0+255),f,b
  4706  001846  0EFF               	movlw	255
  4707  001848  0100               	movlb	0	; () banked
  4708  00184A  17B3               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  4709  00184C  0E00               	movlw	0
  4710  00184E  0100               	movlb	0	; () banked
  4711  001850  17B4               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  4712                           
  4713                           ; BSR set to: 0
  4714  001852  0100               	movlb	0	; () banked
  4715  001854  8FB6               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  4716                           
  4717                           ; BSR set to: 0
  4718  001856  0EFF               	movlw	255
  4719  001858  0100               	movlb	0	; () banked
  4720  00185A  17B5               	andwf	___ftdiv@f2& (0+255),f,b
  4721  00185C  0EFF               	movlw	255
  4722  00185E  0100               	movlb	0	; () banked
  4723  001860  17B6               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  4724  001862  0E00               	movlw	0
  4725  001864  0100               	movlb	0	; () banked
  4726  001866  17B7               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  4727                           
  4728                           ; BSR set to: 0
  4729  001868  0E18               	movlw	24
  4730  00186A  0100               	movlb	0	; () banked
  4731  00186C  6FBB               	movwf	___ftdiv@cntr& (0+255),b
  4732  00186E                     l3089:
  4733                           
  4734                           ; BSR set to: 0
  4735  00186E  0100               	movlb	0	; () banked
  4736  001870  90D8               	bcf	status,0,c
  4737  001872  37BC               	rlcf	___ftdiv@f3& (0+255),f,b
  4738  001874  37BD               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  4739  001876  37BE               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  4740                           
  4741                           ; BSR set to: 0
  4742  001878  0100               	movlb	0	; () banked
  4743  00187A  51B5               	movf	___ftdiv@f2& (0+255),w,b
  4744  00187C  0100               	movlb	0	; () banked
  4745  00187E  5DB2               	subwf	___ftdiv@f1& (0+255),w,b
  4746  001880  0100               	movlb	0	; () banked
  4747  001882  51B6               	movf	(___ftdiv@f2+1)& (0+255),w,b
  4748  001884  0100               	movlb	0	; () banked
  4749  001886  59B3               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  4750  001888  0100               	movlb	0	; () banked
  4751  00188A  51B7               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4752  00188C  0100               	movlb	0	; () banked
  4753  00188E  59B4               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  4754  001890  A0D8               	btfss	status,0,c
  4755  001892  D00E               	goto	l864
  4756                           
  4757                           ; BSR set to: 0
  4758  001894  0100               	movlb	0	; () banked
  4759  001896  51B5               	movf	___ftdiv@f2& (0+255),w,b
  4760  001898  0100               	movlb	0	; () banked
  4761  00189A  5FB2               	subwf	___ftdiv@f1& (0+255),f,b
  4762  00189C  0100               	movlb	0	; () banked
  4763  00189E  51B6               	movf	(___ftdiv@f2+1)& (0+255),w,b
  4764  0018A0  0100               	movlb	0	; () banked
  4765  0018A2  5BB3               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  4766  0018A4  0100               	movlb	0	; () banked
  4767  0018A6  51B7               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4768  0018A8  0100               	movlb	0	; () banked
  4769  0018AA  5BB4               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  4770                           
  4771                           ; BSR set to: 0
  4772  0018AC  0100               	movlb	0	; () banked
  4773  0018AE  81BC               	bsf	___ftdiv@f3& (0+255),0,b
  4774  0018B0                     l864:
  4775                           
  4776                           ; BSR set to: 0
  4777  0018B0  0100               	movlb	0	; () banked
  4778  0018B2  90D8               	bcf	status,0,c
  4779  0018B4  37B2               	rlcf	___ftdiv@f1& (0+255),f,b
  4780  0018B6  37B3               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  4781  0018B8  37B4               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  4782                           
  4783                           ; BSR set to: 0
  4784  0018BA  0100               	movlb	0	; () banked
  4785  0018BC  2FBB               	decfsz	___ftdiv@cntr& (0+255),f,b
  4786  0018BE  D7D7               	goto	l3089
  4787                           
  4788                           ; BSR set to: 0
  4789                           
  4790                           ; BSR set to: 0
  4791  0018C0  C0BC  F0A6         	movff	___ftdiv@f3,___ftpack@arg
  4792  0018C4  C0BD  F0A7         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4793  0018C8  C0BE  F0A8         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4794  0018CC  C0BF  F0A9         	movff	___ftdiv@exp,___ftpack@exp
  4795  0018D0  C0C0  F0AA         	movff	___ftdiv@sign,___ftpack@sign
  4796  0018D4  EC9F  F00D         	call	___ftpack	;wreg free
  4797  0018D8  C0A6  F0B2         	movff	?___ftpack,?___ftdiv
  4798  0018DC  C0A7  F0B3         	movff	?___ftpack+1,?___ftdiv+1
  4799  0018E0  C0A8  F0B4         	movff	?___ftpack+2,?___ftdiv+2
  4800  0018E4  0012               	return	
  4801  0018E6                     __end_of___ftdiv:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           postinc0	equ	0xFEE
  4810                           wreg	equ	0xFE8
  4811                           postdec1	equ	0xFE5
  4812                           fsr1l	equ	0xFE1
  4813                           indf2	equ	0xFDF
  4814                           postinc2	equ	0xFDE
  4815                           postdec2	equ	0xFDD
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function ___ftadd *****************
  4821 ;; Defined at:
  4822 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  f1              3    0[BANK1 ] float 
  4825 ;;  f2              3    3[BANK1 ] float 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  exp1            1   11[BANK1 ] unsigned char 
  4828 ;;  exp2            1   10[BANK1 ] unsigned char 
  4829 ;;  sign            1    9[BANK1 ] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  3    0[BANK1 ] float 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4839 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;Total ram usage:       12 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    8
  4846 ;; This function calls:
  4847 ;;		___ftpack
  4848 ;; This function is called by:
  4849 ;;		_angleToPulse
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text15
  4854  000EB0                     __ptext15:
  4855                           	opt stack 0
  4856  000EB0                     ___ftadd:
  4857                           	opt stack 19
  4858                           
  4859                           ;incstack = 0
  4860  000EB0  C102  F106         	movff	___ftadd@f1+2,??___ftadd
  4861  000EB4  0101               	movlb	1	; () banked
  4862  000EB6  6B07               	clrf	(??___ftadd+1)& (0+255),b
  4863  000EB8  6B08               	clrf	(??___ftadd+2)& (0+255),b
  4864  000EBA  0101               	movlb	1	; () banked
  4865  000EBC  3501               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4866  000EBE  0101               	movlb	1	; () banked
  4867  000EC0  3706               	rlcf	??___ftadd& (0+255),f,b
  4868  000EC2  E301               	bnc	u4111
  4869  000EC4  8107               	bsf	(??___ftadd+1)& (0+255),0,b
  4870  000EC6                     u4111:
  4871  000EC6  0101               	movlb	1	; () banked
  4872  000EC8  5106               	movf	??___ftadd& (0+255),w,b
  4873  000ECA  0101               	movlb	1	; () banked
  4874  000ECC  6F0B               	movwf	___ftadd@exp1& (0+255),b
  4875  000ECE  C105  F106         	movff	___ftadd@f2+2,??___ftadd
  4876  000ED2  0101               	movlb	1	; () banked
  4877  000ED4  6B07               	clrf	(??___ftadd+1)& (0+255),b
  4878  000ED6  6B08               	clrf	(??___ftadd+2)& (0+255),b
  4879  000ED8  0101               	movlb	1	; () banked
  4880  000EDA  3504               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4881  000EDC  0101               	movlb	1	; () banked
  4882  000EDE  3706               	rlcf	??___ftadd& (0+255),f,b
  4883  000EE0  E301               	bnc	u4121
  4884  000EE2  8107               	bsf	(??___ftadd+1)& (0+255),0,b
  4885  000EE4                     u4121:
  4886  000EE4  0101               	movlb	1	; () banked
  4887  000EE6  5106               	movf	??___ftadd& (0+255),w,b
  4888  000EE8  0101               	movlb	1	; () banked
  4889  000EEA  6F0A               	movwf	___ftadd@exp2& (0+255),b
  4890                           
  4891                           ; BSR set to: 1
  4892  000EEC  0101               	movlb	1	; () banked
  4893  000EEE  510B               	movf	___ftadd@exp1& (0+255),w,b
  4894  000EF0  0101               	movlb	1	; () banked
  4895  000EF2  B4D8               	btfsc	status,2,c
  4896  000EF4  D011               	goto	l829
  4897                           
  4898                           ; BSR set to: 1
  4899  000EF6  0101               	movlb	1	; () banked
  4900  000EF8  510A               	movf	___ftadd@exp2& (0+255),w,b
  4901  000EFA  0101               	movlb	1	; () banked
  4902  000EFC  5D0B               	subwf	___ftadd@exp1& (0+255),w,b
  4903  000EFE  B0D8               	btfsc	status,0,c
  4904  000F00  D012               	goto	l4337
  4905                           
  4906                           ; BSR set to: 1
  4907  000F02  0101               	movlb	1	; () banked
  4908  000F04  510B               	movf	___ftadd@exp1& (0+255),w,b
  4909  000F06  0800               	sublw	0
  4910  000F08  0101               	movlb	1	; () banked
  4911  000F0A  250A               	addwf	___ftadd@exp2& (0+255),w,b
  4912  000F0C  0101               	movlb	1	; () banked
  4913  000F0E  6F06               	movwf	??___ftadd& (0+255),b
  4914  000F10  0E18               	movlw	24
  4915  000F12  0101               	movlb	1	; () banked
  4916  000F14  6506               	cpfsgt	??___ftadd& (0+255),b
  4917  000F16  D007               	goto	l4337
  4918  000F18                     l829:
  4919                           
  4920                           ; BSR set to: 1
  4921  000F18  C103  F100         	movff	___ftadd@f2,?___ftadd
  4922  000F1C  C104  F101         	movff	___ftadd@f2+1,?___ftadd+1
  4923  000F20  C105  F102         	movff	___ftadd@f2+2,?___ftadd+2
  4924  000F24  0012               	return	
  4925  000F26                     l4337:
  4926                           
  4927                           ; BSR set to: 1
  4928  000F26  0101               	movlb	1	; () banked
  4929  000F28  510A               	movf	___ftadd@exp2& (0+255),w,b
  4930  000F2A  0101               	movlb	1	; () banked
  4931  000F2C  B4D8               	btfsc	status,2,c
  4932  000F2E  D011               	goto	l833
  4933                           
  4934                           ; BSR set to: 1
  4935  000F30  0101               	movlb	1	; () banked
  4936  000F32  510B               	movf	___ftadd@exp1& (0+255),w,b
  4937  000F34  0101               	movlb	1	; () banked
  4938  000F36  5D0A               	subwf	___ftadd@exp2& (0+255),w,b
  4939  000F38  B0D8               	btfsc	status,0,c
  4940  000F3A  D012               	goto	l4343
  4941                           
  4942                           ; BSR set to: 1
  4943  000F3C  0101               	movlb	1	; () banked
  4944  000F3E  510A               	movf	___ftadd@exp2& (0+255),w,b
  4945  000F40  0800               	sublw	0
  4946  000F42  0101               	movlb	1	; () banked
  4947  000F44  250B               	addwf	___ftadd@exp1& (0+255),w,b
  4948  000F46  0101               	movlb	1	; () banked
  4949  000F48  6F06               	movwf	??___ftadd& (0+255),b
  4950  000F4A  0E18               	movlw	24
  4951  000F4C  0101               	movlb	1	; () banked
  4952  000F4E  6506               	cpfsgt	??___ftadd& (0+255),b
  4953  000F50  D007               	goto	l4343
  4954  000F52                     l833:
  4955                           
  4956                           ; BSR set to: 1
  4957  000F52  C100  F100         	movff	___ftadd@f1,?___ftadd
  4958  000F56  C101  F101         	movff	___ftadd@f1+1,?___ftadd+1
  4959  000F5A  C102  F102         	movff	___ftadd@f1+2,?___ftadd+2
  4960  000F5E  0012               	return	
  4961  000F60                     l4343:
  4962                           
  4963                           ; BSR set to: 1
  4964  000F60  0E06               	movlw	6
  4965  000F62  0101               	movlb	1	; () banked
  4966  000F64  6F09               	movwf	___ftadd@sign& (0+255),b
  4967                           
  4968                           ; BSR set to: 1
  4969  000F66  0101               	movlb	1	; () banked
  4970  000F68  AF02               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4971  000F6A  D002               	goto	l4349
  4972                           
  4973                           ; BSR set to: 1
  4974  000F6C  0101               	movlb	1	; () banked
  4975  000F6E  8F09               	bsf	___ftadd@sign& (0+255),7,b
  4976  000F70                     l4349:
  4977                           
  4978                           ; BSR set to: 1
  4979  000F70  0101               	movlb	1	; () banked
  4980  000F72  AF05               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4981  000F74  D002               	goto	l835
  4982                           
  4983                           ; BSR set to: 1
  4984  000F76  0101               	movlb	1	; () banked
  4985  000F78  8D09               	bsf	___ftadd@sign& (0+255),6,b
  4986  000F7A                     l835:
  4987                           
  4988                           ; BSR set to: 1
  4989  000F7A  0101               	movlb	1	; () banked
  4990  000F7C  8F01               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4991                           
  4992                           ; BSR set to: 1
  4993  000F7E  0EFF               	movlw	255
  4994  000F80  0101               	movlb	1	; () banked
  4995  000F82  1700               	andwf	___ftadd@f1& (0+255),f,b
  4996  000F84  0EFF               	movlw	255
  4997  000F86  0101               	movlb	1	; () banked
  4998  000F88  1701               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4999  000F8A  0E00               	movlw	0
  5000  000F8C  0101               	movlb	1	; () banked
  5001  000F8E  1702               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5002  000F90  0101               	movlb	1	; () banked
  5003  000F92  8F04               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5004                           
  5005                           ; BSR set to: 1
  5006  000F94  0EFF               	movlw	255
  5007  000F96  0101               	movlb	1	; () banked
  5008  000F98  1703               	andwf	___ftadd@f2& (0+255),f,b
  5009  000F9A  0EFF               	movlw	255
  5010  000F9C  0101               	movlb	1	; () banked
  5011  000F9E  1704               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5012  000FA0  0E00               	movlw	0
  5013  000FA2  0101               	movlb	1	; () banked
  5014  000FA4  1705               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5015                           
  5016                           ; BSR set to: 1
  5017  000FA6  0101               	movlb	1	; () banked
  5018  000FA8  510A               	movf	___ftadd@exp2& (0+255),w,b
  5019  000FAA  0101               	movlb	1	; () banked
  5020  000FAC  5D0B               	subwf	___ftadd@exp1& (0+255),w,b
  5021  000FAE  B0D8               	btfsc	status,0,c
  5022  000FB0  D025               	goto	l4369
  5023  000FB2                     l4359:
  5024                           
  5025                           ; BSR set to: 1
  5026  000FB2  0101               	movlb	1	; () banked
  5027  000FB4  90D8               	bcf	status,0,c
  5028  000FB6  3703               	rlcf	___ftadd@f2& (0+255),f,b
  5029  000FB8  3704               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5030  000FBA  3705               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5031  000FBC  0101               	movlb	1	; () banked
  5032  000FBE  070A               	decf	___ftadd@exp2& (0+255),f,b
  5033                           
  5034                           ; BSR set to: 1
  5035  000FC0  0101               	movlb	1	; () banked
  5036  000FC2  510B               	movf	___ftadd@exp1& (0+255),w,b
  5037  000FC4  0101               	movlb	1	; () banked
  5038  000FC6  190A               	xorwf	___ftadd@exp2& (0+255),w,b
  5039  000FC8  B4D8               	btfsc	status,2,c
  5040  000FCA  D011               	goto	l4367
  5041                           
  5042                           ; BSR set to: 1
  5043  000FCC  0101               	movlb	1	; () banked
  5044  000FCE  0709               	decf	___ftadd@sign& (0+255),f,b
  5045  000FD0  C109  F106         	movff	___ftadd@sign,??___ftadd
  5046  000FD4  0E07               	movlw	7
  5047  000FD6  0101               	movlb	1	; () banked
  5048  000FD8  1706               	andwf	??___ftadd& (0+255),f,b
  5049  000FDA  B4D8               	btfsc	status,2,c
  5050  000FDC  D008               	goto	l4367
  5051  000FDE  D7E9               	goto	l4359
  5052  000FE0                     l4365:
  5053                           
  5054                           ; BSR set to: 1
  5055  000FE0  0101               	movlb	1	; () banked
  5056  000FE2  90D8               	bcf	status,0,c
  5057  000FE4  3302               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5058  000FE6  3301               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5059  000FE8  3300               	rrcf	___ftadd@f1& (0+255),f,b
  5060  000FEA  0101               	movlb	1	; () banked
  5061  000FEC  2B0B               	incf	___ftadd@exp1& (0+255),f,b
  5062  000FEE                     l4367:
  5063                           
  5064                           ; BSR set to: 1
  5065  000FEE  0101               	movlb	1	; () banked
  5066  000FF0  510A               	movf	___ftadd@exp2& (0+255),w,b
  5067  000FF2  0101               	movlb	1	; () banked
  5068  000FF4  190B               	xorwf	___ftadd@exp1& (0+255),w,b
  5069  000FF6  B4D8               	btfsc	status,2,c
  5070  000FF8  D02B               	goto	l844
  5071  000FFA  D7F2               	goto	l4365
  5072  000FFC                     l4369:
  5073                           
  5074                           ; BSR set to: 1
  5075  000FFC  0101               	movlb	1	; () banked
  5076  000FFE  510B               	movf	___ftadd@exp1& (0+255),w,b
  5077  001000  0101               	movlb	1	; () banked
  5078  001002  5D0A               	subwf	___ftadd@exp2& (0+255),w,b
  5079  001004  B0D8               	btfsc	status,0,c
  5080  001006  D024               	goto	l844
  5081  001008                     l4371:
  5082                           
  5083                           ; BSR set to: 1
  5084  001008  0101               	movlb	1	; () banked
  5085  00100A  90D8               	bcf	status,0,c
  5086  00100C  3700               	rlcf	___ftadd@f1& (0+255),f,b
  5087  00100E  3701               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5088  001010  3702               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5089  001012  0101               	movlb	1	; () banked
  5090  001014  070B               	decf	___ftadd@exp1& (0+255),f,b
  5091                           
  5092                           ; BSR set to: 1
  5093  001016  0101               	movlb	1	; () banked
  5094  001018  510B               	movf	___ftadd@exp1& (0+255),w,b
  5095  00101A  0101               	movlb	1	; () banked
  5096  00101C  190A               	xorwf	___ftadd@exp2& (0+255),w,b
  5097  00101E  B4D8               	btfsc	status,2,c
  5098  001020  D011               	goto	l4379
  5099                           
  5100                           ; BSR set to: 1
  5101  001022  0101               	movlb	1	; () banked
  5102  001024  0709               	decf	___ftadd@sign& (0+255),f,b
  5103  001026  C109  F106         	movff	___ftadd@sign,??___ftadd
  5104  00102A  0E07               	movlw	7
  5105  00102C  0101               	movlb	1	; () banked
  5106  00102E  1706               	andwf	??___ftadd& (0+255),f,b
  5107  001030  B4D8               	btfsc	status,2,c
  5108  001032  D008               	goto	l4379
  5109  001034  D7E9               	goto	l4371
  5110  001036                     l4377:
  5111                           
  5112                           ; BSR set to: 1
  5113  001036  0101               	movlb	1	; () banked
  5114  001038  90D8               	bcf	status,0,c
  5115  00103A  3305               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5116  00103C  3304               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5117  00103E  3303               	rrcf	___ftadd@f2& (0+255),f,b
  5118  001040  0101               	movlb	1	; () banked
  5119  001042  2B0A               	incf	___ftadd@exp2& (0+255),f,b
  5120  001044                     l4379:
  5121                           
  5122                           ; BSR set to: 1
  5123  001044  0101               	movlb	1	; () banked
  5124  001046  510A               	movf	___ftadd@exp2& (0+255),w,b
  5125  001048  0101               	movlb	1	; () banked
  5126  00104A  190B               	xorwf	___ftadd@exp1& (0+255),w,b
  5127  00104C  A4D8               	btfss	status,2,c
  5128  00104E  D7F3               	goto	l4377
  5129  001050                     l844:
  5130                           
  5131                           ; BSR set to: 1
  5132  001050  0101               	movlb	1	; () banked
  5133  001052  AF09               	btfss	___ftadd@sign& (0+255),7,b
  5134  001054  D012               	goto	l853
  5135                           
  5136                           ; BSR set to: 1
  5137  001056  0EFF               	movlw	255
  5138  001058  0101               	movlb	1	; () banked
  5139  00105A  1B00               	xorwf	___ftadd@f1& (0+255),f,b
  5140  00105C  0EFF               	movlw	255
  5141  00105E  0101               	movlb	1	; () banked
  5142  001060  1B01               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5143  001062  0EFF               	movlw	255
  5144  001064  0101               	movlb	1	; () banked
  5145  001066  1B02               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5146  001068  0E01               	movlw	1
  5147  00106A  0101               	movlb	1	; () banked
  5148  00106C  2700               	addwf	___ftadd@f1& (0+255),f,b
  5149  00106E  0E00               	movlw	0
  5150  001070  0101               	movlb	1	; () banked
  5151  001072  2301               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5152  001074  0E00               	movlw	0
  5153  001076  0101               	movlb	1	; () banked
  5154  001078  2302               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5155  00107A                     l853:
  5156                           
  5157                           ; BSR set to: 1
  5158  00107A  0101               	movlb	1	; () banked
  5159  00107C  AD09               	btfss	___ftadd@sign& (0+255),6,b
  5160  00107E  D012               	goto	l4385
  5161                           
  5162                           ; BSR set to: 1
  5163  001080  0EFF               	movlw	255
  5164  001082  0101               	movlb	1	; () banked
  5165  001084  1B03               	xorwf	___ftadd@f2& (0+255),f,b
  5166  001086  0EFF               	movlw	255
  5167  001088  0101               	movlb	1	; () banked
  5168  00108A  1B04               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5169  00108C  0EFF               	movlw	255
  5170  00108E  0101               	movlb	1	; () banked
  5171  001090  1B05               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5172  001092  0E01               	movlw	1
  5173  001094  0101               	movlb	1	; () banked
  5174  001096  2703               	addwf	___ftadd@f2& (0+255),f,b
  5175  001098  0E00               	movlw	0
  5176  00109A  0101               	movlb	1	; () banked
  5177  00109C  2304               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5178  00109E  0E00               	movlw	0
  5179  0010A0  0101               	movlb	1	; () banked
  5180  0010A2  2305               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5181  0010A4                     l4385:
  5182                           
  5183                           ; BSR set to: 1
  5184  0010A4  0E00               	movlw	0
  5185  0010A6  0101               	movlb	1	; () banked
  5186  0010A8  6F09               	movwf	___ftadd@sign& (0+255),b
  5187                           
  5188                           ; BSR set to: 1
  5189  0010AA  0101               	movlb	1	; () banked
  5190  0010AC  5100               	movf	___ftadd@f1& (0+255),w,b
  5191  0010AE  0101               	movlb	1	; () banked
  5192  0010B0  2703               	addwf	___ftadd@f2& (0+255),f,b
  5193  0010B2  0101               	movlb	1	; () banked
  5194  0010B4  5101               	movf	(___ftadd@f1+1)& (0+255),w,b
  5195  0010B6  0101               	movlb	1	; () banked
  5196  0010B8  2304               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5197  0010BA  0101               	movlb	1	; () banked
  5198  0010BC  5102               	movf	(___ftadd@f1+2)& (0+255),w,b
  5199  0010BE  0101               	movlb	1	; () banked
  5200  0010C0  2305               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5201                           
  5202                           ; BSR set to: 1
  5203  0010C2  0101               	movlb	1	; () banked
  5204  0010C4  AF05               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5205  0010C6  D015               	goto	l4395
  5206                           
  5207                           ; BSR set to: 1
  5208  0010C8  0EFF               	movlw	255
  5209  0010CA  0101               	movlb	1	; () banked
  5210  0010CC  1B03               	xorwf	___ftadd@f2& (0+255),f,b
  5211  0010CE  0EFF               	movlw	255
  5212  0010D0  0101               	movlb	1	; () banked
  5213  0010D2  1B04               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5214  0010D4  0EFF               	movlw	255
  5215  0010D6  0101               	movlb	1	; () banked
  5216  0010D8  1B05               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5217  0010DA  0E01               	movlw	1
  5218  0010DC  0101               	movlb	1	; () banked
  5219  0010DE  2703               	addwf	___ftadd@f2& (0+255),f,b
  5220  0010E0  0E00               	movlw	0
  5221  0010E2  0101               	movlb	1	; () banked
  5222  0010E4  2304               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5223  0010E6  0E00               	movlw	0
  5224  0010E8  0101               	movlb	1	; () banked
  5225  0010EA  2305               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5226                           
  5227                           ; BSR set to: 1
  5228  0010EC  0E01               	movlw	1
  5229  0010EE  0101               	movlb	1	; () banked
  5230  0010F0  6F09               	movwf	___ftadd@sign& (0+255),b
  5231  0010F2                     l4395:
  5232                           
  5233                           ; BSR set to: 1
  5234  0010F2  C103  F0A6         	movff	___ftadd@f2,___ftpack@arg
  5235  0010F6  C104  F0A7         	movff	___ftadd@f2+1,___ftpack@arg+1
  5236  0010FA  C105  F0A8         	movff	___ftadd@f2+2,___ftpack@arg+2
  5237  0010FE  C10B  F0A9         	movff	___ftadd@exp1,___ftpack@exp
  5238  001102  C109  F0AA         	movff	___ftadd@sign,___ftpack@sign
  5239  001106  EC9F  F00D         	call	___ftpack	;wreg free
  5240  00110A  C0A6  F100         	movff	?___ftpack,?___ftadd
  5241  00110E  C0A7  F101         	movff	?___ftpack+1,?___ftadd+1
  5242  001112  C0A8  F102         	movff	?___ftpack+2,?___ftadd+2
  5243  001116  0012               	return	
  5244  001118                     __end_of___ftadd:
  5245                           	opt stack 0
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           postinc0	equ	0xFEE
  5253                           wreg	equ	0xFE8
  5254                           postdec1	equ	0xFE5
  5255                           fsr1l	equ	0xFE1
  5256                           indf2	equ	0xFDF
  5257                           postinc2	equ	0xFDE
  5258                           postdec2	equ	0xFDD
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function ___awtoft *****************
  5264 ;; Defined at:
  5265 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  c               2   46[BANK0 ] int 
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  sign            1   49[BANK0 ] unsigned char 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  3   46[BANK0 ] float 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5279 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;Total ram usage:        4 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    8
  5286 ;; This function calls:
  5287 ;;		___ftpack
  5288 ;; This function is called by:
  5289 ;;		_angleToPulse
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text16
  5294  0027D0                     __ptext16:
  5295                           	opt stack 0
  5296  0027D0                     ___awtoft:
  5297                           	opt stack 19
  5298                           
  5299                           ;incstack = 0
  5300  0027D0  0E00               	movlw	0
  5301  0027D2  0100               	movlb	0	; () banked
  5302  0027D4  6FB1               	movwf	___awtoft@sign& (0+255),b
  5303                           
  5304                           ; BSR set to: 0
  5305  0027D6  0100               	movlb	0	; () banked
  5306  0027D8  AFAF               	btfss	(___awtoft@c+1)& (0+255),7,b
  5307  0027DA  D008               	goto	l3159
  5308                           
  5309                           ; BSR set to: 0
  5310  0027DC  0100               	movlb	0	; () banked
  5311  0027DE  6DAE               	negf	___awtoft@c& (0+255),b
  5312  0027E0  1FAF               	comf	(___awtoft@c+1)& (0+255),f,b
  5313  0027E2  B0D8               	btfsc	status,0,c
  5314  0027E4  2BAF               	incf	(___awtoft@c+1)& (0+255),f,b
  5315                           
  5316                           ; BSR set to: 0
  5317  0027E6  0E01               	movlw	1
  5318  0027E8  0100               	movlb	0	; () banked
  5319  0027EA  6FB1               	movwf	___awtoft@sign& (0+255),b
  5320  0027EC                     l3159:
  5321                           
  5322                           ; BSR set to: 0
  5323  0027EC  C0AE  F0A6         	movff	___awtoft@c,___ftpack@arg
  5324  0027F0  C0AF  F0A7         	movff	___awtoft@c+1,___ftpack@arg+1
  5325  0027F4  0100               	movlb	0	; () banked
  5326  0027F6  6BA8               	clrf	(___ftpack@arg+2)& (0+255),b
  5327  0027F8  0E8E               	movlw	142
  5328  0027FA  0100               	movlb	0	; () banked
  5329  0027FC  6FA9               	movwf	___ftpack@exp& (0+255),b
  5330  0027FE  C0B1  F0AA         	movff	___awtoft@sign,___ftpack@sign
  5331  002802  EC9F  F00D         	call	___ftpack	;wreg free
  5332  002806  C0A6  F0AE         	movff	?___ftpack,?___awtoft
  5333  00280A  C0A7  F0AF         	movff	?___ftpack+1,?___awtoft+1
  5334  00280E  C0A8  F0B0         	movff	?___ftpack+2,?___awtoft+2
  5335  002812  0012               	return	
  5336  002814                     __end_of___awtoft:
  5337                           	opt stack 0
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           prodh	equ	0xFF4
  5343                           prodl	equ	0xFF3
  5344                           postinc0	equ	0xFEE
  5345                           wreg	equ	0xFE8
  5346                           postdec1	equ	0xFE5
  5347                           fsr1l	equ	0xFE1
  5348                           indf2	equ	0xFDF
  5349                           postinc2	equ	0xFDE
  5350                           postdec2	equ	0xFDD
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8
  5354                           
  5355 ;; *************** function ___altoft *****************
  5356 ;; Defined at:
  5357 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  c               4   46[BANK0 ] long 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  sign            1   55[BANK0 ] unsigned char 
  5362 ;;  exp             1   54[BANK0 ] unsigned char 
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  3   46[BANK0 ] float 
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;Total ram usage:       10 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    8
  5379 ;; This function calls:
  5380 ;;		___ftpack
  5381 ;; This function is called by:
  5382 ;;		_angleToPulse
  5383 ;;		_testFrequency
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text17
  5388  00220A                     __ptext17:
  5389                           	opt stack 0
  5390  00220A                     ___altoft:
  5391                           	opt stack 19
  5392                           
  5393                           ;incstack = 0
  5394  00220A  0E00               	movlw	0
  5395  00220C  0100               	movlb	0	; () banked
  5396  00220E  6FB7               	movwf	___altoft@sign& (0+255),b
  5397  002210  0E8E               	movlw	142
  5398  002212  0100               	movlb	0	; () banked
  5399  002214  6FB6               	movwf	___altoft@exp& (0+255),b
  5400                           
  5401                           ; BSR set to: 0
  5402  002216  0100               	movlb	0	; () banked
  5403  002218  AFB1               	btfss	(___altoft@c+3)& (0+255),7,b
  5404  00221A  D015               	goto	l2981
  5405                           
  5406                           ; BSR set to: 0
  5407  00221C  0100               	movlb	0	; () banked
  5408  00221E  1FB1               	comf	(___altoft@c+3)& (0+255),f,b
  5409  002220  1FB0               	comf	(___altoft@c+2)& (0+255),f,b
  5410  002222  1FAF               	comf	(___altoft@c+1)& (0+255),f,b
  5411  002224  6DAE               	negf	___altoft@c& (0+255),b
  5412  002226  0E00               	movlw	0
  5413  002228  23AF               	addwfc	(___altoft@c+1)& (0+255),f,b
  5414  00222A  23B0               	addwfc	(___altoft@c+2)& (0+255),f,b
  5415  00222C  23B1               	addwfc	(___altoft@c+3)& (0+255),f,b
  5416                           
  5417                           ; BSR set to: 0
  5418  00222E  0E01               	movlw	1
  5419  002230  0100               	movlb	0	; () banked
  5420  002232  6FB7               	movwf	___altoft@sign& (0+255),b
  5421                           
  5422                           ; BSR set to: 0
  5423  002234  D008               	goto	l2981
  5424  002236                     l2979:
  5425                           
  5426                           ; BSR set to: 0
  5427  002236  0100               	movlb	0	; () banked
  5428  002238  90D8               	bcf	status,0,c
  5429  00223A  33B1               	rrcf	(___altoft@c+3)& (0+255),f,b
  5430  00223C  33B0               	rrcf	(___altoft@c+2)& (0+255),f,b
  5431  00223E  33AF               	rrcf	(___altoft@c+1)& (0+255),f,b
  5432  002240  33AE               	rrcf	___altoft@c& (0+255),f,b
  5433  002242  0100               	movlb	0	; () banked
  5434  002244  2BB6               	incf	___altoft@exp& (0+255),f,b
  5435  002246                     l2981:
  5436                           
  5437                           ; BSR set to: 0
  5438  002246  0E00               	movlw	0
  5439  002248  0100               	movlb	0	; () banked
  5440  00224A  15AE               	andwf	___altoft@c& (0+255),w,b
  5441  00224C  0100               	movlb	0	; () banked
  5442  00224E  6FB2               	movwf	??___altoft& (0+255),b
  5443  002250  0E00               	movlw	0
  5444  002252  0100               	movlb	0	; () banked
  5445  002254  15AF               	andwf	(___altoft@c+1)& (0+255),w,b
  5446  002256  0100               	movlb	0	; () banked
  5447  002258  6FB3               	movwf	(??___altoft+1)& (0+255),b
  5448  00225A  0E00               	movlw	0
  5449  00225C  0100               	movlb	0	; () banked
  5450  00225E  15B0               	andwf	(___altoft@c+2)& (0+255),w,b
  5451  002260  0100               	movlb	0	; () banked
  5452  002262  6FB4               	movwf	(??___altoft+2)& (0+255),b
  5453  002264  0EFF               	movlw	255
  5454  002266  0100               	movlb	0	; () banked
  5455  002268  15B1               	andwf	(___altoft@c+3)& (0+255),w,b
  5456  00226A  0100               	movlb	0	; () banked
  5457  00226C  6FB5               	movwf	(??___altoft+3)& (0+255),b
  5458  00226E  0100               	movlb	0	; () banked
  5459  002270  51B2               	movf	??___altoft& (0+255),w,b
  5460  002272  0100               	movlb	0	; () banked
  5461  002274  11B3               	iorwf	(??___altoft+1)& (0+255),w,b
  5462  002276  0100               	movlb	0	; () banked
  5463  002278  11B4               	iorwf	(??___altoft+2)& (0+255),w,b
  5464  00227A  0100               	movlb	0	; () banked
  5465  00227C  11B5               	iorwf	(??___altoft+3)& (0+255),w,b
  5466  00227E  A4D8               	btfss	status,2,c
  5467  002280  D7DA               	goto	l2979
  5468                           
  5469                           ; BSR set to: 0
  5470                           
  5471                           ; BSR set to: 0
  5472  002282  C0AE  F0A6         	movff	___altoft@c,___ftpack@arg
  5473  002286  C0AF  F0A7         	movff	___altoft@c+1,___ftpack@arg+1
  5474  00228A  C0B0  F0A8         	movff	___altoft@c+2,___ftpack@arg+2
  5475  00228E  C0B6  F0A9         	movff	___altoft@exp,___ftpack@exp
  5476  002292  C0B7  F0AA         	movff	___altoft@sign,___ftpack@sign
  5477  002296  EC9F  F00D         	call	___ftpack	;wreg free
  5478  00229A  C0A6  F0AE         	movff	?___ftpack,?___altoft
  5479  00229E  C0A7  F0AF         	movff	?___ftpack+1,?___altoft+1
  5480  0022A2  C0A8  F0B0         	movff	?___ftpack+2,?___altoft+2
  5481  0022A6  0012               	return	
  5482  0022A8                     __end_of___altoft:
  5483                           	opt stack 0
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           postinc0	equ	0xFEE
  5491                           wreg	equ	0xFE8
  5492                           postdec1	equ	0xFE5
  5493                           fsr1l	equ	0xFE1
  5494                           indf2	equ	0xFDF
  5495                           postinc2	equ	0xFDE
  5496                           postdec2	equ	0xFDD
  5497                           fsr2h	equ	0xFDA
  5498                           fsr2l	equ	0xFD9
  5499                           status	equ	0xFD8
  5500                           
  5501 ;; *************** function ___ftpack *****************
  5502 ;; Defined at:
  5503 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  arg             3   38[BANK0 ] unsigned um
  5506 ;;  exp             1   41[BANK0 ] unsigned char 
  5507 ;;  sign            1   42[BANK0 ] unsigned char 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;		None
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  3   38[BANK0 ] float 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2, status,0
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5519 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5523 ;;Total ram usage:        8 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    7
  5526 ;; This function calls:
  5527 ;;		Nothing
  5528 ;; This function is called by:
  5529 ;;		___altoft
  5530 ;;		___awtoft
  5531 ;;		___ftadd
  5532 ;;		___ftdiv
  5533 ;;		___ftmul
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           	psect	text18
  5538  001B3E                     __ptext18:
  5539                           	opt stack 0
  5540  001B3E                     ___ftpack:
  5541                           	opt stack 19
  5542                           
  5543                           ;incstack = 0
  5544  001B3E  0100               	movlb	0	; () banked
  5545  001B40  51A9               	movf	___ftpack@exp& (0+255),w,b
  5546  001B42  0100               	movlb	0	; () banked
  5547  001B44  B4D8               	btfsc	status,2,c
  5548  001B46  D008               	goto	l2923
  5549                           
  5550                           ; BSR set to: 0
  5551  001B48  0100               	movlb	0	; () banked
  5552  001B4A  51A6               	movf	___ftpack@arg& (0+255),w,b
  5553  001B4C  0100               	movlb	0	; () banked
  5554  001B4E  11A7               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  5555  001B50  0100               	movlb	0	; () banked
  5556  001B52  11A8               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  5557  001B54  A4D8               	btfss	status,2,c
  5558  001B56  D011               	goto	l2929
  5559  001B58                     l2923:
  5560                           
  5561                           ; BSR set to: 0
  5562  001B58  0E00               	movlw	0
  5563  001B5A  0100               	movlb	0	; () banked
  5564  001B5C  6FA6               	movwf	?___ftpack& (0+255),b
  5565  001B5E  0E00               	movlw	0
  5566  001B60  0100               	movlb	0	; () banked
  5567  001B62  6FA7               	movwf	(?___ftpack+1)& (0+255),b
  5568  001B64  0E00               	movlw	0
  5569  001B66  0100               	movlb	0	; () banked
  5570  001B68  6FA8               	movwf	(?___ftpack+2)& (0+255),b
  5571                           
  5572                           ; BSR set to: 0
  5573  001B6A  0012               	return	
  5574  001B6C                     l2927:
  5575                           
  5576                           ; BSR set to: 0
  5577  001B6C  0100               	movlb	0	; () banked
  5578  001B6E  2BA9               	incf	___ftpack@exp& (0+255),f,b
  5579  001B70  0100               	movlb	0	; () banked
  5580  001B72  90D8               	bcf	status,0,c
  5581  001B74  33A8               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5582  001B76  33A7               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5583  001B78  33A6               	rrcf	___ftpack@arg& (0+255),f,b
  5584  001B7A                     l2929:
  5585                           
  5586                           ; BSR set to: 0
  5587  001B7A  0E00               	movlw	0
  5588  001B7C  0100               	movlb	0	; () banked
  5589  001B7E  15A6               	andwf	___ftpack@arg& (0+255),w,b
  5590  001B80  0100               	movlb	0	; () banked
  5591  001B82  6FAB               	movwf	??___ftpack& (0+255),b
  5592  001B84  0E00               	movlw	0
  5593  001B86  0100               	movlb	0	; () banked
  5594  001B88  15A7               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5595  001B8A  0100               	movlb	0	; () banked
  5596  001B8C  6FAC               	movwf	(??___ftpack+1)& (0+255),b
  5597  001B8E  0EFE               	movlw	254
  5598  001B90  0100               	movlb	0	; () banked
  5599  001B92  15A8               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5600  001B94  0100               	movlb	0	; () banked
  5601  001B96  6FAD               	movwf	(??___ftpack+2)& (0+255),b
  5602  001B98  0100               	movlb	0	; () banked
  5603  001B9A  51AB               	movf	??___ftpack& (0+255),w,b
  5604  001B9C  0100               	movlb	0	; () banked
  5605  001B9E  11AC               	iorwf	(??___ftpack+1)& (0+255),w,b
  5606  001BA0  0100               	movlb	0	; () banked
  5607  001BA2  11AD               	iorwf	(??___ftpack+2)& (0+255),w,b
  5608  001BA4  B4D8               	btfsc	status,2,c
  5609  001BA6  D011               	goto	l2935
  5610  001BA8  D7E1               	goto	l2927
  5611  001BAA                     l2931:
  5612                           
  5613                           ; BSR set to: 0
  5614  001BAA  0100               	movlb	0	; () banked
  5615  001BAC  2BA9               	incf	___ftpack@exp& (0+255),f,b
  5616                           
  5617                           ; BSR set to: 0
  5618  001BAE  0E01               	movlw	1
  5619  001BB0  0100               	movlb	0	; () banked
  5620  001BB2  27A6               	addwf	___ftpack@arg& (0+255),f,b
  5621  001BB4  0E00               	movlw	0
  5622  001BB6  0100               	movlb	0	; () banked
  5623  001BB8  23A7               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  5624  001BBA  0E00               	movlw	0
  5625  001BBC  0100               	movlb	0	; () banked
  5626  001BBE  23A8               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  5627  001BC0  0100               	movlb	0	; () banked
  5628  001BC2  90D8               	bcf	status,0,c
  5629  001BC4  33A8               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5630  001BC6  33A7               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5631  001BC8  33A6               	rrcf	___ftpack@arg& (0+255),f,b
  5632  001BCA                     l2935:
  5633                           
  5634                           ; BSR set to: 0
  5635  001BCA  0E00               	movlw	0
  5636  001BCC  0100               	movlb	0	; () banked
  5637  001BCE  15A6               	andwf	___ftpack@arg& (0+255),w,b
  5638  001BD0  0100               	movlb	0	; () banked
  5639  001BD2  6FAB               	movwf	??___ftpack& (0+255),b
  5640  001BD4  0E00               	movlw	0
  5641  001BD6  0100               	movlb	0	; () banked
  5642  001BD8  15A7               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5643  001BDA  0100               	movlb	0	; () banked
  5644  001BDC  6FAC               	movwf	(??___ftpack+1)& (0+255),b
  5645  001BDE  0EFF               	movlw	255
  5646  001BE0  0100               	movlb	0	; () banked
  5647  001BE2  15A8               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5648  001BE4  0100               	movlb	0	; () banked
  5649  001BE6  6FAD               	movwf	(??___ftpack+2)& (0+255),b
  5650  001BE8  0100               	movlb	0	; () banked
  5651  001BEA  51AB               	movf	??___ftpack& (0+255),w,b
  5652  001BEC  0100               	movlb	0	; () banked
  5653  001BEE  11AC               	iorwf	(??___ftpack+1)& (0+255),w,b
  5654  001BF0  0100               	movlb	0	; () banked
  5655  001BF2  11AD               	iorwf	(??___ftpack+2)& (0+255),w,b
  5656  001BF4  B4D8               	btfsc	status,2,c
  5657  001BF6  D008               	goto	l2939
  5658  001BF8  D7D8               	goto	l2931
  5659  001BFA                     l2937:
  5660                           
  5661                           ; BSR set to: 0
  5662  001BFA  0100               	movlb	0	; () banked
  5663  001BFC  07A9               	decf	___ftpack@exp& (0+255),f,b
  5664  001BFE  0100               	movlb	0	; () banked
  5665  001C00  90D8               	bcf	status,0,c
  5666  001C02  37A6               	rlcf	___ftpack@arg& (0+255),f,b
  5667  001C04  37A7               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  5668  001C06  37A8               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  5669  001C08                     l2939:
  5670                           
  5671                           ; BSR set to: 0
  5672  001C08  0100               	movlb	0	; () banked
  5673  001C0A  BFA7               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  5674  001C0C  D004               	goto	l806
  5675                           
  5676                           ; BSR set to: 0
  5677  001C0E  0E02               	movlw	2
  5678  001C10  0100               	movlb	0	; () banked
  5679  001C12  61A9               	cpfslt	___ftpack@exp& (0+255),b
  5680  001C14  D7F2               	goto	l2937
  5681  001C16                     l806:
  5682                           
  5683                           ; BSR set to: 0
  5684  001C16  0100               	movlb	0	; () banked
  5685  001C18  B1A9               	btfsc	___ftpack@exp& (0+255),0,b
  5686  001C1A  D002               	goto	l2945
  5687                           
  5688                           ; BSR set to: 0
  5689  001C1C  0100               	movlb	0	; () banked
  5690  001C1E  9FA7               	bcf	(___ftpack@arg+1)& (0+255),7,b
  5691  001C20                     l2945:
  5692                           
  5693                           ; BSR set to: 0
  5694  001C20  0100               	movlb	0	; () banked
  5695  001C22  90D8               	bcf	status,0,c
  5696  001C24  33A9               	rrcf	___ftpack@exp& (0+255),f,b
  5697  001C26  0100               	movlb	0	; () banked
  5698  001C28  51A9               	movf	___ftpack@exp& (0+255),w,b
  5699  001C2A  0100               	movlb	0	; () banked
  5700  001C2C  13A8               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  5701                           
  5702                           ; BSR set to: 0
  5703  001C2E  0100               	movlb	0	; () banked
  5704  001C30  51AA               	movf	___ftpack@sign& (0+255),w,b
  5705  001C32  0100               	movlb	0	; () banked
  5706  001C34  B4D8               	btfsc	status,2,c
  5707  001C36  D002               	goto	l2951
  5708                           
  5709                           ; BSR set to: 0
  5710  001C38  0100               	movlb	0	; () banked
  5711  001C3A  8FA8               	bsf	(___ftpack@arg+2)& (0+255),7,b
  5712  001C3C                     l2951:
  5713                           
  5714                           ; BSR set to: 0
  5715  001C3C  C0A6  F0A6         	movff	___ftpack@arg,?___ftpack
  5716  001C40  C0A7  F0A7         	movff	___ftpack@arg+1,?___ftpack+1
  5717  001C44  C0A8  F0A8         	movff	___ftpack@arg+2,?___ftpack+2
  5718  001C48  0012               	return	
  5719  001C4A                     __end_of___ftpack:
  5720                           	opt stack 0
  5721                           tblptru	equ	0xFF8
  5722                           tblptrh	equ	0xFF7
  5723                           tblptrl	equ	0xFF6
  5724                           tablat	equ	0xFF5
  5725                           prodh	equ	0xFF4
  5726                           prodl	equ	0xFF3
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           postdec1	equ	0xFE5
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _initTimer *****************
  5739 ;; Defined at:
  5740 ;;		line 52 in file "timer.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  timer           2   38[BANK0 ] int 
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;		None
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      void 
  5747 ;; Registers used:
  5748 ;;		wreg, status,2, status,0
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5754 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;Total ram usage:        4 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    7
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_initServo
  5765 ;;		_testFrequency
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text19
  5770  0026F8                     __ptext19:
  5771                           	opt stack 0
  5772  0026F8                     _initTimer:
  5773                           	opt stack 22
  5774                           
  5775                           ;timer.c: 53: switch(timer){
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;incstack = 0
  5779  0026F8  D00D               	goto	l3787
  5780  0026FA                     l3771:
  5781                           
  5782                           ;timer.c: 55: T0CON = 0;
  5783  0026FA  0E00               	movlw	0
  5784  0026FC  6ED5               	movwf	4053,c	;volatile
  5785                           
  5786                           ;timer.c: 56: T0CON |= 1<<3;
  5787  0026FE  86D5               	bsf	4053,3,c	;volatile
  5788                           
  5789                           ;timer.c: 58: TMR0IE = 1;
  5790  002700  8AF2               	bsf	intcon,5,c	;volatile
  5791                           
  5792                           ;timer.c: 59: break;
  5793  002702  D01C               	goto	l337
  5794  002704                     l3777:
  5795                           
  5796                           ;timer.c: 61: T1CON = 0;
  5797  002704  0E00               	movlw	0
  5798  002706  6ECD               	movwf	4045,c	;volatile
  5799                           
  5800                           ;timer.c: 63: TMR1IE = 1;
  5801  002708  809D               	bsf	3997,0,c	;volatile
  5802                           
  5803                           ;timer.c: 64: break;
  5804  00270A  D018               	goto	l337
  5805  00270C                     l3781:
  5806                           
  5807                           ;timer.c: 66: T3CON = 0;
  5808  00270C  0E00               	movlw	0
  5809  00270E  6EB1               	movwf	4017,c	;volatile
  5810                           
  5811                           ;timer.c: 67: TMR3IE = 1;
  5812  002710  82A0               	bsf	4000,1,c	;volatile
  5813                           
  5814                           ;timer.c: 69: }
  5815                           
  5816                           ;timer.c: 68: break;
  5817  002712  D014               	goto	l337
  5818  002714                     l3787:
  5819  002714  C0A6  F0A8         	movff	initTimer@timer,??_initTimer
  5820  002718  C0A7  F0A9         	movff	initTimer@timer+1,??_initTimer+1
  5821                           
  5822                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5823                           ; Switch size 1, requested type "space"
  5824                           ; Number of cases is 1, Range of values is 0 to 0
  5825                           ; switch strategies available:
  5826                           ; Name         Instructions Cycles
  5827                           ; simple_byte            4     3 (average)
  5828                           ;	Chosen strategy is simple_byte
  5829  00271C  0100               	movlb	0	; () banked
  5830  00271E  51A9               	movf	(??_initTimer+1)& (0+255),w,b
  5831  002720  0A00               	xorlw	0	; case 0
  5832  002722  A4D8               	btfss	status,2,c
  5833  002724  D00B               	goto	l337
  5834                           
  5835                           ; BSR set to: 0
  5836                           ; Switch size 1, requested type "space"
  5837                           ; Number of cases is 3, Range of values is 0 to 3
  5838                           ; switch strategies available:
  5839                           ; Name         Instructions Cycles
  5840                           ; simple_byte           10     6 (average)
  5841                           ;	Chosen strategy is simple_byte
  5842  002726  0100               	movlb	0	; () banked
  5843  002728  51A8               	movf	??_initTimer& (0+255),w,b
  5844  00272A  0A00               	xorlw	0	; case 0
  5845  00272C  B4D8               	btfsc	status,2,c
  5846  00272E  D7E5               	goto	l3771
  5847  002730  0A01               	xorlw	1	; case 1
  5848  002732  B4D8               	btfsc	status,2,c
  5849  002734  D7E7               	goto	l3777
  5850  002736  0A02               	xorlw	2	; case 3
  5851  002738  B4D8               	btfsc	status,2,c
  5852  00273A  D7E8               	goto	l3781
  5853  00273C                     l337:
  5854                           
  5855                           ;timer.c: 70: PEIE = 1;
  5856  00273C  8CF2               	bsf	intcon,6,c	;volatile
  5857                           
  5858                           ;timer.c: 71: (INTCONbits.GIE = 1);
  5859  00273E  8EF2               	bsf	intcon,7,c	;volatile
  5860  002740  0012               	return		;funcret
  5861  002742                     __end_of_initTimer:
  5862                           	opt stack 0
  5863                           tblptru	equ	0xFF8
  5864                           tblptrh	equ	0xFF7
  5865                           tblptrl	equ	0xFF6
  5866                           tablat	equ	0xFF5
  5867                           prodh	equ	0xFF4
  5868                           prodl	equ	0xFF3
  5869                           intcon	equ	0xFF2
  5870                           postinc0	equ	0xFEE
  5871                           wreg	equ	0xFE8
  5872                           postdec1	equ	0xFE5
  5873                           fsr1l	equ	0xFE1
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           postdec2	equ	0xFDD
  5877                           fsr2h	equ	0xFDA
  5878                           fsr2l	equ	0xFD9
  5879                           status	equ	0xFD8
  5880                           
  5881 ;; *************** function _initLCD *****************
  5882 ;; Defined at:
  5883 ;;		line 15 in file "lcd.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;		None
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, status,2, status,0, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;Total ram usage:        1 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:    9
  5904 ;; This function calls:
  5905 ;;		_lcdInst
  5906 ;; This function is called by:
  5907 ;;		_main
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	text20
  5912  002742                     __ptext20:
  5913                           	opt stack 0
  5914  002742                     _initLCD:
  5915                           	opt stack 21
  5916                           
  5917                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  5918                           
  5919                           ;incstack = 0
  5920  002742  0E31               	movlw	49
  5921  002744  0100               	movlb	0	; () banked
  5922  002746  6FAA               	movwf	??_initLCD& (0+255),b
  5923  002748  0EB2               	movlw	178
  5924  00274A                     u4397:
  5925  00274A  2EE8               	decfsz	wreg,f,c
  5926  00274C  D7FE               	bra	u4397
  5927  00274E  2FAA               	decfsz	??_initLCD& (0+255),f,b
  5928  002750  D7FC               	bra	u4397
  5929  002752  F000               	nop	
  5930                           
  5931                           ;lcd.c: 18: lcdInst(0b00110011);
  5932  002754  0E33               	movlw	51
  5933  002756  EC43  F014         	call	_lcdInst
  5934                           
  5935                           ;lcd.c: 19: lcdInst(0b00110010);
  5936  00275A  0E32               	movlw	50
  5937  00275C  EC43  F014         	call	_lcdInst
  5938                           
  5939                           ;lcd.c: 20: lcdInst(0b00101000);
  5940  002760  0E28               	movlw	40
  5941  002762  EC43  F014         	call	_lcdInst
  5942                           
  5943                           ;lcd.c: 21: lcdInst(0b00001111);
  5944  002766  0E0F               	movlw	15
  5945  002768  EC43  F014         	call	_lcdInst
  5946                           
  5947                           ;lcd.c: 22: lcdInst(0b00000110);
  5948  00276C  0E06               	movlw	6
  5949  00276E  EC43  F014         	call	_lcdInst
  5950                           
  5951                           ;lcd.c: 23: lcdInst(0b00000001);
  5952  002772  0E01               	movlw	1
  5953  002774  EC43  F014         	call	_lcdInst
  5954                           
  5955                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  5956  002778  0E31               	movlw	49
  5957  00277A  0100               	movlb	0	; () banked
  5958  00277C  6FAA               	movwf	??_initLCD& (0+255),b
  5959  00277E  0EB2               	movlw	178
  5960  002780                     u4407:
  5961  002780  2EE8               	decfsz	wreg,f,c
  5962  002782  D7FE               	bra	u4407
  5963  002784  2FAA               	decfsz	??_initLCD& (0+255),f,b
  5964  002786  D7FC               	bra	u4407
  5965  002788  F000               	nop	
  5966  00278A  0012               	return		;funcret
  5967  00278C                     __end_of_initLCD:
  5968                           	opt stack 0
  5969                           tblptru	equ	0xFF8
  5970                           tblptrh	equ	0xFF7
  5971                           tblptrl	equ	0xFF6
  5972                           tablat	equ	0xFF5
  5973                           prodh	equ	0xFF4
  5974                           prodl	equ	0xFF3
  5975                           intcon	equ	0xFF2
  5976                           postinc0	equ	0xFEE
  5977                           wreg	equ	0xFE8
  5978                           postdec1	equ	0xFE5
  5979                           fsr1l	equ	0xFE1
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           postdec2	equ	0xFDD
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function _lcdInst *****************
  5988 ;; Defined at:
  5989 ;;		line 27 in file "lcd.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  data            1    wreg     unsigned char 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  data            1   41[BANK0 ] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;Total ram usage:        2 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    8
  6010 ;; This function calls:
  6011 ;;		_lcdNibble
  6012 ;; This function is called by:
  6013 ;;		_initLCD
  6014 ;;		_lcdClear
  6015 ;;		_lcdNewline
  6016 ;;		_lcdHome
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text21
  6021  002886                     __ptext21:
  6022                           	opt stack 0
  6023  002886                     _lcdInst:
  6024                           	opt stack 17
  6025                           
  6026                           ;incstack = 0
  6027                           ;lcdInst@data stored from wreg
  6028  002886  0100               	movlb	0	; () banked
  6029  002888  6FA9               	movwf	lcdInst@data& (0+255),b
  6030                           
  6031                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  6032  00288A  948C               	bcf	3980,2,c	;volatile
  6033                           
  6034                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  6035  00288C  0E74               	movlw	116
  6036  00288E                     u4417:
  6037  00288E  2EE8               	decfsz	wreg,f,c
  6038  002890  D7FE               	bra	u4417
  6039  002892  D000               	nop2	
  6040                           
  6041                           ;lcd.c: 30: lcdNibble(data);
  6042  002894  0100               	movlb	0	; () banked
  6043  002896  51A9               	movf	lcdInst@data& (0+255),w,b
  6044  002898  EC29  F012         	call	_lcdNibble
  6045                           
  6046                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  6047  00289C  0E04               	movlw	4
  6048  00289E  0100               	movlb	0	; () banked
  6049  0028A0  6FA8               	movwf	??_lcdInst& (0+255),b
  6050  0028A2  0E3D               	movlw	61
  6051  0028A4                     u4427:
  6052  0028A4  2EE8               	decfsz	wreg,f,c
  6053  0028A6  D7FE               	bra	u4427
  6054  0028A8  2FA8               	decfsz	??_lcdInst& (0+255),f,b
  6055  0028AA  D7FC               	bra	u4427
  6056  0028AC  D000               	nop2	
  6057  0028AE  0012               	return		;funcret
  6058  0028B0                     __end_of_lcdInst:
  6059                           	opt stack 0
  6060                           tblptru	equ	0xFF8
  6061                           tblptrh	equ	0xFF7
  6062                           tblptrl	equ	0xFF6
  6063                           tablat	equ	0xFF5
  6064                           prodh	equ	0xFF4
  6065                           prodl	equ	0xFF3
  6066                           intcon	equ	0xFF2
  6067                           postinc0	equ	0xFEE
  6068                           wreg	equ	0xFE8
  6069                           postdec1	equ	0xFE5
  6070                           fsr1l	equ	0xFE1
  6071                           indf2	equ	0xFDF
  6072                           postinc2	equ	0xFDE
  6073                           postdec2	equ	0xFDD
  6074                           fsr2h	equ	0xFDA
  6075                           fsr2l	equ	0xFD9
  6076                           status	equ	0xFD8
  6077                           
  6078 ;; *************** function _lcdNibble *****************
  6079 ;; Defined at:
  6080 ;;		line 46 in file "lcd.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;  data            1    wreg     unsigned char 
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  data            1   39[BANK0 ] unsigned char 
  6085 ;;  temp            1   38[BANK0 ] unsigned char 
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  1    wreg      void 
  6088 ;; Registers used:
  6089 ;;		wreg, status,2, status,0
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 0/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6099 ;;Total ram usage:        2 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; Hardware stack levels required when called:    7
  6102 ;; This function calls:
  6103 ;;		Nothing
  6104 ;; This function is called by:
  6105 ;;		_lcdInst
  6106 ;;		_putch
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           	psect	text22
  6111  002452                     __ptext22:
  6112                           	opt stack 0
  6113  002452                     _lcdNibble:
  6114                           	opt stack 19
  6115                           
  6116                           ;incstack = 0
  6117                           ;lcdNibble@data stored from wreg
  6118  002452  0100               	movlb	0	; () banked
  6119  002454  6FA7               	movwf	lcdNibble@data& (0+255),b
  6120                           
  6121                           ;lcd.c: 48: char temp = data & 0xF0;
  6122  002456  0100               	movlb	0	; () banked
  6123  002458  51A7               	movf	lcdNibble@data& (0+255),w,b
  6124  00245A  0BF0               	andlw	240
  6125  00245C  0100               	movlb	0	; () banked
  6126  00245E  6FA6               	movwf	lcdNibble@temp& (0+255),b
  6127                           
  6128                           ;lcd.c: 49: LATD = LATD & 0x0F;
  6129  002460  508C               	movf	3980,w,c	;volatile
  6130  002462  0B0F               	andlw	15
  6131  002464  6E8C               	movwf	3980,c	;volatile
  6132                           
  6133                           ;lcd.c: 50: LATD = temp | LATD;
  6134  002466  0100               	movlb	0	; () banked
  6135  002468  51A6               	movf	lcdNibble@temp& (0+255),w,b
  6136  00246A  108C               	iorwf	3980,w,c	;volatile
  6137  00246C  6E8C               	movwf	3980,c	;volatile
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  6141  00246E  968C               	bcf	3980,3,c	;volatile
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6145  002470  0ED6               	movlw	214
  6146  002472                     u4437:
  6147  002472  D000               	nop2	
  6148  002474  D000               	nop2	
  6149  002476  2EE8               	decfsz	wreg,f,c
  6150  002478  D7FC               	bra	u4437
  6151  00247A  D000               	nop2	
  6152                           
  6153                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  6154  00247C  868C               	bsf	3980,3,c	;volatile
  6155                           
  6156                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6157  00247E  0ED6               	movlw	214
  6158  002480                     u4447:
  6159  002480  D000               	nop2	
  6160  002482  D000               	nop2	
  6161  002484  2EE8               	decfsz	wreg,f,c
  6162  002486  D7FC               	bra	u4447
  6163  002488  D000               	nop2	
  6164                           
  6165                           ;lcd.c: 58: data = data << 4;
  6166  00248A  0100               	movlb	0	; () banked
  6167  00248C  39A7               	swapf	lcdNibble@data& (0+255),w,b
  6168  00248E  0BF0               	andlw	240
  6169  002490  0100               	movlb	0	; () banked
  6170  002492  6FA7               	movwf	lcdNibble@data& (0+255),b
  6171                           
  6172                           ;lcd.c: 60: temp = data & 0xF0;
  6173  002494  0100               	movlb	0	; () banked
  6174  002496  51A7               	movf	lcdNibble@data& (0+255),w,b
  6175  002498  0BF0               	andlw	240
  6176  00249A  0100               	movlb	0	; () banked
  6177  00249C  6FA6               	movwf	lcdNibble@temp& (0+255),b
  6178                           
  6179                           ;lcd.c: 61: LATD = LATD & 0x0F;
  6180  00249E  508C               	movf	3980,w,c	;volatile
  6181  0024A0  0B0F               	andlw	15
  6182  0024A2  6E8C               	movwf	3980,c	;volatile
  6183                           
  6184                           ;lcd.c: 62: LATD = temp | LATD;
  6185  0024A4  0100               	movlb	0	; () banked
  6186  0024A6  51A6               	movf	lcdNibble@temp& (0+255),w,b
  6187  0024A8  108C               	iorwf	3980,w,c	;volatile
  6188  0024AA  6E8C               	movwf	3980,c	;volatile
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  6192  0024AC  968C               	bcf	3980,3,c	;volatile
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6196  0024AE  0ED6               	movlw	214
  6197  0024B0                     u4457:
  6198  0024B0  D000               	nop2	
  6199  0024B2  D000               	nop2	
  6200  0024B4  2EE8               	decfsz	wreg,f,c
  6201  0024B6  D7FC               	bra	u4457
  6202  0024B8  D000               	nop2	
  6203                           
  6204                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  6205  0024BA  868C               	bsf	3980,3,c	;volatile
  6206                           
  6207                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  6208  0024BC  0ED6               	movlw	214
  6209  0024BE                     u4467:
  6210  0024BE  D000               	nop2	
  6211  0024C0  D000               	nop2	
  6212  0024C2  2EE8               	decfsz	wreg,f,c
  6213  0024C4  D7FC               	bra	u4467
  6214  0024C6  D000               	nop2	
  6215  0024C8  0012               	return		;funcret
  6216  0024CA                     __end_of_lcdNibble:
  6217                           	opt stack 0
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           postinc0	equ	0xFEE
  6226                           wreg	equ	0xFE8
  6227                           postdec1	equ	0xFE5
  6228                           fsr1l	equ	0xFE1
  6229                           indf2	equ	0xFDF
  6230                           postinc2	equ	0xFDE
  6231                           postdec2	equ	0xFDD
  6232                           fsr2h	equ	0xFDA
  6233                           fsr2l	equ	0xFD9
  6234                           status	equ	0xFD8
  6235                           
  6236 ;; *************** function _service *****************
  6237 ;; Defined at:
  6238 ;;		line 139 in file "main.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;		None
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;  key             1  123[COMRAM] unsigned char 
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      void 
  6245 ;; Registers used:
  6246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;Total ram usage:       15 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    6
  6259 ;; This function calls:
  6260 ;;		_servoInterruptService
  6261 ;;		i2_setAngle
  6262 ;; This function is called by:
  6263 ;;		Interrupt level 2
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	intcode
  6268  000008                     __pintcode:
  6269                           	opt stack 0
  6270  000008                     _service:
  6271                           	opt stack 17
  6272                           
  6273                           ;incstack = 0
  6274  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6275  00000A  ED8C  F00F         	call	int_func,f	;refresh shadow registers
  6276                           tblptru	equ	0xFF8
  6277                           tblptrh	equ	0xFF7
  6278                           tblptrl	equ	0xFF6
  6279                           tablat	equ	0xFF5
  6280                           prodh	equ	0xFF4
  6281                           prodl	equ	0xFF3
  6282                           intcon	equ	0xFF2
  6283                           postinc0	equ	0xFEE
  6284                           wreg	equ	0xFE8
  6285                           postdec1	equ	0xFE5
  6286                           fsr1l	equ	0xFE1
  6287                           indf2	equ	0xFDF
  6288                           postinc2	equ	0xFDE
  6289                           postdec2	equ	0xFDD
  6290                           fsr2h	equ	0xFDA
  6291                           fsr2l	equ	0xFD9
  6292                           status	equ	0xFD8
  6293                           
  6294                           	psect	intcode_body
  6295  001F18                     __pintcode_body:
  6296                           	opt stack 17
  6297  001F18                     int_func:
  6298                           	opt stack 17
  6299  001F18  0006               	pop		; remove dummy address from shadow register refresh
  6300  001F1A  CFFA F06E          	movff	pclath,??_service
  6301  001F1E  CFFB F06F          	movff	pclatu,??_service+1
  6302  001F22  CFE9 F070          	movff	fsr0l,??_service+2
  6303  001F26  CFEA F071          	movff	fsr0h,??_service+3
  6304  001F2A  CFE1 F072          	movff	fsr1l,??_service+4
  6305  001F2E  CFE2 F073          	movff	fsr1h,??_service+5
  6306  001F32  CFD9 F074          	movff	fsr2l,??_service+6
  6307  001F36  CFDA F075          	movff	fsr2h,??_service+7
  6308  001F3A  CFF3 F076          	movff	prodl,??_service+8
  6309  001F3E  CFF4 F077          	movff	prodh,??_service+9
  6310  001F42  CFF6 F078          	movff	tblptrl,??_service+10
  6311  001F46  CFF7 F079          	movff	tblptrh,??_service+11
  6312  001F4A  CFF8 F07A          	movff	tblptru,??_service+12
  6313  001F4E  CFF5 F07B          	movff	tablat,??_service+13
  6314                           
  6315                           ;main.c: 141: servoInterruptService();
  6316  001F52  EC8C  F008         	call	_servoInterruptService	;wreg free
  6317                           
  6318                           ;main.c: 144: if(INT1IF){INT1IF = 0;
  6319  001F56  A0F0               	btfss	intcon3,0,c	;volatile
  6320  001F58  D02F               	goto	i2l117
  6321  001F5A  90F0               	bcf	intcon3,0,c	;volatile
  6322                           
  6323                           ;main.c: 145: char key = (PORTB & 0xF0) >> 4;
  6324  001F5C  3881               	swapf	3969,w,c	;volatile
  6325  001F5E  0B0F               	andlw	15
  6326  001F60  0B0F               	andlw	15
  6327  001F62  6E7C               	movwf	service@key,c
  6328                           
  6329                           ;main.c: 149: if(key == 4)setAngle(1,0);
  6330  001F64  0E04               	movlw	4
  6331  001F66  187C               	xorwf	service@key,w,c
  6332  001F68  A4D8               	btfss	status,2,c
  6333  001F6A  D00A               	goto	i2l4171
  6334  001F6C  0E00               	movlw	0
  6335  001F6E  6E5B               	movwf	i2setAngle@id+1,c
  6336  001F70  0E01               	movlw	1
  6337  001F72  6E5A               	movwf	i2setAngle@id,c
  6338  001F74  0E00               	movlw	0
  6339  001F76  6E5D               	movwf	i2setAngle@angle+1,c
  6340  001F78  0E00               	movlw	0
  6341  001F7A  6E5C               	movwf	i2setAngle@angle,c
  6342  001F7C  EC3B  F002         	call	i2_setAngle	;wreg free
  6343  001F80                     i2l4171:
  6344                           
  6345                           ;main.c: 150: if(key == 5)setAngle(1,90);
  6346  001F80  0E05               	movlw	5
  6347  001F82  187C               	xorwf	service@key,w,c
  6348  001F84  A4D8               	btfss	status,2,c
  6349  001F86  D00A               	goto	i2l4175
  6350  001F88  0E00               	movlw	0
  6351  001F8A  6E5B               	movwf	i2setAngle@id+1,c
  6352  001F8C  0E01               	movlw	1
  6353  001F8E  6E5A               	movwf	i2setAngle@id,c
  6354  001F90  0E00               	movlw	0
  6355  001F92  6E5D               	movwf	i2setAngle@angle+1,c
  6356  001F94  0E5A               	movlw	90
  6357  001F96  6E5C               	movwf	i2setAngle@angle,c
  6358  001F98  EC3B  F002         	call	i2_setAngle	;wreg free
  6359  001F9C                     i2l4175:
  6360                           
  6361                           ;main.c: 151: if(key == 6)setAngle(1,180);
  6362  001F9C  0E06               	movlw	6
  6363  001F9E  187C               	xorwf	service@key,w,c
  6364  001FA0  A4D8               	btfss	status,2,c
  6365  001FA2  D00A               	goto	i2l117
  6366  001FA4  0E00               	movlw	0
  6367  001FA6  6E5B               	movwf	i2setAngle@id+1,c
  6368  001FA8  0E01               	movlw	1
  6369  001FAA  6E5A               	movwf	i2setAngle@id,c
  6370  001FAC  0E00               	movlw	0
  6371  001FAE  6E5D               	movwf	i2setAngle@angle+1,c
  6372  001FB0  0EB4               	movlw	180
  6373  001FB2  6E5C               	movwf	i2setAngle@angle,c
  6374  001FB4  EC3B  F002         	call	i2_setAngle	;wreg free
  6375  001FB8                     i2l117:
  6376  001FB8  C07B  FFF5         	movff	??_service+13,tablat
  6377  001FBC  C07A  FFF8         	movff	??_service+12,tblptru
  6378  001FC0  C079  FFF7         	movff	??_service+11,tblptrh
  6379  001FC4  C078  FFF6         	movff	??_service+10,tblptrl
  6380  001FC8  C077  FFF4         	movff	??_service+9,prodh
  6381  001FCC  C076  FFF3         	movff	??_service+8,prodl
  6382  001FD0  C075  FFDA         	movff	??_service+7,fsr2h
  6383  001FD4  C074  FFD9         	movff	??_service+6,fsr2l
  6384  001FD8  C073  FFE2         	movff	??_service+5,fsr1h
  6385  001FDC  C072  FFE1         	movff	??_service+4,fsr1l
  6386  001FE0  C071  FFEA         	movff	??_service+3,fsr0h
  6387  001FE4  C070  FFE9         	movff	??_service+2,fsr0l
  6388  001FE8  C06F  FFFB         	movff	??_service+1,pclatu
  6389  001FEC  C06E  FFFA         	movff	??_service,pclath
  6390  001FF0  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6391  001FF2  0011               	retfie		f
  6392  001FF4                     __end_of_service:
  6393                           	opt stack 0
  6394                           pclatu	equ	0xFFB
  6395                           pclath	equ	0xFFA
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           intcon	equ	0xFF2
  6403                           intcon3	equ	0xFF0
  6404                           postinc0	equ	0xFEE
  6405                           fsr0h	equ	0xFEA
  6406                           fsr0l	equ	0xFE9
  6407                           wreg	equ	0xFE8
  6408                           postdec1	equ	0xFE5
  6409                           fsr1h	equ	0xFE2
  6410                           fsr1l	equ	0xFE1
  6411                           indf2	equ	0xFDF
  6412                           postinc2	equ	0xFDE
  6413                           postdec2	equ	0xFDD
  6414                           fsr2h	equ	0xFDA
  6415                           fsr2l	equ	0xFD9
  6416                           status	equ	0xFD8
  6417                           
  6418 ;; *************** function i2_setAngle *****************
  6419 ;; Defined at:
  6420 ;;		line 41 in file "servo.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;  id              2   89[COMRAM] int 
  6423 ;;  angle           2   91[COMRAM] int 
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;  setAngle       20    0[BANK0 ] int [10]
  6426 ;;  setAngle        4   20[BANK0 ] long 
  6427 ;;  setAngle        2   36[BANK0 ] int 
  6428 ;;  setAngle        2   34[BANK0 ] int 
  6429 ;;  setAngle        2   32[BANK0 ] int 
  6430 ;;  setAngle        2   30[BANK0 ] int 
  6431 ;;  setAngle        2   28[BANK0 ] int 
  6432 ;;  setAngle        2   26[BANK0 ] int 
  6433 ;;  setAngle        2   24[BANK0 ] int 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Totals:        20      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;Total ram usage:       58 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    5
  6450 ;; This function calls:
  6451 ;;		i2_angleToPulse
  6452 ;;		i2_lcdClear
  6453 ;;		i2_printf
  6454 ;; This function is called by:
  6455 ;;		_service
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text24
  6460  000476                     __ptext24:
  6461                           	opt stack 0
  6462  000476                     i2_setAngle:
  6463                           	opt stack 17
  6464                           
  6465                           ;servo.c: 42: pulse[id] = angleToPulse(angle);
  6466                           
  6467                           ;incstack = 0
  6468  000476  C05C  F046         	movff	i2setAngle@angle,i2angleToPulse@angle
  6469  00047A  C05D  F047         	movff	i2setAngle@angle+1,i2angleToPulse@angle+1
  6470  00047E  EC15  F00D         	call	i2_angleToPulse	;wreg free
  6471  000482  0E71               	movlw	low _pulse
  6472  000484  6E5E               	movwf	??i2_setAngle& (0+255),c
  6473  000486  0E01               	movlw	high _pulse
  6474  000488  6E5F               	movwf	(??i2_setAngle+1)& (0+255),c
  6475  00048A  90D8               	bcf	status,0,c
  6476  00048C  345A               	rlcf	i2setAngle@id,w,c
  6477  00048E  6ED9               	movwf	fsr2l,c
  6478  000490  345B               	rlcf	i2setAngle@id+1,w,c
  6479  000492  6EDA               	movwf	fsr2h,c
  6480  000494  90D8               	bcf	status,0,c
  6481  000496  36D9               	rlcf	fsr2l,f,c
  6482  000498  36DA               	rlcf	fsr2h,f,c
  6483  00049A  505E               	movf	??i2_setAngle,w,c
  6484  00049C  26D9               	addwf	fsr2l,f,c
  6485  00049E  505F               	movf	??i2_setAngle+1,w,c
  6486  0004A0  22DA               	addwfc	fsr2h,f,c
  6487  0004A2  C046  FFDE         	movff	?i2_angleToPulse,postinc2
  6488  0004A6  C047  FFDE         	movff	?i2_angleToPulse+1,postinc2
  6489  0004AA  C048  FFDE         	movff	?i2_angleToPulse+2,postinc2
  6490  0004AE  C049  FFDE         	movff	?i2_angleToPulse+3,postinc2
  6491                           
  6492                           ;servo.c: 45: int taken[10];
  6493                           ;servo.c: 46: for(int a = 0; a < nServo; a++) taken[a] = 0;
  6494  0004B2  0E00               	movlw	0
  6495  0004B4  0100               	movlb	0	; () banked
  6496  0004B6  6F9F               	movwf	(i2setAngle@a+1)& (0+255),b
  6497  0004B8  0E00               	movlw	0
  6498  0004BA  6F9E               	movwf	i2setAngle@a& (0+255),b
  6499  0004BC  D012               	goto	i2l4007
  6500  0004BE                     i2l4003:
  6501  0004BE  90D8               	bcf	status,0,c
  6502  0004C0  0100               	movlb	0	; () banked
  6503  0004C2  359E               	rlcf	i2setAngle@a& (0+255),w,b
  6504  0004C4  6ED9               	movwf	fsr2l,c
  6505  0004C6  0100               	movlb	0	; () banked
  6506  0004C8  359F               	rlcf	(i2setAngle@a+1)& (0+255),w,b
  6507  0004CA  6EDA               	movwf	fsr2h,c
  6508  0004CC  0E80               	movlw	low i2setAngle@taken
  6509  0004CE  26D9               	addwf	fsr2l,f,c
  6510  0004D0  0E00               	movlw	high i2setAngle@taken
  6511  0004D2  22DA               	addwfc	fsr2h,f,c
  6512  0004D4  0E00               	movlw	0
  6513  0004D6  6EDE               	movwf	postinc2,c
  6514  0004D8  0E00               	movlw	0
  6515  0004DA  6EDD               	movwf	postdec2,c
  6516                           
  6517                           ; BSR set to: 0
  6518  0004DC  0100               	movlb	0	; () banked
  6519  0004DE  4B9E               	infsnz	i2setAngle@a& (0+255),f,b
  6520  0004E0  2B9F               	incf	(i2setAngle@a+1)& (0+255),f,b
  6521  0004E2                     i2l4007:
  6522                           
  6523                           ; BSR set to: 0
  6524  0004E2  0101               	movlb	1	; () banked
  6525  0004E4  51A9               	movf	_nServo& (0+255),w,b
  6526  0004E6  0100               	movlb	0	; () banked
  6527  0004E8  5D9E               	subwf	i2setAngle@a& (0+255),w,b
  6528  0004EA  0100               	movlb	0	; () banked
  6529  0004EC  519F               	movf	(i2setAngle@a+1)& (0+255),w,b
  6530  0004EE  0A80               	xorlw	128
  6531  0004F0  6E5E               	movwf	??i2_setAngle& (0+255),c
  6532  0004F2  0101               	movlb	1	; () banked
  6533  0004F4  51AA               	movf	(_nServo+1)& (0+255),w,b
  6534  0004F6  0A80               	xorlw	128
  6535  0004F8  585E               	subwfb	??i2_setAngle& (0+255),w,c
  6536  0004FA  A0D8               	btfss	status,0,c
  6537  0004FC  D7E0               	goto	i2l4003
  6538                           
  6539                           ; BSR set to: 1
  6540                           ;servo.c: 48: int ind = 0;
  6541                           
  6542                           ; BSR set to: 1
  6543  0004FE  0E00               	movlw	0
  6544  000500  0100               	movlb	0	; () banked
  6545  000502  6F99               	movwf	(i2setAngle@ind+1)& (0+255),b
  6546  000504  0E00               	movlw	0
  6547  000506  6F98               	movwf	i2setAngle@ind& (0+255),b
  6548                           
  6549                           ;servo.c: 49: for(int a = 0; a < nServo; a++){
  6550  000508  0E00               	movlw	0
  6551  00050A  0100               	movlb	0	; () banked
  6552  00050C  6F9B               	movwf	(i2setAngle@a_505+1)& (0+255),b
  6553  00050E  0E00               	movlw	0
  6554  000510  6F9A               	movwf	i2setAngle@a_505& (0+255),b
  6555  000512  D098               	goto	i2l4035
  6556  000514                     i2l4011:
  6557                           
  6558                           ;servo.c: 50: long smallest = 0xffff;
  6559  000514  0EFF               	movlw	255
  6560  000516  0100               	movlb	0	; () banked
  6561  000518  6F94               	movwf	i2setAngle@smallest& (0+255),b
  6562  00051A  0EFF               	movlw	255
  6563  00051C  6F95               	movwf	(i2setAngle@smallest+1)& (0+255),b
  6564  00051E  0E00               	movlw	0
  6565  000520  6F96               	movwf	(i2setAngle@smallest+2)& (0+255),b
  6566  000522  0E00               	movlw	0
  6567  000524  6F97               	movwf	(i2setAngle@smallest+3)& (0+255),b
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;servo.c: 51: int smallest_ind = -1;
  6571  000526  0100               	movlb	0	; () banked
  6572  000528  69A0               	setf	i2setAngle@smallest_ind& (0+255),b
  6573  00052A  69A1               	setf	(i2setAngle@smallest_ind+1)& (0+255),b
  6574                           
  6575                           ;servo.c: 52: for(int b = 0; b < nServo; b++){
  6576  00052C  0E00               	movlw	0
  6577  00052E  0100               	movlb	0	; () banked
  6578  000530  6FA5               	movwf	(i2setAngle@b+1)& (0+255),b
  6579  000532  0E00               	movlw	0
  6580  000534  6FA4               	movwf	i2setAngle@b& (0+255),b
  6581  000536  D054               	goto	i2l4025
  6582  000538                     i2l4015:
  6583                           
  6584                           ;servo.c: 53: if(!taken[b] && pulse[b] < smallest){
  6585  000538  90D8               	bcf	status,0,c
  6586  00053A  0100               	movlb	0	; () banked
  6587  00053C  35A4               	rlcf	i2setAngle@b& (0+255),w,b
  6588  00053E  6ED9               	movwf	fsr2l,c
  6589  000540  0100               	movlb	0	; () banked
  6590  000542  35A5               	rlcf	(i2setAngle@b+1)& (0+255),w,b
  6591  000544  6EDA               	movwf	fsr2h,c
  6592  000546  0E80               	movlw	low i2setAngle@taken
  6593  000548  26D9               	addwf	fsr2l,f,c
  6594  00054A  0E00               	movlw	high i2setAngle@taken
  6595  00054C  22DA               	addwfc	fsr2h,f,c
  6596  00054E  50DE               	movf	postinc2,w,c
  6597  000550  10DE               	iorwf	postinc2,w,c
  6598  000552  A4D8               	btfss	status,2,c
  6599  000554  D042               	goto	i2l4023
  6600                           
  6601                           ; BSR set to: 0
  6602  000556  0E71               	movlw	low _pulse
  6603  000558  6E5E               	movwf	??i2_setAngle& (0+255),c
  6604  00055A  0E01               	movlw	high _pulse
  6605  00055C  6E5F               	movwf	(??i2_setAngle+1)& (0+255),c
  6606  00055E  90D8               	bcf	status,0,c
  6607  000560  0100               	movlb	0	; () banked
  6608  000562  35A4               	rlcf	i2setAngle@b& (0+255),w,b
  6609  000564  6ED9               	movwf	fsr2l,c
  6610  000566  0100               	movlb	0	; () banked
  6611  000568  35A5               	rlcf	(i2setAngle@b+1)& (0+255),w,b
  6612  00056A  6EDA               	movwf	fsr2h,c
  6613  00056C  90D8               	bcf	status,0,c
  6614  00056E  36D9               	rlcf	fsr2l,f,c
  6615  000570  36DA               	rlcf	fsr2h,f,c
  6616  000572  505E               	movf	??i2_setAngle,w,c
  6617  000574  26D9               	addwf	fsr2l,f,c
  6618  000576  505F               	movf	??i2_setAngle+1,w,c
  6619  000578  22DA               	addwfc	fsr2h,f,c
  6620  00057A  0100               	movlb	0	; () banked
  6621  00057C  5194               	movf	i2setAngle@smallest& (0+255),w,b
  6622  00057E  5CDE               	subwf	postinc2,w,c
  6623  000580  0100               	movlb	0	; () banked
  6624  000582  5195               	movf	(i2setAngle@smallest+1)& (0+255),w,b
  6625  000584  58DE               	subwfb	postinc2,w,c
  6626  000586  0100               	movlb	0	; () banked
  6627  000588  5196               	movf	(i2setAngle@smallest+2)& (0+255),w,b
  6628  00058A  58DE               	subwfb	postinc2,w,c
  6629  00058C  50DE               	movf	postinc2,w,c
  6630  00058E  0A80               	xorlw	128
  6631  000590  6E64               	movwf	(??i2_setAngle+6)& (0+255),c
  6632  000592  0100               	movlb	0	; () banked
  6633  000594  5197               	movf	(i2setAngle@smallest+3)& (0+255),w,b
  6634  000596  0A80               	xorlw	128
  6635  000598  5864               	subwfb	(??i2_setAngle+6)& (0+255),w,c
  6636  00059A  B0D8               	btfsc	status,0,c
  6637  00059C  D01E               	goto	i2l4023
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;servo.c: 54: smallest = pulse[b];
  6641  00059E  0E71               	movlw	low _pulse
  6642  0005A0  6E5E               	movwf	??i2_setAngle& (0+255),c
  6643  0005A2  0E01               	movlw	high _pulse
  6644  0005A4  6E5F               	movwf	(??i2_setAngle+1)& (0+255),c
  6645  0005A6  90D8               	bcf	status,0,c
  6646  0005A8  0100               	movlb	0	; () banked
  6647  0005AA  35A4               	rlcf	i2setAngle@b& (0+255),w,b
  6648  0005AC  6ED9               	movwf	fsr2l,c
  6649  0005AE  0100               	movlb	0	; () banked
  6650  0005B0  35A5               	rlcf	(i2setAngle@b+1)& (0+255),w,b
  6651  0005B2  6EDA               	movwf	fsr2h,c
  6652  0005B4  90D8               	bcf	status,0,c
  6653  0005B6  36D9               	rlcf	fsr2l,f,c
  6654  0005B8  36DA               	rlcf	fsr2h,f,c
  6655  0005BA  505E               	movf	??i2_setAngle,w,c
  6656  0005BC  26D9               	addwf	fsr2l,f,c
  6657  0005BE  505F               	movf	??i2_setAngle+1,w,c
  6658  0005C0  22DA               	addwfc	fsr2h,f,c
  6659  0005C2  CFDE F094          	movff	postinc2,i2setAngle@smallest
  6660  0005C6  CFDE F095          	movff	postinc2,i2setAngle@smallest+1
  6661  0005CA  CFDE F096          	movff	postinc2,i2setAngle@smallest+2
  6662  0005CE  CFDE F097          	movff	postinc2,i2setAngle@smallest+3
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;servo.c: 55: smallest_ind = b;
  6666  0005D2  C0A4  F0A0         	movff	i2setAngle@b,i2setAngle@smallest_ind
  6667  0005D6  C0A5  F0A1         	movff	i2setAngle@b+1,i2setAngle@smallest_ind+1
  6668  0005DA                     i2l4023:
  6669                           
  6670                           ; BSR set to: 0
  6671  0005DA  0100               	movlb	0	; () banked
  6672  0005DC  4BA4               	infsnz	i2setAngle@b& (0+255),f,b
  6673  0005DE  2BA5               	incf	(i2setAngle@b+1)& (0+255),f,b
  6674  0005E0                     i2l4025:
  6675                           
  6676                           ; BSR set to: 0
  6677  0005E0  0101               	movlb	1	; () banked
  6678  0005E2  51A9               	movf	_nServo& (0+255),w,b
  6679  0005E4  0100               	movlb	0	; () banked
  6680  0005E6  5DA4               	subwf	i2setAngle@b& (0+255),w,b
  6681  0005E8  0100               	movlb	0	; () banked
  6682  0005EA  51A5               	movf	(i2setAngle@b+1)& (0+255),w,b
  6683  0005EC  0A80               	xorlw	128
  6684  0005EE  6E5E               	movwf	??i2_setAngle& (0+255),c
  6685  0005F0  0101               	movlb	1	; () banked
  6686  0005F2  51AA               	movf	(_nServo+1)& (0+255),w,b
  6687  0005F4  0A80               	xorlw	128
  6688  0005F6  585E               	subwfb	??i2_setAngle& (0+255),w,c
  6689  0005F8  A0D8               	btfss	status,0,c
  6690  0005FA  D79E               	goto	i2l4015
  6691                           
  6692                           ; BSR set to: 1
  6693                           ;servo.c: 56: }
  6694                           ;servo.c: 57: }
  6695                           ;servo.c: 58: taken[smallest_ind] = 1;
  6696                           
  6697                           ; BSR set to: 1
  6698  0005FC  90D8               	bcf	status,0,c
  6699  0005FE  0100               	movlb	0	; () banked
  6700  000600  35A0               	rlcf	i2setAngle@smallest_ind& (0+255),w,b
  6701  000602  6ED9               	movwf	fsr2l,c
  6702  000604  0100               	movlb	0	; () banked
  6703  000606  35A1               	rlcf	(i2setAngle@smallest_ind+1)& (0+255),w,b
  6704  000608  6EDA               	movwf	fsr2h,c
  6705  00060A  0E80               	movlw	low i2setAngle@taken
  6706  00060C  26D9               	addwf	fsr2l,f,c
  6707  00060E  0E00               	movlw	high i2setAngle@taken
  6708  000610  22DA               	addwfc	fsr2h,f,c
  6709  000612  0E01               	movlw	1
  6710  000614  6EDE               	movwf	postinc2,c
  6711  000616  0E00               	movlw	0
  6712  000618  6EDD               	movwf	postdec2,c
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;servo.c: 59: order[ind++] = smallest_ind;
  6716  00061A  90D8               	bcf	status,0,c
  6717  00061C  0100               	movlb	0	; () banked
  6718  00061E  3598               	rlcf	i2setAngle@ind& (0+255),w,b
  6719  000620  6ED9               	movwf	fsr2l,c
  6720  000622  0100               	movlb	0	; () banked
  6721  000624  3599               	rlcf	(i2setAngle@ind+1)& (0+255),w,b
  6722  000626  6EDA               	movwf	fsr2h,c
  6723  000628  0E91               	movlw	low _order
  6724  00062A  26D9               	addwf	fsr2l,f,c
  6725  00062C  0E01               	movlw	high _order
  6726  00062E  22DA               	addwfc	fsr2h,f,c
  6727  000630  C0A0  FFDE         	movff	i2setAngle@smallest_ind,postinc2
  6728  000634  C0A1  FFDD         	movff	i2setAngle@smallest_ind+1,postdec2
  6729                           
  6730                           ; BSR set to: 0
  6731  000638  0100               	movlb	0	; () banked
  6732  00063A  4B98               	infsnz	i2setAngle@ind& (0+255),f,b
  6733  00063C  2B99               	incf	(i2setAngle@ind+1)& (0+255),f,b
  6734                           
  6735                           ; BSR set to: 0
  6736  00063E  0100               	movlb	0	; () banked
  6737  000640  4B9A               	infsnz	i2setAngle@a_505& (0+255),f,b
  6738  000642  2B9B               	incf	(i2setAngle@a_505+1)& (0+255),f,b
  6739  000644                     i2l4035:
  6740                           
  6741                           ; BSR set to: 0
  6742  000644  0101               	movlb	1	; () banked
  6743  000646  51A9               	movf	_nServo& (0+255),w,b
  6744  000648  0100               	movlb	0	; () banked
  6745  00064A  5D9A               	subwf	i2setAngle@a_505& (0+255),w,b
  6746  00064C  0100               	movlb	0	; () banked
  6747  00064E  519B               	movf	(i2setAngle@a_505+1)& (0+255),w,b
  6748  000650  0A80               	xorlw	128
  6749  000652  6E5E               	movwf	??i2_setAngle& (0+255),c
  6750  000654  0101               	movlb	1	; () banked
  6751  000656  51AA               	movf	(_nServo+1)& (0+255),w,b
  6752  000658  0A80               	xorlw	128
  6753  00065A  585E               	subwfb	??i2_setAngle& (0+255),w,c
  6754  00065C  A0D8               	btfss	status,0,c
  6755  00065E  D75A               	goto	i2l4011
  6756                           
  6757                           ; BSR set to: 1
  6758                           ;servo.c: 60: }
  6759                           ;servo.c: 63: int prev = 0;
  6760                           
  6761                           ; BSR set to: 1
  6762  000660  0E00               	movlw	0
  6763  000662  0100               	movlb	0	; () banked
  6764  000664  6F9D               	movwf	(i2setAngle@prev+1)& (0+255),b
  6765  000666  0E00               	movlw	0
  6766  000668  6F9C               	movwf	i2setAngle@prev& (0+255),b
  6767                           
  6768                           ;servo.c: 64: for(int a = 0; a < nServo; a++){
  6769  00066A  0E00               	movlw	0
  6770  00066C  0100               	movlb	0	; () banked
  6771  00066E  6FA3               	movwf	(i2setAngle@a_510+1)& (0+255),b
  6772  000670  0E00               	movlw	0
  6773  000672  6FA2               	movwf	i2setAngle@a_510& (0+255),b
  6774  000674  D07D               	goto	i2l4043
  6775  000676                     i2l4039:
  6776                           
  6777                           ;servo.c: 65: sequence[a] = pulse[order[a]] - prev;
  6778  000676  90D8               	bcf	status,0,c
  6779  000678  0100               	movlb	0	; () banked
  6780  00067A  35A2               	rlcf	i2setAngle@a_510& (0+255),w,b
  6781  00067C  6ED9               	movwf	fsr2l,c
  6782  00067E  0100               	movlb	0	; () banked
  6783  000680  35A3               	rlcf	(i2setAngle@a_510+1)& (0+255),w,b
  6784  000682  6EDA               	movwf	fsr2h,c
  6785  000684  0E91               	movlw	low _order
  6786  000686  26D9               	addwf	fsr2l,f,c
  6787  000688  0E01               	movlw	high _order
  6788  00068A  22DA               	addwfc	fsr2h,f,c
  6789  00068C  CFDE F05E          	movff	postinc2,??i2_setAngle
  6790  000690  CFDD F05F          	movff	postdec2,??i2_setAngle+1
  6791  000694  90D8               	bcf	status,0,c
  6792  000696  365E               	rlcf	??i2_setAngle,f,c
  6793  000698  365F               	rlcf	??i2_setAngle+1,f,c
  6794  00069A  90D8               	bcf	status,0,c
  6795  00069C  365E               	rlcf	??i2_setAngle,f,c
  6796  00069E  365F               	rlcf	??i2_setAngle+1,f,c
  6797  0006A0  0E71               	movlw	low _pulse
  6798  0006A2  245E               	addwf	??i2_setAngle,w,c
  6799  0006A4  6ED9               	movwf	fsr2l,c
  6800  0006A6  0E01               	movlw	high _pulse
  6801  0006A8  205F               	addwfc	??i2_setAngle+1,w,c
  6802  0006AA  6EDA               	movwf	fsr2h,c
  6803  0006AC  CFDE F060          	movff	postinc2,??i2_setAngle+2
  6804  0006B0  CFDE F061          	movff	postinc2,??i2_setAngle+3
  6805  0006B4  CFDE F062          	movff	postinc2,??i2_setAngle+4
  6806  0006B8  CFDE F063          	movff	postinc2,??i2_setAngle+5
  6807  0006BC  C09C  F064         	movff	i2setAngle@prev,??i2_setAngle+6
  6808  0006C0  C09D  F065         	movff	i2setAngle@prev+1,??i2_setAngle+7
  6809  0006C4  0E00               	movlw	0
  6810  0006C6  BE65               	btfsc	(??i2_setAngle+7)& (0+255),7,c
  6811  0006C8  0EFF               	movlw	255
  6812  0006CA  6E66               	movwf	(??i2_setAngle+8)& (0+255),c
  6813  0006CC  6E67               	movwf	(??i2_setAngle+9)& (0+255),c
  6814  0006CE  1E64               	comf	??i2_setAngle+6,f,c
  6815  0006D0  1E65               	comf	??i2_setAngle+7,f,c
  6816  0006D2  1E66               	comf	??i2_setAngle+8,f,c
  6817  0006D4  1E67               	comf	??i2_setAngle+9,f,c
  6818  0006D6  2A64               	incf	??i2_setAngle+6,f,c
  6819  0006D8  0E00               	movlw	0
  6820  0006DA  2265               	addwfc	??i2_setAngle+7,f,c
  6821  0006DC  2266               	addwfc	??i2_setAngle+8,f,c
  6822  0006DE  2267               	addwfc	??i2_setAngle+9,f,c
  6823  0006E0  5060               	movf	??i2_setAngle+2,w,c
  6824  0006E2  2464               	addwf	??i2_setAngle+6,w,c
  6825  0006E4  6E68               	movwf	(??i2_setAngle+10)& (0+255),c
  6826  0006E6  5061               	movf	??i2_setAngle+3,w,c
  6827  0006E8  2065               	addwfc	??i2_setAngle+7,w,c
  6828  0006EA  6E69               	movwf	(??i2_setAngle+11)& (0+255),c
  6829  0006EC  5062               	movf	??i2_setAngle+4,w,c
  6830  0006EE  2066               	addwfc	??i2_setAngle+8,w,c
  6831  0006F0  6E6A               	movwf	(??i2_setAngle+12)& (0+255),c
  6832  0006F2  5063               	movf	??i2_setAngle+5,w,c
  6833  0006F4  2067               	addwfc	??i2_setAngle+9,w,c
  6834  0006F6  6E6B               	movwf	(??i2_setAngle+13)& (0+255),c
  6835  0006F8  0E81               	movlw	low _sequence
  6836  0006FA  6E6C               	movwf	(??i2_setAngle+14)& (0+255),c
  6837  0006FC  0E01               	movlw	high _sequence
  6838  0006FE  6E6D               	movwf	(??i2_setAngle+15)& (0+255),c
  6839  000700  90D8               	bcf	status,0,c
  6840  000702  0100               	movlb	0	; () banked
  6841  000704  35A2               	rlcf	i2setAngle@a_510& (0+255),w,b
  6842  000706  6ED9               	movwf	fsr2l,c
  6843  000708  0100               	movlb	0	; () banked
  6844  00070A  35A3               	rlcf	(i2setAngle@a_510+1)& (0+255),w,b
  6845  00070C  6EDA               	movwf	fsr2h,c
  6846  00070E  90D8               	bcf	status,0,c
  6847  000710  36D9               	rlcf	fsr2l,f,c
  6848  000712  36DA               	rlcf	fsr2h,f,c
  6849  000714  506C               	movf	??i2_setAngle+14,w,c
  6850  000716  26D9               	addwf	fsr2l,f,c
  6851  000718  506D               	movf	??i2_setAngle+15,w,c
  6852  00071A  22DA               	addwfc	fsr2h,f,c
  6853  00071C  C068  FFDE         	movff	??i2_setAngle+10,postinc2
  6854  000720  C069  FFDE         	movff	??i2_setAngle+11,postinc2
  6855  000724  C06A  FFDE         	movff	??i2_setAngle+12,postinc2
  6856  000728  C06B  FFDE         	movff	??i2_setAngle+13,postinc2
  6857                           
  6858                           ;servo.c: 66: prev = pulse[order[a]];
  6859  00072C  90D8               	bcf	status,0,c
  6860  00072E  0100               	movlb	0	; () banked
  6861  000730  35A2               	rlcf	i2setAngle@a_510& (0+255),w,b
  6862  000732  6ED9               	movwf	fsr2l,c
  6863  000734  0100               	movlb	0	; () banked
  6864  000736  35A3               	rlcf	(i2setAngle@a_510+1)& (0+255),w,b
  6865  000738  6EDA               	movwf	fsr2h,c
  6866  00073A  0E91               	movlw	low _order
  6867  00073C  26D9               	addwf	fsr2l,f,c
  6868  00073E  0E01               	movlw	high _order
  6869  000740  22DA               	addwfc	fsr2h,f,c
  6870  000742  CFDE F05E          	movff	postinc2,??i2_setAngle
  6871  000746  CFDD F05F          	movff	postdec2,??i2_setAngle+1
  6872  00074A  90D8               	bcf	status,0,c
  6873  00074C  365E               	rlcf	??i2_setAngle,f,c
  6874  00074E  365F               	rlcf	??i2_setAngle+1,f,c
  6875  000750  90D8               	bcf	status,0,c
  6876  000752  365E               	rlcf	??i2_setAngle,f,c
  6877  000754  365F               	rlcf	??i2_setAngle+1,f,c
  6878  000756  0E71               	movlw	low _pulse
  6879  000758  245E               	addwf	??i2_setAngle,w,c
  6880  00075A  6ED9               	movwf	fsr2l,c
  6881  00075C  0E01               	movlw	high _pulse
  6882  00075E  205F               	addwfc	??i2_setAngle+1,w,c
  6883  000760  6EDA               	movwf	fsr2h,c
  6884  000762  CFDE F09C          	movff	postinc2,i2setAngle@prev
  6885  000766  CFDD F09D          	movff	postdec2,i2setAngle@prev+1
  6886                           
  6887                           ; BSR set to: 0
  6888  00076A  0100               	movlb	0	; () banked
  6889  00076C  4BA2               	infsnz	i2setAngle@a_510& (0+255),f,b
  6890  00076E  2BA3               	incf	(i2setAngle@a_510+1)& (0+255),f,b
  6891  000770                     i2l4043:
  6892                           
  6893                           ; BSR set to: 0
  6894  000770  0101               	movlb	1	; () banked
  6895  000772  51A9               	movf	_nServo& (0+255),w,b
  6896  000774  0100               	movlb	0	; () banked
  6897  000776  5DA2               	subwf	i2setAngle@a_510& (0+255),w,b
  6898  000778  0100               	movlb	0	; () banked
  6899  00077A  51A3               	movf	(i2setAngle@a_510+1)& (0+255),w,b
  6900  00077C  0A80               	xorlw	128
  6901  00077E  6E5E               	movwf	??i2_setAngle& (0+255),c
  6902  000780  0101               	movlb	1	; () banked
  6903  000782  51AA               	movf	(_nServo+1)& (0+255),w,b
  6904  000784  0A80               	xorlw	128
  6905  000786  585E               	subwfb	??i2_setAngle& (0+255),w,c
  6906  000788  A0D8               	btfss	status,0,c
  6907  00078A  D775               	goto	i2l4039
  6908                           
  6909                           ; BSR set to: 1
  6910                           ;servo.c: 67: }
  6911                           ;servo.c: 68: sequence[nServo] = 50000;
  6912                           
  6913                           ; BSR set to: 1
  6914  00078C  0E81               	movlw	low _sequence
  6915  00078E  6E5E               	movwf	??i2_setAngle& (0+255),c
  6916  000790  0E01               	movlw	high _sequence
  6917  000792  6E5F               	movwf	(??i2_setAngle+1)& (0+255),c
  6918  000794  90D8               	bcf	status,0,c
  6919  000796  0101               	movlb	1	; () banked
  6920  000798  35A9               	rlcf	_nServo& (0+255),w,b
  6921  00079A  6ED9               	movwf	fsr2l,c
  6922  00079C  0101               	movlb	1	; () banked
  6923  00079E  35AA               	rlcf	(_nServo+1)& (0+255),w,b
  6924  0007A0  6EDA               	movwf	fsr2h,c
  6925  0007A2  90D8               	bcf	status,0,c
  6926  0007A4  36D9               	rlcf	fsr2l,f,c
  6927  0007A6  36DA               	rlcf	fsr2h,f,c
  6928  0007A8  505E               	movf	??i2_setAngle,w,c
  6929  0007AA  26D9               	addwf	fsr2l,f,c
  6930  0007AC  505F               	movf	??i2_setAngle+1,w,c
  6931  0007AE  22DA               	addwfc	fsr2h,f,c
  6932  0007B0  0E50               	movlw	80
  6933  0007B2  6EDE               	movwf	postinc2,c
  6934  0007B4  0EC3               	movlw	195
  6935  0007B6  6EDE               	movwf	postinc2,c
  6936  0007B8  0E00               	movlw	0
  6937  0007BA  6EDE               	movwf	postinc2,c
  6938  0007BC  0E00               	movlw	0
  6939  0007BE  6EDD               	movwf	postdec2,c
  6940                           
  6941                           ; BSR set to: 1
  6942                           ;servo.c: 70: lcdClear();
  6943  0007C0  EC9E  F014         	call	i2_lcdClear	;wreg free
  6944                           
  6945                           ;servo.c: 71: printf("%ld %ld %ld %ld\n",pulse[0],pulse[1],pulse[2],pulse[3]);
  6946  0007C4  0ECD               	movlw	low STR_3
  6947  0007C6  6E17               	movwf	i2printf@f,c
  6948  0007C8  0EFF               	movlw	high STR_3
  6949  0007CA  6E18               	movwf	i2printf@f+1,c
  6950  0007CC  C171  F019         	movff	_pulse,?i2_printf+2
  6951  0007D0  C172  F01A         	movff	_pulse+1,?i2_printf+3
  6952  0007D4  C173  F01B         	movff	_pulse+2,?i2_printf+4
  6953  0007D8  C174  F01C         	movff	_pulse+3,?i2_printf+5
  6954  0007DC  C175  F01D         	movff	_pulse+4,?i2_printf+6
  6955  0007E0  C176  F01E         	movff	_pulse+5,?i2_printf+7
  6956  0007E4  C177  F01F         	movff	_pulse+6,?i2_printf+8
  6957  0007E8  C178  F020         	movff	_pulse+7,?i2_printf+9
  6958  0007EC  C179  F021         	movff	_pulse+8,?i2_printf+10
  6959  0007F0  C17A  F022         	movff	_pulse+9,?i2_printf+11
  6960  0007F4  C17B  F023         	movff	_pulse+10,?i2_printf+12
  6961  0007F8  C17C  F024         	movff	_pulse+11,?i2_printf+13
  6962  0007FC  C17D  F025         	movff	_pulse+12,?i2_printf+14
  6963  000800  C17E  F026         	movff	_pulse+13,?i2_printf+15
  6964  000804  C17F  F027         	movff	_pulse+14,?i2_printf+16
  6965  000808  C180  F028         	movff	_pulse+15,?i2_printf+17
  6966  00080C  ECE2  F005         	call	i2_printf	;wreg free
  6967                           
  6968                           ;servo.c: 72: printf("%ld %ld %ld %ld",sequence[0],sequence[1],sequence[2],sequence[3]);
  6969  000810  0EDE               	movlw	low STR_4
  6970  000812  6E17               	movwf	i2printf@f,c
  6971  000814  0EFF               	movlw	high STR_4
  6972  000816  6E18               	movwf	i2printf@f+1,c
  6973  000818  C181  F019         	movff	_sequence,?i2_printf+2
  6974  00081C  C182  F01A         	movff	_sequence+1,?i2_printf+3
  6975  000820  C183  F01B         	movff	_sequence+2,?i2_printf+4
  6976  000824  C184  F01C         	movff	_sequence+3,?i2_printf+5
  6977  000828  C185  F01D         	movff	_sequence+4,?i2_printf+6
  6978  00082C  C186  F01E         	movff	_sequence+5,?i2_printf+7
  6979  000830  C187  F01F         	movff	_sequence+6,?i2_printf+8
  6980  000834  C188  F020         	movff	_sequence+7,?i2_printf+9
  6981  000838  C189  F021         	movff	_sequence+8,?i2_printf+10
  6982  00083C  C18A  F022         	movff	_sequence+9,?i2_printf+11
  6983  000840  C18B  F023         	movff	_sequence+10,?i2_printf+12
  6984  000844  C18C  F024         	movff	_sequence+11,?i2_printf+13
  6985  000848  C18D  F025         	movff	_sequence+12,?i2_printf+14
  6986  00084C  C18E  F026         	movff	_sequence+13,?i2_printf+15
  6987  000850  C18F  F027         	movff	_sequence+14,?i2_printf+16
  6988  000854  C190  F028         	movff	_sequence+15,?i2_printf+17
  6989  000858  ECE2  F005         	call	i2_printf	;wreg free
  6990  00085C  0012               	return		;funcret
  6991  00085E                     __end_ofi2_setAngle:
  6992                           	opt stack 0
  6993                           pclatu	equ	0xFFB
  6994                           pclath	equ	0xFFA
  6995                           tblptru	equ	0xFF8
  6996                           tblptrh	equ	0xFF7
  6997                           tblptrl	equ	0xFF6
  6998                           tablat	equ	0xFF5
  6999                           prodh	equ	0xFF4
  7000                           prodl	equ	0xFF3
  7001                           intcon	equ	0xFF2
  7002                           intcon3	equ	0xFF0
  7003                           postinc0	equ	0xFEE
  7004                           fsr0h	equ	0xFEA
  7005                           fsr0l	equ	0xFE9
  7006                           wreg	equ	0xFE8
  7007                           postdec1	equ	0xFE5
  7008                           fsr1h	equ	0xFE2
  7009                           fsr1l	equ	0xFE1
  7010                           indf2	equ	0xFDF
  7011                           postinc2	equ	0xFDE
  7012                           postdec2	equ	0xFDD
  7013                           fsr2h	equ	0xFDA
  7014                           fsr2l	equ	0xFD9
  7015                           status	equ	0xFD8
  7016                           
  7017 ;; *************** function i2_printf *****************
  7018 ;; Defined at:
  7019 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  f               2   22[COMRAM] PTR const unsigned char 
  7022 ;;		 -> STR_16(17), STR_15(18), STR_14(17), STR_13(18), 
  7023 ;;		 -> STR_12(17), STR_11(19), STR_10(17), STR_9(18), 
  7024 ;;		 -> STR_8(17), STR_7(18), STR_6(17), STR_5(18), 
  7025 ;;		 -> STR_4(16), STR_3(17), STR_2(9), STR_1(8), 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  printf          4   47[COMRAM] unsigned long 
  7028 ;;  printf          4    0        struct .
  7029 ;;  printf          3    0        PTR const unsigned char 
  7030 ;;  printf          2   45[COMRAM] PTR void [1]
  7031 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7032 ;;  printf          2   43[COMRAM] int 
  7033 ;;  printf          2    0        unsigned int 
  7034 ;;  printf          1   52[COMRAM] char 
  7035 ;;  printf          1   51[COMRAM] unsigned char 
  7036 ;;  printf          1   42[COMRAM] unsigned char 
  7037 ;; Return value:  Size  Location     Type
  7038 ;;                  2   22[COMRAM] int 
  7039 ;; Registers used:
  7040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7041 ;; Tracked objects:
  7042 ;;		On entry : 0/0
  7043 ;;		On exit  : 0/0
  7044 ;;		Unchanged: 0/0
  7045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7046 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7047 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;Total ram usage:       31 bytes
  7051 ;; Hardware stack levels used:    1
  7052 ;; Hardware stack levels required when called:    4
  7053 ;; This function calls:
  7054 ;;		i2___lldiv
  7055 ;;		i2___llmod
  7056 ;;		i2_putch
  7057 ;; This function is called by:
  7058 ;;		i2_setAngle
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061                           
  7062                           	psect	text25
  7063  000BC4                     __ptext25:
  7064                           	opt stack 0
  7065  000BC4                     i2_printf:
  7066                           	opt stack 17
  7067                           
  7068                           ;doprnt.c: 466: va_list ap;
  7069                           ;doprnt.c: 499: signed char c;
  7070                           ;doprnt.c: 504: int prec;
  7071                           ;doprnt.c: 508: unsigned char flag;
  7072                           ;doprnt.c: 523: union {
  7073                           ;doprnt.c: 524: unsigned long vd;
  7074                           ;doprnt.c: 525: double integ;
  7075                           ;doprnt.c: 526: } tmpval;
  7076                           ;doprnt.c: 528: unsigned long val;
  7077                           ;doprnt.c: 529: unsigned len;
  7078                           ;doprnt.c: 530: const char * cp;
  7079                           ;doprnt.c: 533: *ap = __va_start();
  7080                           
  7081                           ;incstack = 0
  7082  000BC4  0E19               	movlw	low (?i2_printf+2)
  7083  000BC6  6E2E               	movwf	i2printf@ap,c
  7084  000BC8  0E00               	movlw	high (?i2_printf+2)
  7085  000BCA  6E2F               	movwf	i2printf@ap+1,c
  7086                           
  7087                           ;doprnt.c: 536: while(c = *f++) {
  7088  000BCC  D164               	goto	i2l3933
  7089  000BCE                     i2l3837:
  7090                           
  7091                           ;doprnt.c: 538: if(c != '%')
  7092  000BCE  0E25               	movlw	37
  7093  000BD0  1835               	xorwf	i2printf@c,w,c
  7094  000BD2  B4D8               	btfsc	status,2,c
  7095  000BD4  D004               	goto	i2l3841
  7096                           
  7097                           ;doprnt.c: 540: {
  7098                           ;doprnt.c: 541: (putch(c) );
  7099  000BD6  5035               	movf	i2printf@c,w,c
  7100  000BD8  EC6C  F014         	call	i2_putch
  7101                           
  7102                           ;doprnt.c: 542: continue;
  7103  000BDC  D15C               	goto	i2l3933
  7104  000BDE                     i2l3841:
  7105                           
  7106                           ;doprnt.c: 543: }
  7107                           ;doprnt.c: 548: flag = 0;
  7108  000BDE  0E00               	movlw	0
  7109  000BE0  6E34               	movwf	i2printf@flag,c
  7110                           
  7111                           ;doprnt.c: 635: switch(c = *f++) {
  7112                           
  7113                           ;doprnt.c: 633: loop:
  7114  000BE2  D012               	goto	i2l3855
  7115  000BE4                     i2l3843:
  7116                           
  7117                           ;doprnt.c: 643: flag |= 0x10;
  7118  000BE4  8834               	bsf	i2printf@flag,4,c
  7119                           
  7120                           ;doprnt.c: 644: goto loop;
  7121  000BE6  D010               	goto	i2l3855
  7122  000BE8                     i2l3845:
  7123                           
  7124                           ;doprnt.c: 721: flag |= 0x80;
  7125  000BE8  8E34               	bsf	i2printf@flag,7,c
  7126                           
  7127                           ;doprnt.c: 723: break;
  7128  000BEA  D02B               	goto	i2l551
  7129  000BEC                     i2l3847:
  7130                           
  7131                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7132  000BEC  C02E  FFD9         	movff	i2printf@ap,fsr2l
  7133  000BF0  C02F  FFDA         	movff	i2printf@ap+1,fsr2h
  7134  000BF4  50DF               	movf	indf2,w,c
  7135  000BF6  6E35               	movwf	i2printf@c,c
  7136  000BF8  0E02               	movlw	2
  7137  000BFA  262E               	addwf	i2printf@ap,f,c
  7138  000BFC  0E00               	movlw	0
  7139  000BFE  222F               	addwfc	i2printf@ap+1,f,c
  7140  000C00                     i2l3851:
  7141                           
  7142                           ;doprnt.c: 809: (putch(c) );
  7143  000C00  5035               	movf	i2printf@c,w,c
  7144  000C02  EC6C  F014         	call	i2_putch
  7145                           
  7146                           ;doprnt.c: 810: continue;
  7147  000C06  D147               	goto	i2l3933
  7148  000C08                     i2l3855:
  7149  000C08  C017  FFF6         	movff	i2printf@f,tblptrl
  7150  000C0C  C018  FFF7         	movff	i2printf@f+1,tblptrh
  7151  000C10  4A17               	infsnz	i2printf@f,f,c
  7152  000C12  2A18               	incf	i2printf@f+1,f,c
  7153  000C14                     	if	0	;tblptru may be non-zero
  7154  000C14                     	endif
  7155  000C14                     	if	0	;tblptru may be non-zero
  7156  000C14                     	endif
  7157  000C14  0008               	tblrd		*
  7158  000C16  CFF5 F035          	movff	tablat,i2printf@c
  7159  000C1A  5035               	movf	i2printf@c,w,c
  7160                           
  7161                           ; Switch size 1, requested type "space"
  7162                           ; Number of cases is 6, Range of values is 0 to 120
  7163                           ; switch strategies available:
  7164                           ; Name         Instructions Cycles
  7165                           ; simple_byte           19    10 (average)
  7166                           ;	Chosen strategy is simple_byte
  7167  000C1C  0A00               	xorlw	0	; case 0
  7168  000C1E  B4D8               	btfsc	status,2,c
  7169  000C20  0012               	return	
  7170  000C22  0A63               	xorlw	99	; case 99
  7171  000C24  B4D8               	btfsc	status,2,c
  7172  000C26  D7E2               	goto	i2l3847
  7173  000C28  0A07               	xorlw	7	; case 100
  7174  000C2A  B4D8               	btfsc	status,2,c
  7175  000C2C  D00A               	goto	i2l551
  7176  000C2E  0A0D               	xorlw	13	; case 105
  7177  000C30  B4D8               	btfsc	status,2,c
  7178  000C32  D007               	goto	i2l551
  7179  000C34  0A05               	xorlw	5	; case 108
  7180  000C36  B4D8               	btfsc	status,2,c
  7181  000C38  D7D5               	goto	i2l3843
  7182  000C3A  0A14               	xorlw	20	; case 120
  7183  000C3C  B4D8               	btfsc	status,2,c
  7184  000C3E  D7D4               	goto	i2l3845
  7185  000C40  D7DF               	goto	i2l3851
  7186  000C42                     i2l551:
  7187                           
  7188                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7189  000C42  BE34               	btfsc	i2printf@flag,7,c
  7190  000C44  D02E               	goto	i2l555
  7191                           
  7192                           ;doprnt.c: 1253: {
  7193                           ;doprnt.c: 1255: if(flag & 0x10)
  7194  000C46  A834               	btfss	i2printf@flag,4,c
  7195  000C48  D00E               	goto	i2l3863
  7196                           
  7197                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7198  000C4A  C02E  FFD9         	movff	i2printf@ap,fsr2l
  7199  000C4E  C02F  FFDA         	movff	i2printf@ap+1,fsr2h
  7200  000C52  CFDE F030          	movff	postinc2,i2printf@val
  7201  000C56  CFDE F031          	movff	postinc2,i2printf@val+1
  7202  000C5A  CFDE F032          	movff	postinc2,i2printf@val+2
  7203  000C5E  CFDE F033          	movff	postinc2,i2printf@val+3
  7204  000C62  0E04               	movlw	4
  7205  000C64  D00E               	goto	L3
  7206  000C66                     i2l3863:
  7207                           
  7208                           ;doprnt.c: 1257: else
  7209                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7210  000C66  C02E  FFD9         	movff	i2printf@ap,fsr2l
  7211  000C6A  C02F  FFDA         	movff	i2printf@ap+1,fsr2h
  7212  000C6E  CFDE F030          	movff	postinc2,i2printf@val
  7213  000C72  CFDD F031          	movff	postdec2,i2printf@val+1
  7214  000C76  0E00               	movlw	0
  7215  000C78  BE31               	btfsc	i2printf@val+1,7,c
  7216  000C7A  0EFF               	movlw	-1
  7217  000C7C  6E32               	movwf	i2printf@val+2,c
  7218  000C7E  6E33               	movwf	i2printf@val+3,c
  7219  000C80  0E02               	movlw	2
  7220  000C82                     L3:
  7221  000C82  262E               	addwf	i2printf@ap,f,c
  7222  000C84  0E00               	movlw	0
  7223  000C86  222F               	addwfc	i2printf@ap+1,f,c
  7224                           
  7225                           ;doprnt.c: 1261: if((long)val < 0) {
  7226  000C88  AE33               	btfss	i2printf@val+3,7,c
  7227  000C8A  D06A               	goto	i2l3911
  7228                           
  7229                           ;doprnt.c: 1262: flag |= 0x03;
  7230  000C8C  0E03               	movlw	3
  7231  000C8E  1234               	iorwf	i2printf@flag,f,c
  7232                           
  7233                           ;doprnt.c: 1263: val = -val;
  7234  000C90  1E33               	comf	i2printf@val+3,f,c
  7235  000C92  1E32               	comf	i2printf@val+2,f,c
  7236  000C94  1E31               	comf	i2printf@val+1,f,c
  7237  000C96  6C30               	negf	i2printf@val,c
  7238  000C98  0E00               	movlw	0
  7239  000C9A  2231               	addwfc	i2printf@val+1,f,c
  7240  000C9C  2232               	addwfc	i2printf@val+2,f,c
  7241  000C9E  2233               	addwfc	i2printf@val+3,f,c
  7242                           
  7243                           ;doprnt.c: 1264: }
  7244                           ;doprnt.c: 1266: }
  7245  000CA0  D05F               	goto	i2l3911
  7246  000CA2                     i2l555:
  7247                           
  7248                           ;doprnt.c: 1268: else
  7249                           ;doprnt.c: 1273: {
  7250                           ;doprnt.c: 1281: if(flag & 0x10)
  7251  000CA2  A834               	btfss	i2printf@flag,4,c
  7252  000CA4  D00E               	goto	i2l3877
  7253                           
  7254                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7255  000CA6  C02E  FFD9         	movff	i2printf@ap,fsr2l
  7256  000CAA  C02F  FFDA         	movff	i2printf@ap+1,fsr2h
  7257  000CAE  CFDE F030          	movff	postinc2,i2printf@val
  7258  000CB2  CFDE F031          	movff	postinc2,i2printf@val+1
  7259  000CB6  CFDE F032          	movff	postinc2,i2printf@val+2
  7260  000CBA  CFDE F033          	movff	postinc2,i2printf@val+3
  7261  000CBE  0E04               	movlw	4
  7262  000CC0  D00F               	goto	L4
  7263  000CC2                     i2l3877:
  7264                           
  7265                           ;doprnt.c: 1283: else
  7266                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7267  000CC2  C02E  FFD9         	movff	i2printf@ap,fsr2l
  7268  000CC6  C02F  FFDA         	movff	i2printf@ap+1,fsr2h
  7269  000CCA  CFDE F029          	movff	postinc2,??i2_printf
  7270  000CCE  CFDD F02A          	movff	postdec2,??i2_printf+1
  7271  000CD2  C029  F030         	movff	??i2_printf,i2printf@val
  7272  000CD6  C02A  F031         	movff	??i2_printf+1,i2printf@val+1
  7273  000CDA  6A32               	clrf	i2printf@val+2,c
  7274  000CDC  6A33               	clrf	i2printf@val+3,c
  7275  000CDE  0E02               	movlw	2
  7276  000CE0                     L4:
  7277  000CE0  262E               	addwf	i2printf@ap,f,c
  7278  000CE2  0E00               	movlw	0
  7279  000CE4  222F               	addwfc	i2printf@ap+1,f,c
  7280                           
  7281                           ;doprnt.c: 1287: }
  7282                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7283  000CE6  D03C               	goto	i2l3911
  7284  000CE8                     i2l3881:
  7285                           
  7286                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7287  000CE8  0E01               	movlw	1
  7288  000CEA  6E35               	movwf	i2printf@c,c
  7289  000CEC                     i2l3883:
  7290  000CEC  0E0A               	movlw	10
  7291  000CEE  1835               	xorwf	i2printf@c,w,c
  7292  000CF0  B4D8               	btfsc	status,2,c
  7293  000CF2  D03E               	goto	i2l3913
  7294                           
  7295                           ;doprnt.c: 1306: if(val < dpowers[c])
  7296  000CF4  5035               	movf	i2printf@c,w,c
  7297  000CF6  0D04               	mullw	4
  7298  000CF8  0E89               	movlw	low _dpowers
  7299  000CFA  24F3               	addwf	prodl,w,c
  7300  000CFC  6EF6               	movwf	tblptrl,c
  7301  000CFE  0EFE               	movlw	high _dpowers
  7302  000D00  20F4               	addwfc	prodh,w,c
  7303  000D02  6EF7               	movwf	tblptrh,c
  7304  000D04                     	if	0	;There are less than 3 active tblptr bytes
  7305  000D04                     	endif
  7306  000D04  0009               	tblrd		*+
  7307  000D06  50F5               	movf	tablat,w,c
  7308  000D08  5C30               	subwf	i2printf@val,w,c
  7309  000D0A  0009               	tblrd		*+
  7310  000D0C  50F5               	movf	tablat,w,c
  7311  000D0E  5831               	subwfb	i2printf@val+1,w,c
  7312  000D10  0009               	tblrd		*+
  7313  000D12  50F5               	movf	tablat,w,c
  7314  000D14  5832               	subwfb	i2printf@val+2,w,c
  7315  000D16  0009               	tblrd		*+
  7316  000D18  50F5               	movf	tablat,w,c
  7317  000D1A  5833               	subwfb	i2printf@val+3,w,c
  7318  000D1C  A0D8               	btfss	status,0,c
  7319  000D1E  D028               	goto	i2l3913
  7320                           
  7321                           ;doprnt.c: 1307: break;
  7322  000D20  2A35               	incf	i2printf@c,f,c
  7323  000D22  D7E4               	goto	i2l3883
  7324  000D24                     i2l3895:
  7325                           
  7326                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7327  000D24  0E01               	movlw	1
  7328  000D26  6E35               	movwf	i2printf@c,c
  7329  000D28                     i2l3897:
  7330  000D28  0E08               	movlw	8
  7331  000D2A  1835               	xorwf	i2printf@c,w,c
  7332  000D2C  B4D8               	btfsc	status,2,c
  7333  000D2E  D020               	goto	i2l3913
  7334                           
  7335                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7336  000D30  5035               	movf	i2printf@c,w,c
  7337  000D32  0D04               	mullw	4
  7338  000D34  0EB1               	movlw	low _hexpowers
  7339  000D36  24F3               	addwf	prodl,w,c
  7340  000D38  6EF6               	movwf	tblptrl,c
  7341  000D3A  0EFE               	movlw	high _hexpowers
  7342  000D3C  20F4               	addwfc	prodh,w,c
  7343  000D3E  6EF7               	movwf	tblptrh,c
  7344  000D40                     	if	0	;There are less than 3 active tblptr bytes
  7345  000D40                     	endif
  7346  000D40  0009               	tblrd		*+
  7347  000D42  50F5               	movf	tablat,w,c
  7348  000D44  5C30               	subwf	i2printf@val,w,c
  7349  000D46  0009               	tblrd		*+
  7350  000D48  50F5               	movf	tablat,w,c
  7351  000D4A  5831               	subwfb	i2printf@val+1,w,c
  7352  000D4C  0009               	tblrd		*+
  7353  000D4E  50F5               	movf	tablat,w,c
  7354  000D50  5832               	subwfb	i2printf@val+2,w,c
  7355  000D52  0009               	tblrd		*+
  7356  000D54  50F5               	movf	tablat,w,c
  7357  000D56  5833               	subwfb	i2printf@val+3,w,c
  7358  000D58  A0D8               	btfss	status,0,c
  7359  000D5A  D00A               	goto	i2l3913
  7360                           
  7361                           ;doprnt.c: 1318: break;
  7362  000D5C  2A35               	incf	i2printf@c,f,c
  7363  000D5E  D7E4               	goto	i2l3897
  7364  000D60                     i2l3911:
  7365  000D60  5034               	movf	i2printf@flag,w,c
  7366  000D62  0B80               	andlw	128
  7367                           
  7368                           ; Switch size 1, requested type "space"
  7369                           ; Number of cases is 2, Range of values is 0 to 128
  7370                           ; switch strategies available:
  7371                           ; Name         Instructions Cycles
  7372                           ; simple_byte            7     4 (average)
  7373                           ;	Chosen strategy is simple_byte
  7374  000D64  0A00               	xorlw	0	; case 0
  7375  000D66  B4D8               	btfsc	status,2,c
  7376  000D68  D7BF               	goto	i2l3881
  7377  000D6A  0A80               	xorlw	128	; case 128
  7378  000D6C  B4D8               	btfsc	status,2,c
  7379  000D6E  D7DA               	goto	i2l3895
  7380  000D70                     i2l3913:
  7381                           
  7382                           ;doprnt.c: 1422: {
  7383                           ;doprnt.c: 1438: if(flag & 0x03)
  7384  000D70  C034  F029         	movff	i2printf@flag,??i2_printf
  7385  000D74  0E03               	movlw	3
  7386  000D76  1629               	andwf	??i2_printf,f,c
  7387  000D78  B4D8               	btfsc	status,2,c
  7388  000D7A  D003               	goto	i2l3917
  7389                           
  7390                           ;doprnt.c: 1439: (putch('-') );
  7391  000D7C  0E2D               	movlw	45
  7392  000D7E  EC6C  F014         	call	i2_putch
  7393  000D82                     i2l3917:
  7394                           
  7395                           ;doprnt.c: 1469: }
  7396                           ;doprnt.c: 1472: prec = c;
  7397  000D82  5035               	movf	i2printf@c,w,c
  7398  000D84  6E2C               	movwf	i2printf@prec,c
  7399  000D86  6A2D               	clrf	i2printf@prec+1,c
  7400  000D88  BE2C               	btfsc	i2printf@prec,7,c
  7401  000D8A  062D               	decf	i2printf@prec+1,f,c
  7402                           
  7403                           ;doprnt.c: 1474: while(prec--) {
  7404  000D8C  D07C               	goto	i2l3931
  7405  000D8E                     i2l3919:
  7406                           
  7407                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7408  000D8E  C02C  F029         	movff	i2printf@prec,??i2_printf
  7409  000D92  C02D  F02A         	movff	i2printf@prec+1,??i2_printf+1
  7410  000D96  90D8               	bcf	status,0,c
  7411  000D98  3629               	rlcf	??i2_printf,f,c
  7412  000D9A  362A               	rlcf	??i2_printf+1,f,c
  7413  000D9C  90D8               	bcf	status,0,c
  7414  000D9E  3629               	rlcf	??i2_printf,f,c
  7415  000DA0  362A               	rlcf	??i2_printf+1,f,c
  7416  000DA2  0E89               	movlw	low _dpowers
  7417  000DA4  2429               	addwf	??i2_printf,w,c
  7418  000DA6  6EF6               	movwf	tblptrl,c
  7419  000DA8  0EFE               	movlw	high _dpowers
  7420  000DAA  202A               	addwfc	??i2_printf+1,w,c
  7421  000DAC  6EF7               	movwf	tblptrh,c
  7422  000DAE                     	if	0	;There are less than 3 active tblptr bytes
  7423  000DAE                     	endif
  7424  000DAE  0009               	tblrd		*+
  7425  000DB0  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  7426  000DB4  0009               	tblrd		*+
  7427  000DB6  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  7428  000DBA  0009               	tblrd		*+
  7429  000DBC  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  7430  000DC0  000A               	tblrd		*-
  7431  000DC2  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  7432  000DC6  C030  F001         	movff	i2printf@val,i2___lldiv@dividend
  7433  000DCA  C031  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  7434  000DCE  C032  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  7435  000DD2  C033  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  7436  000DD6  ECE8  F011         	call	i2___lldiv	;wreg free
  7437  000DDA  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  7438  000DDE  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  7439  000DE2  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  7440  000DE6  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  7441  000DEA  0E0A               	movlw	10
  7442  000DEC  6E12               	movwf	i2___llmod@divisor,c
  7443  000DEE  0E00               	movlw	0
  7444  000DF0  6E13               	movwf	i2___llmod@divisor+1,c
  7445  000DF2  0E00               	movlw	0
  7446  000DF4  6E14               	movwf	i2___llmod@divisor+2,c
  7447  000DF6  0E00               	movlw	0
  7448  000DF8  6E15               	movwf	i2___llmod@divisor+3,c
  7449  000DFA  ECA1  F012         	call	i2___llmod	;wreg free
  7450  000DFE  500E               	movf	?i2___llmod,w,c
  7451  000E00  0F30               	addlw	48
  7452  000E02  6E35               	movwf	i2printf@c,c
  7453                           
  7454                           ;doprnt.c: 1491: break;
  7455  000E04  D03D               	goto	i2l3929
  7456  000E06                     i2l3921:
  7457                           
  7458                           ;doprnt.c: 1499: {
  7459                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7460  000E06  C030  F001         	movff	i2printf@val,i2___lldiv@dividend
  7461  000E0A  C031  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  7462  000E0E  C032  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  7463  000E12  C033  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  7464  000E16  C02C  F029         	movff	i2printf@prec,??i2_printf
  7465  000E1A  C02D  F02A         	movff	i2printf@prec+1,??i2_printf+1
  7466  000E1E  90D8               	bcf	status,0,c
  7467  000E20  3629               	rlcf	??i2_printf,f,c
  7468  000E22  362A               	rlcf	??i2_printf+1,f,c
  7469  000E24  90D8               	bcf	status,0,c
  7470  000E26  3629               	rlcf	??i2_printf,f,c
  7471  000E28  362A               	rlcf	??i2_printf+1,f,c
  7472  000E2A  0EB1               	movlw	low _hexpowers
  7473  000E2C  2429               	addwf	??i2_printf,w,c
  7474  000E2E  6EF6               	movwf	tblptrl,c
  7475  000E30  0EFE               	movlw	high _hexpowers
  7476  000E32  202A               	addwfc	??i2_printf+1,w,c
  7477  000E34  6EF7               	movwf	tblptrh,c
  7478  000E36                     	if	0	;There are less than 3 active tblptr bytes
  7479  000E36                     	endif
  7480  000E36  0009               	tblrd		*+
  7481  000E38  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  7482  000E3C  0009               	tblrd		*+
  7483  000E3E  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  7484  000E42  0009               	tblrd		*+
  7485  000E44  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  7486  000E48  000A               	tblrd		*-
  7487  000E4A  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  7488  000E4E  ECE8  F011         	call	i2___lldiv	;wreg free
  7489  000E52  5001               	movf	?i2___lldiv,w,c
  7490  000E54  0B0F               	andlw	15
  7491  000E56  6E2B               	movwf	i2printf@idx,c
  7492                           
  7493                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7494  000E58  502B               	movf	i2printf@idx,w,c
  7495  000E5A  0D01               	mullw	1
  7496  000E5C  0E56               	movlw	low STR_17
  7497  000E5E  24F3               	addwf	prodl,w,c
  7498  000E60  6EF6               	movwf	tblptrl,c
  7499  000E62  0EFF               	movlw	high STR_17
  7500  000E64  20F4               	addwfc	prodh,w,c
  7501  000E66  6EF7               	movwf	tblptrh,c
  7502  000E68                     	if	0	;There are less than 3 active tblptr bytes
  7503  000E68                     	endif
  7504  000E68  0008               	tblrd		*
  7505  000E6A  CFF5 F035          	movff	tablat,i2printf@c
  7506                           
  7507                           ;doprnt.c: 1523: }
  7508                           
  7509                           ;doprnt.c: 1508: }
  7510                           ;doprnt.c: 1510: break;
  7511  000E6E  D008               	goto	i2l3929
  7512  000E70                     i2l3927:
  7513  000E70  5034               	movf	i2printf@flag,w,c
  7514  000E72  0B80               	andlw	128
  7515                           
  7516                           ; Switch size 1, requested type "space"
  7517                           ; Number of cases is 2, Range of values is 0 to 128
  7518                           ; switch strategies available:
  7519                           ; Name         Instructions Cycles
  7520                           ; simple_byte            7     4 (average)
  7521                           ;	Chosen strategy is simple_byte
  7522  000E74  0A00               	xorlw	0	; case 0
  7523  000E76  B4D8               	btfsc	status,2,c
  7524  000E78  D78A               	goto	i2l3919
  7525  000E7A  0A80               	xorlw	128	; case 128
  7526  000E7C  B4D8               	btfsc	status,2,c
  7527  000E7E  D7C3               	goto	i2l3921
  7528  000E80                     i2l3929:
  7529                           
  7530                           ;doprnt.c: 1524: (putch(c) );
  7531  000E80  5035               	movf	i2printf@c,w,c
  7532  000E82  EC6C  F014         	call	i2_putch
  7533  000E86                     i2l3931:
  7534  000E86  062C               	decf	i2printf@prec,f,c
  7535  000E88  A0D8               	btfss	status,0,c
  7536  000E8A  062D               	decf	i2printf@prec+1,f,c
  7537  000E8C  282C               	incf	i2printf@prec,w,c
  7538  000E8E  E1F0               	bnz	i2l3927
  7539  000E90  282D               	incf	i2printf@prec+1,w,c
  7540  000E92  A4D8               	btfss	status,2,c
  7541  000E94  D7ED               	goto	i2l3927
  7542  000E96                     i2l3933:
  7543  000E96  C017  FFF6         	movff	i2printf@f,tblptrl
  7544  000E9A  C018  FFF7         	movff	i2printf@f+1,tblptrh
  7545  000E9E  4A17               	infsnz	i2printf@f,f,c
  7546  000EA0  2A18               	incf	i2printf@f+1,f,c
  7547  000EA2                     	if	0	;tblptru may be non-zero
  7548  000EA2                     	endif
  7549  000EA2                     	if	0	;tblptru may be non-zero
  7550  000EA2                     	endif
  7551  000EA2  0008               	tblrd		*
  7552  000EA4  CFF5 F035          	movff	tablat,i2printf@c
  7553  000EA8  5035               	movf	i2printf@c,w,c
  7554  000EAA  B4D8               	btfsc	status,2,c
  7555  000EAC  0012               	return	
  7556  000EAE  D68F               	goto	i2l3837
  7557  000EB0                     __end_ofi2_printf:
  7558                           	opt stack 0
  7559                           pclatu	equ	0xFFB
  7560                           pclath	equ	0xFFA
  7561                           tblptru	equ	0xFF8
  7562                           tblptrh	equ	0xFF7
  7563                           tblptrl	equ	0xFF6
  7564                           tablat	equ	0xFF5
  7565                           prodh	equ	0xFF4
  7566                           prodl	equ	0xFF3
  7567                           intcon	equ	0xFF2
  7568                           intcon3	equ	0xFF0
  7569                           postinc0	equ	0xFEE
  7570                           fsr0h	equ	0xFEA
  7571                           fsr0l	equ	0xFE9
  7572                           wreg	equ	0xFE8
  7573                           postdec1	equ	0xFE5
  7574                           fsr1h	equ	0xFE2
  7575                           fsr1l	equ	0xFE1
  7576                           indf2	equ	0xFDF
  7577                           postinc2	equ	0xFDE
  7578                           postdec2	equ	0xFDD
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function i2_putch *****************
  7584 ;; Defined at:
  7585 ;;		line 35 in file "lcd.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  data            1    wreg     unsigned char 
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;  data            1    4[COMRAM] unsigned char 
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2, status,0, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;Total ram usage:        1 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:    3
  7606 ;; This function calls:
  7607 ;;		i2_lcdNewline
  7608 ;;		i2_lcdNibble
  7609 ;; This function is called by:
  7610 ;;		i2_printf
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           	psect	text26
  7615  0028D8                     __ptext26:
  7616                           	opt stack 0
  7617  0028D8                     i2_putch:
  7618                           	opt stack 17
  7619                           
  7620                           ;incstack = 0
  7621                           ;i2putch@data stored from wreg
  7622  0028D8  6E05               	movwf	i2putch@data,c
  7623                           
  7624                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7625  0028DA  0E0A               	movlw	10
  7626  0028DC  1805               	xorwf	i2putch@data,w,c
  7627  0028DE  A4D8               	btfss	status,2,c
  7628  0028E0  D003               	goto	i2l138
  7629  0028E2  EC9A  F014         	call	i2_lcdNewline	;wreg free
  7630  0028E6  0012               	return	
  7631  0028E8                     i2l138:
  7632                           
  7633                           ;lcd.c: 37: else
  7634                           ;lcd.c: 38: {
  7635                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7636  0028E8  848C               	bsf	3980,2,c	;volatile
  7637                           
  7638                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7639  0028EA  0E74               	movlw	116
  7640  0028EC                     i2u447_47:
  7641  0028EC  2EE8               	decfsz	wreg,f,c
  7642  0028EE  D7FE               	bra	i2u447_47
  7643  0028F0  D000               	nop2	
  7644                           
  7645                           ;lcd.c: 41: lcdNibble(data);
  7646  0028F2  5005               	movf	i2putch@data,w,c
  7647  0028F4  ECD4  F012         	call	i2_lcdNibble
  7648  0028F8  0012               	return	
  7649  0028FA                     __end_ofi2_putch:
  7650                           	opt stack 0
  7651                           pclatu	equ	0xFFB
  7652                           pclath	equ	0xFFA
  7653                           tblptru	equ	0xFF8
  7654                           tblptrh	equ	0xFF7
  7655                           tblptrl	equ	0xFF6
  7656                           tablat	equ	0xFF5
  7657                           prodh	equ	0xFF4
  7658                           prodl	equ	0xFF3
  7659                           intcon	equ	0xFF2
  7660                           intcon3	equ	0xFF0
  7661                           postinc0	equ	0xFEE
  7662                           fsr0h	equ	0xFEA
  7663                           fsr0l	equ	0xFE9
  7664                           wreg	equ	0xFE8
  7665                           postdec1	equ	0xFE5
  7666                           fsr1h	equ	0xFE2
  7667                           fsr1l	equ	0xFE1
  7668                           indf2	equ	0xFDF
  7669                           postinc2	equ	0xFDE
  7670                           postdec2	equ	0xFDD
  7671                           fsr2h	equ	0xFDA
  7672                           fsr2l	equ	0xFD9
  7673                           status	equ	0xFD8
  7674                           
  7675 ;; *************** function i2_lcdNewline *****************
  7676 ;; Defined at:
  7677 ;;		line 78 in file "lcd.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      void 
  7684 ;; Registers used:
  7685 ;;		wreg, status,2, status,0, cstack
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7695 ;;Total ram usage:        0 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    2
  7698 ;; This function calls:
  7699 ;;		i2_lcdInst
  7700 ;; This function is called by:
  7701 ;;		i2_putch
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           	psect	text27
  7706  002934                     __ptext27:
  7707                           	opt stack 0
  7708  002934                     i2_lcdNewline:
  7709                           	opt stack 17
  7710                           
  7711                           ;lcd.c: 79: lcdInst(0b11000000);
  7712                           
  7713                           ;incstack = 0
  7714  002934  0EC0               	movlw	192
  7715  002936  EC7D  F014         	call	i2_lcdInst
  7716  00293A  0012               	return		;funcret
  7717  00293C                     __end_ofi2_lcdNewline:
  7718                           	opt stack 0
  7719                           pclatu	equ	0xFFB
  7720                           pclath	equ	0xFFA
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           intcon	equ	0xFF2
  7728                           intcon3	equ	0xFF0
  7729                           postinc0	equ	0xFEE
  7730                           fsr0h	equ	0xFEA
  7731                           fsr0l	equ	0xFE9
  7732                           wreg	equ	0xFE8
  7733                           postdec1	equ	0xFE5
  7734                           fsr1h	equ	0xFE2
  7735                           fsr1l	equ	0xFE1
  7736                           indf2	equ	0xFDF
  7737                           postinc2	equ	0xFDE
  7738                           postdec2	equ	0xFDD
  7739                           fsr2h	equ	0xFDA
  7740                           fsr2l	equ	0xFD9
  7741                           status	equ	0xFD8
  7742                           
  7743 ;; *************** function i2___llmod *****************
  7744 ;; Defined at:
  7745 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  dividend        4   13[COMRAM] unsigned long 
  7748 ;;  divisor         4   17[COMRAM] unsigned long 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  __llmod         1   21[COMRAM] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  4   13[COMRAM] unsigned long 
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7760 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7763 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;Total ram usage:        9 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; This function calls:
  7767 ;;		Nothing
  7768 ;; This function is called by:
  7769 ;;		i2_printf
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           	psect	text28
  7774  002542                     __ptext28:
  7775                           	opt stack 0
  7776  002542                     i2___llmod:
  7777                           	opt stack 20
  7778                           
  7779                           ;incstack = 0
  7780  002542  5012               	movf	i2___llmod@divisor,w,c
  7781  002544  1013               	iorwf	i2___llmod@divisor+1,w,c
  7782  002546  1014               	iorwf	i2___llmod@divisor+2,w,c
  7783  002548  1015               	iorwf	i2___llmod@divisor+3,w,c
  7784  00254A  B4D8               	btfsc	status,2,c
  7785  00254C  D024               	goto	i2l941
  7786  00254E  0E01               	movlw	1
  7787  002550  6E16               	movwf	i2___llmod@counter,c
  7788  002552  D006               	goto	i2l3671
  7789  002554                     i2l3669:
  7790  002554  90D8               	bcf	status,0,c
  7791  002556  3612               	rlcf	i2___llmod@divisor,f,c
  7792  002558  3613               	rlcf	i2___llmod@divisor+1,f,c
  7793  00255A  3614               	rlcf	i2___llmod@divisor+2,f,c
  7794  00255C  3615               	rlcf	i2___llmod@divisor+3,f,c
  7795  00255E  2A16               	incf	i2___llmod@counter,f,c
  7796  002560                     i2l3671:
  7797  002560  AE15               	btfss	i2___llmod@divisor+3,7,c
  7798  002562  D7F8               	goto	i2l3669
  7799  002564                     i2l3673:
  7800  002564  5012               	movf	i2___llmod@divisor,w,c
  7801  002566  5C0E               	subwf	i2___llmod@dividend,w,c
  7802  002568  5013               	movf	i2___llmod@divisor+1,w,c
  7803  00256A  580F               	subwfb	i2___llmod@dividend+1,w,c
  7804  00256C  5014               	movf	i2___llmod@divisor+2,w,c
  7805  00256E  5810               	subwfb	i2___llmod@dividend+2,w,c
  7806  002570  5015               	movf	i2___llmod@divisor+3,w,c
  7807  002572  5811               	subwfb	i2___llmod@dividend+3,w,c
  7808  002574  A0D8               	btfss	status,0,c
  7809  002576  D008               	goto	i2l3677
  7810  002578  5012               	movf	i2___llmod@divisor,w,c
  7811  00257A  5E0E               	subwf	i2___llmod@dividend,f,c
  7812  00257C  5013               	movf	i2___llmod@divisor+1,w,c
  7813  00257E  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  7814  002580  5014               	movf	i2___llmod@divisor+2,w,c
  7815  002582  5A10               	subwfb	i2___llmod@dividend+2,f,c
  7816  002584  5015               	movf	i2___llmod@divisor+3,w,c
  7817  002586  5A11               	subwfb	i2___llmod@dividend+3,f,c
  7818  002588                     i2l3677:
  7819  002588  90D8               	bcf	status,0,c
  7820  00258A  3215               	rrcf	i2___llmod@divisor+3,f,c
  7821  00258C  3214               	rrcf	i2___llmod@divisor+2,f,c
  7822  00258E  3213               	rrcf	i2___llmod@divisor+1,f,c
  7823  002590  3212               	rrcf	i2___llmod@divisor,f,c
  7824  002592  2E16               	decfsz	i2___llmod@counter,f,c
  7825  002594  D7E7               	goto	i2l3673
  7826  002596                     i2l941:
  7827  002596  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  7828  00259A  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7829  00259E  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7830  0025A2  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7831  0025A6  0012               	return		;funcret
  7832  0025A8                     __end_ofi2___llmod:
  7833                           	opt stack 0
  7834                           pclatu	equ	0xFFB
  7835                           pclath	equ	0xFFA
  7836                           tblptru	equ	0xFF8
  7837                           tblptrh	equ	0xFF7
  7838                           tblptrl	equ	0xFF6
  7839                           tablat	equ	0xFF5
  7840                           prodh	equ	0xFF4
  7841                           prodl	equ	0xFF3
  7842                           intcon	equ	0xFF2
  7843                           intcon3	equ	0xFF0
  7844                           postinc0	equ	0xFEE
  7845                           fsr0h	equ	0xFEA
  7846                           fsr0l	equ	0xFE9
  7847                           wreg	equ	0xFE8
  7848                           postdec1	equ	0xFE5
  7849                           fsr1h	equ	0xFE2
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function i2___lldiv *****************
  7859 ;; Defined at:
  7860 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  dividend        4    0[COMRAM] unsigned long 
  7863 ;;  divisor         4    4[COMRAM] unsigned long 
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  __lldiv         4    8[COMRAM] unsigned long 
  7866 ;;  __lldiv         1   12[COMRAM] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  4    0[COMRAM] unsigned long 
  7869 ;; Registers used:
  7870 ;;		wreg, status,2, status,0
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7876 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;Total ram usage:       13 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; This function calls:
  7883 ;;		Nothing
  7884 ;; This function is called by:
  7885 ;;		i2_printf
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text29
  7890  0023D0                     __ptext29:
  7891                           	opt stack 0
  7892  0023D0                     i2___lldiv:
  7893                           	opt stack 20
  7894                           
  7895                           ;incstack = 0
  7896  0023D0  0E00               	movlw	0
  7897  0023D2  6E09               	movwf	i2___lldiv@quotient,c
  7898  0023D4  0E00               	movlw	0
  7899  0023D6  6E0A               	movwf	i2___lldiv@quotient+1,c
  7900  0023D8  0E00               	movlw	0
  7901  0023DA  6E0B               	movwf	i2___lldiv@quotient+2,c
  7902  0023DC  0E00               	movlw	0
  7903  0023DE  6E0C               	movwf	i2___lldiv@quotient+3,c
  7904  0023E0  5005               	movf	i2___lldiv@divisor,w,c
  7905  0023E2  1006               	iorwf	i2___lldiv@divisor+1,w,c
  7906  0023E4  1007               	iorwf	i2___lldiv@divisor+2,w,c
  7907  0023E6  1008               	iorwf	i2___lldiv@divisor+3,w,c
  7908  0023E8  B4D8               	btfsc	status,2,c
  7909  0023EA  D02A               	goto	i2l931
  7910  0023EC  0E01               	movlw	1
  7911  0023EE  6E0D               	movwf	i2___lldiv@counter,c
  7912  0023F0  D006               	goto	i2l3651
  7913  0023F2                     i2l3649:
  7914  0023F2  90D8               	bcf	status,0,c
  7915  0023F4  3605               	rlcf	i2___lldiv@divisor,f,c
  7916  0023F6  3606               	rlcf	i2___lldiv@divisor+1,f,c
  7917  0023F8  3607               	rlcf	i2___lldiv@divisor+2,f,c
  7918  0023FA  3608               	rlcf	i2___lldiv@divisor+3,f,c
  7919  0023FC  2A0D               	incf	i2___lldiv@counter,f,c
  7920  0023FE                     i2l3651:
  7921  0023FE  AE08               	btfss	i2___lldiv@divisor+3,7,c
  7922  002400  D7F8               	goto	i2l3649
  7923  002402                     i2l3653:
  7924  002402  90D8               	bcf	status,0,c
  7925  002404  3609               	rlcf	i2___lldiv@quotient,f,c
  7926  002406  360A               	rlcf	i2___lldiv@quotient+1,f,c
  7927  002408  360B               	rlcf	i2___lldiv@quotient+2,f,c
  7928  00240A  360C               	rlcf	i2___lldiv@quotient+3,f,c
  7929  00240C  5005               	movf	i2___lldiv@divisor,w,c
  7930  00240E  5C01               	subwf	i2___lldiv@dividend,w,c
  7931  002410  5006               	movf	i2___lldiv@divisor+1,w,c
  7932  002412  5802               	subwfb	i2___lldiv@dividend+1,w,c
  7933  002414  5007               	movf	i2___lldiv@divisor+2,w,c
  7934  002416  5803               	subwfb	i2___lldiv@dividend+2,w,c
  7935  002418  5008               	movf	i2___lldiv@divisor+3,w,c
  7936  00241A  5804               	subwfb	i2___lldiv@dividend+3,w,c
  7937  00241C  A0D8               	btfss	status,0,c
  7938  00241E  D009               	goto	i2l3661
  7939  002420  5005               	movf	i2___lldiv@divisor,w,c
  7940  002422  5E01               	subwf	i2___lldiv@dividend,f,c
  7941  002424  5006               	movf	i2___lldiv@divisor+1,w,c
  7942  002426  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  7943  002428  5007               	movf	i2___lldiv@divisor+2,w,c
  7944  00242A  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  7945  00242C  5008               	movf	i2___lldiv@divisor+3,w,c
  7946  00242E  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  7947  002430  8009               	bsf	i2___lldiv@quotient,0,c
  7948  002432                     i2l3661:
  7949  002432  90D8               	bcf	status,0,c
  7950  002434  3208               	rrcf	i2___lldiv@divisor+3,f,c
  7951  002436  3207               	rrcf	i2___lldiv@divisor+2,f,c
  7952  002438  3206               	rrcf	i2___lldiv@divisor+1,f,c
  7953  00243A  3205               	rrcf	i2___lldiv@divisor,f,c
  7954  00243C  2E0D               	decfsz	i2___lldiv@counter,f,c
  7955  00243E  D7E1               	goto	i2l3653
  7956  002440                     i2l931:
  7957  002440  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  7958  002444  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  7959  002448  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  7960  00244C  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  7961  002450  0012               	return		;funcret
  7962  002452                     __end_ofi2___lldiv:
  7963                           	opt stack 0
  7964                           pclatu	equ	0xFFB
  7965                           pclath	equ	0xFFA
  7966                           tblptru	equ	0xFF8
  7967                           tblptrh	equ	0xFF7
  7968                           tblptrl	equ	0xFF6
  7969                           tablat	equ	0xFF5
  7970                           prodh	equ	0xFF4
  7971                           prodl	equ	0xFF3
  7972                           intcon	equ	0xFF2
  7973                           intcon3	equ	0xFF0
  7974                           postinc0	equ	0xFEE
  7975                           fsr0h	equ	0xFEA
  7976                           fsr0l	equ	0xFE9
  7977                           wreg	equ	0xFE8
  7978                           postdec1	equ	0xFE5
  7979                           fsr1h	equ	0xFE2
  7980                           fsr1l	equ	0xFE1
  7981                           indf2	equ	0xFDF
  7982                           postinc2	equ	0xFDE
  7983                           postdec2	equ	0xFDD
  7984                           fsr2h	equ	0xFDA
  7985                           fsr2l	equ	0xFD9
  7986                           status	equ	0xFD8
  7987                           
  7988 ;; *************** function i2_lcdClear *****************
  7989 ;; Defined at:
  7990 ;;		line 74 in file "lcd.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;		None
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;		None
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      void 
  7997 ;; Registers used:
  7998 ;;		wreg, status,2, status,0, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;Total ram usage:        0 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    2
  8011 ;; This function calls:
  8012 ;;		i2_lcdInst
  8013 ;; This function is called by:
  8014 ;;		i2_setAngle
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           	psect	text30
  8019  00293C                     __ptext30:
  8020                           	opt stack 0
  8021  00293C                     i2_lcdClear:
  8022                           	opt stack 19
  8023                           
  8024                           ;lcd.c: 75: lcdInst(0b00000001);
  8025                           
  8026                           ;incstack = 0
  8027  00293C  0E01               	movlw	1
  8028  00293E  EC7D  F014         	call	i2_lcdInst
  8029  002942  0012               	return		;funcret
  8030  002944                     __end_ofi2_lcdClear:
  8031                           	opt stack 0
  8032                           pclatu	equ	0xFFB
  8033                           pclath	equ	0xFFA
  8034                           tblptru	equ	0xFF8
  8035                           tblptrh	equ	0xFF7
  8036                           tblptrl	equ	0xFF6
  8037                           tablat	equ	0xFF5
  8038                           prodh	equ	0xFF4
  8039                           prodl	equ	0xFF3
  8040                           intcon	equ	0xFF2
  8041                           intcon3	equ	0xFF0
  8042                           postinc0	equ	0xFEE
  8043                           fsr0h	equ	0xFEA
  8044                           fsr0l	equ	0xFE9
  8045                           wreg	equ	0xFE8
  8046                           postdec1	equ	0xFE5
  8047                           fsr1h	equ	0xFE2
  8048                           fsr1l	equ	0xFE1
  8049                           indf2	equ	0xFDF
  8050                           postinc2	equ	0xFDE
  8051                           postdec2	equ	0xFDD
  8052                           fsr2h	equ	0xFDA
  8053                           fsr2l	equ	0xFD9
  8054                           status	equ	0xFD8
  8055                           
  8056 ;; *************** function i2_lcdInst *****************
  8057 ;; Defined at:
  8058 ;;		line 27 in file "lcd.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  data            1    wreg     unsigned char 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  data            1    3[COMRAM] unsigned char 
  8063 ;; Return value:  Size  Location     Type
  8064 ;;                  1    wreg      void 
  8065 ;; Registers used:
  8066 ;;		wreg, status,2, status,0, cstack
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;Total ram usage:        2 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:    1
  8079 ;; This function calls:
  8080 ;;		i2_lcdNibble
  8081 ;; This function is called by:
  8082 ;;		i2_lcdClear
  8083 ;;		i2_lcdNewline
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text31
  8088  0028FA                     __ptext31:
  8089                           	opt stack 0
  8090  0028FA                     i2_lcdInst:
  8091                           	opt stack 17
  8092                           
  8093                           ;incstack = 0
  8094                           ;i2lcdInst@data stored from wreg
  8095  0028FA  6E04               	movwf	i2lcdInst@data,c
  8096                           
  8097                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  8098  0028FC  948C               	bcf	3980,2,c	;volatile
  8099                           
  8100                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  8101  0028FE  0E74               	movlw	116
  8102  002900                     i2u448_47:
  8103  002900  2EE8               	decfsz	wreg,f,c
  8104  002902  D7FE               	bra	i2u448_47
  8105  002904  D000               	nop2	
  8106                           
  8107                           ;lcd.c: 30: lcdNibble(data);
  8108  002906  5004               	movf	i2lcdInst@data,w,c
  8109  002908  ECD4  F012         	call	i2_lcdNibble
  8110                           
  8111                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  8112  00290C  0E04               	movlw	4
  8113  00290E  6E03               	movwf	??i2_lcdInst& (0+255),c
  8114  002910  0E3E               	movlw	62
  8115  002912                     i2u449_47:
  8116  002912  2EE8               	decfsz	wreg,f,c
  8117  002914  D7FE               	bra	i2u449_47
  8118  002916  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
  8119  002918  D7FC               	bra	i2u449_47
  8120  00291A  0012               	return		;funcret
  8121  00291C                     __end_ofi2_lcdInst:
  8122                           	opt stack 0
  8123                           pclatu	equ	0xFFB
  8124                           pclath	equ	0xFFA
  8125                           tblptru	equ	0xFF8
  8126                           tblptrh	equ	0xFF7
  8127                           tblptrl	equ	0xFF6
  8128                           tablat	equ	0xFF5
  8129                           prodh	equ	0xFF4
  8130                           prodl	equ	0xFF3
  8131                           intcon	equ	0xFF2
  8132                           intcon3	equ	0xFF0
  8133                           postinc0	equ	0xFEE
  8134                           fsr0h	equ	0xFEA
  8135                           fsr0l	equ	0xFE9
  8136                           wreg	equ	0xFE8
  8137                           postdec1	equ	0xFE5
  8138                           fsr1h	equ	0xFE2
  8139                           fsr1l	equ	0xFE1
  8140                           indf2	equ	0xFDF
  8141                           postinc2	equ	0xFDE
  8142                           postdec2	equ	0xFDD
  8143                           fsr2h	equ	0xFDA
  8144                           fsr2l	equ	0xFD9
  8145                           status	equ	0xFD8
  8146                           
  8147 ;; *************** function i2_lcdNibble *****************
  8148 ;; Defined at:
  8149 ;;		line 46 in file "lcd.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  data            1    wreg     unsigned char 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  data            1    1[COMRAM] unsigned char 
  8154 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;                  1    wreg      void 
  8157 ;; Registers used:
  8158 ;;		wreg, status,2, status,0
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;Total ram usage:        2 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; This function calls:
  8171 ;;		Nothing
  8172 ;; This function is called by:
  8173 ;;		i2_lcdInst
  8174 ;;		i2_putch
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           	psect	text32
  8179  0025A8                     __ptext32:
  8180                           	opt stack 0
  8181  0025A8                     i2_lcdNibble:
  8182                           	opt stack 19
  8183                           
  8184                           ;incstack = 0
  8185                           ;i2lcdNibble@data stored from wreg
  8186  0025A8  6E02               	movwf	i2lcdNibble@data,c
  8187                           
  8188                           ;lcd.c: 48: char temp = data & 0xF0;
  8189  0025AA  5002               	movf	i2lcdNibble@data,w,c
  8190  0025AC  0BF0               	andlw	240
  8191  0025AE  6E01               	movwf	i2lcdNibble@temp,c
  8192                           
  8193                           ;lcd.c: 49: LATD = LATD & 0x0F;
  8194  0025B0  508C               	movf	3980,w,c	;volatile
  8195  0025B2  0B0F               	andlw	15
  8196  0025B4  6E8C               	movwf	3980,c	;volatile
  8197                           
  8198                           ;lcd.c: 50: LATD = temp | LATD;
  8199  0025B6  5001               	movf	i2lcdNibble@temp,w,c
  8200  0025B8  108C               	iorwf	3980,w,c	;volatile
  8201  0025BA  6E8C               	movwf	3980,c	;volatile
  8202                           
  8203                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  8204  0025BC  968C               	bcf	3980,3,c	;volatile
  8205                           
  8206                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  8207  0025BE  0ED6               	movlw	214
  8208  0025C0                     i2u450_47:
  8209  0025C0  D000               	nop2	
  8210  0025C2  D000               	nop2	
  8211  0025C4  2EE8               	decfsz	wreg,f,c
  8212  0025C6  D7FC               	bra	i2u450_47
  8213  0025C8  D000               	nop2	
  8214                           
  8215                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  8216  0025CA  868C               	bsf	3980,3,c	;volatile
  8217                           
  8218                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  8219  0025CC  0ED6               	movlw	214
  8220  0025CE                     i2u451_47:
  8221  0025CE  D000               	nop2	
  8222  0025D0  D000               	nop2	
  8223  0025D2  2EE8               	decfsz	wreg,f,c
  8224  0025D4  D7FC               	bra	i2u451_47
  8225  0025D6  D000               	nop2	
  8226                           
  8227                           ;lcd.c: 58: data = data << 4;
  8228  0025D8  3802               	swapf	i2lcdNibble@data,w,c
  8229  0025DA  0BF0               	andlw	240
  8230  0025DC  6E02               	movwf	i2lcdNibble@data,c
  8231                           
  8232                           ;lcd.c: 60: temp = data & 0xF0;
  8233  0025DE  5002               	movf	i2lcdNibble@data,w,c
  8234  0025E0  0BF0               	andlw	240
  8235  0025E2  6E01               	movwf	i2lcdNibble@temp,c
  8236                           
  8237                           ;lcd.c: 61: LATD = LATD & 0x0F;
  8238  0025E4  508C               	movf	3980,w,c	;volatile
  8239  0025E6  0B0F               	andlw	15
  8240  0025E8  6E8C               	movwf	3980,c	;volatile
  8241                           
  8242                           ;lcd.c: 62: LATD = temp | LATD;
  8243  0025EA  5001               	movf	i2lcdNibble@temp,w,c
  8244  0025EC  108C               	iorwf	3980,w,c	;volatile
  8245  0025EE  6E8C               	movwf	3980,c	;volatile
  8246                           
  8247                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  8248  0025F0  968C               	bcf	3980,3,c	;volatile
  8249                           
  8250                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  8251  0025F2  0ED6               	movlw	214
  8252  0025F4                     i2u452_47:
  8253  0025F4  D000               	nop2	
  8254  0025F6  D000               	nop2	
  8255  0025F8  2EE8               	decfsz	wreg,f,c
  8256  0025FA  D7FC               	bra	i2u452_47
  8257  0025FC  D000               	nop2	
  8258                           
  8259                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  8260  0025FE  868C               	bsf	3980,3,c	;volatile
  8261                           
  8262                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  8263  002600  0ED6               	movlw	214
  8264  002602                     i2u453_47:
  8265  002602  D000               	nop2	
  8266  002604  D000               	nop2	
  8267  002606  2EE8               	decfsz	wreg,f,c
  8268  002608  D7FC               	bra	i2u453_47
  8269  00260A  D000               	nop2	
  8270  00260C  0012               	return		;funcret
  8271  00260E                     __end_ofi2_lcdNibble:
  8272                           	opt stack 0
  8273                           pclatu	equ	0xFFB
  8274                           pclath	equ	0xFFA
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           intcon	equ	0xFF2
  8282                           intcon3	equ	0xFF0
  8283                           postinc0	equ	0xFEE
  8284                           fsr0h	equ	0xFEA
  8285                           fsr0l	equ	0xFE9
  8286                           wreg	equ	0xFE8
  8287                           postdec1	equ	0xFE5
  8288                           fsr1h	equ	0xFE2
  8289                           fsr1l	equ	0xFE1
  8290                           indf2	equ	0xFDF
  8291                           postinc2	equ	0xFDE
  8292                           postdec2	equ	0xFDD
  8293                           fsr2h	equ	0xFDA
  8294                           fsr2l	equ	0xFD9
  8295                           status	equ	0xFD8
  8296                           
  8297 ;; *************** function i2_angleToPulse *****************
  8298 ;; Defined at:
  8299 ;;		line 75 in file "servo.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;  angle           2   69[COMRAM] int 
  8302 ;; Auto vars:     Size  Location     Type
  8303 ;;  angleToPulse    4   85[COMRAM] long 
  8304 ;;  angleToPulse    4   81[COMRAM] long 
  8305 ;;  angleToPulse    4   77[COMRAM] long 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  4   69[COMRAM] long 
  8308 ;; Registers used:
  8309 ;;		wreg, status,2, status,0, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8315 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8316 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8317 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8318 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8319 ;;Total ram usage:       20 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    2
  8322 ;; This function calls:
  8323 ;;		i2___altoft
  8324 ;;		i2___awtoft
  8325 ;;		i2___ftadd
  8326 ;;		i2___ftdiv
  8327 ;;		i2___ftmul
  8328 ;;		i2___fttol
  8329 ;; This function is called by:
  8330 ;;		i2_setAngle
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text33
  8335  001A2A                     __ptext33:
  8336                           	opt stack 0
  8337  001A2A                     i2_angleToPulse:
  8338                           	opt stack 19
  8339                           
  8340                           ;servo.c: 76: long offset = -500;
  8341                           
  8342                           ;incstack = 0
  8343  001A2A  0E0C               	movlw	12
  8344  001A2C  6E52               	movwf	i2angleToPulse@offset,c
  8345  001A2E  0EFE               	movlw	254
  8346  001A30  6E53               	movwf	i2angleToPulse@offset+1,c
  8347  001A32  0EFF               	movlw	255
  8348  001A34  6E54               	movwf	i2angleToPulse@offset+2,c
  8349  001A36  0EFF               	movlw	255
  8350  001A38  6E55               	movwf	i2angleToPulse@offset+3,c
  8351                           
  8352                           ;servo.c: 77: long a000 = 1250 + offset;
  8353  001A3A  0EE2               	movlw	226
  8354  001A3C  2452               	addwf	i2angleToPulse@offset,w,c
  8355  001A3E  6E56               	movwf	i2angleToPulse@a000,c
  8356  001A40  0E04               	movlw	4
  8357  001A42  2053               	addwfc	i2angleToPulse@offset+1,w,c
  8358  001A44  6E57               	movwf	i2angleToPulse@a000+1,c
  8359  001A46  0E00               	movlw	0
  8360  001A48  2054               	addwfc	i2angleToPulse@offset+2,w,c
  8361  001A4A  6E58               	movwf	i2angleToPulse@a000+2,c
  8362  001A4C  0E00               	movlw	0
  8363  001A4E  2055               	addwfc	i2angleToPulse@offset+3,w,c
  8364  001A50  6E59               	movwf	i2angleToPulse@a000+3,c
  8365                           
  8366                           ;servo.c: 78: long a180 = 6250 + offset;
  8367  001A52  0E6A               	movlw	106
  8368  001A54  2452               	addwf	i2angleToPulse@offset,w,c
  8369  001A56  6E4E               	movwf	i2angleToPulse@a180,c
  8370  001A58  0E18               	movlw	24
  8371  001A5A  2053               	addwfc	i2angleToPulse@offset+1,w,c
  8372  001A5C  6E4F               	movwf	i2angleToPulse@a180+1,c
  8373  001A5E  0E00               	movlw	0
  8374  001A60  2054               	addwfc	i2angleToPulse@offset+2,w,c
  8375  001A62  6E50               	movwf	i2angleToPulse@a180+2,c
  8376  001A64  0E00               	movlw	0
  8377  001A66  2055               	addwfc	i2angleToPulse@offset+3,w,c
  8378  001A68  6E51               	movwf	i2angleToPulse@a180+3,c
  8379                           
  8380                           ;servo.c: 80: return (long)(a000 + angle/180.0*(a180-a000));
  8381  001A6A  C056  F04A         	movff	i2angleToPulse@a000,??i2_angleToPulse
  8382  001A6E  C057  F04B         	movff	i2angleToPulse@a000+1,??i2_angleToPulse+1
  8383  001A72  C058  F04C         	movff	i2angleToPulse@a000+2,??i2_angleToPulse+2
  8384  001A76  C059  F04D         	movff	i2angleToPulse@a000+3,??i2_angleToPulse+3
  8385  001A7A  1E4A               	comf	??i2_angleToPulse,f,c
  8386  001A7C  1E4B               	comf	??i2_angleToPulse+1,f,c
  8387  001A7E  1E4C               	comf	??i2_angleToPulse+2,f,c
  8388  001A80  1E4D               	comf	??i2_angleToPulse+3,f,c
  8389  001A82  2A4A               	incf	??i2_angleToPulse,f,c
  8390  001A84  0E00               	movlw	0
  8391  001A86  224B               	addwfc	??i2_angleToPulse+1,f,c
  8392  001A88  224C               	addwfc	??i2_angleToPulse+2,f,c
  8393  001A8A  224D               	addwfc	??i2_angleToPulse+3,f,c
  8394  001A8C  504E               	movf	i2angleToPulse@a180,w,c
  8395  001A8E  244A               	addwf	??i2_angleToPulse,w,c
  8396  001A90  6E09               	movwf	i2___altoft@c,c
  8397  001A92  504F               	movf	i2angleToPulse@a180+1,w,c
  8398  001A94  204B               	addwfc	??i2_angleToPulse+1,w,c
  8399  001A96  6E0A               	movwf	i2___altoft@c+1,c
  8400  001A98  5050               	movf	i2angleToPulse@a180+2,w,c
  8401  001A9A  204C               	addwfc	??i2_angleToPulse+2,w,c
  8402  001A9C  6E0B               	movwf	i2___altoft@c+2,c
  8403  001A9E  5051               	movf	i2angleToPulse@a180+3,w,c
  8404  001AA0  204D               	addwfc	??i2_angleToPulse+3,w,c
  8405  001AA2  6E0C               	movwf	i2___altoft@c+3,c
  8406  001AA4  EC65  F012         	call	i2___altoft	;wreg free
  8407  001AA8  C009  F01F         	movff	?i2___altoft,i2___ftmul@f2
  8408  001AAC  C00A  F020         	movff	?i2___altoft+1,i2___ftmul@f2+1
  8409  001AB0  C00B  F021         	movff	?i2___altoft+2,i2___ftmul@f2+2
  8410  001AB4  0E00               	movlw	0
  8411  001AB6  6E10               	movwf	i2___ftdiv@f2,c
  8412  001AB8  0E34               	movlw	52
  8413  001ABA  6E11               	movwf	i2___ftdiv@f2+1,c
  8414  001ABC  0E43               	movlw	67
  8415  001ABE  6E12               	movwf	i2___ftdiv@f2+2,c
  8416  001AC0  C046  F009         	movff	i2angleToPulse@angle,i2___awtoft@c
  8417  001AC4  C047  F00A         	movff	i2angleToPulse@angle+1,i2___awtoft@c+1
  8418  001AC8  EC27  F014         	call	i2___awtoft	;wreg free
  8419  001ACC  C009  F00D         	movff	?i2___awtoft,i2___ftdiv@f1
  8420  001AD0  C00A  F00E         	movff	?i2___awtoft+1,i2___ftdiv@f1+1
  8421  001AD4  C00B  F00F         	movff	?i2___awtoft+2,i2___ftdiv@f1+2
  8422  001AD8  EC19  F00F         	call	i2___ftdiv	;wreg free
  8423  001ADC  C00D  F01C         	movff	?i2___ftdiv,i2___ftmul@f1
  8424  001AE0  C00E  F01D         	movff	?i2___ftdiv+1,i2___ftmul@f1+1
  8425  001AE4  C00F  F01E         	movff	?i2___ftdiv+2,i2___ftmul@f1+2
  8426  001AE8  EC9F  F00E         	call	i2___ftmul	;wreg free
  8427  001AEC  C01C  F02E         	movff	?i2___ftmul,i2___ftadd@f2
  8428  001AF0  C01D  F02F         	movff	?i2___ftmul+1,i2___ftadd@f2+1
  8429  001AF4  C01E  F030         	movff	?i2___ftmul+2,i2___ftadd@f2+2
  8430  001AF8  C056  F009         	movff	i2angleToPulse@a000,i2___altoft@c
  8431  001AFC  C057  F00A         	movff	i2angleToPulse@a000+1,i2___altoft@c+1
  8432  001B00  C058  F00B         	movff	i2angleToPulse@a000+2,i2___altoft@c+2
  8433  001B04  C059  F00C         	movff	i2angleToPulse@a000+3,i2___altoft@c+3
  8434  001B08  EC65  F012         	call	i2___altoft	;wreg free
  8435  001B0C  C009  F02B         	movff	?i2___altoft,i2___ftadd@f1
  8436  001B10  C00A  F02C         	movff	?i2___altoft+1,i2___ftadd@f1+1
  8437  001B14  C00B  F02D         	movff	?i2___altoft+2,i2___ftadd@f1+2
  8438  001B18  EC9D  F009         	call	i2___ftadd	;wreg free
  8439  001B1C  C02B  F037         	movff	?i2___ftadd,i2___fttol@f1
  8440  001B20  C02C  F038         	movff	?i2___ftadd+1,i2___fttol@f1+1
  8441  001B24  C02D  F039         	movff	?i2___ftadd+2,i2___fttol@f1+2
  8442  001B28  EC25  F00E         	call	i2___fttol	;wreg free
  8443  001B2C  C037  F046         	movff	?i2___fttol,?i2_angleToPulse
  8444  001B30  C038  F047         	movff	?i2___fttol+1,?i2_angleToPulse+1
  8445  001B34  C039  F048         	movff	?i2___fttol+2,?i2_angleToPulse+2
  8446  001B38  C03A  F049         	movff	?i2___fttol+3,?i2_angleToPulse+3
  8447  001B3C  0012               	return	
  8448  001B3E                     __end_ofi2_angleToPulse:
  8449                           	opt stack 0
  8450                           pclatu	equ	0xFFB
  8451                           pclath	equ	0xFFA
  8452                           tblptru	equ	0xFF8
  8453                           tblptrh	equ	0xFF7
  8454                           tblptrl	equ	0xFF6
  8455                           tablat	equ	0xFF5
  8456                           prodh	equ	0xFF4
  8457                           prodl	equ	0xFF3
  8458                           intcon	equ	0xFF2
  8459                           intcon3	equ	0xFF0
  8460                           postinc0	equ	0xFEE
  8461                           fsr0h	equ	0xFEA
  8462                           fsr0l	equ	0xFE9
  8463                           wreg	equ	0xFE8
  8464                           postdec1	equ	0xFE5
  8465                           fsr1h	equ	0xFE2
  8466                           fsr1l	equ	0xFE1
  8467                           indf2	equ	0xFDF
  8468                           postinc2	equ	0xFDE
  8469                           postdec2	equ	0xFDD
  8470                           fsr2h	equ	0xFDA
  8471                           fsr2l	equ	0xFD9
  8472                           status	equ	0xFD8
  8473                           
  8474 ;; *************** function i2___fttol *****************
  8475 ;; Defined at:
  8476 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;  f1              3   54[COMRAM] float 
  8479 ;; Auto vars:     Size  Location     Type
  8480 ;;  __fttol         4   64[COMRAM] unsigned long 
  8481 ;;  __fttol         1   68[COMRAM] unsigned char 
  8482 ;;  __fttol         1   63[COMRAM] unsigned char 
  8483 ;; Return value:  Size  Location     Type
  8484 ;;                  4   54[COMRAM] long 
  8485 ;; Registers used:
  8486 ;;		wreg, status,2, status,0
  8487 ;; Tracked objects:
  8488 ;;		On entry : 0/0
  8489 ;;		On exit  : 0/0
  8490 ;;		Unchanged: 0/0
  8491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8492 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;Total ram usage:       15 bytes
  8497 ;; Hardware stack levels used:    1
  8498 ;; This function calls:
  8499 ;;		Nothing
  8500 ;; This function is called by:
  8501 ;;		i2_angleToPulse
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           	psect	text34
  8506  001C4A                     __ptext34:
  8507                           	opt stack 0
  8508  001C4A                     i2___fttol:
  8509                           	opt stack 20
  8510                           
  8511                           ;incstack = 0
  8512  001C4A  C039  F03B         	movff	i2___fttol@f1+2,??i2___fttol
  8513  001C4E  6A3C               	clrf	(??i2___fttol+1)& (0+255),c
  8514  001C50  6A3D               	clrf	(??i2___fttol+2)& (0+255),c
  8515  001C52  3438               	rlcf	i2___fttol@f1+1,w,c
  8516  001C54  363B               	rlcf	??i2___fttol& (0+255),f,c
  8517  001C56  E301               	bnc	u333_41
  8518  001C58  803C               	bsf	(??i2___fttol+1)& (0+255),0,c
  8519  001C5A                     u333_41:
  8520  001C5A  503B               	movf	??i2___fttol,w,c
  8521  001C5C  6E45               	movwf	i2___fttol@exp1,c
  8522  001C5E  5045               	movf	i2___fttol@exp1,w,c
  8523  001C60  A4D8               	btfss	status,2,c
  8524  001C62  D009               	goto	i2l3603
  8525  001C64  0E00               	movlw	0
  8526  001C66  6E37               	movwf	?i2___fttol,c
  8527  001C68  0E00               	movlw	0
  8528  001C6A  6E38               	movwf	?i2___fttol+1,c
  8529  001C6C  0E00               	movlw	0
  8530  001C6E  6E39               	movwf	?i2___fttol+2,c
  8531  001C70  0E00               	movlw	0
  8532  001C72  6E3A               	movwf	?i2___fttol+3,c
  8533  001C74  0012               	return	
  8534  001C76                     i2l3603:
  8535  001C76  0E17               	movlw	23
  8536  001C78  6E3B               	movwf	??i2___fttol& (0+255),c
  8537  001C7A  C037  F03C         	movff	i2___fttol@f1,??i2___fttol+1
  8538  001C7E  C038  F03D         	movff	i2___fttol@f1+1,??i2___fttol+2
  8539  001C82  C039  F03E         	movff	i2___fttol@f1+2,??i2___fttol+3
  8540  001C86  283B               	incf	??i2___fttol,w,c
  8541  001C88  6E3F               	movwf	(??i2___fttol+4)& (0+255),c
  8542  001C8A  D004               	goto	i2u335_40
  8543  001C8C                     i2u335_45:
  8544  001C8C  90D8               	bcf	status,0,c
  8545  001C8E  323E               	rrcf	??i2___fttol+3,f,c
  8546  001C90  323D               	rrcf	??i2___fttol+2,f,c
  8547  001C92  323C               	rrcf	??i2___fttol+1,f,c
  8548  001C94                     i2u335_40:
  8549  001C94  2E3F               	decfsz	(??i2___fttol+4)& (0+255),f,c
  8550  001C96  D7FA               	goto	i2u335_45
  8551  001C98  503C               	movf	??i2___fttol+1,w,c
  8552  001C9A  6E40               	movwf	i2___fttol@sign1,c
  8553  001C9C  8E38               	bsf	i2___fttol@f1+1,7,c
  8554  001C9E  0EFF               	movlw	255
  8555  001CA0  1637               	andwf	i2___fttol@f1,f,c
  8556  001CA2  0EFF               	movlw	255
  8557  001CA4  1638               	andwf	i2___fttol@f1+1,f,c
  8558  001CA6  0E00               	movlw	0
  8559  001CA8  1639               	andwf	i2___fttol@f1+2,f,c
  8560  001CAA  5037               	movf	i2___fttol@f1,w,c
  8561  001CAC  6E41               	movwf	i2___fttol@lval,c
  8562  001CAE  5038               	movf	i2___fttol@f1+1,w,c
  8563  001CB0  6E42               	movwf	i2___fttol@lval+1,c
  8564  001CB2  5039               	movf	i2___fttol@f1+2,w,c
  8565  001CB4  6E43               	movwf	i2___fttol@lval+2,c
  8566  001CB6  6A44               	clrf	i2___fttol@lval+3,c
  8567  001CB8  0E8E               	movlw	142
  8568  001CBA  5E45               	subwf	i2___fttol@exp1,f,c
  8569  001CBC  AE45               	btfss	i2___fttol@exp1,7,c
  8570  001CBE  D016               	goto	i2l3625
  8571  001CC0  5045               	movf	i2___fttol@exp1,w,c
  8572  001CC2  0A80               	xorlw	128
  8573  001CC4  0F8F               	addlw	143
  8574  001CC6  B0D8               	btfsc	status,0,c
  8575  001CC8  D009               	goto	i2l3621
  8576  001CCA  0E00               	movlw	0
  8577  001CCC  6E37               	movwf	?i2___fttol,c
  8578  001CCE  0E00               	movlw	0
  8579  001CD0  6E38               	movwf	?i2___fttol+1,c
  8580  001CD2  0E00               	movlw	0
  8581  001CD4  6E39               	movwf	?i2___fttol+2,c
  8582  001CD6  0E00               	movlw	0
  8583  001CD8  6E3A               	movwf	?i2___fttol+3,c
  8584  001CDA  0012               	return	
  8585  001CDC                     i2l3621:
  8586  001CDC  90D8               	bcf	status,0,c
  8587  001CDE  3244               	rrcf	i2___fttol@lval+3,f,c
  8588  001CE0  3243               	rrcf	i2___fttol@lval+2,f,c
  8589  001CE2  3242               	rrcf	i2___fttol@lval+1,f,c
  8590  001CE4  3241               	rrcf	i2___fttol@lval,f,c
  8591  001CE6  3E45               	incfsz	i2___fttol@exp1,f,c
  8592  001CE8  D7F9               	goto	i2l3621
  8593  001CEA  D015               	goto	i2l3635
  8594  001CEC                     i2l3625:
  8595  001CEC  0E17               	movlw	23
  8596  001CEE  6445               	cpfsgt	i2___fttol@exp1,c
  8597  001CF0  D00F               	goto	i2l3633
  8598  001CF2  0E00               	movlw	0
  8599  001CF4  6E37               	movwf	?i2___fttol,c
  8600  001CF6  0E00               	movlw	0
  8601  001CF8  6E38               	movwf	?i2___fttol+1,c
  8602  001CFA  0E00               	movlw	0
  8603  001CFC  6E39               	movwf	?i2___fttol+2,c
  8604  001CFE  0E00               	movlw	0
  8605  001D00  6E3A               	movwf	?i2___fttol+3,c
  8606  001D02  0012               	return	
  8607  001D04                     i2l3631:
  8608  001D04  90D8               	bcf	status,0,c
  8609  001D06  3641               	rlcf	i2___fttol@lval,f,c
  8610  001D08  3642               	rlcf	i2___fttol@lval+1,f,c
  8611  001D0A  3643               	rlcf	i2___fttol@lval+2,f,c
  8612  001D0C  3644               	rlcf	i2___fttol@lval+3,f,c
  8613  001D0E  0645               	decf	i2___fttol@exp1,f,c
  8614  001D10                     i2l3633:
  8615  001D10  5045               	movf	i2___fttol@exp1,w,c
  8616  001D12  A4D8               	btfss	status,2,c
  8617  001D14  D7F7               	goto	i2l3631
  8618  001D16                     i2l3635:
  8619  001D16  5040               	movf	i2___fttol@sign1,w,c
  8620  001D18  B4D8               	btfsc	status,2,c
  8621  001D1A  D008               	goto	i2l3639
  8622  001D1C  1E44               	comf	i2___fttol@lval+3,f,c
  8623  001D1E  1E43               	comf	i2___fttol@lval+2,f,c
  8624  001D20  1E42               	comf	i2___fttol@lval+1,f,c
  8625  001D22  6C41               	negf	i2___fttol@lval,c
  8626  001D24  0E00               	movlw	0
  8627  001D26  2242               	addwfc	i2___fttol@lval+1,f,c
  8628  001D28  2243               	addwfc	i2___fttol@lval+2,f,c
  8629  001D2A  2244               	addwfc	i2___fttol@lval+3,f,c
  8630  001D2C                     i2l3639:
  8631  001D2C  C041  F037         	movff	i2___fttol@lval,?i2___fttol
  8632  001D30  C042  F038         	movff	i2___fttol@lval+1,?i2___fttol+1
  8633  001D34  C043  F039         	movff	i2___fttol@lval+2,?i2___fttol+2
  8634  001D38  C044  F03A         	movff	i2___fttol@lval+3,?i2___fttol+3
  8635  001D3C  0012               	return	
  8636  001D3E                     __end_ofi2___fttol:
  8637                           	opt stack 0
  8638                           pclatu	equ	0xFFB
  8639                           pclath	equ	0xFFA
  8640                           tblptru	equ	0xFF8
  8641                           tblptrh	equ	0xFF7
  8642                           tblptrl	equ	0xFF6
  8643                           tablat	equ	0xFF5
  8644                           prodh	equ	0xFF4
  8645                           prodl	equ	0xFF3
  8646                           intcon	equ	0xFF2
  8647                           intcon3	equ	0xFF0
  8648                           postinc0	equ	0xFEE
  8649                           fsr0h	equ	0xFEA
  8650                           fsr0l	equ	0xFE9
  8651                           wreg	equ	0xFE8
  8652                           postdec1	equ	0xFE5
  8653                           fsr1h	equ	0xFE2
  8654                           fsr1l	equ	0xFE1
  8655                           indf2	equ	0xFDF
  8656                           postinc2	equ	0xFDE
  8657                           postdec2	equ	0xFDD
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662 ;; *************** function i2___ftmul *****************
  8663 ;; Defined at:
  8664 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  f1              3   27[COMRAM] float 
  8667 ;;  f2              3   30[COMRAM] float 
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;  __ftmul         3   37[COMRAM] unsigned um
  8670 ;;  __ftmul         1   41[COMRAM] unsigned char 
  8671 ;;  __ftmul         1   40[COMRAM] unsigned char 
  8672 ;;  __ftmul         1   36[COMRAM] unsigned char 
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  3   27[COMRAM] float 
  8675 ;; Registers used:
  8676 ;;		wreg, status,2, status,0, cstack
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8682 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;Total ram usage:       15 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    1
  8689 ;; This function calls:
  8690 ;;		i2___ftpack
  8691 ;; This function is called by:
  8692 ;;		i2_angleToPulse
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           	psect	text35
  8697  001D3E                     __ptext35:
  8698                           	opt stack 0
  8699  001D3E                     i2___ftmul:
  8700                           	opt stack 19
  8701                           
  8702                           ;incstack = 0
  8703  001D3E  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
  8704  001D42  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
  8705  001D44  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
  8706  001D46  341D               	rlcf	i2___ftmul@f1+1,w,c
  8707  001D48  3622               	rlcf	??i2___ftmul& (0+255),f,c
  8708  001D4A  E301               	bnc	u327_41
  8709  001D4C  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8710  001D4E                     u327_41:
  8711  001D4E  5022               	movf	??i2___ftmul,w,c
  8712  001D50  6E25               	movwf	i2___ftmul@exp,c
  8713  001D52  5025               	movf	i2___ftmul@exp,w,c
  8714  001D54  A4D8               	btfss	status,2,c
  8715  001D56  D007               	goto	i2l3555
  8716  001D58  0E00               	movlw	0
  8717  001D5A  6E1C               	movwf	?i2___ftmul,c
  8718  001D5C  0E00               	movlw	0
  8719  001D5E  6E1D               	movwf	?i2___ftmul+1,c
  8720  001D60  0E00               	movlw	0
  8721  001D62  6E1E               	movwf	?i2___ftmul+2,c
  8722  001D64  0012               	return	
  8723  001D66                     i2l3555:
  8724  001D66  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
  8725  001D6A  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
  8726  001D6C  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
  8727  001D6E  3420               	rlcf	i2___ftmul@f2+1,w,c
  8728  001D70  3622               	rlcf	??i2___ftmul& (0+255),f,c
  8729  001D72  E301               	bnc	u329_41
  8730  001D74  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8731  001D76                     u329_41:
  8732  001D76  5022               	movf	??i2___ftmul,w,c
  8733  001D78  6E2A               	movwf	i2___ftmul@sign,c
  8734  001D7A  502A               	movf	i2___ftmul@sign,w,c
  8735  001D7C  A4D8               	btfss	status,2,c
  8736  001D7E  D007               	goto	i2l3561
  8737  001D80  0E00               	movlw	0
  8738  001D82  6E1C               	movwf	?i2___ftmul,c
  8739  001D84  0E00               	movlw	0
  8740  001D86  6E1D               	movwf	?i2___ftmul+1,c
  8741  001D88  0E00               	movlw	0
  8742  001D8A  6E1E               	movwf	?i2___ftmul+2,c
  8743  001D8C  0012               	return	
  8744  001D8E                     i2l3561:
  8745  001D8E  502A               	movf	i2___ftmul@sign,w,c
  8746  001D90  0F7B               	addlw	123
  8747  001D92  2625               	addwf	i2___ftmul@exp,f,c
  8748  001D94  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  8749  001D98  5021               	movf	i2___ftmul@f2+2,w,c
  8750  001D9A  1A2A               	xorwf	i2___ftmul@sign,f,c
  8751  001D9C  0E80               	movlw	128
  8752  001D9E  162A               	andwf	i2___ftmul@sign,f,c
  8753  001DA0  8E1D               	bsf	i2___ftmul@f1+1,7,c
  8754  001DA2  8E20               	bsf	i2___ftmul@f2+1,7,c
  8755  001DA4  0EFF               	movlw	255
  8756  001DA6  161F               	andwf	i2___ftmul@f2,f,c
  8757  001DA8  0EFF               	movlw	255
  8758  001DAA  1620               	andwf	i2___ftmul@f2+1,f,c
  8759  001DAC  0E00               	movlw	0
  8760  001DAE  1621               	andwf	i2___ftmul@f2+2,f,c
  8761  001DB0  0E00               	movlw	0
  8762  001DB2  6E26               	movwf	i2___ftmul@f3_as_product,c
  8763  001DB4  0E00               	movlw	0
  8764  001DB6  6E27               	movwf	i2___ftmul@f3_as_product+1,c
  8765  001DB8  0E00               	movlw	0
  8766  001DBA  6E28               	movwf	i2___ftmul@f3_as_product+2,c
  8767  001DBC  0E07               	movlw	7
  8768  001DBE  6E29               	movwf	i2___ftmul@cntr,c
  8769  001DC0                     i2l3575:
  8770  001DC0  A01C               	btfss	i2___ftmul@f1,0,c
  8771  001DC2  D006               	goto	i2l3579
  8772  001DC4  501F               	movf	i2___ftmul@f2,w,c
  8773  001DC6  2626               	addwf	i2___ftmul@f3_as_product,f,c
  8774  001DC8  5020               	movf	i2___ftmul@f2+1,w,c
  8775  001DCA  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
  8776  001DCC  5021               	movf	i2___ftmul@f2+2,w,c
  8777  001DCE  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
  8778  001DD0                     i2l3579:
  8779  001DD0  90D8               	bcf	status,0,c
  8780  001DD2  321E               	rrcf	i2___ftmul@f1+2,f,c
  8781  001DD4  321D               	rrcf	i2___ftmul@f1+1,f,c
  8782  001DD6  321C               	rrcf	i2___ftmul@f1,f,c
  8783  001DD8  90D8               	bcf	status,0,c
  8784  001DDA  361F               	rlcf	i2___ftmul@f2,f,c
  8785  001DDC  3620               	rlcf	i2___ftmul@f2+1,f,c
  8786  001DDE  3621               	rlcf	i2___ftmul@f2+2,f,c
  8787  001DE0  2E29               	decfsz	i2___ftmul@cntr,f,c
  8788  001DE2  D7EE               	goto	i2l3575
  8789  001DE4  0E09               	movlw	9
  8790  001DE6  6E29               	movwf	i2___ftmul@cntr,c
  8791  001DE8                     i2l3585:
  8792  001DE8  A01C               	btfss	i2___ftmul@f1,0,c
  8793  001DEA  D006               	goto	i2l3589
  8794  001DEC  501F               	movf	i2___ftmul@f2,w,c
  8795  001DEE  2626               	addwf	i2___ftmul@f3_as_product,f,c
  8796  001DF0  5020               	movf	i2___ftmul@f2+1,w,c
  8797  001DF2  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
  8798  001DF4  5021               	movf	i2___ftmul@f2+2,w,c
  8799  001DF6  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
  8800  001DF8                     i2l3589:
  8801  001DF8  90D8               	bcf	status,0,c
  8802  001DFA  321E               	rrcf	i2___ftmul@f1+2,f,c
  8803  001DFC  321D               	rrcf	i2___ftmul@f1+1,f,c
  8804  001DFE  321C               	rrcf	i2___ftmul@f1,f,c
  8805  001E00  90D8               	bcf	status,0,c
  8806  001E02  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
  8807  001E04  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
  8808  001E06  3226               	rrcf	i2___ftmul@f3_as_product,f,c
  8809  001E08  2E29               	decfsz	i2___ftmul@cntr,f,c
  8810  001E0A  D7EE               	goto	i2l3585
  8811  001E0C  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  8812  001E10  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  8813  001E14  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  8814  001E18  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  8815  001E1C  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  8816  001E20  EC58  F010         	call	i2___ftpack	;wreg free
  8817  001E24  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
  8818  001E28  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
  8819  001E2C  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
  8820  001E30  0012               	return	
  8821  001E32                     __end_ofi2___ftmul:
  8822                           	opt stack 0
  8823                           pclatu	equ	0xFFB
  8824                           pclath	equ	0xFFA
  8825                           tblptru	equ	0xFF8
  8826                           tblptrh	equ	0xFF7
  8827                           tblptrl	equ	0xFF6
  8828                           tablat	equ	0xFF5
  8829                           prodh	equ	0xFF4
  8830                           prodl	equ	0xFF3
  8831                           intcon	equ	0xFF2
  8832                           intcon3	equ	0xFF0
  8833                           postinc0	equ	0xFEE
  8834                           fsr0h	equ	0xFEA
  8835                           fsr0l	equ	0xFE9
  8836                           wreg	equ	0xFE8
  8837                           postdec1	equ	0xFE5
  8838                           fsr1h	equ	0xFE2
  8839                           fsr1l	equ	0xFE1
  8840                           indf2	equ	0xFDF
  8841                           postinc2	equ	0xFDE
  8842                           postdec2	equ	0xFDD
  8843                           fsr2h	equ	0xFDA
  8844                           fsr2l	equ	0xFD9
  8845                           status	equ	0xFD8
  8846                           
  8847 ;; *************** function i2___ftdiv *****************
  8848 ;; Defined at:
  8849 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  f1              3   12[COMRAM] float 
  8852 ;;  f2              3   15[COMRAM] float 
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  __ftdiv         3   22[COMRAM] float 
  8855 ;;  __ftdiv         1   26[COMRAM] unsigned char 
  8856 ;;  __ftdiv         1   25[COMRAM] unsigned char 
  8857 ;;  __ftdiv         1   21[COMRAM] unsigned char 
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  3   12[COMRAM] float 
  8860 ;; Registers used:
  8861 ;;		wreg, status,2, status,0, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8867 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;Total ram usage:       15 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    1
  8874 ;; This function calls:
  8875 ;;		i2___ftpack
  8876 ;; This function is called by:
  8877 ;;		i2_angleToPulse
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           	psect	text36
  8882  001E32                     __ptext36:
  8883                           	opt stack 0
  8884  001E32                     i2___ftdiv:
  8885                           	opt stack 19
  8886                           
  8887                           ;incstack = 0
  8888  001E32  C00F  F013         	movff	i2___ftdiv@f1+2,??i2___ftdiv
  8889  001E36  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
  8890  001E38  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
  8891  001E3A  340E               	rlcf	i2___ftdiv@f1+1,w,c
  8892  001E3C  3613               	rlcf	??i2___ftdiv& (0+255),f,c
  8893  001E3E  E301               	bnc	u322_41
  8894  001E40  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  8895  001E42                     u322_41:
  8896  001E42  5013               	movf	??i2___ftdiv,w,c
  8897  001E44  6E1A               	movwf	i2___ftdiv@exp,c
  8898  001E46  501A               	movf	i2___ftdiv@exp,w,c
  8899  001E48  A4D8               	btfss	status,2,c
  8900  001E4A  D007               	goto	i2l3509
  8901  001E4C  0E00               	movlw	0
  8902  001E4E  6E0D               	movwf	?i2___ftdiv,c
  8903  001E50  0E00               	movlw	0
  8904  001E52  6E0E               	movwf	?i2___ftdiv+1,c
  8905  001E54  0E00               	movlw	0
  8906  001E56  6E0F               	movwf	?i2___ftdiv+2,c
  8907  001E58  0012               	return	
  8908  001E5A                     i2l3509:
  8909  001E5A  C012  F013         	movff	i2___ftdiv@f2+2,??i2___ftdiv
  8910  001E5E  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
  8911  001E60  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
  8912  001E62  3411               	rlcf	i2___ftdiv@f2+1,w,c
  8913  001E64  3613               	rlcf	??i2___ftdiv& (0+255),f,c
  8914  001E66  E301               	bnc	u324_41
  8915  001E68  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  8916  001E6A                     u324_41:
  8917  001E6A  5013               	movf	??i2___ftdiv,w,c
  8918  001E6C  6E1B               	movwf	i2___ftdiv@sign,c
  8919  001E6E  501B               	movf	i2___ftdiv@sign,w,c
  8920  001E70  A4D8               	btfss	status,2,c
  8921  001E72  D007               	goto	i2l3515
  8922  001E74  0E00               	movlw	0
  8923  001E76  6E0D               	movwf	?i2___ftdiv,c
  8924  001E78  0E00               	movlw	0
  8925  001E7A  6E0E               	movwf	?i2___ftdiv+1,c
  8926  001E7C  0E00               	movlw	0
  8927  001E7E  6E0F               	movwf	?i2___ftdiv+2,c
  8928  001E80  0012               	return	
  8929  001E82                     i2l3515:
  8930  001E82  0E00               	movlw	0
  8931  001E84  6E17               	movwf	i2___ftdiv@f3,c
  8932  001E86  0E00               	movlw	0
  8933  001E88  6E18               	movwf	i2___ftdiv@f3+1,c
  8934  001E8A  0E00               	movlw	0
  8935  001E8C  6E19               	movwf	i2___ftdiv@f3+2,c
  8936  001E8E  501B               	movf	i2___ftdiv@sign,w,c
  8937  001E90  0F89               	addlw	137
  8938  001E92  5E1A               	subwf	i2___ftdiv@exp,f,c
  8939  001E94  C00F  F01B         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
  8940  001E98  5012               	movf	i2___ftdiv@f2+2,w,c
  8941  001E9A  1A1B               	xorwf	i2___ftdiv@sign,f,c
  8942  001E9C  0E80               	movlw	128
  8943  001E9E  161B               	andwf	i2___ftdiv@sign,f,c
  8944  001EA0  8E0E               	bsf	i2___ftdiv@f1+1,7,c
  8945  001EA2  0EFF               	movlw	255
  8946  001EA4  160D               	andwf	i2___ftdiv@f1,f,c
  8947  001EA6  0EFF               	movlw	255
  8948  001EA8  160E               	andwf	i2___ftdiv@f1+1,f,c
  8949  001EAA  0E00               	movlw	0
  8950  001EAC  160F               	andwf	i2___ftdiv@f1+2,f,c
  8951  001EAE  8E11               	bsf	i2___ftdiv@f2+1,7,c
  8952  001EB0  0EFF               	movlw	255
  8953  001EB2  1610               	andwf	i2___ftdiv@f2,f,c
  8954  001EB4  0EFF               	movlw	255
  8955  001EB6  1611               	andwf	i2___ftdiv@f2+1,f,c
  8956  001EB8  0E00               	movlw	0
  8957  001EBA  1612               	andwf	i2___ftdiv@f2+2,f,c
  8958  001EBC  0E18               	movlw	24
  8959  001EBE  6E16               	movwf	i2___ftdiv@cntr,c
  8960  001EC0                     i2l3535:
  8961  001EC0  90D8               	bcf	status,0,c
  8962  001EC2  3617               	rlcf	i2___ftdiv@f3,f,c
  8963  001EC4  3618               	rlcf	i2___ftdiv@f3+1,f,c
  8964  001EC6  3619               	rlcf	i2___ftdiv@f3+2,f,c
  8965  001EC8  5010               	movf	i2___ftdiv@f2,w,c
  8966  001ECA  5C0D               	subwf	i2___ftdiv@f1,w,c
  8967  001ECC  5011               	movf	i2___ftdiv@f2+1,w,c
  8968  001ECE  580E               	subwfb	i2___ftdiv@f1+1,w,c
  8969  001ED0  5012               	movf	i2___ftdiv@f2+2,w,c
  8970  001ED2  580F               	subwfb	i2___ftdiv@f1+2,w,c
  8971  001ED4  A0D8               	btfss	status,0,c
  8972  001ED6  D007               	goto	i2l864
  8973  001ED8  5010               	movf	i2___ftdiv@f2,w,c
  8974  001EDA  5E0D               	subwf	i2___ftdiv@f1,f,c
  8975  001EDC  5011               	movf	i2___ftdiv@f2+1,w,c
  8976  001EDE  5A0E               	subwfb	i2___ftdiv@f1+1,f,c
  8977  001EE0  5012               	movf	i2___ftdiv@f2+2,w,c
  8978  001EE2  5A0F               	subwfb	i2___ftdiv@f1+2,f,c
  8979  001EE4  8017               	bsf	i2___ftdiv@f3,0,c
  8980  001EE6                     i2l864:
  8981  001EE6  90D8               	bcf	status,0,c
  8982  001EE8  360D               	rlcf	i2___ftdiv@f1,f,c
  8983  001EEA  360E               	rlcf	i2___ftdiv@f1+1,f,c
  8984  001EEC  360F               	rlcf	i2___ftdiv@f1+2,f,c
  8985  001EEE  2E16               	decfsz	i2___ftdiv@cntr,f,c
  8986  001EF0  D7E7               	goto	i2l3535
  8987  001EF2  C017  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
  8988  001EF6  C018  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
  8989  001EFA  C019  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
  8990  001EFE  C01A  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
  8991  001F02  C01B  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
  8992  001F06  EC58  F010         	call	i2___ftpack	;wreg free
  8993  001F0A  C001  F00D         	movff	?i2___ftpack,?i2___ftdiv
  8994  001F0E  C002  F00E         	movff	?i2___ftpack+1,?i2___ftdiv+1
  8995  001F12  C003  F00F         	movff	?i2___ftpack+2,?i2___ftdiv+2
  8996  001F16  0012               	return	
  8997  001F18                     __end_ofi2___ftdiv:
  8998                           	opt stack 0
  8999                           pclatu	equ	0xFFB
  9000                           pclath	equ	0xFFA
  9001                           tblptru	equ	0xFF8
  9002                           tblptrh	equ	0xFF7
  9003                           tblptrl	equ	0xFF6
  9004                           tablat	equ	0xFF5
  9005                           prodh	equ	0xFF4
  9006                           prodl	equ	0xFF3
  9007                           intcon	equ	0xFF2
  9008                           intcon3	equ	0xFF0
  9009                           postinc0	equ	0xFEE
  9010                           fsr0h	equ	0xFEA
  9011                           fsr0l	equ	0xFE9
  9012                           wreg	equ	0xFE8
  9013                           postdec1	equ	0xFE5
  9014                           fsr1h	equ	0xFE2
  9015                           fsr1l	equ	0xFE1
  9016                           indf2	equ	0xFDF
  9017                           postinc2	equ	0xFDE
  9018                           postdec2	equ	0xFDD
  9019                           fsr2h	equ	0xFDA
  9020                           fsr2l	equ	0xFD9
  9021                           status	equ	0xFD8
  9022                           
  9023 ;; *************** function i2___ftadd *****************
  9024 ;; Defined at:
  9025 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;  f1              3   42[COMRAM] float 
  9028 ;;  f2              3   45[COMRAM] float 
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;  __ftadd         1   53[COMRAM] unsigned char 
  9031 ;;  __ftadd         1   52[COMRAM] unsigned char 
  9032 ;;  __ftadd         1   51[COMRAM] unsigned char 
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  3   42[COMRAM] float 
  9035 ;; Registers used:
  9036 ;;		wreg, status,2, status,0, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9042 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9043 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9044 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9046 ;;Total ram usage:       12 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    1
  9049 ;; This function calls:
  9050 ;;		i2___ftpack
  9051 ;; This function is called by:
  9052 ;;		i2_angleToPulse
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text37
  9057  00133A                     __ptext37:
  9058                           	opt stack 0
  9059  00133A                     i2___ftadd:
  9060                           	opt stack 19
  9061                           
  9062                           ;incstack = 0
  9063  00133A  C02D  F031         	movff	i2___ftadd@f1+2,??i2___ftadd
  9064  00133E  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
  9065  001340  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
  9066  001342  342C               	rlcf	i2___ftadd@f1+1,w,c
  9067  001344  3631               	rlcf	??i2___ftadd& (0+255),f,c
  9068  001346  E301               	bnc	u301_41
  9069  001348  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
  9070  00134A                     u301_41:
  9071  00134A  5031               	movf	??i2___ftadd,w,c
  9072  00134C  6E36               	movwf	i2___ftadd@exp1,c
  9073  00134E  C030  F031         	movff	i2___ftadd@f2+2,??i2___ftadd
  9074  001352  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
  9075  001354  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
  9076  001356  342F               	rlcf	i2___ftadd@f2+1,w,c
  9077  001358  3631               	rlcf	??i2___ftadd& (0+255),f,c
  9078  00135A  E301               	bnc	u302_41
  9079  00135C  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
  9080  00135E                     u302_41:
  9081  00135E  5031               	movf	??i2___ftadd,w,c
  9082  001360  6E35               	movwf	i2___ftadd@exp2,c
  9083  001362  5036               	movf	i2___ftadd@exp1,w,c
  9084  001364  B4D8               	btfsc	status,2,c
  9085  001366  D00B               	goto	i2l829
  9086  001368  5035               	movf	i2___ftadd@exp2,w,c
  9087  00136A  5C36               	subwf	i2___ftadd@exp1,w,c
  9088  00136C  B0D8               	btfsc	status,0,c
  9089  00136E  D00E               	goto	i2l3441
  9090  001370  5036               	movf	i2___ftadd@exp1,w,c
  9091  001372  0800               	sublw	0
  9092  001374  2435               	addwf	i2___ftadd@exp2,w,c
  9093  001376  6E31               	movwf	??i2___ftadd& (0+255),c
  9094  001378  0E18               	movlw	24
  9095  00137A  6431               	cpfsgt	??i2___ftadd,c
  9096  00137C  D007               	goto	i2l3441
  9097  00137E                     i2l829:
  9098  00137E  C02E  F02B         	movff	i2___ftadd@f2,?i2___ftadd
  9099  001382  C02F  F02C         	movff	i2___ftadd@f2+1,?i2___ftadd+1
  9100  001386  C030  F02D         	movff	i2___ftadd@f2+2,?i2___ftadd+2
  9101  00138A  0012               	return	
  9102  00138C                     i2l3441:
  9103  00138C  5035               	movf	i2___ftadd@exp2,w,c
  9104  00138E  B4D8               	btfsc	status,2,c
  9105  001390  D00B               	goto	i2l833
  9106  001392  5036               	movf	i2___ftadd@exp1,w,c
  9107  001394  5C35               	subwf	i2___ftadd@exp2,w,c
  9108  001396  B0D8               	btfsc	status,0,c
  9109  001398  D00E               	goto	i2l3447
  9110  00139A  5035               	movf	i2___ftadd@exp2,w,c
  9111  00139C  0800               	sublw	0
  9112  00139E  2436               	addwf	i2___ftadd@exp1,w,c
  9113  0013A0  6E31               	movwf	??i2___ftadd& (0+255),c
  9114  0013A2  0E18               	movlw	24
  9115  0013A4  6431               	cpfsgt	??i2___ftadd,c
  9116  0013A6  D007               	goto	i2l3447
  9117  0013A8                     i2l833:
  9118  0013A8  C02B  F02B         	movff	i2___ftadd@f1,?i2___ftadd
  9119  0013AC  C02C  F02C         	movff	i2___ftadd@f1+1,?i2___ftadd+1
  9120  0013B0  C02D  F02D         	movff	i2___ftadd@f1+2,?i2___ftadd+2
  9121  0013B4  0012               	return	
  9122  0013B6                     i2l3447:
  9123  0013B6  0E06               	movlw	6
  9124  0013B8  6E34               	movwf	i2___ftadd@sign,c
  9125  0013BA  BE2D               	btfsc	i2___ftadd@f1+2,7,c
  9126  0013BC  8E34               	bsf	i2___ftadd@sign,7,c
  9127  0013BE  BE30               	btfsc	i2___ftadd@f2+2,7,c
  9128  0013C0  8C34               	bsf	i2___ftadd@sign,6,c
  9129  0013C2  8E2C               	bsf	i2___ftadd@f1+1,7,c
  9130  0013C4  0EFF               	movlw	255
  9131  0013C6  162B               	andwf	i2___ftadd@f1,f,c
  9132  0013C8  0EFF               	movlw	255
  9133  0013CA  162C               	andwf	i2___ftadd@f1+1,f,c
  9134  0013CC  0E00               	movlw	0
  9135  0013CE  162D               	andwf	i2___ftadd@f1+2,f,c
  9136  0013D0  8E2F               	bsf	i2___ftadd@f2+1,7,c
  9137  0013D2  0EFF               	movlw	255
  9138  0013D4  162E               	andwf	i2___ftadd@f2,f,c
  9139  0013D6  0EFF               	movlw	255
  9140  0013D8  162F               	andwf	i2___ftadd@f2+1,f,c
  9141  0013DA  0E00               	movlw	0
  9142  0013DC  1630               	andwf	i2___ftadd@f2+2,f,c
  9143  0013DE  5035               	movf	i2___ftadd@exp2,w,c
  9144  0013E0  5C36               	subwf	i2___ftadd@exp1,w,c
  9145  0013E2  B0D8               	btfsc	status,0,c
  9146  0013E4  D01B               	goto	i2l3473
  9147  0013E6                     i2l3463:
  9148  0013E6  90D8               	bcf	status,0,c
  9149  0013E8  362E               	rlcf	i2___ftadd@f2,f,c
  9150  0013EA  362F               	rlcf	i2___ftadd@f2+1,f,c
  9151  0013EC  3630               	rlcf	i2___ftadd@f2+2,f,c
  9152  0013EE  0635               	decf	i2___ftadd@exp2,f,c
  9153  0013F0  5036               	movf	i2___ftadd@exp1,w,c
  9154  0013F2  1835               	xorwf	i2___ftadd@exp2,w,c
  9155  0013F4  B4D8               	btfsc	status,2,c
  9156  0013F6  D00D               	goto	i2l3471
  9157  0013F8  0634               	decf	i2___ftadd@sign,f,c
  9158  0013FA  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
  9159  0013FE  0E07               	movlw	7
  9160  001400  1631               	andwf	??i2___ftadd,f,c
  9161  001402  B4D8               	btfsc	status,2,c
  9162  001404  D006               	goto	i2l3471
  9163  001406  D7EF               	goto	i2l3463
  9164  001408                     i2l3469:
  9165  001408  90D8               	bcf	status,0,c
  9166  00140A  322D               	rrcf	i2___ftadd@f1+2,f,c
  9167  00140C  322C               	rrcf	i2___ftadd@f1+1,f,c
  9168  00140E  322B               	rrcf	i2___ftadd@f1,f,c
  9169  001410  2A36               	incf	i2___ftadd@exp1,f,c
  9170  001412                     i2l3471:
  9171  001412  5035               	movf	i2___ftadd@exp2,w,c
  9172  001414  1836               	xorwf	i2___ftadd@exp1,w,c
  9173  001416  B4D8               	btfsc	status,2,c
  9174  001418  D01F               	goto	i2l844
  9175  00141A  D7F6               	goto	i2l3469
  9176  00141C                     i2l3473:
  9177  00141C  5036               	movf	i2___ftadd@exp1,w,c
  9178  00141E  5C35               	subwf	i2___ftadd@exp2,w,c
  9179  001420  B0D8               	btfsc	status,0,c
  9180  001422  D01A               	goto	i2l844
  9181  001424                     i2l3475:
  9182  001424  90D8               	bcf	status,0,c
  9183  001426  362B               	rlcf	i2___ftadd@f1,f,c
  9184  001428  362C               	rlcf	i2___ftadd@f1+1,f,c
  9185  00142A  362D               	rlcf	i2___ftadd@f1+2,f,c
  9186  00142C  0636               	decf	i2___ftadd@exp1,f,c
  9187  00142E  5036               	movf	i2___ftadd@exp1,w,c
  9188  001430  1835               	xorwf	i2___ftadd@exp2,w,c
  9189  001432  B4D8               	btfsc	status,2,c
  9190  001434  D00D               	goto	i2l3483
  9191  001436  0634               	decf	i2___ftadd@sign,f,c
  9192  001438  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
  9193  00143C  0E07               	movlw	7
  9194  00143E  1631               	andwf	??i2___ftadd,f,c
  9195  001440  B4D8               	btfsc	status,2,c
  9196  001442  D006               	goto	i2l3483
  9197  001444  D7EF               	goto	i2l3475
  9198  001446                     i2l3481:
  9199  001446  90D8               	bcf	status,0,c
  9200  001448  3230               	rrcf	i2___ftadd@f2+2,f,c
  9201  00144A  322F               	rrcf	i2___ftadd@f2+1,f,c
  9202  00144C  322E               	rrcf	i2___ftadd@f2,f,c
  9203  00144E  2A35               	incf	i2___ftadd@exp2,f,c
  9204  001450                     i2l3483:
  9205  001450  5035               	movf	i2___ftadd@exp2,w,c
  9206  001452  1836               	xorwf	i2___ftadd@exp1,w,c
  9207  001454  A4D8               	btfss	status,2,c
  9208  001456  D7F7               	goto	i2l3481
  9209  001458                     i2l844:
  9210  001458  AE34               	btfss	i2___ftadd@sign,7,c
  9211  00145A  D00C               	goto	i2l853
  9212  00145C  0EFF               	movlw	255
  9213  00145E  1A2B               	xorwf	i2___ftadd@f1,f,c
  9214  001460  0EFF               	movlw	255
  9215  001462  1A2C               	xorwf	i2___ftadd@f1+1,f,c
  9216  001464  0EFF               	movlw	255
  9217  001466  1A2D               	xorwf	i2___ftadd@f1+2,f,c
  9218  001468  0E01               	movlw	1
  9219  00146A  262B               	addwf	i2___ftadd@f1,f,c
  9220  00146C  0E00               	movlw	0
  9221  00146E  222C               	addwfc	i2___ftadd@f1+1,f,c
  9222  001470  0E00               	movlw	0
  9223  001472  222D               	addwfc	i2___ftadd@f1+2,f,c
  9224  001474                     i2l853:
  9225  001474  AC34               	btfss	i2___ftadd@sign,6,c
  9226  001476  D00C               	goto	i2l3489
  9227  001478  0EFF               	movlw	255
  9228  00147A  1A2E               	xorwf	i2___ftadd@f2,f,c
  9229  00147C  0EFF               	movlw	255
  9230  00147E  1A2F               	xorwf	i2___ftadd@f2+1,f,c
  9231  001480  0EFF               	movlw	255
  9232  001482  1A30               	xorwf	i2___ftadd@f2+2,f,c
  9233  001484  0E01               	movlw	1
  9234  001486  262E               	addwf	i2___ftadd@f2,f,c
  9235  001488  0E00               	movlw	0
  9236  00148A  222F               	addwfc	i2___ftadd@f2+1,f,c
  9237  00148C  0E00               	movlw	0
  9238  00148E  2230               	addwfc	i2___ftadd@f2+2,f,c
  9239  001490                     i2l3489:
  9240  001490  0E00               	movlw	0
  9241  001492  6E34               	movwf	i2___ftadd@sign,c
  9242  001494  502B               	movf	i2___ftadd@f1,w,c
  9243  001496  262E               	addwf	i2___ftadd@f2,f,c
  9244  001498  502C               	movf	i2___ftadd@f1+1,w,c
  9245  00149A  222F               	addwfc	i2___ftadd@f2+1,f,c
  9246  00149C  502D               	movf	i2___ftadd@f1+2,w,c
  9247  00149E  2230               	addwfc	i2___ftadd@f2+2,f,c
  9248  0014A0  AE30               	btfss	i2___ftadd@f2+2,7,c
  9249  0014A2  D00E               	goto	i2l3499
  9250  0014A4  0EFF               	movlw	255
  9251  0014A6  1A2E               	xorwf	i2___ftadd@f2,f,c
  9252  0014A8  0EFF               	movlw	255
  9253  0014AA  1A2F               	xorwf	i2___ftadd@f2+1,f,c
  9254  0014AC  0EFF               	movlw	255
  9255  0014AE  1A30               	xorwf	i2___ftadd@f2+2,f,c
  9256  0014B0  0E01               	movlw	1
  9257  0014B2  262E               	addwf	i2___ftadd@f2,f,c
  9258  0014B4  0E00               	movlw	0
  9259  0014B6  222F               	addwfc	i2___ftadd@f2+1,f,c
  9260  0014B8  0E00               	movlw	0
  9261  0014BA  2230               	addwfc	i2___ftadd@f2+2,f,c
  9262  0014BC  0E01               	movlw	1
  9263  0014BE  6E34               	movwf	i2___ftadd@sign,c
  9264  0014C0                     i2l3499:
  9265  0014C0  C02E  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
  9266  0014C4  C02F  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
  9267  0014C8  C030  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
  9268  0014CC  C036  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
  9269  0014D0  C034  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
  9270  0014D4  EC58  F010         	call	i2___ftpack	;wreg free
  9271  0014D8  C001  F02B         	movff	?i2___ftpack,?i2___ftadd
  9272  0014DC  C002  F02C         	movff	?i2___ftpack+1,?i2___ftadd+1
  9273  0014E0  C003  F02D         	movff	?i2___ftpack+2,?i2___ftadd+2
  9274  0014E4  0012               	return	
  9275  0014E6                     __end_ofi2___ftadd:
  9276                           	opt stack 0
  9277                           pclatu	equ	0xFFB
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           intcon3	equ	0xFF0
  9287                           postinc0	equ	0xFEE
  9288                           fsr0h	equ	0xFEA
  9289                           fsr0l	equ	0xFE9
  9290                           wreg	equ	0xFE8
  9291                           postdec1	equ	0xFE5
  9292                           fsr1h	equ	0xFE2
  9293                           fsr1l	equ	0xFE1
  9294                           indf2	equ	0xFDF
  9295                           postinc2	equ	0xFDE
  9296                           postdec2	equ	0xFDD
  9297                           fsr2h	equ	0xFDA
  9298                           fsr2l	equ	0xFD9
  9299                           status	equ	0xFD8
  9300                           
  9301 ;; *************** function i2___awtoft *****************
  9302 ;; Defined at:
  9303 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;  c               2    8[COMRAM] int 
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;  __awtoft        1   11[COMRAM] unsigned char 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  3    8[COMRAM] float 
  9310 ;; Registers used:
  9311 ;;		wreg, status,2, status,0, cstack
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9317 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;Total ram usage:        4 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    1
  9324 ;; This function calls:
  9325 ;;		i2___ftpack
  9326 ;; This function is called by:
  9327 ;;		i2_angleToPulse
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           	psect	text38
  9332  00284E                     __ptext38:
  9333                           	opt stack 0
  9334  00284E                     i2___awtoft:
  9335                           	opt stack 19
  9336                           
  9337                           ;incstack = 0
  9338  00284E  0E00               	movlw	0
  9339  002850  6E0C               	movwf	i2___awtoft@sign,c
  9340  002852  AE0A               	btfss	i2___awtoft@c+1,7,c
  9341  002854  D006               	goto	i2l3429
  9342  002856  6C09               	negf	i2___awtoft@c,c
  9343  002858  1E0A               	comf	i2___awtoft@c+1,f,c
  9344  00285A  B0D8               	btfsc	status,0,c
  9345  00285C  2A0A               	incf	i2___awtoft@c+1,f,c
  9346  00285E  0E01               	movlw	1
  9347  002860  6E0C               	movwf	i2___awtoft@sign,c
  9348  002862                     i2l3429:
  9349  002862  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
  9350  002866  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
  9351  00286A  6A03               	clrf	i2___ftpack@arg+2,c
  9352  00286C  0E8E               	movlw	142
  9353  00286E  6E04               	movwf	i2___ftpack@exp,c
  9354  002870  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
  9355  002874  EC58  F010         	call	i2___ftpack	;wreg free
  9356  002878  C001  F009         	movff	?i2___ftpack,?i2___awtoft
  9357  00287C  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
  9358  002880  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
  9359  002884  0012               	return	
  9360  002886                     __end_ofi2___awtoft:
  9361                           	opt stack 0
  9362                           pclatu	equ	0xFFB
  9363                           pclath	equ	0xFFA
  9364                           tblptru	equ	0xFF8
  9365                           tblptrh	equ	0xFF7
  9366                           tblptrl	equ	0xFF6
  9367                           tablat	equ	0xFF5
  9368                           prodh	equ	0xFF4
  9369                           prodl	equ	0xFF3
  9370                           intcon	equ	0xFF2
  9371                           intcon3	equ	0xFF0
  9372                           postinc0	equ	0xFEE
  9373                           fsr0h	equ	0xFEA
  9374                           fsr0l	equ	0xFE9
  9375                           wreg	equ	0xFE8
  9376                           postdec1	equ	0xFE5
  9377                           fsr1h	equ	0xFE2
  9378                           fsr1l	equ	0xFE1
  9379                           indf2	equ	0xFDF
  9380                           postinc2	equ	0xFDE
  9381                           postdec2	equ	0xFDD
  9382                           fsr2h	equ	0xFDA
  9383                           fsr2l	equ	0xFD9
  9384                           status	equ	0xFD8
  9385                           
  9386 ;; *************** function i2___altoft *****************
  9387 ;; Defined at:
  9388 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;  c               4    8[COMRAM] long 
  9391 ;; Auto vars:     Size  Location     Type
  9392 ;;  __altoft        1   17[COMRAM] unsigned char 
  9393 ;;  __altoft        1   16[COMRAM] unsigned char 
  9394 ;; Return value:  Size  Location     Type
  9395 ;;                  3    8[COMRAM] float 
  9396 ;; Registers used:
  9397 ;;		wreg, status,2, status,0, cstack
  9398 ;; Tracked objects:
  9399 ;;		On entry : 0/0
  9400 ;;		On exit  : 0/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9403 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9406 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;Total ram usage:       10 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    1
  9410 ;; This function calls:
  9411 ;;		i2___ftpack
  9412 ;; This function is called by:
  9413 ;;		i2_angleToPulse
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           	psect	text39
  9418  0024CA                     __ptext39:
  9419                           	opt stack 0
  9420  0024CA                     i2___altoft:
  9421                           	opt stack 19
  9422                           
  9423                           ;incstack = 0
  9424  0024CA  0E00               	movlw	0
  9425  0024CC  6E12               	movwf	i2___altoft@sign,c
  9426  0024CE  0E8E               	movlw	142
  9427  0024D0  6E11               	movwf	i2___altoft@exp,c
  9428  0024D2  AE0C               	btfss	i2___altoft@c+3,7,c
  9429  0024D4  D011               	goto	i2l3415
  9430  0024D6  1E0C               	comf	i2___altoft@c+3,f,c
  9431  0024D8  1E0B               	comf	i2___altoft@c+2,f,c
  9432  0024DA  1E0A               	comf	i2___altoft@c+1,f,c
  9433  0024DC  6C09               	negf	i2___altoft@c,c
  9434  0024DE  0E00               	movlw	0
  9435  0024E0  220A               	addwfc	i2___altoft@c+1,f,c
  9436  0024E2  220B               	addwfc	i2___altoft@c+2,f,c
  9437  0024E4  220C               	addwfc	i2___altoft@c+3,f,c
  9438  0024E6  0E01               	movlw	1
  9439  0024E8  6E12               	movwf	i2___altoft@sign,c
  9440  0024EA  D006               	goto	i2l3415
  9441  0024EC                     i2l3413:
  9442  0024EC  90D8               	bcf	status,0,c
  9443  0024EE  320C               	rrcf	i2___altoft@c+3,f,c
  9444  0024F0  320B               	rrcf	i2___altoft@c+2,f,c
  9445  0024F2  320A               	rrcf	i2___altoft@c+1,f,c
  9446  0024F4  3209               	rrcf	i2___altoft@c,f,c
  9447  0024F6  2A11               	incf	i2___altoft@exp,f,c
  9448  0024F8                     i2l3415:
  9449  0024F8  0E00               	movlw	0
  9450  0024FA  1409               	andwf	i2___altoft@c,w,c
  9451  0024FC  6E0D               	movwf	??i2___altoft& (0+255),c
  9452  0024FE  0E00               	movlw	0
  9453  002500  140A               	andwf	i2___altoft@c+1,w,c
  9454  002502  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
  9455  002504  0E00               	movlw	0
  9456  002506  140B               	andwf	i2___altoft@c+2,w,c
  9457  002508  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
  9458  00250A  0EFF               	movlw	255
  9459  00250C  140C               	andwf	i2___altoft@c+3,w,c
  9460  00250E  6E10               	movwf	(??i2___altoft+3)& (0+255),c
  9461  002510  500D               	movf	??i2___altoft,w,c
  9462  002512  100E               	iorwf	??i2___altoft+1,w,c
  9463  002514  100F               	iorwf	??i2___altoft+2,w,c
  9464  002516  1010               	iorwf	??i2___altoft+3,w,c
  9465  002518  A4D8               	btfss	status,2,c
  9466  00251A  D7E8               	goto	i2l3413
  9467  00251C  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
  9468  002520  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
  9469  002524  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
  9470  002528  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
  9471  00252C  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
  9472  002530  EC58  F010         	call	i2___ftpack	;wreg free
  9473  002534  C001  F009         	movff	?i2___ftpack,?i2___altoft
  9474  002538  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
  9475  00253C  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
  9476  002540  0012               	return	
  9477  002542                     __end_ofi2___altoft:
  9478                           	opt stack 0
  9479                           pclatu	equ	0xFFB
  9480                           pclath	equ	0xFFA
  9481                           tblptru	equ	0xFF8
  9482                           tblptrh	equ	0xFF7
  9483                           tblptrl	equ	0xFF6
  9484                           tablat	equ	0xFF5
  9485                           prodh	equ	0xFF4
  9486                           prodl	equ	0xFF3
  9487                           intcon	equ	0xFF2
  9488                           intcon3	equ	0xFF0
  9489                           postinc0	equ	0xFEE
  9490                           fsr0h	equ	0xFEA
  9491                           fsr0l	equ	0xFE9
  9492                           wreg	equ	0xFE8
  9493                           postdec1	equ	0xFE5
  9494                           fsr1h	equ	0xFE2
  9495                           fsr1l	equ	0xFE1
  9496                           indf2	equ	0xFDF
  9497                           postinc2	equ	0xFDE
  9498                           postdec2	equ	0xFDD
  9499                           fsr2h	equ	0xFDA
  9500                           fsr2l	equ	0xFD9
  9501                           status	equ	0xFD8
  9502                           
  9503 ;; *************** function i2___ftpack *****************
  9504 ;; Defined at:
  9505 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;  arg             3    0[COMRAM] unsigned um
  9508 ;;  exp             1    3[COMRAM] unsigned char 
  9509 ;;  sign            1    4[COMRAM] unsigned char 
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;		None
  9512 ;; Return value:  Size  Location     Type
  9513 ;;                  3    0[COMRAM] float 
  9514 ;; Registers used:
  9515 ;;		wreg, status,2, status,0
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9521 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;Total ram usage:        8 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; This function calls:
  9528 ;;		Nothing
  9529 ;; This function is called by:
  9530 ;;		i2___altoft
  9531 ;;		i2___awtoft
  9532 ;;		i2___ftadd
  9533 ;;		i2___ftdiv
  9534 ;;		i2___ftmul
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text40
  9539  0020B0                     __ptext40:
  9540                           	opt stack 0
  9541  0020B0                     i2___ftpack:
  9542                           	opt stack 19
  9543                           
  9544                           ;incstack = 0
  9545  0020B0  5004               	movf	i2___ftpack@exp,w,c
  9546  0020B2  B4D8               	btfsc	status,2,c
  9547  0020B4  D005               	goto	i2l3253
  9548  0020B6  5001               	movf	i2___ftpack@arg,w,c
  9549  0020B8  1002               	iorwf	i2___ftpack@arg+1,w,c
  9550  0020BA  1003               	iorwf	i2___ftpack@arg+2,w,c
  9551  0020BC  A4D8               	btfss	status,2,c
  9552  0020BE  D00C               	goto	i2l3259
  9553  0020C0                     i2l3253:
  9554  0020C0  0E00               	movlw	0
  9555  0020C2  6E01               	movwf	?i2___ftpack,c
  9556  0020C4  0E00               	movlw	0
  9557  0020C6  6E02               	movwf	?i2___ftpack+1,c
  9558  0020C8  0E00               	movlw	0
  9559  0020CA  6E03               	movwf	?i2___ftpack+2,c
  9560  0020CC  0012               	return	
  9561  0020CE                     i2l3257:
  9562  0020CE  2A04               	incf	i2___ftpack@exp,f,c
  9563  0020D0  90D8               	bcf	status,0,c
  9564  0020D2  3203               	rrcf	i2___ftpack@arg+2,f,c
  9565  0020D4  3202               	rrcf	i2___ftpack@arg+1,f,c
  9566  0020D6  3201               	rrcf	i2___ftpack@arg,f,c
  9567  0020D8                     i2l3259:
  9568  0020D8  0E00               	movlw	0
  9569  0020DA  1401               	andwf	i2___ftpack@arg,w,c
  9570  0020DC  6E06               	movwf	??i2___ftpack& (0+255),c
  9571  0020DE  0E00               	movlw	0
  9572  0020E0  1402               	andwf	i2___ftpack@arg+1,w,c
  9573  0020E2  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  9574  0020E4  0EFE               	movlw	254
  9575  0020E6  1403               	andwf	i2___ftpack@arg+2,w,c
  9576  0020E8  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9577  0020EA  5006               	movf	??i2___ftpack,w,c
  9578  0020EC  1007               	iorwf	??i2___ftpack+1,w,c
  9579  0020EE  1008               	iorwf	??i2___ftpack+2,w,c
  9580  0020F0  B4D8               	btfsc	status,2,c
  9581  0020F2  D00C               	goto	i2l3265
  9582  0020F4  D7EC               	goto	i2l3257
  9583  0020F6                     i2l3261:
  9584  0020F6  2A04               	incf	i2___ftpack@exp,f,c
  9585  0020F8  0E01               	movlw	1
  9586  0020FA  2601               	addwf	i2___ftpack@arg,f,c
  9587  0020FC  0E00               	movlw	0
  9588  0020FE  2202               	addwfc	i2___ftpack@arg+1,f,c
  9589  002100  0E00               	movlw	0
  9590  002102  2203               	addwfc	i2___ftpack@arg+2,f,c
  9591  002104  90D8               	bcf	status,0,c
  9592  002106  3203               	rrcf	i2___ftpack@arg+2,f,c
  9593  002108  3202               	rrcf	i2___ftpack@arg+1,f,c
  9594  00210A  3201               	rrcf	i2___ftpack@arg,f,c
  9595  00210C                     i2l3265:
  9596  00210C  0E00               	movlw	0
  9597  00210E  1401               	andwf	i2___ftpack@arg,w,c
  9598  002110  6E06               	movwf	??i2___ftpack& (0+255),c
  9599  002112  0E00               	movlw	0
  9600  002114  1402               	andwf	i2___ftpack@arg+1,w,c
  9601  002116  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  9602  002118  0EFF               	movlw	255
  9603  00211A  1403               	andwf	i2___ftpack@arg+2,w,c
  9604  00211C  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9605  00211E  5006               	movf	??i2___ftpack,w,c
  9606  002120  1007               	iorwf	??i2___ftpack+1,w,c
  9607  002122  1008               	iorwf	??i2___ftpack+2,w,c
  9608  002124  B4D8               	btfsc	status,2,c
  9609  002126  D006               	goto	i2l3269
  9610  002128  D7E6               	goto	i2l3261
  9611  00212A                     i2l3267:
  9612  00212A  0604               	decf	i2___ftpack@exp,f,c
  9613  00212C  90D8               	bcf	status,0,c
  9614  00212E  3601               	rlcf	i2___ftpack@arg,f,c
  9615  002130  3602               	rlcf	i2___ftpack@arg+1,f,c
  9616  002132  3603               	rlcf	i2___ftpack@arg+2,f,c
  9617  002134                     i2l3269:
  9618  002134  BE02               	btfsc	i2___ftpack@arg+1,7,c
  9619  002136  D003               	goto	i2l806
  9620  002138  0E02               	movlw	2
  9621  00213A  6004               	cpfslt	i2___ftpack@exp,c
  9622  00213C  D7F6               	goto	i2l3267
  9623  00213E                     i2l806:
  9624  00213E  A004               	btfss	i2___ftpack@exp,0,c
  9625  002140  9E02               	bcf	i2___ftpack@arg+1,7,c
  9626  002142  90D8               	bcf	status,0,c
  9627  002144  3204               	rrcf	i2___ftpack@exp,f,c
  9628  002146  5004               	movf	i2___ftpack@exp,w,c
  9629  002148  1203               	iorwf	i2___ftpack@arg+2,f,c
  9630  00214A  5005               	movf	i2___ftpack@sign,w,c
  9631  00214C  A4D8               	btfss	status,2,c
  9632  00214E  8E03               	bsf	i2___ftpack@arg+2,7,c
  9633  002150  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  9634  002154  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  9635  002158  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  9636  00215C  0012               	return	
  9637  00215E                     __end_ofi2___ftpack:
  9638                           	opt stack 0
  9639                           pclatu	equ	0xFFB
  9640                           pclath	equ	0xFFA
  9641                           tblptru	equ	0xFF8
  9642                           tblptrh	equ	0xFF7
  9643                           tblptrl	equ	0xFF6
  9644                           tablat	equ	0xFF5
  9645                           prodh	equ	0xFF4
  9646                           prodl	equ	0xFF3
  9647                           intcon	equ	0xFF2
  9648                           intcon3	equ	0xFF0
  9649                           postinc0	equ	0xFEE
  9650                           fsr0h	equ	0xFEA
  9651                           fsr0l	equ	0xFE9
  9652                           wreg	equ	0xFE8
  9653                           postdec1	equ	0xFE5
  9654                           fsr1h	equ	0xFE2
  9655                           fsr1l	equ	0xFE1
  9656                           indf2	equ	0xFDF
  9657                           postinc2	equ	0xFDE
  9658                           postdec2	equ	0xFDD
  9659                           fsr2h	equ	0xFDA
  9660                           fsr2l	equ	0xFD9
  9661                           status	equ	0xFD8
  9662                           
  9663 ;; *************** function _servoInterruptService *****************
  9664 ;; Defined at:
  9665 ;;		line 83 in file "servo.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;		None
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;  i               2   21[COMRAM] int 
  9670 ;; Return value:  Size  Location     Type
  9671 ;;                  1    wreg      void 
  9672 ;; Registers used:
  9673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9681 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;Total ram usage:       14 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    1
  9686 ;; This function calls:
  9687 ;;		_digitalWrite
  9688 ;;		i2_startTimer
  9689 ;; This function is called by:
  9690 ;;		_service
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           	psect	text41
  9695  001118                     __ptext41:
  9696                           	opt stack 0
  9697  001118                     _servoInterruptService:
  9698                           	opt stack 21
  9699                           
  9700                           ;servo.c: 84: if(TMR0IF){ TMR0IF = 0;
  9701                           
  9702                           ;incstack = 0
  9703  001118  A4F2               	btfss	intcon,2,c	;volatile
  9704  00111A  0012               	return	
  9705  00111C  94F2               	bcf	intcon,2,c	;volatile
  9706                           
  9707                           ;servo.c: 85: if(curr == nServo){
  9708  00111E  0101               	movlb	1	; () banked
  9709  001120  51A9               	movf	_nServo& (0+255),w,b
  9710  001122  187D               	xorwf	_curr,w,c
  9711  001124  E179               	bnz	i2l3993
  9712  001126  0101               	movlb	1	; () banked
  9713  001128  51AA               	movf	(_nServo+1)& (0+255),w,b
  9714  00112A  187E               	xorwf	_curr+1,w,c
  9715  00112C  A4D8               	btfss	status,2,c
  9716  00112E  D074               	goto	i2l3993
  9717                           
  9718                           ; BSR set to: 1
  9719                           ;servo.c: 86: curr = 0;
  9720  001130  0E00               	movlw	0
  9721  001132  6E7E               	movwf	_curr+1,c
  9722  001134  0E00               	movlw	0
  9723  001136  6E7D               	movwf	_curr,c
  9724                           
  9725                           ;servo.c: 87: for(int i = 0; i < nServo; i++)
  9726  001138  0E00               	movlw	0
  9727  00113A  6E17               	movwf	servoInterruptService@i+1,c
  9728  00113C  0E00               	movlw	0
  9729  00113E  6E16               	movwf	servoInterruptService@i,c
  9730  001140  D022               	goto	i2l3989
  9731  001142                     i2l3985:
  9732                           
  9733                           ; BSR set to: 1
  9734                           ;servo.c: 88: digitalWrite(port[i], pin[i], 1);
  9735  001142  90D8               	bcf	status,0,c
  9736  001144  3416               	rlcf	servoInterruptService@i,w,c
  9737  001146  6ED9               	movwf	fsr2l,c
  9738  001148  3417               	rlcf	servoInterruptService@i+1,w,c
  9739  00114A  6EDA               	movwf	fsr2h,c
  9740  00114C  0EA1               	movlw	low _port
  9741  00114E  26D9               	addwf	fsr2l,f,c
  9742  001150  0E01               	movlw	high _port
  9743  001152  22DA               	addwfc	fsr2h,f,c
  9744  001154  CFDE F001          	movff	postinc2,digitalWrite@port
  9745  001158  CFDD F002          	movff	postdec2,digitalWrite@port+1
  9746  00115C  90D8               	bcf	status,0,c
  9747  00115E  3416               	rlcf	servoInterruptService@i,w,c
  9748  001160  6ED9               	movwf	fsr2l,c
  9749  001162  3417               	rlcf	servoInterruptService@i+1,w,c
  9750  001164  6EDA               	movwf	fsr2h,c
  9751  001166  0E99               	movlw	low _pin
  9752  001168  26D9               	addwf	fsr2l,f,c
  9753  00116A  0E01               	movlw	high _pin
  9754  00116C  22DA               	addwfc	fsr2h,f,c
  9755  00116E  CFDE F003          	movff	postinc2,digitalWrite@pin
  9756  001172  CFDD F004          	movff	postdec2,digitalWrite@pin+1
  9757  001176  0E00               	movlw	0
  9758  001178  6E06               	movwf	digitalWrite@val+1,c
  9759  00117A  0E01               	movlw	1
  9760  00117C  6E05               	movwf	digitalWrite@val,c
  9761  00117E  ECAF  F010         	call	_digitalWrite	;wreg free
  9762  001182  4A16               	infsnz	servoInterruptService@i,f,c
  9763  001184  2A17               	incf	servoInterruptService@i+1,f,c
  9764  001186                     i2l3989:
  9765  001186  0101               	movlb	1	; () banked
  9766  001188  51A9               	movf	_nServo& (0+255),w,b
  9767  00118A  5C16               	subwf	servoInterruptService@i,w,c
  9768  00118C  5017               	movf	servoInterruptService@i+1,w,c
  9769  00118E  0A80               	xorlw	128
  9770  001190  6E0A               	movwf	??_servoInterruptService& (0+255),c
  9771  001192  0101               	movlb	1	; () banked
  9772  001194  51AA               	movf	(_nServo+1)& (0+255),w,b
  9773  001196  0A80               	xorlw	128
  9774  001198  580A               	subwfb	??_servoInterruptService& (0+255),w,c
  9775  00119A  A0D8               	btfss	status,0,c
  9776  00119C  D7D2               	goto	i2l3985
  9777                           
  9778                           ; BSR set to: 1
  9779                           ;servo.c: 89: startTimer(0, 0xffff - sequence[order[curr]]);
  9780                           
  9781                           ; BSR set to: 1
  9782  00119E  0E00               	movlw	0
  9783  0011A0  6E02               	movwf	i2startTimer@timer+1,c
  9784  0011A2  0E00               	movlw	0
  9785  0011A4  6E01               	movwf	i2startTimer@timer,c
  9786  0011A6  90D8               	bcf	status,0,c
  9787  0011A8  347D               	rlcf	_curr,w,c
  9788  0011AA  6ED9               	movwf	fsr2l,c
  9789  0011AC  347E               	rlcf	_curr+1,w,c
  9790  0011AE  6EDA               	movwf	fsr2h,c
  9791  0011B0  0E91               	movlw	low _order
  9792  0011B2  26D9               	addwf	fsr2l,f,c
  9793  0011B4  0E01               	movlw	high _order
  9794  0011B6  22DA               	addwfc	fsr2h,f,c
  9795  0011B8  CFDE F00A          	movff	postinc2,??_servoInterruptService
  9796  0011BC  CFDD F00B          	movff	postdec2,??_servoInterruptService+1
  9797  0011C0  90D8               	bcf	status,0,c
  9798  0011C2  360A               	rlcf	??_servoInterruptService,f,c
  9799  0011C4  360B               	rlcf	??_servoInterruptService+1,f,c
  9800  0011C6  90D8               	bcf	status,0,c
  9801  0011C8  360A               	rlcf	??_servoInterruptService,f,c
  9802  0011CA  360B               	rlcf	??_servoInterruptService+1,f,c
  9803  0011CC  0E81               	movlw	low _sequence
  9804  0011CE  240A               	addwf	??_servoInterruptService,w,c
  9805  0011D0  6ED9               	movwf	fsr2l,c
  9806  0011D2  0E01               	movlw	high _sequence
  9807  0011D4  200B               	addwfc	??_servoInterruptService+1,w,c
  9808  0011D6  6EDA               	movwf	fsr2h,c
  9809  0011D8  CFDE F00C          	movff	postinc2,??_servoInterruptService+2
  9810  0011DC  CFDE F00D          	movff	postinc2,??_servoInterruptService+3
  9811  0011E0  CFDE F00E          	movff	postinc2,??_servoInterruptService+4
  9812  0011E4  CFDE F00F          	movff	postinc2,??_servoInterruptService+5
  9813  0011E8  1E0C               	comf	??_servoInterruptService+2,f,c
  9814  0011EA  1E0D               	comf	??_servoInterruptService+3,f,c
  9815  0011EC  1E0E               	comf	??_servoInterruptService+4,f,c
  9816  0011EE  1E0F               	comf	??_servoInterruptService+5,f,c
  9817  0011F0  2A0C               	incf	??_servoInterruptService+2,f,c
  9818  0011F2  0E00               	movlw	0
  9819  0011F4  220D               	addwfc	??_servoInterruptService+3,f,c
  9820  0011F6  220E               	addwfc	??_servoInterruptService+4,f,c
  9821  0011F8  220F               	addwfc	??_servoInterruptService+5,f,c
  9822  0011FA  0EFF               	movlw	255
  9823  0011FC  240C               	addwf	??_servoInterruptService+2,w,c
  9824  0011FE  6E03               	movwf	i2startTimer@val,c
  9825  001200  0EFF               	movlw	255
  9826  001202  200D               	addwfc	??_servoInterruptService+3,w,c
  9827  001204  6E04               	movwf	i2startTimer@val+1,c
  9828  001206  0E00               	movlw	0
  9829  001208  200E               	addwfc	??_servoInterruptService+4,w,c
  9830  00120A  6E05               	movwf	i2startTimer@val+2,c
  9831  00120C  0E00               	movlw	0
  9832  00120E  200F               	addwfc	??_servoInterruptService+5,w,c
  9833  001210  6E06               	movwf	i2startTimer@val+3,c
  9834  001212  EC56  F013         	call	i2_startTimer	;wreg free
  9835                           
  9836                           ;servo.c: 90: }
  9837  001216  0012               	return	
  9838  001218                     i2l3993:
  9839                           
  9840                           ;servo.c: 91: else{
  9841                           ;servo.c: 92: curr++;
  9842  001218  4A7D               	infsnz	_curr,f,c
  9843  00121A  2A7E               	incf	_curr+1,f,c
  9844                           
  9845                           ;servo.c: 93: startTimer(0, 0xfffe - sequence[order[curr]]);
  9846  00121C  0E00               	movlw	0
  9847  00121E  6E02               	movwf	i2startTimer@timer+1,c
  9848  001220  0E00               	movlw	0
  9849  001222  6E01               	movwf	i2startTimer@timer,c
  9850  001224  90D8               	bcf	status,0,c
  9851  001226  347D               	rlcf	_curr,w,c
  9852  001228  6ED9               	movwf	fsr2l,c
  9853  00122A  347E               	rlcf	_curr+1,w,c
  9854  00122C  6EDA               	movwf	fsr2h,c
  9855  00122E  0E91               	movlw	low _order
  9856  001230  26D9               	addwf	fsr2l,f,c
  9857  001232  0E01               	movlw	high _order
  9858  001234  22DA               	addwfc	fsr2h,f,c
  9859  001236  CFDE F00A          	movff	postinc2,??_servoInterruptService
  9860  00123A  CFDD F00B          	movff	postdec2,??_servoInterruptService+1
  9861  00123E  90D8               	bcf	status,0,c
  9862  001240  360A               	rlcf	??_servoInterruptService,f,c
  9863  001242  360B               	rlcf	??_servoInterruptService+1,f,c
  9864  001244  90D8               	bcf	status,0,c
  9865  001246  360A               	rlcf	??_servoInterruptService,f,c
  9866  001248  360B               	rlcf	??_servoInterruptService+1,f,c
  9867  00124A  0E81               	movlw	low _sequence
  9868  00124C  240A               	addwf	??_servoInterruptService,w,c
  9869  00124E  6ED9               	movwf	fsr2l,c
  9870  001250  0E01               	movlw	high _sequence
  9871  001252  200B               	addwfc	??_servoInterruptService+1,w,c
  9872  001254  6EDA               	movwf	fsr2h,c
  9873  001256  CFDE F00C          	movff	postinc2,??_servoInterruptService+2
  9874  00125A  CFDE F00D          	movff	postinc2,??_servoInterruptService+3
  9875  00125E  CFDE F00E          	movff	postinc2,??_servoInterruptService+4
  9876  001262  CFDE F00F          	movff	postinc2,??_servoInterruptService+5
  9877  001266  1E0C               	comf	??_servoInterruptService+2,f,c
  9878  001268  1E0D               	comf	??_servoInterruptService+3,f,c
  9879  00126A  1E0E               	comf	??_servoInterruptService+4,f,c
  9880  00126C  1E0F               	comf	??_servoInterruptService+5,f,c
  9881  00126E  2A0C               	incf	??_servoInterruptService+2,f,c
  9882  001270  0E00               	movlw	0
  9883  001272  220D               	addwfc	??_servoInterruptService+3,f,c
  9884  001274  220E               	addwfc	??_servoInterruptService+4,f,c
  9885  001276  220F               	addwfc	??_servoInterruptService+5,f,c
  9886  001278  0EFE               	movlw	254
  9887  00127A  240C               	addwf	??_servoInterruptService+2,w,c
  9888  00127C  6E03               	movwf	i2startTimer@val,c
  9889  00127E  0EFF               	movlw	255
  9890  001280  200D               	addwfc	??_servoInterruptService+3,w,c
  9891  001282  6E04               	movwf	i2startTimer@val+1,c
  9892  001284  0E00               	movlw	0
  9893  001286  200E               	addwfc	??_servoInterruptService+4,w,c
  9894  001288  6E05               	movwf	i2startTimer@val+2,c
  9895  00128A  0E00               	movlw	0
  9896  00128C  200F               	addwfc	??_servoInterruptService+5,w,c
  9897  00128E  6E06               	movwf	i2startTimer@val+3,c
  9898  001290  EC56  F013         	call	i2_startTimer	;wreg free
  9899                           
  9900                           ;servo.c: 94: digitalWrite(port[order[curr-1]],pin[order[curr-1]],0);
  9901  001294  0EFE               	movlw	254
  9902  001296  6E0A               	movwf	??_servoInterruptService& (0+255),c
  9903  001298  0EFF               	movlw	255
  9904  00129A  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  9905  00129C  C07D  F00C         	movff	_curr,??_servoInterruptService+2
  9906  0012A0  C07E  F00D         	movff	_curr+1,??_servoInterruptService+3
  9907  0012A4  90D8               	bcf	status,0,c
  9908  0012A6  360C               	rlcf	??_servoInterruptService+2,f,c
  9909  0012A8  360D               	rlcf	??_servoInterruptService+3,f,c
  9910  0012AA  500A               	movf	??_servoInterruptService,w,c
  9911  0012AC  260C               	addwf	??_servoInterruptService+2,f,c
  9912  0012AE  500B               	movf	??_servoInterruptService+1,w,c
  9913  0012B0  220D               	addwfc	??_servoInterruptService+3,f,c
  9914  0012B2  0E91               	movlw	low _order
  9915  0012B4  240C               	addwf	??_servoInterruptService+2,w,c
  9916  0012B6  6ED9               	movwf	fsr2l,c
  9917  0012B8  0E01               	movlw	high _order
  9918  0012BA  200D               	addwfc	??_servoInterruptService+3,w,c
  9919  0012BC  6EDA               	movwf	fsr2h,c
  9920  0012BE  CFDE F00E          	movff	postinc2,??_servoInterruptService+4
  9921  0012C2  CFDD F00F          	movff	postdec2,??_servoInterruptService+5
  9922  0012C6  90D8               	bcf	status,0,c
  9923  0012C8  360E               	rlcf	??_servoInterruptService+4,f,c
  9924  0012CA  360F               	rlcf	??_servoInterruptService+5,f,c
  9925  0012CC  0EA1               	movlw	low _port
  9926  0012CE  240E               	addwf	??_servoInterruptService+4,w,c
  9927  0012D0  6ED9               	movwf	fsr2l,c
  9928  0012D2  0E01               	movlw	high _port
  9929  0012D4  200F               	addwfc	??_servoInterruptService+5,w,c
  9930  0012D6  6EDA               	movwf	fsr2h,c
  9931  0012D8  CFDE F001          	movff	postinc2,digitalWrite@port
  9932  0012DC  CFDD F002          	movff	postdec2,digitalWrite@port+1
  9933  0012E0  0EFE               	movlw	254
  9934  0012E2  6E10               	movwf	(??_servoInterruptService+6)& (0+255),c
  9935  0012E4  0EFF               	movlw	255
  9936  0012E6  6E11               	movwf	(??_servoInterruptService+7)& (0+255),c
  9937  0012E8  C07D  F012         	movff	_curr,??_servoInterruptService+8
  9938  0012EC  C07E  F013         	movff	_curr+1,??_servoInterruptService+9
  9939  0012F0  90D8               	bcf	status,0,c
  9940  0012F2  3612               	rlcf	??_servoInterruptService+8,f,c
  9941  0012F4  3613               	rlcf	??_servoInterruptService+9,f,c
  9942  0012F6  5010               	movf	??_servoInterruptService+6,w,c
  9943  0012F8  2612               	addwf	??_servoInterruptService+8,f,c
  9944  0012FA  5011               	movf	??_servoInterruptService+7,w,c
  9945  0012FC  2213               	addwfc	??_servoInterruptService+9,f,c
  9946  0012FE  0E91               	movlw	low _order
  9947  001300  2412               	addwf	??_servoInterruptService+8,w,c
  9948  001302  6ED9               	movwf	fsr2l,c
  9949  001304  0E01               	movlw	high _order
  9950  001306  2013               	addwfc	??_servoInterruptService+9,w,c
  9951  001308  6EDA               	movwf	fsr2h,c
  9952  00130A  CFDE F014          	movff	postinc2,??_servoInterruptService+10
  9953  00130E  CFDD F015          	movff	postdec2,??_servoInterruptService+11
  9954  001312  90D8               	bcf	status,0,c
  9955  001314  3614               	rlcf	??_servoInterruptService+10,f,c
  9956  001316  3615               	rlcf	??_servoInterruptService+11,f,c
  9957  001318  0E99               	movlw	low _pin
  9958  00131A  2414               	addwf	??_servoInterruptService+10,w,c
  9959  00131C  6ED9               	movwf	fsr2l,c
  9960  00131E  0E01               	movlw	high _pin
  9961  001320  2015               	addwfc	??_servoInterruptService+11,w,c
  9962  001322  6EDA               	movwf	fsr2h,c
  9963  001324  CFDE F003          	movff	postinc2,digitalWrite@pin
  9964  001328  CFDD F004          	movff	postdec2,digitalWrite@pin+1
  9965  00132C  0E00               	movlw	0
  9966  00132E  6E06               	movwf	digitalWrite@val+1,c
  9967  001330  0E00               	movlw	0
  9968  001332  6E05               	movwf	digitalWrite@val,c
  9969  001334  ECAF  F010         	call	_digitalWrite	;wreg free
  9970  001338  0012               	return	
  9971  00133A                     __end_of_servoInterruptService:
  9972                           	opt stack 0
  9973                           pclatu	equ	0xFFB
  9974                           pclath	equ	0xFFA
  9975                           tblptru	equ	0xFF8
  9976                           tblptrh	equ	0xFF7
  9977                           tblptrl	equ	0xFF6
  9978                           tablat	equ	0xFF5
  9979                           prodh	equ	0xFF4
  9980                           prodl	equ	0xFF3
  9981                           intcon	equ	0xFF2
  9982                           intcon3	equ	0xFF0
  9983                           postinc0	equ	0xFEE
  9984                           fsr0h	equ	0xFEA
  9985                           fsr0l	equ	0xFE9
  9986                           wreg	equ	0xFE8
  9987                           postdec1	equ	0xFE5
  9988                           fsr1h	equ	0xFE2
  9989                           fsr1l	equ	0xFE1
  9990                           indf2	equ	0xFDF
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           fsr2h	equ	0xFDA
  9994                           fsr2l	equ	0xFD9
  9995                           status	equ	0xFD8
  9996                           
  9997 ;; *************** function i2_startTimer *****************
  9998 ;; Defined at:
  9999 ;;		line 75 in file "timer.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;  timer           2    0[COMRAM] int 
 10002 ;;  val             4    2[COMRAM] long 
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;		None
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  1    wreg      void 
 10007 ;; Registers used:
 10008 ;;		wreg, status,2, status,0
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10014 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10017 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;Total ram usage:        8 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; This function calls:
 10021 ;;		Nothing
 10022 ;; This function is called by:
 10023 ;;		_servoInterruptService
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           	psect	text42
 10028  0026AC                     __ptext42:
 10029                           	opt stack 0
 10030  0026AC                     i2_startTimer:
 10031                           	opt stack 21
 10032                           
 10033                           ;timer.c: 76: switch(timer){
 10034                           
 10035                           ;incstack = 0
 10036  0026AC  D012               	goto	i2l3819
 10037  0026AE                     i2l344:
 10038                           
 10039                           ;timer.c: 78: TMR0H = val>>8;
 10040  0026AE  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 10041                           
 10042                           ;timer.c: 79: TMR0L = val;
 10043  0026B2  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
 10044                           
 10045                           ;timer.c: 80: T0CON |= 1<<7;
 10046  0026B6  8ED5               	bsf	4053,7,c	;volatile
 10047                           
 10048                           ;timer.c: 81: break;
 10049  0026B8  0012               	return	
 10050  0026BA                     i2l346:
 10051                           
 10052                           ;timer.c: 83: TMR1H = val>>8;
 10053  0026BA  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 10054                           
 10055                           ;timer.c: 84: TMR1L = val;
 10056  0026BE  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
 10057                           
 10058                           ;timer.c: 85: T1CON |= 1<<0;
 10059  0026C2  80CD               	bsf	4045,0,c	;volatile
 10060                           
 10061                           ;timer.c: 86: break;
 10062  0026C4  0012               	return	
 10063  0026C6                     i2l347:
 10064                           
 10065                           ;timer.c: 88: TMR3H = val>>8;
 10066  0026C6  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 10067                           
 10068                           ;timer.c: 89: TMR3L = val;
 10069  0026CA  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
 10070                           
 10071                           ;timer.c: 90: T3CON |= 1<<0;
 10072  0026CE  80B1               	bsf	4017,0,c	;volatile
 10073                           
 10074                           ;timer.c: 91: }
 10075  0026D0  0012               	return	
 10076  0026D2                     i2l3819:
 10077  0026D2  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
 10078  0026D6  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
 10079                           
 10080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10081                           ; Switch size 1, requested type "space"
 10082                           ; Number of cases is 1, Range of values is 0 to 0
 10083                           ; switch strategies available:
 10084                           ; Name         Instructions Cycles
 10085                           ; simple_byte            4     3 (average)
 10086                           ;	Chosen strategy is simple_byte
 10087  0026DA  5008               	movf	??i2_startTimer+1,w,c
 10088  0026DC  0A00               	xorlw	0	; case 0
 10089  0026DE  A4D8               	btfss	status,2,c
 10090  0026E0  0012               	return	
 10091                           
 10092                           ; Switch size 1, requested type "space"
 10093                           ; Number of cases is 3, Range of values is 0 to 3
 10094                           ; switch strategies available:
 10095                           ; Name         Instructions Cycles
 10096                           ; simple_byte           10     6 (average)
 10097                           ;	Chosen strategy is simple_byte
 10098  0026E2  5007               	movf	??i2_startTimer,w,c
 10099  0026E4  0A00               	xorlw	0	; case 0
 10100  0026E6  B4D8               	btfsc	status,2,c
 10101  0026E8  D7E2               	goto	i2l344
 10102  0026EA  0A01               	xorlw	1	; case 1
 10103  0026EC  B4D8               	btfsc	status,2,c
 10104  0026EE  D7E5               	goto	i2l346
 10105  0026F0  0A02               	xorlw	2	; case 3
 10106  0026F2  A4D8               	btfss	status,2,c
 10107  0026F4  0012               	return	
 10108  0026F6  D7E7               	goto	i2l347
 10109  0026F8                     __end_ofi2_startTimer:
 10110                           	opt stack 0
 10111                           pclatu	equ	0xFFB
 10112                           pclath	equ	0xFFA
 10113                           tblptru	equ	0xFF8
 10114                           tblptrh	equ	0xFF7
 10115                           tblptrl	equ	0xFF6
 10116                           tablat	equ	0xFF5
 10117                           prodh	equ	0xFF4
 10118                           prodl	equ	0xFF3
 10119                           intcon	equ	0xFF2
 10120                           intcon3	equ	0xFF0
 10121                           postinc0	equ	0xFEE
 10122                           fsr0h	equ	0xFEA
 10123                           fsr0l	equ	0xFE9
 10124                           wreg	equ	0xFE8
 10125                           postdec1	equ	0xFE5
 10126                           fsr1h	equ	0xFE2
 10127                           fsr1l	equ	0xFE1
 10128                           indf2	equ	0xFDF
 10129                           postinc2	equ	0xFDE
 10130                           postdec2	equ	0xFDD
 10131                           fsr2h	equ	0xFDA
 10132                           fsr2l	equ	0xFD9
 10133                           status	equ	0xFD8
 10134                           
 10135 ;; *************** function _digitalWrite *****************
 10136 ;; Defined at:
 10137 ;;		line 53 in file "iopin.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;  port            2    0[COMRAM] int 
 10140 ;;  pin             2    2[COMRAM] int 
 10141 ;;  val             2    4[COMRAM] int 
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;		None
 10144 ;; Return value:  Size  Location     Type
 10145 ;;                  1    wreg      void 
 10146 ;; Registers used:
 10147 ;;		wreg, status,2, status,0
 10148 ;; Tracked objects:
 10149 ;;		On entry : 0/0
 10150 ;;		On exit  : 0/0
 10151 ;;		Unchanged: 0/0
 10152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10153 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;Total ram usage:        9 bytes
 10158 ;; Hardware stack levels used:    1
 10159 ;; This function calls:
 10160 ;;		Nothing
 10161 ;; This function is called by:
 10162 ;;		_servoInterruptService
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           	psect	text43
 10167  00215E                     __ptext43:
 10168                           	opt stack 0
 10169  00215E                     _digitalWrite:
 10170                           	opt stack 21
 10171                           
 10172                           ;iopin.c: 54: pin = 1 << pin;
 10173                           
 10174                           ;incstack = 0
 10175  00215E  C003  F007         	movff	digitalWrite@pin,??_digitalWrite
 10176  002162  0E01               	movlw	1
 10177  002164  6E08               	movwf	(??_digitalWrite+1)& (0+255),c
 10178  002166  0E00               	movlw	0
 10179  002168  6E09               	movwf	(??_digitalWrite+2)& (0+255),c
 10180  00216A  2A07               	incf	??_digitalWrite,f,c
 10181  00216C  D003               	goto	i2u353_44
 10182  00216E                     i2u353_45:
 10183  00216E  90D8               	bcf	status,0,c
 10184  002170  3608               	rlcf	??_digitalWrite+1,f,c
 10185  002172  3609               	rlcf	??_digitalWrite+2,f,c
 10186  002174                     i2u353_44:
 10187  002174  2E07               	decfsz	??_digitalWrite,f,c
 10188  002176  D7FB               	goto	i2u353_45
 10189  002178  C008  F003         	movff	??_digitalWrite+1,digitalWrite@pin
 10190  00217C  C009  F004         	movff	??_digitalWrite+2,digitalWrite@pin+1
 10191                           
 10192                           ;iopin.c: 55: if(val == 0){
 10193  002180  5005               	movf	digitalWrite@val,w,c
 10194  002182  1006               	iorwf	digitalWrite@val+1,w,c
 10195  002184  A4D8               	btfss	status,2,c
 10196  002186  D02B               	goto	i2l3763
 10197                           
 10198                           ;iopin.c: 56: pin ^= 0xff;
 10199  002188  0EFF               	movlw	255
 10200  00218A  1A03               	xorwf	digitalWrite@pin,f,c
 10201                           
 10202                           ;iopin.c: 57: }
 10203                           ;iopin.c: 59: switch(port){
 10204  00218C  D028               	goto	i2l3763
 10205  00218E                     i2l3739:
 10206  00218E  0405               	decf	digitalWrite@val,w,c
 10207  002190  1006               	iorwf	digitalWrite@val+1,w,c
 10208  002192  A4D8               	btfss	status,2,c
 10209  002194  D003               	goto	i2l3743
 10210  002196  5003               	movf	digitalWrite@pin,w,c
 10211  002198  1289               	iorwf	3977,f,c	;volatile
 10212  00219A  0012               	return	
 10213  00219C                     i2l3743:
 10214                           
 10215                           ;iopin.c: 61: else LATA &= pin;
 10216  00219C  5003               	movf	digitalWrite@pin,w,c
 10217  00219E  1689               	andwf	3977,f,c	;volatile
 10218                           
 10219                           ;iopin.c: 62: break;
 10220  0021A0  0012               	return	
 10221  0021A2                     i2l3745:
 10222  0021A2  0405               	decf	digitalWrite@val,w,c
 10223  0021A4  1006               	iorwf	digitalWrite@val+1,w,c
 10224  0021A6  A4D8               	btfss	status,2,c
 10225  0021A8  D003               	goto	i2l3749
 10226  0021AA  5003               	movf	digitalWrite@pin,w,c
 10227  0021AC  128A               	iorwf	3978,f,c	;volatile
 10228  0021AE  0012               	return	
 10229  0021B0                     i2l3749:
 10230                           
 10231                           ;iopin.c: 64: else LATB &= pin;
 10232  0021B0  5003               	movf	digitalWrite@pin,w,c
 10233  0021B2  168A               	andwf	3978,f,c	;volatile
 10234                           
 10235                           ;iopin.c: 65: break;
 10236  0021B4  0012               	return	
 10237  0021B6                     i2l3751:
 10238  0021B6  0405               	decf	digitalWrite@val,w,c
 10239  0021B8  1006               	iorwf	digitalWrite@val+1,w,c
 10240  0021BA  A4D8               	btfss	status,2,c
 10241  0021BC  D003               	goto	i2l3755
 10242  0021BE  5003               	movf	digitalWrite@pin,w,c
 10243  0021C0  128B               	iorwf	3979,f,c	;volatile
 10244  0021C2  0012               	return	
 10245  0021C4                     i2l3755:
 10246                           
 10247                           ;iopin.c: 67: else LATC &= pin;
 10248  0021C4  5003               	movf	digitalWrite@pin,w,c
 10249  0021C6  168B               	andwf	3979,f,c	;volatile
 10250                           
 10251                           ;iopin.c: 68: break;
 10252  0021C8  0012               	return	
 10253  0021CA                     i2l3757:
 10254  0021CA  0405               	decf	digitalWrite@val,w,c
 10255  0021CC  1006               	iorwf	digitalWrite@val+1,w,c
 10256  0021CE  A4D8               	btfss	status,2,c
 10257  0021D0  D003               	goto	i2l3761
 10258  0021D2  5003               	movf	digitalWrite@pin,w,c
 10259  0021D4  128C               	iorwf	3980,f,c	;volatile
 10260  0021D6  0012               	return	
 10261  0021D8                     i2l3761:
 10262                           
 10263                           ;iopin.c: 70: else LATD &= pin;
 10264  0021D8  5003               	movf	digitalWrite@pin,w,c
 10265  0021DA  168C               	andwf	3980,f,c	;volatile
 10266                           
 10267                           ;iopin.c: 71: }
 10268  0021DC  0012               	return	
 10269  0021DE                     i2l3763:
 10270  0021DE  C001  F007         	movff	digitalWrite@port,??_digitalWrite
 10271  0021E2  C002  F008         	movff	digitalWrite@port+1,??_digitalWrite+1
 10272                           
 10273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10274                           ; Switch size 1, requested type "space"
 10275                           ; Number of cases is 1, Range of values is 0 to 0
 10276                           ; switch strategies available:
 10277                           ; Name         Instructions Cycles
 10278                           ; simple_byte            4     3 (average)
 10279                           ;	Chosen strategy is simple_byte
 10280  0021E6  5008               	movf	??_digitalWrite+1,w,c
 10281  0021E8  0A00               	xorlw	0	; case 0
 10282  0021EA  A4D8               	btfss	status,2,c
 10283  0021EC  0012               	return	
 10284                           
 10285                           ; Switch size 1, requested type "space"
 10286                           ; Number of cases is 4, Range of values is 0 to 3
 10287                           ; switch strategies available:
 10288                           ; Name         Instructions Cycles
 10289                           ; simple_byte           13     7 (average)
 10290                           ;	Chosen strategy is simple_byte
 10291  0021EE  5007               	movf	??_digitalWrite,w,c
 10292  0021F0  0A00               	xorlw	0	; case 0
 10293  0021F2  B4D8               	btfsc	status,2,c
 10294  0021F4  D7CC               	goto	i2l3739
 10295  0021F6  0A01               	xorlw	1	; case 1
 10296  0021F8  B4D8               	btfsc	status,2,c
 10297  0021FA  D7D3               	goto	i2l3745
 10298  0021FC  0A03               	xorlw	3	; case 2
 10299  0021FE  B4D8               	btfsc	status,2,c
 10300  002200  D7DA               	goto	i2l3751
 10301  002202  0A01               	xorlw	1	; case 3
 10302  002204  A4D8               	btfss	status,2,c
 10303  002206  0012               	return	
 10304  002208  D7E0               	goto	i2l3757
 10305  00220A                     __end_of_digitalWrite:
 10306                           	opt stack 0
 10307                           pclatu	equ	0xFFB
 10308                           pclath	equ	0xFFA
 10309                           tblptru	equ	0xFF8
 10310                           tblptrh	equ	0xFF7
 10311                           tblptrl	equ	0xFF6
 10312                           tablat	equ	0xFF5
 10313                           prodh	equ	0xFF4
 10314                           prodl	equ	0xFF3
 10315                           intcon	equ	0xFF2
 10316                           intcon3	equ	0xFF0
 10317                           postinc0	equ	0xFEE
 10318                           fsr0h	equ	0xFEA
 10319                           fsr0l	equ	0xFE9
 10320                           wreg	equ	0xFE8
 10321                           postdec1	equ	0xFE5
 10322                           fsr1h	equ	0xFE2
 10323                           fsr1l	equ	0xFE1
 10324                           indf2	equ	0xFDF
 10325                           postinc2	equ	0xFDE
 10326                           postdec2	equ	0xFDD
 10327                           fsr2h	equ	0xFDA
 10328                           fsr2l	equ	0xFD9
 10329                           status	equ	0xFD8
 10330                           pclatu	equ	0xFFB
 10331                           pclath	equ	0xFFA
 10332                           tblptru	equ	0xFF8
 10333                           tblptrh	equ	0xFF7
 10334                           tblptrl	equ	0xFF6
 10335                           tablat	equ	0xFF5
 10336                           prodh	equ	0xFF4
 10337                           prodl	equ	0xFF3
 10338                           intcon	equ	0xFF2
 10339                           intcon3	equ	0xFF0
 10340                           postinc0	equ	0xFEE
 10341                           fsr0h	equ	0xFEA
 10342                           fsr0l	equ	0xFE9
 10343                           wreg	equ	0xFE8
 10344                           postdec1	equ	0xFE5
 10345                           fsr1h	equ	0xFE2
 10346                           fsr1l	equ	0xFE1
 10347                           indf2	equ	0xFDF
 10348                           postinc2	equ	0xFDE
 10349                           postdec2	equ	0xFDD
 10350                           fsr2h	equ	0xFDA
 10351                           fsr2l	equ	0xFD9
 10352                           status	equ	0xFD8
 10353                           
 10354                           	psect	rparam
 10355  0000                     pclatu	equ	0xFFB
 10356                           pclath	equ	0xFFA
 10357                           tblptru	equ	0xFF8
 10358                           tblptrh	equ	0xFF7
 10359                           tblptrl	equ	0xFF6
 10360                           tablat	equ	0xFF5
 10361                           prodh	equ	0xFF4
 10362                           prodl	equ	0xFF3
 10363                           intcon	equ	0xFF2
 10364                           intcon3	equ	0xFF0
 10365                           postinc0	equ	0xFEE
 10366                           fsr0h	equ	0xFEA
 10367                           fsr0l	equ	0xFE9
 10368                           wreg	equ	0xFE8
 10369                           postdec1	equ	0xFE5
 10370                           fsr1h	equ	0xFE2
 10371                           fsr1l	equ	0xFE1
 10372                           indf2	equ	0xFDF
 10373                           postinc2	equ	0xFDE
 10374                           postdec2	equ	0xFDD
 10375                           fsr2h	equ	0xFDA
 10376                           fsr2l	equ	0xFD9
 10377                           status	equ	0xFD8
 10378                           
 10379                           	psect	temp
 10380  00007F                     btemp:
 10381                           	opt stack 0
 10382  00007F                     	ds	1
 10383  0000                     int$flags	set	btemp
 10384                           pclatu	equ	0xFFB
 10385                           pclath	equ	0xFFA
 10386                           tblptru	equ	0xFF8
 10387                           tblptrh	equ	0xFF7
 10388                           tblptrl	equ	0xFF6
 10389                           tablat	equ	0xFF5
 10390                           prodh	equ	0xFF4
 10391                           prodl	equ	0xFF3
 10392                           intcon	equ	0xFF2
 10393                           intcon3	equ	0xFF0
 10394                           postinc0	equ	0xFEE
 10395                           fsr0h	equ	0xFEA
 10396                           fsr0l	equ	0xFE9
 10397                           wreg	equ	0xFE8
 10398                           postdec1	equ	0xFE5
 10399                           fsr1h	equ	0xFE2
 10400                           fsr1l	equ	0xFE1
 10401                           indf2	equ	0xFDF
 10402                           postinc2	equ	0xFDE
 10403                           postdec2	equ	0xFDD
 10404                           fsr2h	equ	0xFDA
 10405                           fsr2l	equ	0xFD9
 10406                           status	equ	0xFD8


Data Sizes:
    Strings     278
    Constant    96
    Data        8
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    124     126
    BANK0           128     80      90
    BANK1           256    113     171
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[17]), STR_15(CODE[18]), STR_14(CODE[17]), STR_13(CODE[18]), 
		 -> STR_12(CODE[17]), STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[18]), 
		 -> STR_8(CODE[17]), STR_7(CODE[18]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[17]), STR_2(CODE[9]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 7
		 -> getTime@time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_setAngle
    i2_setAngle->i2_angleToPulse
    i2_printf->i2___llmod
    i2_lcdNewline->i2_lcdInst
    i2___llmod->i2___lldiv
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_angleToPulse->i2___fttol
    i2___fttol->i2___ftadd
    i2___ftmul->i2___ftdiv
    i2___ftdiv->i2___awtoft
    i2___ftadd->i2___ftmul
    i2___awtoft->i2___ftpack
    i2___altoft->i2___ftpack
    _servoInterruptService->_digitalWrite

Critical Paths under _main in BANK0

    _setAngle->_printf
    _printf->___llmod
    _lcdNewline->_lcdInst
    ___llmod->___lldiv
    _lcdClear->_lcdInst
    _angleToPulse->___ftmul
    ___fttol->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    _service->i2_setAngle

Critical Paths under _main in BANK1

    _main->_initServo
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20148
                            _initLCD
                          _initServo
                           _pinSetup
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     2      6   20013
                                            105 BANK1      8     2      6
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           8     2      6     562
                                             38 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            58    54      4   18643
                                             47 BANK1     58    54      4
                       _angleToPulse
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              40    22     18    2923
                                             60 BANK0     20     2     18
                                              0 BANK1     11    11      0
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     292
                                             42 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     287
                                             51 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                             38 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        20    16      4   14419
                                             27 BANK1     20    16      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     316
                                             12 BANK1     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2665
                                             65 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2747
                                             50 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3716
                                              0 BANK1     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2264
                                             46 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2439
                                             46 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                             38 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            4     2      2     150
                                             38 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             42 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (6) _lcdInst                                              2     2      0     135
                                             40 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                             38 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    8948
                                            109 COMRAM    15    15      0
              _servoInterruptService
                         i2_setAngle
 ---------------------------------------------------------------------------------
 (9) i2_setAngle                                          58    54      4    7839
                                             89 COMRAM    20    16      4
                                              0 BANK0     38    38      0
                     i2_angleToPulse
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           40    22     18    1595
                                             22 COMRAM    31    13     18
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2___llmod                                           9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lldiv                                          13     5      8     266
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2_lcdClear                                          0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (13) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_angleToPulse                                     20    16      4    5453
                                             69 COMRAM    20    16      4
                         i2___altoft
                         i2___awtoft
                          i2___ftadd
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     278
                                             54 COMRAM    15    11      4
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     999
                                             27 COMRAM    15     9      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6     953
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1513
                                             42 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___awtoft                                          4     1      3     738
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___altoft                                         10     6      4     811
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               14    14      0    1042
                                              9 COMRAM    14    14      0
                       _digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) _digitalWrite                                        9     3      6     716
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _startTimer
   _pinSetup

 _service (ROOT)
   _servoInterruptService
     _digitalWrite
     i2_startTimer
   i2_setAngle
     i2_angleToPulse
       i2___altoft
         i2___ftpack
       i2___awtoft
         i2___ftpack
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___ftdiv
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___fttol
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             i2___altoft (ARG)
               i2___ftpack
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     71      AB       7       66.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     50      5A       5       70.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7C      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     183      34        0.0%
DATA                 0      0     183       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 12 14:42:32 2017

                  ___altoft@exp 00B6                   ___altoft@sign 00B7                              _a0 00D8  
                            _a1 00D4                              _a2 00D6                      i2___altoft 24CA  
                   __CFG_BORV$3 000000                      i2___awtoft 284E                      i2___ftpack 20B0  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000                    ___ftadd@exp1 010B  
                  ___ftadd@exp2 010A                    ___ftadd@sign 0109                             l101 26AA  
                           l138 28C4                             l344 2610                             l337 273C  
                           l346 261C                             l347 2628                             l551 08F4  
                           l555 0962                             l806 1C16                             l833 0F52  
                           l835 0F7A                             l931 209E                             l844 1050  
                           l853 107A                             l829 0F18                             l941 2330  
                           l864 18B0                    __CFG_CPB$OFF 000000                             _PEN 007E2A  
                  __CFG_CPD$OFF 000000                             _SEN 007E28                             _pin 0199  
                           wreg 000FE8                      i2_lcdClear 293C                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 00BB                    ___ftdiv@sign 00C0                    __CFG_WDT$OFF 000000  
                          l3201 19FC                            l3115 155A                            l3133 15C6  
                          l3109 1520                            l3205 1A18                            l3063 17D4  
                          l3143 1604                            l3215 2022                            l3303 08AC  
                          l3129 15A8                            l3217 2032                            l3139 15E6  
                          l3227 208C                            l3219 2038                            l3243 231E  
                          l3235 22C4                            l3315 091C                            l3307 08B6  
                          l3069 180E                            l3237 22D4                            l3333 09AE  
                          l3159 27EC                            l3191 19C6                            l3239 22DA  
                          l3335 09B4                            l3089 186E                            l3169 1920  
                          l3329 0984                            l3187 19B2                            l3371 0A7C  
                          l3347 09FA                            l3363 0A46                            l3197 19E2  
                          l3373 0B00                            l3381 0B88                            l3349 0A00  
                          l3365 0A58                            l3293 0880                            l4421 00C8  
                          l4413 006E                            l4343 0F60                            l3199 19F2  
                          l3383 0B90                            l3295 0888                            l4337 0F26  
                          l3369 0A6C                            l3297 088E                            l3289 086C  
                          l3385 0BA6                            l4433 01A2                            l4425 00EC  
                          l4417 0092                            l3801 2634                            l2931 1BAA  
                          l2923 1B58                            l4371 1008                            l3379 0B76  
                          l3299 0894                            l4435 01A8                            l4365 0FE0  
                          l4349 0F70                            l4453 0374                            l4445 0210  
                          l2951 1C3C                            l2935 1BCA                            l2927 1B6C  
                          l4367 0FEE                            l4359 0FB2                            l2945 1C20  
                          l2937 1BFA                            l2929 1B7A                            l4385 10A4  
                          l4377 1036                            l4369 0FFC                            l4449 0246  
                          l3771 26FA                            l2939 1C08                            l4395 10F2  
                          l4379 1044                            l3781 270C                            l2981 2246  
                          l3777 2704                            l3787 2714                            l2979 2236  
                          _EEIF 007D0C                            STR_1 FFF7                            STR_2 FFEE  
                          STR_3 FFCD                            STR_4 FFDE                            STR_5 FF0E  
                          STR_6 FFBC                            STR_7 FEFC                            STR_8 FF89  
                          STR_9 FF20                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                          u4111 0EC6                            u2511 17EA                            u4121 0EE4  
                          u2611 18FC                            u2541 14FC                            u2630 1946  
                          u2561 1536                            u2491 17B0                            u2635 193C  
                          u4407 2780                            u4417 288E                            u4427 28A4  
                          _PEIE 007F96                            u4437 2472                            u4447 2480  
                          u4457 24B0                            u4467 24BE                            u4387 28C8  
                          _RCEN 007E2B                            u4397 274A                            _RSEN 007E29  
                          _main 265E                            _curr 007D                    ___ftpack@arg 00A6  
                  i2___altoft@c 0009                            _keys FED1                    ___ftpack@exp 00A9  
                          _port 01A1                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 007F  
                  i2___ftadd@f1 002B                    i2___ftadd@f2 002E                            prodh 000FF4  
                          prodl 000FF3                            start 000E                      i2_setAngle 0476  
                 __CFG_IESO$OFF 000000                    i2___ftdiv@f1 000D                    i2___ftdiv@f2 0010  
                  i2___ftdiv@f3 0017                 __end_ofi2_putch 28FA                    i2___awtoft@c 0009  
                 __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00CE                    i2___ftmul@f1 001C  
                  i2___ftmul@f2 001F                    ___param_bank 000000                    ___ftmul@sign 00CF  
                  i2___fttol@f1 0037                     i2_lcdNibble 25A8                    ___fttol@exp1 011A  
                  ___fttol@lval 0116            __end_ofi2_startTimer 26F8            __end_of_angleToPulse 179A  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
                         _EEADR 000FA9                 __end_of___ftadd 1118                           STR_10 FF78  
                         STR_11 FEE9                           STR_12 FF9A                           STR_13 FF32  
                         STR_14 FF67                           STR_15 FF44                           STR_16 FFAB  
                         STR_17 FF56                 __end_of___ftdiv 18E6         ??_servoInterruptService 000A  
               __end_of___lldiv 20B0                 __end_of___ftmul 1644                           _T0CON 000FD5  
                         _T1CON 000FCD                 __end_of___llmod 2342                 __end_of___fttol 1A2A  
                         _T3CON 000FB1                           i2l117 1FB8                           i2l138 28E8  
                         i2l344 26AE                           i2l346 26BA                           i2l347 26C6  
                         i2l551 0C42                           i2l555 0CA2                           i2l806 213E  
                         i2l833 13A8                           i2l931 2440                           i2l844 1458  
                         i2l853 1474                           i2l829 137E                           i2l941 2596  
                         i2l864 1EE6                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdInst 28B0                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
        servoInterruptService@i 0016                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000           __size_ofi2_lcdNewline 0008                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 278C  
                __CFG_EBTRB$OFF 000000                   ___awtoft@sign 00B1                           _angle 00D0  
               __end_of_dpowers FEB1                           _order 0191                   ___ftpack@sign 00AA  
                         _pulse 0171                           _putch 28B0                           pclath 000FFA  
                         tablat 000FF5                 __end_of_service 1FF4                           status 000FD8  
                 i2___ftdiv@exp 001A              __size_ofi2___ftadd 01AC                  __CFG_PBADEN$ON 000000  
            __size_ofi2___ftdiv 00E6              __size_ofi2___lldiv 0082              __size_ofi2___ftmul 00F4  
            __size_ofi2___llmod 0066              __size_ofi2___fttol 00F4                __end_ofi2_printf 0EB0  
          __end_of_digitalWrite 220A                 __initialization 278C               i2___lldiv@divisor 0005  
            __size_ofi2_lcdInst 0022                    __end_of_main 26AC               i2___lldiv@counter 000D  
                  __end_of_keys FEE2                   i2___ftmul@exp 0025                      i2printf@ap 002E  
                   ?i2___altoft 0009                     ?i2___awtoft 0009                     ?i2___ftpack 0001  
                  i2_lcdNewline 2934                          ??_main 00D0                   ___fttol@sign1 0115  
                 __activetblptr 000002                     ?i2_lcdClear 0001                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                __end_of___altoft 22A8  
              ___llmod@dividend 00B3                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          _EECON1 000FA6  
                        _EECON2 000FA7                 i2lcdNibble@data 0002                __end_of___awtoft 2814  
                        ?_putch 0001                __end_of___ftpack 1C4A                 i2lcdNibble@temp 0001  
                        _INT1IF 007F80                          i2l4011 0514                          i2l4003 04BE  
                        i2l4023 05DA                          i2l4015 0538                          i2l4007 04E2  
                        i2l4025 05E0                          i2l4043 0770                          i2l4035 0644  
                        i2l3261 20F6                          i2l3253 20C0                          i2l3413 24EC  
                        u301_41 134A                          i2l3415 24F8                          i2l4039 0676  
                        i2l3265 210C                          i2l3257 20CE                          i2l3441 138C  
                        i2l3267 212A                          i2l3259 20D8                          i2l3515 1E82  
                        i2l3603 1C76                          i2l4171 1F80                          i2l3269 2134  
                        i2l3429 2862                          u302_41 135E                          i2l3509 1E5A  
                        i2l3621 1CDC                          i2l3471 1412                          i2l3463 13E6  
                        i2l3447 13B6                          i2l3535 1EC0                          i2l3631 1D04  
                        i2l4175 1F9C                          i2l3481 1446                          i2l3473 141C  
                        i2l3561 1D8E                          i2l3633 1D10                          i2l3625 1CEC  
                        i2l3483 1450                          i2l3475 1424                          i2l3555 1D66  
                        i2l3635 1D16                          i2l3651 23FE                          i2l3469 1408  
                        i2l3661 2432                          i2l3653 2402                          i2l3751 21B6  
                        i2l3743 219C                          i2l3575 1DC0                          i2l3639 1D2C  
                        i2l3671 2560                          i2l3911 0D60                          i2l3761 21D8  
                        i2l3745 21A2                          i2l3489 1490                          i2l3585 1DE8  
                        i2l3649 23F2                          i2l3673 2564                          i2l3921 0E06  
                        i2l3913 0D70                          i2l3841 0BDE                          i2l3755 21C4  
                        i2l3739 218E                          i2l3763 21DE                          i2l3819 26D2  
                        i2l3499 14C0                          i2l3579 1DD0                          i2l3931 0E86  
                        i2l3851 0C00                          i2l3843 0BE4                          i2l3757 21CA  
                        i2l3749 21B0                          i2l3589 1DF8                          i2l3677 2588  
                        i2l3669 2554                          i2l3917 0D82                          i2l3845 0BE8  
                        i2l3837 0BCE                          i2l3933 0E96                          i2l3919 0D8E  
                        i2l3927 0E70                          i2l3863 0C66                          i2l3847 0BEC  
                        i2l3855 0C08                          i2l3929 0E80                          i2l3881 0CE8  
                        i2l3883 0CEC                          i2l3877 0CC2                          i2l3895 0D24  
                        i2l3985 1142                          i2l3993 1218                          i2l3897 0D28  
                        i2l3989 1186                          u322_41 1E42                          u324_41 1E6A  
                        u333_41 1C5A                          u327_41 1D4E                          u329_41 1D76  
                        _TMR0IE 007F95                          _TMR0IF 007F92                       ??i2_putch 0005  
                        _TMR1IE 007CE8                          _TMR3IE 007D01                          _SSPADD 000FC8  
                        _TRISC3 007CA3                          _TRISC4 007CA4                          _SSPBUF 000FC9  
                   ?i2_setAngle 005A                __end_of_lcdClear 2934                     initServo@id 016F  
                   initServo@pi 016B                     initServo@po 0169                  __CFG_XINST$OFF 000000  
                     ??___ftadd 0106                  __CFG_STVREN$ON 000000                       ??___ftdiv 00B8  
                     ??___lldiv 00AE                       ??___ftmul 00C7                       ??___llmod 00BB  
                     ??___fttol 0110                          _nServo 01A9                  i2___altoft@exp 0011  
                        clear_0 27B2                       ??_lcdInst 00A8                          _printf 085E  
              __end_of_pinSetup 284E                __end_of_setAngle 0476                   setAngle@a_510 0165  
                 setAngle@a_505 015D              i2setAngle@smallest 0094           ___ftmul@f3_as_product 00CB  
                     ??_initLCD 00AA                     i2setAngle@a 009E                     i2setAngle@b 00A4  
             __end_ofi2___ftadd 14E6               __end_ofi2___ftdiv 1F18                  i2___ftadd@exp1 0036  
                i2___ftadd@exp2 0035               __end_ofi2___lldiv 2452               __end_ofi2___ftmul 1E32  
                 setAngle@angle 0131               __end_ofi2___llmod 25A8               __end_ofi2___fttol 1D3E  
                i2___ftadd@sign 0034                    __mediumconst FE88                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                   setAngle@taken 0143  
                     ??_service 006E               __end_ofi2_lcdInst 291C                  i2___ftdiv@cntr 0016  
                    __accesstop 0080         __end_of__initialization 27C2                      ___altoft@c 00AE  
           __size_ofi2___altoft 0078                  i2___ftdiv@sign 001B                      ___ftadd@f1 0100  
                    ___ftadd@f2 0103             __size_ofi2___awtoft 0038             __size_ofi2___ftpack 00AE  
                 ___rparam_used 000001                      ___ftdiv@f1 00B2                      ___ftdiv@f2 00B5  
                    ___ftdiv@f3 00BC                      ___awtoft@c 00AE                  i2___ftpack@arg 0001  
         __size_ofi2_startTimer 004C               i2___llmod@divisor 0012                  i2___ftpack@exp 0004  
             i2___llmod@counter 0016                      ___ftmul@f1 00C1                      ___ftmul@f2 00C4  
                    ___fttol@f1 010C            __end_of_happynewyear FEE9                  __pcstackCOMRAM 0001  
            i2___lldiv@dividend 0001           __size_of_angleToPulse 0156             __size_ofi2_lcdClear 0008  
                  __pidataBANK0 291C                  i2___ftmul@cntr 0029                  i2___ftmul@sign 002A  
                 __end_of_putch 28D8                     i2printf@idx 002B                     i2printf@val 0030  
                i2___fttol@exp1 0045                  i2___fttol@lval 0041              __size_of_lcdNibble 0078  
                   i2putch@data 0005             __size_ofi2_setAngle 03E8                       ?i2_printf 0017  
                   setAngle@ind 015B                         ??_putch 00AA              i2___lldiv@quotient 0009  
                  i2_startTimer 26AC                      __pbssBANK0 00D8                      __pbssBANK1 0171  
                  _angleToPulse 1644           __size_of_digitalWrite 00AC              __size_of_initTimer 004A  
            __size_of_initServo 008E         __size_ofi2_angleToPulse 0114                    ?i2_lcdNibble 0001  
                     ?___altoft 00AE                      _lcdNewline 2924                       ?___awtoft 00AE  
                     ?___ftpack 00A6                         ?_printf 00BC  __size_of_servoInterruptService 0222  
 __end_of_servoInterruptService 133A               i2startTimer@timer 0001                       ?_lcdClear 0001  
              angleToPulse@a000 012B                      ??i2_printf 0029                angleToPulse@a180 0123  
                  _digitalWrite 215E                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7                         i2_putch 28D8                       ?_pinSetup 0001  
                     ?_setAngle 012F               __end_of_lcdNibble 24CA                         __Hparam 0000  
                       __Lparam 0000                         ___ftadd 0EB0                         ___ftdiv 179A  
                       ___lldiv 1FF4                         ___ftmul 14E6                         ___llmod 22A8  
                       ___fttol 18E6                    ??i2___altoft 000D                      ??___altoft 00B2  
                       __pcinit 278C                    ??i2___awtoft 000C                    ??i2___ftpack 0006  
                    ??___awtoft 00B1                      ??___ftpack 00AB         i2___ftmul@f3_as_product 0026  
                       __ramtop 1000                         _lcdInst 2886                         __ptext0 265E  
                       __ptext1 2814                         __ptext2 2342                         __ptext3 260E  
                       __ptext4 0012                         __ptext5 085E                         __ptext6 28B0  
                       __ptext7 2924                         __ptext8 22A8                         __ptext9 1FF4  
               __size_of_printf 0366                   startTimer@val 00A8                         _initLCD 2742  
             __end_of_hexpowers FED1               __end_of_initTimer 2742               __end_of_initServo 23D0  
                       _dpowers FE89                 i2___altoft@sign 0012                    ??i2_lcdClear 0005  
                    ??_lcdClear 00AA                         _service 0008                  __pintcode_body 1F18  
          end_of_initialization 27C2             i2angleToPulse@angle 0046                   __Lmediumconst FE88  
                       int_func 1F18              __end_ofi2___altoft 2542                    i2setAngle@id 005A  
            __end_ofi2___awtoft 2886              __end_ofi2___ftpack 215E                    ??i2_setAngle 005E  
                    ??_pinSetup 00A6                      ??_setAngle 0133                 ___lldiv@divisor 00AA  
               ___lldiv@counter 00B2                         printf@c 010A                         printf@f 00BC  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE              __end_ofi2_lcdClear 2944                     ?_lcdNewline 0001  
                     _PORTBbits 000F81              __end_ofi2_setAngle 085E                    _happynewyear FEE2  
            angleToPulse@offset 0127                       i2___ftadd 133A                       i2___ftdiv 1E32  
                     i2___lldiv 23D0                       i2___ftmul 1D3E                       i2___llmod 2542  
                     i2___fttol 1C4A                      _startTimer 260E                       i2_lcdInst 28FA  
                   ___ftdiv@exp 00BF                 i2___awtoft@sign 000C              i2___llmod@dividend 000E  
               i2___ftpack@sign 0005                  i2_angleToPulse 1A2A                     ___ftmul@exp 00CA  
          __size_ofi2_lcdNibble 0066                   i2lcdInst@data 0004                  __end_of_printf 0BC4  
                  i2printf@flag 0034          i2setAngle@smallest_ind 00A0                    i2printf@prec 002C  
           start_initialization 278C                  initServo@angle 016D                       i2printf@c 0035  
                     i2printf@f 0017                  initTimer@timer 00A6                 i2___fttol@sign1 0040  
                    ?i2___ftadd 002B                      ?i2___ftdiv 000D                      ?i2___lldiv 0001  
                    ?i2___ftmul 001C                      ?i2___llmod 000E                      ?i2___fttol 0037  
             __size_ofi2_printf 02EC                      ?i2_lcdInst 0001             __size_of_lcdNewline 0008  
        __end_ofi2_angleToPulse 1B3E                 ___llmod@divisor 00B7                 ___llmod@counter 00BB  
                   __pdataBANK0 00D0                __CFG_LPT1OSC$OFF 000000                    setAngle@prev 015F  
                      ??_printf 00CE               __size_of___altoft 009E               __size_of___awtoft 0044  
             __size_of___ftpack 010C                     __pbssCOMRAM 007D                   __pcstackBANK0 0080  
                 __pcstackBANK1 0100                 i2setAngle@a_510 00A2                 i2setAngle@a_505 009A  
                   ?_startTimer 00A6               __size_of_lcdClear 0008                 i2setAngle@angle 005C  
                      ?i2_putch 0001                 i2setAngle@taken 0080                      setAngle@id 012F  
               ?i2_angleToPulse 0046               __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003A  
             __size_of_setAngle 0464                       __pintcode 0008                   __pmediumconst FE88  
                     _lcdNibble 2452                        ?___ftadd 0100                        ?___ftdiv 00B2  
                      ?___lldiv 00A6                        ?___ftmul 00C1                        ?___llmod 00B3  
                      ?___fttol 010C                   ?i2_lcdNewline 0001                        ?_lcdInst 0001  
                      ?_initLCD 0001                 startTimer@timer 00A6                        ?_service 0001  
                     _hexpowers FEB1                       _initTimer 26F8                       _initServo 2342  
         _servoInterruptService 1118                     ??i2___ftadd 0031                     ??i2___ftdiv 0013  
                   ??i2___lldiv 0009                     ??i2___ftmul 0022                     ??i2___llmod 0016  
                   ??i2___fttol 003B                  __size_of_putch 0028              i2angleToPulse@a000 0056  
                   ??i2_lcdInst 0003              i2angleToPulse@a180 004E                        _LATDbits 000F8C  
                      i2u335_40 1C94                        i2u335_45 1C8C                        i2u353_44 2174  
                      i2u353_45 216E                        i2u450_47 25C0                        i2u451_47 25CE  
                      i2u452_47 25F4                        i2u453_47 2602                        i2u447_47 28EC  
                      i2u448_47 2900                        i2u449_47 2912                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001                  ??i2_lcdNewline 0005                      service@key 007C  
                  ??_lcdNewline 00AA             __size_of_startTimer 0050               angleToPulse@angle 011B  
                 lcdNibble@data 00A7                      printf@flag 0109                   lcdNibble@temp 00A6  
                    printf@prec 0101                        i2_printf 0BC4                      ?_initTimer 00A6  
                    ?_initServo 0169                       copy_data0 27A0                __size_ofi2_putch 0022  
            __end_of_lcdNewline 292C                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                __size_of___ftadd 0268                __size_of___ftdiv 014C  
              __size_of___lldiv 00BC                        ___altoft 220A                __size_of___ftmul 015E  
              __size_of___llmod 009A                __size_of___fttol 0144                        ___awtoft 27D0  
                      ___ftpack 1B3E                __size_of_lcdInst 002A                  i2setAngle@prev 009C  
                     setAngle@a 0161                       setAngle@b 0167                __size_of_initLCD 004A  
        ?_servoInterruptService 0001                        _lcdClear 292C                        __ptext10 292C  
                      __ptext11 1644                        __ptext20 2742                        __ptext12 18E6  
                      __ptext21 2886                        __ptext13 14E6                        __ptext30 293C  
                      __ptext22 2452                        __ptext14 179A                        __ptext31 28FA  
                      __ptext15 0EB0                        __ptext40 20B0                        __ptext32 25A8  
                      __ptext24 0476                        __ptext16 27D0                        __ptext41 1118  
                      __ptext33 1A2A                        __ptext25 0BC4                        __ptext17 220A  
                      __ptext42 26AC                        __ptext34 1C4A                        __ptext26 28D8  
                      __ptext18 1B3E                        __ptext43 215E                        __ptext35 1D3E  
                      __ptext27 2934                        __ptext19 26F8                        __ptext36 1E32  
                      __ptext28 2542                        __ptext37 133A                        __ptext29 23D0  
                      __ptext38 284E                        __ptext39 24CA                __size_of_service 1FEC  
               i2startTimer@val 0003                   ?i2_startTimer 0001                   ?_angleToPulse 011B  
                 __size_of_main 004E                        _pinSetup 2814                        _setAngle 0012  
                 ??i2_lcdNibble 0001                        _sequence 0181                     ??_lcdNibble 00A6  
              setAngle@smallest 0157                        int$flags 007F                       printf@idx 0100  
                     printf@val 0105                       putch@data 00AA                      _INTCONbits 000FF2  
                 ?_digitalWrite 0001                     ??_initTimer 00A8                     ??_initServo 00D0  
          i2angleToPulse@offset 0052                  ??i2_startTimer 0007                ??i2_angleToPulse 004A  
                  ??_startTimer 00AC                        intlevel2 0000                   i2setAngle@ind 0098  
                ??_angleToPulse 011F            __end_ofi2_lcdNewline 293C                ___lldiv@dividend 00A6  
                      printf@ap 0103                     lcdInst@data 00A9              __end_of_startTimer 265E  
           __end_ofi2_lcdNibble 260E                digitalWrite@port 0001                ___lldiv@quotient 00AE  
                ??_digitalWrite 0007            setAngle@smallest_ind 0163                 digitalWrite@pin 0003  
               digitalWrite@val 0005  
