

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 12 18:51:19 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           ; Version 1.40
    63                           ; Generated 01/12/2016 GMT
    64                           ; 
    65                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4620 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	idataBANK0
    98  0019C2                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _binAngle
   102  0019C2  003C               	dw	60
   103  0019C4  0050               	dw	80
   104  0019C6  0064               	dw	100
   105  0019C8  0078               	dw	120
   106                           
   107                           	psect	mediumconst
   108  00FE9C                     __pmediumconst:
   109                           	opt stack 0
   110  00FE9C  00                 	db	0
   111  00FE9D                     _dpowers:
   112                           	opt stack 0
   113  00FE9D  0001               	dw	1
   114  00FE9F  0000               	dw	0
   115  00FEA1  000A               	dw	10
   116  00FEA3  0000               	dw	0
   117  00FEA5  0064               	dw	100
   118  00FEA7  0000               	dw	0
   119  00FEA9  03E8               	dw	1000
   120  00FEAB  0000               	dw	0
   121  00FEAD  2710               	dw	10000
   122  00FEAF  0000               	dw	0
   123  00FEB1  86A0               	dw	34464
   124  00FEB3  0001               	dw	1
   125  00FEB5  4240               	dw	16960
   126  00FEB7  000F               	dw	15
   127  00FEB9  9680               	dw	38528
   128  00FEBB  0098               	dw	152
   129  00FEBD  E100               	dw	57600
   130  00FEBF  05F5               	dw	1525
   131  00FEC1  CA00               	dw	51712
   132  00FEC3  3B9A               	dw	15258
   133  00FEC5                     __end_of_dpowers:
   134                           	opt stack 0
   135  00FEC5                     _hexpowers:
   136                           	opt stack 0
   137  00FEC5  0001               	dw	1
   138  00FEC7  0000               	dw	0
   139  00FEC9  0010               	dw	16
   140  00FECB  0000               	dw	0
   141  00FECD  0100               	dw	256
   142  00FECF  0000               	dw	0
   143  00FED1  1000               	dw	4096
   144  00FED3  0000               	dw	0
   145  00FED5  0000               	dw	0
   146  00FED7  0001               	dw	1
   147  00FED9  0000               	dw	0
   148  00FEDB  0010               	dw	16
   149  00FEDD  0000               	dw	0
   150  00FEDF  0100               	dw	256
   151  00FEE1  0000               	dw	0
   152  00FEE3  1000               	dw	4096
   153  00FEE5                     __end_of_hexpowers:
   154                           	opt stack 0
   155  00FEE5                     _keys:
   156                           	opt stack 0
   157  00FEE5  31                 	db	49
   158  00FEE6  32                 	db	50
   159  00FEE7  33                 	db	51
   160  00FEE8  41                 	db	65
   161  00FEE9  34                 	db	52
   162  00FEEA  35                 	db	53
   163  00FEEB  36                 	db	54
   164  00FEEC  42                 	db	66
   165  00FEED  37                 	db	55
   166  00FEEE  38                 	db	56
   167  00FEEF  39                 	db	57
   168  00FEF0  43                 	db	67
   169  00FEF1  2A                 	db	42
   170  00FEF2  30                 	db	48
   171  00FEF3  23                 	db	35
   172  00FEF4  44                 	db	68
   173  00FEF5  00                 	db	0
   174  00FEF6                     __end_of_keys:
   175                           	opt stack 0
   176  00FEF6                     _happynewyear:
   177                           	opt stack 0
   178  00FEF6  45                 	db	69
   179  00FEF7  59                 	db	89
   180  00FEF8  23                 	db	35
   181  00FEF9  07                 	db	7
   182  00FEFA  31                 	db	49
   183  00FEFB  12                 	db	18
   184  00FEFC  16                 	db	22
   185  00FEFD                     __end_of_happynewyear:
   186                           	opt stack 0
   187  0000                     _ADCON0	set	4034
   188  0000                     _ADCON1	set	4033
   189  0000                     _ADCON2	set	4032
   190  0000                     _ADRESH	set	4036
   191  0000                     _ADRESL	set	4035
   192  0000                     _EEADR	set	4009
   193  0000                     _EEADRH	set	4010
   194  0000                     _EECON1	set	4006
   195  0000                     _EECON2	set	4007
   196  0000                     _EEDATA	set	4008
   197  0000                     _INTCONbits	set	4082
   198  0000                     _LATA	set	3977
   199  0000                     _LATB	set	3978
   200  0000                     _LATC	set	3979
   201  0000                     _LATD	set	3980
   202  0000                     _LATDbits	set	3980
   203  0000                     _LATE	set	3981
   204  0000                     _PORTA	set	3968
   205  0000                     _PORTB	set	3969
   206  0000                     _PORTBbits	set	3969
   207  0000                     _PORTC	set	3970
   208  0000                     _PORTD	set	3971
   209  0000                     _SSPADD	set	4040
   210  0000                     _SSPBUF	set	4041
   211  0000                     _SSPCON1	set	4038
   212  0000                     _SSPCON2	set	4037
   213  0000                     _SSPSTAT	set	4039
   214  0000                     _T0CON	set	4053
   215  0000                     _T1CON	set	4045
   216  0000                     _T3CON	set	4017
   217  0000                     _TMR0H	set	4055
   218  0000                     _TMR0L	set	4054
   219  0000                     _TMR1H	set	4047
   220  0000                     _TMR1L	set	4046
   221  0000                     _TMR3H	set	4019
   222  0000                     _TMR3L	set	4018
   223  0000                     _TRISA	set	3986
   224  0000                     _TRISB	set	3987
   225  0000                     _TRISC	set	3988
   226  0000                     _TRISD	set	3989
   227  0000                     _TRISE	set	3990
   228  0000                     _ACKDT	set	32301
   229  0000                     _ACKEN	set	32300
   230  0000                     _EEIF	set	32012
   231  0000                     _INT0IF	set	32657
   232  0000                     _INT1IE	set	32643
   233  0000                     _INT1IF	set	32640
   234  0000                     _PEIE	set	32662
   235  0000                     _PEN	set	32298
   236  0000                     _RCEN	set	32299
   237  0000                     _RSEN	set	32297
   238  0000                     _SEN	set	32296
   239  0000                     _TMR0IE	set	32661
   240  0000                     _TMR0IF	set	32658
   241  0000                     _TMR1IE	set	31976
   242  0000                     _TMR1IF	set	31984
   243  0000                     _TMR2IF	set	31985
   244  0000                     _TMR3IE	set	32001
   245  0000                     _TMR3IF	set	32009
   246  0000                     _TRISC3	set	31907
   247  0000                     _TRISC4	set	31908
   248  00FEFD                     STR_11:
   249  00FEFD  25                 	db	37
   250  00FEFE  63                 	db	99	;'c'
   251  00FEFF  29                 	db	41
   252  00FF00  20                 	db	32
   253  00FF01  74                 	db	116	;'t'
   254  00FF02  69                 	db	105	;'i'
   255  00FF03  6D                 	db	109	;'m'
   256  00FF04  65                 	db	101	;'e'
   257  00FF05  20                 	db	32
   258  00FF06  20                 	db	32
   259  00FF07  3C                 	db	60	;'<'
   260  00FF08  41                 	db	65	;'A'
   261  00FF09  20                 	db	32
   262  00FF0A  20                 	db	32
   263  00FF0B  20                 	db	32
   264  00FF0C  20                 	db	32
   265  00FF0D  20                 	db	32
   266  00FF0E  0A                 	db	10
   267  00FF0F  00                 	db	0
   268  00FF10                     STR_7:
   269  00FF10  73                 	db	115	;'s'
   270  00FF11  74                 	db	116	;'t'
   271  00FF12  61                 	db	97	;'a'
   272  00FF13  72                 	db	114	;'r'
   273  00FF14  74                 	db	116	;'t'
   274  00FF15  20                 	db	32
   275  00FF16  20                 	db	32
   276  00FF17  20                 	db	32
   277  00FF18  3C                 	db	60	;'<'
   278  00FF19  42                 	db	66	;'B'
   279  00FF1A  20                 	db	32
   280  00FF1B  20                 	db	32
   281  00FF1C  20                 	db	32
   282  00FF1D  20                 	db	32
   283  00FF1E  20                 	db	32
   284  00FF1F  20                 	db	32
   285  00FF20  0A                 	db	10
   286  00FF21  00                 	db	0
   287  00FF22                     STR_5:
   288  00FF22  20                 	db	32
   289  00FF23  20                 	db	32
   290  00FF24  68                 	db	104	;'h'
   291  00FF25  68                 	db	104	;'h'
   292  00FF26  3A                 	db	58	;':'
   293  00FF27  6D                 	db	109	;'m'
   294  00FF28  6D                 	db	109	;'m'
   295  00FF29  3A                 	db	58	;':'
   296  00FF2A  73                 	db	115	;'s'
   297  00FF2B  73                 	db	115	;'s'
   298  00FF2C  20                 	db	32
   299  00FF2D  20                 	db	32
   300  00FF2E  20                 	db	32
   301  00FF2F  20                 	db	32
   302  00FF30  20                 	db	32
   303  00FF31  20                 	db	32
   304  00FF32  0A                 	db	10
   305  00FF33  00                 	db	0
   306  00FF34                     STR_9:
   307  00FF34  73                 	db	115	;'s'
   308  00FF35  65                 	db	101	;'e'
   309  00FF36  6C                 	db	108	;'l'
   310  00FF37  65                 	db	101	;'e'
   311  00FF38  63                 	db	99	;'c'
   312  00FF39  74                 	db	116	;'t'
   313  00FF3A  20                 	db	32
   314  00FF3B  72                 	db	114	;'r'
   315  00FF3C  75                 	db	117	;'u'
   316  00FF3D  6E                 	db	110	;'n'
   317  00FF3E  3A                 	db	58	;':'
   318  00FF3F  20                 	db	32
   319  00FF40  20                 	db	32
   320  00FF41  20                 	db	32
   321  00FF42  20                 	db	32
   322  00FF43  20                 	db	32
   323  00FF44  0A                 	db	10
   324  00FF45  00                 	db	0
   325  00FF46                     STR_13:
   326  00FF46  74                 	db	116	;'t'
   327  00FF47  69                 	db	105	;'i'
   328  00FF48  6D                 	db	109	;'m'
   329  00FF49  65                 	db	101	;'e'
   330  00FF4A  3A                 	db	58	;':'
   331  00FF4B  20                 	db	32
   332  00FF4C  6E                 	db	110	;'n'
   333  00FF4D  6E                 	db	110	;'n'
   334  00FF4E  6E                 	db	110	;'n'
   335  00FF4F  20                 	db	32
   336  00FF50  73                 	db	115	;'s'
   337  00FF51  65                 	db	101	;'e'
   338  00FF52  63                 	db	99	;'c'
   339  00FF53  20                 	db	32
   340  00FF54  20                 	db	32
   341  00FF55  20                 	db	32
   342  00FF56  0A                 	db	10
   343  00FF57  00                 	db	0
   344  00FF58                     STR_15:
   345  00FF58  5B                 	db	91	;'['
   346  00FF59  41                 	db	65	;'A'
   347  00FF5A  41                 	db	65	;'A'
   348  00FF5B  2C                 	db	44
   349  00FF5C  39                 	db	57	;'9'
   350  00FF5D  56                 	db	86	;'V'
   351  00FF5E  2C                 	db	44
   352  00FF5F  43                 	db	67	;'C'
   353  00FF60  2C                 	db	44
   354  00FF61  6F                 	db	111	;'o'
   355  00FF62  74                 	db	116	;'t'
   356  00FF63  68                 	db	104	;'h'
   357  00FF64  65                 	db	101	;'e'
   358  00FF65  72                 	db	114	;'r'
   359  00FF66  5D                 	db	93	;']'
   360  00FF67  20                 	db	32
   361  00FF68  0A                 	db	10
   362  00FF69  00                 	db	0
   363  00FF6A                     STR_17:
   364  00FF6A  30                 	db	48	;'0'
   365  00FF6B  31                 	db	49	;'1'
   366  00FF6C  32                 	db	50	;'2'
   367  00FF6D  33                 	db	51	;'3'
   368  00FF6E  34                 	db	52	;'4'
   369  00FF6F  35                 	db	53	;'5'
   370  00FF70  36                 	db	54	;'6'
   371  00FF71  37                 	db	55	;'7'
   372  00FF72  38                 	db	56	;'8'
   373  00FF73  39                 	db	57	;'9'
   374  00FF74  61                 	db	97	;'a'
   375  00FF75  62                 	db	98	;'b'
   376  00FF76  63                 	db	99	;'c'
   377  00FF77  64                 	db	100	;'d'
   378  00FF78  65                 	db	101	;'e'
   379  00FF79  66                 	db	102	;'f'
   380  00FF7A  00                 	db	0
   381  00FF7B                     STR_14:
   382  00FF7B  20                 	db	32
   383  00FF7C  20                 	db	32
   384  00FF7D  20                 	db	32
   385  00FF7E  20                 	db	32
   386  00FF7F  20                 	db	32
   387  00FF80  20                 	db	32
   388  00FF81  20                 	db	32
   389  00FF82  20                 	db	32
   390  00FF83  20                 	db	32
   391  00FF84  20                 	db	32
   392  00FF85  20                 	db	32
   393  00FF86  20                 	db	32
   394  00FF87  20                 	db	32
   395  00FF88  20                 	db	32
   396  00FF89  2A                 	db	42
   397  00FF8A  3E                 	db	62	;'>'
   398  00FF8B  00                 	db	0
   399  00FF8C                     STR_10:
   400  00FF8C  5B                 	db	91	;'['
   401  00FF8D  31                 	db	49	;'1'
   402  00FF8E  2C                 	db	44
   403  00FF8F  32                 	db	50	;'2'
   404  00FF90  2C                 	db	44
   405  00FF91  33                 	db	51	;'3'
   406  00FF92  2C                 	db	44
   407  00FF93  34                 	db	52	;'4'
   408  00FF94  5D                 	db	93	;']'
   409  00FF95  20                 	db	32
   410  00FF96  20                 	db	32
   411  00FF97  20                 	db	32
   412  00FF98  20                 	db	32
   413  00FF99  20                 	db	32
   414  00FF9A  2A                 	db	42
   415  00FF9B  3E                 	db	62	;'>'
   416  00FF9C  00                 	db	0
   417  00FF9D                     STR_8:
   418  00FF9D  68                 	db	104	;'h'
   419  00FF9E  69                 	db	105	;'i'
   420  00FF9F  73                 	db	115	;'s'
   421  00FFA0  74                 	db	116	;'t'
   422  00FFA1  6F                 	db	111	;'o'
   423  00FFA2  72                 	db	114	;'r'
   424  00FFA3  79                 	db	121	;'y'
   425  00FFA4  20                 	db	32
   426  00FFA5  3C                 	db	60	;'<'
   427  00FFA6  43                 	db	67	;'C'
   428  00FFA7  20                 	db	32
   429  00FFA8  20                 	db	32
   430  00FFA9  20                 	db	32
   431  00FFAA  20                 	db	32
   432  00FFAB  2A                 	db	42
   433  00FFAC  3E                 	db	62	;'>'
   434  00FFAD  00                 	db	0
   435  00FFAE                     STR_12:
   436  00FFAE  20                 	db	32
   437  00FFAF  20                 	db	32
   438  00FFB0  20                 	db	32
   439  00FFB1  73                 	db	115	;'s'
   440  00FFB2  74                 	db	116	;'t'
   441  00FFB3  61                 	db	97	;'a'
   442  00FFB4  74                 	db	116	;'t'
   443  00FFB5  73                 	db	115	;'s'
   444  00FFB6  20                 	db	32
   445  00FFB7  3C                 	db	60	;'<'
   446  00FFB8  42                 	db	66	;'B'
   447  00FFB9  20                 	db	32
   448  00FFBA  20                 	db	32
   449  00FFBB  20                 	db	32
   450  00FFBC  2A                 	db	42
   451  00FFBD  3E                 	db	62	;'>'
   452  00FFBE  00                 	db	0
   453  00FFBF                     STR_16:
   454  00FFBF  5B                 	db	91	;'['
   455  00FFC0  6E                 	db	110	;'n'
   456  00FFC1  6E                 	db	110	;'n'
   457  00FFC2  2C                 	db	44
   458  00FFC3  6E                 	db	110	;'n'
   459  00FFC4  2C                 	db	44
   460  00FFC5  6E                 	db	110	;'n'
   461  00FFC6  2C                 	db	44
   462  00FFC7  6E                 	db	110	;'n'
   463  00FFC8  6E                 	db	110	;'n'
   464  00FFC9  5D                 	db	93	;']'
   465  00FFCA  20                 	db	32
   466  00FFCB  20                 	db	32
   467  00FFCC  20                 	db	32
   468  00FFCD  2A                 	db	42
   469  00FFCE  3E                 	db	62	;'>'
   470  00FFCF  00                 	db	0
   471  00FFD0                     STR_6:
   472  00FFD0  20                 	db	32
   473  00FFD1  20                 	db	32
   474  00FFD2  6D                 	db	109	;'m'
   475  00FFD3  6D                 	db	109	;'m'
   476  00FFD4  3A                 	db	58	;':'
   477  00FFD5  64                 	db	100	;'d'
   478  00FFD6  64                 	db	100	;'d'
   479  00FFD7  3A                 	db	58	;':'
   480  00FFD8  79                 	db	121	;'y'
   481  00FFD9  79                 	db	121	;'y'
   482  00FFDA  20                 	db	32
   483  00FFDB  20                 	db	32
   484  00FFDC  20                 	db	32
   485  00FFDD  20                 	db	32
   486  00FFDE  41                 	db	65	;'A'
   487  00FFDF  3E                 	db	62	;'>'
   488  00FFE0  00                 	db	0
   489  00FFE1  5B                 	db	91	;'['
   490  00FFE2  25                 	db	37
   491  00FFE3  78                 	db	120	;'x'
   492  00FFE4  20                 	db	32
   493  00FFE5  25                 	db	37
   494  00FFE6  78                 	db	120	;'x'
   495  00FFE7  5D                 	db	93	;']'
   496  00FFE8  0A                 	db	10
   497  00FFE9  00                 	db	0
   498  00FFEA                     STR_1:
   499  00FFEA  73                 	db	115	;'s'
   500  00FFEB  6F                 	db	111	;'o'
   501  00FFEC  72                 	db	114	;'r'
   502  00FFED  74                 	db	116	;'t'
   503  00FFEE  69                 	db	105	;'i'
   504  00FFEF  6E                 	db	110	;'n'
   505  00FFF0  67                 	db	103	;'g'
   506  00FFF1  21                 	db	33
   507  00FFF2  00                 	db	0
   508  00FFF3  74                 	db	116	;'t'
   509  00FFF4  31                 	db	49	;'1'
   510  00FFF5  3A                 	db	58	;':'
   511  00FFF6  20                 	db	32
   512  00FFF7  25                 	db	37
   513  00FFF8  78                 	db	120	;'x'
   514  00FFF9  20                 	db	32
   515  00FFFA  00                 	db	0
   516  00FFFB                     STR_4:
   517  00FFFB  25                 	db	37
   518  00FFFC  6C                 	db	108	;'l'
   519  00FFFD  64                 	db	100	;'d'
   520  00FFFE  00                 	db	0
   521                           
   522                           ; #config settings
   523  00FFFF  00                 	db	0	; dummy byte at the end
   524  0000                     
   525                           	psect	cinit
   526  001716                     __pcinit:
   527                           	opt stack 0
   528  001716                     start_initialization:
   529                           	opt stack 0
   530  001716                     __initialization:
   531                           	opt stack 0
   532                           
   533                           ; Initialize objects allocated to BANK0 (8 bytes)
   534                           ; load TBLPTR registers with __pidataBANK0
   535  001716  0EC2               	movlw	low __pidataBANK0
   536  001718  6EF6               	movwf	tblptrl,c
   537  00171A  0E19               	movlw	high __pidataBANK0
   538  00171C  6EF7               	movwf	tblptrh,c
   539  00171E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   540  001720  6EF8               	movwf	tblptru,c
   541  001722  EE00  F0C3         	lfsr	0,__pdataBANK0
   542  001726  EE10 F008          	lfsr	1,8
   543  00172A                     copy_data0:
   544  00172A  0009               	tblrd		*+
   545  00172C  CFF5 FFEE          	movff	tablat,postinc0
   546  001730  50E5               	movf	postdec1,w,c
   547  001732  50E1               	movf	fsr1l,w,c
   548  001734  E1FA               	bnz	copy_data0
   549                           
   550                           ; Clear objects allocated to BANK0 (24 bytes)
   551  001736  EE00  F0AB         	lfsr	0,__pbssBANK0
   552  00173A  0E18               	movlw	24
   553  00173C                     clear_0:
   554  00173C  6AEE               	clrf	postinc0,c
   555  00173E  06E8               	decf	wreg,f,c
   556  001740  E1FD               	bnz	clear_0
   557                           
   558                           ; Clear objects allocated to COMRAM (8 bytes)
   559  001742  EE00  F076         	lfsr	0,__pbssCOMRAM
   560  001746  0E08               	movlw	8
   561  001748                     clear_1:
   562  001748  6AEE               	clrf	postinc0,c
   563  00174A  06E8               	decf	wreg,f,c
   564  00174C  E1FD               	bnz	clear_1
   565  00174E                     end_of_initialization:
   566                           	opt stack 0
   567  00174E                     __end_of__initialization:
   568                           	opt stack 0
   569  00174E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   570  001750  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   571  001752  0E00               	movlw	low (__Lmediumconst shr (0+16))
   572  001754  6EF8               	movwf	tblptru,c
   573  001756  0100               	movlb	0
   574  001758  EFCD  F00C         	goto	_main	;jump to C main() function
   575                           tblptru	equ	0xFF8
   576                           tblptrh	equ	0xFF7
   577                           tblptrl	equ	0xFF6
   578                           tablat	equ	0xFF5
   579                           postinc0	equ	0xFEE
   580                           wreg	equ	0xFE8
   581                           postdec1	equ	0xFE5
   582                           fsr1l	equ	0xFE1
   583                           
   584                           	psect	bssCOMRAM
   585  000076                     __pbssCOMRAM:
   586                           	opt stack 0
   587  000076                     _port:
   588                           	opt stack 0
   589  000076                     	ds	8
   590                           tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           postdec1	equ	0xFE5
   597                           fsr1l	equ	0xFE1
   598                           
   599                           	psect	bssBANK0
   600  0000AB                     __pbssBANK0:
   601                           	opt stack 0
   602  0000AB                     _pulse:
   603                           	opt stack 0
   604  0000AB                     	ds	16
   605  0000BB                     _pin:
   606                           	opt stack 0
   607  0000BB                     	ds	8
   608                           tblptru	equ	0xFF8
   609                           tblptrh	equ	0xFF7
   610                           tblptrl	equ	0xFF6
   611                           tablat	equ	0xFF5
   612                           postinc0	equ	0xFEE
   613                           wreg	equ	0xFE8
   614                           postdec1	equ	0xFE5
   615                           fsr1l	equ	0xFE1
   616                           
   617                           	psect	dataBANK0
   618  0000C3                     __pdataBANK0:
   619                           	opt stack 0
   620  0000C3                     _binAngle:
   621                           	opt stack 0
   622  0000C3                     	ds	8
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           postdec1	equ	0xFE5
   630                           fsr1l	equ	0xFE1
   631                           
   632                           	psect	cstackBANK0
   633  000080                     __pcstackBANK0:
   634                           	opt stack 0
   635  000080                     ?___lldiv:
   636                           	opt stack 0
   637  000080                     lcdNibble@temp:
   638                           	opt stack 0
   639  000080                     readKeypad@key:
   640                           	opt stack 0
   641  000080                     ___lldiv@dividend:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x0
   645  000080                     	ds	1
   646  000081                     lcdNibble@data:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x1
   650  000081                     	ds	1
   651  000082                     ??_lcdInst:
   652                           
   653                           ; 1 bytes @ 0x2
   654  000082                     	ds	1
   655  000083                     lcdInst@data:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x3
   659  000083                     	ds	1
   660  000084                     ??_initLCD:
   661  000084                     putch@data:
   662                           	opt stack 0
   663  000084                     ___lldiv@divisor:
   664                           	opt stack 0
   665                           
   666                           ; 4 bytes @ 0x4
   667  000084                     	ds	4
   668  000088                     ___lldiv@quotient:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x8
   672  000088                     	ds	4
   673  00008C                     ___lldiv@counter:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0xC
   677  00008C                     	ds	1
   678  00008D                     ?___llmod:
   679                           	opt stack 0
   680  00008D                     I2C_Master_Init@c:
   681                           	opt stack 0
   682  00008D                     ___llmod@dividend:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0xD
   686  00008D                     	ds	4
   687  000091                     ??_I2C_Master_Init:
   688  000091                     ___llmod@divisor:
   689                           	opt stack 0
   690                           
   691                           ; 4 bytes @ 0x11
   692  000091                     	ds	4
   693  000095                     ___llmod@counter:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x15
   697  000095                     	ds	1
   698  000096                     ?_printf:
   699                           	opt stack 0
   700  000096                     printf@f:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x16
   704  000096                     	ds	6
   705  00009C                     ??_printf:
   706                           
   707                           ; 1 bytes @ 0x1C
   708  00009C                     	ds	2
   709  00009E                     printf@idx:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x1E
   713  00009E                     	ds	1
   714  00009F                     printf@prec:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x1F
   718  00009F                     	ds	2
   719  0000A1                     printf@ap:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x21
   723  0000A1                     	ds	2
   724  0000A3                     printf@val:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x23
   728  0000A3                     	ds	4
   729  0000A7                     printf@flag:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x27
   733  0000A7                     	ds	1
   734  0000A8                     printf@c:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x28
   738  0000A8                     	ds	1
   739  0000A9                     runMenu@key:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x29
   743  0000A9                     	ds	1
   744  0000AA                     showInterface@key:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x2A
   748  0000AA                     	ds	1
   749  0000AB                     tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           postdec1	equ	0xFE5
   756                           fsr1l	equ	0xFE1
   757                           
   758                           ; 1 bytes @ 0x2B
   759                           
   760                           	psect	cstackCOMRAM
   761  000001                     __pcstackCOMRAM:
   762                           	opt stack 0
   763  000001                     ?_digitalRead:
   764                           	opt stack 0
   765  000001                     ?___ftpack:
   766                           	opt stack 0
   767  000001                     ?i2___lldiv:
   768                           	opt stack 0
   769  000001                     i2lcdNibble@temp:
   770                           	opt stack 0
   771  000001                     digitalRead@port:
   772                           	opt stack 0
   773  000001                     digitalWrite@port:
   774                           	opt stack 0
   775  000001                     startTimer@timer:
   776                           	opt stack 0
   777  000001                     ___ftpack@arg:
   778                           	opt stack 0
   779  000001                     i2___lldiv@dividend:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x0
   783  000001                     	ds	1
   784  000002                     i2lcdNibble@data:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x1
   788  000002                     	ds	1
   789  000003                     ??i2_lcdInst:
   790  000003                     digitalRead@pin:
   791                           	opt stack 0
   792  000003                     digitalWrite@pin:
   793                           	opt stack 0
   794  000003                     startTimer@val:
   795                           	opt stack 0
   796                           
   797                           ; 4 bytes @ 0x2
   798  000003                     	ds	1
   799  000004                     ___ftpack@exp:
   800                           	opt stack 0
   801  000004                     i2lcdInst@data:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x3
   805  000004                     	ds	1
   806  000005                     ??_digitalRead:
   807  000005                     ___ftpack@sign:
   808                           	opt stack 0
   809  000005                     i2putch@data:
   810                           	opt stack 0
   811  000005                     digitalWrite@val:
   812                           	opt stack 0
   813  000005                     i2___lldiv@divisor:
   814                           	opt stack 0
   815                           
   816                           ; 4 bytes @ 0x4
   817  000005                     	ds	1
   818  000006                     ??___ftpack:
   819                           
   820                           ; 1 bytes @ 0x5
   821  000006                     	ds	1
   822  000007                     ??_digitalWrite:
   823  000007                     ??_startTimer:
   824                           
   825                           ; 1 bytes @ 0x6
   826  000007                     	ds	2
   827  000009                     ?___altoft:
   828                           	opt stack 0
   829  000009                     ?___awtoft:
   830                           	opt stack 0
   831  000009                     ___awtoft@c:
   832                           	opt stack 0
   833  000009                     ___altoft@c:
   834                           	opt stack 0
   835  000009                     i2___lldiv@quotient:
   836                           	opt stack 0
   837                           
   838                           ; 4 bytes @ 0x8
   839  000009                     	ds	1
   840  00000A                     ??_servoInterruptService:
   841                           
   842                           ; 1 bytes @ 0x9
   843  00000A                     	ds	2
   844  00000C                     ___awtoft@sign:
   845                           	opt stack 0
   846  00000C                     servoInterruptService@flags:
   847                           	opt stack 0
   848                           
   849                           ; 8 bytes @ 0xB
   850  00000C                     	ds	1
   851  00000D                     ??___altoft:
   852  00000D                     ?___ftdiv:
   853                           	opt stack 0
   854  00000D                     i2___lldiv@counter:
   855                           	opt stack 0
   856  00000D                     ___ftdiv@f1:
   857                           	opt stack 0
   858                           
   859                           ; 3 bytes @ 0xC
   860  00000D                     	ds	1
   861  00000E                     ?i2___llmod:
   862                           	opt stack 0
   863  00000E                     i2___llmod@dividend:
   864                           	opt stack 0
   865                           
   866                           ; 4 bytes @ 0xD
   867  00000E                     	ds	2
   868  000010                     ___ftdiv@f2:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0xF
   872  000010                     	ds	1
   873  000011                     ___altoft@exp:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x10
   877  000011                     	ds	1
   878  000012                     ___altoft@sign:
   879                           	opt stack 0
   880  000012                     i2___llmod@divisor:
   881                           	opt stack 0
   882                           
   883                           ; 4 bytes @ 0x11
   884  000012                     	ds	1
   885  000013                     ??___ftdiv:
   886                           
   887                           ; 1 bytes @ 0x12
   888  000013                     	ds	1
   889  000014                     servoInterruptService@i:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x13
   893  000014                     	ds	2
   894  000016                     ___ftdiv@cntr:
   895                           	opt stack 0
   896  000016                     i2___llmod@counter:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x15
   900  000016                     	ds	1
   901  000017                     ?i2_printf:
   902                           	opt stack 0
   903  000017                     i2printf@f:
   904                           	opt stack 0
   905  000017                     ___ftdiv@f3:
   906                           	opt stack 0
   907                           
   908                           ; 3 bytes @ 0x16
   909  000017                     	ds	3
   910  00001A                     ___ftdiv@exp:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x19
   914  00001A                     	ds	1
   915  00001B                     ___ftdiv@sign:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x1A
   919  00001B                     	ds	1
   920  00001C                     ?___ftmul:
   921                           	opt stack 0
   922  00001C                     ___ftmul@f1:
   923                           	opt stack 0
   924                           
   925                           ; 3 bytes @ 0x1B
   926  00001C                     	ds	1
   927  00001D                     ??i2_printf:
   928                           
   929                           ; 1 bytes @ 0x1C
   930  00001D                     	ds	2
   931  00001F                     i2printf@idx:
   932                           	opt stack 0
   933  00001F                     ___ftmul@f2:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x1E
   937  00001F                     	ds	1
   938  000020                     i2printf@prec:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x1F
   942  000020                     	ds	2
   943  000022                     ??___ftmul:
   944  000022                     i2printf@ap:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x21
   948  000022                     	ds	2
   949  000024                     i2printf@val:
   950                           	opt stack 0
   951                           
   952                           ; 4 bytes @ 0x23
   953  000024                     	ds	1
   954  000025                     ___ftmul@exp:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x24
   958  000025                     	ds	1
   959  000026                     ___ftmul@f3_as_product:
   960                           	opt stack 0
   961                           
   962                           ; 3 bytes @ 0x25
   963  000026                     	ds	2
   964  000028                     i2printf@flag:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x27
   968  000028                     	ds	1
   969  000029                     ___ftmul@cntr:
   970                           	opt stack 0
   971  000029                     i2printf@c:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x28
   975  000029                     	ds	1
   976  00002A                     ___ftmul@sign:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x29
   980  00002A                     	ds	1
   981  00002B                     ?___ftadd:
   982                           	opt stack 0
   983  00002B                     ___ftadd@f1:
   984                           	opt stack 0
   985                           
   986                           ; 3 bytes @ 0x2A
   987  00002B                     	ds	3
   988  00002E                     ___ftadd@f2:
   989                           	opt stack 0
   990                           
   991                           ; 3 bytes @ 0x2D
   992  00002E                     	ds	3
   993  000031                     ??___ftadd:
   994                           
   995                           ; 1 bytes @ 0x30
   996  000031                     	ds	3
   997  000034                     ___ftadd@sign:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x33
  1001  000034                     	ds	1
  1002  000035                     ___ftadd@exp2:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x34
  1006  000035                     	ds	1
  1007  000036                     ___ftadd@exp1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x35
  1011  000036                     	ds	1
  1012  000037                     ?___fttol:
  1013                           	opt stack 0
  1014  000037                     ___fttol@f1:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x36
  1018  000037                     	ds	4
  1019  00003B                     ??___fttol:
  1020                           
  1021                           ; 1 bytes @ 0x3A
  1022  00003B                     	ds	5
  1023  000040                     ___fttol@sign1:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x3F
  1027  000040                     	ds	1
  1028  000041                     ___fttol@lval:
  1029                           	opt stack 0
  1030                           
  1031                           ; 4 bytes @ 0x40
  1032  000041                     	ds	4
  1033  000045                     ___fttol@exp1:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x44
  1037  000045                     	ds	1
  1038  000046                     ?_angleToPulse:
  1039                           	opt stack 0
  1040  000046                     angleToPulse@angle:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x45
  1044  000046                     	ds	4
  1045  00004A                     ??_angleToPulse:
  1046                           
  1047                           ; 1 bytes @ 0x49
  1048  00004A                     	ds	4
  1049  00004E                     angleToPulse@offset:
  1050                           	opt stack 0
  1051                           
  1052                           ; 4 bytes @ 0x4D
  1053  00004E                     	ds	4
  1054  000052                     angleToPulse@a180:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x51
  1058  000052                     	ds	4
  1059  000056                     _angleToPulse$1191:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x55
  1063  000056                     	ds	3
  1064  000059                     angleToPulse@a000:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x58
  1068  000059                     	ds	4
  1069  00005D                     setAngle@timer:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x5C
  1073  00005D                     	ds	2
  1074  00005F                     setAngle@angle:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x5E
  1078  00005F                     	ds	2
  1079  000061                     ??_setAngle:
  1080                           
  1081                           ; 1 bytes @ 0x60
  1082  000061                     	ds	6
  1083  000067                     ??_service:
  1084                           
  1085                           ; 1 bytes @ 0x66
  1086  000067                     	ds	14
  1087  000075                     service@key:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x74
  1091  000075                     	ds	1
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           postinc0	equ	0xFEE
  1097                           wreg	equ	0xFE8
  1098                           postdec1	equ	0xFE5
  1099                           fsr1l	equ	0xFE1
  1100                           
  1101 ;;
  1102 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1103 ;;
  1104 ;; *************** function _main *****************
  1105 ;; Defined at:
  1106 ;;		line 121 in file "main.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;Total ram usage:        0 bytes
  1125 ;; Hardware stack levels required when called:   14
  1126 ;; This function calls:
  1127 ;;		_initLCD
  1128 ;;		_initRTC
  1129 ;;		_pinSetup
  1130 ;;		_showInterface
  1131 ;; This function is called by:
  1132 ;;		Startup code after reset
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text0
  1137  00199A                     __ptext0:
  1138                           	opt stack 0
  1139  00199A                     _main:
  1140                           	opt stack 17
  1141                           
  1142                           ;main.c: 122: pinSetup();
  1143                           
  1144                           ;incstack = 0
  1145  00199A  ECAE  F00B         	call	_pinSetup	;wreg free
  1146                           
  1147                           ;main.c: 123: initLCD();
  1148  00199E  EC66  F00B         	call	_initLCD	;wreg free
  1149                           
  1150                           ;main.c: 124: initRTC();
  1151  0019A2  ECC1  F00C         	call	_initRTC	;wreg free
  1152                           
  1153                           ;main.c: 126: (INTCONbits.GIE = 0);
  1154  0019A6  9EF2               	bcf	intcon,7,c	;volatile
  1155                           
  1156                           ;main.c: 127: showInterface();
  1157  0019A8  EC92  F005         	call	_showInterface	;wreg free
  1158                           
  1159                           ;main.c: 128: (INTCONbits.GIE = 1);
  1160  0019AC  8EF2               	bsf	intcon,7,c	;volatile
  1161  0019AE                     l111:
  1162  0019AE  D7FF               	goto	l111
  1163  0019B0                     __end_of_main:
  1164                           	opt stack 0
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           intcon	equ	0xFF2
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           fsr1l	equ	0xFE1
  1174                           
  1175 ;; *************** function _showInterface *****************
  1176 ;; Defined at:
  1177 ;;		line 61 in file "main.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  key             1   42[BANK0 ] unsigned char 
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      void 
  1184 ;; Registers used:
  1185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1195 ;;Total ram usage:        1 bytes
  1196 ;; Hardware stack levels used:    1
  1197 ;; Hardware stack levels required when called:   13
  1198 ;; This function calls:
  1199 ;;		_dateTime
  1200 ;;		_mainMenu
  1201 ;;		_readKeypad
  1202 ;;		_runMenu
  1203 ;;		_runSelect
  1204 ;;		_runStats
  1205 ;;		_runTime
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text1
  1212  000B24                     __ptext1:
  1213                           	opt stack 0
  1214  000B24                     _showInterface:
  1215                           	opt stack 17
  1216  000B24                     
  1217                           ;main.c: 64: dateTime();
  1218  000B24  EC8C  F00C         	call	_dateTime	;wreg free
  1219  000B28                     l3266:
  1220  000B28  EC02  F00C         	call	_readKeypad	;wreg free
  1221  000B2C  0A41               	xorlw	65
  1222  000B2E  A4D8               	btfss	status,2,c
  1223  000B30  D7FB               	goto	l3266
  1224  000B32                     l3268:
  1225                           
  1226                           ;main.c: 69: mainMenu();
  1227  000B32  EC79  F00C         	call	_mainMenu	;wreg free
  1228  000B36                     l3270:
  1229  000B36  EC02  F00C         	call	_readKeypad	;wreg free
  1230  000B3A  0100               	movlb	0	; () banked
  1231  000B3C  6FAA               	movwf	showInterface@key& (0+255),b
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 73: while(key != 'B' && key != 'C' && key != '*');
  1235  000B3E  0E42               	movlw	66
  1236  000B40  0100               	movlb	0	; () banked
  1237  000B42  19AA               	xorwf	showInterface@key& (0+255),w,b
  1238  000B44  B4D8               	btfsc	status,2,c
  1239  000B46  D00A               	goto	l3278
  1240                           
  1241                           ; BSR set to: 0
  1242  000B48  0E43               	movlw	67
  1243  000B4A  0100               	movlb	0	; () banked
  1244  000B4C  19AA               	xorwf	showInterface@key& (0+255),w,b
  1245  000B4E  B4D8               	btfsc	status,2,c
  1246  000B50  D005               	goto	l3278
  1247                           
  1248                           ; BSR set to: 0
  1249  000B52  0E2A               	movlw	42
  1250  000B54  0100               	movlb	0	; () banked
  1251  000B56  19AA               	xorwf	showInterface@key& (0+255),w,b
  1252  000B58  A4D8               	btfss	status,2,c
  1253  000B5A  D7ED               	goto	l3270
  1254  000B5C                     l3278:
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;main.c: 75: if(key == 'C'){
  1258  000B5C  0E43               	movlw	67
  1259  000B5E  0100               	movlb	0	; () banked
  1260  000B60  19AA               	xorwf	showInterface@key& (0+255),w,b
  1261  000B62  A4D8               	btfss	status,2,c
  1262  000B64  D056               	goto	l3322
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;main.c: 77: runSelect();
  1266  000B66  EC66  F00C         	call	_runSelect	;wreg free
  1267  000B6A                     l3282:
  1268  000B6A  EC02  F00C         	call	_readKeypad	;wreg free
  1269  000B6E  0100               	movlb	0	; () banked
  1270  000B70  6FAA               	movwf	showInterface@key& (0+255),b
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;main.c: 83: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
  1274  000B72  0E31               	movlw	49
  1275  000B74  0100               	movlb	0	; () banked
  1276  000B76  19AA               	xorwf	showInterface@key& (0+255),w,b
  1277  000B78  B4D8               	btfsc	status,2,c
  1278  000B7A  D014               	goto	l3294
  1279                           
  1280                           ; BSR set to: 0
  1281  000B7C  0E32               	movlw	50
  1282  000B7E  0100               	movlb	0	; () banked
  1283  000B80  19AA               	xorwf	showInterface@key& (0+255),w,b
  1284  000B82  B4D8               	btfsc	status,2,c
  1285  000B84  D00F               	goto	l3294
  1286                           
  1287                           ; BSR set to: 0
  1288  000B86  0E33               	movlw	51
  1289  000B88  0100               	movlb	0	; () banked
  1290  000B8A  19AA               	xorwf	showInterface@key& (0+255),w,b
  1291  000B8C  B4D8               	btfsc	status,2,c
  1292  000B8E  D00A               	goto	l3294
  1293                           
  1294                           ; BSR set to: 0
  1295  000B90  0E34               	movlw	52
  1296  000B92  0100               	movlb	0	; () banked
  1297  000B94  19AA               	xorwf	showInterface@key& (0+255),w,b
  1298  000B96  B4D8               	btfsc	status,2,c
  1299  000B98  D005               	goto	l3294
  1300                           
  1301                           ; BSR set to: 0
  1302  000B9A  0E2A               	movlw	42
  1303  000B9C  0100               	movlb	0	; () banked
  1304  000B9E  19AA               	xorwf	showInterface@key& (0+255),w,b
  1305  000BA0  A4D8               	btfss	status,2,c
  1306  000BA2  D7E3               	goto	l3282
  1307  000BA4                     l3294:
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;main.c: 85: if(key == '*')continue;
  1311  000BA4  0E2A               	movlw	42
  1312  000BA6  0100               	movlb	0	; () banked
  1313  000BA8  19AA               	xorwf	showInterface@key& (0+255),w,b
  1314  000BAA  B4D8               	btfsc	status,2,c
  1315  000BAC  D7C2               	goto	l3268
  1316  000BAE                     l3298:
  1317                           
  1318                           ;main.c: 91: runMenu(key);
  1319  000BAE  0100               	movlb	0	; () banked
  1320  000BB0  51AA               	movf	showInterface@key& (0+255),w,b
  1321  000BB2  ECE9  F00B         	call	_runMenu
  1322  000BB6                     l3300:
  1323  000BB6  EC02  F00C         	call	_readKeypad	;wreg free
  1324  000BBA  0100               	movlb	0	; () banked
  1325  000BBC  6FAA               	movwf	showInterface@key& (0+255),b
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 95: while(key != 'A' && key != 'B' && key != '*');
  1329  000BBE  0E41               	movlw	65
  1330  000BC0  0100               	movlb	0	; () banked
  1331  000BC2  19AA               	xorwf	showInterface@key& (0+255),w,b
  1332  000BC4  B4D8               	btfsc	status,2,c
  1333  000BC6  D00A               	goto	l3308
  1334                           
  1335                           ; BSR set to: 0
  1336  000BC8  0E42               	movlw	66
  1337  000BCA  0100               	movlb	0	; () banked
  1338  000BCC  19AA               	xorwf	showInterface@key& (0+255),w,b
  1339  000BCE  B4D8               	btfsc	status,2,c
  1340  000BD0  D005               	goto	l3308
  1341                           
  1342                           ; BSR set to: 0
  1343  000BD2  0E2A               	movlw	42
  1344  000BD4  0100               	movlb	0	; () banked
  1345  000BD6  19AA               	xorwf	showInterface@key& (0+255),w,b
  1346  000BD8  A4D8               	btfss	status,2,c
  1347  000BDA  D7ED               	goto	l3300
  1348  000BDC                     l3308:
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;main.c: 97: if(key == 'A'){
  1352  000BDC  0E41               	movlw	65
  1353  000BDE  0100               	movlb	0	; () banked
  1354  000BE0  19AA               	xorwf	showInterface@key& (0+255),w,b
  1355  000BE2  A4D8               	btfss	status,2,c
  1356  000BE4  D003               	goto	l3312
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;main.c: 99: runTime();
  1360  000BE6  EC40  F00C         	call	_runTime	;wreg free
  1361                           
  1362                           ;main.c: 101: }
  1363  000BEA  D00D               	goto	l3320
  1364  000BEC                     l3312:
  1365                           
  1366                           ;main.c: 102: else if(key == 'B'){
  1367  000BEC  0E42               	movlw	66
  1368  000BEE  0100               	movlb	0	; () banked
  1369  000BF0  19AA               	xorwf	showInterface@key& (0+255),w,b
  1370  000BF2  A4D8               	btfss	status,2,c
  1371  000BF4  D003               	goto	l3316
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 104: runStats();
  1375  000BF6  EC53  F00C         	call	_runStats	;wreg free
  1376                           
  1377                           ;main.c: 106: }
  1378  000BFA  D005               	goto	l3320
  1379  000BFC                     l3316:
  1380                           
  1381                           ;main.c: 107: else if(key == '*')break;
  1382  000BFC  0E2A               	movlw	42
  1383  000BFE  0100               	movlb	0	; () banked
  1384  000C00  19AA               	xorwf	showInterface@key& (0+255),w,b
  1385  000C02  B4D8               	btfsc	status,2,c
  1386  000C04  D796               	goto	l3268
  1387  000C06                     l3320:
  1388  000C06  EC02  F00C         	call	_readKeypad	;wreg free
  1389  000C0A  0A2A               	xorlw	42
  1390  000C0C  B4D8               	btfsc	status,2,c
  1391  000C0E  D7CF               	goto	l3298
  1392  000C10  D7FA               	goto	l3320
  1393  000C12                     l3322:
  1394                           
  1395                           ;main.c: 113: else if(key == 'B'){
  1396  000C12  0E42               	movlw	66
  1397  000C14  0100               	movlb	0	; () banked
  1398  000C16  19AA               	xorwf	showInterface@key& (0+255),w,b
  1399  000C18  B4D8               	btfsc	status,2,c
  1400  000C1A  D78B               	goto	l3268
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;main.c: 116: else if(key == '*')break;
  1404                           
  1405                           ; BSR set to: 0
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;main.c: 115: }
  1409  000C1C  0E2A               	movlw	42
  1410  000C1E  0100               	movlb	0	; () banked
  1411  000C20  19AA               	xorwf	showInterface@key& (0+255),w,b
  1412  000C22  B4D8               	btfsc	status,2,c
  1413  000C24  D77F               	goto	l3264
  1414  000C26  D785               	goto	l3268
  1415  000C28                     __end_of_showInterface:
  1416                           	opt stack 0
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           intcon	equ	0xFF2
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           postdec1	equ	0xFE5
  1425                           fsr1l	equ	0xFE1
  1426                           status	equ	0xFD8
  1427                           
  1428 ;; *************** function _runTime *****************
  1429 ;; Defined at:
  1430 ;;		line 36 in file "interface.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;		None
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;		None
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;Total ram usage:        0 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:   12
  1451 ;; This function calls:
  1452 ;;		_lcdClear
  1453 ;;		_printf
  1454 ;; This function is called by:
  1455 ;;		_showInterface
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text2
  1460  001880                     __ptext2:
  1461                           	opt stack 0
  1462  001880                     _runTime:
  1463                           	opt stack 17
  1464                           
  1465                           ;interface.c: 37: lcdClear();
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;incstack = 0
  1469  001880  ECE9  F00C         	call	_lcdClear	;wreg free
  1470                           
  1471                           ;interface.c: 38: printf("time: nnn sec   \n");
  1472  001884  0E46               	movlw	low STR_13
  1473  001886  0100               	movlb	0	; () banked
  1474  001888  6F96               	movwf	printf@f& (0+255),b
  1475  00188A  0EFF               	movlw	high STR_13
  1476  00188C  0100               	movlb	0	; () banked
  1477  00188E  6F97               	movwf	(printf@f+1)& (0+255),b
  1478  001890  EC09  F000         	call	_printf	;wreg free
  1479                           
  1480                           ;interface.c: 39: printf("              *>");
  1481  001894  0E7B               	movlw	low STR_14
  1482  001896  0100               	movlb	0	; () banked
  1483  001898  6F96               	movwf	printf@f& (0+255),b
  1484  00189A  0EFF               	movlw	high STR_14
  1485  00189C  0100               	movlb	0	; () banked
  1486  00189E  6F97               	movwf	(printf@f+1)& (0+255),b
  1487  0018A0  EC09  F000         	call	_printf	;wreg free
  1488  0018A4  0012               	return		;funcret
  1489  0018A6                     __end_of_runTime:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           intcon	equ	0xFF2
  1496                           postinc0	equ	0xFEE
  1497                           wreg	equ	0xFE8
  1498                           postdec1	equ	0xFE5
  1499                           fsr1l	equ	0xFE1
  1500                           status	equ	0xFD8
  1501                           
  1502 ;; *************** function _runStats *****************
  1503 ;; Defined at:
  1504 ;;		line 42 in file "interface.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;		None
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;Total ram usage:        0 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:   12
  1525 ;; This function calls:
  1526 ;;		_lcdClear
  1527 ;;		_printf
  1528 ;; This function is called by:
  1529 ;;		_showInterface
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text3
  1534  0018A6                     __ptext3:
  1535                           	opt stack 0
  1536  0018A6                     _runStats:
  1537                           	opt stack 17
  1538                           
  1539                           ;interface.c: 43: lcdClear();
  1540                           
  1541                           ;incstack = 0
  1542  0018A6  ECE9  F00C         	call	_lcdClear	;wreg free
  1543                           
  1544                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  1545  0018AA  0E58               	movlw	low STR_15
  1546  0018AC  0100               	movlb	0	; () banked
  1547  0018AE  6F96               	movwf	printf@f& (0+255),b
  1548  0018B0  0EFF               	movlw	high STR_15
  1549  0018B2  0100               	movlb	0	; () banked
  1550  0018B4  6F97               	movwf	(printf@f+1)& (0+255),b
  1551  0018B6  EC09  F000         	call	_printf	;wreg free
  1552                           
  1553                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  1554  0018BA  0EBF               	movlw	low STR_16
  1555  0018BC  0100               	movlb	0	; () banked
  1556  0018BE  6F96               	movwf	printf@f& (0+255),b
  1557  0018C0  0EFF               	movlw	high STR_16
  1558  0018C2  0100               	movlb	0	; () banked
  1559  0018C4  6F97               	movwf	(printf@f+1)& (0+255),b
  1560  0018C6  EC09  F000         	call	_printf	;wreg free
  1561  0018CA  0012               	return		;funcret
  1562  0018CC                     __end_of_runStats:
  1563                           	opt stack 0
  1564                           tblptru	equ	0xFF8
  1565                           tblptrh	equ	0xFF7
  1566                           tblptrl	equ	0xFF6
  1567                           tablat	equ	0xFF5
  1568                           intcon	equ	0xFF2
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           postdec1	equ	0xFE5
  1572                           fsr1l	equ	0xFE1
  1573                           status	equ	0xFD8
  1574                           
  1575 ;; *************** function _runSelect *****************
  1576 ;; Defined at:
  1577 ;;		line 24 in file "interface.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;		None
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;		None
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;Total ram usage:        0 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; Hardware stack levels required when called:   12
  1598 ;; This function calls:
  1599 ;;		_lcdClear
  1600 ;;		_printf
  1601 ;; This function is called by:
  1602 ;;		_showInterface
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text4
  1607  0018CC                     __ptext4:
  1608                           	opt stack 0
  1609  0018CC                     _runSelect:
  1610                           	opt stack 17
  1611                           
  1612                           ;interface.c: 25: lcdClear();
  1613                           
  1614                           ;incstack = 0
  1615  0018CC  ECE9  F00C         	call	_lcdClear	;wreg free
  1616                           
  1617                           ;interface.c: 26: printf("select run:     \n");
  1618  0018D0  0E34               	movlw	low STR_9
  1619  0018D2  0100               	movlb	0	; () banked
  1620  0018D4  6F96               	movwf	printf@f& (0+255),b
  1621  0018D6  0EFF               	movlw	high STR_9
  1622  0018D8  0100               	movlb	0	; () banked
  1623  0018DA  6F97               	movwf	(printf@f+1)& (0+255),b
  1624  0018DC  EC09  F000         	call	_printf	;wreg free
  1625                           
  1626                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  1627  0018E0  0E8C               	movlw	low STR_10
  1628  0018E2  0100               	movlb	0	; () banked
  1629  0018E4  6F96               	movwf	printf@f& (0+255),b
  1630  0018E6  0EFF               	movlw	high STR_10
  1631  0018E8  0100               	movlb	0	; () banked
  1632  0018EA  6F97               	movwf	(printf@f+1)& (0+255),b
  1633  0018EC  EC09  F000         	call	_printf	;wreg free
  1634  0018F0  0012               	return		;funcret
  1635  0018F2                     __end_of_runSelect:
  1636                           	opt stack 0
  1637                           tblptru	equ	0xFF8
  1638                           tblptrh	equ	0xFF7
  1639                           tblptrl	equ	0xFF6
  1640                           tablat	equ	0xFF5
  1641                           intcon	equ	0xFF2
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           postdec1	equ	0xFE5
  1645                           fsr1l	equ	0xFE1
  1646                           status	equ	0xFD8
  1647                           
  1648 ;; *************** function _runMenu *****************
  1649 ;; Defined at:
  1650 ;;		line 30 in file "interface.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  key             1    wreg     unsigned char 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  key             1   41[BANK0 ] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;Total ram usage:        1 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:   12
  1671 ;; This function calls:
  1672 ;;		_lcdClear
  1673 ;;		_printf
  1674 ;; This function is called by:
  1675 ;;		_showInterface
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text5
  1680  0017D2                     __ptext5:
  1681                           	opt stack 0
  1682  0017D2                     _runMenu:
  1683                           	opt stack 17
  1684                           
  1685                           ;incstack = 0
  1686                           ;runMenu@key stored from wreg
  1687  0017D2  0100               	movlb	0	; () banked
  1688  0017D4  6FA9               	movwf	runMenu@key& (0+255),b
  1689                           
  1690                           ;interface.c: 31: lcdClear();
  1691  0017D6  ECE9  F00C         	call	_lcdClear	;wreg free
  1692                           
  1693                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  1694  0017DA  0EFD               	movlw	low STR_11
  1695  0017DC  0100               	movlb	0	; () banked
  1696  0017DE  6F96               	movwf	printf@f& (0+255),b
  1697  0017E0  0EFE               	movlw	high STR_11
  1698  0017E2  0100               	movlb	0	; () banked
  1699  0017E4  6F97               	movwf	(printf@f+1)& (0+255),b
  1700  0017E6  C0A9  F098         	movff	runMenu@key,?_printf+2
  1701  0017EA  0100               	movlb	0	; () banked
  1702  0017EC  6B99               	clrf	(?_printf+3)& (0+255),b
  1703  0017EE  EC09  F000         	call	_printf	;wreg free
  1704                           
  1705                           ;interface.c: 33: printf( "   stats <B   *>");
  1706  0017F2  0EAE               	movlw	low STR_12
  1707  0017F4  0100               	movlb	0	; () banked
  1708  0017F6  6F96               	movwf	printf@f& (0+255),b
  1709  0017F8  0EFF               	movlw	high STR_12
  1710  0017FA  0100               	movlb	0	; () banked
  1711  0017FC  6F97               	movwf	(printf@f+1)& (0+255),b
  1712  0017FE  EC09  F000         	call	_printf	;wreg free
  1713  001802  0012               	return		;funcret
  1714  001804                     __end_of_runMenu:
  1715                           	opt stack 0
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           intcon	equ	0xFF2
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           postdec1	equ	0xFE5
  1724                           fsr1l	equ	0xFE1
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _readKeypad *****************
  1728 ;; Defined at:
  1729 ;;		line 35 in file "keypad.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  key             1    0[BANK0 ] unsigned char 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      unsigned char 
  1736 ;; Registers used:
  1737 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;Total ram usage:        1 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    7
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_showInterface
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text6
  1758  001804                     __ptext6:
  1759                           	opt stack 0
  1760  001804                     _readKeypad:
  1761                           	opt stack 22
  1762  001804                     l182:
  1763  001804  A281               	btfss	3969,1,c	;volatile
  1764  001806  D7FE               	goto	l182
  1765                           
  1766                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  1767  001808  3881               	swapf	3969,w,c	;volatile
  1768  00180A  0B0F               	andlw	15
  1769  00180C  0B0F               	andlw	15
  1770  00180E  0100               	movlb	0	; () banked
  1771  001810  6F80               	movwf	readKeypad@key& (0+255),b
  1772  001812                     l185:
  1773  001812  B281               	btfsc	3969,1,c	;volatile
  1774  001814  D7FE               	goto	l185
  1775                           
  1776                           ;keypad.c: 39: return keys[key];
  1777  001816  0100               	movlb	0	; () banked
  1778  001818  5180               	movf	readKeypad@key& (0+255),w,b
  1779  00181A  0D01               	mullw	1
  1780  00181C  0EE5               	movlw	low _keys
  1781  00181E  24F3               	addwf	prodl,w,c
  1782  001820  6EF6               	movwf	tblptrl,c
  1783  001822  0EFE               	movlw	high _keys
  1784  001824  20F4               	addwfc	prodh,w,c
  1785  001826  6EF7               	movwf	tblptrh,c
  1786  001828                     	if	0	;There are less than 3 active tblptr bytes
  1787  001828                     	endif
  1788  001828  0008               	tblrd		*
  1789  00182A  50F5               	movf	tablat,w,c
  1790  00182C  0012               	return	
  1791  00182E                     __end_of_readKeypad:
  1792                           	opt stack 0
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           prodh	equ	0xFF4
  1798                           prodl	equ	0xFF3
  1799                           intcon	equ	0xFF2
  1800                           postinc0	equ	0xFEE
  1801                           wreg	equ	0xFE8
  1802                           postdec1	equ	0xFE5
  1803                           fsr1l	equ	0xFE1
  1804                           status	equ	0xFD8
  1805                           
  1806 ;; *************** function _mainMenu *****************
  1807 ;; Defined at:
  1808 ;;		line 18 in file "interface.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:   12
  1829 ;; This function calls:
  1830 ;;		_lcdClear
  1831 ;;		_printf
  1832 ;; This function is called by:
  1833 ;;		_showInterface
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text7
  1838  0018F2                     __ptext7:
  1839                           	opt stack 0
  1840  0018F2                     _mainMenu:
  1841                           	opt stack 17
  1842                           
  1843                           ;interface.c: 19: lcdClear();
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;incstack = 0
  1847  0018F2  ECE9  F00C         	call	_lcdClear	;wreg free
  1848                           
  1849                           ;interface.c: 20: printf("start   <B      \n");
  1850  0018F6  0E10               	movlw	low STR_7
  1851  0018F8  0100               	movlb	0	; () banked
  1852  0018FA  6F96               	movwf	printf@f& (0+255),b
  1853  0018FC  0EFF               	movlw	high STR_7
  1854  0018FE  0100               	movlb	0	; () banked
  1855  001900  6F97               	movwf	(printf@f+1)& (0+255),b
  1856  001902  EC09  F000         	call	_printf	;wreg free
  1857                           
  1858                           ;interface.c: 21: printf("history <C    *>");
  1859  001906  0E9D               	movlw	low STR_8
  1860  001908  0100               	movlb	0	; () banked
  1861  00190A  6F96               	movwf	printf@f& (0+255),b
  1862  00190C  0EFF               	movlw	high STR_8
  1863  00190E  0100               	movlb	0	; () banked
  1864  001910  6F97               	movwf	(printf@f+1)& (0+255),b
  1865  001912  EC09  F000         	call	_printf	;wreg free
  1866  001916  0012               	return		;funcret
  1867  001918                     __end_of_mainMenu:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           prodh	equ	0xFF4
  1874                           prodl	equ	0xFF3
  1875                           intcon	equ	0xFF2
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1l	equ	0xFE1
  1880                           status	equ	0xFD8
  1881                           
  1882 ;; *************** function _dateTime *****************
  1883 ;; Defined at:
  1884 ;;		line 12 in file "interface.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;Total ram usage:        0 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:   12
  1905 ;; This function calls:
  1906 ;;		_lcdClear
  1907 ;;		_printf
  1908 ;; This function is called by:
  1909 ;;		_showInterface
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text8
  1914  001918                     __ptext8:
  1915                           	opt stack 0
  1916  001918                     _dateTime:
  1917                           	opt stack 17
  1918                           
  1919                           ;interface.c: 13: lcdClear();
  1920                           
  1921                           ;incstack = 0
  1922  001918  ECE9  F00C         	call	_lcdClear	;wreg free
  1923                           
  1924                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  1925  00191C  0E22               	movlw	low STR_5
  1926  00191E  0100               	movlb	0	; () banked
  1927  001920  6F96               	movwf	printf@f& (0+255),b
  1928  001922  0EFF               	movlw	high STR_5
  1929  001924  0100               	movlb	0	; () banked
  1930  001926  6F97               	movwf	(printf@f+1)& (0+255),b
  1931  001928  EC09  F000         	call	_printf	;wreg free
  1932                           
  1933                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  1934  00192C  0ED0               	movlw	low STR_6
  1935  00192E  0100               	movlb	0	; () banked
  1936  001930  6F96               	movwf	printf@f& (0+255),b
  1937  001932  0EFF               	movlw	high STR_6
  1938  001934  0100               	movlb	0	; () banked
  1939  001936  6F97               	movwf	(printf@f+1)& (0+255),b
  1940  001938  EC09  F000         	call	_printf	;wreg free
  1941  00193C  0012               	return		;funcret
  1942  00193E                     __end_of_dateTime:
  1943                           	opt stack 0
  1944                           tblptru	equ	0xFF8
  1945                           tblptrh	equ	0xFF7
  1946                           tblptrl	equ	0xFF6
  1947                           tablat	equ	0xFF5
  1948                           prodh	equ	0xFF4
  1949                           prodl	equ	0xFF3
  1950                           intcon	equ	0xFF2
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           postdec1	equ	0xFE5
  1954                           fsr1l	equ	0xFE1
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _printf *****************
  1958 ;; Defined at:
  1959 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  1962 ;;		 -> STR_16(17), STR_15(18), STR_14(17), STR_13(18), 
  1963 ;;		 -> STR_12(17), STR_11(19), STR_10(17), STR_9(18), 
  1964 ;;		 -> STR_8(17), STR_7(18), STR_6(17), STR_5(18), 
  1965 ;;		 -> STR_4(4), STR_3(9), STR_2(8), STR_1(9), 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  idx             1   30[BANK0 ] unsigned char 
  1968 ;;  val             4   35[BANK0 ] unsigned long 
  1969 ;;  tmpval          4    0        struct .
  1970 ;;  cp              3    0        PTR const unsigned char 
  1971 ;;  ap              2   33[BANK0 ] PTR void [1]
  1972 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1973 ;;  prec            2   31[BANK0 ] int 
  1974 ;;  len             2    0        unsigned int 
  1975 ;;  c               1   40[BANK0 ] char 
  1976 ;;  flag            1   39[BANK0 ] unsigned char 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2   22[BANK0 ] int 
  1979 ;; Registers used:
  1980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1986 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;Total ram usage:       19 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:   11
  1993 ;; This function calls:
  1994 ;;		___lldiv
  1995 ;;		___llmod
  1996 ;;		_putch
  1997 ;; This function is called by:
  1998 ;;		_dateTime
  1999 ;;		_mainMenu
  2000 ;;		_runSelect
  2001 ;;		_runMenu
  2002 ;;		_runTime
  2003 ;;		_runStats
  2004 ;;		_testFrequency
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text9
  2009  000012                     __ptext9:
  2010                           	opt stack 0
  2011  000012                     _printf:
  2012                           	opt stack 17
  2013                           
  2014                           ;doprnt.c: 466: va_list ap;
  2015                           ;doprnt.c: 499: signed char c;
  2016                           ;doprnt.c: 504: int prec;
  2017                           ;doprnt.c: 508: unsigned char flag;
  2018                           ;doprnt.c: 523: union {
  2019                           ;doprnt.c: 524: unsigned long vd;
  2020                           ;doprnt.c: 525: double integ;
  2021                           ;doprnt.c: 526: } tmpval;
  2022                           ;doprnt.c: 528: unsigned long val;
  2023                           ;doprnt.c: 529: unsigned len;
  2024                           ;doprnt.c: 530: const char * cp;
  2025                           ;doprnt.c: 533: *ap = __va_start();
  2026                           
  2027                           ;incstack = 0
  2028  000012  0E98               	movlw	low (?_printf+2)
  2029  000014  0100               	movlb	0	; () banked
  2030  000016  6FA1               	movwf	printf@ap& (0+255),b
  2031  000018  0E00               	movlw	high (?_printf+2)
  2032  00001A  0100               	movlb	0	; () banked
  2033  00001C  6FA2               	movwf	(printf@ap+1)& (0+255),b
  2034                           
  2035                           ;doprnt.c: 536: while(c = *f++) {
  2036  00001E  D19D               	goto	l2726
  2037  000020                     l2630:
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;doprnt.c: 538: if(c != '%')
  2041  000020  0E25               	movlw	37
  2042  000022  0100               	movlb	0	; () banked
  2043  000024  19A8               	xorwf	printf@c& (0+255),w,b
  2044  000026  B4D8               	btfsc	status,2,c
  2045  000028  D005               	goto	l2634
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;doprnt.c: 540: {
  2049                           ;doprnt.c: 541: (putch(c) );
  2050  00002A  0100               	movlb	0	; () banked
  2051  00002C  51A8               	movf	printf@c& (0+255),w,b
  2052  00002E  EC2C  F00C         	call	_putch
  2053                           
  2054                           ;doprnt.c: 542: continue;
  2055  000032  D193               	goto	l2726
  2056  000034                     l2634:
  2057                           
  2058                           ;doprnt.c: 543: }
  2059                           ;doprnt.c: 548: flag = 0;
  2060  000034  0E00               	movlw	0
  2061  000036  0100               	movlb	0	; () banked
  2062  000038  6FA7               	movwf	printf@flag& (0+255),b
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;doprnt.c: 635: switch(c = *f++) {
  2066                           
  2067                           ;doprnt.c: 633: loop:
  2068  00003A  D017               	goto	l2648
  2069  00003C                     l2636:
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;doprnt.c: 643: flag |= 0x10;
  2073  00003C  0100               	movlb	0	; () banked
  2074  00003E  89A7               	bsf	printf@flag& (0+255),4,b
  2075                           
  2076                           ;doprnt.c: 644: goto loop;
  2077  000040  D014               	goto	l2648
  2078  000042                     l2638:
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;doprnt.c: 721: flag |= 0x80;
  2082  000042  0100               	movlb	0	; () banked
  2083  000044  8FA7               	bsf	printf@flag& (0+255),7,b
  2084                           
  2085                           ;doprnt.c: 723: break;
  2086  000046  D030               	goto	l556
  2087  000048                     l2640:
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2091  000048  C0A1  FFD9         	movff	printf@ap,fsr2l
  2092  00004C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2093  000050  50DF               	movf	indf2,w,c
  2094  000052  0100               	movlb	0	; () banked
  2095  000054  6FA8               	movwf	printf@c& (0+255),b
  2096                           
  2097                           ; BSR set to: 0
  2098  000056  0E02               	movlw	2
  2099  000058  0100               	movlb	0	; () banked
  2100  00005A  27A1               	addwf	printf@ap& (0+255),f,b
  2101  00005C  0E00               	movlw	0
  2102  00005E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2103  000060                     l2644:
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;doprnt.c: 809: (putch(c) );
  2107  000060  0100               	movlb	0	; () banked
  2108  000062  51A8               	movf	printf@c& (0+255),w,b
  2109  000064  EC2C  F00C         	call	_putch
  2110                           
  2111                           ;doprnt.c: 810: continue;
  2112  000068  D178               	goto	l2726
  2113  00006A                     l2648:
  2114  00006A  C096  FFF6         	movff	printf@f,tblptrl
  2115  00006E  C097  FFF7         	movff	printf@f+1,tblptrh
  2116  000072  0100               	movlb	0	; () banked
  2117  000074  4B96               	infsnz	printf@f& (0+255),f,b
  2118  000076  2B97               	incf	(printf@f+1)& (0+255),f,b
  2119  000078                     	if	0	;tblptru may be non-zero
  2120  000078                     	endif
  2121  000078                     	if	0	;tblptru may be non-zero
  2122  000078                     	endif
  2123  000078  0008               	tblrd		*
  2124  00007A  CFF5 F0A8          	movff	tablat,printf@c
  2125  00007E  0100               	movlb	0	; () banked
  2126  000080  51A8               	movf	printf@c& (0+255),w,b
  2127                           
  2128                           ; Switch size 1, requested type "space"
  2129                           ; Number of cases is 6, Range of values is 0 to 120
  2130                           ; switch strategies available:
  2131                           ; Name         Instructions Cycles
  2132                           ; simple_byte           19    10 (average)
  2133                           ;	Chosen strategy is simple_byte
  2134  000082  0A00               	xorlw	0	; case 0
  2135  000084  B4D8               	btfsc	status,2,c
  2136  000086  0012               	return	
  2137  000088  0A63               	xorlw	99	; case 99
  2138  00008A  B4D8               	btfsc	status,2,c
  2139  00008C  D7DD               	goto	l2640
  2140  00008E  0A07               	xorlw	7	; case 100
  2141  000090  B4D8               	btfsc	status,2,c
  2142  000092  D00A               	goto	l556
  2143  000094  0A0D               	xorlw	13	; case 105
  2144  000096  B4D8               	btfsc	status,2,c
  2145  000098  D007               	goto	l556
  2146  00009A  0A05               	xorlw	5	; case 108
  2147  00009C  B4D8               	btfsc	status,2,c
  2148  00009E  D7CE               	goto	l2636
  2149  0000A0  0A14               	xorlw	20	; case 120
  2150  0000A2  B4D8               	btfsc	status,2,c
  2151  0000A4  D7CE               	goto	l2638
  2152  0000A6  D7DC               	goto	l2644
  2153  0000A8                     l556:
  2154                           
  2155                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2156  0000A8  0100               	movlb	0	; () banked
  2157  0000AA  BFA7               	btfsc	printf@flag& (0+255),7,b
  2158  0000AC  D034               	goto	l560
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;doprnt.c: 1253: {
  2162                           ;doprnt.c: 1255: if(flag & 0x10)
  2163  0000AE  0100               	movlb	0	; () banked
  2164  0000B0  A9A7               	btfss	printf@flag& (0+255),4,b
  2165  0000B2  D00E               	goto	l2656
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2169  0000B4  C0A1  FFD9         	movff	printf@ap,fsr2l
  2170  0000B8  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2171  0000BC  CFDE F0A3          	movff	postinc2,printf@val
  2172  0000C0  CFDE F0A4          	movff	postinc2,printf@val+1
  2173  0000C4  CFDE F0A5          	movff	postinc2,printf@val+2
  2174  0000C8  CFDE F0A6          	movff	postinc2,printf@val+3
  2175                           
  2176                           ; BSR set to: 0
  2177  0000CC  0E04               	movlw	4
  2178  0000CE  D00F               	goto	L1
  2179  0000D0                     l2656:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 1257: else
  2183                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2184  0000D0  C0A1  FFD9         	movff	printf@ap,fsr2l
  2185  0000D4  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2186  0000D8  CFDE F0A3          	movff	postinc2,printf@val
  2187  0000DC  CFDD F0A4          	movff	postdec2,printf@val+1
  2188  0000E0  0100               	movlb	0	; () banked
  2189  0000E2  0E00               	movlw	0
  2190  0000E4  BFA4               	btfsc	(printf@val+1)& (0+255),7,b
  2191  0000E6  0EFF               	movlw	-1
  2192  0000E8  6FA5               	movwf	(printf@val+2)& (0+255),b
  2193  0000EA  6FA6               	movwf	(printf@val+3)& (0+255),b
  2194                           
  2195                           ; BSR set to: 0
  2196  0000EC  0E02               	movlw	2
  2197  0000EE                     L1:
  2198  0000EE  0100               	movlb	0	; () banked
  2199  0000F0  27A1               	addwf	printf@ap& (0+255),f,b
  2200  0000F2  0E00               	movlw	0
  2201  0000F4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;doprnt.c: 1261: if((long)val < 0) {
  2205                           
  2206                           ; BSR set to: 0
  2207  0000F6  0100               	movlb	0	; () banked
  2208  0000F8  AFA6               	btfss	(printf@val+3)& (0+255),7,b
  2209  0000FA  D07F               	goto	l2704
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;doprnt.c: 1262: flag |= 0x03;
  2213  0000FC  0E03               	movlw	3
  2214  0000FE  0100               	movlb	0	; () banked
  2215  000100  13A7               	iorwf	printf@flag& (0+255),f,b
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;doprnt.c: 1263: val = -val;
  2219  000102  0100               	movlb	0	; () banked
  2220  000104  1FA6               	comf	(printf@val+3)& (0+255),f,b
  2221  000106  1FA5               	comf	(printf@val+2)& (0+255),f,b
  2222  000108  1FA4               	comf	(printf@val+1)& (0+255),f,b
  2223  00010A  6DA3               	negf	printf@val& (0+255),b
  2224  00010C  0E00               	movlw	0
  2225  00010E  23A4               	addwfc	(printf@val+1)& (0+255),f,b
  2226  000110  23A5               	addwfc	(printf@val+2)& (0+255),f,b
  2227  000112  23A6               	addwfc	(printf@val+3)& (0+255),f,b
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 1264: }
  2231                           ;doprnt.c: 1266: }
  2232  000114  D072               	goto	l2704
  2233  000116                     l560:
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;doprnt.c: 1268: else
  2237                           ;doprnt.c: 1273: {
  2238                           ;doprnt.c: 1281: if(flag & 0x10)
  2239  000116  0100               	movlb	0	; () banked
  2240  000118  A9A7               	btfss	printf@flag& (0+255),4,b
  2241  00011A  D00E               	goto	l2670
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2245  00011C  C0A1  FFD9         	movff	printf@ap,fsr2l
  2246  000120  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2247  000124  CFDE F0A3          	movff	postinc2,printf@val
  2248  000128  CFDE F0A4          	movff	postinc2,printf@val+1
  2249  00012C  CFDE F0A5          	movff	postinc2,printf@val+2
  2250  000130  CFDE F0A6          	movff	postinc2,printf@val+3
  2251                           
  2252                           ; BSR set to: 0
  2253  000134  0E04               	movlw	4
  2254  000136  D010               	goto	L2
  2255  000138                     l2670:
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;doprnt.c: 1283: else
  2259                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2260  000138  C0A1  FFD9         	movff	printf@ap,fsr2l
  2261  00013C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
  2262  000140  CFDE F09C          	movff	postinc2,??_printf
  2263  000144  CFDD F09D          	movff	postdec2,??_printf+1
  2264  000148  C09C  F0A3         	movff	??_printf,printf@val
  2265  00014C  C09D  F0A4         	movff	??_printf+1,printf@val+1
  2266  000150  0100               	movlb	0	; () banked
  2267  000152  6BA5               	clrf	(printf@val+2)& (0+255),b
  2268  000154  6BA6               	clrf	(printf@val+3)& (0+255),b
  2269                           
  2270                           ; BSR set to: 0
  2271  000156  0E02               	movlw	2
  2272  000158                     L2:
  2273  000158  0100               	movlb	0	; () banked
  2274  00015A  27A1               	addwf	printf@ap& (0+255),f,b
  2275  00015C  0E00               	movlw	0
  2276  00015E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;doprnt.c: 1287: }
  2280                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2281                           
  2282                           ; BSR set to: 0
  2283  000160  D04C               	goto	l2704
  2284  000162                     l2674:
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2288  000162  0E01               	movlw	1
  2289  000164  0100               	movlb	0	; () banked
  2290  000166  6FA8               	movwf	printf@c& (0+255),b
  2291  000168                     l2676:
  2292                           
  2293                           ; BSR set to: 0
  2294  000168  0E0A               	movlw	10
  2295  00016A  0100               	movlb	0	; () banked
  2296  00016C  19A8               	xorwf	printf@c& (0+255),w,b
  2297  00016E  B4D8               	btfsc	status,2,c
  2298  000170  D04D               	goto	l2706
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;doprnt.c: 1306: if(val < dpowers[c])
  2302                           
  2303                           ; BSR set to: 0
  2304                           
  2305                           ; BSR set to: 0
  2306  000172  0100               	movlb	0	; () banked
  2307  000174  51A8               	movf	printf@c& (0+255),w,b
  2308  000176  0D04               	mullw	4
  2309  000178  0E9D               	movlw	low _dpowers
  2310  00017A  24F3               	addwf	prodl,w,c
  2311  00017C  6EF6               	movwf	tblptrl,c
  2312  00017E  0EFE               	movlw	high _dpowers
  2313  000180  20F4               	addwfc	prodh,w,c
  2314  000182  6EF7               	movwf	tblptrh,c
  2315  000184                     	if	0	;There are less than 3 active tblptr bytes
  2316  000184                     	endif
  2317  000184  0009               	tblrd		*+
  2318  000186  50F5               	movf	tablat,w,c
  2319  000188  0100               	movlb	0	; () banked
  2320  00018A  5DA3               	subwf	printf@val& (0+255),w,b
  2321  00018C  0009               	tblrd		*+
  2322  00018E  50F5               	movf	tablat,w,c
  2323  000190  0100               	movlb	0	; () banked
  2324  000192  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  2325  000194  0009               	tblrd		*+
  2326  000196  50F5               	movf	tablat,w,c
  2327  000198  0100               	movlb	0	; () banked
  2328  00019A  59A5               	subwfb	(printf@val+2)& (0+255),w,b
  2329  00019C  0009               	tblrd		*+
  2330  00019E  50F5               	movf	tablat,w,c
  2331  0001A0  0100               	movlb	0	; () banked
  2332  0001A2  59A6               	subwfb	(printf@val+3)& (0+255),w,b
  2333  0001A4  A0D8               	btfss	status,0,c
  2334  0001A6  D032               	goto	l2706
  2335                           
  2336                           ; BSR set to: 0
  2337                           
  2338                           ; BSR set to: 0
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;doprnt.c: 1307: break;
  2342  0001A8  0100               	movlb	0	; () banked
  2343  0001AA  2BA8               	incf	printf@c& (0+255),f,b
  2344  0001AC  D7DD               	goto	l2676
  2345  0001AE                     l2688:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2349  0001AE  0E01               	movlw	1
  2350  0001B0  0100               	movlb	0	; () banked
  2351  0001B2  6FA8               	movwf	printf@c& (0+255),b
  2352  0001B4                     l2690:
  2353                           
  2354                           ; BSR set to: 0
  2355  0001B4  0E08               	movlw	8
  2356  0001B6  0100               	movlb	0	; () banked
  2357  0001B8  19A8               	xorwf	printf@c& (0+255),w,b
  2358  0001BA  B4D8               	btfsc	status,2,c
  2359  0001BC  D027               	goto	l2706
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2363                           
  2364                           ; BSR set to: 0
  2365                           
  2366                           ; BSR set to: 0
  2367  0001BE  0100               	movlb	0	; () banked
  2368  0001C0  51A8               	movf	printf@c& (0+255),w,b
  2369  0001C2  0D04               	mullw	4
  2370  0001C4  0EC5               	movlw	low _hexpowers
  2371  0001C6  24F3               	addwf	prodl,w,c
  2372  0001C8  6EF6               	movwf	tblptrl,c
  2373  0001CA  0EFE               	movlw	high _hexpowers
  2374  0001CC  20F4               	addwfc	prodh,w,c
  2375  0001CE  6EF7               	movwf	tblptrh,c
  2376  0001D0                     	if	0	;There are less than 3 active tblptr bytes
  2377  0001D0                     	endif
  2378  0001D0  0009               	tblrd		*+
  2379  0001D2  50F5               	movf	tablat,w,c
  2380  0001D4  0100               	movlb	0	; () banked
  2381  0001D6  5DA3               	subwf	printf@val& (0+255),w,b
  2382  0001D8  0009               	tblrd		*+
  2383  0001DA  50F5               	movf	tablat,w,c
  2384  0001DC  0100               	movlb	0	; () banked
  2385  0001DE  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  2386  0001E0  0009               	tblrd		*+
  2387  0001E2  50F5               	movf	tablat,w,c
  2388  0001E4  0100               	movlb	0	; () banked
  2389  0001E6  59A5               	subwfb	(printf@val+2)& (0+255),w,b
  2390  0001E8  0009               	tblrd		*+
  2391  0001EA  50F5               	movf	tablat,w,c
  2392  0001EC  0100               	movlb	0	; () banked
  2393  0001EE  59A6               	subwfb	(printf@val+3)& (0+255),w,b
  2394  0001F0  A0D8               	btfss	status,0,c
  2395  0001F2  D00C               	goto	l2706
  2396                           
  2397                           ; BSR set to: 0
  2398                           
  2399                           ; BSR set to: 0
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;doprnt.c: 1318: break;
  2403  0001F4  0100               	movlb	0	; () banked
  2404  0001F6  2BA8               	incf	printf@c& (0+255),f,b
  2405  0001F8  D7DD               	goto	l2690
  2406  0001FA                     l2704:
  2407                           
  2408                           ; BSR set to: 0
  2409  0001FA  0100               	movlb	0	; () banked
  2410  0001FC  51A7               	movf	printf@flag& (0+255),w,b
  2411  0001FE  0B80               	andlw	128
  2412                           
  2413                           ; Switch size 1, requested type "space"
  2414                           ; Number of cases is 2, Range of values is 0 to 128
  2415                           ; switch strategies available:
  2416                           ; Name         Instructions Cycles
  2417                           ; simple_byte            7     4 (average)
  2418                           ;	Chosen strategy is simple_byte
  2419  000200  0A00               	xorlw	0	; case 0
  2420  000202  B4D8               	btfsc	status,2,c
  2421  000204  D7AE               	goto	l2674
  2422  000206  0A80               	xorlw	128	; case 128
  2423  000208  B4D8               	btfsc	status,2,c
  2424  00020A  D7D1               	goto	l2688
  2425  00020C                     l2706:
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 1422: {
  2429                           ;doprnt.c: 1438: if(flag & 0x03)
  2430  00020C  C0A7  F09C         	movff	printf@flag,??_printf
  2431  000210  0E03               	movlw	3
  2432  000212  0100               	movlb	0	; () banked
  2433  000214  179C               	andwf	??_printf& (0+255),f,b
  2434  000216  B4D8               	btfsc	status,2,c
  2435  000218  D003               	goto	l2710
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;doprnt.c: 1439: (putch('-') );
  2439  00021A  0E2D               	movlw	45
  2440  00021C  EC2C  F00C         	call	_putch
  2441  000220                     l2710:
  2442                           
  2443                           ;doprnt.c: 1469: }
  2444                           ;doprnt.c: 1472: prec = c;
  2445  000220  0100               	movlb	0	; () banked
  2446  000222  51A8               	movf	printf@c& (0+255),w,b
  2447  000224  0100               	movlb	0	; () banked
  2448  000226  6F9F               	movwf	printf@prec& (0+255),b
  2449  000228  6BA0               	clrf	(printf@prec+1)& (0+255),b
  2450  00022A  BF9F               	btfsc	printf@prec& (0+255),7,b
  2451  00022C  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2452                           
  2453                           ;doprnt.c: 1474: while(prec--) {
  2454  00022E  D08A               	goto	l2724
  2455  000230                     l2712:
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2459  000230  C09F  F09C         	movff	printf@prec,??_printf
  2460  000234  C0A0  F09D         	movff	printf@prec+1,??_printf+1
  2461  000238  0100               	movlb	0	; () banked
  2462  00023A  90D8               	bcf	status,0,c
  2463  00023C  379C               	rlcf	??_printf& (0+255),f,b
  2464  00023E  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2465  000240  0100               	movlb	0	; () banked
  2466  000242  90D8               	bcf	status,0,c
  2467  000244  379C               	rlcf	??_printf& (0+255),f,b
  2468  000246  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2469  000248  0E9D               	movlw	low _dpowers
  2470  00024A  0100               	movlb	0	; () banked
  2471  00024C  259C               	addwf	??_printf& (0+255),w,b
  2472  00024E  6EF6               	movwf	tblptrl,c
  2473  000250  0EFE               	movlw	high _dpowers
  2474  000252  219D               	addwfc	(??_printf+1)& (0+255),w,b
  2475  000254  6EF7               	movwf	tblptrh,c
  2476  000256                     	if	0	;There are less than 3 active tblptr bytes
  2477  000256                     	endif
  2478  000256  0009               	tblrd		*+
  2479  000258  CFF5 F084          	movff	tablat,___lldiv@divisor
  2480  00025C  0009               	tblrd		*+
  2481  00025E  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2482  000262  0009               	tblrd		*+
  2483  000264  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2484  000268  000A               	tblrd		*-
  2485  00026A  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2486  00026E  C0A3  F080         	movff	printf@val,___lldiv@dividend
  2487  000272  C0A4  F081         	movff	printf@val+1,___lldiv@dividend+1
  2488  000276  C0A5  F082         	movff	printf@val+2,___lldiv@dividend+2
  2489  00027A  C0A6  F083         	movff	printf@val+3,___lldiv@dividend+3
  2490  00027E  ECEC  F007         	call	___lldiv	;wreg free
  2491  000282  C080  F08D         	movff	?___lldiv,___llmod@dividend
  2492  000286  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  2493  00028A  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  2494  00028E  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  2495  000292  0E0A               	movlw	10
  2496  000294  0100               	movlb	0	; () banked
  2497  000296  6F91               	movwf	___llmod@divisor& (0+255),b
  2498  000298  0E00               	movlw	0
  2499  00029A  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  2500  00029C  0E00               	movlw	0
  2501  00029E  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  2502  0002A0  0E00               	movlw	0
  2503  0002A2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  2504  0002A4  ECA4  F009         	call	___llmod	;wreg free
  2505  0002A8  0100               	movlb	0	; () banked
  2506  0002AA  518D               	movf	?___llmod& (0+255),w,b
  2507  0002AC  0F30               	addlw	48
  2508  0002AE  0100               	movlb	0	; () banked
  2509  0002B0  6FA8               	movwf	printf@c& (0+255),b
  2510                           
  2511                           ;doprnt.c: 1491: break;
  2512  0002B2  D044               	goto	l2722
  2513  0002B4                     l2714:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;doprnt.c: 1499: {
  2517                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2518  0002B4  C0A3  F080         	movff	printf@val,___lldiv@dividend
  2519  0002B8  C0A4  F081         	movff	printf@val+1,___lldiv@dividend+1
  2520  0002BC  C0A5  F082         	movff	printf@val+2,___lldiv@dividend+2
  2521  0002C0  C0A6  F083         	movff	printf@val+3,___lldiv@dividend+3
  2522  0002C4  C09F  F09C         	movff	printf@prec,??_printf
  2523  0002C8  C0A0  F09D         	movff	printf@prec+1,??_printf+1
  2524  0002CC  0100               	movlb	0	; () banked
  2525  0002CE  90D8               	bcf	status,0,c
  2526  0002D0  379C               	rlcf	??_printf& (0+255),f,b
  2527  0002D2  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2528  0002D4  0100               	movlb	0	; () banked
  2529  0002D6  90D8               	bcf	status,0,c
  2530  0002D8  379C               	rlcf	??_printf& (0+255),f,b
  2531  0002DA  379D               	rlcf	(??_printf+1)& (0+255),f,b
  2532  0002DC  0EC5               	movlw	low _hexpowers
  2533  0002DE  0100               	movlb	0	; () banked
  2534  0002E0  259C               	addwf	??_printf& (0+255),w,b
  2535  0002E2  6EF6               	movwf	tblptrl,c
  2536  0002E4  0EFE               	movlw	high _hexpowers
  2537  0002E6  219D               	addwfc	(??_printf+1)& (0+255),w,b
  2538  0002E8  6EF7               	movwf	tblptrh,c
  2539  0002EA                     	if	0	;There are less than 3 active tblptr bytes
  2540  0002EA                     	endif
  2541  0002EA  0009               	tblrd		*+
  2542  0002EC  CFF5 F084          	movff	tablat,___lldiv@divisor
  2543  0002F0  0009               	tblrd		*+
  2544  0002F2  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2545  0002F6  0009               	tblrd		*+
  2546  0002F8  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2547  0002FC  000A               	tblrd		*-
  2548  0002FE  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2549  000302  ECEC  F007         	call	___lldiv	;wreg free
  2550  000306  0100               	movlb	0	; () banked
  2551  000308  5180               	movf	?___lldiv& (0+255),w,b
  2552  00030A  0B0F               	andlw	15
  2553  00030C  0100               	movlb	0	; () banked
  2554  00030E  6F9E               	movwf	printf@idx& (0+255),b
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2558  000310  0100               	movlb	0	; () banked
  2559  000312  519E               	movf	printf@idx& (0+255),w,b
  2560  000314  0D01               	mullw	1
  2561  000316  0E6A               	movlw	low STR_17
  2562  000318  24F3               	addwf	prodl,w,c
  2563  00031A  6EF6               	movwf	tblptrl,c
  2564  00031C  0EFF               	movlw	high STR_17
  2565  00031E  20F4               	addwfc	prodh,w,c
  2566  000320  6EF7               	movwf	tblptrh,c
  2567  000322                     	if	0	;There are less than 3 active tblptr bytes
  2568  000322                     	endif
  2569  000322  0008               	tblrd		*
  2570  000324  CFF5 F0A8          	movff	tablat,printf@c
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;doprnt.c: 1523: }
  2574                           
  2575                           ;doprnt.c: 1508: }
  2576                           ;doprnt.c: 1510: break;
  2577  000328  D009               	goto	l2722
  2578  00032A                     l2720:
  2579                           
  2580                           ; BSR set to: 0
  2581  00032A  0100               	movlb	0	; () banked
  2582  00032C  51A7               	movf	printf@flag& (0+255),w,b
  2583  00032E  0B80               	andlw	128
  2584                           
  2585                           ; Switch size 1, requested type "space"
  2586                           ; Number of cases is 2, Range of values is 0 to 128
  2587                           ; switch strategies available:
  2588                           ; Name         Instructions Cycles
  2589                           ; simple_byte            7     4 (average)
  2590                           ;	Chosen strategy is simple_byte
  2591  000330  0A00               	xorlw	0	; case 0
  2592  000332  B4D8               	btfsc	status,2,c
  2593  000334  D77D               	goto	l2712
  2594  000336  0A80               	xorlw	128	; case 128
  2595  000338  B4D8               	btfsc	status,2,c
  2596  00033A  D7BC               	goto	l2714
  2597  00033C                     l2722:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;doprnt.c: 1524: (putch(c) );
  2601  00033C  0100               	movlb	0	; () banked
  2602  00033E  51A8               	movf	printf@c& (0+255),w,b
  2603  000340  EC2C  F00C         	call	_putch
  2604  000344                     l2724:
  2605  000344  0100               	movlb	0	; () banked
  2606  000346  079F               	decf	printf@prec& (0+255),f,b
  2607  000348  A0D8               	btfss	status,0,c
  2608  00034A  07A0               	decf	(printf@prec+1)& (0+255),f,b
  2609  00034C  0100               	movlb	0	; () banked
  2610  00034E  299F               	incf	printf@prec& (0+255),w,b
  2611  000350  E1EC               	bnz	l2720
  2612  000352  0100               	movlb	0	; () banked
  2613  000354  29A0               	incf	(printf@prec+1)& (0+255),w,b
  2614  000356  A4D8               	btfss	status,2,c
  2615  000358  D7E8               	goto	l2720
  2616  00035A                     l2726:
  2617  00035A  C096  FFF6         	movff	printf@f,tblptrl
  2618  00035E  C097  FFF7         	movff	printf@f+1,tblptrh
  2619  000362  0100               	movlb	0	; () banked
  2620  000364  4B96               	infsnz	printf@f& (0+255),f,b
  2621  000366  2B97               	incf	(printf@f+1)& (0+255),f,b
  2622  000368                     	if	0	;tblptru may be non-zero
  2623  000368                     	endif
  2624  000368                     	if	0	;tblptru may be non-zero
  2625  000368                     	endif
  2626  000368  0008               	tblrd		*
  2627  00036A  CFF5 F0A8          	movff	tablat,printf@c
  2628  00036E  0100               	movlb	0	; () banked
  2629  000370  51A8               	movf	printf@c& (0+255),w,b
  2630  000372  B4D8               	btfsc	status,2,c
  2631  000374  0012               	return	
  2632  000376  D654               	goto	l2630
  2633  000378                     __end_of_printf:
  2634                           	opt stack 0
  2635                           tblptru	equ	0xFF8
  2636                           tblptrh	equ	0xFF7
  2637                           tblptrl	equ	0xFF6
  2638                           tablat	equ	0xFF5
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           intcon	equ	0xFF2
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           postdec1	equ	0xFE5
  2645                           fsr1l	equ	0xFE1
  2646                           indf2	equ	0xFDF
  2647                           postinc2	equ	0xFDE
  2648                           postdec2	equ	0xFDD
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _putch *****************
  2654 ;; Defined at:
  2655 ;;		line 35 in file "lcd.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  data            1    wreg     unsigned char 
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  data            1    4[BANK0 ] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;Total ram usage:        1 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:   10
  2676 ;; This function calls:
  2677 ;;		_lcdNewline
  2678 ;;		_lcdNibble
  2679 ;; This function is called by:
  2680 ;;		_printf
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text10
  2685  001858                     __ptext10:
  2686                           	opt stack 0
  2687  001858                     _putch:
  2688                           	opt stack 17
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;incstack = 0
  2692                           ;putch@data stored from wreg
  2693  001858  0100               	movlb	0	; () banked
  2694  00185A  6F84               	movwf	putch@data& (0+255),b
  2695                           
  2696                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  2697  00185C  0E0A               	movlw	10
  2698  00185E  0100               	movlb	0	; () banked
  2699  001860  1984               	xorwf	putch@data& (0+255),w,b
  2700  001862  A4D8               	btfss	status,2,c
  2701  001864  D003               	goto	l148
  2702                           
  2703                           ; BSR set to: 0
  2704  001866  ECE5  F00C         	call	_lcdNewline	;wreg free
  2705  00186A  0012               	return	
  2706  00186C                     l148:
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;lcd.c: 37: else
  2710                           ;lcd.c: 38: {
  2711                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  2712  00186C  848C               	bsf	3980,2,c	;volatile
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  2716  00186E  0E74               	movlw	116
  2717  001870                     u3157:
  2718  001870  2EE8               	decfsz	wreg,f,c
  2719  001872  D7FE               	bra	u3157
  2720  001874  D000               	nop2	
  2721                           
  2722                           ;lcd.c: 41: lcdNibble(data);
  2723  001876  0100               	movlb	0	; () banked
  2724  001878  5184               	movf	putch@data& (0+255),w,b
  2725  00187A  EC32  F00A         	call	_lcdNibble
  2726  00187E  0012               	return	
  2727  001880                     __end_of_putch:
  2728                           	opt stack 0
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           intcon	equ	0xFF2
  2736                           postinc0	equ	0xFEE
  2737                           wreg	equ	0xFE8
  2738                           postdec1	equ	0xFE5
  2739                           fsr1l	equ	0xFE1
  2740                           indf2	equ	0xFDF
  2741                           postinc2	equ	0xFDE
  2742                           postdec2	equ	0xFDD
  2743                           fsr2h	equ	0xFDA
  2744                           fsr2l	equ	0xFD9
  2745                           status	equ	0xFD8
  2746                           
  2747 ;; *************** function _lcdNewline *****************
  2748 ;; Defined at:
  2749 ;;		line 78 in file "lcd.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;		None
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0, cstack
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;Total ram usage:        0 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    9
  2770 ;; This function calls:
  2771 ;;		_lcdInst
  2772 ;; This function is called by:
  2773 ;;		_putch
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text11
  2778  0019CA                     __ptext11:
  2779                           	opt stack 0
  2780  0019CA                     _lcdNewline:
  2781                           	opt stack 17
  2782                           
  2783                           ;lcd.c: 79: lcdInst(0b11000000);
  2784                           
  2785                           ;incstack = 0
  2786  0019CA  0EC0               	movlw	192
  2787  0019CC  EC17  F00C         	call	_lcdInst
  2788  0019D0  0012               	return		;funcret
  2789  0019D2                     __end_of_lcdNewline:
  2790                           	opt stack 0
  2791                           tblptru	equ	0xFF8
  2792                           tblptrh	equ	0xFF7
  2793                           tblptrl	equ	0xFF6
  2794                           tablat	equ	0xFF5
  2795                           prodh	equ	0xFF4
  2796                           prodl	equ	0xFF3
  2797                           intcon	equ	0xFF2
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           postdec1	equ	0xFE5
  2801                           fsr1l	equ	0xFE1
  2802                           indf2	equ	0xFDF
  2803                           postinc2	equ	0xFDE
  2804                           postdec2	equ	0xFDD
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function ___llmod *****************
  2810 ;; Defined at:
  2811 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  dividend        4   13[BANK0 ] unsigned long 
  2814 ;;  divisor         4   17[BANK0 ] unsigned long 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  counter         1   21[BANK0 ] unsigned char 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  4   13[BANK0 ] unsigned long 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, status,0
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2826 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;Total ram usage:        9 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    7
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_printf
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text12
  2841  001348                     __ptext12:
  2842                           	opt stack 0
  2843  001348                     ___llmod:
  2844                           	opt stack 20
  2845                           
  2846                           ;incstack = 0
  2847  001348  0100               	movlb	0	; () banked
  2848  00134A  5191               	movf	___llmod@divisor& (0+255),w,b
  2849  00134C  0100               	movlb	0	; () banked
  2850  00134E  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  2851  001350  0100               	movlb	0	; () banked
  2852  001352  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  2853  001354  0100               	movlb	0	; () banked
  2854  001356  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  2855  001358  B4D8               	btfsc	status,2,c
  2856  00135A  D03A               	goto	l946
  2857                           
  2858                           ; BSR set to: 0
  2859  00135C  0E01               	movlw	1
  2860  00135E  0100               	movlb	0	; () banked
  2861  001360  6F95               	movwf	___llmod@counter& (0+255),b
  2862  001362  D008               	goto	l2614
  2863  001364                     l2612:
  2864                           
  2865                           ; BSR set to: 0
  2866  001364  0100               	movlb	0	; () banked
  2867  001366  90D8               	bcf	status,0,c
  2868  001368  3791               	rlcf	___llmod@divisor& (0+255),f,b
  2869  00136A  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  2870  00136C  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  2871  00136E  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  2872  001370  0100               	movlb	0	; () banked
  2873  001372  2B95               	incf	___llmod@counter& (0+255),f,b
  2874  001374                     l2614:
  2875                           
  2876                           ; BSR set to: 0
  2877  001374  0100               	movlb	0	; () banked
  2878  001376  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  2879  001378  D7F5               	goto	l2612
  2880  00137A                     l2616:
  2881                           
  2882                           ; BSR set to: 0
  2883  00137A  0100               	movlb	0	; () banked
  2884  00137C  5191               	movf	___llmod@divisor& (0+255),w,b
  2885  00137E  0100               	movlb	0	; () banked
  2886  001380  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  2887  001382  0100               	movlb	0	; () banked
  2888  001384  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  2889  001386  0100               	movlb	0	; () banked
  2890  001388  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  2891  00138A  0100               	movlb	0	; () banked
  2892  00138C  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  2893  00138E  0100               	movlb	0	; () banked
  2894  001390  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2895  001392  0100               	movlb	0	; () banked
  2896  001394  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  2897  001396  0100               	movlb	0	; () banked
  2898  001398  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2899  00139A  A0D8               	btfss	status,0,c
  2900  00139C  D010               	goto	l2620
  2901                           
  2902                           ; BSR set to: 0
  2903  00139E  0100               	movlb	0	; () banked
  2904  0013A0  5191               	movf	___llmod@divisor& (0+255),w,b
  2905  0013A2  0100               	movlb	0	; () banked
  2906  0013A4  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  2907  0013A6  0100               	movlb	0	; () banked
  2908  0013A8  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  2909  0013AA  0100               	movlb	0	; () banked
  2910  0013AC  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2911  0013AE  0100               	movlb	0	; () banked
  2912  0013B0  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  2913  0013B2  0100               	movlb	0	; () banked
  2914  0013B4  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2915  0013B6  0100               	movlb	0	; () banked
  2916  0013B8  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  2917  0013BA  0100               	movlb	0	; () banked
  2918  0013BC  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2919  0013BE                     l2620:
  2920                           
  2921                           ; BSR set to: 0
  2922  0013BE  0100               	movlb	0	; () banked
  2923  0013C0  90D8               	bcf	status,0,c
  2924  0013C2  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  2925  0013C4  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  2926  0013C6  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  2927  0013C8  3391               	rrcf	___llmod@divisor& (0+255),f,b
  2928                           
  2929                           ; BSR set to: 0
  2930  0013CA  0100               	movlb	0	; () banked
  2931  0013CC  2F95               	decfsz	___llmod@counter& (0+255),f,b
  2932  0013CE  D7D5               	goto	l2616
  2933  0013D0                     l946:
  2934                           
  2935                           ; BSR set to: 0
  2936  0013D0  C08D  F08D         	movff	___llmod@dividend,?___llmod
  2937  0013D4  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  2938  0013D8  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  2939  0013DC  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  2940                           
  2941                           ; BSR set to: 0
  2942  0013E0  0012               	return		;funcret
  2943  0013E2                     __end_of___llmod:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           intcon	equ	0xFF2
  2952                           postinc0	equ	0xFEE
  2953                           wreg	equ	0xFE8
  2954                           postdec1	equ	0xFE5
  2955                           fsr1l	equ	0xFE1
  2956                           indf2	equ	0xFDF
  2957                           postinc2	equ	0xFDE
  2958                           postdec2	equ	0xFDD
  2959                           fsr2h	equ	0xFDA
  2960                           fsr2l	equ	0xFD9
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _lcdClear *****************
  2964 ;; Defined at:
  2965 ;;		line 74 in file "lcd.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;		None
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, status,2, status,0, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;Total ram usage:        0 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    9
  2986 ;; This function calls:
  2987 ;;		_lcdInst
  2988 ;; This function is called by:
  2989 ;;		_dateTime
  2990 ;;		_mainMenu
  2991 ;;		_runSelect
  2992 ;;		_runMenu
  2993 ;;		_runTime
  2994 ;;		_runStats
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text13
  2999  0019D2                     __ptext13:
  3000                           	opt stack 0
  3001  0019D2                     _lcdClear:
  3002                           	opt stack 19
  3003                           
  3004                           ;lcd.c: 75: lcdInst(0b00000001);
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;incstack = 0
  3008  0019D2  0E01               	movlw	1
  3009  0019D4  EC17  F00C         	call	_lcdInst
  3010  0019D8  0012               	return		;funcret
  3011  0019DA                     __end_of_lcdClear:
  3012                           	opt stack 0
  3013                           tblptru	equ	0xFF8
  3014                           tblptrh	equ	0xFF7
  3015                           tblptrl	equ	0xFF6
  3016                           tablat	equ	0xFF5
  3017                           prodh	equ	0xFF4
  3018                           prodl	equ	0xFF3
  3019                           intcon	equ	0xFF2
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           postdec1	equ	0xFE5
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           postinc2	equ	0xFDE
  3026                           postdec2	equ	0xFDD
  3027                           fsr2h	equ	0xFDA
  3028                           fsr2l	equ	0xFD9
  3029                           status	equ	0xFD8
  3030                           
  3031 ;; *************** function _pinSetup *****************
  3032 ;; Defined at:
  3033 ;;		line 28 in file "main.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  1    wreg      void 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;Total ram usage:        0 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    7
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text14
  3062  00175C                     __ptext14:
  3063                           	opt stack 0
  3064  00175C                     _pinSetup:
  3065                           	opt stack 23
  3066                           
  3067                           ;main.c: 34: TRISA = 0xFF;
  3068                           
  3069                           ;incstack = 0
  3070  00175C  6892               	setf	3986,c	;volatile
  3071                           
  3072                           ;main.c: 35: TRISB = 0xFF;
  3073  00175E  6893               	setf	3987,c	;volatile
  3074                           
  3075                           ;main.c: 36: TRISC = 0x00;
  3076  001760  0E00               	movlw	0
  3077  001762  6E94               	movwf	3988,c	;volatile
  3078                           
  3079                           ;main.c: 37: TRISD = 0x00;
  3080  001764  0E00               	movlw	0
  3081  001766  6E95               	movwf	3989,c	;volatile
  3082                           
  3083                           ;main.c: 38: TRISE = 0x00;
  3084  001768  0E00               	movlw	0
  3085  00176A  6E96               	movwf	3990,c	;volatile
  3086                           
  3087                           ;main.c: 40: LATA = 0x00;
  3088  00176C  0E00               	movlw	0
  3089  00176E  6E89               	movwf	3977,c	;volatile
  3090                           
  3091                           ;main.c: 41: LATB = 0x00;
  3092  001770  0E00               	movlw	0
  3093  001772  6E8A               	movwf	3978,c	;volatile
  3094                           
  3095                           ;main.c: 42: LATC = 0x00;
  3096  001774  0E00               	movlw	0
  3097  001776  6E8B               	movwf	3979,c	;volatile
  3098                           
  3099                           ;main.c: 43: LATD = 0x00;
  3100  001778  0E00               	movlw	0
  3101  00177A  6E8C               	movwf	3980,c	;volatile
  3102                           
  3103                           ;main.c: 44: LATE = 0x00;
  3104  00177C  0E00               	movlw	0
  3105  00177E  6E8D               	movwf	3981,c	;volatile
  3106                           
  3107                           ;main.c: 46: ADCON0 = 0x00;
  3108  001780  0E00               	movlw	0
  3109  001782  6EC2               	movwf	4034,c	;volatile
  3110                           
  3111                           ;main.c: 47: ADCON1 |= 0x0A;
  3112  001784  0E0A               	movlw	10
  3113  001786  12C1               	iorwf	4033,f,c	;volatile
  3114                           
  3115                           ;main.c: 51: ADCON2 = 0;
  3116  001788  0E00               	movlw	0
  3117  00178A  6EC0               	movwf	4032,c	;volatile
  3118                           
  3119                           ;main.c: 52: ADCON2 |= 0b010;
  3120  00178C  82C0               	bsf	4032,1,c	;volatile
  3121                           
  3122                           ;main.c: 53: ADCON2 |= 0b110<<3;
  3123  00178E  0E30               	movlw	48
  3124  001790  12C0               	iorwf	4032,f,c	;volatile
  3125                           
  3126                           ;main.c: 54: ADCON2 |= 1<<7;
  3127  001792  8EC0               	bsf	4032,7,c	;volatile
  3128                           
  3129                           ;main.c: 57: INT1IE = 1;
  3130  001794  86F0               	bsf	intcon3,3,c	;volatile
  3131                           
  3132                           ;main.c: 58: (INTCONbits.GIE = 1);
  3133  001796  8EF2               	bsf	intcon,7,c	;volatile
  3134  001798  0012               	return		;funcret
  3135  00179A                     __end_of_pinSetup:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           intcon	equ	0xFF2
  3144                           intcon3	equ	0xFF0
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postdec1	equ	0xFE5
  3148                           fsr1l	equ	0xFE1
  3149                           indf2	equ	0xFDF
  3150                           postinc2	equ	0xFDE
  3151                           postdec2	equ	0xFDD
  3152                           fsr2h	equ	0xFDA
  3153                           fsr2l	equ	0xFD9
  3154                           status	equ	0xFD8
  3155                           
  3156 ;; *************** function _initRTC *****************
  3157 ;; Defined at:
  3158 ;;		line 19 in file "RTC.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;		None
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      void 
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;Total ram usage:        0 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    9
  3179 ;; This function calls:
  3180 ;;		_I2C_Master_Init
  3181 ;; This function is called by:
  3182 ;;		_main
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           	psect	text15
  3187  001982                     __ptext15:
  3188                           	opt stack 0
  3189  001982                     _initRTC:
  3190                           	opt stack 21
  3191                           
  3192                           ;RTC.c: 20: I2C_Master_Init(10000);
  3193                           
  3194                           ;incstack = 0
  3195  001982  0E10               	movlw	16
  3196  001984  0100               	movlb	0	; () banked
  3197  001986  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3198  001988  0E27               	movlw	39
  3199  00198A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3200  00198C  0E00               	movlw	0
  3201  00198E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3202  001990  0E00               	movlw	0
  3203  001992  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3204  001994  EC10  F00B         	call	_I2C_Master_Init	;wreg free
  3205  001998  0012               	return		;funcret
  3206  00199A                     __end_of_initRTC:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           prodh	equ	0xFF4
  3213                           prodl	equ	0xFF3
  3214                           intcon	equ	0xFF2
  3215                           intcon3	equ	0xFF0
  3216                           postinc0	equ	0xFEE
  3217                           wreg	equ	0xFE8
  3218                           postdec1	equ	0xFE5
  3219                           fsr1l	equ	0xFE1
  3220                           indf2	equ	0xFDF
  3221                           postinc2	equ	0xFDE
  3222                           postdec2	equ	0xFDD
  3223                           fsr2h	equ	0xFDA
  3224                           fsr2l	equ	0xFD9
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _I2C_Master_Init *****************
  3228 ;; Defined at:
  3229 ;;		line 13 in file "I2C.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  c               4   13[BANK0 ] const unsigned long 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3243 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;Total ram usage:        8 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    8
  3250 ;; This function calls:
  3251 ;;		___lldiv
  3252 ;; This function is called by:
  3253 ;;		_initRTC
  3254 ;;		_testFrequency
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text16
  3259  001620                     __ptext16:
  3260                           	opt stack 0
  3261  001620                     _I2C_Master_Init:
  3262                           	opt stack 21
  3263                           
  3264                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3265                           
  3266                           ;incstack = 0
  3267  001620  0E00               	movlw	0
  3268  001622  6EC7               	movwf	4039,c	;volatile
  3269                           
  3270                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3271  001624  0E28               	movlw	40
  3272  001626  6EC6               	movwf	4038,c	;volatile
  3273                           
  3274                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3275  001628  0E00               	movlw	0
  3276  00162A  6EC5               	movwf	4037,c	;volatile
  3277                           
  3278                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3279  00162C  0E80               	movlw	128
  3280  00162E  0100               	movlb	0	; () banked
  3281  001630  6F80               	movwf	___lldiv@dividend& (0+255),b
  3282  001632  0E96               	movlw	150
  3283  001634  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3284  001636  0E98               	movlw	152
  3285  001638  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3286  00163A  0E00               	movlw	0
  3287  00163C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3288  00163E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3289  001642  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3290  001646  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3291  00164A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3292  00164E  0E02               	movlw	2
  3293  001650                     u2595:
  3294  001650  90D8               	bcf	status,0,c
  3295  001652  0100               	movlb	0	; () banked
  3296  001654  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3297  001656  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3298  001658  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3299  00165A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3300  00165C  2EE8               	decfsz	wreg,f,c
  3301  00165E  D7F8               	goto	u2595
  3302  001660  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3303  001664  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3304  001668  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3305  00166C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3306  001670  ECEC  F007         	call	___lldiv	;wreg free
  3307  001674  0100               	movlb	0	; () banked
  3308  001676  0580               	decf	?___lldiv& (0+255),w,b
  3309  001678  6EC8               	movwf	4040,c	;volatile
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;I2C.c: 20: TRISC3 = 1;
  3313  00167A  8694               	bsf	3988,3,c	;volatile
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;I2C.c: 21: TRISC4 = 1;
  3317  00167C  8894               	bsf	3988,4,c	;volatile
  3318                           
  3319                           ; BSR set to: 0
  3320  00167E  0012               	return		;funcret
  3321  001680                     __end_of_I2C_Master_Init:
  3322                           	opt stack 0
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           prodh	equ	0xFF4
  3328                           prodl	equ	0xFF3
  3329                           intcon	equ	0xFF2
  3330                           intcon3	equ	0xFF0
  3331                           postinc0	equ	0xFEE
  3332                           wreg	equ	0xFE8
  3333                           postdec1	equ	0xFE5
  3334                           fsr1l	equ	0xFE1
  3335                           indf2	equ	0xFDF
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function ___lldiv *****************
  3343 ;; Defined at:
  3344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  dividend        4    0[BANK0 ] unsigned long 
  3347 ;;  divisor         4    4[BANK0 ] unsigned long 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  quotient        4    8[BANK0 ] unsigned long 
  3350 ;;  counter         1   12[BANK0 ] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  4    0[BANK0 ] unsigned long 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3360 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;Total ram usage:       13 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    7
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_I2C_Master_Init
  3371 ;;		_printf
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text17
  3376  000FD8                     __ptext17:
  3377                           	opt stack 0
  3378  000FD8                     ___lldiv:
  3379                           	opt stack 20
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;incstack = 0
  3383  000FD8  0E00               	movlw	0
  3384  000FDA  0100               	movlb	0	; () banked
  3385  000FDC  6F88               	movwf	___lldiv@quotient& (0+255),b
  3386  000FDE  0E00               	movlw	0
  3387  000FE0  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3388  000FE2  0E00               	movlw	0
  3389  000FE4  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3390  000FE6  0E00               	movlw	0
  3391  000FE8  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3392                           
  3393                           ; BSR set to: 0
  3394  000FEA  0100               	movlb	0	; () banked
  3395  000FEC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3396  000FEE  0100               	movlb	0	; () banked
  3397  000FF0  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3398  000FF2  0100               	movlb	0	; () banked
  3399  000FF4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3400  000FF6  0100               	movlb	0	; () banked
  3401  000FF8  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3402  000FFA  B4D8               	btfsc	status,2,c
  3403  000FFC  D042               	goto	l936
  3404                           
  3405                           ; BSR set to: 0
  3406  000FFE  0E01               	movlw	1
  3407  001000  0100               	movlb	0	; () banked
  3408  001002  6F8C               	movwf	___lldiv@counter& (0+255),b
  3409  001004  D008               	goto	l2594
  3410  001006                     l2592:
  3411                           
  3412                           ; BSR set to: 0
  3413  001006  0100               	movlb	0	; () banked
  3414  001008  90D8               	bcf	status,0,c
  3415  00100A  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3416  00100C  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3417  00100E  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3418  001010  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3419  001012  0100               	movlb	0	; () banked
  3420  001014  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3421  001016                     l2594:
  3422                           
  3423                           ; BSR set to: 0
  3424  001016  0100               	movlb	0	; () banked
  3425  001018  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3426  00101A  D7F5               	goto	l2592
  3427  00101C                     l2596:
  3428                           
  3429                           ; BSR set to: 0
  3430  00101C  0100               	movlb	0	; () banked
  3431  00101E  90D8               	bcf	status,0,c
  3432  001020  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3433  001022  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3434  001024  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3435  001026  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3436                           
  3437                           ; BSR set to: 0
  3438  001028  0100               	movlb	0	; () banked
  3439  00102A  5184               	movf	___lldiv@divisor& (0+255),w,b
  3440  00102C  0100               	movlb	0	; () banked
  3441  00102E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3442  001030  0100               	movlb	0	; () banked
  3443  001032  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3444  001034  0100               	movlb	0	; () banked
  3445  001036  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3446  001038  0100               	movlb	0	; () banked
  3447  00103A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3448  00103C  0100               	movlb	0	; () banked
  3449  00103E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3450  001040  0100               	movlb	0	; () banked
  3451  001042  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3452  001044  0100               	movlb	0	; () banked
  3453  001046  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3454  001048  A0D8               	btfss	status,0,c
  3455  00104A  D012               	goto	l2604
  3456                           
  3457                           ; BSR set to: 0
  3458  00104C  0100               	movlb	0	; () banked
  3459  00104E  5184               	movf	___lldiv@divisor& (0+255),w,b
  3460  001050  0100               	movlb	0	; () banked
  3461  001052  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3462  001054  0100               	movlb	0	; () banked
  3463  001056  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3464  001058  0100               	movlb	0	; () banked
  3465  00105A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3466  00105C  0100               	movlb	0	; () banked
  3467  00105E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3468  001060  0100               	movlb	0	; () banked
  3469  001062  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3470  001064  0100               	movlb	0	; () banked
  3471  001066  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3472  001068  0100               	movlb	0	; () banked
  3473  00106A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3474                           
  3475                           ; BSR set to: 0
  3476  00106C  0100               	movlb	0	; () banked
  3477  00106E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3478  001070                     l2604:
  3479                           
  3480                           ; BSR set to: 0
  3481  001070  0100               	movlb	0	; () banked
  3482  001072  90D8               	bcf	status,0,c
  3483  001074  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3484  001076  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3485  001078  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3486  00107A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3487                           
  3488                           ; BSR set to: 0
  3489  00107C  0100               	movlb	0	; () banked
  3490  00107E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3491  001080  D7CD               	goto	l2596
  3492  001082                     l936:
  3493                           
  3494                           ; BSR set to: 0
  3495  001082  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3496  001086  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3497  00108A  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3498  00108E  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3499                           
  3500                           ; BSR set to: 0
  3501  001092  0012               	return		;funcret
  3502  001094                     __end_of___lldiv:
  3503                           	opt stack 0
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           intcon	equ	0xFF2
  3511                           intcon3	equ	0xFF0
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postdec1	equ	0xFE5
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           postinc2	equ	0xFDE
  3518                           postdec2	equ	0xFDD
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _initLCD *****************
  3524 ;; Defined at:
  3525 ;;		line 15 in file "lcd.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;		None
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;Total ram usage:        1 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    9
  3546 ;; This function calls:
  3547 ;;		_lcdInst
  3548 ;; This function is called by:
  3549 ;;		_main
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text18
  3554  0016CC                     __ptext18:
  3555                           	opt stack 0
  3556  0016CC                     _initLCD:
  3557                           	opt stack 21
  3558                           
  3559                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;incstack = 0
  3563  0016CC  0E31               	movlw	49
  3564  0016CE  0100               	movlb	0	; () banked
  3565  0016D0  6F84               	movwf	??_initLCD& (0+255),b
  3566  0016D2  0EB2               	movlw	178
  3567  0016D4                     u3167:
  3568  0016D4  2EE8               	decfsz	wreg,f,c
  3569  0016D6  D7FE               	bra	u3167
  3570  0016D8  2F84               	decfsz	??_initLCD& (0+255),f,b
  3571  0016DA  D7FC               	bra	u3167
  3572  0016DC  F000               	nop	
  3573                           
  3574                           ;lcd.c: 18: lcdInst(0b00110011);
  3575  0016DE  0E33               	movlw	51
  3576  0016E0  EC17  F00C         	call	_lcdInst
  3577                           
  3578                           ;lcd.c: 19: lcdInst(0b00110010);
  3579  0016E4  0E32               	movlw	50
  3580  0016E6  EC17  F00C         	call	_lcdInst
  3581                           
  3582                           ;lcd.c: 20: lcdInst(0b00101000);
  3583  0016EA  0E28               	movlw	40
  3584  0016EC  EC17  F00C         	call	_lcdInst
  3585                           
  3586                           ;lcd.c: 21: lcdInst(0b00001111);
  3587  0016F0  0E0F               	movlw	15
  3588  0016F2  EC17  F00C         	call	_lcdInst
  3589                           
  3590                           ;lcd.c: 22: lcdInst(0b00000110);
  3591  0016F6  0E06               	movlw	6
  3592  0016F8  EC17  F00C         	call	_lcdInst
  3593                           
  3594                           ;lcd.c: 23: lcdInst(0b00000001);
  3595  0016FC  0E01               	movlw	1
  3596  0016FE  EC17  F00C         	call	_lcdInst
  3597                           
  3598                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  3599  001702  0E31               	movlw	49
  3600  001704  0100               	movlb	0	; () banked
  3601  001706  6F84               	movwf	??_initLCD& (0+255),b
  3602  001708  0EB2               	movlw	178
  3603  00170A                     u3177:
  3604  00170A  2EE8               	decfsz	wreg,f,c
  3605  00170C  D7FE               	bra	u3177
  3606  00170E  2F84               	decfsz	??_initLCD& (0+255),f,b
  3607  001710  D7FC               	bra	u3177
  3608  001712  F000               	nop	
  3609  001714  0012               	return		;funcret
  3610  001716                     __end_of_initLCD:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           intcon	equ	0xFF2
  3619                           intcon3	equ	0xFF0
  3620                           postinc0	equ	0xFEE
  3621                           wreg	equ	0xFE8
  3622                           postdec1	equ	0xFE5
  3623                           fsr1l	equ	0xFE1
  3624                           indf2	equ	0xFDF
  3625                           postinc2	equ	0xFDE
  3626                           postdec2	equ	0xFDD
  3627                           fsr2h	equ	0xFDA
  3628                           fsr2l	equ	0xFD9
  3629                           status	equ	0xFD8
  3630                           
  3631 ;; *************** function _lcdInst *****************
  3632 ;; Defined at:
  3633 ;;		line 27 in file "lcd.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  data            1    wreg     unsigned char 
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  data            1    3[BANK0 ] unsigned char 
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      void 
  3640 ;; Registers used:
  3641 ;;		wreg, status,2, status,0, cstack
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/0
  3644 ;;		On exit  : 0/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;Total ram usage:        2 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; Hardware stack levels required when called:    8
  3654 ;; This function calls:
  3655 ;;		_lcdNibble
  3656 ;; This function is called by:
  3657 ;;		_initLCD
  3658 ;;		_lcdClear
  3659 ;;		_lcdNewline
  3660 ;;		_lcdHome
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text19
  3665  00182E                     __ptext19:
  3666                           	opt stack 0
  3667  00182E                     _lcdInst:
  3668                           	opt stack 17
  3669                           
  3670                           ;incstack = 0
  3671                           ;lcdInst@data stored from wreg
  3672  00182E  0100               	movlb	0	; () banked
  3673  001830  6F83               	movwf	lcdInst@data& (0+255),b
  3674                           
  3675                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  3676  001832  948C               	bcf	3980,2,c	;volatile
  3677                           
  3678                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3679  001834  0E74               	movlw	116
  3680  001836                     u3187:
  3681  001836  2EE8               	decfsz	wreg,f,c
  3682  001838  D7FE               	bra	u3187
  3683  00183A  D000               	nop2	
  3684                           
  3685                           ;lcd.c: 30: lcdNibble(data);
  3686  00183C  0100               	movlb	0	; () banked
  3687  00183E  5183               	movf	lcdInst@data& (0+255),w,b
  3688  001840  EC32  F00A         	call	_lcdNibble
  3689                           
  3690                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  3691  001844  0E04               	movlw	4
  3692  001846  0100               	movlb	0	; () banked
  3693  001848  6F82               	movwf	??_lcdInst& (0+255),b
  3694  00184A  0E3D               	movlw	61
  3695  00184C                     u3197:
  3696  00184C  2EE8               	decfsz	wreg,f,c
  3697  00184E  D7FE               	bra	u3197
  3698  001850  2F82               	decfsz	??_lcdInst& (0+255),f,b
  3699  001852  D7FC               	bra	u3197
  3700  001854  D000               	nop2	
  3701  001856  0012               	return		;funcret
  3702  001858                     __end_of_lcdInst:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           tblptrh	equ	0xFF7
  3706                           tblptrl	equ	0xFF6
  3707                           tablat	equ	0xFF5
  3708                           prodh	equ	0xFF4
  3709                           prodl	equ	0xFF3
  3710                           intcon	equ	0xFF2
  3711                           intcon3	equ	0xFF0
  3712                           postinc0	equ	0xFEE
  3713                           wreg	equ	0xFE8
  3714                           postdec1	equ	0xFE5
  3715                           fsr1l	equ	0xFE1
  3716                           indf2	equ	0xFDF
  3717                           postinc2	equ	0xFDE
  3718                           postdec2	equ	0xFDD
  3719                           fsr2h	equ	0xFDA
  3720                           fsr2l	equ	0xFD9
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _lcdNibble *****************
  3724 ;; Defined at:
  3725 ;;		line 46 in file "lcd.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  data            1    wreg     unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  data            1    1[BANK0 ] unsigned char 
  3730 ;;  temp            1    0[BANK0 ] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;Total ram usage:        2 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    7
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_lcdInst
  3751 ;;		_putch
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text20
  3756  001464                     __ptext20:
  3757                           	opt stack 0
  3758  001464                     _lcdNibble:
  3759                           	opt stack 19
  3760                           
  3761                           ;incstack = 0
  3762                           ;lcdNibble@data stored from wreg
  3763  001464  0100               	movlb	0	; () banked
  3764  001466  6F81               	movwf	lcdNibble@data& (0+255),b
  3765                           
  3766                           ;lcd.c: 48: char temp = data & 0xF0;
  3767  001468  0100               	movlb	0	; () banked
  3768  00146A  5181               	movf	lcdNibble@data& (0+255),w,b
  3769  00146C  0BF0               	andlw	240
  3770  00146E  0100               	movlb	0	; () banked
  3771  001470  6F80               	movwf	lcdNibble@temp& (0+255),b
  3772                           
  3773                           ;lcd.c: 49: LATD = LATD & 0x0F;
  3774  001472  508C               	movf	3980,w,c	;volatile
  3775  001474  0B0F               	andlw	15
  3776  001476  6E8C               	movwf	3980,c	;volatile
  3777                           
  3778                           ;lcd.c: 50: LATD = temp | LATD;
  3779  001478  0100               	movlb	0	; () banked
  3780  00147A  5180               	movf	lcdNibble@temp& (0+255),w,b
  3781  00147C  108C               	iorwf	3980,w,c	;volatile
  3782  00147E  6E8C               	movwf	3980,c	;volatile
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  3786  001480  968C               	bcf	3980,3,c	;volatile
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3790  001482  0ED6               	movlw	214
  3791  001484                     u3207:
  3792  001484  D000               	nop2	
  3793  001486  D000               	nop2	
  3794  001488  2EE8               	decfsz	wreg,f,c
  3795  00148A  D7FC               	bra	u3207
  3796  00148C  D000               	nop2	
  3797                           
  3798                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  3799  00148E  868C               	bsf	3980,3,c	;volatile
  3800                           
  3801                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3802  001490  0ED6               	movlw	214
  3803  001492                     u3217:
  3804  001492  D000               	nop2	
  3805  001494  D000               	nop2	
  3806  001496  2EE8               	decfsz	wreg,f,c
  3807  001498  D7FC               	bra	u3217
  3808  00149A  D000               	nop2	
  3809                           
  3810                           ;lcd.c: 58: data = data << 4;
  3811  00149C  0100               	movlb	0	; () banked
  3812  00149E  3981               	swapf	lcdNibble@data& (0+255),w,b
  3813  0014A0  0BF0               	andlw	240
  3814  0014A2  0100               	movlb	0	; () banked
  3815  0014A4  6F81               	movwf	lcdNibble@data& (0+255),b
  3816                           
  3817                           ;lcd.c: 60: temp = data & 0xF0;
  3818  0014A6  0100               	movlb	0	; () banked
  3819  0014A8  5181               	movf	lcdNibble@data& (0+255),w,b
  3820  0014AA  0BF0               	andlw	240
  3821  0014AC  0100               	movlb	0	; () banked
  3822  0014AE  6F80               	movwf	lcdNibble@temp& (0+255),b
  3823                           
  3824                           ;lcd.c: 61: LATD = LATD & 0x0F;
  3825  0014B0  508C               	movf	3980,w,c	;volatile
  3826  0014B2  0B0F               	andlw	15
  3827  0014B4  6E8C               	movwf	3980,c	;volatile
  3828                           
  3829                           ;lcd.c: 62: LATD = temp | LATD;
  3830  0014B6  0100               	movlb	0	; () banked
  3831  0014B8  5180               	movf	lcdNibble@temp& (0+255),w,b
  3832  0014BA  108C               	iorwf	3980,w,c	;volatile
  3833  0014BC  6E8C               	movwf	3980,c	;volatile
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  3837  0014BE  968C               	bcf	3980,3,c	;volatile
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3841  0014C0  0ED6               	movlw	214
  3842  0014C2                     u3227:
  3843  0014C2  D000               	nop2	
  3844  0014C4  D000               	nop2	
  3845  0014C6  2EE8               	decfsz	wreg,f,c
  3846  0014C8  D7FC               	bra	u3227
  3847  0014CA  D000               	nop2	
  3848                           
  3849                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  3850  0014CC  868C               	bsf	3980,3,c	;volatile
  3851                           
  3852                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  3853  0014CE  0ED6               	movlw	214
  3854  0014D0                     u3237:
  3855  0014D0  D000               	nop2	
  3856  0014D2  D000               	nop2	
  3857  0014D4  2EE8               	decfsz	wreg,f,c
  3858  0014D6  D7FC               	bra	u3237
  3859  0014D8  D000               	nop2	
  3860  0014DA  0012               	return		;funcret
  3861  0014DC                     __end_of_lcdNibble:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           intcon3	equ	0xFF0
  3871                           postinc0	equ	0xFEE
  3872                           wreg	equ	0xFE8
  3873                           postdec1	equ	0xFE5
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           postinc2	equ	0xFDE
  3877                           postdec2	equ	0xFDD
  3878                           fsr2h	equ	0xFDA
  3879                           fsr2l	equ	0xFD9
  3880                           status	equ	0xFD8
  3881                           
  3882 ;; *************** function _service *****************
  3883 ;; Defined at:
  3884 ;;		line 140 in file "main.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  key             1  116[COMRAM] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      void 
  3891 ;; Registers used:
  3892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;Total ram usage:       15 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    6
  3905 ;; This function calls:
  3906 ;;		_servoInterruptService
  3907 ;;		_setAngle
  3908 ;;		_sortBatteryInterruptService
  3909 ;; This function is called by:
  3910 ;;		Interrupt level 2
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	intcode
  3915  000008                     __pintcode:
  3916                           	opt stack 0
  3917  000008                     _service:
  3918                           	opt stack 17
  3919                           
  3920                           ;incstack = 0
  3921  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3922  00000A  ED7B  F007         	call	int_func,f	;refresh shadow registers
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           prodh	equ	0xFF4
  3928                           prodl	equ	0xFF3
  3929                           intcon	equ	0xFF2
  3930                           intcon3	equ	0xFF0
  3931                           postinc0	equ	0xFEE
  3932                           wreg	equ	0xFE8
  3933                           postdec1	equ	0xFE5
  3934                           fsr1l	equ	0xFE1
  3935                           indf2	equ	0xFDF
  3936                           postinc2	equ	0xFDE
  3937                           postdec2	equ	0xFDD
  3938                           fsr2h	equ	0xFDA
  3939                           fsr2l	equ	0xFD9
  3940                           status	equ	0xFD8
  3941                           
  3942                           	psect	intcode_body
  3943  000EF6                     __pintcode_body:
  3944                           	opt stack 17
  3945  000EF6                     int_func:
  3946                           	opt stack 17
  3947  000EF6  0006               	pop		; remove dummy address from shadow register refresh
  3948  000EF8  CFFA F067          	movff	pclath,??_service
  3949  000EFC  CFFB F068          	movff	pclatu,??_service+1
  3950  000F00  CFE9 F069          	movff	fsr0l,??_service+2
  3951  000F04  CFEA F06A          	movff	fsr0h,??_service+3
  3952  000F08  CFE1 F06B          	movff	fsr1l,??_service+4
  3953  000F0C  CFE2 F06C          	movff	fsr1h,??_service+5
  3954  000F10  CFD9 F06D          	movff	fsr2l,??_service+6
  3955  000F14  CFDA F06E          	movff	fsr2h,??_service+7
  3956  000F18  CFF3 F06F          	movff	prodl,??_service+8
  3957  000F1C  CFF4 F070          	movff	prodh,??_service+9
  3958  000F20  CFF6 F071          	movff	tblptrl,??_service+10
  3959  000F24  CFF7 F072          	movff	tblptrh,??_service+11
  3960  000F28  CFF8 F073          	movff	tblptru,??_service+12
  3961  000F2C  CFF5 F074          	movff	tablat,??_service+13
  3962                           
  3963                           ;main.c: 142: servoInterruptService();
  3964  000F30  EC32  F003         	call	_servoInterruptService	;wreg free
  3965                           
  3966                           ;main.c: 145: if(INT0IF){ INT0IF = 0;
  3967  000F34  A2F2               	btfss	intcon,1,c	;volatile
  3968  000F36  D003               	goto	i2l3424
  3969  000F38  92F2               	bcf	intcon,1,c	;volatile
  3970                           
  3971                           ;main.c: 146: sortBatteryInterruptService();
  3972  000F3A  ECD8  F00C         	call	_sortBatteryInterruptService	;wreg free
  3973  000F3E                     i2l3424:
  3974                           
  3975                           ;main.c: 147: }
  3976                           ;main.c: 150: if(INT1IF){INT1IF = 0;
  3977  000F3E  A0F0               	btfss	intcon3,0,c	;volatile
  3978  000F40  D02D               	goto	i2l122
  3979  000F42  90F0               	bcf	intcon3,0,c	;volatile
  3980                           
  3981                           ;main.c: 151: char key = (PORTB & 0xF0) >> 4;
  3982  000F44  3881               	swapf	3969,w,c	;volatile
  3983  000F46  0B0F               	andlw	15
  3984  000F48  0B0F               	andlw	15
  3985  000F4A  6E75               	movwf	service@key,c
  3986                           
  3987                           ;main.c: 152: if(key == 0)setAngle(0,45);
  3988  000F4C  5075               	movf	service@key,w,c
  3989  000F4E  A4D8               	btfss	status,2,c
  3990  000F50  D00A               	goto	i2l3434
  3991  000F52  0E00               	movlw	0
  3992  000F54  6E5E               	movwf	setAngle@timer+1,c
  3993  000F56  0E00               	movlw	0
  3994  000F58  6E5D               	movwf	setAngle@timer,c
  3995  000F5A  0E00               	movlw	0
  3996  000F5C  6E60               	movwf	setAngle@angle+1,c
  3997  000F5E  0E2D               	movlw	45
  3998  000F60  6E5F               	movwf	setAngle@angle,c
  3999  000F62  EC50  F009         	call	_setAngle	;wreg free
  4000  000F66                     i2l3434:
  4001                           
  4002                           ;main.c: 153: if(key == 1)setAngle(0,90);
  4003  000F66  0475               	decf	service@key,w,c
  4004  000F68  A4D8               	btfss	status,2,c
  4005  000F6A  D00A               	goto	i2l3438
  4006  000F6C  0E00               	movlw	0
  4007  000F6E  6E5E               	movwf	setAngle@timer+1,c
  4008  000F70  0E00               	movlw	0
  4009  000F72  6E5D               	movwf	setAngle@timer,c
  4010  000F74  0E00               	movlw	0
  4011  000F76  6E60               	movwf	setAngle@angle+1,c
  4012  000F78  0E5A               	movlw	90
  4013  000F7A  6E5F               	movwf	setAngle@angle,c
  4014  000F7C  EC50  F009         	call	_setAngle	;wreg free
  4015  000F80                     i2l3438:
  4016                           
  4017                           ;main.c: 154: if(key == 2)setAngle(0,135);
  4018  000F80  0E02               	movlw	2
  4019  000F82  1875               	xorwf	service@key,w,c
  4020  000F84  A4D8               	btfss	status,2,c
  4021  000F86  D00A               	goto	i2l122
  4022  000F88  0E00               	movlw	0
  4023  000F8A  6E5E               	movwf	setAngle@timer+1,c
  4024  000F8C  0E00               	movlw	0
  4025  000F8E  6E5D               	movwf	setAngle@timer,c
  4026  000F90  0E00               	movlw	0
  4027  000F92  6E60               	movwf	setAngle@angle+1,c
  4028  000F94  0E87               	movlw	135
  4029  000F96  6E5F               	movwf	setAngle@angle,c
  4030  000F98  EC50  F009         	call	_setAngle	;wreg free
  4031  000F9C                     i2l122:
  4032  000F9C  C074  FFF5         	movff	??_service+13,tablat
  4033  000FA0  C073  FFF8         	movff	??_service+12,tblptru
  4034  000FA4  C072  FFF7         	movff	??_service+11,tblptrh
  4035  000FA8  C071  FFF6         	movff	??_service+10,tblptrl
  4036  000FAC  C070  FFF4         	movff	??_service+9,prodh
  4037  000FB0  C06F  FFF3         	movff	??_service+8,prodl
  4038  000FB4  C06E  FFDA         	movff	??_service+7,fsr2h
  4039  000FB8  C06D  FFD9         	movff	??_service+6,fsr2l
  4040  000FBC  C06C  FFE2         	movff	??_service+5,fsr1h
  4041  000FC0  C06B  FFE1         	movff	??_service+4,fsr1l
  4042  000FC4  C06A  FFEA         	movff	??_service+3,fsr0h
  4043  000FC8  C069  FFE9         	movff	??_service+2,fsr0l
  4044  000FCC  C068  FFFB         	movff	??_service+1,pclatu
  4045  000FD0  C067  FFFA         	movff	??_service,pclath
  4046  000FD4  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4047  000FD6  0011               	retfie		f
  4048  000FD8                     __end_of_service:
  4049                           	opt stack 0
  4050                           pclatu	equ	0xFFB
  4051                           pclath	equ	0xFFA
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           intcon3	equ	0xFF0
  4060                           postinc0	equ	0xFEE
  4061                           fsr0h	equ	0xFEA
  4062                           fsr0l	equ	0xFE9
  4063                           wreg	equ	0xFE8
  4064                           postdec1	equ	0xFE5
  4065                           fsr1h	equ	0xFE2
  4066                           fsr1l	equ	0xFE1
  4067                           indf2	equ	0xFDF
  4068                           postinc2	equ	0xFDE
  4069                           postdec2	equ	0xFDD
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _sortBatteryInterruptService *****************
  4075 ;; Defined at:
  4076 ;;		line 161 in file "main.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    5
  4097 ;; This function calls:
  4098 ;;		i2_lcdClear
  4099 ;;		i2_printf
  4100 ;; This function is called by:
  4101 ;;		_service
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text22
  4106  0019B0                     __ptext22:
  4107                           	opt stack 0
  4108  0019B0                     _sortBatteryInterruptService:
  4109                           	opt stack 17
  4110                           
  4111                           ;main.c: 163: lcdClear();
  4112                           
  4113                           ;incstack = 0
  4114  0019B0  ECF1  F00C         	call	i2_lcdClear	;wreg free
  4115                           
  4116                           ;main.c: 164: printf("sorting!");
  4117  0019B4  0EEA               	movlw	low STR_1
  4118  0019B6  6E17               	movwf	i2printf@f,c
  4119  0019B8  0EFF               	movlw	high STR_1
  4120  0019BA  6E18               	movwf	i2printf@f+1,c
  4121  0019BC  ECBC  F001         	call	i2_printf	;wreg free
  4122  0019C0  0012               	return		;funcret
  4123  0019C2                     __end_of_sortBatteryInterruptService:
  4124                           	opt stack 0
  4125                           pclatu	equ	0xFFB
  4126                           pclath	equ	0xFFA
  4127                           tblptru	equ	0xFF8
  4128                           tblptrh	equ	0xFF7
  4129                           tblptrl	equ	0xFF6
  4130                           tablat	equ	0xFF5
  4131                           prodh	equ	0xFF4
  4132                           prodl	equ	0xFF3
  4133                           intcon	equ	0xFF2
  4134                           intcon3	equ	0xFF0
  4135                           postinc0	equ	0xFEE
  4136                           fsr0h	equ	0xFEA
  4137                           fsr0l	equ	0xFE9
  4138                           wreg	equ	0xFE8
  4139                           postdec1	equ	0xFE5
  4140                           fsr1h	equ	0xFE2
  4141                           fsr1l	equ	0xFE1
  4142                           indf2	equ	0xFDF
  4143                           postinc2	equ	0xFDE
  4144                           postdec2	equ	0xFDD
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _setAngle *****************
  4150 ;; Defined at:
  4151 ;;		line 34 in file "servo.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  timer           2   92[COMRAM] int 
  4154 ;;  angle           2   94[COMRAM] int 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4166 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;Total ram usage:       10 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    5
  4173 ;; This function calls:
  4174 ;;		_angleToPulse
  4175 ;;		i2_lcdClear
  4176 ;;		i2_printf
  4177 ;; This function is called by:
  4178 ;;		_service
  4179 ;;		_initServo
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text23
  4184  0012A0                     __ptext23:
  4185                           	opt stack 0
  4186  0012A0                     _setAngle:
  4187                           	opt stack 17
  4188                           
  4189                           ;servo.c: 35: pulse[timer] = 0xffff - angleToPulse(angle);
  4190                           
  4191                           ;incstack = 0
  4192  0012A0  C05F  F046         	movff	setAngle@angle,angleToPulse@angle
  4193  0012A4  C060  F047         	movff	setAngle@angle+1,angleToPulse@angle+1
  4194  0012A8  ECF2  F004         	call	_angleToPulse	;wreg free
  4195  0012AC  1E46               	comf	?_angleToPulse,f,c
  4196  0012AE  1E47               	comf	?_angleToPulse+1,f,c
  4197  0012B0  1E48               	comf	?_angleToPulse+2,f,c
  4198  0012B2  1E49               	comf	?_angleToPulse+3,f,c
  4199  0012B4  2A46               	incf	?_angleToPulse,f,c
  4200  0012B6  0E00               	movlw	0
  4201  0012B8  2247               	addwfc	?_angleToPulse+1,f,c
  4202  0012BA  2248               	addwfc	?_angleToPulse+2,f,c
  4203  0012BC  2249               	addwfc	?_angleToPulse+3,f,c
  4204  0012BE  0EFF               	movlw	255
  4205  0012C0  2446               	addwf	?_angleToPulse,w,c
  4206  0012C2  6E61               	movwf	??_setAngle& (0+255),c
  4207  0012C4  0EFF               	movlw	255
  4208  0012C6  2047               	addwfc	?_angleToPulse+1,w,c
  4209  0012C8  6E62               	movwf	(??_setAngle+1)& (0+255),c
  4210  0012CA  0E00               	movlw	0
  4211  0012CC  2048               	addwfc	?_angleToPulse+2,w,c
  4212  0012CE  6E63               	movwf	(??_setAngle+2)& (0+255),c
  4213  0012D0  0E00               	movlw	0
  4214  0012D2  2049               	addwfc	?_angleToPulse+3,w,c
  4215  0012D4  6E64               	movwf	(??_setAngle+3)& (0+255),c
  4216  0012D6  0EAB               	movlw	low _pulse
  4217  0012D8  6E65               	movwf	(??_setAngle+4)& (0+255),c
  4218  0012DA  0E00               	movlw	high _pulse
  4219  0012DC  6E66               	movwf	(??_setAngle+5)& (0+255),c
  4220  0012DE  90D8               	bcf	status,0,c
  4221  0012E0  345D               	rlcf	setAngle@timer,w,c
  4222  0012E2  6ED9               	movwf	fsr2l,c
  4223  0012E4  345E               	rlcf	setAngle@timer+1,w,c
  4224  0012E6  6EDA               	movwf	fsr2h,c
  4225  0012E8  90D8               	bcf	status,0,c
  4226  0012EA  36D9               	rlcf	fsr2l,f,c
  4227  0012EC  36DA               	rlcf	fsr2h,f,c
  4228  0012EE  5065               	movf	??_setAngle+4,w,c
  4229  0012F0  26D9               	addwf	fsr2l,f,c
  4230  0012F2  5066               	movf	??_setAngle+5,w,c
  4231  0012F4  22DA               	addwfc	fsr2h,f,c
  4232  0012F6  C061  FFDE         	movff	??_setAngle,postinc2
  4233  0012FA  C062  FFDE         	movff	??_setAngle+1,postinc2
  4234  0012FE  C063  FFDE         	movff	??_setAngle+2,postinc2
  4235  001302  C064  FFDE         	movff	??_setAngle+3,postinc2
  4236                           
  4237                           ;servo.c: 36: lcdClear();
  4238  001306  ECF1  F00C         	call	i2_lcdClear	;wreg free
  4239                           
  4240                           ;servo.c: 37: printf("%ld",pulse[timer]);
  4241  00130A  0EFB               	movlw	low STR_4
  4242  00130C  6E17               	movwf	i2printf@f,c
  4243  00130E  0EFF               	movlw	high STR_4
  4244  001310  6E18               	movwf	i2printf@f+1,c
  4245  001312  0EAB               	movlw	low _pulse
  4246  001314  6E61               	movwf	??_setAngle& (0+255),c
  4247  001316  0E00               	movlw	high _pulse
  4248  001318  6E62               	movwf	(??_setAngle+1)& (0+255),c
  4249  00131A  90D8               	bcf	status,0,c
  4250  00131C  345D               	rlcf	setAngle@timer,w,c
  4251  00131E  6ED9               	movwf	fsr2l,c
  4252  001320  345E               	rlcf	setAngle@timer+1,w,c
  4253  001322  6EDA               	movwf	fsr2h,c
  4254  001324  90D8               	bcf	status,0,c
  4255  001326  36D9               	rlcf	fsr2l,f,c
  4256  001328  36DA               	rlcf	fsr2h,f,c
  4257  00132A  5061               	movf	??_setAngle,w,c
  4258  00132C  26D9               	addwf	fsr2l,f,c
  4259  00132E  5062               	movf	??_setAngle+1,w,c
  4260  001330  22DA               	addwfc	fsr2h,f,c
  4261  001332  CFDE F019          	movff	postinc2,?i2_printf+2
  4262  001336  CFDE F01A          	movff	postinc2,?i2_printf+3
  4263  00133A  CFDE F01B          	movff	postinc2,?i2_printf+4
  4264  00133E  CFDE F01C          	movff	postinc2,?i2_printf+5
  4265  001342  ECBC  F001         	call	i2_printf	;wreg free
  4266  001346  0012               	return		;funcret
  4267  001348                     __end_of_setAngle:
  4268                           	opt stack 0
  4269                           pclatu	equ	0xFFB
  4270                           pclath	equ	0xFFA
  4271                           tblptru	equ	0xFF8
  4272                           tblptrh	equ	0xFF7
  4273                           tblptrl	equ	0xFF6
  4274                           tablat	equ	0xFF5
  4275                           prodh	equ	0xFF4
  4276                           prodl	equ	0xFF3
  4277                           intcon	equ	0xFF2
  4278                           intcon3	equ	0xFF0
  4279                           postinc0	equ	0xFEE
  4280                           fsr0h	equ	0xFEA
  4281                           fsr0l	equ	0xFE9
  4282                           wreg	equ	0xFE8
  4283                           postdec1	equ	0xFE5
  4284                           fsr1h	equ	0xFE2
  4285                           fsr1l	equ	0xFE1
  4286                           indf2	equ	0xFDF
  4287                           postinc2	equ	0xFDE
  4288                           postdec2	equ	0xFDD
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function i2_printf *****************
  4294 ;; Defined at:
  4295 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  f               2   22[COMRAM] PTR const unsigned char 
  4298 ;;		 -> STR_16(17), STR_15(18), STR_14(17), STR_13(18), 
  4299 ;;		 -> STR_12(17), STR_11(19), STR_10(17), STR_9(18), 
  4300 ;;		 -> STR_8(17), STR_7(18), STR_6(17), STR_5(18), 
  4301 ;;		 -> STR_4(4), STR_3(9), STR_2(8), STR_1(9), 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  printf          4   35[COMRAM] unsigned long 
  4304 ;;  printf          4    0        struct .
  4305 ;;  printf          3    0        PTR const unsigned char 
  4306 ;;  printf          2   33[COMRAM] PTR void [1]
  4307 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4308 ;;  printf          2   31[COMRAM] int 
  4309 ;;  printf          2    0        unsigned int 
  4310 ;;  printf          1   40[COMRAM] char 
  4311 ;;  printf          1   39[COMRAM] unsigned char 
  4312 ;;  printf          1   30[COMRAM] unsigned char 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  2   22[COMRAM] int 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:       19 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    4
  4329 ;; This function calls:
  4330 ;;		i2___lldiv
  4331 ;;		i2___llmod
  4332 ;;		i2_putch
  4333 ;; This function is called by:
  4334 ;;		_sortBatteryInterruptService
  4335 ;;		_setAngle
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text24
  4340  000378                     __ptext24:
  4341                           	opt stack 0
  4342  000378                     i2_printf:
  4343                           	opt stack 17
  4344                           
  4345                           ;doprnt.c: 466: va_list ap;
  4346                           ;doprnt.c: 499: signed char c;
  4347                           ;doprnt.c: 504: int prec;
  4348                           ;doprnt.c: 508: unsigned char flag;
  4349                           ;doprnt.c: 523: union {
  4350                           ;doprnt.c: 524: unsigned long vd;
  4351                           ;doprnt.c: 525: double integ;
  4352                           ;doprnt.c: 526: } tmpval;
  4353                           ;doprnt.c: 528: unsigned long val;
  4354                           ;doprnt.c: 529: unsigned len;
  4355                           ;doprnt.c: 530: const char * cp;
  4356                           ;doprnt.c: 533: *ap = __va_start();
  4357                           
  4358                           ;incstack = 0
  4359  000378  0E19               	movlw	low (?i2_printf+2)
  4360  00037A  6E22               	movwf	i2printf@ap,c
  4361  00037C  0E00               	movlw	high (?i2_printf+2)
  4362  00037E  6E23               	movwf	i2printf@ap+1,c
  4363                           
  4364                           ;doprnt.c: 536: while(c = *f++) {
  4365  000380  D164               	goto	i2l3246
  4366  000382                     i2l3150:
  4367                           
  4368                           ;doprnt.c: 538: if(c != '%')
  4369  000382  0E25               	movlw	37
  4370  000384  1829               	xorwf	i2printf@c,w,c
  4371  000386  B4D8               	btfsc	status,2,c
  4372  000388  D004               	goto	i2l3154
  4373                           
  4374                           ;doprnt.c: 540: {
  4375                           ;doprnt.c: 541: (putch(c) );
  4376  00038A  5029               	movf	i2printf@c,w,c
  4377  00038C  EC9F  F00C         	call	i2_putch
  4378                           
  4379                           ;doprnt.c: 542: continue;
  4380  000390  D15C               	goto	i2l3246
  4381  000392                     i2l3154:
  4382                           
  4383                           ;doprnt.c: 543: }
  4384                           ;doprnt.c: 548: flag = 0;
  4385  000392  0E00               	movlw	0
  4386  000394  6E28               	movwf	i2printf@flag,c
  4387                           
  4388                           ;doprnt.c: 635: switch(c = *f++) {
  4389                           
  4390                           ;doprnt.c: 633: loop:
  4391  000396  D012               	goto	i2l3168
  4392  000398                     i2l3156:
  4393                           
  4394                           ;doprnt.c: 643: flag |= 0x10;
  4395  000398  8828               	bsf	i2printf@flag,4,c
  4396                           
  4397                           ;doprnt.c: 644: goto loop;
  4398  00039A  D010               	goto	i2l3168
  4399  00039C                     i2l3158:
  4400                           
  4401                           ;doprnt.c: 721: flag |= 0x80;
  4402  00039C  8E28               	bsf	i2printf@flag,7,c
  4403                           
  4404                           ;doprnt.c: 723: break;
  4405  00039E  D02B               	goto	i2l556
  4406  0003A0                     i2l3160:
  4407                           
  4408                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4409  0003A0  C022  FFD9         	movff	i2printf@ap,fsr2l
  4410  0003A4  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4411  0003A8  50DF               	movf	indf2,w,c
  4412  0003AA  6E29               	movwf	i2printf@c,c
  4413  0003AC  0E02               	movlw	2
  4414  0003AE  2622               	addwf	i2printf@ap,f,c
  4415  0003B0  0E00               	movlw	0
  4416  0003B2  2223               	addwfc	i2printf@ap+1,f,c
  4417  0003B4                     i2l3164:
  4418                           
  4419                           ;doprnt.c: 809: (putch(c) );
  4420  0003B4  5029               	movf	i2printf@c,w,c
  4421  0003B6  EC9F  F00C         	call	i2_putch
  4422                           
  4423                           ;doprnt.c: 810: continue;
  4424  0003BA  D147               	goto	i2l3246
  4425  0003BC                     i2l3168:
  4426  0003BC  C017  FFF6         	movff	i2printf@f,tblptrl
  4427  0003C0  C018  FFF7         	movff	i2printf@f+1,tblptrh
  4428  0003C4  4A17               	infsnz	i2printf@f,f,c
  4429  0003C6  2A18               	incf	i2printf@f+1,f,c
  4430  0003C8                     	if	0	;tblptru may be non-zero
  4431  0003C8                     	endif
  4432  0003C8                     	if	0	;tblptru may be non-zero
  4433  0003C8                     	endif
  4434  0003C8  0008               	tblrd		*
  4435  0003CA  CFF5 F029          	movff	tablat,i2printf@c
  4436  0003CE  5029               	movf	i2printf@c,w,c
  4437                           
  4438                           ; Switch size 1, requested type "space"
  4439                           ; Number of cases is 6, Range of values is 0 to 120
  4440                           ; switch strategies available:
  4441                           ; Name         Instructions Cycles
  4442                           ; simple_byte           19    10 (average)
  4443                           ;	Chosen strategy is simple_byte
  4444  0003D0  0A00               	xorlw	0	; case 0
  4445  0003D2  B4D8               	btfsc	status,2,c
  4446  0003D4  0012               	return	
  4447  0003D6  0A63               	xorlw	99	; case 99
  4448  0003D8  B4D8               	btfsc	status,2,c
  4449  0003DA  D7E2               	goto	i2l3160
  4450  0003DC  0A07               	xorlw	7	; case 100
  4451  0003DE  B4D8               	btfsc	status,2,c
  4452  0003E0  D00A               	goto	i2l556
  4453  0003E2  0A0D               	xorlw	13	; case 105
  4454  0003E4  B4D8               	btfsc	status,2,c
  4455  0003E6  D007               	goto	i2l556
  4456  0003E8  0A05               	xorlw	5	; case 108
  4457  0003EA  B4D8               	btfsc	status,2,c
  4458  0003EC  D7D5               	goto	i2l3156
  4459  0003EE  0A14               	xorlw	20	; case 120
  4460  0003F0  B4D8               	btfsc	status,2,c
  4461  0003F2  D7D4               	goto	i2l3158
  4462  0003F4  D7DF               	goto	i2l3164
  4463  0003F6                     i2l556:
  4464                           
  4465                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4466  0003F6  BE28               	btfsc	i2printf@flag,7,c
  4467  0003F8  D02E               	goto	i2l560
  4468                           
  4469                           ;doprnt.c: 1253: {
  4470                           ;doprnt.c: 1255: if(flag & 0x10)
  4471  0003FA  A828               	btfss	i2printf@flag,4,c
  4472  0003FC  D00E               	goto	i2l3176
  4473                           
  4474                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4475  0003FE  C022  FFD9         	movff	i2printf@ap,fsr2l
  4476  000402  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4477  000406  CFDE F024          	movff	postinc2,i2printf@val
  4478  00040A  CFDE F025          	movff	postinc2,i2printf@val+1
  4479  00040E  CFDE F026          	movff	postinc2,i2printf@val+2
  4480  000412  CFDE F027          	movff	postinc2,i2printf@val+3
  4481  000416  0E04               	movlw	4
  4482  000418  D00E               	goto	L3
  4483  00041A                     i2l3176:
  4484                           
  4485                           ;doprnt.c: 1257: else
  4486                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4487  00041A  C022  FFD9         	movff	i2printf@ap,fsr2l
  4488  00041E  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4489  000422  CFDE F024          	movff	postinc2,i2printf@val
  4490  000426  CFDD F025          	movff	postdec2,i2printf@val+1
  4491  00042A  0E00               	movlw	0
  4492  00042C  BE25               	btfsc	i2printf@val+1,7,c
  4493  00042E  0EFF               	movlw	-1
  4494  000430  6E26               	movwf	i2printf@val+2,c
  4495  000432  6E27               	movwf	i2printf@val+3,c
  4496  000434  0E02               	movlw	2
  4497  000436                     L3:
  4498  000436  2622               	addwf	i2printf@ap,f,c
  4499  000438  0E00               	movlw	0
  4500  00043A  2223               	addwfc	i2printf@ap+1,f,c
  4501                           
  4502                           ;doprnt.c: 1261: if((long)val < 0) {
  4503  00043C  AE27               	btfss	i2printf@val+3,7,c
  4504  00043E  D06A               	goto	i2l3224
  4505                           
  4506                           ;doprnt.c: 1262: flag |= 0x03;
  4507  000440  0E03               	movlw	3
  4508  000442  1228               	iorwf	i2printf@flag,f,c
  4509                           
  4510                           ;doprnt.c: 1263: val = -val;
  4511  000444  1E27               	comf	i2printf@val+3,f,c
  4512  000446  1E26               	comf	i2printf@val+2,f,c
  4513  000448  1E25               	comf	i2printf@val+1,f,c
  4514  00044A  6C24               	negf	i2printf@val,c
  4515  00044C  0E00               	movlw	0
  4516  00044E  2225               	addwfc	i2printf@val+1,f,c
  4517  000450  2226               	addwfc	i2printf@val+2,f,c
  4518  000452  2227               	addwfc	i2printf@val+3,f,c
  4519                           
  4520                           ;doprnt.c: 1264: }
  4521                           ;doprnt.c: 1266: }
  4522  000454  D05F               	goto	i2l3224
  4523  000456                     i2l560:
  4524                           
  4525                           ;doprnt.c: 1268: else
  4526                           ;doprnt.c: 1273: {
  4527                           ;doprnt.c: 1281: if(flag & 0x10)
  4528  000456  A828               	btfss	i2printf@flag,4,c
  4529  000458  D00E               	goto	i2l3190
  4530                           
  4531                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4532  00045A  C022  FFD9         	movff	i2printf@ap,fsr2l
  4533  00045E  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4534  000462  CFDE F024          	movff	postinc2,i2printf@val
  4535  000466  CFDE F025          	movff	postinc2,i2printf@val+1
  4536  00046A  CFDE F026          	movff	postinc2,i2printf@val+2
  4537  00046E  CFDE F027          	movff	postinc2,i2printf@val+3
  4538  000472  0E04               	movlw	4
  4539  000474  D00F               	goto	L4
  4540  000476                     i2l3190:
  4541                           
  4542                           ;doprnt.c: 1283: else
  4543                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4544  000476  C022  FFD9         	movff	i2printf@ap,fsr2l
  4545  00047A  C023  FFDA         	movff	i2printf@ap+1,fsr2h
  4546  00047E  CFDE F01D          	movff	postinc2,??i2_printf
  4547  000482  CFDD F01E          	movff	postdec2,??i2_printf+1
  4548  000486  C01D  F024         	movff	??i2_printf,i2printf@val
  4549  00048A  C01E  F025         	movff	??i2_printf+1,i2printf@val+1
  4550  00048E  6A26               	clrf	i2printf@val+2,c
  4551  000490  6A27               	clrf	i2printf@val+3,c
  4552  000492  0E02               	movlw	2
  4553  000494                     L4:
  4554  000494  2622               	addwf	i2printf@ap,f,c
  4555  000496  0E00               	movlw	0
  4556  000498  2223               	addwfc	i2printf@ap+1,f,c
  4557                           
  4558                           ;doprnt.c: 1287: }
  4559                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4560  00049A  D03C               	goto	i2l3224
  4561  00049C                     i2l3194:
  4562                           
  4563                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4564  00049C  0E01               	movlw	1
  4565  00049E  6E29               	movwf	i2printf@c,c
  4566  0004A0                     i2l3196:
  4567  0004A0  0E0A               	movlw	10
  4568  0004A2  1829               	xorwf	i2printf@c,w,c
  4569  0004A4  B4D8               	btfsc	status,2,c
  4570  0004A6  D03E               	goto	i2l3226
  4571                           
  4572                           ;doprnt.c: 1306: if(val < dpowers[c])
  4573  0004A8  5029               	movf	i2printf@c,w,c
  4574  0004AA  0D04               	mullw	4
  4575  0004AC  0E9D               	movlw	low _dpowers
  4576  0004AE  24F3               	addwf	prodl,w,c
  4577  0004B0  6EF6               	movwf	tblptrl,c
  4578  0004B2  0EFE               	movlw	high _dpowers
  4579  0004B4  20F4               	addwfc	prodh,w,c
  4580  0004B6  6EF7               	movwf	tblptrh,c
  4581  0004B8                     	if	0	;There are less than 3 active tblptr bytes
  4582  0004B8                     	endif
  4583  0004B8  0009               	tblrd		*+
  4584  0004BA  50F5               	movf	tablat,w,c
  4585  0004BC  5C24               	subwf	i2printf@val,w,c
  4586  0004BE  0009               	tblrd		*+
  4587  0004C0  50F5               	movf	tablat,w,c
  4588  0004C2  5825               	subwfb	i2printf@val+1,w,c
  4589  0004C4  0009               	tblrd		*+
  4590  0004C6  50F5               	movf	tablat,w,c
  4591  0004C8  5826               	subwfb	i2printf@val+2,w,c
  4592  0004CA  0009               	tblrd		*+
  4593  0004CC  50F5               	movf	tablat,w,c
  4594  0004CE  5827               	subwfb	i2printf@val+3,w,c
  4595  0004D0  A0D8               	btfss	status,0,c
  4596  0004D2  D028               	goto	i2l3226
  4597                           
  4598                           ;doprnt.c: 1307: break;
  4599  0004D4  2A29               	incf	i2printf@c,f,c
  4600  0004D6  D7E4               	goto	i2l3196
  4601  0004D8                     i2l3208:
  4602                           
  4603                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4604  0004D8  0E01               	movlw	1
  4605  0004DA  6E29               	movwf	i2printf@c,c
  4606  0004DC                     i2l3210:
  4607  0004DC  0E08               	movlw	8
  4608  0004DE  1829               	xorwf	i2printf@c,w,c
  4609  0004E0  B4D8               	btfsc	status,2,c
  4610  0004E2  D020               	goto	i2l3226
  4611                           
  4612                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4613  0004E4  5029               	movf	i2printf@c,w,c
  4614  0004E6  0D04               	mullw	4
  4615  0004E8  0EC5               	movlw	low _hexpowers
  4616  0004EA  24F3               	addwf	prodl,w,c
  4617  0004EC  6EF6               	movwf	tblptrl,c
  4618  0004EE  0EFE               	movlw	high _hexpowers
  4619  0004F0  20F4               	addwfc	prodh,w,c
  4620  0004F2  6EF7               	movwf	tblptrh,c
  4621  0004F4                     	if	0	;There are less than 3 active tblptr bytes
  4622  0004F4                     	endif
  4623  0004F4  0009               	tblrd		*+
  4624  0004F6  50F5               	movf	tablat,w,c
  4625  0004F8  5C24               	subwf	i2printf@val,w,c
  4626  0004FA  0009               	tblrd		*+
  4627  0004FC  50F5               	movf	tablat,w,c
  4628  0004FE  5825               	subwfb	i2printf@val+1,w,c
  4629  000500  0009               	tblrd		*+
  4630  000502  50F5               	movf	tablat,w,c
  4631  000504  5826               	subwfb	i2printf@val+2,w,c
  4632  000506  0009               	tblrd		*+
  4633  000508  50F5               	movf	tablat,w,c
  4634  00050A  5827               	subwfb	i2printf@val+3,w,c
  4635  00050C  A0D8               	btfss	status,0,c
  4636  00050E  D00A               	goto	i2l3226
  4637                           
  4638                           ;doprnt.c: 1318: break;
  4639  000510  2A29               	incf	i2printf@c,f,c
  4640  000512  D7E4               	goto	i2l3210
  4641  000514                     i2l3224:
  4642  000514  5028               	movf	i2printf@flag,w,c
  4643  000516  0B80               	andlw	128
  4644                           
  4645                           ; Switch size 1, requested type "space"
  4646                           ; Number of cases is 2, Range of values is 0 to 128
  4647                           ; switch strategies available:
  4648                           ; Name         Instructions Cycles
  4649                           ; simple_byte            7     4 (average)
  4650                           ;	Chosen strategy is simple_byte
  4651  000518  0A00               	xorlw	0	; case 0
  4652  00051A  B4D8               	btfsc	status,2,c
  4653  00051C  D7BF               	goto	i2l3194
  4654  00051E  0A80               	xorlw	128	; case 128
  4655  000520  B4D8               	btfsc	status,2,c
  4656  000522  D7DA               	goto	i2l3208
  4657  000524                     i2l3226:
  4658                           
  4659                           ;doprnt.c: 1422: {
  4660                           ;doprnt.c: 1438: if(flag & 0x03)
  4661  000524  C028  F01D         	movff	i2printf@flag,??i2_printf
  4662  000528  0E03               	movlw	3
  4663  00052A  161D               	andwf	??i2_printf,f,c
  4664  00052C  B4D8               	btfsc	status,2,c
  4665  00052E  D003               	goto	i2l3230
  4666                           
  4667                           ;doprnt.c: 1439: (putch('-') );
  4668  000530  0E2D               	movlw	45
  4669  000532  EC9F  F00C         	call	i2_putch
  4670  000536                     i2l3230:
  4671                           
  4672                           ;doprnt.c: 1469: }
  4673                           ;doprnt.c: 1472: prec = c;
  4674  000536  5029               	movf	i2printf@c,w,c
  4675  000538  6E20               	movwf	i2printf@prec,c
  4676  00053A  6A21               	clrf	i2printf@prec+1,c
  4677  00053C  BE20               	btfsc	i2printf@prec,7,c
  4678  00053E  0621               	decf	i2printf@prec+1,f,c
  4679                           
  4680                           ;doprnt.c: 1474: while(prec--) {
  4681  000540  D07C               	goto	i2l3244
  4682  000542                     i2l3232:
  4683                           
  4684                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4685  000542  C020  F01D         	movff	i2printf@prec,??i2_printf
  4686  000546  C021  F01E         	movff	i2printf@prec+1,??i2_printf+1
  4687  00054A  90D8               	bcf	status,0,c
  4688  00054C  361D               	rlcf	??i2_printf,f,c
  4689  00054E  361E               	rlcf	??i2_printf+1,f,c
  4690  000550  90D8               	bcf	status,0,c
  4691  000552  361D               	rlcf	??i2_printf,f,c
  4692  000554  361E               	rlcf	??i2_printf+1,f,c
  4693  000556  0E9D               	movlw	low _dpowers
  4694  000558  241D               	addwf	??i2_printf,w,c
  4695  00055A  6EF6               	movwf	tblptrl,c
  4696  00055C  0EFE               	movlw	high _dpowers
  4697  00055E  201E               	addwfc	??i2_printf+1,w,c
  4698  000560  6EF7               	movwf	tblptrh,c
  4699  000562                     	if	0	;There are less than 3 active tblptr bytes
  4700  000562                     	endif
  4701  000562  0009               	tblrd		*+
  4702  000564  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  4703  000568  0009               	tblrd		*+
  4704  00056A  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  4705  00056E  0009               	tblrd		*+
  4706  000570  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  4707  000574  000A               	tblrd		*-
  4708  000576  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  4709  00057A  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  4710  00057E  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  4711  000582  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  4712  000586  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  4713  00058A  ECF1  F009         	call	i2___lldiv	;wreg free
  4714  00058E  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  4715  000592  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  4716  000596  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  4717  00059A  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  4718  00059E  0E0A               	movlw	10
  4719  0005A0  6E12               	movwf	i2___llmod@divisor,c
  4720  0005A2  0E00               	movlw	0
  4721  0005A4  6E13               	movwf	i2___llmod@divisor+1,c
  4722  0005A6  0E00               	movlw	0
  4723  0005A8  6E14               	movwf	i2___llmod@divisor+2,c
  4724  0005AA  0E00               	movlw	0
  4725  0005AC  6E15               	movwf	i2___llmod@divisor+3,c
  4726  0005AE  ECAA  F00A         	call	i2___llmod	;wreg free
  4727  0005B2  500E               	movf	?i2___llmod,w,c
  4728  0005B4  0F30               	addlw	48
  4729  0005B6  6E29               	movwf	i2printf@c,c
  4730                           
  4731                           ;doprnt.c: 1491: break;
  4732  0005B8  D03D               	goto	i2l3242
  4733  0005BA                     i2l3234:
  4734                           
  4735                           ;doprnt.c: 1499: {
  4736                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4737  0005BA  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  4738  0005BE  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  4739  0005C2  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  4740  0005C6  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  4741  0005CA  C020  F01D         	movff	i2printf@prec,??i2_printf
  4742  0005CE  C021  F01E         	movff	i2printf@prec+1,??i2_printf+1
  4743  0005D2  90D8               	bcf	status,0,c
  4744  0005D4  361D               	rlcf	??i2_printf,f,c
  4745  0005D6  361E               	rlcf	??i2_printf+1,f,c
  4746  0005D8  90D8               	bcf	status,0,c
  4747  0005DA  361D               	rlcf	??i2_printf,f,c
  4748  0005DC  361E               	rlcf	??i2_printf+1,f,c
  4749  0005DE  0EC5               	movlw	low _hexpowers
  4750  0005E0  241D               	addwf	??i2_printf,w,c
  4751  0005E2  6EF6               	movwf	tblptrl,c
  4752  0005E4  0EFE               	movlw	high _hexpowers
  4753  0005E6  201E               	addwfc	??i2_printf+1,w,c
  4754  0005E8  6EF7               	movwf	tblptrh,c
  4755  0005EA                     	if	0	;There are less than 3 active tblptr bytes
  4756  0005EA                     	endif
  4757  0005EA  0009               	tblrd		*+
  4758  0005EC  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  4759  0005F0  0009               	tblrd		*+
  4760  0005F2  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  4761  0005F6  0009               	tblrd		*+
  4762  0005F8  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  4763  0005FC  000A               	tblrd		*-
  4764  0005FE  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  4765  000602  ECF1  F009         	call	i2___lldiv	;wreg free
  4766  000606  5001               	movf	?i2___lldiv,w,c
  4767  000608  0B0F               	andlw	15
  4768  00060A  6E1F               	movwf	i2printf@idx,c
  4769                           
  4770                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4771  00060C  501F               	movf	i2printf@idx,w,c
  4772  00060E  0D01               	mullw	1
  4773  000610  0E6A               	movlw	low STR_17
  4774  000612  24F3               	addwf	prodl,w,c
  4775  000614  6EF6               	movwf	tblptrl,c
  4776  000616  0EFF               	movlw	high STR_17
  4777  000618  20F4               	addwfc	prodh,w,c
  4778  00061A  6EF7               	movwf	tblptrh,c
  4779  00061C                     	if	0	;There are less than 3 active tblptr bytes
  4780  00061C                     	endif
  4781  00061C  0008               	tblrd		*
  4782  00061E  CFF5 F029          	movff	tablat,i2printf@c
  4783                           
  4784                           ;doprnt.c: 1523: }
  4785                           
  4786                           ;doprnt.c: 1508: }
  4787                           ;doprnt.c: 1510: break;
  4788  000622  D008               	goto	i2l3242
  4789  000624                     i2l3240:
  4790  000624  5028               	movf	i2printf@flag,w,c
  4791  000626  0B80               	andlw	128
  4792                           
  4793                           ; Switch size 1, requested type "space"
  4794                           ; Number of cases is 2, Range of values is 0 to 128
  4795                           ; switch strategies available:
  4796                           ; Name         Instructions Cycles
  4797                           ; simple_byte            7     4 (average)
  4798                           ;	Chosen strategy is simple_byte
  4799  000628  0A00               	xorlw	0	; case 0
  4800  00062A  B4D8               	btfsc	status,2,c
  4801  00062C  D78A               	goto	i2l3232
  4802  00062E  0A80               	xorlw	128	; case 128
  4803  000630  B4D8               	btfsc	status,2,c
  4804  000632  D7C3               	goto	i2l3234
  4805  000634                     i2l3242:
  4806                           
  4807                           ;doprnt.c: 1524: (putch(c) );
  4808  000634  5029               	movf	i2printf@c,w,c
  4809  000636  EC9F  F00C         	call	i2_putch
  4810  00063A                     i2l3244:
  4811  00063A  0620               	decf	i2printf@prec,f,c
  4812  00063C  A0D8               	btfss	status,0,c
  4813  00063E  0621               	decf	i2printf@prec+1,f,c
  4814  000640  2820               	incf	i2printf@prec,w,c
  4815  000642  E1F0               	bnz	i2l3240
  4816  000644  2821               	incf	i2printf@prec+1,w,c
  4817  000646  A4D8               	btfss	status,2,c
  4818  000648  D7ED               	goto	i2l3240
  4819  00064A                     i2l3246:
  4820  00064A  C017  FFF6         	movff	i2printf@f,tblptrl
  4821  00064E  C018  FFF7         	movff	i2printf@f+1,tblptrh
  4822  000652  4A17               	infsnz	i2printf@f,f,c
  4823  000654  2A18               	incf	i2printf@f+1,f,c
  4824  000656                     	if	0	;tblptru may be non-zero
  4825  000656                     	endif
  4826  000656                     	if	0	;tblptru may be non-zero
  4827  000656                     	endif
  4828  000656  0008               	tblrd		*
  4829  000658  CFF5 F029          	movff	tablat,i2printf@c
  4830  00065C  5029               	movf	i2printf@c,w,c
  4831  00065E  B4D8               	btfsc	status,2,c
  4832  000660  0012               	return	
  4833  000662  D68F               	goto	i2l3150
  4834  000664                     __end_ofi2_printf:
  4835                           	opt stack 0
  4836                           pclatu	equ	0xFFB
  4837                           pclath	equ	0xFFA
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           intcon	equ	0xFF2
  4845                           intcon3	equ	0xFF0
  4846                           postinc0	equ	0xFEE
  4847                           fsr0h	equ	0xFEA
  4848                           fsr0l	equ	0xFE9
  4849                           wreg	equ	0xFE8
  4850                           postdec1	equ	0xFE5
  4851                           fsr1h	equ	0xFE2
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function i2_putch *****************
  4861 ;; Defined at:
  4862 ;;		line 35 in file "lcd.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  data            1    wreg     unsigned char 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  data            1    4[COMRAM] unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;Total ram usage:        1 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    3
  4883 ;; This function calls:
  4884 ;;		i2_lcdNewline
  4885 ;;		i2_lcdNibble
  4886 ;; This function is called by:
  4887 ;;		i2_printf
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text25
  4892  00193E                     __ptext25:
  4893                           	opt stack 0
  4894  00193E                     i2_putch:
  4895                           	opt stack 17
  4896                           
  4897                           ;incstack = 0
  4898                           ;i2putch@data stored from wreg
  4899  00193E  6E05               	movwf	i2putch@data,c
  4900                           
  4901                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  4902  001940  0E0A               	movlw	10
  4903  001942  1805               	xorwf	i2putch@data,w,c
  4904  001944  A4D8               	btfss	status,2,c
  4905  001946  D003               	goto	i2l148
  4906  001948  ECED  F00C         	call	i2_lcdNewline	;wreg free
  4907  00194C  0012               	return	
  4908  00194E                     i2l148:
  4909                           
  4910                           ;lcd.c: 37: else
  4911                           ;lcd.c: 38: {
  4912                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  4913  00194E  848C               	bsf	3980,2,c	;volatile
  4914                           
  4915                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  4916  001950  0E74               	movlw	116
  4917  001952                     i2u324_47:
  4918  001952  2EE8               	decfsz	wreg,f,c
  4919  001954  D7FE               	bra	i2u324_47
  4920  001956  D000               	nop2	
  4921                           
  4922                           ;lcd.c: 41: lcdNibble(data);
  4923  001958  5005               	movf	i2putch@data,w,c
  4924  00195A  ECDD  F00A         	call	i2_lcdNibble
  4925  00195E  0012               	return	
  4926  001960                     __end_ofi2_putch:
  4927                           	opt stack 0
  4928                           pclatu	equ	0xFFB
  4929                           pclath	equ	0xFFA
  4930                           tblptru	equ	0xFF8
  4931                           tblptrh	equ	0xFF7
  4932                           tblptrl	equ	0xFF6
  4933                           tablat	equ	0xFF5
  4934                           prodh	equ	0xFF4
  4935                           prodl	equ	0xFF3
  4936                           intcon	equ	0xFF2
  4937                           intcon3	equ	0xFF0
  4938                           postinc0	equ	0xFEE
  4939                           fsr0h	equ	0xFEA
  4940                           fsr0l	equ	0xFE9
  4941                           wreg	equ	0xFE8
  4942                           postdec1	equ	0xFE5
  4943                           fsr1h	equ	0xFE2
  4944                           fsr1l	equ	0xFE1
  4945                           indf2	equ	0xFDF
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function i2_lcdNewline *****************
  4953 ;; Defined at:
  4954 ;;		line 78 in file "lcd.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;		None
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;		None
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      void 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;Total ram usage:        0 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    2
  4975 ;; This function calls:
  4976 ;;		i2_lcdInst
  4977 ;; This function is called by:
  4978 ;;		i2_putch
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text26
  4983  0019DA                     __ptext26:
  4984                           	opt stack 0
  4985  0019DA                     i2_lcdNewline:
  4986                           	opt stack 17
  4987                           
  4988                           ;lcd.c: 79: lcdInst(0b11000000);
  4989                           
  4990                           ;incstack = 0
  4991  0019DA  0EC0               	movlw	192
  4992  0019DC  ECB0  F00C         	call	i2_lcdInst
  4993  0019E0  0012               	return		;funcret
  4994  0019E2                     __end_ofi2_lcdNewline:
  4995                           	opt stack 0
  4996                           pclatu	equ	0xFFB
  4997                           pclath	equ	0xFFA
  4998                           tblptru	equ	0xFF8
  4999                           tblptrh	equ	0xFF7
  5000                           tblptrl	equ	0xFF6
  5001                           tablat	equ	0xFF5
  5002                           prodh	equ	0xFF4
  5003                           prodl	equ	0xFF3
  5004                           intcon	equ	0xFF2
  5005                           intcon3	equ	0xFF0
  5006                           postinc0	equ	0xFEE
  5007                           fsr0h	equ	0xFEA
  5008                           fsr0l	equ	0xFE9
  5009                           wreg	equ	0xFE8
  5010                           postdec1	equ	0xFE5
  5011                           fsr1h	equ	0xFE2
  5012                           fsr1l	equ	0xFE1
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function i2___llmod *****************
  5021 ;; Defined at:
  5022 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  dividend        4   13[COMRAM] unsigned long 
  5025 ;;  divisor         4   17[COMRAM] unsigned long 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  __llmod         1   21[COMRAM] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  4   13[COMRAM] unsigned long 
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5037 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;Total ram usage:        9 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		i2_printf
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text27
  5051  001554                     __ptext27:
  5052                           	opt stack 0
  5053  001554                     i2___llmod:
  5054                           	opt stack 20
  5055                           
  5056                           ;incstack = 0
  5057  001554  5012               	movf	i2___llmod@divisor,w,c
  5058  001556  1013               	iorwf	i2___llmod@divisor+1,w,c
  5059  001558  1014               	iorwf	i2___llmod@divisor+2,w,c
  5060  00155A  1015               	iorwf	i2___llmod@divisor+3,w,c
  5061  00155C  B4D8               	btfsc	status,2,c
  5062  00155E  D024               	goto	i2l946
  5063  001560  0E01               	movlw	1
  5064  001562  6E16               	movwf	i2___llmod@counter,c
  5065  001564  D006               	goto	i2l3002
  5066  001566                     i2l3000:
  5067  001566  90D8               	bcf	status,0,c
  5068  001568  3612               	rlcf	i2___llmod@divisor,f,c
  5069  00156A  3613               	rlcf	i2___llmod@divisor+1,f,c
  5070  00156C  3614               	rlcf	i2___llmod@divisor+2,f,c
  5071  00156E  3615               	rlcf	i2___llmod@divisor+3,f,c
  5072  001570  2A16               	incf	i2___llmod@counter,f,c
  5073  001572                     i2l3002:
  5074  001572  AE15               	btfss	i2___llmod@divisor+3,7,c
  5075  001574  D7F8               	goto	i2l3000
  5076  001576                     i2l3004:
  5077  001576  5012               	movf	i2___llmod@divisor,w,c
  5078  001578  5C0E               	subwf	i2___llmod@dividend,w,c
  5079  00157A  5013               	movf	i2___llmod@divisor+1,w,c
  5080  00157C  580F               	subwfb	i2___llmod@dividend+1,w,c
  5081  00157E  5014               	movf	i2___llmod@divisor+2,w,c
  5082  001580  5810               	subwfb	i2___llmod@dividend+2,w,c
  5083  001582  5015               	movf	i2___llmod@divisor+3,w,c
  5084  001584  5811               	subwfb	i2___llmod@dividend+3,w,c
  5085  001586  A0D8               	btfss	status,0,c
  5086  001588  D008               	goto	i2l3008
  5087  00158A  5012               	movf	i2___llmod@divisor,w,c
  5088  00158C  5E0E               	subwf	i2___llmod@dividend,f,c
  5089  00158E  5013               	movf	i2___llmod@divisor+1,w,c
  5090  001590  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  5091  001592  5014               	movf	i2___llmod@divisor+2,w,c
  5092  001594  5A10               	subwfb	i2___llmod@dividend+2,f,c
  5093  001596  5015               	movf	i2___llmod@divisor+3,w,c
  5094  001598  5A11               	subwfb	i2___llmod@dividend+3,f,c
  5095  00159A                     i2l3008:
  5096  00159A  90D8               	bcf	status,0,c
  5097  00159C  3215               	rrcf	i2___llmod@divisor+3,f,c
  5098  00159E  3214               	rrcf	i2___llmod@divisor+2,f,c
  5099  0015A0  3213               	rrcf	i2___llmod@divisor+1,f,c
  5100  0015A2  3212               	rrcf	i2___llmod@divisor,f,c
  5101  0015A4  2E16               	decfsz	i2___llmod@counter,f,c
  5102  0015A6  D7E7               	goto	i2l3004
  5103  0015A8                     i2l946:
  5104  0015A8  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  5105  0015AC  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  5106  0015B0  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  5107  0015B4  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  5108  0015B8  0012               	return		;funcret
  5109  0015BA                     __end_ofi2___llmod:
  5110                           	opt stack 0
  5111                           pclatu	equ	0xFFB
  5112                           pclath	equ	0xFFA
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           prodh	equ	0xFF4
  5118                           prodl	equ	0xFF3
  5119                           intcon	equ	0xFF2
  5120                           intcon3	equ	0xFF0
  5121                           postinc0	equ	0xFEE
  5122                           fsr0h	equ	0xFEA
  5123                           fsr0l	equ	0xFE9
  5124                           wreg	equ	0xFE8
  5125                           postdec1	equ	0xFE5
  5126                           fsr1h	equ	0xFE2
  5127                           fsr1l	equ	0xFE1
  5128                           indf2	equ	0xFDF
  5129                           postinc2	equ	0xFDE
  5130                           postdec2	equ	0xFDD
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function i2___lldiv *****************
  5136 ;; Defined at:
  5137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  dividend        4    0[COMRAM] unsigned long 
  5140 ;;  divisor         4    4[COMRAM] unsigned long 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  __lldiv         4    8[COMRAM] unsigned long 
  5143 ;;  __lldiv         1   12[COMRAM] unsigned char 
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  4    0[COMRAM] unsigned long 
  5146 ;; Registers used:
  5147 ;;		wreg, status,2, status,0
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5153 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;Total ram usage:       13 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		i2_printf
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text28
  5167  0013E2                     __ptext28:
  5168                           	opt stack 0
  5169  0013E2                     i2___lldiv:
  5170                           	opt stack 20
  5171                           
  5172                           ;incstack = 0
  5173  0013E2  0E00               	movlw	0
  5174  0013E4  6E09               	movwf	i2___lldiv@quotient,c
  5175  0013E6  0E00               	movlw	0
  5176  0013E8  6E0A               	movwf	i2___lldiv@quotient+1,c
  5177  0013EA  0E00               	movlw	0
  5178  0013EC  6E0B               	movwf	i2___lldiv@quotient+2,c
  5179  0013EE  0E00               	movlw	0
  5180  0013F0  6E0C               	movwf	i2___lldiv@quotient+3,c
  5181  0013F2  5005               	movf	i2___lldiv@divisor,w,c
  5182  0013F4  1006               	iorwf	i2___lldiv@divisor+1,w,c
  5183  0013F6  1007               	iorwf	i2___lldiv@divisor+2,w,c
  5184  0013F8  1008               	iorwf	i2___lldiv@divisor+3,w,c
  5185  0013FA  B4D8               	btfsc	status,2,c
  5186  0013FC  D02A               	goto	i2l936
  5187  0013FE  0E01               	movlw	1
  5188  001400  6E0D               	movwf	i2___lldiv@counter,c
  5189  001402  D006               	goto	i2l2982
  5190  001404                     i2l2980:
  5191  001404  90D8               	bcf	status,0,c
  5192  001406  3605               	rlcf	i2___lldiv@divisor,f,c
  5193  001408  3606               	rlcf	i2___lldiv@divisor+1,f,c
  5194  00140A  3607               	rlcf	i2___lldiv@divisor+2,f,c
  5195  00140C  3608               	rlcf	i2___lldiv@divisor+3,f,c
  5196  00140E  2A0D               	incf	i2___lldiv@counter,f,c
  5197  001410                     i2l2982:
  5198  001410  AE08               	btfss	i2___lldiv@divisor+3,7,c
  5199  001412  D7F8               	goto	i2l2980
  5200  001414                     i2l2984:
  5201  001414  90D8               	bcf	status,0,c
  5202  001416  3609               	rlcf	i2___lldiv@quotient,f,c
  5203  001418  360A               	rlcf	i2___lldiv@quotient+1,f,c
  5204  00141A  360B               	rlcf	i2___lldiv@quotient+2,f,c
  5205  00141C  360C               	rlcf	i2___lldiv@quotient+3,f,c
  5206  00141E  5005               	movf	i2___lldiv@divisor,w,c
  5207  001420  5C01               	subwf	i2___lldiv@dividend,w,c
  5208  001422  5006               	movf	i2___lldiv@divisor+1,w,c
  5209  001424  5802               	subwfb	i2___lldiv@dividend+1,w,c
  5210  001426  5007               	movf	i2___lldiv@divisor+2,w,c
  5211  001428  5803               	subwfb	i2___lldiv@dividend+2,w,c
  5212  00142A  5008               	movf	i2___lldiv@divisor+3,w,c
  5213  00142C  5804               	subwfb	i2___lldiv@dividend+3,w,c
  5214  00142E  A0D8               	btfss	status,0,c
  5215  001430  D009               	goto	i2l2992
  5216  001432  5005               	movf	i2___lldiv@divisor,w,c
  5217  001434  5E01               	subwf	i2___lldiv@dividend,f,c
  5218  001436  5006               	movf	i2___lldiv@divisor+1,w,c
  5219  001438  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  5220  00143A  5007               	movf	i2___lldiv@divisor+2,w,c
  5221  00143C  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  5222  00143E  5008               	movf	i2___lldiv@divisor+3,w,c
  5223  001440  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  5224  001442  8009               	bsf	i2___lldiv@quotient,0,c
  5225  001444                     i2l2992:
  5226  001444  90D8               	bcf	status,0,c
  5227  001446  3208               	rrcf	i2___lldiv@divisor+3,f,c
  5228  001448  3207               	rrcf	i2___lldiv@divisor+2,f,c
  5229  00144A  3206               	rrcf	i2___lldiv@divisor+1,f,c
  5230  00144C  3205               	rrcf	i2___lldiv@divisor,f,c
  5231  00144E  2E0D               	decfsz	i2___lldiv@counter,f,c
  5232  001450  D7E1               	goto	i2l2984
  5233  001452                     i2l936:
  5234  001452  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  5235  001456  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  5236  00145A  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  5237  00145E  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  5238  001462  0012               	return		;funcret
  5239  001464                     __end_ofi2___lldiv:
  5240                           	opt stack 0
  5241                           pclatu	equ	0xFFB
  5242                           pclath	equ	0xFFA
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           prodh	equ	0xFF4
  5248                           prodl	equ	0xFF3
  5249                           intcon	equ	0xFF2
  5250                           intcon3	equ	0xFF0
  5251                           postinc0	equ	0xFEE
  5252                           fsr0h	equ	0xFEA
  5253                           fsr0l	equ	0xFE9
  5254                           wreg	equ	0xFE8
  5255                           postdec1	equ	0xFE5
  5256                           fsr1h	equ	0xFE2
  5257                           fsr1l	equ	0xFE1
  5258                           indf2	equ	0xFDF
  5259                           postinc2	equ	0xFDE
  5260                           postdec2	equ	0xFDD
  5261                           fsr2h	equ	0xFDA
  5262                           fsr2l	equ	0xFD9
  5263                           status	equ	0xFD8
  5264                           
  5265 ;; *************** function i2_lcdClear *****************
  5266 ;; Defined at:
  5267 ;;		line 74 in file "lcd.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;		None
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;		None
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      void 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2, status,0, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;Total ram usage:        0 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    2
  5288 ;; This function calls:
  5289 ;;		i2_lcdInst
  5290 ;; This function is called by:
  5291 ;;		_sortBatteryInterruptService
  5292 ;;		_setAngle
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           	psect	text29
  5297  0019E2                     __ptext29:
  5298                           	opt stack 0
  5299  0019E2                     i2_lcdClear:
  5300                           	opt stack 19
  5301                           
  5302                           ;lcd.c: 75: lcdInst(0b00000001);
  5303                           
  5304                           ;incstack = 0
  5305  0019E2  0E01               	movlw	1
  5306  0019E4  ECB0  F00C         	call	i2_lcdInst
  5307  0019E8  0012               	return		;funcret
  5308  0019EA                     __end_ofi2_lcdClear:
  5309                           	opt stack 0
  5310                           pclatu	equ	0xFFB
  5311                           pclath	equ	0xFFA
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           intcon	equ	0xFF2
  5319                           intcon3	equ	0xFF0
  5320                           postinc0	equ	0xFEE
  5321                           fsr0h	equ	0xFEA
  5322                           fsr0l	equ	0xFE9
  5323                           wreg	equ	0xFE8
  5324                           postdec1	equ	0xFE5
  5325                           fsr1h	equ	0xFE2
  5326                           fsr1l	equ	0xFE1
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           fsr2h	equ	0xFDA
  5331                           fsr2l	equ	0xFD9
  5332                           status	equ	0xFD8
  5333                           
  5334 ;; *************** function i2_lcdInst *****************
  5335 ;; Defined at:
  5336 ;;		line 27 in file "lcd.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  data            1    wreg     unsigned char 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  data            1    3[COMRAM] unsigned char 
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		wreg, status,2, status,0, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;Total ram usage:        2 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    1
  5357 ;; This function calls:
  5358 ;;		i2_lcdNibble
  5359 ;; This function is called by:
  5360 ;;		i2_lcdClear
  5361 ;;		i2_lcdNewline
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text30
  5366  001960                     __ptext30:
  5367                           	opt stack 0
  5368  001960                     i2_lcdInst:
  5369                           	opt stack 17
  5370                           
  5371                           ;incstack = 0
  5372                           ;i2lcdInst@data stored from wreg
  5373  001960  6E04               	movwf	i2lcdInst@data,c
  5374                           
  5375                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  5376  001962  948C               	bcf	3980,2,c	;volatile
  5377                           
  5378                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5379  001964  0E74               	movlw	116
  5380  001966                     i2u325_47:
  5381  001966  2EE8               	decfsz	wreg,f,c
  5382  001968  D7FE               	bra	i2u325_47
  5383  00196A  D000               	nop2	
  5384                           
  5385                           ;lcd.c: 30: lcdNibble(data);
  5386  00196C  5004               	movf	i2lcdInst@data,w,c
  5387  00196E  ECDD  F00A         	call	i2_lcdNibble
  5388                           
  5389                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  5390  001972  0E04               	movlw	4
  5391  001974  6E03               	movwf	??i2_lcdInst& (0+255),c
  5392  001976  0E3E               	movlw	62
  5393  001978                     i2u326_47:
  5394  001978  2EE8               	decfsz	wreg,f,c
  5395  00197A  D7FE               	bra	i2u326_47
  5396  00197C  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
  5397  00197E  D7FC               	bra	i2u326_47
  5398  001980  0012               	return		;funcret
  5399  001982                     __end_ofi2_lcdInst:
  5400                           	opt stack 0
  5401                           pclatu	equ	0xFFB
  5402                           pclath	equ	0xFFA
  5403                           tblptru	equ	0xFF8
  5404                           tblptrh	equ	0xFF7
  5405                           tblptrl	equ	0xFF6
  5406                           tablat	equ	0xFF5
  5407                           prodh	equ	0xFF4
  5408                           prodl	equ	0xFF3
  5409                           intcon	equ	0xFF2
  5410                           intcon3	equ	0xFF0
  5411                           postinc0	equ	0xFEE
  5412                           fsr0h	equ	0xFEA
  5413                           fsr0l	equ	0xFE9
  5414                           wreg	equ	0xFE8
  5415                           postdec1	equ	0xFE5
  5416                           fsr1h	equ	0xFE2
  5417                           fsr1l	equ	0xFE1
  5418                           indf2	equ	0xFDF
  5419                           postinc2	equ	0xFDE
  5420                           postdec2	equ	0xFDD
  5421                           fsr2h	equ	0xFDA
  5422                           fsr2l	equ	0xFD9
  5423                           status	equ	0xFD8
  5424                           
  5425 ;; *************** function i2_lcdNibble *****************
  5426 ;; Defined at:
  5427 ;;		line 46 in file "lcd.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  data            1    wreg     unsigned char 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  data            1    1[COMRAM] unsigned char 
  5432 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg, status,2, status,0
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5446 ;;Total ram usage:        2 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		i2_lcdInst
  5452 ;;		i2_putch
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           	psect	text31
  5457  0015BA                     __ptext31:
  5458                           	opt stack 0
  5459  0015BA                     i2_lcdNibble:
  5460                           	opt stack 19
  5461                           
  5462                           ;incstack = 0
  5463                           ;i2lcdNibble@data stored from wreg
  5464  0015BA  6E02               	movwf	i2lcdNibble@data,c
  5465                           
  5466                           ;lcd.c: 48: char temp = data & 0xF0;
  5467  0015BC  5002               	movf	i2lcdNibble@data,w,c
  5468  0015BE  0BF0               	andlw	240
  5469  0015C0  6E01               	movwf	i2lcdNibble@temp,c
  5470                           
  5471                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5472  0015C2  508C               	movf	3980,w,c	;volatile
  5473  0015C4  0B0F               	andlw	15
  5474  0015C6  6E8C               	movwf	3980,c	;volatile
  5475                           
  5476                           ;lcd.c: 50: LATD = temp | LATD;
  5477  0015C8  5001               	movf	i2lcdNibble@temp,w,c
  5478  0015CA  108C               	iorwf	3980,w,c	;volatile
  5479  0015CC  6E8C               	movwf	3980,c	;volatile
  5480                           
  5481                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5482  0015CE  968C               	bcf	3980,3,c	;volatile
  5483                           
  5484                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5485  0015D0  0ED6               	movlw	214
  5486  0015D2                     i2u327_47:
  5487  0015D2  D000               	nop2	
  5488  0015D4  D000               	nop2	
  5489  0015D6  2EE8               	decfsz	wreg,f,c
  5490  0015D8  D7FC               	bra	i2u327_47
  5491  0015DA  D000               	nop2	
  5492                           
  5493                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5494  0015DC  868C               	bsf	3980,3,c	;volatile
  5495                           
  5496                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5497  0015DE  0ED6               	movlw	214
  5498  0015E0                     i2u328_47:
  5499  0015E0  D000               	nop2	
  5500  0015E2  D000               	nop2	
  5501  0015E4  2EE8               	decfsz	wreg,f,c
  5502  0015E6  D7FC               	bra	i2u328_47
  5503  0015E8  D000               	nop2	
  5504                           
  5505                           ;lcd.c: 58: data = data << 4;
  5506  0015EA  3802               	swapf	i2lcdNibble@data,w,c
  5507  0015EC  0BF0               	andlw	240
  5508  0015EE  6E02               	movwf	i2lcdNibble@data,c
  5509                           
  5510                           ;lcd.c: 60: temp = data & 0xF0;
  5511  0015F0  5002               	movf	i2lcdNibble@data,w,c
  5512  0015F2  0BF0               	andlw	240
  5513  0015F4  6E01               	movwf	i2lcdNibble@temp,c
  5514                           
  5515                           ;lcd.c: 61: LATD = LATD & 0x0F;
  5516  0015F6  508C               	movf	3980,w,c	;volatile
  5517  0015F8  0B0F               	andlw	15
  5518  0015FA  6E8C               	movwf	3980,c	;volatile
  5519                           
  5520                           ;lcd.c: 62: LATD = temp | LATD;
  5521  0015FC  5001               	movf	i2lcdNibble@temp,w,c
  5522  0015FE  108C               	iorwf	3980,w,c	;volatile
  5523  001600  6E8C               	movwf	3980,c	;volatile
  5524                           
  5525                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  5526  001602  968C               	bcf	3980,3,c	;volatile
  5527                           
  5528                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5529  001604  0ED6               	movlw	214
  5530  001606                     i2u329_47:
  5531  001606  D000               	nop2	
  5532  001608  D000               	nop2	
  5533  00160A  2EE8               	decfsz	wreg,f,c
  5534  00160C  D7FC               	bra	i2u329_47
  5535  00160E  D000               	nop2	
  5536                           
  5537                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  5538  001610  868C               	bsf	3980,3,c	;volatile
  5539                           
  5540                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  5541  001612  0ED6               	movlw	214
  5542  001614                     i2u330_47:
  5543  001614  D000               	nop2	
  5544  001616  D000               	nop2	
  5545  001618  2EE8               	decfsz	wreg,f,c
  5546  00161A  D7FC               	bra	i2u330_47
  5547  00161C  D000               	nop2	
  5548  00161E  0012               	return		;funcret
  5549  001620                     __end_ofi2_lcdNibble:
  5550                           	opt stack 0
  5551                           pclatu	equ	0xFFB
  5552                           pclath	equ	0xFFA
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           prodh	equ	0xFF4
  5558                           prodl	equ	0xFF3
  5559                           intcon	equ	0xFF2
  5560                           intcon3	equ	0xFF0
  5561                           postinc0	equ	0xFEE
  5562                           fsr0h	equ	0xFEA
  5563                           fsr0l	equ	0xFE9
  5564                           wreg	equ	0xFE8
  5565                           postdec1	equ	0xFE5
  5566                           fsr1h	equ	0xFE2
  5567                           fsr1l	equ	0xFE1
  5568                           indf2	equ	0xFDF
  5569                           postinc2	equ	0xFDE
  5570                           postdec2	equ	0xFDD
  5571                           fsr2h	equ	0xFDA
  5572                           fsr2l	equ	0xFD9
  5573                           status	equ	0xFD8
  5574                           
  5575 ;; *************** function _angleToPulse *****************
  5576 ;; Defined at:
  5577 ;;		line 26 in file "servo.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  angle           2   69[COMRAM] int 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  a000            4   88[COMRAM] long 
  5582 ;;  a180            4   81[COMRAM] long 
  5583 ;;  offset          4   77[COMRAM] long 
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  4   69[COMRAM] long 
  5586 ;; Registers used:
  5587 ;;		wreg, status,2, status,0, cstack
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5593 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;Total ram usage:       23 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    2
  5600 ;; This function calls:
  5601 ;;		___altoft
  5602 ;;		___awtoft
  5603 ;;		___ftadd
  5604 ;;		___ftdiv
  5605 ;;		___ftmul
  5606 ;;		___fttol
  5607 ;; This function is called by:
  5608 ;;		_setAngle
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text32
  5613  0009E4                     __ptext32:
  5614                           	opt stack 0
  5615  0009E4                     _angleToPulse:
  5616                           	opt stack 19
  5617                           
  5618                           ;servo.c: 27: long offset = 0;
  5619                           
  5620                           ;incstack = 0
  5621  0009E4  0E00               	movlw	0
  5622  0009E6  6E4E               	movwf	angleToPulse@offset,c
  5623  0009E8  0E00               	movlw	0
  5624  0009EA  6E4F               	movwf	angleToPulse@offset+1,c
  5625  0009EC  0E00               	movlw	0
  5626  0009EE  6E50               	movwf	angleToPulse@offset+2,c
  5627  0009F0  0E00               	movlw	0
  5628  0009F2  6E51               	movwf	angleToPulse@offset+3,c
  5629                           
  5630                           ;servo.c: 28: long a000 = 1250;
  5631  0009F4  0EE2               	movlw	226
  5632  0009F6  6E59               	movwf	angleToPulse@a000,c
  5633  0009F8  0E04               	movlw	4
  5634  0009FA  6E5A               	movwf	angleToPulse@a000+1,c
  5635  0009FC  0E00               	movlw	0
  5636  0009FE  6E5B               	movwf	angleToPulse@a000+2,c
  5637  000A00  0E00               	movlw	0
  5638  000A02  6E5C               	movwf	angleToPulse@a000+3,c
  5639                           
  5640                           ;servo.c: 29: long a180 = 6250;
  5641  000A04  0E6A               	movlw	106
  5642  000A06  6E52               	movwf	angleToPulse@a180,c
  5643  000A08  0E18               	movlw	24
  5644  000A0A  6E53               	movwf	angleToPulse@a180+1,c
  5645  000A0C  0E00               	movlw	0
  5646  000A0E  6E54               	movwf	angleToPulse@a180+2,c
  5647  000A10  0E00               	movlw	0
  5648  000A12  6E55               	movwf	angleToPulse@a180+3,c
  5649                           
  5650                           ;servo.c: 31: return a000 + angle/180.0*(a180-a000) + offset;
  5651  000A14  C059  F04A         	movff	angleToPulse@a000,??_angleToPulse
  5652  000A18  C05A  F04B         	movff	angleToPulse@a000+1,??_angleToPulse+1
  5653  000A1C  C05B  F04C         	movff	angleToPulse@a000+2,??_angleToPulse+2
  5654  000A20  C05C  F04D         	movff	angleToPulse@a000+3,??_angleToPulse+3
  5655  000A24  1E4A               	comf	??_angleToPulse,f,c
  5656  000A26  1E4B               	comf	??_angleToPulse+1,f,c
  5657  000A28  1E4C               	comf	??_angleToPulse+2,f,c
  5658  000A2A  1E4D               	comf	??_angleToPulse+3,f,c
  5659  000A2C  2A4A               	incf	??_angleToPulse,f,c
  5660  000A2E  0E00               	movlw	0
  5661  000A30  224B               	addwfc	??_angleToPulse+1,f,c
  5662  000A32  224C               	addwfc	??_angleToPulse+2,f,c
  5663  000A34  224D               	addwfc	??_angleToPulse+3,f,c
  5664  000A36  5052               	movf	angleToPulse@a180,w,c
  5665  000A38  244A               	addwf	??_angleToPulse,w,c
  5666  000A3A  6E09               	movwf	___altoft@c,c
  5667  000A3C  5053               	movf	angleToPulse@a180+1,w,c
  5668  000A3E  204B               	addwfc	??_angleToPulse+1,w,c
  5669  000A40  6E0A               	movwf	___altoft@c+1,c
  5670  000A42  5054               	movf	angleToPulse@a180+2,w,c
  5671  000A44  204C               	addwfc	??_angleToPulse+2,w,c
  5672  000A46  6E0B               	movwf	___altoft@c+2,c
  5673  000A48  5055               	movf	angleToPulse@a180+3,w,c
  5674  000A4A  204D               	addwfc	??_angleToPulse+3,w,c
  5675  000A4C  6E0C               	movwf	___altoft@c+3,c
  5676  000A4E  EC6E  F00A         	call	___altoft	;wreg free
  5677  000A52  C009  F01F         	movff	?___altoft,___ftmul@f2
  5678  000A56  C00A  F020         	movff	?___altoft+1,___ftmul@f2+1
  5679  000A5A  C00B  F021         	movff	?___altoft+2,___ftmul@f2+2
  5680  000A5E  0E00               	movlw	0
  5681  000A60  6E10               	movwf	___ftdiv@f2,c
  5682  000A62  0E34               	movlw	52
  5683  000A64  6E11               	movwf	___ftdiv@f2+1,c
  5684  000A66  0E43               	movlw	67
  5685  000A68  6E12               	movwf	___ftdiv@f2+2,c
  5686  000A6A  C046  F009         	movff	angleToPulse@angle,___awtoft@c
  5687  000A6E  C047  F00A         	movff	angleToPulse@angle+1,___awtoft@c+1
  5688  000A72  ECCD  F00B         	call	___awtoft	;wreg free
  5689  000A76  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5690  000A7A  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5691  000A7E  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5692  000A82  EC08  F007         	call	___ftdiv	;wreg free
  5693  000A86  C00D  F01C         	movff	?___ftdiv,___ftmul@f1
  5694  000A8A  C00E  F01D         	movff	?___ftdiv+1,___ftmul@f1+1
  5695  000A8E  C00F  F01E         	movff	?___ftdiv+2,___ftmul@f1+2
  5696  000A92  EC8E  F006         	call	___ftmul	;wreg free
  5697  000A96  C01C  F02E         	movff	?___ftmul,___ftadd@f2
  5698  000A9A  C01D  F02F         	movff	?___ftmul+1,___ftadd@f2+1
  5699  000A9E  C01E  F030         	movff	?___ftmul+2,___ftadd@f2+2
  5700  000AA2  C059  F009         	movff	angleToPulse@a000,___altoft@c
  5701  000AA6  C05A  F00A         	movff	angleToPulse@a000+1,___altoft@c+1
  5702  000AAA  C05B  F00B         	movff	angleToPulse@a000+2,___altoft@c+2
  5703  000AAE  C05C  F00C         	movff	angleToPulse@a000+3,___altoft@c+3
  5704  000AB2  EC6E  F00A         	call	___altoft	;wreg free
  5705  000AB6  C009  F02B         	movff	?___altoft,___ftadd@f1
  5706  000ABA  C00A  F02C         	movff	?___altoft+1,___ftadd@f1+1
  5707  000ABE  C00B  F02D         	movff	?___altoft+2,___ftadd@f1+2
  5708  000AC2  EC1C  F004         	call	___ftadd	;wreg free
  5709  000AC6  C02B  F056         	movff	?___ftadd,_angleToPulse$1191
  5710  000ACA  C02C  F057         	movff	?___ftadd+1,_angleToPulse$1191+1
  5711  000ACE  C02D  F058         	movff	?___ftadd+2,_angleToPulse$1191+2
  5712                           
  5713                           ;servo.c: 31: return a000 + angle/180.0*(a180-a000) + offset;
  5714  000AD2  C04E  F009         	movff	angleToPulse@offset,___altoft@c
  5715  000AD6  C04F  F00A         	movff	angleToPulse@offset+1,___altoft@c+1
  5716  000ADA  C050  F00B         	movff	angleToPulse@offset+2,___altoft@c+2
  5717  000ADE  C051  F00C         	movff	angleToPulse@offset+3,___altoft@c+3
  5718  000AE2  EC6E  F00A         	call	___altoft	;wreg free
  5719  000AE6  C009  F02E         	movff	?___altoft,___ftadd@f2
  5720  000AEA  C00A  F02F         	movff	?___altoft+1,___ftadd@f2+1
  5721  000AEE  C00B  F030         	movff	?___altoft+2,___ftadd@f2+2
  5722  000AF2  C056  F02B         	movff	_angleToPulse$1191,___ftadd@f1
  5723  000AF6  C057  F02C         	movff	_angleToPulse$1191+1,___ftadd@f1+1
  5724  000AFA  C058  F02D         	movff	_angleToPulse$1191+2,___ftadd@f1+2
  5725  000AFE  EC1C  F004         	call	___ftadd	;wreg free
  5726  000B02  C02B  F037         	movff	?___ftadd,___fttol@f1
  5727  000B06  C02C  F038         	movff	?___ftadd+1,___fttol@f1+1
  5728  000B0A  C02D  F039         	movff	?___ftadd+2,___fttol@f1+2
  5729  000B0E  EC14  F006         	call	___fttol	;wreg free
  5730  000B12  C037  F046         	movff	?___fttol,?_angleToPulse
  5731  000B16  C038  F047         	movff	?___fttol+1,?_angleToPulse+1
  5732  000B1A  C039  F048         	movff	?___fttol+2,?_angleToPulse+2
  5733  000B1E  C03A  F049         	movff	?___fttol+3,?_angleToPulse+3
  5734  000B22  0012               	return	
  5735  000B24                     __end_of_angleToPulse:
  5736                           	opt stack 0
  5737                           pclatu	equ	0xFFB
  5738                           pclath	equ	0xFFA
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           intcon	equ	0xFF2
  5746                           intcon3	equ	0xFF0
  5747                           postinc0	equ	0xFEE
  5748                           fsr0h	equ	0xFEA
  5749                           fsr0l	equ	0xFE9
  5750                           wreg	equ	0xFE8
  5751                           postdec1	equ	0xFE5
  5752                           fsr1h	equ	0xFE2
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function ___fttol *****************
  5762 ;; Defined at:
  5763 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;  f1              3   54[COMRAM] float 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  lval            4   64[COMRAM] unsigned long 
  5768 ;;  exp1            1   68[COMRAM] unsigned char 
  5769 ;;  sign1           1   63[COMRAM] unsigned char 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  4   54[COMRAM] long 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;Total ram usage:       15 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; This function calls:
  5786 ;;		Nothing
  5787 ;; This function is called by:
  5788 ;;		_angleToPulse
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           	psect	text33
  5793  000C28                     __ptext33:
  5794                           	opt stack 0
  5795  000C28                     ___fttol:
  5796                           	opt stack 20
  5797                           
  5798                           ;incstack = 0
  5799  000C28  C039  F03B         	movff	___fttol@f1+2,??___fttol
  5800  000C2C  6A3C               	clrf	(??___fttol+1)& (0+255),c
  5801  000C2E  6A3D               	clrf	(??___fttol+2)& (0+255),c
  5802  000C30  3438               	rlcf	___fttol@f1+1,w,c
  5803  000C32  363B               	rlcf	??___fttol& (0+255),f,c
  5804  000C34  E301               	bnc	u232_41
  5805  000C36  803C               	bsf	(??___fttol+1)& (0+255),0,c
  5806  000C38                     u232_41:
  5807  000C38  503B               	movf	??___fttol,w,c
  5808  000C3A  6E45               	movwf	___fttol@exp1,c
  5809  000C3C  5045               	movf	___fttol@exp1,w,c
  5810  000C3E  A4D8               	btfss	status,2,c
  5811  000C40  D009               	goto	i2l2926
  5812  000C42  0E00               	movlw	0
  5813  000C44  6E37               	movwf	?___fttol,c
  5814  000C46  0E00               	movlw	0
  5815  000C48  6E38               	movwf	?___fttol+1,c
  5816  000C4A  0E00               	movlw	0
  5817  000C4C  6E39               	movwf	?___fttol+2,c
  5818  000C4E  0E00               	movlw	0
  5819  000C50  6E3A               	movwf	?___fttol+3,c
  5820  000C52  0012               	return	
  5821  000C54                     i2l2926:
  5822  000C54  0E17               	movlw	23
  5823  000C56  6E3B               	movwf	??___fttol& (0+255),c
  5824  000C58  C037  F03C         	movff	___fttol@f1,??___fttol+1
  5825  000C5C  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  5826  000C60  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  5827  000C64  283B               	incf	??___fttol,w,c
  5828  000C66  6E3F               	movwf	(??___fttol+4)& (0+255),c
  5829  000C68  D004               	goto	i2u234_40
  5830  000C6A                     i2u234_45:
  5831  000C6A  90D8               	bcf	status,0,c
  5832  000C6C  323E               	rrcf	??___fttol+3,f,c
  5833  000C6E  323D               	rrcf	??___fttol+2,f,c
  5834  000C70  323C               	rrcf	??___fttol+1,f,c
  5835  000C72                     i2u234_40:
  5836  000C72  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  5837  000C74  D7FA               	goto	i2u234_45
  5838  000C76  503C               	movf	??___fttol+1,w,c
  5839  000C78  6E40               	movwf	___fttol@sign1,c
  5840  000C7A  8E38               	bsf	___fttol@f1+1,7,c
  5841  000C7C  0EFF               	movlw	255
  5842  000C7E  1637               	andwf	___fttol@f1,f,c
  5843  000C80  0EFF               	movlw	255
  5844  000C82  1638               	andwf	___fttol@f1+1,f,c
  5845  000C84  0E00               	movlw	0
  5846  000C86  1639               	andwf	___fttol@f1+2,f,c
  5847  000C88  5037               	movf	___fttol@f1,w,c
  5848  000C8A  6E41               	movwf	___fttol@lval,c
  5849  000C8C  5038               	movf	___fttol@f1+1,w,c
  5850  000C8E  6E42               	movwf	___fttol@lval+1,c
  5851  000C90  5039               	movf	___fttol@f1+2,w,c
  5852  000C92  6E43               	movwf	___fttol@lval+2,c
  5853  000C94  6A44               	clrf	___fttol@lval+3,c
  5854  000C96  0E8E               	movlw	142
  5855  000C98  5E45               	subwf	___fttol@exp1,f,c
  5856  000C9A  AE45               	btfss	___fttol@exp1,7,c
  5857  000C9C  D016               	goto	i2l2948
  5858  000C9E  5045               	movf	___fttol@exp1,w,c
  5859  000CA0  0A80               	xorlw	128
  5860  000CA2  0F8F               	addlw	143
  5861  000CA4  B0D8               	btfsc	status,0,c
  5862  000CA6  D009               	goto	i2l2944
  5863  000CA8  0E00               	movlw	0
  5864  000CAA  6E37               	movwf	?___fttol,c
  5865  000CAC  0E00               	movlw	0
  5866  000CAE  6E38               	movwf	?___fttol+1,c
  5867  000CB0  0E00               	movlw	0
  5868  000CB2  6E39               	movwf	?___fttol+2,c
  5869  000CB4  0E00               	movlw	0
  5870  000CB6  6E3A               	movwf	?___fttol+3,c
  5871  000CB8  0012               	return	
  5872  000CBA                     i2l2944:
  5873  000CBA  90D8               	bcf	status,0,c
  5874  000CBC  3244               	rrcf	___fttol@lval+3,f,c
  5875  000CBE  3243               	rrcf	___fttol@lval+2,f,c
  5876  000CC0  3242               	rrcf	___fttol@lval+1,f,c
  5877  000CC2  3241               	rrcf	___fttol@lval,f,c
  5878  000CC4  3E45               	incfsz	___fttol@exp1,f,c
  5879  000CC6  D7F9               	goto	i2l2944
  5880  000CC8  D015               	goto	i2l2958
  5881  000CCA                     i2l2948:
  5882  000CCA  0E17               	movlw	23
  5883  000CCC  6445               	cpfsgt	___fttol@exp1,c
  5884  000CCE  D00F               	goto	i2l2956
  5885  000CD0  0E00               	movlw	0
  5886  000CD2  6E37               	movwf	?___fttol,c
  5887  000CD4  0E00               	movlw	0
  5888  000CD6  6E38               	movwf	?___fttol+1,c
  5889  000CD8  0E00               	movlw	0
  5890  000CDA  6E39               	movwf	?___fttol+2,c
  5891  000CDC  0E00               	movlw	0
  5892  000CDE  6E3A               	movwf	?___fttol+3,c
  5893  000CE0  0012               	return	
  5894  000CE2                     i2l2954:
  5895  000CE2  90D8               	bcf	status,0,c
  5896  000CE4  3641               	rlcf	___fttol@lval,f,c
  5897  000CE6  3642               	rlcf	___fttol@lval+1,f,c
  5898  000CE8  3643               	rlcf	___fttol@lval+2,f,c
  5899  000CEA  3644               	rlcf	___fttol@lval+3,f,c
  5900  000CEC  0645               	decf	___fttol@exp1,f,c
  5901  000CEE                     i2l2956:
  5902  000CEE  5045               	movf	___fttol@exp1,w,c
  5903  000CF0  A4D8               	btfss	status,2,c
  5904  000CF2  D7F7               	goto	i2l2954
  5905  000CF4                     i2l2958:
  5906  000CF4  5040               	movf	___fttol@sign1,w,c
  5907  000CF6  B4D8               	btfsc	status,2,c
  5908  000CF8  D008               	goto	i2l2962
  5909  000CFA  1E44               	comf	___fttol@lval+3,f,c
  5910  000CFC  1E43               	comf	___fttol@lval+2,f,c
  5911  000CFE  1E42               	comf	___fttol@lval+1,f,c
  5912  000D00  6C41               	negf	___fttol@lval,c
  5913  000D02  0E00               	movlw	0
  5914  000D04  2242               	addwfc	___fttol@lval+1,f,c
  5915  000D06  2243               	addwfc	___fttol@lval+2,f,c
  5916  000D08  2244               	addwfc	___fttol@lval+3,f,c
  5917  000D0A                     i2l2962:
  5918  000D0A  C041  F037         	movff	___fttol@lval,?___fttol
  5919  000D0E  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  5920  000D12  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  5921  000D16  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  5922  000D1A  0012               	return	
  5923  000D1C                     __end_of___fttol:
  5924                           	opt stack 0
  5925                           pclatu	equ	0xFFB
  5926                           pclath	equ	0xFFA
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           intcon3	equ	0xFF0
  5935                           postinc0	equ	0xFEE
  5936                           fsr0h	equ	0xFEA
  5937                           fsr0l	equ	0xFE9
  5938                           wreg	equ	0xFE8
  5939                           postdec1	equ	0xFE5
  5940                           fsr1h	equ	0xFE2
  5941                           fsr1l	equ	0xFE1
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function ___ftmul *****************
  5950 ;; Defined at:
  5951 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  f1              3   27[COMRAM] float 
  5954 ;;  f2              3   30[COMRAM] float 
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  5957 ;;  sign            1   41[COMRAM] unsigned char 
  5958 ;;  cntr            1   40[COMRAM] unsigned char 
  5959 ;;  exp             1   36[COMRAM] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  3   27[COMRAM] float 
  5962 ;; Registers used:
  5963 ;;		wreg, status,2, status,0, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5969 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;Total ram usage:       15 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    1
  5976 ;; This function calls:
  5977 ;;		___ftpack
  5978 ;; This function is called by:
  5979 ;;		_angleToPulse
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text34
  5984  000D1C                     __ptext34:
  5985                           	opt stack 0
  5986  000D1C                     ___ftmul:
  5987                           	opt stack 19
  5988                           
  5989                           ;incstack = 0
  5990  000D1C  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  5991  000D20  6A23               	clrf	(??___ftmul+1)& (0+255),c
  5992  000D22  6A24               	clrf	(??___ftmul+2)& (0+255),c
  5993  000D24  341D               	rlcf	___ftmul@f1+1,w,c
  5994  000D26  3622               	rlcf	??___ftmul& (0+255),f,c
  5995  000D28  E301               	bnc	u225_41
  5996  000D2A  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  5997  000D2C                     u225_41:
  5998  000D2C  5022               	movf	??___ftmul,w,c
  5999  000D2E  6E25               	movwf	___ftmul@exp,c
  6000  000D30  5025               	movf	___ftmul@exp,w,c
  6001  000D32  A4D8               	btfss	status,2,c
  6002  000D34  D007               	goto	i2l2866
  6003  000D36  0E00               	movlw	0
  6004  000D38  6E1C               	movwf	?___ftmul,c
  6005  000D3A  0E00               	movlw	0
  6006  000D3C  6E1D               	movwf	?___ftmul+1,c
  6007  000D3E  0E00               	movlw	0
  6008  000D40  6E1E               	movwf	?___ftmul+2,c
  6009  000D42  0012               	return	
  6010  000D44                     i2l2866:
  6011  000D44  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  6012  000D48  6A23               	clrf	(??___ftmul+1)& (0+255),c
  6013  000D4A  6A24               	clrf	(??___ftmul+2)& (0+255),c
  6014  000D4C  3420               	rlcf	___ftmul@f2+1,w,c
  6015  000D4E  3622               	rlcf	??___ftmul& (0+255),f,c
  6016  000D50  E301               	bnc	u227_41
  6017  000D52  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  6018  000D54                     u227_41:
  6019  000D54  5022               	movf	??___ftmul,w,c
  6020  000D56  6E2A               	movwf	___ftmul@sign,c
  6021  000D58  502A               	movf	___ftmul@sign,w,c
  6022  000D5A  A4D8               	btfss	status,2,c
  6023  000D5C  D007               	goto	i2l2872
  6024  000D5E  0E00               	movlw	0
  6025  000D60  6E1C               	movwf	?___ftmul,c
  6026  000D62  0E00               	movlw	0
  6027  000D64  6E1D               	movwf	?___ftmul+1,c
  6028  000D66  0E00               	movlw	0
  6029  000D68  6E1E               	movwf	?___ftmul+2,c
  6030  000D6A  0012               	return	
  6031  000D6C                     i2l2872:
  6032  000D6C  502A               	movf	___ftmul@sign,w,c
  6033  000D6E  0F7B               	addlw	123
  6034  000D70  2625               	addwf	___ftmul@exp,f,c
  6035  000D72  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  6036  000D76  5021               	movf	___ftmul@f2+2,w,c
  6037  000D78  1A2A               	xorwf	___ftmul@sign,f,c
  6038  000D7A  0E80               	movlw	128
  6039  000D7C  162A               	andwf	___ftmul@sign,f,c
  6040  000D7E  8E1D               	bsf	___ftmul@f1+1,7,c
  6041  000D80  8E20               	bsf	___ftmul@f2+1,7,c
  6042  000D82  0EFF               	movlw	255
  6043  000D84  161F               	andwf	___ftmul@f2,f,c
  6044  000D86  0EFF               	movlw	255
  6045  000D88  1620               	andwf	___ftmul@f2+1,f,c
  6046  000D8A  0E00               	movlw	0
  6047  000D8C  1621               	andwf	___ftmul@f2+2,f,c
  6048  000D8E  0E00               	movlw	0
  6049  000D90  6E26               	movwf	___ftmul@f3_as_product,c
  6050  000D92  0E00               	movlw	0
  6051  000D94  6E27               	movwf	___ftmul@f3_as_product+1,c
  6052  000D96  0E00               	movlw	0
  6053  000D98  6E28               	movwf	___ftmul@f3_as_product+2,c
  6054  000D9A  0E07               	movlw	7
  6055  000D9C  6E29               	movwf	___ftmul@cntr,c
  6056  000D9E                     i2l2886:
  6057  000D9E  A01C               	btfss	___ftmul@f1,0,c
  6058  000DA0  D006               	goto	i2l2890
  6059  000DA2  501F               	movf	___ftmul@f2,w,c
  6060  000DA4  2626               	addwf	___ftmul@f3_as_product,f,c
  6061  000DA6  5020               	movf	___ftmul@f2+1,w,c
  6062  000DA8  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6063  000DAA  5021               	movf	___ftmul@f2+2,w,c
  6064  000DAC  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6065  000DAE                     i2l2890:
  6066  000DAE  90D8               	bcf	status,0,c
  6067  000DB0  321E               	rrcf	___ftmul@f1+2,f,c
  6068  000DB2  321D               	rrcf	___ftmul@f1+1,f,c
  6069  000DB4  321C               	rrcf	___ftmul@f1,f,c
  6070  000DB6  90D8               	bcf	status,0,c
  6071  000DB8  361F               	rlcf	___ftmul@f2,f,c
  6072  000DBA  3620               	rlcf	___ftmul@f2+1,f,c
  6073  000DBC  3621               	rlcf	___ftmul@f2+2,f,c
  6074  000DBE  2E29               	decfsz	___ftmul@cntr,f,c
  6075  000DC0  D7EE               	goto	i2l2886
  6076  000DC2  0E09               	movlw	9
  6077  000DC4  6E29               	movwf	___ftmul@cntr,c
  6078  000DC6                     i2l2896:
  6079  000DC6  A01C               	btfss	___ftmul@f1,0,c
  6080  000DC8  D006               	goto	i2l2900
  6081  000DCA  501F               	movf	___ftmul@f2,w,c
  6082  000DCC  2626               	addwf	___ftmul@f3_as_product,f,c
  6083  000DCE  5020               	movf	___ftmul@f2+1,w,c
  6084  000DD0  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6085  000DD2  5021               	movf	___ftmul@f2+2,w,c
  6086  000DD4  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6087  000DD6                     i2l2900:
  6088  000DD6  90D8               	bcf	status,0,c
  6089  000DD8  321E               	rrcf	___ftmul@f1+2,f,c
  6090  000DDA  321D               	rrcf	___ftmul@f1+1,f,c
  6091  000DDC  321C               	rrcf	___ftmul@f1,f,c
  6092  000DDE  90D8               	bcf	status,0,c
  6093  000DE0  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  6094  000DE2  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  6095  000DE4  3226               	rrcf	___ftmul@f3_as_product,f,c
  6096  000DE6  2E29               	decfsz	___ftmul@cntr,f,c
  6097  000DE8  D7EE               	goto	i2l2896
  6098  000DEA  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6099  000DEE  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6100  000DF2  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6101  000DF6  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  6102  000DFA  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  6103  000DFE  ECA3  F008         	call	___ftpack	;wreg free
  6104  000E02  C001  F01C         	movff	?___ftpack,?___ftmul
  6105  000E06  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  6106  000E0A  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  6107  000E0E  0012               	return	
  6108  000E10                     __end_of___ftmul:
  6109                           	opt stack 0
  6110                           pclatu	equ	0xFFB
  6111                           pclath	equ	0xFFA
  6112                           tblptru	equ	0xFF8
  6113                           tblptrh	equ	0xFF7
  6114                           tblptrl	equ	0xFF6
  6115                           tablat	equ	0xFF5
  6116                           prodh	equ	0xFF4
  6117                           prodl	equ	0xFF3
  6118                           intcon	equ	0xFF2
  6119                           intcon3	equ	0xFF0
  6120                           postinc0	equ	0xFEE
  6121                           fsr0h	equ	0xFEA
  6122                           fsr0l	equ	0xFE9
  6123                           wreg	equ	0xFE8
  6124                           postdec1	equ	0xFE5
  6125                           fsr1h	equ	0xFE2
  6126                           fsr1l	equ	0xFE1
  6127                           indf2	equ	0xFDF
  6128                           postinc2	equ	0xFDE
  6129                           postdec2	equ	0xFDD
  6130                           fsr2h	equ	0xFDA
  6131                           fsr2l	equ	0xFD9
  6132                           status	equ	0xFD8
  6133                           
  6134 ;; *************** function ___ftdiv *****************
  6135 ;; Defined at:
  6136 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  f1              3   12[COMRAM] float 
  6139 ;;  f2              3   15[COMRAM] float 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;  f3              3   22[COMRAM] float 
  6142 ;;  sign            1   26[COMRAM] unsigned char 
  6143 ;;  exp             1   25[COMRAM] unsigned char 
  6144 ;;  cntr            1   21[COMRAM] unsigned char 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  3   12[COMRAM] float 
  6147 ;; Registers used:
  6148 ;;		wreg, status,2, status,0, cstack
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6154 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;Total ram usage:       15 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    1
  6161 ;; This function calls:
  6162 ;;		___ftpack
  6163 ;; This function is called by:
  6164 ;;		_angleToPulse
  6165 ;;		_testFrequency
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text35
  6170  000E10                     __ptext35:
  6171                           	opt stack 0
  6172  000E10                     ___ftdiv:
  6173                           	opt stack 19
  6174                           
  6175                           ;incstack = 0
  6176  000E10  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  6177  000E14  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6178  000E16  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6179  000E18  340E               	rlcf	___ftdiv@f1+1,w,c
  6180  000E1A  3613               	rlcf	??___ftdiv& (0+255),f,c
  6181  000E1C  E301               	bnc	u220_41
  6182  000E1E  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6183  000E20                     u220_41:
  6184  000E20  5013               	movf	??___ftdiv,w,c
  6185  000E22  6E1A               	movwf	___ftdiv@exp,c
  6186  000E24  501A               	movf	___ftdiv@exp,w,c
  6187  000E26  A4D8               	btfss	status,2,c
  6188  000E28  D007               	goto	i2l2820
  6189  000E2A  0E00               	movlw	0
  6190  000E2C  6E0D               	movwf	?___ftdiv,c
  6191  000E2E  0E00               	movlw	0
  6192  000E30  6E0E               	movwf	?___ftdiv+1,c
  6193  000E32  0E00               	movlw	0
  6194  000E34  6E0F               	movwf	?___ftdiv+2,c
  6195  000E36  0012               	return	
  6196  000E38                     i2l2820:
  6197  000E38  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  6198  000E3C  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6199  000E3E  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6200  000E40  3411               	rlcf	___ftdiv@f2+1,w,c
  6201  000E42  3613               	rlcf	??___ftdiv& (0+255),f,c
  6202  000E44  E301               	bnc	u222_41
  6203  000E46  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6204  000E48                     u222_41:
  6205  000E48  5013               	movf	??___ftdiv,w,c
  6206  000E4A  6E1B               	movwf	___ftdiv@sign,c
  6207  000E4C  501B               	movf	___ftdiv@sign,w,c
  6208  000E4E  A4D8               	btfss	status,2,c
  6209  000E50  D007               	goto	i2l2826
  6210  000E52  0E00               	movlw	0
  6211  000E54  6E0D               	movwf	?___ftdiv,c
  6212  000E56  0E00               	movlw	0
  6213  000E58  6E0E               	movwf	?___ftdiv+1,c
  6214  000E5A  0E00               	movlw	0
  6215  000E5C  6E0F               	movwf	?___ftdiv+2,c
  6216  000E5E  0012               	return	
  6217  000E60                     i2l2826:
  6218  000E60  0E00               	movlw	0
  6219  000E62  6E17               	movwf	___ftdiv@f3,c
  6220  000E64  0E00               	movlw	0
  6221  000E66  6E18               	movwf	___ftdiv@f3+1,c
  6222  000E68  0E00               	movlw	0
  6223  000E6A  6E19               	movwf	___ftdiv@f3+2,c
  6224  000E6C  501B               	movf	___ftdiv@sign,w,c
  6225  000E6E  0F89               	addlw	137
  6226  000E70  5E1A               	subwf	___ftdiv@exp,f,c
  6227  000E72  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  6228  000E76  5012               	movf	___ftdiv@f2+2,w,c
  6229  000E78  1A1B               	xorwf	___ftdiv@sign,f,c
  6230  000E7A  0E80               	movlw	128
  6231  000E7C  161B               	andwf	___ftdiv@sign,f,c
  6232  000E7E  8E0E               	bsf	___ftdiv@f1+1,7,c
  6233  000E80  0EFF               	movlw	255
  6234  000E82  160D               	andwf	___ftdiv@f1,f,c
  6235  000E84  0EFF               	movlw	255
  6236  000E86  160E               	andwf	___ftdiv@f1+1,f,c
  6237  000E88  0E00               	movlw	0
  6238  000E8A  160F               	andwf	___ftdiv@f1+2,f,c
  6239  000E8C  8E11               	bsf	___ftdiv@f2+1,7,c
  6240  000E8E  0EFF               	movlw	255
  6241  000E90  1610               	andwf	___ftdiv@f2,f,c
  6242  000E92  0EFF               	movlw	255
  6243  000E94  1611               	andwf	___ftdiv@f2+1,f,c
  6244  000E96  0E00               	movlw	0
  6245  000E98  1612               	andwf	___ftdiv@f2+2,f,c
  6246  000E9A  0E18               	movlw	24
  6247  000E9C  6E16               	movwf	___ftdiv@cntr,c
  6248  000E9E                     i2l2846:
  6249  000E9E  90D8               	bcf	status,0,c
  6250  000EA0  3617               	rlcf	___ftdiv@f3,f,c
  6251  000EA2  3618               	rlcf	___ftdiv@f3+1,f,c
  6252  000EA4  3619               	rlcf	___ftdiv@f3+2,f,c
  6253  000EA6  5010               	movf	___ftdiv@f2,w,c
  6254  000EA8  5C0D               	subwf	___ftdiv@f1,w,c
  6255  000EAA  5011               	movf	___ftdiv@f2+1,w,c
  6256  000EAC  580E               	subwfb	___ftdiv@f1+1,w,c
  6257  000EAE  5012               	movf	___ftdiv@f2+2,w,c
  6258  000EB0  580F               	subwfb	___ftdiv@f1+2,w,c
  6259  000EB2  A0D8               	btfss	status,0,c
  6260  000EB4  D007               	goto	i2l869
  6261  000EB6  5010               	movf	___ftdiv@f2,w,c
  6262  000EB8  5E0D               	subwf	___ftdiv@f1,f,c
  6263  000EBA  5011               	movf	___ftdiv@f2+1,w,c
  6264  000EBC  5A0E               	subwfb	___ftdiv@f1+1,f,c
  6265  000EBE  5012               	movf	___ftdiv@f2+2,w,c
  6266  000EC0  5A0F               	subwfb	___ftdiv@f1+2,f,c
  6267  000EC2  8017               	bsf	___ftdiv@f3,0,c
  6268  000EC4                     i2l869:
  6269  000EC4  90D8               	bcf	status,0,c
  6270  000EC6  360D               	rlcf	___ftdiv@f1,f,c
  6271  000EC8  360E               	rlcf	___ftdiv@f1+1,f,c
  6272  000ECA  360F               	rlcf	___ftdiv@f1+2,f,c
  6273  000ECC  2E16               	decfsz	___ftdiv@cntr,f,c
  6274  000ECE  D7E7               	goto	i2l2846
  6275  000ED0  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  6276  000ED4  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6277  000ED8  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6278  000EDC  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  6279  000EE0  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  6280  000EE4  ECA3  F008         	call	___ftpack	;wreg free
  6281  000EE8  C001  F00D         	movff	?___ftpack,?___ftdiv
  6282  000EEC  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  6283  000EF0  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  6284  000EF4  0012               	return	
  6285  000EF6                     __end_of___ftdiv:
  6286                           	opt stack 0
  6287                           pclatu	equ	0xFFB
  6288                           pclath	equ	0xFFA
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           prodh	equ	0xFF4
  6294                           prodl	equ	0xFF3
  6295                           intcon	equ	0xFF2
  6296                           intcon3	equ	0xFF0
  6297                           postinc0	equ	0xFEE
  6298                           fsr0h	equ	0xFEA
  6299                           fsr0l	equ	0xFE9
  6300                           wreg	equ	0xFE8
  6301                           postdec1	equ	0xFE5
  6302                           fsr1h	equ	0xFE2
  6303                           fsr1l	equ	0xFE1
  6304                           indf2	equ	0xFDF
  6305                           postinc2	equ	0xFDE
  6306                           postdec2	equ	0xFDD
  6307                           fsr2h	equ	0xFDA
  6308                           fsr2l	equ	0xFD9
  6309                           status	equ	0xFD8
  6310                           
  6311 ;; *************** function ___ftadd *****************
  6312 ;; Defined at:
  6313 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  f1              3   42[COMRAM] float 
  6316 ;;  f2              3   45[COMRAM] float 
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  exp1            1   53[COMRAM] unsigned char 
  6319 ;;  exp2            1   52[COMRAM] unsigned char 
  6320 ;;  sign            1   51[COMRAM] unsigned char 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  3   42[COMRAM] float 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2, status,0, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6330 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;Total ram usage:       12 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    1
  6337 ;; This function calls:
  6338 ;;		___ftpack
  6339 ;; This function is called by:
  6340 ;;		_angleToPulse
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text36
  6345  000838                     __ptext36:
  6346                           	opt stack 0
  6347  000838                     ___ftadd:
  6348                           	opt stack 19
  6349                           
  6350                           ;incstack = 0
  6351  000838  C02D  F031         	movff	___ftadd@f1+2,??___ftadd
  6352  00083C  6A32               	clrf	(??___ftadd+1)& (0+255),c
  6353  00083E  6A33               	clrf	(??___ftadd+2)& (0+255),c
  6354  000840  342C               	rlcf	___ftadd@f1+1,w,c
  6355  000842  3631               	rlcf	??___ftadd& (0+255),f,c
  6356  000844  E301               	bnc	u199_41
  6357  000846  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  6358  000848                     u199_41:
  6359  000848  5031               	movf	??___ftadd,w,c
  6360  00084A  6E36               	movwf	___ftadd@exp1,c
  6361  00084C  C030  F031         	movff	___ftadd@f2+2,??___ftadd
  6362  000850  6A32               	clrf	(??___ftadd+1)& (0+255),c
  6363  000852  6A33               	clrf	(??___ftadd+2)& (0+255),c
  6364  000854  342F               	rlcf	___ftadd@f2+1,w,c
  6365  000856  3631               	rlcf	??___ftadd& (0+255),f,c
  6366  000858  E301               	bnc	u200_41
  6367  00085A  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  6368  00085C                     u200_41:
  6369  00085C  5031               	movf	??___ftadd,w,c
  6370  00085E  6E35               	movwf	___ftadd@exp2,c
  6371  000860  5036               	movf	___ftadd@exp1,w,c
  6372  000862  B4D8               	btfsc	status,2,c
  6373  000864  D00B               	goto	i2l834
  6374  000866  5035               	movf	___ftadd@exp2,w,c
  6375  000868  5C36               	subwf	___ftadd@exp1,w,c
  6376  00086A  B0D8               	btfsc	status,0,c
  6377  00086C  D00E               	goto	i2l2752
  6378  00086E  5036               	movf	___ftadd@exp1,w,c
  6379  000870  0800               	sublw	0
  6380  000872  2435               	addwf	___ftadd@exp2,w,c
  6381  000874  6E31               	movwf	??___ftadd& (0+255),c
  6382  000876  0E18               	movlw	24
  6383  000878  6431               	cpfsgt	??___ftadd,c
  6384  00087A  D007               	goto	i2l2752
  6385  00087C                     i2l834:
  6386  00087C  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  6387  000880  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  6388  000884  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  6389  000888  0012               	return	
  6390  00088A                     i2l2752:
  6391  00088A  5035               	movf	___ftadd@exp2,w,c
  6392  00088C  B4D8               	btfsc	status,2,c
  6393  00088E  D00B               	goto	i2l838
  6394  000890  5036               	movf	___ftadd@exp1,w,c
  6395  000892  5C35               	subwf	___ftadd@exp2,w,c
  6396  000894  B0D8               	btfsc	status,0,c
  6397  000896  D00E               	goto	i2l2758
  6398  000898  5035               	movf	___ftadd@exp2,w,c
  6399  00089A  0800               	sublw	0
  6400  00089C  2436               	addwf	___ftadd@exp1,w,c
  6401  00089E  6E31               	movwf	??___ftadd& (0+255),c
  6402  0008A0  0E18               	movlw	24
  6403  0008A2  6431               	cpfsgt	??___ftadd,c
  6404  0008A4  D007               	goto	i2l2758
  6405  0008A6                     i2l838:
  6406  0008A6  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  6407  0008AA  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  6408  0008AE  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  6409  0008B2  0012               	return	
  6410  0008B4                     i2l2758:
  6411  0008B4  0E06               	movlw	6
  6412  0008B6  6E34               	movwf	___ftadd@sign,c
  6413  0008B8  BE2D               	btfsc	___ftadd@f1+2,7,c
  6414  0008BA  8E34               	bsf	___ftadd@sign,7,c
  6415  0008BC  BE30               	btfsc	___ftadd@f2+2,7,c
  6416  0008BE  8C34               	bsf	___ftadd@sign,6,c
  6417  0008C0  8E2C               	bsf	___ftadd@f1+1,7,c
  6418  0008C2  0EFF               	movlw	255
  6419  0008C4  162B               	andwf	___ftadd@f1,f,c
  6420  0008C6  0EFF               	movlw	255
  6421  0008C8  162C               	andwf	___ftadd@f1+1,f,c
  6422  0008CA  0E00               	movlw	0
  6423  0008CC  162D               	andwf	___ftadd@f1+2,f,c
  6424  0008CE  8E2F               	bsf	___ftadd@f2+1,7,c
  6425  0008D0  0EFF               	movlw	255
  6426  0008D2  162E               	andwf	___ftadd@f2,f,c
  6427  0008D4  0EFF               	movlw	255
  6428  0008D6  162F               	andwf	___ftadd@f2+1,f,c
  6429  0008D8  0E00               	movlw	0
  6430  0008DA  1630               	andwf	___ftadd@f2+2,f,c
  6431  0008DC  5035               	movf	___ftadd@exp2,w,c
  6432  0008DE  5C36               	subwf	___ftadd@exp1,w,c
  6433  0008E0  B0D8               	btfsc	status,0,c
  6434  0008E2  D01B               	goto	i2l2784
  6435  0008E4                     i2l2774:
  6436  0008E4  90D8               	bcf	status,0,c
  6437  0008E6  362E               	rlcf	___ftadd@f2,f,c
  6438  0008E8  362F               	rlcf	___ftadd@f2+1,f,c
  6439  0008EA  3630               	rlcf	___ftadd@f2+2,f,c
  6440  0008EC  0635               	decf	___ftadd@exp2,f,c
  6441  0008EE  5036               	movf	___ftadd@exp1,w,c
  6442  0008F0  1835               	xorwf	___ftadd@exp2,w,c
  6443  0008F2  B4D8               	btfsc	status,2,c
  6444  0008F4  D00D               	goto	i2l2782
  6445  0008F6  0634               	decf	___ftadd@sign,f,c
  6446  0008F8  C034  F031         	movff	___ftadd@sign,??___ftadd
  6447  0008FC  0E07               	movlw	7
  6448  0008FE  1631               	andwf	??___ftadd,f,c
  6449  000900  B4D8               	btfsc	status,2,c
  6450  000902  D006               	goto	i2l2782
  6451  000904  D7EF               	goto	i2l2774
  6452  000906                     i2l2780:
  6453  000906  90D8               	bcf	status,0,c
  6454  000908  322D               	rrcf	___ftadd@f1+2,f,c
  6455  00090A  322C               	rrcf	___ftadd@f1+1,f,c
  6456  00090C  322B               	rrcf	___ftadd@f1,f,c
  6457  00090E  2A36               	incf	___ftadd@exp1,f,c
  6458  000910                     i2l2782:
  6459  000910  5035               	movf	___ftadd@exp2,w,c
  6460  000912  1836               	xorwf	___ftadd@exp1,w,c
  6461  000914  B4D8               	btfsc	status,2,c
  6462  000916  D01F               	goto	i2l849
  6463  000918  D7F6               	goto	i2l2780
  6464  00091A                     i2l2784:
  6465  00091A  5036               	movf	___ftadd@exp1,w,c
  6466  00091C  5C35               	subwf	___ftadd@exp2,w,c
  6467  00091E  B0D8               	btfsc	status,0,c
  6468  000920  D01A               	goto	i2l849
  6469  000922                     i2l2786:
  6470  000922  90D8               	bcf	status,0,c
  6471  000924  362B               	rlcf	___ftadd@f1,f,c
  6472  000926  362C               	rlcf	___ftadd@f1+1,f,c
  6473  000928  362D               	rlcf	___ftadd@f1+2,f,c
  6474  00092A  0636               	decf	___ftadd@exp1,f,c
  6475  00092C  5036               	movf	___ftadd@exp1,w,c
  6476  00092E  1835               	xorwf	___ftadd@exp2,w,c
  6477  000930  B4D8               	btfsc	status,2,c
  6478  000932  D00D               	goto	i2l2794
  6479  000934  0634               	decf	___ftadd@sign,f,c
  6480  000936  C034  F031         	movff	___ftadd@sign,??___ftadd
  6481  00093A  0E07               	movlw	7
  6482  00093C  1631               	andwf	??___ftadd,f,c
  6483  00093E  B4D8               	btfsc	status,2,c
  6484  000940  D006               	goto	i2l2794
  6485  000942  D7EF               	goto	i2l2786
  6486  000944                     i2l2792:
  6487  000944  90D8               	bcf	status,0,c
  6488  000946  3230               	rrcf	___ftadd@f2+2,f,c
  6489  000948  322F               	rrcf	___ftadd@f2+1,f,c
  6490  00094A  322E               	rrcf	___ftadd@f2,f,c
  6491  00094C  2A35               	incf	___ftadd@exp2,f,c
  6492  00094E                     i2l2794:
  6493  00094E  5035               	movf	___ftadd@exp2,w,c
  6494  000950  1836               	xorwf	___ftadd@exp1,w,c
  6495  000952  A4D8               	btfss	status,2,c
  6496  000954  D7F7               	goto	i2l2792
  6497  000956                     i2l849:
  6498  000956  AE34               	btfss	___ftadd@sign,7,c
  6499  000958  D00C               	goto	i2l858
  6500  00095A  0EFF               	movlw	255
  6501  00095C  1A2B               	xorwf	___ftadd@f1,f,c
  6502  00095E  0EFF               	movlw	255
  6503  000960  1A2C               	xorwf	___ftadd@f1+1,f,c
  6504  000962  0EFF               	movlw	255
  6505  000964  1A2D               	xorwf	___ftadd@f1+2,f,c
  6506  000966  0E01               	movlw	1
  6507  000968  262B               	addwf	___ftadd@f1,f,c
  6508  00096A  0E00               	movlw	0
  6509  00096C  222C               	addwfc	___ftadd@f1+1,f,c
  6510  00096E  0E00               	movlw	0
  6511  000970  222D               	addwfc	___ftadd@f1+2,f,c
  6512  000972                     i2l858:
  6513  000972  AC34               	btfss	___ftadd@sign,6,c
  6514  000974  D00C               	goto	i2l2800
  6515  000976  0EFF               	movlw	255
  6516  000978  1A2E               	xorwf	___ftadd@f2,f,c
  6517  00097A  0EFF               	movlw	255
  6518  00097C  1A2F               	xorwf	___ftadd@f2+1,f,c
  6519  00097E  0EFF               	movlw	255
  6520  000980  1A30               	xorwf	___ftadd@f2+2,f,c
  6521  000982  0E01               	movlw	1
  6522  000984  262E               	addwf	___ftadd@f2,f,c
  6523  000986  0E00               	movlw	0
  6524  000988  222F               	addwfc	___ftadd@f2+1,f,c
  6525  00098A  0E00               	movlw	0
  6526  00098C  2230               	addwfc	___ftadd@f2+2,f,c
  6527  00098E                     i2l2800:
  6528  00098E  0E00               	movlw	0
  6529  000990  6E34               	movwf	___ftadd@sign,c
  6530  000992  502B               	movf	___ftadd@f1,w,c
  6531  000994  262E               	addwf	___ftadd@f2,f,c
  6532  000996  502C               	movf	___ftadd@f1+1,w,c
  6533  000998  222F               	addwfc	___ftadd@f2+1,f,c
  6534  00099A  502D               	movf	___ftadd@f1+2,w,c
  6535  00099C  2230               	addwfc	___ftadd@f2+2,f,c
  6536  00099E  AE30               	btfss	___ftadd@f2+2,7,c
  6537  0009A0  D00E               	goto	i2l2810
  6538  0009A2  0EFF               	movlw	255
  6539  0009A4  1A2E               	xorwf	___ftadd@f2,f,c
  6540  0009A6  0EFF               	movlw	255
  6541  0009A8  1A2F               	xorwf	___ftadd@f2+1,f,c
  6542  0009AA  0EFF               	movlw	255
  6543  0009AC  1A30               	xorwf	___ftadd@f2+2,f,c
  6544  0009AE  0E01               	movlw	1
  6545  0009B0  262E               	addwf	___ftadd@f2,f,c
  6546  0009B2  0E00               	movlw	0
  6547  0009B4  222F               	addwfc	___ftadd@f2+1,f,c
  6548  0009B6  0E00               	movlw	0
  6549  0009B8  2230               	addwfc	___ftadd@f2+2,f,c
  6550  0009BA  0E01               	movlw	1
  6551  0009BC  6E34               	movwf	___ftadd@sign,c
  6552  0009BE                     i2l2810:
  6553  0009BE  C02E  F001         	movff	___ftadd@f2,___ftpack@arg
  6554  0009C2  C02F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6555  0009C6  C030  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6556  0009CA  C036  F004         	movff	___ftadd@exp1,___ftpack@exp
  6557  0009CE  C034  F005         	movff	___ftadd@sign,___ftpack@sign
  6558  0009D2  ECA3  F008         	call	___ftpack	;wreg free
  6559  0009D6  C001  F02B         	movff	?___ftpack,?___ftadd
  6560  0009DA  C002  F02C         	movff	?___ftpack+1,?___ftadd+1
  6561  0009DE  C003  F02D         	movff	?___ftpack+2,?___ftadd+2
  6562  0009E2  0012               	return	
  6563  0009E4                     __end_of___ftadd:
  6564                           	opt stack 0
  6565                           pclatu	equ	0xFFB
  6566                           pclath	equ	0xFFA
  6567                           tblptru	equ	0xFF8
  6568                           tblptrh	equ	0xFF7
  6569                           tblptrl	equ	0xFF6
  6570                           tablat	equ	0xFF5
  6571                           prodh	equ	0xFF4
  6572                           prodl	equ	0xFF3
  6573                           intcon	equ	0xFF2
  6574                           intcon3	equ	0xFF0
  6575                           postinc0	equ	0xFEE
  6576                           fsr0h	equ	0xFEA
  6577                           fsr0l	equ	0xFE9
  6578                           wreg	equ	0xFE8
  6579                           postdec1	equ	0xFE5
  6580                           fsr1h	equ	0xFE2
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function ___awtoft *****************
  6590 ;; Defined at:
  6591 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  c               2    8[COMRAM] int 
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  sign            1   11[COMRAM] unsigned char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  3    8[COMRAM] float 
  6598 ;; Registers used:
  6599 ;;		wreg, status,2, status,0, cstack
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6605 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;Total ram usage:        4 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:    1
  6612 ;; This function calls:
  6613 ;;		___ftpack
  6614 ;; This function is called by:
  6615 ;;		_angleToPulse
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text37
  6620  00179A                     __ptext37:
  6621                           	opt stack 0
  6622  00179A                     ___awtoft:
  6623                           	opt stack 19
  6624                           
  6625                           ;incstack = 0
  6626  00179A  0E00               	movlw	0
  6627  00179C  6E0C               	movwf	___awtoft@sign,c
  6628  00179E  AE0A               	btfss	___awtoft@c+1,7,c
  6629  0017A0  D006               	goto	i2l2916
  6630  0017A2  6C09               	negf	___awtoft@c,c
  6631  0017A4  1E0A               	comf	___awtoft@c+1,f,c
  6632  0017A6  B0D8               	btfsc	status,0,c
  6633  0017A8  2A0A               	incf	___awtoft@c+1,f,c
  6634  0017AA  0E01               	movlw	1
  6635  0017AC  6E0C               	movwf	___awtoft@sign,c
  6636  0017AE                     i2l2916:
  6637  0017AE  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6638  0017B2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6639  0017B6  6A03               	clrf	___ftpack@arg+2,c
  6640  0017B8  0E8E               	movlw	142
  6641  0017BA  6E04               	movwf	___ftpack@exp,c
  6642  0017BC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6643  0017C0  ECA3  F008         	call	___ftpack	;wreg free
  6644  0017C4  C001  F009         	movff	?___ftpack,?___awtoft
  6645  0017C8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6646  0017CC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6647  0017D0  0012               	return	
  6648  0017D2                     __end_of___awtoft:
  6649                           	opt stack 0
  6650                           pclatu	equ	0xFFB
  6651                           pclath	equ	0xFFA
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           intcon3	equ	0xFF0
  6660                           postinc0	equ	0xFEE
  6661                           fsr0h	equ	0xFEA
  6662                           fsr0l	equ	0xFE9
  6663                           wreg	equ	0xFE8
  6664                           postdec1	equ	0xFE5
  6665                           fsr1h	equ	0xFE2
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           postdec2	equ	0xFDD
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function ___altoft *****************
  6675 ;; Defined at:
  6676 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  c               4    8[COMRAM] long 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  sign            1   17[COMRAM] unsigned char 
  6681 ;;  exp             1   16[COMRAM] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  3    8[COMRAM] float 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6691 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;Total ram usage:       10 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    1
  6698 ;; This function calls:
  6699 ;;		___ftpack
  6700 ;; This function is called by:
  6701 ;;		_angleToPulse
  6702 ;;		_testFrequency
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text38
  6707  0014DC                     __ptext38:
  6708                           	opt stack 0
  6709  0014DC                     ___altoft:
  6710                           	opt stack 19
  6711                           
  6712                           ;incstack = 0
  6713  0014DC  0E00               	movlw	0
  6714  0014DE  6E12               	movwf	___altoft@sign,c
  6715  0014E0  0E8E               	movlw	142
  6716  0014E2  6E11               	movwf	___altoft@exp,c
  6717  0014E4  AE0C               	btfss	___altoft@c+3,7,c
  6718  0014E6  D011               	goto	i2l2738
  6719  0014E8  1E0C               	comf	___altoft@c+3,f,c
  6720  0014EA  1E0B               	comf	___altoft@c+2,f,c
  6721  0014EC  1E0A               	comf	___altoft@c+1,f,c
  6722  0014EE  6C09               	negf	___altoft@c,c
  6723  0014F0  0E00               	movlw	0
  6724  0014F2  220A               	addwfc	___altoft@c+1,f,c
  6725  0014F4  220B               	addwfc	___altoft@c+2,f,c
  6726  0014F6  220C               	addwfc	___altoft@c+3,f,c
  6727  0014F8  0E01               	movlw	1
  6728  0014FA  6E12               	movwf	___altoft@sign,c
  6729  0014FC  D006               	goto	i2l2738
  6730  0014FE                     i2l2736:
  6731  0014FE  90D8               	bcf	status,0,c
  6732  001500  320C               	rrcf	___altoft@c+3,f,c
  6733  001502  320B               	rrcf	___altoft@c+2,f,c
  6734  001504  320A               	rrcf	___altoft@c+1,f,c
  6735  001506  3209               	rrcf	___altoft@c,f,c
  6736  001508  2A11               	incf	___altoft@exp,f,c
  6737  00150A                     i2l2738:
  6738  00150A  0E00               	movlw	0
  6739  00150C  1409               	andwf	___altoft@c,w,c
  6740  00150E  6E0D               	movwf	??___altoft& (0+255),c
  6741  001510  0E00               	movlw	0
  6742  001512  140A               	andwf	___altoft@c+1,w,c
  6743  001514  6E0E               	movwf	(??___altoft+1)& (0+255),c
  6744  001516  0E00               	movlw	0
  6745  001518  140B               	andwf	___altoft@c+2,w,c
  6746  00151A  6E0F               	movwf	(??___altoft+2)& (0+255),c
  6747  00151C  0EFF               	movlw	255
  6748  00151E  140C               	andwf	___altoft@c+3,w,c
  6749  001520  6E10               	movwf	(??___altoft+3)& (0+255),c
  6750  001522  500D               	movf	??___altoft,w,c
  6751  001524  100E               	iorwf	??___altoft+1,w,c
  6752  001526  100F               	iorwf	??___altoft+2,w,c
  6753  001528  1010               	iorwf	??___altoft+3,w,c
  6754  00152A  A4D8               	btfss	status,2,c
  6755  00152C  D7E8               	goto	i2l2736
  6756  00152E  C009  F001         	movff	___altoft@c,___ftpack@arg
  6757  001532  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  6758  001536  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  6759  00153A  C011  F004         	movff	___altoft@exp,___ftpack@exp
  6760  00153E  C012  F005         	movff	___altoft@sign,___ftpack@sign
  6761  001542  ECA3  F008         	call	___ftpack	;wreg free
  6762  001546  C001  F009         	movff	?___ftpack,?___altoft
  6763  00154A  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  6764  00154E  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  6765  001552  0012               	return	
  6766  001554                     __end_of___altoft:
  6767                           	opt stack 0
  6768                           pclatu	equ	0xFFB
  6769                           pclath	equ	0xFFA
  6770                           tblptru	equ	0xFF8
  6771                           tblptrh	equ	0xFF7
  6772                           tblptrl	equ	0xFF6
  6773                           tablat	equ	0xFF5
  6774                           prodh	equ	0xFF4
  6775                           prodl	equ	0xFF3
  6776                           intcon	equ	0xFF2
  6777                           intcon3	equ	0xFF0
  6778                           postinc0	equ	0xFEE
  6779                           fsr0h	equ	0xFEA
  6780                           fsr0l	equ	0xFE9
  6781                           wreg	equ	0xFE8
  6782                           postdec1	equ	0xFE5
  6783                           fsr1h	equ	0xFE2
  6784                           fsr1l	equ	0xFE1
  6785                           indf2	equ	0xFDF
  6786                           postinc2	equ	0xFDE
  6787                           postdec2	equ	0xFDD
  6788                           fsr2h	equ	0xFDA
  6789                           fsr2l	equ	0xFD9
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function ___ftpack *****************
  6793 ;; Defined at:
  6794 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;  arg             3    0[COMRAM] unsigned um
  6797 ;;  exp             1    3[COMRAM] unsigned char 
  6798 ;;  sign            1    4[COMRAM] unsigned char 
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;		None
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  3    0[COMRAM] float 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6810 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;Total ram usage:        8 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; This function calls:
  6817 ;;		Nothing
  6818 ;; This function is called by:
  6819 ;;		___altoft
  6820 ;;		___awtoft
  6821 ;;		___ftadd
  6822 ;;		___ftdiv
  6823 ;;		___ftmul
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text39
  6828  001146                     __ptext39:
  6829                           	opt stack 0
  6830  001146                     ___ftpack:
  6831                           	opt stack 19
  6832                           
  6833                           ;incstack = 0
  6834  001146  5004               	movf	___ftpack@exp,w,c
  6835  001148  B4D8               	btfsc	status,2,c
  6836  00114A  D005               	goto	i2l2554
  6837  00114C  5001               	movf	___ftpack@arg,w,c
  6838  00114E  1002               	iorwf	___ftpack@arg+1,w,c
  6839  001150  1003               	iorwf	___ftpack@arg+2,w,c
  6840  001152  A4D8               	btfss	status,2,c
  6841  001154  D00C               	goto	i2l2560
  6842  001156                     i2l2554:
  6843  001156  0E00               	movlw	0
  6844  001158  6E01               	movwf	?___ftpack,c
  6845  00115A  0E00               	movlw	0
  6846  00115C  6E02               	movwf	?___ftpack+1,c
  6847  00115E  0E00               	movlw	0
  6848  001160  6E03               	movwf	?___ftpack+2,c
  6849  001162  0012               	return	
  6850  001164                     i2l2558:
  6851  001164  2A04               	incf	___ftpack@exp,f,c
  6852  001166  90D8               	bcf	status,0,c
  6853  001168  3203               	rrcf	___ftpack@arg+2,f,c
  6854  00116A  3202               	rrcf	___ftpack@arg+1,f,c
  6855  00116C  3201               	rrcf	___ftpack@arg,f,c
  6856  00116E                     i2l2560:
  6857  00116E  0E00               	movlw	0
  6858  001170  1401               	andwf	___ftpack@arg,w,c
  6859  001172  6E06               	movwf	??___ftpack& (0+255),c
  6860  001174  0E00               	movlw	0
  6861  001176  1402               	andwf	___ftpack@arg+1,w,c
  6862  001178  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6863  00117A  0EFE               	movlw	254
  6864  00117C  1403               	andwf	___ftpack@arg+2,w,c
  6865  00117E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6866  001180  5006               	movf	??___ftpack,w,c
  6867  001182  1007               	iorwf	??___ftpack+1,w,c
  6868  001184  1008               	iorwf	??___ftpack+2,w,c
  6869  001186  B4D8               	btfsc	status,2,c
  6870  001188  D00C               	goto	i2l2566
  6871  00118A  D7EC               	goto	i2l2558
  6872  00118C                     i2l2562:
  6873  00118C  2A04               	incf	___ftpack@exp,f,c
  6874  00118E  0E01               	movlw	1
  6875  001190  2601               	addwf	___ftpack@arg,f,c
  6876  001192  0E00               	movlw	0
  6877  001194  2202               	addwfc	___ftpack@arg+1,f,c
  6878  001196  0E00               	movlw	0
  6879  001198  2203               	addwfc	___ftpack@arg+2,f,c
  6880  00119A  90D8               	bcf	status,0,c
  6881  00119C  3203               	rrcf	___ftpack@arg+2,f,c
  6882  00119E  3202               	rrcf	___ftpack@arg+1,f,c
  6883  0011A0  3201               	rrcf	___ftpack@arg,f,c
  6884  0011A2                     i2l2566:
  6885  0011A2  0E00               	movlw	0
  6886  0011A4  1401               	andwf	___ftpack@arg,w,c
  6887  0011A6  6E06               	movwf	??___ftpack& (0+255),c
  6888  0011A8  0E00               	movlw	0
  6889  0011AA  1402               	andwf	___ftpack@arg+1,w,c
  6890  0011AC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6891  0011AE  0EFF               	movlw	255
  6892  0011B0  1403               	andwf	___ftpack@arg+2,w,c
  6893  0011B2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6894  0011B4  5006               	movf	??___ftpack,w,c
  6895  0011B6  1007               	iorwf	??___ftpack+1,w,c
  6896  0011B8  1008               	iorwf	??___ftpack+2,w,c
  6897  0011BA  B4D8               	btfsc	status,2,c
  6898  0011BC  D006               	goto	i2l2570
  6899  0011BE  D7E6               	goto	i2l2562
  6900  0011C0                     i2l2568:
  6901  0011C0  0604               	decf	___ftpack@exp,f,c
  6902  0011C2  90D8               	bcf	status,0,c
  6903  0011C4  3601               	rlcf	___ftpack@arg,f,c
  6904  0011C6  3602               	rlcf	___ftpack@arg+1,f,c
  6905  0011C8  3603               	rlcf	___ftpack@arg+2,f,c
  6906  0011CA                     i2l2570:
  6907  0011CA  BE02               	btfsc	___ftpack@arg+1,7,c
  6908  0011CC  D003               	goto	i2l811
  6909  0011CE  0E02               	movlw	2
  6910  0011D0  6004               	cpfslt	___ftpack@exp,c
  6911  0011D2  D7F6               	goto	i2l2568
  6912  0011D4                     i2l811:
  6913  0011D4  A004               	btfss	___ftpack@exp,0,c
  6914  0011D6  9E02               	bcf	___ftpack@arg+1,7,c
  6915  0011D8  90D8               	bcf	status,0,c
  6916  0011DA  3204               	rrcf	___ftpack@exp,f,c
  6917  0011DC  5004               	movf	___ftpack@exp,w,c
  6918  0011DE  1203               	iorwf	___ftpack@arg+2,f,c
  6919  0011E0  5005               	movf	___ftpack@sign,w,c
  6920  0011E2  A4D8               	btfss	status,2,c
  6921  0011E4  8E03               	bsf	___ftpack@arg+2,7,c
  6922  0011E6  C001  F001         	movff	___ftpack@arg,?___ftpack
  6923  0011EA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6924  0011EE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6925  0011F2  0012               	return	
  6926  0011F4                     __end_of___ftpack:
  6927                           	opt stack 0
  6928                           pclatu	equ	0xFFB
  6929                           pclath	equ	0xFFA
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           intcon	equ	0xFF2
  6937                           intcon3	equ	0xFF0
  6938                           postinc0	equ	0xFEE
  6939                           fsr0h	equ	0xFEA
  6940                           fsr0l	equ	0xFE9
  6941                           wreg	equ	0xFE8
  6942                           postdec1	equ	0xFE5
  6943                           fsr1h	equ	0xFE2
  6944                           fsr1l	equ	0xFE1
  6945                           indf2	equ	0xFDF
  6946                           postinc2	equ	0xFDE
  6947                           postdec2	equ	0xFDD
  6948                           fsr2h	equ	0xFDA
  6949                           fsr2l	equ	0xFD9
  6950                           status	equ	0xFD8
  6951                           
  6952 ;; *************** function _servoInterruptService *****************
  6953 ;; Defined at:
  6954 ;;		line 40 in file "servo.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;		None
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;  i               2   19[COMRAM] int 
  6959 ;;  flags           8   11[COMRAM] int [4]
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  1    wreg      void 
  6962 ;; Registers used:
  6963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;Total ram usage:       12 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    1
  6976 ;; This function calls:
  6977 ;;		_digitalRead
  6978 ;;		_digitalWrite
  6979 ;;		_startTimer
  6980 ;; This function is called by:
  6981 ;;		_service
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	text40
  6986  000664                     __ptext40:
  6987                           	opt stack 0
  6988  000664                     _servoInterruptService:
  6989                           	opt stack 21
  6990                           
  6991                           ;servo.c: 42: int flags[4];
  6992                           ;servo.c: 43: flags[0] = TMR0IF;
  6993                           
  6994                           ;incstack = 0
  6995  000664  A4F2               	btfss	intcon,2,c	;volatile
  6996  000666  D002               	goto	i2u294_40
  6997  000668  0E01               	movlw	1
  6998  00066A  D001               	goto	i2u295_40
  6999  00066C                     i2u294_40:
  7000  00066C  0E00               	movlw	0
  7001  00066E                     i2u295_40:
  7002  00066E  6E0C               	movwf	servoInterruptService@flags,c
  7003  000670  6A0D               	clrf	servoInterruptService@flags+1,c
  7004                           
  7005                           ;servo.c: 44: flags[1] = TMR1IF;
  7006  000672  A09E               	btfss	3998,0,c	;volatile
  7007  000674  D002               	goto	i2u296_40
  7008  000676  0E01               	movlw	1
  7009  000678  D001               	goto	i2u297_40
  7010  00067A                     i2u296_40:
  7011  00067A  0E00               	movlw	0
  7012  00067C                     i2u297_40:
  7013  00067C  6E0E               	movwf	servoInterruptService@flags+2,c
  7014  00067E  6A0F               	clrf	servoInterruptService@flags+3,c
  7015                           
  7016                           ;servo.c: 45: flags[2] = TMR2IF;
  7017  000680  A29E               	btfss	3998,1,c	;volatile
  7018  000682  D002               	goto	i2u298_40
  7019  000684  0E01               	movlw	1
  7020  000686  D001               	goto	i2u299_40
  7021  000688                     i2u298_40:
  7022  000688  0E00               	movlw	0
  7023  00068A                     i2u299_40:
  7024  00068A  6E10               	movwf	servoInterruptService@flags+4,c
  7025  00068C  6A11               	clrf	servoInterruptService@flags+5,c
  7026                           
  7027                           ;servo.c: 46: flags[3] = TMR3IF;
  7028  00068E  A2A1               	btfss	4001,1,c	;volatile
  7029  000690  D002               	goto	i2u300_40
  7030  000692  0E01               	movlw	1
  7031  000694  D001               	goto	i2u301_40
  7032  000696                     i2u300_40:
  7033  000696  0E00               	movlw	0
  7034  000698                     i2u301_40:
  7035  000698  6E12               	movwf	servoInterruptService@flags+6,c
  7036  00069A  6A13               	clrf	servoInterruptService@flags+7,c
  7037                           
  7038                           ;servo.c: 48: for(int i = 0; i < 4; i++){
  7039  00069C  0E00               	movlw	0
  7040  00069E  6E15               	movwf	servoInterruptService@i+1,c
  7041  0006A0  0E00               	movlw	0
  7042  0006A2  6E14               	movwf	servoInterruptService@i,c
  7043  0006A4  BE15               	btfsc	servoInterruptService@i+1,7,c
  7044  0006A6  D008               	goto	i2l3352
  7045  0006A8  5015               	movf	servoInterruptService@i+1,w,c
  7046  0006AA  E105               	bnz	i2u302_40
  7047  0006AC  0E04               	movlw	4
  7048  0006AE  5C14               	subwf	servoInterruptService@i,w,c
  7049  0006B0  B0D8               	btfsc	status,0,c
  7050  0006B2  0012               	return	
  7051  0006B4  D001               	goto	i2l3352
  7052  0006B6                     i2u302_40:
  7053  0006B6  0012               	return	
  7054  0006B8                     i2l3352:
  7055                           
  7056                           ;servo.c: 49: if(flags[i]){
  7057  0006B8  90D8               	bcf	status,0,c
  7058  0006BA  3414               	rlcf	servoInterruptService@i,w,c
  7059  0006BC  6ED9               	movwf	fsr2l,c
  7060  0006BE  3415               	rlcf	servoInterruptService@i+1,w,c
  7061  0006C0  6EDA               	movwf	fsr2h,c
  7062  0006C2  0E0C               	movlw	low servoInterruptService@flags
  7063  0006C4  26D9               	addwf	fsr2l,f,c
  7064  0006C6  0E00               	movlw	high servoInterruptService@flags
  7065  0006C8  22DA               	addwfc	fsr2h,f,c
  7066  0006CA  50DE               	movf	postinc2,w,c
  7067  0006CC  10DE               	iorwf	postinc2,w,c
  7068  0006CE  B4D8               	btfsc	status,2,c
  7069  0006D0  D0AB               	goto	i2l3366
  7070                           
  7071                           ;servo.c: 51: if(digitalRead(port[i],pin[i])){
  7072  0006D2  90D8               	bcf	status,0,c
  7073  0006D4  3414               	rlcf	servoInterruptService@i,w,c
  7074  0006D6  6ED9               	movwf	fsr2l,c
  7075  0006D8  3415               	rlcf	servoInterruptService@i+1,w,c
  7076  0006DA  6EDA               	movwf	fsr2h,c
  7077  0006DC  0E76               	movlw	low _port
  7078  0006DE  26D9               	addwf	fsr2l,f,c
  7079  0006E0  0E00               	movlw	high _port
  7080  0006E2  22DA               	addwfc	fsr2h,f,c
  7081  0006E4  CFDE F001          	movff	postinc2,digitalRead@port
  7082  0006E8  CFDD F002          	movff	postdec2,digitalRead@port+1
  7083  0006EC  90D8               	bcf	status,0,c
  7084  0006EE  3414               	rlcf	servoInterruptService@i,w,c
  7085  0006F0  6ED9               	movwf	fsr2l,c
  7086  0006F2  3415               	rlcf	servoInterruptService@i+1,w,c
  7087  0006F4  6EDA               	movwf	fsr2h,c
  7088  0006F6  0EBB               	movlw	low _pin
  7089  0006F8  26D9               	addwf	fsr2l,f,c
  7090  0006FA  0E00               	movlw	high _pin
  7091  0006FC  22DA               	addwfc	fsr2h,f,c
  7092  0006FE  CFDE F003          	movff	postinc2,digitalRead@pin
  7093  000702  CFDD F004          	movff	postdec2,digitalRead@pin+1
  7094  000706  EC4A  F008         	call	_digitalRead	;wreg free
  7095  00070A  5001               	movf	?_digitalRead,w,c
  7096  00070C  1002               	iorwf	?_digitalRead+1,w,c
  7097  00070E  B4D8               	btfsc	status,2,c
  7098  000710  D02F               	goto	i2l3360
  7099                           
  7100                           ;servo.c: 52: startTimer(i,15535);
  7101  000712  C014  F001         	movff	servoInterruptService@i,startTimer@timer
  7102  000716  C015  F002         	movff	servoInterruptService@i+1,startTimer@timer+1
  7103  00071A  0EAF               	movlw	175
  7104  00071C  6E03               	movwf	startTimer@val,c
  7105  00071E  0E3C               	movlw	60
  7106  000720  6E04               	movwf	startTimer@val+1,c
  7107  000722  0E00               	movlw	0
  7108  000724  6E05               	movwf	startTimer@val+2,c
  7109  000726  0E00               	movlw	0
  7110  000728  6E06               	movwf	startTimer@val+3,c
  7111  00072A  EC40  F00B         	call	_startTimer	;wreg free
  7112                           
  7113                           ;servo.c: 53: digitalWrite(port[i],pin[i],0);
  7114  00072E  90D8               	bcf	status,0,c
  7115  000730  3414               	rlcf	servoInterruptService@i,w,c
  7116  000732  6ED9               	movwf	fsr2l,c
  7117  000734  3415               	rlcf	servoInterruptService@i+1,w,c
  7118  000736  6EDA               	movwf	fsr2h,c
  7119  000738  0E76               	movlw	low _port
  7120  00073A  26D9               	addwf	fsr2l,f,c
  7121  00073C  0E00               	movlw	high _port
  7122  00073E  22DA               	addwfc	fsr2h,f,c
  7123  000740  CFDE F001          	movff	postinc2,digitalWrite@port
  7124  000744  CFDD F002          	movff	postdec2,digitalWrite@port+1
  7125  000748  90D8               	bcf	status,0,c
  7126  00074A  3414               	rlcf	servoInterruptService@i,w,c
  7127  00074C  6ED9               	movwf	fsr2l,c
  7128  00074E  3415               	rlcf	servoInterruptService@i+1,w,c
  7129  000750  6EDA               	movwf	fsr2h,c
  7130  000752  0EBB               	movlw	low _pin
  7131  000754  26D9               	addwf	fsr2l,f,c
  7132  000756  0E00               	movlw	high _pin
  7133  000758  22DA               	addwfc	fsr2h,f,c
  7134  00075A  CFDE F003          	movff	postinc2,digitalWrite@pin
  7135  00075E  CFDD F004          	movff	postdec2,digitalWrite@pin+1
  7136  000762  0E00               	movlw	0
  7137  000764  6E06               	movwf	digitalWrite@val+1,c
  7138  000766  0E00               	movlw	0
  7139  000768  6E05               	movwf	digitalWrite@val,c
  7140  00076A  ECFA  F008         	call	_digitalWrite	;wreg free
  7141                           
  7142                           ;servo.c: 54: }
  7143  00076E  D047               	goto	i2l3364
  7144  000770                     i2l3360:
  7145                           
  7146                           ;servo.c: 55: else{
  7147                           ;servo.c: 56: startTimer(i, pulse[i]);
  7148  000770  C014  F001         	movff	servoInterruptService@i,startTimer@timer
  7149  000774  C015  F002         	movff	servoInterruptService@i+1,startTimer@timer+1
  7150  000778  0EAB               	movlw	low _pulse
  7151  00077A  6E0A               	movwf	??_servoInterruptService& (0+255),c
  7152  00077C  0E00               	movlw	high _pulse
  7153  00077E  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  7154  000780  90D8               	bcf	status,0,c
  7155  000782  3414               	rlcf	servoInterruptService@i,w,c
  7156  000784  6ED9               	movwf	fsr2l,c
  7157  000786  3415               	rlcf	servoInterruptService@i+1,w,c
  7158  000788  6EDA               	movwf	fsr2h,c
  7159  00078A  90D8               	bcf	status,0,c
  7160  00078C  36D9               	rlcf	fsr2l,f,c
  7161  00078E  36DA               	rlcf	fsr2h,f,c
  7162  000790  500A               	movf	??_servoInterruptService,w,c
  7163  000792  26D9               	addwf	fsr2l,f,c
  7164  000794  500B               	movf	??_servoInterruptService+1,w,c
  7165  000796  22DA               	addwfc	fsr2h,f,c
  7166  000798  CFDE F003          	movff	postinc2,startTimer@val
  7167  00079C  CFDE F004          	movff	postinc2,startTimer@val+1
  7168  0007A0  CFDE F005          	movff	postinc2,startTimer@val+2
  7169  0007A4  CFDE F006          	movff	postinc2,startTimer@val+3
  7170  0007A8  EC40  F00B         	call	_startTimer	;wreg free
  7171                           
  7172                           ;servo.c: 57: digitalWrite(port[i],pin[i],1);
  7173  0007AC  90D8               	bcf	status,0,c
  7174  0007AE  3414               	rlcf	servoInterruptService@i,w,c
  7175  0007B0  6ED9               	movwf	fsr2l,c
  7176  0007B2  3415               	rlcf	servoInterruptService@i+1,w,c
  7177  0007B4  6EDA               	movwf	fsr2h,c
  7178  0007B6  0E76               	movlw	low _port
  7179  0007B8  26D9               	addwf	fsr2l,f,c
  7180  0007BA  0E00               	movlw	high _port
  7181  0007BC  22DA               	addwfc	fsr2h,f,c
  7182  0007BE  CFDE F001          	movff	postinc2,digitalWrite@port
  7183  0007C2  CFDD F002          	movff	postdec2,digitalWrite@port+1
  7184  0007C6  90D8               	bcf	status,0,c
  7185  0007C8  3414               	rlcf	servoInterruptService@i,w,c
  7186  0007CA  6ED9               	movwf	fsr2l,c
  7187  0007CC  3415               	rlcf	servoInterruptService@i+1,w,c
  7188  0007CE  6EDA               	movwf	fsr2h,c
  7189  0007D0  0EBB               	movlw	low _pin
  7190  0007D2  26D9               	addwf	fsr2l,f,c
  7191  0007D4  0E00               	movlw	high _pin
  7192  0007D6  22DA               	addwfc	fsr2h,f,c
  7193  0007D8  CFDE F003          	movff	postinc2,digitalWrite@pin
  7194  0007DC  CFDD F004          	movff	postdec2,digitalWrite@pin+1
  7195  0007E0  0E00               	movlw	0
  7196  0007E2  6E06               	movwf	digitalWrite@val+1,c
  7197  0007E4  0E01               	movlw	1
  7198  0007E6  6E05               	movwf	digitalWrite@val,c
  7199  0007E8  ECFA  F008         	call	_digitalWrite	;wreg free
  7200                           
  7201                           ;servo.c: 58: }
  7202                           ;servo.c: 61: switch(i){
  7203  0007EC  D008               	goto	i2l3364
  7204  0007EE                     i2l481:
  7205  0007EE  94F2               	bcf	intcon,2,c	;volatile
  7206  0007F0  D01B               	goto	i2l3366
  7207  0007F2                     i2l483:
  7208  0007F2  909E               	bcf	3998,0,c	;volatile
  7209  0007F4  D019               	goto	i2l3366
  7210  0007F6                     i2l484:
  7211  0007F6  929E               	bcf	3998,1,c	;volatile
  7212  0007F8  D017               	goto	i2l3366
  7213  0007FA                     i2l485:
  7214  0007FA  92A1               	bcf	4001,1,c	;volatile
  7215                           
  7216                           ;servo.c: 66: }
  7217  0007FC  D015               	goto	i2l3366
  7218  0007FE                     i2l3364:
  7219  0007FE  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
  7220  000802  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
  7221                           
  7222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7223                           ; Switch size 1, requested type "space"
  7224                           ; Number of cases is 1, Range of values is 0 to 0
  7225                           ; switch strategies available:
  7226                           ; Name         Instructions Cycles
  7227                           ; simple_byte            4     3 (average)
  7228                           ;	Chosen strategy is simple_byte
  7229  000806  500B               	movf	??_servoInterruptService+1,w,c
  7230  000808  0A00               	xorlw	0	; case 0
  7231  00080A  A4D8               	btfss	status,2,c
  7232  00080C  D00D               	goto	i2l3366
  7233                           
  7234                           ; Switch size 1, requested type "space"
  7235                           ; Number of cases is 4, Range of values is 0 to 3
  7236                           ; switch strategies available:
  7237                           ; Name         Instructions Cycles
  7238                           ; simple_byte           13     7 (average)
  7239                           ;	Chosen strategy is simple_byte
  7240  00080E  500A               	movf	??_servoInterruptService,w,c
  7241  000810  0A00               	xorlw	0	; case 0
  7242  000812  B4D8               	btfsc	status,2,c
  7243  000814  D7EC               	goto	i2l481
  7244  000816  0A01               	xorlw	1	; case 1
  7245  000818  B4D8               	btfsc	status,2,c
  7246  00081A  D7EB               	goto	i2l483
  7247  00081C  0A03               	xorlw	3	; case 2
  7248  00081E  B4D8               	btfsc	status,2,c
  7249  000820  D7EA               	goto	i2l484
  7250  000822  0A01               	xorlw	1	; case 3
  7251  000824  B4D8               	btfsc	status,2,c
  7252  000826  D7E9               	goto	i2l485
  7253  000828                     i2l3366:
  7254  000828  4A14               	infsnz	servoInterruptService@i,f,c
  7255  00082A  2A15               	incf	servoInterruptService@i+1,f,c
  7256  00082C  BE15               	btfsc	servoInterruptService@i+1,7,c
  7257  00082E  D744               	goto	i2l3352
  7258  000830  5015               	movf	servoInterruptService@i+1,w,c
  7259  000832  E101               	bnz	i2l486
  7260  000834  D73B               	goto	L5
  7261  000836                     i2l486:
  7262  000836  0012               	return		;funcret
  7263  000838                     __end_of_servoInterruptService:
  7264                           	opt stack 0
  7265                           pclatu	equ	0xFFB
  7266                           pclath	equ	0xFFA
  7267                           tblptru	equ	0xFF8
  7268                           tblptrh	equ	0xFF7
  7269                           tblptrl	equ	0xFF6
  7270                           tablat	equ	0xFF5
  7271                           prodh	equ	0xFF4
  7272                           prodl	equ	0xFF3
  7273                           intcon	equ	0xFF2
  7274                           intcon3	equ	0xFF0
  7275                           postinc0	equ	0xFEE
  7276                           fsr0h	equ	0xFEA
  7277                           fsr0l	equ	0xFE9
  7278                           wreg	equ	0xFE8
  7279                           postdec1	equ	0xFE5
  7280                           fsr1h	equ	0xFE2
  7281                           fsr1l	equ	0xFE1
  7282                           indf2	equ	0xFDF
  7283                           postinc2	equ	0xFDE
  7284                           postdec2	equ	0xFDD
  7285                           fsr2h	equ	0xFDA
  7286                           fsr2l	equ	0xFD9
  7287                           status	equ	0xFD8
  7288                           
  7289 ;; *************** function _startTimer *****************
  7290 ;; Defined at:
  7291 ;;		line 75 in file "timer.c"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  timer           2    0[COMRAM] int 
  7294 ;;  val             4    2[COMRAM] long 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;		None
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7306 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7309 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;Total ram usage:        8 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; This function calls:
  7313 ;;		Nothing
  7314 ;; This function is called by:
  7315 ;;		_servoInterruptService
  7316 ;;		_testFrequency
  7317 ;;		_initServo
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           	psect	text41
  7322  001680                     __ptext41:
  7323                           	opt stack 0
  7324  001680                     _startTimer:
  7325                           	opt stack 21
  7326                           
  7327                           ;timer.c: 76: switch(timer){
  7328                           
  7329                           ;incstack = 0
  7330  001680  D012               	goto	i2l3124
  7331  001682                     i2l354:
  7332                           
  7333                           ;timer.c: 78: TMR0H = val>>8;
  7334  001682  C004  FFD7         	movff	startTimer@val+1,4055	;volatile
  7335                           
  7336                           ;timer.c: 79: TMR0L = val;
  7337  001686  C003  FFD6         	movff	startTimer@val,4054	;volatile
  7338                           
  7339                           ;timer.c: 80: T0CON |= 1<<7;
  7340  00168A  8ED5               	bsf	4053,7,c	;volatile
  7341                           
  7342                           ;timer.c: 81: break;
  7343  00168C  0012               	return	
  7344  00168E                     i2l356:
  7345                           
  7346                           ;timer.c: 83: TMR1H = val>>8;
  7347  00168E  C004  FFCF         	movff	startTimer@val+1,4047	;volatile
  7348                           
  7349                           ;timer.c: 84: TMR1L = val;
  7350  001692  C003  FFCE         	movff	startTimer@val,4046	;volatile
  7351                           
  7352                           ;timer.c: 85: T1CON |= 1<<0;
  7353  001696  80CD               	bsf	4045,0,c	;volatile
  7354                           
  7355                           ;timer.c: 86: break;
  7356  001698  0012               	return	
  7357  00169A                     i2l357:
  7358                           
  7359                           ;timer.c: 88: TMR3H = val>>8;
  7360  00169A  C004  FFB3         	movff	startTimer@val+1,4019	;volatile
  7361                           
  7362                           ;timer.c: 89: TMR3L = val;
  7363  00169E  C003  FFB2         	movff	startTimer@val,4018	;volatile
  7364                           
  7365                           ;timer.c: 90: T3CON |= 1<<0;
  7366  0016A2  80B1               	bsf	4017,0,c	;volatile
  7367                           
  7368                           ;timer.c: 91: }
  7369  0016A4  0012               	return	
  7370  0016A6                     i2l3124:
  7371  0016A6  C001  F007         	movff	startTimer@timer,??_startTimer
  7372  0016AA  C002  F008         	movff	startTimer@timer+1,??_startTimer+1
  7373                           
  7374                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7375                           ; Switch size 1, requested type "space"
  7376                           ; Number of cases is 1, Range of values is 0 to 0
  7377                           ; switch strategies available:
  7378                           ; Name         Instructions Cycles
  7379                           ; simple_byte            4     3 (average)
  7380                           ;	Chosen strategy is simple_byte
  7381  0016AE  5008               	movf	??_startTimer+1,w,c
  7382  0016B0  0A00               	xorlw	0	; case 0
  7383  0016B2  A4D8               	btfss	status,2,c
  7384  0016B4  0012               	return	
  7385                           
  7386                           ; Switch size 1, requested type "space"
  7387                           ; Number of cases is 3, Range of values is 0 to 3
  7388                           ; switch strategies available:
  7389                           ; Name         Instructions Cycles
  7390                           ; simple_byte           10     6 (average)
  7391                           ;	Chosen strategy is simple_byte
  7392  0016B6  5007               	movf	??_startTimer,w,c
  7393  0016B8  0A00               	xorlw	0	; case 0
  7394  0016BA  B4D8               	btfsc	status,2,c
  7395  0016BC  D7E2               	goto	i2l354
  7396  0016BE  0A01               	xorlw	1	; case 1
  7397  0016C0  B4D8               	btfsc	status,2,c
  7398  0016C2  D7E5               	goto	i2l356
  7399  0016C4  0A02               	xorlw	2	; case 3
  7400  0016C6  A4D8               	btfss	status,2,c
  7401  0016C8  0012               	return	
  7402  0016CA  D7E7               	goto	i2l357
  7403  0016CC                     __end_of_startTimer:
  7404                           	opt stack 0
  7405                           pclatu	equ	0xFFB
  7406                           pclath	equ	0xFFA
  7407                           tblptru	equ	0xFF8
  7408                           tblptrh	equ	0xFF7
  7409                           tblptrl	equ	0xFF6
  7410                           tablat	equ	0xFF5
  7411                           prodh	equ	0xFF4
  7412                           prodl	equ	0xFF3
  7413                           intcon	equ	0xFF2
  7414                           intcon3	equ	0xFF0
  7415                           postinc0	equ	0xFEE
  7416                           fsr0h	equ	0xFEA
  7417                           fsr0l	equ	0xFE9
  7418                           wreg	equ	0xFE8
  7419                           postdec1	equ	0xFE5
  7420                           fsr1h	equ	0xFE2
  7421                           fsr1l	equ	0xFE1
  7422                           indf2	equ	0xFDF
  7423                           postinc2	equ	0xFDE
  7424                           postdec2	equ	0xFDD
  7425                           fsr2h	equ	0xFDA
  7426                           fsr2l	equ	0xFD9
  7427                           status	equ	0xFD8
  7428                           
  7429 ;; *************** function _digitalWrite *****************
  7430 ;; Defined at:
  7431 ;;		line 53 in file "iopin.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;  port            2    0[COMRAM] int 
  7434 ;;  pin             2    2[COMRAM] int 
  7435 ;;  val             2    4[COMRAM] int 
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;		None
  7438 ;; Return value:  Size  Location     Type
  7439 ;;                  1    wreg      void 
  7440 ;; Registers used:
  7441 ;;		wreg, status,2, status,0
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7447 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;Total ram usage:        9 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; This function calls:
  7454 ;;		Nothing
  7455 ;; This function is called by:
  7456 ;;		_servoInterruptService
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           	psect	text42
  7461  0011F4                     __ptext42:
  7462                           	opt stack 0
  7463  0011F4                     _digitalWrite:
  7464                           	opt stack 21
  7465                           
  7466                           ;iopin.c: 54: pin = 1 << pin;
  7467                           
  7468                           ;incstack = 0
  7469  0011F4  C003  F007         	movff	digitalWrite@pin,??_digitalWrite
  7470  0011F8  0E01               	movlw	1
  7471  0011FA  6E08               	movwf	(??_digitalWrite+1)& (0+255),c
  7472  0011FC  0E00               	movlw	0
  7473  0011FE  6E09               	movwf	(??_digitalWrite+2)& (0+255),c
  7474  001200  2A07               	incf	??_digitalWrite,f,c
  7475  001202  D003               	goto	i2u253_44
  7476  001204                     i2u253_45:
  7477  001204  90D8               	bcf	status,0,c
  7478  001206  3608               	rlcf	??_digitalWrite+1,f,c
  7479  001208  3609               	rlcf	??_digitalWrite+2,f,c
  7480  00120A                     i2u253_44:
  7481  00120A  2E07               	decfsz	??_digitalWrite,f,c
  7482  00120C  D7FB               	goto	i2u253_45
  7483  00120E  C008  F003         	movff	??_digitalWrite+1,digitalWrite@pin
  7484  001212  C009  F004         	movff	??_digitalWrite+2,digitalWrite@pin+1
  7485                           
  7486                           ;iopin.c: 55: if(val == 0){
  7487  001216  5005               	movf	digitalWrite@val,w,c
  7488  001218  1006               	iorwf	digitalWrite@val+1,w,c
  7489  00121A  A4D8               	btfss	status,2,c
  7490  00121C  D02B               	goto	i2l3110
  7491                           
  7492                           ;iopin.c: 56: pin ^= 0xff;
  7493  00121E  0EFF               	movlw	255
  7494  001220  1A03               	xorwf	digitalWrite@pin,f,c
  7495                           
  7496                           ;iopin.c: 57: }
  7497                           ;iopin.c: 59: switch(port){
  7498  001222  D028               	goto	i2l3110
  7499  001224                     i2l3086:
  7500  001224  0405               	decf	digitalWrite@val,w,c
  7501  001226  1006               	iorwf	digitalWrite@val+1,w,c
  7502  001228  A4D8               	btfss	status,2,c
  7503  00122A  D003               	goto	i2l3090
  7504  00122C  5003               	movf	digitalWrite@pin,w,c
  7505  00122E  1289               	iorwf	3977,f,c	;volatile
  7506  001230  0012               	return	
  7507  001232                     i2l3090:
  7508                           
  7509                           ;iopin.c: 61: else LATA &= pin;
  7510  001232  5003               	movf	digitalWrite@pin,w,c
  7511  001234  1689               	andwf	3977,f,c	;volatile
  7512                           
  7513                           ;iopin.c: 62: break;
  7514  001236  0012               	return	
  7515  001238                     i2l3092:
  7516  001238  0405               	decf	digitalWrite@val,w,c
  7517  00123A  1006               	iorwf	digitalWrite@val+1,w,c
  7518  00123C  A4D8               	btfss	status,2,c
  7519  00123E  D003               	goto	i2l3096
  7520  001240  5003               	movf	digitalWrite@pin,w,c
  7521  001242  128A               	iorwf	3978,f,c	;volatile
  7522  001244  0012               	return	
  7523  001246                     i2l3096:
  7524                           
  7525                           ;iopin.c: 64: else LATB &= pin;
  7526  001246  5003               	movf	digitalWrite@pin,w,c
  7527  001248  168A               	andwf	3978,f,c	;volatile
  7528                           
  7529                           ;iopin.c: 65: break;
  7530  00124A  0012               	return	
  7531  00124C                     i2l3098:
  7532  00124C  0405               	decf	digitalWrite@val,w,c
  7533  00124E  1006               	iorwf	digitalWrite@val+1,w,c
  7534  001250  A4D8               	btfss	status,2,c
  7535  001252  D003               	goto	i2l3102
  7536  001254  5003               	movf	digitalWrite@pin,w,c
  7537  001256  128B               	iorwf	3979,f,c	;volatile
  7538  001258  0012               	return	
  7539  00125A                     i2l3102:
  7540                           
  7541                           ;iopin.c: 67: else LATC &= pin;
  7542  00125A  5003               	movf	digitalWrite@pin,w,c
  7543  00125C  168B               	andwf	3979,f,c	;volatile
  7544                           
  7545                           ;iopin.c: 68: break;
  7546  00125E  0012               	return	
  7547  001260                     i2l3104:
  7548  001260  0405               	decf	digitalWrite@val,w,c
  7549  001262  1006               	iorwf	digitalWrite@val+1,w,c
  7550  001264  A4D8               	btfss	status,2,c
  7551  001266  D003               	goto	i2l3108
  7552  001268  5003               	movf	digitalWrite@pin,w,c
  7553  00126A  128C               	iorwf	3980,f,c	;volatile
  7554  00126C  0012               	return	
  7555  00126E                     i2l3108:
  7556                           
  7557                           ;iopin.c: 70: else LATD &= pin;
  7558  00126E  5003               	movf	digitalWrite@pin,w,c
  7559  001270  168C               	andwf	3980,f,c	;volatile
  7560                           
  7561                           ;iopin.c: 71: }
  7562  001272  0012               	return	
  7563  001274                     i2l3110:
  7564  001274  C001  F007         	movff	digitalWrite@port,??_digitalWrite
  7565  001278  C002  F008         	movff	digitalWrite@port+1,??_digitalWrite+1
  7566                           
  7567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7568                           ; Switch size 1, requested type "space"
  7569                           ; Number of cases is 1, Range of values is 0 to 0
  7570                           ; switch strategies available:
  7571                           ; Name         Instructions Cycles
  7572                           ; simple_byte            4     3 (average)
  7573                           ;	Chosen strategy is simple_byte
  7574  00127C  5008               	movf	??_digitalWrite+1,w,c
  7575  00127E  0A00               	xorlw	0	; case 0
  7576  001280  A4D8               	btfss	status,2,c
  7577  001282  0012               	return	
  7578                           
  7579                           ; Switch size 1, requested type "space"
  7580                           ; Number of cases is 4, Range of values is 0 to 3
  7581                           ; switch strategies available:
  7582                           ; Name         Instructions Cycles
  7583                           ; simple_byte           13     7 (average)
  7584                           ;	Chosen strategy is simple_byte
  7585  001284  5007               	movf	??_digitalWrite,w,c
  7586  001286  0A00               	xorlw	0	; case 0
  7587  001288  B4D8               	btfsc	status,2,c
  7588  00128A  D7CC               	goto	i2l3086
  7589  00128C  0A01               	xorlw	1	; case 1
  7590  00128E  B4D8               	btfsc	status,2,c
  7591  001290  D7D3               	goto	i2l3092
  7592  001292  0A03               	xorlw	3	; case 2
  7593  001294  B4D8               	btfsc	status,2,c
  7594  001296  D7DA               	goto	i2l3098
  7595  001298  0A01               	xorlw	1	; case 3
  7596  00129A  A4D8               	btfss	status,2,c
  7597  00129C  0012               	return	
  7598  00129E  D7E0               	goto	i2l3104
  7599  0012A0                     __end_of_digitalWrite:
  7600                           	opt stack 0
  7601                           pclatu	equ	0xFFB
  7602                           pclath	equ	0xFFA
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           prodh	equ	0xFF4
  7608                           prodl	equ	0xFF3
  7609                           intcon	equ	0xFF2
  7610                           intcon3	equ	0xFF0
  7611                           postinc0	equ	0xFEE
  7612                           fsr0h	equ	0xFEA
  7613                           fsr0l	equ	0xFE9
  7614                           wreg	equ	0xFE8
  7615                           postdec1	equ	0xFE5
  7616                           fsr1h	equ	0xFE2
  7617                           fsr1l	equ	0xFE1
  7618                           indf2	equ	0xFDF
  7619                           postinc2	equ	0xFDE
  7620                           postdec2	equ	0xFDD
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _digitalRead *****************
  7626 ;; Defined at:
  7627 ;;		line 43 in file "iopin.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  port            2    0[COMRAM] int 
  7630 ;;  pin             2    2[COMRAM] int 
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;		None
  7633 ;; Return value:  Size  Location     Type
  7634 ;;                  2    0[COMRAM] int 
  7635 ;; Registers used:
  7636 ;;		wreg, status,2, status,0
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7642 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;Total ram usage:        6 bytes
  7647 ;; Hardware stack levels used:    1
  7648 ;; This function calls:
  7649 ;;		Nothing
  7650 ;; This function is called by:
  7651 ;;		_servoInterruptService
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text43
  7656  001094                     __ptext43:
  7657                           	opt stack 0
  7658  001094                     _digitalRead:
  7659                           	opt stack 21
  7660                           
  7661                           ;iopin.c: 44: switch(port){
  7662                           
  7663                           ;incstack = 0
  7664  001094  D040               	goto	i2l3076
  7665  001096                     i2l3058:
  7666  001096  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7667  00109A  CF80 F006          	movff	3968,??_digitalRead+1	;volatile
  7668  00109E  2A05               	incf	??_digitalRead,f,c
  7669  0010A0  D002               	goto	i2u249_44
  7670  0010A2                     i2u249_45:
  7671  0010A2  90D8               	bcf	status,0,c
  7672  0010A4  3206               	rrcf	??_digitalRead+1,f,c
  7673  0010A6                     i2u249_44:
  7674  0010A6  2E05               	decfsz	??_digitalRead,f,c
  7675  0010A8  D7FC               	goto	i2u249_45
  7676  0010AA  0E01               	movlw	1
  7677  0010AC  1606               	andwf	??_digitalRead+1,f,c
  7678  0010AE  5006               	movf	??_digitalRead+1,w,c
  7679  0010B0  6E01               	movwf	?_digitalRead,c
  7680  0010B2  6A02               	clrf	?_digitalRead+1,c
  7681  0010B4  0012               	return	
  7682  0010B6                     i2l3062:
  7683  0010B6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7684  0010BA  CF81 F006          	movff	3969,??_digitalRead+1	;volatile
  7685  0010BE  2A05               	incf	??_digitalRead,f,c
  7686  0010C0  D002               	goto	i2u250_44
  7687  0010C2                     i2u250_45:
  7688  0010C2  90D8               	bcf	status,0,c
  7689  0010C4  3206               	rrcf	??_digitalRead+1,f,c
  7690  0010C6                     i2u250_44:
  7691  0010C6  2E05               	decfsz	??_digitalRead,f,c
  7692  0010C8  D7FC               	goto	i2u250_45
  7693  0010CA  0E01               	movlw	1
  7694  0010CC  1606               	andwf	??_digitalRead+1,f,c
  7695  0010CE  5006               	movf	??_digitalRead+1,w,c
  7696  0010D0  6E01               	movwf	?_digitalRead,c
  7697  0010D2  6A02               	clrf	?_digitalRead+1,c
  7698  0010D4  0012               	return	
  7699  0010D6                     i2l3066:
  7700  0010D6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7701  0010DA  CF82 F006          	movff	3970,??_digitalRead+1	;volatile
  7702  0010DE  2A05               	incf	??_digitalRead,f,c
  7703  0010E0  D002               	goto	i2u251_44
  7704  0010E2                     i2u251_45:
  7705  0010E2  90D8               	bcf	status,0,c
  7706  0010E4  3206               	rrcf	??_digitalRead+1,f,c
  7707  0010E6                     i2u251_44:
  7708  0010E6  2E05               	decfsz	??_digitalRead,f,c
  7709  0010E8  D7FC               	goto	i2u251_45
  7710  0010EA  0E01               	movlw	1
  7711  0010EC  1606               	andwf	??_digitalRead+1,f,c
  7712  0010EE  5006               	movf	??_digitalRead+1,w,c
  7713  0010F0  6E01               	movwf	?_digitalRead,c
  7714  0010F2  6A02               	clrf	?_digitalRead+1,c
  7715  0010F4  0012               	return	
  7716  0010F6                     i2l3070:
  7717  0010F6  C003  F005         	movff	digitalRead@pin,??_digitalRead
  7718  0010FA  CF83 F006          	movff	3971,??_digitalRead+1	;volatile
  7719  0010FE  2A05               	incf	??_digitalRead,f,c
  7720  001100  D002               	goto	i2u252_44
  7721  001102                     i2u252_45:
  7722  001102  90D8               	bcf	status,0,c
  7723  001104  3206               	rrcf	??_digitalRead+1,f,c
  7724  001106                     i2u252_44:
  7725  001106  2E05               	decfsz	??_digitalRead,f,c
  7726  001108  D7FC               	goto	i2u252_45
  7727  00110A  0E01               	movlw	1
  7728  00110C  1606               	andwf	??_digitalRead+1,f,c
  7729  00110E  5006               	movf	??_digitalRead+1,w,c
  7730  001110  6E01               	movwf	?_digitalRead,c
  7731  001112  6A02               	clrf	?_digitalRead+1,c
  7732  001114  0012               	return	
  7733  001116                     i2l3076:
  7734  001116  C001  F005         	movff	digitalRead@port,??_digitalRead
  7735  00111A  C002  F006         	movff	digitalRead@port+1,??_digitalRead+1
  7736                           
  7737                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7738                           ; Switch size 1, requested type "space"
  7739                           ; Number of cases is 1, Range of values is 0 to 0
  7740                           ; switch strategies available:
  7741                           ; Name         Instructions Cycles
  7742                           ; simple_byte            4     3 (average)
  7743                           ;	Chosen strategy is simple_byte
  7744  00111E  5006               	movf	??_digitalRead+1,w,c
  7745  001120  0A00               	xorlw	0	; case 0
  7746  001122  A4D8               	btfss	status,2,c
  7747  001124  D00D               	goto	i2l249
  7748                           
  7749                           ; Switch size 1, requested type "space"
  7750                           ; Number of cases is 4, Range of values is 0 to 3
  7751                           ; switch strategies available:
  7752                           ; Name         Instructions Cycles
  7753                           ; simple_byte           13     7 (average)
  7754                           ;	Chosen strategy is simple_byte
  7755  001126  5005               	movf	??_digitalRead,w,c
  7756  001128  0A00               	xorlw	0	; case 0
  7757  00112A  B4D8               	btfsc	status,2,c
  7758  00112C  D7B4               	goto	i2l3058
  7759  00112E  0A01               	xorlw	1	; case 1
  7760  001130  B4D8               	btfsc	status,2,c
  7761  001132  D7C1               	goto	i2l3062
  7762  001134  0A03               	xorlw	3	; case 2
  7763  001136  B4D8               	btfsc	status,2,c
  7764  001138  D7CE               	goto	i2l3066
  7765  00113A  0A01               	xorlw	1	; case 3
  7766  00113C  B4D8               	btfsc	status,2,c
  7767  00113E  D7DB               	goto	i2l3070
  7768  001140                     i2l249:
  7769                           
  7770                           ;iopin.c: 50: return -1;
  7771  001140  6801               	setf	?_digitalRead,c
  7772  001142  6802               	setf	?_digitalRead+1,c
  7773  001144  0012               	return		;funcret
  7774  001146                     __end_of_digitalRead:
  7775                           	opt stack 0
  7776                           pclatu	equ	0xFFB
  7777                           pclath	equ	0xFFA
  7778                           tblptru	equ	0xFF8
  7779                           tblptrh	equ	0xFF7
  7780                           tblptrl	equ	0xFF6
  7781                           tablat	equ	0xFF5
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           intcon	equ	0xFF2
  7785                           intcon3	equ	0xFF0
  7786                           postinc0	equ	0xFEE
  7787                           fsr0h	equ	0xFEA
  7788                           fsr0l	equ	0xFE9
  7789                           wreg	equ	0xFE8
  7790                           postdec1	equ	0xFE5
  7791                           fsr1h	equ	0xFE2
  7792                           fsr1l	equ	0xFE1
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           postdec2	equ	0xFDD
  7796                           fsr2h	equ	0xFDA
  7797                           fsr2l	equ	0xFD9
  7798                           status	equ	0xFD8
  7799                           pclatu	equ	0xFFB
  7800                           pclath	equ	0xFFA
  7801                           tblptru	equ	0xFF8
  7802                           tblptrh	equ	0xFF7
  7803                           tblptrl	equ	0xFF6
  7804                           tablat	equ	0xFF5
  7805                           prodh	equ	0xFF4
  7806                           prodl	equ	0xFF3
  7807                           intcon	equ	0xFF2
  7808                           intcon3	equ	0xFF0
  7809                           postinc0	equ	0xFEE
  7810                           fsr0h	equ	0xFEA
  7811                           fsr0l	equ	0xFE9
  7812                           wreg	equ	0xFE8
  7813                           postdec1	equ	0xFE5
  7814                           fsr1h	equ	0xFE2
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           postinc2	equ	0xFDE
  7818                           postdec2	equ	0xFDD
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823                           	psect	rparam
  7824  0000                     pclatu	equ	0xFFB
  7825                           pclath	equ	0xFFA
  7826                           tblptru	equ	0xFF8
  7827                           tblptrh	equ	0xFF7
  7828                           tblptrl	equ	0xFF6
  7829                           tablat	equ	0xFF5
  7830                           prodh	equ	0xFF4
  7831                           prodl	equ	0xFF3
  7832                           intcon	equ	0xFF2
  7833                           intcon3	equ	0xFF0
  7834                           postinc0	equ	0xFEE
  7835                           fsr0h	equ	0xFEA
  7836                           fsr0l	equ	0xFE9
  7837                           wreg	equ	0xFE8
  7838                           postdec1	equ	0xFE5
  7839                           fsr1h	equ	0xFE2
  7840                           fsr1l	equ	0xFE1
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           fsr2h	equ	0xFDA
  7845                           fsr2l	equ	0xFD9
  7846                           status	equ	0xFD8
  7847                           
  7848                           	psect	temp
  7849  00007E                     btemp:
  7850                           	opt stack 0
  7851  00007E                     	ds	1
  7852  0000                     int$flags	set	btemp
  7853                           pclatu	equ	0xFFB
  7854                           pclath	equ	0xFFA
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           prodh	equ	0xFF4
  7860                           prodl	equ	0xFF3
  7861                           intcon	equ	0xFF2
  7862                           intcon3	equ	0xFF0
  7863                           postinc0	equ	0xFEE
  7864                           fsr0h	equ	0xFEA
  7865                           fsr0l	equ	0xFE9
  7866                           wreg	equ	0xFE8
  7867                           postdec1	equ	0xFE5
  7868                           fsr1h	equ	0xFE2
  7869                           fsr1l	equ	0xFE1
  7870                           indf2	equ	0xFDF
  7871                           postinc2	equ	0xFDE
  7872                           postdec2	equ	0xFDD
  7873                           fsr2h	equ	0xFDA
  7874                           fsr2l	equ	0xFD9
  7875                           status	equ	0xFD8


Data Sizes:
    Strings     258
    Constant    96
    Data        8
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     43      75
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[17]), STR_15(CODE[18]), STR_14(CODE[17]), STR_13(CODE[18]), 
		 -> STR_12(CODE[17]), STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[18]), 
		 -> STR_8(CODE[17]), STR_7(CODE[18]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[4]), STR_3(CODE[9]), STR_2(CODE[8]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->_setAngle
    _sortBatteryInterruptService->i2_printf
    _setAngle->_angleToPulse
    i2_printf->i2___llmod
    i2_lcdNewline->i2_lcdInst
    i2___llmod->i2___lldiv
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _servoInterruptService->_digitalWrite

Critical Paths under _main in BANK0

    _main->_showInterface
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___llmod
    _lcdNewline->_lcdInst
    ___llmod->___lldiv
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19333
                            _initLCD
                            _initRTC
                           _pinSetup
                      _showInterface
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0   18502
                                             42 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0    3006
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0    3006
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0    3006
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0    3028
                                             41 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0    3006
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0    3006
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              28    22      6    2871
                                             22 BANK0     19    13      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     287
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0     696
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     696
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (6) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0   20213
                                            102 COMRAM    15    15      0
              _servoInterruptService
                           _setAngle
        _sortBatteryInterruptService
 ---------------------------------------------------------------------------------
 (9) _sortBatteryInterruptService                          0     0      0    1730
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _setAngle                                            10     6      4   16412
                                             92 COMRAM    10     6      4
                       _angleToPulse
                         i2_lcdClear
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           28    22      6    1595
                                             22 COMRAM    19    13      6
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2___llmod                                           9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lldiv                                          13     5      8     266
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2_lcdClear                                          0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (13) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) _angleToPulse                                       23    19      4   14104
                                             69 COMRAM    23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     316
                                             54 COMRAM    15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            15     9      6    2665
                                             27 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftdiv                                            15     9      6    2747
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            12     6      6    3409
                                             42 COMRAM    12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___awtoft                                            4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4    2503
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    2004
                                              9 COMRAM    12    12      0
                        _digitalRead
                       _digitalWrite
                         _startTimer
 ---------------------------------------------------------------------------------
 (10) _startTimer                                          8     2      6     666
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) _digitalWrite                                        9     3      6     716
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) _digitalRead                                         6     2      4     238
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initRTC
     _I2C_Master_Init
       ___lldiv
   _pinSetup
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble

 _service (ROOT)
   _servoInterruptService
     _digitalRead
     _digitalWrite
     _startTimer
   _setAngle
     _angleToPulse
       ___altoft
         ___ftpack
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble
   _sortBatteryInterruptService
     i2_lcdClear
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_lcdNewline
           i2_lcdInst
             i2_lcdNibble
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2B      4B       5       58.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C8      34        0.0%
DATA                 0      0      C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 12 18:51:19 2017

                        ___altoft@exp 0011                         ___altoft@sign 0012  
                         __CFG_BORV$3 000000                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                           __CFG_OSC$HS 000000  
                        ___ftadd@exp1 0036                          ___ftadd@exp2 0035  
                        ___ftadd@sign 0034                                   l111 19AE  
                                 l148 186C                                   l182 1804  
                                 l185 1812                                   l560 0116  
                                 l556 00A8                       ??_showInterface 00AA  
                                 l936 1082                                   l946 13D0  
                        __CFG_CPB$OFF 000000                                   _PEN 007E2A  
                        __CFG_CPD$OFF 000000                                   _SEN 007E28  
                                 _pin 00BB                                   wreg 000FE8  
                          i2_lcdClear 19E2                          __CFG_LVP$OFF 000000  
                        ___ftdiv@cntr 0016                          ___ftdiv@sign 001B  
                        __CFG_WDT$OFF 000000                                  l3300 0BB6  
                                l3320 0C06                                  l3312 0BEC  
                                l3322 0C12                                  l2604 1070  
                                l2620 13BE                                  l2612 1364  
                                l3316 0BFC                                  l3308 0BDC  
                                l2614 1374                                  l2710 0220  
                                l2630 0020                                  l3270 0B36  
                                l2616 137A                                  l2712 0230  
                                l2720 032A                                  l2704 01FA  
                                l2640 0048                                  l3264 0B24  
                                l2714 02B4                                  l2722 033C  
                                l2706 020C                                  l2634 0034  
                                l3282 0B6A                                  l3266 0B28  
                                l2724 0344                                  l2644 0060  
                                l2636 003C                                  l3268 0B32  
                                l2670 0138                                  l2638 0042  
                                l2726 035A                                  l3294 0BA4  
                                l3278 0B5C                                  l2592 1006  
                                l2656 00D0                                  l2648 006A  
                                l2594 1016                                  l2690 01B4  
                                l2674 0162                                  l3298 0BAE  
                                l2596 101C                                  l2676 0168  
                                l2688 01AE                                  _EEIF 007D0C  
                                STR_1 FFEA                                  STR_2 FFF3  
                                STR_3 FFE1                                  STR_4 FFFB  
                                STR_5 FF22                                  STR_6 FFD0  
                                STR_7 FF10                                  STR_8 FF9D  
                                STR_9 FF34                                  _LATA 000F89  
                                _LATB 000F8A                                  _LATC 000F8B  
                                _LATD 000F8C                                  _LATE 000F8D  
                                u3207 1484                                  u3217 1492  
                                u3227 14C2                                  u3237 14D0  
                                u3157 1870                                  u3167 16D4  
                                u3177 170A                                  u3187 1836  
                                u3197 184C                                  u2595 1650  
                                _PEIE 007F96                                  _RCEN 007E2B  
                                _RSEN 007E29                                  _main 199A  
                        ___ftpack@arg 0001                                  _keys FEE5  
                        ___ftpack@exp 0004                                  _port 0076  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 007E  
                                prodh 000FF4                                  prodl 000FF3  
                                start 000E                         __CFG_IESO$OFF 000000  
                     __end_ofi2_putch 1960                         __CFG_MCLRE$ON 000000  
                        ___ftmul@cntr 0029                          ___param_bank 000000  
                        ___ftmul@sign 002A                           i2_lcdNibble 15BA  
                        ___fttol@exp1 0045                          ___fttol@lval 0041  
                    ?_I2C_Master_Init 008D                  __end_of_angleToPulse 0B24  
                               ?_main 0001                                 _ACKEN 007E2C  
                               _ACKDT 007E2D                                 _EEADR 000FA9  
                     __end_of___ftadd 09E4                                 STR_10 FF8C  
                               STR_11 FEFD                                 STR_12 FFAE  
                               STR_13 FF46                                 STR_14 FF7B  
                               STR_15 FF58                                 STR_16 FFBF  
                               STR_17 FF6A                       __end_of___ftdiv 0EF6  
             ??_servoInterruptService 000A                       __end_of___lldiv 1094  
                     __end_of___ftmul 0E10                                 _T0CON 000FD5  
                               _T1CON 000FCD                       __end_of___llmod 13E2  
                     __end_of___fttol 0D1C                                 _T3CON 000FB1  
                               i2l122 0F9C                                 i2l148 194E  
                               i2l249 1140                                 i2l354 1682  
                               i2l356 168E                                 i2l357 169A  
                               i2l560 0456                                 i2l481 07EE  
                               i2l483 07F2                                 i2l811 11D4  
                               i2l484 07F6                                 i2l556 03F6  
                               i2l485 07FA                                 i2l486 0836  
                               i2l834 087C                                 i2l838 08A6  
                               i2l936 1452                                 i2l849 0956  
                               i2l858 0972                                 i2l946 15A8  
                               i2l869 0EC4                                 _TMR0H 000FD7  
                               _TMR1H 000FCF                                 _TMR0L 000FD6  
                               _TMR3H 000FB3                                 _TMR1L 000FCE  
                               _TMR3L 000FB2                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _PORTD 000F83                                 _TRISA 000F92  
                               _TRISB 000F93                                 _TRISC 000F94  
                               _TRISD 000F95                                 _TRISE 000F96  
                       __CFG_PWRT$OFF 000000                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                       __CFG_WRT3$OFF 000000                       __end_of_lcdInst 1858  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
              servoInterruptService@i 0014                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
               __size_ofi2_lcdNewline 0008                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                         __CFG_WRTD$OFF 000000  
                     __end_of_initLCD 1716                        __CFG_EBTRB$OFF 000000  
                       ___awtoft@sign 000C                       __end_of_initRTC 199A  
                     __end_of_dpowers FEC5                         ___ftpack@sign 0005  
                               _pulse 00AB                                 _putch 1858  
                               pclath 000FFA                                 tablat 000FF5  
                     __end_of_service 0FD8                       __end_of_runMenu 1804  
                     __end_of_runTime 18A6                                 status 000FD8  
                      __CFG_PBADEN$ON 000000                    __size_ofi2___lldiv 0082  
                  __size_ofi2___llmod 0066                      __end_ofi2_printf 0664  
                __end_of_digitalWrite 12A0                       __initialization 1716  
                   i2___lldiv@divisor 0005                    __size_ofi2_lcdInst 0022  
                        __end_of_main 19B0                     i2___lldiv@counter 000D  
                        __end_of_keys FEF6                            i2printf@ap 0022  
                        i2_lcdNewline 19DA                                ??_main 00AB  
                       ___fttol@sign1 0040                         __activetblptr 000002  
                __size_of_digitalRead 00B2                           ?i2_lcdClear 0001  
                              _ADCON0 000FC2                                _ADCON1 000FC1  
                              _ADCON2 000FC0                      __end_of___altoft 1554  
                    ___llmod@dividend 008D                                _ADRESH 000FC4  
                              _EEADRH 000FAA                                _ADRESL 000FC3  
                              _EEDATA 000FA8                                _EECON1 000FA6  
                              _EECON2 000FA7                       i2lcdNibble@data 0002  
                    __end_of___awtoft 17D2                                ?_putch 0001  
                    __end_of___ftpack 11F4                       i2lcdNibble@temp 0001  
                              _INT0IF 007F91                                _INT1IE 007F83  
                              _INT1IF 007F80                                u200_41 085C  
                              i2l3000 1566                                i2l3002 1572  
                              i2l3004 1576                                i2l3102 125A  
                              i2l3110 1274                                i2l3104 1260  
                              i2l3008 159A                                i2l3210 04DC  
                              i2l3108 126E                                i2l3124 16A6  
                              u220_41 0E20                                i2l3070 10F6  
                              i2l3062 10B6                                i2l3230 0536  
                              i2l3150 0382                                i2l3232 0542  
                              i2l3240 0624                                i2l3208 04D8  
                              i2l3224 0514                                i2l3160 03A0  
                              i2l3066 10D6                                i2l3058 1096  
                              i2l3090 1232                                i2l3234 05BA  
                              i2l3242 0634                                i2l3226 0524  
                              i2l3154 0392                                i2l3076 1116  
                              i2l3092 1238                                i2l3244 063A  
                              i2l3164 03B4                                i2l3156 0398  
                              i2l3086 1224                                i2l3190 0476  
                              i2l3158 039C                                i2l3246 064A  
                              i2l3096 1246                                i2l3360 0770  
                              i2l3352 06B8                                i2l2560 116E  
                              i2l2800 098E                                i2l3176 041A  
                              i2l3168 03BC                                i2l3424 0F3E  
                              i2l3098 124C                                i2l2570 11CA  
                              i2l2562 118C                                i2l2554 1156  
                              i2l2810 09BE                                i2l3194 049C  
                              i2l3434 0F66                                i2l3364 07FE  
                              i2l2820 0E38                                i2l2900 0DD6  
                              i2l3196 04A0                                u222_41 0E48  
                              i2l3366 0828                                i2l2566 11A2  
                              i2l2558 1164                                i2l3438 0F80  
                              i2l2568 11C0                                i2l2736 14FE  
                              i2l2752 088A                                i2l2738 150A  
                              i2l2826 0E60                                i2l2916 17AE  
                              i2l2780 0906                                i2l2782 0910  
                              i2l2774 08E4                                i2l2758 08B4  
                              i2l2846 0E9E                                i2l2926 0C54  
                              i2l2792 0944                                i2l2784 091A  
                              i2l2872 0D6C                                i2l2944 0CBA  
                              i2l2794 094E                                i2l2786 0922  
                              i2l2890 0DAE                                i2l2866 0D44  
                              i2l2962 0D0A                                i2l2954 0CE2  
                              i2l2956 0CEE                                i2l2948 0CCA  
                              i2l2980 1404                                u232_41 0C38  
                              i2l2886 0D9E                                i2l2958 0CF4  
                              i2l2982 1410                                i2l2896 0DC6  
                              i2l2992 1444                                i2l2984 1414  
                              u225_41 0D2C                                u227_41 0D54  
                              u199_41 0848                                _TMR0IE 007F95  
                              _TMR0IF 007F92                             ??i2_putch 0005  
                              _TMR1IE 007CE8                                _TMR1IF 007CF0  
                              _TMR2IF 007CF1                                _TMR3IE 007D01  
                              _TMR3IF 007D09                                _SSPADD 000FC8  
                              _TRISC3 007CA3                                _TRISC4 007CA4  
                              _SSPBUF 000FC9                      __end_of_dateTime 193E  
                   _angleToPulse$1191 0056                      __end_of_lcdClear 19DA  
                      __CFG_XINST$OFF 000000                      __end_of_mainMenu 1918  
                           ??___ftadd 0031                        __CFG_STVREN$ON 000000  
                           ??___ftdiv 0013                             ??___lldiv 0088  
                           ??___ftmul 0022                             ??___llmod 0095  
                           ??___fttol 003B                                clear_0 173C  
                              clear_1 1748                             ??_lcdInst 0082  
                              _printf 0012                      __end_of_pinSetup 179A  
                    __end_of_setAngle 1348                 ___ftmul@f3_as_product 0026  
                           ??_initLCD 0084                             ??_initRTC 0095  
                   __end_ofi2___lldiv 1464                         setAngle@angle 005F  
                   __end_ofi2___llmod 15BA                          __mediumconst FE9C  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                         setAngle@timer 005D  
                           ??_service 0067                             ??_runMenu 00A9  
                    __end_of_runStats 18CC                             ??_runTime 00A9  
                   __end_ofi2_lcdInst 1982                            __accesstop 0080  
             __end_of__initialization 174E                            ___altoft@c 0009  
                          ___ftadd@f1 002B                            ___ftadd@f2 002E  
                       ___rparam_used 000001                            ___ftdiv@f1 000D  
                          ___ftdiv@f2 0010                            ___ftdiv@f3 0017  
                          ___awtoft@c 0009                     i2___llmod@divisor 0012  
                   i2___llmod@counter 0016                            ___ftmul@f1 001C  
                          ___ftmul@f2 001F                            ___fttol@f1 0037  
                __end_of_happynewyear FEFD                        __pcstackCOMRAM 0001  
                  i2___lldiv@dividend 0001                 __size_of_angleToPulse 0140  
                 __size_ofi2_lcdClear 0008                          __pidataBANK0 19C2  
                       __end_of_putch 1880                           i2printf@idx 001F  
                         i2printf@val 0024                    __size_of_lcdNibble 0078  
                         i2putch@data 0005                             ?i2_printf 0017  
                             ??_putch 0084                    i2___lldiv@quotient 0009  
                          __pbssBANK0 00AB                          _angleToPulse 09E4  
               __size_of_digitalWrite 00AC                          ?i2_lcdNibble 0001  
                           ?___altoft 0009                            _lcdNewline 19CA  
                           ?___awtoft 0009                             ?___ftpack 0001  
                             ?_printf 0096            servoInterruptService@flags 000C  
      __size_of_servoInterruptService 01D4         __end_of_servoInterruptService 0838  
               __end_of_showInterface 0C28                             ?_dateTime 0001  
                           ?_lcdClear 0001                    __size_of_runSelect 0026  
                    angleToPulse@a000 0059                            ??i2_printf 001D  
                    angleToPulse@a180 0052                          _digitalWrite 11F4  
                             _SSPCON1 000FC6                               _SSPCON2 000FC5  
                             _SSPSTAT 000FC7                             ?_mainMenu 0001  
                             i2_putch 193E                             ?_pinSetup 0001  
                           ?_setAngle 005D                     __end_of_lcdNibble 14DC  
                             __Hparam 0000                               __Lparam 0000  
                             ___ftadd 0838                            _readKeypad 1804  
                             ___ftdiv 0E10                               ___lldiv 0FD8  
                             ___ftmul 0D1C                               ___llmod 1348  
                             ___fttol 0C28                             ?_runStats 0001  
                          ??___altoft 000D                               __pcinit 1716  
                          ??___awtoft 000C                            ??___ftpack 0006  
                             __ramtop 1000                               _lcdInst 182E  
                             __ptext0 199A                               __ptext1 0B24  
                             __ptext2 1880                               __ptext3 18A6  
                             __ptext4 18CC                               __ptext5 17D2  
                             __ptext6 1804                               __ptext7 18F2  
                             __ptext8 1918                               __ptext9 0012  
                     __size_of_printf 0366                         startTimer@val 0003  
                             _initLCD 16CC                     __end_of_hexpowers FEE5  
                             _initRTC 1982                               _dpowers FE9D  
                          ??_dateTime 00A9                          ??i2_lcdClear 0005  
            __size_of_I2C_Master_Init 0060                            ??_lcdClear 0084  
                             _service 0008                               _runMenu 17D2  
                             _runTime 1880                        __pintcode_body 0EF6  
                end_of_initialization 174E                            ??_mainMenu 00A9  
                       __Lmediumconst FE9C                               int_func 0EF6  
                      digitalRead@pin 0003                            ??_pinSetup 0080  
                          ??_setAngle 0061                       ___lldiv@divisor 0084  
                     ___lldiv@counter 008C                     __end_of_runSelect 18F2  
                             printf@c 00A8                               printf@f 0096  
                    I2C_Master_Init@c 008D                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                    __end_ofi2_lcdClear 19EA  
                          ??_runStats 00A9                         ??_digitalRead 0005  
                         ?_lcdNewline 0001                             _PORTBbits 000F81  
                    showInterface@key 00AA                          _happynewyear FEF6  
                  angleToPulse@offset 004E                             i2___lldiv 13E2  
                           i2___llmod 1554                            _startTimer 1680  
        ?_sortBatteryInterruptService 0001                             i2_lcdInst 1960  
                         ___ftdiv@exp 001A                    i2___llmod@dividend 000E  
                         ___ftmul@exp 0025                           ?_readKeypad 0001  
                __size_ofi2_lcdNibble 0066                         i2lcdInst@data 0004  
                      __end_of_printf 0378                          i2printf@flag 0028  
                        i2printf@prec 0020                   start_initialization 1716  
                 __end_of_digitalRead 1146                             i2printf@c 0029  
                           i2printf@f 0017                            ?i2___lldiv 0001  
                          ?i2___llmod 000E                     __size_ofi2_printf 02EC  
                   ??_I2C_Master_Init 0091                            ?i2_lcdInst 0001  
                 __size_of_lcdNewline 0008         ??_sortBatteryInterruptService 002A  
                     ___llmod@divisor 0091                       ___llmod@counter 0095  
                         __pdataBANK0 00C3                      __CFG_LPT1OSC$OFF 000000  
                            ??_printf 009C                     __size_of___altoft 0078  
                   __size_of___awtoft 0038                     __size_of___ftpack 00AE  
                         __pbssCOMRAM 0076                         __pcstackBANK0 0080  
                   __size_of_dateTime 0026                           ?_startTimer 0001  
                   __size_of_lcdClear 0008                   __size_of_readKeypad 002A  
                            ?i2_putch 0001                     __size_of_mainMenu 0026  
                   __CFG_CCP2MX$PORTC 000000                     __size_of_pinSetup 003E  
                   __size_of_setAngle 00A8                             __pintcode 0008  
                       __pmediumconst FE9C                             _lcdNibble 1464  
                            ?___ftadd 002B                              ?___ftdiv 000D  
                            ?___lldiv 0080                              ?___ftmul 001C  
                            ?___llmod 008D                              ?___fttol 0037  
__size_of_sortBatteryInterruptService 0012                         ?i2_lcdNewline 0001  
                         _digitalRead 1094                              ?_lcdInst 0001  
                   __size_of_runStats 0026                              ?_initLCD 0001  
                            ?_initRTC 0001                       startTimer@timer 0001  
                            ?_service 0001                             _hexpowers FEC5  
                            ?_runMenu 0001                              ?_runTime 0001  
               _servoInterruptService 0664                           ??i2___lldiv 0009  
                         ??i2___llmod 0016                        __size_of_putch 0028  
                         ??i2_lcdInst 0003                              _LATDbits 000F8C  
                            i2u300_40 0696                              i2u301_40 0698  
                            i2u302_40 06B6                              i2u234_40 0C72  
                            i2u250_44 10C6                              i2u250_45 10C2  
                            i2u234_45 0C6A                              i2u330_47 1614  
                            i2u251_44 10E6                              i2u251_45 10E2  
                            i2u252_44 1106                              i2u252_45 1102  
                            i2u324_47 1952                              i2u253_44 120A  
                            i2u253_45 1204                              i2u325_47 1966  
                            i2u326_47 1978                              i2u327_47 15D2  
                            i2u328_47 15E0                              i2u249_44 10A6  
                            i2u249_45 10A2                              i2u329_47 1606  
                            i2u294_40 066C                              i2u295_40 066E  
                            i2u296_40 067A                              i2u297_40 067C  
                            i2u298_40 0688                              i2u299_40 068A  
              __size_of_showInterface 0104                      __CFG_WDTPS$32768 000000  
                          ?_lcdNibble 0001                        ??i2_lcdNewline 0005  
                          service@key 0075                          ??_lcdNewline 0084  
                 __size_of_startTimer 004C                             _runSelect 18CC  
                   angleToPulse@angle 0046                         lcdNibble@data 0081  
                          printf@flag 00A7                         lcdNibble@temp 0080  
                          printf@prec 009F                            runMenu@key 00A9  
                            i2_printf 0378                             copy_data0 172A  
                    __size_ofi2_putch 0022                    __end_of_lcdNewline 19D2  
                       readKeypad@key 0080                              __Hrparam 0000  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
                        ??_readKeypad 0080                      __size_of___ftadd 01AC  
                    __size_of___ftdiv 00E6                      __size_of___lldiv 00BC  
                            ___altoft 14DC                      __size_of___ftmul 00F4  
                    __size_of___llmod 009A                      __size_of___fttol 00F4  
                          ?_runSelect 0001                              ___awtoft 179A  
                            ___ftpack 1146                      __size_of_lcdInst 002A  
                            _binAngle 00C3                       _I2C_Master_Init 1620  
                    __size_of_initLCD 004A                      __size_of_initRTC 0018  
                            _dateTime 1918                ?_servoInterruptService 0001  
                       _showInterface 0B24                              _lcdClear 19D2  
                            __ptext10 1858                              __ptext11 19CA  
                            __ptext20 1464                              __ptext12 1348  
                            __ptext13 19D2                              __ptext30 1960  
                            __ptext22 19B0                              __ptext14 175C  
                            __ptext31 15BA                              __ptext23 12A0  
                            __ptext15 1982                              __ptext40 0664  
                            __ptext32 09E4                              __ptext24 0378  
                            __ptext16 1620                              __ptext41 1680  
                            __ptext33 0C28                              __ptext25 193E  
                            __ptext17 0FD8                              __ptext42 11F4  
                            __ptext34 0D1C                              __ptext26 19DA  
                            __ptext18 16CC                              __ptext43 1094  
                            __ptext35 0E10                              __ptext27 1554  
                            __ptext19 182E                              __ptext36 0838  
                            __ptext28 13E2                              __ptext37 179A  
                            __ptext29 19E2                              __ptext38 14DC  
                            __ptext39 1146                      __size_of_service 0FD0  
                    __size_of_runMenu 0032                      __size_of_runTime 0026  
                            _mainMenu 18F2                    __end_of_readKeypad 182E  
                       ?_angleToPulse 0046                         __size_of_main 0016  
                            _pinSetup 175C                              _setAngle 12A0  
                       ??i2_lcdNibble 0001                           ??_lcdNibble 0080  
                            int$flags 007E                              _runStats 18A6  
                           printf@idx 009E                             printf@val 00A3  
                           putch@data 0084                            _INTCONbits 000FF2  
                      ?_showInterface 0001                         ?_digitalWrite 0001  
                        ??_startTimer 0007                       digitalRead@port 0001  
                            intlevel2 0000                        ??_angleToPulse 004A  
                __end_ofi2_lcdNewline 19E2                      ___lldiv@dividend 0080  
                            printf@ap 00A1               __end_of_I2C_Master_Init 1680  
                         lcdInst@data 0083                          ?_digitalRead 0001  
                         ??_runSelect 00A9                    __end_of_startTimer 16CC  
                 __end_ofi2_lcdNibble 1620                      digitalWrite@port 0001  
                    ___lldiv@quotient 0088                        ??_digitalWrite 0007  
 __end_of_sortBatteryInterruptService 19C2           _sortBatteryInterruptService 19B0  
                     digitalWrite@pin 0003                       digitalWrite@val 0005  
