

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 26 11:44:06 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           ; Version 1.40
    93                           ; Generated 01/12/2016 GMT
    94                           ; 
    95                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC18F4620 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     
   127                           	psect	idataBANK1
   128  0050B2                     __pidataBANK1:
   129                           	opt stack 0
   130                           
   131                           ;initializer for _angle
   132  0050B2  005A               	dw	90
   133                           
   134                           ;initializer for _padAngle_CLOSE
   135  0050B4  001E               	dw	30
   136                           
   137                           ;initializer for _padAngle_NEUTRAL
   138  0050B6  0046               	dw	70
   139                           
   140                           ;initializer for _padAngle_OPEN
   141  0050B8  00B4               	dw	180
   142                           
   143                           ;initializer for _period
   144  0050BA  797C               	dw	31100
   145                           
   146                           ;initializer for _redirectAngle_9V
   147  0050BC  0040               	dw	64
   148                           
   149                           ;initializer for _redirectAngle_AA
   150  0050BE  004A               	dw	74
   151                           
   152                           ;initializer for _redirectAngle_C
   153  0050C0  006F               	dw	111
   154                           
   155                           ;initializer for _redirectAngle_OTHER
   156  0050C2  0059               	dw	89
   157                           
   158                           ;initializer for _AA_float
   159  0050C4  0002               	dw	2
   160  0050C6  0005               	dw	5
   161                           
   162                           ;initializer for _conveyorServo
   163  0050C8  0002               	dw	2
   164  0050CA  0002               	dw	2
   165                           
   166                           ;initializer for _cylinderMotor
   167  0050CC  0002               	dw	2
   168  0050CE  0000               	dw	0
   169                           
   170                           ;initializer for _padPin1
   171  0050D0  0002               	dw	2
   172  0050D2  0006               	dw	6
   173                           
   174                           ;initializer for _padPin2
   175  0050D4  0002               	dw	2
   176  0050D6  0007               	dw	7
   177                           
   178                           ;initializer for _padServo
   179  0050D8  0002               	dw	2
   180  0050DA  0001               	dw	1
   181                           
   182                           ;initializer for _redirectingServo
   183  0050DC  0003               	dw	3
   184  0050DE  0000               	dw	0
   185                           
   186                           	psect	mediumconst
   187  00FDC2                     __pmediumconst:
   188                           	opt stack 0
   189  00FDC2  00                 	db	0
   190  00FDC3                     _dpowers:
   191                           	opt stack 0
   192  00FDC3  0001               	dw	1
   193  00FDC5  0000               	dw	0
   194  00FDC7  000A               	dw	10
   195  00FDC9  0000               	dw	0
   196  00FDCB  0064               	dw	100
   197  00FDCD  0000               	dw	0
   198  00FDCF  03E8               	dw	1000
   199  00FDD1  0000               	dw	0
   200  00FDD3  2710               	dw	10000
   201  00FDD5  0000               	dw	0
   202  00FDD7  86A0               	dw	34464
   203  00FDD9  0001               	dw	1
   204  00FDDB  4240               	dw	16960
   205  00FDDD  000F               	dw	15
   206  00FDDF  9680               	dw	38528
   207  00FDE1  0098               	dw	152
   208  00FDE3  E100               	dw	57600
   209  00FDE5  05F5               	dw	1525
   210  00FDE7  CA00               	dw	51712
   211  00FDE9  3B9A               	dw	15258
   212  00FDEB                     __end_of_dpowers:
   213                           	opt stack 0
   214  00FDEB                     __npowers_:
   215                           	opt stack 0
   216  00FDEB  00                 	db	0
   217  00FDEC  80                 	db	128
   218  00FDED  3F                 	db	63
   219  00FDEE  CD                 	db	205
   220  00FDEF  CC                 	db	204
   221  00FDF0  3D                 	db	61
   222  00FDF1  D7                 	db	215
   223  00FDF2  23                 	db	35
   224  00FDF3  3C                 	db	60
   225  00FDF4  12                 	db	18
   226  00FDF5  83                 	db	131
   227  00FDF6  3A                 	db	58
   228  00FDF7  B7                 	db	183
   229  00FDF8  D1                 	db	209
   230  00FDF9  38                 	db	56
   231  00FDFA  C6                 	db	198
   232  00FDFB  27                 	db	39
   233  00FDFC  37                 	db	55
   234  00FDFD  38                 	db	56
   235  00FDFE  86                 	db	134
   236  00FDFF  35                 	db	53
   237  00FE00  C0                 	db	192
   238  00FE01  D6                 	db	214
   239  00FE02  33                 	db	51
   240  00FE03  CC                 	db	204
   241  00FE04  2B                 	db	43
   242  00FE05  32                 	db	50
   243  00FE06  70                 	db	112
   244  00FE07  89                 	db	137
   245  00FE08  30                 	db	48
   246  00FE09  E7                 	db	231
   247  00FE0A  DB                 	db	219
   248  00FE0B  2E                 	db	46
   249  00FE0C  E5                 	db	229
   250  00FE0D  3C                 	db	60
   251  00FE0E  1E                 	db	30
   252  00FE0F  42                 	db	66
   253  00FE10  A2                 	db	162
   254  00FE11  0D                 	db	13
   255  00FE12                     __end_of__npowers_:
   256                           	opt stack 0
   257  00FE12                     __powers_:
   258                           	opt stack 0
   259  00FE12  00                 	db	0
   260  00FE13  80                 	db	128
   261  00FE14  3F                 	db	63
   262  00FE15  00                 	db	0
   263  00FE16  20                 	db	32
   264  00FE17  41                 	db	65
   265  00FE18  00                 	db	0
   266  00FE19  C8                 	db	200
   267  00FE1A  42                 	db	66
   268  00FE1B  00                 	db	0
   269  00FE1C  7A                 	db	122
   270  00FE1D  44                 	db	68
   271  00FE1E  40                 	db	64
   272  00FE1F  1C                 	db	28
   273  00FE20  46                 	db	70
   274  00FE21  50                 	db	80
   275  00FE22  C3                 	db	195
   276  00FE23  47                 	db	71
   277  00FE24  24                 	db	36
   278  00FE25  74                 	db	116
   279  00FE26  49                 	db	73
   280  00FE27  97                 	db	151
   281  00FE28  18                 	db	24
   282  00FE29  4B                 	db	75
   283  00FE2A  BC                 	db	188
   284  00FE2B  BE                 	db	190
   285  00FE2C  4C                 	db	76
   286  00FE2D  6B                 	db	107
   287  00FE2E  6E                 	db	110
   288  00FE2F  4E                 	db	78
   289  00FE30  03                 	db	3
   290  00FE31  15                 	db	21
   291  00FE32  50                 	db	80
   292  00FE33  79                 	db	121
   293  00FE34  AD                 	db	173
   294  00FE35  60                 	db	96
   295  00FE36  F3                 	db	243
   296  00FE37  49                 	db	73
   297  00FE38  71                 	db	113
   298  00FE39                     __end_of__powers_:
   299                           	opt stack 0
   300  00FE39                     _hexpowers:
   301                           	opt stack 0
   302  00FE39  0001               	dw	1
   303  00FE3B  0000               	dw	0
   304  00FE3D  0010               	dw	16
   305  00FE3F  0000               	dw	0
   306  00FE41  0100               	dw	256
   307  00FE43  0000               	dw	0
   308  00FE45  1000               	dw	4096
   309  00FE47  0000               	dw	0
   310  00FE49  0000               	dw	0
   311  00FE4B  0001               	dw	1
   312  00FE4D  0000               	dw	0
   313  00FE4F  0010               	dw	16
   314  00FE51  0000               	dw	0
   315  00FE53  0100               	dw	256
   316  00FE55  0000               	dw	0
   317  00FE57  1000               	dw	4096
   318  00FE59                     __end_of_hexpowers:
   319                           	opt stack 0
   320  00FE59                     _keys:
   321                           	opt stack 0
   322  00FE59  31                 	db	49
   323  00FE5A  32                 	db	50
   324  00FE5B  33                 	db	51
   325  00FE5C  41                 	db	65
   326  00FE5D  34                 	db	52
   327  00FE5E  35                 	db	53
   328  00FE5F  36                 	db	54
   329  00FE60  42                 	db	66
   330  00FE61  37                 	db	55
   331  00FE62  38                 	db	56
   332  00FE63  39                 	db	57
   333  00FE64  43                 	db	67
   334  00FE65  2A                 	db	42
   335  00FE66  30                 	db	48
   336  00FE67  23                 	db	35
   337  00FE68  44                 	db	68
   338  00FE69  00                 	db	0
   339  00FE6A                     __end_of_keys:
   340                           	opt stack 0
   341  00FE6A                     _happynewyear:
   342                           	opt stack 0
   343  00FE6A  00                 	db	0
   344  00FE6B  59                 	db	89
   345  00FE6C  03                 	db	3
   346  00FE6D  01                 	db	1
   347  00FE6E  13                 	db	19
   348  00FE6F  04                 	db	4
   349  00FE70  17                 	db	23
   350  00FE71                     __end_of_happynewyear:
   351                           	opt stack 0
   352  0000                     _ADCON0	set	4034
   353  0000                     _ADCON1	set	4033
   354  0000                     _ADCON2	set	4032
   355  0000                     _ADRESH	set	4036
   356  0000                     _ADRESL	set	4035
   357  0000                     _EEADR	set	4009
   358  0000                     _EEADRH	set	4010
   359  0000                     _EECON1	set	4006
   360  0000                     _EECON2	set	4007
   361  0000                     _EEDATA	set	4008
   362  0000                     _INTCONbits	set	4082
   363  0000                     _LATA	set	3977
   364  0000                     _LATB	set	3978
   365  0000                     _LATC	set	3979
   366  0000                     _LATD	set	3980
   367  0000                     _LATDbits	set	3980
   368  0000                     _LATE	set	3981
   369  0000                     _PORTA	set	3968
   370  0000                     _PORTB	set	3969
   371  0000                     _PORTBbits	set	3969
   372  0000                     _PORTC	set	3970
   373  0000                     _PORTD	set	3971
   374  0000                     _SSPADD	set	4040
   375  0000                     _SSPBUF	set	4041
   376  0000                     _SSPCON1	set	4038
   377  0000                     _SSPCON2	set	4037
   378  0000                     _SSPSTAT	set	4039
   379  0000                     _T0CON	set	4053
   380  0000                     _T1CON	set	4045
   381  0000                     _T3CON	set	4017
   382  0000                     _TMR0H	set	4055
   383  0000                     _TMR0L	set	4054
   384  0000                     _TMR1H	set	4047
   385  0000                     _TMR1L	set	4046
   386  0000                     _TMR3H	set	4019
   387  0000                     _TMR3L	set	4018
   388  0000                     _TRISA	set	3986
   389  0000                     _TRISB	set	3987
   390  0000                     _TRISC	set	3988
   391  0000                     _TRISD	set	3989
   392  0000                     _TRISE	set	3990
   393  0000                     _ACKDT	set	32301
   394  0000                     _ACKEN	set	32300
   395  0000                     _EEIF	set	32012
   396  0000                     _INT0IE	set	32660
   397  0000                     _INT0IF	set	32657
   398  0000                     _INT1IE	set	32643
   399  0000                     _INT1IF	set	32640
   400  0000                     _PEIE	set	32662
   401  0000                     _PEN	set	32298
   402  0000                     _RCEN	set	32299
   403  0000                     _RSEN	set	32297
   404  0000                     _SEN	set	32296
   405  0000                     _TMR0IE	set	32661
   406  0000                     _TMR0IF	set	32658
   407  0000                     _TMR1IE	set	31976
   408  0000                     _TMR1IF	set	31984
   409  0000                     _TMR3IE	set	32001
   410  0000                     _TRISC3	set	31907
   411  0000                     _TRISC4	set	31908
   412  00FE71                     STR_9:
   413  00FE71  63                 	db	99	;'c'
   414  00FE72  6F                 	db	111	;'o'
   415  00FE73  6E                 	db	110	;'n'
   416  00FE74  76                 	db	118	;'v'
   417  00FE75  65                 	db	101	;'e'
   418  00FE76  79                 	db	121	;'y'
   419  00FE77  6F                 	db	111	;'o'
   420  00FE78  72                 	db	114	;'r'
   421  00FE79  20                 	db	32
   422  00FE7A  26                 	db	38
   423  00FE7B  20                 	db	32
   424  00FE7C  0A                 	db	10
   425  00FE7D  63                 	db	99	;'c'
   426  00FE7E  79                 	db	121	;'y'
   427  00FE7F  6C                 	db	108	;'l'
   428  00FE80  69                 	db	105	;'i'
   429  00FE81  6E                 	db	110	;'n'
   430  00FE82  64                 	db	100	;'d'
   431  00FE83  65                 	db	101	;'e'
   432  00FE84  72                 	db	114	;'r'
   433  00FE85  20                 	db	32
   434  00FE86  6F                 	db	111	;'o'
   435  00FE87  6E                 	db	110	;'n'
   436  00FE88  3F                 	db	63	;'?'
   437  00FE89  00                 	db	0
   438  00FE8A                     STR_6:
   439  00FE8A  73                 	db	115	;'s'
   440  00FE8B  65                 	db	101	;'e'
   441  00FE8C  74                 	db	116	;'t'
   442  00FE8D  20                 	db	32
   443  00FE8E  72                 	db	114	;'r'
   444  00FE8F  65                 	db	101	;'e'
   445  00FE90  64                 	db	100	;'d'
   446  00FE91  69                 	db	105	;'i'
   447  00FE92  72                 	db	114	;'r'
   448  00FE93  65                 	db	101	;'e'
   449  00FE94  63                 	db	99	;'c'
   450  00FE95  74                 	db	116	;'t'
   451  00FE96  20                 	db	32
   452  00FE97  61                 	db	97	;'a'
   453  00FE98  6E                 	db	110	;'n'
   454  00FE99  67                 	db	103	;'g'
   455  00FE9A  6C                 	db	108	;'l'
   456  00FE9B  65                 	db	101	;'e'
   457  00FE9C  3F                 	db	63	;'?'
   458  00FE9D  00                 	db	0
   459  00FE9E                     STR_3:
   460  00FE9E  69                 	db	105	;'i'
   461  00FE9F  6E                 	db	110	;'n'
   462  00FEA0  74                 	db	116	;'t'
   463  00FEA1  65                 	db	101	;'e'
   464  00FEA2  72                 	db	114	;'r'
   465  00FEA3  72                 	db	114	;'r'
   466  00FEA4  75                 	db	117	;'u'
   467  00FEA5  70                 	db	112	;'p'
   468  00FEA6  74                 	db	116	;'t'
   469  00FEA7  21                 	db	33
   470  00FEA8  21                 	db	33
   471  00FEA9  21                 	db	33
   472  00FEAA  0A                 	db	10
   473  00FEAB  63                 	db	99	;'c'
   474  00FEAC  6C                 	db	108	;'l'
   475  00FEAD  6F                 	db	111	;'o'
   476  00FEAE  73                 	db	115	;'s'
   477  00FEAF  65                 	db	101	;'e'
   478  00FEB0  3F                 	db	63	;'?'
   479  00FEB1  00                 	db	0
   480  00FEB2  25                 	db	37
   481  00FEB3  63                 	db	99	;'c'
   482  00FEB4  29                 	db	41
   483  00FEB5  20                 	db	32
   484  00FEB6  74                 	db	116	;'t'
   485  00FEB7  69                 	db	105	;'i'
   486  00FEB8  6D                 	db	109	;'m'
   487  00FEB9  65                 	db	101	;'e'
   488  00FEBA  20                 	db	32
   489  00FEBB  20                 	db	32
   490  00FEBC  3C                 	db	60	;'<'
   491  00FEBD  41                 	db	65	;'A'
   492  00FEBE  20                 	db	32
   493  00FEBF  20                 	db	32
   494  00FEC0  20                 	db	32
   495  00FEC1  20                 	db	32
   496  00FEC2  20                 	db	32
   497  00FEC3  0A                 	db	10
   498  00FEC4  00                 	db	0
   499  00FEC5  73                 	db	115	;'s'
   500  00FEC6  74                 	db	116	;'t'
   501  00FEC7  61                 	db	97	;'a'
   502  00FEC8  72                 	db	114	;'r'
   503  00FEC9  74                 	db	116	;'t'
   504  00FECA  20                 	db	32
   505  00FECB  20                 	db	32
   506  00FECC  20                 	db	32
   507  00FECD  3C                 	db	60	;'<'
   508  00FECE  42                 	db	66	;'B'
   509  00FECF  20                 	db	32
   510  00FED0  20                 	db	32
   511  00FED1  20                 	db	32
   512  00FED2  20                 	db	32
   513  00FED3  20                 	db	32
   514  00FED4  20                 	db	32
   515  00FED5  0A                 	db	10
   516  00FED6  00                 	db	0
   517  00FED7  20                 	db	32
   518  00FED8  20                 	db	32
   519  00FED9  68                 	db	104	;'h'
   520  00FEDA  68                 	db	104	;'h'
   521  00FEDB  3A                 	db	58	;':'
   522  00FEDC  6D                 	db	109	;'m'
   523  00FEDD  6D                 	db	109	;'m'
   524  00FEDE  3A                 	db	58	;':'
   525  00FEDF  73                 	db	115	;'s'
   526  00FEE0  73                 	db	115	;'s'
   527  00FEE1  20                 	db	32
   528  00FEE2  20                 	db	32
   529  00FEE3  20                 	db	32
   530  00FEE4  20                 	db	32
   531  00FEE5  20                 	db	32
   532  00FEE6  20                 	db	32
   533  00FEE7  0A                 	db	10
   534  00FEE8  00                 	db	0
   535  00FEE9  73                 	db	115	;'s'
   536  00FEEA  65                 	db	101	;'e'
   537  00FEEB  6C                 	db	108	;'l'
   538  00FEEC  65                 	db	101	;'e'
   539  00FEED  63                 	db	99	;'c'
   540  00FEEE  74                 	db	116	;'t'
   541  00FEEF  20                 	db	32
   542  00FEF0  72                 	db	114	;'r'
   543  00FEF1  75                 	db	117	;'u'
   544  00FEF2  6E                 	db	110	;'n'
   545  00FEF3  3A                 	db	58	;':'
   546  00FEF4  20                 	db	32
   547  00FEF5  20                 	db	32
   548  00FEF6  20                 	db	32
   549  00FEF7  20                 	db	32
   550  00FEF8  20                 	db	32
   551  00FEF9  0A                 	db	10
   552  00FEFA  00                 	db	0
   553  00FEFB  74                 	db	116	;'t'
   554  00FEFC  69                 	db	105	;'i'
   555  00FEFD  6D                 	db	109	;'m'
   556  00FEFE  65                 	db	101	;'e'
   557  00FEFF  3A                 	db	58	;':'
   558  00FF00  20                 	db	32
   559  00FF01  6E                 	db	110	;'n'
   560  00FF02  6E                 	db	110	;'n'
   561  00FF03  6E                 	db	110	;'n'
   562  00FF04  20                 	db	32
   563  00FF05  73                 	db	115	;'s'
   564  00FF06  65                 	db	101	;'e'
   565  00FF07  63                 	db	99	;'c'
   566  00FF08  20                 	db	32
   567  00FF09  20                 	db	32
   568  00FF0A  20                 	db	32
   569  00FF0B  0A                 	db	10
   570  00FF0C  00                 	db	0
   571  00FF0D  5B                 	db	91	;'['
   572  00FF0E  41                 	db	65	;'A'
   573  00FF0F  41                 	db	65	;'A'
   574  00FF10  2C                 	db	44
   575  00FF11  39                 	db	57	;'9'
   576  00FF12  56                 	db	86	;'V'
   577  00FF13  2C                 	db	44
   578  00FF14  43                 	db	67	;'C'
   579  00FF15  2C                 	db	44
   580  00FF16  6F                 	db	111	;'o'
   581  00FF17  74                 	db	116	;'t'
   582  00FF18  68                 	db	104	;'h'
   583  00FF19  65                 	db	101	;'e'
   584  00FF1A  72                 	db	114	;'r'
   585  00FF1B  5D                 	db	93	;']'
   586  00FF1C  20                 	db	32
   587  00FF1D  0A                 	db	10
   588  00FF1E  00                 	db	0
   589  00FF1F                     STR_24:
   590  00FF1F  30                 	db	48	;'0'
   591  00FF20  31                 	db	49	;'1'
   592  00FF21  32                 	db	50	;'2'
   593  00FF22  33                 	db	51	;'3'
   594  00FF23  34                 	db	52	;'4'
   595  00FF24  35                 	db	53	;'5'
   596  00FF25  36                 	db	54	;'6'
   597  00FF26  37                 	db	55	;'7'
   598  00FF27  38                 	db	56	;'8'
   599  00FF28  39                 	db	57	;'9'
   600  00FF29  61                 	db	97	;'a'
   601  00FF2A  62                 	db	98	;'b'
   602  00FF2B  63                 	db	99	;'c'
   603  00FF2C  64                 	db	100	;'d'
   604  00FF2D  65                 	db	101	;'e'
   605  00FF2E  66                 	db	102	;'f'
   606  00FF2F  00                 	db	0
   607  00FF30  20                 	db	32
   608  00FF31  20                 	db	32
   609  00FF32  20                 	db	32
   610  00FF33  20                 	db	32
   611  00FF34  20                 	db	32
   612  00FF35  20                 	db	32
   613  00FF36  20                 	db	32
   614  00FF37  20                 	db	32
   615  00FF38  20                 	db	32
   616  00FF39  20                 	db	32
   617  00FF3A  20                 	db	32
   618  00FF3B  20                 	db	32
   619  00FF3C  20                 	db	32
   620  00FF3D  20                 	db	32
   621  00FF3E  2A                 	db	42
   622  00FF3F  3E                 	db	62	;'>'
   623  00FF40  00                 	db	0
   624  00FF41  5B                 	db	91	;'['
   625  00FF42  31                 	db	49	;'1'
   626  00FF43  2C                 	db	44
   627  00FF44  32                 	db	50	;'2'
   628  00FF45  2C                 	db	44
   629  00FF46  33                 	db	51	;'3'
   630  00FF47  2C                 	db	44
   631  00FF48  34                 	db	52	;'4'
   632  00FF49  5D                 	db	93	;']'
   633  00FF4A  20                 	db	32
   634  00FF4B  20                 	db	32
   635  00FF4C  20                 	db	32
   636  00FF4D  20                 	db	32
   637  00FF4E  20                 	db	32
   638  00FF4F  2A                 	db	42
   639  00FF50  3E                 	db	62	;'>'
   640  00FF51  00                 	db	0
   641  00FF52  68                 	db	104	;'h'
   642  00FF53  69                 	db	105	;'i'
   643  00FF54  73                 	db	115	;'s'
   644  00FF55  74                 	db	116	;'t'
   645  00FF56  6F                 	db	111	;'o'
   646  00FF57  72                 	db	114	;'r'
   647  00FF58  79                 	db	121	;'y'
   648  00FF59  20                 	db	32
   649  00FF5A  3C                 	db	60	;'<'
   650  00FF5B  43                 	db	67	;'C'
   651  00FF5C  20                 	db	32
   652  00FF5D  20                 	db	32
   653  00FF5E  20                 	db	32
   654  00FF5F  20                 	db	32
   655  00FF60  2A                 	db	42
   656  00FF61  3E                 	db	62	;'>'
   657  00FF62  00                 	db	0
   658  00FF63  20                 	db	32
   659  00FF64  20                 	db	32
   660  00FF65  20                 	db	32
   661  00FF66  73                 	db	115	;'s'
   662  00FF67  74                 	db	116	;'t'
   663  00FF68  61                 	db	97	;'a'
   664  00FF69  74                 	db	116	;'t'
   665  00FF6A  73                 	db	115	;'s'
   666  00FF6B  20                 	db	32
   667  00FF6C  3C                 	db	60	;'<'
   668  00FF6D  42                 	db	66	;'B'
   669  00FF6E  20                 	db	32
   670  00FF6F  20                 	db	32
   671  00FF70  20                 	db	32
   672  00FF71  2A                 	db	42
   673  00FF72  3E                 	db	62	;'>'
   674  00FF73  00                 	db	0
   675  00FF74  5B                 	db	91	;'['
   676  00FF75  6E                 	db	110	;'n'
   677  00FF76  6E                 	db	110	;'n'
   678  00FF77  2C                 	db	44
   679  00FF78  6E                 	db	110	;'n'
   680  00FF79  2C                 	db	44
   681  00FF7A  6E                 	db	110	;'n'
   682  00FF7B  2C                 	db	44
   683  00FF7C  6E                 	db	110	;'n'
   684  00FF7D  6E                 	db	110	;'n'
   685  00FF7E  5D                 	db	93	;']'
   686  00FF7F  20                 	db	32
   687  00FF80  20                 	db	32
   688  00FF81  20                 	db	32
   689  00FF82  2A                 	db	42
   690  00FF83  3E                 	db	62	;'>'
   691  00FF84  00                 	db	0
   692  00FF85  20                 	db	32
   693  00FF86  20                 	db	32
   694  00FF87  6D                 	db	109	;'m'
   695  00FF88  6D                 	db	109	;'m'
   696  00FF89  3A                 	db	58	;':'
   697  00FF8A  64                 	db	100	;'d'
   698  00FF8B  64                 	db	100	;'d'
   699  00FF8C  3A                 	db	58	;':'
   700  00FF8D  79                 	db	121	;'y'
   701  00FF8E  79                 	db	121	;'y'
   702  00FF8F  20                 	db	32
   703  00FF90  20                 	db	32
   704  00FF91  20                 	db	32
   705  00FF92  20                 	db	32
   706  00FF93  41                 	db	65	;'A'
   707  00FF94  3E                 	db	62	;'>'
   708  00FF95  00                 	db	0
   709  00FF96                     STR_7:
   710  00FF96  72                 	db	114	;'r'
   711  00FF97  65                 	db	101	;'e'
   712  00FF98  6C                 	db	108	;'l'
   713  00FF99  65                 	db	101	;'e'
   714  00FF9A  61                 	db	97	;'a'
   715  00FF9B  73                 	db	115	;'s'
   716  00FF9C  65                 	db	101	;'e'
   717  00FF9D  20                 	db	32
   718  00FF9E  62                 	db	98	;'b'
   719  00FF9F  61                 	db	97	;'a'
   720  00FFA0  74                 	db	116	;'t'
   721  00FFA1  74                 	db	116	;'t'
   722  00FFA2  65                 	db	101	;'e'
   723  00FFA3  72                 	db	114	;'r'
   724  00FFA4  79                 	db	121	;'y'
   725  00FFA5  3F                 	db	63	;'?'
   726  00FFA6  00                 	db	0
   727  00FFA7                     STR_2:
   728  00FFA7  74                 	db	116	;'t'
   729  00FFA8  69                 	db	105	;'i'
   730  00FFA9  6D                 	db	109	;'m'
   731  00FFAA  65                 	db	101	;'e'
   732  00FFAB  20                 	db	32
   733  00FFAC  25                 	db	37
   734  00FFAD  30                 	db	48	;'0'
   735  00FFAE  32                 	db	50	;'2'
   736  00FFAF  6C                 	db	108	;'l'
   737  00FFB0  64                 	db	100	;'d'
   738  00FFB1  3A                 	db	58	;':'
   739  00FFB2  25                 	db	37
   740  00FFB3  30                 	db	48	;'0'
   741  00FFB4  32                 	db	50	;'2'
   742  00FFB5  6C                 	db	108	;'l'
   743  00FFB6  64                 	db	100	;'d'
   744  00FFB7  00                 	db	0
   745  00FFB8                     STR_8:
   746  00FFB8  72                 	db	114	;'r'
   747  00FFB9  65                 	db	101	;'e'
   748  00FFBA  73                 	db	115	;'s'
   749  00FFBB  65                 	db	101	;'e'
   750  00FFBC  74                 	db	116	;'t'
   751  00FFBD  20                 	db	32
   752  00FFBE  74                 	db	116	;'t'
   753  00FFBF  68                 	db	104	;'h'
   754  00FFC0  65                 	db	101	;'e'
   755  00FFC1  20                 	db	32
   756  00FFC2  70                 	db	112	;'p'
   757  00FFC3  61                 	db	97	;'a'
   758  00FFC4  64                 	db	100	;'d'
   759  00FFC5  3F                 	db	63	;'?'
   760  00FFC6  00                 	db	0
   761  00FFC7                     STR_5:
   762  00FFC7  73                 	db	115	;'s'
   763  00FFC8  69                 	db	105	;'i'
   764  00FFC9  67                 	db	103	;'g'
   765  00FFCA  3A                 	db	58	;':'
   766  00FFCB  20                 	db	32
   767  00FFCC  25                 	db	37
   768  00FFCD  64                 	db	100	;'d'
   769  00FFCE  20                 	db	32
   770  00FFCF  0A                 	db	10
   771  00FFD0  56                 	db	86	;'V'
   772  00FFD1  3A                 	db	58	;':'
   773  00FFD2  20                 	db	32
   774  00FFD3  25                 	db	37
   775  00FFD4  66                 	db	102	;'f'
   776  00FFD5  00                 	db	0
   777  00FFD6                     STR_4:
   778  00FFD6  72                 	db	114	;'r'
   779  00FFD7  65                 	db	101	;'e'
   780  00FFD8  61                 	db	97	;'a'
   781  00FFD9  64                 	db	100	;'d'
   782  00FFDA  20                 	db	32
   783  00FFDB  76                 	db	118	;'v'
   784  00FFDC  6F                 	db	111	;'o'
   785  00FFDD  6C                 	db	108	;'l'
   786  00FFDE  74                 	db	116	;'t'
   787  00FFDF  61                 	db	97	;'a'
   788  00FFE0  67                 	db	103	;'g'
   789  00FFE1  65                 	db	101	;'e'
   790  00FFE2  3F                 	db	63	;'?'
   791  00FFE3  00                 	db	0
   792  00FFE4                     STR_10:
   793  00FFE4  70                 	db	112	;'p'
   794  00FFE5  65                 	db	101	;'e'
   795  00FFE6  72                 	db	114	;'r'
   796  00FFE7  69                 	db	105	;'i'
   797  00FFE8  6F                 	db	111	;'o'
   798  00FFE9  64                 	db	100	;'d'
   799  00FFEA  20                 	db	32
   800  00FFEB  25                 	db	37
   801  00FFEC  6C                 	db	108	;'l'
   802  00FFED  64                 	db	100	;'d'
   803  00FFEE  00                 	db	0
   804  00FFEF  74                 	db	116	;'t'
   805  00FFF0  31                 	db	49	;'1'
   806  00FFF1  3A                 	db	58	;':'
   807  00FFF2  20                 	db	32
   808  00FFF3  25                 	db	37
   809  00FFF4  78                 	db	120	;'x'
   810  00FFF5  20                 	db	32
   811  00FFF6  00                 	db	0
   812  00FFF7                     STR_1:
   813  00FFF7  72                 	db	114	;'r'
   814  00FFF8  75                 	db	117	;'u'
   815  00FFF9  6E                 	db	110	;'n'
   816  00FFFA  6E                 	db	110	;'n'
   817  00FFFB  69                 	db	105	;'i'
   818  00FFFC  6E                 	db	110	;'n'
   819  00FFFD  67                 	db	103	;'g'
   820  00FFFE  00                 	db	0
   821                           
   822                           ; #config settings
   823  00FFFF  00                 	db	0	; dummy byte at the end
   824  0000                     
   825                           	psect	cinit
   826  004F02                     __pcinit:
   827                           	opt stack 0
   828  004F02                     start_initialization:
   829                           	opt stack 0
   830  004F02                     __initialization:
   831                           	opt stack 0
   832                           
   833                           ; Initialize objects allocated to BANK1 (46 bytes)
   834                           ; load TBLPTR registers with __pidataBANK1
   835  004F02  0EB2               	movlw	low __pidataBANK1
   836  004F04  6EF6               	movwf	tblptrl,c
   837  004F06  0E50               	movlw	high __pidataBANK1
   838  004F08  6EF7               	movwf	tblptrh,c
   839  004F0A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   840  004F0C  6EF8               	movwf	tblptru,c
   841  004F0E  EE01  F032         	lfsr	0,__pdataBANK1
   842  004F12  EE10 F02E          	lfsr	1,46
   843  004F16                     copy_data0:
   844  004F16  0009               	tblrd		*+
   845  004F18  CFF5 FFEE          	movff	tablat,postinc0
   846  004F1C  50E5               	movf	postdec1,w,c
   847  004F1E  50E1               	movf	fsr1l,w,c
   848  004F20  E1FA               	bnz	copy_data0
   849                           
   850                           ; Clear objects allocated to BANK1 (39 bytes)
   851  004F22  EE01  F060         	lfsr	0,__pbssBANK1
   852  004F26  0E27               	movlw	39
   853  004F28                     clear_0:
   854  004F28  6AEE               	clrf	postinc0,c
   855  004F2A  06E8               	decf	wreg,f,c
   856  004F2C  E1FD               	bnz	clear_0
   857                           
   858                           ; Clear objects allocated to BANK0 (1 bytes)
   859  004F2E  0100               	movlb	0
   860  004F30  6BFF               	clrf	__pbssBANK0& (0+255),b
   861                           
   862                           ; Clear objects allocated to COMRAM (4 bytes)
   863  004F32  6A7E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   864  004F34  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   865  004F36  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   866  004F38  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   867  004F3A                     end_of_initialization:
   868                           	opt stack 0
   869  004F3A                     __end_of__initialization:
   870                           	opt stack 0
   871  004F3A  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   872  004F3C  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   873  004F3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   874  004F40  6EF8               	movwf	tblptru,c
   875  004F42  0100               	movlb	0
   876  004F44  EF49  F016         	goto	_main	;jump to C main() function
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           postdec1	equ	0xFE5
   884                           fsr1l	equ	0xFE1
   885                           
   886                           	psect	bssCOMRAM
   887  00007B                     __pbssCOMRAM:
   888                           	opt stack 0
   889  00007B                     _curr:
   890                           	opt stack 0
   891  00007B                     	ds	2
   892  00007D                     _n:
   893                           	opt stack 0
   894  00007D                     	ds	2
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1l	equ	0xFE1
   903                           
   904                           	psect	bssBANK0
   905  0000FF                     __pbssBANK0:
   906                           	opt stack 0
   907  0000FF                     _lastKey:
   908                           	opt stack 0
   909  0000FF                     	ds	1
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           postinc0	equ	0xFEE
   915                           wreg	equ	0xFE8
   916                           postdec1	equ	0xFE5
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK1
   920  000160                     __pbssBANK1:
   921                           	opt stack 0
   922  000160                     _pulse:
   923                           	opt stack 0
   924  000160                     	ds	8
   925  000168                     _servos:
   926                           	opt stack 0
   927  000168                     	ds	8
   928  000170                     _padPin3:
   929                           	opt stack 0
   930  000170                     	ds	4
   931  000174                     _time:
   932                           	opt stack 0
   933  000174                     	ds	4
   934  000178                     _V_LIM_9V:
   935                           	opt stack 0
   936  000178                     	ds	3
   937  00017B                     _V_LIM_AA:
   938                           	opt stack 0
   939  00017B                     	ds	3
   940  00017E                     _V_LIM_C:
   941                           	opt stack 0
   942  00017E                     	ds	3
   943  000181                     _batteryDetected:
   944                           	opt stack 0
   945  000181                     	ds	2
   946  000183                     _count:
   947                           	opt stack 0
   948  000183                     	ds	2
   949  000185                     _prevTime:
   950                           	opt stack 0
   951  000185                     	ds	2
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           postdec1	equ	0xFE5
   959                           fsr1l	equ	0xFE1
   960                           
   961                           	psect	dataBANK1
   962  000132                     __pdataBANK1:
   963                           	opt stack 0
   964  000132                     _angle:
   965                           	opt stack 0
   966  000132                     	ds	2
   967  000134                     _padAngle_CLOSE:
   968                           	opt stack 0
   969  000134                     	ds	2
   970  000136                     _padAngle_NEUTRAL:
   971                           	opt stack 0
   972  000136                     	ds	2
   973  000138                     _padAngle_OPEN:
   974                           	opt stack 0
   975  000138                     	ds	2
   976  00013A                     _period:
   977                           	opt stack 0
   978  00013A                     	ds	2
   979  00013C                     _redirectAngle_9V:
   980                           	opt stack 0
   981  00013C                     	ds	2
   982  00013E                     _redirectAngle_AA:
   983                           	opt stack 0
   984  00013E                     	ds	2
   985  000140                     _redirectAngle_C:
   986                           	opt stack 0
   987  000140                     	ds	2
   988  000142                     _redirectAngle_OTHER:
   989                           	opt stack 0
   990  000142                     	ds	2
   991  000144                     _AA_float:
   992                           	opt stack 0
   993  000144                     	ds	4
   994  000148                     _conveyorServo:
   995                           	opt stack 0
   996  000148                     	ds	4
   997  00014C                     _cylinderMotor:
   998                           	opt stack 0
   999  00014C                     	ds	4
  1000  000150                     _padPin1:
  1001                           	opt stack 0
  1002  000150                     	ds	4
  1003  000154                     _padPin2:
  1004                           	opt stack 0
  1005  000154                     	ds	4
  1006  000158                     _padServo:
  1007                           	opt stack 0
  1008  000158                     	ds	4
  1009  00015C                     _redirectingServo:
  1010                           	opt stack 0
  1011  00015C                     	ds	4
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           postdec1	equ	0xFE5
  1019                           fsr1l	equ	0xFE1
  1020                           
  1021                           	psect	cstackBANK1
  1022  000100                     __pcstackBANK1:
  1023                           	opt stack 0
  1024  000100                     _printf$1340:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x0
  1028  000100                     	ds	3
  1029  000103                     printf@cp:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x3
  1033  000103                     	ds	2
  1034  000105                     printf@idx:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x5
  1038  000105                     	ds	1
  1039  000106                     printf@len:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x6
  1043  000106                     	ds	2
  1044  000108                     printf@ap:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x8
  1048  000108                     	ds	2
  1049  00010A                     printf@prec:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0xA
  1053  00010A                     	ds	2
  1054  00010C                     printf@tmpval:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0xC
  1058  00010C                     	ds	4
  1059  000110                     printf@exp:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x10
  1063  000110                     	ds	2
  1064  000112                     printf@val:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x12
  1068  000112                     	ds	4
  1069  000116                     printf@width:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x16
  1073  000116                     	ds	2
  1074  000118                     printf@fval:
  1075                           	opt stack 0
  1076                           
  1077                           ; 3 bytes @ 0x18
  1078  000118                     	ds	3
  1079  00011B                     printf@flag:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x1B
  1083  00011B                     	ds	2
  1084  00011D                     printf@c:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x1D
  1088  00011D                     	ds	1
  1089  00011E                     sortBattery@V_float:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x1E
  1093  00011E                     	ds	3
  1094  000121                     sortBattery@Vcc:
  1095                           	opt stack 0
  1096                           
  1097                           ; 3 bytes @ 0x21
  1098  000121                     	ds	3
  1099  000124                     sortBattery@resolution:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x24
  1103  000124                     	ds	3
  1104  000127                     sortBattery@targetAngle:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x27
  1108  000127                     	ds	2
  1109  000129                     sortBattery@signal:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x29
  1113  000129                     	ds	2
  1114  00012B                     sortBattery@V:
  1115                           	opt stack 0
  1116                           
  1117                           ; 3 bytes @ 0x2B
  1118  00012B                     	ds	3
  1119  00012E                     main@prevTime:
  1120                           	opt stack 0
  1121                           
  1122                           ; 4 bytes @ 0x2E
  1123  00012E                     	ds	4
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1l	equ	0xFE1
  1132                           
  1133                           	psect	cstackBANK0
  1134  000080                     __pcstackBANK0:
  1135                           	opt stack 0
  1136  000080                     ??_isdigit:
  1137  000080                     ?_digitalRead:
  1138                           	opt stack 0
  1139  000080                     ?___awmod:
  1140                           	opt stack 0
  1141  000080                     ?___ftpack:
  1142                           	opt stack 0
  1143  000080                     ?___ftneg:
  1144                           	opt stack 0
  1145  000080                     ?_analogRead:
  1146                           	opt stack 0
  1147  000080                     ?__tdiv_to_l_:
  1148                           	opt stack 0
  1149  000080                     ?__div_to_l_:
  1150                           	opt stack 0
  1151  000080                     ?___aldiv:
  1152                           	opt stack 0
  1153  000080                     ?___lldiv:
  1154                           	opt stack 0
  1155  000080                     lcdNibble@temp:
  1156                           	opt stack 0
  1157  000080                     readKeypad@key:
  1158                           	opt stack 0
  1159  000080                     digitalRead@pin:
  1160                           	opt stack 0
  1161  000080                     digitalWrite@pin:
  1162                           	opt stack 0
  1163  000080                     analogRead@channel:
  1164                           	opt stack 0
  1165  000080                     initTimer@timer:
  1166                           	opt stack 0
  1167  000080                     startTimer@timer:
  1168                           	opt stack 0
  1169  000080                     ___awmod@dividend:
  1170                           	opt stack 0
  1171  000080                     __div_to_l_@f1:
  1172                           	opt stack 0
  1173  000080                     ___ftpack@arg:
  1174                           	opt stack 0
  1175  000080                     __tdiv_to_l_@f1:
  1176                           	opt stack 0
  1177  000080                     ___ftge@ff1:
  1178                           	opt stack 0
  1179  000080                     ___ftneg@f1:
  1180                           	opt stack 0
  1181  000080                     ___aldiv@dividend:
  1182                           	opt stack 0
  1183  000080                     ___lldiv@dividend:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x0
  1187  000080                     	ds	1
  1188  000081                     lcdNibble@data:
  1189                           	opt stack 0
  1190  000081                     _isdigit$966:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x1
  1194  000081                     	ds	1
  1195  000082                     ??_initTimer:
  1196  000082                     ??_digitalRead:
  1197  000082                     ??_lcdInst:
  1198  000082                     isdigit@c:
  1199                           	opt stack 0
  1200  000082                     digitalWrite@val:
  1201                           	opt stack 0
  1202  000082                     ___awmod@divisor:
  1203                           	opt stack 0
  1204  000082                     startTimer@val:
  1205                           	opt stack 0
  1206                           
  1207                           ; 4 bytes @ 0x2
  1208  000082                     	ds	1
  1209  000083                     lcdInst@data:
  1210                           	opt stack 0
  1211  000083                     ___ftpack@exp:
  1212                           	opt stack 0
  1213  000083                     __div_to_l_@f2:
  1214                           	opt stack 0
  1215  000083                     __tdiv_to_l_@f2:
  1216                           	opt stack 0
  1217  000083                     ___ftge@ff2:
  1218                           	opt stack 0
  1219                           
  1220                           ; 3 bytes @ 0x3
  1221  000083                     	ds	1
  1222  000084                     ??_initLCD:
  1223  000084                     ??_digitalWrite:
  1224  000084                     ??_analogRead:
  1225  000084                     putch@data:
  1226                           	opt stack 0
  1227  000084                     ___awmod@counter:
  1228                           	opt stack 0
  1229  000084                     ___ftpack@sign:
  1230                           	opt stack 0
  1231  000084                     ___aldiv@divisor:
  1232                           	opt stack 0
  1233  000084                     ___lldiv@divisor:
  1234                           	opt stack 0
  1235                           
  1236                           ; 4 bytes @ 0x4
  1237  000084                     	ds	1
  1238  000085                     ??___ftpack:
  1239  000085                     ___awmod@sign:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x5
  1243  000085                     	ds	1
  1244  000086                     ??_startTimer:
  1245  000086                     ??__tdiv_to_l_:
  1246  000086                     ??___ftge:
  1247  000086                     ?___awdiv:
  1248                           	opt stack 0
  1249  000086                     ___awdiv@dividend:
  1250                           	opt stack 0
  1251  000086                     __div_to_l_@quot:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x6
  1255  000086                     	ds	1
  1256  000087                     digitalWrite@p:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x7
  1260  000087                     	ds	1
  1261  000088                     ?___altoft:
  1262                           	opt stack 0
  1263  000088                     ?___awtoft:
  1264                           	opt stack 0
  1265  000088                     ?___lltoft:
  1266                           	opt stack 0
  1267  000088                     ___aldiv@counter:
  1268                           	opt stack 0
  1269  000088                     ___awdiv@divisor:
  1270                           	opt stack 0
  1271  000088                     ___awtoft@c:
  1272                           	opt stack 0
  1273  000088                     ___altoft@c:
  1274                           	opt stack 0
  1275  000088                     ___lldiv@quotient:
  1276                           	opt stack 0
  1277  000088                     ___lltoft@c:
  1278                           	opt stack 0
  1279                           
  1280                           ; 4 bytes @ 0x8
  1281  000088                     	ds	1
  1282  000089                     ___aldiv@sign:
  1283                           	opt stack 0
  1284  000089                     __tdiv_to_l_@quot:
  1285                           	opt stack 0
  1286                           
  1287                           ; 4 bytes @ 0x9
  1288  000089                     	ds	1
  1289  00008A                     ___awdiv@counter:
  1290                           	opt stack 0
  1291  00008A                     __div_to_l_@cntr:
  1292                           	opt stack 0
  1293  00008A                     ___aldiv@quotient:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0xA
  1297  00008A                     	ds	1
  1298  00008B                     ___awdiv@sign:
  1299                           	opt stack 0
  1300  00008B                     ___awtoft@sign:
  1301                           	opt stack 0
  1302  00008B                     __div_to_l_@exp1:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0xB
  1306  00008B                     	ds	1
  1307  00008C                     ??___altoft:
  1308  00008C                     ??___lltoft:
  1309  00008C                     ___lldiv@counter:
  1310                           	opt stack 0
  1311  00008C                     ___awdiv@quotient:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0xC
  1315  00008C                     	ds	1
  1316  00008D                     ?___llmod:
  1317                           	opt stack 0
  1318  00008D                     __tdiv_to_l_@cntr:
  1319                           	opt stack 0
  1320  00008D                     ___llmod@dividend:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0xD
  1324  00008D                     	ds	1
  1325  00008E                     ?___wmul:
  1326                           	opt stack 0
  1327  00008E                     ?___almod:
  1328                           	opt stack 0
  1329  00008E                     __tdiv_to_l_@exp1:
  1330                           	opt stack 0
  1331  00008E                     ___wmul@multiplier:
  1332                           	opt stack 0
  1333  00008E                     ___almod@dividend:
  1334                           	opt stack 0
  1335                           
  1336                           ; 4 bytes @ 0xE
  1337  00008E                     	ds	2
  1338  000090                     ___altoft@exp:
  1339                           	opt stack 0
  1340  000090                     ___lltoft@exp:
  1341                           	opt stack 0
  1342  000090                     ___wmul@multiplicand:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x10
  1346  000090                     	ds	1
  1347  000091                     ___altoft@sign:
  1348                           	opt stack 0
  1349  000091                     ___llmod@divisor:
  1350                           	opt stack 0
  1351                           
  1352                           ; 4 bytes @ 0x11
  1353  000091                     	ds	1
  1354  000092                     ?___ftdiv:
  1355                           	opt stack 0
  1356  000092                     ___wmul@product:
  1357                           	opt stack 0
  1358  000092                     ___ftdiv@f1:
  1359                           	opt stack 0
  1360  000092                     ___almod@divisor:
  1361                           	opt stack 0
  1362                           
  1363                           ; 4 bytes @ 0x12
  1364  000092                     	ds	3
  1365  000095                     ___llmod@counter:
  1366                           	opt stack 0
  1367  000095                     ___ftdiv@f2:
  1368                           	opt stack 0
  1369                           
  1370                           ; 3 bytes @ 0x15
  1371  000095                     	ds	1
  1372  000096                     ___almod@counter:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x16
  1376  000096                     	ds	1
  1377  000097                     ___almod@sign:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x17
  1381  000097                     	ds	1
  1382  000098                     ??___ftdiv:
  1383                           
  1384                           ; 1 bytes @ 0x18
  1385  000098                     	ds	3
  1386  00009B                     ___ftdiv@cntr:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x1B
  1390  00009B                     	ds	1
  1391  00009C                     ___ftdiv@f3:
  1392                           	opt stack 0
  1393                           
  1394                           ; 3 bytes @ 0x1C
  1395  00009C                     	ds	3
  1396  00009F                     ___ftdiv@exp:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x1F
  1400  00009F                     	ds	1
  1401  0000A0                     ___ftdiv@sign:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x20
  1405  0000A0                     	ds	1
  1406  0000A1                     ?___ftmul:
  1407                           	opt stack 0
  1408  0000A1                     ___ftmul@f1:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x21
  1412  0000A1                     	ds	3
  1413  0000A4                     ___ftmul@f2:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x24
  1417  0000A4                     	ds	3
  1418  0000A7                     ??___ftmul:
  1419                           
  1420                           ; 1 bytes @ 0x27
  1421  0000A7                     	ds	3
  1422  0000AA                     ___ftmul@exp:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x2A
  1426  0000AA                     	ds	1
  1427  0000AB                     ___ftmul@f3_as_product:
  1428                           	opt stack 0
  1429                           
  1430                           ; 3 bytes @ 0x2B
  1431  0000AB                     	ds	3
  1432  0000AE                     ___ftmul@cntr:
  1433                           	opt stack 0
  1434                           
  1435                           ; 1 bytes @ 0x2E
  1436  0000AE                     	ds	1
  1437  0000AF                     ___ftmul@sign:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x2F
  1441  0000AF                     	ds	1
  1442  0000B0                     ?_fround:
  1443                           	opt stack 0
  1444  0000B0                     ?_scale:
  1445                           	opt stack 0
  1446                           
  1447                           ; 3 bytes @ 0x30
  1448  0000B0                     	ds	3
  1449  0000B3                     _fround$1338:
  1450                           	opt stack 0
  1451  0000B3                     _scale$1339:
  1452                           	opt stack 0
  1453                           
  1454                           ; 3 bytes @ 0x33
  1455  0000B3                     	ds	3
  1456  0000B6                     scale@scl:
  1457                           	opt stack 0
  1458  0000B6                     _fround$1337:
  1459                           	opt stack 0
  1460                           
  1461                           ; 3 bytes @ 0x36
  1462  0000B6                     	ds	3
  1463  0000B9                     fround@prec:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x39
  1467  0000B9                     	ds	1
  1468  0000BA                     ?___ftadd:
  1469                           	opt stack 0
  1470  0000BA                     ___ftadd@f1:
  1471                           	opt stack 0
  1472                           
  1473                           ; 3 bytes @ 0x3A
  1474  0000BA                     	ds	3
  1475  0000BD                     ___ftadd@f2:
  1476                           	opt stack 0
  1477                           
  1478                           ; 3 bytes @ 0x3D
  1479  0000BD                     	ds	3
  1480  0000C0                     ??___ftadd:
  1481                           
  1482                           ; 1 bytes @ 0x40
  1483  0000C0                     	ds	3
  1484  0000C3                     ___ftadd@sign:
  1485                           	opt stack 0
  1486                           
  1487                           ; 1 bytes @ 0x43
  1488  0000C3                     	ds	1
  1489  0000C4                     ___ftadd@exp2:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0x44
  1493  0000C4                     	ds	1
  1494  0000C5                     ___ftadd@exp1:
  1495                           	opt stack 0
  1496                           
  1497                           ; 1 bytes @ 0x45
  1498  0000C5                     	ds	1
  1499  0000C6                     ?___ftsub:
  1500                           	opt stack 0
  1501  0000C6                     ?___fttol:
  1502                           	opt stack 0
  1503  0000C6                     ___ftsub@f1:
  1504                           	opt stack 0
  1505  0000C6                     ___fttol@f1:
  1506                           	opt stack 0
  1507                           
  1508                           ; 3 bytes @ 0x46
  1509  0000C6                     	ds	3
  1510  0000C9                     ___ftsub@f2:
  1511                           	opt stack 0
  1512                           
  1513                           ; 3 bytes @ 0x49
  1514  0000C9                     	ds	1
  1515  0000CA                     ??___fttol:
  1516                           
  1517                           ; 1 bytes @ 0x4A
  1518  0000CA                     	ds	2
  1519  0000CC                     
  1520                           ; 1 bytes @ 0x4C
  1521  0000CC                     	ds	3
  1522  0000CF                     ___fttol@sign1:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x4F
  1526  0000CF                     	ds	1
  1527  0000D0                     ___fttol@lval:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x50
  1531  0000D0                     	ds	4
  1532  0000D4                     ___fttol@exp1:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x54
  1536  0000D4                     	ds	1
  1537  0000D5                     ?_printf:
  1538                           	opt stack 0
  1539  0000D5                     ?_angleToPulse:
  1540                           	opt stack 0
  1541  0000D5                     angleToPulse@angle:
  1542                           	opt stack 0
  1543  0000D5                     printf@f:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x55
  1547  0000D5                     	ds	4
  1548  0000D9                     ??_angleToPulse:
  1549                           
  1550                           ; 1 bytes @ 0x59
  1551  0000D9                     	ds	4
  1552  0000DD                     angleToPulse@offset:
  1553                           	opt stack 0
  1554                           
  1555                           ; 4 bytes @ 0x5D
  1556  0000DD                     	ds	2
  1557  0000DF                     ??_printf:
  1558                           
  1559                           ; 1 bytes @ 0x5F
  1560  0000DF                     	ds	2
  1561  0000E1                     angleToPulse@a180:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x61
  1565  0000E1                     	ds	4
  1566  0000E5                     pause@message:
  1567                           	opt stack 0
  1568  0000E5                     _angleToPulse$1336:
  1569                           	opt stack 0
  1570                           
  1571                           ; 3 bytes @ 0x65
  1572  0000E5                     	ds	2
  1573  0000E7                     
  1574                           ; 1 bytes @ 0x67
  1575  0000E7                     	ds	1
  1576  0000E8                     angleToPulse@a000:
  1577                           	opt stack 0
  1578                           
  1579                           ; 4 bytes @ 0x68
  1580  0000E8                     	ds	4
  1581  0000EC                     setAngle@motor:
  1582                           	opt stack 0
  1583                           
  1584                           ; 2 bytes @ 0x6C
  1585  0000EC                     	ds	2
  1586  0000EE                     setAngle@angle:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x6E
  1590  0000EE                     	ds	2
  1591  0000F0                     ??_setAngle:
  1592                           
  1593                           ; 1 bytes @ 0x70
  1594  0000F0                     	ds	2
  1595  0000F2                     setAngle@period:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x72
  1599  0000F2                     	ds	2
  1600  0000F4                     setAngle@i:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x74
  1604  0000F4                     	ds	2
  1605  0000F6                     ??_sortBattery:
  1606  0000F6                     initServo@motor:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x76
  1610  0000F6                     	ds	2
  1611  0000F8                     initServo@angle:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x78
  1615  0000F8                     	ds	2
  1616  0000FA                     ??_initServo:
  1617                           
  1618                           ; 1 bytes @ 0x7A
  1619  0000FA                     	ds	4
  1620  0000FE                     ??_main:
  1621                           
  1622                           ; 1 bytes @ 0x7E
  1623  0000FE                     	ds	1
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1l	equ	0xFE1
  1632                           
  1633                           	psect	cstackCOMRAM
  1634  000001                     __pcstackCOMRAM:
  1635                           	opt stack 0
  1636  000001                     ??i2_isdigit:
  1637  000001                     ?i2___awmod:
  1638                           	opt stack 0
  1639  000001                     ?i2___ftpack:
  1640                           	opt stack 0
  1641  000001                     ?i2___ftneg:
  1642                           	opt stack 0
  1643  000001                     ?i2__div_to_l_:
  1644                           	opt stack 0
  1645  000001                     ?i2__tdiv_to_l_:
  1646                           	opt stack 0
  1647  000001                     ?i2___lldiv:
  1648                           	opt stack 0
  1649  000001                     i2lcdNibble@temp:
  1650                           	opt stack 0
  1651  000001                     i2___awmod@dividend:
  1652                           	opt stack 0
  1653  000001                     i2__div_to_l_@f1:
  1654                           	opt stack 0
  1655  000001                     i2___ftpack@arg:
  1656                           	opt stack 0
  1657  000001                     i2__tdiv_to_l_@f1:
  1658                           	opt stack 0
  1659  000001                     i2___ftge@ff1:
  1660                           	opt stack 0
  1661  000001                     i2___ftneg@f1:
  1662                           	opt stack 0
  1663  000001                     i2___lldiv@dividend:
  1664                           	opt stack 0
  1665                           
  1666                           ; 4 bytes @ 0x0
  1667  000001                     	ds	1
  1668  000002                     i2lcdNibble@data:
  1669                           	opt stack 0
  1670  000002                     i2_isdigit$966:
  1671                           	opt stack 0
  1672                           
  1673                           ; 1 bytes @ 0x1
  1674  000002                     	ds	1
  1675  000003                     ??i2_lcdInst:
  1676  000003                     i2isdigit@c:
  1677                           	opt stack 0
  1678  000003                     i2___awmod@divisor:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x2
  1682  000003                     	ds	1
  1683  000004                     i2lcdInst@data:
  1684                           	opt stack 0
  1685  000004                     i2___ftpack@exp:
  1686                           	opt stack 0
  1687  000004                     i2__div_to_l_@f2:
  1688                           	opt stack 0
  1689  000004                     i2__tdiv_to_l_@f2:
  1690                           	opt stack 0
  1691  000004                     i2___ftge@ff2:
  1692                           	opt stack 0
  1693                           
  1694                           ; 3 bytes @ 0x3
  1695  000004                     	ds	1
  1696  000005                     i2putch@data:
  1697                           	opt stack 0
  1698  000005                     i2___awmod@counter:
  1699                           	opt stack 0
  1700  000005                     i2___ftpack@sign:
  1701                           	opt stack 0
  1702  000005                     i2___lldiv@divisor:
  1703                           	opt stack 0
  1704                           
  1705                           ; 4 bytes @ 0x4
  1706  000005                     	ds	1
  1707  000006                     ??i2___ftpack:
  1708  000006                     i2___awmod@sign:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x5
  1712  000006                     	ds	1
  1713  000007                     ??i2__tdiv_to_l_:
  1714  000007                     ??i2___ftge:
  1715  000007                     ?i2___awdiv:
  1716                           	opt stack 0
  1717  000007                     i2digitalWrite@pin:
  1718                           	opt stack 0
  1719  000007                     i2startTimer@timer:
  1720                           	opt stack 0
  1721  000007                     i2___awdiv@dividend:
  1722                           	opt stack 0
  1723  000007                     i2__div_to_l_@quot:
  1724                           	opt stack 0
  1725                           
  1726                           ; 4 bytes @ 0x6
  1727  000007                     	ds	2
  1728  000009                     ?i2___lltoft:
  1729                           	opt stack 0
  1730  000009                     i2digitalWrite@val:
  1731                           	opt stack 0
  1732  000009                     i2___awdiv@divisor:
  1733                           	opt stack 0
  1734  000009                     i2startTimer@val:
  1735                           	opt stack 0
  1736  000009                     i2___lldiv@quotient:
  1737                           	opt stack 0
  1738  000009                     i2___lltoft@c:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x8
  1742  000009                     	ds	1
  1743  00000A                     i2__tdiv_to_l_@quot:
  1744                           	opt stack 0
  1745                           
  1746                           ; 4 bytes @ 0x9
  1747  00000A                     	ds	1
  1748  00000B                     ??i2_digitalWrite:
  1749  00000B                     i2___awdiv@counter:
  1750                           	opt stack 0
  1751  00000B                     i2__div_to_l_@cntr:
  1752                           	opt stack 0
  1753                           
  1754                           ; 1 bytes @ 0xA
  1755  00000B                     	ds	1
  1756  00000C                     i2___awdiv@sign:
  1757                           	opt stack 0
  1758  00000C                     i2__div_to_l_@exp1:
  1759                           	opt stack 0
  1760                           
  1761                           ; 1 bytes @ 0xB
  1762  00000C                     	ds	1
  1763  00000D                     ??i2_startTimer:
  1764  00000D                     ??i2___lltoft:
  1765  00000D                     i2___lldiv@counter:
  1766                           	opt stack 0
  1767  00000D                     i2___awdiv@quotient:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0xC
  1771  00000D                     	ds	1
  1772  00000E                     ?i2___llmod:
  1773                           	opt stack 0
  1774  00000E                     i2__tdiv_to_l_@cntr:
  1775                           	opt stack 0
  1776  00000E                     i2digitalWrite@p:
  1777                           	opt stack 0
  1778  00000E                     i2___llmod@dividend:
  1779                           	opt stack 0
  1780                           
  1781                           ; 4 bytes @ 0xD
  1782  00000E                     	ds	1
  1783  00000F                     ?i2___wmul:
  1784                           	opt stack 0
  1785  00000F                     i2__tdiv_to_l_@exp1:
  1786                           	opt stack 0
  1787  00000F                     i2___wmul@multiplier:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0xE
  1791  00000F                     	ds	1
  1792  000010                     ??_servoInterruptService:
  1793                           
  1794                           ; 1 bytes @ 0xF
  1795  000010                     	ds	1
  1796  000011                     i2___lltoft@exp:
  1797                           	opt stack 0
  1798  000011                     i2___wmul@multiplicand:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x10
  1802  000011                     	ds	1
  1803  000012                     i2___llmod@divisor:
  1804                           	opt stack 0
  1805                           
  1806                           ; 4 bytes @ 0x11
  1807  000012                     	ds	1
  1808  000013                     i2___wmul@product:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x12
  1812  000013                     	ds	2
  1813  000015                     ?i2___ftmul:
  1814                           	opt stack 0
  1815  000015                     i2___ftmul@f1:
  1816                           	opt stack 0
  1817                           
  1818                           ; 3 bytes @ 0x14
  1819  000015                     	ds	1
  1820  000016                     i2___llmod@counter:
  1821                           	opt stack 0
  1822                           
  1823                           ; 1 bytes @ 0x15
  1824  000016                     	ds	2
  1825  000018                     i2___ftmul@f2:
  1826                           	opt stack 0
  1827                           
  1828                           ; 3 bytes @ 0x17
  1829  000018                     	ds	3
  1830  00001B                     ??i2___ftmul:
  1831                           
  1832                           ; 1 bytes @ 0x1A
  1833  00001B                     	ds	3
  1834  00001E                     i2___ftmul@exp:
  1835                           	opt stack 0
  1836                           
  1837                           ; 1 bytes @ 0x1D
  1838  00001E                     	ds	1
  1839  00001F                     i2___ftmul@f3_as_product:
  1840                           	opt stack 0
  1841                           
  1842                           ; 3 bytes @ 0x1E
  1843  00001F                     	ds	3
  1844  000022                     i2___ftmul@cntr:
  1845                           	opt stack 0
  1846                           
  1847                           ; 1 bytes @ 0x21
  1848  000022                     	ds	1
  1849  000023                     i2___ftmul@sign:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x22
  1853  000023                     	ds	1
  1854  000024                     ?i2_fround:
  1855                           	opt stack 0
  1856  000024                     ?i2_scale:
  1857                           	opt stack 0
  1858                           
  1859                           ; 3 bytes @ 0x23
  1860  000024                     	ds	3
  1861  000027                     i2_fround$1533:
  1862                           	opt stack 0
  1863  000027                     i2_scale$1534:
  1864                           	opt stack 0
  1865                           
  1866                           ; 3 bytes @ 0x26
  1867  000027                     	ds	3
  1868  00002A                     i2scale@scl:
  1869                           	opt stack 0
  1870  00002A                     i2_fround$1532:
  1871                           	opt stack 0
  1872                           
  1873                           ; 3 bytes @ 0x29
  1874  00002A                     	ds	1
  1875  00002B                     ?i2___fttol:
  1876                           	opt stack 0
  1877  00002B                     i2___fttol@f1:
  1878                           	opt stack 0
  1879                           
  1880                           ; 3 bytes @ 0x2A
  1881  00002B                     	ds	2
  1882  00002D                     i2fround@prec:
  1883                           	opt stack 0
  1884                           
  1885                           ; 1 bytes @ 0x2C
  1886  00002D                     	ds	1
  1887  00002E                     ?i2___ftadd:
  1888                           	opt stack 0
  1889  00002E                     i2___ftadd@f1:
  1890                           	opt stack 0
  1891                           
  1892                           ; 3 bytes @ 0x2D
  1893  00002E                     	ds	1
  1894  00002F                     ??i2___fttol:
  1895                           
  1896                           ; 1 bytes @ 0x2E
  1897  00002F                     	ds	2
  1898  000031                     i2___ftadd@f2:
  1899                           	opt stack 0
  1900                           
  1901                           ; 3 bytes @ 0x30
  1902  000031                     	ds	3
  1903  000034                     ??i2___ftadd:
  1904  000034                     i2___fttol@sign1:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0x33
  1908  000034                     	ds	1
  1909  000035                     i2___fttol@lval:
  1910                           	opt stack 0
  1911                           
  1912                           ; 4 bytes @ 0x34
  1913  000035                     	ds	2
  1914  000037                     i2___ftadd@sign:
  1915                           	opt stack 0
  1916                           
  1917                           ; 1 bytes @ 0x36
  1918  000037                     	ds	1
  1919  000038                     i2___ftadd@exp2:
  1920                           	opt stack 0
  1921                           
  1922                           ; 1 bytes @ 0x37
  1923  000038                     	ds	1
  1924  000039                     i2___ftadd@exp1:
  1925                           	opt stack 0
  1926  000039                     i2___fttol@exp1:
  1927                           	opt stack 0
  1928                           
  1929                           ; 1 bytes @ 0x38
  1930  000039                     	ds	1
  1931  00003A                     ?i2___ftsub:
  1932                           	opt stack 0
  1933  00003A                     i2___ftsub@f1:
  1934                           	opt stack 0
  1935                           
  1936                           ; 3 bytes @ 0x39
  1937  00003A                     	ds	3
  1938  00003D                     i2___ftsub@f2:
  1939                           	opt stack 0
  1940                           
  1941                           ; 3 bytes @ 0x3C
  1942  00003D                     	ds	3
  1943  000040                     ?i2_printf:
  1944                           	opt stack 0
  1945  000040                     i2printf@f:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x3F
  1949  000040                     	ds	4
  1950  000044                     ??i2_printf:
  1951                           
  1952                           ; 1 bytes @ 0x43
  1953  000044                     	ds	6
  1954  00004A                     i2_printf$1535:
  1955                           	opt stack 0
  1956                           
  1957                           ; 3 bytes @ 0x49
  1958  00004A                     	ds	3
  1959  00004D                     i2printf@idx:
  1960                           	opt stack 0
  1961                           
  1962                           ; 1 bytes @ 0x4C
  1963  00004D                     	ds	1
  1964  00004E                     i2printf@cp:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x4D
  1968  00004E                     	ds	2
  1969  000050                     i2printf@len:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x4F
  1973  000050                     	ds	2
  1974  000052                     i2printf@ap:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x51
  1978  000052                     	ds	2
  1979  000054                     i2printf@prec:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x53
  1983  000054                     	ds	2
  1984  000056                     i2printf@tmpval:
  1985                           	opt stack 0
  1986                           
  1987                           ; 4 bytes @ 0x55
  1988  000056                     	ds	4
  1989  00005A                     i2printf@exp:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x59
  1993  00005A                     	ds	2
  1994  00005C                     i2printf@val:
  1995                           	opt stack 0
  1996                           
  1997                           ; 4 bytes @ 0x5B
  1998  00005C                     	ds	4
  1999  000060                     i2printf@fval:
  2000                           	opt stack 0
  2001                           
  2002                           ; 3 bytes @ 0x5F
  2003  000060                     	ds	3
  2004  000063                     i2printf@width:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x62
  2008  000063                     	ds	2
  2009  000065                     i2printf@flag:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x64
  2013  000065                     	ds	2
  2014  000067                     i2printf@c:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x66
  2018  000067                     	ds	1
  2019  000068                     ??_service:
  2020                           
  2021                           ; 1 bytes @ 0x67
  2022  000068                     	ds	18
  2023  00007A                     service@key:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x79
  2027  00007A                     	ds	1
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037 ;;
  2038 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2039 ;;
  2040 ;; *************** function _main *****************
  2041 ;; Defined at:
  2042 ;;		line 93 in file "main.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  prevTime        4   46[BANK1 ] long 
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;Total ram usage:        5 bytes
  2061 ;; Hardware stack levels required when called:   13
  2062 ;; This function calls:
  2063 ;;		___aldiv
  2064 ;;		___almod
  2065 ;;		_digitalWrite
  2066 ;;		_initLCD
  2067 ;;		_initServo
  2068 ;;		_initTimer
  2069 ;;		_lcdClear
  2070 ;;		_lcdHome
  2071 ;;		_pinSetup
  2072 ;;		_printf
  2073 ;;		_sortBattery
  2074 ;;		_startTimer
  2075 ;; This function is called by:
  2076 ;;		Startup code after reset
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text0
  2081  002C92                     __ptext0:
  2082                           	opt stack 0
  2083  002C92                     _main:
  2084                           	opt stack 18
  2085                           
  2086                           ;main.c: 94: pinSetup();
  2087                           
  2088                           ;incstack = 0
  2089  002C92  EC07  F028         	call	_pinSetup	;wreg free
  2090                           
  2091                           ;main.c: 95: initLCD();
  2092  002C96  EC5C  F027         	call	_initLCD	;wreg free
  2093                           
  2094                           ;main.c: 103: long prevTime = 0;
  2095                           
  2096                           ;main.c: 97: while(1){
  2097  002C9A  0E00               	movlw	0
  2098  002C9C  0101               	movlb	1	; () banked
  2099  002C9E  6F2E               	movwf	main@prevTime& (0+255),b
  2100  002CA0  0E00               	movlw	0
  2101  002CA2  6F2F               	movwf	(main@prevTime+1)& (0+255),b
  2102  002CA4  0E00               	movlw	0
  2103  002CA6  6F30               	movwf	(main@prevTime+2)& (0+255),b
  2104  002CA8  0E00               	movlw	0
  2105  002CAA  6F31               	movwf	(main@prevTime+3)& (0+255),b
  2106                           
  2107                           ; BSR set to: 1
  2108                           ;main.c: 104: time = 0;
  2109  002CAC  0E00               	movlw	0
  2110  002CAE  0101               	movlb	1	; () banked
  2111  002CB0  6F74               	movwf	_time& (0+255),b
  2112  002CB2  0E00               	movlw	0
  2113  002CB4  6F75               	movwf	(_time+1)& (0+255),b
  2114  002CB6  0E00               	movlw	0
  2115  002CB8  6F76               	movwf	(_time+2)& (0+255),b
  2116  002CBA  0E00               	movlw	0
  2117  002CBC  6F77               	movwf	(_time+3)& (0+255),b
  2118                           
  2119                           ;main.c: 105: initTimer(1);
  2120  002CBE  0E00               	movlw	0
  2121  002CC0  0100               	movlb	0	; () banked
  2122  002CC2  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  2123  002CC4  0E01               	movlw	1
  2124  002CC6  6F80               	movwf	initTimer@timer& (0+255),b
  2125  002CC8  ECE9  F026         	call	_initTimer	;wreg free
  2126                           
  2127                           ;main.c: 106: startTimer(1,0);
  2128  002CCC  0E00               	movlw	0
  2129  002CCE  0100               	movlb	0	; () banked
  2130  002CD0  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  2131  002CD2  0E01               	movlw	1
  2132  002CD4  6F80               	movwf	startTimer@timer& (0+255),b
  2133  002CD6  0E00               	movlw	0
  2134  002CD8  0100               	movlb	0	; () banked
  2135  002CDA  6F82               	movwf	startTimer@val& (0+255),b
  2136  002CDC  0E00               	movlw	0
  2137  002CDE  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2138  002CE0  0E00               	movlw	0
  2139  002CE2  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2140  002CE4  0E00               	movlw	0
  2141  002CE6  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2142  002CE8  ECC1  F026         	call	_startTimer	;wreg free
  2143                           
  2144                           ;main.c: 109: digitalWrite(cylinderMotor, 1);
  2145  002CEC  0E4C               	movlw	low _cylinderMotor
  2146  002CEE  0100               	movlb	0	; () banked
  2147  002CF0  6F80               	movwf	digitalWrite@pin& (0+255),b
  2148  002CF2  0E01               	movlw	high _cylinderMotor
  2149  002CF4  0100               	movlb	0	; () banked
  2150  002CF6  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2151  002CF8  0E00               	movlw	0
  2152  002CFA  0100               	movlb	0	; () banked
  2153  002CFC  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2154  002CFE  0E01               	movlw	1
  2155  002D00  6F82               	movwf	digitalWrite@val& (0+255),b
  2156  002D02  ECCF  F01E         	call	_digitalWrite	;wreg free
  2157                           
  2158                           ;main.c: 110: initServo(conveyorServo, 0);
  2159  002D06  0E48               	movlw	low _conveyorServo
  2160  002D08  0100               	movlb	0	; () banked
  2161  002D0A  6FF6               	movwf	initServo@motor& (0+255),b
  2162  002D0C  0E01               	movlw	high _conveyorServo
  2163  002D0E  0100               	movlb	0	; () banked
  2164  002D10  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2165  002D12  0E00               	movlw	0
  2166  002D14  0100               	movlb	0	; () banked
  2167  002D16  6FF9               	movwf	(initServo@angle+1)& (0+255),b
  2168  002D18  0E00               	movlw	0
  2169  002D1A  6FF8               	movwf	initServo@angle& (0+255),b
  2170  002D1C  ECB2  F024         	call	_initServo	;wreg free
  2171                           
  2172                           ;main.c: 111: initServo(padServo, padAngle_NEUTRAL);
  2173  002D20  0E58               	movlw	low _padServo
  2174  002D22  0100               	movlb	0	; () banked
  2175  002D24  6FF6               	movwf	initServo@motor& (0+255),b
  2176  002D26  0E01               	movlw	high _padServo
  2177  002D28  0100               	movlb	0	; () banked
  2178  002D2A  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2179  002D2C  C136  F0F8         	movff	_padAngle_NEUTRAL,initServo@angle
  2180  002D30  C137  F0F9         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2181  002D34  ECB2  F024         	call	_initServo	;wreg free
  2182                           
  2183                           ;main.c: 112: initServo(redirectingServo, redirectAngle_AA);
  2184  002D38  0E5C               	movlw	low _redirectingServo
  2185  002D3A  0100               	movlb	0	; () banked
  2186  002D3C  6FF6               	movwf	initServo@motor& (0+255),b
  2187  002D3E  0E01               	movlw	high _redirectingServo
  2188  002D40  0100               	movlb	0	; () banked
  2189  002D42  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2190  002D44  C13E  F0F8         	movff	_redirectAngle_AA,initServo@angle
  2191  002D48  C13F  F0F9         	movff	_redirectAngle_AA+1,initServo@angle+1
  2192  002D4C  ECB2  F024         	call	_initServo	;wreg free
  2193  002D50                     l118:
  2194                           
  2195                           ;main.c: 116: lcdClear();
  2196  002D50  EC28  F029         	call	_lcdClear	;wreg free
  2197                           
  2198                           ;main.c: 117: printf("running");
  2199  002D54  0EF7               	movlw	low STR_1
  2200  002D56  0100               	movlb	0	; () banked
  2201  002D58  6FD5               	movwf	printf@f& (0+255),b
  2202  002D5A  0EFF               	movlw	high STR_1
  2203  002D5C  0100               	movlb	0	; () banked
  2204  002D5E  6FD6               	movwf	(printf@f+1)& (0+255),b
  2205  002D60  EC09  F000         	call	_printf	;wreg free
  2206                           
  2207                           ;main.c: 119: while(!batteryDetected){
  2208  002D64  D05B               	goto	l6690
  2209  002D66                     l6684:
  2210                           
  2211                           ;main.c: 121: lcdHome();
  2212  002D66  EC2C  F029         	call	_lcdHome	;wreg free
  2213                           
  2214                           ;main.c: 122: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2215  002D6A  0EA7               	movlw	low STR_2
  2216  002D6C  0100               	movlb	0	; () banked
  2217  002D6E  6FD5               	movwf	printf@f& (0+255),b
  2218  002D70  0EFF               	movlw	high STR_2
  2219  002D72  0100               	movlb	0	; () banked
  2220  002D74  6FD6               	movwf	(printf@f+1)& (0+255),b
  2221  002D76  C174  F080         	movff	_time,___aldiv@dividend
  2222  002D7A  C175  F081         	movff	_time+1,___aldiv@dividend+1
  2223  002D7E  C176  F082         	movff	_time+2,___aldiv@dividend+2
  2224  002D82  C177  F083         	movff	_time+3,___aldiv@dividend+3
  2225  002D86  0E58               	movlw	88
  2226  002D88  0100               	movlb	0	; () banked
  2227  002D8A  6F84               	movwf	___aldiv@divisor& (0+255),b
  2228  002D8C  0E02               	movlw	2
  2229  002D8E  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2230  002D90  0E00               	movlw	0
  2231  002D92  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2232  002D94  0E00               	movlw	0
  2233  002D96  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2234  002D98  ECBC  F01D         	call	___aldiv	;wreg free
  2235  002D9C  C080  F0D7         	movff	?___aldiv,?_printf+2
  2236  002DA0  C081  F0D8         	movff	?___aldiv+1,?_printf+3
  2237  002DA4  C082  F0D9         	movff	?___aldiv+2,?_printf+4
  2238  002DA8  C083  F0DA         	movff	?___aldiv+3,?_printf+5
  2239  002DAC  0E0A               	movlw	10
  2240  002DAE  0100               	movlb	0	; () banked
  2241  002DB0  6F84               	movwf	___aldiv@divisor& (0+255),b
  2242  002DB2  0E00               	movlw	0
  2243  002DB4  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2244  002DB6  0E00               	movlw	0
  2245  002DB8  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2246  002DBA  0E00               	movlw	0
  2247  002DBC  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2248  002DBE  C174  F080         	movff	_time,___aldiv@dividend
  2249  002DC2  C175  F081         	movff	_time+1,___aldiv@dividend+1
  2250  002DC6  C176  F082         	movff	_time+2,___aldiv@dividend+2
  2251  002DCA  C177  F083         	movff	_time+3,___aldiv@dividend+3
  2252  002DCE  ECBC  F01D         	call	___aldiv	;wreg free
  2253  002DD2  C080  F08E         	movff	?___aldiv,___almod@dividend
  2254  002DD6  C081  F08F         	movff	?___aldiv+1,___almod@dividend+1
  2255  002DDA  C082  F090         	movff	?___aldiv+2,___almod@dividend+2
  2256  002DDE  C083  F091         	movff	?___aldiv+3,___almod@dividend+3
  2257  002DE2  0E3C               	movlw	60
  2258  002DE4  0100               	movlb	0	; () banked
  2259  002DE6  6F92               	movwf	___almod@divisor& (0+255),b
  2260  002DE8  0E00               	movlw	0
  2261  002DEA  6F93               	movwf	(___almod@divisor+1)& (0+255),b
  2262  002DEC  0E00               	movlw	0
  2263  002DEE  6F94               	movwf	(___almod@divisor+2)& (0+255),b
  2264  002DF0  0E00               	movlw	0
  2265  002DF2  6F95               	movwf	(___almod@divisor+3)& (0+255),b
  2266  002DF4  ECC2  F020         	call	___almod	;wreg free
  2267  002DF8  C08E  F0DB         	movff	?___almod,?_printf+6
  2268  002DFC  C08F  F0DC         	movff	?___almod+1,?_printf+7
  2269  002E00  C090  F0DD         	movff	?___almod+2,?_printf+8
  2270  002E04  C091  F0DE         	movff	?___almod+3,?_printf+9
  2271  002E08  EC09  F000         	call	_printf	;wreg free
  2272                           
  2273                           ;main.c: 123: _delay((unsigned long)((77)*(10000000/4000.0)));
  2274  002E0C  0EFA               	movlw	250
  2275  002E0E  0100               	movlb	0	; () banked
  2276  002E10  6FFE               	movwf	??_main& (0+255),b
  2277  002E12  0EFF               	movlw	255
  2278  002E14                     u7787:
  2279  002E14  2EE8               	decfsz	wreg,f,c
  2280  002E16  D7FE               	bra	u7787
  2281  002E18  2FFE               	decfsz	??_main& (0+255),f,b
  2282  002E1A  D7FC               	bra	u7787
  2283  002E1C                     l6690:
  2284  002E1C  0101               	movlb	1	; () banked
  2285  002E1E  5181               	movf	_batteryDetected& (0+255),w,b
  2286  002E20  0101               	movlb	1	; () banked
  2287  002E22  1182               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2288  002E24  B4D8               	btfsc	status,2,c
  2289  002E26  D79F               	goto	l6684
  2290                           
  2291                           ; BSR set to: 1
  2292                           ;main.c: 126: }
  2293                           ;main.c: 128: sortBattery();
  2294                           
  2295                           ; BSR set to: 1
  2296  002E28  ECF8  F00F         	call	_sortBattery	;wreg free
  2297                           
  2298                           ;main.c: 131: batteryDetected = 0;
  2299  002E2C  0E00               	movlw	0
  2300  002E2E  0101               	movlb	1	; () banked
  2301  002E30  6F82               	movwf	(_batteryDetected+1)& (0+255),b
  2302  002E32  0E00               	movlw	0
  2303  002E34  6F81               	movwf	_batteryDetected& (0+255),b
  2304                           
  2305                           ; BSR set to: 1
  2306  002E36  D78C               	goto	l118
  2307  002E38                     l126:
  2308  002E38  D7FF               	goto	l126
  2309  002E3A                     __end_of_main:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _sortBattery *****************
  2322 ;; Defined at:
  2323 ;;		line 143 in file "main.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  V_float         3   30[BANK1 ] float 
  2328 ;;  V               3   43[BANK1 ] float 
  2329 ;;  resolution      3   36[BANK1 ] float 
  2330 ;;  Vcc             3   33[BANK1 ] float 
  2331 ;;  signal          2   41[BANK1 ] int 
  2332 ;;  targetAngle     2   39[BANK1 ] int 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Totals:         0       2      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;Total ram usage:       18 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:   12
  2349 ;; This function calls:
  2350 ;;		___altoft
  2351 ;;		___ftdiv
  2352 ;;		___ftge
  2353 ;;		___ftmul
  2354 ;;		_analogRead
  2355 ;;		_digitalRead
  2356 ;;		_digitalWrite
  2357 ;;		_lcdClear
  2358 ;;		_pause
  2359 ;;		_printf
  2360 ;;		_readKeypad
  2361 ;;		_setAngle
  2362 ;; This function is called by:
  2363 ;;		_main
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text1
  2368  001FF0                     __ptext1:
  2369                           	opt stack 0
  2370  001FF0                     _sortBattery:
  2371                           	opt stack 18
  2372                           
  2373                           ;main.c: 146: setAngle(conveyorServo, 90);
  2374                           
  2375                           ;incstack = 0
  2376  001FF0  0E48               	movlw	low _conveyorServo
  2377  001FF2  0100               	movlb	0	; () banked
  2378  001FF4  6FEC               	movwf	setAngle@motor& (0+255),b
  2379  001FF6  0E01               	movlw	high _conveyorServo
  2380  001FF8  0100               	movlb	0	; () banked
  2381  001FFA  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2382  001FFC  0E00               	movlw	0
  2383  001FFE  0100               	movlb	0	; () banked
  2384  002000  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2385  002002  0E5A               	movlw	90
  2386  002004  6FEE               	movwf	setAngle@angle& (0+255),b
  2387  002006  EC3B  F021         	call	_setAngle	;wreg free
  2388                           
  2389                           ;main.c: 147: digitalWrite(cylinderMotor, 0);
  2390  00200A  0E4C               	movlw	low _cylinderMotor
  2391  00200C  0100               	movlb	0	; () banked
  2392  00200E  6F80               	movwf	digitalWrite@pin& (0+255),b
  2393  002010  0E01               	movlw	high _cylinderMotor
  2394  002012  0100               	movlb	0	; () banked
  2395  002014  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2396  002016  0E00               	movlw	0
  2397  002018  0100               	movlb	0	; () banked
  2398  00201A  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2399  00201C  0E00               	movlw	0
  2400  00201E  6F82               	movwf	digitalWrite@val& (0+255),b
  2401  002020  ECCF  F01E         	call	_digitalWrite	;wreg free
  2402                           
  2403                           ;main.c: 153: pause("interrupt!!!\nclose?");
  2404  002024  0E9E               	movlw	low STR_3
  2405  002026  0100               	movlb	0	; () banked
  2406  002028  6FE5               	movwf	pause@message& (0+255),b
  2407  00202A  0EFE               	movlw	high STR_3
  2408  00202C  0100               	movlb	0	; () banked
  2409  00202E  6FE6               	movwf	(pause@message+1)& (0+255),b
  2410  002030  EC19  F029         	call	_pause	;wreg free
  2411                           
  2412                           ;main.c: 154: setAngle(padServo, padAngle_CLOSE);
  2413  002034  0E58               	movlw	low _padServo
  2414  002036  0100               	movlb	0	; () banked
  2415  002038  6FEC               	movwf	setAngle@motor& (0+255),b
  2416  00203A  0E01               	movlw	high _padServo
  2417  00203C  0100               	movlb	0	; () banked
  2418  00203E  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2419  002040  C134  F0EE         	movff	_padAngle_CLOSE,setAngle@angle
  2420  002044  C135  F0EF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  2421  002048  EC3B  F021         	call	_setAngle	;wreg free
  2422                           
  2423                           ;main.c: 157: pause("read voltage?");
  2424  00204C  0ED6               	movlw	low STR_4
  2425  00204E  0100               	movlb	0	; () banked
  2426  002050  6FE5               	movwf	pause@message& (0+255),b
  2427  002052  0EFF               	movlw	high STR_4
  2428  002054  0100               	movlb	0	; () banked
  2429  002056  6FE6               	movwf	(pause@message+1)& (0+255),b
  2430  002058  EC19  F029         	call	_pause	;wreg free
  2431                           
  2432                           ;main.c: 158: float Vcc = 4.61;
  2433  00205C  0E85               	movlw	133
  2434  00205E  0101               	movlb	1	; () banked
  2435  002060  6F21               	movwf	sortBattery@Vcc& (0+255),b
  2436  002062  0E93               	movlw	147
  2437  002064  0101               	movlb	1	; () banked
  2438  002066  6F22               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2439  002068  0E40               	movlw	64
  2440  00206A  0101               	movlb	1	; () banked
  2441  00206C  6F23               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2442                           
  2443                           ; BSR set to: 1
  2444                           ;main.c: 159: float resolution = (1<<10) - 1;
  2445  00206E  0EC0               	movlw	192
  2446  002070  0101               	movlb	1	; () banked
  2447  002072  6F24               	movwf	sortBattery@resolution& (0+255),b
  2448  002074  0E7F               	movlw	127
  2449  002076  0101               	movlb	1	; () banked
  2450  002078  6F25               	movwf	(sortBattery@resolution+1)& (0+255),b
  2451  00207A  0E44               	movlw	68
  2452  00207C  0101               	movlb	1	; () banked
  2453  00207E  6F26               	movwf	(sortBattery@resolution+2)& (0+255),b
  2454                           
  2455                           ; BSR set to: 1
  2456                           ;main.c: 161: int targetAngle;
  2457                           ;main.c: 162: int signal = digitalRead(padPin1)<<1;
  2458  002080  0E50               	movlw	low _padPin1
  2459  002082  0100               	movlb	0	; () banked
  2460  002084  6F80               	movwf	digitalRead@pin& (0+255),b
  2461  002086  0E01               	movlw	high _padPin1
  2462  002088  0100               	movlb	0	; () banked
  2463  00208A  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2464  00208C  EC90  F01C         	call	_digitalRead	;wreg free
  2465  002090  90D8               	bcf	status,0,c
  2466  002092  0100               	movlb	0	; () banked
  2467  002094  3580               	rlcf	?_digitalRead& (0+255),w,b
  2468  002096  0101               	movlb	1	; () banked
  2469  002098  6F29               	movwf	sortBattery@signal& (0+255),b
  2470  00209A  0100               	movlb	0	; () banked
  2471  00209C  3581               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2472  00209E  0101               	movlb	1	; () banked
  2473  0020A0  6F2A               	movwf	(sortBattery@signal+1)& (0+255),b
  2474                           
  2475                           ; BSR set to: 1
  2476                           ;main.c: 163: signal |= digitalRead(padPin2);
  2477  0020A2  0E54               	movlw	low _padPin2
  2478  0020A4  0100               	movlb	0	; () banked
  2479  0020A6  6F80               	movwf	digitalRead@pin& (0+255),b
  2480  0020A8  0E01               	movlw	high _padPin2
  2481  0020AA  0100               	movlb	0	; () banked
  2482  0020AC  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2483  0020AE  EC90  F01C         	call	_digitalRead	;wreg free
  2484  0020B2  0100               	movlb	0	; () banked
  2485  0020B4  5180               	movf	?_digitalRead& (0+255),w,b
  2486  0020B6  0101               	movlb	1	; () banked
  2487  0020B8  1329               	iorwf	sortBattery@signal& (0+255),f,b
  2488  0020BA  0100               	movlb	0	; () banked
  2489  0020BC  5181               	movf	(?_digitalRead+1)& (0+255),w,b
  2490  0020BE  0101               	movlb	1	; () banked
  2491  0020C0  132A               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2492                           
  2493                           ; BSR set to: 1
  2494                           ;main.c: 165: digitalWrite(AA_float, 1);
  2495  0020C2  0E44               	movlw	low _AA_float
  2496  0020C4  0100               	movlb	0	; () banked
  2497  0020C6  6F80               	movwf	digitalWrite@pin& (0+255),b
  2498  0020C8  0E01               	movlw	high _AA_float
  2499  0020CA  0100               	movlb	0	; () banked
  2500  0020CC  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2501  0020CE  0E00               	movlw	0
  2502  0020D0  0100               	movlb	0	; () banked
  2503  0020D2  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2504  0020D4  0E01               	movlw	1
  2505  0020D6  6F82               	movwf	digitalWrite@val& (0+255),b
  2506  0020D8  ECCF  F01E         	call	_digitalWrite	;wreg free
  2507                           
  2508                           ;main.c: 166: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2509  0020DC  C124  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2510  0020E0  C125  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2511  0020E4  C126  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2512  0020E8  C172  F080         	movff	_padPin3+2,analogRead@channel
  2513  0020EC  C173  F081         	movff	_padPin3+3,analogRead@channel+1
  2514  0020F0  ECC6  F027         	call	_analogRead	;wreg free
  2515  0020F4  C080  F088         	movff	?_analogRead,___altoft@c
  2516  0020F8  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2517  0020FC  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2518  002100  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2519  002104  ECCE  F023         	call	___altoft	;wreg free
  2520  002108  C088  F092         	movff	?___altoft,___ftdiv@f1
  2521  00210C  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2522  002110  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2523  002114  EC12  F01A         	call	___ftdiv	;wreg free
  2524  002118  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2525  00211C  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2526  002120  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2527  002124  C121  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2528  002128  C122  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2529  00212C  C123  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2530  002130  EC63  F019         	call	___ftmul	;wreg free
  2531  002134  C0A1  F12B         	movff	?___ftmul,sortBattery@V
  2532  002138  C0A2  F12C         	movff	?___ftmul+1,sortBattery@V+1
  2533  00213C  C0A3  F12D         	movff	?___ftmul+2,sortBattery@V+2
  2534                           
  2535                           ;main.c: 168: lcdClear();
  2536  002140  EC28  F029         	call	_lcdClear	;wreg free
  2537                           
  2538                           ;main.c: 169: printf("sig: %d \nV: %f",signal,V);
  2539  002144  0EC7               	movlw	low STR_5
  2540  002146  0100               	movlb	0	; () banked
  2541  002148  6FD5               	movwf	printf@f& (0+255),b
  2542  00214A  0EFF               	movlw	high STR_5
  2543  00214C  0100               	movlb	0	; () banked
  2544  00214E  6FD6               	movwf	(printf@f+1)& (0+255),b
  2545  002150  C129  F0D7         	movff	sortBattery@signal,?_printf+2
  2546  002154  C12A  F0D8         	movff	sortBattery@signal+1,?_printf+3
  2547  002158  C12B  F0D9         	movff	sortBattery@V,?_printf+4
  2548  00215C  C12C  F0DA         	movff	sortBattery@V+1,?_printf+5
  2549  002160  C12D  F0DB         	movff	sortBattery@V+2,?_printf+6
  2550  002164  EC09  F000         	call	_printf	;wreg free
  2551                           
  2552                           ;main.c: 170: readKeypad();
  2553  002168  EC70  F028         	call	_readKeypad	;wreg free
  2554                           
  2555                           ;main.c: 173: pause("set redirect angle?");
  2556  00216C  0E8A               	movlw	low STR_6
  2557  00216E  0100               	movlb	0	; () banked
  2558  002170  6FE5               	movwf	pause@message& (0+255),b
  2559  002172  0EFE               	movlw	high STR_6
  2560  002174  0100               	movlb	0	; () banked
  2561  002176  6FE6               	movwf	(pause@message+1)& (0+255),b
  2562  002178  EC19  F029         	call	_pause	;wreg free
  2563                           
  2564                           ;main.c: 174: switch(signal){
  2565  00217C  D09C               	goto	l6228
  2566  00217E                     l6206:
  2567                           
  2568                           ;main.c: 177: digitalWrite(AA_float, 0);
  2569  00217E  0E44               	movlw	low _AA_float
  2570  002180  0100               	movlb	0	; () banked
  2571  002182  6F80               	movwf	digitalWrite@pin& (0+255),b
  2572  002184  0E01               	movlw	high _AA_float
  2573  002186  0100               	movlb	0	; () banked
  2574  002188  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2575  00218A  0E00               	movlw	0
  2576  00218C  0100               	movlb	0	; () banked
  2577  00218E  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2578  002190  0E00               	movlw	0
  2579  002192  6F82               	movwf	digitalWrite@val& (0+255),b
  2580  002194  ECCF  F01E         	call	_digitalWrite	;wreg free
  2581                           
  2582                           ;main.c: 178: _delay((unsigned long)((1)*(10000000/4000.0)));
  2583  002198  0E04               	movlw	4
  2584  00219A  0100               	movlb	0	; () banked
  2585  00219C  6FF6               	movwf	??_sortBattery& (0+255),b
  2586  00219E  0E3D               	movlw	61
  2587  0021A0                     u7797:
  2588  0021A0  2EE8               	decfsz	wreg,f,c
  2589  0021A2  D7FE               	bra	u7797
  2590  0021A4  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2591  0021A6  D7FC               	bra	u7797
  2592  0021A8  D000               	nop2	
  2593                           
  2594                           ;main.c: 179: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2595  0021AA  C124  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2596  0021AE  C125  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2597  0021B2  C126  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2598  0021B6  C172  F080         	movff	_padPin3+2,analogRead@channel
  2599  0021BA  C173  F081         	movff	_padPin3+3,analogRead@channel+1
  2600  0021BE  ECC6  F027         	call	_analogRead	;wreg free
  2601  0021C2  C080  F088         	movff	?_analogRead,___altoft@c
  2602  0021C6  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2603  0021CA  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2604  0021CE  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2605  0021D2  ECCE  F023         	call	___altoft	;wreg free
  2606  0021D6  C088  F092         	movff	?___altoft,___ftdiv@f1
  2607  0021DA  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2608  0021DE  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2609  0021E2  EC12  F01A         	call	___ftdiv	;wreg free
  2610  0021E6  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2611  0021EA  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2612  0021EE  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2613  0021F2  C121  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2614  0021F6  C122  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2615  0021FA  C123  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2616  0021FE  EC63  F019         	call	___ftmul	;wreg free
  2617  002202  C0A1  F11E         	movff	?___ftmul,sortBattery@V_float
  2618  002206  C0A2  F11F         	movff	?___ftmul+1,sortBattery@V_float+1
  2619  00220A  C0A3  F120         	movff	?___ftmul+2,sortBattery@V_float+2
  2620                           
  2621                           ;main.c: 180: if(V_float < 0.1){
  2622  00220E  C11E  F080         	movff	sortBattery@V_float,___ftge@ff1
  2623  002212  C11F  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2624  002216  C120  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2625  00221A  0ECD               	movlw	205
  2626  00221C  0100               	movlb	0	; () banked
  2627  00221E  6F83               	movwf	___ftge@ff2& (0+255),b
  2628  002220  0ECC               	movlw	204
  2629  002222  0100               	movlb	0	; () banked
  2630  002224  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2631  002226  0E3D               	movlw	61
  2632  002228  0100               	movlb	0	; () banked
  2633  00222A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2634  00222C  ECA1  F021         	call	___ftge	;wreg free
  2635  002230  0100               	movlb	0	; () banked
  2636  002232  B0D8               	btfsc	status,0,c
  2637  002234  D00F               	goto	l6218
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 181: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2641  002236  C17B  F080         	movff	_V_LIM_AA,___ftge@ff1
  2642  00223A  C17C  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2643  00223E  C17D  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2644  002242  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2645  002246  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2646  00224A  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2647  00224E  ECA1  F021         	call	___ftge	;wreg free
  2648  002252  D024               	goto	L14
  2649  002254                     l6218:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 187: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2653  002254  C178  F080         	movff	_V_LIM_9V,___ftge@ff1
  2654  002258  C179  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2655  00225C  C17A  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2656  002260  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2657  002264  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2658  002268  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2659  00226C  ECA1  F021         	call	___ftge	;wreg free
  2660  002270  0100               	movlb	0	; () banked
  2661  002272  B0D8               	btfsc	status,0,c
  2662  002274  D01B               	goto	l142
  2663                           
  2664                           ; BSR set to: 0
  2665  002276  C13C  F127         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2666  00227A  C13D  F128         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2667  00227E  D02F               	goto	l6230
  2668  002280                     l6222:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 191: if(V > V_LIM_C) targetAngle = redirectAngle_AA;
  2672  002280  C17E  F080         	movff	_V_LIM_C,___ftge@ff1
  2673  002284  C17F  F081         	movff	_V_LIM_C+1,___ftge@ff1+1
  2674  002288  C180  F082         	movff	_V_LIM_C+2,___ftge@ff1+2
  2675  00228C  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2676  002290  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2677  002294  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2678  002298  ECA1  F021         	call	___ftge	;wreg free
  2679  00229C                     L14:
  2680  00229C  0100               	movlb	0	; () banked
  2681  00229E  B0D8               	btfsc	status,0,c
  2682  0022A0  D005               	goto	l142
  2683                           
  2684                           ; BSR set to: 0
  2685  0022A2  C13E  F127         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2686  0022A6  C13F  F128         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2687  0022AA  D019               	goto	l6230
  2688  0022AC                     l142:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 192: else targetAngle = redirectAngle_OTHER;
  2692  0022AC  C142  F127         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2693  0022B0  C143  F128         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;main.c: 194: }
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 193: break;
  2700  0022B4  D014               	goto	l6230
  2701  0022B6                     l6228:
  2702  0022B6  C129  F0F6         	movff	sortBattery@signal,??_sortBattery
  2703  0022BA  C12A  F0F7         	movff	sortBattery@signal+1,??_sortBattery+1
  2704                           
  2705                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2706                           ; Switch size 1, requested type "space"
  2707                           ; Number of cases is 1, Range of values is 0 to 0
  2708                           ; switch strategies available:
  2709                           ; Name         Instructions Cycles
  2710                           ; simple_byte            4     3 (average)
  2711                           ;	Chosen strategy is simple_byte
  2712  0022BE  0100               	movlb	0	; () banked
  2713  0022C0  51F7               	movf	(??_sortBattery+1)& (0+255),w,b
  2714  0022C2  0A00               	xorlw	0	; case 0
  2715  0022C4  A4D8               	btfss	status,2,c
  2716  0022C6  D00B               	goto	l6230
  2717                           
  2718                           ; BSR set to: 0
  2719                           ; Switch size 1, requested type "space"
  2720                           ; Number of cases is 3, Range of values is 0 to 2
  2721                           ; switch strategies available:
  2722                           ; Name         Instructions Cycles
  2723                           ; simple_byte           10     6 (average)
  2724                           ;	Chosen strategy is simple_byte
  2725  0022C8  0100               	movlb	0	; () banked
  2726  0022CA  51F6               	movf	??_sortBattery& (0+255),w,b
  2727  0022CC  0A00               	xorlw	0	; case 0
  2728  0022CE  B4D8               	btfsc	status,2,c
  2729  0022D0  D756               	goto	l6206
  2730  0022D2  0A01               	xorlw	1	; case 1
  2731  0022D4  B4D8               	btfsc	status,2,c
  2732  0022D6  D7BE               	goto	l6218
  2733  0022D8  0A03               	xorlw	3	; case 2
  2734  0022DA  B4D8               	btfsc	status,2,c
  2735  0022DC  D7D1               	goto	l6222
  2736  0022DE                     l6230:
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 196: setAngle(redirectingServo, targetAngle);
  2740  0022DE  0E5C               	movlw	low _redirectingServo
  2741  0022E0  0100               	movlb	0	; () banked
  2742  0022E2  6FEC               	movwf	setAngle@motor& (0+255),b
  2743  0022E4  0E01               	movlw	high _redirectingServo
  2744  0022E6  0100               	movlb	0	; () banked
  2745  0022E8  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2746  0022EA  C127  F0EE         	movff	sortBattery@targetAngle,setAngle@angle
  2747  0022EE  C128  F0EF         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2748  0022F2  EC3B  F021         	call	_setAngle	;wreg free
  2749                           
  2750                           ;main.c: 199: pause("release battery?");
  2751  0022F6  0E96               	movlw	low STR_7
  2752  0022F8  0100               	movlb	0	; () banked
  2753  0022FA  6FE5               	movwf	pause@message& (0+255),b
  2754  0022FC  0EFF               	movlw	high STR_7
  2755  0022FE  0100               	movlb	0	; () banked
  2756  002300  6FE6               	movwf	(pause@message+1)& (0+255),b
  2757  002302  EC19  F029         	call	_pause	;wreg free
  2758                           
  2759                           ;main.c: 200: setAngle(padServo, padAngle_OPEN);
  2760  002306  0E58               	movlw	low _padServo
  2761  002308  0100               	movlb	0	; () banked
  2762  00230A  6FEC               	movwf	setAngle@motor& (0+255),b
  2763  00230C  0E01               	movlw	high _padServo
  2764  00230E  0100               	movlb	0	; () banked
  2765  002310  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2766  002312  C138  F0EE         	movff	_padAngle_OPEN,setAngle@angle
  2767  002316  C139  F0EF         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2768  00231A  EC3B  F021         	call	_setAngle	;wreg free
  2769                           
  2770                           ;main.c: 203: pause("reset the pad?");
  2771  00231E  0EB8               	movlw	low STR_8
  2772  002320  0100               	movlb	0	; () banked
  2773  002322  6FE5               	movwf	pause@message& (0+255),b
  2774  002324  0EFF               	movlw	high STR_8
  2775  002326  0100               	movlb	0	; () banked
  2776  002328  6FE6               	movwf	(pause@message+1)& (0+255),b
  2777  00232A  EC19  F029         	call	_pause	;wreg free
  2778                           
  2779                           ;main.c: 204: setAngle(padServo, padAngle_NEUTRAL);
  2780  00232E  0E58               	movlw	low _padServo
  2781  002330  0100               	movlb	0	; () banked
  2782  002332  6FEC               	movwf	setAngle@motor& (0+255),b
  2783  002334  0E01               	movlw	high _padServo
  2784  002336  0100               	movlb	0	; () banked
  2785  002338  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2786  00233A  C136  F0EE         	movff	_padAngle_NEUTRAL,setAngle@angle
  2787  00233E  C137  F0EF         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2788  002342  EC3B  F021         	call	_setAngle	;wreg free
  2789                           
  2790                           ;main.c: 207: pause("conveyor & \ncylinder on?");
  2791  002346  0E71               	movlw	low STR_9
  2792  002348  0100               	movlb	0	; () banked
  2793  00234A  6FE5               	movwf	pause@message& (0+255),b
  2794  00234C  0EFE               	movlw	high STR_9
  2795  00234E  0100               	movlb	0	; () banked
  2796  002350  6FE6               	movwf	(pause@message+1)& (0+255),b
  2797  002352  EC19  F029         	call	_pause	;wreg free
  2798                           
  2799                           ;main.c: 208: setAngle(conveyorServo, 0);
  2800  002356  0E48               	movlw	low _conveyorServo
  2801  002358  0100               	movlb	0	; () banked
  2802  00235A  6FEC               	movwf	setAngle@motor& (0+255),b
  2803  00235C  0E01               	movlw	high _conveyorServo
  2804  00235E  0100               	movlb	0	; () banked
  2805  002360  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2806  002362  0E00               	movlw	0
  2807  002364  0100               	movlb	0	; () banked
  2808  002366  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2809  002368  0E00               	movlw	0
  2810  00236A  6FEE               	movwf	setAngle@angle& (0+255),b
  2811  00236C  EC3B  F021         	call	_setAngle	;wreg free
  2812                           
  2813                           ;main.c: 209: digitalWrite(cylinderMotor, 1);
  2814  002370  0E4C               	movlw	low _cylinderMotor
  2815  002372  0100               	movlb	0	; () banked
  2816  002374  6F80               	movwf	digitalWrite@pin& (0+255),b
  2817  002376  0E01               	movlw	high _cylinderMotor
  2818  002378  0100               	movlb	0	; () banked
  2819  00237A  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2820  00237C  0E00               	movlw	0
  2821  00237E  0100               	movlb	0	; () banked
  2822  002380  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2823  002382  0E01               	movlw	1
  2824  002384  6F82               	movwf	digitalWrite@val& (0+255),b
  2825  002386  ECCF  F01E         	call	_digitalWrite	;wreg free
  2826  00238A  0012               	return		;funcret
  2827  00238C                     __end_of_sortBattery:
  2828                           	opt stack 0
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           postdec1	equ	0xFE5
  2836                           fsr1l	equ	0xFE1
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function _pause *****************
  2840 ;; Defined at:
  2841 ;;		line 279 in file "main.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  message         2  101[BANK0 ] PTR unsigned char 
  2844 ;;		 -> STR_9(25), STR_8(15), STR_7(17), STR_6(20), 
  2845 ;;		 -> STR_4(14), STR_3(20), 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;		None
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2857 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;Total ram usage:        2 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:   11
  2864 ;; This function calls:
  2865 ;;		_lcdClear
  2866 ;;		_printf
  2867 ;;		_readKeypad
  2868 ;; This function is called by:
  2869 ;;		_sortBattery
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text2
  2874  005232                     __ptext2:
  2875                           	opt stack 0
  2876  005232                     _pause:
  2877                           	opt stack 18
  2878                           
  2879                           ;main.c: 280: lcdClear();
  2880                           
  2881                           ;incstack = 0
  2882  005232  EC28  F029         	call	_lcdClear	;wreg free
  2883                           
  2884                           ;main.c: 281: printf(message);
  2885  005236  C0E5  F0D5         	movff	pause@message,printf@f
  2886  00523A  C0E6  F0D6         	movff	pause@message+1,printf@f+1
  2887  00523E  EC09  F000         	call	_printf	;wreg free
  2888                           
  2889                           ;main.c: 282: readKeypad();
  2890  005242  EC70  F028         	call	_readKeypad	;wreg free
  2891  005246  0012               	return		;funcret
  2892  005248                     __end_of_pause:
  2893                           	opt stack 0
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           postdec1	equ	0xFE5
  2901                           fsr1l	equ	0xFE1
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _readKeypad *****************
  2905 ;; Defined at:
  2906 ;;		line 36 in file "keypad.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  key             1    0[BANK0 ] unsigned char 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      unsigned char 
  2913 ;; Registers used:
  2914 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;Total ram usage:        1 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    6
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_sortBattery
  2931 ;;		_pause
  2932 ;;		_showInterface
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text3
  2937  0050E0                     __ptext3:
  2938                           	opt stack 0
  2939  0050E0                     _readKeypad:
  2940                           	opt stack 23
  2941  0050E0                     l222:
  2942  0050E0  A281               	btfss	3969,1,c	;volatile
  2943  0050E2  D7FE               	goto	l222
  2944                           
  2945                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  2946  0050E4  3881               	swapf	3969,w,c	;volatile
  2947  0050E6  0B0F               	andlw	15
  2948  0050E8  0B0F               	andlw	15
  2949  0050EA  0100               	movlb	0	; () banked
  2950  0050EC  6F80               	movwf	readKeypad@key& (0+255),b
  2951  0050EE                     l225:
  2952  0050EE  B281               	btfsc	3969,1,c	;volatile
  2953  0050F0  D7FE               	goto	l225
  2954                           
  2955                           ;keypad.c: 40: return keys[key];
  2956  0050F2  0100               	movlb	0	; () banked
  2957  0050F4  5180               	movf	readKeypad@key& (0+255),w,b
  2958  0050F6  0D01               	mullw	1
  2959  0050F8  0E59               	movlw	low _keys
  2960  0050FA  24F3               	addwf	prodl,w,c
  2961  0050FC  6EF6               	movwf	tblptrl,c
  2962  0050FE  0EFE               	movlw	high _keys
  2963  005100  20F4               	addwfc	prodh,w,c
  2964  005102  6EF7               	movwf	tblptrh,c
  2965  005104                     	if	0	;There are less than 3 active tblptr bytes
  2966  005104                     	endif
  2967  005104  0008               	tblrd		*
  2968  005106  50F5               	movf	tablat,w,c
  2969  005108  0012               	return	
  2970  00510A                     __end_of_readKeypad:
  2971                           	opt stack 0
  2972                           tblptru	equ	0xFF8
  2973                           tblptrh	equ	0xFF7
  2974                           tblptrl	equ	0xFF6
  2975                           tablat	equ	0xFF5
  2976                           prodh	equ	0xFF4
  2977                           prodl	equ	0xFF3
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1l	equ	0xFE1
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _printf *****************
  2985 ;; Defined at:
  2986 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  f               2   85[BANK0 ] PTR const unsigned char 
  2989 ;;		 -> STR_23(17), STR_22(18), STR_21(17), STR_20(18), 
  2990 ;;		 -> STR_19(17), STR_18(19), STR_17(17), STR_16(18), 
  2991 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  2992 ;;		 -> STR_11(8), STR_10(11), STR_9(25), STR_8(15), 
  2993 ;;		 -> STR_7(17), STR_6(20), STR_5(15), STR_4(14), 
  2994 ;;		 -> STR_3(20), STR_2(17), STR_1(8), 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  idx             1    5[BANK1 ] unsigned char 
  2997 ;;  val             4   18[BANK1 ] unsigned long 
  2998 ;;  tmpval          4   12[BANK1 ] struct .
  2999 ;;  fval            3   24[BANK1 ] struct .
  3000 ;;  flag            2   27[BANK1 ] unsigned short 
  3001 ;;  width           2   22[BANK1 ] int 
  3002 ;;  exp             2   16[BANK1 ] int 
  3003 ;;  prec            2   10[BANK1 ] int 
  3004 ;;  ap              2    8[BANK1 ] PTR void [1]
  3005 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3006 ;;  len             2    6[BANK1 ] unsigned int 
  3007 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
  3008 ;;		 -> printf@c(1), 
  3009 ;;  c               1   29[BANK1 ] char 
  3010 ;;  d               1    0        unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  2   85[BANK0 ] int 
  3013 ;; Registers used:
  3014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3020 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Totals:         0      16      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;Total ram usage:       46 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:   10
  3027 ;; This function calls:
  3028 ;;		___awdiv
  3029 ;;		___ftadd
  3030 ;;		___ftge
  3031 ;;		___ftmul
  3032 ;;		___ftneg
  3033 ;;		___ftsub
  3034 ;;		___fttol
  3035 ;;		___lldiv
  3036 ;;		___llmod
  3037 ;;		___lltoft
  3038 ;;		___wmul
  3039 ;;		__div_to_l_
  3040 ;;		__tdiv_to_l_
  3041 ;;		_fround
  3042 ;;		_isdigit
  3043 ;;		_putch
  3044 ;;		_scale
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;;		_sortBattery
  3048 ;;		_pause
  3049 ;;		_testFrequency
  3050 ;;		_dateTime
  3051 ;;		_mainMenu
  3052 ;;		_runSelect
  3053 ;;		_runMenu
  3054 ;;		_runTime
  3055 ;;		_runStats
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text4
  3060  000012                     __ptext4:
  3061                           	opt stack 0
  3062  000012                     _printf:
  3063                           	opt stack 19
  3064                           
  3065                           ;doprnt.c: 466: va_list ap;
  3066                           ;doprnt.c: 499: signed char c;
  3067                           ;doprnt.c: 501: int width;
  3068                           ;doprnt.c: 504: int prec;
  3069                           ;doprnt.c: 508: unsigned short flag;
  3070                           ;doprnt.c: 515: char d;
  3071                           ;doprnt.c: 516: double fval;
  3072                           ;doprnt.c: 517: int exp;
  3073                           ;doprnt.c: 523: union {
  3074                           ;doprnt.c: 524: unsigned long vd;
  3075                           ;doprnt.c: 525: double integ;
  3076                           ;doprnt.c: 526: } tmpval;
  3077                           ;doprnt.c: 528: unsigned long val;
  3078                           ;doprnt.c: 529: unsigned len;
  3079                           ;doprnt.c: 530: const char * cp;
  3080                           ;doprnt.c: 533: *ap = __va_start();
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;incstack = 0
  3084  000012  0ED7               	movlw	low (?_printf+2)
  3085  000014  0101               	movlb	1	; () banked
  3086  000016  6F08               	movwf	printf@ap& (0+255),b
  3087  000018  0E00               	movlw	high (?_printf+2)
  3088  00001A  0101               	movlb	1	; () banked
  3089  00001C  6F09               	movwf	(printf@ap+1)& (0+255),b
  3090                           
  3091                           ;doprnt.c: 536: while(c = *f++) {
  3092  00001E  EF55  F006         	goto	l5406
  3093  000022                     l5084:
  3094                           
  3095                           ; BSR set to: 1
  3096                           ;doprnt.c: 538: if(c != '%')
  3097  000022  0E25               	movlw	37
  3098  000024  0101               	movlb	1	; () banked
  3099  000026  191D               	xorwf	printf@c& (0+255),w,b
  3100  000028  B4D8               	btfsc	status,2,c
  3101  00002A  D006               	goto	l5088
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;doprnt.c: 540: {
  3105                           ;doprnt.c: 541: (putch(c) );
  3106  00002C  0101               	movlb	1	; () banked
  3107  00002E  511D               	movf	printf@c& (0+255),w,b
  3108  000030  ECAF  F028         	call	_putch
  3109                           
  3110                           ;doprnt.c: 542: continue;
  3111  000034  EF55  F006         	goto	l5406
  3112  000038                     l5088:
  3113                           
  3114                           ;doprnt.c: 543: }
  3115                           ;doprnt.c: 546: width = 0;
  3116  000038  0E00               	movlw	0
  3117  00003A  0101               	movlb	1	; () banked
  3118  00003C  6F17               	movwf	(printf@width+1)& (0+255),b
  3119  00003E  0E00               	movlw	0
  3120  000040  6F16               	movwf	printf@width& (0+255),b
  3121                           
  3122                           ;doprnt.c: 548: flag = 0;
  3123  000042  0E00               	movlw	0
  3124  000044  0101               	movlb	1	; () banked
  3125  000046  6F1C               	movwf	(printf@flag+1)& (0+255),b
  3126  000048  0E00               	movlw	0
  3127  00004A  6F1B               	movwf	printf@flag& (0+255),b
  3128                           
  3129                           ; BSR set to: 1
  3130                           ;doprnt.c: 551: switch(*f) {
  3131                           
  3132                           ;doprnt.c: 550: for(;;) {
  3133  00004C  D005               	goto	l5094
  3134  00004E                     l5090:
  3135                           
  3136                           ;doprnt.c: 580: flag |= 0x04;
  3137  00004E  0101               	movlb	1	; () banked
  3138  000050  851B               	bsf	printf@flag& (0+255),2,b
  3139                           
  3140                           ;doprnt.c: 581: f++;
  3141  000052  0100               	movlb	0	; () banked
  3142  000054  4BD5               	infsnz	printf@f& (0+255),f,b
  3143  000056  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3144  000058                     l5094:
  3145  000058  C0D5  FFF6         	movff	printf@f,tblptrl
  3146  00005C  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3147  000060                     	if	0	;tblptru may be non-zero
  3148  000060                     	endif
  3149  000060                     	if	0	;tblptru may be non-zero
  3150  000060                     	endif
  3151  000060  0008               	tblrd		*
  3152  000062  50F5               	movf	tablat,w,c
  3153                           
  3154                           ; Switch size 1, requested type "space"
  3155                           ; Number of cases is 1, Range of values is 48 to 48
  3156                           ; switch strategies available:
  3157                           ; Name         Instructions Cycles
  3158                           ; simple_byte            4     3 (average)
  3159                           ;	Chosen strategy is simple_byte
  3160  000064  0A30               	xorlw	48	; case 48
  3161  000066  B4D8               	btfsc	status,2,c
  3162  000068  D7F2               	goto	l5090
  3163                           
  3164                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3165                           
  3166                           ;doprnt.c: 586: }
  3167                           
  3168                           ;doprnt.c: 585: break;
  3169  00006A  C0D5  FFF6         	movff	printf@f,tblptrl
  3170  00006E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3171  000072                     	if	0	;tblptru may be non-zero
  3172  000072                     	endif
  3173  000072                     	if	0	;tblptru may be non-zero
  3174  000072                     	endif
  3175  000072  0008               	tblrd		*
  3176  000074  50F5               	movf	tablat,w,c
  3177  000076  EC85  F028         	call	_isdigit
  3178  00007A  A0D8               	btfss	status,0,c
  3179  00007C  D0A1               	goto	l5140
  3180                           
  3181                           ;doprnt.c: 598: width = 0;
  3182  00007E  0E00               	movlw	0
  3183  000080  0101               	movlb	1	; () banked
  3184  000082  6F17               	movwf	(printf@width+1)& (0+255),b
  3185  000084  0E00               	movlw	0
  3186  000086  6F16               	movwf	printf@width& (0+255),b
  3187  000088                     l5100:
  3188                           
  3189                           ;doprnt.c: 600: width *= 10;
  3190  000088  C116  F08E         	movff	printf@width,___wmul@multiplier
  3191  00008C  C117  F08F         	movff	printf@width+1,___wmul@multiplier+1
  3192  000090  0E00               	movlw	0
  3193  000092  0100               	movlb	0	; () banked
  3194  000094  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3195  000096  0E0A               	movlw	10
  3196  000098  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3197  00009A  EC26  F028         	call	___wmul	;wreg free
  3198  00009E  C08E  F116         	movff	?___wmul,printf@width
  3199  0000A2  C08F  F117         	movff	?___wmul+1,printf@width+1
  3200                           
  3201                           ;doprnt.c: 601: width += *f++ - '0';
  3202  0000A6  0ED0               	movlw	208
  3203  0000A8  0100               	movlb	0	; () banked
  3204  0000AA  6FDF               	movwf	??_printf& (0+255),b
  3205  0000AC  0EFF               	movlw	255
  3206  0000AE  0100               	movlb	0	; () banked
  3207  0000B0  6FE0               	movwf	(??_printf+1)& (0+255),b
  3208  0000B2  C0D5  FFF6         	movff	printf@f,tblptrl
  3209  0000B6  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3210  0000BA                     	if	0	;tblptru may be non-zero
  3211  0000BA                     	endif
  3212  0000BA                     	if	0	;tblptru may be non-zero
  3213  0000BA                     	endif
  3214  0000BA  0008               	tblrd		*
  3215  0000BC  50F5               	movf	tablat,w,c
  3216  0000BE  0100               	movlb	0	; () banked
  3217  0000C0  6FE1               	movwf	(??_printf+2)& (0+255),b
  3218  0000C2  6BE2               	clrf	(??_printf+3)& (0+255),b
  3219  0000C4  0100               	movlb	0	; () banked
  3220  0000C6  51DF               	movf	??_printf& (0+255),w,b
  3221  0000C8  0100               	movlb	0	; () banked
  3222  0000CA  27E1               	addwf	(??_printf+2)& (0+255),f,b
  3223  0000CC  0100               	movlb	0	; () banked
  3224  0000CE  51E0               	movf	(??_printf+1)& (0+255),w,b
  3225  0000D0  0100               	movlb	0	; () banked
  3226  0000D2  23E2               	addwfc	(??_printf+3)& (0+255),f,b
  3227  0000D4  0100               	movlb	0	; () banked
  3228  0000D6  51E1               	movf	(??_printf+2)& (0+255),w,b
  3229  0000D8  0101               	movlb	1	; () banked
  3230  0000DA  2716               	addwf	printf@width& (0+255),f,b
  3231  0000DC  0100               	movlb	0	; () banked
  3232  0000DE  51E2               	movf	(??_printf+3)& (0+255),w,b
  3233  0000E0  0101               	movlb	1	; () banked
  3234  0000E2  2317               	addwfc	(printf@width+1)& (0+255),f,b
  3235                           
  3236                           ; BSR set to: 1
  3237  0000E4  0100               	movlb	0	; () banked
  3238  0000E6  4BD5               	infsnz	printf@f& (0+255),f,b
  3239  0000E8  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3243  0000EA  C0D5  FFF6         	movff	printf@f,tblptrl
  3244  0000EE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3245  0000F2                     	if	0	;tblptru may be non-zero
  3246  0000F2                     	endif
  3247  0000F2                     	if	0	;tblptru may be non-zero
  3248  0000F2                     	endif
  3249  0000F2  0008               	tblrd		*
  3250  0000F4  50F5               	movf	tablat,w,c
  3251  0000F6  EC85  F028         	call	_isdigit
  3252  0000FA  A0D8               	btfss	status,0,c
  3253  0000FC  D061               	goto	l5140
  3254  0000FE  D7C4               	goto	l5100
  3255  000100                     l5108:
  3256                           
  3257                           ;doprnt.c: 643: flag |= 0x10;
  3258  000100  0101               	movlb	1	; () banked
  3259  000102  891B               	bsf	printf@flag& (0+255),4,b
  3260                           
  3261                           ;doprnt.c: 644: goto loop;
  3262  000104  D05D               	goto	l5140
  3263  000106                     l5110:
  3264                           
  3265                           ; BSR set to: 1
  3266                           ;doprnt.c: 663: flag |= 0x400;
  3267  000106  0101               	movlb	1	; () banked
  3268  000108  851C               	bsf	(printf@flag+1)& (0+255),2,b
  3269                           
  3270                           ; BSR set to: 1
  3271                           ;doprnt.c: 698: case 'i':
  3272                           ;doprnt.c: 699: break;
  3273                           
  3274                           ; BSR set to: 1
  3275                           
  3276                           ;doprnt.c: 697: case 'd':
  3277                           
  3278                           ;doprnt.c: 664: break;
  3279  00010A  D07C               	goto	l5142
  3280  00010C                     l5112:
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;doprnt.c: 721: flag |= 0x80;
  3284  00010C  0101               	movlb	1	; () banked
  3285  00010E  8F1B               	bsf	printf@flag& (0+255),7,b
  3286                           
  3287                           ;doprnt.c: 723: break;
  3288  000110  D079               	goto	l5142
  3289  000112                     l5114:
  3290                           
  3291                           ; BSR set to: 1
  3292                           ;doprnt.c: 757: if(width > len)
  3293  000112  0101               	movlb	1	; () banked
  3294  000114  5116               	movf	printf@width& (0+255),w,b
  3295  000116  0101               	movlb	1	; () banked
  3296  000118  5D06               	subwf	printf@len& (0+255),w,b
  3297  00011A  0101               	movlb	1	; () banked
  3298  00011C  5117               	movf	(printf@width+1)& (0+255),w,b
  3299  00011E  0101               	movlb	1	; () banked
  3300  000120  5907               	subwfb	(printf@len+1)& (0+255),w,b
  3301  000122  B0D8               	btfsc	status,0,c
  3302  000124  D009               	goto	l5118
  3303                           
  3304                           ; BSR set to: 1
  3305                           ;doprnt.c: 758: width -= len;
  3306  000126  0101               	movlb	1	; () banked
  3307  000128  5106               	movf	printf@len& (0+255),w,b
  3308  00012A  0101               	movlb	1	; () banked
  3309  00012C  5F16               	subwf	printf@width& (0+255),f,b
  3310  00012E  0101               	movlb	1	; () banked
  3311  000130  5107               	movf	(printf@len+1)& (0+255),w,b
  3312  000132  0101               	movlb	1	; () banked
  3313  000134  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  3314  000136  D009               	goto	l5122
  3315  000138                     l5118:
  3316                           
  3317                           ; BSR set to: 1
  3318                           ;doprnt.c: 759: else
  3319                           ;doprnt.c: 760: width = 0;
  3320  000138  0E00               	movlw	0
  3321  00013A  0101               	movlb	1	; () banked
  3322  00013C  6F17               	movwf	(printf@width+1)& (0+255),b
  3323  00013E  0E00               	movlw	0
  3324  000140  6F16               	movwf	printf@width& (0+255),b
  3325                           
  3326                           ; BSR set to: 1
  3327                           ;doprnt.c: 764: while(width--)
  3328  000142  D003               	goto	l5122
  3329  000144                     l5120:
  3330                           
  3331                           ; BSR set to: 1
  3332                           ;doprnt.c: 765: (putch(' ') );
  3333  000144  0E20               	movlw	32
  3334  000146  ECAF  F028         	call	_putch
  3335  00014A                     l5122:
  3336  00014A  0101               	movlb	1	; () banked
  3337  00014C  0716               	decf	printf@width& (0+255),f,b
  3338  00014E  A0D8               	btfss	status,0,c
  3339  000150  0717               	decf	(printf@width+1)& (0+255),f,b
  3340  000152  0101               	movlb	1	; () banked
  3341  000154  2916               	incf	printf@width& (0+255),w,b
  3342  000156  E1F6               	bnz	l5120
  3343  000158  0101               	movlb	1	; () banked
  3344  00015A  2917               	incf	(printf@width+1)& (0+255),w,b
  3345  00015C  B4D8               	btfsc	status,2,c
  3346  00015E  D00B               	goto	l5128
  3347  000160  D7F1               	goto	l5120
  3348  000162                     l5124:
  3349                           
  3350                           ; BSR set to: 1
  3351                           ;doprnt.c: 768: (putch(*cp++) );
  3352  000162  C103  FFD9         	movff	printf@cp,fsr2l
  3353  000166  C104  FFDA         	movff	printf@cp+1,fsr2h
  3354  00016A  50DF               	movf	indf2,w,c
  3355  00016C  ECAF  F028         	call	_putch
  3356  000170  0101               	movlb	1	; () banked
  3357  000172  4B03               	infsnz	printf@cp& (0+255),f,b
  3358  000174  2B04               	incf	(printf@cp+1)& (0+255),f,b
  3359  000176                     l5128:
  3360                           
  3361                           ; BSR set to: 1
  3362  000176  0101               	movlb	1	; () banked
  3363  000178  0706               	decf	printf@len& (0+255),f,b
  3364  00017A  A0D8               	btfss	status,0,c
  3365  00017C  0707               	decf	(printf@len+1)& (0+255),f,b
  3366  00017E  0101               	movlb	1	; () banked
  3367  000180  2906               	incf	printf@len& (0+255),w,b
  3368  000182  E1EF               	bnz	l5124
  3369  000184  0101               	movlb	1	; () banked
  3370  000186  2907               	incf	(printf@len+1)& (0+255),w,b
  3371  000188  B4D8               	btfsc	status,2,c
  3372  00018A  EF55  F006         	goto	l5406
  3373  00018E  D7E9               	goto	l5124
  3374  000190                     l5130:
  3375                           
  3376                           ; BSR set to: 1
  3377                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3378  000190  C108  FFD9         	movff	printf@ap,fsr2l
  3379  000194  C109  FFDA         	movff	printf@ap+1,fsr2h
  3380  000198  50DF               	movf	indf2,w,c
  3381  00019A  0101               	movlb	1	; () banked
  3382  00019C  6F1D               	movwf	printf@c& (0+255),b
  3383                           
  3384                           ; BSR set to: 1
  3385  00019E  0E02               	movlw	2
  3386  0001A0  0101               	movlb	1	; () banked
  3387  0001A2  2708               	addwf	printf@ap& (0+255),f,b
  3388  0001A4  0E00               	movlw	0
  3389  0001A6  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  3390  0001A8                     l5134:
  3391                           
  3392                           ; BSR set to: 1
  3393                           ;doprnt.c: 805: cp = (char *)&c;
  3394  0001A8  0E1D               	movlw	low printf@c
  3395  0001AA  0101               	movlb	1	; () banked
  3396  0001AC  6F03               	movwf	printf@cp& (0+255),b
  3397  0001AE  0E01               	movlw	high printf@c
  3398  0001B0  0101               	movlb	1	; () banked
  3399  0001B2  6F04               	movwf	(printf@cp+1)& (0+255),b
  3400                           
  3401                           ; BSR set to: 1
  3402                           ;doprnt.c: 806: len = 1;
  3403  0001B4  0E00               	movlw	0
  3404  0001B6  0101               	movlb	1	; () banked
  3405  0001B8  6F07               	movwf	(printf@len+1)& (0+255),b
  3406  0001BA  0E01               	movlw	1
  3407  0001BC  6F06               	movwf	printf@len& (0+255),b
  3408                           
  3409                           ;doprnt.c: 807: goto dostring;
  3410  0001BE  D7A9               	goto	l5114
  3411  0001C0                     l5140:
  3412  0001C0  C0D5  FFF6         	movff	printf@f,tblptrl
  3413  0001C4  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3414  0001C8  0100               	movlb	0	; () banked
  3415  0001CA  4BD5               	infsnz	printf@f& (0+255),f,b
  3416  0001CC  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3417  0001CE                     	if	0	;tblptru may be non-zero
  3418  0001CE                     	endif
  3419  0001CE                     	if	0	;tblptru may be non-zero
  3420  0001CE                     	endif
  3421  0001CE  0008               	tblrd		*
  3422  0001D0  CFF5 F11D          	movff	tablat,printf@c
  3423  0001D4  0101               	movlb	1	; () banked
  3424  0001D6  511D               	movf	printf@c& (0+255),w,b
  3425                           
  3426                           ; Switch size 1, requested type "space"
  3427                           ; Number of cases is 7, Range of values is 0 to 120
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte           22    12 (average)
  3431                           ;	Chosen strategy is simple_byte
  3432  0001D8  0A00               	xorlw	0	; case 0
  3433  0001DA  B4D8               	btfsc	status,2,c
  3434  0001DC  0012               	return	
  3435  0001DE  0A63               	xorlw	99	; case 99
  3436  0001E0  B4D8               	btfsc	status,2,c
  3437  0001E2  D7D6               	goto	l5130
  3438  0001E4  0A07               	xorlw	7	; case 100
  3439  0001E6  B4D8               	btfsc	status,2,c
  3440  0001E8  D00D               	goto	l5142
  3441  0001EA  0A02               	xorlw	2	; case 102
  3442  0001EC  B4D8               	btfsc	status,2,c
  3443  0001EE  D78B               	goto	l5110
  3444  0001F0  0A0F               	xorlw	15	; case 105
  3445  0001F2  B4D8               	btfsc	status,2,c
  3446  0001F4  D007               	goto	l5142
  3447  0001F6  0A05               	xorlw	5	; case 108
  3448  0001F8  B4D8               	btfsc	status,2,c
  3449  0001FA  D782               	goto	l5108
  3450  0001FC  0A14               	xorlw	20	; case 120
  3451  0001FE  B4D8               	btfsc	status,2,c
  3452  000200  D785               	goto	l5112
  3453  000202  D7D2               	goto	l5134
  3454  000204                     l5142:
  3455                           
  3456                           ; BSR set to: 1
  3457                           ;doprnt.c: 825: if(flag & (0x700)) {
  3458  000204  0E07               	movlw	7
  3459  000206  0101               	movlb	1	; () banked
  3460  000208  151C               	andwf	(printf@flag+1)& (0+255),w,b
  3461  00020A  B4D8               	btfsc	status,2,c
  3462  00020C  D37A               	goto	l695
  3463                           
  3464                           ; BSR set to: 1
  3465                           ;doprnt.c: 829: prec = 6;
  3466  00020E  0E00               	movlw	0
  3467  000210  0101               	movlb	1	; () banked
  3468  000212  6F0B               	movwf	(printf@prec+1)& (0+255),b
  3469  000214  0E06               	movlw	6
  3470  000216  6F0A               	movwf	printf@prec& (0+255),b
  3471                           
  3472                           ; BSR set to: 1
  3473                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3474  000218  C108  FFD9         	movff	printf@ap,fsr2l
  3475  00021C  C109  FFDA         	movff	printf@ap+1,fsr2h
  3476  000220  CFDE F118          	movff	postinc2,printf@fval
  3477  000224  CFDE F119          	movff	postinc2,printf@fval+1
  3478  000228  CFDD F11A          	movff	postdec2,printf@fval+2
  3479                           
  3480                           ; BSR set to: 1
  3481  00022C  0E03               	movlw	3
  3482  00022E  0101               	movlb	1	; () banked
  3483  000230  2708               	addwf	printf@ap& (0+255),f,b
  3484  000232  0E00               	movlw	0
  3485  000234  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  3486                           
  3487                           ; BSR set to: 1
  3488                           ;doprnt.c: 831: if(fval < 0.0) {
  3489  000236  0101               	movlb	1	; () banked
  3490  000238  AF1A               	btfss	(printf@fval+2)& (0+255),7,b
  3491  00023A  D011               	goto	l5156
  3492                           
  3493                           ; BSR set to: 1
  3494                           ;doprnt.c: 832: fval = -fval;
  3495  00023C  C118  F080         	movff	printf@fval,___ftneg@f1
  3496  000240  C119  F081         	movff	printf@fval+1,___ftneg@f1+1
  3497  000244  C11A  F082         	movff	printf@fval+2,___ftneg@f1+2
  3498  000248  EC41  F028         	call	___ftneg	;wreg free
  3499  00024C  C080  F118         	movff	?___ftneg,printf@fval
  3500  000250  C081  F119         	movff	?___ftneg+1,printf@fval+1
  3501  000254  C082  F11A         	movff	?___ftneg+2,printf@fval+2
  3502                           
  3503                           ;doprnt.c: 833: flag |= 0x03;
  3504  000258  0E03               	movlw	3
  3505  00025A  0101               	movlb	1	; () banked
  3506  00025C  131B               	iorwf	printf@flag& (0+255),f,b
  3507  00025E                     l5156:
  3508                           
  3509                           ; BSR set to: 1
  3510                           ;doprnt.c: 834: }
  3511                           ;doprnt.c: 835: exp = 0;
  3512  00025E  0E00               	movlw	0
  3513  000260  0101               	movlb	1	; () banked
  3514  000262  6F11               	movwf	(printf@exp+1)& (0+255),b
  3515  000264  0E00               	movlw	0
  3516  000266  6F10               	movwf	printf@exp& (0+255),b
  3517                           
  3518                           ; BSR set to: 1
  3519                           ;doprnt.c: 836: if( fval!=0) {
  3520  000268  0101               	movlb	1	; () banked
  3521  00026A  5118               	movf	printf@fval& (0+255),w,b
  3522  00026C  0101               	movlb	1	; () banked
  3523  00026E  1119               	iorwf	(printf@fval+1)& (0+255),w,b
  3524  000270  0101               	movlb	1	; () banked
  3525  000272  111A               	iorwf	(printf@fval+2)& (0+255),w,b
  3526  000274  B4D8               	btfsc	status,2,c
  3527  000276  D09B               	goto	l5184
  3528                           
  3529                           ; BSR set to: 1
  3530                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3531  000278  0E82               	movlw	130
  3532  00027A  0100               	movlb	0	; () banked
  3533  00027C  6FDF               	movwf	??_printf& (0+255),b
  3534  00027E  0EFF               	movlw	255
  3535  000280  0100               	movlb	0	; () banked
  3536  000282  6FE0               	movwf	(??_printf+1)& (0+255),b
  3537  000284  C118  F0E1         	movff	printf@fval,??_printf+2
  3538  000288  C119  F0E2         	movff	printf@fval+1,??_printf+3
  3539  00028C  C11A  F0E3         	movff	printf@fval+2,??_printf+4
  3540  000290  C11B  F0E4         	movff	printf@fval+3,??_printf+5
  3541  000294  0E10               	movlw	16
  3542  000296  D006               	goto	u5170
  3543  000298                     u5175:
  3544  000298  0100               	movlb	0	; () banked
  3545  00029A  90D8               	bcf	status,0,c
  3546  00029C  33E4               	rrcf	(??_printf+5)& (0+255),f,b
  3547  00029E  33E3               	rrcf	(??_printf+4)& (0+255),f,b
  3548  0002A0  33E2               	rrcf	(??_printf+3)& (0+255),f,b
  3549  0002A2  33E1               	rrcf	(??_printf+2)& (0+255),f,b
  3550  0002A4                     u5170:
  3551  0002A4  2EE8               	decfsz	wreg,f,c
  3552  0002A6  D7F8               	goto	u5175
  3553  0002A8  0100               	movlb	0	; () banked
  3554  0002AA  51E1               	movf	(??_printf+2)& (0+255),w,b
  3555  0002AC  0100               	movlb	0	; () banked
  3556  0002AE  25DF               	addwf	??_printf& (0+255),w,b
  3557  0002B0  0101               	movlb	1	; () banked
  3558  0002B2  6F10               	movwf	printf@exp& (0+255),b
  3559  0002B4  0E00               	movlw	0
  3560  0002B6  0100               	movlb	0	; () banked
  3561  0002B8  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  3562  0002BA  0101               	movlb	1	; () banked
  3563  0002BC  6F11               	movwf	(printf@exp+1)& (0+255),b
  3564                           
  3565                           ; BSR set to: 1
  3566                           ;doprnt.c: 838: exp--;
  3567  0002BE  0101               	movlb	1	; () banked
  3568  0002C0  0710               	decf	printf@exp& (0+255),f,b
  3569  0002C2  A0D8               	btfss	status,0,c
  3570  0002C4  0711               	decf	(printf@exp+1)& (0+255),f,b
  3571                           
  3572                           ; BSR set to: 1
  3573                           ;doprnt.c: 839: exp *= 3;
  3574  0002C6  C110  F08E         	movff	printf@exp,___wmul@multiplier
  3575  0002CA  C111  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  3576  0002CE  0E00               	movlw	0
  3577  0002D0  0100               	movlb	0	; () banked
  3578  0002D2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3579  0002D4  0E03               	movlw	3
  3580  0002D6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3581  0002D8  EC26  F028         	call	___wmul	;wreg free
  3582  0002DC  C08E  F110         	movff	?___wmul,printf@exp
  3583  0002E0  C08F  F111         	movff	?___wmul+1,printf@exp+1
  3584                           
  3585                           ;doprnt.c: 840: exp /= 10;
  3586  0002E4  C110  F086         	movff	printf@exp,___awdiv@dividend
  3587  0002E8  C111  F087         	movff	printf@exp+1,___awdiv@dividend+1
  3588  0002EC  0E00               	movlw	0
  3589  0002EE  0100               	movlb	0	; () banked
  3590  0002F0  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3591  0002F2  0E0A               	movlw	10
  3592  0002F4  6F88               	movwf	___awdiv@divisor& (0+255),b
  3593  0002F6  EC69  F022         	call	___awdiv	;wreg free
  3594  0002FA  C086  F110         	movff	?___awdiv,printf@exp
  3595  0002FE  C087  F111         	movff	?___awdiv+1,printf@exp+1
  3596                           
  3597                           ;doprnt.c: 841: if(exp < 0)
  3598  000302  0101               	movlb	1	; () banked
  3599  000304  AF11               	btfss	(printf@exp+1)& (0+255),7,b
  3600  000306  D004               	goto	l5172
  3601                           
  3602                           ; BSR set to: 1
  3603                           ;doprnt.c: 842: exp--;
  3604  000308  0101               	movlb	1	; () banked
  3605  00030A  0710               	decf	printf@exp& (0+255),f,b
  3606  00030C  A0D8               	btfss	status,0,c
  3607  00030E  0711               	decf	(printf@exp+1)& (0+255),f,b
  3608  000310                     l5172:
  3609                           
  3610                           ; BSR set to: 1
  3611                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3612  000310  0101               	movlb	1	; () banked
  3613  000312  5110               	movf	printf@exp& (0+255),w,b
  3614  000314  0800               	sublw	0
  3615  000316  ECA9  F00B         	call	_scale
  3616  00031A  C0B0  F10C         	movff	?_scale,printf@tmpval
  3617  00031E  C0B1  F10D         	movff	?_scale+1,printf@tmpval+1
  3618  000322  C0B2  F10E         	movff	?_scale+2,printf@tmpval+2
  3619                           
  3620                           ;doprnt.c: 847: tmpval.integ *= fval;
  3621  000326  C10C  F0A1         	movff	printf@tmpval,___ftmul@f1
  3622  00032A  C10D  F0A2         	movff	printf@tmpval+1,___ftmul@f1+1
  3623  00032E  C10E  F0A3         	movff	printf@tmpval+2,___ftmul@f1+2
  3624  000332  C118  F0A4         	movff	printf@fval,___ftmul@f2
  3625  000336  C119  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  3626  00033A  C11A  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  3627  00033E  EC63  F019         	call	___ftmul	;wreg free
  3628  000342  C0A1  F10C         	movff	?___ftmul,printf@tmpval
  3629  000346  C0A2  F10D         	movff	?___ftmul+1,printf@tmpval+1
  3630  00034A  C0A3  F10E         	movff	?___ftmul+2,printf@tmpval+2
  3631                           
  3632                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3633  00034E  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3634  000352  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3635  000356  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3636  00035A  0E00               	movlw	0
  3637  00035C  0100               	movlb	0	; () banked
  3638  00035E  6F83               	movwf	___ftge@ff2& (0+255),b
  3639  000360  0E80               	movlw	128
  3640  000362  0100               	movlb	0	; () banked
  3641  000364  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3642  000366  0E3F               	movlw	63
  3643  000368  0100               	movlb	0	; () banked
  3644  00036A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3645  00036C  ECA1  F021         	call	___ftge	;wreg free
  3646  000370  0100               	movlb	0	; () banked
  3647  000372  B0D8               	btfsc	status,0,c
  3648  000374  D005               	goto	l5180
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;doprnt.c: 849: exp--;
  3652  000376  0101               	movlb	1	; () banked
  3653  000378  0710               	decf	printf@exp& (0+255),f,b
  3654  00037A  A0D8               	btfss	status,0,c
  3655  00037C  0711               	decf	(printf@exp+1)& (0+255),f,b
  3656  00037E  D017               	goto	l5184
  3657  000380                     l5180:
  3658                           
  3659                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3660  000380  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3661  000384  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3662  000388  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3663  00038C  0E00               	movlw	0
  3664  00038E  0100               	movlb	0	; () banked
  3665  000390  6F83               	movwf	___ftge@ff2& (0+255),b
  3666  000392  0E20               	movlw	32
  3667  000394  0100               	movlb	0	; () banked
  3668  000396  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3669  000398  0E41               	movlw	65
  3670  00039A  0100               	movlb	0	; () banked
  3671  00039C  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3672  00039E  ECA1  F021         	call	___ftge	;wreg free
  3673  0003A2  0100               	movlb	0	; () banked
  3674  0003A4  A0D8               	btfss	status,0,c
  3675  0003A6  D003               	goto	l5184
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;doprnt.c: 851: exp++;
  3679  0003A8  0101               	movlb	1	; () banked
  3680  0003AA  4B10               	infsnz	printf@exp& (0+255),f,b
  3681  0003AC  2B11               	incf	(printf@exp+1)& (0+255),f,b
  3682  0003AE                     l5184:
  3683                           
  3684                           ;doprnt.c: 852: }
  3685                           ;doprnt.c: 1112: if(prec <= 12)
  3686  0003AE  0101               	movlb	1	; () banked
  3687  0003B0  BF0B               	btfsc	(printf@prec+1)& (0+255),7,b
  3688  0003B2  D008               	goto	l5186
  3689  0003B4  0101               	movlb	1	; () banked
  3690  0003B6  510B               	movf	(printf@prec+1)& (0+255),w,b
  3691  0003B8  E11D               	bnz	l5188
  3692  0003BA  0E0D               	movlw	13
  3693  0003BC  0101               	movlb	1	; () banked
  3694  0003BE  5D0A               	subwf	printf@prec& (0+255),w,b
  3695  0003C0  B0D8               	btfsc	status,0,c
  3696  0003C2  D018               	goto	l5188
  3697  0003C4                     l5186:
  3698                           
  3699                           ; BSR set to: 1
  3700                           ;doprnt.c: 1113: fval += fround(prec);
  3701  0003C4  C118  F0BA         	movff	printf@fval,___ftadd@f1
  3702  0003C8  C119  F0BB         	movff	printf@fval+1,___ftadd@f1+1
  3703  0003CC  C11A  F0BC         	movff	printf@fval+2,___ftadd@f1+2
  3704  0003D0  0101               	movlb	1	; () banked
  3705  0003D2  510A               	movf	printf@prec& (0+255),w,b
  3706  0003D4  ECC6  F011         	call	_fround
  3707  0003D8  C0B0  F0BD         	movff	?_fround,___ftadd@f2
  3708  0003DC  C0B1  F0BE         	movff	?_fround+1,___ftadd@f2+1
  3709  0003E0  C0B2  F0BF         	movff	?_fround+2,___ftadd@f2+2
  3710  0003E4  EC1C  F013         	call	___ftadd	;wreg free
  3711  0003E8  C0BA  F118         	movff	?___ftadd,printf@fval
  3712  0003EC  C0BB  F119         	movff	?___ftadd+1,printf@fval+1
  3713  0003F0  C0BC  F11A         	movff	?___ftadd+2,printf@fval+2
  3714  0003F4                     l5188:
  3715                           
  3716                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3717  0003F4  0101               	movlb	1	; () banked
  3718  0003F6  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3719  0003F8  D008               	goto	l5190
  3720  0003FA  0101               	movlb	1	; () banked
  3721  0003FC  5111               	movf	(printf@exp+1)& (0+255),w,b
  3722  0003FE  E12A               	bnz	l5196
  3723  000400  0E0A               	movlw	10
  3724  000402  0101               	movlb	1	; () banked
  3725  000404  5D10               	subwf	printf@exp& (0+255),w,b
  3726  000406  B0D8               	btfsc	status,0,c
  3727  000408  D025               	goto	l5196
  3728  00040A                     l5190:
  3729                           
  3730                           ; BSR set to: 1
  3731  00040A  0101               	movlb	1	; () banked
  3732  00040C  5118               	movf	printf@fval& (0+255),w,b
  3733  00040E  0101               	movlb	1	; () banked
  3734  000410  1119               	iorwf	(printf@fval+1)& (0+255),w,b
  3735  000412  0101               	movlb	1	; () banked
  3736  000414  111A               	iorwf	(printf@fval+2)& (0+255),w,b
  3737  000416  B4D8               	btfsc	status,2,c
  3738  000418  D063               	goto	l5210
  3739                           
  3740                           ; BSR set to: 1
  3741  00041A  C118  F0C6         	movff	printf@fval,___fttol@f1
  3742  00041E  C119  F0C7         	movff	printf@fval+1,___fttol@f1+1
  3743  000422  C11A  F0C8         	movff	printf@fval+2,___fttol@f1+2
  3744  000426  ECB8  F01A         	call	___fttol	;wreg free
  3745  00042A  0100               	movlb	0	; () banked
  3746  00042C  51C6               	movf	?___fttol& (0+255),w,b
  3747  00042E  0100               	movlb	0	; () banked
  3748  000430  11C7               	iorwf	(?___fttol+1)& (0+255),w,b
  3749  000432  0100               	movlb	0	; () banked
  3750  000434  11C8               	iorwf	(?___fttol+2)& (0+255),w,b
  3751  000436  0100               	movlb	0	; () banked
  3752  000438  11C9               	iorwf	(?___fttol+3)& (0+255),w,b
  3753  00043A  A4D8               	btfss	status,2,c
  3754  00043C  D051               	goto	l5210
  3755                           
  3756                           ; BSR set to: 0
  3757  00043E  0101               	movlb	1	; () banked
  3758  000440  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3759  000442  D04E               	goto	l5210
  3760  000444  0101               	movlb	1	; () banked
  3761  000446  5111               	movf	(printf@exp+1)& (0+255),w,b
  3762  000448  E105               	bnz	l5196
  3763  00044A  0E02               	movlw	2
  3764  00044C  0101               	movlb	1	; () banked
  3765  00044E  5D10               	subwf	printf@exp& (0+255),w,b
  3766  000450  A0D8               	btfss	status,0,c
  3767  000452  D046               	goto	l5210
  3768  000454                     l5196:
  3769                           
  3770                           ; BSR set to: 1
  3771                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3772  000454  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3773  000458  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3774  00045C  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3775  000460  0E70               	movlw	112
  3776  000462  0100               	movlb	0	; () banked
  3777  000464  6F83               	movwf	___ftge@ff2& (0+255),b
  3778  000466  0E89               	movlw	137
  3779  000468  0100               	movlb	0	; () banked
  3780  00046A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3781  00046C  0E40               	movlw	64
  3782  00046E  0100               	movlb	0	; () banked
  3783  000470  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3784  000472  ECA1  F021         	call	___ftge	;wreg free
  3785  000476  0100               	movlb	0	; () banked
  3786  000478  B0D8               	btfsc	status,0,c
  3787  00047A  D003               	goto	l5200
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3791  00047C  0101               	movlb	1	; () banked
  3792  00047E  0EF7               	movlw	247
  3793  000480  D002               	goto	L1
  3794  000482                     l5200:
  3795                           
  3796                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3797  000482  0101               	movlb	1	; () banked
  3798  000484  0EF8               	movlw	248
  3799  000486                     L1:
  3800  000486  2710               	addwf	printf@exp& (0+255),f,b
  3801  000488  0EFF               	movlw	255
  3802  00048A  2311               	addwfc	(printf@exp+1)& (0+255),f,b
  3803                           
  3804                           ; BSR set to: 1
  3805                           ;doprnt.c: 1124: }
  3806                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3807                           
  3808                           ; BSR set to: 1
  3809  00048C  0101               	movlb	1	; () banked
  3810  00048E  5110               	movf	printf@exp& (0+255),w,b
  3811  000490  ECA9  F00B         	call	_scale
  3812  000494  C0B0  F10C         	movff	?_scale,printf@tmpval
  3813  000498  C0B1  F10D         	movff	?_scale+1,printf@tmpval+1
  3814  00049C  C0B2  F10E         	movff	?_scale+2,printf@tmpval+2
  3815                           
  3816                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3817  0004A0  C118  F080         	movff	printf@fval,__tdiv_to_l_@f1
  3818  0004A4  C119  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3819  0004A8  C11A  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3820  0004AC  C10C  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  3821  0004B0  C10D  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3822  0004B4  C10E  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3823  0004B8  EC1D  F017         	call	__tdiv_to_l_	;wreg free
  3824  0004BC  C080  F112         	movff	?__tdiv_to_l_,printf@val
  3825  0004C0  C081  F113         	movff	?__tdiv_to_l_+1,printf@val+1
  3826  0004C4  C082  F114         	movff	?__tdiv_to_l_+2,printf@val+2
  3827  0004C8  C083  F115         	movff	?__tdiv_to_l_+3,printf@val+3
  3828                           
  3829                           ;doprnt.c: 1129: fval = 0.0;
  3830  0004CC  0E00               	movlw	0
  3831  0004CE  0101               	movlb	1	; () banked
  3832  0004D0  6F18               	movwf	printf@fval& (0+255),b
  3833  0004D2  0E00               	movlw	0
  3834  0004D4  0101               	movlb	1	; () banked
  3835  0004D6  6F19               	movwf	(printf@fval+1)& (0+255),b
  3836  0004D8  0E00               	movlw	0
  3837  0004DA  0101               	movlb	1	; () banked
  3838  0004DC  6F1A               	movwf	(printf@fval+2)& (0+255),b
  3839                           
  3840                           ;doprnt.c: 1130: } else {
  3841  0004DE  D033               	goto	l5214
  3842  0004E0                     l5210:
  3843                           
  3844                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3845  0004E0  C118  F0C6         	movff	printf@fval,___fttol@f1
  3846  0004E4  C119  F0C7         	movff	printf@fval+1,___fttol@f1+1
  3847  0004E8  C11A  F0C8         	movff	printf@fval+2,___fttol@f1+2
  3848  0004EC  ECB8  F01A         	call	___fttol	;wreg free
  3849  0004F0  C0C6  F112         	movff	?___fttol,printf@val
  3850  0004F4  C0C7  F113         	movff	?___fttol+1,printf@val+1
  3851  0004F8  C0C8  F114         	movff	?___fttol+2,printf@val+2
  3852  0004FC  C0C9  F115         	movff	?___fttol+3,printf@val+3
  3853                           
  3854                           ;doprnt.c: 1132: fval -= (double)val;
  3855  000500  C118  F0C6         	movff	printf@fval,___ftsub@f1
  3856  000504  C119  F0C7         	movff	printf@fval+1,___ftsub@f1+1
  3857  000508  C11A  F0C8         	movff	printf@fval+2,___ftsub@f1+2
  3858  00050C  C112  F088         	movff	printf@val,___lltoft@c
  3859  000510  C113  F089         	movff	printf@val+1,___lltoft@c+1
  3860  000514  C114  F08A         	movff	printf@val+2,___lltoft@c+2
  3861  000518  C115  F08B         	movff	printf@val+3,___lltoft@c+3
  3862  00051C  EC7B  F025         	call	___lltoft	;wreg free
  3863  000520  C088  F0C9         	movff	?___lltoft,___ftsub@f2
  3864  000524  C089  F0CA         	movff	?___lltoft+1,___ftsub@f2+1
  3865  000528  C08A  F0CB         	movff	?___lltoft+2,___ftsub@f2+2
  3866  00052C  EC10  F027         	call	___ftsub	;wreg free
  3867  000530  C0C6  F118         	movff	?___ftsub,printf@fval
  3868  000534  C0C7  F119         	movff	?___ftsub+1,printf@fval+1
  3869  000538  C0C8  F11A         	movff	?___ftsub+2,printf@fval+2
  3870                           
  3871                           ;doprnt.c: 1133: exp = 0;
  3872  00053C  0E00               	movlw	0
  3873  00053E  0101               	movlb	1	; () banked
  3874  000540  6F11               	movwf	(printf@exp+1)& (0+255),b
  3875  000542  0E00               	movlw	0
  3876  000544  6F10               	movwf	printf@exp& (0+255),b
  3877  000546                     l5214:
  3878                           
  3879                           ; BSR set to: 1
  3880                           ;doprnt.c: 1134: }
  3881                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3882  000546  0E01               	movlw	1
  3883  000548  0101               	movlb	1	; () banked
  3884  00054A  6F1D               	movwf	printf@c& (0+255),b
  3885  00054C                     l5216:
  3886                           
  3887                           ; BSR set to: 1
  3888  00054C  0E0A               	movlw	10
  3889  00054E  0101               	movlb	1	; () banked
  3890  000550  191D               	xorwf	printf@c& (0+255),w,b
  3891  000552  B4D8               	btfsc	status,2,c
  3892  000554  D01E               	goto	l5228
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;doprnt.c: 1137: if(val < dpowers[c])
  3896                           
  3897                           ; BSR set to: 1
  3898                           
  3899                           ; BSR set to: 1
  3900  000556  0101               	movlb	1	; () banked
  3901  000558  511D               	movf	printf@c& (0+255),w,b
  3902  00055A  0D04               	mullw	4
  3903  00055C  0EC3               	movlw	low _dpowers
  3904  00055E  24F3               	addwf	prodl,w,c
  3905  000560  6EF6               	movwf	tblptrl,c
  3906  000562  0EFD               	movlw	high _dpowers
  3907  000564  20F4               	addwfc	prodh,w,c
  3908  000566  6EF7               	movwf	tblptrh,c
  3909  000568                     	if	0	;There are less than 3 active tblptr bytes
  3910  000568                     	endif
  3911  000568  0009               	tblrd		*+
  3912  00056A  50F5               	movf	tablat,w,c
  3913  00056C  0101               	movlb	1	; () banked
  3914  00056E  5D12               	subwf	printf@val& (0+255),w,b
  3915  000570  0009               	tblrd		*+
  3916  000572  50F5               	movf	tablat,w,c
  3917  000574  0101               	movlb	1	; () banked
  3918  000576  5913               	subwfb	(printf@val+1)& (0+255),w,b
  3919  000578  0009               	tblrd		*+
  3920  00057A  50F5               	movf	tablat,w,c
  3921  00057C  0101               	movlb	1	; () banked
  3922  00057E  5914               	subwfb	(printf@val+2)& (0+255),w,b
  3923  000580  0009               	tblrd		*+
  3924  000582  50F5               	movf	tablat,w,c
  3925  000584  0101               	movlb	1	; () banked
  3926  000586  5915               	subwfb	(printf@val+3)& (0+255),w,b
  3927  000588  A0D8               	btfss	status,0,c
  3928  00058A  D003               	goto	l5228
  3929                           
  3930                           ; BSR set to: 1
  3931                           
  3932                           ; BSR set to: 1
  3933                           
  3934                           ; BSR set to: 1
  3935                           ;doprnt.c: 1138: break;
  3936  00058C  0101               	movlb	1	; () banked
  3937  00058E  2B1D               	incf	printf@c& (0+255),f,b
  3938  000590  D7DD               	goto	l5216
  3939  000592                     l5228:
  3940                           
  3941                           ; BSR set to: 1
  3942                           ;doprnt.c: 1142: width -= prec + c + exp;
  3943  000592  C11D  F0DF         	movff	printf@c,??_printf
  3944  000596  0100               	movlb	0	; () banked
  3945  000598  6BE0               	clrf	(??_printf+1)& (0+255),b
  3946  00059A  BFDF               	btfsc	??_printf& (0+255),7,b
  3947  00059C  07E0               	decf	(??_printf+1)& (0+255),f,b
  3948  00059E  0101               	movlb	1	; () banked
  3949  0005A0  510A               	movf	printf@prec& (0+255),w,b
  3950  0005A2  0100               	movlb	0	; () banked
  3951  0005A4  27DF               	addwf	??_printf& (0+255),f,b
  3952  0005A6  0101               	movlb	1	; () banked
  3953  0005A8  510B               	movf	(printf@prec+1)& (0+255),w,b
  3954  0005AA  0100               	movlb	0	; () banked
  3955  0005AC  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  3956  0005AE  0101               	movlb	1	; () banked
  3957  0005B0  5110               	movf	printf@exp& (0+255),w,b
  3958  0005B2  0100               	movlb	0	; () banked
  3959  0005B4  27DF               	addwf	??_printf& (0+255),f,b
  3960  0005B6  0101               	movlb	1	; () banked
  3961  0005B8  5111               	movf	(printf@exp+1)& (0+255),w,b
  3962  0005BA  0100               	movlb	0	; () banked
  3963  0005BC  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  3964  0005BE  0100               	movlb	0	; () banked
  3965  0005C0  51DF               	movf	??_printf& (0+255),w,b
  3966  0005C2  0101               	movlb	1	; () banked
  3967  0005C4  5F16               	subwf	printf@width& (0+255),f,b
  3968  0005C6  0100               	movlb	0	; () banked
  3969  0005C8  51E0               	movf	(??_printf+1)& (0+255),w,b
  3970  0005CA  0101               	movlb	1	; () banked
  3971  0005CC  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  3972                           
  3973                           ;doprnt.c: 1143: if(
  3974                           ;doprnt.c: 1147: prec)
  3975  0005CE  0101               	movlb	1	; () banked
  3976  0005D0  510A               	movf	printf@prec& (0+255),w,b
  3977  0005D2  0101               	movlb	1	; () banked
  3978  0005D4  110B               	iorwf	(printf@prec+1)& (0+255),w,b
  3979  0005D6  B4D8               	btfsc	status,2,c
  3980  0005D8  D004               	goto	l5232
  3981                           
  3982                           ; BSR set to: 1
  3983                           ;doprnt.c: 1148: width--;
  3984  0005DA  0101               	movlb	1	; () banked
  3985  0005DC  0716               	decf	printf@width& (0+255),f,b
  3986  0005DE  A0D8               	btfss	status,0,c
  3987  0005E0  0717               	decf	(printf@width+1)& (0+255),f,b
  3988  0005E2                     l5232:
  3989                           
  3990                           ; BSR set to: 1
  3991                           ;doprnt.c: 1149: if(flag & 0x03)
  3992  0005E2  0E03               	movlw	3
  3993  0005E4  0101               	movlb	1	; () banked
  3994  0005E6  151B               	andwf	printf@flag& (0+255),w,b
  3995  0005E8  0100               	movlb	0	; () banked
  3996  0005EA  6FDF               	movwf	??_printf& (0+255),b
  3997  0005EC  0E00               	movlw	0
  3998  0005EE  0101               	movlb	1	; () banked
  3999  0005F0  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4000  0005F2  0100               	movlb	0	; () banked
  4001  0005F4  6FE0               	movwf	(??_printf+1)& (0+255),b
  4002  0005F6  0100               	movlb	0	; () banked
  4003  0005F8  51DF               	movf	??_printf& (0+255),w,b
  4004  0005FA  0100               	movlb	0	; () banked
  4005  0005FC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4006  0005FE  B4D8               	btfsc	status,2,c
  4007  000600  D004               	goto	l5236
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;doprnt.c: 1150: width--;
  4011  000602  0101               	movlb	1	; () banked
  4012  000604  0716               	decf	printf@width& (0+255),f,b
  4013  000606  A0D8               	btfss	status,0,c
  4014  000608  0717               	decf	(printf@width+1)& (0+255),f,b
  4015  00060A                     l5236:
  4016                           
  4017                           ;doprnt.c: 1153: if(flag & 0x04) {
  4018  00060A  0101               	movlb	1	; () banked
  4019  00060C  A51B               	btfss	printf@flag& (0+255),2,b
  4020  00060E  D02D               	goto	l5252
  4021                           
  4022                           ; BSR set to: 1
  4023                           ;doprnt.c: 1157: if(flag & 0x03)
  4024  000610  0E03               	movlw	3
  4025  000612  0101               	movlb	1	; () banked
  4026  000614  151B               	andwf	printf@flag& (0+255),w,b
  4027  000616  0100               	movlb	0	; () banked
  4028  000618  6FDF               	movwf	??_printf& (0+255),b
  4029  00061A  0E00               	movlw	0
  4030  00061C  0101               	movlb	1	; () banked
  4031  00061E  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4032  000620  0100               	movlb	0	; () banked
  4033  000622  6FE0               	movwf	(??_printf+1)& (0+255),b
  4034  000624  0100               	movlb	0	; () banked
  4035  000626  51DF               	movf	??_printf& (0+255),w,b
  4036  000628  0100               	movlb	0	; () banked
  4037  00062A  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4038  00062C  B4D8               	btfsc	status,2,c
  4039  00062E  D00B               	goto	l5246
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;doprnt.c: 1159: (putch('-') );
  4043  000630  0E2D               	movlw	45
  4044  000632  ECAF  F028         	call	_putch
  4045                           
  4046                           ;doprnt.c: 1168: while(width > 0) {
  4047  000636  D007               	goto	l5246
  4048  000638                     l5242:
  4049                           
  4050                           ;doprnt.c: 1169: (putch('0') );
  4051  000638  0E30               	movlw	48
  4052  00063A  ECAF  F028         	call	_putch
  4053                           
  4054                           ;doprnt.c: 1170: width--;
  4055  00063E  0101               	movlb	1	; () banked
  4056  000640  0716               	decf	printf@width& (0+255),f,b
  4057  000642  A0D8               	btfss	status,0,c
  4058  000644  0717               	decf	(printf@width+1)& (0+255),f,b
  4059  000646                     l5246:
  4060  000646  0101               	movlb	1	; () banked
  4061  000648  BF17               	btfsc	(printf@width+1)& (0+255),7,b
  4062  00064A  D074               	goto	l5264
  4063  00064C  0101               	movlb	1	; () banked
  4064  00064E  5117               	movf	(printf@width+1)& (0+255),w,b
  4065  000650  E1F3               	bnz	l5242
  4066  000652  0101               	movlb	1	; () banked
  4067  000654  0516               	decf	printf@width& (0+255),w,b
  4068  000656  A0D8               	btfss	status,0,c
  4069  000658  D06D               	goto	l5264
  4070  00065A  D7EE               	goto	l5242
  4071  00065C                     l5248:
  4072                           
  4073                           ; BSR set to: 1
  4074                           ;doprnt.c: 1181: (putch(' ') );
  4075  00065C  0E20               	movlw	32
  4076  00065E  ECAF  F028         	call	_putch
  4077                           
  4078                           ;doprnt.c: 1182: width--;
  4079  000662  0101               	movlb	1	; () banked
  4080  000664  0716               	decf	printf@width& (0+255),f,b
  4081  000666  A0D8               	btfss	status,0,c
  4082  000668  0717               	decf	(printf@width+1)& (0+255),f,b
  4083  00066A                     l5252:
  4084                           
  4085                           ; BSR set to: 1
  4086  00066A  0101               	movlb	1	; () banked
  4087  00066C  BF17               	btfsc	(printf@width+1)& (0+255),7,b
  4088  00066E  D007               	goto	l5254
  4089  000670  0101               	movlb	1	; () banked
  4090  000672  5117               	movf	(printf@width+1)& (0+255),w,b
  4091  000674  E1F3               	bnz	l5248
  4092  000676  0101               	movlb	1	; () banked
  4093  000678  0516               	decf	printf@width& (0+255),w,b
  4094  00067A  B0D8               	btfsc	status,0,c
  4095  00067C  D7EF               	goto	l5248
  4096  00067E                     l5254:
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;doprnt.c: 1183: }
  4100                           ;doprnt.c: 1188: if(flag & 0x03)
  4101  00067E  0E03               	movlw	3
  4102  000680  0101               	movlb	1	; () banked
  4103  000682  151B               	andwf	printf@flag& (0+255),w,b
  4104  000684  0100               	movlb	0	; () banked
  4105  000686  6FDF               	movwf	??_printf& (0+255),b
  4106  000688  0E00               	movlw	0
  4107  00068A  0101               	movlb	1	; () banked
  4108  00068C  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4109  00068E  0100               	movlb	0	; () banked
  4110  000690  6FE0               	movwf	(??_printf+1)& (0+255),b
  4111  000692  0100               	movlb	0	; () banked
  4112  000694  51DF               	movf	??_printf& (0+255),w,b
  4113  000696  0100               	movlb	0	; () banked
  4114  000698  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4115  00069A  B4D8               	btfsc	status,2,c
  4116  00069C  D04B               	goto	l5264
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;doprnt.c: 1190: (putch('-') );
  4120  00069E  0E2D               	movlw	45
  4121  0006A0  ECAF  F028         	call	_putch
  4122                           
  4123                           ;doprnt.c: 1195: }
  4124                           ;doprnt.c: 1196: while(c--) {
  4125  0006A4  D047               	goto	l5264
  4126  0006A6                     l5258:
  4127                           
  4128                           ;doprnt.c: 1200: {
  4129                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4130  0006A6  C112  F080         	movff	printf@val,___lldiv@dividend
  4131  0006AA  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4132  0006AE  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4133  0006B2  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4134  0006B6  0101               	movlb	1	; () banked
  4135  0006B8  511D               	movf	printf@c& (0+255),w,b
  4136  0006BA  0D04               	mullw	4
  4137  0006BC  0EC3               	movlw	low _dpowers
  4138  0006BE  24F3               	addwf	prodl,w,c
  4139  0006C0  6EF6               	movwf	tblptrl,c
  4140  0006C2  0EFD               	movlw	high _dpowers
  4141  0006C4  20F4               	addwfc	prodh,w,c
  4142  0006C6  6EF7               	movwf	tblptrh,c
  4143  0006C8                     	if	0	;There are less than 3 active tblptr bytes
  4144  0006C8                     	endif
  4145  0006C8  0009               	tblrd		*+
  4146  0006CA  CFF5 F084          	movff	tablat,___lldiv@divisor
  4147  0006CE  0009               	tblrd		*+
  4148  0006D0  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4149  0006D4  0009               	tblrd		*+
  4150  0006D6  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4151  0006DA  000A               	tblrd		*-
  4152  0006DC  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4153  0006E0  ECC8  F022         	call	___lldiv	;wreg free
  4154  0006E4  C080  F10C         	movff	?___lldiv,printf@tmpval
  4155  0006E8  C081  F10D         	movff	?___lldiv+1,printf@tmpval+1
  4156  0006EC  C082  F10E         	movff	?___lldiv+2,printf@tmpval+2
  4157  0006F0  C083  F10F         	movff	?___lldiv+3,printf@tmpval+3
  4158                           
  4159                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4160  0006F4  C10C  F08D         	movff	printf@tmpval,___llmod@dividend
  4161  0006F8  C10D  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  4162  0006FC  C10E  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  4163  000700  C10F  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  4164  000704  0E0A               	movlw	10
  4165  000706  0100               	movlb	0	; () banked
  4166  000708  6F91               	movwf	___llmod@divisor& (0+255),b
  4167  00070A  0E00               	movlw	0
  4168  00070C  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4169  00070E  0E00               	movlw	0
  4170  000710  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4171  000712  0E00               	movlw	0
  4172  000714  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4173  000716  EC1D  F024         	call	___llmod	;wreg free
  4174  00071A  C08D  F10C         	movff	?___llmod,printf@tmpval
  4175  00071E  C08E  F10D         	movff	?___llmod+1,printf@tmpval+1
  4176  000722  C08F  F10E         	movff	?___llmod+2,printf@tmpval+2
  4177  000726  C090  F10F         	movff	?___llmod+3,printf@tmpval+3
  4178                           
  4179                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  4180  00072A  0101               	movlb	1	; () banked
  4181  00072C  510C               	movf	printf@tmpval& (0+255),w,b
  4182  00072E  0F30               	addlw	48
  4183  000730  ECAF  F028         	call	_putch
  4184  000734                     l5264:
  4185  000734  0101               	movlb	1	; () banked
  4186  000736  071D               	decf	printf@c& (0+255),f,b
  4187  000738  0101               	movlb	1	; () banked
  4188  00073A  291D               	incf	printf@c& (0+255),w,b
  4189  00073C  B4D8               	btfsc	status,2,c
  4190  00073E  D008               	goto	l5270
  4191  000740  D7B2               	goto	l5258
  4192  000742                     l5266:
  4193                           
  4194                           ; BSR set to: 1
  4195                           ;doprnt.c: 1208: (putch('0') );
  4196  000742  0E30               	movlw	48
  4197  000744  ECAF  F028         	call	_putch
  4198                           
  4199                           ;doprnt.c: 1209: exp--;
  4200  000748  0101               	movlb	1	; () banked
  4201  00074A  0710               	decf	printf@exp& (0+255),f,b
  4202  00074C  A0D8               	btfss	status,0,c
  4203  00074E  0711               	decf	(printf@exp+1)& (0+255),f,b
  4204  000750                     l5270:
  4205                           
  4206                           ; BSR set to: 1
  4207  000750  0101               	movlb	1	; () banked
  4208  000752  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  4209  000754  D007               	goto	l5272
  4210  000756  0101               	movlb	1	; () banked
  4211  000758  5111               	movf	(printf@exp+1)& (0+255),w,b
  4212  00075A  E1F3               	bnz	l5266
  4213  00075C  0101               	movlb	1	; () banked
  4214  00075E  0510               	decf	printf@exp& (0+255),w,b
  4215  000760  B0D8               	btfsc	status,0,c
  4216  000762  D7EF               	goto	l5266
  4217  000764                     l5272:
  4218                           
  4219                           ; BSR set to: 1
  4220                           ;doprnt.c: 1210: }
  4221                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4222  000764  0101               	movlb	1	; () banked
  4223  000766  BF0B               	btfsc	(printf@prec+1)& (0+255),7,b
  4224  000768  D00C               	goto	l734
  4225  00076A  0101               	movlb	1	; () banked
  4226  00076C  510B               	movf	(printf@prec+1)& (0+255),w,b
  4227  00076E  E105               	bnz	u5390
  4228  000770  0E09               	movlw	9
  4229  000772  0101               	movlb	1	; () banked
  4230  000774  5D0A               	subwf	printf@prec& (0+255),w,b
  4231  000776  A0D8               	btfss	status,0,c
  4232  000778  D004               	goto	l734
  4233  00077A                     u5390:
  4234                           
  4235                           ; BSR set to: 1
  4236                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4237  00077A  0E08               	movlw	8
  4238  00077C  0101               	movlb	1	; () banked
  4239  00077E  6F1D               	movwf	printf@c& (0+255),b
  4240  000780  D002               	goto	l5276
  4241  000782                     l734:
  4242                           
  4243                           ; BSR set to: 1
  4244                           ;doprnt.c: 1213: else
  4245                           ;doprnt.c: 1214: c = prec;
  4246  000782  C10A  F11D         	movff	printf@prec,printf@c
  4247  000786                     l5276:
  4248                           
  4249                           ; BSR set to: 1
  4250                           ;doprnt.c: 1215: prec -= c;
  4251  000786  0101               	movlb	1	; () banked
  4252  000788  511D               	movf	printf@c& (0+255),w,b
  4253  00078A  0101               	movlb	1	; () banked
  4254  00078C  5F0A               	subwf	printf@prec& (0+255),f,b
  4255  00078E  0E00               	movlw	0
  4256  000790  0101               	movlb	1	; () banked
  4257  000792  BF1D               	btfsc	printf@c& (0+255),7,b
  4258  000794  0EFF               	movlw	255
  4259  000796  0101               	movlb	1	; () banked
  4260  000798  5B0B               	subwfb	(printf@prec+1)& (0+255),f,b
  4261                           
  4262                           ; BSR set to: 1
  4263                           ;doprnt.c: 1219: if(c)
  4264  00079A  0101               	movlb	1	; () banked
  4265  00079C  511D               	movf	printf@c& (0+255),w,b
  4266  00079E  0101               	movlb	1	; () banked
  4267  0007A0  B4D8               	btfsc	status,2,c
  4268  0007A2  D003               	goto	l5282
  4269                           
  4270                           ; BSR set to: 1
  4271                           ;doprnt.c: 1221: (putch('.') );
  4272  0007A4  0E2E               	movlw	46
  4273  0007A6  ECAF  F028         	call	_putch
  4274  0007AA                     l5282:
  4275                           
  4276                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4277  0007AA  0101               	movlb	1	; () banked
  4278  0007AC  511D               	movf	printf@c& (0+255),w,b
  4279  0007AE  ECA9  F00B         	call	_scale
  4280  0007B2  C0B0  F100         	movff	?_scale,_printf$1340
  4281  0007B6  C0B1  F101         	movff	?_scale+1,_printf$1340+1
  4282  0007BA  C0B2  F102         	movff	?_scale+2,_printf$1340+2
  4283                           
  4284                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4285  0007BE  C118  F0A4         	movff	printf@fval,___ftmul@f2
  4286  0007C2  C119  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  4287  0007C6  C11A  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  4288  0007CA  C100  F0A1         	movff	_printf$1340,___ftmul@f1
  4289  0007CE  C101  F0A2         	movff	_printf$1340+1,___ftmul@f1+1
  4290  0007D2  C102  F0A3         	movff	_printf$1340+2,___ftmul@f1+2
  4291  0007D6  EC63  F019         	call	___ftmul	;wreg free
  4292  0007DA  C0A1  F0C6         	movff	?___ftmul,___fttol@f1
  4293  0007DE  C0A2  F0C7         	movff	?___ftmul+1,___fttol@f1+1
  4294  0007E2  C0A3  F0C8         	movff	?___ftmul+2,___fttol@f1+2
  4295  0007E6  ECB8  F01A         	call	___fttol	;wreg free
  4296  0007EA  C0C6  F112         	movff	?___fttol,printf@val
  4297  0007EE  C0C7  F113         	movff	?___fttol+1,printf@val+1
  4298  0007F2  C0C8  F114         	movff	?___fttol+2,printf@val+2
  4299  0007F6  C0C9  F115         	movff	?___fttol+3,printf@val+3
  4300                           
  4301                           ;doprnt.c: 1228: while(c--) {
  4302  0007FA  D06E               	goto	l5292
  4303  0007FC                     l5286:
  4304                           
  4305                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4306  0007FC  C112  F080         	movff	printf@val,___lldiv@dividend
  4307  000800  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4308  000804  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4309  000808  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4310  00080C  0101               	movlb	1	; () banked
  4311  00080E  511D               	movf	printf@c& (0+255),w,b
  4312  000810  0D04               	mullw	4
  4313  000812  0EC3               	movlw	low _dpowers
  4314  000814  24F3               	addwf	prodl,w,c
  4315  000816  6EF6               	movwf	tblptrl,c
  4316  000818  0EFD               	movlw	high _dpowers
  4317  00081A  20F4               	addwfc	prodh,w,c
  4318  00081C  6EF7               	movwf	tblptrh,c
  4319  00081E                     	if	0	;There are less than 3 active tblptr bytes
  4320  00081E                     	endif
  4321  00081E  0009               	tblrd		*+
  4322  000820  CFF5 F084          	movff	tablat,___lldiv@divisor
  4323  000824  0009               	tblrd		*+
  4324  000826  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4325  00082A  0009               	tblrd		*+
  4326  00082C  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4327  000830  000A               	tblrd		*-
  4328  000832  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4329  000836  ECC8  F022         	call	___lldiv	;wreg free
  4330  00083A  C080  F10C         	movff	?___lldiv,printf@tmpval
  4331  00083E  C081  F10D         	movff	?___lldiv+1,printf@tmpval+1
  4332  000842  C082  F10E         	movff	?___lldiv+2,printf@tmpval+2
  4333  000846  C083  F10F         	movff	?___lldiv+3,printf@tmpval+3
  4334                           
  4335                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4336  00084A  C10C  F08D         	movff	printf@tmpval,___llmod@dividend
  4337  00084E  C10D  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  4338  000852  C10E  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  4339  000856  C10F  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  4340  00085A  0E0A               	movlw	10
  4341  00085C  0100               	movlb	0	; () banked
  4342  00085E  6F91               	movwf	___llmod@divisor& (0+255),b
  4343  000860  0E00               	movlw	0
  4344  000862  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4345  000864  0E00               	movlw	0
  4346  000866  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4347  000868  0E00               	movlw	0
  4348  00086A  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4349  00086C  EC1D  F024         	call	___llmod	;wreg free
  4350  000870  C08D  F10C         	movff	?___llmod,printf@tmpval
  4351  000874  C08E  F10D         	movff	?___llmod+1,printf@tmpval+1
  4352  000878  C08F  F10E         	movff	?___llmod+2,printf@tmpval+2
  4353  00087C  C090  F10F         	movff	?___llmod+3,printf@tmpval+3
  4354                           
  4355                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4356  000880  0101               	movlb	1	; () banked
  4357  000882  510C               	movf	printf@tmpval& (0+255),w,b
  4358  000884  0F30               	addlw	48
  4359  000886  ECAF  F028         	call	_putch
  4360                           
  4361                           ;doprnt.c: 1232: val %= dpowers[c];
  4362  00088A  C112  F08D         	movff	printf@val,___llmod@dividend
  4363  00088E  C113  F08E         	movff	printf@val+1,___llmod@dividend+1
  4364  000892  C114  F08F         	movff	printf@val+2,___llmod@dividend+2
  4365  000896  C115  F090         	movff	printf@val+3,___llmod@dividend+3
  4366  00089A  0101               	movlb	1	; () banked
  4367  00089C  511D               	movf	printf@c& (0+255),w,b
  4368  00089E  0D04               	mullw	4
  4369  0008A0  0EC3               	movlw	low _dpowers
  4370  0008A2  24F3               	addwf	prodl,w,c
  4371  0008A4  6EF6               	movwf	tblptrl,c
  4372  0008A6  0EFD               	movlw	high _dpowers
  4373  0008A8  20F4               	addwfc	prodh,w,c
  4374  0008AA  6EF7               	movwf	tblptrh,c
  4375  0008AC                     	if	0	;There are less than 3 active tblptr bytes
  4376  0008AC                     	endif
  4377  0008AC  0009               	tblrd		*+
  4378  0008AE  CFF5 F091          	movff	tablat,___llmod@divisor
  4379  0008B2  0009               	tblrd		*+
  4380  0008B4  CFF5 F092          	movff	tablat,___llmod@divisor+1
  4381  0008B8  0009               	tblrd		*+
  4382  0008BA  CFF5 F093          	movff	tablat,___llmod@divisor+2
  4383  0008BE  000A               	tblrd		*-
  4384  0008C0  CFF5 F094          	movff	tablat,___llmod@divisor+3
  4385  0008C4  EC1D  F024         	call	___llmod	;wreg free
  4386  0008C8  C08D  F112         	movff	?___llmod,printf@val
  4387  0008CC  C08E  F113         	movff	?___llmod+1,printf@val+1
  4388  0008D0  C08F  F114         	movff	?___llmod+2,printf@val+2
  4389  0008D4  C090  F115         	movff	?___llmod+3,printf@val+3
  4390  0008D8                     l5292:
  4391  0008D8  0101               	movlb	1	; () banked
  4392  0008DA  071D               	decf	printf@c& (0+255),f,b
  4393  0008DC  0101               	movlb	1	; () banked
  4394  0008DE  291D               	incf	printf@c& (0+255),w,b
  4395  0008E0  B4D8               	btfsc	status,2,c
  4396  0008E2  D008               	goto	l5298
  4397  0008E4  D78B               	goto	l5286
  4398  0008E6                     l5294:
  4399                           
  4400                           ; BSR set to: 1
  4401                           ;doprnt.c: 1236: (putch('0') );
  4402  0008E6  0E30               	movlw	48
  4403  0008E8  ECAF  F028         	call	_putch
  4404                           
  4405                           ;doprnt.c: 1237: prec--;
  4406  0008EC  0101               	movlb	1	; () banked
  4407  0008EE  070A               	decf	printf@prec& (0+255),f,b
  4408  0008F0  A0D8               	btfss	status,0,c
  4409  0008F2  070B               	decf	(printf@prec+1)& (0+255),f,b
  4410  0008F4                     l5298:
  4411                           
  4412                           ; BSR set to: 1
  4413  0008F4  0101               	movlb	1	; () banked
  4414  0008F6  510A               	movf	printf@prec& (0+255),w,b
  4415  0008F8  0101               	movlb	1	; () banked
  4416  0008FA  110B               	iorwf	(printf@prec+1)& (0+255),w,b
  4417  0008FC  B4D8               	btfsc	status,2,c
  4418  0008FE  D1D5               	goto	l5406
  4419  000900  D7F2               	goto	l5294
  4420  000902                     l695:
  4421                           
  4422                           ; BSR set to: 1
  4423                           ;doprnt.c: 1246: }
  4424                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4425  000902  0101               	movlb	1	; () banked
  4426  000904  BF1B               	btfsc	printf@flag& (0+255),7,b
  4427  000906  D034               	goto	l743
  4428                           
  4429                           ; BSR set to: 1
  4430                           ;doprnt.c: 1253: {
  4431                           ;doprnt.c: 1255: if(flag & 0x10)
  4432  000908  0101               	movlb	1	; () banked
  4433  00090A  A91B               	btfss	printf@flag& (0+255),4,b
  4434  00090C  D00E               	goto	l5306
  4435                           
  4436                           ; BSR set to: 1
  4437                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4438  00090E  C108  FFD9         	movff	printf@ap,fsr2l
  4439  000912  C109  FFDA         	movff	printf@ap+1,fsr2h
  4440  000916  CFDE F112          	movff	postinc2,printf@val
  4441  00091A  CFDE F113          	movff	postinc2,printf@val+1
  4442  00091E  CFDE F114          	movff	postinc2,printf@val+2
  4443  000922  CFDE F115          	movff	postinc2,printf@val+3
  4444                           
  4445                           ; BSR set to: 1
  4446  000926  0E04               	movlw	4
  4447  000928  D00F               	goto	L2
  4448  00092A                     l5306:
  4449                           
  4450                           ; BSR set to: 1
  4451                           ;doprnt.c: 1257: else
  4452                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4453  00092A  C108  FFD9         	movff	printf@ap,fsr2l
  4454  00092E  C109  FFDA         	movff	printf@ap+1,fsr2h
  4455  000932  CFDE F112          	movff	postinc2,printf@val
  4456  000936  CFDD F113          	movff	postdec2,printf@val+1
  4457  00093A  0101               	movlb	1	; () banked
  4458  00093C  0E00               	movlw	0
  4459  00093E  BF13               	btfsc	(printf@val+1)& (0+255),7,b
  4460  000940  0EFF               	movlw	-1
  4461  000942  6F14               	movwf	(printf@val+2)& (0+255),b
  4462  000944  6F15               	movwf	(printf@val+3)& (0+255),b
  4463                           
  4464                           ; BSR set to: 1
  4465  000946  0E02               	movlw	2
  4466  000948                     L2:
  4467  000948  0101               	movlb	1	; () banked
  4468  00094A  2708               	addwf	printf@ap& (0+255),f,b
  4469  00094C  0E00               	movlw	0
  4470  00094E  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  4471                           
  4472                           ; BSR set to: 1
  4473                           ;doprnt.c: 1261: if((long)val < 0) {
  4474                           
  4475                           ; BSR set to: 1
  4476  000950  0101               	movlb	1	; () banked
  4477  000952  AF15               	btfss	(printf@val+3)& (0+255),7,b
  4478  000954  D07F               	goto	l5354
  4479                           
  4480                           ; BSR set to: 1
  4481                           ;doprnt.c: 1262: flag |= 0x03;
  4482  000956  0E03               	movlw	3
  4483  000958  0101               	movlb	1	; () banked
  4484  00095A  131B               	iorwf	printf@flag& (0+255),f,b
  4485                           
  4486                           ; BSR set to: 1
  4487                           ;doprnt.c: 1263: val = -val;
  4488  00095C  0101               	movlb	1	; () banked
  4489  00095E  1F15               	comf	(printf@val+3)& (0+255),f,b
  4490  000960  1F14               	comf	(printf@val+2)& (0+255),f,b
  4491  000962  1F13               	comf	(printf@val+1)& (0+255),f,b
  4492  000964  6D12               	negf	printf@val& (0+255),b
  4493  000966  0E00               	movlw	0
  4494  000968  2313               	addwfc	(printf@val+1)& (0+255),f,b
  4495  00096A  2314               	addwfc	(printf@val+2)& (0+255),f,b
  4496  00096C  2315               	addwfc	(printf@val+3)& (0+255),f,b
  4497                           
  4498                           ; BSR set to: 1
  4499                           ;doprnt.c: 1264: }
  4500                           ;doprnt.c: 1266: }
  4501  00096E  D072               	goto	l5354
  4502  000970                     l743:
  4503                           
  4504                           ; BSR set to: 1
  4505                           ;doprnt.c: 1268: else
  4506                           ;doprnt.c: 1273: {
  4507                           ;doprnt.c: 1281: if(flag & 0x10)
  4508  000970  0101               	movlb	1	; () banked
  4509  000972  A91B               	btfss	printf@flag& (0+255),4,b
  4510  000974  D00E               	goto	l5320
  4511                           
  4512                           ; BSR set to: 1
  4513                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4514  000976  C108  FFD9         	movff	printf@ap,fsr2l
  4515  00097A  C109  FFDA         	movff	printf@ap+1,fsr2h
  4516  00097E  CFDE F112          	movff	postinc2,printf@val
  4517  000982  CFDE F113          	movff	postinc2,printf@val+1
  4518  000986  CFDE F114          	movff	postinc2,printf@val+2
  4519  00098A  CFDE F115          	movff	postinc2,printf@val+3
  4520                           
  4521                           ; BSR set to: 1
  4522  00098E  0E04               	movlw	4
  4523  000990  D010               	goto	L3
  4524  000992                     l5320:
  4525                           
  4526                           ; BSR set to: 1
  4527                           ;doprnt.c: 1283: else
  4528                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4529  000992  C108  FFD9         	movff	printf@ap,fsr2l
  4530  000996  C109  FFDA         	movff	printf@ap+1,fsr2h
  4531  00099A  CFDE F0DF          	movff	postinc2,??_printf
  4532  00099E  CFDD F0E0          	movff	postdec2,??_printf+1
  4533  0009A2  C0DF  F112         	movff	??_printf,printf@val
  4534  0009A6  C0E0  F113         	movff	??_printf+1,printf@val+1
  4535  0009AA  0101               	movlb	1	; () banked
  4536  0009AC  6B14               	clrf	(printf@val+2)& (0+255),b
  4537  0009AE  6B15               	clrf	(printf@val+3)& (0+255),b
  4538                           
  4539                           ; BSR set to: 1
  4540  0009B0  0E02               	movlw	2
  4541  0009B2                     L3:
  4542  0009B2  0101               	movlb	1	; () banked
  4543  0009B4  2708               	addwf	printf@ap& (0+255),f,b
  4544  0009B6  0E00               	movlw	0
  4545  0009B8  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  4546                           
  4547                           ; BSR set to: 1
  4548                           ;doprnt.c: 1287: }
  4549                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4550                           
  4551                           ; BSR set to: 1
  4552  0009BA  D04C               	goto	l5354
  4553  0009BC                     l5324:
  4554                           
  4555                           ; BSR set to: 1
  4556                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4557  0009BC  0E01               	movlw	1
  4558  0009BE  0101               	movlb	1	; () banked
  4559  0009C0  6F1D               	movwf	printf@c& (0+255),b
  4560  0009C2                     l5326:
  4561                           
  4562                           ; BSR set to: 1
  4563  0009C2  0E0A               	movlw	10
  4564  0009C4  0101               	movlb	1	; () banked
  4565  0009C6  191D               	xorwf	printf@c& (0+255),w,b
  4566  0009C8  B4D8               	btfsc	status,2,c
  4567  0009CA  D04D               	goto	l5356
  4568                           
  4569                           ; BSR set to: 1
  4570                           ;doprnt.c: 1306: if(val < dpowers[c])
  4571                           
  4572                           ; BSR set to: 1
  4573                           
  4574                           ; BSR set to: 1
  4575  0009CC  0101               	movlb	1	; () banked
  4576  0009CE  511D               	movf	printf@c& (0+255),w,b
  4577  0009D0  0D04               	mullw	4
  4578  0009D2  0EC3               	movlw	low _dpowers
  4579  0009D4  24F3               	addwf	prodl,w,c
  4580  0009D6  6EF6               	movwf	tblptrl,c
  4581  0009D8  0EFD               	movlw	high _dpowers
  4582  0009DA  20F4               	addwfc	prodh,w,c
  4583  0009DC  6EF7               	movwf	tblptrh,c
  4584  0009DE                     	if	0	;There are less than 3 active tblptr bytes
  4585  0009DE                     	endif
  4586  0009DE  0009               	tblrd		*+
  4587  0009E0  50F5               	movf	tablat,w,c
  4588  0009E2  0101               	movlb	1	; () banked
  4589  0009E4  5D12               	subwf	printf@val& (0+255),w,b
  4590  0009E6  0009               	tblrd		*+
  4591  0009E8  50F5               	movf	tablat,w,c
  4592  0009EA  0101               	movlb	1	; () banked
  4593  0009EC  5913               	subwfb	(printf@val+1)& (0+255),w,b
  4594  0009EE  0009               	tblrd		*+
  4595  0009F0  50F5               	movf	tablat,w,c
  4596  0009F2  0101               	movlb	1	; () banked
  4597  0009F4  5914               	subwfb	(printf@val+2)& (0+255),w,b
  4598  0009F6  0009               	tblrd		*+
  4599  0009F8  50F5               	movf	tablat,w,c
  4600  0009FA  0101               	movlb	1	; () banked
  4601  0009FC  5915               	subwfb	(printf@val+3)& (0+255),w,b
  4602  0009FE  A0D8               	btfss	status,0,c
  4603  000A00  D032               	goto	l5356
  4604                           
  4605                           ; BSR set to: 1
  4606                           
  4607                           ; BSR set to: 1
  4608                           
  4609                           ; BSR set to: 1
  4610                           ;doprnt.c: 1307: break;
  4611  000A02  0101               	movlb	1	; () banked
  4612  000A04  2B1D               	incf	printf@c& (0+255),f,b
  4613  000A06  D7DD               	goto	l5326
  4614  000A08                     l5338:
  4615                           
  4616                           ; BSR set to: 1
  4617                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4618  000A08  0E01               	movlw	1
  4619  000A0A  0101               	movlb	1	; () banked
  4620  000A0C  6F1D               	movwf	printf@c& (0+255),b
  4621  000A0E                     l5340:
  4622                           
  4623                           ; BSR set to: 1
  4624  000A0E  0E08               	movlw	8
  4625  000A10  0101               	movlb	1	; () banked
  4626  000A12  191D               	xorwf	printf@c& (0+255),w,b
  4627  000A14  B4D8               	btfsc	status,2,c
  4628  000A16  D027               	goto	l5356
  4629                           
  4630                           ; BSR set to: 1
  4631                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4632                           
  4633                           ; BSR set to: 1
  4634                           
  4635                           ; BSR set to: 1
  4636  000A18  0101               	movlb	1	; () banked
  4637  000A1A  511D               	movf	printf@c& (0+255),w,b
  4638  000A1C  0D04               	mullw	4
  4639  000A1E  0E39               	movlw	low _hexpowers
  4640  000A20  24F3               	addwf	prodl,w,c
  4641  000A22  6EF6               	movwf	tblptrl,c
  4642  000A24  0EFE               	movlw	high _hexpowers
  4643  000A26  20F4               	addwfc	prodh,w,c
  4644  000A28  6EF7               	movwf	tblptrh,c
  4645  000A2A                     	if	0	;There are less than 3 active tblptr bytes
  4646  000A2A                     	endif
  4647  000A2A  0009               	tblrd		*+
  4648  000A2C  50F5               	movf	tablat,w,c
  4649  000A2E  0101               	movlb	1	; () banked
  4650  000A30  5D12               	subwf	printf@val& (0+255),w,b
  4651  000A32  0009               	tblrd		*+
  4652  000A34  50F5               	movf	tablat,w,c
  4653  000A36  0101               	movlb	1	; () banked
  4654  000A38  5913               	subwfb	(printf@val+1)& (0+255),w,b
  4655  000A3A  0009               	tblrd		*+
  4656  000A3C  50F5               	movf	tablat,w,c
  4657  000A3E  0101               	movlb	1	; () banked
  4658  000A40  5914               	subwfb	(printf@val+2)& (0+255),w,b
  4659  000A42  0009               	tblrd		*+
  4660  000A44  50F5               	movf	tablat,w,c
  4661  000A46  0101               	movlb	1	; () banked
  4662  000A48  5915               	subwfb	(printf@val+3)& (0+255),w,b
  4663  000A4A  A0D8               	btfss	status,0,c
  4664  000A4C  D00C               	goto	l5356
  4665                           
  4666                           ; BSR set to: 1
  4667                           
  4668                           ; BSR set to: 1
  4669                           
  4670                           ; BSR set to: 1
  4671                           ;doprnt.c: 1318: break;
  4672  000A4E  0101               	movlb	1	; () banked
  4673  000A50  2B1D               	incf	printf@c& (0+255),f,b
  4674  000A52  D7DD               	goto	l5340
  4675  000A54                     l5354:
  4676                           
  4677                           ; BSR set to: 1
  4678  000A54  0101               	movlb	1	; () banked
  4679  000A56  511B               	movf	printf@flag& (0+255),w,b
  4680  000A58  0B80               	andlw	128
  4681                           
  4682                           ; Switch size 1, requested type "space"
  4683                           ; Number of cases is 2, Range of values is 0 to 128
  4684                           ; switch strategies available:
  4685                           ; Name         Instructions Cycles
  4686                           ; simple_byte            7     4 (average)
  4687                           ;	Chosen strategy is simple_byte
  4688  000A5A  0A00               	xorlw	0	; case 0
  4689  000A5C  B4D8               	btfsc	status,2,c
  4690  000A5E  D7AE               	goto	l5324
  4691  000A60  0A80               	xorlw	128	; case 128
  4692  000A62  B4D8               	btfsc	status,2,c
  4693  000A64  D7D1               	goto	l5338
  4694  000A66                     l5356:
  4695                           
  4696                           ; BSR set to: 1
  4697                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4698  000A66  0101               	movlb	1	; () banked
  4699  000A68  5116               	movf	printf@width& (0+255),w,b
  4700  000A6A  0101               	movlb	1	; () banked
  4701  000A6C  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4702  000A6E  B4D8               	btfsc	status,2,c
  4703  000A70  D014               	goto	l5362
  4704                           
  4705                           ; BSR set to: 1
  4706  000A72  0E03               	movlw	3
  4707  000A74  0101               	movlb	1	; () banked
  4708  000A76  151B               	andwf	printf@flag& (0+255),w,b
  4709  000A78  0100               	movlb	0	; () banked
  4710  000A7A  6FDF               	movwf	??_printf& (0+255),b
  4711  000A7C  0E00               	movlw	0
  4712  000A7E  0101               	movlb	1	; () banked
  4713  000A80  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4714  000A82  0100               	movlb	0	; () banked
  4715  000A84  6FE0               	movwf	(??_printf+1)& (0+255),b
  4716  000A86  0100               	movlb	0	; () banked
  4717  000A88  51DF               	movf	??_printf& (0+255),w,b
  4718  000A8A  0100               	movlb	0	; () banked
  4719  000A8C  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4720  000A8E  B4D8               	btfsc	status,2,c
  4721  000A90  D004               	goto	l5362
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 1346: width--;
  4725  000A92  0101               	movlb	1	; () banked
  4726  000A94  0716               	decf	printf@width& (0+255),f,b
  4727  000A96  A0D8               	btfss	status,0,c
  4728  000A98  0717               	decf	(printf@width+1)& (0+255),f,b
  4729  000A9A                     l5362:
  4730                           
  4731                           ;doprnt.c: 1381: if(width > c)
  4732  000A9A  0E80               	movlw	128
  4733  000A9C  0101               	movlb	1	; () banked
  4734  000A9E  BF1D               	btfsc	printf@c& (0+255),7,b
  4735  000AA0  0E7F               	movlw	127
  4736  000AA2  0100               	movlb	0	; () banked
  4737  000AA4  6FDF               	movwf	??_printf& (0+255),b
  4738  000AA6  0101               	movlb	1	; () banked
  4739  000AA8  5116               	movf	printf@width& (0+255),w,b
  4740  000AAA  0101               	movlb	1	; () banked
  4741  000AAC  5D1D               	subwf	printf@c& (0+255),w,b
  4742  000AAE  0101               	movlb	1	; () banked
  4743  000AB0  5117               	movf	(printf@width+1)& (0+255),w,b
  4744  000AB2  0A80               	xorlw	128
  4745  000AB4  0100               	movlb	0	; () banked
  4746  000AB6  59DF               	subwfb	??_printf& (0+255),w,b
  4747  000AB8  B0D8               	btfsc	status,0,c
  4748  000ABA  D00B               	goto	l5366
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;doprnt.c: 1382: width -= c;
  4752  000ABC  0101               	movlb	1	; () banked
  4753  000ABE  511D               	movf	printf@c& (0+255),w,b
  4754  000AC0  0101               	movlb	1	; () banked
  4755  000AC2  5F16               	subwf	printf@width& (0+255),f,b
  4756  000AC4  0E00               	movlw	0
  4757  000AC6  0101               	movlb	1	; () banked
  4758  000AC8  BF1D               	btfsc	printf@c& (0+255),7,b
  4759  000ACA  0EFF               	movlw	255
  4760  000ACC  0101               	movlb	1	; () banked
  4761  000ACE  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  4762  000AD0  D005               	goto	l5368
  4763  000AD2                     l5366:
  4764                           
  4765                           ;doprnt.c: 1383: else
  4766                           ;doprnt.c: 1384: width = 0;
  4767  000AD2  0E00               	movlw	0
  4768  000AD4  0101               	movlb	1	; () banked
  4769  000AD6  6F17               	movwf	(printf@width+1)& (0+255),b
  4770  000AD8  0E00               	movlw	0
  4771  000ADA  6F16               	movwf	printf@width& (0+255),b
  4772  000ADC                     l5368:
  4773                           
  4774                           ; BSR set to: 1
  4775                           ;doprnt.c: 1387: if(flag & 0x04) {
  4776  000ADC  0101               	movlb	1	; () banked
  4777  000ADE  A51B               	btfss	printf@flag& (0+255),2,b
  4778  000AE0  D021               	goto	l5380
  4779                           
  4780                           ; BSR set to: 1
  4781                           ;doprnt.c: 1392: if(flag & 0x03)
  4782  000AE2  0E03               	movlw	3
  4783  000AE4  0101               	movlb	1	; () banked
  4784  000AE6  151B               	andwf	printf@flag& (0+255),w,b
  4785  000AE8  0100               	movlb	0	; () banked
  4786  000AEA  6FDF               	movwf	??_printf& (0+255),b
  4787  000AEC  0E00               	movlw	0
  4788  000AEE  0101               	movlb	1	; () banked
  4789  000AF0  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4790  000AF2  0100               	movlb	0	; () banked
  4791  000AF4  6FE0               	movwf	(??_printf+1)& (0+255),b
  4792  000AF6  0100               	movlb	0	; () banked
  4793  000AF8  51DF               	movf	??_printf& (0+255),w,b
  4794  000AFA  0100               	movlb	0	; () banked
  4795  000AFC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4796  000AFE  B4D8               	btfsc	status,2,c
  4797  000B00  D003               	goto	l5374
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;doprnt.c: 1393: (putch('-') );
  4801  000B02  0E2D               	movlw	45
  4802  000B04  ECAF  F028         	call	_putch
  4803  000B08                     l5374:
  4804                           
  4805                           ;doprnt.c: 1415: if(width)
  4806  000B08  0101               	movlb	1	; () banked
  4807  000B0A  5116               	movf	printf@width& (0+255),w,b
  4808  000B0C  0101               	movlb	1	; () banked
  4809  000B0E  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4810  000B10  B4D8               	btfsc	status,2,c
  4811  000B12  D02E               	goto	l5390
  4812                           
  4813                           ; BSR set to: 1
  4814                           ;doprnt.c: 1417: (putch('0') );
  4815                           
  4816                           ; BSR set to: 1
  4817                           
  4818                           ;doprnt.c: 1416: do
  4819  000B14  0E30               	movlw	48
  4820  000B16  ECAF  F028         	call	_putch
  4821                           
  4822                           ;doprnt.c: 1418: while(--width);
  4823  000B1A  0101               	movlb	1	; () banked
  4824  000B1C  0716               	decf	printf@width& (0+255),f,b
  4825  000B1E  A0D8               	btfss	status,0,c
  4826  000B20  0717               	decf	(printf@width+1)& (0+255),f,b
  4827  000B22  D7F2               	goto	l5374
  4828  000B24                     l5380:
  4829                           
  4830                           ; BSR set to: 1
  4831                           ;doprnt.c: 1422: {
  4832                           ;doprnt.c: 1424: if(width
  4833                           ;doprnt.c: 1428: )
  4834  000B24  0101               	movlb	1	; () banked
  4835  000B26  5116               	movf	printf@width& (0+255),w,b
  4836  000B28  0101               	movlb	1	; () banked
  4837  000B2A  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4838  000B2C  B4D8               	btfsc	status,2,c
  4839  000B2E  D00D               	goto	l5386
  4840  000B30                     l5382:
  4841                           
  4842                           ; BSR set to: 1
  4843                           ;doprnt.c: 1430: (putch(' ') );
  4844  000B30  0E20               	movlw	32
  4845  000B32  ECAF  F028         	call	_putch
  4846                           
  4847                           ;doprnt.c: 1431: while(--width);
  4848  000B36  0101               	movlb	1	; () banked
  4849  000B38  0716               	decf	printf@width& (0+255),f,b
  4850  000B3A  A0D8               	btfss	status,0,c
  4851  000B3C  0717               	decf	(printf@width+1)& (0+255),f,b
  4852  000B3E  0101               	movlb	1	; () banked
  4853  000B40  5116               	movf	printf@width& (0+255),w,b
  4854  000B42  0101               	movlb	1	; () banked
  4855  000B44  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4856  000B46  A4D8               	btfss	status,2,c
  4857  000B48  D7F3               	goto	l5382
  4858  000B4A                     l5386:
  4859                           
  4860                           ; BSR set to: 1
  4861                           ;doprnt.c: 1438: if(flag & 0x03)
  4862  000B4A  0E03               	movlw	3
  4863  000B4C  0101               	movlb	1	; () banked
  4864  000B4E  151B               	andwf	printf@flag& (0+255),w,b
  4865  000B50  0100               	movlb	0	; () banked
  4866  000B52  6FDF               	movwf	??_printf& (0+255),b
  4867  000B54  0E00               	movlw	0
  4868  000B56  0101               	movlb	1	; () banked
  4869  000B58  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4870  000B5A  0100               	movlb	0	; () banked
  4871  000B5C  6FE0               	movwf	(??_printf+1)& (0+255),b
  4872  000B5E  0100               	movlb	0	; () banked
  4873  000B60  51DF               	movf	??_printf& (0+255),w,b
  4874  000B62  0100               	movlb	0	; () banked
  4875  000B64  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4876  000B66  B4D8               	btfsc	status,2,c
  4877  000B68  D003               	goto	l5390
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;doprnt.c: 1439: (putch('-') );
  4881  000B6A  0E2D               	movlw	45
  4882  000B6C  ECAF  F028         	call	_putch
  4883  000B70                     l5390:
  4884                           
  4885                           ;doprnt.c: 1469: }
  4886                           ;doprnt.c: 1472: prec = c;
  4887  000B70  0101               	movlb	1	; () banked
  4888  000B72  511D               	movf	printf@c& (0+255),w,b
  4889  000B74  0101               	movlb	1	; () banked
  4890  000B76  6F0A               	movwf	printf@prec& (0+255),b
  4891  000B78  6B0B               	clrf	(printf@prec+1)& (0+255),b
  4892  000B7A  BF0A               	btfsc	printf@prec& (0+255),7,b
  4893  000B7C  070B               	decf	(printf@prec+1)& (0+255),f,b
  4894                           
  4895                           ;doprnt.c: 1474: while(prec--) {
  4896  000B7E  D08A               	goto	l5404
  4897  000B80                     l5392:
  4898                           
  4899                           ; BSR set to: 1
  4900                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4901  000B80  C10A  F0DF         	movff	printf@prec,??_printf
  4902  000B84  C10B  F0E0         	movff	printf@prec+1,??_printf+1
  4903  000B88  0100               	movlb	0	; () banked
  4904  000B8A  90D8               	bcf	status,0,c
  4905  000B8C  37DF               	rlcf	??_printf& (0+255),f,b
  4906  000B8E  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4907  000B90  0100               	movlb	0	; () banked
  4908  000B92  90D8               	bcf	status,0,c
  4909  000B94  37DF               	rlcf	??_printf& (0+255),f,b
  4910  000B96  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4911  000B98  0EC3               	movlw	low _dpowers
  4912  000B9A  0100               	movlb	0	; () banked
  4913  000B9C  25DF               	addwf	??_printf& (0+255),w,b
  4914  000B9E  6EF6               	movwf	tblptrl,c
  4915  000BA0  0EFD               	movlw	high _dpowers
  4916  000BA2  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  4917  000BA4  6EF7               	movwf	tblptrh,c
  4918  000BA6                     	if	0	;There are less than 3 active tblptr bytes
  4919  000BA6                     	endif
  4920  000BA6  0009               	tblrd		*+
  4921  000BA8  CFF5 F084          	movff	tablat,___lldiv@divisor
  4922  000BAC  0009               	tblrd		*+
  4923  000BAE  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4924  000BB2  0009               	tblrd		*+
  4925  000BB4  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4926  000BB8  000A               	tblrd		*-
  4927  000BBA  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4928  000BBE  C112  F080         	movff	printf@val,___lldiv@dividend
  4929  000BC2  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4930  000BC6  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4931  000BCA  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4932  000BCE  ECC8  F022         	call	___lldiv	;wreg free
  4933  000BD2  C080  F08D         	movff	?___lldiv,___llmod@dividend
  4934  000BD6  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  4935  000BDA  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  4936  000BDE  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  4937  000BE2  0E0A               	movlw	10
  4938  000BE4  0100               	movlb	0	; () banked
  4939  000BE6  6F91               	movwf	___llmod@divisor& (0+255),b
  4940  000BE8  0E00               	movlw	0
  4941  000BEA  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4942  000BEC  0E00               	movlw	0
  4943  000BEE  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4944  000BF0  0E00               	movlw	0
  4945  000BF2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4946  000BF4  EC1D  F024         	call	___llmod	;wreg free
  4947  000BF8  0100               	movlb	0	; () banked
  4948  000BFA  518D               	movf	?___llmod& (0+255),w,b
  4949  000BFC  0F30               	addlw	48
  4950  000BFE  0101               	movlb	1	; () banked
  4951  000C00  6F1D               	movwf	printf@c& (0+255),b
  4952                           
  4953                           ;doprnt.c: 1491: break;
  4954  000C02  D044               	goto	l5402
  4955  000C04                     l5394:
  4956                           
  4957                           ; BSR set to: 1
  4958                           ;doprnt.c: 1499: {
  4959                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4960  000C04  C112  F080         	movff	printf@val,___lldiv@dividend
  4961  000C08  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4962  000C0C  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4963  000C10  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4964  000C14  C10A  F0DF         	movff	printf@prec,??_printf
  4965  000C18  C10B  F0E0         	movff	printf@prec+1,??_printf+1
  4966  000C1C  0100               	movlb	0	; () banked
  4967  000C1E  90D8               	bcf	status,0,c
  4968  000C20  37DF               	rlcf	??_printf& (0+255),f,b
  4969  000C22  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4970  000C24  0100               	movlb	0	; () banked
  4971  000C26  90D8               	bcf	status,0,c
  4972  000C28  37DF               	rlcf	??_printf& (0+255),f,b
  4973  000C2A  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4974  000C2C  0E39               	movlw	low _hexpowers
  4975  000C2E  0100               	movlb	0	; () banked
  4976  000C30  25DF               	addwf	??_printf& (0+255),w,b
  4977  000C32  6EF6               	movwf	tblptrl,c
  4978  000C34  0EFE               	movlw	high _hexpowers
  4979  000C36  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  4980  000C38  6EF7               	movwf	tblptrh,c
  4981  000C3A                     	if	0	;There are less than 3 active tblptr bytes
  4982  000C3A                     	endif
  4983  000C3A  0009               	tblrd		*+
  4984  000C3C  CFF5 F084          	movff	tablat,___lldiv@divisor
  4985  000C40  0009               	tblrd		*+
  4986  000C42  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4987  000C46  0009               	tblrd		*+
  4988  000C48  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4989  000C4C  000A               	tblrd		*-
  4990  000C4E  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4991  000C52  ECC8  F022         	call	___lldiv	;wreg free
  4992  000C56  0100               	movlb	0	; () banked
  4993  000C58  5180               	movf	?___lldiv& (0+255),w,b
  4994  000C5A  0B0F               	andlw	15
  4995  000C5C  0101               	movlb	1	; () banked
  4996  000C5E  6F05               	movwf	printf@idx& (0+255),b
  4997                           
  4998                           ; BSR set to: 1
  4999                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5000  000C60  0101               	movlb	1	; () banked
  5001  000C62  5105               	movf	printf@idx& (0+255),w,b
  5002  000C64  0D01               	mullw	1
  5003  000C66  0E1F               	movlw	low STR_24
  5004  000C68  24F3               	addwf	prodl,w,c
  5005  000C6A  6EF6               	movwf	tblptrl,c
  5006  000C6C  0EFF               	movlw	high STR_24
  5007  000C6E  20F4               	addwfc	prodh,w,c
  5008  000C70  6EF7               	movwf	tblptrh,c
  5009  000C72                     	if	0	;There are less than 3 active tblptr bytes
  5010  000C72                     	endif
  5011  000C72  0008               	tblrd		*
  5012  000C74  CFF5 F11D          	movff	tablat,printf@c
  5013                           
  5014                           ; BSR set to: 1
  5015                           ;doprnt.c: 1523: }
  5016                           
  5017                           ;doprnt.c: 1508: }
  5018                           ;doprnt.c: 1510: break;
  5019  000C78  D009               	goto	l5402
  5020  000C7A                     l5400:
  5021                           
  5022                           ; BSR set to: 1
  5023  000C7A  0101               	movlb	1	; () banked
  5024  000C7C  511B               	movf	printf@flag& (0+255),w,b
  5025  000C7E  0B80               	andlw	128
  5026                           
  5027                           ; Switch size 1, requested type "space"
  5028                           ; Number of cases is 2, Range of values is 0 to 128
  5029                           ; switch strategies available:
  5030                           ; Name         Instructions Cycles
  5031                           ; simple_byte            7     4 (average)
  5032                           ;	Chosen strategy is simple_byte
  5033  000C80  0A00               	xorlw	0	; case 0
  5034  000C82  B4D8               	btfsc	status,2,c
  5035  000C84  D77D               	goto	l5392
  5036  000C86  0A80               	xorlw	128	; case 128
  5037  000C88  B4D8               	btfsc	status,2,c
  5038  000C8A  D7BC               	goto	l5394
  5039  000C8C                     l5402:
  5040                           
  5041                           ; BSR set to: 1
  5042                           ;doprnt.c: 1524: (putch(c) );
  5043  000C8C  0101               	movlb	1	; () banked
  5044  000C8E  511D               	movf	printf@c& (0+255),w,b
  5045  000C90  ECAF  F028         	call	_putch
  5046  000C94                     l5404:
  5047  000C94  0101               	movlb	1	; () banked
  5048  000C96  070A               	decf	printf@prec& (0+255),f,b
  5049  000C98  A0D8               	btfss	status,0,c
  5050  000C9A  070B               	decf	(printf@prec+1)& (0+255),f,b
  5051  000C9C  0101               	movlb	1	; () banked
  5052  000C9E  290A               	incf	printf@prec& (0+255),w,b
  5053  000CA0  E1EC               	bnz	l5400
  5054  000CA2  0101               	movlb	1	; () banked
  5055  000CA4  290B               	incf	(printf@prec+1)& (0+255),w,b
  5056  000CA6  A4D8               	btfss	status,2,c
  5057  000CA8  D7E8               	goto	l5400
  5058  000CAA                     l5406:
  5059  000CAA  C0D5  FFF6         	movff	printf@f,tblptrl
  5060  000CAE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5061  000CB2  0100               	movlb	0	; () banked
  5062  000CB4  4BD5               	infsnz	printf@f& (0+255),f,b
  5063  000CB6  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5064  000CB8                     	if	0	;tblptru may be non-zero
  5065  000CB8                     	endif
  5066  000CB8                     	if	0	;tblptru may be non-zero
  5067  000CB8                     	endif
  5068  000CB8  0008               	tblrd		*
  5069  000CBA  CFF5 F11D          	movff	tablat,printf@c
  5070  000CBE  0101               	movlb	1	; () banked
  5071  000CC0  511D               	movf	printf@c& (0+255),w,b
  5072  000CC2  B4D8               	btfsc	status,2,c
  5073  000CC4  0012               	return	
  5074  000CC6  EF11  F000         	goto	l5084
  5075  000CCA                     __end_of_printf:
  5076                           	opt stack 0
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           postinc0	equ	0xFEE
  5084                           wreg	equ	0xFE8
  5085                           postdec1	equ	0xFE5
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           fsr2h	equ	0xFDA
  5091                           fsr2l	equ	0xFD9
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function _scale *****************
  5095 ;; Defined at:
  5096 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  scl             1    wreg     char 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  scl             1   54[BANK0 ] char 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  3   48[BANK0 ] char 
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5110 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;Total ram usage:        7 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    8
  5117 ;; This function calls:
  5118 ;;		___awdiv
  5119 ;;		___awmod
  5120 ;;		___ftmul
  5121 ;;		___wmul
  5122 ;; This function is called by:
  5123 ;;		_printf
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           	psect	text5
  5128  001752                     __ptext5:
  5129                           	opt stack 0
  5130  001752                     _scale:
  5131                           	opt stack 20
  5132                           
  5133                           ;incstack = 0
  5134                           ;scale@scl stored from wreg
  5135  001752  0100               	movlb	0	; () banked
  5136  001754  6FB6               	movwf	scale@scl& (0+255),b
  5137                           
  5138                           ;doprnt.c: 428: if(scl < 0) {
  5139  001756  0100               	movlb	0	; () banked
  5140  001758  AFB6               	btfss	scale@scl& (0+255),7,b
  5141  00175A  D12A               	goto	l4692
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 429: scl = -scl;
  5145  00175C  0100               	movlb	0	; () banked
  5146  00175E  6DB6               	negf	scale@scl& (0+255),b
  5147                           
  5148                           ;doprnt.c: 430: if(scl>=110)
  5149  001760  0100               	movlb	0	; () banked
  5150  001762  51B6               	movf	scale@scl& (0+255),w,b
  5151  001764  0A80               	xorlw	128
  5152  001766  0F12               	addlw	-238
  5153  001768  A0D8               	btfss	status,0,c
  5154  00176A  D0AC               	goto	l4682
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5158  00176C  0E00               	movlw	0
  5159  00176E  0100               	movlb	0	; () banked
  5160  001770  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5161  001772  0E03               	movlw	3
  5162  001774  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5163  001776  0E00               	movlw	0
  5164  001778  0100               	movlb	0	; () banked
  5165  00177A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5166  00177C  0E0A               	movlw	10
  5167  00177E  6F88               	movwf	___awdiv@divisor& (0+255),b
  5168  001780  0E00               	movlw	0
  5169  001782  0100               	movlb	0	; () banked
  5170  001784  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5171  001786  0E64               	movlw	100
  5172  001788  6F82               	movwf	___awmod@divisor& (0+255),b
  5173  00178A  0100               	movlb	0	; () banked
  5174  00178C  51B6               	movf	scale@scl& (0+255),w,b
  5175  00178E  0100               	movlb	0	; () banked
  5176  001790  6F80               	movwf	___awmod@dividend& (0+255),b
  5177  001792  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5178  001794  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5179  001796  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5180  001798  EC7D  F023         	call	___awmod	;wreg free
  5181  00179C  C080  F086         	movff	?___awmod,___awdiv@dividend
  5182  0017A0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5183  0017A4  EC69  F022         	call	___awdiv	;wreg free
  5184  0017A8  0E09               	movlw	9
  5185  0017AA  0100               	movlb	0	; () banked
  5186  0017AC  2586               	addwf	?___awdiv& (0+255),w,b
  5187  0017AE  0100               	movlb	0	; () banked
  5188  0017B0  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5189  0017B2  0E00               	movlw	0
  5190  0017B4  0100               	movlb	0	; () banked
  5191  0017B6  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5192  0017B8  0100               	movlb	0	; () banked
  5193  0017BA  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5194  0017BC  EC26  F028         	call	___wmul	;wreg free
  5195  0017C0  0EEB               	movlw	low __npowers_
  5196  0017C2  0100               	movlb	0	; () banked
  5197  0017C4  258E               	addwf	?___wmul& (0+255),w,b
  5198  0017C6  6EF6               	movwf	tblptrl,c
  5199  0017C8  0EFD               	movlw	high __npowers_
  5200  0017CA  0100               	movlb	0	; () banked
  5201  0017CC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5202  0017CE  6EF7               	movwf	tblptrh,c
  5203  0017D0                     	if	0	;There are less than 3 active tblptr bytes
  5204  0017D0                     	endif
  5205  0017D0  0009               	tblrd		*+
  5206  0017D2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5207  0017D6  0009               	tblrd		*+
  5208  0017D8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5209  0017DC  000A               	tblrd		*-
  5210  0017DE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5211  0017E2  0E00               	movlw	0
  5212  0017E4  0100               	movlb	0	; () banked
  5213  0017E6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5214  0017E8  0E64               	movlw	100
  5215  0017EA  6F88               	movwf	___awdiv@divisor& (0+255),b
  5216  0017EC  0100               	movlb	0	; () banked
  5217  0017EE  51B6               	movf	scale@scl& (0+255),w,b
  5218  0017F0  0100               	movlb	0	; () banked
  5219  0017F2  6F86               	movwf	___awdiv@dividend& (0+255),b
  5220  0017F4  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5221  0017F6  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5222  0017F8  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5223  0017FA  EC69  F022         	call	___awdiv	;wreg free
  5224  0017FE  0E12               	movlw	18
  5225  001800  0100               	movlb	0	; () banked
  5226  001802  2586               	addwf	?___awdiv& (0+255),w,b
  5227  001804  0100               	movlb	0	; () banked
  5228  001806  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5229  001808  0E00               	movlw	0
  5230  00180A  0100               	movlb	0	; () banked
  5231  00180C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5232  00180E  0100               	movlb	0	; () banked
  5233  001810  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5234  001812  0E00               	movlw	0
  5235  001814  0100               	movlb	0	; () banked
  5236  001816  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5237  001818  0E03               	movlw	3
  5238  00181A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5239  00181C  EC26  F028         	call	___wmul	;wreg free
  5240  001820  0EEB               	movlw	low __npowers_
  5241  001822  0100               	movlb	0	; () banked
  5242  001824  258E               	addwf	?___wmul& (0+255),w,b
  5243  001826  6EF6               	movwf	tblptrl,c
  5244  001828  0EFD               	movlw	high __npowers_
  5245  00182A  0100               	movlb	0	; () banked
  5246  00182C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5247  00182E  6EF7               	movwf	tblptrh,c
  5248  001830                     	if	0	;There are less than 3 active tblptr bytes
  5249  001830                     	endif
  5250  001830  0009               	tblrd		*+
  5251  001832  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5252  001836  0009               	tblrd		*+
  5253  001838  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5254  00183C  000A               	tblrd		*-
  5255  00183E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5256  001842  EC63  F019         	call	___ftmul	;wreg free
  5257  001846  C0A1  F0B3         	movff	?___ftmul,_scale$1339
  5258  00184A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1339+1
  5259  00184E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1339+2
  5260                           
  5261                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5262  001852  C0B3  F0A1         	movff	_scale$1339,___ftmul@f1
  5263  001856  C0B4  F0A2         	movff	_scale$1339+1,___ftmul@f1+1
  5264  00185A  C0B5  F0A3         	movff	_scale$1339+2,___ftmul@f1+2
  5265  00185E  0E00               	movlw	0
  5266  001860  0100               	movlb	0	; () banked
  5267  001862  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5268  001864  0E03               	movlw	3
  5269  001866  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5270  001868  0E00               	movlw	0
  5271  00186A  0100               	movlb	0	; () banked
  5272  00186C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5273  00186E  0E0A               	movlw	10
  5274  001870  6F82               	movwf	___awmod@divisor& (0+255),b
  5275  001872  0100               	movlb	0	; () banked
  5276  001874  51B6               	movf	scale@scl& (0+255),w,b
  5277  001876  0100               	movlb	0	; () banked
  5278  001878  6F80               	movwf	___awmod@dividend& (0+255),b
  5279  00187A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5280  00187C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5281  00187E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5282  001880  EC7D  F023         	call	___awmod	;wreg free
  5283  001884  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5284  001888  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5285  00188C  EC26  F028         	call	___wmul	;wreg free
  5286  001890  0EEB               	movlw	low __npowers_
  5287  001892  0100               	movlb	0	; () banked
  5288  001894  258E               	addwf	?___wmul& (0+255),w,b
  5289  001896  6EF6               	movwf	tblptrl,c
  5290  001898  0EFD               	movlw	high __npowers_
  5291  00189A  0100               	movlb	0	; () banked
  5292  00189C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5293  00189E  6EF7               	movwf	tblptrh,c
  5294  0018A0                     	if	0	;There are less than 3 active tblptr bytes
  5295  0018A0                     	endif
  5296  0018A0  0009               	tblrd		*+
  5297  0018A2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5298  0018A6  0009               	tblrd		*+
  5299  0018A8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5300  0018AC  000A               	tblrd		*-
  5301  0018AE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5302  0018B2  EC63  F019         	call	___ftmul	;wreg free
  5303  0018B6  C0A1  F0B0         	movff	?___ftmul,?_scale
  5304  0018BA  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  5305  0018BE  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  5306  0018C2  0012               	return	
  5307  0018C4                     l4682:
  5308                           
  5309                           ;doprnt.c: 432: else if(scl > 10)
  5310  0018C4  0100               	movlb	0	; () banked
  5311  0018C6  51B6               	movf	scale@scl& (0+255),w,b
  5312  0018C8  0A80               	xorlw	128
  5313  0018CA  0F75               	addlw	-139
  5314  0018CC  A0D8               	btfss	status,0,c
  5315  0018CE  D05D               	goto	l4688
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5319  0018D0  0E00               	movlw	0
  5320  0018D2  0100               	movlb	0	; () banked
  5321  0018D4  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5322  0018D6  0E0A               	movlw	10
  5323  0018D8  6F88               	movwf	___awdiv@divisor& (0+255),b
  5324  0018DA  0100               	movlb	0	; () banked
  5325  0018DC  51B6               	movf	scale@scl& (0+255),w,b
  5326  0018DE  0100               	movlb	0	; () banked
  5327  0018E0  6F86               	movwf	___awdiv@dividend& (0+255),b
  5328  0018E2  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5329  0018E4  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5330  0018E6  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5331  0018E8  EC69  F022         	call	___awdiv	;wreg free
  5332  0018EC  0E09               	movlw	9
  5333  0018EE  0100               	movlb	0	; () banked
  5334  0018F0  2586               	addwf	?___awdiv& (0+255),w,b
  5335  0018F2  0100               	movlb	0	; () banked
  5336  0018F4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5337  0018F6  0E00               	movlw	0
  5338  0018F8  0100               	movlb	0	; () banked
  5339  0018FA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5340  0018FC  0100               	movlb	0	; () banked
  5341  0018FE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5342  001900  0E00               	movlw	0
  5343  001902  0100               	movlb	0	; () banked
  5344  001904  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5345  001906  0E03               	movlw	3
  5346  001908  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5347  00190A  EC26  F028         	call	___wmul	;wreg free
  5348  00190E  0EEB               	movlw	low __npowers_
  5349  001910  0100               	movlb	0	; () banked
  5350  001912  258E               	addwf	?___wmul& (0+255),w,b
  5351  001914  6EF6               	movwf	tblptrl,c
  5352  001916  0EFD               	movlw	high __npowers_
  5353  001918  0100               	movlb	0	; () banked
  5354  00191A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5355  00191C  6EF7               	movwf	tblptrh,c
  5356  00191E                     	if	0	;There are less than 3 active tblptr bytes
  5357  00191E                     	endif
  5358  00191E  0009               	tblrd		*+
  5359  001920  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5360  001924  0009               	tblrd		*+
  5361  001926  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5362  00192A  000A               	tblrd		*-
  5363  00192C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5364  001930  0E00               	movlw	0
  5365  001932  0100               	movlb	0	; () banked
  5366  001934  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5367  001936  0E03               	movlw	3
  5368  001938  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5369  00193A  0E00               	movlw	0
  5370  00193C  0100               	movlb	0	; () banked
  5371  00193E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5372  001940  0E0A               	movlw	10
  5373  001942  6F82               	movwf	___awmod@divisor& (0+255),b
  5374  001944  0100               	movlb	0	; () banked
  5375  001946  51B6               	movf	scale@scl& (0+255),w,b
  5376  001948  0100               	movlb	0	; () banked
  5377  00194A  6F80               	movwf	___awmod@dividend& (0+255),b
  5378  00194C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5379  00194E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5380  001950  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5381  001952  EC7D  F023         	call	___awmod	;wreg free
  5382  001956  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5383  00195A  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5384  00195E  EC26  F028         	call	___wmul	;wreg free
  5385  001962  0EEB               	movlw	low __npowers_
  5386  001964  0100               	movlb	0	; () banked
  5387  001966  258E               	addwf	?___wmul& (0+255),w,b
  5388  001968  6EF6               	movwf	tblptrl,c
  5389  00196A  0EFD               	movlw	high __npowers_
  5390  00196C  0100               	movlb	0	; () banked
  5391  00196E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5392  001970  6EF7               	movwf	tblptrh,c
  5393  001972                     	if	0	;There are less than 3 active tblptr bytes
  5394  001972                     	endif
  5395  001972  0009               	tblrd		*+
  5396  001974  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5397  001978  0009               	tblrd		*+
  5398  00197A  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5399  00197E  000A               	tblrd		*-
  5400  001980  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5401  001984  EC63  F019         	call	___ftmul	;wreg free
  5402  001988  D796               	goto	L4
  5403  00198A                     l4688:
  5404                           
  5405                           ;doprnt.c: 434: return _npowers_[scl];
  5406  00198A  0100               	movlb	0	; () banked
  5407  00198C  51B6               	movf	scale@scl& (0+255),w,b
  5408  00198E  0D03               	mullw	3
  5409  001990  0EEB               	movlw	low __npowers_
  5410  001992  24F3               	addwf	prodl,w,c
  5411  001994  6EF6               	movwf	tblptrl,c
  5412  001996  0EFD               	movlw	high __npowers_
  5413  001998  20F4               	addwfc	prodh,w,c
  5414  00199A  6EF7               	movwf	tblptrh,c
  5415  00199C                     	if	0	;There are less than 3 active tblptr bytes
  5416  00199C                     	endif
  5417  00199C  0009               	tblrd		*+
  5418  00199E  CFF5 F0B0          	movff	tablat,?_scale
  5419  0019A2  0009               	tblrd		*+
  5420  0019A4  CFF5 F0B1          	movff	tablat,?_scale+1
  5421  0019A8  000A               	tblrd		*-
  5422  0019AA  CFF5 F0B2          	movff	tablat,?_scale+2
  5423                           
  5424                           ; BSR set to: 0
  5425  0019AE  0012               	return	
  5426  0019B0                     l4692:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 435: }
  5430                           ;doprnt.c: 436: if(scl>=110)
  5431  0019B0  0100               	movlb	0	; () banked
  5432  0019B2  51B6               	movf	scale@scl& (0+255),w,b
  5433  0019B4  0A80               	xorlw	128
  5434  0019B6  0F12               	addlw	-238
  5435  0019B8  A0D8               	btfss	status,0,c
  5436  0019BA  D0AC               	goto	l4700
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5440  0019BC  0E00               	movlw	0
  5441  0019BE  0100               	movlb	0	; () banked
  5442  0019C0  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5443  0019C2  0E03               	movlw	3
  5444  0019C4  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5445  0019C6  0E00               	movlw	0
  5446  0019C8  0100               	movlb	0	; () banked
  5447  0019CA  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5448  0019CC  0E0A               	movlw	10
  5449  0019CE  6F88               	movwf	___awdiv@divisor& (0+255),b
  5450  0019D0  0E00               	movlw	0
  5451  0019D2  0100               	movlb	0	; () banked
  5452  0019D4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5453  0019D6  0E64               	movlw	100
  5454  0019D8  6F82               	movwf	___awmod@divisor& (0+255),b
  5455  0019DA  0100               	movlb	0	; () banked
  5456  0019DC  51B6               	movf	scale@scl& (0+255),w,b
  5457  0019DE  0100               	movlb	0	; () banked
  5458  0019E0  6F80               	movwf	___awmod@dividend& (0+255),b
  5459  0019E2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5460  0019E4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5461  0019E6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5462  0019E8  EC7D  F023         	call	___awmod	;wreg free
  5463  0019EC  C080  F086         	movff	?___awmod,___awdiv@dividend
  5464  0019F0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5465  0019F4  EC69  F022         	call	___awdiv	;wreg free
  5466  0019F8  0E09               	movlw	9
  5467  0019FA  0100               	movlb	0	; () banked
  5468  0019FC  2586               	addwf	?___awdiv& (0+255),w,b
  5469  0019FE  0100               	movlb	0	; () banked
  5470  001A00  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5471  001A02  0E00               	movlw	0
  5472  001A04  0100               	movlb	0	; () banked
  5473  001A06  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5474  001A08  0100               	movlb	0	; () banked
  5475  001A0A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5476  001A0C  EC26  F028         	call	___wmul	;wreg free
  5477  001A10  0E12               	movlw	low __powers_
  5478  001A12  0100               	movlb	0	; () banked
  5479  001A14  258E               	addwf	?___wmul& (0+255),w,b
  5480  001A16  6EF6               	movwf	tblptrl,c
  5481  001A18  0EFE               	movlw	high __powers_
  5482  001A1A  0100               	movlb	0	; () banked
  5483  001A1C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5484  001A1E  6EF7               	movwf	tblptrh,c
  5485  001A20                     	if	0	;There are less than 3 active tblptr bytes
  5486  001A20                     	endif
  5487  001A20  0009               	tblrd		*+
  5488  001A22  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5489  001A26  0009               	tblrd		*+
  5490  001A28  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5491  001A2C  000A               	tblrd		*-
  5492  001A2E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5493  001A32  0E00               	movlw	0
  5494  001A34  0100               	movlb	0	; () banked
  5495  001A36  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5496  001A38  0E64               	movlw	100
  5497  001A3A  6F88               	movwf	___awdiv@divisor& (0+255),b
  5498  001A3C  0100               	movlb	0	; () banked
  5499  001A3E  51B6               	movf	scale@scl& (0+255),w,b
  5500  001A40  0100               	movlb	0	; () banked
  5501  001A42  6F86               	movwf	___awdiv@dividend& (0+255),b
  5502  001A44  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5503  001A46  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5504  001A48  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5505  001A4A  EC69  F022         	call	___awdiv	;wreg free
  5506  001A4E  0E12               	movlw	18
  5507  001A50  0100               	movlb	0	; () banked
  5508  001A52  2586               	addwf	?___awdiv& (0+255),w,b
  5509  001A54  0100               	movlb	0	; () banked
  5510  001A56  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5511  001A58  0E00               	movlw	0
  5512  001A5A  0100               	movlb	0	; () banked
  5513  001A5C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5514  001A5E  0100               	movlb	0	; () banked
  5515  001A60  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5516  001A62  0E00               	movlw	0
  5517  001A64  0100               	movlb	0	; () banked
  5518  001A66  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5519  001A68  0E03               	movlw	3
  5520  001A6A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5521  001A6C  EC26  F028         	call	___wmul	;wreg free
  5522  001A70  0E12               	movlw	low __powers_
  5523  001A72  0100               	movlb	0	; () banked
  5524  001A74  258E               	addwf	?___wmul& (0+255),w,b
  5525  001A76  6EF6               	movwf	tblptrl,c
  5526  001A78  0EFE               	movlw	high __powers_
  5527  001A7A  0100               	movlb	0	; () banked
  5528  001A7C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5529  001A7E  6EF7               	movwf	tblptrh,c
  5530  001A80                     	if	0	;There are less than 3 active tblptr bytes
  5531  001A80                     	endif
  5532  001A80  0009               	tblrd		*+
  5533  001A82  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5534  001A86  0009               	tblrd		*+
  5535  001A88  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5536  001A8C  000A               	tblrd		*-
  5537  001A8E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5538  001A92  EC63  F019         	call	___ftmul	;wreg free
  5539  001A96  C0A1  F0B3         	movff	?___ftmul,_scale$1339
  5540  001A9A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1339+1
  5541  001A9E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1339+2
  5542                           
  5543                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5544  001AA2  C0B3  F0A1         	movff	_scale$1339,___ftmul@f1
  5545  001AA6  C0B4  F0A2         	movff	_scale$1339+1,___ftmul@f1+1
  5546  001AAA  C0B5  F0A3         	movff	_scale$1339+2,___ftmul@f1+2
  5547  001AAE  0E00               	movlw	0
  5548  001AB0  0100               	movlb	0	; () banked
  5549  001AB2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5550  001AB4  0E03               	movlw	3
  5551  001AB6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5552  001AB8  0E00               	movlw	0
  5553  001ABA  0100               	movlb	0	; () banked
  5554  001ABC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5555  001ABE  0E0A               	movlw	10
  5556  001AC0  6F82               	movwf	___awmod@divisor& (0+255),b
  5557  001AC2  0100               	movlb	0	; () banked
  5558  001AC4  51B6               	movf	scale@scl& (0+255),w,b
  5559  001AC6  0100               	movlb	0	; () banked
  5560  001AC8  6F80               	movwf	___awmod@dividend& (0+255),b
  5561  001ACA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5562  001ACC  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5563  001ACE  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5564  001AD0  EC7D  F023         	call	___awmod	;wreg free
  5565  001AD4  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5566  001AD8  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5567  001ADC  EC26  F028         	call	___wmul	;wreg free
  5568  001AE0  0E12               	movlw	low __powers_
  5569  001AE2  0100               	movlb	0	; () banked
  5570  001AE4  258E               	addwf	?___wmul& (0+255),w,b
  5571  001AE6  6EF6               	movwf	tblptrl,c
  5572  001AE8  0EFE               	movlw	high __powers_
  5573  001AEA  0100               	movlb	0	; () banked
  5574  001AEC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5575  001AEE  6EF7               	movwf	tblptrh,c
  5576  001AF0                     	if	0	;There are less than 3 active tblptr bytes
  5577  001AF0                     	endif
  5578  001AF0  0009               	tblrd		*+
  5579  001AF2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5580  001AF6  0009               	tblrd		*+
  5581  001AF8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5582  001AFC  000A               	tblrd		*-
  5583  001AFE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5584  001B02  EC63  F019         	call	___ftmul	;wreg free
  5585  001B06  C0A1  F0B0         	movff	?___ftmul,?_scale
  5586  001B0A  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  5587  001B0E  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  5588  001B12  0012               	return	
  5589  001B14                     l4700:
  5590                           
  5591                           ;doprnt.c: 438: else if(scl > 10)
  5592  001B14  0100               	movlb	0	; () banked
  5593  001B16  51B6               	movf	scale@scl& (0+255),w,b
  5594  001B18  0A80               	xorlw	128
  5595  001B1A  0F75               	addlw	-139
  5596  001B1C  A0D8               	btfss	status,0,c
  5597  001B1E  D05D               	goto	l4706
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5601  001B20  0E00               	movlw	0
  5602  001B22  0100               	movlb	0	; () banked
  5603  001B24  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5604  001B26  0E0A               	movlw	10
  5605  001B28  6F88               	movwf	___awdiv@divisor& (0+255),b
  5606  001B2A  0100               	movlb	0	; () banked
  5607  001B2C  51B6               	movf	scale@scl& (0+255),w,b
  5608  001B2E  0100               	movlb	0	; () banked
  5609  001B30  6F86               	movwf	___awdiv@dividend& (0+255),b
  5610  001B32  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5611  001B34  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5612  001B36  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5613  001B38  EC69  F022         	call	___awdiv	;wreg free
  5614  001B3C  0E09               	movlw	9
  5615  001B3E  0100               	movlb	0	; () banked
  5616  001B40  2586               	addwf	?___awdiv& (0+255),w,b
  5617  001B42  0100               	movlb	0	; () banked
  5618  001B44  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5619  001B46  0E00               	movlw	0
  5620  001B48  0100               	movlb	0	; () banked
  5621  001B4A  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5622  001B4C  0100               	movlb	0	; () banked
  5623  001B4E  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5624  001B50  0E00               	movlw	0
  5625  001B52  0100               	movlb	0	; () banked
  5626  001B54  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5627  001B56  0E03               	movlw	3
  5628  001B58  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5629  001B5A  EC26  F028         	call	___wmul	;wreg free
  5630  001B5E  0E12               	movlw	low __powers_
  5631  001B60  0100               	movlb	0	; () banked
  5632  001B62  258E               	addwf	?___wmul& (0+255),w,b
  5633  001B64  6EF6               	movwf	tblptrl,c
  5634  001B66  0EFE               	movlw	high __powers_
  5635  001B68  0100               	movlb	0	; () banked
  5636  001B6A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5637  001B6C  6EF7               	movwf	tblptrh,c
  5638  001B6E                     	if	0	;There are less than 3 active tblptr bytes
  5639  001B6E                     	endif
  5640  001B6E  0009               	tblrd		*+
  5641  001B70  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5642  001B74  0009               	tblrd		*+
  5643  001B76  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5644  001B7A  000A               	tblrd		*-
  5645  001B7C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5646  001B80  0E00               	movlw	0
  5647  001B82  0100               	movlb	0	; () banked
  5648  001B84  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5649  001B86  0E03               	movlw	3
  5650  001B88  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5651  001B8A  0E00               	movlw	0
  5652  001B8C  0100               	movlb	0	; () banked
  5653  001B8E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5654  001B90  0E0A               	movlw	10
  5655  001B92  6F82               	movwf	___awmod@divisor& (0+255),b
  5656  001B94  0100               	movlb	0	; () banked
  5657  001B96  51B6               	movf	scale@scl& (0+255),w,b
  5658  001B98  0100               	movlb	0	; () banked
  5659  001B9A  6F80               	movwf	___awmod@dividend& (0+255),b
  5660  001B9C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5661  001B9E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5662  001BA0  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5663  001BA2  EC7D  F023         	call	___awmod	;wreg free
  5664  001BA6  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5665  001BAA  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5666  001BAE  EC26  F028         	call	___wmul	;wreg free
  5667  001BB2  0E12               	movlw	low __powers_
  5668  001BB4  0100               	movlb	0	; () banked
  5669  001BB6  258E               	addwf	?___wmul& (0+255),w,b
  5670  001BB8  6EF6               	movwf	tblptrl,c
  5671  001BBA  0EFE               	movlw	high __powers_
  5672  001BBC  0100               	movlb	0	; () banked
  5673  001BBE  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5674  001BC0  6EF7               	movwf	tblptrh,c
  5675  001BC2                     	if	0	;There are less than 3 active tblptr bytes
  5676  001BC2                     	endif
  5677  001BC2  0009               	tblrd		*+
  5678  001BC4  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5679  001BC8  0009               	tblrd		*+
  5680  001BCA  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5681  001BCE  000A               	tblrd		*-
  5682  001BD0  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5683  001BD4  EC63  F019         	call	___ftmul	;wreg free
  5684  001BD8  D796               	goto	L5
  5685  001BDA                     l4706:
  5686                           
  5687                           ;doprnt.c: 440: return _powers_[scl];
  5688  001BDA  0100               	movlb	0	; () banked
  5689  001BDC  51B6               	movf	scale@scl& (0+255),w,b
  5690  001BDE  0D03               	mullw	3
  5691  001BE0  0E12               	movlw	low __powers_
  5692  001BE2  24F3               	addwf	prodl,w,c
  5693  001BE4  6EF6               	movwf	tblptrl,c
  5694  001BE6  0EFE               	movlw	high __powers_
  5695  001BE8  20F4               	addwfc	prodh,w,c
  5696  001BEA  6EF7               	movwf	tblptrh,c
  5697  001BEC                     	if	0	;There are less than 3 active tblptr bytes
  5698  001BEC                     	endif
  5699  001BEC  0009               	tblrd		*+
  5700  001BEE  CFF5 F0B0          	movff	tablat,?_scale
  5701  001BF2  0009               	tblrd		*+
  5702  001BF4  CFF5 F0B1          	movff	tablat,?_scale+1
  5703  001BF8  000A               	tblrd		*-
  5704  001BFA  CFF5 F0B2          	movff	tablat,?_scale+2
  5705  001BFE  0012               	return	
  5706  001C00                     __end_of_scale:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           postdec1	equ	0xFE5
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _putch *****************
  5726 ;; Defined at:
  5727 ;;		line 35 in file "lcd.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  data            1    wreg     unsigned char 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  data            1    4[BANK0 ] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;Total ram usage:        1 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    9
  5748 ;; This function calls:
  5749 ;;		_lcdNewline
  5750 ;;		_lcdNibble
  5751 ;; This function is called by:
  5752 ;;		_printf
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text6
  5757  00515E                     __ptext6:
  5758                           	opt stack 0
  5759  00515E                     _putch:
  5760                           	opt stack 19
  5761                           
  5762                           ;incstack = 0
  5763                           ;putch@data stored from wreg
  5764  00515E  0100               	movlb	0	; () banked
  5765  005160  6F84               	movwf	putch@data& (0+255),b
  5766                           
  5767                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5768  005162  0E0A               	movlw	10
  5769  005164  0100               	movlb	0	; () banked
  5770  005166  1984               	xorwf	putch@data& (0+255),w,b
  5771  005168  A4D8               	btfss	status,2,c
  5772  00516A  D003               	goto	l186
  5773                           
  5774                           ; BSR set to: 0
  5775  00516C  EC24  F029         	call	_lcdNewline	;wreg free
  5776  005170  0012               	return	
  5777  005172                     l186:
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;lcd.c: 37: else
  5781                           ;lcd.c: 38: {
  5782                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5783  005172  848C               	bsf	3980,2,c	;volatile
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5787  005174  0E74               	movlw	116
  5788  005176                     u7807:
  5789  005176  2EE8               	decfsz	wreg,f,c
  5790  005178  D7FE               	bra	u7807
  5791  00517A  D000               	nop2	
  5792                           
  5793                           ;lcd.c: 41: lcdNibble(data);
  5794  00517C  0100               	movlb	0	; () banked
  5795  00517E  5184               	movf	putch@data& (0+255),w,b
  5796  005180  ECB9  F025         	call	_lcdNibble
  5797  005184  0012               	return	
  5798  005186                     __end_of_putch:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           postdec1	equ	0xFE5
  5809                           fsr1l	equ	0xFE1
  5810                           indf2	equ	0xFDF
  5811                           postinc2	equ	0xFDE
  5812                           postdec2	equ	0xFDD
  5813                           fsr2h	equ	0xFDA
  5814                           fsr2l	equ	0xFD9
  5815                           status	equ	0xFD8
  5816                           
  5817 ;; *************** function _lcdNewline *****************
  5818 ;; Defined at:
  5819 ;;		line 78 in file "lcd.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;		None
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;		None
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  1    wreg      void 
  5826 ;; Registers used:
  5827 ;;		wreg, status,2, status,0, cstack
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;Total ram usage:        0 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    8
  5840 ;; This function calls:
  5841 ;;		_lcdInst
  5842 ;; This function is called by:
  5843 ;;		_putch
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text7
  5848  005248                     __ptext7:
  5849                           	opt stack 0
  5850  005248                     _lcdNewline:
  5851                           	opt stack 19
  5852                           
  5853                           ;lcd.c: 79: lcdInst(0b11000000);
  5854                           
  5855                           ;incstack = 0
  5856  005248  0EC0               	movlw	192
  5857  00524A  EC9A  F028         	call	_lcdInst
  5858  00524E  0012               	return		;funcret
  5859  005250                     __end_of_lcdNewline:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           postdec1	equ	0xFE5
  5870                           fsr1l	equ	0xFE1
  5871                           indf2	equ	0xFDF
  5872                           postinc2	equ	0xFDE
  5873                           postdec2	equ	0xFDD
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878 ;; *************** function _isdigit *****************
  5879 ;; Defined at:
  5880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;  c               1    wreg     unsigned char 
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  c               1    2[BANK0 ] unsigned char 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;		None               void
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, status,0
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;Total ram usage:        3 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    6
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_printf
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text8
  5909  00510A                     __ptext8:
  5910                           	opt stack 0
  5911  00510A                     _isdigit:
  5912                           	opt stack 22
  5913                           
  5914                           ;incstack = 0
  5915                           ;isdigit@c stored from wreg
  5916  00510A  0100               	movlb	0	; () banked
  5917  00510C  6F82               	movwf	isdigit@c& (0+255),b
  5918  00510E  0E00               	movlw	0
  5919  005110  0100               	movlb	0	; () banked
  5920  005112  6F81               	movwf	_isdigit$966& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923  005114  0E3A               	movlw	58
  5924  005116  0100               	movlb	0	; () banked
  5925  005118  6182               	cpfslt	isdigit@c& (0+255),b
  5926  00511A  D007               	goto	l4718
  5927                           
  5928                           ; BSR set to: 0
  5929  00511C  0E2F               	movlw	47
  5930  00511E  0100               	movlb	0	; () banked
  5931  005120  6582               	cpfsgt	isdigit@c& (0+255),b
  5932  005122  D003               	goto	l4718
  5933                           
  5934                           ; BSR set to: 0
  5935  005124  0E01               	movlw	1
  5936  005126  0100               	movlb	0	; () banked
  5937  005128  6F81               	movwf	_isdigit$966& (0+255),b
  5938  00512A                     l4718:
  5939                           
  5940                           ; BSR set to: 0
  5941  00512A  C081  F080         	movff	_isdigit$966,??_isdigit
  5942  00512E  0100               	movlb	0	; () banked
  5943  005130  3180               	rrcf	??_isdigit& (0+255),w,b
  5944  005132  0012               	return	
  5945  005134                     __end_of_isdigit:
  5946                           	opt stack 0
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           postinc0	equ	0xFEE
  5954                           wreg	equ	0xFE8
  5955                           postdec1	equ	0xFE5
  5956                           fsr1l	equ	0xFE1
  5957                           indf2	equ	0xFDF
  5958                           postinc2	equ	0xFDE
  5959                           postdec2	equ	0xFDD
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _fround *****************
  5965 ;; Defined at:
  5966 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  prec            1    wreg     unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  prec            1   57[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  3   48[BANK0 ] unsigned char 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5980 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;Total ram usage:       10 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    8
  5987 ;; This function calls:
  5988 ;;		___awdiv
  5989 ;;		___awmod
  5990 ;;		___ftmul
  5991 ;;		___wmul
  5992 ;; This function is called by:
  5993 ;;		_printf
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text9
  5998  00238C                     __ptext9:
  5999                           	opt stack 0
  6000  00238C                     _fround:
  6001                           	opt stack 20
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;incstack = 0
  6005                           ;fround@prec stored from wreg
  6006  00238C  0100               	movlb	0	; () banked
  6007  00238E  6FB9               	movwf	fround@prec& (0+255),b
  6008                           
  6009                           ;doprnt.c: 413: if(prec>=110)
  6010  002390  0E6D               	movlw	109
  6011  002392  0100               	movlb	0	; () banked
  6012  002394  65B9               	cpfsgt	fround@prec& (0+255),b
  6013  002396  D0BA               	goto	l4660
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6017  002398  0E00               	movlw	0
  6018  00239A  0100               	movlb	0	; () banked
  6019  00239C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6020  00239E  0E03               	movlw	3
  6021  0023A0  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6022  0023A2  0E00               	movlw	0
  6023  0023A4  0100               	movlb	0	; () banked
  6024  0023A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6025  0023A8  0E0A               	movlw	10
  6026  0023AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  6027  0023AC  0E00               	movlw	0
  6028  0023AE  0100               	movlb	0	; () banked
  6029  0023B0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6030  0023B2  0E64               	movlw	100
  6031  0023B4  6F82               	movwf	___awmod@divisor& (0+255),b
  6032  0023B6  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6033  0023BA  0100               	movlb	0	; () banked
  6034  0023BC  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6035  0023BE  EC7D  F023         	call	___awmod	;wreg free
  6036  0023C2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6037  0023C6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6038  0023CA  EC69  F022         	call	___awdiv	;wreg free
  6039  0023CE  0E09               	movlw	9
  6040  0023D0  0100               	movlb	0	; () banked
  6041  0023D2  2586               	addwf	?___awdiv& (0+255),w,b
  6042  0023D4  0100               	movlb	0	; () banked
  6043  0023D6  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6044  0023D8  0E00               	movlw	0
  6045  0023DA  0100               	movlb	0	; () banked
  6046  0023DC  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6047  0023DE  0100               	movlb	0	; () banked
  6048  0023E0  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6049  0023E2  EC26  F028         	call	___wmul	;wreg free
  6050  0023E6  0EEB               	movlw	low __npowers_
  6051  0023E8  0100               	movlb	0	; () banked
  6052  0023EA  258E               	addwf	?___wmul& (0+255),w,b
  6053  0023EC  6EF6               	movwf	tblptrl,c
  6054  0023EE  0EFD               	movlw	high __npowers_
  6055  0023F0  0100               	movlb	0	; () banked
  6056  0023F2  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6057  0023F4  6EF7               	movwf	tblptrh,c
  6058  0023F6                     	if	0	;There are less than 3 active tblptr bytes
  6059  0023F6                     	endif
  6060  0023F6  0009               	tblrd		*+
  6061  0023F8  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6062  0023FC  0009               	tblrd		*+
  6063  0023FE  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6064  002402  000A               	tblrd		*-
  6065  002404  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6066  002408  0E00               	movlw	0
  6067  00240A  0100               	movlb	0	; () banked
  6068  00240C  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6069  00240E  0E64               	movlw	100
  6070  002410  6F88               	movwf	___awdiv@divisor& (0+255),b
  6071  002412  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  6072  002416  0100               	movlb	0	; () banked
  6073  002418  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6074  00241A  EC69  F022         	call	___awdiv	;wreg free
  6075  00241E  0E12               	movlw	18
  6076  002420  0100               	movlb	0	; () banked
  6077  002422  2586               	addwf	?___awdiv& (0+255),w,b
  6078  002424  0100               	movlb	0	; () banked
  6079  002426  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6080  002428  0E00               	movlw	0
  6081  00242A  0100               	movlb	0	; () banked
  6082  00242C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6083  00242E  0100               	movlb	0	; () banked
  6084  002430  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6085  002432  0E00               	movlw	0
  6086  002434  0100               	movlb	0	; () banked
  6087  002436  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6088  002438  0E03               	movlw	3
  6089  00243A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6090  00243C  EC26  F028         	call	___wmul	;wreg free
  6091  002440  0EEB               	movlw	low __npowers_
  6092  002442  0100               	movlb	0	; () banked
  6093  002444  258E               	addwf	?___wmul& (0+255),w,b
  6094  002446  6EF6               	movwf	tblptrl,c
  6095  002448  0EFD               	movlw	high __npowers_
  6096  00244A  0100               	movlb	0	; () banked
  6097  00244C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6098  00244E  6EF7               	movwf	tblptrh,c
  6099  002450                     	if	0	;There are less than 3 active tblptr bytes
  6100  002450                     	endif
  6101  002450  0009               	tblrd		*+
  6102  002452  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6103  002456  0009               	tblrd		*+
  6104  002458  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6105  00245C  000A               	tblrd		*-
  6106  00245E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6107  002462  EC63  F019         	call	___ftmul	;wreg free
  6108  002466  C0A1  F0B6         	movff	?___ftmul,_fround$1337
  6109  00246A  C0A2  F0B7         	movff	?___ftmul+1,_fround$1337+1
  6110  00246E  C0A3  F0B8         	movff	?___ftmul+2,_fround$1337+2
  6111                           
  6112                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6113  002472  0E00               	movlw	0
  6114  002474  0100               	movlb	0	; () banked
  6115  002476  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6116  002478  0E03               	movlw	3
  6117  00247A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6118  00247C  0E00               	movlw	0
  6119  00247E  0100               	movlb	0	; () banked
  6120  002480  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6121  002482  0E0A               	movlw	10
  6122  002484  6F82               	movwf	___awmod@divisor& (0+255),b
  6123  002486  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6124  00248A  0100               	movlb	0	; () banked
  6125  00248C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6126  00248E  EC7D  F023         	call	___awmod	;wreg free
  6127  002492  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6128  002496  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6129  00249A  EC26  F028         	call	___wmul	;wreg free
  6130  00249E  0EEB               	movlw	low __npowers_
  6131  0024A0  0100               	movlb	0	; () banked
  6132  0024A2  258E               	addwf	?___wmul& (0+255),w,b
  6133  0024A4  6EF6               	movwf	tblptrl,c
  6134  0024A6  0EFD               	movlw	high __npowers_
  6135  0024A8  0100               	movlb	0	; () banked
  6136  0024AA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6137  0024AC  6EF7               	movwf	tblptrh,c
  6138  0024AE                     	if	0	;There are less than 3 active tblptr bytes
  6139  0024AE                     	endif
  6140  0024AE  0009               	tblrd		*+
  6141  0024B0  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6142  0024B4  0009               	tblrd		*+
  6143  0024B6  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6144  0024BA  000A               	tblrd		*-
  6145  0024BC  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6146  0024C0  C0B6  F0A1         	movff	_fround$1337,___ftmul@f1
  6147  0024C4  C0B7  F0A2         	movff	_fround$1337+1,___ftmul@f1+1
  6148  0024C8  C0B8  F0A3         	movff	_fround$1337+2,___ftmul@f1+2
  6149  0024CC  EC63  F019         	call	___ftmul	;wreg free
  6150  0024D0  C0A1  F0B3         	movff	?___ftmul,_fround$1338
  6151  0024D4  C0A2  F0B4         	movff	?___ftmul+1,_fround$1338+1
  6152  0024D8  C0A3  F0B5         	movff	?___ftmul+2,_fround$1338+2
  6153                           
  6154                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6155  0024DC  C0B3  F0A1         	movff	_fround$1338,___ftmul@f1
  6156  0024E0  C0B4  F0A2         	movff	_fround$1338+1,___ftmul@f1+1
  6157  0024E4  C0B5  F0A3         	movff	_fround$1338+2,___ftmul@f1+2
  6158  0024E8  0E00               	movlw	0
  6159  0024EA  0100               	movlb	0	; () banked
  6160  0024EC  6FA4               	movwf	___ftmul@f2& (0+255),b
  6161  0024EE  0E00               	movlw	0
  6162  0024F0  0100               	movlb	0	; () banked
  6163  0024F2  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6164  0024F4  0E3F               	movlw	63
  6165  0024F6  0100               	movlb	0	; () banked
  6166  0024F8  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6167  0024FA  EC63  F019         	call	___ftmul	;wreg free
  6168  0024FE  C0A1  F0B0         	movff	?___ftmul,?_fround
  6169  002502  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  6170  002506  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  6171  00250A  0012               	return	
  6172  00250C                     l4660:
  6173                           
  6174                           ;doprnt.c: 415: else if(prec > 10)
  6175  00250C  0E0A               	movlw	10
  6176  00250E  0100               	movlb	0	; () banked
  6177  002510  65B9               	cpfsgt	fround@prec& (0+255),b
  6178  002512  D06E               	goto	l4668
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6182  002514  0E00               	movlw	0
  6183  002516  0100               	movlb	0	; () banked
  6184  002518  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6185  00251A  0E03               	movlw	3
  6186  00251C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6187  00251E  0E00               	movlw	0
  6188  002520  0100               	movlb	0	; () banked
  6189  002522  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6190  002524  0E0A               	movlw	10
  6191  002526  6F82               	movwf	___awmod@divisor& (0+255),b
  6192  002528  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6193  00252C  0100               	movlb	0	; () banked
  6194  00252E  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6195  002530  EC7D  F023         	call	___awmod	;wreg free
  6196  002534  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6197  002538  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6198  00253C  EC26  F028         	call	___wmul	;wreg free
  6199  002540  0EEB               	movlw	low __npowers_
  6200  002542  0100               	movlb	0	; () banked
  6201  002544  258E               	addwf	?___wmul& (0+255),w,b
  6202  002546  6EF6               	movwf	tblptrl,c
  6203  002548  0EFD               	movlw	high __npowers_
  6204  00254A  0100               	movlb	0	; () banked
  6205  00254C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6206  00254E  6EF7               	movwf	tblptrh,c
  6207  002550                     	if	0	;There are less than 3 active tblptr bytes
  6208  002550                     	endif
  6209  002550  0009               	tblrd		*+
  6210  002552  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6211  002556  0009               	tblrd		*+
  6212  002558  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6213  00255C  000A               	tblrd		*-
  6214  00255E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6215  002562  0E00               	movlw	0
  6216  002564  0100               	movlb	0	; () banked
  6217  002566  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6218  002568  0E0A               	movlw	10
  6219  00256A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6220  00256C  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  6221  002570  0100               	movlb	0	; () banked
  6222  002572  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6223  002574  EC69  F022         	call	___awdiv	;wreg free
  6224  002578  0E09               	movlw	9
  6225  00257A  0100               	movlb	0	; () banked
  6226  00257C  2586               	addwf	?___awdiv& (0+255),w,b
  6227  00257E  0100               	movlb	0	; () banked
  6228  002580  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6229  002582  0E00               	movlw	0
  6230  002584  0100               	movlb	0	; () banked
  6231  002586  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6232  002588  0100               	movlb	0	; () banked
  6233  00258A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6234  00258C  0E00               	movlw	0
  6235  00258E  0100               	movlb	0	; () banked
  6236  002590  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6237  002592  0E03               	movlw	3
  6238  002594  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6239  002596  EC26  F028         	call	___wmul	;wreg free
  6240  00259A  0EEB               	movlw	low __npowers_
  6241  00259C  0100               	movlb	0	; () banked
  6242  00259E  258E               	addwf	?___wmul& (0+255),w,b
  6243  0025A0  6EF6               	movwf	tblptrl,c
  6244  0025A2  0EFD               	movlw	high __npowers_
  6245  0025A4  0100               	movlb	0	; () banked
  6246  0025A6  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6247  0025A8  6EF7               	movwf	tblptrh,c
  6248  0025AA                     	if	0	;There are less than 3 active tblptr bytes
  6249  0025AA                     	endif
  6250  0025AA  0009               	tblrd		*+
  6251  0025AC  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6252  0025B0  0009               	tblrd		*+
  6253  0025B2  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6254  0025B6  000A               	tblrd		*-
  6255  0025B8  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6256  0025BC  EC63  F019         	call	___ftmul	;wreg free
  6257  0025C0  C0A1  F0B6         	movff	?___ftmul,_fround$1337
  6258  0025C4  C0A2  F0B7         	movff	?___ftmul+1,_fround$1337+1
  6259  0025C8  C0A3  F0B8         	movff	?___ftmul+2,_fround$1337+2
  6260                           
  6261                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6262  0025CC  C0B6  F0A1         	movff	_fround$1337,___ftmul@f1
  6263  0025D0  C0B7  F0A2         	movff	_fround$1337+1,___ftmul@f1+1
  6264  0025D4  C0B8  F0A3         	movff	_fround$1337+2,___ftmul@f1+2
  6265  0025D8  0E00               	movlw	0
  6266  0025DA  0100               	movlb	0	; () banked
  6267  0025DC  6FA4               	movwf	___ftmul@f2& (0+255),b
  6268  0025DE  0E00               	movlw	0
  6269  0025E0  0100               	movlb	0	; () banked
  6270  0025E2  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6271  0025E4  0E3F               	movlw	63
  6272  0025E6  0100               	movlb	0	; () banked
  6273  0025E8  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6274  0025EA  EC63  F019         	call	___ftmul	;wreg free
  6275  0025EE  D787               	goto	L6
  6276  0025F0                     l4668:
  6277                           
  6278                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6279  0025F0  0100               	movlb	0	; () banked
  6280  0025F2  51B9               	movf	fround@prec& (0+255),w,b
  6281  0025F4  0D03               	mullw	3
  6282  0025F6  0EEB               	movlw	low __npowers_
  6283  0025F8  24F3               	addwf	prodl,w,c
  6284  0025FA  6EF6               	movwf	tblptrl,c
  6285  0025FC  0EFD               	movlw	high __npowers_
  6286  0025FE  20F4               	addwfc	prodh,w,c
  6287  002600  6EF7               	movwf	tblptrh,c
  6288  002602                     	if	0	;There are less than 3 active tblptr bytes
  6289  002602                     	endif
  6290  002602  0009               	tblrd		*+
  6291  002604  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6292  002608  0009               	tblrd		*+
  6293  00260A  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6294  00260E  000A               	tblrd		*-
  6295  002610  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6296  002614  0E00               	movlw	0
  6297  002616  0100               	movlb	0	; () banked
  6298  002618  6FA4               	movwf	___ftmul@f2& (0+255),b
  6299  00261A  0E00               	movlw	0
  6300  00261C  0100               	movlb	0	; () banked
  6301  00261E  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6302  002620  0E3F               	movlw	63
  6303  002622  0100               	movlb	0	; () banked
  6304  002624  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6305  002626  EC63  F019         	call	___ftmul	;wreg free
  6306  00262A  C0A1  F0B0         	movff	?___ftmul,?_fround
  6307  00262E  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  6308  002632  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  6309  002636  0012               	return	
  6310  002638                     __end_of_fround:
  6311                           	opt stack 0
  6312                           tblptru	equ	0xFF8
  6313                           tblptrh	equ	0xFF7
  6314                           tblptrl	equ	0xFF6
  6315                           tablat	equ	0xFF5
  6316                           prodh	equ	0xFF4
  6317                           prodl	equ	0xFF3
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function ___wmul *****************
  6330 ;; Defined at:
  6331 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  multiplier      2   14[BANK0 ] unsigned int 
  6334 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  product         2   18[BANK0 ] unsigned int 
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  2   14[BANK0 ] unsigned int 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0, prodl, prodh
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6346 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;Total ram usage:        6 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    6
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		_fround
  6357 ;;		_scale
  6358 ;;		_printf
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text10
  6363  00504C                     __ptext10:
  6364                           	opt stack 0
  6365  00504C                     ___wmul:
  6366                           	opt stack 21
  6367                           
  6368                           ;incstack = 0
  6369  00504C  0100               	movlb	0	; () banked
  6370  00504E  518E               	movf	___wmul@multiplier& (0+255),w,b
  6371  005050  0100               	movlb	0	; () banked
  6372  005052  0390               	mulwf	___wmul@multiplicand& (0+255),b
  6373  005054  CFF3 F092          	movff	prodl,___wmul@product
  6374  005058  CFF4 F093          	movff	prodh,___wmul@product+1
  6375  00505C  0100               	movlb	0	; () banked
  6376  00505E  518E               	movf	___wmul@multiplier& (0+255),w,b
  6377  005060  0100               	movlb	0	; () banked
  6378  005062  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6379  005064  50F3               	movf	prodl,w,c
  6380  005066  0100               	movlb	0	; () banked
  6381  005068  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  6382  00506A  0100               	movlb	0	; () banked
  6383  00506C  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6384  00506E  0100               	movlb	0	; () banked
  6385  005070  0390               	mulwf	___wmul@multiplicand& (0+255),b
  6386  005072  50F3               	movf	prodl,w,c
  6387  005074  0100               	movlb	0	; () banked
  6388  005076  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  6389                           
  6390                           ; BSR set to: 0
  6391  005078  C092  F08E         	movff	___wmul@product,?___wmul
  6392  00507C  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  6393  005080  0012               	return	
  6394  005082                     __end_of___wmul:
  6395                           	opt stack 0
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           postinc0	equ	0xFEE
  6403                           wreg	equ	0xFE8
  6404                           postdec1	equ	0xFE5
  6405                           fsr1l	equ	0xFE1
  6406                           indf2	equ	0xFDF
  6407                           postinc2	equ	0xFDE
  6408                           postdec2	equ	0xFDD
  6409                           fsr2h	equ	0xFDA
  6410                           fsr2l	equ	0xFD9
  6411                           status	equ	0xFD8
  6412                           
  6413 ;; *************** function ___awmod *****************
  6414 ;; Defined at:
  6415 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  dividend        2    0[BANK0 ] int 
  6418 ;;  divisor         2    2[BANK0 ] int 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  sign            1    5[BANK0 ] unsigned char 
  6421 ;;  counter         1    4[BANK0 ] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  2    0[BANK0 ] int 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6431 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;Total ram usage:        6 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    6
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_fround
  6442 ;;		_scale
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text11
  6447  0046FA                     __ptext11:
  6448                           	opt stack 0
  6449  0046FA                     ___awmod:
  6450                           	opt stack 21
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;incstack = 0
  6454  0046FA  0E00               	movlw	0
  6455  0046FC  0100               	movlb	0	; () banked
  6456  0046FE  6F85               	movwf	___awmod@sign& (0+255),b
  6457                           
  6458                           ; BSR set to: 0
  6459  004700  0100               	movlb	0	; () banked
  6460  004702  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6461  004704  D008               	goto	l4596
  6462                           
  6463                           ; BSR set to: 0
  6464  004706  0100               	movlb	0	; () banked
  6465  004708  6D80               	negf	___awmod@dividend& (0+255),b
  6466  00470A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6467  00470C  B0D8               	btfsc	status,0,c
  6468  00470E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6469                           
  6470                           ; BSR set to: 0
  6471  004710  0E01               	movlw	1
  6472  004712  0100               	movlb	0	; () banked
  6473  004714  6F85               	movwf	___awmod@sign& (0+255),b
  6474  004716                     l4596:
  6475                           
  6476                           ; BSR set to: 0
  6477  004716  0100               	movlb	0	; () banked
  6478  004718  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6479  00471A  D005               	goto	l4600
  6480                           
  6481                           ; BSR set to: 0
  6482  00471C  0100               	movlb	0	; () banked
  6483  00471E  6D82               	negf	___awmod@divisor& (0+255),b
  6484  004720  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  6485  004722  B0D8               	btfsc	status,0,c
  6486  004724  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  6487  004726                     l4600:
  6488                           
  6489                           ; BSR set to: 0
  6490  004726  0100               	movlb	0	; () banked
  6491  004728  5182               	movf	___awmod@divisor& (0+255),w,b
  6492  00472A  0100               	movlb	0	; () banked
  6493  00472C  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6494  00472E  B4D8               	btfsc	status,2,c
  6495  004730  D026               	goto	l4616
  6496                           
  6497                           ; BSR set to: 0
  6498  004732  0E01               	movlw	1
  6499  004734  0100               	movlb	0	; () banked
  6500  004736  6F84               	movwf	___awmod@counter& (0+255),b
  6501  004738  D006               	goto	l4606
  6502  00473A                     l4604:
  6503                           
  6504                           ; BSR set to: 0
  6505  00473A  0100               	movlb	0	; () banked
  6506  00473C  90D8               	bcf	status,0,c
  6507  00473E  3782               	rlcf	___awmod@divisor& (0+255),f,b
  6508  004740  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6509  004742  0100               	movlb	0	; () banked
  6510  004744  2B84               	incf	___awmod@counter& (0+255),f,b
  6511  004746                     l4606:
  6512                           
  6513                           ; BSR set to: 0
  6514  004746  0100               	movlb	0	; () banked
  6515  004748  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6516  00474A  D7F7               	goto	l4604
  6517  00474C                     l4608:
  6518                           
  6519                           ; BSR set to: 0
  6520  00474C  0100               	movlb	0	; () banked
  6521  00474E  5182               	movf	___awmod@divisor& (0+255),w,b
  6522  004750  0100               	movlb	0	; () banked
  6523  004752  5D80               	subwf	___awmod@dividend& (0+255),w,b
  6524  004754  0100               	movlb	0	; () banked
  6525  004756  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6526  004758  0100               	movlb	0	; () banked
  6527  00475A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6528  00475C  A0D8               	btfss	status,0,c
  6529  00475E  D008               	goto	l4612
  6530                           
  6531                           ; BSR set to: 0
  6532  004760  0100               	movlb	0	; () banked
  6533  004762  5182               	movf	___awmod@divisor& (0+255),w,b
  6534  004764  0100               	movlb	0	; () banked
  6535  004766  5F80               	subwf	___awmod@dividend& (0+255),f,b
  6536  004768  0100               	movlb	0	; () banked
  6537  00476A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6538  00476C  0100               	movlb	0	; () banked
  6539  00476E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6540  004770                     l4612:
  6541                           
  6542                           ; BSR set to: 0
  6543  004770  0100               	movlb	0	; () banked
  6544  004772  90D8               	bcf	status,0,c
  6545  004774  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6546  004776  3382               	rrcf	___awmod@divisor& (0+255),f,b
  6547                           
  6548                           ; BSR set to: 0
  6549  004778  0100               	movlb	0	; () banked
  6550  00477A  2F84               	decfsz	___awmod@counter& (0+255),f,b
  6551  00477C  D7E7               	goto	l4608
  6552  00477E                     l4616:
  6553                           
  6554                           ; BSR set to: 0
  6555  00477E  0100               	movlb	0	; () banked
  6556  004780  5185               	movf	___awmod@sign& (0+255),w,b
  6557  004782  0100               	movlb	0	; () banked
  6558  004784  B4D8               	btfsc	status,2,c
  6559  004786  D005               	goto	l4620
  6560                           
  6561                           ; BSR set to: 0
  6562  004788  0100               	movlb	0	; () banked
  6563  00478A  6D80               	negf	___awmod@dividend& (0+255),b
  6564  00478C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6565  00478E  B0D8               	btfsc	status,0,c
  6566  004790  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6567  004792                     l4620:
  6568                           
  6569                           ; BSR set to: 0
  6570  004792  C080  F080         	movff	___awmod@dividend,?___awmod
  6571  004796  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  6572  00479A  0012               	return	
  6573  00479C                     __end_of___awmod:
  6574                           	opt stack 0
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           postinc0	equ	0xFEE
  6582                           wreg	equ	0xFE8
  6583                           postdec1	equ	0xFE5
  6584                           fsr1l	equ	0xFE1
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8
  6591                           
  6592 ;; *************** function ___awdiv *****************
  6593 ;; Defined at:
  6594 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  dividend        2    6[BANK0 ] int 
  6597 ;;  divisor         2    8[BANK0 ] int 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  quotient        2   12[BANK0 ] int 
  6600 ;;  sign            1   11[BANK0 ] unsigned char 
  6601 ;;  counter         1   10[BANK0 ] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  2    6[BANK0 ] int 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6611 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;Total ram usage:        8 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    6
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_fround
  6622 ;;		_scale
  6623 ;;		_printf
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text12
  6628  0044D2                     __ptext12:
  6629                           	opt stack 0
  6630  0044D2                     ___awdiv:
  6631                           	opt stack 21
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;incstack = 0
  6635  0044D2  0E00               	movlw	0
  6636  0044D4  0100               	movlb	0	; () banked
  6637  0044D6  6F8B               	movwf	___awdiv@sign& (0+255),b
  6638                           
  6639                           ; BSR set to: 0
  6640  0044D8  0100               	movlb	0	; () banked
  6641  0044DA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6642  0044DC  D008               	goto	l4552
  6643                           
  6644                           ; BSR set to: 0
  6645  0044DE  0100               	movlb	0	; () banked
  6646  0044E0  6D88               	negf	___awdiv@divisor& (0+255),b
  6647  0044E2  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6648  0044E4  B0D8               	btfsc	status,0,c
  6649  0044E6  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6650                           
  6651                           ; BSR set to: 0
  6652  0044E8  0E01               	movlw	1
  6653  0044EA  0100               	movlb	0	; () banked
  6654  0044EC  6F8B               	movwf	___awdiv@sign& (0+255),b
  6655  0044EE                     l4552:
  6656                           
  6657                           ; BSR set to: 0
  6658  0044EE  0100               	movlb	0	; () banked
  6659  0044F0  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6660  0044F2  D008               	goto	l4558
  6661                           
  6662                           ; BSR set to: 0
  6663  0044F4  0100               	movlb	0	; () banked
  6664  0044F6  6D86               	negf	___awdiv@dividend& (0+255),b
  6665  0044F8  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6666  0044FA  B0D8               	btfsc	status,0,c
  6667  0044FC  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6668                           
  6669                           ; BSR set to: 0
  6670  0044FE  0E01               	movlw	1
  6671  004500  0100               	movlb	0	; () banked
  6672  004502  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  6673  004504                     l4558:
  6674                           
  6675                           ; BSR set to: 0
  6676  004504  0E00               	movlw	0
  6677  004506  0100               	movlb	0	; () banked
  6678  004508  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  6679  00450A  0E00               	movlw	0
  6680  00450C  6F8C               	movwf	___awdiv@quotient& (0+255),b
  6681                           
  6682                           ; BSR set to: 0
  6683  00450E  0100               	movlb	0	; () banked
  6684  004510  5188               	movf	___awdiv@divisor& (0+255),w,b
  6685  004512  0100               	movlb	0	; () banked
  6686  004514  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6687  004516  B4D8               	btfsc	status,2,c
  6688  004518  D02C               	goto	l4580
  6689                           
  6690                           ; BSR set to: 0
  6691  00451A  0E01               	movlw	1
  6692  00451C  0100               	movlb	0	; () banked
  6693  00451E  6F8A               	movwf	___awdiv@counter& (0+255),b
  6694  004520  D006               	goto	l4566
  6695  004522                     l4564:
  6696                           
  6697                           ; BSR set to: 0
  6698  004522  0100               	movlb	0	; () banked
  6699  004524  90D8               	bcf	status,0,c
  6700  004526  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  6701  004528  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6702  00452A  0100               	movlb	0	; () banked
  6703  00452C  2B8A               	incf	___awdiv@counter& (0+255),f,b
  6704  00452E                     l4566:
  6705                           
  6706                           ; BSR set to: 0
  6707  00452E  0100               	movlb	0	; () banked
  6708  004530  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6709  004532  D7F7               	goto	l4564
  6710  004534                     l4568:
  6711                           
  6712                           ; BSR set to: 0
  6713  004534  0100               	movlb	0	; () banked
  6714  004536  90D8               	bcf	status,0,c
  6715  004538  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  6716  00453A  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6717                           
  6718                           ; BSR set to: 0
  6719  00453C  0100               	movlb	0	; () banked
  6720  00453E  5188               	movf	___awdiv@divisor& (0+255),w,b
  6721  004540  0100               	movlb	0	; () banked
  6722  004542  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  6723  004544  0100               	movlb	0	; () banked
  6724  004546  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6725  004548  0100               	movlb	0	; () banked
  6726  00454A  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6727  00454C  A0D8               	btfss	status,0,c
  6728  00454E  D00A               	goto	l4576
  6729                           
  6730                           ; BSR set to: 0
  6731  004550  0100               	movlb	0	; () banked
  6732  004552  5188               	movf	___awdiv@divisor& (0+255),w,b
  6733  004554  0100               	movlb	0	; () banked
  6734  004556  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  6735  004558  0100               	movlb	0	; () banked
  6736  00455A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6737  00455C  0100               	movlb	0	; () banked
  6738  00455E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6739                           
  6740                           ; BSR set to: 0
  6741  004560  0100               	movlb	0	; () banked
  6742  004562  818C               	bsf	___awdiv@quotient& (0+255),0,b
  6743  004564                     l4576:
  6744                           
  6745                           ; BSR set to: 0
  6746  004564  0100               	movlb	0	; () banked
  6747  004566  90D8               	bcf	status,0,c
  6748  004568  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6749  00456A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  6750                           
  6751                           ; BSR set to: 0
  6752  00456C  0100               	movlb	0	; () banked
  6753  00456E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  6754  004570  D7E1               	goto	l4568
  6755  004572                     l4580:
  6756                           
  6757                           ; BSR set to: 0
  6758  004572  0100               	movlb	0	; () banked
  6759  004574  518B               	movf	___awdiv@sign& (0+255),w,b
  6760  004576  0100               	movlb	0	; () banked
  6761  004578  B4D8               	btfsc	status,2,c
  6762  00457A  D005               	goto	l4584
  6763                           
  6764                           ; BSR set to: 0
  6765  00457C  0100               	movlb	0	; () banked
  6766  00457E  6D8C               	negf	___awdiv@quotient& (0+255),b
  6767  004580  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6768  004582  B0D8               	btfsc	status,0,c
  6769  004584  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6770  004586                     l4584:
  6771                           
  6772                           ; BSR set to: 0
  6773  004586  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  6774  00458A  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  6775  00458E  0012               	return	
  6776  004590                     __end_of___awdiv:
  6777                           	opt stack 0
  6778                           tblptru	equ	0xFF8
  6779                           tblptrh	equ	0xFF7
  6780                           tblptrl	equ	0xFF6
  6781                           tablat	equ	0xFF5
  6782                           prodh	equ	0xFF4
  6783                           prodl	equ	0xFF3
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           postdec1	equ	0xFE5
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           
  6795 ;; *************** function __tdiv_to_l_ *****************
  6796 ;; Defined at:
  6797 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  f1              3    0[BANK0 ] float 
  6800 ;;  f2              3    3[BANK0 ] float 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  quot            4    9[BANK0 ] unsigned long 
  6803 ;;  exp1            1   14[BANK0 ] unsigned char 
  6804 ;;  cntr            1   13[BANK0 ] unsigned char 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  4    0[BANK0 ] unsigned long 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2, status,0
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6814 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;Total ram usage:       15 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    6
  6821 ;; This function calls:
  6822 ;;		Nothing
  6823 ;; This function is called by:
  6824 ;;		_printf
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text13
  6829  002E3A                     __ptext13:
  6830                           	opt stack 0
  6831  002E3A                     __tdiv_to_l_:
  6832                           	opt stack 22
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;incstack = 0
  6836  002E3A  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6837  002E3E  0100               	movlb	0	; () banked
  6838  002E40  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6839  002E42  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6840  002E44  0100               	movlb	0	; () banked
  6841  002E46  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6842  002E48  0100               	movlb	0	; () banked
  6843  002E4A  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6844  002E4C  E301               	bnc	u4561
  6845  002E4E  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6846  002E50                     u4561:
  6847  002E50  0100               	movlb	0	; () banked
  6848  002E52  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6849  002E54  0100               	movlb	0	; () banked
  6850  002E56  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6851  002E58  0100               	movlb	0	; () banked
  6852  002E5A  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6853  002E5C  A4D8               	btfss	status,2,c
  6854  002E5E  D00A               	goto	l4728
  6855                           
  6856                           ; BSR set to: 0
  6857  002E60  0E00               	movlw	0
  6858  002E62  0100               	movlb	0	; () banked
  6859  002E64  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6860  002E66  0E00               	movlw	0
  6861  002E68  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6862  002E6A  0E00               	movlw	0
  6863  002E6C  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6864  002E6E  0E00               	movlw	0
  6865  002E70  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6866                           
  6867                           ; BSR set to: 0
  6868  002E72  0012               	return	
  6869  002E74                     l4728:
  6870                           
  6871                           ; BSR set to: 0
  6872  002E74  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6873  002E78  0100               	movlb	0	; () banked
  6874  002E7A  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6875  002E7C  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6876  002E7E  0100               	movlb	0	; () banked
  6877  002E80  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6878  002E82  0100               	movlb	0	; () banked
  6879  002E84  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6880  002E86  E301               	bnc	u4581
  6881  002E88  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6882  002E8A                     u4581:
  6883  002E8A  0100               	movlb	0	; () banked
  6884  002E8C  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6885  002E8E  0100               	movlb	0	; () banked
  6886  002E90  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6887  002E92  0100               	movlb	0	; () banked
  6888  002E94  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6889  002E96  A4D8               	btfss	status,2,c
  6890  002E98  D00A               	goto	l4734
  6891                           
  6892                           ; BSR set to: 0
  6893  002E9A  0E00               	movlw	0
  6894  002E9C  0100               	movlb	0	; () banked
  6895  002E9E  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6896  002EA0  0E00               	movlw	0
  6897  002EA2  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6898  002EA4  0E00               	movlw	0
  6899  002EA6  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6900  002EA8  0E00               	movlw	0
  6901  002EAA  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6902                           
  6903                           ; BSR set to: 0
  6904  002EAC  0012               	return	
  6905  002EAE                     l4734:
  6906                           
  6907                           ; BSR set to: 0
  6908  002EAE  0100               	movlb	0	; () banked
  6909  002EB0  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6910                           
  6911                           ; BSR set to: 0
  6912  002EB2  0EFF               	movlw	255
  6913  002EB4  0100               	movlb	0	; () banked
  6914  002EB6  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6915  002EB8  0EFF               	movlw	255
  6916  002EBA  0100               	movlb	0	; () banked
  6917  002EBC  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6918  002EBE  0E00               	movlw	0
  6919  002EC0  0100               	movlb	0	; () banked
  6920  002EC2  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6921  002EC4  0100               	movlb	0	; () banked
  6922  002EC6  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6923                           
  6924                           ; BSR set to: 0
  6925  002EC8  0EFF               	movlw	255
  6926  002ECA  0100               	movlb	0	; () banked
  6927  002ECC  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6928  002ECE  0EFF               	movlw	255
  6929  002ED0  0100               	movlb	0	; () banked
  6930  002ED2  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6931  002ED4  0E00               	movlw	0
  6932  002ED6  0100               	movlb	0	; () banked
  6933  002ED8  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6934                           
  6935                           ; BSR set to: 0
  6936  002EDA  0E00               	movlw	0
  6937  002EDC  0100               	movlb	0	; () banked
  6938  002EDE  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  6939  002EE0  0E00               	movlw	0
  6940  002EE2  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6941  002EE4  0E00               	movlw	0
  6942  002EE6  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6943  002EE8  0E00               	movlw	0
  6944  002EEA  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6945                           
  6946                           ; BSR set to: 0
  6947  002EEC  0E7F               	movlw	127
  6948  002EEE  0100               	movlb	0	; () banked
  6949  002EF0  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6950                           
  6951                           ; BSR set to: 0
  6952  002EF2  0100               	movlb	0	; () banked
  6953  002EF4  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6954  002EF6  0F98               	addlw	152
  6955  002EF8  0100               	movlb	0	; () banked
  6956  002EFA  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6957                           
  6958                           ; BSR set to: 0
  6959  002EFC  0E18               	movlw	24
  6960  002EFE  0100               	movlb	0	; () banked
  6961  002F00  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6962  002F02                     l1088:
  6963                           
  6964                           ; BSR set to: 0
  6965  002F02  0100               	movlb	0	; () banked
  6966  002F04  90D8               	bcf	status,0,c
  6967  002F06  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6968  002F08  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6969  002F0A  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6970  002F0C  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6971                           
  6972                           ; BSR set to: 0
  6973  002F0E  0100               	movlb	0	; () banked
  6974  002F10  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6975  002F12  0100               	movlb	0	; () banked
  6976  002F14  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6977  002F16  0100               	movlb	0	; () banked
  6978  002F18  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6979  002F1A  0100               	movlb	0	; () banked
  6980  002F1C  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6981  002F1E  0100               	movlb	0	; () banked
  6982  002F20  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6983  002F22  0100               	movlb	0	; () banked
  6984  002F24  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6985  002F26  A0D8               	btfss	status,0,c
  6986  002F28  D00E               	goto	l1089
  6987                           
  6988                           ; BSR set to: 0
  6989  002F2A  0100               	movlb	0	; () banked
  6990  002F2C  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6991  002F2E  0100               	movlb	0	; () banked
  6992  002F30  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6993  002F32  0100               	movlb	0	; () banked
  6994  002F34  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6995  002F36  0100               	movlb	0	; () banked
  6996  002F38  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6997  002F3A  0100               	movlb	0	; () banked
  6998  002F3C  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6999  002F3E  0100               	movlb	0	; () banked
  7000  002F40  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  7001                           
  7002                           ; BSR set to: 0
  7003  002F42  0100               	movlb	0	; () banked
  7004  002F44  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  7005  002F46                     l1089:
  7006                           
  7007                           ; BSR set to: 0
  7008  002F46  0100               	movlb	0	; () banked
  7009  002F48  90D8               	bcf	status,0,c
  7010  002F4A  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  7011  002F4C  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  7012  002F4E  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  7013                           
  7014                           ; BSR set to: 0
  7015  002F50  0100               	movlb	0	; () banked
  7016  002F52  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  7017  002F54  D7D6               	goto	l1088
  7018                           
  7019                           ; BSR set to: 0
  7020                           
  7021                           ; BSR set to: 0
  7022  002F56  0100               	movlb	0	; () banked
  7023  002F58  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  7024  002F5A  D01A               	goto	l4768
  7025                           
  7026                           ; BSR set to: 0
  7027  002F5C  0100               	movlb	0	; () banked
  7028  002F5E  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  7029  002F60  0A80               	xorlw	128
  7030  002F62  0F97               	addlw	151
  7031  002F64  B0D8               	btfsc	status,0,c
  7032  002F66  D00A               	goto	l4764
  7033                           
  7034                           ; BSR set to: 0
  7035  002F68  0E00               	movlw	0
  7036  002F6A  0100               	movlb	0	; () banked
  7037  002F6C  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  7038  002F6E  0E00               	movlw	0
  7039  002F70  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  7040  002F72  0E00               	movlw	0
  7041  002F74  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  7042  002F76  0E00               	movlw	0
  7043  002F78  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  7044                           
  7045                           ; BSR set to: 0
  7046  002F7A  0012               	return	
  7047  002F7C                     l4764:
  7048                           
  7049                           ; BSR set to: 0
  7050  002F7C  0100               	movlb	0	; () banked
  7051  002F7E  90D8               	bcf	status,0,c
  7052  002F80  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  7053  002F82  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  7054  002F84  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  7055  002F86  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  7056                           
  7057                           ; BSR set to: 0
  7058  002F88  0100               	movlb	0	; () banked
  7059  002F8A  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  7060  002F8C  D7F7               	goto	l4764
  7061                           
  7062                           ; BSR set to: 0
  7063  002F8E  D01B               	goto	l1095
  7064  002F90                     l4768:
  7065                           
  7066                           ; BSR set to: 0
  7067  002F90  0E17               	movlw	23
  7068  002F92  0100               	movlb	0	; () banked
  7069  002F94  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  7070  002F96  D012               	goto	l4776
  7071                           
  7072                           ; BSR set to: 0
  7073  002F98  0E00               	movlw	0
  7074  002F9A  0100               	movlb	0	; () banked
  7075  002F9C  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  7076  002F9E  0E00               	movlw	0
  7077  002FA0  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  7078  002FA2  0E00               	movlw	0
  7079  002FA4  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  7080  002FA6  0E00               	movlw	0
  7081  002FA8  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  7082                           
  7083                           ; BSR set to: 0
  7084  002FAA  0012               	return	
  7085  002FAC                     l4774:
  7086                           
  7087                           ; BSR set to: 0
  7088  002FAC  0100               	movlb	0	; () banked
  7089  002FAE  90D8               	bcf	status,0,c
  7090  002FB0  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  7091  002FB2  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  7092  002FB4  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  7093  002FB6  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  7094  002FB8  0100               	movlb	0	; () banked
  7095  002FBA  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  7096  002FBC                     l4776:
  7097                           
  7098                           ; BSR set to: 0
  7099  002FBC  0100               	movlb	0	; () banked
  7100  002FBE  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  7101  002FC0  0100               	movlb	0	; () banked
  7102  002FC2  A4D8               	btfss	status,2,c
  7103  002FC4  D7F3               	goto	l4774
  7104  002FC6                     l1095:
  7105                           
  7106                           ; BSR set to: 0
  7107  002FC6  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7108  002FCA  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7109  002FCE  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7110  002FD2  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7111                           
  7112                           ; BSR set to: 0
  7113  002FD6  0012               	return		;funcret
  7114  002FD8                     __end_of__tdiv_to_l_:
  7115                           	opt stack 0
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           postinc0	equ	0xFEE
  7123                           wreg	equ	0xFE8
  7124                           postdec1	equ	0xFE5
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function __div_to_l_ *****************
  7134 ;; Defined at:
  7135 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  f1              3    0[BANK0 ] unsigned long 
  7138 ;;  f2              3    3[BANK0 ] unsigned long 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  quot            4    6[BANK0 ] unsigned long 
  7141 ;;  exp1            1   11[BANK0 ] unsigned char 
  7142 ;;  cntr            1   10[BANK0 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  4    0[BANK0 ] unsigned long 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7152 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;Total ram usage:       12 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    6
  7159 ;; This function calls:
  7160 ;;		Nothing
  7161 ;; This function is called by:
  7162 ;;		_printf
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text14
  7167  002FD8                     __ptext14:
  7168                           	opt stack 0
  7169  002FD8                     __div_to_l_:
  7170                           	opt stack 22
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;incstack = 0
  7174  002FD8  0100               	movlb	0	; () banked
  7175  002FDA  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  7176  002FDC  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  7177  002FDE  0100               	movlb	0	; () banked
  7178  002FE0  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  7179  002FE2  0100               	movlb	0	; () banked
  7180  002FE4  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7181  002FE6  A4D8               	btfss	status,2,c
  7182  002FE8  D00A               	goto	l4784
  7183                           
  7184                           ; BSR set to: 0
  7185  002FEA  0E00               	movlw	0
  7186  002FEC  0100               	movlb	0	; () banked
  7187  002FEE  6F80               	movwf	?__div_to_l_& (0+255),b
  7188  002FF0  0E00               	movlw	0
  7189  002FF2  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7190  002FF4  0E00               	movlw	0
  7191  002FF6  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7192  002FF8  0E00               	movlw	0
  7193  002FFA  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7194                           
  7195                           ; BSR set to: 0
  7196  002FFC  0012               	return	
  7197  002FFE                     l4784:
  7198                           
  7199                           ; BSR set to: 0
  7200  002FFE  0100               	movlb	0	; () banked
  7201  003000  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  7202  003002  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  7203  003004  0100               	movlb	0	; () banked
  7204  003006  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  7205  003008  0100               	movlb	0	; () banked
  7206  00300A  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  7207  00300C  A4D8               	btfss	status,2,c
  7208  00300E  D00A               	goto	l4790
  7209                           
  7210                           ; BSR set to: 0
  7211  003010  0E00               	movlw	0
  7212  003012  0100               	movlb	0	; () banked
  7213  003014  6F80               	movwf	?__div_to_l_& (0+255),b
  7214  003016  0E00               	movlw	0
  7215  003018  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7216  00301A  0E00               	movlw	0
  7217  00301C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7218  00301E  0E00               	movlw	0
  7219  003020  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7220                           
  7221                           ; BSR set to: 0
  7222  003022  0012               	return	
  7223  003024                     l4790:
  7224                           
  7225                           ; BSR set to: 0
  7226  003024  0100               	movlb	0	; () banked
  7227  003026  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  7228                           
  7229                           ; BSR set to: 0
  7230  003028  0EFF               	movlw	255
  7231  00302A  0100               	movlb	0	; () banked
  7232  00302C  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  7233  00302E  0EFF               	movlw	255
  7234  003030  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  7235  003032  0EFF               	movlw	255
  7236  003034  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  7237  003036  0E00               	movlw	0
  7238  003038  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  7239                           
  7240                           ; BSR set to: 0
  7241  00303A  0100               	movlb	0	; () banked
  7242  00303C  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  7243  00303E  0EFF               	movlw	255
  7244  003040  0100               	movlb	0	; () banked
  7245  003042  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  7246  003044  0EFF               	movlw	255
  7247  003046  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  7248  003048  0EFF               	movlw	255
  7249  00304A  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  7250  00304C  0E00               	movlw	0
  7251  00304E  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  7252                           
  7253                           ; BSR set to: 0
  7254  003050  0E00               	movlw	0
  7255  003052  0100               	movlb	0	; () banked
  7256  003054  6F86               	movwf	__div_to_l_@quot& (0+255),b
  7257  003056  0E00               	movlw	0
  7258  003058  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  7259  00305A  0E00               	movlw	0
  7260  00305C  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  7261  00305E  0E00               	movlw	0
  7262  003060  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  7263                           
  7264                           ; BSR set to: 0
  7265  003062  0E7F               	movlw	127
  7266  003064  0100               	movlb	0	; () banked
  7267  003066  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7268                           
  7269                           ; BSR set to: 0
  7270  003068  0100               	movlb	0	; () banked
  7271  00306A  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  7272  00306C  0FA0               	addlw	160
  7273  00306E  0100               	movlb	0	; () banked
  7274  003070  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7275                           
  7276                           ; BSR set to: 0
  7277  003072  0E20               	movlw	32
  7278  003074  0100               	movlb	0	; () banked
  7279  003076  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  7280  003078                     l4804:
  7281                           
  7282                           ; BSR set to: 0
  7283  003078  0100               	movlb	0	; () banked
  7284  00307A  90D8               	bcf	status,0,c
  7285  00307C  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  7286  00307E  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7287  003080  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7288  003082  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7289                           
  7290                           ; BSR set to: 0
  7291  003084  0100               	movlb	0	; () banked
  7292  003086  5183               	movf	__div_to_l_@f2& (0+255),w,b
  7293  003088  0100               	movlb	0	; () banked
  7294  00308A  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  7295  00308C  0100               	movlb	0	; () banked
  7296  00308E  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7297  003090  0100               	movlb	0	; () banked
  7298  003092  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  7299  003094  0100               	movlb	0	; () banked
  7300  003096  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7301  003098  0100               	movlb	0	; () banked
  7302  00309A  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  7303  00309C  0100               	movlb	0	; () banked
  7304  00309E  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7305  0030A0  0100               	movlb	0	; () banked
  7306  0030A2  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  7307  0030A4  A0D8               	btfss	status,0,c
  7308  0030A6  D012               	goto	l4812
  7309                           
  7310                           ; BSR set to: 0
  7311  0030A8  0100               	movlb	0	; () banked
  7312  0030AA  5183               	movf	__div_to_l_@f2& (0+255),w,b
  7313  0030AC  0100               	movlb	0	; () banked
  7314  0030AE  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  7315  0030B0  0100               	movlb	0	; () banked
  7316  0030B2  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7317  0030B4  0100               	movlb	0	; () banked
  7318  0030B6  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  7319  0030B8  0100               	movlb	0	; () banked
  7320  0030BA  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7321  0030BC  0100               	movlb	0	; () banked
  7322  0030BE  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  7323  0030C0  0100               	movlb	0	; () banked
  7324  0030C2  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7325  0030C4  0100               	movlb	0	; () banked
  7326  0030C6  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  7327                           
  7328                           ; BSR set to: 0
  7329  0030C8  0100               	movlb	0	; () banked
  7330  0030CA  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  7331  0030CC                     l4812:
  7332                           
  7333                           ; BSR set to: 0
  7334  0030CC  0100               	movlb	0	; () banked
  7335  0030CE  90D8               	bcf	status,0,c
  7336  0030D0  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  7337  0030D2  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  7338  0030D4  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  7339  0030D6  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  7340                           
  7341                           ; BSR set to: 0
  7342  0030D8  0100               	movlb	0	; () banked
  7343  0030DA  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  7344  0030DC  D7CD               	goto	l4804
  7345                           
  7346                           ; BSR set to: 0
  7347                           
  7348                           ; BSR set to: 0
  7349  0030DE  0100               	movlb	0	; () banked
  7350  0030E0  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  7351  0030E2  D01A               	goto	l4828
  7352                           
  7353                           ; BSR set to: 0
  7354  0030E4  0100               	movlb	0	; () banked
  7355  0030E6  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7356  0030E8  0A80               	xorlw	128
  7357  0030EA  0F9F               	addlw	159
  7358  0030EC  B0D8               	btfsc	status,0,c
  7359  0030EE  D00A               	goto	l4824
  7360                           
  7361                           ; BSR set to: 0
  7362  0030F0  0E00               	movlw	0
  7363  0030F2  0100               	movlb	0	; () banked
  7364  0030F4  6F80               	movwf	?__div_to_l_& (0+255),b
  7365  0030F6  0E00               	movlw	0
  7366  0030F8  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7367  0030FA  0E00               	movlw	0
  7368  0030FC  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7369  0030FE  0E00               	movlw	0
  7370  003100  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7371                           
  7372                           ; BSR set to: 0
  7373  003102  0012               	return	
  7374  003104                     l4824:
  7375                           
  7376                           ; BSR set to: 0
  7377  003104  0100               	movlb	0	; () banked
  7378  003106  90D8               	bcf	status,0,c
  7379  003108  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  7380  00310A  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  7381  00310C  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  7382  00310E  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  7383                           
  7384                           ; BSR set to: 0
  7385  003110  0100               	movlb	0	; () banked
  7386  003112  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  7387  003114  D7F7               	goto	l4824
  7388                           
  7389                           ; BSR set to: 0
  7390  003116  D01B               	goto	l991
  7391  003118                     l4828:
  7392                           
  7393                           ; BSR set to: 0
  7394  003118  0E1F               	movlw	31
  7395  00311A  0100               	movlb	0	; () banked
  7396  00311C  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  7397  00311E  D012               	goto	l4836
  7398                           
  7399                           ; BSR set to: 0
  7400  003120  0E00               	movlw	0
  7401  003122  0100               	movlb	0	; () banked
  7402  003124  6F80               	movwf	?__div_to_l_& (0+255),b
  7403  003126  0E00               	movlw	0
  7404  003128  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7405  00312A  0E00               	movlw	0
  7406  00312C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7407  00312E  0E00               	movlw	0
  7408  003130  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7409                           
  7410                           ; BSR set to: 0
  7411  003132  0012               	return	
  7412  003134                     l4834:
  7413                           
  7414                           ; BSR set to: 0
  7415  003134  0100               	movlb	0	; () banked
  7416  003136  90D8               	bcf	status,0,c
  7417  003138  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  7418  00313A  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7419  00313C  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7420  00313E  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7421  003140  0100               	movlb	0	; () banked
  7422  003142  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  7423  003144                     l4836:
  7424                           
  7425                           ; BSR set to: 0
  7426  003144  0100               	movlb	0	; () banked
  7427  003146  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7428  003148  0100               	movlb	0	; () banked
  7429  00314A  A4D8               	btfss	status,2,c
  7430  00314C  D7F3               	goto	l4834
  7431  00314E                     l991:
  7432                           
  7433                           ; BSR set to: 0
  7434  00314E  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  7435  003152  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7436  003156  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7437  00315A  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7438                           
  7439                           ; BSR set to: 0
  7440  00315E  0012               	return		;funcret
  7441  003160                     __end_of__div_to_l_:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function ___lltoft *****************
  7461 ;; Defined at:
  7462 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;  c               4    8[BANK0 ] unsigned long 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  exp             1   16[BANK0 ] unsigned char 
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  3    8[BANK0 ] float 
  7469 ;; Registers used:
  7470 ;;		wreg, status,2, status,0, cstack
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;Total ram usage:        9 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    7
  7483 ;; This function calls:
  7484 ;;		___ftpack
  7485 ;; This function is called by:
  7486 ;;		_printf
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text15
  7491  004AF6                     __ptext15:
  7492                           	opt stack 0
  7493  004AF6                     ___lltoft:
  7494                           	opt stack 21
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;incstack = 0
  7498  004AF6  0E8E               	movlw	142
  7499  004AF8  0100               	movlb	0	; () banked
  7500  004AFA  6F90               	movwf	___lltoft@exp& (0+255),b
  7501  004AFC  D008               	goto	l5030
  7502  004AFE                     l5028:
  7503                           
  7504                           ; BSR set to: 0
  7505  004AFE  0100               	movlb	0	; () banked
  7506  004B00  90D8               	bcf	status,0,c
  7507  004B02  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7508  004B04  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7509  004B06  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7510  004B08  3388               	rrcf	___lltoft@c& (0+255),f,b
  7511  004B0A  0100               	movlb	0	; () banked
  7512  004B0C  2B90               	incf	___lltoft@exp& (0+255),f,b
  7513  004B0E                     l5030:
  7514                           
  7515                           ; BSR set to: 0
  7516  004B0E  0E00               	movlw	0
  7517  004B10  0100               	movlb	0	; () banked
  7518  004B12  1588               	andwf	___lltoft@c& (0+255),w,b
  7519  004B14  0100               	movlb	0	; () banked
  7520  004B16  6F8C               	movwf	??___lltoft& (0+255),b
  7521  004B18  0E00               	movlw	0
  7522  004B1A  0100               	movlb	0	; () banked
  7523  004B1C  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  7524  004B1E  0100               	movlb	0	; () banked
  7525  004B20  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  7526  004B22  0E00               	movlw	0
  7527  004B24  0100               	movlb	0	; () banked
  7528  004B26  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7529  004B28  0100               	movlb	0	; () banked
  7530  004B2A  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  7531  004B2C  0EFF               	movlw	255
  7532  004B2E  0100               	movlb	0	; () banked
  7533  004B30  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7534  004B32  0100               	movlb	0	; () banked
  7535  004B34  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  7536  004B36  0100               	movlb	0	; () banked
  7537  004B38  518C               	movf	??___lltoft& (0+255),w,b
  7538  004B3A  0100               	movlb	0	; () banked
  7539  004B3C  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7540  004B3E  0100               	movlb	0	; () banked
  7541  004B40  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7542  004B42  0100               	movlb	0	; () banked
  7543  004B44  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7544  004B46  A4D8               	btfss	status,2,c
  7545  004B48  D7DA               	goto	l5028
  7546                           
  7547                           ; BSR set to: 0
  7548                           
  7549                           ; BSR set to: 0
  7550  004B4A  C088  F080         	movff	___lltoft@c,___ftpack@arg
  7551  004B4E  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  7552  004B52  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  7553  004B56  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  7554  004B5A  0E00               	movlw	0
  7555  004B5C  0100               	movlb	0	; () banked
  7556  004B5E  6F84               	movwf	___ftpack@sign& (0+255),b
  7557  004B60  EC49  F01E         	call	___ftpack	;wreg free
  7558  004B64  C080  F088         	movff	?___ftpack,?___lltoft
  7559  004B68  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  7560  004B6C  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  7561  004B70  0012               	return	
  7562  004B72                     __end_of___lltoft:
  7563                           	opt stack 0
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           postinc0	equ	0xFEE
  7571                           wreg	equ	0xFE8
  7572                           postdec1	equ	0xFE5
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8
  7580                           
  7581 ;; *************** function ___llmod *****************
  7582 ;; Defined at:
  7583 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  dividend        4   13[BANK0 ] unsigned long 
  7586 ;;  divisor         4   17[BANK0 ] unsigned long 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  counter         1   21[BANK0 ] unsigned char 
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  4   13[BANK0 ] unsigned long 
  7591 ;; Registers used:
  7592 ;;		wreg, status,2, status,0
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7598 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;Total ram usage:        9 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    6
  7605 ;; This function calls:
  7606 ;;		Nothing
  7607 ;; This function is called by:
  7608 ;;		_printf
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           	psect	text16
  7613  00483A                     __ptext16:
  7614                           	opt stack 0
  7615  00483A                     ___llmod:
  7616                           	opt stack 22
  7617                           
  7618                           ;incstack = 0
  7619  00483A  0100               	movlb	0	; () banked
  7620  00483C  5191               	movf	___llmod@divisor& (0+255),w,b
  7621  00483E  0100               	movlb	0	; () banked
  7622  004840  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7623  004842  0100               	movlb	0	; () banked
  7624  004844  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7625  004846  0100               	movlb	0	; () banked
  7626  004848  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7627  00484A  B4D8               	btfsc	status,2,c
  7628  00484C  D03A               	goto	l1180
  7629                           
  7630                           ; BSR set to: 0
  7631  00484E  0E01               	movlw	1
  7632  004850  0100               	movlb	0	; () banked
  7633  004852  6F95               	movwf	___llmod@counter& (0+255),b
  7634  004854  D008               	goto	l5016
  7635  004856                     l5014:
  7636                           
  7637                           ; BSR set to: 0
  7638  004856  0100               	movlb	0	; () banked
  7639  004858  90D8               	bcf	status,0,c
  7640  00485A  3791               	rlcf	___llmod@divisor& (0+255),f,b
  7641  00485C  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7642  00485E  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7643  004860  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7644  004862  0100               	movlb	0	; () banked
  7645  004864  2B95               	incf	___llmod@counter& (0+255),f,b
  7646  004866                     l5016:
  7647                           
  7648                           ; BSR set to: 0
  7649  004866  0100               	movlb	0	; () banked
  7650  004868  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7651  00486A  D7F5               	goto	l5014
  7652  00486C                     l5018:
  7653                           
  7654                           ; BSR set to: 0
  7655  00486C  0100               	movlb	0	; () banked
  7656  00486E  5191               	movf	___llmod@divisor& (0+255),w,b
  7657  004870  0100               	movlb	0	; () banked
  7658  004872  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  7659  004874  0100               	movlb	0	; () banked
  7660  004876  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  7661  004878  0100               	movlb	0	; () banked
  7662  00487A  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7663  00487C  0100               	movlb	0	; () banked
  7664  00487E  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  7665  004880  0100               	movlb	0	; () banked
  7666  004882  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7667  004884  0100               	movlb	0	; () banked
  7668  004886  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  7669  004888  0100               	movlb	0	; () banked
  7670  00488A  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7671  00488C  A0D8               	btfss	status,0,c
  7672  00488E  D010               	goto	l5022
  7673                           
  7674                           ; BSR set to: 0
  7675  004890  0100               	movlb	0	; () banked
  7676  004892  5191               	movf	___llmod@divisor& (0+255),w,b
  7677  004894  0100               	movlb	0	; () banked
  7678  004896  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  7679  004898  0100               	movlb	0	; () banked
  7680  00489A  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  7681  00489C  0100               	movlb	0	; () banked
  7682  00489E  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7683  0048A0  0100               	movlb	0	; () banked
  7684  0048A2  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  7685  0048A4  0100               	movlb	0	; () banked
  7686  0048A6  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7687  0048A8  0100               	movlb	0	; () banked
  7688  0048AA  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  7689  0048AC  0100               	movlb	0	; () banked
  7690  0048AE  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7691  0048B0                     l5022:
  7692                           
  7693                           ; BSR set to: 0
  7694  0048B0  0100               	movlb	0	; () banked
  7695  0048B2  90D8               	bcf	status,0,c
  7696  0048B4  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7697  0048B6  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7698  0048B8  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7699  0048BA  3391               	rrcf	___llmod@divisor& (0+255),f,b
  7700                           
  7701                           ; BSR set to: 0
  7702  0048BC  0100               	movlb	0	; () banked
  7703  0048BE  2F95               	decfsz	___llmod@counter& (0+255),f,b
  7704  0048C0  D7D5               	goto	l5018
  7705  0048C2                     l1180:
  7706                           
  7707                           ; BSR set to: 0
  7708  0048C2  C08D  F08D         	movff	___llmod@dividend,?___llmod
  7709  0048C6  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  7710  0048CA  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  7711  0048CE  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  7712                           
  7713                           ; BSR set to: 0
  7714  0048D2  0012               	return		;funcret
  7715  0048D4                     __end_of___llmod:
  7716                           	opt stack 0
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           postinc0	equ	0xFEE
  7724                           wreg	equ	0xFE8
  7725                           postdec1	equ	0xFE5
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           postinc2	equ	0xFDE
  7729                           postdec2	equ	0xFDD
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function ___lldiv *****************
  7735 ;; Defined at:
  7736 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  dividend        4    0[BANK0 ] unsigned long 
  7739 ;;  divisor         4    4[BANK0 ] unsigned long 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  quotient        4    8[BANK0 ] unsigned long 
  7742 ;;  counter         1   12[BANK0 ] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  4    0[BANK0 ] unsigned long 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7752 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;Total ram usage:       13 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    6
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		_printf
  7763 ;;		_I2C_Master_Init
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           	psect	text17
  7768  004590                     __ptext17:
  7769                           	opt stack 0
  7770  004590                     ___lldiv:
  7771                           	opt stack 22
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;incstack = 0
  7775  004590  0E00               	movlw	0
  7776  004592  0100               	movlb	0	; () banked
  7777  004594  6F88               	movwf	___lldiv@quotient& (0+255),b
  7778  004596  0E00               	movlw	0
  7779  004598  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7780  00459A  0E00               	movlw	0
  7781  00459C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7782  00459E  0E00               	movlw	0
  7783  0045A0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7784                           
  7785                           ; BSR set to: 0
  7786  0045A2  0100               	movlb	0	; () banked
  7787  0045A4  5184               	movf	___lldiv@divisor& (0+255),w,b
  7788  0045A6  0100               	movlb	0	; () banked
  7789  0045A8  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7790  0045AA  0100               	movlb	0	; () banked
  7791  0045AC  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7792  0045AE  0100               	movlb	0	; () banked
  7793  0045B0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7794  0045B2  B4D8               	btfsc	status,2,c
  7795  0045B4  D042               	goto	l1170
  7796                           
  7797                           ; BSR set to: 0
  7798  0045B6  0E01               	movlw	1
  7799  0045B8  0100               	movlb	0	; () banked
  7800  0045BA  6F8C               	movwf	___lldiv@counter& (0+255),b
  7801  0045BC  D008               	goto	l4996
  7802  0045BE                     l4994:
  7803                           
  7804                           ; BSR set to: 0
  7805  0045BE  0100               	movlb	0	; () banked
  7806  0045C0  90D8               	bcf	status,0,c
  7807  0045C2  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7808  0045C4  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7809  0045C6  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7810  0045C8  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7811  0045CA  0100               	movlb	0	; () banked
  7812  0045CC  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7813  0045CE                     l4996:
  7814                           
  7815                           ; BSR set to: 0
  7816  0045CE  0100               	movlb	0	; () banked
  7817  0045D0  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7818  0045D2  D7F5               	goto	l4994
  7819  0045D4                     l4998:
  7820                           
  7821                           ; BSR set to: 0
  7822  0045D4  0100               	movlb	0	; () banked
  7823  0045D6  90D8               	bcf	status,0,c
  7824  0045D8  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7825  0045DA  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7826  0045DC  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7827  0045DE  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7828                           
  7829                           ; BSR set to: 0
  7830  0045E0  0100               	movlb	0	; () banked
  7831  0045E2  5184               	movf	___lldiv@divisor& (0+255),w,b
  7832  0045E4  0100               	movlb	0	; () banked
  7833  0045E6  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7834  0045E8  0100               	movlb	0	; () banked
  7835  0045EA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7836  0045EC  0100               	movlb	0	; () banked
  7837  0045EE  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7838  0045F0  0100               	movlb	0	; () banked
  7839  0045F2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7840  0045F4  0100               	movlb	0	; () banked
  7841  0045F6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7842  0045F8  0100               	movlb	0	; () banked
  7843  0045FA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7844  0045FC  0100               	movlb	0	; () banked
  7845  0045FE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7846  004600  A0D8               	btfss	status,0,c
  7847  004602  D012               	goto	l5006
  7848                           
  7849                           ; BSR set to: 0
  7850  004604  0100               	movlb	0	; () banked
  7851  004606  5184               	movf	___lldiv@divisor& (0+255),w,b
  7852  004608  0100               	movlb	0	; () banked
  7853  00460A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7854  00460C  0100               	movlb	0	; () banked
  7855  00460E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7856  004610  0100               	movlb	0	; () banked
  7857  004612  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7858  004614  0100               	movlb	0	; () banked
  7859  004616  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7860  004618  0100               	movlb	0	; () banked
  7861  00461A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7862  00461C  0100               	movlb	0	; () banked
  7863  00461E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7864  004620  0100               	movlb	0	; () banked
  7865  004622  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7866                           
  7867                           ; BSR set to: 0
  7868  004624  0100               	movlb	0	; () banked
  7869  004626  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7870  004628                     l5006:
  7871                           
  7872                           ; BSR set to: 0
  7873  004628  0100               	movlb	0	; () banked
  7874  00462A  90D8               	bcf	status,0,c
  7875  00462C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7876  00462E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7877  004630  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7878  004632  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7879                           
  7880                           ; BSR set to: 0
  7881  004634  0100               	movlb	0	; () banked
  7882  004636  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7883  004638  D7CD               	goto	l4998
  7884  00463A                     l1170:
  7885                           
  7886                           ; BSR set to: 0
  7887  00463A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7888  00463E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7889  004642  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7890  004646  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7891                           
  7892                           ; BSR set to: 0
  7893  00464A  0012               	return		;funcret
  7894  00464C                     __end_of___lldiv:
  7895                           	opt stack 0
  7896                           tblptru	equ	0xFF8
  7897                           tblptrh	equ	0xFF7
  7898                           tblptrl	equ	0xFF6
  7899                           tablat	equ	0xFF5
  7900                           prodh	equ	0xFF4
  7901                           prodl	equ	0xFF3
  7902                           postinc0	equ	0xFEE
  7903                           wreg	equ	0xFE8
  7904                           postdec1	equ	0xFE5
  7905                           fsr1l	equ	0xFE1
  7906                           indf2	equ	0xFDF
  7907                           postinc2	equ	0xFDE
  7908                           postdec2	equ	0xFDD
  7909                           fsr2h	equ	0xFDA
  7910                           fsr2l	equ	0xFD9
  7911                           status	equ	0xFD8
  7912                           
  7913 ;; *************** function ___ftsub *****************
  7914 ;; Defined at:
  7915 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  f1              3   70[BANK0 ] float 
  7918 ;;  f2              3   73[BANK0 ] float 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;		None
  7921 ;; Return value:  Size  Location     Type
  7922 ;;                  3   70[BANK0 ] float 
  7923 ;; Registers used:
  7924 ;;		wreg, status,2, status,0, cstack
  7925 ;; Tracked objects:
  7926 ;;		On entry : 0/0
  7927 ;;		On exit  : 0/0
  7928 ;;		Unchanged: 0/0
  7929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7930 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;Total ram usage:        6 bytes
  7935 ;; Hardware stack levels used:    1
  7936 ;; Hardware stack levels required when called:    8
  7937 ;; This function calls:
  7938 ;;		___ftadd
  7939 ;; This function is called by:
  7940 ;;		_printf
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text18
  7945  004E20                     __ptext18:
  7946                           	opt stack 0
  7947  004E20                     ___ftsub:
  7948                           	opt stack 20
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;incstack = 0
  7952  004E20  0100               	movlb	0	; () banked
  7953  004E22  51C9               	movf	___ftsub@f2& (0+255),w,b
  7954  004E24  0100               	movlb	0	; () banked
  7955  004E26  11CA               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7956  004E28  0100               	movlb	0	; () banked
  7957  004E2A  11CB               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7958  004E2C  B4D8               	btfsc	status,2,c
  7959  004E2E  D009               	goto	l4904
  7960                           
  7961                           ; BSR set to: 0
  7962  004E30  0E00               	movlw	0
  7963  004E32  0100               	movlb	0	; () banked
  7964  004E34  1BC9               	xorwf	___ftsub@f2& (0+255),f,b
  7965  004E36  0E00               	movlw	0
  7966  004E38  0100               	movlb	0	; () banked
  7967  004E3A  1BCA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7968  004E3C  0E80               	movlw	128
  7969  004E3E  0100               	movlb	0	; () banked
  7970  004E40  1BCB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7971  004E42                     l4904:
  7972                           
  7973                           ; BSR set to: 0
  7974  004E42  C0C6  F0BA         	movff	___ftsub@f1,___ftadd@f1
  7975  004E46  C0C7  F0BB         	movff	___ftsub@f1+1,___ftadd@f1+1
  7976  004E4A  C0C8  F0BC         	movff	___ftsub@f1+2,___ftadd@f1+2
  7977  004E4E  C0C9  F0BD         	movff	___ftsub@f2,___ftadd@f2
  7978  004E52  C0CA  F0BE         	movff	___ftsub@f2+1,___ftadd@f2+1
  7979  004E56  C0CB  F0BF         	movff	___ftsub@f2+2,___ftadd@f2+2
  7980  004E5A  EC1C  F013         	call	___ftadd	;wreg free
  7981  004E5E  C0BA  F0C6         	movff	?___ftadd,?___ftsub
  7982  004E62  C0BB  F0C7         	movff	?___ftadd+1,?___ftsub+1
  7983  004E66  C0BC  F0C8         	movff	?___ftadd+2,?___ftsub+2
  7984  004E6A  0012               	return	
  7985  004E6C                     __end_of___ftsub:
  7986                           	opt stack 0
  7987                           tblptru	equ	0xFF8
  7988                           tblptrh	equ	0xFF7
  7989                           tblptrl	equ	0xFF6
  7990                           tablat	equ	0xFF5
  7991                           prodh	equ	0xFF4
  7992                           prodl	equ	0xFF3
  7993                           postinc0	equ	0xFEE
  7994                           wreg	equ	0xFE8
  7995                           postdec1	equ	0xFE5
  7996                           fsr1l	equ	0xFE1
  7997                           indf2	equ	0xFDF
  7998                           postinc2	equ	0xFDE
  7999                           postdec2	equ	0xFDD
  8000                           fsr2h	equ	0xFDA
  8001                           fsr2l	equ	0xFD9
  8002                           status	equ	0xFD8
  8003                           
  8004 ;; *************** function ___ftneg *****************
  8005 ;; Defined at:
  8006 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  f1              3    0[BANK0 ] float 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;		None
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  3    0[BANK0 ] float 
  8013 ;; Registers used:
  8014 ;;		wreg, status,2, status,0
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8020 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;Total ram usage:        3 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:    6
  8027 ;; This function calls:
  8028 ;;		Nothing
  8029 ;; This function is called by:
  8030 ;;		_printf
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           	psect	text19
  8035  005082                     __ptext19:
  8036                           	opt stack 0
  8037  005082                     ___ftneg:
  8038                           	opt stack 22
  8039                           
  8040                           ;incstack = 0
  8041  005082  0100               	movlb	0	; () banked
  8042  005084  5180               	movf	___ftneg@f1& (0+255),w,b
  8043  005086  0100               	movlb	0	; () banked
  8044  005088  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8045  00508A  0100               	movlb	0	; () banked
  8046  00508C  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8047  00508E  B4D8               	btfsc	status,2,c
  8048  005090  D009               	goto	l1120
  8049                           
  8050                           ; BSR set to: 0
  8051  005092  0E00               	movlw	0
  8052  005094  0100               	movlb	0	; () banked
  8053  005096  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  8054  005098  0E00               	movlw	0
  8055  00509A  0100               	movlb	0	; () banked
  8056  00509C  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8057  00509E  0E80               	movlw	128
  8058  0050A0  0100               	movlb	0	; () banked
  8059  0050A2  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8060  0050A4                     l1120:
  8061                           
  8062                           ; BSR set to: 0
  8063  0050A4  C080  F080         	movff	___ftneg@f1,?___ftneg
  8064  0050A8  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  8065  0050AC  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  8066                           
  8067                           ; BSR set to: 0
  8068  0050B0  0012               	return		;funcret
  8069  0050B2                     __end_of___ftneg:
  8070                           	opt stack 0
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           postinc0	equ	0xFEE
  8078                           wreg	equ	0xFE8
  8079                           postdec1	equ	0xFE5
  8080                           fsr1l	equ	0xFE1
  8081                           indf2	equ	0xFDF
  8082                           postinc2	equ	0xFDE
  8083                           postdec2	equ	0xFDD
  8084                           fsr2h	equ	0xFDA
  8085                           fsr2l	equ	0xFD9
  8086                           status	equ	0xFD8
  8087                           
  8088 ;; *************** function ___ftge *****************
  8089 ;; Defined at:
  8090 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;  ff1             3    0[BANK0 ] float 
  8093 ;;  ff2             3    3[BANK0 ] float 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;		None
  8096 ;; Return value:  Size  Location     Type
  8097 ;;		None               void
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8105 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;Total ram usage:        9 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    6
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_sortBattery
  8116 ;;		_printf
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	text20
  8121  004342                     __ptext20:
  8122                           	opt stack 0
  8123  004342                     ___ftge:
  8124                           	opt stack 22
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;incstack = 0
  8128  004342  0100               	movlb	0	; () banked
  8129  004344  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8130  004346  D01D               	goto	l4924
  8131                           
  8132                           ; BSR set to: 0
  8133  004348  C080  F086         	movff	___ftge@ff1,??___ftge
  8134  00434C  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  8135  004350  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  8136  004354  0100               	movlb	0	; () banked
  8137  004356  1F86               	comf	??___ftge& (0+255),f,b
  8138  004358  1F87               	comf	(??___ftge+1)& (0+255),f,b
  8139  00435A  1F88               	comf	(??___ftge+2)& (0+255),f,b
  8140  00435C  2B86               	incf	??___ftge& (0+255),f,b
  8141  00435E  0E00               	movlw	0
  8142  004360  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  8143  004362  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  8144  004364  0E00               	movlw	0
  8145  004366  0100               	movlb	0	; () banked
  8146  004368  2586               	addwf	??___ftge& (0+255),w,b
  8147  00436A  0100               	movlb	0	; () banked
  8148  00436C  6F80               	movwf	___ftge@ff1& (0+255),b
  8149  00436E  0E00               	movlw	0
  8150  004370  0100               	movlb	0	; () banked
  8151  004372  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8152  004374  0100               	movlb	0	; () banked
  8153  004376  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  8154  004378  0E80               	movlw	128
  8155  00437A  0100               	movlb	0	; () banked
  8156  00437C  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8157  00437E  0100               	movlb	0	; () banked
  8158  004380  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  8159  004382                     l4924:
  8160                           
  8161                           ; BSR set to: 0
  8162  004382  0100               	movlb	0	; () banked
  8163  004384  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8164  004386  D01D               	goto	l4928
  8165                           
  8166                           ; BSR set to: 0
  8167  004388  C083  F086         	movff	___ftge@ff2,??___ftge
  8168  00438C  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  8169  004390  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  8170  004394  0100               	movlb	0	; () banked
  8171  004396  1F86               	comf	??___ftge& (0+255),f,b
  8172  004398  1F87               	comf	(??___ftge+1)& (0+255),f,b
  8173  00439A  1F88               	comf	(??___ftge+2)& (0+255),f,b
  8174  00439C  2B86               	incf	??___ftge& (0+255),f,b
  8175  00439E  0E00               	movlw	0
  8176  0043A0  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  8177  0043A2  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  8178  0043A4  0E00               	movlw	0
  8179  0043A6  0100               	movlb	0	; () banked
  8180  0043A8  2586               	addwf	??___ftge& (0+255),w,b
  8181  0043AA  0100               	movlb	0	; () banked
  8182  0043AC  6F83               	movwf	___ftge@ff2& (0+255),b
  8183  0043AE  0E00               	movlw	0
  8184  0043B0  0100               	movlb	0	; () banked
  8185  0043B2  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8186  0043B4  0100               	movlb	0	; () banked
  8187  0043B6  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  8188  0043B8  0E80               	movlw	128
  8189  0043BA  0100               	movlb	0	; () banked
  8190  0043BC  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8191  0043BE  0100               	movlb	0	; () banked
  8192  0043C0  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  8193  0043C2                     l4928:
  8194                           
  8195                           ; BSR set to: 0
  8196  0043C2  0E00               	movlw	0
  8197  0043C4  0100               	movlb	0	; () banked
  8198  0043C6  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  8199  0043C8  0E00               	movlw	0
  8200  0043CA  0100               	movlb	0	; () banked
  8201  0043CC  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8202  0043CE  0E80               	movlw	128
  8203  0043D0  0100               	movlb	0	; () banked
  8204  0043D2  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8205                           
  8206                           ; BSR set to: 0
  8207  0043D4  0E00               	movlw	0
  8208  0043D6  0100               	movlb	0	; () banked
  8209  0043D8  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  8210  0043DA  0E00               	movlw	0
  8211  0043DC  0100               	movlb	0	; () banked
  8212  0043DE  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8213  0043E0  0E80               	movlw	128
  8214  0043E2  0100               	movlb	0	; () banked
  8215  0043E4  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8216  0043E6  0100               	movlb	0	; () banked
  8217  0043E8  5183               	movf	___ftge@ff2& (0+255),w,b
  8218  0043EA  0100               	movlb	0	; () banked
  8219  0043EC  5D80               	subwf	___ftge@ff1& (0+255),w,b
  8220  0043EE  0100               	movlb	0	; () banked
  8221  0043F0  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  8222  0043F2  0100               	movlb	0	; () banked
  8223  0043F4  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8224  0043F6  0100               	movlb	0	; () banked
  8225  0043F8  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  8226  0043FA  0100               	movlb	0	; () banked
  8227  0043FC  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8228  0043FE  B0D8               	btfsc	status,0,c
  8229  004400  D002               	goto	l4934
  8230                           
  8231                           ; BSR set to: 0
  8232  004402  90D8               	bcf	status,0,c
  8233  004404  0012               	return	
  8234  004406                     l4934:
  8235                           
  8236                           ; BSR set to: 0
  8237  004406  80D8               	bsf	status,0,c
  8238                           
  8239                           ; BSR set to: 0
  8240  004408  0012               	return	
  8241  00440A                     __end_of___ftge:
  8242                           	opt stack 0
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           postinc0	equ	0xFEE
  8250                           wreg	equ	0xFE8
  8251                           postdec1	equ	0xFE5
  8252                           fsr1l	equ	0xFE1
  8253                           indf2	equ	0xFDF
  8254                           postinc2	equ	0xFDE
  8255                           postdec2	equ	0xFDD
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _lcdClear *****************
  8261 ;; Defined at:
  8262 ;;		line 74 in file "lcd.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;		None
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;		None
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  1    wreg      void 
  8269 ;; Registers used:
  8270 ;;		wreg, status,2, status,0, cstack
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:        0 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    8
  8283 ;; This function calls:
  8284 ;;		_lcdInst
  8285 ;; This function is called by:
  8286 ;;		_main
  8287 ;;		_sortBattery
  8288 ;;		_pause
  8289 ;;		_dateTime
  8290 ;;		_mainMenu
  8291 ;;		_runSelect
  8292 ;;		_runMenu
  8293 ;;		_runTime
  8294 ;;		_runStats
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text21
  8299  005250                     __ptext21:
  8300                           	opt stack 0
  8301  005250                     _lcdClear:
  8302                           	opt stack 20
  8303                           
  8304                           ;lcd.c: 75: lcdInst(0b00000001);
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;incstack = 0
  8308  005250  0E01               	movlw	1
  8309  005252  EC9A  F028         	call	_lcdInst
  8310  005256  0012               	return		;funcret
  8311  005258                     __end_of_lcdClear:
  8312                           	opt stack 0
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           postdec1	equ	0xFE5
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function _digitalWrite *****************
  8331 ;; Defined at:
  8332 ;;		line 53 in file "iopin.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  pin             2    0[BANK0 ] PTR int 
  8335 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
  8336 ;;		 -> cylinderMotor(4), 
  8337 ;;  val             2    2[BANK0 ] int 
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  p               2    7[BANK0 ] int 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;Total ram usage:        9 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    6
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;;		_sortBattery
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text22
  8365  003D9E                     __ptext22:
  8366                           	opt stack 0
  8367  003D9E                     _digitalWrite:
  8368                           	opt stack 23
  8369                           
  8370                           ;iopin.c: 54: if(pin){
  8371                           
  8372                           ;incstack = 0
  8373  003D9E  0100               	movlb	0	; () banked
  8374  003DA0  5180               	movf	digitalWrite@pin& (0+255),w,b
  8375  003DA2  0100               	movlb	0	; () banked
  8376  003DA4  1181               	iorwf	(digitalWrite@pin+1)& (0+255),w,b
  8377  003DA6  B4D8               	btfsc	status,2,c
  8378  003DA8  0012               	return	
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;iopin.c: 55: int p = 1 << pin[1];
  8382  003DAA  0100               	movlb	0	; () banked
  8383  003DAC  EE20 F002          	lfsr	2,2
  8384  003DB0  5180               	movf	digitalWrite@pin& (0+255),w,b
  8385  003DB2  26D9               	addwf	fsr2l,f,c
  8386  003DB4  5181               	movf	(digitalWrite@pin+1)& (0+255),w,b
  8387  003DB6  22DA               	addwfc	fsr2h,f,c
  8388  003DB8  50DF               	movf	indf2,w,c
  8389  003DBA  0100               	movlb	0	; () banked
  8390  003DBC  6F84               	movwf	??_digitalWrite& (0+255),b
  8391  003DBE  0E01               	movlw	1
  8392  003DC0  0100               	movlb	0	; () banked
  8393  003DC2  6F85               	movwf	(??_digitalWrite+1)& (0+255),b
  8394  003DC4  0E00               	movlw	0
  8395  003DC6  0100               	movlb	0	; () banked
  8396  003DC8  6F86               	movwf	(??_digitalWrite+2)& (0+255),b
  8397  003DCA  0100               	movlb	0	; () banked
  8398  003DCC  2B84               	incf	??_digitalWrite& (0+255),f,b
  8399  003DCE  D004               	goto	u6074
  8400  003DD0                     u6075:
  8401  003DD0  90D8               	bcf	status,0,c
  8402  003DD2  0100               	movlb	0	; () banked
  8403  003DD4  3785               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  8404  003DD6  3786               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  8405  003DD8                     u6074:
  8406  003DD8  0100               	movlb	0	; () banked
  8407  003DDA  2F84               	decfsz	??_digitalWrite& (0+255),f,b
  8408  003DDC  D7F9               	goto	u6075
  8409  003DDE  C085  F087         	movff	??_digitalWrite+1,digitalWrite@p
  8410  003DE2  C086  F088         	movff	??_digitalWrite+2,digitalWrite@p+1
  8411                           
  8412                           ;iopin.c: 56: if(val == 0){
  8413  003DE6  0100               	movlb	0	; () banked
  8414  003DE8  5182               	movf	digitalWrite@val& (0+255),w,b
  8415  003DEA  0100               	movlb	0	; () banked
  8416  003DEC  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8417  003DEE  A4D8               	btfss	status,2,c
  8418  003DF0  D03C               	goto	l5704
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;iopin.c: 57: p ^= 0xff;
  8422  003DF2  0EFF               	movlw	255
  8423  003DF4  0100               	movlb	0	; () banked
  8424  003DF6  1B87               	xorwf	digitalWrite@p& (0+255),f,b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;iopin.c: 58: }
  8428                           ;iopin.c: 60: switch(pin[0]){
  8429  003DF8  D038               	goto	l5704
  8430  003DFA                     l5680:
  8431                           
  8432                           ; BSR set to: 0
  8433  003DFA  0100               	movlb	0	; () banked
  8434  003DFC  0582               	decf	digitalWrite@val& (0+255),w,b
  8435  003DFE  0100               	movlb	0	; () banked
  8436  003E00  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8437  003E02  A4D8               	btfss	status,2,c
  8438  003E04  D004               	goto	l5684
  8439                           
  8440                           ; BSR set to: 0
  8441  003E06  0100               	movlb	0	; () banked
  8442  003E08  5187               	movf	digitalWrite@p& (0+255),w,b
  8443  003E0A  1289               	iorwf	3977,f,c	;volatile
  8444  003E0C  0012               	return	
  8445  003E0E                     l5684:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;iopin.c: 62: else LATA &= p;
  8449  003E0E  0100               	movlb	0	; () banked
  8450  003E10  5187               	movf	digitalWrite@p& (0+255),w,b
  8451  003E12  1689               	andwf	3977,f,c	;volatile
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;iopin.c: 63: break;
  8455  003E14  0012               	return	
  8456  003E16                     l5686:
  8457                           
  8458                           ; BSR set to: 0
  8459  003E16  0100               	movlb	0	; () banked
  8460  003E18  0582               	decf	digitalWrite@val& (0+255),w,b
  8461  003E1A  0100               	movlb	0	; () banked
  8462  003E1C  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8463  003E1E  A4D8               	btfss	status,2,c
  8464  003E20  D004               	goto	l5690
  8465                           
  8466                           ; BSR set to: 0
  8467  003E22  0100               	movlb	0	; () banked
  8468  003E24  5187               	movf	digitalWrite@p& (0+255),w,b
  8469  003E26  128A               	iorwf	3978,f,c	;volatile
  8470  003E28  0012               	return	
  8471  003E2A                     l5690:
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;iopin.c: 65: else LATB &= p;
  8475  003E2A  0100               	movlb	0	; () banked
  8476  003E2C  5187               	movf	digitalWrite@p& (0+255),w,b
  8477  003E2E  168A               	andwf	3978,f,c	;volatile
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;iopin.c: 66: break;
  8481  003E30  0012               	return	
  8482  003E32                     l5692:
  8483                           
  8484                           ; BSR set to: 0
  8485  003E32  0100               	movlb	0	; () banked
  8486  003E34  0582               	decf	digitalWrite@val& (0+255),w,b
  8487  003E36  0100               	movlb	0	; () banked
  8488  003E38  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8489  003E3A  A4D8               	btfss	status,2,c
  8490  003E3C  D004               	goto	l5696
  8491                           
  8492                           ; BSR set to: 0
  8493  003E3E  0100               	movlb	0	; () banked
  8494  003E40  5187               	movf	digitalWrite@p& (0+255),w,b
  8495  003E42  128B               	iorwf	3979,f,c	;volatile
  8496  003E44  0012               	return	
  8497  003E46                     l5696:
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;iopin.c: 68: else LATC &= p;
  8501  003E46  0100               	movlb	0	; () banked
  8502  003E48  5187               	movf	digitalWrite@p& (0+255),w,b
  8503  003E4A  168B               	andwf	3979,f,c	;volatile
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;iopin.c: 69: break;
  8507  003E4C  0012               	return	
  8508  003E4E                     l5698:
  8509                           
  8510                           ; BSR set to: 0
  8511  003E4E  0100               	movlb	0	; () banked
  8512  003E50  0582               	decf	digitalWrite@val& (0+255),w,b
  8513  003E52  0100               	movlb	0	; () banked
  8514  003E54  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8515  003E56  A4D8               	btfss	status,2,c
  8516  003E58  D004               	goto	l5702
  8517                           
  8518                           ; BSR set to: 0
  8519  003E5A  0100               	movlb	0	; () banked
  8520  003E5C  5187               	movf	digitalWrite@p& (0+255),w,b
  8521  003E5E  128C               	iorwf	3980,f,c	;volatile
  8522  003E60  0012               	return	
  8523  003E62                     l5702:
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;iopin.c: 71: else LATD &= p;
  8527  003E62  0100               	movlb	0	; () banked
  8528  003E64  5187               	movf	digitalWrite@p& (0+255),w,b
  8529  003E66  168C               	andwf	3980,f,c	;volatile
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;iopin.c: 72: }
  8533  003E68  0012               	return	
  8534  003E6A                     l5704:
  8535                           
  8536                           ; BSR set to: 0
  8537  003E6A  C080  FFD9         	movff	digitalWrite@pin,fsr2l
  8538  003E6E  C081  FFDA         	movff	digitalWrite@pin+1,fsr2h
  8539  003E72  CFDE F084          	movff	postinc2,??_digitalWrite
  8540  003E76  CFDD F085          	movff	postdec2,??_digitalWrite+1
  8541                           
  8542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8543                           ; Switch size 1, requested type "space"
  8544                           ; Number of cases is 1, Range of values is 0 to 0
  8545                           ; switch strategies available:
  8546                           ; Name         Instructions Cycles
  8547                           ; simple_byte            4     3 (average)
  8548                           ;	Chosen strategy is simple_byte
  8549  003E7A  0100               	movlb	0	; () banked
  8550  003E7C  5185               	movf	(??_digitalWrite+1)& (0+255),w,b
  8551  003E7E  0A00               	xorlw	0	; case 0
  8552  003E80  A4D8               	btfss	status,2,c
  8553  003E82  0012               	return	
  8554                           
  8555                           ; BSR set to: 0
  8556                           ; Switch size 1, requested type "space"
  8557                           ; Number of cases is 4, Range of values is 0 to 3
  8558                           ; switch strategies available:
  8559                           ; Name         Instructions Cycles
  8560                           ; simple_byte           13     7 (average)
  8561                           ;	Chosen strategy is simple_byte
  8562  003E84  0100               	movlb	0	; () banked
  8563  003E86  5184               	movf	??_digitalWrite& (0+255),w,b
  8564  003E88  0A00               	xorlw	0	; case 0
  8565  003E8A  B4D8               	btfsc	status,2,c
  8566  003E8C  D7B6               	goto	l5680
  8567  003E8E  0A01               	xorlw	1	; case 1
  8568  003E90  B4D8               	btfsc	status,2,c
  8569  003E92  D7C1               	goto	l5686
  8570  003E94  0A03               	xorlw	3	; case 2
  8571  003E96  B4D8               	btfsc	status,2,c
  8572  003E98  D7CC               	goto	l5692
  8573  003E9A  0A01               	xorlw	1	; case 3
  8574  003E9C  A4D8               	btfss	status,2,c
  8575                           
  8576                           ; BSR set to: 0
  8577  003E9E  0012               	return	
  8578  003EA0  D7D6               	goto	l5698
  8579  003EA2                     __end_of_digitalWrite:
  8580                           	opt stack 0
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           postinc0	equ	0xFEE
  8588                           wreg	equ	0xFE8
  8589                           postdec1	equ	0xFE5
  8590                           fsr1l	equ	0xFE1
  8591                           indf2	equ	0xFDF
  8592                           postinc2	equ	0xFDE
  8593                           postdec2	equ	0xFDD
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _digitalRead *****************
  8599 ;; Defined at:
  8600 ;;		line 43 in file "iopin.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  pin             2    0[BANK0 ] PTR int 
  8603 ;;		 -> padPin2(4), padPin1(4), 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  2    0[BANK0 ] int 
  8608 ;; Registers used:
  8609 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8615 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;Total ram usage:        4 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    6
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_sortBattery
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           	psect	text23
  8630  003920                     __ptext23:
  8631                           	opt stack 0
  8632  003920                     _digitalRead:
  8633                           	opt stack 23
  8634                           
  8635                           ;iopin.c: 44: switch(pin[0]){
  8636                           
  8637                           ; BSR set to: 0
  8638                           ;incstack = 0
  8639  003920  D078               	goto	l5750
  8640  003922                     l5732:
  8641  003922  0100               	movlb	0	; () banked
  8642  003924  EE20 F002          	lfsr	2,2
  8643  003928  5180               	movf	digitalRead@pin& (0+255),w,b
  8644  00392A  26D9               	addwf	fsr2l,f,c
  8645  00392C  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8646  00392E  22DA               	addwfc	fsr2h,f,c
  8647  003930  50DF               	movf	indf2,w,c
  8648  003932  0100               	movlb	0	; () banked
  8649  003934  6F82               	movwf	??_digitalRead& (0+255),b
  8650  003936  CF80 F083          	movff	3968,??_digitalRead+1	;volatile
  8651  00393A  0100               	movlb	0	; () banked
  8652  00393C  2B82               	incf	??_digitalRead& (0+255),f,b
  8653  00393E  D003               	goto	u6154
  8654  003940                     u6155:
  8655  003940  0100               	movlb	0	; () banked
  8656  003942  90D8               	bcf	status,0,c
  8657  003944  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8658  003946                     u6154:
  8659  003946  0100               	movlb	0	; () banked
  8660  003948  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8661  00394A  D7FA               	goto	u6155
  8662  00394C  0E01               	movlw	1
  8663  00394E  0100               	movlb	0	; () banked
  8664  003950  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8665  003952  0100               	movlb	0	; () banked
  8666  003954  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8667  003956  0100               	movlb	0	; () banked
  8668  003958  6F80               	movwf	?_digitalRead& (0+255),b
  8669  00395A  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8670                           
  8671                           ; BSR set to: 0
  8672  00395C  0012               	return	
  8673  00395E                     l5736:
  8674                           
  8675                           ; BSR set to: 0
  8676  00395E  0100               	movlb	0	; () banked
  8677  003960  EE20 F002          	lfsr	2,2
  8678  003964  5180               	movf	digitalRead@pin& (0+255),w,b
  8679  003966  26D9               	addwf	fsr2l,f,c
  8680  003968  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8681  00396A  22DA               	addwfc	fsr2h,f,c
  8682  00396C  50DF               	movf	indf2,w,c
  8683  00396E  0100               	movlb	0	; () banked
  8684  003970  6F82               	movwf	??_digitalRead& (0+255),b
  8685  003972  CF81 F083          	movff	3969,??_digitalRead+1	;volatile
  8686  003976  0100               	movlb	0	; () banked
  8687  003978  2B82               	incf	??_digitalRead& (0+255),f,b
  8688  00397A  D003               	goto	u6164
  8689  00397C                     u6165:
  8690  00397C  0100               	movlb	0	; () banked
  8691  00397E  90D8               	bcf	status,0,c
  8692  003980  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8693  003982                     u6164:
  8694  003982  0100               	movlb	0	; () banked
  8695  003984  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8696  003986  D7FA               	goto	u6165
  8697  003988  0E01               	movlw	1
  8698  00398A  0100               	movlb	0	; () banked
  8699  00398C  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8700  00398E  0100               	movlb	0	; () banked
  8701  003990  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8702  003992  0100               	movlb	0	; () banked
  8703  003994  6F80               	movwf	?_digitalRead& (0+255),b
  8704  003996  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8705                           
  8706                           ; BSR set to: 0
  8707  003998  0012               	return	
  8708  00399A                     l5740:
  8709                           
  8710                           ; BSR set to: 0
  8711  00399A  0100               	movlb	0	; () banked
  8712  00399C  EE20 F002          	lfsr	2,2
  8713  0039A0  5180               	movf	digitalRead@pin& (0+255),w,b
  8714  0039A2  26D9               	addwf	fsr2l,f,c
  8715  0039A4  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8716  0039A6  22DA               	addwfc	fsr2h,f,c
  8717  0039A8  50DF               	movf	indf2,w,c
  8718  0039AA  0100               	movlb	0	; () banked
  8719  0039AC  6F82               	movwf	??_digitalRead& (0+255),b
  8720  0039AE  CF82 F083          	movff	3970,??_digitalRead+1	;volatile
  8721  0039B2  0100               	movlb	0	; () banked
  8722  0039B4  2B82               	incf	??_digitalRead& (0+255),f,b
  8723  0039B6  D003               	goto	u6174
  8724  0039B8                     u6175:
  8725  0039B8  0100               	movlb	0	; () banked
  8726  0039BA  90D8               	bcf	status,0,c
  8727  0039BC  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8728  0039BE                     u6174:
  8729  0039BE  0100               	movlb	0	; () banked
  8730  0039C0  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8731  0039C2  D7FA               	goto	u6175
  8732  0039C4  0E01               	movlw	1
  8733  0039C6  0100               	movlb	0	; () banked
  8734  0039C8  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8735  0039CA  0100               	movlb	0	; () banked
  8736  0039CC  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8737  0039CE  0100               	movlb	0	; () banked
  8738  0039D0  6F80               	movwf	?_digitalRead& (0+255),b
  8739  0039D2  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8740                           
  8741                           ; BSR set to: 0
  8742  0039D4  0012               	return	
  8743  0039D6                     l5744:
  8744                           
  8745                           ; BSR set to: 0
  8746  0039D6  0100               	movlb	0	; () banked
  8747  0039D8  EE20 F002          	lfsr	2,2
  8748  0039DC  5180               	movf	digitalRead@pin& (0+255),w,b
  8749  0039DE  26D9               	addwf	fsr2l,f,c
  8750  0039E0  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8751  0039E2  22DA               	addwfc	fsr2h,f,c
  8752  0039E4  50DF               	movf	indf2,w,c
  8753  0039E6  0100               	movlb	0	; () banked
  8754  0039E8  6F82               	movwf	??_digitalRead& (0+255),b
  8755  0039EA  CF83 F083          	movff	3971,??_digitalRead+1	;volatile
  8756  0039EE  0100               	movlb	0	; () banked
  8757  0039F0  2B82               	incf	??_digitalRead& (0+255),f,b
  8758  0039F2  D003               	goto	u6184
  8759  0039F4                     u6185:
  8760  0039F4  0100               	movlb	0	; () banked
  8761  0039F6  90D8               	bcf	status,0,c
  8762  0039F8  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8763  0039FA                     u6184:
  8764  0039FA  0100               	movlb	0	; () banked
  8765  0039FC  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8766  0039FE  D7FA               	goto	u6185
  8767  003A00  0E01               	movlw	1
  8768  003A02  0100               	movlb	0	; () banked
  8769  003A04  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8770  003A06  0100               	movlb	0	; () banked
  8771  003A08  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8772  003A0A  0100               	movlb	0	; () banked
  8773  003A0C  6F80               	movwf	?_digitalRead& (0+255),b
  8774  003A0E  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8775                           
  8776                           ; BSR set to: 0
  8777  003A10  0012               	return	
  8778  003A12                     l5750:
  8779  003A12  C080  FFD9         	movff	digitalRead@pin,fsr2l
  8780  003A16  C081  FFDA         	movff	digitalRead@pin+1,fsr2h
  8781  003A1A  CFDE F082          	movff	postinc2,??_digitalRead
  8782  003A1E  CFDD F083          	movff	postdec2,??_digitalRead+1
  8783                           
  8784                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8785                           ; Switch size 1, requested type "space"
  8786                           ; Number of cases is 1, Range of values is 0 to 0
  8787                           ; switch strategies available:
  8788                           ; Name         Instructions Cycles
  8789                           ; simple_byte            4     3 (average)
  8790                           ;	Chosen strategy is simple_byte
  8791  003A22  0100               	movlb	0	; () banked
  8792  003A24  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8793  003A26  0A00               	xorlw	0	; case 0
  8794  003A28  A4D8               	btfss	status,2,c
  8795  003A2A  D00E               	goto	l295
  8796                           
  8797                           ; BSR set to: 0
  8798                           ; Switch size 1, requested type "space"
  8799                           ; Number of cases is 4, Range of values is 0 to 3
  8800                           ; switch strategies available:
  8801                           ; Name         Instructions Cycles
  8802                           ; simple_byte           13     7 (average)
  8803                           ;	Chosen strategy is simple_byte
  8804  003A2C  0100               	movlb	0	; () banked
  8805  003A2E  5182               	movf	??_digitalRead& (0+255),w,b
  8806  003A30  0A00               	xorlw	0	; case 0
  8807  003A32  B4D8               	btfsc	status,2,c
  8808  003A34  D776               	goto	l5732
  8809  003A36  0A01               	xorlw	1	; case 1
  8810  003A38  B4D8               	btfsc	status,2,c
  8811  003A3A  D791               	goto	l5736
  8812  003A3C  0A03               	xorlw	3	; case 2
  8813  003A3E  B4D8               	btfsc	status,2,c
  8814  003A40  D7AC               	goto	l5740
  8815  003A42  0A01               	xorlw	1	; case 3
  8816  003A44  B4D8               	btfsc	status,2,c
  8817  003A46  D7C7               	goto	l5744
  8818  003A48                     l295:
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;iopin.c: 50: return -1;
  8822  003A48  0100               	movlb	0	; () banked
  8823  003A4A  6980               	setf	?_digitalRead& (0+255),b
  8824  003A4C  6981               	setf	(?_digitalRead+1)& (0+255),b
  8825                           
  8826                           ; BSR set to: 0
  8827  003A4E  0012               	return		;funcret
  8828  003A50                     __end_of_digitalRead:
  8829                           	opt stack 0
  8830                           tblptru	equ	0xFF8
  8831                           tblptrh	equ	0xFF7
  8832                           tblptrl	equ	0xFF6
  8833                           tablat	equ	0xFF5
  8834                           prodh	equ	0xFF4
  8835                           prodl	equ	0xFF3
  8836                           postinc0	equ	0xFEE
  8837                           wreg	equ	0xFE8
  8838                           postdec1	equ	0xFE5
  8839                           fsr1l	equ	0xFE1
  8840                           indf2	equ	0xFDF
  8841                           postinc2	equ	0xFDE
  8842                           postdec2	equ	0xFDD
  8843                           fsr2h	equ	0xFDA
  8844                           fsr2l	equ	0xFD9
  8845                           status	equ	0xFD8
  8846                           
  8847 ;; *************** function _analogRead *****************
  8848 ;; Defined at:
  8849 ;;		line 90 in file "iopin.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  channel         2    0[BANK0 ] int 
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;		None
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  4    0[BANK0 ] long 
  8856 ;; Registers used:
  8857 ;;		wreg, status,2, status,0
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8863 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;Total ram usage:        6 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    6
  8870 ;; This function calls:
  8871 ;;		Nothing
  8872 ;; This function is called by:
  8873 ;;		_sortBattery
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text24
  8878  004F8C                     __ptext24:
  8879                           	opt stack 0
  8880  004F8C                     _analogRead:
  8881                           	opt stack 23
  8882                           
  8883                           ;iopin.c: 91: ADCON0 = channel<<2;
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;incstack = 0
  8887  004F8C  0100               	movlb	0	; () banked
  8888  004F8E  4580               	rlncf	analogRead@channel& (0+255),w,b
  8889  004F90  46E8               	rlncf	wreg,f,c
  8890  004F92  0BFC               	andlw	252
  8891  004F94  6EC2               	movwf	4034,c	;volatile
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;iopin.c: 92: ADCON0 |= 1<<0;
  8895  004F96  80C2               	bsf	4034,0,c	;volatile
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;iopin.c: 93: ADCON0 |= 1<<1;
  8899  004F98  82C2               	bsf	4034,1,c	;volatile
  8900  004F9A                     l320:
  8901  004F9A  B2C2               	btfsc	4034,1,c	;volatile
  8902  004F9C  D7FE               	goto	l320
  8903                           
  8904                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  8905  004F9E  50C3               	movf	4035,w,c	;volatile
  8906  004FA0  CFC4 F084          	movff	4036,??_analogRead	;volatile
  8907  004FA4  0100               	movlb	0	; () banked
  8908  004FA6  6B85               	clrf	(??_analogRead+1)& (0+255),b
  8909  004FA8  C084  F085         	movff	??_analogRead,??_analogRead+1
  8910  004FAC  0100               	movlb	0	; () banked
  8911  004FAE  6B84               	clrf	??_analogRead& (0+255),b
  8912  004FB0  0100               	movlb	0	; () banked
  8913  004FB2  2784               	addwf	??_analogRead& (0+255),f,b
  8914  004FB4  0E00               	movlw	0
  8915  004FB6  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  8916  004FB8  C084  F080         	movff	??_analogRead,?_analogRead
  8917  004FBC  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  8918  004FC0  0100               	movlb	0	; () banked
  8919  004FC2  0E00               	movlw	0
  8920  004FC4  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  8921  004FC6  0EFF               	movlw	-1
  8922  004FC8  6F82               	movwf	(?_analogRead+2)& (0+255),b
  8923  004FCA  6F83               	movwf	(?_analogRead+3)& (0+255),b
  8924  004FCC  0012               	return	
  8925  004FCE                     __end_of_analogRead:
  8926                           	opt stack 0
  8927                           tblptru	equ	0xFF8
  8928                           tblptrh	equ	0xFF7
  8929                           tblptrl	equ	0xFF6
  8930                           tablat	equ	0xFF5
  8931                           prodh	equ	0xFF4
  8932                           prodl	equ	0xFF3
  8933                           postinc0	equ	0xFEE
  8934                           wreg	equ	0xFE8
  8935                           postdec1	equ	0xFE5
  8936                           fsr1l	equ	0xFE1
  8937                           indf2	equ	0xFDF
  8938                           postinc2	equ	0xFDE
  8939                           postdec2	equ	0xFDD
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function _pinSetup *****************
  8945 ;; Defined at:
  8946 ;;		line 212 in file "main.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;		None
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;		None
  8951 ;; Return value:  Size  Location     Type
  8952 ;;                  1    wreg      void 
  8953 ;; Registers used:
  8954 ;;		wreg, status,2, status,0
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;Total ram usage:        0 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    6
  8967 ;; This function calls:
  8968 ;;		Nothing
  8969 ;; This function is called by:
  8970 ;;		_main
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           	psect	text25
  8975  00500E                     __ptext25:
  8976                           	opt stack 0
  8977  00500E                     _pinSetup:
  8978                           	opt stack 24
  8979                           
  8980                           ;main.c: 218: TRISA = 0xFF;
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;incstack = 0
  8984  00500E  6892               	setf	3986,c	;volatile
  8985                           
  8986                           ;main.c: 219: TRISB = 0xFF;
  8987  005010  6893               	setf	3987,c	;volatile
  8988                           
  8989                           ;main.c: 220: TRISC = 0b11000000;
  8990  005012  0EC0               	movlw	192
  8991  005014  6E94               	movwf	3988,c	;volatile
  8992                           
  8993                           ;main.c: 221: TRISD = 0x00;
  8994  005016  0E00               	movlw	0
  8995  005018  6E95               	movwf	3989,c	;volatile
  8996                           
  8997                           ;main.c: 222: TRISE = 0x00;
  8998  00501A  0E00               	movlw	0
  8999  00501C  6E96               	movwf	3990,c	;volatile
  9000                           
  9001                           ;main.c: 224: LATA = 0x00;
  9002  00501E  0E00               	movlw	0
  9003  005020  6E89               	movwf	3977,c	;volatile
  9004                           
  9005                           ;main.c: 225: LATB = 0x00;
  9006  005022  0E00               	movlw	0
  9007  005024  6E8A               	movwf	3978,c	;volatile
  9008                           
  9009                           ;main.c: 226: LATC = 0x00;
  9010  005026  0E00               	movlw	0
  9011  005028  6E8B               	movwf	3979,c	;volatile
  9012                           
  9013                           ;main.c: 227: LATD = 0x00;
  9014  00502A  0E00               	movlw	0
  9015  00502C  6E8C               	movwf	3980,c	;volatile
  9016                           
  9017                           ;main.c: 228: LATE = 0x00;
  9018  00502E  0E00               	movlw	0
  9019  005030  6E8D               	movwf	3981,c	;volatile
  9020                           
  9021                           ;main.c: 230: ADCON0 = 0x00;
  9022  005032  0E00               	movlw	0
  9023  005034  6EC2               	movwf	4034,c	;volatile
  9024                           
  9025                           ;main.c: 232: ADCON1 |= 0x0B;
  9026  005036  0E0B               	movlw	11
  9027  005038  12C1               	iorwf	4033,f,c	;volatile
  9028                           
  9029                           ;main.c: 237: ADCON2 = 0;
  9030  00503A  0E00               	movlw	0
  9031  00503C  6EC0               	movwf	4032,c	;volatile
  9032                           
  9033                           ;main.c: 238: ADCON2 |= 0b010;
  9034  00503E  82C0               	bsf	4032,1,c	;volatile
  9035                           
  9036                           ;main.c: 239: ADCON2 |= 0b110<<3;
  9037  005040  0E30               	movlw	48
  9038  005042  12C0               	iorwf	4032,f,c	;volatile
  9039                           
  9040                           ;main.c: 240: ADCON2 |= 1<<7;
  9041  005044  8EC0               	bsf	4032,7,c	;volatile
  9042                           
  9043                           ;main.c: 244: INT0IE = 1;
  9044  005046  88F2               	bsf	intcon,4,c	;volatile
  9045                           
  9046                           ;main.c: 245: (INTCONbits.GIE = 1);
  9047  005048  8EF2               	bsf	intcon,7,c	;volatile
  9048  00504A  0012               	return		;funcret
  9049  00504C                     __end_of_pinSetup:
  9050                           	opt stack 0
  9051                           tblptru	equ	0xFF8
  9052                           tblptrh	equ	0xFF7
  9053                           tblptrl	equ	0xFF6
  9054                           tablat	equ	0xFF5
  9055                           prodh	equ	0xFF4
  9056                           prodl	equ	0xFF3
  9057                           intcon	equ	0xFF2
  9058                           postinc0	equ	0xFEE
  9059                           wreg	equ	0xFE8
  9060                           postdec1	equ	0xFE5
  9061                           fsr1l	equ	0xFE1
  9062                           indf2	equ	0xFDF
  9063                           postinc2	equ	0xFDE
  9064                           postdec2	equ	0xFDD
  9065                           fsr2h	equ	0xFDA
  9066                           fsr2l	equ	0xFD9
  9067                           status	equ	0xFD8
  9068                           
  9069 ;; *************** function _lcdHome *****************
  9070 ;; Defined at:
  9071 ;;		line 70 in file "lcd.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;		None
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;		None
  9076 ;; Return value:  Size  Location     Type
  9077 ;;                  2   18[None  ] int 
  9078 ;; Registers used:
  9079 ;;		wreg, status,2, status,0, cstack
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;Total ram usage:        0 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; Hardware stack levels required when called:    8
  9092 ;; This function calls:
  9093 ;;		_lcdInst
  9094 ;; This function is called by:
  9095 ;;		_main
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	text26
  9100  005258                     __ptext26:
  9101                           	opt stack 0
  9102  005258                     _lcdHome:
  9103                           	opt stack 22
  9104                           
  9105                           ;lcd.c: 71: lcdInst(0b11000000);
  9106                           
  9107                           ;incstack = 0
  9108  005258  0EC0               	movlw	192
  9109  00525A  EC9A  F028         	call	_lcdInst
  9110  00525E  0012               	return		;funcret
  9111  005260                     __end_of_lcdHome:
  9112                           	opt stack 0
  9113                           tblptru	equ	0xFF8
  9114                           tblptrh	equ	0xFF7
  9115                           tblptrl	equ	0xFF6
  9116                           tablat	equ	0xFF5
  9117                           prodh	equ	0xFF4
  9118                           prodl	equ	0xFF3
  9119                           intcon	equ	0xFF2
  9120                           postinc0	equ	0xFEE
  9121                           wreg	equ	0xFE8
  9122                           postdec1	equ	0xFE5
  9123                           fsr1l	equ	0xFE1
  9124                           indf2	equ	0xFDF
  9125                           postinc2	equ	0xFDE
  9126                           postdec2	equ	0xFDD
  9127                           fsr2h	equ	0xFDA
  9128                           fsr2l	equ	0xFD9
  9129                           status	equ	0xFD8
  9130                           
  9131 ;; *************** function _initServo *****************
  9132 ;; Defined at:
  9133 ;;		line 21 in file "servo.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;  motor           2  118[BANK0 ] PTR int 
  9136 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9137 ;;  angle           2  120[BANK0 ] int 
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;		None
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  1    wreg      void 
  9142 ;; Registers used:
  9143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9149 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9151 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;Total ram usage:        8 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:   10
  9156 ;; This function calls:
  9157 ;;		_initTimer
  9158 ;;		_setAngle
  9159 ;;		_startTimer
  9160 ;; This function is called by:
  9161 ;;		_main
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           	psect	text27
  9166  004964                     __ptext27:
  9167                           	opt stack 0
  9168  004964                     _initServo:
  9169                           	opt stack 20
  9170                           
  9171                           ;servo.c: 22: n++;
  9172                           
  9173                           ;incstack = 0
  9174  004964  4A7D               	infsnz	_n,f,c
  9175  004966  2A7E               	incf	_n+1,f,c
  9176                           
  9177                           ;servo.c: 23: servos[n-1] = motor;
  9178  004968  0EFE               	movlw	254
  9179  00496A  0100               	movlb	0	; () banked
  9180  00496C  6FFA               	movwf	??_initServo& (0+255),b
  9181  00496E  0EFF               	movlw	255
  9182  004970  0100               	movlb	0	; () banked
  9183  004972  6FFB               	movwf	(??_initServo+1)& (0+255),b
  9184  004974  C07D  F0FC         	movff	_n,??_initServo+2
  9185  004978  C07E  F0FD         	movff	_n+1,??_initServo+3
  9186  00497C  90D8               	bcf	status,0,c
  9187  00497E  0100               	movlb	0	; () banked
  9188  004980  37FC               	rlcf	(??_initServo+2)& (0+255),f,b
  9189  004982  37FD               	rlcf	(??_initServo+3)& (0+255),f,b
  9190  004984  0100               	movlb	0	; () banked
  9191  004986  51FA               	movf	??_initServo& (0+255),w,b
  9192  004988  0100               	movlb	0	; () banked
  9193  00498A  27FC               	addwf	(??_initServo+2)& (0+255),f,b
  9194  00498C  0100               	movlb	0	; () banked
  9195  00498E  51FB               	movf	(??_initServo+1)& (0+255),w,b
  9196  004990  0100               	movlb	0	; () banked
  9197  004992  23FD               	addwfc	(??_initServo+3)& (0+255),f,b
  9198  004994  0E68               	movlw	low _servos
  9199  004996  0100               	movlb	0	; () banked
  9200  004998  25FC               	addwf	(??_initServo+2)& (0+255),w,b
  9201  00499A  6ED9               	movwf	fsr2l,c
  9202  00499C  0E01               	movlw	high _servos
  9203  00499E  0100               	movlb	0	; () banked
  9204  0049A0  21FD               	addwfc	(??_initServo+3)& (0+255),w,b
  9205  0049A2  6EDA               	movwf	fsr2h,c
  9206  0049A4  C0F6  FFDE         	movff	initServo@motor,postinc2
  9207  0049A8  C0F7  FFDD         	movff	initServo@motor+1,postdec2
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;servo.c: 24: setAngle(motor, angle);
  9211  0049AC  C0F6  F0EC         	movff	initServo@motor,setAngle@motor
  9212  0049B0  C0F7  F0ED         	movff	initServo@motor+1,setAngle@motor+1
  9213  0049B4  C0F8  F0EE         	movff	initServo@angle,setAngle@angle
  9214  0049B8  C0F9  F0EF         	movff	initServo@angle+1,setAngle@angle+1
  9215  0049BC  EC3B  F021         	call	_setAngle	;wreg free
  9216                           
  9217                           ;servo.c: 26: initTimer(0);
  9218  0049C0  0E00               	movlw	0
  9219  0049C2  0100               	movlb	0	; () banked
  9220  0049C4  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  9221  0049C6  0E00               	movlw	0
  9222  0049C8  6F80               	movwf	initTimer@timer& (0+255),b
  9223  0049CA  ECE9  F026         	call	_initTimer	;wreg free
  9224                           
  9225                           ;servo.c: 27: startTimer(0,0);
  9226  0049CE  0E00               	movlw	0
  9227  0049D0  0100               	movlb	0	; () banked
  9228  0049D2  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  9229  0049D4  0E00               	movlw	0
  9230  0049D6  6F80               	movwf	startTimer@timer& (0+255),b
  9231  0049D8  0E00               	movlw	0
  9232  0049DA  0100               	movlb	0	; () banked
  9233  0049DC  6F82               	movwf	startTimer@val& (0+255),b
  9234  0049DE  0E00               	movlw	0
  9235  0049E0  6F83               	movwf	(startTimer@val+1)& (0+255),b
  9236  0049E2  0E00               	movlw	0
  9237  0049E4  6F84               	movwf	(startTimer@val+2)& (0+255),b
  9238  0049E6  0E00               	movlw	0
  9239  0049E8  6F85               	movwf	(startTimer@val+3)& (0+255),b
  9240  0049EA  ECC1  F026         	call	_startTimer	;wreg free
  9241  0049EE  0012               	return		;funcret
  9242  0049F0                     __end_of_initServo:
  9243                           	opt stack 0
  9244                           tblptru	equ	0xFF8
  9245                           tblptrh	equ	0xFF7
  9246                           tblptrl	equ	0xFF6
  9247                           tablat	equ	0xFF5
  9248                           prodh	equ	0xFF4
  9249                           prodl	equ	0xFF3
  9250                           intcon	equ	0xFF2
  9251                           postinc0	equ	0xFEE
  9252                           wreg	equ	0xFE8
  9253                           postdec1	equ	0xFE5
  9254                           fsr1l	equ	0xFE1
  9255                           indf2	equ	0xFDF
  9256                           postinc2	equ	0xFDE
  9257                           postdec2	equ	0xFDD
  9258                           fsr2h	equ	0xFDA
  9259                           fsr2l	equ	0xFD9
  9260                           status	equ	0xFD8
  9261                           
  9262 ;; *************** function _startTimer *****************
  9263 ;; Defined at:
  9264 ;;		line 76 in file "timer.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;  timer           2    0[BANK0 ] int 
  9267 ;;  val             4    2[BANK0 ] long 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;		None
  9270 ;; Return value:  Size  Location     Type
  9271 ;;                  1    wreg      void 
  9272 ;; Registers used:
  9273 ;;		wreg, status,2, status,0
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9279 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;Total ram usage:        8 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    6
  9286 ;; This function calls:
  9287 ;;		Nothing
  9288 ;; This function is called by:
  9289 ;;		_main
  9290 ;;		_initServo
  9291 ;;		_testFrequency
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           	psect	text28
  9296  004D82                     __ptext28:
  9297                           	opt stack 0
  9298  004D82                     _startTimer:
  9299                           	opt stack 24
  9300                           
  9301                           ;timer.c: 77: switch(timer){
  9302                           
  9303                           ;incstack = 0
  9304  004D82  D012               	goto	l5664
  9305  004D84                     l401:
  9306                           
  9307                           ; BSR set to: 0
  9308                           ;timer.c: 79: TMR0H = val>>8;
  9309  004D84  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  9310                           
  9311                           ;timer.c: 80: TMR0L = val;
  9312  004D88  C082  FFD6         	movff	startTimer@val,4054	;volatile
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;timer.c: 81: T0CON |= 1<<7;
  9316  004D8C  8ED5               	bsf	4053,7,c	;volatile
  9317                           
  9318                           ;timer.c: 82: break;
  9319  004D8E  0012               	return	
  9320  004D90                     l403:
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;timer.c: 84: TMR1H = val>>8;
  9324  004D90  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  9325                           
  9326                           ;timer.c: 85: TMR1L = val;
  9327  004D94  C082  FFCE         	movff	startTimer@val,4046	;volatile
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;timer.c: 86: T1CON |= 1<<0;
  9331  004D98  80CD               	bsf	4045,0,c	;volatile
  9332                           
  9333                           ;timer.c: 87: break;
  9334  004D9A  0012               	return	
  9335  004D9C                     l404:
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;timer.c: 89: TMR3H = val>>8;
  9339  004D9C  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  9340                           
  9341                           ;timer.c: 90: TMR3L = val;
  9342  004DA0  C082  FFB2         	movff	startTimer@val,4018	;volatile
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;timer.c: 91: T3CON |= 1<<0;
  9346  004DA4  80B1               	bsf	4017,0,c	;volatile
  9347                           
  9348                           ;timer.c: 92: }
  9349  004DA6  0012               	return	
  9350  004DA8                     l5664:
  9351  004DA8  C080  F086         	movff	startTimer@timer,??_startTimer
  9352  004DAC  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  9353                           
  9354                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9355                           ; Switch size 1, requested type "space"
  9356                           ; Number of cases is 1, Range of values is 0 to 0
  9357                           ; switch strategies available:
  9358                           ; Name         Instructions Cycles
  9359                           ; simple_byte            4     3 (average)
  9360                           ;	Chosen strategy is simple_byte
  9361  004DB0  0100               	movlb	0	; () banked
  9362  004DB2  5187               	movf	(??_startTimer+1)& (0+255),w,b
  9363  004DB4  0A00               	xorlw	0	; case 0
  9364  004DB6  A4D8               	btfss	status,2,c
  9365  004DB8  0012               	return	
  9366                           
  9367                           ; BSR set to: 0
  9368                           ; Switch size 1, requested type "space"
  9369                           ; Number of cases is 3, Range of values is 0 to 3
  9370                           ; switch strategies available:
  9371                           ; Name         Instructions Cycles
  9372                           ; simple_byte           10     6 (average)
  9373                           ;	Chosen strategy is simple_byte
  9374  004DBA  0100               	movlb	0	; () banked
  9375  004DBC  5186               	movf	??_startTimer& (0+255),w,b
  9376  004DBE  0A00               	xorlw	0	; case 0
  9377  004DC0  B4D8               	btfsc	status,2,c
  9378  004DC2  D7E0               	goto	l401
  9379  004DC4  0A01               	xorlw	1	; case 1
  9380  004DC6  B4D8               	btfsc	status,2,c
  9381  004DC8  D7E3               	goto	l403
  9382  004DCA  0A02               	xorlw	2	; case 3
  9383  004DCC  A4D8               	btfss	status,2,c
  9384  004DCE  0012               	return	
  9385  004DD0  D7E5               	goto	l404
  9386  004DD2                     __end_of_startTimer:
  9387                           	opt stack 0
  9388                           tblptru	equ	0xFF8
  9389                           tblptrh	equ	0xFF7
  9390                           tblptrl	equ	0xFF6
  9391                           tablat	equ	0xFF5
  9392                           prodh	equ	0xFF4
  9393                           prodl	equ	0xFF3
  9394                           intcon	equ	0xFF2
  9395                           postinc0	equ	0xFEE
  9396                           wreg	equ	0xFE8
  9397                           postdec1	equ	0xFE5
  9398                           fsr1l	equ	0xFE1
  9399                           indf2	equ	0xFDF
  9400                           postinc2	equ	0xFDE
  9401                           postdec2	equ	0xFDD
  9402                           fsr2h	equ	0xFDA
  9403                           fsr2l	equ	0xFD9
  9404                           status	equ	0xFD8
  9405                           
  9406 ;; *************** function _setAngle *****************
  9407 ;; Defined at:
  9408 ;;		line 41 in file "servo.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;  motor           2  108[BANK0 ] PTR int 
  9411 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9412 ;;  angle           2  110[BANK0 ] int 
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;  i               2  116[BANK0 ] int 
  9415 ;;  period          2  114[BANK0 ] unsigned int 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  1    wreg      void 
  9418 ;; Registers used:
  9419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9425 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9429 ;;Total ram usage:       10 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    9
  9432 ;; This function calls:
  9433 ;;		_angleToPulse
  9434 ;; This function is called by:
  9435 ;;		_sortBattery
  9436 ;;		_initServo
  9437 ;; This function uses a non-reentrant model
  9438 ;;
  9439                           
  9440                           	psect	text29
  9441  004276                     __ptext29:
  9442                           	opt stack 0
  9443  004276                     _setAngle:
  9444                           	opt stack 20
  9445                           
  9446                           ;servo.c: 42: unsigned int period = 50000;
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;incstack = 0
  9450  004276  0EC3               	movlw	195
  9451  004278  0100               	movlb	0	; () banked
  9452  00427A  6FF3               	movwf	(setAngle@period+1)& (0+255),b
  9453  00427C  0E50               	movlw	80
  9454  00427E  6FF2               	movwf	setAngle@period& (0+255),b
  9455                           
  9456                           ;servo.c: 43: for(int i = 0; i < n; i++){
  9457  004280  0E00               	movlw	0
  9458  004282  0100               	movlb	0	; () banked
  9459  004284  6FF5               	movwf	(setAngle@i+1)& (0+255),b
  9460  004286  0E00               	movlw	0
  9461  004288  6FF4               	movwf	setAngle@i& (0+255),b
  9462  00428A  D03F               	goto	l5720
  9463  00428C                     l5712:
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;servo.c: 44: if(servos[i] == motor){
  9467  00428C  90D8               	bcf	status,0,c
  9468  00428E  0100               	movlb	0	; () banked
  9469  004290  35F4               	rlcf	setAngle@i& (0+255),w,b
  9470  004292  6ED9               	movwf	fsr2l,c
  9471  004294  0100               	movlb	0	; () banked
  9472  004296  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9473  004298  6EDA               	movwf	fsr2h,c
  9474  00429A  0E68               	movlw	low _servos
  9475  00429C  26D9               	addwf	fsr2l,f,c
  9476  00429E  0E01               	movlw	high _servos
  9477  0042A0  22DA               	addwfc	fsr2h,f,c
  9478  0042A2  0100               	movlb	0	; () banked
  9479  0042A4  51EC               	movf	setAngle@motor& (0+255),w,b
  9480  0042A6  18DE               	xorwf	postinc2,w,c
  9481  0042A8  E11C               	bnz	l5716
  9482  0042AA  0100               	movlb	0	; () banked
  9483  0042AC  51ED               	movf	(setAngle@motor+1)& (0+255),w,b
  9484  0042AE  18DE               	xorwf	postinc2,w,c
  9485  0042B0  A4D8               	btfss	status,2,c
  9486  0042B2  D017               	goto	l5716
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
  9490  0042B4  C0EE  F0D5         	movff	setAngle@angle,angleToPulse@angle
  9491  0042B8  C0EF  F0D6         	movff	setAngle@angle+1,angleToPulse@angle+1
  9492  0042BC  ECB0  F018         	call	_angleToPulse	;wreg free
  9493  0042C0  90D8               	bcf	status,0,c
  9494  0042C2  0100               	movlb	0	; () banked
  9495  0042C4  35F4               	rlcf	setAngle@i& (0+255),w,b
  9496  0042C6  6ED9               	movwf	fsr2l,c
  9497  0042C8  0100               	movlb	0	; () banked
  9498  0042CA  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9499  0042CC  6EDA               	movwf	fsr2h,c
  9500  0042CE  0E60               	movlw	low _pulse
  9501  0042D0  26D9               	addwf	fsr2l,f,c
  9502  0042D2  0E01               	movlw	high _pulse
  9503  0042D4  22DA               	addwfc	fsr2h,f,c
  9504  0042D6  0100               	movlb	0	; () banked
  9505  0042D8  C0D5  FFDE         	movff	?_angleToPulse,postinc2
  9506  0042DC  0100               	movlb	0	; () banked
  9507  0042DE  C0D6  FFDD         	movff	?_angleToPulse+1,postdec2
  9508  0042E2                     l5716:
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;servo.c: 46: }
  9512                           ;servo.c: 47: period-=pulse[i];
  9513  0042E2  90D8               	bcf	status,0,c
  9514  0042E4  0100               	movlb	0	; () banked
  9515  0042E6  35F4               	rlcf	setAngle@i& (0+255),w,b
  9516  0042E8  6ED9               	movwf	fsr2l,c
  9517  0042EA  0100               	movlb	0	; () banked
  9518  0042EC  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9519  0042EE  6EDA               	movwf	fsr2h,c
  9520  0042F0  0E60               	movlw	low _pulse
  9521  0042F2  26D9               	addwf	fsr2l,f,c
  9522  0042F4  0E01               	movlw	high _pulse
  9523  0042F6  22DA               	addwfc	fsr2h,f,c
  9524  0042F8  50DE               	movf	postinc2,w,c
  9525  0042FA  0100               	movlb	0	; () banked
  9526  0042FC  5FF2               	subwf	setAngle@period& (0+255),f,b
  9527  0042FE  50DD               	movf	postdec2,w,c
  9528  004300  0100               	movlb	0	; () banked
  9529  004302  5BF3               	subwfb	(setAngle@period+1)& (0+255),f,b
  9530                           
  9531                           ; BSR set to: 0
  9532  004304  0100               	movlb	0	; () banked
  9533  004306  4BF4               	infsnz	setAngle@i& (0+255),f,b
  9534  004308  2BF5               	incf	(setAngle@i+1)& (0+255),f,b
  9535  00430A                     l5720:
  9536                           
  9537                           ; BSR set to: 0
  9538  00430A  507D               	movf	_n,w,c
  9539  00430C  0100               	movlb	0	; () banked
  9540  00430E  5DF4               	subwf	setAngle@i& (0+255),w,b
  9541  004310  0100               	movlb	0	; () banked
  9542  004312  51F5               	movf	(setAngle@i+1)& (0+255),w,b
  9543  004314  0A80               	xorlw	128
  9544  004316  0100               	movlb	0	; () banked
  9545  004318  6FF0               	movwf	??_setAngle& (0+255),b
  9546  00431A  507E               	movf	_n+1,w,c
  9547  00431C  0A80               	xorlw	128
  9548  00431E  0100               	movlb	0	; () banked
  9549  004320  59F0               	subwfb	??_setAngle& (0+255),w,b
  9550  004322  A0D8               	btfss	status,0,c
  9551  004324  D7B3               	goto	l5712
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;servo.c: 48: }
  9555                           ;servo.c: 49: pulse[n] = period;
  9556                           
  9557                           ; BSR set to: 0
  9558  004326  90D8               	bcf	status,0,c
  9559  004328  347D               	rlcf	_n,w,c
  9560  00432A  6ED9               	movwf	fsr2l,c
  9561  00432C  347E               	rlcf	_n+1,w,c
  9562  00432E  6EDA               	movwf	fsr2h,c
  9563  004330  0E60               	movlw	low _pulse
  9564  004332  26D9               	addwf	fsr2l,f,c
  9565  004334  0E01               	movlw	high _pulse
  9566  004336  22DA               	addwfc	fsr2h,f,c
  9567  004338  C0F2  FFDE         	movff	setAngle@period,postinc2
  9568  00433C  C0F3  FFDD         	movff	setAngle@period+1,postdec2
  9569                           
  9570                           ; BSR set to: 0
  9571  004340  0012               	return		;funcret
  9572  004342                     __end_of_setAngle:
  9573                           	opt stack 0
  9574                           tblptru	equ	0xFF8
  9575                           tblptrh	equ	0xFF7
  9576                           tblptrl	equ	0xFF6
  9577                           tablat	equ	0xFF5
  9578                           prodh	equ	0xFF4
  9579                           prodl	equ	0xFF3
  9580                           intcon	equ	0xFF2
  9581                           postinc0	equ	0xFEE
  9582                           wreg	equ	0xFE8
  9583                           postdec1	equ	0xFE5
  9584                           fsr1l	equ	0xFE1
  9585                           indf2	equ	0xFDF
  9586                           postinc2	equ	0xFDE
  9587                           postdec2	equ	0xFDD
  9588                           fsr2h	equ	0xFDA
  9589                           fsr2l	equ	0xFD9
  9590                           status	equ	0xFD8
  9591                           
  9592 ;; *************** function _angleToPulse *****************
  9593 ;; Defined at:
  9594 ;;		line 33 in file "servo.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;  angle           2   85[BANK0 ] int 
  9597 ;; Auto vars:     Size  Location     Type
  9598 ;;  a000            4  104[BANK0 ] long 
  9599 ;;  a180            4   97[BANK0 ] long 
  9600 ;;  offset          4   93[BANK0 ] long 
  9601 ;; Return value:  Size  Location     Type
  9602 ;;                  4   85[BANK0 ] long 
  9603 ;; Registers used:
  9604 ;;		wreg, status,2, status,0, cstack
  9605 ;; Tracked objects:
  9606 ;;		On entry : 0/0
  9607 ;;		On exit  : 0/0
  9608 ;;		Unchanged: 0/0
  9609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9610 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;Total ram usage:       23 bytes
  9615 ;; Hardware stack levels used:    1
  9616 ;; Hardware stack levels required when called:    8
  9617 ;; This function calls:
  9618 ;;		___altoft
  9619 ;;		___awtoft
  9620 ;;		___ftadd
  9621 ;;		___ftdiv
  9622 ;;		___ftmul
  9623 ;;		___fttol
  9624 ;; This function is called by:
  9625 ;;		_setAngle
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text30
  9630  003160                     __ptext30:
  9631                           	opt stack 0
  9632  003160                     _angleToPulse:
  9633                           	opt stack 20
  9634                           
  9635                           ;servo.c: 34: long offset = -600;
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;incstack = 0
  9639  003160  0EA8               	movlw	168
  9640  003162  0100               	movlb	0	; () banked
  9641  003164  6FDD               	movwf	angleToPulse@offset& (0+255),b
  9642  003166  0EFD               	movlw	253
  9643  003168  6FDE               	movwf	(angleToPulse@offset+1)& (0+255),b
  9644  00316A  0EFF               	movlw	255
  9645  00316C  6FDF               	movwf	(angleToPulse@offset+2)& (0+255),b
  9646  00316E  0EFF               	movlw	255
  9647  003170  6FE0               	movwf	(angleToPulse@offset+3)& (0+255),b
  9648                           
  9649                           ;servo.c: 35: long a000 = 1250;
  9650  003172  0EE2               	movlw	226
  9651  003174  0100               	movlb	0	; () banked
  9652  003176  6FE8               	movwf	angleToPulse@a000& (0+255),b
  9653  003178  0E04               	movlw	4
  9654  00317A  6FE9               	movwf	(angleToPulse@a000+1)& (0+255),b
  9655  00317C  0E00               	movlw	0
  9656  00317E  6FEA               	movwf	(angleToPulse@a000+2)& (0+255),b
  9657  003180  0E00               	movlw	0
  9658  003182  6FEB               	movwf	(angleToPulse@a000+3)& (0+255),b
  9659                           
  9660                           ;servo.c: 36: long a180 = 6250;
  9661  003184  0E6A               	movlw	106
  9662  003186  0100               	movlb	0	; () banked
  9663  003188  6FE1               	movwf	angleToPulse@a180& (0+255),b
  9664  00318A  0E18               	movlw	24
  9665  00318C  6FE2               	movwf	(angleToPulse@a180+1)& (0+255),b
  9666  00318E  0E00               	movlw	0
  9667  003190  6FE3               	movwf	(angleToPulse@a180+2)& (0+255),b
  9668  003192  0E00               	movlw	0
  9669  003194  6FE4               	movwf	(angleToPulse@a180+3)& (0+255),b
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9673  003196  C0E8  F0D9         	movff	angleToPulse@a000,??_angleToPulse
  9674  00319A  C0E9  F0DA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  9675  00319E  C0EA  F0DB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  9676  0031A2  C0EB  F0DC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  9677  0031A6  0100               	movlb	0	; () banked
  9678  0031A8  1FD9               	comf	??_angleToPulse& (0+255),f,b
  9679  0031AA  1FDA               	comf	(??_angleToPulse+1)& (0+255),f,b
  9680  0031AC  1FDB               	comf	(??_angleToPulse+2)& (0+255),f,b
  9681  0031AE  1FDC               	comf	(??_angleToPulse+3)& (0+255),f,b
  9682  0031B0  2BD9               	incf	??_angleToPulse& (0+255),f,b
  9683  0031B2  0E00               	movlw	0
  9684  0031B4  23DA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  9685  0031B6  23DB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  9686  0031B8  23DC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  9687  0031BA  0100               	movlb	0	; () banked
  9688  0031BC  51E1               	movf	angleToPulse@a180& (0+255),w,b
  9689  0031BE  0100               	movlb	0	; () banked
  9690  0031C0  25D9               	addwf	??_angleToPulse& (0+255),w,b
  9691  0031C2  0100               	movlb	0	; () banked
  9692  0031C4  6F88               	movwf	___altoft@c& (0+255),b
  9693  0031C6  0100               	movlb	0	; () banked
  9694  0031C8  51E2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  9695  0031CA  0100               	movlb	0	; () banked
  9696  0031CC  21DA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  9697  0031CE  0100               	movlb	0	; () banked
  9698  0031D0  6F89               	movwf	(___altoft@c+1)& (0+255),b
  9699  0031D2  0100               	movlb	0	; () banked
  9700  0031D4  51E3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  9701  0031D6  0100               	movlb	0	; () banked
  9702  0031D8  21DB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  9703  0031DA  0100               	movlb	0	; () banked
  9704  0031DC  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  9705  0031DE  0100               	movlb	0	; () banked
  9706  0031E0  51E4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  9707  0031E2  0100               	movlb	0	; () banked
  9708  0031E4  21DC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  9709  0031E6  0100               	movlb	0	; () banked
  9710  0031E8  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  9711  0031EA  ECCE  F023         	call	___altoft	;wreg free
  9712  0031EE  C088  F0A4         	movff	?___altoft,___ftmul@f2
  9713  0031F2  C089  F0A5         	movff	?___altoft+1,___ftmul@f2+1
  9714  0031F6  C08A  F0A6         	movff	?___altoft+2,___ftmul@f2+2
  9715  0031FA  0E00               	movlw	0
  9716  0031FC  0100               	movlb	0	; () banked
  9717  0031FE  6F95               	movwf	___ftdiv@f2& (0+255),b
  9718  003200  0E34               	movlw	52
  9719  003202  0100               	movlb	0	; () banked
  9720  003204  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
  9721  003206  0E43               	movlw	67
  9722  003208  0100               	movlb	0	; () banked
  9723  00320A  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
  9724  00320C  C0D5  F088         	movff	angleToPulse@angle,___awtoft@c
  9725  003210  C0D6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  9726  003214  ECA4  F027         	call	___awtoft	;wreg free
  9727  003218  C088  F092         	movff	?___awtoft,___ftdiv@f1
  9728  00321C  C089  F093         	movff	?___awtoft+1,___ftdiv@f1+1
  9729  003220  C08A  F094         	movff	?___awtoft+2,___ftdiv@f1+2
  9730  003224  EC12  F01A         	call	___ftdiv	;wreg free
  9731  003228  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  9732  00322C  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  9733  003230  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  9734  003234  EC63  F019         	call	___ftmul	;wreg free
  9735  003238  C0A1  F0BD         	movff	?___ftmul,___ftadd@f2
  9736  00323C  C0A2  F0BE         	movff	?___ftmul+1,___ftadd@f2+1
  9737  003240  C0A3  F0BF         	movff	?___ftmul+2,___ftadd@f2+2
  9738  003244  C0E8  F088         	movff	angleToPulse@a000,___altoft@c
  9739  003248  C0E9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  9740  00324C  C0EA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  9741  003250  C0EB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  9742  003254  ECCE  F023         	call	___altoft	;wreg free
  9743  003258  C088  F0BA         	movff	?___altoft,___ftadd@f1
  9744  00325C  C089  F0BB         	movff	?___altoft+1,___ftadd@f1+1
  9745  003260  C08A  F0BC         	movff	?___altoft+2,___ftadd@f1+2
  9746  003264  EC1C  F013         	call	___ftadd	;wreg free
  9747  003268  C0BA  F0E5         	movff	?___ftadd,_angleToPulse$1336
  9748  00326C  C0BB  F0E6         	movff	?___ftadd+1,_angleToPulse$1336+1
  9749  003270  C0BC  F0E7         	movff	?___ftadd+2,_angleToPulse$1336+2
  9750                           
  9751                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9752  003274  C0DD  F088         	movff	angleToPulse@offset,___altoft@c
  9753  003278  C0DE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  9754  00327C  C0DF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  9755  003280  C0E0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  9756  003284  ECCE  F023         	call	___altoft	;wreg free
  9757  003288  C088  F0BD         	movff	?___altoft,___ftadd@f2
  9758  00328C  C089  F0BE         	movff	?___altoft+1,___ftadd@f2+1
  9759  003290  C08A  F0BF         	movff	?___altoft+2,___ftadd@f2+2
  9760  003294  C0E5  F0BA         	movff	_angleToPulse$1336,___ftadd@f1
  9761  003298  C0E6  F0BB         	movff	_angleToPulse$1336+1,___ftadd@f1+1
  9762  00329C  C0E7  F0BC         	movff	_angleToPulse$1336+2,___ftadd@f1+2
  9763  0032A0  EC1C  F013         	call	___ftadd	;wreg free
  9764  0032A4  C0BA  F0C6         	movff	?___ftadd,___fttol@f1
  9765  0032A8  C0BB  F0C7         	movff	?___ftadd+1,___fttol@f1+1
  9766  0032AC  C0BC  F0C8         	movff	?___ftadd+2,___fttol@f1+2
  9767  0032B0  ECB8  F01A         	call	___fttol	;wreg free
  9768  0032B4  C0C6  F0D5         	movff	?___fttol,?_angleToPulse
  9769  0032B8  C0C7  F0D6         	movff	?___fttol+1,?_angleToPulse+1
  9770  0032BC  C0C8  F0D7         	movff	?___fttol+2,?_angleToPulse+2
  9771  0032C0  C0C9  F0D8         	movff	?___fttol+3,?_angleToPulse+3
  9772  0032C4  0012               	return	
  9773  0032C6                     __end_of_angleToPulse:
  9774                           	opt stack 0
  9775                           tblptru	equ	0xFF8
  9776                           tblptrh	equ	0xFF7
  9777                           tblptrl	equ	0xFF6
  9778                           tablat	equ	0xFF5
  9779                           prodh	equ	0xFF4
  9780                           prodl	equ	0xFF3
  9781                           intcon	equ	0xFF2
  9782                           postinc0	equ	0xFEE
  9783                           wreg	equ	0xFE8
  9784                           postdec1	equ	0xFE5
  9785                           fsr1l	equ	0xFE1
  9786                           indf2	equ	0xFDF
  9787                           postinc2	equ	0xFDE
  9788                           postdec2	equ	0xFDD
  9789                           fsr2h	equ	0xFDA
  9790                           fsr2l	equ	0xFD9
  9791                           status	equ	0xFD8
  9792                           
  9793 ;; *************** function ___fttol *****************
  9794 ;; Defined at:
  9795 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;  f1              3   70[BANK0 ] float 
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;  lval            4   80[BANK0 ] unsigned long 
  9800 ;;  exp1            1   84[BANK0 ] unsigned char 
  9801 ;;  sign1           1   79[BANK0 ] unsigned char 
  9802 ;; Return value:  Size  Location     Type
  9803 ;;                  4   70[BANK0 ] long 
  9804 ;; Registers used:
  9805 ;;		wreg, status,2, status,0
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9811 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;Total ram usage:       15 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    6
  9818 ;; This function calls:
  9819 ;;		Nothing
  9820 ;; This function is called by:
  9821 ;;		_angleToPulse
  9822 ;;		_printf
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           	psect	text31
  9827  003570                     __ptext31:
  9828                           	opt stack 0
  9829  003570                     ___fttol:
  9830                           	opt stack 21
  9831                           
  9832                           ;incstack = 0
  9833  003570  C0C8  F0CA         	movff	___fttol@f1+2,??___fttol
  9834  003574  0100               	movlb	0	; () banked
  9835  003576  6BCB               	clrf	(??___fttol+1)& (0+255),b
  9836  003578  6BCC               	clrf	(??___fttol+2)& (0+255),b
  9837  00357A  0100               	movlb	0	; () banked
  9838  00357C  35C7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9839  00357E  0100               	movlb	0	; () banked
  9840  003580  37CA               	rlcf	??___fttol& (0+255),f,b
  9841  003582  E301               	bnc	u4851
  9842  003584  81CB               	bsf	(??___fttol+1)& (0+255),0,b
  9843  003586                     u4851:
  9844  003586  0100               	movlb	0	; () banked
  9845  003588  51CA               	movf	??___fttol& (0+255),w,b
  9846  00358A  0100               	movlb	0	; () banked
  9847  00358C  6FD4               	movwf	___fttol@exp1& (0+255),b
  9848  00358E  0100               	movlb	0	; () banked
  9849  003590  51D4               	movf	___fttol@exp1& (0+255),w,b
  9850  003592  A4D8               	btfss	status,2,c
  9851  003594  D00A               	goto	l4948
  9852                           
  9853                           ; BSR set to: 0
  9854  003596  0E00               	movlw	0
  9855  003598  0100               	movlb	0	; () banked
  9856  00359A  6FC6               	movwf	?___fttol& (0+255),b
  9857  00359C  0E00               	movlw	0
  9858  00359E  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9859  0035A0  0E00               	movlw	0
  9860  0035A2  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9861  0035A4  0E00               	movlw	0
  9862  0035A6  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9863                           
  9864                           ; BSR set to: 0
  9865  0035A8  0012               	return	
  9866  0035AA                     l4948:
  9867                           
  9868                           ; BSR set to: 0
  9869  0035AA  0E17               	movlw	23
  9870  0035AC  0100               	movlb	0	; () banked
  9871  0035AE  6FCA               	movwf	??___fttol& (0+255),b
  9872  0035B0  C0C6  F0CB         	movff	___fttol@f1,??___fttol+1
  9873  0035B4  C0C7  F0CC         	movff	___fttol@f1+1,??___fttol+2
  9874  0035B8  C0C8  F0CD         	movff	___fttol@f1+2,??___fttol+3
  9875  0035BC  0100               	movlb	0	; () banked
  9876  0035BE  29CA               	incf	??___fttol& (0+255),w,b
  9877  0035C0  0100               	movlb	0	; () banked
  9878  0035C2  6FCE               	movwf	(??___fttol+4)& (0+255),b
  9879  0035C4  D005               	goto	u4870
  9880  0035C6                     u4875:
  9881  0035C6  0100               	movlb	0	; () banked
  9882  0035C8  90D8               	bcf	status,0,c
  9883  0035CA  33CD               	rrcf	(??___fttol+3)& (0+255),f,b
  9884  0035CC  33CC               	rrcf	(??___fttol+2)& (0+255),f,b
  9885  0035CE  33CB               	rrcf	(??___fttol+1)& (0+255),f,b
  9886  0035D0                     u4870:
  9887  0035D0  0100               	movlb	0	; () banked
  9888  0035D2  2FCE               	decfsz	(??___fttol+4)& (0+255),f,b
  9889  0035D4  D7F8               	goto	u4875
  9890  0035D6  0100               	movlb	0	; () banked
  9891  0035D8  51CB               	movf	(??___fttol+1)& (0+255),w,b
  9892  0035DA  0100               	movlb	0	; () banked
  9893  0035DC  6FCF               	movwf	___fttol@sign1& (0+255),b
  9894                           
  9895                           ; BSR set to: 0
  9896  0035DE  0100               	movlb	0	; () banked
  9897  0035E0  8FC7               	bsf	(___fttol@f1+1)& (0+255),7,b
  9898                           
  9899                           ; BSR set to: 0
  9900  0035E2  0EFF               	movlw	255
  9901  0035E4  0100               	movlb	0	; () banked
  9902  0035E6  17C6               	andwf	___fttol@f1& (0+255),f,b
  9903  0035E8  0EFF               	movlw	255
  9904  0035EA  0100               	movlb	0	; () banked
  9905  0035EC  17C7               	andwf	(___fttol@f1+1)& (0+255),f,b
  9906  0035EE  0E00               	movlw	0
  9907  0035F0  0100               	movlb	0	; () banked
  9908  0035F2  17C8               	andwf	(___fttol@f1+2)& (0+255),f,b
  9909                           
  9910                           ; BSR set to: 0
  9911  0035F4  0100               	movlb	0	; () banked
  9912  0035F6  51C6               	movf	___fttol@f1& (0+255),w,b
  9913  0035F8  0100               	movlb	0	; () banked
  9914  0035FA  6FD0               	movwf	___fttol@lval& (0+255),b
  9915  0035FC  0100               	movlb	0	; () banked
  9916  0035FE  51C7               	movf	(___fttol@f1+1)& (0+255),w,b
  9917  003600  0100               	movlb	0	; () banked
  9918  003602  6FD1               	movwf	(___fttol@lval+1)& (0+255),b
  9919  003604  0100               	movlb	0	; () banked
  9920  003606  51C8               	movf	(___fttol@f1+2)& (0+255),w,b
  9921  003608  0100               	movlb	0	; () banked
  9922  00360A  6FD2               	movwf	(___fttol@lval+2)& (0+255),b
  9923  00360C  0100               	movlb	0	; () banked
  9924  00360E  6BD3               	clrf	(___fttol@lval+3)& (0+255),b
  9925                           
  9926                           ; BSR set to: 0
  9927  003610  0E8E               	movlw	142
  9928  003612  0100               	movlb	0	; () banked
  9929  003614  5FD4               	subwf	___fttol@exp1& (0+255),f,b
  9930                           
  9931                           ; BSR set to: 0
  9932  003616  0100               	movlb	0	; () banked
  9933  003618  AFD4               	btfss	___fttol@exp1& (0+255),7,b
  9934  00361A  D01A               	goto	l4970
  9935                           
  9936                           ; BSR set to: 0
  9937  00361C  0100               	movlb	0	; () banked
  9938  00361E  51D4               	movf	___fttol@exp1& (0+255),w,b
  9939  003620  0A80               	xorlw	128
  9940  003622  0F8F               	addlw	143
  9941  003624  B0D8               	btfsc	status,0,c
  9942  003626  D00A               	goto	l4966
  9943                           
  9944                           ; BSR set to: 0
  9945  003628  0E00               	movlw	0
  9946  00362A  0100               	movlb	0	; () banked
  9947  00362C  6FC6               	movwf	?___fttol& (0+255),b
  9948  00362E  0E00               	movlw	0
  9949  003630  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9950  003632  0E00               	movlw	0
  9951  003634  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9952  003636  0E00               	movlw	0
  9953  003638  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9954                           
  9955                           ; BSR set to: 0
  9956  00363A  0012               	return	
  9957  00363C                     l4966:
  9958                           
  9959                           ; BSR set to: 0
  9960  00363C  0100               	movlb	0	; () banked
  9961  00363E  90D8               	bcf	status,0,c
  9962  003640  33D3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9963  003642  33D2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9964  003644  33D1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9965  003646  33D0               	rrcf	___fttol@lval& (0+255),f,b
  9966                           
  9967                           ; BSR set to: 0
  9968  003648  0100               	movlb	0	; () banked
  9969  00364A  3FD4               	incfsz	___fttol@exp1& (0+255),f,b
  9970  00364C  D7F7               	goto	l4966
  9971                           
  9972                           ; BSR set to: 0
  9973  00364E  D01B               	goto	l4980
  9974  003650                     l4970:
  9975                           
  9976                           ; BSR set to: 0
  9977  003650  0E17               	movlw	23
  9978  003652  0100               	movlb	0	; () banked
  9979  003654  65D4               	cpfsgt	___fttol@exp1& (0+255),b
  9980  003656  D012               	goto	l4978
  9981                           
  9982                           ; BSR set to: 0
  9983  003658  0E00               	movlw	0
  9984  00365A  0100               	movlb	0	; () banked
  9985  00365C  6FC6               	movwf	?___fttol& (0+255),b
  9986  00365E  0E00               	movlw	0
  9987  003660  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9988  003662  0E00               	movlw	0
  9989  003664  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9990  003666  0E00               	movlw	0
  9991  003668  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9992                           
  9993                           ; BSR set to: 0
  9994  00366A  0012               	return	
  9995  00366C                     l4976:
  9996                           
  9997                           ; BSR set to: 0
  9998  00366C  0100               	movlb	0	; () banked
  9999  00366E  90D8               	bcf	status,0,c
 10000  003670  37D0               	rlcf	___fttol@lval& (0+255),f,b
 10001  003672  37D1               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10002  003674  37D2               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10003  003676  37D3               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10004  003678  0100               	movlb	0	; () banked
 10005  00367A  07D4               	decf	___fttol@exp1& (0+255),f,b
 10006  00367C                     l4978:
 10007                           
 10008                           ; BSR set to: 0
 10009  00367C  0100               	movlb	0	; () banked
 10010  00367E  51D4               	movf	___fttol@exp1& (0+255),w,b
 10011  003680  0100               	movlb	0	; () banked
 10012  003682  A4D8               	btfss	status,2,c
 10013  003684  D7F3               	goto	l4976
 10014  003686                     l4980:
 10015                           
 10016                           ; BSR set to: 0
 10017  003686  0100               	movlb	0	; () banked
 10018  003688  51CF               	movf	___fttol@sign1& (0+255),w,b
 10019  00368A  0100               	movlb	0	; () banked
 10020  00368C  B4D8               	btfsc	status,2,c
 10021  00368E  D009               	goto	l4984
 10022                           
 10023                           ; BSR set to: 0
 10024  003690  0100               	movlb	0	; () banked
 10025  003692  1FD3               	comf	(___fttol@lval+3)& (0+255),f,b
 10026  003694  1FD2               	comf	(___fttol@lval+2)& (0+255),f,b
 10027  003696  1FD1               	comf	(___fttol@lval+1)& (0+255),f,b
 10028  003698  6DD0               	negf	___fttol@lval& (0+255),b
 10029  00369A  0E00               	movlw	0
 10030  00369C  23D1               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10031  00369E  23D2               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10032  0036A0  23D3               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10033  0036A2                     l4984:
 10034                           
 10035                           ; BSR set to: 0
 10036  0036A2  C0D0  F0C6         	movff	___fttol@lval,?___fttol
 10037  0036A6  C0D1  F0C7         	movff	___fttol@lval+1,?___fttol+1
 10038  0036AA  C0D2  F0C8         	movff	___fttol@lval+2,?___fttol+2
 10039  0036AE  C0D3  F0C9         	movff	___fttol@lval+3,?___fttol+3
 10040  0036B2  0012               	return	
 10041  0036B4                     __end_of___fttol:
 10042                           	opt stack 0
 10043                           tblptru	equ	0xFF8
 10044                           tblptrh	equ	0xFF7
 10045                           tblptrl	equ	0xFF6
 10046                           tablat	equ	0xFF5
 10047                           prodh	equ	0xFF4
 10048                           prodl	equ	0xFF3
 10049                           intcon	equ	0xFF2
 10050                           postinc0	equ	0xFEE
 10051                           wreg	equ	0xFE8
 10052                           postdec1	equ	0xFE5
 10053                           fsr1l	equ	0xFE1
 10054                           indf2	equ	0xFDF
 10055                           postinc2	equ	0xFDE
 10056                           postdec2	equ	0xFDD
 10057                           fsr2h	equ	0xFDA
 10058                           fsr2l	equ	0xFD9
 10059                           status	equ	0xFD8
 10060                           
 10061 ;; *************** function ___ftmul *****************
 10062 ;; Defined at:
 10063 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;  f1              3   33[BANK0 ] float 
 10066 ;;  f2              3   36[BANK0 ] float 
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
 10069 ;;  sign            1   47[BANK0 ] unsigned char 
 10070 ;;  cntr            1   46[BANK0 ] unsigned char 
 10071 ;;  exp             1   42[BANK0 ] unsigned char 
 10072 ;; Return value:  Size  Location     Type
 10073 ;;                  3   33[BANK0 ] float 
 10074 ;; Registers used:
 10075 ;;		wreg, status,2, status,0, cstack
 10076 ;; Tracked objects:
 10077 ;;		On entry : 0/0
 10078 ;;		On exit  : 0/0
 10079 ;;		Unchanged: 0/0
 10080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10081 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10082 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;Total ram usage:       15 bytes
 10086 ;; Hardware stack levels used:    1
 10087 ;; Hardware stack levels required when called:    7
 10088 ;; This function calls:
 10089 ;;		___ftpack
 10090 ;; This function is called by:
 10091 ;;		_sortBattery
 10092 ;;		_angleToPulse
 10093 ;;		_fround
 10094 ;;		_scale
 10095 ;;		_printf
 10096 ;; This function uses a non-reentrant model
 10097 ;;
 10098                           
 10099                           	psect	text32
 10100  0032C6                     __ptext32:
 10101                           	opt stack 0
 10102  0032C6                     ___ftmul:
 10103                           	opt stack 20
 10104                           
 10105                           ; BSR set to: 0
 10106                           ;incstack = 0
 10107  0032C6  C0A3  F0A7         	movff	___ftmul@f1+2,??___ftmul
 10108  0032CA  0100               	movlb	0	; () banked
 10109  0032CC  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 10110  0032CE  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 10111  0032D0  0100               	movlb	0	; () banked
 10112  0032D2  35A2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10113  0032D4  0100               	movlb	0	; () banked
 10114  0032D6  37A7               	rlcf	??___ftmul& (0+255),f,b
 10115  0032D8  E301               	bnc	u4281
 10116  0032DA  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10117  0032DC                     u4281:
 10118  0032DC  0100               	movlb	0	; () banked
 10119  0032DE  51A7               	movf	??___ftmul& (0+255),w,b
 10120  0032E0  0100               	movlb	0	; () banked
 10121  0032E2  6FAA               	movwf	___ftmul@exp& (0+255),b
 10122  0032E4  0100               	movlb	0	; () banked
 10123  0032E6  51AA               	movf	___ftmul@exp& (0+255),w,b
 10124  0032E8  A4D8               	btfss	status,2,c
 10125  0032EA  D00A               	goto	l4502
 10126                           
 10127                           ; BSR set to: 0
 10128  0032EC  0E00               	movlw	0
 10129  0032EE  0100               	movlb	0	; () banked
 10130  0032F0  6FA1               	movwf	?___ftmul& (0+255),b
 10131  0032F2  0E00               	movlw	0
 10132  0032F4  0100               	movlb	0	; () banked
 10133  0032F6  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10134  0032F8  0E00               	movlw	0
 10135  0032FA  0100               	movlb	0	; () banked
 10136  0032FC  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10137                           
 10138                           ; BSR set to: 0
 10139  0032FE  0012               	return	
 10140  003300                     l4502:
 10141                           
 10142                           ; BSR set to: 0
 10143  003300  C0A6  F0A7         	movff	___ftmul@f2+2,??___ftmul
 10144  003304  0100               	movlb	0	; () banked
 10145  003306  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 10146  003308  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 10147  00330A  0100               	movlb	0	; () banked
 10148  00330C  35A5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10149  00330E  0100               	movlb	0	; () banked
 10150  003310  37A7               	rlcf	??___ftmul& (0+255),f,b
 10151  003312  E301               	bnc	u4301
 10152  003314  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10153  003316                     u4301:
 10154  003316  0100               	movlb	0	; () banked
 10155  003318  51A7               	movf	??___ftmul& (0+255),w,b
 10156  00331A  0100               	movlb	0	; () banked
 10157  00331C  6FAF               	movwf	___ftmul@sign& (0+255),b
 10158  00331E  0100               	movlb	0	; () banked
 10159  003320  51AF               	movf	___ftmul@sign& (0+255),w,b
 10160  003322  A4D8               	btfss	status,2,c
 10161  003324  D00A               	goto	l4508
 10162                           
 10163                           ; BSR set to: 0
 10164  003326  0E00               	movlw	0
 10165  003328  0100               	movlb	0	; () banked
 10166  00332A  6FA1               	movwf	?___ftmul& (0+255),b
 10167  00332C  0E00               	movlw	0
 10168  00332E  0100               	movlb	0	; () banked
 10169  003330  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10170  003332  0E00               	movlw	0
 10171  003334  0100               	movlb	0	; () banked
 10172  003336  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10173                           
 10174                           ; BSR set to: 0
 10175  003338  0012               	return	
 10176  00333A                     l4508:
 10177                           
 10178                           ; BSR set to: 0
 10179  00333A  0100               	movlb	0	; () banked
 10180  00333C  51AF               	movf	___ftmul@sign& (0+255),w,b
 10181  00333E  0F7B               	addlw	123
 10182  003340  0100               	movlb	0	; () banked
 10183  003342  27AA               	addwf	___ftmul@exp& (0+255),f,b
 10184                           
 10185                           ; BSR set to: 0
 10186  003344  C0A3  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
 10187  003348  0100               	movlb	0	; () banked
 10188  00334A  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10189  00334C  0100               	movlb	0	; () banked
 10190  00334E  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
 10191  003350  0E80               	movlw	128
 10192  003352  0100               	movlb	0	; () banked
 10193  003354  17AF               	andwf	___ftmul@sign& (0+255),f,b
 10194                           
 10195                           ; BSR set to: 0
 10196  003356  0100               	movlb	0	; () banked
 10197  003358  8FA2               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10198                           
 10199                           ; BSR set to: 0
 10200  00335A  0100               	movlb	0	; () banked
 10201  00335C  8FA5               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10202                           
 10203                           ; BSR set to: 0
 10204  00335E  0EFF               	movlw	255
 10205  003360  0100               	movlb	0	; () banked
 10206  003362  17A4               	andwf	___ftmul@f2& (0+255),f,b
 10207  003364  0EFF               	movlw	255
 10208  003366  0100               	movlb	0	; () banked
 10209  003368  17A5               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10210  00336A  0E00               	movlw	0
 10211  00336C  0100               	movlb	0	; () banked
 10212  00336E  17A6               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10213                           
 10214                           ; BSR set to: 0
 10215  003370  0E00               	movlw	0
 10216  003372  0100               	movlb	0	; () banked
 10217  003374  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
 10218  003376  0E00               	movlw	0
 10219  003378  0100               	movlb	0	; () banked
 10220  00337A  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10221  00337C  0E00               	movlw	0
 10222  00337E  0100               	movlb	0	; () banked
 10223  003380  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10224                           
 10225                           ; BSR set to: 0
 10226  003382  0E07               	movlw	7
 10227  003384  0100               	movlb	0	; () banked
 10228  003386  6FAE               	movwf	___ftmul@cntr& (0+255),b
 10229  003388                     l4522:
 10230                           
 10231                           ; BSR set to: 0
 10232  003388  0100               	movlb	0	; () banked
 10233  00338A  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 10234  00338C  D00C               	goto	l4526
 10235                           
 10236                           ; BSR set to: 0
 10237  00338E  0100               	movlb	0	; () banked
 10238  003390  51A4               	movf	___ftmul@f2& (0+255),w,b
 10239  003392  0100               	movlb	0	; () banked
 10240  003394  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10241  003396  0100               	movlb	0	; () banked
 10242  003398  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 10243  00339A  0100               	movlb	0	; () banked
 10244  00339C  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10245  00339E  0100               	movlb	0	; () banked
 10246  0033A0  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10247  0033A2  0100               	movlb	0	; () banked
 10248  0033A4  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10249  0033A6                     l4526:
 10250                           
 10251                           ; BSR set to: 0
 10252  0033A6  0100               	movlb	0	; () banked
 10253  0033A8  90D8               	bcf	status,0,c
 10254  0033AA  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10255  0033AC  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10256  0033AE  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 10257  0033B0  0100               	movlb	0	; () banked
 10258  0033B2  90D8               	bcf	status,0,c
 10259  0033B4  37A4               	rlcf	___ftmul@f2& (0+255),f,b
 10260  0033B6  37A5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10261  0033B8  37A6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10262                           
 10263                           ; BSR set to: 0
 10264  0033BA  0100               	movlb	0	; () banked
 10265  0033BC  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 10266  0033BE  D7E4               	goto	l4522
 10267                           
 10268                           ; BSR set to: 0
 10269                           
 10270                           ; BSR set to: 0
 10271  0033C0  0E09               	movlw	9
 10272  0033C2  0100               	movlb	0	; () banked
 10273  0033C4  6FAE               	movwf	___ftmul@cntr& (0+255),b
 10274  0033C6                     l4532:
 10275                           
 10276                           ; BSR set to: 0
 10277  0033C6  0100               	movlb	0	; () banked
 10278  0033C8  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 10279  0033CA  D00C               	goto	l4536
 10280                           
 10281                           ; BSR set to: 0
 10282  0033CC  0100               	movlb	0	; () banked
 10283  0033CE  51A4               	movf	___ftmul@f2& (0+255),w,b
 10284  0033D0  0100               	movlb	0	; () banked
 10285  0033D2  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10286  0033D4  0100               	movlb	0	; () banked
 10287  0033D6  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 10288  0033D8  0100               	movlb	0	; () banked
 10289  0033DA  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10290  0033DC  0100               	movlb	0	; () banked
 10291  0033DE  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10292  0033E0  0100               	movlb	0	; () banked
 10293  0033E2  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10294  0033E4                     l4536:
 10295                           
 10296                           ; BSR set to: 0
 10297  0033E4  0100               	movlb	0	; () banked
 10298  0033E6  90D8               	bcf	status,0,c
 10299  0033E8  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10300  0033EA  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10301  0033EC  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 10302  0033EE  0100               	movlb	0	; () banked
 10303  0033F0  90D8               	bcf	status,0,c
 10304  0033F2  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10305  0033F4  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10306  0033F6  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10307                           
 10308                           ; BSR set to: 0
 10309  0033F8  0100               	movlb	0	; () banked
 10310  0033FA  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 10311  0033FC  D7E4               	goto	l4532
 10312                           
 10313                           ; BSR set to: 0
 10314                           
 10315                           ; BSR set to: 0
 10316  0033FE  C0AB  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
 10317  003402  C0AC  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10318  003406  C0AD  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10319  00340A  C0AA  F083         	movff	___ftmul@exp,___ftpack@exp
 10320  00340E  C0AF  F084         	movff	___ftmul@sign,___ftpack@sign
 10321  003412  EC49  F01E         	call	___ftpack	;wreg free
 10322  003416  C080  F0A1         	movff	?___ftpack,?___ftmul
 10323  00341A  C081  F0A2         	movff	?___ftpack+1,?___ftmul+1
 10324  00341E  C082  F0A3         	movff	?___ftpack+2,?___ftmul+2
 10325  003422  0012               	return	
 10326  003424                     __end_of___ftmul:
 10327                           	opt stack 0
 10328                           tblptru	equ	0xFF8
 10329                           tblptrh	equ	0xFF7
 10330                           tblptrl	equ	0xFF6
 10331                           tablat	equ	0xFF5
 10332                           prodh	equ	0xFF4
 10333                           prodl	equ	0xFF3
 10334                           intcon	equ	0xFF2
 10335                           postinc0	equ	0xFEE
 10336                           wreg	equ	0xFE8
 10337                           postdec1	equ	0xFE5
 10338                           fsr1l	equ	0xFE1
 10339                           indf2	equ	0xFDF
 10340                           postinc2	equ	0xFDE
 10341                           postdec2	equ	0xFDD
 10342                           fsr2h	equ	0xFDA
 10343                           fsr2l	equ	0xFD9
 10344                           status	equ	0xFD8
 10345                           
 10346 ;; *************** function ___ftdiv *****************
 10347 ;; Defined at:
 10348 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10349 ;; Parameters:    Size  Location     Type
 10350 ;;  f1              3   18[BANK0 ] float 
 10351 ;;  f2              3   21[BANK0 ] float 
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;  f3              3   28[BANK0 ] float 
 10354 ;;  sign            1   32[BANK0 ] unsigned char 
 10355 ;;  exp             1   31[BANK0 ] unsigned char 
 10356 ;;  cntr            1   27[BANK0 ] unsigned char 
 10357 ;; Return value:  Size  Location     Type
 10358 ;;                  3   18[BANK0 ] float 
 10359 ;; Registers used:
 10360 ;;		wreg, status,2, status,0, cstack
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10366 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10367 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10368 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;Total ram usage:       15 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    7
 10373 ;; This function calls:
 10374 ;;		___ftpack
 10375 ;; This function is called by:
 10376 ;;		_sortBattery
 10377 ;;		_angleToPulse
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text33
 10382  003424                     __ptext33:
 10383                           	opt stack 0
 10384  003424                     ___ftdiv:
 10385                           	opt stack 20
 10386                           
 10387                           ;incstack = 0
 10388  003424  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
 10389  003428  0100               	movlb	0	; () banked
 10390  00342A  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 10391  00342C  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 10392  00342E  0100               	movlb	0	; () banked
 10393  003430  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10394  003432  0100               	movlb	0	; () banked
 10395  003434  3798               	rlcf	??___ftdiv& (0+255),f,b
 10396  003436  E301               	bnc	u4741
 10397  003438  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 10398  00343A                     u4741:
 10399  00343A  0100               	movlb	0	; () banked
 10400  00343C  5198               	movf	??___ftdiv& (0+255),w,b
 10401  00343E  0100               	movlb	0	; () banked
 10402  003440  6F9F               	movwf	___ftdiv@exp& (0+255),b
 10403  003442  0100               	movlb	0	; () banked
 10404  003444  519F               	movf	___ftdiv@exp& (0+255),w,b
 10405  003446  A4D8               	btfss	status,2,c
 10406  003448  D00A               	goto	l4860
 10407                           
 10408                           ; BSR set to: 0
 10409  00344A  0E00               	movlw	0
 10410  00344C  0100               	movlb	0	; () banked
 10411  00344E  6F92               	movwf	?___ftdiv& (0+255),b
 10412  003450  0E00               	movlw	0
 10413  003452  0100               	movlb	0	; () banked
 10414  003454  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 10415  003456  0E00               	movlw	0
 10416  003458  0100               	movlb	0	; () banked
 10417  00345A  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 10418                           
 10419                           ; BSR set to: 0
 10420  00345C  0012               	return	
 10421  00345E                     l4860:
 10422                           
 10423                           ; BSR set to: 0
 10424  00345E  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
 10425  003462  0100               	movlb	0	; () banked
 10426  003464  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 10427  003466  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 10428  003468  0100               	movlb	0	; () banked
 10429  00346A  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10430  00346C  0100               	movlb	0	; () banked
 10431  00346E  3798               	rlcf	??___ftdiv& (0+255),f,b
 10432  003470  E301               	bnc	u4761
 10433  003472  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 10434  003474                     u4761:
 10435  003474  0100               	movlb	0	; () banked
 10436  003476  5198               	movf	??___ftdiv& (0+255),w,b
 10437  003478  0100               	movlb	0	; () banked
 10438  00347A  6FA0               	movwf	___ftdiv@sign& (0+255),b
 10439  00347C  0100               	movlb	0	; () banked
 10440  00347E  51A0               	movf	___ftdiv@sign& (0+255),w,b
 10441  003480  A4D8               	btfss	status,2,c
 10442  003482  D00A               	goto	l4866
 10443                           
 10444                           ; BSR set to: 0
 10445  003484  0E00               	movlw	0
 10446  003486  0100               	movlb	0	; () banked
 10447  003488  6F92               	movwf	?___ftdiv& (0+255),b
 10448  00348A  0E00               	movlw	0
 10449  00348C  0100               	movlb	0	; () banked
 10450  00348E  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 10451  003490  0E00               	movlw	0
 10452  003492  0100               	movlb	0	; () banked
 10453  003494  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 10454                           
 10455                           ; BSR set to: 0
 10456  003496  0012               	return	
 10457  003498                     l4866:
 10458                           
 10459                           ; BSR set to: 0
 10460  003498  0E00               	movlw	0
 10461  00349A  0100               	movlb	0	; () banked
 10462  00349C  6F9C               	movwf	___ftdiv@f3& (0+255),b
 10463  00349E  0E00               	movlw	0
 10464  0034A0  0100               	movlb	0	; () banked
 10465  0034A2  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
 10466  0034A4  0E00               	movlw	0
 10467  0034A6  0100               	movlb	0	; () banked
 10468  0034A8  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
 10469                           
 10470                           ; BSR set to: 0
 10471  0034AA  0100               	movlb	0	; () banked
 10472  0034AC  51A0               	movf	___ftdiv@sign& (0+255),w,b
 10473  0034AE  0F89               	addlw	137
 10474  0034B0  0100               	movlb	0	; () banked
 10475  0034B2  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
 10476                           
 10477                           ; BSR set to: 0
 10478  0034B4  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
 10479                           
 10480                           ; BSR set to: 0
 10481  0034B8  0100               	movlb	0	; () banked
 10482  0034BA  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10483  0034BC  0100               	movlb	0	; () banked
 10484  0034BE  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
 10485                           
 10486                           ; BSR set to: 0
 10487  0034C0  0E80               	movlw	128
 10488  0034C2  0100               	movlb	0	; () banked
 10489  0034C4  17A0               	andwf	___ftdiv@sign& (0+255),f,b
 10490                           
 10491                           ; BSR set to: 0
 10492  0034C6  0100               	movlb	0	; () banked
 10493  0034C8  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10494                           
 10495                           ; BSR set to: 0
 10496  0034CA  0EFF               	movlw	255
 10497  0034CC  0100               	movlb	0	; () banked
 10498  0034CE  1792               	andwf	___ftdiv@f1& (0+255),f,b
 10499  0034D0  0EFF               	movlw	255
 10500  0034D2  0100               	movlb	0	; () banked
 10501  0034D4  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10502  0034D6  0E00               	movlw	0
 10503  0034D8  0100               	movlb	0	; () banked
 10504  0034DA  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10505                           
 10506                           ; BSR set to: 0
 10507  0034DC  0100               	movlb	0	; () banked
 10508  0034DE  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10509                           
 10510                           ; BSR set to: 0
 10511  0034E0  0EFF               	movlw	255
 10512  0034E2  0100               	movlb	0	; () banked
 10513  0034E4  1795               	andwf	___ftdiv@f2& (0+255),f,b
 10514  0034E6  0EFF               	movlw	255
 10515  0034E8  0100               	movlb	0	; () banked
 10516  0034EA  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10517  0034EC  0E00               	movlw	0
 10518  0034EE  0100               	movlb	0	; () banked
 10519  0034F0  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10520                           
 10521                           ; BSR set to: 0
 10522  0034F2  0E18               	movlw	24
 10523  0034F4  0100               	movlb	0	; () banked
 10524  0034F6  6F9B               	movwf	___ftdiv@cntr& (0+255),b
 10525  0034F8                     l4886:
 10526                           
 10527                           ; BSR set to: 0
 10528  0034F8  0100               	movlb	0	; () banked
 10529  0034FA  90D8               	bcf	status,0,c
 10530  0034FC  379C               	rlcf	___ftdiv@f3& (0+255),f,b
 10531  0034FE  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10532  003500  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10533                           
 10534                           ; BSR set to: 0
 10535  003502  0100               	movlb	0	; () banked
 10536  003504  5195               	movf	___ftdiv@f2& (0+255),w,b
 10537  003506  0100               	movlb	0	; () banked
 10538  003508  5D92               	subwf	___ftdiv@f1& (0+255),w,b
 10539  00350A  0100               	movlb	0	; () banked
 10540  00350C  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10541  00350E  0100               	movlb	0	; () banked
 10542  003510  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10543  003512  0100               	movlb	0	; () banked
 10544  003514  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10545  003516  0100               	movlb	0	; () banked
 10546  003518  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10547  00351A  A0D8               	btfss	status,0,c
 10548  00351C  D00E               	goto	l1081
 10549                           
 10550                           ; BSR set to: 0
 10551  00351E  0100               	movlb	0	; () banked
 10552  003520  5195               	movf	___ftdiv@f2& (0+255),w,b
 10553  003522  0100               	movlb	0	; () banked
 10554  003524  5F92               	subwf	___ftdiv@f1& (0+255),f,b
 10555  003526  0100               	movlb	0	; () banked
 10556  003528  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10557  00352A  0100               	movlb	0	; () banked
 10558  00352C  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10559  00352E  0100               	movlb	0	; () banked
 10560  003530  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10561  003532  0100               	movlb	0	; () banked
 10562  003534  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10563                           
 10564                           ; BSR set to: 0
 10565  003536  0100               	movlb	0	; () banked
 10566  003538  819C               	bsf	___ftdiv@f3& (0+255),0,b
 10567  00353A                     l1081:
 10568                           
 10569                           ; BSR set to: 0
 10570  00353A  0100               	movlb	0	; () banked
 10571  00353C  90D8               	bcf	status,0,c
 10572  00353E  3792               	rlcf	___ftdiv@f1& (0+255),f,b
 10573  003540  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10574  003542  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10575                           
 10576                           ; BSR set to: 0
 10577  003544  0100               	movlb	0	; () banked
 10578  003546  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
 10579  003548  D7D7               	goto	l4886
 10580                           
 10581                           ; BSR set to: 0
 10582                           
 10583                           ; BSR set to: 0
 10584  00354A  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
 10585  00354E  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10586  003552  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10587  003556  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
 10588  00355A  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
 10589  00355E  EC49  F01E         	call	___ftpack	;wreg free
 10590  003562  C080  F092         	movff	?___ftpack,?___ftdiv
 10591  003566  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
 10592  00356A  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
 10593  00356E  0012               	return	
 10594  003570                     __end_of___ftdiv:
 10595                           	opt stack 0
 10596                           tblptru	equ	0xFF8
 10597                           tblptrh	equ	0xFF7
 10598                           tblptrl	equ	0xFF6
 10599                           tablat	equ	0xFF5
 10600                           prodh	equ	0xFF4
 10601                           prodl	equ	0xFF3
 10602                           intcon	equ	0xFF2
 10603                           postinc0	equ	0xFEE
 10604                           wreg	equ	0xFE8
 10605                           postdec1	equ	0xFE5
 10606                           fsr1l	equ	0xFE1
 10607                           indf2	equ	0xFDF
 10608                           postinc2	equ	0xFDE
 10609                           postdec2	equ	0xFDD
 10610                           fsr2h	equ	0xFDA
 10611                           fsr2l	equ	0xFD9
 10612                           status	equ	0xFD8
 10613                           
 10614 ;; *************** function ___ftadd *****************
 10615 ;; Defined at:
 10616 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  f1              3   58[BANK0 ] float 
 10619 ;;  f2              3   61[BANK0 ] float 
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;  exp1            1   69[BANK0 ] unsigned char 
 10622 ;;  exp2            1   68[BANK0 ] unsigned char 
 10623 ;;  sign            1   67[BANK0 ] unsigned char 
 10624 ;; Return value:  Size  Location     Type
 10625 ;;                  3   58[BANK0 ] float 
 10626 ;; Registers used:
 10627 ;;		wreg, status,2, status,0, cstack
 10628 ;; Tracked objects:
 10629 ;;		On entry : 0/0
 10630 ;;		On exit  : 0/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10633 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;Total ram usage:       12 bytes
 10638 ;; Hardware stack levels used:    1
 10639 ;; Hardware stack levels required when called:    7
 10640 ;; This function calls:
 10641 ;;		___ftpack
 10642 ;; This function is called by:
 10643 ;;		_angleToPulse
 10644 ;;		_printf
 10645 ;;		___ftsub
 10646 ;; This function uses a non-reentrant model
 10647 ;;
 10648                           
 10649                           	psect	text34
 10650  002638                     __ptext34:
 10651                           	opt stack 0
 10652  002638                     ___ftadd:
 10653                           	opt stack 20
 10654                           
 10655                           ;incstack = 0
 10656  002638  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
 10657  00263C  0100               	movlb	0	; () banked
 10658  00263E  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10659  002640  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10660  002642  0100               	movlb	0	; () banked
 10661  002644  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10662  002646  0100               	movlb	0	; () banked
 10663  002648  37C0               	rlcf	??___ftadd& (0+255),f,b
 10664  00264A  E301               	bnc	u4071
 10665  00264C  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10666  00264E                     u4071:
 10667  00264E  0100               	movlb	0	; () banked
 10668  002650  51C0               	movf	??___ftadd& (0+255),w,b
 10669  002652  0100               	movlb	0	; () banked
 10670  002654  6FC5               	movwf	___ftadd@exp1& (0+255),b
 10671  002656  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
 10672  00265A  0100               	movlb	0	; () banked
 10673  00265C  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10674  00265E  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10675  002660  0100               	movlb	0	; () banked
 10676  002662  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10677  002664  0100               	movlb	0	; () banked
 10678  002666  37C0               	rlcf	??___ftadd& (0+255),f,b
 10679  002668  E301               	bnc	u4081
 10680  00266A  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10681  00266C                     u4081:
 10682  00266C  0100               	movlb	0	; () banked
 10683  00266E  51C0               	movf	??___ftadd& (0+255),w,b
 10684  002670  0100               	movlb	0	; () banked
 10685  002672  6FC4               	movwf	___ftadd@exp2& (0+255),b
 10686                           
 10687                           ; BSR set to: 0
 10688  002674  0100               	movlb	0	; () banked
 10689  002676  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10690  002678  0100               	movlb	0	; () banked
 10691  00267A  B4D8               	btfsc	status,2,c
 10692  00267C  D011               	goto	l1046
 10693                           
 10694                           ; BSR set to: 0
 10695  00267E  0100               	movlb	0	; () banked
 10696  002680  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10697  002682  0100               	movlb	0	; () banked
 10698  002684  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10699  002686  B0D8               	btfsc	status,0,c
 10700  002688  D012               	goto	l4434
 10701                           
 10702                           ; BSR set to: 0
 10703  00268A  0100               	movlb	0	; () banked
 10704  00268C  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10705  00268E  0800               	sublw	0
 10706  002690  0100               	movlb	0	; () banked
 10707  002692  25C4               	addwf	___ftadd@exp2& (0+255),w,b
 10708  002694  0100               	movlb	0	; () banked
 10709  002696  6FC0               	movwf	??___ftadd& (0+255),b
 10710  002698  0E18               	movlw	24
 10711  00269A  0100               	movlb	0	; () banked
 10712  00269C  65C0               	cpfsgt	??___ftadd& (0+255),b
 10713  00269E  D007               	goto	l4434
 10714  0026A0                     l1046:
 10715                           
 10716                           ; BSR set to: 0
 10717  0026A0  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
 10718  0026A4  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
 10719  0026A8  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
 10720  0026AC  0012               	return	
 10721  0026AE                     l4434:
 10722                           
 10723                           ; BSR set to: 0
 10724  0026AE  0100               	movlb	0	; () banked
 10725  0026B0  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10726  0026B2  0100               	movlb	0	; () banked
 10727  0026B4  B4D8               	btfsc	status,2,c
 10728  0026B6  D011               	goto	l1050
 10729                           
 10730                           ; BSR set to: 0
 10731  0026B8  0100               	movlb	0	; () banked
 10732  0026BA  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10733  0026BC  0100               	movlb	0	; () banked
 10734  0026BE  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10735  0026C0  B0D8               	btfsc	status,0,c
 10736  0026C2  D012               	goto	l4440
 10737                           
 10738                           ; BSR set to: 0
 10739  0026C4  0100               	movlb	0	; () banked
 10740  0026C6  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10741  0026C8  0800               	sublw	0
 10742  0026CA  0100               	movlb	0	; () banked
 10743  0026CC  25C5               	addwf	___ftadd@exp1& (0+255),w,b
 10744  0026CE  0100               	movlb	0	; () banked
 10745  0026D0  6FC0               	movwf	??___ftadd& (0+255),b
 10746  0026D2  0E18               	movlw	24
 10747  0026D4  0100               	movlb	0	; () banked
 10748  0026D6  65C0               	cpfsgt	??___ftadd& (0+255),b
 10749  0026D8  D007               	goto	l4440
 10750  0026DA                     l1050:
 10751                           
 10752                           ; BSR set to: 0
 10753  0026DA  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
 10754  0026DE  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
 10755  0026E2  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
 10756  0026E6  0012               	return	
 10757  0026E8                     l4440:
 10758                           
 10759                           ; BSR set to: 0
 10760  0026E8  0E06               	movlw	6
 10761  0026EA  0100               	movlb	0	; () banked
 10762  0026EC  6FC3               	movwf	___ftadd@sign& (0+255),b
 10763                           
 10764                           ; BSR set to: 0
 10765  0026EE  0100               	movlb	0	; () banked
 10766  0026F0  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10767  0026F2  D002               	goto	l4446
 10768                           
 10769                           ; BSR set to: 0
 10770  0026F4  0100               	movlb	0	; () banked
 10771  0026F6  8FC3               	bsf	___ftadd@sign& (0+255),7,b
 10772  0026F8                     l4446:
 10773                           
 10774                           ; BSR set to: 0
 10775  0026F8  0100               	movlb	0	; () banked
 10776  0026FA  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10777  0026FC  D002               	goto	l1052
 10778                           
 10779                           ; BSR set to: 0
 10780  0026FE  0100               	movlb	0	; () banked
 10781  002700  8DC3               	bsf	___ftadd@sign& (0+255),6,b
 10782  002702                     l1052:
 10783                           
 10784                           ; BSR set to: 0
 10785  002702  0100               	movlb	0	; () banked
 10786  002704  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10787                           
 10788                           ; BSR set to: 0
 10789  002706  0EFF               	movlw	255
 10790  002708  0100               	movlb	0	; () banked
 10791  00270A  17BA               	andwf	___ftadd@f1& (0+255),f,b
 10792  00270C  0EFF               	movlw	255
 10793  00270E  0100               	movlb	0	; () banked
 10794  002710  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10795  002712  0E00               	movlw	0
 10796  002714  0100               	movlb	0	; () banked
 10797  002716  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10798  002718  0100               	movlb	0	; () banked
 10799  00271A  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10800                           
 10801                           ; BSR set to: 0
 10802  00271C  0EFF               	movlw	255
 10803  00271E  0100               	movlb	0	; () banked
 10804  002720  17BD               	andwf	___ftadd@f2& (0+255),f,b
 10805  002722  0EFF               	movlw	255
 10806  002724  0100               	movlb	0	; () banked
 10807  002726  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10808  002728  0E00               	movlw	0
 10809  00272A  0100               	movlb	0	; () banked
 10810  00272C  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10811                           
 10812                           ; BSR set to: 0
 10813  00272E  0100               	movlb	0	; () banked
 10814  002730  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10815  002732  0100               	movlb	0	; () banked
 10816  002734  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10817  002736  B0D8               	btfsc	status,0,c
 10818  002738  D025               	goto	l4466
 10819  00273A                     l4456:
 10820                           
 10821                           ; BSR set to: 0
 10822  00273A  0100               	movlb	0	; () banked
 10823  00273C  90D8               	bcf	status,0,c
 10824  00273E  37BD               	rlcf	___ftadd@f2& (0+255),f,b
 10825  002740  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10826  002742  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10827  002744  0100               	movlb	0	; () banked
 10828  002746  07C4               	decf	___ftadd@exp2& (0+255),f,b
 10829                           
 10830                           ; BSR set to: 0
 10831  002748  0100               	movlb	0	; () banked
 10832  00274A  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10833  00274C  0100               	movlb	0	; () banked
 10834  00274E  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10835  002750  B4D8               	btfsc	status,2,c
 10836  002752  D011               	goto	l4464
 10837                           
 10838                           ; BSR set to: 0
 10839  002754  0100               	movlb	0	; () banked
 10840  002756  07C3               	decf	___ftadd@sign& (0+255),f,b
 10841  002758  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10842  00275C  0E07               	movlw	7
 10843  00275E  0100               	movlb	0	; () banked
 10844  002760  17C0               	andwf	??___ftadd& (0+255),f,b
 10845  002762  B4D8               	btfsc	status,2,c
 10846  002764  D008               	goto	l4464
 10847  002766  D7E9               	goto	l4456
 10848  002768                     l4462:
 10849                           
 10850                           ; BSR set to: 0
 10851  002768  0100               	movlb	0	; () banked
 10852  00276A  90D8               	bcf	status,0,c
 10853  00276C  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10854  00276E  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10855  002770  33BA               	rrcf	___ftadd@f1& (0+255),f,b
 10856  002772  0100               	movlb	0	; () banked
 10857  002774  2BC5               	incf	___ftadd@exp1& (0+255),f,b
 10858  002776                     l4464:
 10859                           
 10860                           ; BSR set to: 0
 10861  002776  0100               	movlb	0	; () banked
 10862  002778  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10863  00277A  0100               	movlb	0	; () banked
 10864  00277C  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10865  00277E  B4D8               	btfsc	status,2,c
 10866  002780  D02B               	goto	l1061
 10867  002782  D7F2               	goto	l4462
 10868  002784                     l4466:
 10869                           
 10870                           ; BSR set to: 0
 10871  002784  0100               	movlb	0	; () banked
 10872  002786  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10873  002788  0100               	movlb	0	; () banked
 10874  00278A  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10875  00278C  B0D8               	btfsc	status,0,c
 10876  00278E  D024               	goto	l1061
 10877  002790                     l4468:
 10878                           
 10879                           ; BSR set to: 0
 10880  002790  0100               	movlb	0	; () banked
 10881  002792  90D8               	bcf	status,0,c
 10882  002794  37BA               	rlcf	___ftadd@f1& (0+255),f,b
 10883  002796  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10884  002798  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10885  00279A  0100               	movlb	0	; () banked
 10886  00279C  07C5               	decf	___ftadd@exp1& (0+255),f,b
 10887                           
 10888                           ; BSR set to: 0
 10889  00279E  0100               	movlb	0	; () banked
 10890  0027A0  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10891  0027A2  0100               	movlb	0	; () banked
 10892  0027A4  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10893  0027A6  B4D8               	btfsc	status,2,c
 10894  0027A8  D011               	goto	l4476
 10895                           
 10896                           ; BSR set to: 0
 10897  0027AA  0100               	movlb	0	; () banked
 10898  0027AC  07C3               	decf	___ftadd@sign& (0+255),f,b
 10899  0027AE  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10900  0027B2  0E07               	movlw	7
 10901  0027B4  0100               	movlb	0	; () banked
 10902  0027B6  17C0               	andwf	??___ftadd& (0+255),f,b
 10903  0027B8  B4D8               	btfsc	status,2,c
 10904  0027BA  D008               	goto	l4476
 10905  0027BC  D7E9               	goto	l4468
 10906  0027BE                     l4474:
 10907                           
 10908                           ; BSR set to: 0
 10909  0027BE  0100               	movlb	0	; () banked
 10910  0027C0  90D8               	bcf	status,0,c
 10911  0027C2  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10912  0027C4  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10913  0027C6  33BD               	rrcf	___ftadd@f2& (0+255),f,b
 10914  0027C8  0100               	movlb	0	; () banked
 10915  0027CA  2BC4               	incf	___ftadd@exp2& (0+255),f,b
 10916  0027CC                     l4476:
 10917                           
 10918                           ; BSR set to: 0
 10919  0027CC  0100               	movlb	0	; () banked
 10920  0027CE  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10921  0027D0  0100               	movlb	0	; () banked
 10922  0027D2  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10923  0027D4  A4D8               	btfss	status,2,c
 10924  0027D6  D7F3               	goto	l4474
 10925  0027D8                     l1061:
 10926                           
 10927                           ; BSR set to: 0
 10928  0027D8  0100               	movlb	0	; () banked
 10929  0027DA  AFC3               	btfss	___ftadd@sign& (0+255),7,b
 10930  0027DC  D012               	goto	l1070
 10931                           
 10932                           ; BSR set to: 0
 10933  0027DE  0EFF               	movlw	255
 10934  0027E0  0100               	movlb	0	; () banked
 10935  0027E2  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
 10936  0027E4  0EFF               	movlw	255
 10937  0027E6  0100               	movlb	0	; () banked
 10938  0027E8  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10939  0027EA  0EFF               	movlw	255
 10940  0027EC  0100               	movlb	0	; () banked
 10941  0027EE  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10942  0027F0  0E01               	movlw	1
 10943  0027F2  0100               	movlb	0	; () banked
 10944  0027F4  27BA               	addwf	___ftadd@f1& (0+255),f,b
 10945  0027F6  0E00               	movlw	0
 10946  0027F8  0100               	movlb	0	; () banked
 10947  0027FA  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10948  0027FC  0E00               	movlw	0
 10949  0027FE  0100               	movlb	0	; () banked
 10950  002800  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10951  002802                     l1070:
 10952                           
 10953                           ; BSR set to: 0
 10954  002802  0100               	movlb	0	; () banked
 10955  002804  ADC3               	btfss	___ftadd@sign& (0+255),6,b
 10956  002806  D012               	goto	l4482
 10957                           
 10958                           ; BSR set to: 0
 10959  002808  0EFF               	movlw	255
 10960  00280A  0100               	movlb	0	; () banked
 10961  00280C  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 10962  00280E  0EFF               	movlw	255
 10963  002810  0100               	movlb	0	; () banked
 10964  002812  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10965  002814  0EFF               	movlw	255
 10966  002816  0100               	movlb	0	; () banked
 10967  002818  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10968  00281A  0E01               	movlw	1
 10969  00281C  0100               	movlb	0	; () banked
 10970  00281E  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10971  002820  0E00               	movlw	0
 10972  002822  0100               	movlb	0	; () banked
 10973  002824  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10974  002826  0E00               	movlw	0
 10975  002828  0100               	movlb	0	; () banked
 10976  00282A  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10977  00282C                     l4482:
 10978                           
 10979                           ; BSR set to: 0
 10980  00282C  0E00               	movlw	0
 10981  00282E  0100               	movlb	0	; () banked
 10982  002830  6FC3               	movwf	___ftadd@sign& (0+255),b
 10983                           
 10984                           ; BSR set to: 0
 10985  002832  0100               	movlb	0	; () banked
 10986  002834  51BA               	movf	___ftadd@f1& (0+255),w,b
 10987  002836  0100               	movlb	0	; () banked
 10988  002838  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10989  00283A  0100               	movlb	0	; () banked
 10990  00283C  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
 10991  00283E  0100               	movlb	0	; () banked
 10992  002840  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10993  002842  0100               	movlb	0	; () banked
 10994  002844  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
 10995  002846  0100               	movlb	0	; () banked
 10996  002848  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10997                           
 10998                           ; BSR set to: 0
 10999  00284A  0100               	movlb	0	; () banked
 11000  00284C  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11001  00284E  D015               	goto	l4492
 11002                           
 11003                           ; BSR set to: 0
 11004  002850  0EFF               	movlw	255
 11005  002852  0100               	movlb	0	; () banked
 11006  002854  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 11007  002856  0EFF               	movlw	255
 11008  002858  0100               	movlb	0	; () banked
 11009  00285A  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11010  00285C  0EFF               	movlw	255
 11011  00285E  0100               	movlb	0	; () banked
 11012  002860  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11013  002862  0E01               	movlw	1
 11014  002864  0100               	movlb	0	; () banked
 11015  002866  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11016  002868  0E00               	movlw	0
 11017  00286A  0100               	movlb	0	; () banked
 11018  00286C  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11019  00286E  0E00               	movlw	0
 11020  002870  0100               	movlb	0	; () banked
 11021  002872  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11022                           
 11023                           ; BSR set to: 0
 11024  002874  0E01               	movlw	1
 11025  002876  0100               	movlb	0	; () banked
 11026  002878  6FC3               	movwf	___ftadd@sign& (0+255),b
 11027  00287A                     l4492:
 11028                           
 11029                           ; BSR set to: 0
 11030  00287A  C0BD  F080         	movff	___ftadd@f2,___ftpack@arg
 11031  00287E  C0BE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 11032  002882  C0BF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 11033  002886  C0C5  F083         	movff	___ftadd@exp1,___ftpack@exp
 11034  00288A  C0C3  F084         	movff	___ftadd@sign,___ftpack@sign
 11035  00288E  EC49  F01E         	call	___ftpack	;wreg free
 11036  002892  C080  F0BA         	movff	?___ftpack,?___ftadd
 11037  002896  C081  F0BB         	movff	?___ftpack+1,?___ftadd+1
 11038  00289A  C082  F0BC         	movff	?___ftpack+2,?___ftadd+2
 11039  00289E  0012               	return	
 11040  0028A0                     __end_of___ftadd:
 11041                           	opt stack 0
 11042                           tblptru	equ	0xFF8
 11043                           tblptrh	equ	0xFF7
 11044                           tblptrl	equ	0xFF6
 11045                           tablat	equ	0xFF5
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           intcon	equ	0xFF2
 11049                           postinc0	equ	0xFEE
 11050                           wreg	equ	0xFE8
 11051                           postdec1	equ	0xFE5
 11052                           fsr1l	equ	0xFE1
 11053                           indf2	equ	0xFDF
 11054                           postinc2	equ	0xFDE
 11055                           postdec2	equ	0xFDD
 11056                           fsr2h	equ	0xFDA
 11057                           fsr2l	equ	0xFD9
 11058                           status	equ	0xFD8
 11059                           
 11060 ;; *************** function ___awtoft *****************
 11061 ;; Defined at:
 11062 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;  c               2    8[BANK0 ] int 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;  sign            1   11[BANK0 ] unsigned char 
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  3    8[BANK0 ] float 
 11069 ;; Registers used:
 11070 ;;		wreg, status,2, status,0, cstack
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11076 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11079 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11080 ;;Total ram usage:        4 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:    7
 11083 ;; This function calls:
 11084 ;;		___ftpack
 11085 ;; This function is called by:
 11086 ;;		_angleToPulse
 11087 ;;		_testFrequency
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           	psect	text35
 11092  004F48                     __ptext35:
 11093                           	opt stack 0
 11094  004F48                     ___awtoft:
 11095                           	opt stack 20
 11096                           
 11097                           ;incstack = 0
 11098  004F48  0E00               	movlw	0
 11099  004F4A  0100               	movlb	0	; () banked
 11100  004F4C  6F8B               	movwf	___awtoft@sign& (0+255),b
 11101                           
 11102                           ; BSR set to: 0
 11103  004F4E  0100               	movlb	0	; () banked
 11104  004F50  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
 11105  004F52  D008               	goto	l4916
 11106                           
 11107                           ; BSR set to: 0
 11108  004F54  0100               	movlb	0	; () banked
 11109  004F56  6D88               	negf	___awtoft@c& (0+255),b
 11110  004F58  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
 11111  004F5A  B0D8               	btfsc	status,0,c
 11112  004F5C  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
 11113                           
 11114                           ; BSR set to: 0
 11115  004F5E  0E01               	movlw	1
 11116  004F60  0100               	movlb	0	; () banked
 11117  004F62  6F8B               	movwf	___awtoft@sign& (0+255),b
 11118  004F64                     l4916:
 11119                           
 11120                           ; BSR set to: 0
 11121  004F64  C088  F080         	movff	___awtoft@c,___ftpack@arg
 11122  004F68  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
 11123  004F6C  0100               	movlb	0	; () banked
 11124  004F6E  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
 11125  004F70  0E8E               	movlw	142
 11126  004F72  0100               	movlb	0	; () banked
 11127  004F74  6F83               	movwf	___ftpack@exp& (0+255),b
 11128  004F76  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
 11129  004F7A  EC49  F01E         	call	___ftpack	;wreg free
 11130  004F7E  C080  F088         	movff	?___ftpack,?___awtoft
 11131  004F82  C081  F089         	movff	?___ftpack+1,?___awtoft+1
 11132  004F86  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
 11133  004F8A  0012               	return	
 11134  004F8C                     __end_of___awtoft:
 11135                           	opt stack 0
 11136                           tblptru	equ	0xFF8
 11137                           tblptrh	equ	0xFF7
 11138                           tblptrl	equ	0xFF6
 11139                           tablat	equ	0xFF5
 11140                           prodh	equ	0xFF4
 11141                           prodl	equ	0xFF3
 11142                           intcon	equ	0xFF2
 11143                           postinc0	equ	0xFEE
 11144                           wreg	equ	0xFE8
 11145                           postdec1	equ	0xFE5
 11146                           fsr1l	equ	0xFE1
 11147                           indf2	equ	0xFDF
 11148                           postinc2	equ	0xFDE
 11149                           postdec2	equ	0xFDD
 11150                           fsr2h	equ	0xFDA
 11151                           fsr2l	equ	0xFD9
 11152                           status	equ	0xFD8
 11153                           
 11154 ;; *************** function ___altoft *****************
 11155 ;; Defined at:
 11156 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;  c               4    8[BANK0 ] long 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;  sign            1   17[BANK0 ] unsigned char 
 11161 ;;  exp             1   16[BANK0 ] unsigned char 
 11162 ;; Return value:  Size  Location     Type
 11163 ;;                  3    8[BANK0 ] float 
 11164 ;; Registers used:
 11165 ;;		wreg, status,2, status,0, cstack
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/0
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11171 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;Total ram usage:       10 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:    7
 11178 ;; This function calls:
 11179 ;;		___ftpack
 11180 ;; This function is called by:
 11181 ;;		_sortBattery
 11182 ;;		_angleToPulse
 11183 ;; This function uses a non-reentrant model
 11184 ;;
 11185                           
 11186                           	psect	text36
 11187  00479C                     __ptext36:
 11188                           	opt stack 0
 11189  00479C                     ___altoft:
 11190                           	opt stack 20
 11191                           
 11192                           ;incstack = 0
 11193  00479C  0E00               	movlw	0
 11194  00479E  0100               	movlb	0	; () banked
 11195  0047A0  6F91               	movwf	___altoft@sign& (0+255),b
 11196  0047A2  0E8E               	movlw	142
 11197  0047A4  0100               	movlb	0	; () banked
 11198  0047A6  6F90               	movwf	___altoft@exp& (0+255),b
 11199                           
 11200                           ; BSR set to: 0
 11201  0047A8  0100               	movlb	0	; () banked
 11202  0047AA  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 11203  0047AC  D015               	goto	l4848
 11204                           
 11205                           ; BSR set to: 0
 11206  0047AE  0100               	movlb	0	; () banked
 11207  0047B0  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 11208  0047B2  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 11209  0047B4  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 11210  0047B6  6D88               	negf	___altoft@c& (0+255),b
 11211  0047B8  0E00               	movlw	0
 11212  0047BA  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 11213  0047BC  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 11214  0047BE  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 11215                           
 11216                           ; BSR set to: 0
 11217  0047C0  0E01               	movlw	1
 11218  0047C2  0100               	movlb	0	; () banked
 11219  0047C4  6F91               	movwf	___altoft@sign& (0+255),b
 11220                           
 11221                           ; BSR set to: 0
 11222  0047C6  D008               	goto	l4848
 11223  0047C8                     l4846:
 11224                           
 11225                           ; BSR set to: 0
 11226  0047C8  0100               	movlb	0	; () banked
 11227  0047CA  90D8               	bcf	status,0,c
 11228  0047CC  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 11229  0047CE  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 11230  0047D0  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 11231  0047D2  3388               	rrcf	___altoft@c& (0+255),f,b
 11232  0047D4  0100               	movlb	0	; () banked
 11233  0047D6  2B90               	incf	___altoft@exp& (0+255),f,b
 11234  0047D8                     l4848:
 11235                           
 11236                           ; BSR set to: 0
 11237  0047D8  0E00               	movlw	0
 11238  0047DA  0100               	movlb	0	; () banked
 11239  0047DC  1588               	andwf	___altoft@c& (0+255),w,b
 11240  0047DE  0100               	movlb	0	; () banked
 11241  0047E0  6F8C               	movwf	??___altoft& (0+255),b
 11242  0047E2  0E00               	movlw	0
 11243  0047E4  0100               	movlb	0	; () banked
 11244  0047E6  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 11245  0047E8  0100               	movlb	0	; () banked
 11246  0047EA  6F8D               	movwf	(??___altoft+1)& (0+255),b
 11247  0047EC  0E00               	movlw	0
 11248  0047EE  0100               	movlb	0	; () banked
 11249  0047F0  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 11250  0047F2  0100               	movlb	0	; () banked
 11251  0047F4  6F8E               	movwf	(??___altoft+2)& (0+255),b
 11252  0047F6  0EFF               	movlw	255
 11253  0047F8  0100               	movlb	0	; () banked
 11254  0047FA  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 11255  0047FC  0100               	movlb	0	; () banked
 11256  0047FE  6F8F               	movwf	(??___altoft+3)& (0+255),b
 11257  004800  0100               	movlb	0	; () banked
 11258  004802  518C               	movf	??___altoft& (0+255),w,b
 11259  004804  0100               	movlb	0	; () banked
 11260  004806  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 11261  004808  0100               	movlb	0	; () banked
 11262  00480A  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 11263  00480C  0100               	movlb	0	; () banked
 11264  00480E  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 11265  004810  A4D8               	btfss	status,2,c
 11266  004812  D7DA               	goto	l4846
 11267                           
 11268                           ; BSR set to: 0
 11269                           
 11270                           ; BSR set to: 0
 11271  004814  C088  F080         	movff	___altoft@c,___ftpack@arg
 11272  004818  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
 11273  00481C  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
 11274  004820  C090  F083         	movff	___altoft@exp,___ftpack@exp
 11275  004824  C091  F084         	movff	___altoft@sign,___ftpack@sign
 11276  004828  EC49  F01E         	call	___ftpack	;wreg free
 11277  00482C  C080  F088         	movff	?___ftpack,?___altoft
 11278  004830  C081  F089         	movff	?___ftpack+1,?___altoft+1
 11279  004834  C082  F08A         	movff	?___ftpack+2,?___altoft+2
 11280  004838  0012               	return	
 11281  00483A                     __end_of___altoft:
 11282                           	opt stack 0
 11283                           tblptru	equ	0xFF8
 11284                           tblptrh	equ	0xFF7
 11285                           tblptrl	equ	0xFF6
 11286                           tablat	equ	0xFF5
 11287                           prodh	equ	0xFF4
 11288                           prodl	equ	0xFF3
 11289                           intcon	equ	0xFF2
 11290                           postinc0	equ	0xFEE
 11291                           wreg	equ	0xFE8
 11292                           postdec1	equ	0xFE5
 11293                           fsr1l	equ	0xFE1
 11294                           indf2	equ	0xFDF
 11295                           postinc2	equ	0xFDE
 11296                           postdec2	equ	0xFDD
 11297                           fsr2h	equ	0xFDA
 11298                           fsr2l	equ	0xFD9
 11299                           status	equ	0xFD8
 11300                           
 11301 ;; *************** function ___ftpack *****************
 11302 ;; Defined at:
 11303 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11304 ;; Parameters:    Size  Location     Type
 11305 ;;  arg             3    0[BANK0 ] unsigned um
 11306 ;;  exp             1    3[BANK0 ] unsigned char 
 11307 ;;  sign            1    4[BANK0 ] unsigned char 
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;		None
 11310 ;; Return value:  Size  Location     Type
 11311 ;;                  3    0[BANK0 ] float 
 11312 ;; Registers used:
 11313 ;;		wreg, status,2, status,0
 11314 ;; Tracked objects:
 11315 ;;		On entry : 0/0
 11316 ;;		On exit  : 0/0
 11317 ;;		Unchanged: 0/0
 11318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11319 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11323 ;;Total ram usage:        8 bytes
 11324 ;; Hardware stack levels used:    1
 11325 ;; Hardware stack levels required when called:    6
 11326 ;; This function calls:
 11327 ;;		Nothing
 11328 ;; This function is called by:
 11329 ;;		___altoft
 11330 ;;		___awtoft
 11331 ;;		___ftadd
 11332 ;;		___ftdiv
 11333 ;;		___ftmul
 11334 ;;		___lltoft
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           	psect	text37
 11339  003C92                     __ptext37:
 11340                           	opt stack 0
 11341  003C92                     ___ftpack:
 11342                           	opt stack 20
 11343                           
 11344                           ;incstack = 0
 11345  003C92  0100               	movlb	0	; () banked
 11346  003C94  5183               	movf	___ftpack@exp& (0+255),w,b
 11347  003C96  0100               	movlb	0	; () banked
 11348  003C98  B4D8               	btfsc	status,2,c
 11349  003C9A  D008               	goto	l4386
 11350                           
 11351                           ; BSR set to: 0
 11352  003C9C  0100               	movlb	0	; () banked
 11353  003C9E  5180               	movf	___ftpack@arg& (0+255),w,b
 11354  003CA0  0100               	movlb	0	; () banked
 11355  003CA2  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11356  003CA4  0100               	movlb	0	; () banked
 11357  003CA6  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11358  003CA8  A4D8               	btfss	status,2,c
 11359  003CAA  D011               	goto	l4392
 11360  003CAC                     l4386:
 11361                           
 11362                           ; BSR set to: 0
 11363  003CAC  0E00               	movlw	0
 11364  003CAE  0100               	movlb	0	; () banked
 11365  003CB0  6F80               	movwf	?___ftpack& (0+255),b
 11366  003CB2  0E00               	movlw	0
 11367  003CB4  0100               	movlb	0	; () banked
 11368  003CB6  6F81               	movwf	(?___ftpack+1)& (0+255),b
 11369  003CB8  0E00               	movlw	0
 11370  003CBA  0100               	movlb	0	; () banked
 11371  003CBC  6F82               	movwf	(?___ftpack+2)& (0+255),b
 11372                           
 11373                           ; BSR set to: 0
 11374  003CBE  0012               	return	
 11375  003CC0                     l4390:
 11376                           
 11377                           ; BSR set to: 0
 11378  003CC0  0100               	movlb	0	; () banked
 11379  003CC2  2B83               	incf	___ftpack@exp& (0+255),f,b
 11380  003CC4  0100               	movlb	0	; () banked
 11381  003CC6  90D8               	bcf	status,0,c
 11382  003CC8  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11383  003CCA  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11384  003CCC  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11385  003CCE                     l4392:
 11386                           
 11387                           ; BSR set to: 0
 11388  003CCE  0E00               	movlw	0
 11389  003CD0  0100               	movlb	0	; () banked
 11390  003CD2  1580               	andwf	___ftpack@arg& (0+255),w,b
 11391  003CD4  0100               	movlb	0	; () banked
 11392  003CD6  6F85               	movwf	??___ftpack& (0+255),b
 11393  003CD8  0E00               	movlw	0
 11394  003CDA  0100               	movlb	0	; () banked
 11395  003CDC  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11396  003CDE  0100               	movlb	0	; () banked
 11397  003CE0  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11398  003CE2  0EFE               	movlw	254
 11399  003CE4  0100               	movlb	0	; () banked
 11400  003CE6  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11401  003CE8  0100               	movlb	0	; () banked
 11402  003CEA  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11403  003CEC  0100               	movlb	0	; () banked
 11404  003CEE  5185               	movf	??___ftpack& (0+255),w,b
 11405  003CF0  0100               	movlb	0	; () banked
 11406  003CF2  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11407  003CF4  0100               	movlb	0	; () banked
 11408  003CF6  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11409  003CF8  B4D8               	btfsc	status,2,c
 11410  003CFA  D011               	goto	l4398
 11411  003CFC  D7E1               	goto	l4390
 11412  003CFE                     l4394:
 11413                           
 11414                           ; BSR set to: 0
 11415  003CFE  0100               	movlb	0	; () banked
 11416  003D00  2B83               	incf	___ftpack@exp& (0+255),f,b
 11417                           
 11418                           ; BSR set to: 0
 11419  003D02  0E01               	movlw	1
 11420  003D04  0100               	movlb	0	; () banked
 11421  003D06  2780               	addwf	___ftpack@arg& (0+255),f,b
 11422  003D08  0E00               	movlw	0
 11423  003D0A  0100               	movlb	0	; () banked
 11424  003D0C  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11425  003D0E  0E00               	movlw	0
 11426  003D10  0100               	movlb	0	; () banked
 11427  003D12  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11428  003D14  0100               	movlb	0	; () banked
 11429  003D16  90D8               	bcf	status,0,c
 11430  003D18  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11431  003D1A  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11432  003D1C  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11433  003D1E                     l4398:
 11434                           
 11435                           ; BSR set to: 0
 11436  003D1E  0E00               	movlw	0
 11437  003D20  0100               	movlb	0	; () banked
 11438  003D22  1580               	andwf	___ftpack@arg& (0+255),w,b
 11439  003D24  0100               	movlb	0	; () banked
 11440  003D26  6F85               	movwf	??___ftpack& (0+255),b
 11441  003D28  0E00               	movlw	0
 11442  003D2A  0100               	movlb	0	; () banked
 11443  003D2C  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11444  003D2E  0100               	movlb	0	; () banked
 11445  003D30  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11446  003D32  0EFF               	movlw	255
 11447  003D34  0100               	movlb	0	; () banked
 11448  003D36  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11449  003D38  0100               	movlb	0	; () banked
 11450  003D3A  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11451  003D3C  0100               	movlb	0	; () banked
 11452  003D3E  5185               	movf	??___ftpack& (0+255),w,b
 11453  003D40  0100               	movlb	0	; () banked
 11454  003D42  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11455  003D44  0100               	movlb	0	; () banked
 11456  003D46  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11457  003D48  B4D8               	btfsc	status,2,c
 11458  003D4A  D008               	goto	l4402
 11459  003D4C  D7D8               	goto	l4394
 11460  003D4E                     l4400:
 11461                           
 11462                           ; BSR set to: 0
 11463  003D4E  0100               	movlb	0	; () banked
 11464  003D50  0783               	decf	___ftpack@exp& (0+255),f,b
 11465  003D52  0100               	movlb	0	; () banked
 11466  003D54  90D8               	bcf	status,0,c
 11467  003D56  3780               	rlcf	___ftpack@arg& (0+255),f,b
 11468  003D58  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11469  003D5A  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11470  003D5C                     l4402:
 11471                           
 11472                           ; BSR set to: 0
 11473  003D5C  0100               	movlb	0	; () banked
 11474  003D5E  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11475  003D60  D004               	goto	l1023
 11476                           
 11477                           ; BSR set to: 0
 11478  003D62  0E02               	movlw	2
 11479  003D64  0100               	movlb	0	; () banked
 11480  003D66  6183               	cpfslt	___ftpack@exp& (0+255),b
 11481  003D68  D7F2               	goto	l4400
 11482  003D6A                     l1023:
 11483                           
 11484                           ; BSR set to: 0
 11485  003D6A  0100               	movlb	0	; () banked
 11486  003D6C  B183               	btfsc	___ftpack@exp& (0+255),0,b
 11487  003D6E  D002               	goto	l4408
 11488                           
 11489                           ; BSR set to: 0
 11490  003D70  0100               	movlb	0	; () banked
 11491  003D72  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11492  003D74                     l4408:
 11493                           
 11494                           ; BSR set to: 0
 11495  003D74  0100               	movlb	0	; () banked
 11496  003D76  90D8               	bcf	status,0,c
 11497  003D78  3383               	rrcf	___ftpack@exp& (0+255),f,b
 11498  003D7A  0100               	movlb	0	; () banked
 11499  003D7C  5183               	movf	___ftpack@exp& (0+255),w,b
 11500  003D7E  0100               	movlb	0	; () banked
 11501  003D80  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11502                           
 11503                           ; BSR set to: 0
 11504  003D82  0100               	movlb	0	; () banked
 11505  003D84  5184               	movf	___ftpack@sign& (0+255),w,b
 11506  003D86  0100               	movlb	0	; () banked
 11507  003D88  B4D8               	btfsc	status,2,c
 11508  003D8A  D002               	goto	l4414
 11509                           
 11510                           ; BSR set to: 0
 11511  003D8C  0100               	movlb	0	; () banked
 11512  003D8E  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11513  003D90                     l4414:
 11514                           
 11515                           ; BSR set to: 0
 11516  003D90  C080  F080         	movff	___ftpack@arg,?___ftpack
 11517  003D94  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 11518  003D98  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 11519  003D9C  0012               	return	
 11520  003D9E                     __end_of___ftpack:
 11521                           	opt stack 0
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodh	equ	0xFF4
 11527                           prodl	equ	0xFF3
 11528                           intcon	equ	0xFF2
 11529                           postinc0	equ	0xFEE
 11530                           wreg	equ	0xFE8
 11531                           postdec1	equ	0xFE5
 11532                           fsr1l	equ	0xFE1
 11533                           indf2	equ	0xFDF
 11534                           postinc2	equ	0xFDE
 11535                           postdec2	equ	0xFDD
 11536                           fsr2h	equ	0xFDA
 11537                           fsr2l	equ	0xFD9
 11538                           status	equ	0xFD8
 11539                           
 11540 ;; *************** function _initTimer *****************
 11541 ;; Defined at:
 11542 ;;		line 52 in file "timer.c"
 11543 ;; Parameters:    Size  Location     Type
 11544 ;;  timer           2    0[BANK0 ] int 
 11545 ;; Auto vars:     Size  Location     Type
 11546 ;;		None
 11547 ;; Return value:  Size  Location     Type
 11548 ;;                  1    wreg      void 
 11549 ;; Registers used:
 11550 ;;		wreg, status,2, status,0
 11551 ;; Tracked objects:
 11552 ;;		On entry : 0/0
 11553 ;;		On exit  : 0/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11556 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;Total ram usage:        4 bytes
 11561 ;; Hardware stack levels used:    1
 11562 ;; Hardware stack levels required when called:    6
 11563 ;; This function calls:
 11564 ;;		Nothing
 11565 ;; This function is called by:
 11566 ;;		_main
 11567 ;;		_initServo
 11568 ;;		_testFrequency
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	text38
 11573  004DD2                     __ptext38:
 11574                           	opt stack 0
 11575  004DD2                     _initTimer:
 11576                           	opt stack 24
 11577                           
 11578                           ;timer.c: 53: switch(timer){
 11579                           
 11580                           ; BSR set to: 0
 11581                           ;incstack = 0
 11582  004DD2  D00F               	goto	l5650
 11583  004DD4                     l5632:
 11584                           
 11585                           ;timer.c: 55: T0CON = 0;
 11586  004DD4  0E00               	movlw	0
 11587  004DD6  6ED5               	movwf	4053,c	;volatile
 11588                           
 11589                           ;timer.c: 56: T0CON |= 1<<3;
 11590  004DD8  86D5               	bsf	4053,3,c	;volatile
 11591                           
 11592                           ;timer.c: 58: TMR0IE = 1;
 11593  004DDA  8AF2               	bsf	intcon,5,c	;volatile
 11594                           
 11595                           ;timer.c: 59: break;
 11596  004DDC  D01E               	goto	l394
 11597  004DDE                     l5638:
 11598                           
 11599                           ;timer.c: 61: T1CON = 0;
 11600  004DDE  0E00               	movlw	0
 11601  004DE0  6ECD               	movwf	4045,c	;volatile
 11602                           
 11603                           ;timer.c: 63: T1CON |= 0b11<<4;
 11604  004DE2  0E30               	movlw	48
 11605  004DE4  12CD               	iorwf	4045,f,c	;volatile
 11606                           
 11607                           ;timer.c: 64: TMR1IE = 1;
 11608  004DE6  809D               	bsf	3997,0,c	;volatile
 11609                           
 11610                           ;timer.c: 65: break;
 11611  004DE8  D018               	goto	l394
 11612  004DEA                     l5644:
 11613                           
 11614                           ;timer.c: 67: T3CON = 0;
 11615  004DEA  0E00               	movlw	0
 11616  004DEC  6EB1               	movwf	4017,c	;volatile
 11617                           
 11618                           ;timer.c: 68: TMR3IE = 1;
 11619  004DEE  82A0               	bsf	4000,1,c	;volatile
 11620                           
 11621                           ;timer.c: 70: }
 11622                           
 11623                           ;timer.c: 69: break;
 11624  004DF0  D014               	goto	l394
 11625  004DF2                     l5650:
 11626  004DF2  C080  F082         	movff	initTimer@timer,??_initTimer
 11627  004DF6  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
 11628                           
 11629                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11630                           ; Switch size 1, requested type "space"
 11631                           ; Number of cases is 1, Range of values is 0 to 0
 11632                           ; switch strategies available:
 11633                           ; Name         Instructions Cycles
 11634                           ; simple_byte            4     3 (average)
 11635                           ;	Chosen strategy is simple_byte
 11636  004DFA  0100               	movlb	0	; () banked
 11637  004DFC  5183               	movf	(??_initTimer+1)& (0+255),w,b
 11638  004DFE  0A00               	xorlw	0	; case 0
 11639  004E00  A4D8               	btfss	status,2,c
 11640  004E02  D00B               	goto	l394
 11641                           
 11642                           ; BSR set to: 0
 11643                           ; Switch size 1, requested type "space"
 11644                           ; Number of cases is 3, Range of values is 0 to 3
 11645                           ; switch strategies available:
 11646                           ; Name         Instructions Cycles
 11647                           ; simple_byte           10     6 (average)
 11648                           ;	Chosen strategy is simple_byte
 11649  004E04  0100               	movlb	0	; () banked
 11650  004E06  5182               	movf	??_initTimer& (0+255),w,b
 11651  004E08  0A00               	xorlw	0	; case 0
 11652  004E0A  B4D8               	btfsc	status,2,c
 11653  004E0C  D7E3               	goto	l5632
 11654  004E0E  0A01               	xorlw	1	; case 1
 11655  004E10  B4D8               	btfsc	status,2,c
 11656  004E12  D7E5               	goto	l5638
 11657  004E14  0A02               	xorlw	2	; case 3
 11658  004E16  B4D8               	btfsc	status,2,c
 11659  004E18  D7E8               	goto	l5644
 11660  004E1A                     l394:
 11661                           
 11662                           ;timer.c: 71: PEIE = 1;
 11663  004E1A  8CF2               	bsf	intcon,6,c	;volatile
 11664                           
 11665                           ;timer.c: 72: (INTCONbits.GIE = 1);
 11666  004E1C  8EF2               	bsf	intcon,7,c	;volatile
 11667  004E1E  0012               	return		;funcret
 11668  004E20                     __end_of_initTimer:
 11669                           	opt stack 0
 11670                           tblptru	equ	0xFF8
 11671                           tblptrh	equ	0xFF7
 11672                           tblptrl	equ	0xFF6
 11673                           tablat	equ	0xFF5
 11674                           prodh	equ	0xFF4
 11675                           prodl	equ	0xFF3
 11676                           intcon	equ	0xFF2
 11677                           postinc0	equ	0xFEE
 11678                           wreg	equ	0xFE8
 11679                           postdec1	equ	0xFE5
 11680                           fsr1l	equ	0xFE1
 11681                           indf2	equ	0xFDF
 11682                           postinc2	equ	0xFDE
 11683                           postdec2	equ	0xFDD
 11684                           fsr2h	equ	0xFDA
 11685                           fsr2l	equ	0xFD9
 11686                           status	equ	0xFD8
 11687                           
 11688 ;; *************** function _initLCD *****************
 11689 ;; Defined at:
 11690 ;;		line 15 in file "lcd.c"
 11691 ;; Parameters:    Size  Location     Type
 11692 ;;		None
 11693 ;; Auto vars:     Size  Location     Type
 11694 ;;		None
 11695 ;; Return value:  Size  Location     Type
 11696 ;;                  1    wreg      void 
 11697 ;; Registers used:
 11698 ;;		wreg, status,2, status,0, cstack
 11699 ;; Tracked objects:
 11700 ;;		On entry : 0/0
 11701 ;;		On exit  : 0/0
 11702 ;;		Unchanged: 0/0
 11703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11707 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;Total ram usage:        1 bytes
 11709 ;; Hardware stack levels used:    1
 11710 ;; Hardware stack levels required when called:    8
 11711 ;; This function calls:
 11712 ;;		_lcdInst
 11713 ;; This function is called by:
 11714 ;;		_main
 11715 ;; This function uses a non-reentrant model
 11716 ;;
 11717                           
 11718                           	psect	text39
 11719  004EB8                     __ptext39:
 11720                           	opt stack 0
 11721  004EB8                     _initLCD:
 11722                           	opt stack 22
 11723                           
 11724                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 11725                           
 11726                           ;incstack = 0
 11727  004EB8  0E31               	movlw	49
 11728  004EBA  0100               	movlb	0	; () banked
 11729  004EBC  6F84               	movwf	??_initLCD& (0+255),b
 11730  004EBE  0EB2               	movlw	178
 11731  004EC0                     u7817:
 11732  004EC0  2EE8               	decfsz	wreg,f,c
 11733  004EC2  D7FE               	bra	u7817
 11734  004EC4  2F84               	decfsz	??_initLCD& (0+255),f,b
 11735  004EC6  D7FC               	bra	u7817
 11736  004EC8  F000               	nop	
 11737                           
 11738                           ;lcd.c: 18: lcdInst(0b00110011);
 11739  004ECA  0E33               	movlw	51
 11740  004ECC  EC9A  F028         	call	_lcdInst
 11741                           
 11742                           ;lcd.c: 19: lcdInst(0b00110010);
 11743  004ED0  0E32               	movlw	50
 11744  004ED2  EC9A  F028         	call	_lcdInst
 11745                           
 11746                           ;lcd.c: 20: lcdInst(0b00101000);
 11747  004ED6  0E28               	movlw	40
 11748  004ED8  EC9A  F028         	call	_lcdInst
 11749                           
 11750                           ;lcd.c: 21: lcdInst(0b00001111);
 11751  004EDC  0E0F               	movlw	15
 11752  004EDE  EC9A  F028         	call	_lcdInst
 11753                           
 11754                           ;lcd.c: 22: lcdInst(0b00000110);
 11755  004EE2  0E06               	movlw	6
 11756  004EE4  EC9A  F028         	call	_lcdInst
 11757                           
 11758                           ;lcd.c: 23: lcdInst(0b00000001);
 11759  004EE8  0E01               	movlw	1
 11760  004EEA  EC9A  F028         	call	_lcdInst
 11761                           
 11762                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 11763  004EEE  0E31               	movlw	49
 11764  004EF0  0100               	movlb	0	; () banked
 11765  004EF2  6F84               	movwf	??_initLCD& (0+255),b
 11766  004EF4  0EB2               	movlw	178
 11767  004EF6                     u7827:
 11768  004EF6  2EE8               	decfsz	wreg,f,c
 11769  004EF8  D7FE               	bra	u7827
 11770  004EFA  2F84               	decfsz	??_initLCD& (0+255),f,b
 11771  004EFC  D7FC               	bra	u7827
 11772  004EFE  F000               	nop	
 11773  004F00  0012               	return		;funcret
 11774  004F02                     __end_of_initLCD:
 11775                           	opt stack 0
 11776                           tblptru	equ	0xFF8
 11777                           tblptrh	equ	0xFF7
 11778                           tblptrl	equ	0xFF6
 11779                           tablat	equ	0xFF5
 11780                           prodh	equ	0xFF4
 11781                           prodl	equ	0xFF3
 11782                           intcon	equ	0xFF2
 11783                           postinc0	equ	0xFEE
 11784                           wreg	equ	0xFE8
 11785                           postdec1	equ	0xFE5
 11786                           fsr1l	equ	0xFE1
 11787                           indf2	equ	0xFDF
 11788                           postinc2	equ	0xFDE
 11789                           postdec2	equ	0xFDD
 11790                           fsr2h	equ	0xFDA
 11791                           fsr2l	equ	0xFD9
 11792                           status	equ	0xFD8
 11793                           
 11794 ;; *************** function _lcdInst *****************
 11795 ;; Defined at:
 11796 ;;		line 27 in file "lcd.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;  data            1    wreg     unsigned char 
 11799 ;; Auto vars:     Size  Location     Type
 11800 ;;  data            1    3[BANK0 ] unsigned char 
 11801 ;; Return value:  Size  Location     Type
 11802 ;;                  1    wreg      void 
 11803 ;; Registers used:
 11804 ;;		wreg, status,2, status,0, cstack
 11805 ;; Tracked objects:
 11806 ;;		On entry : 0/0
 11807 ;;		On exit  : 0/0
 11808 ;;		Unchanged: 0/0
 11809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11814 ;;Total ram usage:        2 bytes
 11815 ;; Hardware stack levels used:    1
 11816 ;; Hardware stack levels required when called:    7
 11817 ;; This function calls:
 11818 ;;		_lcdNibble
 11819 ;; This function is called by:
 11820 ;;		_initLCD
 11821 ;;		_lcdHome
 11822 ;;		_lcdClear
 11823 ;;		_lcdNewline
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           	psect	text40
 11828  005134                     __ptext40:
 11829                           	opt stack 0
 11830  005134                     _lcdInst:
 11831                           	opt stack 19
 11832                           
 11833                           ;incstack = 0
 11834                           ;lcdInst@data stored from wreg
 11835  005134  0100               	movlb	0	; () banked
 11836  005136  6F83               	movwf	lcdInst@data& (0+255),b
 11837                           
 11838                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 11839  005138  948C               	bcf	3980,2,c	;volatile
 11840                           
 11841                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 11842  00513A  0E74               	movlw	116
 11843  00513C                     u7837:
 11844  00513C  2EE8               	decfsz	wreg,f,c
 11845  00513E  D7FE               	bra	u7837
 11846  005140  D000               	nop2	
 11847                           
 11848                           ;lcd.c: 30: lcdNibble(data);
 11849  005142  0100               	movlb	0	; () banked
 11850  005144  5183               	movf	lcdInst@data& (0+255),w,b
 11851  005146  ECB9  F025         	call	_lcdNibble
 11852                           
 11853                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 11854  00514A  0E04               	movlw	4
 11855  00514C  0100               	movlb	0	; () banked
 11856  00514E  6F82               	movwf	??_lcdInst& (0+255),b
 11857  005150  0E3D               	movlw	61
 11858  005152                     u7847:
 11859  005152  2EE8               	decfsz	wreg,f,c
 11860  005154  D7FE               	bra	u7847
 11861  005156  2F82               	decfsz	??_lcdInst& (0+255),f,b
 11862  005158  D7FC               	bra	u7847
 11863  00515A  D000               	nop2	
 11864  00515C  0012               	return		;funcret
 11865  00515E                     __end_of_lcdInst:
 11866                           	opt stack 0
 11867                           tblptru	equ	0xFF8
 11868                           tblptrh	equ	0xFF7
 11869                           tblptrl	equ	0xFF6
 11870                           tablat	equ	0xFF5
 11871                           prodh	equ	0xFF4
 11872                           prodl	equ	0xFF3
 11873                           intcon	equ	0xFF2
 11874                           postinc0	equ	0xFEE
 11875                           wreg	equ	0xFE8
 11876                           postdec1	equ	0xFE5
 11877                           fsr1l	equ	0xFE1
 11878                           indf2	equ	0xFDF
 11879                           postinc2	equ	0xFDE
 11880                           postdec2	equ	0xFDD
 11881                           fsr2h	equ	0xFDA
 11882                           fsr2l	equ	0xFD9
 11883                           status	equ	0xFD8
 11884                           
 11885 ;; *************** function _lcdNibble *****************
 11886 ;; Defined at:
 11887 ;;		line 46 in file "lcd.c"
 11888 ;; Parameters:    Size  Location     Type
 11889 ;;  data            1    wreg     unsigned char 
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;  data            1    1[BANK0 ] unsigned char 
 11892 ;;  temp            1    0[BANK0 ] unsigned char 
 11893 ;; Return value:  Size  Location     Type
 11894 ;;                  1    wreg      void 
 11895 ;; Registers used:
 11896 ;;		wreg, status,2, status,0
 11897 ;; Tracked objects:
 11898 ;;		On entry : 0/0
 11899 ;;		On exit  : 0/0
 11900 ;;		Unchanged: 0/0
 11901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11903 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11906 ;;Total ram usage:        2 bytes
 11907 ;; Hardware stack levels used:    1
 11908 ;; Hardware stack levels required when called:    6
 11909 ;; This function calls:
 11910 ;;		Nothing
 11911 ;; This function is called by:
 11912 ;;		_lcdInst
 11913 ;;		_putch
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           	psect	text41
 11918  004B72                     __ptext41:
 11919                           	opt stack 0
 11920  004B72                     _lcdNibble:
 11921                           	opt stack 21
 11922                           
 11923                           ;incstack = 0
 11924                           ;lcdNibble@data stored from wreg
 11925  004B72  0100               	movlb	0	; () banked
 11926  004B74  6F81               	movwf	lcdNibble@data& (0+255),b
 11927                           
 11928                           ;lcd.c: 48: char temp = data & 0xF0;
 11929  004B76  0100               	movlb	0	; () banked
 11930  004B78  5181               	movf	lcdNibble@data& (0+255),w,b
 11931  004B7A  0BF0               	andlw	240
 11932  004B7C  0100               	movlb	0	; () banked
 11933  004B7E  6F80               	movwf	lcdNibble@temp& (0+255),b
 11934                           
 11935                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11936  004B80  508C               	movf	3980,w,c	;volatile
 11937  004B82  0B0F               	andlw	15
 11938  004B84  6E8C               	movwf	3980,c	;volatile
 11939                           
 11940                           ;lcd.c: 50: LATD = temp | LATD;
 11941  004B86  0100               	movlb	0	; () banked
 11942  004B88  5180               	movf	lcdNibble@temp& (0+255),w,b
 11943  004B8A  108C               	iorwf	3980,w,c	;volatile
 11944  004B8C  6E8C               	movwf	3980,c	;volatile
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11948  004B8E  968C               	bcf	3980,3,c	;volatile
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11952  004B90  0ED6               	movlw	214
 11953  004B92                     u7857:
 11954  004B92  D000               	nop2	
 11955  004B94  D000               	nop2	
 11956  004B96  2EE8               	decfsz	wreg,f,c
 11957  004B98  D7FC               	bra	u7857
 11958  004B9A  D000               	nop2	
 11959                           
 11960                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11961  004B9C  868C               	bsf	3980,3,c	;volatile
 11962                           
 11963                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11964  004B9E  0ED6               	movlw	214
 11965  004BA0                     u7867:
 11966  004BA0  D000               	nop2	
 11967  004BA2  D000               	nop2	
 11968  004BA4  2EE8               	decfsz	wreg,f,c
 11969  004BA6  D7FC               	bra	u7867
 11970  004BA8  D000               	nop2	
 11971                           
 11972                           ;lcd.c: 58: data = data << 4;
 11973  004BAA  0100               	movlb	0	; () banked
 11974  004BAC  3981               	swapf	lcdNibble@data& (0+255),w,b
 11975  004BAE  0BF0               	andlw	240
 11976  004BB0  0100               	movlb	0	; () banked
 11977  004BB2  6F81               	movwf	lcdNibble@data& (0+255),b
 11978                           
 11979                           ;lcd.c: 60: temp = data & 0xF0;
 11980  004BB4  0100               	movlb	0	; () banked
 11981  004BB6  5181               	movf	lcdNibble@data& (0+255),w,b
 11982  004BB8  0BF0               	andlw	240
 11983  004BBA  0100               	movlb	0	; () banked
 11984  004BBC  6F80               	movwf	lcdNibble@temp& (0+255),b
 11985                           
 11986                           ;lcd.c: 61: LATD = LATD & 0x0F;
 11987  004BBE  508C               	movf	3980,w,c	;volatile
 11988  004BC0  0B0F               	andlw	15
 11989  004BC2  6E8C               	movwf	3980,c	;volatile
 11990                           
 11991                           ;lcd.c: 62: LATD = temp | LATD;
 11992  004BC4  0100               	movlb	0	; () banked
 11993  004BC6  5180               	movf	lcdNibble@temp& (0+255),w,b
 11994  004BC8  108C               	iorwf	3980,w,c	;volatile
 11995  004BCA  6E8C               	movwf	3980,c	;volatile
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 11999  004BCC  968C               	bcf	3980,3,c	;volatile
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12003  004BCE  0ED6               	movlw	214
 12004  004BD0                     u7877:
 12005  004BD0  D000               	nop2	
 12006  004BD2  D000               	nop2	
 12007  004BD4  2EE8               	decfsz	wreg,f,c
 12008  004BD6  D7FC               	bra	u7877
 12009  004BD8  D000               	nop2	
 12010                           
 12011                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12012  004BDA  868C               	bsf	3980,3,c	;volatile
 12013                           
 12014                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12015  004BDC  0ED6               	movlw	214
 12016  004BDE                     u7887:
 12017  004BDE  D000               	nop2	
 12018  004BE0  D000               	nop2	
 12019  004BE2  2EE8               	decfsz	wreg,f,c
 12020  004BE4  D7FC               	bra	u7887
 12021  004BE6  D000               	nop2	
 12022  004BE8  0012               	return		;funcret
 12023  004BEA                     __end_of_lcdNibble:
 12024                           	opt stack 0
 12025                           tblptru	equ	0xFF8
 12026                           tblptrh	equ	0xFF7
 12027                           tblptrl	equ	0xFF6
 12028                           tablat	equ	0xFF5
 12029                           prodh	equ	0xFF4
 12030                           prodl	equ	0xFF3
 12031                           intcon	equ	0xFF2
 12032                           postinc0	equ	0xFEE
 12033                           wreg	equ	0xFE8
 12034                           postdec1	equ	0xFE5
 12035                           fsr1l	equ	0xFE1
 12036                           indf2	equ	0xFDF
 12037                           postinc2	equ	0xFDE
 12038                           postdec2	equ	0xFDD
 12039                           fsr2h	equ	0xFDA
 12040                           fsr2l	equ	0xFD9
 12041                           status	equ	0xFD8
 12042                           
 12043 ;; *************** function ___almod *****************
 12044 ;; Defined at:
 12045 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12046 ;; Parameters:    Size  Location     Type
 12047 ;;  dividend        4   14[BANK0 ] long 
 12048 ;;  divisor         4   18[BANK0 ] long 
 12049 ;; Auto vars:     Size  Location     Type
 12050 ;;  sign            1   23[BANK0 ] unsigned char 
 12051 ;;  counter         1   22[BANK0 ] unsigned char 
 12052 ;; Return value:  Size  Location     Type
 12053 ;;                  4   14[BANK0 ] long 
 12054 ;; Registers used:
 12055 ;;		wreg, status,2, status,0
 12056 ;; Tracked objects:
 12057 ;;		On entry : 0/0
 12058 ;;		On exit  : 0/0
 12059 ;;		Unchanged: 0/0
 12060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12061 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12062 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;Total ram usage:       10 bytes
 12066 ;; Hardware stack levels used:    1
 12067 ;; Hardware stack levels required when called:    6
 12068 ;; This function calls:
 12069 ;;		Nothing
 12070 ;; This function is called by:
 12071 ;;		_main
 12072 ;; This function uses a non-reentrant model
 12073 ;;
 12074                           
 12075                           	psect	text42
 12076  004184                     __ptext42:
 12077                           	opt stack 0
 12078  004184                     ___almod:
 12079                           	opt stack 24
 12080                           
 12081                           ;incstack = 0
 12082  004184  0E00               	movlw	0
 12083  004186  0100               	movlb	0	; () banked
 12084  004188  6F97               	movwf	___almod@sign& (0+255),b
 12085                           
 12086                           ; BSR set to: 0
 12087  00418A  0100               	movlb	0	; () banked
 12088  00418C  AF91               	btfss	(___almod@dividend+3)& (0+255),7,b
 12089  00418E  D00C               	goto	l6312
 12090                           
 12091                           ; BSR set to: 0
 12092  004190  0100               	movlb	0	; () banked
 12093  004192  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 12094  004194  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 12095  004196  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 12096  004198  6D8E               	negf	___almod@dividend& (0+255),b
 12097  00419A  0E00               	movlw	0
 12098  00419C  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12099  00419E  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12100  0041A0  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12101                           
 12102                           ; BSR set to: 0
 12103  0041A2  0E01               	movlw	1
 12104  0041A4  0100               	movlb	0	; () banked
 12105  0041A6  6F97               	movwf	___almod@sign& (0+255),b
 12106  0041A8                     l6312:
 12107                           
 12108                           ; BSR set to: 0
 12109  0041A8  0100               	movlb	0	; () banked
 12110  0041AA  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12111  0041AC  D009               	goto	l6316
 12112                           
 12113                           ; BSR set to: 0
 12114  0041AE  0100               	movlb	0	; () banked
 12115  0041B0  1F95               	comf	(___almod@divisor+3)& (0+255),f,b
 12116  0041B2  1F94               	comf	(___almod@divisor+2)& (0+255),f,b
 12117  0041B4  1F93               	comf	(___almod@divisor+1)& (0+255),f,b
 12118  0041B6  6D92               	negf	___almod@divisor& (0+255),b
 12119  0041B8  0E00               	movlw	0
 12120  0041BA  2393               	addwfc	(___almod@divisor+1)& (0+255),f,b
 12121  0041BC  2394               	addwfc	(___almod@divisor+2)& (0+255),f,b
 12122  0041BE  2395               	addwfc	(___almod@divisor+3)& (0+255),f,b
 12123  0041C0                     l6316:
 12124                           
 12125                           ; BSR set to: 0
 12126  0041C0  0100               	movlb	0	; () banked
 12127  0041C2  5192               	movf	___almod@divisor& (0+255),w,b
 12128  0041C4  0100               	movlb	0	; () banked
 12129  0041C6  1193               	iorwf	(___almod@divisor+1)& (0+255),w,b
 12130  0041C8  0100               	movlb	0	; () banked
 12131  0041CA  1194               	iorwf	(___almod@divisor+2)& (0+255),w,b
 12132  0041CC  0100               	movlb	0	; () banked
 12133  0041CE  1195               	iorwf	(___almod@divisor+3)& (0+255),w,b
 12134  0041D0  B4D8               	btfsc	status,2,c
 12135  0041D2  D03A               	goto	l6332
 12136                           
 12137                           ; BSR set to: 0
 12138  0041D4  0E01               	movlw	1
 12139  0041D6  0100               	movlb	0	; () banked
 12140  0041D8  6F96               	movwf	___almod@counter& (0+255),b
 12141  0041DA  D008               	goto	l6322
 12142  0041DC                     l6320:
 12143                           
 12144                           ; BSR set to: 0
 12145  0041DC  0100               	movlb	0	; () banked
 12146  0041DE  90D8               	bcf	status,0,c
 12147  0041E0  3792               	rlcf	___almod@divisor& (0+255),f,b
 12148  0041E2  3793               	rlcf	(___almod@divisor+1)& (0+255),f,b
 12149  0041E4  3794               	rlcf	(___almod@divisor+2)& (0+255),f,b
 12150  0041E6  3795               	rlcf	(___almod@divisor+3)& (0+255),f,b
 12151  0041E8  0100               	movlb	0	; () banked
 12152  0041EA  2B96               	incf	___almod@counter& (0+255),f,b
 12153  0041EC                     l6322:
 12154                           
 12155                           ; BSR set to: 0
 12156  0041EC  0100               	movlb	0	; () banked
 12157  0041EE  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12158  0041F0  D7F5               	goto	l6320
 12159  0041F2                     l6324:
 12160                           
 12161                           ; BSR set to: 0
 12162  0041F2  0100               	movlb	0	; () banked
 12163  0041F4  5192               	movf	___almod@divisor& (0+255),w,b
 12164  0041F6  0100               	movlb	0	; () banked
 12165  0041F8  5D8E               	subwf	___almod@dividend& (0+255),w,b
 12166  0041FA  0100               	movlb	0	; () banked
 12167  0041FC  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12168  0041FE  0100               	movlb	0	; () banked
 12169  004200  598F               	subwfb	(___almod@dividend+1)& (0+255),w,b
 12170  004202  0100               	movlb	0	; () banked
 12171  004204  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12172  004206  0100               	movlb	0	; () banked
 12173  004208  5990               	subwfb	(___almod@dividend+2)& (0+255),w,b
 12174  00420A  0100               	movlb	0	; () banked
 12175  00420C  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12176  00420E  0100               	movlb	0	; () banked
 12177  004210  5991               	subwfb	(___almod@dividend+3)& (0+255),w,b
 12178  004212  A0D8               	btfss	status,0,c
 12179  004214  D010               	goto	l6328
 12180                           
 12181                           ; BSR set to: 0
 12182  004216  0100               	movlb	0	; () banked
 12183  004218  5192               	movf	___almod@divisor& (0+255),w,b
 12184  00421A  0100               	movlb	0	; () banked
 12185  00421C  5F8E               	subwf	___almod@dividend& (0+255),f,b
 12186  00421E  0100               	movlb	0	; () banked
 12187  004220  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12188  004222  0100               	movlb	0	; () banked
 12189  004224  5B8F               	subwfb	(___almod@dividend+1)& (0+255),f,b
 12190  004226  0100               	movlb	0	; () banked
 12191  004228  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12192  00422A  0100               	movlb	0	; () banked
 12193  00422C  5B90               	subwfb	(___almod@dividend+2)& (0+255),f,b
 12194  00422E  0100               	movlb	0	; () banked
 12195  004230  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12196  004232  0100               	movlb	0	; () banked
 12197  004234  5B91               	subwfb	(___almod@dividend+3)& (0+255),f,b
 12198  004236                     l6328:
 12199                           
 12200                           ; BSR set to: 0
 12201  004236  0100               	movlb	0	; () banked
 12202  004238  90D8               	bcf	status,0,c
 12203  00423A  3395               	rrcf	(___almod@divisor+3)& (0+255),f,b
 12204  00423C  3394               	rrcf	(___almod@divisor+2)& (0+255),f,b
 12205  00423E  3393               	rrcf	(___almod@divisor+1)& (0+255),f,b
 12206  004240  3392               	rrcf	___almod@divisor& (0+255),f,b
 12207                           
 12208                           ; BSR set to: 0
 12209  004242  0100               	movlb	0	; () banked
 12210  004244  2F96               	decfsz	___almod@counter& (0+255),f,b
 12211  004246  D7D5               	goto	l6324
 12212  004248                     l6332:
 12213                           
 12214                           ; BSR set to: 0
 12215  004248  0100               	movlb	0	; () banked
 12216  00424A  5197               	movf	___almod@sign& (0+255),w,b
 12217  00424C  0100               	movlb	0	; () banked
 12218  00424E  B4D8               	btfsc	status,2,c
 12219  004250  D009               	goto	l6336
 12220                           
 12221                           ; BSR set to: 0
 12222  004252  0100               	movlb	0	; () banked
 12223  004254  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 12224  004256  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 12225  004258  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 12226  00425A  6D8E               	negf	___almod@dividend& (0+255),b
 12227  00425C  0E00               	movlw	0
 12228  00425E  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12229  004260  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12230  004262  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12231  004264                     l6336:
 12232                           
 12233                           ; BSR set to: 0
 12234  004264  C08E  F08E         	movff	___almod@dividend,?___almod
 12235  004268  C08F  F08F         	movff	___almod@dividend+1,?___almod+1
 12236  00426C  C090  F090         	movff	___almod@dividend+2,?___almod+2
 12237  004270  C091  F091         	movff	___almod@dividend+3,?___almod+3
 12238  004274  0012               	return	
 12239  004276                     __end_of___almod:
 12240                           	opt stack 0
 12241                           tblptru	equ	0xFF8
 12242                           tblptrh	equ	0xFF7
 12243                           tblptrl	equ	0xFF6
 12244                           tablat	equ	0xFF5
 12245                           prodh	equ	0xFF4
 12246                           prodl	equ	0xFF3
 12247                           intcon	equ	0xFF2
 12248                           postinc0	equ	0xFEE
 12249                           wreg	equ	0xFE8
 12250                           postdec1	equ	0xFE5
 12251                           fsr1l	equ	0xFE1
 12252                           indf2	equ	0xFDF
 12253                           postinc2	equ	0xFDE
 12254                           postdec2	equ	0xFDD
 12255                           fsr2h	equ	0xFDA
 12256                           fsr2l	equ	0xFD9
 12257                           status	equ	0xFD8
 12258                           
 12259 ;; *************** function ___aldiv *****************
 12260 ;; Defined at:
 12261 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;  dividend        4    0[BANK0 ] long 
 12264 ;;  divisor         4    4[BANK0 ] long 
 12265 ;; Auto vars:     Size  Location     Type
 12266 ;;  quotient        4   10[BANK0 ] long 
 12267 ;;  sign            1    9[BANK0 ] unsigned char 
 12268 ;;  counter         1    8[BANK0 ] unsigned char 
 12269 ;; Return value:  Size  Location     Type
 12270 ;;                  4    0[BANK0 ] long 
 12271 ;; Registers used:
 12272 ;;		wreg, status,2, status,0
 12273 ;; Tracked objects:
 12274 ;;		On entry : 0/0
 12275 ;;		On exit  : 0/0
 12276 ;;		Unchanged: 0/0
 12277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12278 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12279 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12281 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12282 ;;Total ram usage:       14 bytes
 12283 ;; Hardware stack levels used:    1
 12284 ;; Hardware stack levels required when called:    6
 12285 ;; This function calls:
 12286 ;;		Nothing
 12287 ;; This function is called by:
 12288 ;;		_main
 12289 ;; This function uses a non-reentrant model
 12290 ;;
 12291                           
 12292                           	psect	text43
 12293  003B78                     __ptext43:
 12294                           	opt stack 0
 12295  003B78                     ___aldiv:
 12296                           	opt stack 24
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;incstack = 0
 12300  003B78  0E00               	movlw	0
 12301  003B7A  0100               	movlb	0	; () banked
 12302  003B7C  6F89               	movwf	___aldiv@sign& (0+255),b
 12303                           
 12304                           ; BSR set to: 0
 12305  003B7E  0100               	movlb	0	; () banked
 12306  003B80  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12307  003B82  D00C               	goto	l6268
 12308                           
 12309                           ; BSR set to: 0
 12310  003B84  0100               	movlb	0	; () banked
 12311  003B86  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
 12312  003B88  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
 12313  003B8A  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
 12314  003B8C  6D84               	negf	___aldiv@divisor& (0+255),b
 12315  003B8E  0E00               	movlw	0
 12316  003B90  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 12317  003B92  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 12318  003B94  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 12319                           
 12320                           ; BSR set to: 0
 12321  003B96  0E01               	movlw	1
 12322  003B98  0100               	movlb	0	; () banked
 12323  003B9A  6F89               	movwf	___aldiv@sign& (0+255),b
 12324  003B9C                     l6268:
 12325                           
 12326                           ; BSR set to: 0
 12327  003B9C  0100               	movlb	0	; () banked
 12328  003B9E  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 12329  003BA0  D00C               	goto	l6274
 12330                           
 12331                           ; BSR set to: 0
 12332  003BA2  0100               	movlb	0	; () banked
 12333  003BA4  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
 12334  003BA6  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
 12335  003BA8  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
 12336  003BAA  6D80               	negf	___aldiv@dividend& (0+255),b
 12337  003BAC  0E00               	movlw	0
 12338  003BAE  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 12339  003BB0  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 12340  003BB2  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 12341                           
 12342                           ; BSR set to: 0
 12343  003BB4  0E01               	movlw	1
 12344  003BB6  0100               	movlb	0	; () banked
 12345  003BB8  1B89               	xorwf	___aldiv@sign& (0+255),f,b
 12346  003BBA                     l6274:
 12347                           
 12348                           ; BSR set to: 0
 12349  003BBA  0E00               	movlw	0
 12350  003BBC  0100               	movlb	0	; () banked
 12351  003BBE  6F8A               	movwf	___aldiv@quotient& (0+255),b
 12352  003BC0  0E00               	movlw	0
 12353  003BC2  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
 12354  003BC4  0E00               	movlw	0
 12355  003BC6  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
 12356  003BC8  0E00               	movlw	0
 12357  003BCA  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
 12358                           
 12359                           ; BSR set to: 0
 12360  003BCC  0100               	movlb	0	; () banked
 12361  003BCE  5184               	movf	___aldiv@divisor& (0+255),w,b
 12362  003BD0  0100               	movlb	0	; () banked
 12363  003BD2  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 12364  003BD4  0100               	movlb	0	; () banked
 12365  003BD6  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 12366  003BD8  0100               	movlb	0	; () banked
 12367  003BDA  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 12368  003BDC  B4D8               	btfsc	status,2,c
 12369  003BDE  D042               	goto	l6296
 12370                           
 12371                           ; BSR set to: 0
 12372  003BE0  0E01               	movlw	1
 12373  003BE2  0100               	movlb	0	; () banked
 12374  003BE4  6F88               	movwf	___aldiv@counter& (0+255),b
 12375  003BE6  D008               	goto	l6282
 12376  003BE8                     l6280:
 12377                           
 12378                           ; BSR set to: 0
 12379  003BE8  0100               	movlb	0	; () banked
 12380  003BEA  90D8               	bcf	status,0,c
 12381  003BEC  3784               	rlcf	___aldiv@divisor& (0+255),f,b
 12382  003BEE  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 12383  003BF0  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 12384  003BF2  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 12385  003BF4  0100               	movlb	0	; () banked
 12386  003BF6  2B88               	incf	___aldiv@counter& (0+255),f,b
 12387  003BF8                     l6282:
 12388                           
 12389                           ; BSR set to: 0
 12390  003BF8  0100               	movlb	0	; () banked
 12391  003BFA  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12392  003BFC  D7F5               	goto	l6280
 12393  003BFE                     l6284:
 12394                           
 12395                           ; BSR set to: 0
 12396  003BFE  0100               	movlb	0	; () banked
 12397  003C00  90D8               	bcf	status,0,c
 12398  003C02  378A               	rlcf	___aldiv@quotient& (0+255),f,b
 12399  003C04  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 12400  003C06  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 12401  003C08  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 12402                           
 12403                           ; BSR set to: 0
 12404  003C0A  0100               	movlb	0	; () banked
 12405  003C0C  5184               	movf	___aldiv@divisor& (0+255),w,b
 12406  003C0E  0100               	movlb	0	; () banked
 12407  003C10  5D80               	subwf	___aldiv@dividend& (0+255),w,b
 12408  003C12  0100               	movlb	0	; () banked
 12409  003C14  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12410  003C16  0100               	movlb	0	; () banked
 12411  003C18  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 12412  003C1A  0100               	movlb	0	; () banked
 12413  003C1C  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12414  003C1E  0100               	movlb	0	; () banked
 12415  003C20  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 12416  003C22  0100               	movlb	0	; () banked
 12417  003C24  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12418  003C26  0100               	movlb	0	; () banked
 12419  003C28  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 12420  003C2A  A0D8               	btfss	status,0,c
 12421  003C2C  D012               	goto	l6292
 12422                           
 12423                           ; BSR set to: 0
 12424  003C2E  0100               	movlb	0	; () banked
 12425  003C30  5184               	movf	___aldiv@divisor& (0+255),w,b
 12426  003C32  0100               	movlb	0	; () banked
 12427  003C34  5F80               	subwf	___aldiv@dividend& (0+255),f,b
 12428  003C36  0100               	movlb	0	; () banked
 12429  003C38  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12430  003C3A  0100               	movlb	0	; () banked
 12431  003C3C  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 12432  003C3E  0100               	movlb	0	; () banked
 12433  003C40  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12434  003C42  0100               	movlb	0	; () banked
 12435  003C44  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 12436  003C46  0100               	movlb	0	; () banked
 12437  003C48  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12438  003C4A  0100               	movlb	0	; () banked
 12439  003C4C  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 12440                           
 12441                           ; BSR set to: 0
 12442  003C4E  0100               	movlb	0	; () banked
 12443  003C50  818A               	bsf	___aldiv@quotient& (0+255),0,b
 12444  003C52                     l6292:
 12445                           
 12446                           ; BSR set to: 0
 12447  003C52  0100               	movlb	0	; () banked
 12448  003C54  90D8               	bcf	status,0,c
 12449  003C56  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 12450  003C58  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 12451  003C5A  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 12452  003C5C  3384               	rrcf	___aldiv@divisor& (0+255),f,b
 12453                           
 12454                           ; BSR set to: 0
 12455  003C5E  0100               	movlb	0	; () banked
 12456  003C60  2F88               	decfsz	___aldiv@counter& (0+255),f,b
 12457  003C62  D7CD               	goto	l6284
 12458  003C64                     l6296:
 12459                           
 12460                           ; BSR set to: 0
 12461  003C64  0100               	movlb	0	; () banked
 12462  003C66  5189               	movf	___aldiv@sign& (0+255),w,b
 12463  003C68  0100               	movlb	0	; () banked
 12464  003C6A  B4D8               	btfsc	status,2,c
 12465  003C6C  D009               	goto	l6300
 12466                           
 12467                           ; BSR set to: 0
 12468  003C6E  0100               	movlb	0	; () banked
 12469  003C70  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 12470  003C72  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 12471  003C74  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 12472  003C76  6D8A               	negf	___aldiv@quotient& (0+255),b
 12473  003C78  0E00               	movlw	0
 12474  003C7A  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 12475  003C7C  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 12476  003C7E  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 12477  003C80                     l6300:
 12478                           
 12479                           ; BSR set to: 0
 12480  003C80  C08A  F080         	movff	___aldiv@quotient,?___aldiv
 12481  003C84  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
 12482  003C88  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
 12483  003C8C  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
 12484  003C90  0012               	return	
 12485  003C92                     __end_of___aldiv:
 12486                           	opt stack 0
 12487                           tblptru	equ	0xFF8
 12488                           tblptrh	equ	0xFF7
 12489                           tblptrl	equ	0xFF6
 12490                           tablat	equ	0xFF5
 12491                           prodh	equ	0xFF4
 12492                           prodl	equ	0xFF3
 12493                           intcon	equ	0xFF2
 12494                           postinc0	equ	0xFEE
 12495                           wreg	equ	0xFE8
 12496                           postdec1	equ	0xFE5
 12497                           fsr1l	equ	0xFE1
 12498                           indf2	equ	0xFDF
 12499                           postinc2	equ	0xFDE
 12500                           postdec2	equ	0xFDD
 12501                           fsr2h	equ	0xFDA
 12502                           fsr2l	equ	0xFD9
 12503                           status	equ	0xFD8
 12504                           
 12505 ;; *************** function _service *****************
 12506 ;; Defined at:
 12507 ;;		line 251 in file "main.c"
 12508 ;; Parameters:    Size  Location     Type
 12509 ;;		None
 12510 ;; Auto vars:     Size  Location     Type
 12511 ;;  key             1  121[COMRAM] unsigned char 
 12512 ;; Return value:  Size  Location     Type
 12513 ;;                  1    wreg      void 
 12514 ;; Registers used:
 12515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12523 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12524 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12525 ;;Total ram usage:       19 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:    5
 12528 ;; This function calls:
 12529 ;;		_servoInterruptService
 12530 ;;		i2_lcdClear
 12531 ;;		i2_printf
 12532 ;;		i2_startTimer
 12533 ;; This function is called by:
 12534 ;;		Interrupt level 2
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           	psect	intcode
 12539  000008                     __pintcode:
 12540                           	opt stack 0
 12541  000008                     _service:
 12542                           	opt stack 18
 12543                           
 12544                           ; BSR set to: 0
 12545                           ;incstack = 0
 12546  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12547  00000A  ED5A  F01B         	call	int_func,f	;refresh shadow registers
 12548                           tblptru	equ	0xFF8
 12549                           tblptrh	equ	0xFF7
 12550                           tblptrl	equ	0xFF6
 12551                           tablat	equ	0xFF5
 12552                           prodh	equ	0xFF4
 12553                           prodl	equ	0xFF3
 12554                           intcon	equ	0xFF2
 12555                           postinc0	equ	0xFEE
 12556                           wreg	equ	0xFE8
 12557                           postdec1	equ	0xFE5
 12558                           fsr1l	equ	0xFE1
 12559                           indf2	equ	0xFDF
 12560                           postinc2	equ	0xFDE
 12561                           postdec2	equ	0xFDD
 12562                           fsr2h	equ	0xFDA
 12563                           fsr2l	equ	0xFD9
 12564                           status	equ	0xFD8
 12565                           
 12566                           	psect	intcode_body
 12567  0036B4                     __pintcode_body:
 12568                           	opt stack 18
 12569  0036B4                     int_func:
 12570                           	opt stack 18
 12571  0036B4  0006               	pop		; remove dummy address from shadow register refresh
 12572  0036B6  CFFA F06C          	movff	pclath,??_service+4
 12573  0036BA  CFFB F06D          	movff	pclatu,??_service+5
 12574  0036BE  CFE9 F06E          	movff	fsr0l,??_service+6
 12575  0036C2  CFEA F06F          	movff	fsr0h,??_service+7
 12576  0036C6  CFE1 F070          	movff	fsr1l,??_service+8
 12577  0036CA  CFE2 F071          	movff	fsr1h,??_service+9
 12578  0036CE  CFD9 F072          	movff	fsr2l,??_service+10
 12579  0036D2  CFDA F073          	movff	fsr2h,??_service+11
 12580  0036D6  CFF3 F074          	movff	prodl,??_service+12
 12581  0036DA  CFF4 F075          	movff	prodh,??_service+13
 12582  0036DE  CFF6 F076          	movff	tblptrl,??_service+14
 12583  0036E2  CFF7 F077          	movff	tblptrh,??_service+15
 12584  0036E6  CFF8 F078          	movff	tblptru,??_service+16
 12585  0036EA  CFF5 F079          	movff	tablat,??_service+17
 12586                           
 12587                           ;main.c: 253: servoInterruptService();
 12588  0036EE  EC51  F01F         	call	_servoInterruptService	;wreg free
 12589                           
 12590                           ;main.c: 255: if(TMR1IF){
 12591  0036F2  A09E               	btfss	3998,0,c	;volatile
 12592  0036F4  D024               	goto	i2l6706
 12593                           
 12594                           ;main.c: 256: startTimer(1,0xffff - period);
 12595  0036F6  0E00               	movlw	0
 12596  0036F8  6E08               	movwf	i2startTimer@timer+1,c
 12597  0036FA  0E01               	movlw	1
 12598  0036FC  6E07               	movwf	i2startTimer@timer,c
 12599  0036FE  0EFF               	movlw	255
 12600  003700  6E68               	movwf	??_service& (0+255),c
 12601  003702  0EFF               	movlw	255
 12602  003704  6E69               	movwf	(??_service+1)& (0+255),c
 12603  003706  C13A  F06A         	movff	_period,??_service+2
 12604  00370A  C13B  F06B         	movff	_period+1,??_service+3
 12605  00370E  1E6A               	comf	??_service+2,f,c
 12606  003710  1E6B               	comf	??_service+3,f,c
 12607  003712  4A6A               	infsnz	??_service+2,f,c
 12608  003714  2A6B               	incf	??_service+3,f,c
 12609  003716  5068               	movf	??_service,w,c
 12610  003718  266A               	addwf	??_service+2,f,c
 12611  00371A  5069               	movf	??_service+1,w,c
 12612  00371C  226B               	addwfc	??_service+3,f,c
 12613  00371E  C06A  F009         	movff	??_service+2,i2startTimer@val
 12614  003722  C06B  F00A         	movff	??_service+3,i2startTimer@val+1
 12615  003726  6A0B               	clrf	i2startTimer@val+2,c
 12616  003728  6A0C               	clrf	i2startTimer@val+3,c
 12617  00372A  EC36  F027         	call	i2_startTimer	;wreg free
 12618                           
 12619                           ;main.c: 257: time+=1;
 12620  00372E  0E01               	movlw	1
 12621  003730  0101               	movlb	1	; () banked
 12622  003732  2774               	addwf	_time& (0+255),f,b
 12623  003734  0E00               	movlw	0
 12624  003736  2375               	addwfc	(_time+1)& (0+255),f,b
 12625  003738  2376               	addwfc	(_time+2)& (0+255),f,b
 12626  00373A  2377               	addwfc	(_time+3)& (0+255),f,b
 12627                           
 12628                           ; BSR set to: 1
 12629                           ;main.c: 258: TMR1IF = 0;
 12630  00373C  909E               	bcf	3998,0,c	;volatile
 12631  00373E                     i2l6706:
 12632                           
 12633                           ;main.c: 259: }
 12634                           ;main.c: 262: if(INT0IF){ INT0IF = 0;
 12635  00373E  A2F2               	btfss	intcon,1,c	;volatile
 12636  003740  D006               	goto	i2l6712
 12637  003742  92F2               	bcf	intcon,1,c	;volatile
 12638                           
 12639                           ;main.c: 263: batteryDetected = 1;
 12640  003744  0E00               	movlw	0
 12641  003746  0101               	movlb	1	; () banked
 12642  003748  6F82               	movwf	(_batteryDetected+1)& (0+255),b
 12643  00374A  0E01               	movlw	1
 12644  00374C  6F81               	movwf	_batteryDetected& (0+255),b
 12645  00374E                     i2l6712:
 12646                           
 12647                           ;main.c: 264: }
 12648                           ;main.c: 267: if(INT1IF && INT1IE){INT1IF = 0;
 12649  00374E  B0F0               	btfsc	intcon3,0,c	;volatile
 12650  003750  A6F0               	btfss	intcon3,3,c	;volatile
 12651  003752  D02F               	goto	i2l162
 12652  003754  90F0               	bcf	intcon3,0,c	;volatile
 12653                           
 12654                           ;main.c: 270: char key = (PORTB & 0xF0) >> 4;
 12655  003756  3881               	swapf	3969,w,c	;volatile
 12656  003758  0B0F               	andlw	15
 12657  00375A  0B0F               	andlw	15
 12658  00375C  6E7A               	movwf	service@key,c
 12659                           
 12660                           ;main.c: 271: if(key == 0)time = 0;
 12661  00375E  507A               	movf	service@key,w,c
 12662  003760  A4D8               	btfss	status,2,c
 12663  003762  D00A               	goto	i2l6724
 12664  003764  0E00               	movlw	0
 12665  003766  0101               	movlb	1	; () banked
 12666  003768  6F74               	movwf	_time& (0+255),b
 12667  00376A  0E00               	movlw	0
 12668  00376C  6F75               	movwf	(_time+1)& (0+255),b
 12669  00376E  0E00               	movlw	0
 12670  003770  6F76               	movwf	(_time+2)& (0+255),b
 12671  003772  0E00               	movlw	0
 12672  003774  6F77               	movwf	(_time+3)& (0+255),b
 12673  003776  D011               	goto	i2l6732
 12674  003778                     i2l6724:
 12675                           
 12676                           ;main.c: 272: else if(key == 1)period+=100;
 12677  003778  047A               	decf	service@key,w,c
 12678  00377A  A4D8               	btfss	status,2,c
 12679  00377C  D005               	goto	i2l6728
 12680  00377E  0E64               	movlw	100
 12681  003780  0101               	movlb	1	; () banked
 12682  003782  273A               	addwf	_period& (0+255),f,b
 12683  003784  0E00               	movlw	0
 12684  003786  D008               	goto	L7
 12685  003788                     i2l6728:
 12686                           
 12687                           ;main.c: 273: else if(key == 2)period-=100;
 12688  003788  0E02               	movlw	2
 12689  00378A  187A               	xorwf	service@key,w,c
 12690  00378C  A4D8               	btfss	status,2,c
 12691  00378E  D005               	goto	i2l6732
 12692  003790  0101               	movlb	1	; () banked
 12693  003792  0E9C               	movlw	156
 12694  003794  273A               	addwf	_period& (0+255),f,b
 12695  003796  0EFF               	movlw	255
 12696  003798                     L7:
 12697  003798  233B               	addwfc	(_period+1)& (0+255),f,b
 12698  00379A                     i2l6732:
 12699                           
 12700                           ;main.c: 274: lcdClear();
 12701  00379A  EC34  F029         	call	i2_lcdClear	;wreg free
 12702                           
 12703                           ;main.c: 275: printf("period %ld",period);
 12704  00379E  0EE4               	movlw	low STR_10
 12705  0037A0  6E40               	movwf	i2printf@f,c
 12706  0037A2  0EFF               	movlw	high STR_10
 12707  0037A4  6E41               	movwf	i2printf@f+1,c
 12708  0037A6  C13A  F042         	movff	_period,?i2_printf+2
 12709  0037AA  C13B  F043         	movff	_period+1,?i2_printf+3
 12710  0037AE  EC65  F006         	call	i2_printf	;wreg free
 12711  0037B2                     i2l162:
 12712  0037B2  C079  FFF5         	movff	??_service+17,tablat
 12713  0037B6  C078  FFF8         	movff	??_service+16,tblptru
 12714  0037BA  C077  FFF7         	movff	??_service+15,tblptrh
 12715  0037BE  C076  FFF6         	movff	??_service+14,tblptrl
 12716  0037C2  C075  FFF4         	movff	??_service+13,prodh
 12717  0037C6  C074  FFF3         	movff	??_service+12,prodl
 12718  0037CA  C073  FFDA         	movff	??_service+11,fsr2h
 12719  0037CE  C072  FFD9         	movff	??_service+10,fsr2l
 12720  0037D2  C071  FFE2         	movff	??_service+9,fsr1h
 12721  0037D6  C070  FFE1         	movff	??_service+8,fsr1l
 12722  0037DA  C06F  FFEA         	movff	??_service+7,fsr0h
 12723  0037DE  C06E  FFE9         	movff	??_service+6,fsr0l
 12724  0037E2  C06D  FFFB         	movff	??_service+5,pclatu
 12725  0037E6  C06C  FFFA         	movff	??_service+4,pclath
 12726  0037EA  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12727  0037EC  0011               	retfie		f
 12728  0037EE                     __end_of_service:
 12729                           	opt stack 0
 12730                           pclatu	equ	0xFFB
 12731                           pclath	equ	0xFFA
 12732                           tblptru	equ	0xFF8
 12733                           tblptrh	equ	0xFF7
 12734                           tblptrl	equ	0xFF6
 12735                           tablat	equ	0xFF5
 12736                           prodh	equ	0xFF4
 12737                           prodl	equ	0xFF3
 12738                           intcon	equ	0xFF2
 12739                           intcon3	equ	0xFF0
 12740                           postinc0	equ	0xFEE
 12741                           fsr0h	equ	0xFEA
 12742                           fsr0l	equ	0xFE9
 12743                           wreg	equ	0xFE8
 12744                           postdec1	equ	0xFE5
 12745                           fsr1h	equ	0xFE2
 12746                           fsr1l	equ	0xFE1
 12747                           indf2	equ	0xFDF
 12748                           postinc2	equ	0xFDE
 12749                           postdec2	equ	0xFDD
 12750                           fsr2h	equ	0xFDA
 12751                           fsr2l	equ	0xFD9
 12752                           status	equ	0xFD8
 12753                           
 12754 ;; *************** function i2_printf *****************
 12755 ;; Defined at:
 12756 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12757 ;; Parameters:    Size  Location     Type
 12758 ;;  f               2   63[COMRAM] PTR const unsigned char 
 12759 ;;		 -> STR_23(17), STR_22(18), STR_21(17), STR_20(18), 
 12760 ;;		 -> STR_19(17), STR_18(19), STR_17(17), STR_16(18), 
 12761 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
 12762 ;;		 -> STR_11(8), STR_10(11), STR_9(25), STR_8(15), 
 12763 ;;		 -> STR_7(17), STR_6(20), STR_5(15), STR_4(14), 
 12764 ;;		 -> STR_3(20), STR_2(17), STR_1(8), 
 12765 ;; Auto vars:     Size  Location     Type
 12766 ;;  printf          4   91[COMRAM] unsigned long 
 12767 ;;  printf          4   85[COMRAM] struct .
 12768 ;;  printf          3   95[COMRAM] struct .
 12769 ;;  printf          2  100[COMRAM] unsigned short 
 12770 ;;  printf          2   98[COMRAM] int 
 12771 ;;  printf          2   89[COMRAM] int 
 12772 ;;  printf          2   83[COMRAM] int 
 12773 ;;  printf          2   81[COMRAM] PTR void [1]
 12774 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12775 ;;  printf          2   79[COMRAM] unsigned int 
 12776 ;;  printf          2   77[COMRAM] PTR const unsigned char 
 12777 ;;		 -> printf@c(1), 
 12778 ;;  printf          1  102[COMRAM] char 
 12779 ;;  printf          1   76[COMRAM] unsigned char 
 12780 ;;  printf          1    0        unsigned char 
 12781 ;; Return value:  Size  Location     Type
 12782 ;;                  2   63[COMRAM] int 
 12783 ;; Registers used:
 12784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12785 ;; Tracked objects:
 12786 ;;		On entry : 0/0
 12787 ;;		On exit  : 0/0
 12788 ;;		Unchanged: 0/0
 12789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12790 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12791 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12792 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12793 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12794 ;;Total ram usage:       40 bytes
 12795 ;; Hardware stack levels used:    1
 12796 ;; Hardware stack levels required when called:    4
 12797 ;; This function calls:
 12798 ;;		i2___awdiv
 12799 ;;		i2___ftadd
 12800 ;;		i2___ftge
 12801 ;;		i2___ftmul
 12802 ;;		i2___ftneg
 12803 ;;		i2___ftsub
 12804 ;;		i2___fttol
 12805 ;;		i2___lldiv
 12806 ;;		i2___llmod
 12807 ;;		i2___lltoft
 12808 ;;		i2___wmul
 12809 ;;		i2__div_to_l_
 12810 ;;		i2__tdiv_to_l_
 12811 ;;		i2_fround
 12812 ;;		i2_isdigit
 12813 ;;		i2_putch
 12814 ;;		i2_scale
 12815 ;; This function is called by:
 12816 ;;		_service
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           	psect	text45
 12821  000CCA                     __ptext45:
 12822                           	opt stack 0
 12823  000CCA                     i2_printf:
 12824                           	opt stack 18
 12825                           
 12826                           ;doprnt.c: 466: va_list ap;
 12827                           ;doprnt.c: 499: signed char c;
 12828                           ;doprnt.c: 501: int width;
 12829                           ;doprnt.c: 504: int prec;
 12830                           ;doprnt.c: 508: unsigned short flag;
 12831                           ;doprnt.c: 515: char d;
 12832                           ;doprnt.c: 516: double fval;
 12833                           ;doprnt.c: 517: int exp;
 12834                           ;doprnt.c: 523: union {
 12835                           ;doprnt.c: 524: unsigned long vd;
 12836                           ;doprnt.c: 525: double integ;
 12837                           ;doprnt.c: 526: } tmpval;
 12838                           ;doprnt.c: 528: unsigned long val;
 12839                           ;doprnt.c: 529: unsigned len;
 12840                           ;doprnt.c: 530: const char * cp;
 12841                           ;doprnt.c: 533: *ap = __va_start();
 12842                           
 12843                           ;incstack = 0
 12844  000CCA  0E42               	movlw	low (?i2_printf+2)
 12845  000CCC  6E52               	movwf	i2printf@ap,c
 12846  000CCE  0E00               	movlw	high (?i2_printf+2)
 12847  000CD0  6E53               	movwf	i2printf@ap+1,c
 12848                           
 12849                           ;doprnt.c: 536: while(c = *f++) {
 12850  000CD2  EF9B  F00B         	goto	i2l6666
 12851  000CD6                     i2l6344:
 12852                           
 12853                           ;doprnt.c: 538: if(c != '%')
 12854  000CD6  0E25               	movlw	37
 12855  000CD8  1867               	xorwf	i2printf@c,w,c
 12856  000CDA  B4D8               	btfsc	status,2,c
 12857  000CDC  D005               	goto	i2l6348
 12858                           
 12859                           ;doprnt.c: 540: {
 12860                           ;doprnt.c: 541: (putch(c) );
 12861  000CDE  5067               	movf	i2printf@c,w,c
 12862  000CE0  ECE8  F028         	call	i2_putch
 12863                           
 12864                           ;doprnt.c: 542: continue;
 12865  000CE4  EF9B  F00B         	goto	i2l6666
 12866  000CE8                     i2l6348:
 12867                           
 12868                           ;doprnt.c: 543: }
 12869                           ;doprnt.c: 546: width = 0;
 12870  000CE8  0E00               	movlw	0
 12871  000CEA  6E64               	movwf	i2printf@width+1,c
 12872  000CEC  0E00               	movlw	0
 12873  000CEE  6E63               	movwf	i2printf@width,c
 12874                           
 12875                           ;doprnt.c: 548: flag = 0;
 12876  000CF0  0E00               	movlw	0
 12877  000CF2  6E66               	movwf	i2printf@flag+1,c
 12878  000CF4  0E00               	movlw	0
 12879  000CF6  6E65               	movwf	i2printf@flag,c
 12880                           
 12881                           ;doprnt.c: 551: switch(*f) {
 12882                           
 12883                           ;doprnt.c: 550: for(;;) {
 12884  000CF8  D003               	goto	i2l6354
 12885  000CFA                     i2l6350:
 12886                           
 12887                           ;doprnt.c: 580: flag |= 0x04;
 12888  000CFA  8465               	bsf	i2printf@flag,2,c
 12889                           
 12890                           ;doprnt.c: 581: f++;
 12891  000CFC  4A40               	infsnz	i2printf@f,f,c
 12892  000CFE  2A41               	incf	i2printf@f+1,f,c
 12893  000D00                     i2l6354:
 12894  000D00  C040  FFF6         	movff	i2printf@f,tblptrl
 12895  000D04  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12896  000D08                     	if	0	;tblptru may be non-zero
 12897  000D08                     	endif
 12898  000D08                     	if	0	;tblptru may be non-zero
 12899  000D08                     	endif
 12900  000D08  0008               	tblrd		*
 12901  000D0A  50F5               	movf	tablat,w,c
 12902                           
 12903                           ; Switch size 1, requested type "space"
 12904                           ; Number of cases is 1, Range of values is 48 to 48
 12905                           ; switch strategies available:
 12906                           ; Name         Instructions Cycles
 12907                           ; simple_byte            4     3 (average)
 12908                           ;	Chosen strategy is simple_byte
 12909  000D0C  0A30               	xorlw	48	; case 48
 12910  000D0E  B4D8               	btfsc	status,2,c
 12911  000D10  D7F4               	goto	i2l6350
 12912                           
 12913                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12914                           
 12915                           ;doprnt.c: 586: }
 12916                           
 12917                           ;doprnt.c: 585: break;
 12918  000D12  C040  FFF6         	movff	i2printf@f,tblptrl
 12919  000D16  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12920  000D1A                     	if	0	;tblptru may be non-zero
 12921  000D1A                     	endif
 12922  000D1A                     	if	0	;tblptru may be non-zero
 12923  000D1A                     	endif
 12924  000D1A  0008               	tblrd		*
 12925  000D1C  50F5               	movf	tablat,w,c
 12926  000D1E  EC0A  F029         	call	i2_isdigit
 12927  000D22  A0D8               	btfss	status,0,c
 12928  000D24  D07B               	goto	i2l6400
 12929                           
 12930                           ;doprnt.c: 598: width = 0;
 12931  000D26  0E00               	movlw	0
 12932  000D28  6E64               	movwf	i2printf@width+1,c
 12933  000D2A  0E00               	movlw	0
 12934  000D2C  6E63               	movwf	i2printf@width,c
 12935  000D2E                     i2l6360:
 12936                           
 12937                           ;doprnt.c: 600: width *= 10;
 12938  000D2E  C063  F00F         	movff	i2printf@width,i2___wmul@multiplier
 12939  000D32  C064  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12940  000D36  0E00               	movlw	0
 12941  000D38  6E12               	movwf	i2___wmul@multiplicand+1,c
 12942  000D3A  0E0A               	movlw	10
 12943  000D3C  6E11               	movwf	i2___wmul@multiplicand,c
 12944  000D3E  ECC3  F028         	call	i2___wmul	;wreg free
 12945  000D42  C00F  F063         	movff	?i2___wmul,i2printf@width
 12946  000D46  C010  F064         	movff	?i2___wmul+1,i2printf@width+1
 12947                           
 12948                           ;doprnt.c: 601: width += *f++ - '0';
 12949  000D4A  0ED0               	movlw	208
 12950  000D4C  6E44               	movwf	??i2_printf& (0+255),c
 12951  000D4E  0EFF               	movlw	255
 12952  000D50  6E45               	movwf	(??i2_printf+1)& (0+255),c
 12953  000D52  C040  FFF6         	movff	i2printf@f,tblptrl
 12954  000D56  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12955  000D5A                     	if	0	;tblptru may be non-zero
 12956  000D5A                     	endif
 12957  000D5A                     	if	0	;tblptru may be non-zero
 12958  000D5A                     	endif
 12959  000D5A  0008               	tblrd		*
 12960  000D5C  50F5               	movf	tablat,w,c
 12961  000D5E  6E46               	movwf	(??i2_printf+2)& (0+255),c
 12962  000D60  6A47               	clrf	(??i2_printf+3)& (0+255),c
 12963  000D62  5044               	movf	??i2_printf,w,c
 12964  000D64  2646               	addwf	??i2_printf+2,f,c
 12965  000D66  5045               	movf	??i2_printf+1,w,c
 12966  000D68  2247               	addwfc	??i2_printf+3,f,c
 12967  000D6A  5046               	movf	??i2_printf+2,w,c
 12968  000D6C  2663               	addwf	i2printf@width,f,c
 12969  000D6E  5047               	movf	??i2_printf+3,w,c
 12970  000D70  2264               	addwfc	i2printf@width+1,f,c
 12971  000D72  4A40               	infsnz	i2printf@f,f,c
 12972  000D74  2A41               	incf	i2printf@f+1,f,c
 12973                           
 12974                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12975  000D76  C040  FFF6         	movff	i2printf@f,tblptrl
 12976  000D7A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12977  000D7E                     	if	0	;tblptru may be non-zero
 12978  000D7E                     	endif
 12979  000D7E                     	if	0	;tblptru may be non-zero
 12980  000D7E                     	endif
 12981  000D7E  0008               	tblrd		*
 12982  000D80  50F5               	movf	tablat,w,c
 12983  000D82  EC0A  F029         	call	i2_isdigit
 12984  000D86  A0D8               	btfss	status,0,c
 12985  000D88  D049               	goto	i2l6400
 12986  000D8A  D7D1               	goto	i2l6360
 12987  000D8C                     i2l6368:
 12988                           
 12989                           ;doprnt.c: 643: flag |= 0x10;
 12990  000D8C  8865               	bsf	i2printf@flag,4,c
 12991                           
 12992                           ;doprnt.c: 644: goto loop;
 12993  000D8E  D046               	goto	i2l6400
 12994  000D90                     i2l6370:
 12995                           
 12996                           ;doprnt.c: 663: flag |= 0x400;
 12997  000D90  8466               	bsf	i2printf@flag+1,2,c
 12998                           
 12999                           ;doprnt.c: 698: case 'i':
 13000                           ;doprnt.c: 699: break;
 13001                           
 13002                           ;doprnt.c: 697: case 'd':
 13003                           
 13004                           ;doprnt.c: 664: break;
 13005  000D92  D064               	goto	i2l6402
 13006  000D94                     i2l6372:
 13007                           
 13008                           ;doprnt.c: 721: flag |= 0x80;
 13009  000D94  8E65               	bsf	i2printf@flag,7,c
 13010                           
 13011                           ;doprnt.c: 723: break;
 13012  000D96  D062               	goto	i2l6402
 13013  000D98                     i2l6374:
 13014                           
 13015                           ;doprnt.c: 757: if(width > len)
 13016  000D98  5063               	movf	i2printf@width,w,c
 13017  000D9A  5C50               	subwf	i2printf@len,w,c
 13018  000D9C  5064               	movf	i2printf@width+1,w,c
 13019  000D9E  5851               	subwfb	i2printf@len+1,w,c
 13020  000DA0  B0D8               	btfsc	status,0,c
 13021  000DA2  D005               	goto	i2l6378
 13022                           
 13023                           ;doprnt.c: 758: width -= len;
 13024  000DA4  5050               	movf	i2printf@len,w,c
 13025  000DA6  5E63               	subwf	i2printf@width,f,c
 13026  000DA8  5051               	movf	i2printf@len+1,w,c
 13027  000DAA  5A64               	subwfb	i2printf@width+1,f,c
 13028  000DAC  D008               	goto	i2l6382
 13029  000DAE                     i2l6378:
 13030                           
 13031                           ;doprnt.c: 759: else
 13032                           ;doprnt.c: 760: width = 0;
 13033  000DAE  0E00               	movlw	0
 13034  000DB0  6E64               	movwf	i2printf@width+1,c
 13035  000DB2  0E00               	movlw	0
 13036  000DB4  6E63               	movwf	i2printf@width,c
 13037                           
 13038                           ;doprnt.c: 764: while(width--)
 13039  000DB6  D003               	goto	i2l6382
 13040  000DB8                     i2l6380:
 13041                           
 13042                           ;doprnt.c: 765: (putch(' ') );
 13043  000DB8  0E20               	movlw	32
 13044  000DBA  ECE8  F028         	call	i2_putch
 13045  000DBE                     i2l6382:
 13046  000DBE  0663               	decf	i2printf@width,f,c
 13047  000DC0  A0D8               	btfss	status,0,c
 13048  000DC2  0664               	decf	i2printf@width+1,f,c
 13049  000DC4  2863               	incf	i2printf@width,w,c
 13050  000DC6  E1F8               	bnz	i2l6380
 13051  000DC8  2864               	incf	i2printf@width+1,w,c
 13052  000DCA  B4D8               	btfsc	status,2,c
 13053  000DCC  D00A               	goto	i2l6388
 13054  000DCE  D7F4               	goto	i2l6380
 13055  000DD0                     i2l6384:
 13056                           
 13057                           ;doprnt.c: 768: (putch(*cp++) );
 13058  000DD0  C04E  FFD9         	movff	i2printf@cp,fsr2l
 13059  000DD4  C04F  FFDA         	movff	i2printf@cp+1,fsr2h
 13060  000DD8  50DF               	movf	indf2,w,c
 13061  000DDA  ECE8  F028         	call	i2_putch
 13062  000DDE  4A4E               	infsnz	i2printf@cp,f,c
 13063  000DE0  2A4F               	incf	i2printf@cp+1,f,c
 13064  000DE2                     i2l6388:
 13065  000DE2  0650               	decf	i2printf@len,f,c
 13066  000DE4  A0D8               	btfss	status,0,c
 13067  000DE6  0651               	decf	i2printf@len+1,f,c
 13068  000DE8  2850               	incf	i2printf@len,w,c
 13069  000DEA  E1F2               	bnz	i2l6384
 13070  000DEC  2851               	incf	i2printf@len+1,w,c
 13071  000DEE  B4D8               	btfsc	status,2,c
 13072  000DF0  EF9B  F00B         	goto	i2l6666
 13073  000DF4  D7ED               	goto	i2l6384
 13074  000DF6                     i2l6390:
 13075                           
 13076                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 13077  000DF6  C052  FFD9         	movff	i2printf@ap,fsr2l
 13078  000DFA  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13079  000DFE  50DF               	movf	indf2,w,c
 13080  000E00  6E67               	movwf	i2printf@c,c
 13081  000E02  0E02               	movlw	2
 13082  000E04  2652               	addwf	i2printf@ap,f,c
 13083  000E06  0E00               	movlw	0
 13084  000E08  2253               	addwfc	i2printf@ap+1,f,c
 13085  000E0A                     i2l6394:
 13086                           
 13087                           ;doprnt.c: 805: cp = (char *)&c;
 13088  000E0A  0E67               	movlw	low i2printf@c
 13089  000E0C  6E4E               	movwf	i2printf@cp,c
 13090  000E0E  0E00               	movlw	high i2printf@c
 13091  000E10  6E4F               	movwf	i2printf@cp+1,c
 13092                           
 13093                           ;doprnt.c: 806: len = 1;
 13094  000E12  0E00               	movlw	0
 13095  000E14  6E51               	movwf	i2printf@len+1,c
 13096  000E16  0E01               	movlw	1
 13097  000E18  6E50               	movwf	i2printf@len,c
 13098                           
 13099                           ;doprnt.c: 807: goto dostring;
 13100  000E1A  D7BE               	goto	i2l6374
 13101  000E1C                     i2l6400:
 13102  000E1C  C040  FFF6         	movff	i2printf@f,tblptrl
 13103  000E20  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13104  000E24  4A40               	infsnz	i2printf@f,f,c
 13105  000E26  2A41               	incf	i2printf@f+1,f,c
 13106  000E28                     	if	0	;tblptru may be non-zero
 13107  000E28                     	endif
 13108  000E28                     	if	0	;tblptru may be non-zero
 13109  000E28                     	endif
 13110  000E28  0008               	tblrd		*
 13111  000E2A  CFF5 F067          	movff	tablat,i2printf@c
 13112  000E2E  5067               	movf	i2printf@c,w,c
 13113                           
 13114                           ; Switch size 1, requested type "space"
 13115                           ; Number of cases is 7, Range of values is 0 to 120
 13116                           ; switch strategies available:
 13117                           ; Name         Instructions Cycles
 13118                           ; simple_byte           22    12 (average)
 13119                           ;	Chosen strategy is simple_byte
 13120  000E30  0A00               	xorlw	0	; case 0
 13121  000E32  B4D8               	btfsc	status,2,c
 13122  000E34  0012               	return	
 13123  000E36  0A63               	xorlw	99	; case 99
 13124  000E38  B4D8               	btfsc	status,2,c
 13125  000E3A  D7DD               	goto	i2l6390
 13126  000E3C  0A07               	xorlw	7	; case 100
 13127  000E3E  B4D8               	btfsc	status,2,c
 13128  000E40  D00D               	goto	i2l6402
 13129  000E42  0A02               	xorlw	2	; case 102
 13130  000E44  B4D8               	btfsc	status,2,c
 13131  000E46  D7A4               	goto	i2l6370
 13132  000E48  0A0F               	xorlw	15	; case 105
 13133  000E4A  B4D8               	btfsc	status,2,c
 13134  000E4C  D007               	goto	i2l6402
 13135  000E4E  0A05               	xorlw	5	; case 108
 13136  000E50  B4D8               	btfsc	status,2,c
 13137  000E52  D79C               	goto	i2l6368
 13138  000E54  0A14               	xorlw	20	; case 120
 13139  000E56  B4D8               	btfsc	status,2,c
 13140  000E58  D79D               	goto	i2l6372
 13141  000E5A  D7D7               	goto	i2l6394
 13142  000E5C                     i2l6402:
 13143                           
 13144                           ;doprnt.c: 825: if(flag & (0x700)) {
 13145  000E5C  0E07               	movlw	7
 13146  000E5E  1466               	andwf	i2printf@flag+1,w,c
 13147  000E60  B4D8               	btfsc	status,2,c
 13148  000E62  D2EC               	goto	i2l695
 13149                           
 13150                           ;doprnt.c: 829: prec = 6;
 13151  000E64  0E00               	movlw	0
 13152  000E66  6E55               	movwf	i2printf@prec+1,c
 13153  000E68  0E06               	movlw	6
 13154  000E6A  6E54               	movwf	i2printf@prec,c
 13155                           
 13156                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13157  000E6C  C052  FFD9         	movff	i2printf@ap,fsr2l
 13158  000E70  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13159  000E74  CFDE F060          	movff	postinc2,i2printf@fval
 13160  000E78  CFDE F061          	movff	postinc2,i2printf@fval+1
 13161  000E7C  CFDD F062          	movff	postdec2,i2printf@fval+2
 13162  000E80  0E03               	movlw	3
 13163  000E82  2652               	addwf	i2printf@ap,f,c
 13164  000E84  0E00               	movlw	0
 13165  000E86  2253               	addwfc	i2printf@ap+1,f,c
 13166                           
 13167                           ;doprnt.c: 831: if(fval < 0.0) {
 13168  000E88  AE62               	btfss	i2printf@fval+2,7,c
 13169  000E8A  D010               	goto	i2l6416
 13170                           
 13171                           ;doprnt.c: 832: fval = -fval;
 13172  000E8C  C060  F001         	movff	i2printf@fval,i2___ftneg@f1
 13173  000E90  C061  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 13174  000E94  C062  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 13175  000E98  ECD6  F028         	call	i2___ftneg	;wreg free
 13176  000E9C  C001  F060         	movff	?i2___ftneg,i2printf@fval
 13177  000EA0  C002  F061         	movff	?i2___ftneg+1,i2printf@fval+1
 13178  000EA4  C003  F062         	movff	?i2___ftneg+2,i2printf@fval+2
 13179                           
 13180                           ;doprnt.c: 833: flag |= 0x03;
 13181  000EA8  0E03               	movlw	3
 13182  000EAA  1265               	iorwf	i2printf@flag,f,c
 13183  000EAC                     i2l6416:
 13184                           
 13185                           ;doprnt.c: 834: }
 13186                           ;doprnt.c: 835: exp = 0;
 13187  000EAC  0E00               	movlw	0
 13188  000EAE  6E5B               	movwf	i2printf@exp+1,c
 13189  000EB0  0E00               	movlw	0
 13190  000EB2  6E5A               	movwf	i2printf@exp,c
 13191                           
 13192                           ;doprnt.c: 836: if( fval!=0) {
 13193  000EB4  5060               	movf	i2printf@fval,w,c
 13194  000EB6  1061               	iorwf	i2printf@fval+1,w,c
 13195  000EB8  1062               	iorwf	i2printf@fval+2,w,c
 13196  000EBA  B4D8               	btfsc	status,2,c
 13197  000EBC  D083               	goto	i2l6444
 13198                           
 13199                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13200  000EBE  0E82               	movlw	130
 13201  000EC0  6E44               	movwf	??i2_printf& (0+255),c
 13202  000EC2  0EFF               	movlw	255
 13203  000EC4  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13204  000EC6  C060  F046         	movff	i2printf@fval,??i2_printf+2
 13205  000ECA  C061  F047         	movff	i2printf@fval+1,??i2_printf+3
 13206  000ECE  C062  F048         	movff	i2printf@fval+2,??i2_printf+4
 13207  000ED2  C063  F049         	movff	i2printf@fval+3,??i2_printf+5
 13208  000ED6  0E10               	movlw	16
 13209  000ED8  D005               	goto	i2u700_40
 13210  000EDA                     i2u700_45:
 13211  000EDA  90D8               	bcf	status,0,c
 13212  000EDC  3249               	rrcf	??i2_printf+5,f,c
 13213  000EDE  3248               	rrcf	??i2_printf+4,f,c
 13214  000EE0  3247               	rrcf	??i2_printf+3,f,c
 13215  000EE2  3246               	rrcf	??i2_printf+2,f,c
 13216  000EE4                     i2u700_40:
 13217  000EE4  2EE8               	decfsz	wreg,f,c
 13218  000EE6  D7F9               	goto	i2u700_45
 13219  000EE8  5046               	movf	??i2_printf+2,w,c
 13220  000EEA  2444               	addwf	??i2_printf,w,c
 13221  000EEC  6E5A               	movwf	i2printf@exp,c
 13222  000EEE  0E00               	movlw	0
 13223  000EF0  2045               	addwfc	??i2_printf+1,w,c
 13224  000EF2  6E5B               	movwf	i2printf@exp+1,c
 13225                           
 13226                           ;doprnt.c: 838: exp--;
 13227  000EF4  065A               	decf	i2printf@exp,f,c
 13228  000EF6  A0D8               	btfss	status,0,c
 13229  000EF8  065B               	decf	i2printf@exp+1,f,c
 13230                           
 13231                           ;doprnt.c: 839: exp *= 3;
 13232  000EFA  C05A  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 13233  000EFE  C05B  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 13234  000F02  0E00               	movlw	0
 13235  000F04  6E12               	movwf	i2___wmul@multiplicand+1,c
 13236  000F06  0E03               	movlw	3
 13237  000F08  6E11               	movwf	i2___wmul@multiplicand,c
 13238  000F0A  ECC3  F028         	call	i2___wmul	;wreg free
 13239  000F0E  C00F  F05A         	movff	?i2___wmul,i2printf@exp
 13240  000F12  C010  F05B         	movff	?i2___wmul+1,i2printf@exp+1
 13241                           
 13242                           ;doprnt.c: 840: exp /= 10;
 13243  000F16  C05A  F007         	movff	i2printf@exp,i2___awdiv@dividend
 13244  000F1A  C05B  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 13245  000F1E  0E00               	movlw	0
 13246  000F20  6E0A               	movwf	i2___awdiv@divisor+1,c
 13247  000F22  0E0A               	movlw	10
 13248  000F24  6E09               	movwf	i2___awdiv@divisor,c
 13249  000F26  ECF8  F024         	call	i2___awdiv	;wreg free
 13250  000F2A  C007  F05A         	movff	?i2___awdiv,i2printf@exp
 13251  000F2E  C008  F05B         	movff	?i2___awdiv+1,i2printf@exp+1
 13252                           
 13253                           ;doprnt.c: 841: if(exp < 0)
 13254  000F32  AE5B               	btfss	i2printf@exp+1,7,c
 13255  000F34  D003               	goto	i2l6432
 13256                           
 13257                           ;doprnt.c: 842: exp--;
 13258  000F36  065A               	decf	i2printf@exp,f,c
 13259  000F38  A0D8               	btfss	status,0,c
 13260  000F3A  065B               	decf	i2printf@exp+1,f,c
 13261  000F3C                     i2l6432:
 13262                           
 13263                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13264  000F3C  505A               	movf	i2printf@exp,w,c
 13265  000F3E  0800               	sublw	0
 13266  000F40  EC00  F00E         	call	i2_scale
 13267  000F44  C024  F056         	movff	?i2_scale,i2printf@tmpval
 13268  000F48  C025  F057         	movff	?i2_scale+1,i2printf@tmpval+1
 13269  000F4C  C026  F058         	movff	?i2_scale+2,i2printf@tmpval+2
 13270                           
 13271                           ;doprnt.c: 847: tmpval.integ *= fval;
 13272  000F50  C056  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 13273  000F54  C057  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 13274  000F58  C058  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 13275  000F5C  C060  F018         	movff	i2printf@fval,i2___ftmul@f2
 13276  000F60  C061  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13277  000F64  C062  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13278  000F68  ECCE  F01F         	call	i2___ftmul	;wreg free
 13279  000F6C  C015  F056         	movff	?i2___ftmul,i2printf@tmpval
 13280  000F70  C016  F057         	movff	?i2___ftmul+1,i2printf@tmpval+1
 13281  000F74  C017  F058         	movff	?i2___ftmul+2,i2printf@tmpval+2
 13282                           
 13283                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13284  000F78  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13285  000F7C  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13286  000F80  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13287  000F84  0E00               	movlw	0
 13288  000F86  6E04               	movwf	i2___ftge@ff2,c
 13289  000F88  0E80               	movlw	128
 13290  000F8A  6E05               	movwf	i2___ftge@ff2+1,c
 13291  000F8C  0E3F               	movlw	63
 13292  000F8E  6E06               	movwf	i2___ftge@ff2+2,c
 13293  000F90  EC6A  F024         	call	i2___ftge	;wreg free
 13294  000F94  B0D8               	btfsc	status,0,c
 13295  000F96  D004               	goto	i2l6440
 13296                           
 13297                           ;doprnt.c: 849: exp--;
 13298  000F98  065A               	decf	i2printf@exp,f,c
 13299  000F9A  A0D8               	btfss	status,0,c
 13300  000F9C  065B               	decf	i2printf@exp+1,f,c
 13301  000F9E  D012               	goto	i2l6444
 13302  000FA0                     i2l6440:
 13303                           
 13304                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13305  000FA0  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13306  000FA4  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13307  000FA8  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13308  000FAC  0E00               	movlw	0
 13309  000FAE  6E04               	movwf	i2___ftge@ff2,c
 13310  000FB0  0E20               	movlw	32
 13311  000FB2  6E05               	movwf	i2___ftge@ff2+1,c
 13312  000FB4  0E41               	movlw	65
 13313  000FB6  6E06               	movwf	i2___ftge@ff2+2,c
 13314  000FB8  EC6A  F024         	call	i2___ftge	;wreg free
 13315  000FBC  A0D8               	btfss	status,0,c
 13316  000FBE  D002               	goto	i2l6444
 13317                           
 13318                           ;doprnt.c: 851: exp++;
 13319  000FC0  4A5A               	infsnz	i2printf@exp,f,c
 13320  000FC2  2A5B               	incf	i2printf@exp+1,f,c
 13321  000FC4                     i2l6444:
 13322                           
 13323                           ;doprnt.c: 852: }
 13324                           ;doprnt.c: 1112: if(prec <= 12)
 13325  000FC4  BE55               	btfsc	i2printf@prec+1,7,c
 13326  000FC6  D006               	goto	i2l6446
 13327  000FC8  5055               	movf	i2printf@prec+1,w,c
 13328  000FCA  E11B               	bnz	i2l6448
 13329  000FCC  0E0D               	movlw	13
 13330  000FCE  5C54               	subwf	i2printf@prec,w,c
 13331  000FD0  B0D8               	btfsc	status,0,c
 13332  000FD2  D017               	goto	i2l6448
 13333  000FD4                     i2l6446:
 13334                           
 13335                           ;doprnt.c: 1113: fval += fround(prec);
 13336  000FD4  C060  F02E         	movff	i2printf@fval,i2___ftadd@f1
 13337  000FD8  C061  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 13338  000FDC  C062  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 13339  000FE0  5054               	movf	i2printf@prec,w,c
 13340  000FE2  EC50  F014         	call	i2_fround
 13341  000FE6  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 13342  000FEA  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 13343  000FEE  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 13344  000FF2  EC73  F015         	call	i2___ftadd	;wreg free
 13345  000FF6  C02E  F060         	movff	?i2___ftadd,i2printf@fval
 13346  000FFA  C02F  F061         	movff	?i2___ftadd+1,i2printf@fval+1
 13347  000FFE  C030  F062         	movff	?i2___ftadd+2,i2printf@fval+2
 13348  001002                     i2l6448:
 13349                           
 13350                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13351  001002  BE5B               	btfsc	i2printf@exp+1,7,c
 13352  001004  D006               	goto	i2l6450
 13353  001006  505B               	movf	i2printf@exp+1,w,c
 13354  001008  E11E               	bnz	i2l6456
 13355  00100A  0E0A               	movlw	10
 13356  00100C  5C5A               	subwf	i2printf@exp,w,c
 13357  00100E  B0D8               	btfsc	status,0,c
 13358  001010  D01A               	goto	i2l6456
 13359  001012                     i2l6450:
 13360  001012  5060               	movf	i2printf@fval,w,c
 13361  001014  1061               	iorwf	i2printf@fval+1,w,c
 13362  001016  1062               	iorwf	i2printf@fval+2,w,c
 13363  001018  B4D8               	btfsc	status,2,c
 13364  00101A  D051               	goto	i2l6470
 13365  00101C  C060  F02B         	movff	i2printf@fval,i2___fttol@f1
 13366  001020  C061  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 13367  001024  C062  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 13368  001028  EC48  F020         	call	i2___fttol	;wreg free
 13369  00102C  502B               	movf	?i2___fttol,w,c
 13370  00102E  102C               	iorwf	?i2___fttol+1,w,c
 13371  001030  102D               	iorwf	?i2___fttol+2,w,c
 13372  001032  102E               	iorwf	?i2___fttol+3,w,c
 13373  001034  B4D8               	btfsc	status,2,c
 13374  001036  BE5B               	btfsc	i2printf@exp+1,7,c
 13375  001038  D042               	goto	i2l6470
 13376  00103A  505B               	movf	i2printf@exp+1,w,c
 13377  00103C  E104               	bnz	i2l6456
 13378  00103E  0E02               	movlw	2
 13379  001040  5C5A               	subwf	i2printf@exp,w,c
 13380  001042  A0D8               	btfss	status,0,c
 13381  001044  D03C               	goto	i2l6470
 13382  001046                     i2l6456:
 13383                           
 13384                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13385  001046  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13386  00104A  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13387  00104E  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13388  001052  0E70               	movlw	112
 13389  001054  6E04               	movwf	i2___ftge@ff2,c
 13390  001056  0E89               	movlw	137
 13391  001058  6E05               	movwf	i2___ftge@ff2+1,c
 13392  00105A  0E40               	movlw	64
 13393  00105C  6E06               	movwf	i2___ftge@ff2+2,c
 13394  00105E  EC6A  F024         	call	i2___ftge	;wreg free
 13395  001062  B0D8               	btfsc	status,0,c
 13396  001064  D002               	goto	i2l6460
 13397                           
 13398                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13399  001066  0EF7               	movlw	247
 13400  001068  D001               	goto	L8
 13401  00106A                     i2l6460:
 13402                           
 13403                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13404  00106A  0EF8               	movlw	248
 13405  00106C                     L8:
 13406  00106C  265A               	addwf	i2printf@exp,f,c
 13407  00106E  0EFF               	movlw	255
 13408  001070  225B               	addwfc	i2printf@exp+1,f,c
 13409                           
 13410                           ;doprnt.c: 1124: }
 13411                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13412  001072  505A               	movf	i2printf@exp,w,c
 13413  001074  EC00  F00E         	call	i2_scale
 13414  001078  C024  F056         	movff	?i2_scale,i2printf@tmpval
 13415  00107C  C025  F057         	movff	?i2_scale+1,i2printf@tmpval+1
 13416  001080  C026  F058         	movff	?i2_scale+2,i2printf@tmpval+2
 13417                           
 13418                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13419  001084  C060  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 13420  001088  C061  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 13421  00108C  C062  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 13422  001090  C056  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 13423  001094  C057  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 13424  001098  C058  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 13425  00109C  ECF7  F01B         	call	i2__tdiv_to_l_	;wreg free
 13426  0010A0  C001  F05C         	movff	?i2__tdiv_to_l_,i2printf@val
 13427  0010A4  C002  F05D         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 13428  0010A8  C003  F05E         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 13429  0010AC  C004  F05F         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 13430                           
 13431                           ;doprnt.c: 1129: fval = 0.0;
 13432  0010B0  0E00               	movlw	0
 13433  0010B2  6E60               	movwf	i2printf@fval,c
 13434  0010B4  0E00               	movlw	0
 13435  0010B6  6E61               	movwf	i2printf@fval+1,c
 13436  0010B8  0E00               	movlw	0
 13437  0010BA  6E62               	movwf	i2printf@fval+2,c
 13438                           
 13439                           ;doprnt.c: 1130: } else {
 13440  0010BC  D032               	goto	i2l6474
 13441  0010BE                     i2l6470:
 13442                           
 13443                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13444  0010BE  C060  F02B         	movff	i2printf@fval,i2___fttol@f1
 13445  0010C2  C061  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 13446  0010C6  C062  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 13447  0010CA  EC48  F020         	call	i2___fttol	;wreg free
 13448  0010CE  C02B  F05C         	movff	?i2___fttol,i2printf@val
 13449  0010D2  C02C  F05D         	movff	?i2___fttol+1,i2printf@val+1
 13450  0010D6  C02D  F05E         	movff	?i2___fttol+2,i2printf@val+2
 13451  0010DA  C02E  F05F         	movff	?i2___fttol+3,i2printf@val+3
 13452                           
 13453                           ;doprnt.c: 1132: fval -= (double)val;
 13454  0010DE  C060  F03A         	movff	i2printf@fval,i2___ftsub@f1
 13455  0010E2  C061  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 13456  0010E6  C062  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 13457  0010EA  C05C  F009         	movff	i2printf@val,i2___lltoft@c
 13458  0010EE  C05D  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 13459  0010F2  C05E  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 13460  0010F6  C05F  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 13461  0010FA  EC93  F026         	call	i2___lltoft	;wreg free
 13462  0010FE  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 13463  001102  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 13464  001106  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 13465  00110A  ECE7  F027         	call	i2___ftsub	;wreg free
 13466  00110E  C03A  F060         	movff	?i2___ftsub,i2printf@fval
 13467  001112  C03B  F061         	movff	?i2___ftsub+1,i2printf@fval+1
 13468  001116  C03C  F062         	movff	?i2___ftsub+2,i2printf@fval+2
 13469                           
 13470                           ;doprnt.c: 1133: exp = 0;
 13471  00111A  0E00               	movlw	0
 13472  00111C  6E5B               	movwf	i2printf@exp+1,c
 13473  00111E  0E00               	movlw	0
 13474  001120  6E5A               	movwf	i2printf@exp,c
 13475  001122                     i2l6474:
 13476                           
 13477                           ;doprnt.c: 1134: }
 13478                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13479  001122  0E01               	movlw	1
 13480  001124  6E67               	movwf	i2printf@c,c
 13481  001126                     i2l6476:
 13482  001126  0E0A               	movlw	10
 13483  001128  1867               	xorwf	i2printf@c,w,c
 13484  00112A  B4D8               	btfsc	status,2,c
 13485  00112C  D018               	goto	i2l6488
 13486                           
 13487                           ;doprnt.c: 1137: if(val < dpowers[c])
 13488  00112E  5067               	movf	i2printf@c,w,c
 13489  001130  0D04               	mullw	4
 13490  001132  0EC3               	movlw	low _dpowers
 13491  001134  24F3               	addwf	prodl,w,c
 13492  001136  6EF6               	movwf	tblptrl,c
 13493  001138  0EFD               	movlw	high _dpowers
 13494  00113A  20F4               	addwfc	prodh,w,c
 13495  00113C  6EF7               	movwf	tblptrh,c
 13496  00113E                     	if	0	;There are less than 3 active tblptr bytes
 13497  00113E                     	endif
 13498  00113E  0009               	tblrd		*+
 13499  001140  50F5               	movf	tablat,w,c
 13500  001142  5C5C               	subwf	i2printf@val,w,c
 13501  001144  0009               	tblrd		*+
 13502  001146  50F5               	movf	tablat,w,c
 13503  001148  585D               	subwfb	i2printf@val+1,w,c
 13504  00114A  0009               	tblrd		*+
 13505  00114C  50F5               	movf	tablat,w,c
 13506  00114E  585E               	subwfb	i2printf@val+2,w,c
 13507  001150  0009               	tblrd		*+
 13508  001152  50F5               	movf	tablat,w,c
 13509  001154  585F               	subwfb	i2printf@val+3,w,c
 13510  001156  A0D8               	btfss	status,0,c
 13511  001158  D002               	goto	i2l6488
 13512                           
 13513                           ;doprnt.c: 1138: break;
 13514  00115A  2A67               	incf	i2printf@c,f,c
 13515  00115C  D7E4               	goto	i2l6476
 13516  00115E                     i2l6488:
 13517                           
 13518                           ;doprnt.c: 1142: width -= prec + c + exp;
 13519  00115E  C067  F044         	movff	i2printf@c,??i2_printf
 13520  001162  6A45               	clrf	(??i2_printf+1)& (0+255),c
 13521  001164  BE44               	btfsc	??i2_printf& (0+255),7,c
 13522  001166  0645               	decf	(??i2_printf+1)& (0+255),f,c
 13523  001168  5054               	movf	i2printf@prec,w,c
 13524  00116A  2644               	addwf	??i2_printf,f,c
 13525  00116C  5055               	movf	i2printf@prec+1,w,c
 13526  00116E  2245               	addwfc	??i2_printf+1,f,c
 13527  001170  505A               	movf	i2printf@exp,w,c
 13528  001172  2644               	addwf	??i2_printf,f,c
 13529  001174  505B               	movf	i2printf@exp+1,w,c
 13530  001176  2245               	addwfc	??i2_printf+1,f,c
 13531  001178  5044               	movf	??i2_printf,w,c
 13532  00117A  5E63               	subwf	i2printf@width,f,c
 13533  00117C  5045               	movf	??i2_printf+1,w,c
 13534  00117E  5A64               	subwfb	i2printf@width+1,f,c
 13535                           
 13536                           ;doprnt.c: 1143: if(
 13537                           ;doprnt.c: 1147: prec)
 13538  001180  5054               	movf	i2printf@prec,w,c
 13539  001182  1055               	iorwf	i2printf@prec+1,w,c
 13540  001184  B4D8               	btfsc	status,2,c
 13541  001186  D003               	goto	i2l6492
 13542                           
 13543                           ;doprnt.c: 1148: width--;
 13544  001188  0663               	decf	i2printf@width,f,c
 13545  00118A  A0D8               	btfss	status,0,c
 13546  00118C  0664               	decf	i2printf@width+1,f,c
 13547  00118E                     i2l6492:
 13548                           
 13549                           ;doprnt.c: 1149: if(flag & 0x03)
 13550  00118E  0E03               	movlw	3
 13551  001190  1465               	andwf	i2printf@flag,w,c
 13552  001192  6E44               	movwf	??i2_printf& (0+255),c
 13553  001194  0E00               	movlw	0
 13554  001196  1466               	andwf	i2printf@flag+1,w,c
 13555  001198  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13556  00119A  5044               	movf	??i2_printf,w,c
 13557  00119C  1045               	iorwf	??i2_printf+1,w,c
 13558  00119E  B4D8               	btfsc	status,2,c
 13559  0011A0  D003               	goto	i2l6496
 13560                           
 13561                           ;doprnt.c: 1150: width--;
 13562  0011A2  0663               	decf	i2printf@width,f,c
 13563  0011A4  A0D8               	btfss	status,0,c
 13564  0011A6  0664               	decf	i2printf@width+1,f,c
 13565  0011A8                     i2l6496:
 13566                           
 13567                           ;doprnt.c: 1153: if(flag & 0x04) {
 13568  0011A8  A465               	btfss	i2printf@flag,2,c
 13569  0011AA  D022               	goto	i2l6512
 13570                           
 13571                           ;doprnt.c: 1157: if(flag & 0x03)
 13572  0011AC  0E03               	movlw	3
 13573  0011AE  1465               	andwf	i2printf@flag,w,c
 13574  0011B0  6E44               	movwf	??i2_printf& (0+255),c
 13575  0011B2  0E00               	movlw	0
 13576  0011B4  1466               	andwf	i2printf@flag+1,w,c
 13577  0011B6  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13578  0011B8  5044               	movf	??i2_printf,w,c
 13579  0011BA  1045               	iorwf	??i2_printf+1,w,c
 13580  0011BC  B4D8               	btfsc	status,2,c
 13581  0011BE  D00A               	goto	i2l6506
 13582                           
 13583                           ;doprnt.c: 1159: (putch('-') );
 13584  0011C0  0E2D               	movlw	45
 13585  0011C2  ECE8  F028         	call	i2_putch
 13586                           
 13587                           ;doprnt.c: 1168: while(width > 0) {
 13588  0011C6  D006               	goto	i2l6506
 13589  0011C8                     i2l6502:
 13590                           
 13591                           ;doprnt.c: 1169: (putch('0') );
 13592  0011C8  0E30               	movlw	48
 13593  0011CA  ECE8  F028         	call	i2_putch
 13594                           
 13595                           ;doprnt.c: 1170: width--;
 13596  0011CE  0663               	decf	i2printf@width,f,c
 13597  0011D0  A0D8               	btfss	status,0,c
 13598  0011D2  0664               	decf	i2printf@width+1,f,c
 13599  0011D4                     i2l6506:
 13600  0011D4  BE64               	btfsc	i2printf@width+1,7,c
 13601  0011D6  D065               	goto	i2l6524
 13602  0011D8  5064               	movf	i2printf@width+1,w,c
 13603  0011DA  E1F6               	bnz	i2l6502
 13604  0011DC  0463               	decf	i2printf@width,w,c
 13605  0011DE  A0D8               	btfss	status,0,c
 13606  0011E0  D060               	goto	i2l6524
 13607  0011E2  D7F2               	goto	i2l6502
 13608  0011E4                     i2l6508:
 13609                           
 13610                           ;doprnt.c: 1181: (putch(' ') );
 13611  0011E4  0E20               	movlw	32
 13612  0011E6  ECE8  F028         	call	i2_putch
 13613                           
 13614                           ;doprnt.c: 1182: width--;
 13615  0011EA  0663               	decf	i2printf@width,f,c
 13616  0011EC  A0D8               	btfss	status,0,c
 13617  0011EE  0664               	decf	i2printf@width+1,f,c
 13618  0011F0                     i2l6512:
 13619  0011F0  BE64               	btfsc	i2printf@width+1,7,c
 13620  0011F2  D005               	goto	i2l6514
 13621  0011F4  5064               	movf	i2printf@width+1,w,c
 13622  0011F6  E1F6               	bnz	i2l6508
 13623  0011F8  0463               	decf	i2printf@width,w,c
 13624  0011FA  B0D8               	btfsc	status,0,c
 13625  0011FC  D7F3               	goto	i2l6508
 13626  0011FE                     i2l6514:
 13627                           
 13628                           ;doprnt.c: 1183: }
 13629                           ;doprnt.c: 1188: if(flag & 0x03)
 13630  0011FE  0E03               	movlw	3
 13631  001200  1465               	andwf	i2printf@flag,w,c
 13632  001202  6E44               	movwf	??i2_printf& (0+255),c
 13633  001204  0E00               	movlw	0
 13634  001206  1466               	andwf	i2printf@flag+1,w,c
 13635  001208  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13636  00120A  5044               	movf	??i2_printf,w,c
 13637  00120C  1045               	iorwf	??i2_printf+1,w,c
 13638  00120E  B4D8               	btfsc	status,2,c
 13639  001210  D048               	goto	i2l6524
 13640                           
 13641                           ;doprnt.c: 1190: (putch('-') );
 13642  001212  0E2D               	movlw	45
 13643  001214  ECE8  F028         	call	i2_putch
 13644                           
 13645                           ;doprnt.c: 1195: }
 13646                           ;doprnt.c: 1196: while(c--) {
 13647  001218  D044               	goto	i2l6524
 13648  00121A                     i2l6518:
 13649                           
 13650                           ;doprnt.c: 1200: {
 13651                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 13652  00121A  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 13653  00121E  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13654  001222  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13655  001226  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13656  00122A  5067               	movf	i2printf@c,w,c
 13657  00122C  0D04               	mullw	4
 13658  00122E  0EC3               	movlw	low _dpowers
 13659  001230  24F3               	addwf	prodl,w,c
 13660  001232  6EF6               	movwf	tblptrl,c
 13661  001234  0EFD               	movlw	high _dpowers
 13662  001236  20F4               	addwfc	prodh,w,c
 13663  001238  6EF7               	movwf	tblptrh,c
 13664  00123A                     	if	0	;There are less than 3 active tblptr bytes
 13665  00123A                     	endif
 13666  00123A  0009               	tblrd		*+
 13667  00123C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13668  001240  0009               	tblrd		*+
 13669  001242  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13670  001246  0009               	tblrd		*+
 13671  001248  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13672  00124C  000A               	tblrd		*-
 13673  00124E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13674  001252  EC3A  F025         	call	i2___lldiv	;wreg free
 13675  001256  C001  F056         	movff	?i2___lldiv,i2printf@tmpval
 13676  00125A  C002  F057         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13677  00125E  C003  F058         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13678  001262  C004  F059         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13679                           
 13680                           ;doprnt.c: 1202: tmpval.vd %= 10;
 13681  001266  C056  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13682  00126A  C057  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13683  00126E  C058  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13684  001272  C059  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13685  001276  0E0A               	movlw	10
 13686  001278  6E12               	movwf	i2___llmod@divisor,c
 13687  00127A  0E00               	movlw	0
 13688  00127C  6E13               	movwf	i2___llmod@divisor+1,c
 13689  00127E  0E00               	movlw	0
 13690  001280  6E14               	movwf	i2___llmod@divisor+2,c
 13691  001282  0E00               	movlw	0
 13692  001284  6E15               	movwf	i2___llmod@divisor+3,c
 13693  001286  EC2D  F026         	call	i2___llmod	;wreg free
 13694  00128A  C00E  F056         	movff	?i2___llmod,i2printf@tmpval
 13695  00128E  C00F  F057         	movff	?i2___llmod+1,i2printf@tmpval+1
 13696  001292  C010  F058         	movff	?i2___llmod+2,i2printf@tmpval+2
 13697  001296  C011  F059         	movff	?i2___llmod+3,i2printf@tmpval+3
 13698                           
 13699                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 13700  00129A  5056               	movf	i2printf@tmpval,w,c
 13701  00129C  0F30               	addlw	48
 13702  00129E  ECE8  F028         	call	i2_putch
 13703  0012A2                     i2l6524:
 13704  0012A2  0667               	decf	i2printf@c,f,c
 13705  0012A4  2867               	incf	i2printf@c,w,c
 13706  0012A6  B4D8               	btfsc	status,2,c
 13707  0012A8  D007               	goto	i2l6530
 13708  0012AA  D7B7               	goto	i2l6518
 13709  0012AC                     i2l6526:
 13710                           
 13711                           ;doprnt.c: 1208: (putch('0') );
 13712  0012AC  0E30               	movlw	48
 13713  0012AE  ECE8  F028         	call	i2_putch
 13714                           
 13715                           ;doprnt.c: 1209: exp--;
 13716  0012B2  065A               	decf	i2printf@exp,f,c
 13717  0012B4  A0D8               	btfss	status,0,c
 13718  0012B6  065B               	decf	i2printf@exp+1,f,c
 13719  0012B8                     i2l6530:
 13720  0012B8  BE5B               	btfsc	i2printf@exp+1,7,c
 13721  0012BA  D005               	goto	i2l6532
 13722  0012BC  505B               	movf	i2printf@exp+1,w,c
 13723  0012BE  E1F6               	bnz	i2l6526
 13724  0012C0  045A               	decf	i2printf@exp,w,c
 13725  0012C2  B0D8               	btfsc	status,0,c
 13726  0012C4  D7F3               	goto	i2l6526
 13727  0012C6                     i2l6532:
 13728                           
 13729                           ;doprnt.c: 1210: }
 13730                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 13731  0012C6  BE55               	btfsc	i2printf@prec+1,7,c
 13732  0012C8  D009               	goto	i2l734
 13733  0012CA  5055               	movf	i2printf@prec+1,w,c
 13734  0012CC  E104               	bnz	i2u722_40
 13735  0012CE  0E09               	movlw	9
 13736  0012D0  5C54               	subwf	i2printf@prec,w,c
 13737  0012D2  A0D8               	btfss	status,0,c
 13738  0012D4  D003               	goto	i2l734
 13739  0012D6                     i2u722_40:
 13740                           
 13741                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 13742  0012D6  0E08               	movlw	8
 13743  0012D8  6E67               	movwf	i2printf@c,c
 13744  0012DA  D002               	goto	i2l6536
 13745  0012DC                     i2l734:
 13746                           
 13747                           ;doprnt.c: 1213: else
 13748                           ;doprnt.c: 1214: c = prec;
 13749  0012DC  C054  F067         	movff	i2printf@prec,i2printf@c
 13750  0012E0                     i2l6536:
 13751                           
 13752                           ;doprnt.c: 1215: prec -= c;
 13753  0012E0  5067               	movf	i2printf@c,w,c
 13754  0012E2  5E54               	subwf	i2printf@prec,f,c
 13755  0012E4  0E00               	movlw	0
 13756  0012E6  BE67               	btfsc	i2printf@c,7,c
 13757  0012E8  0EFF               	movlw	255
 13758  0012EA  5A55               	subwfb	i2printf@prec+1,f,c
 13759                           
 13760                           ;doprnt.c: 1219: if(c)
 13761  0012EC  5067               	movf	i2printf@c,w,c
 13762  0012EE  B4D8               	btfsc	status,2,c
 13763  0012F0  D003               	goto	i2l6542
 13764                           
 13765                           ;doprnt.c: 1221: (putch('.') );
 13766  0012F2  0E2E               	movlw	46
 13767  0012F4  ECE8  F028         	call	i2_putch
 13768  0012F8                     i2l6542:
 13769                           
 13770                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13771  0012F8  5067               	movf	i2printf@c,w,c
 13772  0012FA  EC00  F00E         	call	i2_scale
 13773  0012FE  C024  F04A         	movff	?i2_scale,i2_printf$1535
 13774  001302  C025  F04B         	movff	?i2_scale+1,i2_printf$1535+1
 13775  001306  C026  F04C         	movff	?i2_scale+2,i2_printf$1535+2
 13776                           
 13777                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13778  00130A  C060  F018         	movff	i2printf@fval,i2___ftmul@f2
 13779  00130E  C061  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13780  001312  C062  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13781  001316  C04A  F015         	movff	i2_printf$1535,i2___ftmul@f1
 13782  00131A  C04B  F016         	movff	i2_printf$1535+1,i2___ftmul@f1+1
 13783  00131E  C04C  F017         	movff	i2_printf$1535+2,i2___ftmul@f1+2
 13784  001322  ECCE  F01F         	call	i2___ftmul	;wreg free
 13785  001326  C015  F02B         	movff	?i2___ftmul,i2___fttol@f1
 13786  00132A  C016  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 13787  00132E  C017  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 13788  001332  EC48  F020         	call	i2___fttol	;wreg free
 13789  001336  C02B  F05C         	movff	?i2___fttol,i2printf@val
 13790  00133A  C02C  F05D         	movff	?i2___fttol+1,i2printf@val+1
 13791  00133E  C02D  F05E         	movff	?i2___fttol+2,i2printf@val+2
 13792  001342  C02E  F05F         	movff	?i2___fttol+3,i2printf@val+3
 13793                           
 13794                           ;doprnt.c: 1228: while(c--) {
 13795  001346  D06A               	goto	i2l6552
 13796  001348                     i2l6546:
 13797                           
 13798                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 13799  001348  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 13800  00134C  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13801  001350  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13802  001354  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13803  001358  5067               	movf	i2printf@c,w,c
 13804  00135A  0D04               	mullw	4
 13805  00135C  0EC3               	movlw	low _dpowers
 13806  00135E  24F3               	addwf	prodl,w,c
 13807  001360  6EF6               	movwf	tblptrl,c
 13808  001362  0EFD               	movlw	high _dpowers
 13809  001364  20F4               	addwfc	prodh,w,c
 13810  001366  6EF7               	movwf	tblptrh,c
 13811  001368                     	if	0	;There are less than 3 active tblptr bytes
 13812  001368                     	endif
 13813  001368  0009               	tblrd		*+
 13814  00136A  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13815  00136E  0009               	tblrd		*+
 13816  001370  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13817  001374  0009               	tblrd		*+
 13818  001376  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13819  00137A  000A               	tblrd		*-
 13820  00137C  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13821  001380  EC3A  F025         	call	i2___lldiv	;wreg free
 13822  001384  C001  F056         	movff	?i2___lldiv,i2printf@tmpval
 13823  001388  C002  F057         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13824  00138C  C003  F058         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13825  001390  C004  F059         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13826                           
 13827                           ;doprnt.c: 1230: tmpval.vd %= 10;
 13828  001394  C056  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13829  001398  C057  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13830  00139C  C058  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13831  0013A0  C059  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13832  0013A4  0E0A               	movlw	10
 13833  0013A6  6E12               	movwf	i2___llmod@divisor,c
 13834  0013A8  0E00               	movlw	0
 13835  0013AA  6E13               	movwf	i2___llmod@divisor+1,c
 13836  0013AC  0E00               	movlw	0
 13837  0013AE  6E14               	movwf	i2___llmod@divisor+2,c
 13838  0013B0  0E00               	movlw	0
 13839  0013B2  6E15               	movwf	i2___llmod@divisor+3,c
 13840  0013B4  EC2D  F026         	call	i2___llmod	;wreg free
 13841  0013B8  C00E  F056         	movff	?i2___llmod,i2printf@tmpval
 13842  0013BC  C00F  F057         	movff	?i2___llmod+1,i2printf@tmpval+1
 13843  0013C0  C010  F058         	movff	?i2___llmod+2,i2printf@tmpval+2
 13844  0013C4  C011  F059         	movff	?i2___llmod+3,i2printf@tmpval+3
 13845                           
 13846                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 13847  0013C8  5056               	movf	i2printf@tmpval,w,c
 13848  0013CA  0F30               	addlw	48
 13849  0013CC  ECE8  F028         	call	i2_putch
 13850                           
 13851                           ;doprnt.c: 1232: val %= dpowers[c];
 13852  0013D0  C05C  F00E         	movff	i2printf@val,i2___llmod@dividend
 13853  0013D4  C05D  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 13854  0013D8  C05E  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 13855  0013DC  C05F  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 13856  0013E0  5067               	movf	i2printf@c,w,c
 13857  0013E2  0D04               	mullw	4
 13858  0013E4  0EC3               	movlw	low _dpowers
 13859  0013E6  24F3               	addwf	prodl,w,c
 13860  0013E8  6EF6               	movwf	tblptrl,c
 13861  0013EA  0EFD               	movlw	high _dpowers
 13862  0013EC  20F4               	addwfc	prodh,w,c
 13863  0013EE  6EF7               	movwf	tblptrh,c
 13864  0013F0                     	if	0	;There are less than 3 active tblptr bytes
 13865  0013F0                     	endif
 13866  0013F0  0009               	tblrd		*+
 13867  0013F2  CFF5 F012          	movff	tablat,i2___llmod@divisor
 13868  0013F6  0009               	tblrd		*+
 13869  0013F8  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 13870  0013FC  0009               	tblrd		*+
 13871  0013FE  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 13872  001402  000A               	tblrd		*-
 13873  001404  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 13874  001408  EC2D  F026         	call	i2___llmod	;wreg free
 13875  00140C  C00E  F05C         	movff	?i2___llmod,i2printf@val
 13876  001410  C00F  F05D         	movff	?i2___llmod+1,i2printf@val+1
 13877  001414  C010  F05E         	movff	?i2___llmod+2,i2printf@val+2
 13878  001418  C011  F05F         	movff	?i2___llmod+3,i2printf@val+3
 13879  00141C                     i2l6552:
 13880  00141C  0667               	decf	i2printf@c,f,c
 13881  00141E  2867               	incf	i2printf@c,w,c
 13882  001420  B4D8               	btfsc	status,2,c
 13883  001422  D007               	goto	i2l6558
 13884  001424  D791               	goto	i2l6546
 13885  001426                     i2l6554:
 13886                           
 13887                           ;doprnt.c: 1236: (putch('0') );
 13888  001426  0E30               	movlw	48
 13889  001428  ECE8  F028         	call	i2_putch
 13890                           
 13891                           ;doprnt.c: 1237: prec--;
 13892  00142C  0654               	decf	i2printf@prec,f,c
 13893  00142E  A0D8               	btfss	status,0,c
 13894  001430  0655               	decf	i2printf@prec+1,f,c
 13895  001432                     i2l6558:
 13896  001432  5054               	movf	i2printf@prec,w,c
 13897  001434  1055               	iorwf	i2printf@prec+1,w,c
 13898  001436  B4D8               	btfsc	status,2,c
 13899  001438  D17E               	goto	i2l6666
 13900  00143A  D7F5               	goto	i2l6554
 13901  00143C                     i2l695:
 13902                           
 13903                           ;doprnt.c: 1246: }
 13904                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13905  00143C  BE65               	btfsc	i2printf@flag,7,c
 13906  00143E  D02E               	goto	i2l743
 13907                           
 13908                           ;doprnt.c: 1253: {
 13909                           ;doprnt.c: 1255: if(flag & 0x10)
 13910  001440  A865               	btfss	i2printf@flag,4,c
 13911  001442  D00E               	goto	i2l6566
 13912                           
 13913                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 13914  001444  C052  FFD9         	movff	i2printf@ap,fsr2l
 13915  001448  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13916  00144C  CFDE F05C          	movff	postinc2,i2printf@val
 13917  001450  CFDE F05D          	movff	postinc2,i2printf@val+1
 13918  001454  CFDE F05E          	movff	postinc2,i2printf@val+2
 13919  001458  CFDE F05F          	movff	postinc2,i2printf@val+3
 13920  00145C  0E04               	movlw	4
 13921  00145E  D00E               	goto	L9
 13922  001460                     i2l6566:
 13923                           
 13924                           ;doprnt.c: 1257: else
 13925                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 13926  001460  C052  FFD9         	movff	i2printf@ap,fsr2l
 13927  001464  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13928  001468  CFDE F05C          	movff	postinc2,i2printf@val
 13929  00146C  CFDD F05D          	movff	postdec2,i2printf@val+1
 13930  001470  0E00               	movlw	0
 13931  001472  BE5D               	btfsc	i2printf@val+1,7,c
 13932  001474  0EFF               	movlw	-1
 13933  001476  6E5E               	movwf	i2printf@val+2,c
 13934  001478  6E5F               	movwf	i2printf@val+3,c
 13935  00147A  0E02               	movlw	2
 13936  00147C                     L9:
 13937  00147C  2652               	addwf	i2printf@ap,f,c
 13938  00147E  0E00               	movlw	0
 13939  001480  2253               	addwfc	i2printf@ap+1,f,c
 13940                           
 13941                           ;doprnt.c: 1261: if((long)val < 0) {
 13942  001482  AE5F               	btfss	i2printf@val+3,7,c
 13943  001484  D06A               	goto	i2l6614
 13944                           
 13945                           ;doprnt.c: 1262: flag |= 0x03;
 13946  001486  0E03               	movlw	3
 13947  001488  1265               	iorwf	i2printf@flag,f,c
 13948                           
 13949                           ;doprnt.c: 1263: val = -val;
 13950  00148A  1E5F               	comf	i2printf@val+3,f,c
 13951  00148C  1E5E               	comf	i2printf@val+2,f,c
 13952  00148E  1E5D               	comf	i2printf@val+1,f,c
 13953  001490  6C5C               	negf	i2printf@val,c
 13954  001492  0E00               	movlw	0
 13955  001494  225D               	addwfc	i2printf@val+1,f,c
 13956  001496  225E               	addwfc	i2printf@val+2,f,c
 13957  001498  225F               	addwfc	i2printf@val+3,f,c
 13958                           
 13959                           ;doprnt.c: 1264: }
 13960                           ;doprnt.c: 1266: }
 13961  00149A  D05F               	goto	i2l6614
 13962  00149C                     i2l743:
 13963                           
 13964                           ;doprnt.c: 1268: else
 13965                           ;doprnt.c: 1273: {
 13966                           ;doprnt.c: 1281: if(flag & 0x10)
 13967  00149C  A865               	btfss	i2printf@flag,4,c
 13968  00149E  D00E               	goto	i2l6580
 13969                           
 13970                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 13971  0014A0  C052  FFD9         	movff	i2printf@ap,fsr2l
 13972  0014A4  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13973  0014A8  CFDE F05C          	movff	postinc2,i2printf@val
 13974  0014AC  CFDE F05D          	movff	postinc2,i2printf@val+1
 13975  0014B0  CFDE F05E          	movff	postinc2,i2printf@val+2
 13976  0014B4  CFDE F05F          	movff	postinc2,i2printf@val+3
 13977  0014B8  0E04               	movlw	4
 13978  0014BA  D00F               	goto	L10
 13979  0014BC                     i2l6580:
 13980                           
 13981                           ;doprnt.c: 1283: else
 13982                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13983  0014BC  C052  FFD9         	movff	i2printf@ap,fsr2l
 13984  0014C0  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13985  0014C4  CFDE F044          	movff	postinc2,??i2_printf
 13986  0014C8  CFDD F045          	movff	postdec2,??i2_printf+1
 13987  0014CC  C044  F05C         	movff	??i2_printf,i2printf@val
 13988  0014D0  C045  F05D         	movff	??i2_printf+1,i2printf@val+1
 13989  0014D4  6A5E               	clrf	i2printf@val+2,c
 13990  0014D6  6A5F               	clrf	i2printf@val+3,c
 13991  0014D8  0E02               	movlw	2
 13992  0014DA                     L10:
 13993  0014DA  2652               	addwf	i2printf@ap,f,c
 13994  0014DC  0E00               	movlw	0
 13995  0014DE  2253               	addwfc	i2printf@ap+1,f,c
 13996                           
 13997                           ;doprnt.c: 1287: }
 13998                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13999  0014E0  D03C               	goto	i2l6614
 14000  0014E2                     i2l6584:
 14001                           
 14002                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14003  0014E2  0E01               	movlw	1
 14004  0014E4  6E67               	movwf	i2printf@c,c
 14005  0014E6                     i2l6586:
 14006  0014E6  0E0A               	movlw	10
 14007  0014E8  1867               	xorwf	i2printf@c,w,c
 14008  0014EA  B4D8               	btfsc	status,2,c
 14009  0014EC  D03E               	goto	i2l6616
 14010                           
 14011                           ;doprnt.c: 1306: if(val < dpowers[c])
 14012  0014EE  5067               	movf	i2printf@c,w,c
 14013  0014F0  0D04               	mullw	4
 14014  0014F2  0EC3               	movlw	low _dpowers
 14015  0014F4  24F3               	addwf	prodl,w,c
 14016  0014F6  6EF6               	movwf	tblptrl,c
 14017  0014F8  0EFD               	movlw	high _dpowers
 14018  0014FA  20F4               	addwfc	prodh,w,c
 14019  0014FC  6EF7               	movwf	tblptrh,c
 14020  0014FE                     	if	0	;There are less than 3 active tblptr bytes
 14021  0014FE                     	endif
 14022  0014FE  0009               	tblrd		*+
 14023  001500  50F5               	movf	tablat,w,c
 14024  001502  5C5C               	subwf	i2printf@val,w,c
 14025  001504  0009               	tblrd		*+
 14026  001506  50F5               	movf	tablat,w,c
 14027  001508  585D               	subwfb	i2printf@val+1,w,c
 14028  00150A  0009               	tblrd		*+
 14029  00150C  50F5               	movf	tablat,w,c
 14030  00150E  585E               	subwfb	i2printf@val+2,w,c
 14031  001510  0009               	tblrd		*+
 14032  001512  50F5               	movf	tablat,w,c
 14033  001514  585F               	subwfb	i2printf@val+3,w,c
 14034  001516  A0D8               	btfss	status,0,c
 14035  001518  D028               	goto	i2l6616
 14036                           
 14037                           ;doprnt.c: 1307: break;
 14038  00151A  2A67               	incf	i2printf@c,f,c
 14039  00151C  D7E4               	goto	i2l6586
 14040  00151E                     i2l6598:
 14041                           
 14042                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14043  00151E  0E01               	movlw	1
 14044  001520  6E67               	movwf	i2printf@c,c
 14045  001522                     i2l6600:
 14046  001522  0E08               	movlw	8
 14047  001524  1867               	xorwf	i2printf@c,w,c
 14048  001526  B4D8               	btfsc	status,2,c
 14049  001528  D020               	goto	i2l6616
 14050                           
 14051                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14052  00152A  5067               	movf	i2printf@c,w,c
 14053  00152C  0D04               	mullw	4
 14054  00152E  0E39               	movlw	low _hexpowers
 14055  001530  24F3               	addwf	prodl,w,c
 14056  001532  6EF6               	movwf	tblptrl,c
 14057  001534  0EFE               	movlw	high _hexpowers
 14058  001536  20F4               	addwfc	prodh,w,c
 14059  001538  6EF7               	movwf	tblptrh,c
 14060  00153A                     	if	0	;There are less than 3 active tblptr bytes
 14061  00153A                     	endif
 14062  00153A  0009               	tblrd		*+
 14063  00153C  50F5               	movf	tablat,w,c
 14064  00153E  5C5C               	subwf	i2printf@val,w,c
 14065  001540  0009               	tblrd		*+
 14066  001542  50F5               	movf	tablat,w,c
 14067  001544  585D               	subwfb	i2printf@val+1,w,c
 14068  001546  0009               	tblrd		*+
 14069  001548  50F5               	movf	tablat,w,c
 14070  00154A  585E               	subwfb	i2printf@val+2,w,c
 14071  00154C  0009               	tblrd		*+
 14072  00154E  50F5               	movf	tablat,w,c
 14073  001550  585F               	subwfb	i2printf@val+3,w,c
 14074  001552  A0D8               	btfss	status,0,c
 14075  001554  D00A               	goto	i2l6616
 14076                           
 14077                           ;doprnt.c: 1318: break;
 14078  001556  2A67               	incf	i2printf@c,f,c
 14079  001558  D7E4               	goto	i2l6600
 14080  00155A                     i2l6614:
 14081  00155A  5065               	movf	i2printf@flag,w,c
 14082  00155C  0B80               	andlw	128
 14083                           
 14084                           ; Switch size 1, requested type "space"
 14085                           ; Number of cases is 2, Range of values is 0 to 128
 14086                           ; switch strategies available:
 14087                           ; Name         Instructions Cycles
 14088                           ; simple_byte            7     4 (average)
 14089                           ;	Chosen strategy is simple_byte
 14090  00155E  0A00               	xorlw	0	; case 0
 14091  001560  B4D8               	btfsc	status,2,c
 14092  001562  D7BF               	goto	i2l6584
 14093  001564  0A80               	xorlw	128	; case 128
 14094  001566  B4D8               	btfsc	status,2,c
 14095  001568  D7DA               	goto	i2l6598
 14096  00156A                     i2l6616:
 14097                           
 14098                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14099  00156A  5063               	movf	i2printf@width,w,c
 14100  00156C  1064               	iorwf	i2printf@width+1,w,c
 14101  00156E  B4D8               	btfsc	status,2,c
 14102  001570  D00D               	goto	i2l6622
 14103  001572  0E03               	movlw	3
 14104  001574  1465               	andwf	i2printf@flag,w,c
 14105  001576  6E44               	movwf	??i2_printf& (0+255),c
 14106  001578  0E00               	movlw	0
 14107  00157A  1466               	andwf	i2printf@flag+1,w,c
 14108  00157C  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14109  00157E  5044               	movf	??i2_printf,w,c
 14110  001580  1045               	iorwf	??i2_printf+1,w,c
 14111  001582  B4D8               	btfsc	status,2,c
 14112  001584  D003               	goto	i2l6622
 14113                           
 14114                           ;doprnt.c: 1346: width--;
 14115  001586  0663               	decf	i2printf@width,f,c
 14116  001588  A0D8               	btfss	status,0,c
 14117  00158A  0664               	decf	i2printf@width+1,f,c
 14118  00158C                     i2l6622:
 14119                           
 14120                           ;doprnt.c: 1381: if(width > c)
 14121  00158C  0E80               	movlw	128
 14122  00158E  BE67               	btfsc	i2printf@c,7,c
 14123  001590  0E7F               	movlw	127
 14124  001592  6E44               	movwf	??i2_printf& (0+255),c
 14125  001594  5063               	movf	i2printf@width,w,c
 14126  001596  5C67               	subwf	i2printf@c,w,c
 14127  001598  5064               	movf	i2printf@width+1,w,c
 14128  00159A  0A80               	xorlw	128
 14129  00159C  5844               	subwfb	??i2_printf& (0+255),w,c
 14130  00159E  B0D8               	btfsc	status,0,c
 14131  0015A0  D007               	goto	i2l6626
 14132                           
 14133                           ;doprnt.c: 1382: width -= c;
 14134  0015A2  5067               	movf	i2printf@c,w,c
 14135  0015A4  5E63               	subwf	i2printf@width,f,c
 14136  0015A6  0E00               	movlw	0
 14137  0015A8  BE67               	btfsc	i2printf@c,7,c
 14138  0015AA  0EFF               	movlw	255
 14139  0015AC  5A64               	subwfb	i2printf@width+1,f,c
 14140  0015AE  D004               	goto	i2l6628
 14141  0015B0                     i2l6626:
 14142                           
 14143                           ;doprnt.c: 1383: else
 14144                           ;doprnt.c: 1384: width = 0;
 14145  0015B0  0E00               	movlw	0
 14146  0015B2  6E64               	movwf	i2printf@width+1,c
 14147  0015B4  0E00               	movlw	0
 14148  0015B6  6E63               	movwf	i2printf@width,c
 14149  0015B8                     i2l6628:
 14150                           
 14151                           ;doprnt.c: 1387: if(flag & 0x04) {
 14152  0015B8  A465               	btfss	i2printf@flag,2,c
 14153  0015BA  D018               	goto	i2l6640
 14154                           
 14155                           ;doprnt.c: 1392: if(flag & 0x03)
 14156  0015BC  0E03               	movlw	3
 14157  0015BE  1465               	andwf	i2printf@flag,w,c
 14158  0015C0  6E44               	movwf	??i2_printf& (0+255),c
 14159  0015C2  0E00               	movlw	0
 14160  0015C4  1466               	andwf	i2printf@flag+1,w,c
 14161  0015C6  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14162  0015C8  5044               	movf	??i2_printf,w,c
 14163  0015CA  1045               	iorwf	??i2_printf+1,w,c
 14164  0015CC  B4D8               	btfsc	status,2,c
 14165  0015CE  D003               	goto	i2l6634
 14166                           
 14167                           ;doprnt.c: 1393: (putch('-') );
 14168  0015D0  0E2D               	movlw	45
 14169  0015D2  ECE8  F028         	call	i2_putch
 14170  0015D6                     i2l6634:
 14171                           
 14172                           ;doprnt.c: 1415: if(width)
 14173  0015D6  5063               	movf	i2printf@width,w,c
 14174  0015D8  1064               	iorwf	i2printf@width+1,w,c
 14175  0015DA  B4D8               	btfsc	status,2,c
 14176  0015DC  D022               	goto	i2l6650
 14177                           
 14178                           ;doprnt.c: 1417: (putch('0') );
 14179                           
 14180                           ;doprnt.c: 1416: do
 14181  0015DE  0E30               	movlw	48
 14182  0015E0  ECE8  F028         	call	i2_putch
 14183                           
 14184                           ;doprnt.c: 1418: while(--width);
 14185  0015E4  0663               	decf	i2printf@width,f,c
 14186  0015E6  A0D8               	btfss	status,0,c
 14187  0015E8  0664               	decf	i2printf@width+1,f,c
 14188  0015EA  D7F5               	goto	i2l6634
 14189  0015EC                     i2l6640:
 14190                           
 14191                           ;doprnt.c: 1422: {
 14192                           ;doprnt.c: 1424: if(width
 14193                           ;doprnt.c: 1428: )
 14194  0015EC  5063               	movf	i2printf@width,w,c
 14195  0015EE  1064               	iorwf	i2printf@width+1,w,c
 14196  0015F0  B4D8               	btfsc	status,2,c
 14197  0015F2  D00A               	goto	i2l6646
 14198  0015F4                     i2l6642:
 14199                           
 14200                           ;doprnt.c: 1430: (putch(' ') );
 14201  0015F4  0E20               	movlw	32
 14202  0015F6  ECE8  F028         	call	i2_putch
 14203                           
 14204                           ;doprnt.c: 1431: while(--width);
 14205  0015FA  0663               	decf	i2printf@width,f,c
 14206  0015FC  A0D8               	btfss	status,0,c
 14207  0015FE  0664               	decf	i2printf@width+1,f,c
 14208  001600  5063               	movf	i2printf@width,w,c
 14209  001602  1064               	iorwf	i2printf@width+1,w,c
 14210  001604  A4D8               	btfss	status,2,c
 14211  001606  D7F6               	goto	i2l6642
 14212  001608                     i2l6646:
 14213                           
 14214                           ;doprnt.c: 1438: if(flag & 0x03)
 14215  001608  0E03               	movlw	3
 14216  00160A  1465               	andwf	i2printf@flag,w,c
 14217  00160C  6E44               	movwf	??i2_printf& (0+255),c
 14218  00160E  0E00               	movlw	0
 14219  001610  1466               	andwf	i2printf@flag+1,w,c
 14220  001612  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14221  001614  5044               	movf	??i2_printf,w,c
 14222  001616  1045               	iorwf	??i2_printf+1,w,c
 14223  001618  B4D8               	btfsc	status,2,c
 14224  00161A  D003               	goto	i2l6650
 14225                           
 14226                           ;doprnt.c: 1439: (putch('-') );
 14227  00161C  0E2D               	movlw	45
 14228  00161E  ECE8  F028         	call	i2_putch
 14229  001622                     i2l6650:
 14230                           
 14231                           ;doprnt.c: 1469: }
 14232                           ;doprnt.c: 1472: prec = c;
 14233  001622  5067               	movf	i2printf@c,w,c
 14234  001624  6E54               	movwf	i2printf@prec,c
 14235  001626  6A55               	clrf	i2printf@prec+1,c
 14236  001628  BE54               	btfsc	i2printf@prec,7,c
 14237  00162A  0655               	decf	i2printf@prec+1,f,c
 14238                           
 14239                           ;doprnt.c: 1474: while(prec--) {
 14240  00162C  D07C               	goto	i2l6664
 14241  00162E                     i2l6652:
 14242                           
 14243                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14244  00162E  C054  F044         	movff	i2printf@prec,??i2_printf
 14245  001632  C055  F045         	movff	i2printf@prec+1,??i2_printf+1
 14246  001636  90D8               	bcf	status,0,c
 14247  001638  3644               	rlcf	??i2_printf,f,c
 14248  00163A  3645               	rlcf	??i2_printf+1,f,c
 14249  00163C  90D8               	bcf	status,0,c
 14250  00163E  3644               	rlcf	??i2_printf,f,c
 14251  001640  3645               	rlcf	??i2_printf+1,f,c
 14252  001642  0EC3               	movlw	low _dpowers
 14253  001644  2444               	addwf	??i2_printf,w,c
 14254  001646  6EF6               	movwf	tblptrl,c
 14255  001648  0EFD               	movlw	high _dpowers
 14256  00164A  2045               	addwfc	??i2_printf+1,w,c
 14257  00164C  6EF7               	movwf	tblptrh,c
 14258  00164E                     	if	0	;There are less than 3 active tblptr bytes
 14259  00164E                     	endif
 14260  00164E  0009               	tblrd		*+
 14261  001650  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14262  001654  0009               	tblrd		*+
 14263  001656  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14264  00165A  0009               	tblrd		*+
 14265  00165C  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14266  001660  000A               	tblrd		*-
 14267  001662  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14268  001666  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 14269  00166A  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14270  00166E  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14271  001672  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14272  001676  EC3A  F025         	call	i2___lldiv	;wreg free
 14273  00167A  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 14274  00167E  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 14275  001682  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 14276  001686  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 14277  00168A  0E0A               	movlw	10
 14278  00168C  6E12               	movwf	i2___llmod@divisor,c
 14279  00168E  0E00               	movlw	0
 14280  001690  6E13               	movwf	i2___llmod@divisor+1,c
 14281  001692  0E00               	movlw	0
 14282  001694  6E14               	movwf	i2___llmod@divisor+2,c
 14283  001696  0E00               	movlw	0
 14284  001698  6E15               	movwf	i2___llmod@divisor+3,c
 14285  00169A  EC2D  F026         	call	i2___llmod	;wreg free
 14286  00169E  500E               	movf	?i2___llmod,w,c
 14287  0016A0  0F30               	addlw	48
 14288  0016A2  6E67               	movwf	i2printf@c,c
 14289                           
 14290                           ;doprnt.c: 1491: break;
 14291  0016A4  D03D               	goto	i2l6662
 14292  0016A6                     i2l6654:
 14293                           
 14294                           ;doprnt.c: 1499: {
 14295                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14296  0016A6  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 14297  0016AA  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14298  0016AE  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14299  0016B2  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14300  0016B6  C054  F044         	movff	i2printf@prec,??i2_printf
 14301  0016BA  C055  F045         	movff	i2printf@prec+1,??i2_printf+1
 14302  0016BE  90D8               	bcf	status,0,c
 14303  0016C0  3644               	rlcf	??i2_printf,f,c
 14304  0016C2  3645               	rlcf	??i2_printf+1,f,c
 14305  0016C4  90D8               	bcf	status,0,c
 14306  0016C6  3644               	rlcf	??i2_printf,f,c
 14307  0016C8  3645               	rlcf	??i2_printf+1,f,c
 14308  0016CA  0E39               	movlw	low _hexpowers
 14309  0016CC  2444               	addwf	??i2_printf,w,c
 14310  0016CE  6EF6               	movwf	tblptrl,c
 14311  0016D0  0EFE               	movlw	high _hexpowers
 14312  0016D2  2045               	addwfc	??i2_printf+1,w,c
 14313  0016D4  6EF7               	movwf	tblptrh,c
 14314  0016D6                     	if	0	;There are less than 3 active tblptr bytes
 14315  0016D6                     	endif
 14316  0016D6  0009               	tblrd		*+
 14317  0016D8  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14318  0016DC  0009               	tblrd		*+
 14319  0016DE  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14320  0016E2  0009               	tblrd		*+
 14321  0016E4  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14322  0016E8  000A               	tblrd		*-
 14323  0016EA  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14324  0016EE  EC3A  F025         	call	i2___lldiv	;wreg free
 14325  0016F2  5001               	movf	?i2___lldiv,w,c
 14326  0016F4  0B0F               	andlw	15
 14327  0016F6  6E4D               	movwf	i2printf@idx,c
 14328                           
 14329                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14330  0016F8  504D               	movf	i2printf@idx,w,c
 14331  0016FA  0D01               	mullw	1
 14332  0016FC  0E1F               	movlw	low STR_24
 14333  0016FE  24F3               	addwf	prodl,w,c
 14334  001700  6EF6               	movwf	tblptrl,c
 14335  001702  0EFF               	movlw	high STR_24
 14336  001704  20F4               	addwfc	prodh,w,c
 14337  001706  6EF7               	movwf	tblptrh,c
 14338  001708                     	if	0	;There are less than 3 active tblptr bytes
 14339  001708                     	endif
 14340  001708  0008               	tblrd		*
 14341  00170A  CFF5 F067          	movff	tablat,i2printf@c
 14342                           
 14343                           ;doprnt.c: 1523: }
 14344                           
 14345                           ;doprnt.c: 1508: }
 14346                           ;doprnt.c: 1510: break;
 14347  00170E  D008               	goto	i2l6662
 14348  001710                     i2l6660:
 14349  001710  5065               	movf	i2printf@flag,w,c
 14350  001712  0B80               	andlw	128
 14351                           
 14352                           ; Switch size 1, requested type "space"
 14353                           ; Number of cases is 2, Range of values is 0 to 128
 14354                           ; switch strategies available:
 14355                           ; Name         Instructions Cycles
 14356                           ; simple_byte            7     4 (average)
 14357                           ;	Chosen strategy is simple_byte
 14358  001714  0A00               	xorlw	0	; case 0
 14359  001716  B4D8               	btfsc	status,2,c
 14360  001718  D78A               	goto	i2l6652
 14361  00171A  0A80               	xorlw	128	; case 128
 14362  00171C  B4D8               	btfsc	status,2,c
 14363  00171E  D7C3               	goto	i2l6654
 14364  001720                     i2l6662:
 14365                           
 14366                           ;doprnt.c: 1524: (putch(c) );
 14367  001720  5067               	movf	i2printf@c,w,c
 14368  001722  ECE8  F028         	call	i2_putch
 14369  001726                     i2l6664:
 14370  001726  0654               	decf	i2printf@prec,f,c
 14371  001728  A0D8               	btfss	status,0,c
 14372  00172A  0655               	decf	i2printf@prec+1,f,c
 14373  00172C  2854               	incf	i2printf@prec,w,c
 14374  00172E  E1F0               	bnz	i2l6660
 14375  001730  2855               	incf	i2printf@prec+1,w,c
 14376  001732  A4D8               	btfss	status,2,c
 14377  001734  D7ED               	goto	i2l6660
 14378  001736                     i2l6666:
 14379  001736  C040  FFF6         	movff	i2printf@f,tblptrl
 14380  00173A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14381  00173E  4A40               	infsnz	i2printf@f,f,c
 14382  001740  2A41               	incf	i2printf@f+1,f,c
 14383  001742                     	if	0	;tblptru may be non-zero
 14384  001742                     	endif
 14385  001742                     	if	0	;tblptru may be non-zero
 14386  001742                     	endif
 14387  001742  0008               	tblrd		*
 14388  001744  CFF5 F067          	movff	tablat,i2printf@c
 14389  001748  5067               	movf	i2printf@c,w,c
 14390  00174A  B4D8               	btfsc	status,2,c
 14391  00174C  0012               	return	
 14392  00174E  EF6B  F006         	goto	i2l6344
 14393  001752                     __end_ofi2_printf:
 14394                           	opt stack 0
 14395                           pclatu	equ	0xFFB
 14396                           pclath	equ	0xFFA
 14397                           tblptru	equ	0xFF8
 14398                           tblptrh	equ	0xFF7
 14399                           tblptrl	equ	0xFF6
 14400                           tablat	equ	0xFF5
 14401                           prodh	equ	0xFF4
 14402                           prodl	equ	0xFF3
 14403                           intcon	equ	0xFF2
 14404                           intcon3	equ	0xFF0
 14405                           postinc0	equ	0xFEE
 14406                           fsr0h	equ	0xFEA
 14407                           fsr0l	equ	0xFE9
 14408                           wreg	equ	0xFE8
 14409                           postdec1	equ	0xFE5
 14410                           fsr1h	equ	0xFE2
 14411                           fsr1l	equ	0xFE1
 14412                           indf2	equ	0xFDF
 14413                           postinc2	equ	0xFDE
 14414                           postdec2	equ	0xFDD
 14415                           fsr2h	equ	0xFDA
 14416                           fsr2l	equ	0xFD9
 14417                           status	equ	0xFD8
 14418                           
 14419 ;; *************** function i2_scale *****************
 14420 ;; Defined at:
 14421 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14422 ;; Parameters:    Size  Location     Type
 14423 ;;  scl             1    wreg     char 
 14424 ;; Auto vars:     Size  Location     Type
 14425 ;;  scl             1   41[COMRAM] char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  3   35[COMRAM] char 
 14428 ;; Registers used:
 14429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14435 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14436 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14438 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14439 ;;Total ram usage:        7 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:    2
 14442 ;; This function calls:
 14443 ;;		i2___awdiv
 14444 ;;		i2___awmod
 14445 ;;		i2___ftmul
 14446 ;;		i2___wmul
 14447 ;; This function is called by:
 14448 ;;		i2_printf
 14449 ;; This function uses a non-reentrant model
 14450 ;;
 14451                           
 14452                           	psect	text46
 14453  001C00                     __ptext46:
 14454                           	opt stack 0
 14455  001C00                     i2_scale:
 14456                           	opt stack 19
 14457                           
 14458                           ;incstack = 0
 14459                           ;i2scale@scl stored from wreg
 14460  001C00  6E2A               	movwf	i2scale@scl,c
 14461                           
 14462                           ;doprnt.c: 428: if(scl < 0) {
 14463  001C02  AE2A               	btfss	i2scale@scl,7,c
 14464  001C04  D0FB               	goto	i2l5868
 14465                           
 14466                           ;doprnt.c: 429: scl = -scl;
 14467  001C06  6C2A               	negf	i2scale@scl,c
 14468                           
 14469                           ;doprnt.c: 430: if(scl>=110)
 14470  001C08  502A               	movf	i2scale@scl,w,c
 14471  001C0A  0A80               	xorlw	128
 14472  001C0C  0F12               	addlw	-238
 14473  001C0E  A0D8               	btfss	status,0,c
 14474  001C10  D091               	goto	i2l5858
 14475                           
 14476                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14477  001C12  0E00               	movlw	0
 14478  001C14  6E12               	movwf	i2___wmul@multiplicand+1,c
 14479  001C16  0E03               	movlw	3
 14480  001C18  6E11               	movwf	i2___wmul@multiplicand,c
 14481  001C1A  0E00               	movlw	0
 14482  001C1C  6E0A               	movwf	i2___awdiv@divisor+1,c
 14483  001C1E  0E0A               	movlw	10
 14484  001C20  6E09               	movwf	i2___awdiv@divisor,c
 14485  001C22  0E00               	movlw	0
 14486  001C24  6E04               	movwf	i2___awmod@divisor+1,c
 14487  001C26  0E64               	movlw	100
 14488  001C28  6E03               	movwf	i2___awmod@divisor,c
 14489  001C2A  502A               	movf	i2scale@scl,w,c
 14490  001C2C  6E01               	movwf	i2___awmod@dividend,c
 14491  001C2E  6A02               	clrf	i2___awmod@dividend+1,c
 14492  001C30  BE01               	btfsc	i2___awmod@dividend,7,c
 14493  001C32  0602               	decf	i2___awmod@dividend+1,f,c
 14494  001C34  ECF5  F025         	call	i2___awmod	;wreg free
 14495  001C38  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14496  001C3C  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14497  001C40  ECF8  F024         	call	i2___awdiv	;wreg free
 14498  001C44  0E09               	movlw	9
 14499  001C46  2407               	addwf	?i2___awdiv,w,c
 14500  001C48  6E0F               	movwf	i2___wmul@multiplier,c
 14501  001C4A  0E00               	movlw	0
 14502  001C4C  2008               	addwfc	?i2___awdiv+1,w,c
 14503  001C4E  6E10               	movwf	i2___wmul@multiplier+1,c
 14504  001C50  ECC3  F028         	call	i2___wmul	;wreg free
 14505  001C54  0EEB               	movlw	low __npowers_
 14506  001C56  240F               	addwf	?i2___wmul,w,c
 14507  001C58  6EF6               	movwf	tblptrl,c
 14508  001C5A  0EFD               	movlw	high __npowers_
 14509  001C5C  2010               	addwfc	?i2___wmul+1,w,c
 14510  001C5E  6EF7               	movwf	tblptrh,c
 14511  001C60                     	if	0	;There are less than 3 active tblptr bytes
 14512  001C60                     	endif
 14513  001C60  0009               	tblrd		*+
 14514  001C62  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14515  001C66  0009               	tblrd		*+
 14516  001C68  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14517  001C6C  000A               	tblrd		*-
 14518  001C6E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14519  001C72  0E00               	movlw	0
 14520  001C74  6E0A               	movwf	i2___awdiv@divisor+1,c
 14521  001C76  0E64               	movlw	100
 14522  001C78  6E09               	movwf	i2___awdiv@divisor,c
 14523  001C7A  502A               	movf	i2scale@scl,w,c
 14524  001C7C  6E07               	movwf	i2___awdiv@dividend,c
 14525  001C7E  6A08               	clrf	i2___awdiv@dividend+1,c
 14526  001C80  BE07               	btfsc	i2___awdiv@dividend,7,c
 14527  001C82  0608               	decf	i2___awdiv@dividend+1,f,c
 14528  001C84  ECF8  F024         	call	i2___awdiv	;wreg free
 14529  001C88  0E12               	movlw	18
 14530  001C8A  2407               	addwf	?i2___awdiv,w,c
 14531  001C8C  6E0F               	movwf	i2___wmul@multiplier,c
 14532  001C8E  0E00               	movlw	0
 14533  001C90  2008               	addwfc	?i2___awdiv+1,w,c
 14534  001C92  6E10               	movwf	i2___wmul@multiplier+1,c
 14535  001C94  0E00               	movlw	0
 14536  001C96  6E12               	movwf	i2___wmul@multiplicand+1,c
 14537  001C98  0E03               	movlw	3
 14538  001C9A  6E11               	movwf	i2___wmul@multiplicand,c
 14539  001C9C  ECC3  F028         	call	i2___wmul	;wreg free
 14540  001CA0  0EEB               	movlw	low __npowers_
 14541  001CA2  240F               	addwf	?i2___wmul,w,c
 14542  001CA4  6EF6               	movwf	tblptrl,c
 14543  001CA6  0EFD               	movlw	high __npowers_
 14544  001CA8  2010               	addwfc	?i2___wmul+1,w,c
 14545  001CAA  6EF7               	movwf	tblptrh,c
 14546  001CAC                     	if	0	;There are less than 3 active tblptr bytes
 14547  001CAC                     	endif
 14548  001CAC  0009               	tblrd		*+
 14549  001CAE  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14550  001CB2  0009               	tblrd		*+
 14551  001CB4  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14552  001CB8  000A               	tblrd		*-
 14553  001CBA  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14554  001CBE  ECCE  F01F         	call	i2___ftmul	;wreg free
 14555  001CC2  C015  F027         	movff	?i2___ftmul,i2_scale$1534
 14556  001CC6  C016  F028         	movff	?i2___ftmul+1,i2_scale$1534+1
 14557  001CCA  C017  F029         	movff	?i2___ftmul+2,i2_scale$1534+2
 14558                           
 14559                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14560  001CCE  C027  F015         	movff	i2_scale$1534,i2___ftmul@f1
 14561  001CD2  C028  F016         	movff	i2_scale$1534+1,i2___ftmul@f1+1
 14562  001CD6  C029  F017         	movff	i2_scale$1534+2,i2___ftmul@f1+2
 14563  001CDA  0E00               	movlw	0
 14564  001CDC  6E12               	movwf	i2___wmul@multiplicand+1,c
 14565  001CDE  0E03               	movlw	3
 14566  001CE0  6E11               	movwf	i2___wmul@multiplicand,c
 14567  001CE2  0E00               	movlw	0
 14568  001CE4  6E04               	movwf	i2___awmod@divisor+1,c
 14569  001CE6  0E0A               	movlw	10
 14570  001CE8  6E03               	movwf	i2___awmod@divisor,c
 14571  001CEA  502A               	movf	i2scale@scl,w,c
 14572  001CEC  6E01               	movwf	i2___awmod@dividend,c
 14573  001CEE  6A02               	clrf	i2___awmod@dividend+1,c
 14574  001CF0  BE01               	btfsc	i2___awmod@dividend,7,c
 14575  001CF2  0602               	decf	i2___awmod@dividend+1,f,c
 14576  001CF4  ECF5  F025         	call	i2___awmod	;wreg free
 14577  001CF8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14578  001CFC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14579  001D00  ECC3  F028         	call	i2___wmul	;wreg free
 14580  001D04  0EEB               	movlw	low __npowers_
 14581  001D06  240F               	addwf	?i2___wmul,w,c
 14582  001D08  6EF6               	movwf	tblptrl,c
 14583  001D0A  0EFD               	movlw	high __npowers_
 14584  001D0C  2010               	addwfc	?i2___wmul+1,w,c
 14585  001D0E  6EF7               	movwf	tblptrh,c
 14586  001D10                     	if	0	;There are less than 3 active tblptr bytes
 14587  001D10                     	endif
 14588  001D10  0009               	tblrd		*+
 14589  001D12  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14590  001D16  0009               	tblrd		*+
 14591  001D18  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14592  001D1C  000A               	tblrd		*-
 14593  001D1E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14594  001D22  ECCE  F01F         	call	i2___ftmul	;wreg free
 14595  001D26  C015  F024         	movff	?i2___ftmul,?i2_scale
 14596  001D2A  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14597  001D2E  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14598  001D32  0012               	return	
 14599  001D34                     i2l5858:
 14600                           
 14601                           ;doprnt.c: 432: else if(scl > 10)
 14602  001D34  502A               	movf	i2scale@scl,w,c
 14603  001D36  0A80               	xorlw	128
 14604  001D38  0F75               	addlw	-139
 14605  001D3A  A0D8               	btfss	status,0,c
 14606  001D3C  D04D               	goto	i2l5864
 14607                           
 14608                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 14609  001D3E  0E00               	movlw	0
 14610  001D40  6E0A               	movwf	i2___awdiv@divisor+1,c
 14611  001D42  0E0A               	movlw	10
 14612  001D44  6E09               	movwf	i2___awdiv@divisor,c
 14613  001D46  502A               	movf	i2scale@scl,w,c
 14614  001D48  6E07               	movwf	i2___awdiv@dividend,c
 14615  001D4A  6A08               	clrf	i2___awdiv@dividend+1,c
 14616  001D4C  BE07               	btfsc	i2___awdiv@dividend,7,c
 14617  001D4E  0608               	decf	i2___awdiv@dividend+1,f,c
 14618  001D50  ECF8  F024         	call	i2___awdiv	;wreg free
 14619  001D54  0E09               	movlw	9
 14620  001D56  2407               	addwf	?i2___awdiv,w,c
 14621  001D58  6E0F               	movwf	i2___wmul@multiplier,c
 14622  001D5A  0E00               	movlw	0
 14623  001D5C  2008               	addwfc	?i2___awdiv+1,w,c
 14624  001D5E  6E10               	movwf	i2___wmul@multiplier+1,c
 14625  001D60  0E00               	movlw	0
 14626  001D62  6E12               	movwf	i2___wmul@multiplicand+1,c
 14627  001D64  0E03               	movlw	3
 14628  001D66  6E11               	movwf	i2___wmul@multiplicand,c
 14629  001D68  ECC3  F028         	call	i2___wmul	;wreg free
 14630  001D6C  0EEB               	movlw	low __npowers_
 14631  001D6E  240F               	addwf	?i2___wmul,w,c
 14632  001D70  6EF6               	movwf	tblptrl,c
 14633  001D72  0EFD               	movlw	high __npowers_
 14634  001D74  2010               	addwfc	?i2___wmul+1,w,c
 14635  001D76  6EF7               	movwf	tblptrh,c
 14636  001D78                     	if	0	;There are less than 3 active tblptr bytes
 14637  001D78                     	endif
 14638  001D78  0009               	tblrd		*+
 14639  001D7A  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14640  001D7E  0009               	tblrd		*+
 14641  001D80  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14642  001D84  000A               	tblrd		*-
 14643  001D86  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14644  001D8A  0E00               	movlw	0
 14645  001D8C  6E12               	movwf	i2___wmul@multiplicand+1,c
 14646  001D8E  0E03               	movlw	3
 14647  001D90  6E11               	movwf	i2___wmul@multiplicand,c
 14648  001D92  0E00               	movlw	0
 14649  001D94  6E04               	movwf	i2___awmod@divisor+1,c
 14650  001D96  0E0A               	movlw	10
 14651  001D98  6E03               	movwf	i2___awmod@divisor,c
 14652  001D9A  502A               	movf	i2scale@scl,w,c
 14653  001D9C  6E01               	movwf	i2___awmod@dividend,c
 14654  001D9E  6A02               	clrf	i2___awmod@dividend+1,c
 14655  001DA0  BE01               	btfsc	i2___awmod@dividend,7,c
 14656  001DA2  0602               	decf	i2___awmod@dividend+1,f,c
 14657  001DA4  ECF5  F025         	call	i2___awmod	;wreg free
 14658  001DA8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14659  001DAC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14660  001DB0  ECC3  F028         	call	i2___wmul	;wreg free
 14661  001DB4  0EEB               	movlw	low __npowers_
 14662  001DB6  240F               	addwf	?i2___wmul,w,c
 14663  001DB8  6EF6               	movwf	tblptrl,c
 14664  001DBA  0EFD               	movlw	high __npowers_
 14665  001DBC  2010               	addwfc	?i2___wmul+1,w,c
 14666  001DBE  6EF7               	movwf	tblptrh,c
 14667  001DC0                     	if	0	;There are less than 3 active tblptr bytes
 14668  001DC0                     	endif
 14669  001DC0  0009               	tblrd		*+
 14670  001DC2  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14671  001DC6  0009               	tblrd		*+
 14672  001DC8  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14673  001DCC  000A               	tblrd		*-
 14674  001DCE  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14675  001DD2  ECCE  F01F         	call	i2___ftmul	;wreg free
 14676  001DD6  D7A7               	goto	L11
 14677  001DD8                     i2l5864:
 14678                           
 14679                           ;doprnt.c: 434: return _npowers_[scl];
 14680  001DD8  502A               	movf	i2scale@scl,w,c
 14681  001DDA  0D03               	mullw	3
 14682  001DDC  0EEB               	movlw	low __npowers_
 14683  001DDE  24F3               	addwf	prodl,w,c
 14684  001DE0  6EF6               	movwf	tblptrl,c
 14685  001DE2  0EFD               	movlw	high __npowers_
 14686  001DE4  20F4               	addwfc	prodh,w,c
 14687  001DE6  6EF7               	movwf	tblptrh,c
 14688  001DE8                     	if	0	;There are less than 3 active tblptr bytes
 14689  001DE8                     	endif
 14690  001DE8  0009               	tblrd		*+
 14691  001DEA  CFF5 F024          	movff	tablat,?i2_scale
 14692  001DEE  0009               	tblrd		*+
 14693  001DF0  CFF5 F025          	movff	tablat,?i2_scale+1
 14694  001DF4  000A               	tblrd		*-
 14695  001DF6  CFF5 F026          	movff	tablat,?i2_scale+2
 14696  001DFA  0012               	return	
 14697  001DFC                     i2l5868:
 14698                           
 14699                           ;doprnt.c: 435: }
 14700                           ;doprnt.c: 436: if(scl>=110)
 14701  001DFC  502A               	movf	i2scale@scl,w,c
 14702  001DFE  0A80               	xorlw	128
 14703  001E00  0F12               	addlw	-238
 14704  001E02  A0D8               	btfss	status,0,c
 14705  001E04  D091               	goto	i2l5876
 14706                           
 14707                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14708  001E06  0E00               	movlw	0
 14709  001E08  6E12               	movwf	i2___wmul@multiplicand+1,c
 14710  001E0A  0E03               	movlw	3
 14711  001E0C  6E11               	movwf	i2___wmul@multiplicand,c
 14712  001E0E  0E00               	movlw	0
 14713  001E10  6E0A               	movwf	i2___awdiv@divisor+1,c
 14714  001E12  0E0A               	movlw	10
 14715  001E14  6E09               	movwf	i2___awdiv@divisor,c
 14716  001E16  0E00               	movlw	0
 14717  001E18  6E04               	movwf	i2___awmod@divisor+1,c
 14718  001E1A  0E64               	movlw	100
 14719  001E1C  6E03               	movwf	i2___awmod@divisor,c
 14720  001E1E  502A               	movf	i2scale@scl,w,c
 14721  001E20  6E01               	movwf	i2___awmod@dividend,c
 14722  001E22  6A02               	clrf	i2___awmod@dividend+1,c
 14723  001E24  BE01               	btfsc	i2___awmod@dividend,7,c
 14724  001E26  0602               	decf	i2___awmod@dividend+1,f,c
 14725  001E28  ECF5  F025         	call	i2___awmod	;wreg free
 14726  001E2C  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14727  001E30  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14728  001E34  ECF8  F024         	call	i2___awdiv	;wreg free
 14729  001E38  0E09               	movlw	9
 14730  001E3A  2407               	addwf	?i2___awdiv,w,c
 14731  001E3C  6E0F               	movwf	i2___wmul@multiplier,c
 14732  001E3E  0E00               	movlw	0
 14733  001E40  2008               	addwfc	?i2___awdiv+1,w,c
 14734  001E42  6E10               	movwf	i2___wmul@multiplier+1,c
 14735  001E44  ECC3  F028         	call	i2___wmul	;wreg free
 14736  001E48  0E12               	movlw	low __powers_
 14737  001E4A  240F               	addwf	?i2___wmul,w,c
 14738  001E4C  6EF6               	movwf	tblptrl,c
 14739  001E4E  0EFE               	movlw	high __powers_
 14740  001E50  2010               	addwfc	?i2___wmul+1,w,c
 14741  001E52  6EF7               	movwf	tblptrh,c
 14742  001E54                     	if	0	;There are less than 3 active tblptr bytes
 14743  001E54                     	endif
 14744  001E54  0009               	tblrd		*+
 14745  001E56  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14746  001E5A  0009               	tblrd		*+
 14747  001E5C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14748  001E60  000A               	tblrd		*-
 14749  001E62  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14750  001E66  0E00               	movlw	0
 14751  001E68  6E0A               	movwf	i2___awdiv@divisor+1,c
 14752  001E6A  0E64               	movlw	100
 14753  001E6C  6E09               	movwf	i2___awdiv@divisor,c
 14754  001E6E  502A               	movf	i2scale@scl,w,c
 14755  001E70  6E07               	movwf	i2___awdiv@dividend,c
 14756  001E72  6A08               	clrf	i2___awdiv@dividend+1,c
 14757  001E74  BE07               	btfsc	i2___awdiv@dividend,7,c
 14758  001E76  0608               	decf	i2___awdiv@dividend+1,f,c
 14759  001E78  ECF8  F024         	call	i2___awdiv	;wreg free
 14760  001E7C  0E12               	movlw	18
 14761  001E7E  2407               	addwf	?i2___awdiv,w,c
 14762  001E80  6E0F               	movwf	i2___wmul@multiplier,c
 14763  001E82  0E00               	movlw	0
 14764  001E84  2008               	addwfc	?i2___awdiv+1,w,c
 14765  001E86  6E10               	movwf	i2___wmul@multiplier+1,c
 14766  001E88  0E00               	movlw	0
 14767  001E8A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14768  001E8C  0E03               	movlw	3
 14769  001E8E  6E11               	movwf	i2___wmul@multiplicand,c
 14770  001E90  ECC3  F028         	call	i2___wmul	;wreg free
 14771  001E94  0E12               	movlw	low __powers_
 14772  001E96  240F               	addwf	?i2___wmul,w,c
 14773  001E98  6EF6               	movwf	tblptrl,c
 14774  001E9A  0EFE               	movlw	high __powers_
 14775  001E9C  2010               	addwfc	?i2___wmul+1,w,c
 14776  001E9E  6EF7               	movwf	tblptrh,c
 14777  001EA0                     	if	0	;There are less than 3 active tblptr bytes
 14778  001EA0                     	endif
 14779  001EA0  0009               	tblrd		*+
 14780  001EA2  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14781  001EA6  0009               	tblrd		*+
 14782  001EA8  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14783  001EAC  000A               	tblrd		*-
 14784  001EAE  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14785  001EB2  ECCE  F01F         	call	i2___ftmul	;wreg free
 14786  001EB6  C015  F027         	movff	?i2___ftmul,i2_scale$1534
 14787  001EBA  C016  F028         	movff	?i2___ftmul+1,i2_scale$1534+1
 14788  001EBE  C017  F029         	movff	?i2___ftmul+2,i2_scale$1534+2
 14789                           
 14790                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14791  001EC2  C027  F015         	movff	i2_scale$1534,i2___ftmul@f1
 14792  001EC6  C028  F016         	movff	i2_scale$1534+1,i2___ftmul@f1+1
 14793  001ECA  C029  F017         	movff	i2_scale$1534+2,i2___ftmul@f1+2
 14794  001ECE  0E00               	movlw	0
 14795  001ED0  6E12               	movwf	i2___wmul@multiplicand+1,c
 14796  001ED2  0E03               	movlw	3
 14797  001ED4  6E11               	movwf	i2___wmul@multiplicand,c
 14798  001ED6  0E00               	movlw	0
 14799  001ED8  6E04               	movwf	i2___awmod@divisor+1,c
 14800  001EDA  0E0A               	movlw	10
 14801  001EDC  6E03               	movwf	i2___awmod@divisor,c
 14802  001EDE  502A               	movf	i2scale@scl,w,c
 14803  001EE0  6E01               	movwf	i2___awmod@dividend,c
 14804  001EE2  6A02               	clrf	i2___awmod@dividend+1,c
 14805  001EE4  BE01               	btfsc	i2___awmod@dividend,7,c
 14806  001EE6  0602               	decf	i2___awmod@dividend+1,f,c
 14807  001EE8  ECF5  F025         	call	i2___awmod	;wreg free
 14808  001EEC  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14809  001EF0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14810  001EF4  ECC3  F028         	call	i2___wmul	;wreg free
 14811  001EF8  0E12               	movlw	low __powers_
 14812  001EFA  240F               	addwf	?i2___wmul,w,c
 14813  001EFC  6EF6               	movwf	tblptrl,c
 14814  001EFE  0EFE               	movlw	high __powers_
 14815  001F00  2010               	addwfc	?i2___wmul+1,w,c
 14816  001F02  6EF7               	movwf	tblptrh,c
 14817  001F04                     	if	0	;There are less than 3 active tblptr bytes
 14818  001F04                     	endif
 14819  001F04  0009               	tblrd		*+
 14820  001F06  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14821  001F0A  0009               	tblrd		*+
 14822  001F0C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14823  001F10  000A               	tblrd		*-
 14824  001F12  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14825  001F16  ECCE  F01F         	call	i2___ftmul	;wreg free
 14826  001F1A  C015  F024         	movff	?i2___ftmul,?i2_scale
 14827  001F1E  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14828  001F22  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14829  001F26  0012               	return	
 14830  001F28                     i2l5876:
 14831                           
 14832                           ;doprnt.c: 438: else if(scl > 10)
 14833  001F28  502A               	movf	i2scale@scl,w,c
 14834  001F2A  0A80               	xorlw	128
 14835  001F2C  0F75               	addlw	-139
 14836  001F2E  A0D8               	btfss	status,0,c
 14837  001F30  D04D               	goto	i2l5882
 14838                           
 14839                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 14840  001F32  0E00               	movlw	0
 14841  001F34  6E0A               	movwf	i2___awdiv@divisor+1,c
 14842  001F36  0E0A               	movlw	10
 14843  001F38  6E09               	movwf	i2___awdiv@divisor,c
 14844  001F3A  502A               	movf	i2scale@scl,w,c
 14845  001F3C  6E07               	movwf	i2___awdiv@dividend,c
 14846  001F3E  6A08               	clrf	i2___awdiv@dividend+1,c
 14847  001F40  BE07               	btfsc	i2___awdiv@dividend,7,c
 14848  001F42  0608               	decf	i2___awdiv@dividend+1,f,c
 14849  001F44  ECF8  F024         	call	i2___awdiv	;wreg free
 14850  001F48  0E09               	movlw	9
 14851  001F4A  2407               	addwf	?i2___awdiv,w,c
 14852  001F4C  6E0F               	movwf	i2___wmul@multiplier,c
 14853  001F4E  0E00               	movlw	0
 14854  001F50  2008               	addwfc	?i2___awdiv+1,w,c
 14855  001F52  6E10               	movwf	i2___wmul@multiplier+1,c
 14856  001F54  0E00               	movlw	0
 14857  001F56  6E12               	movwf	i2___wmul@multiplicand+1,c
 14858  001F58  0E03               	movlw	3
 14859  001F5A  6E11               	movwf	i2___wmul@multiplicand,c
 14860  001F5C  ECC3  F028         	call	i2___wmul	;wreg free
 14861  001F60  0E12               	movlw	low __powers_
 14862  001F62  240F               	addwf	?i2___wmul,w,c
 14863  001F64  6EF6               	movwf	tblptrl,c
 14864  001F66  0EFE               	movlw	high __powers_
 14865  001F68  2010               	addwfc	?i2___wmul+1,w,c
 14866  001F6A  6EF7               	movwf	tblptrh,c
 14867  001F6C                     	if	0	;There are less than 3 active tblptr bytes
 14868  001F6C                     	endif
 14869  001F6C  0009               	tblrd		*+
 14870  001F6E  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14871  001F72  0009               	tblrd		*+
 14872  001F74  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14873  001F78  000A               	tblrd		*-
 14874  001F7A  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14875  001F7E  0E00               	movlw	0
 14876  001F80  6E12               	movwf	i2___wmul@multiplicand+1,c
 14877  001F82  0E03               	movlw	3
 14878  001F84  6E11               	movwf	i2___wmul@multiplicand,c
 14879  001F86  0E00               	movlw	0
 14880  001F88  6E04               	movwf	i2___awmod@divisor+1,c
 14881  001F8A  0E0A               	movlw	10
 14882  001F8C  6E03               	movwf	i2___awmod@divisor,c
 14883  001F8E  502A               	movf	i2scale@scl,w,c
 14884  001F90  6E01               	movwf	i2___awmod@dividend,c
 14885  001F92  6A02               	clrf	i2___awmod@dividend+1,c
 14886  001F94  BE01               	btfsc	i2___awmod@dividend,7,c
 14887  001F96  0602               	decf	i2___awmod@dividend+1,f,c
 14888  001F98  ECF5  F025         	call	i2___awmod	;wreg free
 14889  001F9C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14890  001FA0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14891  001FA4  ECC3  F028         	call	i2___wmul	;wreg free
 14892  001FA8  0E12               	movlw	low __powers_
 14893  001FAA  240F               	addwf	?i2___wmul,w,c
 14894  001FAC  6EF6               	movwf	tblptrl,c
 14895  001FAE  0EFE               	movlw	high __powers_
 14896  001FB0  2010               	addwfc	?i2___wmul+1,w,c
 14897  001FB2  6EF7               	movwf	tblptrh,c
 14898  001FB4                     	if	0	;There are less than 3 active tblptr bytes
 14899  001FB4                     	endif
 14900  001FB4  0009               	tblrd		*+
 14901  001FB6  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14902  001FBA  0009               	tblrd		*+
 14903  001FBC  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14904  001FC0  000A               	tblrd		*-
 14905  001FC2  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14906  001FC6  ECCE  F01F         	call	i2___ftmul	;wreg free
 14907  001FCA  D7A7               	goto	L12
 14908  001FCC                     i2l5882:
 14909                           
 14910                           ;doprnt.c: 440: return _powers_[scl];
 14911  001FCC  502A               	movf	i2scale@scl,w,c
 14912  001FCE  0D03               	mullw	3
 14913  001FD0  0E12               	movlw	low __powers_
 14914  001FD2  24F3               	addwf	prodl,w,c
 14915  001FD4  6EF6               	movwf	tblptrl,c
 14916  001FD6  0EFE               	movlw	high __powers_
 14917  001FD8  20F4               	addwfc	prodh,w,c
 14918  001FDA  6EF7               	movwf	tblptrh,c
 14919  001FDC                     	if	0	;There are less than 3 active tblptr bytes
 14920  001FDC                     	endif
 14921  001FDC  0009               	tblrd		*+
 14922  001FDE  CFF5 F024          	movff	tablat,?i2_scale
 14923  001FE2  0009               	tblrd		*+
 14924  001FE4  CFF5 F025          	movff	tablat,?i2_scale+1
 14925  001FE8  000A               	tblrd		*-
 14926  001FEA  CFF5 F026          	movff	tablat,?i2_scale+2
 14927  001FEE  0012               	return	
 14928  001FF0                     __end_ofi2_scale:
 14929                           	opt stack 0
 14930                           pclatu	equ	0xFFB
 14931                           pclath	equ	0xFFA
 14932                           tblptru	equ	0xFF8
 14933                           tblptrh	equ	0xFF7
 14934                           tblptrl	equ	0xFF6
 14935                           tablat	equ	0xFF5
 14936                           prodh	equ	0xFF4
 14937                           prodl	equ	0xFF3
 14938                           intcon	equ	0xFF2
 14939                           intcon3	equ	0xFF0
 14940                           postinc0	equ	0xFEE
 14941                           fsr0h	equ	0xFEA
 14942                           fsr0l	equ	0xFE9
 14943                           wreg	equ	0xFE8
 14944                           postdec1	equ	0xFE5
 14945                           fsr1h	equ	0xFE2
 14946                           fsr1l	equ	0xFE1
 14947                           indf2	equ	0xFDF
 14948                           postinc2	equ	0xFDE
 14949                           postdec2	equ	0xFDD
 14950                           fsr2h	equ	0xFDA
 14951                           fsr2l	equ	0xFD9
 14952                           status	equ	0xFD8
 14953                           
 14954 ;; *************** function i2_putch *****************
 14955 ;; Defined at:
 14956 ;;		line 35 in file "lcd.c"
 14957 ;; Parameters:    Size  Location     Type
 14958 ;;  data            1    wreg     unsigned char 
 14959 ;; Auto vars:     Size  Location     Type
 14960 ;;  data            1    4[COMRAM] unsigned char 
 14961 ;; Return value:  Size  Location     Type
 14962 ;;                  1    wreg      void 
 14963 ;; Registers used:
 14964 ;;		wreg, status,2, status,0, cstack
 14965 ;; Tracked objects:
 14966 ;;		On entry : 0/0
 14967 ;;		On exit  : 0/0
 14968 ;;		Unchanged: 0/0
 14969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14973 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14974 ;;Total ram usage:        1 bytes
 14975 ;; Hardware stack levels used:    1
 14976 ;; Hardware stack levels required when called:    3
 14977 ;; This function calls:
 14978 ;;		i2_lcdNewline
 14979 ;;		i2_lcdNibble
 14980 ;; This function is called by:
 14981 ;;		i2_printf
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           	psect	text47
 14986  0051D0                     __ptext47:
 14987                           	opt stack 0
 14988  0051D0                     i2_putch:
 14989                           	opt stack 18
 14990                           
 14991                           ;incstack = 0
 14992                           ;i2putch@data stored from wreg
 14993  0051D0  6E05               	movwf	i2putch@data,c
 14994                           
 14995                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 14996  0051D2  0E0A               	movlw	10
 14997  0051D4  1805               	xorwf	i2putch@data,w,c
 14998  0051D6  A4D8               	btfss	status,2,c
 14999  0051D8  D003               	goto	i2l186
 15000  0051DA  EC30  F029         	call	i2_lcdNewline	;wreg free
 15001  0051DE  0012               	return	
 15002  0051E0                     i2l186:
 15003                           
 15004                           ;lcd.c: 37: else
 15005                           ;lcd.c: 38: {
 15006                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 15007  0051E0  848C               	bsf	3980,2,c	;volatile
 15008                           
 15009                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
 15010  0051E2  0E74               	movlw	116
 15011  0051E4                     i2u789_47:
 15012  0051E4  2EE8               	decfsz	wreg,f,c
 15013  0051E6  D7FE               	bra	i2u789_47
 15014  0051E8  D000               	nop2	
 15015                           
 15016                           ;lcd.c: 41: lcdNibble(data);
 15017  0051EA  5005               	movf	i2putch@data,w,c
 15018  0051EC  EC60  F026         	call	i2_lcdNibble
 15019  0051F0  0012               	return	
 15020  0051F2                     __end_ofi2_putch:
 15021                           	opt stack 0
 15022                           pclatu	equ	0xFFB
 15023                           pclath	equ	0xFFA
 15024                           tblptru	equ	0xFF8
 15025                           tblptrh	equ	0xFF7
 15026                           tblptrl	equ	0xFF6
 15027                           tablat	equ	0xFF5
 15028                           prodh	equ	0xFF4
 15029                           prodl	equ	0xFF3
 15030                           intcon	equ	0xFF2
 15031                           intcon3	equ	0xFF0
 15032                           postinc0	equ	0xFEE
 15033                           fsr0h	equ	0xFEA
 15034                           fsr0l	equ	0xFE9
 15035                           wreg	equ	0xFE8
 15036                           postdec1	equ	0xFE5
 15037                           fsr1h	equ	0xFE2
 15038                           fsr1l	equ	0xFE1
 15039                           indf2	equ	0xFDF
 15040                           postinc2	equ	0xFDE
 15041                           postdec2	equ	0xFDD
 15042                           fsr2h	equ	0xFDA
 15043                           fsr2l	equ	0xFD9
 15044                           status	equ	0xFD8
 15045                           
 15046 ;; *************** function i2_lcdNewline *****************
 15047 ;; Defined at:
 15048 ;;		line 78 in file "lcd.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;		None
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;		None
 15053 ;; Return value:  Size  Location     Type
 15054 ;;                  1    wreg      void 
 15055 ;; Registers used:
 15056 ;;		wreg, status,2, status,0, cstack
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15066 ;;Total ram usage:        0 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; Hardware stack levels required when called:    2
 15069 ;; This function calls:
 15070 ;;		i2_lcdInst
 15071 ;; This function is called by:
 15072 ;;		i2_putch
 15073 ;; This function uses a non-reentrant model
 15074 ;;
 15075                           
 15076                           	psect	text48
 15077  005260                     __ptext48:
 15078                           	opt stack 0
 15079  005260                     i2_lcdNewline:
 15080                           	opt stack 18
 15081                           
 15082                           ;lcd.c: 79: lcdInst(0b11000000);
 15083                           
 15084                           ;incstack = 0
 15085  005260  0EC0               	movlw	192
 15086  005262  ECF9  F028         	call	i2_lcdInst
 15087  005266  0012               	return		;funcret
 15088  005268                     __end_ofi2_lcdNewline:
 15089                           	opt stack 0
 15090                           pclatu	equ	0xFFB
 15091                           pclath	equ	0xFFA
 15092                           tblptru	equ	0xFF8
 15093                           tblptrh	equ	0xFF7
 15094                           tblptrl	equ	0xFF6
 15095                           tablat	equ	0xFF5
 15096                           prodh	equ	0xFF4
 15097                           prodl	equ	0xFF3
 15098                           intcon	equ	0xFF2
 15099                           intcon3	equ	0xFF0
 15100                           postinc0	equ	0xFEE
 15101                           fsr0h	equ	0xFEA
 15102                           fsr0l	equ	0xFE9
 15103                           wreg	equ	0xFE8
 15104                           postdec1	equ	0xFE5
 15105                           fsr1h	equ	0xFE2
 15106                           fsr1l	equ	0xFE1
 15107                           indf2	equ	0xFDF
 15108                           postinc2	equ	0xFDE
 15109                           postdec2	equ	0xFDD
 15110                           fsr2h	equ	0xFDA
 15111                           fsr2l	equ	0xFD9
 15112                           status	equ	0xFD8
 15113                           
 15114 ;; *************** function i2_isdigit *****************
 15115 ;; Defined at:
 15116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15117 ;; Parameters:    Size  Location     Type
 15118 ;;  c               1    wreg     unsigned char 
 15119 ;; Auto vars:     Size  Location     Type
 15120 ;;  c               1    2[COMRAM] unsigned char 
 15121 ;; Return value:  Size  Location     Type
 15122 ;;		None               void
 15123 ;; Registers used:
 15124 ;;		wreg, status,2, status,0
 15125 ;; Tracked objects:
 15126 ;;		On entry : 0/0
 15127 ;;		On exit  : 0/0
 15128 ;;		Unchanged: 0/0
 15129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15134 ;;Total ram usage:        3 bytes
 15135 ;; Hardware stack levels used:    1
 15136 ;; This function calls:
 15137 ;;		Nothing
 15138 ;; This function is called by:
 15139 ;;		i2_printf
 15140 ;; This function uses a non-reentrant model
 15141 ;;
 15142                           
 15143                           	psect	text49
 15144  005214                     __ptext49:
 15145                           	opt stack 0
 15146  005214                     i2_isdigit:
 15147                           	opt stack 21
 15148                           
 15149                           ;incstack = 0
 15150                           ;i2isdigit@c stored from wreg
 15151  005214  6E03               	movwf	i2isdigit@c,c
 15152  005216  0E00               	movlw	0
 15153  005218  6E02               	movwf	i2_isdigit$966,c
 15154  00521A  0E3A               	movlw	58
 15155  00521C  6003               	cpfslt	i2isdigit@c,c
 15156  00521E  D005               	goto	i2l6086
 15157  005220  0E2F               	movlw	47
 15158  005222  6403               	cpfsgt	i2isdigit@c,c
 15159  005224  D002               	goto	i2l6086
 15160  005226  0E01               	movlw	1
 15161  005228  6E02               	movwf	i2_isdigit$966,c
 15162  00522A                     i2l6086:
 15163  00522A  C002  F001         	movff	i2_isdigit$966,??i2_isdigit
 15164  00522E  3001               	rrcf	??i2_isdigit,w,c
 15165  005230  0012               	return	
 15166  005232                     __end_ofi2_isdigit:
 15167                           	opt stack 0
 15168                           pclatu	equ	0xFFB
 15169                           pclath	equ	0xFFA
 15170                           tblptru	equ	0xFF8
 15171                           tblptrh	equ	0xFF7
 15172                           tblptrl	equ	0xFF6
 15173                           tablat	equ	0xFF5
 15174                           prodh	equ	0xFF4
 15175                           prodl	equ	0xFF3
 15176                           intcon	equ	0xFF2
 15177                           intcon3	equ	0xFF0
 15178                           postinc0	equ	0xFEE
 15179                           fsr0h	equ	0xFEA
 15180                           fsr0l	equ	0xFE9
 15181                           wreg	equ	0xFE8
 15182                           postdec1	equ	0xFE5
 15183                           fsr1h	equ	0xFE2
 15184                           fsr1l	equ	0xFE1
 15185                           indf2	equ	0xFDF
 15186                           postinc2	equ	0xFDE
 15187                           postdec2	equ	0xFDD
 15188                           fsr2h	equ	0xFDA
 15189                           fsr2l	equ	0xFD9
 15190                           status	equ	0xFD8
 15191                           
 15192 ;; *************** function i2_fround *****************
 15193 ;; Defined at:
 15194 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15195 ;; Parameters:    Size  Location     Type
 15196 ;;  prec            1    wreg     unsigned char 
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;  prec            1   44[COMRAM] unsigned char 
 15199 ;; Return value:  Size  Location     Type
 15200 ;;                  3   35[COMRAM] unsigned char 
 15201 ;; Registers used:
 15202 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15208 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15209 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15211 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15212 ;;Total ram usage:       10 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    2
 15215 ;; This function calls:
 15216 ;;		i2___awdiv
 15217 ;;		i2___awmod
 15218 ;;		i2___ftmul
 15219 ;;		i2___wmul
 15220 ;; This function is called by:
 15221 ;;		i2_printf
 15222 ;; This function uses a non-reentrant model
 15223 ;;
 15224                           
 15225                           	psect	text50
 15226  0028A0                     __ptext50:
 15227                           	opt stack 0
 15228  0028A0                     i2_fround:
 15229                           	opt stack 19
 15230                           
 15231                           ;incstack = 0
 15232                           ;i2fround@prec stored from wreg
 15233  0028A0  6E2D               	movwf	i2fround@prec,c
 15234                           
 15235                           ;doprnt.c: 413: if(prec>=110)
 15236  0028A2  0E6D               	movlw	109
 15237  0028A4  642D               	cpfsgt	i2fround@prec,c
 15238  0028A6  D09F               	goto	i2l5836
 15239                           
 15240                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15241  0028A8  0E00               	movlw	0
 15242  0028AA  6E12               	movwf	i2___wmul@multiplicand+1,c
 15243  0028AC  0E03               	movlw	3
 15244  0028AE  6E11               	movwf	i2___wmul@multiplicand,c
 15245  0028B0  0E00               	movlw	0
 15246  0028B2  6E0A               	movwf	i2___awdiv@divisor+1,c
 15247  0028B4  0E0A               	movlw	10
 15248  0028B6  6E09               	movwf	i2___awdiv@divisor,c
 15249  0028B8  0E00               	movlw	0
 15250  0028BA  6E04               	movwf	i2___awmod@divisor+1,c
 15251  0028BC  0E64               	movlw	100
 15252  0028BE  6E03               	movwf	i2___awmod@divisor,c
 15253  0028C0  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15254  0028C4  6A02               	clrf	i2___awmod@dividend+1,c
 15255  0028C6  ECF5  F025         	call	i2___awmod	;wreg free
 15256  0028CA  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 15257  0028CE  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 15258  0028D2  ECF8  F024         	call	i2___awdiv	;wreg free
 15259  0028D6  0E09               	movlw	9
 15260  0028D8  2407               	addwf	?i2___awdiv,w,c
 15261  0028DA  6E0F               	movwf	i2___wmul@multiplier,c
 15262  0028DC  0E00               	movlw	0
 15263  0028DE  2008               	addwfc	?i2___awdiv+1,w,c
 15264  0028E0  6E10               	movwf	i2___wmul@multiplier+1,c
 15265  0028E2  ECC3  F028         	call	i2___wmul	;wreg free
 15266  0028E6  0EEB               	movlw	low __npowers_
 15267  0028E8  240F               	addwf	?i2___wmul,w,c
 15268  0028EA  6EF6               	movwf	tblptrl,c
 15269  0028EC  0EFD               	movlw	high __npowers_
 15270  0028EE  2010               	addwfc	?i2___wmul+1,w,c
 15271  0028F0  6EF7               	movwf	tblptrh,c
 15272  0028F2                     	if	0	;There are less than 3 active tblptr bytes
 15273  0028F2                     	endif
 15274  0028F2  0009               	tblrd		*+
 15275  0028F4  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15276  0028F8  0009               	tblrd		*+
 15277  0028FA  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15278  0028FE  000A               	tblrd		*-
 15279  002900  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15280  002904  0E00               	movlw	0
 15281  002906  6E0A               	movwf	i2___awdiv@divisor+1,c
 15282  002908  0E64               	movlw	100
 15283  00290A  6E09               	movwf	i2___awdiv@divisor,c
 15284  00290C  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15285  002910  6A08               	clrf	i2___awdiv@dividend+1,c
 15286  002912  ECF8  F024         	call	i2___awdiv	;wreg free
 15287  002916  0E12               	movlw	18
 15288  002918  2407               	addwf	?i2___awdiv,w,c
 15289  00291A  6E0F               	movwf	i2___wmul@multiplier,c
 15290  00291C  0E00               	movlw	0
 15291  00291E  2008               	addwfc	?i2___awdiv+1,w,c
 15292  002920  6E10               	movwf	i2___wmul@multiplier+1,c
 15293  002922  0E00               	movlw	0
 15294  002924  6E12               	movwf	i2___wmul@multiplicand+1,c
 15295  002926  0E03               	movlw	3
 15296  002928  6E11               	movwf	i2___wmul@multiplicand,c
 15297  00292A  ECC3  F028         	call	i2___wmul	;wreg free
 15298  00292E  0EEB               	movlw	low __npowers_
 15299  002930  240F               	addwf	?i2___wmul,w,c
 15300  002932  6EF6               	movwf	tblptrl,c
 15301  002934  0EFD               	movlw	high __npowers_
 15302  002936  2010               	addwfc	?i2___wmul+1,w,c
 15303  002938  6EF7               	movwf	tblptrh,c
 15304  00293A                     	if	0	;There are less than 3 active tblptr bytes
 15305  00293A                     	endif
 15306  00293A  0009               	tblrd		*+
 15307  00293C  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15308  002940  0009               	tblrd		*+
 15309  002942  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15310  002946  000A               	tblrd		*-
 15311  002948  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15312  00294C  ECCE  F01F         	call	i2___ftmul	;wreg free
 15313  002950  C015  F02A         	movff	?i2___ftmul,i2_fround$1532
 15314  002954  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1532+1
 15315  002958  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1532+2
 15316                           
 15317                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15318  00295C  0E00               	movlw	0
 15319  00295E  6E12               	movwf	i2___wmul@multiplicand+1,c
 15320  002960  0E03               	movlw	3
 15321  002962  6E11               	movwf	i2___wmul@multiplicand,c
 15322  002964  0E00               	movlw	0
 15323  002966  6E04               	movwf	i2___awmod@divisor+1,c
 15324  002968  0E0A               	movlw	10
 15325  00296A  6E03               	movwf	i2___awmod@divisor,c
 15326  00296C  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15327  002970  6A02               	clrf	i2___awmod@dividend+1,c
 15328  002972  ECF5  F025         	call	i2___awmod	;wreg free
 15329  002976  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15330  00297A  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15331  00297E  ECC3  F028         	call	i2___wmul	;wreg free
 15332  002982  0EEB               	movlw	low __npowers_
 15333  002984  240F               	addwf	?i2___wmul,w,c
 15334  002986  6EF6               	movwf	tblptrl,c
 15335  002988  0EFD               	movlw	high __npowers_
 15336  00298A  2010               	addwfc	?i2___wmul+1,w,c
 15337  00298C  6EF7               	movwf	tblptrh,c
 15338  00298E                     	if	0	;There are less than 3 active tblptr bytes
 15339  00298E                     	endif
 15340  00298E  0009               	tblrd		*+
 15341  002990  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15342  002994  0009               	tblrd		*+
 15343  002996  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15344  00299A  000A               	tblrd		*-
 15345  00299C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15346  0029A0  C02A  F015         	movff	i2_fround$1532,i2___ftmul@f1
 15347  0029A4  C02B  F016         	movff	i2_fround$1532+1,i2___ftmul@f1+1
 15348  0029A8  C02C  F017         	movff	i2_fround$1532+2,i2___ftmul@f1+2
 15349  0029AC  ECCE  F01F         	call	i2___ftmul	;wreg free
 15350  0029B0  C015  F027         	movff	?i2___ftmul,i2_fround$1533
 15351  0029B4  C016  F028         	movff	?i2___ftmul+1,i2_fround$1533+1
 15352  0029B8  C017  F029         	movff	?i2___ftmul+2,i2_fround$1533+2
 15353                           
 15354                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15355  0029BC  C027  F015         	movff	i2_fround$1533,i2___ftmul@f1
 15356  0029C0  C028  F016         	movff	i2_fround$1533+1,i2___ftmul@f1+1
 15357  0029C4  C029  F017         	movff	i2_fround$1533+2,i2___ftmul@f1+2
 15358  0029C8  0E00               	movlw	0
 15359  0029CA  6E18               	movwf	i2___ftmul@f2,c
 15360  0029CC  0E00               	movlw	0
 15361  0029CE  6E19               	movwf	i2___ftmul@f2+1,c
 15362  0029D0  0E3F               	movlw	63
 15363  0029D2  6E1A               	movwf	i2___ftmul@f2+2,c
 15364  0029D4  ECCE  F01F         	call	i2___ftmul	;wreg free
 15365  0029D8  C015  F024         	movff	?i2___ftmul,?i2_fround
 15366  0029DC  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15367  0029E0  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15368  0029E4  0012               	return	
 15369  0029E6                     i2l5836:
 15370                           
 15371                           ;doprnt.c: 415: else if(prec > 10)
 15372  0029E6  0E0A               	movlw	10
 15373  0029E8  642D               	cpfsgt	i2fround@prec,c
 15374  0029EA  D05D               	goto	i2l5844
 15375                           
 15376                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15377  0029EC  0E00               	movlw	0
 15378  0029EE  6E12               	movwf	i2___wmul@multiplicand+1,c
 15379  0029F0  0E03               	movlw	3
 15380  0029F2  6E11               	movwf	i2___wmul@multiplicand,c
 15381  0029F4  0E00               	movlw	0
 15382  0029F6  6E04               	movwf	i2___awmod@divisor+1,c
 15383  0029F8  0E0A               	movlw	10
 15384  0029FA  6E03               	movwf	i2___awmod@divisor,c
 15385  0029FC  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15386  002A00  6A02               	clrf	i2___awmod@dividend+1,c
 15387  002A02  ECF5  F025         	call	i2___awmod	;wreg free
 15388  002A06  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15389  002A0A  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15390  002A0E  ECC3  F028         	call	i2___wmul	;wreg free
 15391  002A12  0EEB               	movlw	low __npowers_
 15392  002A14  240F               	addwf	?i2___wmul,w,c
 15393  002A16  6EF6               	movwf	tblptrl,c
 15394  002A18  0EFD               	movlw	high __npowers_
 15395  002A1A  2010               	addwfc	?i2___wmul+1,w,c
 15396  002A1C  6EF7               	movwf	tblptrh,c
 15397  002A1E                     	if	0	;There are less than 3 active tblptr bytes
 15398  002A1E                     	endif
 15399  002A1E  0009               	tblrd		*+
 15400  002A20  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15401  002A24  0009               	tblrd		*+
 15402  002A26  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15403  002A2A  000A               	tblrd		*-
 15404  002A2C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15405  002A30  0E00               	movlw	0
 15406  002A32  6E0A               	movwf	i2___awdiv@divisor+1,c
 15407  002A34  0E0A               	movlw	10
 15408  002A36  6E09               	movwf	i2___awdiv@divisor,c
 15409  002A38  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15410  002A3C  6A08               	clrf	i2___awdiv@dividend+1,c
 15411  002A3E  ECF8  F024         	call	i2___awdiv	;wreg free
 15412  002A42  0E09               	movlw	9
 15413  002A44  2407               	addwf	?i2___awdiv,w,c
 15414  002A46  6E0F               	movwf	i2___wmul@multiplier,c
 15415  002A48  0E00               	movlw	0
 15416  002A4A  2008               	addwfc	?i2___awdiv+1,w,c
 15417  002A4C  6E10               	movwf	i2___wmul@multiplier+1,c
 15418  002A4E  0E00               	movlw	0
 15419  002A50  6E12               	movwf	i2___wmul@multiplicand+1,c
 15420  002A52  0E03               	movlw	3
 15421  002A54  6E11               	movwf	i2___wmul@multiplicand,c
 15422  002A56  ECC3  F028         	call	i2___wmul	;wreg free
 15423  002A5A  0EEB               	movlw	low __npowers_
 15424  002A5C  240F               	addwf	?i2___wmul,w,c
 15425  002A5E  6EF6               	movwf	tblptrl,c
 15426  002A60  0EFD               	movlw	high __npowers_
 15427  002A62  2010               	addwfc	?i2___wmul+1,w,c
 15428  002A64  6EF7               	movwf	tblptrh,c
 15429  002A66                     	if	0	;There are less than 3 active tblptr bytes
 15430  002A66                     	endif
 15431  002A66  0009               	tblrd		*+
 15432  002A68  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15433  002A6C  0009               	tblrd		*+
 15434  002A6E  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15435  002A72  000A               	tblrd		*-
 15436  002A74  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15437  002A78  ECCE  F01F         	call	i2___ftmul	;wreg free
 15438  002A7C  C015  F02A         	movff	?i2___ftmul,i2_fround$1532
 15439  002A80  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1532+1
 15440  002A84  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1532+2
 15441                           
 15442                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15443  002A88  C02A  F015         	movff	i2_fround$1532,i2___ftmul@f1
 15444  002A8C  C02B  F016         	movff	i2_fround$1532+1,i2___ftmul@f1+1
 15445  002A90  C02C  F017         	movff	i2_fround$1532+2,i2___ftmul@f1+2
 15446  002A94  0E00               	movlw	0
 15447  002A96  6E18               	movwf	i2___ftmul@f2,c
 15448  002A98  0E00               	movlw	0
 15449  002A9A  6E19               	movwf	i2___ftmul@f2+1,c
 15450  002A9C  0E3F               	movlw	63
 15451  002A9E  6E1A               	movwf	i2___ftmul@f2+2,c
 15452  002AA0  ECCE  F01F         	call	i2___ftmul	;wreg free
 15453  002AA4  D799               	goto	L13
 15454  002AA6                     i2l5844:
 15455                           
 15456                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15457  002AA6  502D               	movf	i2fround@prec,w,c
 15458  002AA8  0D03               	mullw	3
 15459  002AAA  0EEB               	movlw	low __npowers_
 15460  002AAC  24F3               	addwf	prodl,w,c
 15461  002AAE  6EF6               	movwf	tblptrl,c
 15462  002AB0  0EFD               	movlw	high __npowers_
 15463  002AB2  20F4               	addwfc	prodh,w,c
 15464  002AB4  6EF7               	movwf	tblptrh,c
 15465  002AB6                     	if	0	;There are less than 3 active tblptr bytes
 15466  002AB6                     	endif
 15467  002AB6  0009               	tblrd		*+
 15468  002AB8  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15469  002ABC  0009               	tblrd		*+
 15470  002ABE  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15471  002AC2  000A               	tblrd		*-
 15472  002AC4  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15473  002AC8  0E00               	movlw	0
 15474  002ACA  6E18               	movwf	i2___ftmul@f2,c
 15475  002ACC  0E00               	movlw	0
 15476  002ACE  6E19               	movwf	i2___ftmul@f2+1,c
 15477  002AD0  0E3F               	movlw	63
 15478  002AD2  6E1A               	movwf	i2___ftmul@f2+2,c
 15479  002AD4  ECCE  F01F         	call	i2___ftmul	;wreg free
 15480  002AD8  C015  F024         	movff	?i2___ftmul,?i2_fround
 15481  002ADC  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15482  002AE0  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15483  002AE4  0012               	return	
 15484  002AE6                     __end_ofi2_fround:
 15485                           	opt stack 0
 15486                           pclatu	equ	0xFFB
 15487                           pclath	equ	0xFFA
 15488                           tblptru	equ	0xFF8
 15489                           tblptrh	equ	0xFF7
 15490                           tblptrl	equ	0xFF6
 15491                           tablat	equ	0xFF5
 15492                           prodh	equ	0xFF4
 15493                           prodl	equ	0xFF3
 15494                           intcon	equ	0xFF2
 15495                           intcon3	equ	0xFF0
 15496                           postinc0	equ	0xFEE
 15497                           fsr0h	equ	0xFEA
 15498                           fsr0l	equ	0xFE9
 15499                           wreg	equ	0xFE8
 15500                           postdec1	equ	0xFE5
 15501                           fsr1h	equ	0xFE2
 15502                           fsr1l	equ	0xFE1
 15503                           indf2	equ	0xFDF
 15504                           postinc2	equ	0xFDE
 15505                           postdec2	equ	0xFDD
 15506                           fsr2h	equ	0xFDA
 15507                           fsr2l	equ	0xFD9
 15508                           status	equ	0xFD8
 15509                           
 15510 ;; *************** function i2___wmul *****************
 15511 ;; Defined at:
 15512 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15513 ;; Parameters:    Size  Location     Type
 15514 ;;  multiplier      2   14[COMRAM] unsigned int 
 15515 ;;  multiplicand    2   16[COMRAM] unsigned int 
 15516 ;; Auto vars:     Size  Location     Type
 15517 ;;  __wmul          2   18[COMRAM] unsigned int 
 15518 ;; Return value:  Size  Location     Type
 15519 ;;                  2   14[COMRAM] unsigned int 
 15520 ;; Registers used:
 15521 ;;		wreg, status,2, status,0, prodl, prodh
 15522 ;; Tracked objects:
 15523 ;;		On entry : 0/0
 15524 ;;		On exit  : 0/0
 15525 ;;		Unchanged: 0/0
 15526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15530 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15531 ;;Total ram usage:        6 bytes
 15532 ;; Hardware stack levels used:    1
 15533 ;; This function calls:
 15534 ;;		Nothing
 15535 ;; This function is called by:
 15536 ;;		i2_fround
 15537 ;;		i2_scale
 15538 ;;		i2_printf
 15539 ;; This function uses a non-reentrant model
 15540 ;;
 15541                           
 15542                           	psect	text51
 15543  005186                     __ptext51:
 15544                           	opt stack 0
 15545  005186                     i2___wmul:
 15546                           	opt stack 20
 15547                           
 15548                           ;incstack = 0
 15549  005186  500F               	movf	i2___wmul@multiplier,w,c
 15550  005188  0211               	mulwf	i2___wmul@multiplicand,c
 15551  00518A  CFF3 F013          	movff	prodl,i2___wmul@product
 15552  00518E  CFF4 F014          	movff	prodh,i2___wmul@product+1
 15553  005192  500F               	movf	i2___wmul@multiplier,w,c
 15554  005194  0212               	mulwf	i2___wmul@multiplicand+1,c
 15555  005196  50F3               	movf	prodl,w,c
 15556  005198  2614               	addwf	i2___wmul@product+1,f,c
 15557  00519A  5010               	movf	i2___wmul@multiplier+1,w,c
 15558  00519C  0211               	mulwf	i2___wmul@multiplicand,c
 15559  00519E  50F3               	movf	prodl,w,c
 15560  0051A0  2614               	addwf	i2___wmul@product+1,f,c
 15561  0051A2  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 15562  0051A6  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 15563  0051AA  0012               	return	
 15564  0051AC                     __end_ofi2___wmul:
 15565                           	opt stack 0
 15566                           pclatu	equ	0xFFB
 15567                           pclath	equ	0xFFA
 15568                           tblptru	equ	0xFF8
 15569                           tblptrh	equ	0xFF7
 15570                           tblptrl	equ	0xFF6
 15571                           tablat	equ	0xFF5
 15572                           prodh	equ	0xFF4
 15573                           prodl	equ	0xFF3
 15574                           intcon	equ	0xFF2
 15575                           intcon3	equ	0xFF0
 15576                           postinc0	equ	0xFEE
 15577                           fsr0h	equ	0xFEA
 15578                           fsr0l	equ	0xFE9
 15579                           wreg	equ	0xFE8
 15580                           postdec1	equ	0xFE5
 15581                           fsr1h	equ	0xFE2
 15582                           fsr1l	equ	0xFE1
 15583                           indf2	equ	0xFDF
 15584                           postinc2	equ	0xFDE
 15585                           postdec2	equ	0xFDD
 15586                           fsr2h	equ	0xFDA
 15587                           fsr2l	equ	0xFD9
 15588                           status	equ	0xFD8
 15589                           
 15590 ;; *************** function i2___ftmul *****************
 15591 ;; Defined at:
 15592 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 15593 ;; Parameters:    Size  Location     Type
 15594 ;;  f1              3   20[COMRAM] float 
 15595 ;;  f2              3   23[COMRAM] float 
 15596 ;; Auto vars:     Size  Location     Type
 15597 ;;  __ftmul         3   30[COMRAM] unsigned um
 15598 ;;  __ftmul         1   34[COMRAM] unsigned char 
 15599 ;;  __ftmul         1   33[COMRAM] unsigned char 
 15600 ;;  __ftmul         1   29[COMRAM] unsigned char 
 15601 ;; Return value:  Size  Location     Type
 15602 ;;                  3   20[COMRAM] float 
 15603 ;; Registers used:
 15604 ;;		wreg, status,2, status,0, cstack
 15605 ;; Tracked objects:
 15606 ;;		On entry : 0/0
 15607 ;;		On exit  : 0/0
 15608 ;;		Unchanged: 0/0
 15609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15610 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15611 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15612 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15613 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15614 ;;Total ram usage:       15 bytes
 15615 ;; Hardware stack levels used:    1
 15616 ;; Hardware stack levels required when called:    1
 15617 ;; This function calls:
 15618 ;;		i2___ftpack
 15619 ;; This function is called by:
 15620 ;;		i2_fround
 15621 ;;		i2_scale
 15622 ;;		i2_printf
 15623 ;; This function uses a non-reentrant model
 15624 ;;
 15625                           
 15626                           	psect	text52
 15627  003F9C                     __ptext52:
 15628                           	opt stack 0
 15629  003F9C                     i2___ftmul:
 15630                           	opt stack 19
 15631                           
 15632                           ;incstack = 0
 15633  003F9C  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 15634  003FA0  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 15635  003FA2  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 15636  003FA4  3416               	rlcf	i2___ftmul@f1+1,w,c
 15637  003FA6  361B               	rlcf	??i2___ftmul& (0+255),f,c
 15638  003FA8  E301               	bnc	u600_41
 15639  003FAA  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15640  003FAC                     u600_41:
 15641  003FAC  501B               	movf	??i2___ftmul,w,c
 15642  003FAE  6E1E               	movwf	i2___ftmul@exp,c
 15643  003FB0  501E               	movf	i2___ftmul@exp,w,c
 15644  003FB2  A4D8               	btfss	status,2,c
 15645  003FB4  D007               	goto	i2l5588
 15646  003FB6  0E00               	movlw	0
 15647  003FB8  6E15               	movwf	?i2___ftmul,c
 15648  003FBA  0E00               	movlw	0
 15649  003FBC  6E16               	movwf	?i2___ftmul+1,c
 15650  003FBE  0E00               	movlw	0
 15651  003FC0  6E17               	movwf	?i2___ftmul+2,c
 15652  003FC2  0012               	return	
 15653  003FC4                     i2l5588:
 15654  003FC4  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 15655  003FC8  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 15656  003FCA  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 15657  003FCC  3419               	rlcf	i2___ftmul@f2+1,w,c
 15658  003FCE  361B               	rlcf	??i2___ftmul& (0+255),f,c
 15659  003FD0  E301               	bnc	u602_41
 15660  003FD2  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15661  003FD4                     u602_41:
 15662  003FD4  501B               	movf	??i2___ftmul,w,c
 15663  003FD6  6E23               	movwf	i2___ftmul@sign,c
 15664  003FD8  5023               	movf	i2___ftmul@sign,w,c
 15665  003FDA  A4D8               	btfss	status,2,c
 15666  003FDC  D007               	goto	i2l5594
 15667  003FDE  0E00               	movlw	0
 15668  003FE0  6E15               	movwf	?i2___ftmul,c
 15669  003FE2  0E00               	movlw	0
 15670  003FE4  6E16               	movwf	?i2___ftmul+1,c
 15671  003FE6  0E00               	movlw	0
 15672  003FE8  6E17               	movwf	?i2___ftmul+2,c
 15673  003FEA  0012               	return	
 15674  003FEC                     i2l5594:
 15675  003FEC  5023               	movf	i2___ftmul@sign,w,c
 15676  003FEE  0F7B               	addlw	123
 15677  003FF0  261E               	addwf	i2___ftmul@exp,f,c
 15678  003FF2  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 15679  003FF6  501A               	movf	i2___ftmul@f2+2,w,c
 15680  003FF8  1A23               	xorwf	i2___ftmul@sign,f,c
 15681  003FFA  0E80               	movlw	128
 15682  003FFC  1623               	andwf	i2___ftmul@sign,f,c
 15683  003FFE  8E16               	bsf	i2___ftmul@f1+1,7,c
 15684  004000  8E19               	bsf	i2___ftmul@f2+1,7,c
 15685  004002  0EFF               	movlw	255
 15686  004004  1618               	andwf	i2___ftmul@f2,f,c
 15687  004006  0EFF               	movlw	255
 15688  004008  1619               	andwf	i2___ftmul@f2+1,f,c
 15689  00400A  0E00               	movlw	0
 15690  00400C  161A               	andwf	i2___ftmul@f2+2,f,c
 15691  00400E  0E00               	movlw	0
 15692  004010  6E1F               	movwf	i2___ftmul@f3_as_product,c
 15693  004012  0E00               	movlw	0
 15694  004014  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 15695  004016  0E00               	movlw	0
 15696  004018  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 15697  00401A  0E07               	movlw	7
 15698  00401C  6E22               	movwf	i2___ftmul@cntr,c
 15699  00401E                     i2l5608:
 15700  00401E  A015               	btfss	i2___ftmul@f1,0,c
 15701  004020  D006               	goto	i2l5612
 15702  004022  5018               	movf	i2___ftmul@f2,w,c
 15703  004024  261F               	addwf	i2___ftmul@f3_as_product,f,c
 15704  004026  5019               	movf	i2___ftmul@f2+1,w,c
 15705  004028  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15706  00402A  501A               	movf	i2___ftmul@f2+2,w,c
 15707  00402C  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15708  00402E                     i2l5612:
 15709  00402E  90D8               	bcf	status,0,c
 15710  004030  3217               	rrcf	i2___ftmul@f1+2,f,c
 15711  004032  3216               	rrcf	i2___ftmul@f1+1,f,c
 15712  004034  3215               	rrcf	i2___ftmul@f1,f,c
 15713  004036  90D8               	bcf	status,0,c
 15714  004038  3618               	rlcf	i2___ftmul@f2,f,c
 15715  00403A  3619               	rlcf	i2___ftmul@f2+1,f,c
 15716  00403C  361A               	rlcf	i2___ftmul@f2+2,f,c
 15717  00403E  2E22               	decfsz	i2___ftmul@cntr,f,c
 15718  004040  D7EE               	goto	i2l5608
 15719  004042  0E09               	movlw	9
 15720  004044  6E22               	movwf	i2___ftmul@cntr,c
 15721  004046                     i2l5618:
 15722  004046  A015               	btfss	i2___ftmul@f1,0,c
 15723  004048  D006               	goto	i2l5622
 15724  00404A  5018               	movf	i2___ftmul@f2,w,c
 15725  00404C  261F               	addwf	i2___ftmul@f3_as_product,f,c
 15726  00404E  5019               	movf	i2___ftmul@f2+1,w,c
 15727  004050  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15728  004052  501A               	movf	i2___ftmul@f2+2,w,c
 15729  004054  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15730  004056                     i2l5622:
 15731  004056  90D8               	bcf	status,0,c
 15732  004058  3217               	rrcf	i2___ftmul@f1+2,f,c
 15733  00405A  3216               	rrcf	i2___ftmul@f1+1,f,c
 15734  00405C  3215               	rrcf	i2___ftmul@f1,f,c
 15735  00405E  90D8               	bcf	status,0,c
 15736  004060  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 15737  004062  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 15738  004064  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 15739  004066  2E22               	decfsz	i2___ftmul@cntr,f,c
 15740  004068  D7EE               	goto	i2l5618
 15741  00406A  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 15742  00406E  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 15743  004072  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 15744  004076  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 15745  00407A  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 15746  00407E  EC26  F023         	call	i2___ftpack	;wreg free
 15747  004082  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 15748  004086  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 15749  00408A  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 15750  00408E  0012               	return	
 15751  004090                     __end_ofi2___ftmul:
 15752                           	opt stack 0
 15753                           pclatu	equ	0xFFB
 15754                           pclath	equ	0xFFA
 15755                           tblptru	equ	0xFF8
 15756                           tblptrh	equ	0xFF7
 15757                           tblptrl	equ	0xFF6
 15758                           tablat	equ	0xFF5
 15759                           prodh	equ	0xFF4
 15760                           prodl	equ	0xFF3
 15761                           intcon	equ	0xFF2
 15762                           intcon3	equ	0xFF0
 15763                           postinc0	equ	0xFEE
 15764                           fsr0h	equ	0xFEA
 15765                           fsr0l	equ	0xFE9
 15766                           wreg	equ	0xFE8
 15767                           postdec1	equ	0xFE5
 15768                           fsr1h	equ	0xFE2
 15769                           fsr1l	equ	0xFE1
 15770                           indf2	equ	0xFDF
 15771                           postinc2	equ	0xFDE
 15772                           postdec2	equ	0xFDD
 15773                           fsr2h	equ	0xFDA
 15774                           fsr2l	equ	0xFD9
 15775                           status	equ	0xFD8
 15776                           
 15777 ;; *************** function i2___awdiv *****************
 15778 ;; Defined at:
 15779 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 15780 ;; Parameters:    Size  Location     Type
 15781 ;;  dividend        2    6[COMRAM] int 
 15782 ;;  divisor         2    8[COMRAM] int 
 15783 ;; Auto vars:     Size  Location     Type
 15784 ;;  __awdiv         2   12[COMRAM] int 
 15785 ;;  __awdiv         1   11[COMRAM] unsigned char 
 15786 ;;  __awdiv         1   10[COMRAM] unsigned char 
 15787 ;; Return value:  Size  Location     Type
 15788 ;;                  2    6[COMRAM] int 
 15789 ;; Registers used:
 15790 ;;		wreg, status,2, status,0
 15791 ;; Tracked objects:
 15792 ;;		On entry : 0/0
 15793 ;;		On exit  : 0/0
 15794 ;;		Unchanged: 0/0
 15795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15796 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15797 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15799 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15800 ;;Total ram usage:        8 bytes
 15801 ;; Hardware stack levels used:    1
 15802 ;; This function calls:
 15803 ;;		Nothing
 15804 ;; This function is called by:
 15805 ;;		i2_fround
 15806 ;;		i2_scale
 15807 ;;		i2_printf
 15808 ;; This function uses a non-reentrant model
 15809 ;;
 15810                           
 15811                           	psect	text53
 15812  0049F0                     __ptext53:
 15813                           	opt stack 0
 15814  0049F0                     i2___awdiv:
 15815                           	opt stack 20
 15816                           
 15817                           ;incstack = 0
 15818  0049F0  0E00               	movlw	0
 15819  0049F2  6E0C               	movwf	i2___awdiv@sign,c
 15820  0049F4  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 15821  0049F6  D006               	goto	i2l5440
 15822  0049F8  6C09               	negf	i2___awdiv@divisor,c
 15823  0049FA  1E0A               	comf	i2___awdiv@divisor+1,f,c
 15824  0049FC  B0D8               	btfsc	status,0,c
 15825  0049FE  2A0A               	incf	i2___awdiv@divisor+1,f,c
 15826  004A00  0E01               	movlw	1
 15827  004A02  6E0C               	movwf	i2___awdiv@sign,c
 15828  004A04                     i2l5440:
 15829  004A04  AE08               	btfss	i2___awdiv@dividend+1,7,c
 15830  004A06  D006               	goto	i2l5446
 15831  004A08  6C07               	negf	i2___awdiv@dividend,c
 15832  004A0A  1E08               	comf	i2___awdiv@dividend+1,f,c
 15833  004A0C  B0D8               	btfsc	status,0,c
 15834  004A0E  2A08               	incf	i2___awdiv@dividend+1,f,c
 15835  004A10  0E01               	movlw	1
 15836  004A12  1A0C               	xorwf	i2___awdiv@sign,f,c
 15837  004A14                     i2l5446:
 15838  004A14  0E00               	movlw	0
 15839  004A16  6E0E               	movwf	i2___awdiv@quotient+1,c
 15840  004A18  0E00               	movlw	0
 15841  004A1A  6E0D               	movwf	i2___awdiv@quotient,c
 15842  004A1C  5009               	movf	i2___awdiv@divisor,w,c
 15843  004A1E  100A               	iorwf	i2___awdiv@divisor+1,w,c
 15844  004A20  B4D8               	btfsc	status,2,c
 15845  004A22  D01C               	goto	i2l5468
 15846  004A24  0E01               	movlw	1
 15847  004A26  6E0B               	movwf	i2___awdiv@counter,c
 15848  004A28  D004               	goto	i2l5454
 15849  004A2A                     i2l5452:
 15850  004A2A  90D8               	bcf	status,0,c
 15851  004A2C  3609               	rlcf	i2___awdiv@divisor,f,c
 15852  004A2E  360A               	rlcf	i2___awdiv@divisor+1,f,c
 15853  004A30  2A0B               	incf	i2___awdiv@counter,f,c
 15854  004A32                     i2l5454:
 15855  004A32  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 15856  004A34  D7FA               	goto	i2l5452
 15857  004A36                     i2l5456:
 15858  004A36  90D8               	bcf	status,0,c
 15859  004A38  360D               	rlcf	i2___awdiv@quotient,f,c
 15860  004A3A  360E               	rlcf	i2___awdiv@quotient+1,f,c
 15861  004A3C  5009               	movf	i2___awdiv@divisor,w,c
 15862  004A3E  5C07               	subwf	i2___awdiv@dividend,w,c
 15863  004A40  500A               	movf	i2___awdiv@divisor+1,w,c
 15864  004A42  5808               	subwfb	i2___awdiv@dividend+1,w,c
 15865  004A44  A0D8               	btfss	status,0,c
 15866  004A46  D005               	goto	i2l5464
 15867  004A48  5009               	movf	i2___awdiv@divisor,w,c
 15868  004A4A  5E07               	subwf	i2___awdiv@dividend,f,c
 15869  004A4C  500A               	movf	i2___awdiv@divisor+1,w,c
 15870  004A4E  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 15871  004A50  800D               	bsf	i2___awdiv@quotient,0,c
 15872  004A52                     i2l5464:
 15873  004A52  90D8               	bcf	status,0,c
 15874  004A54  320A               	rrcf	i2___awdiv@divisor+1,f,c
 15875  004A56  3209               	rrcf	i2___awdiv@divisor,f,c
 15876  004A58  2E0B               	decfsz	i2___awdiv@counter,f,c
 15877  004A5A  D7ED               	goto	i2l5456
 15878  004A5C                     i2l5468:
 15879  004A5C  500C               	movf	i2___awdiv@sign,w,c
 15880  004A5E  B4D8               	btfsc	status,2,c
 15881  004A60  D004               	goto	i2l5472
 15882  004A62  6C0D               	negf	i2___awdiv@quotient,c
 15883  004A64  1E0E               	comf	i2___awdiv@quotient+1,f,c
 15884  004A66  B0D8               	btfsc	status,0,c
 15885  004A68  2A0E               	incf	i2___awdiv@quotient+1,f,c
 15886  004A6A                     i2l5472:
 15887  004A6A  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 15888  004A6E  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 15889  004A72  0012               	return	
 15890  004A74                     __end_ofi2___awdiv:
 15891                           	opt stack 0
 15892                           pclatu	equ	0xFFB
 15893                           pclath	equ	0xFFA
 15894                           tblptru	equ	0xFF8
 15895                           tblptrh	equ	0xFF7
 15896                           tblptrl	equ	0xFF6
 15897                           tablat	equ	0xFF5
 15898                           prodh	equ	0xFF4
 15899                           prodl	equ	0xFF3
 15900                           intcon	equ	0xFF2
 15901                           intcon3	equ	0xFF0
 15902                           postinc0	equ	0xFEE
 15903                           fsr0h	equ	0xFEA
 15904                           fsr0l	equ	0xFE9
 15905                           wreg	equ	0xFE8
 15906                           postdec1	equ	0xFE5
 15907                           fsr1h	equ	0xFE2
 15908                           fsr1l	equ	0xFE1
 15909                           indf2	equ	0xFDF
 15910                           postinc2	equ	0xFDE
 15911                           postdec2	equ	0xFDD
 15912                           fsr2h	equ	0xFDA
 15913                           fsr2l	equ	0xFD9
 15914                           status	equ	0xFD8
 15915                           
 15916 ;; *************** function i2__tdiv_to_l_ *****************
 15917 ;; Defined at:
 15918 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 15919 ;; Parameters:    Size  Location     Type
 15920 ;;  f1              3    0[COMRAM] float 
 15921 ;;  f2              3    3[COMRAM] float 
 15922 ;; Auto vars:     Size  Location     Type
 15923 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 15924 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 15925 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 15926 ;; Return value:  Size  Location     Type
 15927 ;;                  4    0[COMRAM] unsigned long 
 15928 ;; Registers used:
 15929 ;;		wreg, status,2, status,0
 15930 ;; Tracked objects:
 15931 ;;		On entry : 0/0
 15932 ;;		On exit  : 0/0
 15933 ;;		Unchanged: 0/0
 15934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15935 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15936 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15937 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15938 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15939 ;;Total ram usage:       15 bytes
 15940 ;; Hardware stack levels used:    1
 15941 ;; This function calls:
 15942 ;;		Nothing
 15943 ;; This function is called by:
 15944 ;;		i2_printf
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           	psect	text54
 15949  0037EE                     __ptext54:
 15950                           	opt stack 0
 15951  0037EE                     i2__tdiv_to_l_:
 15952                           	opt stack 21
 15953                           
 15954                           ;incstack = 0
 15955  0037EE  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 15956  0037F2  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15957  0037F4  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15958  0037F6  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 15959  0037F8  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15960  0037FA  E301               	bnc	u642_41
 15961  0037FC  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15962  0037FE                     u642_41:
 15963  0037FE  5007               	movf	??i2__tdiv_to_l_,w,c
 15964  003800  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 15965  003802  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15966  003804  A4D8               	btfss	status,2,c
 15967  003806  D009               	goto	i2l5952
 15968  003808  0E00               	movlw	0
 15969  00380A  6E01               	movwf	?i2__tdiv_to_l_,c
 15970  00380C  0E00               	movlw	0
 15971  00380E  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15972  003810  0E00               	movlw	0
 15973  003812  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15974  003814  0E00               	movlw	0
 15975  003816  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15976  003818  0012               	return	
 15977  00381A                     i2l5952:
 15978  00381A  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 15979  00381E  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15980  003820  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15981  003822  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 15982  003824  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15983  003826  E301               	bnc	u644_41
 15984  003828  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15985  00382A                     u644_41:
 15986  00382A  5007               	movf	??i2__tdiv_to_l_,w,c
 15987  00382C  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15988  00382E  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15989  003830  A4D8               	btfss	status,2,c
 15990  003832  D009               	goto	i2l5958
 15991  003834  0E00               	movlw	0
 15992  003836  6E01               	movwf	?i2__tdiv_to_l_,c
 15993  003838  0E00               	movlw	0
 15994  00383A  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15995  00383C  0E00               	movlw	0
 15996  00383E  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15997  003840  0E00               	movlw	0
 15998  003842  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15999  003844  0012               	return	
 16000  003846                     i2l5958:
 16001  003846  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 16002  003848  0EFF               	movlw	255
 16003  00384A  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 16004  00384C  0EFF               	movlw	255
 16005  00384E  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 16006  003850  0E00               	movlw	0
 16007  003852  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 16008  003854  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 16009  003856  0EFF               	movlw	255
 16010  003858  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 16011  00385A  0EFF               	movlw	255
 16012  00385C  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 16013  00385E  0E00               	movlw	0
 16014  003860  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 16015  003862  0E00               	movlw	0
 16016  003864  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 16017  003866  0E00               	movlw	0
 16018  003868  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 16019  00386A  0E00               	movlw	0
 16020  00386C  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 16021  00386E  0E00               	movlw	0
 16022  003870  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 16023  003872  0E7F               	movlw	127
 16024  003874  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 16025  003876  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 16026  003878  0F98               	addlw	152
 16027  00387A  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 16028  00387C  0E18               	movlw	24
 16029  00387E  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 16030  003880                     i2l1088:
 16031  003880  90D8               	bcf	status,0,c
 16032  003882  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 16033  003884  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 16034  003886  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 16035  003888  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 16036  00388A  5004               	movf	i2__tdiv_to_l_@f2,w,c
 16037  00388C  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 16038  00388E  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 16039  003890  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 16040  003892  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 16041  003894  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 16042  003896  A0D8               	btfss	status,0,c
 16043  003898  D007               	goto	i2l1089
 16044  00389A  5004               	movf	i2__tdiv_to_l_@f2,w,c
 16045  00389C  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 16046  00389E  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 16047  0038A0  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 16048  0038A2  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 16049  0038A4  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 16050  0038A6  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 16051  0038A8                     i2l1089:
 16052  0038A8  90D8               	bcf	status,0,c
 16053  0038AA  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 16054  0038AC  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 16055  0038AE  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 16056  0038B0  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 16057  0038B2  D7E6               	goto	i2l1088
 16058  0038B4  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 16059  0038B6  D016               	goto	i2l5992
 16060  0038B8  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 16061  0038BA  0A80               	xorlw	128
 16062  0038BC  0F97               	addlw	151
 16063  0038BE  B0D8               	btfsc	status,0,c
 16064  0038C0  D009               	goto	i2l5988
 16065  0038C2  0E00               	movlw	0
 16066  0038C4  6E01               	movwf	?i2__tdiv_to_l_,c
 16067  0038C6  0E00               	movlw	0
 16068  0038C8  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16069  0038CA  0E00               	movlw	0
 16070  0038CC  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16071  0038CE  0E00               	movlw	0
 16072  0038D0  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16073  0038D2  0012               	return	
 16074  0038D4                     i2l5988:
 16075  0038D4  90D8               	bcf	status,0,c
 16076  0038D6  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 16077  0038D8  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 16078  0038DA  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 16079  0038DC  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 16080  0038DE  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 16081  0038E0  D7F9               	goto	i2l5988
 16082  0038E2  D015               	goto	i2l1095
 16083  0038E4                     i2l5992:
 16084  0038E4  0E17               	movlw	23
 16085  0038E6  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 16086  0038E8  D00F               	goto	i2l6000
 16087  0038EA  0E00               	movlw	0
 16088  0038EC  6E01               	movwf	?i2__tdiv_to_l_,c
 16089  0038EE  0E00               	movlw	0
 16090  0038F0  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16091  0038F2  0E00               	movlw	0
 16092  0038F4  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16093  0038F6  0E00               	movlw	0
 16094  0038F8  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16095  0038FA  0012               	return	
 16096  0038FC                     i2l5998:
 16097  0038FC  90D8               	bcf	status,0,c
 16098  0038FE  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 16099  003900  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 16100  003902  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 16101  003904  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 16102  003906  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 16103  003908                     i2l6000:
 16104  003908  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 16105  00390A  A4D8               	btfss	status,2,c
 16106  00390C  D7F7               	goto	i2l5998
 16107  00390E                     i2l1095:
 16108  00390E  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 16109  003912  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 16110  003916  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 16111  00391A  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 16112  00391E  0012               	return		;funcret
 16113  003920                     __end_ofi2__tdiv_to_l_:
 16114                           	opt stack 0
 16115                           pclatu	equ	0xFFB
 16116                           pclath	equ	0xFFA
 16117                           tblptru	equ	0xFF8
 16118                           tblptrh	equ	0xFF7
 16119                           tblptrl	equ	0xFF6
 16120                           tablat	equ	0xFF5
 16121                           prodh	equ	0xFF4
 16122                           prodl	equ	0xFF3
 16123                           intcon	equ	0xFF2
 16124                           intcon3	equ	0xFF0
 16125                           postinc0	equ	0xFEE
 16126                           fsr0h	equ	0xFEA
 16127                           fsr0l	equ	0xFE9
 16128                           wreg	equ	0xFE8
 16129                           postdec1	equ	0xFE5
 16130                           fsr1h	equ	0xFE2
 16131                           fsr1l	equ	0xFE1
 16132                           indf2	equ	0xFDF
 16133                           postinc2	equ	0xFDE
 16134                           postdec2	equ	0xFDD
 16135                           fsr2h	equ	0xFDA
 16136                           fsr2l	equ	0xFD9
 16137                           status	equ	0xFD8
 16138                           
 16139 ;; *************** function i2__div_to_l_ *****************
 16140 ;; Defined at:
 16141 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 16142 ;; Parameters:    Size  Location     Type
 16143 ;;  f1              3    0[COMRAM] unsigned long 
 16144 ;;  f2              3    3[COMRAM] unsigned long 
 16145 ;; Auto vars:     Size  Location     Type
 16146 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 16147 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 16148 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 16149 ;; Return value:  Size  Location     Type
 16150 ;;                  4    0[COMRAM] unsigned long 
 16151 ;; Registers used:
 16152 ;;		wreg, status,2, status,0
 16153 ;; Tracked objects:
 16154 ;;		On entry : 0/0
 16155 ;;		On exit  : 0/0
 16156 ;;		Unchanged: 0/0
 16157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16158 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16159 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16161 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16162 ;;Total ram usage:       12 bytes
 16163 ;; Hardware stack levels used:    1
 16164 ;; This function calls:
 16165 ;;		Nothing
 16166 ;; This function is called by:
 16167 ;;		i2_printf
 16168 ;; This function uses a non-reentrant model
 16169 ;;
 16170                           
 16171                           	psect	text55
 16172  003A50                     __ptext55:
 16173                           	opt stack 0
 16174  003A50                     i2__div_to_l_:
 16175                           	opt stack 21
 16176                           
 16177                           ;incstack = 0
 16178  003A50  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 16179  003A52  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 16180  003A54  6E0C               	movwf	i2__div_to_l_@exp1,c
 16181  003A56  500C               	movf	i2__div_to_l_@exp1,w,c
 16182  003A58  A4D8               	btfss	status,2,c
 16183  003A5A  D009               	goto	i2l5892
 16184  003A5C  0E00               	movlw	0
 16185  003A5E  6E01               	movwf	?i2__div_to_l_,c
 16186  003A60  0E00               	movlw	0
 16187  003A62  6E02               	movwf	?i2__div_to_l_+1,c
 16188  003A64  0E00               	movlw	0
 16189  003A66  6E03               	movwf	?i2__div_to_l_+2,c
 16190  003A68  0E00               	movlw	0
 16191  003A6A  6E04               	movwf	?i2__div_to_l_+3,c
 16192  003A6C  0012               	return	
 16193  003A6E                     i2l5892:
 16194  003A6E  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 16195  003A70  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 16196  003A72  6E0B               	movwf	i2__div_to_l_@cntr,c
 16197  003A74  500B               	movf	i2__div_to_l_@cntr,w,c
 16198  003A76  A4D8               	btfss	status,2,c
 16199  003A78  D009               	goto	i2l5898
 16200  003A7A  0E00               	movlw	0
 16201  003A7C  6E01               	movwf	?i2__div_to_l_,c
 16202  003A7E  0E00               	movlw	0
 16203  003A80  6E02               	movwf	?i2__div_to_l_+1,c
 16204  003A82  0E00               	movlw	0
 16205  003A84  6E03               	movwf	?i2__div_to_l_+2,c
 16206  003A86  0E00               	movlw	0
 16207  003A88  6E04               	movwf	?i2__div_to_l_+3,c
 16208  003A8A  0012               	return	
 16209  003A8C                     i2l5898:
 16210  003A8C  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 16211  003A8E  0EFF               	movlw	255
 16212  003A90  1601               	andwf	i2__div_to_l_@f1,f,c
 16213  003A92  0EFF               	movlw	255
 16214  003A94  1602               	andwf	i2__div_to_l_@f1+1,f,c
 16215  003A96  0EFF               	movlw	255
 16216  003A98  1603               	andwf	i2__div_to_l_@f1+2,f,c
 16217  003A9A  0E00               	movlw	0
 16218  003A9C  1604               	andwf	i2__div_to_l_@f1+3,f,c
 16219  003A9E  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 16220  003AA0  0EFF               	movlw	255
 16221  003AA2  1604               	andwf	i2__div_to_l_@f2,f,c
 16222  003AA4  0EFF               	movlw	255
 16223  003AA6  1605               	andwf	i2__div_to_l_@f2+1,f,c
 16224  003AA8  0EFF               	movlw	255
 16225  003AAA  1606               	andwf	i2__div_to_l_@f2+2,f,c
 16226  003AAC  0E00               	movlw	0
 16227  003AAE  1607               	andwf	i2__div_to_l_@f2+3,f,c
 16228  003AB0  0E00               	movlw	0
 16229  003AB2  6E07               	movwf	i2__div_to_l_@quot,c
 16230  003AB4  0E00               	movlw	0
 16231  003AB6  6E08               	movwf	i2__div_to_l_@quot+1,c
 16232  003AB8  0E00               	movlw	0
 16233  003ABA  6E09               	movwf	i2__div_to_l_@quot+2,c
 16234  003ABC  0E00               	movlw	0
 16235  003ABE  6E0A               	movwf	i2__div_to_l_@quot+3,c
 16236  003AC0  0E7F               	movlw	127
 16237  003AC2  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 16238  003AC4  500B               	movf	i2__div_to_l_@cntr,w,c
 16239  003AC6  0FA0               	addlw	160
 16240  003AC8  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 16241  003ACA  0E20               	movlw	32
 16242  003ACC  6E0B               	movwf	i2__div_to_l_@cntr,c
 16243  003ACE                     i2l5912:
 16244  003ACE  90D8               	bcf	status,0,c
 16245  003AD0  3607               	rlcf	i2__div_to_l_@quot,f,c
 16246  003AD2  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 16247  003AD4  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 16248  003AD6  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 16249  003AD8  5004               	movf	i2__div_to_l_@f2,w,c
 16250  003ADA  5C01               	subwf	i2__div_to_l_@f1,w,c
 16251  003ADC  5005               	movf	i2__div_to_l_@f2+1,w,c
 16252  003ADE  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 16253  003AE0  5006               	movf	i2__div_to_l_@f2+2,w,c
 16254  003AE2  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 16255  003AE4  5007               	movf	i2__div_to_l_@f2+3,w,c
 16256  003AE6  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 16257  003AE8  A0D8               	btfss	status,0,c
 16258  003AEA  D009               	goto	i2l5920
 16259  003AEC  5004               	movf	i2__div_to_l_@f2,w,c
 16260  003AEE  5E01               	subwf	i2__div_to_l_@f1,f,c
 16261  003AF0  5005               	movf	i2__div_to_l_@f2+1,w,c
 16262  003AF2  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 16263  003AF4  5006               	movf	i2__div_to_l_@f2+2,w,c
 16264  003AF6  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 16265  003AF8  5007               	movf	i2__div_to_l_@f2+3,w,c
 16266  003AFA  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 16267  003AFC  8007               	bsf	i2__div_to_l_@quot,0,c
 16268  003AFE                     i2l5920:
 16269  003AFE  90D8               	bcf	status,0,c
 16270  003B00  3601               	rlcf	i2__div_to_l_@f1,f,c
 16271  003B02  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 16272  003B04  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 16273  003B06  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 16274  003B08  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 16275  003B0A  D7E1               	goto	i2l5912
 16276  003B0C  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 16277  003B0E  D016               	goto	i2l5936
 16278  003B10  500C               	movf	i2__div_to_l_@exp1,w,c
 16279  003B12  0A80               	xorlw	128
 16280  003B14  0F9F               	addlw	159
 16281  003B16  B0D8               	btfsc	status,0,c
 16282  003B18  D009               	goto	i2l5932
 16283  003B1A  0E00               	movlw	0
 16284  003B1C  6E01               	movwf	?i2__div_to_l_,c
 16285  003B1E  0E00               	movlw	0
 16286  003B20  6E02               	movwf	?i2__div_to_l_+1,c
 16287  003B22  0E00               	movlw	0
 16288  003B24  6E03               	movwf	?i2__div_to_l_+2,c
 16289  003B26  0E00               	movlw	0
 16290  003B28  6E04               	movwf	?i2__div_to_l_+3,c
 16291  003B2A  0012               	return	
 16292  003B2C                     i2l5932:
 16293  003B2C  90D8               	bcf	status,0,c
 16294  003B2E  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 16295  003B30  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 16296  003B32  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 16297  003B34  3207               	rrcf	i2__div_to_l_@quot,f,c
 16298  003B36  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 16299  003B38  D7F9               	goto	i2l5932
 16300  003B3A  D015               	goto	i2l991
 16301  003B3C                     i2l5936:
 16302  003B3C  0E1F               	movlw	31
 16303  003B3E  640C               	cpfsgt	i2__div_to_l_@exp1,c
 16304  003B40  D00F               	goto	i2l5944
 16305  003B42  0E00               	movlw	0
 16306  003B44  6E01               	movwf	?i2__div_to_l_,c
 16307  003B46  0E00               	movlw	0
 16308  003B48  6E02               	movwf	?i2__div_to_l_+1,c
 16309  003B4A  0E00               	movlw	0
 16310  003B4C  6E03               	movwf	?i2__div_to_l_+2,c
 16311  003B4E  0E00               	movlw	0
 16312  003B50  6E04               	movwf	?i2__div_to_l_+3,c
 16313  003B52  0012               	return	
 16314  003B54                     i2l5942:
 16315  003B54  90D8               	bcf	status,0,c
 16316  003B56  3607               	rlcf	i2__div_to_l_@quot,f,c
 16317  003B58  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 16318  003B5A  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 16319  003B5C  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 16320  003B5E  060C               	decf	i2__div_to_l_@exp1,f,c
 16321  003B60                     i2l5944:
 16322  003B60  500C               	movf	i2__div_to_l_@exp1,w,c
 16323  003B62  A4D8               	btfss	status,2,c
 16324  003B64  D7F7               	goto	i2l5942
 16325  003B66                     i2l991:
 16326  003B66  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 16327  003B6A  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 16328  003B6E  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 16329  003B72  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 16330  003B76  0012               	return		;funcret
 16331  003B78                     __end_ofi2__div_to_l_:
 16332                           	opt stack 0
 16333                           pclatu	equ	0xFFB
 16334                           pclath	equ	0xFFA
 16335                           tblptru	equ	0xFF8
 16336                           tblptrh	equ	0xFF7
 16337                           tblptrl	equ	0xFF6
 16338                           tablat	equ	0xFF5
 16339                           prodh	equ	0xFF4
 16340                           prodl	equ	0xFF3
 16341                           intcon	equ	0xFF2
 16342                           intcon3	equ	0xFF0
 16343                           postinc0	equ	0xFEE
 16344                           fsr0h	equ	0xFEA
 16345                           fsr0l	equ	0xFE9
 16346                           wreg	equ	0xFE8
 16347                           postdec1	equ	0xFE5
 16348                           fsr1h	equ	0xFE2
 16349                           fsr1l	equ	0xFE1
 16350                           indf2	equ	0xFDF
 16351                           postinc2	equ	0xFDE
 16352                           postdec2	equ	0xFDD
 16353                           fsr2h	equ	0xFDA
 16354                           fsr2l	equ	0xFD9
 16355                           status	equ	0xFD8
 16356                           
 16357 ;; *************** function i2___lltoft *****************
 16358 ;; Defined at:
 16359 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 16360 ;; Parameters:    Size  Location     Type
 16361 ;;  c               4    8[COMRAM] unsigned long 
 16362 ;; Auto vars:     Size  Location     Type
 16363 ;;  __lltoft        1   16[COMRAM] unsigned char 
 16364 ;; Return value:  Size  Location     Type
 16365 ;;                  3    8[COMRAM] float 
 16366 ;; Registers used:
 16367 ;;		wreg, status,2, status,0, cstack
 16368 ;; Tracked objects:
 16369 ;;		On entry : 0/0
 16370 ;;		On exit  : 0/0
 16371 ;;		Unchanged: 0/0
 16372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16373 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16375 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16376 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16377 ;;Total ram usage:        9 bytes
 16378 ;; Hardware stack levels used:    1
 16379 ;; Hardware stack levels required when called:    1
 16380 ;; This function calls:
 16381 ;;		i2___ftpack
 16382 ;; This function is called by:
 16383 ;;		i2_printf
 16384 ;; This function uses a non-reentrant model
 16385 ;;
 16386                           
 16387                           	psect	text56
 16388  004D26                     __ptext56:
 16389                           	opt stack 0
 16390  004D26                     i2___lltoft:
 16391                           	opt stack 20
 16392                           
 16393                           ;incstack = 0
 16394  004D26  0E8E               	movlw	142
 16395  004D28  6E11               	movwf	i2___lltoft@exp,c
 16396  004D2A  D006               	goto	i2l6132
 16397  004D2C                     i2l6130:
 16398  004D2C  90D8               	bcf	status,0,c
 16399  004D2E  320C               	rrcf	i2___lltoft@c+3,f,c
 16400  004D30  320B               	rrcf	i2___lltoft@c+2,f,c
 16401  004D32  320A               	rrcf	i2___lltoft@c+1,f,c
 16402  004D34  3209               	rrcf	i2___lltoft@c,f,c
 16403  004D36  2A11               	incf	i2___lltoft@exp,f,c
 16404  004D38                     i2l6132:
 16405  004D38  0E00               	movlw	0
 16406  004D3A  1409               	andwf	i2___lltoft@c,w,c
 16407  004D3C  6E0D               	movwf	??i2___lltoft& (0+255),c
 16408  004D3E  0E00               	movlw	0
 16409  004D40  140A               	andwf	i2___lltoft@c+1,w,c
 16410  004D42  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 16411  004D44  0E00               	movlw	0
 16412  004D46  140B               	andwf	i2___lltoft@c+2,w,c
 16413  004D48  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 16414  004D4A  0EFF               	movlw	255
 16415  004D4C  140C               	andwf	i2___lltoft@c+3,w,c
 16416  004D4E  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 16417  004D50  500D               	movf	??i2___lltoft,w,c
 16418  004D52  100E               	iorwf	??i2___lltoft+1,w,c
 16419  004D54  100F               	iorwf	??i2___lltoft+2,w,c
 16420  004D56  1010               	iorwf	??i2___lltoft+3,w,c
 16421  004D58  A4D8               	btfss	status,2,c
 16422  004D5A  D7E8               	goto	i2l6130
 16423  004D5C  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 16424  004D60  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 16425  004D64  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 16426  004D68  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 16427  004D6C  0E00               	movlw	0
 16428  004D6E  6E05               	movwf	i2___ftpack@sign,c
 16429  004D70  EC26  F023         	call	i2___ftpack	;wreg free
 16430  004D74  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 16431  004D78  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 16432  004D7C  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 16433  004D80  0012               	return	
 16434  004D82                     __end_ofi2___lltoft:
 16435                           	opt stack 0
 16436                           pclatu	equ	0xFFB
 16437                           pclath	equ	0xFFA
 16438                           tblptru	equ	0xFF8
 16439                           tblptrh	equ	0xFF7
 16440                           tblptrl	equ	0xFF6
 16441                           tablat	equ	0xFF5
 16442                           prodh	equ	0xFF4
 16443                           prodl	equ	0xFF3
 16444                           intcon	equ	0xFF2
 16445                           intcon3	equ	0xFF0
 16446                           postinc0	equ	0xFEE
 16447                           fsr0h	equ	0xFEA
 16448                           fsr0l	equ	0xFE9
 16449                           wreg	equ	0xFE8
 16450                           postdec1	equ	0xFE5
 16451                           fsr1h	equ	0xFE2
 16452                           fsr1l	equ	0xFE1
 16453                           indf2	equ	0xFDF
 16454                           postinc2	equ	0xFDE
 16455                           postdec2	equ	0xFDD
 16456                           fsr2h	equ	0xFDA
 16457                           fsr2l	equ	0xFD9
 16458                           status	equ	0xFD8
 16459                           
 16460 ;; *************** function i2___llmod *****************
 16461 ;; Defined at:
 16462 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 16463 ;; Parameters:    Size  Location     Type
 16464 ;;  dividend        4   13[COMRAM] unsigned long 
 16465 ;;  divisor         4   17[COMRAM] unsigned long 
 16466 ;; Auto vars:     Size  Location     Type
 16467 ;;  __llmod         1   21[COMRAM] unsigned char 
 16468 ;; Return value:  Size  Location     Type
 16469 ;;                  4   13[COMRAM] unsigned long 
 16470 ;; Registers used:
 16471 ;;		wreg, status,2, status,0
 16472 ;; Tracked objects:
 16473 ;;		On entry : 0/0
 16474 ;;		On exit  : 0/0
 16475 ;;		Unchanged: 0/0
 16476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16477 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16480 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16481 ;;Total ram usage:        9 bytes
 16482 ;; Hardware stack levels used:    1
 16483 ;; This function calls:
 16484 ;;		Nothing
 16485 ;; This function is called by:
 16486 ;;		i2_printf
 16487 ;; This function uses a non-reentrant model
 16488 ;;
 16489                           
 16490                           	psect	text57
 16491  004C5A                     __ptext57:
 16492                           	opt stack 0
 16493  004C5A                     i2___llmod:
 16494                           	opt stack 21
 16495                           
 16496                           ;incstack = 0
 16497  004C5A  5012               	movf	i2___llmod@divisor,w,c
 16498  004C5C  1013               	iorwf	i2___llmod@divisor+1,w,c
 16499  004C5E  1014               	iorwf	i2___llmod@divisor+2,w,c
 16500  004C60  1015               	iorwf	i2___llmod@divisor+3,w,c
 16501  004C62  B4D8               	btfsc	status,2,c
 16502  004C64  D024               	goto	i2l1180
 16503  004C66  0E01               	movlw	1
 16504  004C68  6E16               	movwf	i2___llmod@counter,c
 16505  004C6A  D006               	goto	i2l6118
 16506  004C6C                     i2l6116:
 16507  004C6C  90D8               	bcf	status,0,c
 16508  004C6E  3612               	rlcf	i2___llmod@divisor,f,c
 16509  004C70  3613               	rlcf	i2___llmod@divisor+1,f,c
 16510  004C72  3614               	rlcf	i2___llmod@divisor+2,f,c
 16511  004C74  3615               	rlcf	i2___llmod@divisor+3,f,c
 16512  004C76  2A16               	incf	i2___llmod@counter,f,c
 16513  004C78                     i2l6118:
 16514  004C78  AE15               	btfss	i2___llmod@divisor+3,7,c
 16515  004C7A  D7F8               	goto	i2l6116
 16516  004C7C                     i2l6120:
 16517  004C7C  5012               	movf	i2___llmod@divisor,w,c
 16518  004C7E  5C0E               	subwf	i2___llmod@dividend,w,c
 16519  004C80  5013               	movf	i2___llmod@divisor+1,w,c
 16520  004C82  580F               	subwfb	i2___llmod@dividend+1,w,c
 16521  004C84  5014               	movf	i2___llmod@divisor+2,w,c
 16522  004C86  5810               	subwfb	i2___llmod@dividend+2,w,c
 16523  004C88  5015               	movf	i2___llmod@divisor+3,w,c
 16524  004C8A  5811               	subwfb	i2___llmod@dividend+3,w,c
 16525  004C8C  A0D8               	btfss	status,0,c
 16526  004C8E  D008               	goto	i2l6124
 16527  004C90  5012               	movf	i2___llmod@divisor,w,c
 16528  004C92  5E0E               	subwf	i2___llmod@dividend,f,c
 16529  004C94  5013               	movf	i2___llmod@divisor+1,w,c
 16530  004C96  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 16531  004C98  5014               	movf	i2___llmod@divisor+2,w,c
 16532  004C9A  5A10               	subwfb	i2___llmod@dividend+2,f,c
 16533  004C9C  5015               	movf	i2___llmod@divisor+3,w,c
 16534  004C9E  5A11               	subwfb	i2___llmod@dividend+3,f,c
 16535  004CA0                     i2l6124:
 16536  004CA0  90D8               	bcf	status,0,c
 16537  004CA2  3215               	rrcf	i2___llmod@divisor+3,f,c
 16538  004CA4  3214               	rrcf	i2___llmod@divisor+2,f,c
 16539  004CA6  3213               	rrcf	i2___llmod@divisor+1,f,c
 16540  004CA8  3212               	rrcf	i2___llmod@divisor,f,c
 16541  004CAA  2E16               	decfsz	i2___llmod@counter,f,c
 16542  004CAC  D7E7               	goto	i2l6120
 16543  004CAE                     i2l1180:
 16544  004CAE  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 16545  004CB2  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 16546  004CB6  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 16547  004CBA  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 16548  004CBE  0012               	return		;funcret
 16549  004CC0                     __end_ofi2___llmod:
 16550                           	opt stack 0
 16551                           pclatu	equ	0xFFB
 16552                           pclath	equ	0xFFA
 16553                           tblptru	equ	0xFF8
 16554                           tblptrh	equ	0xFF7
 16555                           tblptrl	equ	0xFF6
 16556                           tablat	equ	0xFF5
 16557                           prodh	equ	0xFF4
 16558                           prodl	equ	0xFF3
 16559                           intcon	equ	0xFF2
 16560                           intcon3	equ	0xFF0
 16561                           postinc0	equ	0xFEE
 16562                           fsr0h	equ	0xFEA
 16563                           fsr0l	equ	0xFE9
 16564                           wreg	equ	0xFE8
 16565                           postdec1	equ	0xFE5
 16566                           fsr1h	equ	0xFE2
 16567                           fsr1l	equ	0xFE1
 16568                           indf2	equ	0xFDF
 16569                           postinc2	equ	0xFDE
 16570                           postdec2	equ	0xFDD
 16571                           fsr2h	equ	0xFDA
 16572                           fsr2l	equ	0xFD9
 16573                           status	equ	0xFD8
 16574                           
 16575 ;; *************** function i2___lldiv *****************
 16576 ;; Defined at:
 16577 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 16578 ;; Parameters:    Size  Location     Type
 16579 ;;  dividend        4    0[COMRAM] unsigned long 
 16580 ;;  divisor         4    4[COMRAM] unsigned long 
 16581 ;; Auto vars:     Size  Location     Type
 16582 ;;  __lldiv         4    8[COMRAM] unsigned long 
 16583 ;;  __lldiv         1   12[COMRAM] unsigned char 
 16584 ;; Return value:  Size  Location     Type
 16585 ;;                  4    0[COMRAM] unsigned long 
 16586 ;; Registers used:
 16587 ;;		wreg, status,2, status,0
 16588 ;; Tracked objects:
 16589 ;;		On entry : 0/0
 16590 ;;		On exit  : 0/0
 16591 ;;		Unchanged: 0/0
 16592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16593 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16594 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16596 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16597 ;;Total ram usage:       13 bytes
 16598 ;; Hardware stack levels used:    1
 16599 ;; This function calls:
 16600 ;;		Nothing
 16601 ;; This function is called by:
 16602 ;;		i2_printf
 16603 ;; This function uses a non-reentrant model
 16604 ;;
 16605                           
 16606                           	psect	text58
 16607  004A74                     __ptext58:
 16608                           	opt stack 0
 16609  004A74                     i2___lldiv:
 16610                           	opt stack 21
 16611                           
 16612                           ;incstack = 0
 16613  004A74  0E00               	movlw	0
 16614  004A76  6E09               	movwf	i2___lldiv@quotient,c
 16615  004A78  0E00               	movlw	0
 16616  004A7A  6E0A               	movwf	i2___lldiv@quotient+1,c
 16617  004A7C  0E00               	movlw	0
 16618  004A7E  6E0B               	movwf	i2___lldiv@quotient+2,c
 16619  004A80  0E00               	movlw	0
 16620  004A82  6E0C               	movwf	i2___lldiv@quotient+3,c
 16621  004A84  5005               	movf	i2___lldiv@divisor,w,c
 16622  004A86  1006               	iorwf	i2___lldiv@divisor+1,w,c
 16623  004A88  1007               	iorwf	i2___lldiv@divisor+2,w,c
 16624  004A8A  1008               	iorwf	i2___lldiv@divisor+3,w,c
 16625  004A8C  B4D8               	btfsc	status,2,c
 16626  004A8E  D02A               	goto	i2l1170
 16627  004A90  0E01               	movlw	1
 16628  004A92  6E0D               	movwf	i2___lldiv@counter,c
 16629  004A94  D006               	goto	i2l6098
 16630  004A96                     i2l6096:
 16631  004A96  90D8               	bcf	status,0,c
 16632  004A98  3605               	rlcf	i2___lldiv@divisor,f,c
 16633  004A9A  3606               	rlcf	i2___lldiv@divisor+1,f,c
 16634  004A9C  3607               	rlcf	i2___lldiv@divisor+2,f,c
 16635  004A9E  3608               	rlcf	i2___lldiv@divisor+3,f,c
 16636  004AA0  2A0D               	incf	i2___lldiv@counter,f,c
 16637  004AA2                     i2l6098:
 16638  004AA2  AE08               	btfss	i2___lldiv@divisor+3,7,c
 16639  004AA4  D7F8               	goto	i2l6096
 16640  004AA6                     i2l6100:
 16641  004AA6  90D8               	bcf	status,0,c
 16642  004AA8  3609               	rlcf	i2___lldiv@quotient,f,c
 16643  004AAA  360A               	rlcf	i2___lldiv@quotient+1,f,c
 16644  004AAC  360B               	rlcf	i2___lldiv@quotient+2,f,c
 16645  004AAE  360C               	rlcf	i2___lldiv@quotient+3,f,c
 16646  004AB0  5005               	movf	i2___lldiv@divisor,w,c
 16647  004AB2  5C01               	subwf	i2___lldiv@dividend,w,c
 16648  004AB4  5006               	movf	i2___lldiv@divisor+1,w,c
 16649  004AB6  5802               	subwfb	i2___lldiv@dividend+1,w,c
 16650  004AB8  5007               	movf	i2___lldiv@divisor+2,w,c
 16651  004ABA  5803               	subwfb	i2___lldiv@dividend+2,w,c
 16652  004ABC  5008               	movf	i2___lldiv@divisor+3,w,c
 16653  004ABE  5804               	subwfb	i2___lldiv@dividend+3,w,c
 16654  004AC0  A0D8               	btfss	status,0,c
 16655  004AC2  D009               	goto	i2l6108
 16656  004AC4  5005               	movf	i2___lldiv@divisor,w,c
 16657  004AC6  5E01               	subwf	i2___lldiv@dividend,f,c
 16658  004AC8  5006               	movf	i2___lldiv@divisor+1,w,c
 16659  004ACA  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 16660  004ACC  5007               	movf	i2___lldiv@divisor+2,w,c
 16661  004ACE  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 16662  004AD0  5008               	movf	i2___lldiv@divisor+3,w,c
 16663  004AD2  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 16664  004AD4  8009               	bsf	i2___lldiv@quotient,0,c
 16665  004AD6                     i2l6108:
 16666  004AD6  90D8               	bcf	status,0,c
 16667  004AD8  3208               	rrcf	i2___lldiv@divisor+3,f,c
 16668  004ADA  3207               	rrcf	i2___lldiv@divisor+2,f,c
 16669  004ADC  3206               	rrcf	i2___lldiv@divisor+1,f,c
 16670  004ADE  3205               	rrcf	i2___lldiv@divisor,f,c
 16671  004AE0  2E0D               	decfsz	i2___lldiv@counter,f,c
 16672  004AE2  D7E1               	goto	i2l6100
 16673  004AE4                     i2l1170:
 16674  004AE4  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 16675  004AE8  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 16676  004AEC  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 16677  004AF0  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 16678  004AF4  0012               	return		;funcret
 16679  004AF6                     __end_ofi2___lldiv:
 16680                           	opt stack 0
 16681                           pclatu	equ	0xFFB
 16682                           pclath	equ	0xFFA
 16683                           tblptru	equ	0xFF8
 16684                           tblptrh	equ	0xFF7
 16685                           tblptrl	equ	0xFF6
 16686                           tablat	equ	0xFF5
 16687                           prodh	equ	0xFF4
 16688                           prodl	equ	0xFF3
 16689                           intcon	equ	0xFF2
 16690                           intcon3	equ	0xFF0
 16691                           postinc0	equ	0xFEE
 16692                           fsr0h	equ	0xFEA
 16693                           fsr0l	equ	0xFE9
 16694                           wreg	equ	0xFE8
 16695                           postdec1	equ	0xFE5
 16696                           fsr1h	equ	0xFE2
 16697                           fsr1l	equ	0xFE1
 16698                           indf2	equ	0xFDF
 16699                           postinc2	equ	0xFDE
 16700                           postdec2	equ	0xFDD
 16701                           fsr2h	equ	0xFDA
 16702                           fsr2l	equ	0xFD9
 16703                           status	equ	0xFD8
 16704                           
 16705 ;; *************** function i2___fttol *****************
 16706 ;; Defined at:
 16707 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 16708 ;; Parameters:    Size  Location     Type
 16709 ;;  f1              3   42[COMRAM] float 
 16710 ;; Auto vars:     Size  Location     Type
 16711 ;;  __fttol         4   52[COMRAM] unsigned long 
 16712 ;;  __fttol         1   56[COMRAM] unsigned char 
 16713 ;;  __fttol         1   51[COMRAM] unsigned char 
 16714 ;; Return value:  Size  Location     Type
 16715 ;;                  4   42[COMRAM] long 
 16716 ;; Registers used:
 16717 ;;		wreg, status,2, status,0
 16718 ;; Tracked objects:
 16719 ;;		On entry : 0/0
 16720 ;;		On exit  : 0/0
 16721 ;;		Unchanged: 0/0
 16722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16723 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16724 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16725 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16726 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16727 ;;Total ram usage:       15 bytes
 16728 ;; Hardware stack levels used:    1
 16729 ;; This function calls:
 16730 ;;		Nothing
 16731 ;; This function is called by:
 16732 ;;		i2_printf
 16733 ;; This function uses a non-reentrant model
 16734 ;;
 16735                           
 16736                           	psect	text59
 16737  004090                     __ptext59:
 16738                           	opt stack 0
 16739  004090                     i2___fttol:
 16740                           	opt stack 21
 16741                           
 16742                           ;incstack = 0
 16743  004090  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 16744  004094  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 16745  004096  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 16746  004098  342C               	rlcf	i2___fttol@f1+1,w,c
 16747  00409A  362F               	rlcf	??i2___fttol& (0+255),f,c
 16748  00409C  E301               	bnc	u656_41
 16749  00409E  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 16750  0040A0                     u656_41:
 16751  0040A0  502F               	movf	??i2___fttol,w,c
 16752  0040A2  6E39               	movwf	i2___fttol@exp1,c
 16753  0040A4  5039               	movf	i2___fttol@exp1,w,c
 16754  0040A6  A4D8               	btfss	status,2,c
 16755  0040A8  D009               	goto	i2l6038
 16756  0040AA  0E00               	movlw	0
 16757  0040AC  6E2B               	movwf	?i2___fttol,c
 16758  0040AE  0E00               	movlw	0
 16759  0040B0  6E2C               	movwf	?i2___fttol+1,c
 16760  0040B2  0E00               	movlw	0
 16761  0040B4  6E2D               	movwf	?i2___fttol+2,c
 16762  0040B6  0E00               	movlw	0
 16763  0040B8  6E2E               	movwf	?i2___fttol+3,c
 16764  0040BA  0012               	return	
 16765  0040BC                     i2l6038:
 16766  0040BC  0E17               	movlw	23
 16767  0040BE  6E2F               	movwf	??i2___fttol& (0+255),c
 16768  0040C0  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 16769  0040C4  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 16770  0040C8  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 16771  0040CC  282F               	incf	??i2___fttol,w,c
 16772  0040CE  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 16773  0040D0  D004               	goto	i2u658_40
 16774  0040D2                     i2u658_45:
 16775  0040D2  90D8               	bcf	status,0,c
 16776  0040D4  3232               	rrcf	??i2___fttol+3,f,c
 16777  0040D6  3231               	rrcf	??i2___fttol+2,f,c
 16778  0040D8  3230               	rrcf	??i2___fttol+1,f,c
 16779  0040DA                     i2u658_40:
 16780  0040DA  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 16781  0040DC  D7FA               	goto	i2u658_45
 16782  0040DE  5030               	movf	??i2___fttol+1,w,c
 16783  0040E0  6E34               	movwf	i2___fttol@sign1,c
 16784  0040E2  8E2C               	bsf	i2___fttol@f1+1,7,c
 16785  0040E4  0EFF               	movlw	255
 16786  0040E6  162B               	andwf	i2___fttol@f1,f,c
 16787  0040E8  0EFF               	movlw	255
 16788  0040EA  162C               	andwf	i2___fttol@f1+1,f,c
 16789  0040EC  0E00               	movlw	0
 16790  0040EE  162D               	andwf	i2___fttol@f1+2,f,c
 16791  0040F0  502B               	movf	i2___fttol@f1,w,c
 16792  0040F2  6E35               	movwf	i2___fttol@lval,c
 16793  0040F4  502C               	movf	i2___fttol@f1+1,w,c
 16794  0040F6  6E36               	movwf	i2___fttol@lval+1,c
 16795  0040F8  502D               	movf	i2___fttol@f1+2,w,c
 16796  0040FA  6E37               	movwf	i2___fttol@lval+2,c
 16797  0040FC  6A38               	clrf	i2___fttol@lval+3,c
 16798  0040FE  0E8E               	movlw	142
 16799  004100  5E39               	subwf	i2___fttol@exp1,f,c
 16800  004102  AE39               	btfss	i2___fttol@exp1,7,c
 16801  004104  D016               	goto	i2l6060
 16802  004106  5039               	movf	i2___fttol@exp1,w,c
 16803  004108  0A80               	xorlw	128
 16804  00410A  0F8F               	addlw	143
 16805  00410C  B0D8               	btfsc	status,0,c
 16806  00410E  D009               	goto	i2l6056
 16807  004110  0E00               	movlw	0
 16808  004112  6E2B               	movwf	?i2___fttol,c
 16809  004114  0E00               	movlw	0
 16810  004116  6E2C               	movwf	?i2___fttol+1,c
 16811  004118  0E00               	movlw	0
 16812  00411A  6E2D               	movwf	?i2___fttol+2,c
 16813  00411C  0E00               	movlw	0
 16814  00411E  6E2E               	movwf	?i2___fttol+3,c
 16815  004120  0012               	return	
 16816  004122                     i2l6056:
 16817  004122  90D8               	bcf	status,0,c
 16818  004124  3238               	rrcf	i2___fttol@lval+3,f,c
 16819  004126  3237               	rrcf	i2___fttol@lval+2,f,c
 16820  004128  3236               	rrcf	i2___fttol@lval+1,f,c
 16821  00412A  3235               	rrcf	i2___fttol@lval,f,c
 16822  00412C  3E39               	incfsz	i2___fttol@exp1,f,c
 16823  00412E  D7F9               	goto	i2l6056
 16824  004130  D015               	goto	i2l6070
 16825  004132                     i2l6060:
 16826  004132  0E17               	movlw	23
 16827  004134  6439               	cpfsgt	i2___fttol@exp1,c
 16828  004136  D00F               	goto	i2l6068
 16829  004138  0E00               	movlw	0
 16830  00413A  6E2B               	movwf	?i2___fttol,c
 16831  00413C  0E00               	movlw	0
 16832  00413E  6E2C               	movwf	?i2___fttol+1,c
 16833  004140  0E00               	movlw	0
 16834  004142  6E2D               	movwf	?i2___fttol+2,c
 16835  004144  0E00               	movlw	0
 16836  004146  6E2E               	movwf	?i2___fttol+3,c
 16837  004148  0012               	return	
 16838  00414A                     i2l6066:
 16839  00414A  90D8               	bcf	status,0,c
 16840  00414C  3635               	rlcf	i2___fttol@lval,f,c
 16841  00414E  3636               	rlcf	i2___fttol@lval+1,f,c
 16842  004150  3637               	rlcf	i2___fttol@lval+2,f,c
 16843  004152  3638               	rlcf	i2___fttol@lval+3,f,c
 16844  004154  0639               	decf	i2___fttol@exp1,f,c
 16845  004156                     i2l6068:
 16846  004156  5039               	movf	i2___fttol@exp1,w,c
 16847  004158  A4D8               	btfss	status,2,c
 16848  00415A  D7F7               	goto	i2l6066
 16849  00415C                     i2l6070:
 16850  00415C  5034               	movf	i2___fttol@sign1,w,c
 16851  00415E  B4D8               	btfsc	status,2,c
 16852  004160  D008               	goto	i2l6074
 16853  004162  1E38               	comf	i2___fttol@lval+3,f,c
 16854  004164  1E37               	comf	i2___fttol@lval+2,f,c
 16855  004166  1E36               	comf	i2___fttol@lval+1,f,c
 16856  004168  6C35               	negf	i2___fttol@lval,c
 16857  00416A  0E00               	movlw	0
 16858  00416C  2236               	addwfc	i2___fttol@lval+1,f,c
 16859  00416E  2237               	addwfc	i2___fttol@lval+2,f,c
 16860  004170  2238               	addwfc	i2___fttol@lval+3,f,c
 16861  004172                     i2l6074:
 16862  004172  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 16863  004176  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 16864  00417A  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 16865  00417E  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 16866  004182  0012               	return	
 16867  004184                     __end_ofi2___fttol:
 16868                           	opt stack 0
 16869                           pclatu	equ	0xFFB
 16870                           pclath	equ	0xFFA
 16871                           tblptru	equ	0xFF8
 16872                           tblptrh	equ	0xFF7
 16873                           tblptrl	equ	0xFF6
 16874                           tablat	equ	0xFF5
 16875                           prodh	equ	0xFF4
 16876                           prodl	equ	0xFF3
 16877                           intcon	equ	0xFF2
 16878                           intcon3	equ	0xFF0
 16879                           postinc0	equ	0xFEE
 16880                           fsr0h	equ	0xFEA
 16881                           fsr0l	equ	0xFE9
 16882                           wreg	equ	0xFE8
 16883                           postdec1	equ	0xFE5
 16884                           fsr1h	equ	0xFE2
 16885                           fsr1l	equ	0xFE1
 16886                           indf2	equ	0xFDF
 16887                           postinc2	equ	0xFDE
 16888                           postdec2	equ	0xFDD
 16889                           fsr2h	equ	0xFDA
 16890                           fsr2l	equ	0xFD9
 16891                           status	equ	0xFD8
 16892                           
 16893 ;; *************** function i2___ftsub *****************
 16894 ;; Defined at:
 16895 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 16896 ;; Parameters:    Size  Location     Type
 16897 ;;  f1              3   57[COMRAM] float 
 16898 ;;  f2              3   60[COMRAM] float 
 16899 ;; Auto vars:     Size  Location     Type
 16900 ;;		None
 16901 ;; Return value:  Size  Location     Type
 16902 ;;                  3   57[COMRAM] float 
 16903 ;; Registers used:
 16904 ;;		wreg, status,2, status,0, cstack
 16905 ;; Tracked objects:
 16906 ;;		On entry : 0/0
 16907 ;;		On exit  : 0/0
 16908 ;;		Unchanged: 0/0
 16909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16910 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16913 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16914 ;;Total ram usage:        6 bytes
 16915 ;; Hardware stack levels used:    1
 16916 ;; Hardware stack levels required when called:    2
 16917 ;; This function calls:
 16918 ;;		i2___ftadd
 16919 ;; This function is called by:
 16920 ;;		i2_printf
 16921 ;; This function uses a non-reentrant model
 16922 ;;
 16923                           
 16924                           	psect	text60
 16925  004FCE                     __ptext60:
 16926                           	opt stack 0
 16927  004FCE                     i2___ftsub:
 16928                           	opt stack 19
 16929                           
 16930                           ;incstack = 0
 16931  004FCE  503D               	movf	i2___ftsub@f2,w,c
 16932  004FD0  103E               	iorwf	i2___ftsub@f2+1,w,c
 16933  004FD2  103F               	iorwf	i2___ftsub@f2+2,w,c
 16934  004FD4  B4D8               	btfsc	status,2,c
 16935  004FD6  D006               	goto	i2l6028
 16936  004FD8  0E00               	movlw	0
 16937  004FDA  1A3D               	xorwf	i2___ftsub@f2,f,c
 16938  004FDC  0E00               	movlw	0
 16939  004FDE  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 16940  004FE0  0E80               	movlw	128
 16941  004FE2  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 16942  004FE4                     i2l6028:
 16943  004FE4  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 16944  004FE8  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 16945  004FEC  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 16946  004FF0  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 16947  004FF4  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 16948  004FF8  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 16949  004FFC  EC73  F015         	call	i2___ftadd	;wreg free
 16950  005000  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 16951  005004  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 16952  005008  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 16953  00500C  0012               	return	
 16954  00500E                     __end_ofi2___ftsub:
 16955                           	opt stack 0
 16956                           pclatu	equ	0xFFB
 16957                           pclath	equ	0xFFA
 16958                           tblptru	equ	0xFF8
 16959                           tblptrh	equ	0xFF7
 16960                           tblptrl	equ	0xFF6
 16961                           tablat	equ	0xFF5
 16962                           prodh	equ	0xFF4
 16963                           prodl	equ	0xFF3
 16964                           intcon	equ	0xFF2
 16965                           intcon3	equ	0xFF0
 16966                           postinc0	equ	0xFEE
 16967                           fsr0h	equ	0xFEA
 16968                           fsr0l	equ	0xFE9
 16969                           wreg	equ	0xFE8
 16970                           postdec1	equ	0xFE5
 16971                           fsr1h	equ	0xFE2
 16972                           fsr1l	equ	0xFE1
 16973                           indf2	equ	0xFDF
 16974                           postinc2	equ	0xFDE
 16975                           postdec2	equ	0xFDD
 16976                           fsr2h	equ	0xFDA
 16977                           fsr2l	equ	0xFD9
 16978                           status	equ	0xFD8
 16979                           
 16980 ;; *************** function i2___ftadd *****************
 16981 ;; Defined at:
 16982 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 16983 ;; Parameters:    Size  Location     Type
 16984 ;;  f1              3   45[COMRAM] float 
 16985 ;;  f2              3   48[COMRAM] float 
 16986 ;; Auto vars:     Size  Location     Type
 16987 ;;  __ftadd         1   56[COMRAM] unsigned char 
 16988 ;;  __ftadd         1   55[COMRAM] unsigned char 
 16989 ;;  __ftadd         1   54[COMRAM] unsigned char 
 16990 ;; Return value:  Size  Location     Type
 16991 ;;                  3   45[COMRAM] float 
 16992 ;; Registers used:
 16993 ;;		wreg, status,2, status,0, cstack
 16994 ;; Tracked objects:
 16995 ;;		On entry : 0/0
 16996 ;;		On exit  : 0/0
 16997 ;;		Unchanged: 0/0
 16998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16999 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17000 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17001 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17002 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17003 ;;Total ram usage:       12 bytes
 17004 ;; Hardware stack levels used:    1
 17005 ;; Hardware stack levels required when called:    1
 17006 ;; This function calls:
 17007 ;;		i2___ftpack
 17008 ;; This function is called by:
 17009 ;;		i2_printf
 17010 ;;		i2___ftsub
 17011 ;; This function uses a non-reentrant model
 17012 ;;
 17013                           
 17014                           	psect	text61
 17015  002AE6                     __ptext61:
 17016                           	opt stack 0
 17017  002AE6                     i2___ftadd:
 17018                           	opt stack 19
 17019                           
 17020                           ;incstack = 0
 17021  002AE6  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 17022  002AEA  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 17023  002AEC  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 17024  002AEE  342F               	rlcf	i2___ftadd@f1+1,w,c
 17025  002AF0  3634               	rlcf	??i2___ftadd& (0+255),f,c
 17026  002AF2  E301               	bnc	u579_41
 17027  002AF4  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 17028  002AF6                     u579_41:
 17029  002AF6  5034               	movf	??i2___ftadd,w,c
 17030  002AF8  6E39               	movwf	i2___ftadd@exp1,c
 17031  002AFA  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 17032  002AFE  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 17033  002B00  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 17034  002B02  3432               	rlcf	i2___ftadd@f2+1,w,c
 17035  002B04  3634               	rlcf	??i2___ftadd& (0+255),f,c
 17036  002B06  E301               	bnc	u580_41
 17037  002B08  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 17038  002B0A                     u580_41:
 17039  002B0A  5034               	movf	??i2___ftadd,w,c
 17040  002B0C  6E38               	movwf	i2___ftadd@exp2,c
 17041  002B0E  5039               	movf	i2___ftadd@exp1,w,c
 17042  002B10  B4D8               	btfsc	status,2,c
 17043  002B12  D00B               	goto	i2l1046
 17044  002B14  5038               	movf	i2___ftadd@exp2,w,c
 17045  002B16  5C39               	subwf	i2___ftadd@exp1,w,c
 17046  002B18  B0D8               	btfsc	status,0,c
 17047  002B1A  D00E               	goto	i2l5520
 17048  002B1C  5039               	movf	i2___ftadd@exp1,w,c
 17049  002B1E  0800               	sublw	0
 17050  002B20  2438               	addwf	i2___ftadd@exp2,w,c
 17051  002B22  6E34               	movwf	??i2___ftadd& (0+255),c
 17052  002B24  0E18               	movlw	24
 17053  002B26  6434               	cpfsgt	??i2___ftadd,c
 17054  002B28  D007               	goto	i2l5520
 17055  002B2A                     i2l1046:
 17056  002B2A  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 17057  002B2E  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 17058  002B32  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 17059  002B36  0012               	return	
 17060  002B38                     i2l5520:
 17061  002B38  5038               	movf	i2___ftadd@exp2,w,c
 17062  002B3A  B4D8               	btfsc	status,2,c
 17063  002B3C  D00B               	goto	i2l1050
 17064  002B3E  5039               	movf	i2___ftadd@exp1,w,c
 17065  002B40  5C38               	subwf	i2___ftadd@exp2,w,c
 17066  002B42  B0D8               	btfsc	status,0,c
 17067  002B44  D00E               	goto	i2l5526
 17068  002B46  5038               	movf	i2___ftadd@exp2,w,c
 17069  002B48  0800               	sublw	0
 17070  002B4A  2439               	addwf	i2___ftadd@exp1,w,c
 17071  002B4C  6E34               	movwf	??i2___ftadd& (0+255),c
 17072  002B4E  0E18               	movlw	24
 17073  002B50  6434               	cpfsgt	??i2___ftadd,c
 17074  002B52  D007               	goto	i2l5526
 17075  002B54                     i2l1050:
 17076  002B54  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 17077  002B58  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 17078  002B5C  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 17079  002B60  0012               	return	
 17080  002B62                     i2l5526:
 17081  002B62  0E06               	movlw	6
 17082  002B64  6E37               	movwf	i2___ftadd@sign,c
 17083  002B66  BE30               	btfsc	i2___ftadd@f1+2,7,c
 17084  002B68  8E37               	bsf	i2___ftadd@sign,7,c
 17085  002B6A  BE33               	btfsc	i2___ftadd@f2+2,7,c
 17086  002B6C  8C37               	bsf	i2___ftadd@sign,6,c
 17087  002B6E  8E2F               	bsf	i2___ftadd@f1+1,7,c
 17088  002B70  0EFF               	movlw	255
 17089  002B72  162E               	andwf	i2___ftadd@f1,f,c
 17090  002B74  0EFF               	movlw	255
 17091  002B76  162F               	andwf	i2___ftadd@f1+1,f,c
 17092  002B78  0E00               	movlw	0
 17093  002B7A  1630               	andwf	i2___ftadd@f1+2,f,c
 17094  002B7C  8E32               	bsf	i2___ftadd@f2+1,7,c
 17095  002B7E  0EFF               	movlw	255
 17096  002B80  1631               	andwf	i2___ftadd@f2,f,c
 17097  002B82  0EFF               	movlw	255
 17098  002B84  1632               	andwf	i2___ftadd@f2+1,f,c
 17099  002B86  0E00               	movlw	0
 17100  002B88  1633               	andwf	i2___ftadd@f2+2,f,c
 17101  002B8A  5038               	movf	i2___ftadd@exp2,w,c
 17102  002B8C  5C39               	subwf	i2___ftadd@exp1,w,c
 17103  002B8E  B0D8               	btfsc	status,0,c
 17104  002B90  D01B               	goto	i2l5552
 17105  002B92                     i2l5542:
 17106  002B92  90D8               	bcf	status,0,c
 17107  002B94  3631               	rlcf	i2___ftadd@f2,f,c
 17108  002B96  3632               	rlcf	i2___ftadd@f2+1,f,c
 17109  002B98  3633               	rlcf	i2___ftadd@f2+2,f,c
 17110  002B9A  0638               	decf	i2___ftadd@exp2,f,c
 17111  002B9C  5039               	movf	i2___ftadd@exp1,w,c
 17112  002B9E  1838               	xorwf	i2___ftadd@exp2,w,c
 17113  002BA0  B4D8               	btfsc	status,2,c
 17114  002BA2  D00D               	goto	i2l5550
 17115  002BA4  0637               	decf	i2___ftadd@sign,f,c
 17116  002BA6  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 17117  002BAA  0E07               	movlw	7
 17118  002BAC  1634               	andwf	??i2___ftadd,f,c
 17119  002BAE  B4D8               	btfsc	status,2,c
 17120  002BB0  D006               	goto	i2l5550
 17121  002BB2  D7EF               	goto	i2l5542
 17122  002BB4                     i2l5548:
 17123  002BB4  90D8               	bcf	status,0,c
 17124  002BB6  3230               	rrcf	i2___ftadd@f1+2,f,c
 17125  002BB8  322F               	rrcf	i2___ftadd@f1+1,f,c
 17126  002BBA  322E               	rrcf	i2___ftadd@f1,f,c
 17127  002BBC  2A39               	incf	i2___ftadd@exp1,f,c
 17128  002BBE                     i2l5550:
 17129  002BBE  5038               	movf	i2___ftadd@exp2,w,c
 17130  002BC0  1839               	xorwf	i2___ftadd@exp1,w,c
 17131  002BC2  B4D8               	btfsc	status,2,c
 17132  002BC4  D01F               	goto	i2l1061
 17133  002BC6  D7F6               	goto	i2l5548
 17134  002BC8                     i2l5552:
 17135  002BC8  5039               	movf	i2___ftadd@exp1,w,c
 17136  002BCA  5C38               	subwf	i2___ftadd@exp2,w,c
 17137  002BCC  B0D8               	btfsc	status,0,c
 17138  002BCE  D01A               	goto	i2l1061
 17139  002BD0                     i2l5554:
 17140  002BD0  90D8               	bcf	status,0,c
 17141  002BD2  362E               	rlcf	i2___ftadd@f1,f,c
 17142  002BD4  362F               	rlcf	i2___ftadd@f1+1,f,c
 17143  002BD6  3630               	rlcf	i2___ftadd@f1+2,f,c
 17144  002BD8  0639               	decf	i2___ftadd@exp1,f,c
 17145  002BDA  5039               	movf	i2___ftadd@exp1,w,c
 17146  002BDC  1838               	xorwf	i2___ftadd@exp2,w,c
 17147  002BDE  B4D8               	btfsc	status,2,c
 17148  002BE0  D00D               	goto	i2l5562
 17149  002BE2  0637               	decf	i2___ftadd@sign,f,c
 17150  002BE4  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 17151  002BE8  0E07               	movlw	7
 17152  002BEA  1634               	andwf	??i2___ftadd,f,c
 17153  002BEC  B4D8               	btfsc	status,2,c
 17154  002BEE  D006               	goto	i2l5562
 17155  002BF0  D7EF               	goto	i2l5554
 17156  002BF2                     i2l5560:
 17157  002BF2  90D8               	bcf	status,0,c
 17158  002BF4  3233               	rrcf	i2___ftadd@f2+2,f,c
 17159  002BF6  3232               	rrcf	i2___ftadd@f2+1,f,c
 17160  002BF8  3231               	rrcf	i2___ftadd@f2,f,c
 17161  002BFA  2A38               	incf	i2___ftadd@exp2,f,c
 17162  002BFC                     i2l5562:
 17163  002BFC  5038               	movf	i2___ftadd@exp2,w,c
 17164  002BFE  1839               	xorwf	i2___ftadd@exp1,w,c
 17165  002C00  A4D8               	btfss	status,2,c
 17166  002C02  D7F7               	goto	i2l5560
 17167  002C04                     i2l1061:
 17168  002C04  AE37               	btfss	i2___ftadd@sign,7,c
 17169  002C06  D00C               	goto	i2l1070
 17170  002C08  0EFF               	movlw	255
 17171  002C0A  1A2E               	xorwf	i2___ftadd@f1,f,c
 17172  002C0C  0EFF               	movlw	255
 17173  002C0E  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 17174  002C10  0EFF               	movlw	255
 17175  002C12  1A30               	xorwf	i2___ftadd@f1+2,f,c
 17176  002C14  0E01               	movlw	1
 17177  002C16  262E               	addwf	i2___ftadd@f1,f,c
 17178  002C18  0E00               	movlw	0
 17179  002C1A  222F               	addwfc	i2___ftadd@f1+1,f,c
 17180  002C1C  0E00               	movlw	0
 17181  002C1E  2230               	addwfc	i2___ftadd@f1+2,f,c
 17182  002C20                     i2l1070:
 17183  002C20  AC37               	btfss	i2___ftadd@sign,6,c
 17184  002C22  D00C               	goto	i2l5568
 17185  002C24  0EFF               	movlw	255
 17186  002C26  1A31               	xorwf	i2___ftadd@f2,f,c
 17187  002C28  0EFF               	movlw	255
 17188  002C2A  1A32               	xorwf	i2___ftadd@f2+1,f,c
 17189  002C2C  0EFF               	movlw	255
 17190  002C2E  1A33               	xorwf	i2___ftadd@f2+2,f,c
 17191  002C30  0E01               	movlw	1
 17192  002C32  2631               	addwf	i2___ftadd@f2,f,c
 17193  002C34  0E00               	movlw	0
 17194  002C36  2232               	addwfc	i2___ftadd@f2+1,f,c
 17195  002C38  0E00               	movlw	0
 17196  002C3A  2233               	addwfc	i2___ftadd@f2+2,f,c
 17197  002C3C                     i2l5568:
 17198  002C3C  0E00               	movlw	0
 17199  002C3E  6E37               	movwf	i2___ftadd@sign,c
 17200  002C40  502E               	movf	i2___ftadd@f1,w,c
 17201  002C42  2631               	addwf	i2___ftadd@f2,f,c
 17202  002C44  502F               	movf	i2___ftadd@f1+1,w,c
 17203  002C46  2232               	addwfc	i2___ftadd@f2+1,f,c
 17204  002C48  5030               	movf	i2___ftadd@f1+2,w,c
 17205  002C4A  2233               	addwfc	i2___ftadd@f2+2,f,c
 17206  002C4C  AE33               	btfss	i2___ftadd@f2+2,7,c
 17207  002C4E  D00E               	goto	i2l5578
 17208  002C50  0EFF               	movlw	255
 17209  002C52  1A31               	xorwf	i2___ftadd@f2,f,c
 17210  002C54  0EFF               	movlw	255
 17211  002C56  1A32               	xorwf	i2___ftadd@f2+1,f,c
 17212  002C58  0EFF               	movlw	255
 17213  002C5A  1A33               	xorwf	i2___ftadd@f2+2,f,c
 17214  002C5C  0E01               	movlw	1
 17215  002C5E  2631               	addwf	i2___ftadd@f2,f,c
 17216  002C60  0E00               	movlw	0
 17217  002C62  2232               	addwfc	i2___ftadd@f2+1,f,c
 17218  002C64  0E00               	movlw	0
 17219  002C66  2233               	addwfc	i2___ftadd@f2+2,f,c
 17220  002C68  0E01               	movlw	1
 17221  002C6A  6E37               	movwf	i2___ftadd@sign,c
 17222  002C6C                     i2l5578:
 17223  002C6C  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 17224  002C70  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 17225  002C74  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 17226  002C78  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 17227  002C7C  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 17228  002C80  EC26  F023         	call	i2___ftpack	;wreg free
 17229  002C84  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 17230  002C88  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 17231  002C8C  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 17232  002C90  0012               	return	
 17233  002C92                     __end_ofi2___ftadd:
 17234                           	opt stack 0
 17235                           pclatu	equ	0xFFB
 17236                           pclath	equ	0xFFA
 17237                           tblptru	equ	0xFF8
 17238                           tblptrh	equ	0xFF7
 17239                           tblptrl	equ	0xFF6
 17240                           tablat	equ	0xFF5
 17241                           prodh	equ	0xFF4
 17242                           prodl	equ	0xFF3
 17243                           intcon	equ	0xFF2
 17244                           intcon3	equ	0xFF0
 17245                           postinc0	equ	0xFEE
 17246                           fsr0h	equ	0xFEA
 17247                           fsr0l	equ	0xFE9
 17248                           wreg	equ	0xFE8
 17249                           postdec1	equ	0xFE5
 17250                           fsr1h	equ	0xFE2
 17251                           fsr1l	equ	0xFE1
 17252                           indf2	equ	0xFDF
 17253                           postinc2	equ	0xFDE
 17254                           postdec2	equ	0xFDD
 17255                           fsr2h	equ	0xFDA
 17256                           fsr2l	equ	0xFD9
 17257                           status	equ	0xFD8
 17258                           
 17259 ;; *************** function i2___ftpack *****************
 17260 ;; Defined at:
 17261 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 17262 ;; Parameters:    Size  Location     Type
 17263 ;;  arg             3    0[COMRAM] unsigned um
 17264 ;;  exp             1    3[COMRAM] unsigned char 
 17265 ;;  sign            1    4[COMRAM] unsigned char 
 17266 ;; Auto vars:     Size  Location     Type
 17267 ;;		None
 17268 ;; Return value:  Size  Location     Type
 17269 ;;                  3    0[COMRAM] float 
 17270 ;; Registers used:
 17271 ;;		wreg, status,2, status,0
 17272 ;; Tracked objects:
 17273 ;;		On entry : 0/0
 17274 ;;		On exit  : 0/0
 17275 ;;		Unchanged: 0/0
 17276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17277 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17279 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;Total ram usage:        8 bytes
 17282 ;; Hardware stack levels used:    1
 17283 ;; This function calls:
 17284 ;;		Nothing
 17285 ;; This function is called by:
 17286 ;;		i2___ftadd
 17287 ;;		i2___ftmul
 17288 ;;		i2___lltoft
 17289 ;; This function uses a non-reentrant model
 17290 ;;
 17291                           
 17292                           	psect	text62
 17293  00464C                     __ptext62:
 17294                           	opt stack 0
 17295  00464C                     i2___ftpack:
 17296                           	opt stack 19
 17297                           
 17298                           ;incstack = 0
 17299  00464C  5004               	movf	i2___ftpack@exp,w,c
 17300  00464E  B4D8               	btfsc	status,2,c
 17301  004650  D005               	goto	i2l5048
 17302  004652  5001               	movf	i2___ftpack@arg,w,c
 17303  004654  1002               	iorwf	i2___ftpack@arg+1,w,c
 17304  004656  1003               	iorwf	i2___ftpack@arg+2,w,c
 17305  004658  A4D8               	btfss	status,2,c
 17306  00465A  D00C               	goto	i2l5054
 17307  00465C                     i2l5048:
 17308  00465C  0E00               	movlw	0
 17309  00465E  6E01               	movwf	?i2___ftpack,c
 17310  004660  0E00               	movlw	0
 17311  004662  6E02               	movwf	?i2___ftpack+1,c
 17312  004664  0E00               	movlw	0
 17313  004666  6E03               	movwf	?i2___ftpack+2,c
 17314  004668  0012               	return	
 17315  00466A                     i2l5052:
 17316  00466A  2A04               	incf	i2___ftpack@exp,f,c
 17317  00466C  90D8               	bcf	status,0,c
 17318  00466E  3203               	rrcf	i2___ftpack@arg+2,f,c
 17319  004670  3202               	rrcf	i2___ftpack@arg+1,f,c
 17320  004672  3201               	rrcf	i2___ftpack@arg,f,c
 17321  004674                     i2l5054:
 17322  004674  0E00               	movlw	0
 17323  004676  1401               	andwf	i2___ftpack@arg,w,c
 17324  004678  6E06               	movwf	??i2___ftpack& (0+255),c
 17325  00467A  0E00               	movlw	0
 17326  00467C  1402               	andwf	i2___ftpack@arg+1,w,c
 17327  00467E  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 17328  004680  0EFE               	movlw	254
 17329  004682  1403               	andwf	i2___ftpack@arg+2,w,c
 17330  004684  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 17331  004686  5006               	movf	??i2___ftpack,w,c
 17332  004688  1007               	iorwf	??i2___ftpack+1,w,c
 17333  00468A  1008               	iorwf	??i2___ftpack+2,w,c
 17334  00468C  B4D8               	btfsc	status,2,c
 17335  00468E  D00C               	goto	i2l5060
 17336  004690  D7EC               	goto	i2l5052
 17337  004692                     i2l5056:
 17338  004692  2A04               	incf	i2___ftpack@exp,f,c
 17339  004694  0E01               	movlw	1
 17340  004696  2601               	addwf	i2___ftpack@arg,f,c
 17341  004698  0E00               	movlw	0
 17342  00469A  2202               	addwfc	i2___ftpack@arg+1,f,c
 17343  00469C  0E00               	movlw	0
 17344  00469E  2203               	addwfc	i2___ftpack@arg+2,f,c
 17345  0046A0  90D8               	bcf	status,0,c
 17346  0046A2  3203               	rrcf	i2___ftpack@arg+2,f,c
 17347  0046A4  3202               	rrcf	i2___ftpack@arg+1,f,c
 17348  0046A6  3201               	rrcf	i2___ftpack@arg,f,c
 17349  0046A8                     i2l5060:
 17350  0046A8  0E00               	movlw	0
 17351  0046AA  1401               	andwf	i2___ftpack@arg,w,c
 17352  0046AC  6E06               	movwf	??i2___ftpack& (0+255),c
 17353  0046AE  0E00               	movlw	0
 17354  0046B0  1402               	andwf	i2___ftpack@arg+1,w,c
 17355  0046B2  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 17356  0046B4  0EFF               	movlw	255
 17357  0046B6  1403               	andwf	i2___ftpack@arg+2,w,c
 17358  0046B8  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 17359  0046BA  5006               	movf	??i2___ftpack,w,c
 17360  0046BC  1007               	iorwf	??i2___ftpack+1,w,c
 17361  0046BE  1008               	iorwf	??i2___ftpack+2,w,c
 17362  0046C0  B4D8               	btfsc	status,2,c
 17363  0046C2  D006               	goto	i2l5064
 17364  0046C4  D7E6               	goto	i2l5056
 17365  0046C6                     i2l5062:
 17366  0046C6  0604               	decf	i2___ftpack@exp,f,c
 17367  0046C8  90D8               	bcf	status,0,c
 17368  0046CA  3601               	rlcf	i2___ftpack@arg,f,c
 17369  0046CC  3602               	rlcf	i2___ftpack@arg+1,f,c
 17370  0046CE  3603               	rlcf	i2___ftpack@arg+2,f,c
 17371  0046D0                     i2l5064:
 17372  0046D0  BE02               	btfsc	i2___ftpack@arg+1,7,c
 17373  0046D2  D003               	goto	i2l1023
 17374  0046D4  0E02               	movlw	2
 17375  0046D6  6004               	cpfslt	i2___ftpack@exp,c
 17376  0046D8  D7F6               	goto	i2l5062
 17377  0046DA                     i2l1023:
 17378  0046DA  A004               	btfss	i2___ftpack@exp,0,c
 17379  0046DC  9E02               	bcf	i2___ftpack@arg+1,7,c
 17380  0046DE  90D8               	bcf	status,0,c
 17381  0046E0  3204               	rrcf	i2___ftpack@exp,f,c
 17382  0046E2  5004               	movf	i2___ftpack@exp,w,c
 17383  0046E4  1203               	iorwf	i2___ftpack@arg+2,f,c
 17384  0046E6  5005               	movf	i2___ftpack@sign,w,c
 17385  0046E8  A4D8               	btfss	status,2,c
 17386  0046EA  8E03               	bsf	i2___ftpack@arg+2,7,c
 17387  0046EC  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 17388  0046F0  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 17389  0046F4  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 17390  0046F8  0012               	return	
 17391  0046FA                     __end_ofi2___ftpack:
 17392                           	opt stack 0
 17393                           pclatu	equ	0xFFB
 17394                           pclath	equ	0xFFA
 17395                           tblptru	equ	0xFF8
 17396                           tblptrh	equ	0xFF7
 17397                           tblptrl	equ	0xFF6
 17398                           tablat	equ	0xFF5
 17399                           prodh	equ	0xFF4
 17400                           prodl	equ	0xFF3
 17401                           intcon	equ	0xFF2
 17402                           intcon3	equ	0xFF0
 17403                           postinc0	equ	0xFEE
 17404                           fsr0h	equ	0xFEA
 17405                           fsr0l	equ	0xFE9
 17406                           wreg	equ	0xFE8
 17407                           postdec1	equ	0xFE5
 17408                           fsr1h	equ	0xFE2
 17409                           fsr1l	equ	0xFE1
 17410                           indf2	equ	0xFDF
 17411                           postinc2	equ	0xFDE
 17412                           postdec2	equ	0xFDD
 17413                           fsr2h	equ	0xFDA
 17414                           fsr2l	equ	0xFD9
 17415                           status	equ	0xFD8
 17416                           
 17417 ;; *************** function i2___ftneg *****************
 17418 ;; Defined at:
 17419 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 17420 ;; Parameters:    Size  Location     Type
 17421 ;;  f1              3    0[COMRAM] float 
 17422 ;; Auto vars:     Size  Location     Type
 17423 ;;		None
 17424 ;; Return value:  Size  Location     Type
 17425 ;;                  3    0[COMRAM] float 
 17426 ;; Registers used:
 17427 ;;		wreg, status,2, status,0
 17428 ;; Tracked objects:
 17429 ;;		On entry : 0/0
 17430 ;;		On exit  : 0/0
 17431 ;;		Unchanged: 0/0
 17432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17433 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17436 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17437 ;;Total ram usage:        3 bytes
 17438 ;; Hardware stack levels used:    1
 17439 ;; This function calls:
 17440 ;;		Nothing
 17441 ;; This function is called by:
 17442 ;;		i2_printf
 17443 ;; This function uses a non-reentrant model
 17444 ;;
 17445                           
 17446                           	psect	text63
 17447  0051AC                     __ptext63:
 17448                           	opt stack 0
 17449  0051AC                     i2___ftneg:
 17450                           	opt stack 21
 17451                           
 17452                           ;incstack = 0
 17453  0051AC  5001               	movf	i2___ftneg@f1,w,c
 17454  0051AE  1002               	iorwf	i2___ftneg@f1+1,w,c
 17455  0051B0  1003               	iorwf	i2___ftneg@f1+2,w,c
 17456  0051B2  B4D8               	btfsc	status,2,c
 17457  0051B4  D006               	goto	i2l1120
 17458  0051B6  0E00               	movlw	0
 17459  0051B8  1A01               	xorwf	i2___ftneg@f1,f,c
 17460  0051BA  0E00               	movlw	0
 17461  0051BC  1A02               	xorwf	i2___ftneg@f1+1,f,c
 17462  0051BE  0E80               	movlw	128
 17463  0051C0  1A03               	xorwf	i2___ftneg@f1+2,f,c
 17464  0051C2                     i2l1120:
 17465  0051C2  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 17466  0051C6  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 17467  0051CA  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 17468  0051CE  0012               	return		;funcret
 17469  0051D0                     __end_ofi2___ftneg:
 17470                           	opt stack 0
 17471                           pclatu	equ	0xFFB
 17472                           pclath	equ	0xFFA
 17473                           tblptru	equ	0xFF8
 17474                           tblptrh	equ	0xFF7
 17475                           tblptrl	equ	0xFF6
 17476                           tablat	equ	0xFF5
 17477                           prodh	equ	0xFF4
 17478                           prodl	equ	0xFF3
 17479                           intcon	equ	0xFF2
 17480                           intcon3	equ	0xFF0
 17481                           postinc0	equ	0xFEE
 17482                           fsr0h	equ	0xFEA
 17483                           fsr0l	equ	0xFE9
 17484                           wreg	equ	0xFE8
 17485                           postdec1	equ	0xFE5
 17486                           fsr1h	equ	0xFE2
 17487                           fsr1l	equ	0xFE1
 17488                           indf2	equ	0xFDF
 17489                           postinc2	equ	0xFDE
 17490                           postdec2	equ	0xFDD
 17491                           fsr2h	equ	0xFDA
 17492                           fsr2l	equ	0xFD9
 17493                           status	equ	0xFD8
 17494                           
 17495 ;; *************** function i2___ftge *****************
 17496 ;; Defined at:
 17497 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 17498 ;; Parameters:    Size  Location     Type
 17499 ;;  ff1             3    0[COMRAM] float 
 17500 ;;  ff2             3    3[COMRAM] float 
 17501 ;; Auto vars:     Size  Location     Type
 17502 ;;		None
 17503 ;; Return value:  Size  Location     Type
 17504 ;;		None               void
 17505 ;; Registers used:
 17506 ;;		wreg, status,2, status,0
 17507 ;; Tracked objects:
 17508 ;;		On entry : 0/0
 17509 ;;		On exit  : 0/0
 17510 ;;		Unchanged: 0/0
 17511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17512 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17514 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17515 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17516 ;;Total ram usage:        9 bytes
 17517 ;; Hardware stack levels used:    1
 17518 ;; This function calls:
 17519 ;;		Nothing
 17520 ;; This function is called by:
 17521 ;;		i2_printf
 17522 ;; This function uses a non-reentrant model
 17523 ;;
 17524                           
 17525                           	psect	text64
 17526  0048D4                     __ptext64:
 17527                           	opt stack 0
 17528  0048D4                     i2___ftge:
 17529                           	opt stack 21
 17530                           
 17531                           ;incstack = 0
 17532  0048D4  AE03               	btfss	i2___ftge@ff1+2,7,c
 17533  0048D6  D016               	goto	i2l6006
 17534  0048D8  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 17535  0048DC  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 17536  0048E0  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 17537  0048E4  1E07               	comf	??i2___ftge,f,c
 17538  0048E6  1E08               	comf	??i2___ftge+1,f,c
 17539  0048E8  1E09               	comf	??i2___ftge+2,f,c
 17540  0048EA  2A07               	incf	??i2___ftge,f,c
 17541  0048EC  0E00               	movlw	0
 17542  0048EE  2208               	addwfc	??i2___ftge+1,f,c
 17543  0048F0  2209               	addwfc	??i2___ftge+2,f,c
 17544  0048F2  0E00               	movlw	0
 17545  0048F4  2407               	addwf	??i2___ftge,w,c
 17546  0048F6  6E01               	movwf	i2___ftge@ff1,c
 17547  0048F8  0E00               	movlw	0
 17548  0048FA  2008               	addwfc	??i2___ftge+1,w,c
 17549  0048FC  6E02               	movwf	i2___ftge@ff1+1,c
 17550  0048FE  0E80               	movlw	128
 17551  004900  2009               	addwfc	??i2___ftge+2,w,c
 17552  004902  6E03               	movwf	i2___ftge@ff1+2,c
 17553  004904                     i2l6006:
 17554  004904  AE06               	btfss	i2___ftge@ff2+2,7,c
 17555  004906  D016               	goto	i2l6010
 17556  004908  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 17557  00490C  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 17558  004910  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 17559  004914  1E07               	comf	??i2___ftge,f,c
 17560  004916  1E08               	comf	??i2___ftge+1,f,c
 17561  004918  1E09               	comf	??i2___ftge+2,f,c
 17562  00491A  2A07               	incf	??i2___ftge,f,c
 17563  00491C  0E00               	movlw	0
 17564  00491E  2208               	addwfc	??i2___ftge+1,f,c
 17565  004920  2209               	addwfc	??i2___ftge+2,f,c
 17566  004922  0E00               	movlw	0
 17567  004924  2407               	addwf	??i2___ftge,w,c
 17568  004926  6E04               	movwf	i2___ftge@ff2,c
 17569  004928  0E00               	movlw	0
 17570  00492A  2008               	addwfc	??i2___ftge+1,w,c
 17571  00492C  6E05               	movwf	i2___ftge@ff2+1,c
 17572  00492E  0E80               	movlw	128
 17573  004930  2009               	addwfc	??i2___ftge+2,w,c
 17574  004932  6E06               	movwf	i2___ftge@ff2+2,c
 17575  004934                     i2l6010:
 17576  004934  0E00               	movlw	0
 17577  004936  1A01               	xorwf	i2___ftge@ff1,f,c
 17578  004938  0E00               	movlw	0
 17579  00493A  1A02               	xorwf	i2___ftge@ff1+1,f,c
 17580  00493C  0E80               	movlw	128
 17581  00493E  1A03               	xorwf	i2___ftge@ff1+2,f,c
 17582  004940  0E00               	movlw	0
 17583  004942  1A04               	xorwf	i2___ftge@ff2,f,c
 17584  004944  0E00               	movlw	0
 17585  004946  1A05               	xorwf	i2___ftge@ff2+1,f,c
 17586  004948  0E80               	movlw	128
 17587  00494A  1A06               	xorwf	i2___ftge@ff2+2,f,c
 17588  00494C  5004               	movf	i2___ftge@ff2,w,c
 17589  00494E  5C01               	subwf	i2___ftge@ff1,w,c
 17590  004950  5005               	movf	i2___ftge@ff2+1,w,c
 17591  004952  5802               	subwfb	i2___ftge@ff1+1,w,c
 17592  004954  5006               	movf	i2___ftge@ff2+2,w,c
 17593  004956  5803               	subwfb	i2___ftge@ff1+2,w,c
 17594  004958  B0D8               	btfsc	status,0,c
 17595  00495A  D002               	goto	i2l6016
 17596  00495C  90D8               	bcf	status,0,c
 17597  00495E  0012               	return	
 17598  004960                     i2l6016:
 17599  004960  80D8               	bsf	status,0,c
 17600  004962  0012               	return	
 17601  004964                     __end_ofi2___ftge:
 17602                           	opt stack 0
 17603                           pclatu	equ	0xFFB
 17604                           pclath	equ	0xFFA
 17605                           tblptru	equ	0xFF8
 17606                           tblptrh	equ	0xFF7
 17607                           tblptrl	equ	0xFF6
 17608                           tablat	equ	0xFF5
 17609                           prodh	equ	0xFF4
 17610                           prodl	equ	0xFF3
 17611                           intcon	equ	0xFF2
 17612                           intcon3	equ	0xFF0
 17613                           postinc0	equ	0xFEE
 17614                           fsr0h	equ	0xFEA
 17615                           fsr0l	equ	0xFE9
 17616                           wreg	equ	0xFE8
 17617                           postdec1	equ	0xFE5
 17618                           fsr1h	equ	0xFE2
 17619                           fsr1l	equ	0xFE1
 17620                           indf2	equ	0xFDF
 17621                           postinc2	equ	0xFDE
 17622                           postdec2	equ	0xFDD
 17623                           fsr2h	equ	0xFDA
 17624                           fsr2l	equ	0xFD9
 17625                           status	equ	0xFD8
 17626                           
 17627 ;; *************** function i2_lcdClear *****************
 17628 ;; Defined at:
 17629 ;;		line 74 in file "lcd.c"
 17630 ;; Parameters:    Size  Location     Type
 17631 ;;		None
 17632 ;; Auto vars:     Size  Location     Type
 17633 ;;		None
 17634 ;; Return value:  Size  Location     Type
 17635 ;;                  1    wreg      void 
 17636 ;; Registers used:
 17637 ;;		wreg, status,2, status,0, cstack
 17638 ;; Tracked objects:
 17639 ;;		On entry : 0/0
 17640 ;;		On exit  : 0/0
 17641 ;;		Unchanged: 0/0
 17642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17647 ;;Total ram usage:        0 bytes
 17648 ;; Hardware stack levels used:    1
 17649 ;; Hardware stack levels required when called:    2
 17650 ;; This function calls:
 17651 ;;		i2_lcdInst
 17652 ;; This function is called by:
 17653 ;;		_service
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           	psect	text65
 17658  005268                     __ptext65:
 17659                           	opt stack 0
 17660  005268                     i2_lcdClear:
 17661                           	opt stack 20
 17662                           
 17663                           ;lcd.c: 75: lcdInst(0b00000001);
 17664                           
 17665                           ;incstack = 0
 17666  005268  0E01               	movlw	1
 17667  00526A  ECF9  F028         	call	i2_lcdInst
 17668  00526E  0012               	return		;funcret
 17669  005270                     __end_ofi2_lcdClear:
 17670                           	opt stack 0
 17671                           pclatu	equ	0xFFB
 17672                           pclath	equ	0xFFA
 17673                           tblptru	equ	0xFF8
 17674                           tblptrh	equ	0xFF7
 17675                           tblptrl	equ	0xFF6
 17676                           tablat	equ	0xFF5
 17677                           prodh	equ	0xFF4
 17678                           prodl	equ	0xFF3
 17679                           intcon	equ	0xFF2
 17680                           intcon3	equ	0xFF0
 17681                           postinc0	equ	0xFEE
 17682                           fsr0h	equ	0xFEA
 17683                           fsr0l	equ	0xFE9
 17684                           wreg	equ	0xFE8
 17685                           postdec1	equ	0xFE5
 17686                           fsr1h	equ	0xFE2
 17687                           fsr1l	equ	0xFE1
 17688                           indf2	equ	0xFDF
 17689                           postinc2	equ	0xFDE
 17690                           postdec2	equ	0xFDD
 17691                           fsr2h	equ	0xFDA
 17692                           fsr2l	equ	0xFD9
 17693                           status	equ	0xFD8
 17694                           
 17695 ;; *************** function i2_lcdInst *****************
 17696 ;; Defined at:
 17697 ;;		line 27 in file "lcd.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;  data            1    wreg     unsigned char 
 17700 ;; Auto vars:     Size  Location     Type
 17701 ;;  data            1    3[COMRAM] unsigned char 
 17702 ;; Return value:  Size  Location     Type
 17703 ;;                  1    wreg      void 
 17704 ;; Registers used:
 17705 ;;		wreg, status,2, status,0, cstack
 17706 ;; Tracked objects:
 17707 ;;		On entry : 0/0
 17708 ;;		On exit  : 0/0
 17709 ;;		Unchanged: 0/0
 17710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17715 ;;Total ram usage:        2 bytes
 17716 ;; Hardware stack levels used:    1
 17717 ;; Hardware stack levels required when called:    1
 17718 ;; This function calls:
 17719 ;;		i2_lcdNibble
 17720 ;; This function is called by:
 17721 ;;		i2_lcdClear
 17722 ;;		i2_lcdNewline
 17723 ;; This function uses a non-reentrant model
 17724 ;;
 17725                           
 17726                           	psect	text66
 17727  0051F2                     __ptext66:
 17728                           	opt stack 0
 17729  0051F2                     i2_lcdInst:
 17730                           	opt stack 18
 17731                           
 17732                           ;incstack = 0
 17733                           ;i2lcdInst@data stored from wreg
 17734  0051F2  6E04               	movwf	i2lcdInst@data,c
 17735                           
 17736                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 17737  0051F4  948C               	bcf	3980,2,c	;volatile
 17738                           
 17739                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 17740  0051F6  0E74               	movlw	116
 17741  0051F8                     i2u790_47:
 17742  0051F8  2EE8               	decfsz	wreg,f,c
 17743  0051FA  D7FE               	bra	i2u790_47
 17744  0051FC  D000               	nop2	
 17745                           
 17746                           ;lcd.c: 30: lcdNibble(data);
 17747  0051FE  5004               	movf	i2lcdInst@data,w,c
 17748  005200  EC60  F026         	call	i2_lcdNibble
 17749                           
 17750                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 17751  005204  0E04               	movlw	4
 17752  005206  6E03               	movwf	??i2_lcdInst& (0+255),c
 17753  005208  0E3E               	movlw	62
 17754  00520A                     i2u791_47:
 17755  00520A  2EE8               	decfsz	wreg,f,c
 17756  00520C  D7FE               	bra	i2u791_47
 17757  00520E  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 17758  005210  D7FC               	bra	i2u791_47
 17759  005212  0012               	return		;funcret
 17760  005214                     __end_ofi2_lcdInst:
 17761                           	opt stack 0
 17762                           pclatu	equ	0xFFB
 17763                           pclath	equ	0xFFA
 17764                           tblptru	equ	0xFF8
 17765                           tblptrh	equ	0xFF7
 17766                           tblptrl	equ	0xFF6
 17767                           tablat	equ	0xFF5
 17768                           prodh	equ	0xFF4
 17769                           prodl	equ	0xFF3
 17770                           intcon	equ	0xFF2
 17771                           intcon3	equ	0xFF0
 17772                           postinc0	equ	0xFEE
 17773                           fsr0h	equ	0xFEA
 17774                           fsr0l	equ	0xFE9
 17775                           wreg	equ	0xFE8
 17776                           postdec1	equ	0xFE5
 17777                           fsr1h	equ	0xFE2
 17778                           fsr1l	equ	0xFE1
 17779                           indf2	equ	0xFDF
 17780                           postinc2	equ	0xFDE
 17781                           postdec2	equ	0xFDD
 17782                           fsr2h	equ	0xFDA
 17783                           fsr2l	equ	0xFD9
 17784                           status	equ	0xFD8
 17785                           
 17786 ;; *************** function i2_lcdNibble *****************
 17787 ;; Defined at:
 17788 ;;		line 46 in file "lcd.c"
 17789 ;; Parameters:    Size  Location     Type
 17790 ;;  data            1    wreg     unsigned char 
 17791 ;; Auto vars:     Size  Location     Type
 17792 ;;  data            1    1[COMRAM] unsigned char 
 17793 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 17794 ;; Return value:  Size  Location     Type
 17795 ;;                  1    wreg      void 
 17796 ;; Registers used:
 17797 ;;		wreg, status,2, status,0
 17798 ;; Tracked objects:
 17799 ;;		On entry : 0/0
 17800 ;;		On exit  : 0/0
 17801 ;;		Unchanged: 0/0
 17802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17804 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17807 ;;Total ram usage:        2 bytes
 17808 ;; Hardware stack levels used:    1
 17809 ;; This function calls:
 17810 ;;		Nothing
 17811 ;; This function is called by:
 17812 ;;		i2_lcdInst
 17813 ;;		i2_putch
 17814 ;; This function uses a non-reentrant model
 17815 ;;
 17816                           
 17817                           	psect	text67
 17818  004CC0                     __ptext67:
 17819                           	opt stack 0
 17820  004CC0                     i2_lcdNibble:
 17821                           	opt stack 20
 17822                           
 17823                           ;incstack = 0
 17824                           ;i2lcdNibble@data stored from wreg
 17825  004CC0  6E02               	movwf	i2lcdNibble@data,c
 17826                           
 17827                           ;lcd.c: 48: char temp = data & 0xF0;
 17828  004CC2  5002               	movf	i2lcdNibble@data,w,c
 17829  004CC4  0BF0               	andlw	240
 17830  004CC6  6E01               	movwf	i2lcdNibble@temp,c
 17831                           
 17832                           ;lcd.c: 49: LATD = LATD & 0x0F;
 17833  004CC8  508C               	movf	3980,w,c	;volatile
 17834  004CCA  0B0F               	andlw	15
 17835  004CCC  6E8C               	movwf	3980,c	;volatile
 17836                           
 17837                           ;lcd.c: 50: LATD = temp | LATD;
 17838  004CCE  5001               	movf	i2lcdNibble@temp,w,c
 17839  004CD0  108C               	iorwf	3980,w,c	;volatile
 17840  004CD2  6E8C               	movwf	3980,c	;volatile
 17841                           
 17842                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 17843  004CD4  968C               	bcf	3980,3,c	;volatile
 17844                           
 17845                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17846  004CD6  0ED6               	movlw	214
 17847  004CD8                     i2u792_47:
 17848  004CD8  D000               	nop2	
 17849  004CDA  D000               	nop2	
 17850  004CDC  2EE8               	decfsz	wreg,f,c
 17851  004CDE  D7FC               	bra	i2u792_47
 17852  004CE0  D000               	nop2	
 17853                           
 17854                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 17855  004CE2  868C               	bsf	3980,3,c	;volatile
 17856                           
 17857                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17858  004CE4  0ED6               	movlw	214
 17859  004CE6                     i2u793_47:
 17860  004CE6  D000               	nop2	
 17861  004CE8  D000               	nop2	
 17862  004CEA  2EE8               	decfsz	wreg,f,c
 17863  004CEC  D7FC               	bra	i2u793_47
 17864  004CEE  D000               	nop2	
 17865                           
 17866                           ;lcd.c: 58: data = data << 4;
 17867  004CF0  3802               	swapf	i2lcdNibble@data,w,c
 17868  004CF2  0BF0               	andlw	240
 17869  004CF4  6E02               	movwf	i2lcdNibble@data,c
 17870                           
 17871                           ;lcd.c: 60: temp = data & 0xF0;
 17872  004CF6  5002               	movf	i2lcdNibble@data,w,c
 17873  004CF8  0BF0               	andlw	240
 17874  004CFA  6E01               	movwf	i2lcdNibble@temp,c
 17875                           
 17876                           ;lcd.c: 61: LATD = LATD & 0x0F;
 17877  004CFC  508C               	movf	3980,w,c	;volatile
 17878  004CFE  0B0F               	andlw	15
 17879  004D00  6E8C               	movwf	3980,c	;volatile
 17880                           
 17881                           ;lcd.c: 62: LATD = temp | LATD;
 17882  004D02  5001               	movf	i2lcdNibble@temp,w,c
 17883  004D04  108C               	iorwf	3980,w,c	;volatile
 17884  004D06  6E8C               	movwf	3980,c	;volatile
 17885                           
 17886                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 17887  004D08  968C               	bcf	3980,3,c	;volatile
 17888                           
 17889                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17890  004D0A  0ED6               	movlw	214
 17891  004D0C                     i2u794_47:
 17892  004D0C  D000               	nop2	
 17893  004D0E  D000               	nop2	
 17894  004D10  2EE8               	decfsz	wreg,f,c
 17895  004D12  D7FC               	bra	i2u794_47
 17896  004D14  D000               	nop2	
 17897                           
 17898                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 17899  004D16  868C               	bsf	3980,3,c	;volatile
 17900                           
 17901                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17902  004D18  0ED6               	movlw	214
 17903  004D1A                     i2u795_47:
 17904  004D1A  D000               	nop2	
 17905  004D1C  D000               	nop2	
 17906  004D1E  2EE8               	decfsz	wreg,f,c
 17907  004D20  D7FC               	bra	i2u795_47
 17908  004D22  D000               	nop2	
 17909  004D24  0012               	return		;funcret
 17910  004D26                     __end_ofi2_lcdNibble:
 17911                           	opt stack 0
 17912                           pclatu	equ	0xFFB
 17913                           pclath	equ	0xFFA
 17914                           tblptru	equ	0xFF8
 17915                           tblptrh	equ	0xFF7
 17916                           tblptrl	equ	0xFF6
 17917                           tablat	equ	0xFF5
 17918                           prodh	equ	0xFF4
 17919                           prodl	equ	0xFF3
 17920                           intcon	equ	0xFF2
 17921                           intcon3	equ	0xFF0
 17922                           postinc0	equ	0xFEE
 17923                           fsr0h	equ	0xFEA
 17924                           fsr0l	equ	0xFE9
 17925                           wreg	equ	0xFE8
 17926                           postdec1	equ	0xFE5
 17927                           fsr1h	equ	0xFE2
 17928                           fsr1l	equ	0xFE1
 17929                           indf2	equ	0xFDF
 17930                           postinc2	equ	0xFDE
 17931                           postdec2	equ	0xFDD
 17932                           fsr2h	equ	0xFDA
 17933                           fsr2l	equ	0xFD9
 17934                           status	equ	0xFD8
 17935                           
 17936 ;; *************** function _servoInterruptService *****************
 17937 ;; Defined at:
 17938 ;;		line 52 in file "servo.c"
 17939 ;; Parameters:    Size  Location     Type
 17940 ;;		None
 17941 ;; Auto vars:     Size  Location     Type
 17942 ;;		None
 17943 ;; Return value:  Size  Location     Type
 17944 ;;                  1    wreg      void 
 17945 ;; Registers used:
 17946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17947 ;; Tracked objects:
 17948 ;;		On entry : 0/0
 17949 ;;		On exit  : 0/0
 17950 ;;		Unchanged: 0/0
 17951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17955 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17956 ;;Total ram usage:        4 bytes
 17957 ;; Hardware stack levels used:    1
 17958 ;; Hardware stack levels required when called:    1
 17959 ;; This function calls:
 17960 ;;		i2___awmod
 17961 ;;		i2_digitalWrite
 17962 ;;		i2_startTimer
 17963 ;; This function is called by:
 17964 ;;		_service
 17965 ;; This function uses a non-reentrant model
 17966 ;;
 17967                           
 17968                           	psect	text68
 17969  003EA2                     __ptext68:
 17970                           	opt stack 0
 17971  003EA2                     _servoInterruptService:
 17972                           	opt stack 21
 17973                           
 17974                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 17975                           
 17976                           ;incstack = 0
 17977  003EA2  A4F2               	btfss	intcon,2,c	;volatile
 17978  003EA4  0012               	return	
 17979  003EA6  94F2               	bcf	intcon,2,c	;volatile
 17980                           
 17981                           ;servo.c: 55: digitalWrite(servos[curr],0);
 17982  003EA8  90D8               	bcf	status,0,c
 17983  003EAA  347B               	rlcf	_curr,w,c
 17984  003EAC  6ED9               	movwf	fsr2l,c
 17985  003EAE  347C               	rlcf	_curr+1,w,c
 17986  003EB0  6EDA               	movwf	fsr2h,c
 17987  003EB2  0E68               	movlw	low _servos
 17988  003EB4  26D9               	addwf	fsr2l,f,c
 17989  003EB6  0E01               	movlw	high _servos
 17990  003EB8  22DA               	addwfc	fsr2h,f,c
 17991  003EBA  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 17992  003EBE  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 17993  003EC2  0E00               	movlw	0
 17994  003EC4  6E0A               	movwf	i2digitalWrite@val+1,c
 17995  003EC6  0E00               	movlw	0
 17996  003EC8  6E09               	movwf	i2digitalWrite@val,c
 17997  003ECA  EC05  F022         	call	i2_digitalWrite	;wreg free
 17998                           
 17999                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 18000  003ECE  0E01               	movlw	1
 18001  003ED0  247B               	addwf	_curr,w,c
 18002  003ED2  6E01               	movwf	i2___awmod@dividend,c
 18003  003ED4  0E00               	movlw	0
 18004  003ED6  207C               	addwfc	_curr+1,w,c
 18005  003ED8  6E02               	movwf	i2___awmod@dividend+1,c
 18006  003EDA  0E01               	movlw	1
 18007  003EDC  247D               	addwf	_n,w,c
 18008  003EDE  6E03               	movwf	i2___awmod@divisor,c
 18009  003EE0  0E00               	movlw	0
 18010  003EE2  207E               	addwfc	_n+1,w,c
 18011  003EE4  6E04               	movwf	i2___awmod@divisor+1,c
 18012  003EE6  ECF5  F025         	call	i2___awmod	;wreg free
 18013  003EEA  90D8               	bcf	status,0,c
 18014  003EEC  3601               	rlcf	?i2___awmod,f,c
 18015  003EEE  3602               	rlcf	?i2___awmod+1,f,c
 18016  003EF0  0E68               	movlw	low _servos
 18017  003EF2  2401               	addwf	?i2___awmod,w,c
 18018  003EF4  6ED9               	movwf	fsr2l,c
 18019  003EF6  0E01               	movlw	high _servos
 18020  003EF8  2002               	addwfc	?i2___awmod+1,w,c
 18021  003EFA  6EDA               	movwf	fsr2h,c
 18022  003EFC  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 18023  003F00  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 18024  003F04  0E00               	movlw	0
 18025  003F06  6E0A               	movwf	i2digitalWrite@val+1,c
 18026  003F08  0E01               	movlw	1
 18027  003F0A  6E09               	movwf	i2digitalWrite@val,c
 18028  003F0C  EC05  F022         	call	i2_digitalWrite	;wreg free
 18029                           
 18030                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 18031  003F10  0E00               	movlw	0
 18032  003F12  6E08               	movwf	i2startTimer@timer+1,c
 18033  003F14  0E00               	movlw	0
 18034  003F16  6E07               	movwf	i2startTimer@timer,c
 18035  003F18  0EFF               	movlw	255
 18036  003F1A  6E10               	movwf	??_servoInterruptService& (0+255),c
 18037  003F1C  0EFF               	movlw	255
 18038  003F1E  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 18039  003F20  0E01               	movlw	1
 18040  003F22  247B               	addwf	_curr,w,c
 18041  003F24  6E01               	movwf	i2___awmod@dividend,c
 18042  003F26  0E00               	movlw	0
 18043  003F28  207C               	addwfc	_curr+1,w,c
 18044  003F2A  6E02               	movwf	i2___awmod@dividend+1,c
 18045  003F2C  0E01               	movlw	1
 18046  003F2E  247D               	addwf	_n,w,c
 18047  003F30  6E03               	movwf	i2___awmod@divisor,c
 18048  003F32  0E00               	movlw	0
 18049  003F34  207E               	addwfc	_n+1,w,c
 18050  003F36  6E04               	movwf	i2___awmod@divisor+1,c
 18051  003F38  ECF5  F025         	call	i2___awmod	;wreg free
 18052  003F3C  90D8               	bcf	status,0,c
 18053  003F3E  3601               	rlcf	?i2___awmod,f,c
 18054  003F40  3602               	rlcf	?i2___awmod+1,f,c
 18055  003F42  0E60               	movlw	low _pulse
 18056  003F44  2401               	addwf	?i2___awmod,w,c
 18057  003F46  6ED9               	movwf	fsr2l,c
 18058  003F48  0E01               	movlw	high _pulse
 18059  003F4A  2002               	addwfc	?i2___awmod+1,w,c
 18060  003F4C  6EDA               	movwf	fsr2h,c
 18061  003F4E  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 18062  003F52  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 18063  003F56  1E12               	comf	??_servoInterruptService+2,f,c
 18064  003F58  1E13               	comf	??_servoInterruptService+3,f,c
 18065  003F5A  4A12               	infsnz	??_servoInterruptService+2,f,c
 18066  003F5C  2A13               	incf	??_servoInterruptService+3,f,c
 18067  003F5E  5010               	movf	??_servoInterruptService,w,c
 18068  003F60  2612               	addwf	??_servoInterruptService+2,f,c
 18069  003F62  5011               	movf	??_servoInterruptService+1,w,c
 18070  003F64  2213               	addwfc	??_servoInterruptService+3,f,c
 18071  003F66  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 18072  003F6A  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 18073  003F6E  6A0B               	clrf	i2startTimer@val+2,c
 18074  003F70  6A0C               	clrf	i2startTimer@val+3,c
 18075  003F72  EC36  F027         	call	i2_startTimer	;wreg free
 18076                           
 18077                           ;servo.c: 59: curr = (curr+1)%(n+1);
 18078  003F76  0E01               	movlw	1
 18079  003F78  247B               	addwf	_curr,w,c
 18080  003F7A  6E01               	movwf	i2___awmod@dividend,c
 18081  003F7C  0E00               	movlw	0
 18082  003F7E  207C               	addwfc	_curr+1,w,c
 18083  003F80  6E02               	movwf	i2___awmod@dividend+1,c
 18084  003F82  0E01               	movlw	1
 18085  003F84  247D               	addwf	_n,w,c
 18086  003F86  6E03               	movwf	i2___awmod@divisor,c
 18087  003F88  0E00               	movlw	0
 18088  003F8A  207E               	addwfc	_n+1,w,c
 18089  003F8C  6E04               	movwf	i2___awmod@divisor+1,c
 18090  003F8E  ECF5  F025         	call	i2___awmod	;wreg free
 18091  003F92  C001  F07B         	movff	?i2___awmod,_curr
 18092  003F96  C002  F07C         	movff	?i2___awmod+1,_curr+1
 18093  003F9A  0012               	return	
 18094  003F9C                     __end_of_servoInterruptService:
 18095                           	opt stack 0
 18096                           pclatu	equ	0xFFB
 18097                           pclath	equ	0xFFA
 18098                           tblptru	equ	0xFF8
 18099                           tblptrh	equ	0xFF7
 18100                           tblptrl	equ	0xFF6
 18101                           tablat	equ	0xFF5
 18102                           prodh	equ	0xFF4
 18103                           prodl	equ	0xFF3
 18104                           intcon	equ	0xFF2
 18105                           intcon3	equ	0xFF0
 18106                           postinc0	equ	0xFEE
 18107                           fsr0h	equ	0xFEA
 18108                           fsr0l	equ	0xFE9
 18109                           wreg	equ	0xFE8
 18110                           postdec1	equ	0xFE5
 18111                           fsr1h	equ	0xFE2
 18112                           fsr1l	equ	0xFE1
 18113                           indf2	equ	0xFDF
 18114                           postinc2	equ	0xFDE
 18115                           postdec2	equ	0xFDD
 18116                           fsr2h	equ	0xFDA
 18117                           fsr2l	equ	0xFD9
 18118                           status	equ	0xFD8
 18119                           
 18120 ;; *************** function i2_startTimer *****************
 18121 ;; Defined at:
 18122 ;;		line 76 in file "timer.c"
 18123 ;; Parameters:    Size  Location     Type
 18124 ;;  timer           2    6[COMRAM] int 
 18125 ;;  val             4    8[COMRAM] long 
 18126 ;; Auto vars:     Size  Location     Type
 18127 ;;		None
 18128 ;; Return value:  Size  Location     Type
 18129 ;;                  1    wreg      void 
 18130 ;; Registers used:
 18131 ;;		wreg, status,2, status,0
 18132 ;; Tracked objects:
 18133 ;;		On entry : 0/0
 18134 ;;		On exit  : 0/0
 18135 ;;		Unchanged: 0/0
 18136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18137 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18139 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18140 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18141 ;;Total ram usage:        8 bytes
 18142 ;; Hardware stack levels used:    1
 18143 ;; This function calls:
 18144 ;;		Nothing
 18145 ;; This function is called by:
 18146 ;;		_service
 18147 ;;		_servoInterruptService
 18148 ;; This function uses a non-reentrant model
 18149 ;;
 18150                           
 18151                           	psect	text69
 18152  004E6C                     __ptext69:
 18153                           	opt stack 0
 18154  004E6C                     i2_startTimer:
 18155                           	opt stack 22
 18156                           
 18157                           ;timer.c: 77: switch(timer){
 18158                           
 18159                           ;incstack = 0
 18160  004E6C  D012               	goto	i2l5820
 18161  004E6E                     i2l401:
 18162                           
 18163                           ;timer.c: 79: TMR0H = val>>8;
 18164  004E6E  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 18165                           
 18166                           ;timer.c: 80: TMR0L = val;
 18167  004E72  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 18168                           
 18169                           ;timer.c: 81: T0CON |= 1<<7;
 18170  004E76  8ED5               	bsf	4053,7,c	;volatile
 18171                           
 18172                           ;timer.c: 82: break;
 18173  004E78  0012               	return	
 18174  004E7A                     i2l403:
 18175                           
 18176                           ;timer.c: 84: TMR1H = val>>8;
 18177  004E7A  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 18178                           
 18179                           ;timer.c: 85: TMR1L = val;
 18180  004E7E  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 18181                           
 18182                           ;timer.c: 86: T1CON |= 1<<0;
 18183  004E82  80CD               	bsf	4045,0,c	;volatile
 18184                           
 18185                           ;timer.c: 87: break;
 18186  004E84  0012               	return	
 18187  004E86                     i2l404:
 18188                           
 18189                           ;timer.c: 89: TMR3H = val>>8;
 18190  004E86  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 18191                           
 18192                           ;timer.c: 90: TMR3L = val;
 18193  004E8A  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 18194                           
 18195                           ;timer.c: 91: T3CON |= 1<<0;
 18196  004E8E  80B1               	bsf	4017,0,c	;volatile
 18197                           
 18198                           ;timer.c: 92: }
 18199  004E90  0012               	return	
 18200  004E92                     i2l5820:
 18201  004E92  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 18202  004E96  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 18203                           
 18204                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18205                           ; Switch size 1, requested type "space"
 18206                           ; Number of cases is 1, Range of values is 0 to 0
 18207                           ; switch strategies available:
 18208                           ; Name         Instructions Cycles
 18209                           ; simple_byte            4     3 (average)
 18210                           ;	Chosen strategy is simple_byte
 18211  004E9A  500E               	movf	??i2_startTimer+1,w,c
 18212  004E9C  0A00               	xorlw	0	; case 0
 18213  004E9E  A4D8               	btfss	status,2,c
 18214  004EA0  0012               	return	
 18215                           
 18216                           ; Switch size 1, requested type "space"
 18217                           ; Number of cases is 3, Range of values is 0 to 3
 18218                           ; switch strategies available:
 18219                           ; Name         Instructions Cycles
 18220                           ; simple_byte           10     6 (average)
 18221                           ;	Chosen strategy is simple_byte
 18222  004EA2  500D               	movf	??i2_startTimer,w,c
 18223  004EA4  0A00               	xorlw	0	; case 0
 18224  004EA6  B4D8               	btfsc	status,2,c
 18225  004EA8  D7E2               	goto	i2l401
 18226  004EAA  0A01               	xorlw	1	; case 1
 18227  004EAC  B4D8               	btfsc	status,2,c
 18228  004EAE  D7E5               	goto	i2l403
 18229  004EB0  0A02               	xorlw	2	; case 3
 18230  004EB2  A4D8               	btfss	status,2,c
 18231  004EB4  0012               	return	
 18232  004EB6  D7E7               	goto	i2l404
 18233  004EB8                     __end_ofi2_startTimer:
 18234                           	opt stack 0
 18235                           pclatu	equ	0xFFB
 18236                           pclath	equ	0xFFA
 18237                           tblptru	equ	0xFF8
 18238                           tblptrh	equ	0xFF7
 18239                           tblptrl	equ	0xFF6
 18240                           tablat	equ	0xFF5
 18241                           prodh	equ	0xFF4
 18242                           prodl	equ	0xFF3
 18243                           intcon	equ	0xFF2
 18244                           intcon3	equ	0xFF0
 18245                           postinc0	equ	0xFEE
 18246                           fsr0h	equ	0xFEA
 18247                           fsr0l	equ	0xFE9
 18248                           wreg	equ	0xFE8
 18249                           postdec1	equ	0xFE5
 18250                           fsr1h	equ	0xFE2
 18251                           fsr1l	equ	0xFE1
 18252                           indf2	equ	0xFDF
 18253                           postinc2	equ	0xFDE
 18254                           postdec2	equ	0xFDD
 18255                           fsr2h	equ	0xFDA
 18256                           fsr2l	equ	0xFD9
 18257                           status	equ	0xFD8
 18258                           
 18259 ;; *************** function i2_digitalWrite *****************
 18260 ;; Defined at:
 18261 ;;		line 53 in file "iopin.c"
 18262 ;; Parameters:    Size  Location     Type
 18263 ;;  pin             2    6[COMRAM] PTR int 
 18264 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
 18265 ;;		 -> cylinderMotor(4), 
 18266 ;;  val             2    8[COMRAM] int 
 18267 ;; Auto vars:     Size  Location     Type
 18268 ;;  digitalWrite    2   13[COMRAM] int 
 18269 ;; Return value:  Size  Location     Type
 18270 ;;                  1    wreg      void 
 18271 ;; Registers used:
 18272 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18273 ;; Tracked objects:
 18274 ;;		On entry : 0/0
 18275 ;;		On exit  : 0/0
 18276 ;;		Unchanged: 0/0
 18277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18280 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18281 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18282 ;;Total ram usage:        9 bytes
 18283 ;; Hardware stack levels used:    1
 18284 ;; This function calls:
 18285 ;;		Nothing
 18286 ;; This function is called by:
 18287 ;;		_servoInterruptService
 18288 ;; This function uses a non-reentrant model
 18289 ;;
 18290                           
 18291                           	psect	text70
 18292  00440A                     __ptext70:
 18293                           	opt stack 0
 18294  00440A                     i2_digitalWrite:
 18295                           	opt stack 21
 18296                           
 18297                           ;iopin.c: 54: if(pin){
 18298                           
 18299                           ;incstack = 0
 18300  00440A  5007               	movf	i2digitalWrite@pin,w,c
 18301  00440C  1008               	iorwf	i2digitalWrite@pin+1,w,c
 18302  00440E  B4D8               	btfsc	status,2,c
 18303  004410  0012               	return	
 18304                           
 18305                           ;iopin.c: 55: int p = 1 << pin[1];
 18306  004412  EE20 F002          	lfsr	2,2
 18307  004416  5007               	movf	i2digitalWrite@pin,w,c
 18308  004418  26D9               	addwf	fsr2l,f,c
 18309  00441A  5008               	movf	i2digitalWrite@pin+1,w,c
 18310  00441C  22DA               	addwfc	fsr2h,f,c
 18311  00441E  50DF               	movf	indf2,w,c
 18312  004420  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 18313  004422  0E01               	movlw	1
 18314  004424  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 18315  004426  0E00               	movlw	0
 18316  004428  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 18317  00442A  2A0B               	incf	??i2_digitalWrite,f,c
 18318  00442C  D003               	goto	i2u622_44
 18319  00442E                     i2u622_45:
 18320  00442E  90D8               	bcf	status,0,c
 18321  004430  360C               	rlcf	??i2_digitalWrite+1,f,c
 18322  004432  360D               	rlcf	??i2_digitalWrite+2,f,c
 18323  004434                     i2u622_44:
 18324  004434  2E0B               	decfsz	??i2_digitalWrite,f,c
 18325  004436  D7FB               	goto	i2u622_45
 18326  004438  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 18327  00443C  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 18328                           
 18329                           ;iopin.c: 56: if(val == 0){
 18330  004440  5009               	movf	i2digitalWrite@val,w,c
 18331  004442  100A               	iorwf	i2digitalWrite@val+1,w,c
 18332  004444  A4D8               	btfss	status,2,c
 18333  004446  D02B               	goto	i2l5806
 18334                           
 18335                           ;iopin.c: 57: p ^= 0xff;
 18336  004448  0EFF               	movlw	255
 18337  00444A  1A0E               	xorwf	i2digitalWrite@p,f,c
 18338                           
 18339                           ;iopin.c: 58: }
 18340                           ;iopin.c: 60: switch(pin[0]){
 18341  00444C  D028               	goto	i2l5806
 18342  00444E                     i2l5782:
 18343  00444E  0409               	decf	i2digitalWrite@val,w,c
 18344  004450  100A               	iorwf	i2digitalWrite@val+1,w,c
 18345  004452  A4D8               	btfss	status,2,c
 18346  004454  D003               	goto	i2l5786
 18347  004456  500E               	movf	i2digitalWrite@p,w,c
 18348  004458  1289               	iorwf	3977,f,c	;volatile
 18349  00445A  0012               	return	
 18350  00445C                     i2l5786:
 18351                           
 18352                           ;iopin.c: 62: else LATA &= p;
 18353  00445C  500E               	movf	i2digitalWrite@p,w,c
 18354  00445E  1689               	andwf	3977,f,c	;volatile
 18355                           
 18356                           ;iopin.c: 63: break;
 18357  004460  0012               	return	
 18358  004462                     i2l5788:
 18359  004462  0409               	decf	i2digitalWrite@val,w,c
 18360  004464  100A               	iorwf	i2digitalWrite@val+1,w,c
 18361  004466  A4D8               	btfss	status,2,c
 18362  004468  D003               	goto	i2l5792
 18363  00446A  500E               	movf	i2digitalWrite@p,w,c
 18364  00446C  128A               	iorwf	3978,f,c	;volatile
 18365  00446E  0012               	return	
 18366  004470                     i2l5792:
 18367                           
 18368                           ;iopin.c: 65: else LATB &= p;
 18369  004470  500E               	movf	i2digitalWrite@p,w,c
 18370  004472  168A               	andwf	3978,f,c	;volatile
 18371                           
 18372                           ;iopin.c: 66: break;
 18373  004474  0012               	return	
 18374  004476                     i2l5794:
 18375  004476  0409               	decf	i2digitalWrite@val,w,c
 18376  004478  100A               	iorwf	i2digitalWrite@val+1,w,c
 18377  00447A  A4D8               	btfss	status,2,c
 18378  00447C  D003               	goto	i2l5798
 18379  00447E  500E               	movf	i2digitalWrite@p,w,c
 18380  004480  128B               	iorwf	3979,f,c	;volatile
 18381  004482  0012               	return	
 18382  004484                     i2l5798:
 18383                           
 18384                           ;iopin.c: 68: else LATC &= p;
 18385  004484  500E               	movf	i2digitalWrite@p,w,c
 18386  004486  168B               	andwf	3979,f,c	;volatile
 18387                           
 18388                           ;iopin.c: 69: break;
 18389  004488  0012               	return	
 18390  00448A                     i2l5800:
 18391  00448A  0409               	decf	i2digitalWrite@val,w,c
 18392  00448C  100A               	iorwf	i2digitalWrite@val+1,w,c
 18393  00448E  A4D8               	btfss	status,2,c
 18394  004490  D003               	goto	i2l5804
 18395  004492  500E               	movf	i2digitalWrite@p,w,c
 18396  004494  128C               	iorwf	3980,f,c	;volatile
 18397  004496  0012               	return	
 18398  004498                     i2l5804:
 18399                           
 18400                           ;iopin.c: 71: else LATD &= p;
 18401  004498  500E               	movf	i2digitalWrite@p,w,c
 18402  00449A  168C               	andwf	3980,f,c	;volatile
 18403                           
 18404                           ;iopin.c: 72: }
 18405  00449C  0012               	return	
 18406  00449E                     i2l5806:
 18407  00449E  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 18408  0044A2  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 18409  0044A6  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 18410  0044AA  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 18411                           
 18412                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18413                           ; Switch size 1, requested type "space"
 18414                           ; Number of cases is 1, Range of values is 0 to 0
 18415                           ; switch strategies available:
 18416                           ; Name         Instructions Cycles
 18417                           ; simple_byte            4     3 (average)
 18418                           ;	Chosen strategy is simple_byte
 18419  0044AE  500C               	movf	??i2_digitalWrite+1,w,c
 18420  0044B0  0A00               	xorlw	0	; case 0
 18421  0044B2  A4D8               	btfss	status,2,c
 18422  0044B4  0012               	return	
 18423                           
 18424                           ; Switch size 1, requested type "space"
 18425                           ; Number of cases is 4, Range of values is 0 to 3
 18426                           ; switch strategies available:
 18427                           ; Name         Instructions Cycles
 18428                           ; simple_byte           13     7 (average)
 18429                           ;	Chosen strategy is simple_byte
 18430  0044B6  500B               	movf	??i2_digitalWrite,w,c
 18431  0044B8  0A00               	xorlw	0	; case 0
 18432  0044BA  B4D8               	btfsc	status,2,c
 18433  0044BC  D7C8               	goto	i2l5782
 18434  0044BE  0A01               	xorlw	1	; case 1
 18435  0044C0  B4D8               	btfsc	status,2,c
 18436  0044C2  D7CF               	goto	i2l5788
 18437  0044C4  0A03               	xorlw	3	; case 2
 18438  0044C6  B4D8               	btfsc	status,2,c
 18439  0044C8  D7D6               	goto	i2l5794
 18440  0044CA  0A01               	xorlw	1	; case 3
 18441  0044CC  A4D8               	btfss	status,2,c
 18442  0044CE  0012               	return	
 18443  0044D0  D7DC               	goto	i2l5800
 18444  0044D2                     __end_ofi2_digitalWrite:
 18445                           	opt stack 0
 18446                           pclatu	equ	0xFFB
 18447                           pclath	equ	0xFFA
 18448                           tblptru	equ	0xFF8
 18449                           tblptrh	equ	0xFF7
 18450                           tblptrl	equ	0xFF6
 18451                           tablat	equ	0xFF5
 18452                           prodh	equ	0xFF4
 18453                           prodl	equ	0xFF3
 18454                           intcon	equ	0xFF2
 18455                           intcon3	equ	0xFF0
 18456                           postinc0	equ	0xFEE
 18457                           fsr0h	equ	0xFEA
 18458                           fsr0l	equ	0xFE9
 18459                           wreg	equ	0xFE8
 18460                           postdec1	equ	0xFE5
 18461                           fsr1h	equ	0xFE2
 18462                           fsr1l	equ	0xFE1
 18463                           indf2	equ	0xFDF
 18464                           postinc2	equ	0xFDE
 18465                           postdec2	equ	0xFDD
 18466                           fsr2h	equ	0xFDA
 18467                           fsr2l	equ	0xFD9
 18468                           status	equ	0xFD8
 18469                           
 18470 ;; *************** function i2___awmod *****************
 18471 ;; Defined at:
 18472 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 18473 ;; Parameters:    Size  Location     Type
 18474 ;;  dividend        2    0[COMRAM] int 
 18475 ;;  divisor         2    2[COMRAM] int 
 18476 ;; Auto vars:     Size  Location     Type
 18477 ;;  __awmod         1    5[COMRAM] unsigned char 
 18478 ;;  __awmod         1    4[COMRAM] unsigned char 
 18479 ;; Return value:  Size  Location     Type
 18480 ;;                  2    0[COMRAM] int 
 18481 ;; Registers used:
 18482 ;;		wreg, status,2, status,0
 18483 ;; Tracked objects:
 18484 ;;		On entry : 0/0
 18485 ;;		On exit  : 0/0
 18486 ;;		Unchanged: 0/0
 18487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18491 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18492 ;;Total ram usage:        6 bytes
 18493 ;; Hardware stack levels used:    1
 18494 ;; This function calls:
 18495 ;;		Nothing
 18496 ;; This function is called by:
 18497 ;;		_servoInterruptService
 18498 ;;		i2_fround
 18499 ;;		i2_scale
 18500 ;; This function uses a non-reentrant model
 18501 ;;
 18502                           
 18503                           	psect	text71
 18504  004BEA                     __ptext71:
 18505                           	opt stack 0
 18506  004BEA                     i2___awmod:
 18507                           	opt stack 20
 18508                           
 18509                           ;incstack = 0
 18510  004BEA  0E00               	movlw	0
 18511  004BEC  6E06               	movwf	i2___awmod@sign,c
 18512  004BEE  AE02               	btfss	i2___awmod@dividend+1,7,c
 18513  004BF0  D006               	goto	i2l5484
 18514  004BF2  6C01               	negf	i2___awmod@dividend,c
 18515  004BF4  1E02               	comf	i2___awmod@dividend+1,f,c
 18516  004BF6  B0D8               	btfsc	status,0,c
 18517  004BF8  2A02               	incf	i2___awmod@dividend+1,f,c
 18518  004BFA  0E01               	movlw	1
 18519  004BFC  6E06               	movwf	i2___awmod@sign,c
 18520  004BFE                     i2l5484:
 18521  004BFE  AE04               	btfss	i2___awmod@divisor+1,7,c
 18522  004C00  D004               	goto	i2l5488
 18523  004C02  6C03               	negf	i2___awmod@divisor,c
 18524  004C04  1E04               	comf	i2___awmod@divisor+1,f,c
 18525  004C06  B0D8               	btfsc	status,0,c
 18526  004C08  2A04               	incf	i2___awmod@divisor+1,f,c
 18527  004C0A                     i2l5488:
 18528  004C0A  5003               	movf	i2___awmod@divisor,w,c
 18529  004C0C  1004               	iorwf	i2___awmod@divisor+1,w,c
 18530  004C0E  B4D8               	btfsc	status,2,c
 18531  004C10  D018               	goto	i2l5504
 18532  004C12  0E01               	movlw	1
 18533  004C14  6E05               	movwf	i2___awmod@counter,c
 18534  004C16  D004               	goto	i2l5494
 18535  004C18                     i2l5492:
 18536  004C18  90D8               	bcf	status,0,c
 18537  004C1A  3603               	rlcf	i2___awmod@divisor,f,c
 18538  004C1C  3604               	rlcf	i2___awmod@divisor+1,f,c
 18539  004C1E  2A05               	incf	i2___awmod@counter,f,c
 18540  004C20                     i2l5494:
 18541  004C20  AE04               	btfss	i2___awmod@divisor+1,7,c
 18542  004C22  D7FA               	goto	i2l5492
 18543  004C24                     i2l5496:
 18544  004C24  5003               	movf	i2___awmod@divisor,w,c
 18545  004C26  5C01               	subwf	i2___awmod@dividend,w,c
 18546  004C28  5004               	movf	i2___awmod@divisor+1,w,c
 18547  004C2A  5802               	subwfb	i2___awmod@dividend+1,w,c
 18548  004C2C  A0D8               	btfss	status,0,c
 18549  004C2E  D004               	goto	i2l5500
 18550  004C30  5003               	movf	i2___awmod@divisor,w,c
 18551  004C32  5E01               	subwf	i2___awmod@dividend,f,c
 18552  004C34  5004               	movf	i2___awmod@divisor+1,w,c
 18553  004C36  5A02               	subwfb	i2___awmod@dividend+1,f,c
 18554  004C38                     i2l5500:
 18555  004C38  90D8               	bcf	status,0,c
 18556  004C3A  3204               	rrcf	i2___awmod@divisor+1,f,c
 18557  004C3C  3203               	rrcf	i2___awmod@divisor,f,c
 18558  004C3E  2E05               	decfsz	i2___awmod@counter,f,c
 18559  004C40  D7F1               	goto	i2l5496
 18560  004C42                     i2l5504:
 18561  004C42  5006               	movf	i2___awmod@sign,w,c
 18562  004C44  B4D8               	btfsc	status,2,c
 18563  004C46  D004               	goto	i2l5508
 18564  004C48  6C01               	negf	i2___awmod@dividend,c
 18565  004C4A  1E02               	comf	i2___awmod@dividend+1,f,c
 18566  004C4C  B0D8               	btfsc	status,0,c
 18567  004C4E  2A02               	incf	i2___awmod@dividend+1,f,c
 18568  004C50                     i2l5508:
 18569  004C50  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 18570  004C54  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 18571  004C58  0012               	return	
 18572  004C5A                     __end_ofi2___awmod:
 18573                           	opt stack 0
 18574                           pclatu	equ	0xFFB
 18575                           pclath	equ	0xFFA
 18576                           tblptru	equ	0xFF8
 18577                           tblptrh	equ	0xFF7
 18578                           tblptrl	equ	0xFF6
 18579                           tablat	equ	0xFF5
 18580                           prodh	equ	0xFF4
 18581                           prodl	equ	0xFF3
 18582                           intcon	equ	0xFF2
 18583                           intcon3	equ	0xFF0
 18584                           postinc0	equ	0xFEE
 18585                           fsr0h	equ	0xFEA
 18586                           fsr0l	equ	0xFE9
 18587                           wreg	equ	0xFE8
 18588                           postdec1	equ	0xFE5
 18589                           fsr1h	equ	0xFE2
 18590                           fsr1l	equ	0xFE1
 18591                           indf2	equ	0xFDF
 18592                           postinc2	equ	0xFDE
 18593                           postdec2	equ	0xFDD
 18594                           fsr2h	equ	0xFDA
 18595                           fsr2l	equ	0xFD9
 18596                           status	equ	0xFD8
 18597                           pclatu	equ	0xFFB
 18598                           pclath	equ	0xFFA
 18599                           tblptru	equ	0xFF8
 18600                           tblptrh	equ	0xFF7
 18601                           tblptrl	equ	0xFF6
 18602                           tablat	equ	0xFF5
 18603                           prodh	equ	0xFF4
 18604                           prodl	equ	0xFF3
 18605                           intcon	equ	0xFF2
 18606                           intcon3	equ	0xFF0
 18607                           postinc0	equ	0xFEE
 18608                           fsr0h	equ	0xFEA
 18609                           fsr0l	equ	0xFE9
 18610                           wreg	equ	0xFE8
 18611                           postdec1	equ	0xFE5
 18612                           fsr1h	equ	0xFE2
 18613                           fsr1l	equ	0xFE1
 18614                           indf2	equ	0xFDF
 18615                           postinc2	equ	0xFDE
 18616                           postdec2	equ	0xFDD
 18617                           fsr2h	equ	0xFDA
 18618                           fsr2l	equ	0xFD9
 18619                           status	equ	0xFD8
 18620                           
 18621                           	psect	rparam
 18622  0000                     pclatu	equ	0xFFB
 18623                           pclath	equ	0xFFA
 18624                           tblptru	equ	0xFF8
 18625                           tblptrh	equ	0xFF7
 18626                           tblptrl	equ	0xFF6
 18627                           tablat	equ	0xFF5
 18628                           prodh	equ	0xFF4
 18629                           prodl	equ	0xFF3
 18630                           intcon	equ	0xFF2
 18631                           intcon3	equ	0xFF0
 18632                           postinc0	equ	0xFEE
 18633                           fsr0h	equ	0xFEA
 18634                           fsr0l	equ	0xFE9
 18635                           wreg	equ	0xFE8
 18636                           postdec1	equ	0xFE5
 18637                           fsr1h	equ	0xFE2
 18638                           fsr1l	equ	0xFE1
 18639                           indf2	equ	0xFDF
 18640                           postinc2	equ	0xFDE
 18641                           postdec2	equ	0xFDD
 18642                           fsr2h	equ	0xFDA
 18643                           fsr2l	equ	0xFD9
 18644                           status	equ	0xFD8
 18645                           
 18646                           	psect	temp
 18647  00007F                     btemp:
 18648                           	opt stack 0
 18649  00007F                     	ds	1
 18650  0000                     int$flags	set	btemp
 18651                           pclatu	equ	0xFFB
 18652                           pclath	equ	0xFFA
 18653                           tblptru	equ	0xFF8
 18654                           tblptrh	equ	0xFF7
 18655                           tblptrl	equ	0xFF6
 18656                           tablat	equ	0xFF5
 18657                           prodh	equ	0xFF4
 18658                           prodl	equ	0xFF3
 18659                           intcon	equ	0xFF2
 18660                           intcon3	equ	0xFF0
 18661                           postinc0	equ	0xFEE
 18662                           fsr0h	equ	0xFEA
 18663                           fsr0l	equ	0xFE9
 18664                           wreg	equ	0xFE8
 18665                           postdec1	equ	0xFE5
 18666                           fsr1h	equ	0xFE2
 18667                           fsr1l	equ	0xFE1
 18668                           indf2	equ	0xFDF
 18669                           postinc2	equ	0xFDE
 18670                           postdec2	equ	0xFDD
 18671                           fsr2h	equ	0xFDA
 18672                           fsr2l	equ	0xFD9
 18673                           status	equ	0xFD8


Data Sizes:
    Strings     398
    Constant    174
    Data        46
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    122     126
    BANK0           128    127     128
    BANK1           256     50     135
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[17]), STR_22(CODE[18]), STR_21(CODE[17]), STR_20(CODE[18]), 
		 -> STR_19(CODE[17]), STR_18(CODE[19]), STR_17(CODE[17]), STR_16(CODE[18]), 
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[8]), STR_10(CODE[11]), STR_9(CODE[25]), STR_8(CODE[15]), 
		 -> STR_7(CODE[17]), STR_6(CODE[20]), STR_5(CODE[15]), STR_4(CODE[14]), 
		 -> STR_3(CODE[20]), STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), 

    pause@message	PTR unsigned char  size(2) Largest target is 25
		 -> STR_9(CODE[25]), STR_8(CODE[15]), STR_7(CODE[17]), STR_6(CODE[20]), 
		 -> STR_4(CODE[14]), STR_3(CODE[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2_scale
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_setAngle
    _pause->_printf
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _pause->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  202277
                                            126 BANK0      1     1      0
                                             46 BANK1      4     4      0
                            ___aldiv
                            ___almod
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0  130269
                                            118 BANK0      2     2      0
                                             30 BANK1     16    16      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                              _pause
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   49779
                                            101 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   49215
                                             85 BANK0     16     6     10
                                              0 BANK1     30    30      0
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11138
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10940
                                             48 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2641
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1676
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3899
                                             70 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1146
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     238
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   19357
                                            118 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18003
                                            108 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   16949
                                             85 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             70 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             33 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2914
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             58 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2367
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2606
                                              8 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             14 BANK0     10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             19    19      0   23753
                                            103 COMRAM    19    19      0
              _servoInterruptService
                         i2_lcdClear
                           i2_printf
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            41    37      4   21657
                                             63 COMRAM    40    36      4
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (10) i2_scale                                            13    10      3    4789
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2_fround                                           16    13      3    4591
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4    1041
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6    1519
                                             20 COMRAM    15     9      6
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2__tdiv_to_l_                                      15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (10) i2__div_to_l_                                       12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (10) i2___lltoft                                          9     5      4     560
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___llmod                                           9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lldiv                                          13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2___fttol                                          15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
                            i2_scale (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftsub                                           6     0      6    1528
                                             57 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1409
                                             45 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (10) i2___ftneg                                           3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) i2___ftge                                            9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) i2_lcdClear                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (12) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1636
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     920
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_lcdClear
     i2_lcdInst
       i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___ftpack
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_scale (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_isdigit
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     32      87       7       52.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7F      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7A      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     185      34        0.0%
DATA                 0      0     185       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 26 11:44:06 2017

                  ___altoft@exp 0090                               _n 007D                   ___altoft@sign 0091  
                   _sortBattery 1FF0                    ___awdiv@sign 008B             ___wmul@multiplicand 0090  
                   __CFG_BORV$3 000000                      i2___ftpack 464C                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$HS 000000                _redirectingServo 015C                    ___ftadd@exp1 00C5  
                  ___ftadd@exp2 00C4                      i2___lltoft 4D26                    ___ftadd@sign 00C3  
                           l222 50E0                             l142 22AC                             l126 2E38  
                           l118 2D50                             l320 4F9A                             l401 4D84  
                           l225 50EE                             l403 4D90                             l404 4D9C  
                           l186 5172                             l295 3A48                             l394 4E1A  
                           l734 0782                             l743 0970                             l695 0902  
                           l991 314E                    __CFG_CPB$OFF 000000                             _PEN 007E2A  
                  __CFG_CPD$OFF 000000                             _SEN 007E28                    ___awmod@sign 0085  
                           wreg 000FE8                      i2_lcdClear 5268                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 009B                    ___ftdiv@sign 00A0                    __CFG_WDT$OFF 000000  
                          l1023 3D6A                            l1120 50A4                            l1050 26DA  
                          l1052 2702                            l1061 27D8                            l1070 2802  
                          l1046 26A0                            l1081 353A                            l1170 463A  
                          l1180 48C2                            l1095 2FC6                            l1088 2F02  
                          l1089 2F46                            l5100 0088                            l5006 4628  
                          l5022 48B0                            l5014 4856                            l5030 4B0E  
                          l5110 0106                            l4400 3D4E                            l5016 4866  
                          l5200 0482                            l5120 0144                            l5112 010C  
                          l4402 3D5C                            l5018 486C                            l5210 04E0  
                          l5130 0190                            l5122 014A                            l5114 0112  
                          l5028 4AFE                            l5124 0162                            l5108 0100  
                          l5140 01C0                            l4414 3D90                            l4502 3300  
                          l5214 0546                            l5134 01A8                            l5118 0138  
                          l5142 0204                            l4408 3D74                            l4440 26E8  
                          l4600 4726                            l5400 0C7A                            l5320 0992  
                          l5232 05E2                            l5216 054C                            l5128 0176  
                          l4434 26AE                            l4522 3388                            l5402 0C8C  
                          l5306 092A                            l5242 0638                            l5090 004E  
                          l6300 3C80                            l4532 33C6                            l4508 333A  
                          l4620 4792                            l4612 4770                            l4604 473A  
                          l4700 1B14                            l5404 0C94                            l5340 0A0E  
                          l5324 09BC                            l5252 066A                            l5236 060A  
                          l5228 0592                            l5180 0380                            l5172 0310  
                          l5156 025E                            l5084 0022                            l4390 3CC0  
                          l4462 2768                            l4446 26F8                            l4526 33A6  
                          l4606 4746                            l5326 09C2                            l5270 0750  
                          l5254 067E                            l5246 0646                            l5190 040A  
                          l5094 0058                            l5406 0CAA                            l6222 2280  
                          l6230 22DE                            l6206 217E                            l6320 41DC  
                          l6312 41A8                            l4392 3CCE                            l4464 2776  
                          l4456 273A                            l4536 33E4                            l4552 44EE  
                          l4608 474C                            l4616 477E                            l5272 0764  
                          l5248 065C                            l5264 0734                            l5184 03AE  
                          l5088 0038                            l6322 41EC                            l4394 3CFE  
                          l4386 3CAC                            l4482 282C                            l4474 27BE  
                          l4466 2784                            l4706 1BDA                            l5362 0A9A  
                          l5338 0A08                            l5354 0A54                            l5282 07AA  
                          l5266 0742                            l5258 06A6                            l5186 03C4  
                          l6218 2254                            l6324 41F2                            l6332 4248  
                          l6316 41C0                            l4492 287A                            l4476 27CC  
                          l4468 2790                            l4812 30CC                            l4804 3078  
                          l4564 4522                            l4580 4572                            l4660 250C  
                          l5380 0B24                            l5356 0A66                            l5292 08D8  
                          l5276 0786                            l5196 0454                            l5188 03F4  
                          l6228 22B6                            l4398 3D1E                            l5702 3E62  
                          l4734 2EAE                            l4566 452E                            l4558 4504  
                          l4718 512A                            l5382 0B30                            l5390 0B70  
                          l5374 0B08                            l5366 0AD2                            l5294 08E6  
                          l5286 07FC                            l6280 3BE8                            l6336 4264  
                          l6328 4236                            l5632 4DD4                            l5712 428C  
                          l5720 430A                            l5704 3E6A                            l4904 4E42  
                          l4824 3104                            l4728 2E74                            l4584 4586  
                          l4576 4564                            l4568 4534                            l5392 0B80  
                          l5368 0ADC                            l6282 3BF8                            l6274 3BBA  
                          l5650 4DF2                            l4834 3134                            l4682 18C4  
                          l5394 0C04                            l5386 0B4A                            l5298 08F4  
                          l6292 3C52                            l6284 3BFE                            l6268 3B9C  
                          l5644 4DEA                            l4916 4F64                            l4860 345E  
                          l5716 42E2                            l5740 399A                            l5732 3922  
                          l4924 4382                            l4836 3144                            l4828 3118  
                          l4764 2F7C                            l4596 4716                            l4668 25F0  
                          l4692 19B0                            l5638 4DDE                            l4846 47C8  
                          l5750 3A12                            l4934 4406                            l4790 3024  
                          l4774 2FAC                            l6296 3C64                            l4848 47D8  
                          l5664 4DA8                            l5744 39D6                            l5736 395E  
                          l5680 3DFA                            l4928 43C2                            l4784 2FFE  
                          l4776 2FBC                            l4768 2F90                            l4688 198A  
                          l4866 3498                            l4970 3650                            l5690 3E2A  
                          l4980 3686                            l4948 35AA                            l5692 3E32  
                          l5684 3E0E                            l4886 34F8                            l4966 363C  
                          l5686 3E16                            l4984 36A2                            l4976 366C  
                          l5696 3E46                            l4978 367C                            l5698 3E4E  
                          l4994 45BE                            l6690 2E1C                            l4996 45CE  
                          l6684 2D66                            l4998 45D4                            _EEIF 007D0C  
         __size_ofi2__div_to_l_ 0128                            STR_1 FFF7                            STR_2 FFA7  
                          STR_3 FE9E                            STR_4 FFD6                            STR_5 FFC7  
                          STR_6 FE8A                            STR_7 FF96                            STR_8 FFB8  
                          STR_9 FE71                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                          u4301 3316                            u4071 264E                            u4081 266C  
                  printf@tmpval 010C                            u4281 32DC                            u5170 02A4  
                          _PEIE 007F96                            u5175 0298                            u4561 2E50  
                          u6154 3946                            u6074 3DD8                            u6155 3940  
                          u6075 3DD0                            u6164 3982                            _RCEN 007E2B  
                          u4741 343A                            u6165 397C                            u4581 2E8A  
                          u6174 39BE                            u5390 077A                            u6175 39B8  
                          u6184 39FA                            u4761 3474                            u6185 39F4  
                          u4851 3586                            u4870 35D0                            u4875 35C6  
                          u7807 5176                            u7817 4EC0                            u7827 4EF6  
                          u7837 513C                            u7847 5152                            u7857 4B92  
                          u7867 4BA0                            u7787 2E14                            u7877 4BD0  
                          u7797 21A0                            u7887 4BDE                            _RSEN 007E29  
                          _main 2C92                            _curr 007B                    ___ftpack@arg 0080  
                          _keys FE59                    ___ftpack@exp 0083                            _time 0174  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 007F                    i2___ftadd@f1 002E  
                  i2___ftadd@f2 0031                    i2___ftge@ff1 0001                    i2___ftge@ff2 0004  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                 __CFG_IESO$OFF 000000                 __end_ofi2_scale 1FF0                    i2___ftneg@f1 0001  
               __end_ofi2_putch 51F2                   __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00AE  
                  i2___ftmul@f1 0015                    i2___ftmul@f2 0018                    ___param_bank 000000  
                  ___ftmul@sign 00AF                    i2___ftsub@f1 003A                    i2___ftsub@f2 003D  
                  i2___fttol@f1 002B                     i2_lcdNibble 4CC0                    ___fttol@exp1 00D4  
                  i2___lltoft@c 0009                    ___fttol@lval 00D0            __end_ofi2_startTimer 4EB8  
          __end_of_angleToPulse 32C6                 __end_of___aldiv 3C92                 __end_of___almod 4276  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 4590                           _EEADR 000FA9                 __end_of___ftadd 28A0  
                         STR_10 FFE4                           STR_11 FFEF                           STR_20 FEFB  
                         STR_12 FED7                           STR_13 FF85                           STR_21 FF30  
                         STR_22 FF0D                           STR_14 FEC5                           STR_23 FF74  
                         STR_15 FF52                           STR_24 FF1F                           STR_16 FEE9  
                         STR_17 FF41                           STR_18 FEB2                           STR_19 FF63  
               __end_of___awmod 479C                 __end_of___ftdiv 3570         ??_servoInterruptService 0010  
               __end_of___ftneg 50B2                 __end_of___lldiv 464C                 __end_of___ftmul 3424  
                         _T0CON 000FD5                 ___awdiv@divisor 0088                           _T1CON 000FCD  
               __end_of___llmod 48D4                 __end_of___ftsub 4E6C                 __end_of___fttol 36B4  
                         _T3CON 000FB1                           i2l401 4E6E                           i2l162 37B2  
                         i2l403 4E7A                           i2l404 4E86                           i2l186 51E0  
                         i2l734 12DC                           i2l743 149C                           i2l695 143C  
               ___awdiv@counter 008A                           i2l991 3B66                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR3H 000FB3  
                         _TMR1L 000FCE                           _TMR3L 000FB2                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                  i2__div_to_l_ 3A50                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                 __end_of_lcdHome 5260  
                  ___lltoft@exp 0090                   _conveyorServo 0148                 __end_of_lcdInst 515E  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000           __size_ofi2_lcdNewline 0008  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_initLCD 4F02                  __CFG_EBTRB$OFF 000000                      i2isdigit@c 0003  
                 ___awtoft@sign 008B                           _angle 0132                 __end_of_dpowers FDEB  
                    i2scale@scl 002A                           _count 0183                           _scale 1752  
               __end_of_isdigit 5134                           _pause 5232                   ___ftpack@sign 0084  
                         _pulse 0160                           _putch 515E                    main@prevTime 012E  
                         pclath 000FFA                           tablat 000FF5                __end_ofi2___ftge 4964  
               __end_of_service 37EE                __end_ofi2___wmul 51AC                           status 000FD8  
              __end_ofi2_fround 2AE6              __size_ofi2___awdiv 0084              __size_ofi2___ftadd 01AC  
            __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000                   i2printf@width 0063  
            __size_ofi2___ftneg 0024              __size_ofi2___lldiv 0082              __size_ofi2___ftmul 00F4  
            __size_ofi2___llmod 0066              __size_ofi2___ftsub 0040              __size_ofi2___fttol 00F4  
              __end_ofi2_printf 1752            __end_of_digitalWrite 3EA2                 __initialization 4F02  
             i2___lldiv@divisor 0005              __size_ofi2_lcdInst 0022                    __end_of_main 2E3A  
             i2___lldiv@counter 000D                    __end_of_keys FE6A                   i2___ftmul@exp 001E  
                    i2printf@ap 0052                      i2printf@cp 004E              __size_ofi2_isdigit 001E  
                   ?i2___ftpack 0001                    i2_lcdNewline 5260                     ?i2___lltoft 0009  
                        ??_main 00FE                   ___fttol@sign1 00CF                   __activetblptr 000002  
          __size_of_digitalRead 0130            __size_of__tdiv_to_l_ 019E                 i2digitalWrite@p 000E  
                   ?i2_lcdClear 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                __end_of___altoft 483A                ___llmod@dividend 008D  
                        ?_scale 00B0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          ?_pause 00E5  
                        _EECON1 000FA6                          _EECON2 000FA7                ___awdiv@dividend 0086  
               i2lcdNibble@data 0002                __end_of___awtoft 4F8C                          ?_putch 0001  
              __end_of___ftpack 3D9E                 i2lcdNibble@temp 0001                __end_of___lltoft 4B72  
                        _INT0IE 007F94                          _INT0IF 007F91                          _INT1IE 007F83  
                        _INT1IF 007F80                    sortBattery@V 012B                          i2l1023 46DA  
                        i2l1120 51C2                          i2l1050 2B54                          i2l1061 2C04  
                        i2l1070 2C20                          i2l1046 2B2A                          i2l1170 4AE4  
                        i2l1180 4CAE                          i2l1095 390E                          i2l1088 3880  
                        i2l1089 38A8                          i2l6000 3908                          i2l6010 4934  
                        i2l5060 46A8                          i2l5052 466A                          i2l6100 4AA6  
                        i2l6006 4904                          i2l5062 46C6                          i2l5054 4674  
                        i2l6016 4960                          i2l5064 46D0                          i2l5056 4692  
                        i2l5048 465C                          i2l6120 4C7C                          i2l6130 4D2C  
                        i2l5500 4C38                          i2l6028 4FE4                          i2l6060 4132  
                        i2l6108 4AD6                          i2l6124 4CA0                          i2l6116 4C6C  
                        i2l6132 4D38                          i2l6070 415C                          i2l6038 40BC  
                        i2l6118 4C78                          i2l5504 4C42                          i2l5520 2B38  
                        i2l6056 4122                          i2l5440 4A04                          i2l6400 0E1C  
                        i2l6074 4172                          i2l6066 414A                          i2l6402 0E5C  
                        i2l5508 4C50                          i2l6068 4156                          i2l5452 4A2A  
                        i2l5612 402E                          i2l5550 2BBE                          i2l5542 2B92  
                        i2l5526 2B62                          i2l5454 4A32                          i2l5446 4A14  
                        i2l5622 4056                          i2l6086 522A                          i2l6502 11C8  
                        i2l6350 0CFA                          i2l5800 448A                          i2l5560 2BF2  
                        i2l5552 2BC8                          i2l6096 4A96                          i2l5472 4A6A  
                        i2l5464 4A52                          i2l5456 4A36                          i2l5608 401E  
                        i2l6600 1522                          i2l6512 11F0                          i2l6440 0FA0  
                        i2l6432 0F3C                          i2l6416 0EAC                          i2l6360 0D2E  
                        i2l6344 0CD6                          i2l5562 2BFC                          i2l5554 2BD0  
                        i2l6098 4AA2                          i2l5618 4046                          i2l6530 12B8  
                        i2l6514 11FE                          i2l6506 11D4                          i2l6450 1012  
                        i2l6370 0D90                          i2l6354 0D00                          i2l5492 4C18  
                        i2l5484 4BFE                          i2l5804 4498                          i2l5820 4E92  
                        i2l5548 2BB4                          i2l5468 4A5C                          i2l6532 12C6  
                        i2l6508 11E4                          i2l6524 12A2                          i2l6460 106A  
                        i2l6444 0FC4                          i2l6380 0DB8                          i2l6372 0D94  
                        i2l6348 0CE8                          i2l5494 4C20                          i2l5806 449E  
                        i2l6622 158C                          i2l6614 155A                          i2l6542 12F8  
                        i2l6526 12AC                          i2l6518 121A                          i2l6470 10BE  
                        i2l6446 0FD4                          i2l6390 0DF6                          i2l6382 0DBE  
                        i2l6374 0D98                          i2l5496 4C24                          i2l5488 4C0A  
                        i2l5568 2C3C                          i2l5920 3AFE                          i2l5912 3ACE  
                        i2l6640 15EC                          i2l6616 156A                          i2l6552 141C  
                        i2l6536 12E0                          i2l6456 1046                          i2l6448 1002  
                        i2l6384 0DD0                          i2l6368 0D8C                          i2l6712 374E  
                        i2l5578 2C6C                          i2l5594 3FEC                          i2l6642 15F4  
                        i2l6650 1622                          i2l6634 15D6                          i2l6626 15B0  
                        i2l6554 1426                          i2l6546 1348                          i2l6474 1122  
                        i2l6394 0E0A                          i2l6378 0DAE                          i2l6706 373E  
                        i2l5932 3B2C                          i2l5588 3FC4                          i2l5844 2AA6  
                        i2l5836 29E6                          i2l6652 162E                          i2l6660 1710  
                        i2l6628 15B8                          i2l6580 14BC                          i2l6492 118E  
                        i2l6476 1126                          i2l6388 0DE2                          i2l6732 379A  
                        i2l6724 3778                          i2l5782 444E                          i2l5942 3B54  
                        i2l6654 16A6                          i2l6662 1720                          i2l6646 1608  
                        i2l6566 1460                          i2l6558 1432                          i2l5792 4470  
                        i2l5944 3B60                          i2l5936 3B3C                          i2l5952 381A  
                        i2l5864 1DD8                          i2l6664 1726                          i2l6584 14E2  
                        i2l6496 11A8                          i2l6488 115E                          i2l6728 3788  
                        i2l5794 4476                          i2l5786 445C                          i2l5882 1FCC  
                        i2l5858 1D34                          i2l6586 14E6                          i2l6666 1736  
                        i2l5788 4462                          i2l5892 3A6E                          i2l5876 1F28  
                        i2l5868 1DFC                          i2l5798 4484                          i2l5958 3846  
                        i2l6598 151E                          i2l5992 38E4                          i2l5898 3A8C  
                        i2l5988 38D4                          i2l5998 38FC                          u600_41 3FAC  
                     ??i2_scale 0027                          u602_41 3FD4                          u642_41 37FE  
                        u580_41 2B0A                          u644_41 382A                          u656_41 40A0  
                        u579_41 2AF6                          _TMR0IE 007F95                          _TMR0IF 007F92  
                     ??i2_putch 0005                          _TMR1IE 007CE8                          _TMR1IF 007CF0  
                        _TMR3IE 007D01                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9          __size_ofi2__tdiv_to_l_ 0132  
              __end_of_lcdClear 5258               _angleToPulse$1336 00E5                  __CFG_XINST$OFF 000000  
                  i2_scale$1534 0027                __end_of__powers_ FE39                          ___ftge 4342  
                     ??___aldiv 0088                       ??___almod 0096                          ___wmul 504C  
                     ??___awdiv 008A                       ??___ftadd 00C0                  __CFG_STVREN$ON 000000  
                     ??___awmod 0084                       ??___ftdiv 0098                       ??___ftneg 0083  
                     ??___lldiv 0088                       ??___ftmul 00A7                       ??___llmod 0095  
                     ??___ftsub 00CC                       ??___fttol 00CA                          _fround 238C  
                        clear_0 4F28                ___awdiv@quotient 008C                          _period 013A  
               ___awmod@divisor 0082                       ??_lcdHome 0084                 ___awmod@counter 0084  
                        _servos 0168                       ??_lcdInst 0082                          _printf 0012  
              __end_of_pinSetup 504C                __end_of_setAngle 4342                  i2___awdiv@sign 000C  
             analogRead@channel 0080           ___ftmul@f3_as_product 00AB                       ??_initLCD 0084  
                     ??_isdigit 0080               __end_ofi2___awdiv 4A74               __end_ofi2___ftadd 2C92  
             __end_ofi2___awmod 4C5A                  i2___ftadd@exp1 0039                  i2___ftadd@exp2 0038  
             __end_ofi2___ftneg 51D0               __end_ofi2___lldiv 4AF6               __end_ofi2___ftmul 4090  
                 setAngle@angle 00EE               __end_ofi2___llmod 4CC0               __end_ofi2___ftsub 500E  
             __end_ofi2___fttol 4184                  i2___ftadd@sign 0037                    __mediumconst FDC2  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                 setAngle@motor 00EC                       ??_service 0068                  i2___awmod@sign 0006  
             __end_ofi2_lcdInst 5214               __end_ofi2_isdigit 5232                      __accesstop 0080  
       __end_of__initialization 4F3A                      ___altoft@c 0088                      ___ftadd@f1 00BA  
                    ___ftadd@f2 00BD             __size_ofi2___ftpack 00AE                  i2printf@tmpval 0056  
                    ___ftge@ff1 0080                      ___ftge@ff2 0083             __size_ofi2___lltoft 005C  
                 ___rparam_used 000001                      ___ftdiv@f1 0092                      ___ftdiv@f2 0095  
                    ___ftdiv@f3 009C                      ___ftneg@f1 0080                      ___awtoft@c 0088  
                i2___ftpack@arg 0001           __size_ofi2_startTimer 004C              i2__tdiv_to_l_@exp1 000F  
             i2___llmod@divisor 0012                  i2___ftpack@exp 0004              i2__tdiv_to_l_@cntr 000E  
             i2___llmod@counter 0016              i2__tdiv_to_l_@quot 000A                      ___ftmul@f1 00A1  
                    ___ftmul@f2 00A4                      ___ftsub@f1 00C6                      ___ftsub@f2 00C9  
                    ___fttol@f1 00C6            __end_of_happynewyear FE71                  __pcstackCOMRAM 0001  
            i2___lldiv@dividend 0001           __size_of_angleToPulse 0166             __size_ofi2_lcdClear 0008  
                  __pidataBANK1 50B2                      ___lltoft@c 0088                   _cylinderMotor 014C  
                i2___ftmul@cntr 0022                   __end_of_scale 1C00                    ?_sortBattery 0001  
                 __end_of_pause 5248                  i2___ftmul@sign 0023                   __end_of_putch 5186  
                   i2printf@idx 004D                     i2printf@len 0050                     i2printf@exp 005A  
                   i2printf@val 005C                  i2___fttol@exp1 0039                  i2___fttol@lval 0035  
                     ?i2___ftge 0001                       ?i2___wmul 000F                   i2__tdiv_to_l_ 37EE  
            __size_of_lcdNibble 0078                      __div_to_l_ 2FD8                     i2putch@data 0005  
                     ?i2_fround 0024                       ?i2_printf 0040                 __div_to_l_@exp1 008B  
               __div_to_l_@cntr 008A                         ??_scale 00B3                  i2___lltoft@exp 0011  
                       ??_pause 00E7                 __div_to_l_@quot 0086                         ??_putch 0084  
            i2___lldiv@quotient 0009                    i2_startTimer 4E6C                      __pbssBANK0 00FF  
                    __pbssBANK1 0160                i2__tdiv_to_l_@f1 0001                i2__tdiv_to_l_@f2 0004  
                  _angleToPulse 3160           __size_of_digitalWrite 0104              __size_of_initTimer 004E  
            __size_of_initServo 008C                      _analogRead 4F8C                   __div_to_l_@f1 0080  
                 __div_to_l_@f2 0083                         ?___ftge 0080                    ?i2_lcdNibble 0001  
                       ?___wmul 008E           sortBattery@resolution 0124                       ?___altoft 0088  
                       ?_fround 00B0                      _lcdNewline 5248                       ?___awtoft 0088  
                     ?___ftpack 0080                         ?_printf 00D5                       ?___lltoft 0088  
                ?i2__tdiv_to_l_ 0001                      ??i2___ftge 0007                      ??i2___wmul 0013  
__size_of_servoInterruptService 00FA   __end_of_servoInterruptService 3F9C                      ??i2_fround 0027  
             i2startTimer@timer 0007                       ?_lcdClear 0001                angleToPulse@a000 00E8  
                    ??i2_printf 0044                angleToPulse@a180 00E1                    _digitalWrite 3D9E  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
       __size_ofi2_digitalWrite 00C8                         i2_scale 1C00                         _V_LIM_C 017E  
                       i2_putch 51D0                       ?_pinSetup 0001                       ?_setAngle 00EC  
             __end_of_lcdNibble 4BEA               __end_of__npowers_ FE12                         __Hparam 0000  
                    _scale$1339 00B3                         __Lparam 0000                         ___aldiv 3B78  
                       ___almod 4184                 __size_of___ftge 00C8                         ___awdiv 44D2  
                       ___ftadd 2638                         ___awmod 46FA                      _readKeypad 50E0  
                       ___ftdiv 3424                         ___ftneg 5082                         ___lldiv 4590  
               __size_of___wmul 0036                         ___ftmul 32C6                         ___llmod 483A  
                       ___ftsub 4E20                         ___fttol 3570                      ??___altoft 008C  
                       __pcinit 4F02                    ??i2___ftpack 0006                      ??___awtoft 008B  
                    ??___ftpack 0085                 __size_of_fround 02AC         i2___ftmul@f3_as_product 001F  
                       __ramtop 1000                         _lcdHome 5258                    ??i2___lltoft 000D  
                       _lcdInst 5134                      ??___lltoft 008C                         __ptext0 2C92  
                       __ptext1 1FF0                         __ptext2 5232                         __ptext3 50E0  
                       __ptext4 0012                         __ptext5 1752                         __ptext6 515E  
                       __ptext7 5248                         __ptext8 510A                         __ptext9 238C  
               __size_of_printf 0CB8                         _padPin1 0150                         _padPin2 0154  
                       _padPin3 0170                   i2_fround$1532 002A                   i2_fround$1533 0027  
                 startTimer@val 0082                         _initLCD 4EB8               __end_of_hexpowers FE59  
                   ?__div_to_l_ 0080                         _lastKey 00FF               __end_of_initTimer 4E20  
             __end_of_initServo 49F0                   i2_isdigit$966 0002                         _dpowers FDC3  
                  i2fround@prec 002D                         _isdigit 510A                ___awmod@dividend 0080  
              ___aldiv@dividend 0080                    ??i2_lcdClear 0005                      ??_lcdClear 0084  
                       _service 0008                  __pintcode_body 36B4            end_of_initialization 4F3A  
                 __Lmediumconst FDC2                         int_func 36B4             i2___wmul@multiplier 000F  
                digitalRead@pin 0080                     ?_analogRead 0080              __end_ofi2___ftpack 46FA  
                    ??_pinSetup 0080                      ??_setAngle 00F0              __end_ofi2___lltoft 4D82  
               ___lldiv@divisor 0084                 ___lldiv@counter 008C                  setAngle@period 00F2  
                       printf@c 011D                         printf@f 00D5                ___aldiv@quotient 008A  
                       postdec1 000FE5                         postdec2 000FDD                 _batteryDetected 0181  
                       postinc0 000FEE                         postinc2 000FDE              __end_ofi2_lcdClear 5270  
                __tdiv_to_l_@f1 0080                  __tdiv_to_l_@f2 0083                 ??i2__tdiv_to_l_ 0007  
                 ??_digitalRead 0082                     ?_lcdNewline 0001                   ??__tdiv_to_l_ 0086  
                     _PORTBbits 000F81            __size_of_sortBattery 039C             _redirectAngle_OTHER 0142  
                  _happynewyear FE6A              angleToPulse@offset 00DD              sortBattery@V_float 011E  
                     i2___awdiv 49F0                       i2___ftadd 2AE6                       i2___awmod 4BEA  
                     i2___ftneg 51AC                       i2___lldiv 4A74                       i2___ftmul 3F9C  
                     i2___llmod 4C5A                       i2___ftsub 4FCE                       i2___fttol 4090  
                    _startTimer 4D82                       i2_lcdInst 51F2                     ___ftdiv@exp 009F  
                   printf@width 0116              i2___llmod@dividend 000E              i2___awdiv@dividend 0007  
               i2___ftpack@sign 0005                       i2_isdigit 5214             __size_of__div_to_l_ 0188  
                   ___ftmul@exp 00AA                     ?_readKeypad 0001                  __end_of___ftge 440A  
                __end_of___wmul 5082            __size_ofi2_lcdNibble 0066                   i2lcdInst@data 0004  
                __end_of_fround 2638                i2___wmul@product 0013                  __end_of_printf 0CCA  
                 i2_printf$1535 004A                    i2printf@flag 0065                    i2printf@fval 0060  
           __size_of_analogRead 0042                    i2printf@prec 0054             start_initialization 4F02  
             __size_ofi2___ftge 0090             __end_of_digitalRead 3A50              i2___awdiv@quotient 000D  
             __size_ofi2___wmul 0026             __end_of__tdiv_to_l_ 2FD8                  initServo@angle 00F8  
                     i2printf@c 0067                       i2printf@f 0040                  initTimer@timer 0080  
               i2___fttol@sign1 0034                  initServo@motor 00F6               __size_ofi2_fround 0246  
                    ?i2___awdiv 0007                      ?i2___ftadd 002E                      ?i2___awmod 0001  
                    ?i2___ftneg 0001                      ?i2___lldiv 0001                      ?i2___ftmul 0015  
                    ?i2___llmod 000E                      ?i2___ftsub 003A                      ?i2___fttol 002B  
             __size_ofi2_printf 0A88                  i2_digitalWrite 440A                      ?i2_lcdInst 0001  
           __size_of_lcdNewline 0008                 ___llmod@divisor 0091                 ___llmod@counter 0095  
                    ?i2_isdigit 0001                        ??___ftge 0086                        ??___wmul 0092  
                   __pdataBANK1 0132                    pause@message 00E5                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 00B3                        ??_printf 00DF               __size_of___altoft 009E  
                    fround@prec 00B9                   ?i2__div_to_l_ 0001               __size_of___awtoft 0044  
             __size_of___ftpack 010C               __size_of___lltoft 007C                     __pbssCOMRAM 007B  
                 __pcstackBANK0 0080                   __pcstackBANK1 0100          __end_ofi2_digitalWrite 44D2  
        sortBattery@targetAngle 0127                     ?_startTimer 0080               __size_of_lcdClear 0008  
           __size_of_readKeypad 002A                        ?i2_scale 0024                        ?i2_putch 0001  
             i2digitalWrite@pin 0007               i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 003E               __size_of_setAngle 00CC                       __pintcode 0008  
                 __pmediumconst FDC2                       _lcdNibble 4B72                        ?___aldiv 0080  
                      ?___almod 008E                        ?___awdiv 0086                        ?___ftadd 00BA  
                      ?___awmod 0080                        ?___ftdiv 0092                        ?___ftneg 0080  
                      ?___lldiv 0080                        ?___ftmul 00A1                        ?___llmod 008D  
                      ?___ftsub 00C6                       __npowers_ FDEB                        ?___fttol 00C6  
                 ?i2_lcdNewline 0001                     _digitalRead 3920                ___almod@dividend 008E  
                      ?_lcdHome 0001                        ?_lcdInst 0001                     __tdiv_to_l_ 2E3A  
                ??i2__div_to_l_ 0007                    ??__div_to_l_ 0086                        ?_initLCD 0001  
               startTimer@timer 0080                        ?_isdigit 0001                        ?_service 0001  
                     _hexpowers FE39                       _initTimer 4DD2                       _initServo 4964  
               ?i2_digitalWrite 0007           _servoInterruptService 3EA2                     ??i2___awdiv 000B  
                   ??i2___ftadd 0034                     ??i2___awmod 0005                     ??i2___ftneg 0004  
                   ??i2___lldiv 0009                     ??i2___ftmul 001B                  __size_of_scale 04AE  
                   ??i2___llmod 0016                     ??i2___ftsub 0040                     ??i2___fttol 002F  
                __size_of_pause 0016                  __size_of_putch 0028                        _AA_float 0144  
               ___aldiv@divisor 0084                     ??i2_lcdInst 0003                 ___aldiv@counter 0088  
                sortBattery@Vcc 0121                  ___wmul@product 0092                        _LATDbits 000F8C  
                  ??_analogRead 0084                     ??i2_isdigit 0001              __end_of__div_to_l_ 3160  
                      i2u700_40 0EE4                        i2u700_45 0EDA                        i2u622_44 4434  
                      i2u622_45 442E                        i2u722_40 12D6                        i2u658_40 40DA  
                      i2u658_45 40D2                        i2u790_47 51F8                        i2u791_47 520A  
                      i2u792_47 4CD8                        i2u793_47 4CE6                        i2u794_47 4D0C  
                      i2u795_47 4D1A                        i2u789_47 51E4                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001                  _padAngle_CLOSE 0134                 i2__div_to_l_@f1 0001  
               i2__div_to_l_@f2 0004                   digitalWrite@p 0087                  ??i2_lcdNewline 0005  
                    service@key 007A                    ??_lcdNewline 0084             __size_of_startTimer 0050  
             angleToPulse@angle 00D5               ___wmul@multiplier 008E                        i2___ftge 48D4  
                      i2___wmul 5186                   lcdNibble@data 0081                      printf@flag 011B  
                 lcdNibble@temp 0080                      printf@fval 0118                      printf@prec 010A  
             i2___awdiv@divisor 0009                        i2_fround 28A0              __end_of_analogRead 4FCE  
                      _V_LIM_AA 017B                        _V_LIM_9V 0178               i2___awdiv@counter 000B  
                      i2_printf 0CCA                      ?_initTimer 0080                      ?_initServo 00F6  
             sortBattery@signal 0129                       copy_data0 4F16              i2___awmod@dividend 0001  
              __size_ofi2_scale 03F0                __size_ofi2_putch 0022              __end_of_lcdNewline 5250  
                 readKeypad@key 0080                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080                   ??_sortBattery 00F6  
              __size_of___aldiv 011A                __size_of___almod 00F2                __size_of___awdiv 00BE  
              __size_of___ftadd 0268                __size_of___awmod 00A2                __size_of___ftdiv 014C  
              __size_of___ftneg 0030           i2___wmul@multiplicand 0011                __size_of___lldiv 00BC  
                      ___altoft 479C                __size_of___ftmul 015E                __size_of___llmod 009A  
              __size_of___ftsub 004C                __size_of___fttol 0144                        ___awtoft 4F48  
                      ___ftpack 3C92                     _fround$1337 00B6                     _fround$1338 00B3  
                      ___lltoft 4AF6           __end_ofi2__tdiv_to_l_ 3920                     _isdigit$966 0081  
              __size_of_lcdHome 0008                __size_of_lcdInst 002A                       setAngle@i 00F4  
              __size_of_initLCD 004A                __size_of_isdigit 002A          ?_servoInterruptService 0001  
                      _lcdClear 5250                        __ptext10 504C                        __ptext11 46FA  
                      __ptext20 4342                        __ptext12 44D2                        __ptext21 5250  
                      __ptext13 2E3A                        __ptext30 3160                        __ptext22 3D9E  
                      __ptext14 2FD8                        __ptext31 3570                        __ptext23 3920  
                      __ptext15 4AF6                        __ptext40 5134                        __ptext32 32C6  
                      __ptext24 4F8C                        __ptext16 483A                        __ptext41 4B72  
                      __ptext33 3424                        __ptext25 500E                        __ptext17 4590  
                      __ptext50 28A0                        __ptext42 4184                        __ptext34 2638  
                      __ptext26 5258                        __ptext18 4E20                        __ptext51 5186  
                      __ptext43 3B78                        __ptext35 4F48                        __ptext27 4964  
                      __ptext19 5082                        __ptext60 4FCE                        __ptext52 3F9C  
                      __ptext36 479C                        __ptext28 4D82                        __ptext61 2AE6  
                      __ptext53 49F0                        __ptext45 0CCA                        __ptext37 3C92  
                      __ptext29 4276                        __ptext70 440A                        __ptext62 464C  
                      __ptext54 37EE                        __ptext46 1C00                        __ptext38 4DD2  
                      __ptext71 4BEA                        __ptext63 51AC                        __ptext55 3A50  
                      __ptext47 51D0                        __ptext39 4EB8                        __ptext64 48D4  
                      __ptext56 4D26                        __ptext48 5260                        __ptext65 5268  
                      __ptext57 4C5A                        __ptext49 5214                        __ptext66 51F2  
                      __ptext58 4A74                        __ptext67 4CC0                        __ptext59 4090  
                      __ptext68 3EA2                        __ptext69 4E6C                        __powers_ FE12  
              __size_of_service 37E6                 i2startTimer@val 0009                 ___almod@divisor 0092  
                 ?i2_startTimer 0007                        _padServo 0158                 ___almod@counter 0096  
            __end_of_readKeypad 510A                   ?_angleToPulse 00D5                   __size_of_main 01A8  
          __end_ofi2__div_to_l_ 3B78                        _pinSetup 500E                        _setAngle 4276  
                      _prevTime 0185                   ??i2_lcdNibble 0001                     ??_lcdNibble 0080  
                 _padAngle_OPEN 0138                        int$flags 007F                       printf@idx 0105  
                     printf@len 0106                       printf@exp 0110                       printf@val 0112  
             i2___awmod@divisor 0003                       putch@data 0084               i2___awmod@counter 0005  
           __end_of_sortBattery 238C                      _INTCONbits 000FF2                   ?_digitalWrite 0080  
                   ??_initTimer 0082                     ??_initServo 00FA                        isdigit@c 0082  
                      scale@scl 00B6                  ??i2_startTimer 000D                    ??_startTimer 0086  
                      intlevel2 0000                __tdiv_to_l_@exp1 008E                __tdiv_to_l_@cntr 008D  
                ??_angleToPulse 00D9            __end_ofi2_lcdNewline 5268                __tdiv_to_l_@quot 0089  
              ___lldiv@dividend 0080                _redirectAngle_AA 013E                _redirectAngle_9V 013C  
                      printf@ap 0108                        printf@cp 0103                     lcdInst@data 0083  
                  ?_digitalRead 0080                    ?__tdiv_to_l_ 0080              __end_of_startTimer 4DD2  
                   _printf$1340 0100             __end_ofi2_lcdNibble 4D26                ??i2_digitalWrite 000B  
              ___lldiv@quotient 0088                  ??_digitalWrite 0084                    ___aldiv@sign 0089  
               _redirectAngle_C 0140                _padAngle_NEUTRAL 0136                 digitalWrite@pin 0080  
               digitalWrite@val 0082               i2__div_to_l_@exp1 000C               i2__div_to_l_@cntr 000B  
                  ___almod@sign 0097               i2__div_to_l_@quot 0007  
